
STM32G0_USBPD_Sink_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023e00  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a50  08023ec0  08023ec0  00033ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025910  08025910  000402e0  2**0
                  CONTENTS
  4 .ARM          00000008  08025910  08025910  00035910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025918  08025918  000402e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025918  08025918  00035918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802591c  0802591c  0003591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08025920  00040000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00004ea4  200002e0  08025c00  000402e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20005184  08025c00  00045184  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY
 12 .comment      000041e7  00000000  00000000  0004030e  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  000444f5  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00044834  2**2
                  CONTENTS, READONLY
 15 .debug_info   00042325  00000000  00000000  00044858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a65f  00000000  00000000  00086b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003850  00000000  00000000  000911e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002bfc  00000000  00000000  00094a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f67f  00000000  00000000  0009762c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00044848  00000000  00000000  000c6cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f62b9  00000000  00000000  0010b4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000de04  00000000  00000000  002017ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0020f5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002e0 	.word	0x200002e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023e94 	.word	0x08023e94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e4 	.word	0x200002e4
 8000104:	08023e94 	.word	0x08023e94

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f023 f961 	bl	80233f0 <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f023 fb1b 	bl	8023772 <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	; (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f012 fe55 	bl	8012e08 <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	; (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	; (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f012 ffde 	bl	8013158 <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	; 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	; 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	; 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	; 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	; 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	200002fc 	.word	0x200002fc

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f014 fc36 	bl	8014af0 <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f014 fc3d 	bl	8014b04 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f014 fcde 	bl	8014c50 <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f014 fb73 	bl	8014980 <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f012 fe95 	bl	8012fcc <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f012 fefa 	bl	80130a0 <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	; 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	; 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f023 f87a 	bl	80233f0 <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	; 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f023 fa33 	bl	8023772 <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	; (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	; (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	; (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	; (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	; (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	; 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	; 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	; 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	; 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	; 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	; (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	; 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	; (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	; (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	; (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	; 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	; (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	; (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	; 0x99
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	20000308 	.word	0x20000308

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	; (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	; 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	; (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	; 0x4c
 800051c:	f023 f91e 	bl	802375c <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	; 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	; 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	; 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	; 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	; (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	; 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	; 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	; 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	; 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	; 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	; (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	; (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	; (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	; 0x28
 80006e0:	202b      	movs	r0, #43	; 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	; 0x28
 80006f4:	205d      	movs	r0, #93	; 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	; (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	; 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	; 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	; (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	; 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	2432      	movs	r4, #50	; 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	; 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	20000308 	.word	0x20000308

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	08024ea0 	.word	0x08024ea0

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	; (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80007c0:	21ff      	movs	r1, #255	; 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	; (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	; 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	; (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	; 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	; 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	; 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	; 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	2132      	movs	r1, #50	; 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	; (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	; 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	; 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	; 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	; 0xcb
 8000916:	638c      	str	r4, [r1, #56]	; 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	; 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	; 0x30
 8000926:	253c      	movs	r5, #60	; 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	; (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	; 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	; (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	; 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	; 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	; (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	20000308 	.word	0x20000308

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	; (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	; (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	; 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	; 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	; 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f022 fe14 	bl	8023772 <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	; 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f022 fdea 	bl	8023772 <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	; 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	; 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	; (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	; (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	; (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	; (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	; 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	; (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	; 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	; 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	; 0x3d
 8000cfe:	f022 fd2d 	bl	802375c <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	; (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	; 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	; 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	20000308 	.word	0x20000308

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	; 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	; 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	; 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	; 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	; 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	; 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	; 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	; 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	; 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	; 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	; 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	; 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	; 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	; 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	; 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	; 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	; 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	; 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	; 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	; 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	; 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	; 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	; 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	; (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	; (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	; (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	; 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	; (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	; (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	; 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	; (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	; (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	; (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	; (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	; 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	; 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	; (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	; (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	; 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	; 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	; 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	; (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	; 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	; (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	; (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	20000308 	.word	0x20000308

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	; 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	; 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	; (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	; 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	; 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	; (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	; 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	; (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	; 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	; 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	; 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	; 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	; 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	; 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	; (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	; 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	; 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	; 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	; 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	; (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	; (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	; (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	; (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	; (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	; 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	; 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	; (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	; 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	; (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	; (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	; 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	; 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	; 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	; 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	; 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	; 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	; 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	; 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	; 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	; 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	; 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	; 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	; 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	; 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	; 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	; 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	; 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	; 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	; 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	; 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	; 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	; 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	; 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	; 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	; 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	; 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	; 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	; 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	; 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	; 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	; 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	; (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	; 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	20000308 	.word	0x20000308
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	; 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	; (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	; 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	; 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	; 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	; 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	; 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	; 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	; 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	; (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	; 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	; (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	; (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	; (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	; 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	; 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	; 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	; 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	; 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	; (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	; 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	; 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	; 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	; 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	; (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	; 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	; 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	; (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	; 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	; 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	; 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	; 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	; 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	; 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	; 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	; 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	; 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	; 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	; (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	; 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	; 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	; (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	; 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	; 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	; 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	; (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	; 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	; 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	; 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	; 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	; 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	; 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	; 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	; 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	; 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	; 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	; 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	; 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	; 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	; 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	; 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	; (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	; (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	; 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	; (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	; 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	; 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	; 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	; 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	; 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	; 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	; 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	; 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	; 0x22
 8002b4e:	2098      	movs	r0, #152	; 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	; 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	; 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	; (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000308 	.word	0x20000308
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	; 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	; (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	; (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	; 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	; 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	; 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	; 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	; 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	; (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	; (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	; 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	; 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	; 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	; (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	; 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	; 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	; (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	; 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	; 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	; 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	; (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	; (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	; 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	; 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	; (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	; 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	; 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	; 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	; 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	; 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	; 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	; (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	; 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	; 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003518:	21f0      	movs	r1, #240	; 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	; 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	; 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	; 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	; 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	; 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	; 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	; (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	; 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	; 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	; 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	; 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	; 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	; 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	; 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	; 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f01f ff04 	bl	802375c <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	; (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	; 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	; 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	; 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	; 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	; 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	; 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	; 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	; 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	; 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	; (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	; 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	; 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	; 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	; 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	; 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	; (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	; 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	; 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	; 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	; 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	; 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	; 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	; (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d6e:	252d      	movs	r5, #45	; 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	; (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	; 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	; 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	; 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	; 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	; 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	; 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	; 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	; 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	; 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	; 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	; (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	; 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	; 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	; 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	; 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	; 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	; 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	; (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	; 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	; 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	; (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	; 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	; 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	; 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	; (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	; 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	; 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	; 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	; (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	; 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	; 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	; 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	; 0x7f
 800411a:	2632      	movs	r6, #50	; 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	; (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	; 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	; 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	; 0x81
 800417a:	2732      	movs	r7, #50	; 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	; 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	; 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	; 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	; 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	; 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	; 0x82
 80041e4:	2732      	movs	r7, #50	; 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	; 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	; 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	; (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	; 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	; 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	; 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	; 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	; 0x83
 8004262:	2732      	movs	r7, #50	; 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	; 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	; 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	; 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	; 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	; 0x85
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	; 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	20000308 	.word	0x20000308

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	; 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	2332      	movs	r3, #50	; 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	; 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	; 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	; 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	; 0x86
 80043ae:	2232      	movs	r2, #50	; 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	; (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	; 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	; 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	; 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	; 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	; 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	; 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	; 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	; 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	; 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	; 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	; 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	; 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	; 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	; 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	20000308 	.word	0x20000308

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	; 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	; 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	; 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	; 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	; 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	; 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	; 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	; 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	; 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	; 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	; 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	; 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	; 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	; 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	; 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	; 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	; 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	; 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	; 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	; 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	; 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	; 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	; 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	; (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	; 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	; 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	; 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045f8:	9016      	str	r0, [sp, #88]	; 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	; 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004610:	9118      	str	r1, [sp, #96]	; 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004620:	aa14      	add	r2, sp, #80	; 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	; 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800464c:	a914      	add	r1, sp, #80	; 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	; 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	; 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	; 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	; (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	; 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f01f f844 	bl	8023772 <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	; 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	; 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	; 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	; 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	; 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f01e ffc6 	bl	8023772 <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	; 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	; 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	; 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	; 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	; 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	; 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	; 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	; (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	; 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	; 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	; 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	; 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	; 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	; 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	; 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	; 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	; 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	; 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	; 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	; 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	; 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	; 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	; 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	; (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	; 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	; 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	; 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	; 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	; 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	; 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	; 0x34
 8004e36:	2031      	movs	r0, #49	; 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	; 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	; 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	; 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	; 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	; 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	; 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	; 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	; (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	; 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	; 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	; 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	; 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	; 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	; 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	; 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	; 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	; (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	; 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	; 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	; 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	; (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	; 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	; 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	; 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	; 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	; 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	; 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	; 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	; (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	; 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	; 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	; 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	; (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	; (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	; 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	; (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	; (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	20000308 	.word	0x20000308

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	; (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	; 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f01d fec9 	bl	80233f0 <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	; 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f01e f883 	bl	8023772 <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f01e f877 	bl	8023764 <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	; (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	; 0x28
 8005682:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	; 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	; (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f00e fbf7 	bl	8013e8c <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	; 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	; (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	; (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	; 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	; (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	; 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f00e fc89 	bl	8014076 <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f00e fc93 	bl	8014094 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000314 	.word	0x20000314

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f00e fca7 	bl	80140e0 <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f00e fcb3 	bl	8014100 <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f00e fc85 	bl	80140b4 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	; (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	; 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f00e fc0e 	bl	8014076 <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f00e fc30 	bl	80140e0 <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	; (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	; 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	; 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	; 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	; (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	; (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	; 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	; 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	; 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f01d ff02 	bl	8023764 <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	; 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	; 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	; 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	; (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	; 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	; 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	; 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	; (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	; 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	; (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	; (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f00f fe93 	bl	80157f8 <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f00e fa85 	bl	8013fea <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000314 	.word	0x20000314
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f00f feea 	bl	80158d4 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	; (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f00f fe1b 	bl	80157f8 <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f00e fa0d 	bl	8013fea <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	; (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	; 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f01d fda0 	bl	8023764 <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	; (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f00e f9bb 	bl	8013fbe <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f00e f9e2 	bl	8014028 <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f00e f9e9 	bl	8014048 <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	; (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f01d fd63 	bl	8023764 <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	; 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f00e f981 	bl	8013faa <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00e fa38 	bl	801411e <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000314 	.word	0x20000314

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f00e fa37 	bl	801413c <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f00e fa32 	bl	801413c <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	a809      	add	r0, sp, #36	; 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	; (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f00e f951 	bl	8013f94 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	; 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f00f fd79 	bl	80157f8 <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	; 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	; 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f00f fdcd 	bl	80158d4 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	a80a      	add	r0, sp, #40	; 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	; 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	; (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	; 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f01d fcee 	bl	8023764 <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	; 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	; (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	; (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	; (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	; 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	; 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	; 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	; 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f00f fd77 	bl	80158d4 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	; 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	; 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f00e f8f7 	bl	8013fea <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	; 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	a809      	add	r0, sp, #36	; 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	; 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	; 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	; 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	; 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	; 0x30
 8005e94:	a80a      	add	r0, sp, #40	; 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	; 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	; (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	; 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	; 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	; (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	; 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	; 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	; 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	; 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	; 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	; 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	; 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	; 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	; 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	; 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	; 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	; 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	; 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	; (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	; 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	; (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	; 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000314 	.word	0x20000314

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	08024eec 	.word	0x08024eec

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f01d fb80 	bl	8023764 <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	; (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	; (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f00d ff4d 	bl	8013f78 <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f00f fb87 	bl	80157f8 <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	; (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	; (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	; 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	; 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	; 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	; (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000314 	.word	0x20000314

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strlen>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	5cc2      	ldrb	r2, [r0, r3]
 80061d0:	3301      	adds	r3, #1
 80061d2:	2a00      	cmp	r2, #0
 80061d4:	d1fb      	bne.n	80061ce <strlen+0x2>
 80061d6:	1e58      	subs	r0, r3, #1
 80061d8:	4770      	bx	lr
	...

080061dc <__gnu_thumb1_case_shi>:
 80061dc:	b403      	push	{r0, r1}
 80061de:	4671      	mov	r1, lr
 80061e0:	0849      	lsrs	r1, r1, #1
 80061e2:	0040      	lsls	r0, r0, #1
 80061e4:	0049      	lsls	r1, r1, #1
 80061e6:	5e09      	ldrsh	r1, [r1, r0]
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	448e      	add	lr, r1
 80061ec:	bc03      	pop	{r0, r1}
 80061ee:	4770      	bx	lr

080061f0 <__udivsi3>:
 80061f0:	2200      	movs	r2, #0
 80061f2:	0843      	lsrs	r3, r0, #1
 80061f4:	428b      	cmp	r3, r1
 80061f6:	d374      	bcc.n	80062e2 <__udivsi3+0xf2>
 80061f8:	0903      	lsrs	r3, r0, #4
 80061fa:	428b      	cmp	r3, r1
 80061fc:	d35f      	bcc.n	80062be <__udivsi3+0xce>
 80061fe:	0a03      	lsrs	r3, r0, #8
 8006200:	428b      	cmp	r3, r1
 8006202:	d344      	bcc.n	800628e <__udivsi3+0x9e>
 8006204:	0b03      	lsrs	r3, r0, #12
 8006206:	428b      	cmp	r3, r1
 8006208:	d328      	bcc.n	800625c <__udivsi3+0x6c>
 800620a:	0c03      	lsrs	r3, r0, #16
 800620c:	428b      	cmp	r3, r1
 800620e:	d30d      	bcc.n	800622c <__udivsi3+0x3c>
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	0209      	lsls	r1, r1, #8
 8006214:	ba12      	rev	r2, r2
 8006216:	0c03      	lsrs	r3, r0, #16
 8006218:	428b      	cmp	r3, r1
 800621a:	d302      	bcc.n	8006222 <__udivsi3+0x32>
 800621c:	1212      	asrs	r2, r2, #8
 800621e:	0209      	lsls	r1, r1, #8
 8006220:	d065      	beq.n	80062ee <__udivsi3+0xfe>
 8006222:	0b03      	lsrs	r3, r0, #12
 8006224:	428b      	cmp	r3, r1
 8006226:	d319      	bcc.n	800625c <__udivsi3+0x6c>
 8006228:	e000      	b.n	800622c <__udivsi3+0x3c>
 800622a:	0a09      	lsrs	r1, r1, #8
 800622c:	0bc3      	lsrs	r3, r0, #15
 800622e:	428b      	cmp	r3, r1
 8006230:	d301      	bcc.n	8006236 <__udivsi3+0x46>
 8006232:	03cb      	lsls	r3, r1, #15
 8006234:	1ac0      	subs	r0, r0, r3
 8006236:	4152      	adcs	r2, r2
 8006238:	0b83      	lsrs	r3, r0, #14
 800623a:	428b      	cmp	r3, r1
 800623c:	d301      	bcc.n	8006242 <__udivsi3+0x52>
 800623e:	038b      	lsls	r3, r1, #14
 8006240:	1ac0      	subs	r0, r0, r3
 8006242:	4152      	adcs	r2, r2
 8006244:	0b43      	lsrs	r3, r0, #13
 8006246:	428b      	cmp	r3, r1
 8006248:	d301      	bcc.n	800624e <__udivsi3+0x5e>
 800624a:	034b      	lsls	r3, r1, #13
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	4152      	adcs	r2, r2
 8006250:	0b03      	lsrs	r3, r0, #12
 8006252:	428b      	cmp	r3, r1
 8006254:	d301      	bcc.n	800625a <__udivsi3+0x6a>
 8006256:	030b      	lsls	r3, r1, #12
 8006258:	1ac0      	subs	r0, r0, r3
 800625a:	4152      	adcs	r2, r2
 800625c:	0ac3      	lsrs	r3, r0, #11
 800625e:	428b      	cmp	r3, r1
 8006260:	d301      	bcc.n	8006266 <__udivsi3+0x76>
 8006262:	02cb      	lsls	r3, r1, #11
 8006264:	1ac0      	subs	r0, r0, r3
 8006266:	4152      	adcs	r2, r2
 8006268:	0a83      	lsrs	r3, r0, #10
 800626a:	428b      	cmp	r3, r1
 800626c:	d301      	bcc.n	8006272 <__udivsi3+0x82>
 800626e:	028b      	lsls	r3, r1, #10
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	4152      	adcs	r2, r2
 8006274:	0a43      	lsrs	r3, r0, #9
 8006276:	428b      	cmp	r3, r1
 8006278:	d301      	bcc.n	800627e <__udivsi3+0x8e>
 800627a:	024b      	lsls	r3, r1, #9
 800627c:	1ac0      	subs	r0, r0, r3
 800627e:	4152      	adcs	r2, r2
 8006280:	0a03      	lsrs	r3, r0, #8
 8006282:	428b      	cmp	r3, r1
 8006284:	d301      	bcc.n	800628a <__udivsi3+0x9a>
 8006286:	020b      	lsls	r3, r1, #8
 8006288:	1ac0      	subs	r0, r0, r3
 800628a:	4152      	adcs	r2, r2
 800628c:	d2cd      	bcs.n	800622a <__udivsi3+0x3a>
 800628e:	09c3      	lsrs	r3, r0, #7
 8006290:	428b      	cmp	r3, r1
 8006292:	d301      	bcc.n	8006298 <__udivsi3+0xa8>
 8006294:	01cb      	lsls	r3, r1, #7
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4152      	adcs	r2, r2
 800629a:	0983      	lsrs	r3, r0, #6
 800629c:	428b      	cmp	r3, r1
 800629e:	d301      	bcc.n	80062a4 <__udivsi3+0xb4>
 80062a0:	018b      	lsls	r3, r1, #6
 80062a2:	1ac0      	subs	r0, r0, r3
 80062a4:	4152      	adcs	r2, r2
 80062a6:	0943      	lsrs	r3, r0, #5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	d301      	bcc.n	80062b0 <__udivsi3+0xc0>
 80062ac:	014b      	lsls	r3, r1, #5
 80062ae:	1ac0      	subs	r0, r0, r3
 80062b0:	4152      	adcs	r2, r2
 80062b2:	0903      	lsrs	r3, r0, #4
 80062b4:	428b      	cmp	r3, r1
 80062b6:	d301      	bcc.n	80062bc <__udivsi3+0xcc>
 80062b8:	010b      	lsls	r3, r1, #4
 80062ba:	1ac0      	subs	r0, r0, r3
 80062bc:	4152      	adcs	r2, r2
 80062be:	08c3      	lsrs	r3, r0, #3
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d301      	bcc.n	80062c8 <__udivsi3+0xd8>
 80062c4:	00cb      	lsls	r3, r1, #3
 80062c6:	1ac0      	subs	r0, r0, r3
 80062c8:	4152      	adcs	r2, r2
 80062ca:	0883      	lsrs	r3, r0, #2
 80062cc:	428b      	cmp	r3, r1
 80062ce:	d301      	bcc.n	80062d4 <__udivsi3+0xe4>
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	4152      	adcs	r2, r2
 80062d6:	0843      	lsrs	r3, r0, #1
 80062d8:	428b      	cmp	r3, r1
 80062da:	d301      	bcc.n	80062e0 <__udivsi3+0xf0>
 80062dc:	004b      	lsls	r3, r1, #1
 80062de:	1ac0      	subs	r0, r0, r3
 80062e0:	4152      	adcs	r2, r2
 80062e2:	1a41      	subs	r1, r0, r1
 80062e4:	d200      	bcs.n	80062e8 <__udivsi3+0xf8>
 80062e6:	4601      	mov	r1, r0
 80062e8:	4152      	adcs	r2, r2
 80062ea:	4610      	mov	r0, r2
 80062ec:	4770      	bx	lr
 80062ee:	e7ff      	b.n	80062f0 <__udivsi3+0x100>
 80062f0:	b501      	push	{r0, lr}
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8f0 	bl	80064d8 <__aeabi_idiv0>
 80062f8:	bd02      	pop	{r1, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)

080062fc <__aeabi_uidivmod>:
 80062fc:	2900      	cmp	r1, #0
 80062fe:	d0f7      	beq.n	80062f0 <__udivsi3+0x100>
 8006300:	e776      	b.n	80061f0 <__udivsi3>
 8006302:	4770      	bx	lr

08006304 <__divsi3>:
 8006304:	4603      	mov	r3, r0
 8006306:	430b      	orrs	r3, r1
 8006308:	d47f      	bmi.n	800640a <__divsi3+0x106>
 800630a:	2200      	movs	r2, #0
 800630c:	0843      	lsrs	r3, r0, #1
 800630e:	428b      	cmp	r3, r1
 8006310:	d374      	bcc.n	80063fc <__divsi3+0xf8>
 8006312:	0903      	lsrs	r3, r0, #4
 8006314:	428b      	cmp	r3, r1
 8006316:	d35f      	bcc.n	80063d8 <__divsi3+0xd4>
 8006318:	0a03      	lsrs	r3, r0, #8
 800631a:	428b      	cmp	r3, r1
 800631c:	d344      	bcc.n	80063a8 <__divsi3+0xa4>
 800631e:	0b03      	lsrs	r3, r0, #12
 8006320:	428b      	cmp	r3, r1
 8006322:	d328      	bcc.n	8006376 <__divsi3+0x72>
 8006324:	0c03      	lsrs	r3, r0, #16
 8006326:	428b      	cmp	r3, r1
 8006328:	d30d      	bcc.n	8006346 <__divsi3+0x42>
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	0209      	lsls	r1, r1, #8
 800632e:	ba12      	rev	r2, r2
 8006330:	0c03      	lsrs	r3, r0, #16
 8006332:	428b      	cmp	r3, r1
 8006334:	d302      	bcc.n	800633c <__divsi3+0x38>
 8006336:	1212      	asrs	r2, r2, #8
 8006338:	0209      	lsls	r1, r1, #8
 800633a:	d065      	beq.n	8006408 <__divsi3+0x104>
 800633c:	0b03      	lsrs	r3, r0, #12
 800633e:	428b      	cmp	r3, r1
 8006340:	d319      	bcc.n	8006376 <__divsi3+0x72>
 8006342:	e000      	b.n	8006346 <__divsi3+0x42>
 8006344:	0a09      	lsrs	r1, r1, #8
 8006346:	0bc3      	lsrs	r3, r0, #15
 8006348:	428b      	cmp	r3, r1
 800634a:	d301      	bcc.n	8006350 <__divsi3+0x4c>
 800634c:	03cb      	lsls	r3, r1, #15
 800634e:	1ac0      	subs	r0, r0, r3
 8006350:	4152      	adcs	r2, r2
 8006352:	0b83      	lsrs	r3, r0, #14
 8006354:	428b      	cmp	r3, r1
 8006356:	d301      	bcc.n	800635c <__divsi3+0x58>
 8006358:	038b      	lsls	r3, r1, #14
 800635a:	1ac0      	subs	r0, r0, r3
 800635c:	4152      	adcs	r2, r2
 800635e:	0b43      	lsrs	r3, r0, #13
 8006360:	428b      	cmp	r3, r1
 8006362:	d301      	bcc.n	8006368 <__divsi3+0x64>
 8006364:	034b      	lsls	r3, r1, #13
 8006366:	1ac0      	subs	r0, r0, r3
 8006368:	4152      	adcs	r2, r2
 800636a:	0b03      	lsrs	r3, r0, #12
 800636c:	428b      	cmp	r3, r1
 800636e:	d301      	bcc.n	8006374 <__divsi3+0x70>
 8006370:	030b      	lsls	r3, r1, #12
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	4152      	adcs	r2, r2
 8006376:	0ac3      	lsrs	r3, r0, #11
 8006378:	428b      	cmp	r3, r1
 800637a:	d301      	bcc.n	8006380 <__divsi3+0x7c>
 800637c:	02cb      	lsls	r3, r1, #11
 800637e:	1ac0      	subs	r0, r0, r3
 8006380:	4152      	adcs	r2, r2
 8006382:	0a83      	lsrs	r3, r0, #10
 8006384:	428b      	cmp	r3, r1
 8006386:	d301      	bcc.n	800638c <__divsi3+0x88>
 8006388:	028b      	lsls	r3, r1, #10
 800638a:	1ac0      	subs	r0, r0, r3
 800638c:	4152      	adcs	r2, r2
 800638e:	0a43      	lsrs	r3, r0, #9
 8006390:	428b      	cmp	r3, r1
 8006392:	d301      	bcc.n	8006398 <__divsi3+0x94>
 8006394:	024b      	lsls	r3, r1, #9
 8006396:	1ac0      	subs	r0, r0, r3
 8006398:	4152      	adcs	r2, r2
 800639a:	0a03      	lsrs	r3, r0, #8
 800639c:	428b      	cmp	r3, r1
 800639e:	d301      	bcc.n	80063a4 <__divsi3+0xa0>
 80063a0:	020b      	lsls	r3, r1, #8
 80063a2:	1ac0      	subs	r0, r0, r3
 80063a4:	4152      	adcs	r2, r2
 80063a6:	d2cd      	bcs.n	8006344 <__divsi3+0x40>
 80063a8:	09c3      	lsrs	r3, r0, #7
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d301      	bcc.n	80063b2 <__divsi3+0xae>
 80063ae:	01cb      	lsls	r3, r1, #7
 80063b0:	1ac0      	subs	r0, r0, r3
 80063b2:	4152      	adcs	r2, r2
 80063b4:	0983      	lsrs	r3, r0, #6
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d301      	bcc.n	80063be <__divsi3+0xba>
 80063ba:	018b      	lsls	r3, r1, #6
 80063bc:	1ac0      	subs	r0, r0, r3
 80063be:	4152      	adcs	r2, r2
 80063c0:	0943      	lsrs	r3, r0, #5
 80063c2:	428b      	cmp	r3, r1
 80063c4:	d301      	bcc.n	80063ca <__divsi3+0xc6>
 80063c6:	014b      	lsls	r3, r1, #5
 80063c8:	1ac0      	subs	r0, r0, r3
 80063ca:	4152      	adcs	r2, r2
 80063cc:	0903      	lsrs	r3, r0, #4
 80063ce:	428b      	cmp	r3, r1
 80063d0:	d301      	bcc.n	80063d6 <__divsi3+0xd2>
 80063d2:	010b      	lsls	r3, r1, #4
 80063d4:	1ac0      	subs	r0, r0, r3
 80063d6:	4152      	adcs	r2, r2
 80063d8:	08c3      	lsrs	r3, r0, #3
 80063da:	428b      	cmp	r3, r1
 80063dc:	d301      	bcc.n	80063e2 <__divsi3+0xde>
 80063de:	00cb      	lsls	r3, r1, #3
 80063e0:	1ac0      	subs	r0, r0, r3
 80063e2:	4152      	adcs	r2, r2
 80063e4:	0883      	lsrs	r3, r0, #2
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d301      	bcc.n	80063ee <__divsi3+0xea>
 80063ea:	008b      	lsls	r3, r1, #2
 80063ec:	1ac0      	subs	r0, r0, r3
 80063ee:	4152      	adcs	r2, r2
 80063f0:	0843      	lsrs	r3, r0, #1
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d301      	bcc.n	80063fa <__divsi3+0xf6>
 80063f6:	004b      	lsls	r3, r1, #1
 80063f8:	1ac0      	subs	r0, r0, r3
 80063fa:	4152      	adcs	r2, r2
 80063fc:	1a41      	subs	r1, r0, r1
 80063fe:	d200      	bcs.n	8006402 <__divsi3+0xfe>
 8006400:	4601      	mov	r1, r0
 8006402:	4152      	adcs	r2, r2
 8006404:	4610      	mov	r0, r2
 8006406:	4770      	bx	lr
 8006408:	e05d      	b.n	80064c6 <__divsi3+0x1c2>
 800640a:	0fca      	lsrs	r2, r1, #31
 800640c:	d000      	beq.n	8006410 <__divsi3+0x10c>
 800640e:	4249      	negs	r1, r1
 8006410:	1003      	asrs	r3, r0, #32
 8006412:	d300      	bcc.n	8006416 <__divsi3+0x112>
 8006414:	4240      	negs	r0, r0
 8006416:	4053      	eors	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	469c      	mov	ip, r3
 800641c:	0903      	lsrs	r3, r0, #4
 800641e:	428b      	cmp	r3, r1
 8006420:	d32d      	bcc.n	800647e <__divsi3+0x17a>
 8006422:	0a03      	lsrs	r3, r0, #8
 8006424:	428b      	cmp	r3, r1
 8006426:	d312      	bcc.n	800644e <__divsi3+0x14a>
 8006428:	22fc      	movs	r2, #252	; 0xfc
 800642a:	0189      	lsls	r1, r1, #6
 800642c:	ba12      	rev	r2, r2
 800642e:	0a03      	lsrs	r3, r0, #8
 8006430:	428b      	cmp	r3, r1
 8006432:	d30c      	bcc.n	800644e <__divsi3+0x14a>
 8006434:	0189      	lsls	r1, r1, #6
 8006436:	1192      	asrs	r2, r2, #6
 8006438:	428b      	cmp	r3, r1
 800643a:	d308      	bcc.n	800644e <__divsi3+0x14a>
 800643c:	0189      	lsls	r1, r1, #6
 800643e:	1192      	asrs	r2, r2, #6
 8006440:	428b      	cmp	r3, r1
 8006442:	d304      	bcc.n	800644e <__divsi3+0x14a>
 8006444:	0189      	lsls	r1, r1, #6
 8006446:	d03a      	beq.n	80064be <__divsi3+0x1ba>
 8006448:	1192      	asrs	r2, r2, #6
 800644a:	e000      	b.n	800644e <__divsi3+0x14a>
 800644c:	0989      	lsrs	r1, r1, #6
 800644e:	09c3      	lsrs	r3, r0, #7
 8006450:	428b      	cmp	r3, r1
 8006452:	d301      	bcc.n	8006458 <__divsi3+0x154>
 8006454:	01cb      	lsls	r3, r1, #7
 8006456:	1ac0      	subs	r0, r0, r3
 8006458:	4152      	adcs	r2, r2
 800645a:	0983      	lsrs	r3, r0, #6
 800645c:	428b      	cmp	r3, r1
 800645e:	d301      	bcc.n	8006464 <__divsi3+0x160>
 8006460:	018b      	lsls	r3, r1, #6
 8006462:	1ac0      	subs	r0, r0, r3
 8006464:	4152      	adcs	r2, r2
 8006466:	0943      	lsrs	r3, r0, #5
 8006468:	428b      	cmp	r3, r1
 800646a:	d301      	bcc.n	8006470 <__divsi3+0x16c>
 800646c:	014b      	lsls	r3, r1, #5
 800646e:	1ac0      	subs	r0, r0, r3
 8006470:	4152      	adcs	r2, r2
 8006472:	0903      	lsrs	r3, r0, #4
 8006474:	428b      	cmp	r3, r1
 8006476:	d301      	bcc.n	800647c <__divsi3+0x178>
 8006478:	010b      	lsls	r3, r1, #4
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	4152      	adcs	r2, r2
 800647e:	08c3      	lsrs	r3, r0, #3
 8006480:	428b      	cmp	r3, r1
 8006482:	d301      	bcc.n	8006488 <__divsi3+0x184>
 8006484:	00cb      	lsls	r3, r1, #3
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	4152      	adcs	r2, r2
 800648a:	0883      	lsrs	r3, r0, #2
 800648c:	428b      	cmp	r3, r1
 800648e:	d301      	bcc.n	8006494 <__divsi3+0x190>
 8006490:	008b      	lsls	r3, r1, #2
 8006492:	1ac0      	subs	r0, r0, r3
 8006494:	4152      	adcs	r2, r2
 8006496:	d2d9      	bcs.n	800644c <__divsi3+0x148>
 8006498:	0843      	lsrs	r3, r0, #1
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__divsi3+0x19e>
 800649e:	004b      	lsls	r3, r1, #1
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	1a41      	subs	r1, r0, r1
 80064a6:	d200      	bcs.n	80064aa <__divsi3+0x1a6>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4663      	mov	r3, ip
 80064ac:	4152      	adcs	r2, r2
 80064ae:	105b      	asrs	r3, r3, #1
 80064b0:	4610      	mov	r0, r2
 80064b2:	d301      	bcc.n	80064b8 <__divsi3+0x1b4>
 80064b4:	4240      	negs	r0, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d500      	bpl.n	80064bc <__divsi3+0x1b8>
 80064ba:	4249      	negs	r1, r1
 80064bc:	4770      	bx	lr
 80064be:	4663      	mov	r3, ip
 80064c0:	105b      	asrs	r3, r3, #1
 80064c2:	d300      	bcc.n	80064c6 <__divsi3+0x1c2>
 80064c4:	4240      	negs	r0, r0
 80064c6:	b501      	push	{r0, lr}
 80064c8:	2000      	movs	r0, #0
 80064ca:	f000 f805 	bl	80064d8 <__aeabi_idiv0>
 80064ce:	bd02      	pop	{r1, pc}

080064d0 <__aeabi_idivmod>:
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0f8      	beq.n	80064c6 <__divsi3+0x1c2>
 80064d4:	e716      	b.n	8006304 <__divsi3>
 80064d6:	4770      	bx	lr

080064d8 <__aeabi_idiv0>:
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			; (mov r8, r8)

080064dc <__aeabi_uldivmod>:
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d10f      	bne.n	8006504 <__aeabi_uldivmod+0x28>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d100      	bne.n	80064ea <__aeabi_uldivmod+0xe>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d002      	beq.n	80064f2 <__aeabi_uldivmod+0x16>
 80064ec:	2100      	movs	r1, #0
 80064ee:	43c9      	mvns	r1, r1
 80064f0:	0008      	movs	r0, r1
 80064f2:	b407      	push	{r0, r1, r2}
 80064f4:	4802      	ldr	r0, [pc, #8]	; (8006500 <__aeabi_uldivmod+0x24>)
 80064f6:	a102      	add	r1, pc, #8	; (adr r1, 8006500 <__aeabi_uldivmod+0x24>)
 80064f8:	1840      	adds	r0, r0, r1
 80064fa:	9002      	str	r0, [sp, #8]
 80064fc:	bd03      	pop	{r0, r1, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	ffffffd9 	.word	0xffffffd9
 8006504:	b403      	push	{r0, r1}
 8006506:	4668      	mov	r0, sp
 8006508:	b501      	push	{r0, lr}
 800650a:	9802      	ldr	r0, [sp, #8]
 800650c:	f000 f806 	bl	800651c <__udivmoddi4>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	469e      	mov	lr, r3
 8006514:	b002      	add	sp, #8
 8006516:	bc0c      	pop	{r2, r3}
 8006518:	4770      	bx	lr
 800651a:	46c0      	nop			; (mov r8, r8)

0800651c <__udivmoddi4>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	4657      	mov	r7, sl
 8006520:	464e      	mov	r6, r9
 8006522:	4645      	mov	r5, r8
 8006524:	46de      	mov	lr, fp
 8006526:	b5e0      	push	{r5, r6, r7, lr}
 8006528:	0004      	movs	r4, r0
 800652a:	000d      	movs	r5, r1
 800652c:	4692      	mov	sl, r2
 800652e:	4699      	mov	r9, r3
 8006530:	b083      	sub	sp, #12
 8006532:	428b      	cmp	r3, r1
 8006534:	d830      	bhi.n	8006598 <__udivmoddi4+0x7c>
 8006536:	d02d      	beq.n	8006594 <__udivmoddi4+0x78>
 8006538:	4649      	mov	r1, r9
 800653a:	4650      	mov	r0, sl
 800653c:	f000 f8d8 	bl	80066f0 <__clzdi2>
 8006540:	0029      	movs	r1, r5
 8006542:	0006      	movs	r6, r0
 8006544:	0020      	movs	r0, r4
 8006546:	f000 f8d3 	bl	80066f0 <__clzdi2>
 800654a:	1a33      	subs	r3, r6, r0
 800654c:	4698      	mov	r8, r3
 800654e:	3b20      	subs	r3, #32
 8006550:	d434      	bmi.n	80065bc <__udivmoddi4+0xa0>
 8006552:	469b      	mov	fp, r3
 8006554:	4653      	mov	r3, sl
 8006556:	465a      	mov	r2, fp
 8006558:	4093      	lsls	r3, r2
 800655a:	4642      	mov	r2, r8
 800655c:	001f      	movs	r7, r3
 800655e:	4653      	mov	r3, sl
 8006560:	4093      	lsls	r3, r2
 8006562:	001e      	movs	r6, r3
 8006564:	42af      	cmp	r7, r5
 8006566:	d83b      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006568:	42af      	cmp	r7, r5
 800656a:	d100      	bne.n	800656e <__udivmoddi4+0x52>
 800656c:	e079      	b.n	8006662 <__udivmoddi4+0x146>
 800656e:	465b      	mov	r3, fp
 8006570:	1ba4      	subs	r4, r4, r6
 8006572:	41bd      	sbcs	r5, r7
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <__udivmoddi4+0x5e>
 8006578:	e076      	b.n	8006668 <__udivmoddi4+0x14c>
 800657a:	2200      	movs	r2, #0
 800657c:	2300      	movs	r3, #0
 800657e:	9200      	str	r2, [sp, #0]
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	2301      	movs	r3, #1
 8006584:	465a      	mov	r2, fp
 8006586:	4093      	lsls	r3, r2
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2301      	movs	r3, #1
 800658c:	4642      	mov	r2, r8
 800658e:	4093      	lsls	r3, r2
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	e029      	b.n	80065e8 <__udivmoddi4+0xcc>
 8006594:	4282      	cmp	r2, r0
 8006596:	d9cf      	bls.n	8006538 <__udivmoddi4+0x1c>
 8006598:	2200      	movs	r2, #0
 800659a:	2300      	movs	r3, #0
 800659c:	9200      	str	r2, [sp, #0]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <__udivmoddi4+0x8e>
 80065a6:	601c      	str	r4, [r3, #0]
 80065a8:	605d      	str	r5, [r3, #4]
 80065aa:	9800      	ldr	r0, [sp, #0]
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	b003      	add	sp, #12
 80065b0:	bcf0      	pop	{r4, r5, r6, r7}
 80065b2:	46bb      	mov	fp, r7
 80065b4:	46b2      	mov	sl, r6
 80065b6:	46a9      	mov	r9, r5
 80065b8:	46a0      	mov	r8, r4
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	4642      	mov	r2, r8
 80065be:	469b      	mov	fp, r3
 80065c0:	2320      	movs	r3, #32
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	4652      	mov	r2, sl
 80065c6:	40da      	lsrs	r2, r3
 80065c8:	4641      	mov	r1, r8
 80065ca:	0013      	movs	r3, r2
 80065cc:	464a      	mov	r2, r9
 80065ce:	408a      	lsls	r2, r1
 80065d0:	0017      	movs	r7, r2
 80065d2:	4642      	mov	r2, r8
 80065d4:	431f      	orrs	r7, r3
 80065d6:	4653      	mov	r3, sl
 80065d8:	4093      	lsls	r3, r2
 80065da:	001e      	movs	r6, r3
 80065dc:	42af      	cmp	r7, r5
 80065de:	d9c3      	bls.n	8006568 <__udivmoddi4+0x4c>
 80065e0:	2200      	movs	r2, #0
 80065e2:	2300      	movs	r3, #0
 80065e4:	9200      	str	r2, [sp, #0]
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	4643      	mov	r3, r8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0d8      	beq.n	80065a0 <__udivmoddi4+0x84>
 80065ee:	07fb      	lsls	r3, r7, #31
 80065f0:	0872      	lsrs	r2, r6, #1
 80065f2:	431a      	orrs	r2, r3
 80065f4:	4646      	mov	r6, r8
 80065f6:	087b      	lsrs	r3, r7, #1
 80065f8:	e00e      	b.n	8006618 <__udivmoddi4+0xfc>
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d101      	bne.n	8006602 <__udivmoddi4+0xe6>
 80065fe:	42a2      	cmp	r2, r4
 8006600:	d80c      	bhi.n	800661c <__udivmoddi4+0x100>
 8006602:	1aa4      	subs	r4, r4, r2
 8006604:	419d      	sbcs	r5, r3
 8006606:	2001      	movs	r0, #1
 8006608:	1924      	adds	r4, r4, r4
 800660a:	416d      	adcs	r5, r5
 800660c:	2100      	movs	r1, #0
 800660e:	3e01      	subs	r6, #1
 8006610:	1824      	adds	r4, r4, r0
 8006612:	414d      	adcs	r5, r1
 8006614:	2e00      	cmp	r6, #0
 8006616:	d006      	beq.n	8006626 <__udivmoddi4+0x10a>
 8006618:	42ab      	cmp	r3, r5
 800661a:	d9ee      	bls.n	80065fa <__udivmoddi4+0xde>
 800661c:	3e01      	subs	r6, #1
 800661e:	1924      	adds	r4, r4, r4
 8006620:	416d      	adcs	r5, r5
 8006622:	2e00      	cmp	r6, #0
 8006624:	d1f8      	bne.n	8006618 <__udivmoddi4+0xfc>
 8006626:	9800      	ldr	r0, [sp, #0]
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	465b      	mov	r3, fp
 800662c:	1900      	adds	r0, r0, r4
 800662e:	4169      	adcs	r1, r5
 8006630:	2b00      	cmp	r3, #0
 8006632:	db24      	blt.n	800667e <__udivmoddi4+0x162>
 8006634:	002b      	movs	r3, r5
 8006636:	465a      	mov	r2, fp
 8006638:	4644      	mov	r4, r8
 800663a:	40d3      	lsrs	r3, r2
 800663c:	002a      	movs	r2, r5
 800663e:	40e2      	lsrs	r2, r4
 8006640:	001c      	movs	r4, r3
 8006642:	465b      	mov	r3, fp
 8006644:	0015      	movs	r5, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	db2a      	blt.n	80066a0 <__udivmoddi4+0x184>
 800664a:	0026      	movs	r6, r4
 800664c:	409e      	lsls	r6, r3
 800664e:	0033      	movs	r3, r6
 8006650:	0026      	movs	r6, r4
 8006652:	4647      	mov	r7, r8
 8006654:	40be      	lsls	r6, r7
 8006656:	0032      	movs	r2, r6
 8006658:	1a80      	subs	r0, r0, r2
 800665a:	4199      	sbcs	r1, r3
 800665c:	9000      	str	r0, [sp, #0]
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	e79e      	b.n	80065a0 <__udivmoddi4+0x84>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d8bc      	bhi.n	80065e0 <__udivmoddi4+0xc4>
 8006666:	e782      	b.n	800656e <__udivmoddi4+0x52>
 8006668:	4642      	mov	r2, r8
 800666a:	2320      	movs	r3, #32
 800666c:	2100      	movs	r1, #0
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	2200      	movs	r2, #0
 8006672:	9100      	str	r1, [sp, #0]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	40da      	lsrs	r2, r3
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	e785      	b.n	800658a <__udivmoddi4+0x6e>
 800667e:	4642      	mov	r2, r8
 8006680:	2320      	movs	r3, #32
 8006682:	1a9b      	subs	r3, r3, r2
 8006684:	002a      	movs	r2, r5
 8006686:	4646      	mov	r6, r8
 8006688:	409a      	lsls	r2, r3
 800668a:	0023      	movs	r3, r4
 800668c:	40f3      	lsrs	r3, r6
 800668e:	4644      	mov	r4, r8
 8006690:	4313      	orrs	r3, r2
 8006692:	002a      	movs	r2, r5
 8006694:	40e2      	lsrs	r2, r4
 8006696:	001c      	movs	r4, r3
 8006698:	465b      	mov	r3, fp
 800669a:	0015      	movs	r5, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	dad4      	bge.n	800664a <__udivmoddi4+0x12e>
 80066a0:	4642      	mov	r2, r8
 80066a2:	002f      	movs	r7, r5
 80066a4:	2320      	movs	r3, #32
 80066a6:	0026      	movs	r6, r4
 80066a8:	4097      	lsls	r7, r2
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	40de      	lsrs	r6, r3
 80066ae:	003b      	movs	r3, r7
 80066b0:	4333      	orrs	r3, r6
 80066b2:	e7cd      	b.n	8006650 <__udivmoddi4+0x134>

080066b4 <__clzsi2>:
 80066b4:	211c      	movs	r1, #28
 80066b6:	2301      	movs	r3, #1
 80066b8:	041b      	lsls	r3, r3, #16
 80066ba:	4298      	cmp	r0, r3
 80066bc:	d301      	bcc.n	80066c2 <__clzsi2+0xe>
 80066be:	0c00      	lsrs	r0, r0, #16
 80066c0:	3910      	subs	r1, #16
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d301      	bcc.n	80066cc <__clzsi2+0x18>
 80066c8:	0a00      	lsrs	r0, r0, #8
 80066ca:	3908      	subs	r1, #8
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d301      	bcc.n	80066d6 <__clzsi2+0x22>
 80066d2:	0900      	lsrs	r0, r0, #4
 80066d4:	3904      	subs	r1, #4
 80066d6:	a202      	add	r2, pc, #8	; (adr r2, 80066e0 <__clzsi2+0x2c>)
 80066d8:	5c10      	ldrb	r0, [r2, r0]
 80066da:	1840      	adds	r0, r0, r1
 80066dc:	4770      	bx	lr
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	02020304 	.word	0x02020304
 80066e4:	01010101 	.word	0x01010101
	...

080066f0 <__clzdi2>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d103      	bne.n	80066fe <__clzdi2+0xe>
 80066f6:	f7ff ffdd 	bl	80066b4 <__clzsi2>
 80066fa:	3020      	adds	r0, #32
 80066fc:	e002      	b.n	8006704 <__clzdi2+0x14>
 80066fe:	0008      	movs	r0, r1
 8006700:	f7ff ffd8 	bl	80066b4 <__clzsi2>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	46c0      	nop			; (mov r8, r8)

08006708 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	601a      	str	r2, [r3, #0]
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006734:	46c0      	nop			; (mov r8, r8)
 8006736:	46bd      	mov	sp, r7
 8006738:	b002      	add	sp, #8
 800673a:	bd80      	pop	{r7, pc}

0800673c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	4252      	negs	r2, r2
 800674a:	611a      	str	r2, [r3, #16]
}
 800674c:	46c0      	nop			; (mov r8, r8)
 800674e:	46bd      	mov	sp, r7
 8006750:	b002      	add	sp, #8
 8006752:	bd80      	pop	{r7, pc}

08006754 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_ADC_ConvCpltCallback>:
SINKData_HandleTypeDef *dhandle = &SNK_data;


// Callback when ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <HAL_ADC_ConvCpltCallback+0x1c>)
 800677a:	2120      	movs	r1, #32
 800677c:	0018      	movs	r0, r3
 800677e:	f005 fc5a 	bl	800c036 <HAL_GPIO_TogglePin>
}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	46bd      	mov	sp, r7
 8006786:	b002      	add	sp, #8
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	50000400 	.word	0x50000400

08006790 <HAL_ADCEx_LevelOutOfWindow2Callback>:

// Callback when ADWG2 (CH7 ISENSE) goes out of range
void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	outputState = OUTPUT_OFF_STATE;
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_ADCEx_LevelOutOfWindow2Callback+0x44>)
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
	//Disable output
	HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	480d      	ldr	r0, [pc, #52]	; (80067d8 <HAL_ADCEx_LevelOutOfWindow2Callback+0x48>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	0019      	movs	r1, r3
 80067a8:	f005 fc28 	bl	800bffc <HAL_GPIO_WritePin>

	//Print the voltage and current to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <HAL_ADCEx_LevelOutOfWindow2Callback+0x4c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2203      	movs	r2, #3
 80067b4:	0019      	movs	r1, r3
 80067b6:	2001      	movs	r0, #1
 80067b8:	f000 ff6c 	bl	8007694 <max7219_PrintIspecial>
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80067bc:	4b07      	ldr	r3, [pc, #28]	; (80067dc <HAL_ADCEx_LevelOutOfWindow2Callback+0x4c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2204      	movs	r2, #4
 80067c4:	0019      	movs	r1, r3
 80067c6:	2002      	movs	r0, #2
 80067c8:	f000 ff64 	bl	8007694 <max7219_PrintIspecial>

}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b002      	add	sp, #8
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000348 	.word	0x20000348
 80067d8:	50000800 	.word	0x50000800
 80067dc:	20000048 	.word	0x20000048

080067e0 <app_init>:


/*
 * Initialization function
 */
void app_init(void){
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0

	g = 5;
 80067e4:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <app_init+0xc0>)
 80067e6:	2205      	movs	r2, #5
 80067e8:	601a      	str	r2, [r3, #0]

	//TIM7 initialization
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80067ea:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <app_init+0xc4>)
 80067ec:	0018      	movs	r0, r3
 80067ee:	f7ff ffb1 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <app_init+0xc4>)
 80067f4:	0018      	movs	r0, r3
 80067f6:	f7ff ffa1 	bl	800673c <LL_TIM_ClearFlag_UPDATE>

	//TIM14 initialization
	LL_TIM_EnableIT_UPDATE(TIM14); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80067fa:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <app_init+0xc8>)
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff ffa9 	bl	8006754 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM14); //Clear update flag on TIMER14
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <app_init+0xc8>)
 8006804:	0018      	movs	r0, r3
 8006806:	f7ff ff99 	bl	800673c <LL_TIM_ClearFlag_UPDATE>

	//TIM3 initialization of encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800680a:	4b28      	ldr	r3, [pc, #160]	; (80068ac <app_init+0xcc>)
 800680c:	213c      	movs	r1, #60	; 0x3c
 800680e:	0018      	movs	r0, r3
 8006810:	f008 fee8 	bl	800f5e4 <HAL_TIM_Encoder_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim3, 30000); //write non 0 value to avoid shift from 0 -> max value
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <app_init+0xcc>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <app_init+0xd0>)
 800681a:	625a      	str	r2, [r3, #36]	; 0x24
	encoderVal = __HAL_TIM_GET_COUNTER(&htim3)/4;
 800681c:	4b23      	ldr	r3, [pc, #140]	; (80068ac <app_init+0xcc>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	001a      	movs	r2, r3
 8006826:	4b23      	ldr	r3, [pc, #140]	; (80068b4 <app_init+0xd4>)
 8006828:	601a      	str	r2, [r3, #0]
	//encoderValPrev = encoderVal;

	//TIM4 initialization
	HAL_TIM_Base_Start(&htim4);
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <app_init+0xd8>)
 800682c:	0018      	movs	r0, r3
 800682e:	f008 fd75 	bl	800f31c <HAL_TIM_Base_Start>

	//Init DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <app_init+0xdc>)
 8006834:	2100      	movs	r1, #0
 8006836:	0018      	movs	r0, r3
 8006838:	f004 fc08 	bl	800b04c <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <app_init+0xe0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	481e      	ldr	r0, [pc, #120]	; (80068bc <app_init+0xdc>)
 8006842:	2200      	movs	r2, #0
 8006844:	2100      	movs	r1, #0
 8006846:	f004 fcb3 	bl	800b1b0 <HAL_DAC_SetValue>

	//Wait for hardware initialization and then turn DB to HIGH (according to TCPP01-M12 datasheet 6.5)
	HAL_Delay(200);
 800684a:	20c8      	movs	r0, #200	; 0xc8
 800684c:	f002 fda0 	bl	8009390 <HAL_Delay>
	HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 8006850:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <app_init+0xe4>)
 8006852:	2201      	movs	r2, #1
 8006854:	2101      	movs	r1, #1
 8006856:	0018      	movs	r0, r3
 8006858:	f005 fbd0 	bl	800bffc <HAL_GPIO_WritePin>

	//Calibrate and start ADC sensing with DMA
	HAL_ADCEx_Calibration_Start(&hadc1);
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <app_init+0xe8>)
 800685e:	0018      	movs	r0, r3
 8006860:	f004 f9fa 	bl	800ac58 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&aADCxConvertedValues, ADC_NUM_OF_SAMPLES);
 8006864:	4919      	ldr	r1, [pc, #100]	; (80068cc <app_init+0xec>)
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <app_init+0xe8>)
 8006868:	2203      	movs	r2, #3
 800686a:	0018      	movs	r0, r3
 800686c:	f003 f9aa 	bl	8009bc4 <HAL_ADC_Start_DMA>

	//Init 7 segment display
	max7219_Init( 7 );
 8006870:	2007      	movs	r0, #7
 8006872:	f000 fdd7 	bl	8007424 <max7219_Init>
	max7219_Decode_On();
 8006876:	f000 fe61 	bl	800753c <max7219_Decode_On>

	//Print decimal points and initial values
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800687a:	4b15      	ldr	r3, [pc, #84]	; (80068d0 <app_init+0xf0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2204      	movs	r2, #4
 8006882:	0019      	movs	r1, r3
 8006884:	2002      	movs	r0, #2
 8006886:	f000 ff05 	bl	8007694 <max7219_PrintIspecial>
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 800688a:	4b11      	ldr	r3, [pc, #68]	; (80068d0 <app_init+0xf0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2203      	movs	r2, #3
 8006892:	0019      	movs	r1, r3
 8006894:	2001      	movs	r0, #1
 8006896:	f000 fefd 	bl	8007694 <max7219_PrintIspecial>

	//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);


}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000344 	.word	0x20000344
 80068a4:	40001400 	.word	0x40001400
 80068a8:	40002000 	.word	0x40002000
 80068ac:	20000488 	.word	0x20000488
 80068b0:	00007530 	.word	0x00007530
 80068b4:	20000320 	.word	0x20000320
 80068b8:	200004d4 	.word	0x200004d4
 80068bc:	20000410 	.word	0x20000410
 80068c0:	20000004 	.word	0x20000004
 80068c4:	50000400 	.word	0x50000400
 80068c8:	2000034c 	.word	0x2000034c
 80068cc:	2000033c 	.word	0x2000033c
 80068d0:	20000048 	.word	0x20000048

080068d4 <app_loop>:


/*
 * Loop function
 */
void app_loop(void){
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af02      	add	r7, sp, #8
			max7219_BlinkDigit(SEGMENT_2, &currentOCP, encoderPress, 500, 4); //pass voltage address to BlinkDigit function
		}
		break;
	}*/

	if (ocp_reset_needed == 1) {
 80068da:	4b44      	ldr	r3, [pc, #272]	; (80069ec <app_loop+0x118>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d113      	bne.n	800690a <app_loop+0x36>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4842      	ldr	r0, [pc, #264]	; (80069f0 <app_loop+0x11c>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	0019      	movs	r1, r3
 80068ec:	f005 fb86 	bl	800bffc <HAL_GPIO_WritePin>
		HAL_Delay(4); //datasheet says 100ns minimum pull down time for resettin alert, but for me even 1ms was not enough
 80068f0:	2004      	movs	r0, #4
 80068f2:	f002 fd4d 	bl	8009390 <HAL_Delay>
		HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 80068f6:	2380      	movs	r3, #128	; 0x80
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	483d      	ldr	r0, [pc, #244]	; (80069f0 <app_loop+0x11c>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	0019      	movs	r1, r3
 8006900:	f005 fb7c 	bl	800bffc <HAL_GPIO_WritePin>
		ocp_reset_needed = 0;
 8006904:	4b39      	ldr	r3, [pc, #228]	; (80069ec <app_loop+0x118>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
	}


	switch(outputState)
 800690a:	4b3a      	ldr	r3, [pc, #232]	; (80069f4 <app_loop+0x120>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <app_loop+0x46>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d03a      	beq.n	800698e <app_loop+0xba>
			break;
		}

	//CDC_Transmit_FS(data, strlen(data));

}
 8006918:	e063      	b.n	80069e2 <app_loop+0x10e>
				switch(currentState)
 800691a:	4b37      	ldr	r3, [pc, #220]	; (80069f8 <app_loop+0x124>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d023      	beq.n	800696c <app_loop+0x98>
 8006924:	dc5c      	bgt.n	80069e0 <app_loop+0x10c>
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <app_loop+0x7a>
 800692a:	2b01      	cmp	r3, #1
 800692c:	d158      	bne.n	80069e0 <app_loop+0x10c>
						max7219_BlinkDigit(SEGMENT_1, &dhandle->voltageSet, dhandle->encoder.selDigit, 500, 3); //pass voltage address to BlinkDigit function
 800692e:	4b33      	ldr	r3, [pc, #204]	; (80069fc <app_loop+0x128>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	0018      	movs	r0, r3
 8006934:	4b31      	ldr	r3, [pc, #196]	; (80069fc <app_loop+0x128>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	b2da      	uxtb	r2, r3
 800693c:	23fa      	movs	r3, #250	; 0xfa
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	2103      	movs	r1, #3
 8006942:	9100      	str	r1, [sp, #0]
 8006944:	0001      	movs	r1, r0
 8006946:	2001      	movs	r0, #1
 8006948:	f000 ff70 	bl	800782c <max7219_BlinkDigit>
					 break;
 800694c:	e01e      	b.n	800698c <app_loop+0xb8>
						max7219_BlinkDigit(SEGMENT_2, &dhandle->currentSet, dhandle->encoder.selDigit, 500, 4); //pass voltage address to BlinkDigit function
 800694e:	4b2b      	ldr	r3, [pc, #172]	; (80069fc <app_loop+0x128>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	1d19      	adds	r1, r3, #4
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <app_loop+0x128>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	b2da      	uxtb	r2, r3
 800695c:	23fa      	movs	r3, #250	; 0xfa
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	2004      	movs	r0, #4
 8006962:	9000      	str	r0, [sp, #0]
 8006964:	2002      	movs	r0, #2
 8006966:	f000 ff61 	bl	800782c <max7219_BlinkDigit>
					break;
 800696a:	e00f      	b.n	800698c <app_loop+0xb8>
						max7219_BlinkDigit(SEGMENT_2, &dhandle->currentOCPSet, dhandle->encoder.selDigit, 500, 4); //pass voltage address to BlinkDigit function
 800696c:	4b23      	ldr	r3, [pc, #140]	; (80069fc <app_loop+0x128>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	0019      	movs	r1, r3
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <app_loop+0x128>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697a:	b2da      	uxtb	r2, r3
 800697c:	23fa      	movs	r3, #250	; 0xfa
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	2004      	movs	r0, #4
 8006982:	9000      	str	r0, [sp, #0]
 8006984:	2002      	movs	r0, #2
 8006986:	f000 ff51 	bl	800782c <max7219_BlinkDigit>
					break;
 800698a:	46c0      	nop			; (mov r8, r8)
			break;
 800698c:	e028      	b.n	80069e0 <app_loop+0x10c>
				uint32_t vol = BSP_PWR_VBUSGetVoltage(0)/10; //divide by 10 t oget centivolts since only 4 digit display..
 800698e:	2000      	movs	r0, #0
 8006990:	f015 fdbc 	bl	801c50c <BSP_PWR_VBUSGetVoltage>
 8006994:	0003      	movs	r3, r0
 8006996:	210a      	movs	r1, #10
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff fcb3 	bl	8006304 <__divsi3>
 800699e:	0003      	movs	r3, r0
 80069a0:	607b      	str	r3, [r7, #4]
				uint32_t cur = BSP_PWR_VBUSGetCurrent(0);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f015 fdd0 	bl	801c548 <BSP_PWR_VBUSGetCurrent>
 80069a8:	0003      	movs	r3, r0
 80069aa:	603b      	str	r3, [r7, #0]
				dhandle ->currentMeas = cur;
 80069ac:	4b13      	ldr	r3, [pc, #76]	; (80069fc <app_loop+0x128>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	611a      	str	r2, [r3, #16]
				dhandle ->voltageMeas = vol;
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <app_loop+0x128>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]
				max7219_PrintIspecial(SEGMENT_1, vol, 3);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2203      	movs	r2, #3
 80069c0:	0019      	movs	r1, r3
 80069c2:	2001      	movs	r0, #1
 80069c4:	f000 fe66 	bl	8007694 <max7219_PrintIspecial>
				max7219_PrintIspecial(SEGMENT_2, cur, 4);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2204      	movs	r2, #4
 80069cc:	0019      	movs	r1, r3
 80069ce:	2002      	movs	r0, #2
 80069d0:	f000 fe60 	bl	8007694 <max7219_PrintIspecial>
				HAL_Delay(500);
 80069d4:	23fa      	movs	r3, #250	; 0xfa
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	0018      	movs	r0, r3
 80069da:	f002 fcd9 	bl	8009390 <HAL_Delay>
			break;
 80069de:	e000      	b.n	80069e2 <app_loop+0x10e>
			break;
 80069e0:	46c0      	nop			; (mov r8, r8)
}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	46bd      	mov	sp, r7
 80069e6:	b002      	add	sp, #8
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	20000324 	.word	0x20000324
 80069f0:	50000400 	.word	0x50000400
 80069f4:	20000348 	.word	0x20000348
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	20000048 	.word	0x20000048

08006a00 <Update_AWD_Thresholds>:
/**
 * Update ADC CH3 AWD Treshold
 * Possibility to update parameters on the fly (read more in HAL_ADC_AnalogWDGConfig declaration)
 * Full config and AWD init in main.c
 */
void Update_AWD_Thresholds(uint32_t low, uint32_t high) {
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b089      	sub	sp, #36	; 0x24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
	// Just update the thresholds for an already configured AWD
	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8006a0a:	2408      	movs	r4, #8
 8006a0c:	193b      	adds	r3, r7, r4
 8006a0e:	0018      	movs	r0, r3
 8006a10:	2318      	movs	r3, #24
 8006a12:	001a      	movs	r2, r3
 8006a14:	2100      	movs	r1, #0
 8006a16:	f01c fdfd 	bl	8023614 <memset>
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2; // Specify which AWD you're updating
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	4a0a      	ldr	r2, [pc, #40]	; (8006a48 <Update_AWD_Thresholds+0x48>)
 8006a1e:	601a      	str	r2, [r3, #0]
	AnalogWDGConfig.HighThreshold = high;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	611a      	str	r2, [r3, #16]
	AnalogWDGConfig.LowThreshold = low;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8006a2c:	193a      	adds	r2, r7, r4
 8006a2e:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <Update_AWD_Thresholds+0x4c>)
 8006a30:	0011      	movs	r1, r2
 8006a32:	0018      	movs	r0, r3
 8006a34:	f003 fc5c 	bl	800a2f0 <HAL_ADC_AnalogWDGConfig>
 8006a38:	1e03      	subs	r3, r0, #0
 8006a3a:	d001      	beq.n	8006a40 <Update_AWD_Thresholds+0x40>
	{
	    Error_Handler();
 8006a3c:	f002 f8c4 	bl	8008bc8 <Error_Handler>
	}
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	bd90      	pop	{r4, r7, pc}
 8006a48:	0017ffff 	.word	0x0017ffff
 8006a4c:	2000034c 	.word	0x2000034c

08006a50 <updateVoltage>:

// Helper function to update voltage
void updateVoltage(SINKData_HandleTypeDef *handle) {
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b091      	sub	sp, #68	; 0x44
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int voltageTemp = handle->voltageSet;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
	voltageTemp += handle->encoder.direction * handle->encoder.increment;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	4353      	muls	r3, r2
 8006a68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a6a:	18d3      	adds	r3, r2, r3
 8006a6c:	637b      	str	r3, [r7, #52]	; 0x34

	//If required temp value is within limits, assign it to voltage else assign limits
	if (voltageTemp > handle->voltageMax) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d204      	bcs.n	8006a82 <updateVoltage+0x32>
		handle->voltageSet = handle->voltageMax;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699a      	ldr	r2, [r3, #24]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e00c      	b.n	8006a9c <updateVoltage+0x4c>

	} else if (voltageTemp < handle->voltageMin) {
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d904      	bls.n	8006a96 <updateVoltage+0x46>
		handle->voltageSet = handle->voltageMin;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e002      	b.n	8006a9c <updateVoltage+0x4c>

	} else {
		handle->voltageSet = voltageTemp;
 8006a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
	}

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_1, handle->voltageSet, 3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2203      	movs	r2, #3
 8006aa2:	0019      	movs	r1, r3
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f000 fdf5 	bl	8007694 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"VBUS selected: %d mV", handle->voltageSet*10);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	0013      	movs	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	189b      	adds	r3, r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	490a      	ldr	r1, [pc, #40]	; (8006ae4 <updateVoltage+0x94>)
 8006aba:	240c      	movs	r4, #12
 8006abc:	193b      	adds	r3, r7, r4
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f01c fd88 	bl	80235d4 <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7ff fb80 	bl	80061cc <strlen>
 8006acc:	0002      	movs	r2, r0
 8006ace:	193b      	adds	r3, r7, r4
 8006ad0:	9200      	str	r2, [sp, #0]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2006      	movs	r0, #6
 8006ad8:	f00b ff70 	bl	80129bc <USBPD_TRACE_Add>

}
 8006adc:	46c0      	nop			; (mov r8, r8)
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b00f      	add	sp, #60	; 0x3c
 8006ae2:	bd90      	pop	{r4, r7, pc}
 8006ae4:	08023edc 	.word	0x08023edc

08006ae8 <updateCurrent>:

// Helper function to update voltage
void updateCurrent(SINKData_HandleTypeDef *handle) {
 8006ae8:	b590      	push	{r4, r7, lr}
 8006aea:	b091      	sub	sp, #68	; 0x44
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int currentTemp = handle->currentSet;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
	currentTemp += handle->encoder.direction * handle->encoder.increment;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	4353      	muls	r3, r2
 8006b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b02:	18d3      	adds	r3, r2, r3
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34

	//If required temp value is within limits, assign it to voltage else assign limits
	if (currentTemp > handle->currentMax) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d204      	bcs.n	8006b1a <updateCurrent+0x32>
		handle->currentSet = handle->currentMax;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	605a      	str	r2, [r3, #4]
 8006b18:	e00c      	b.n	8006b34 <updateCurrent+0x4c>

	} else if (currentTemp < handle->currentMin) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d904      	bls.n	8006b2e <updateCurrent+0x46>
		handle->currentSet = handle->currentMin;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	e002      	b.n	8006b34 <updateCurrent+0x4c>

	} else {
		handle->currentSet = currentTemp;
 8006b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]
	}

	//Update AWD limits
	int isense_Vtrip_mV = (handle->currentSet *G_SENSE*R_SENSE_MOHMS)/1000; // mV  (mA * mOhms * Gain)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	0013      	movs	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	189b      	adds	r3, r3, r2
 8006b3e:	011a      	lsls	r2, r3, #4
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	00d3      	lsls	r3, r2, #3
 8006b44:	001a      	movs	r2, r3
 8006b46:	23fa      	movs	r3, #250	; 0xfa
 8006b48:	0099      	lsls	r1, r3, #2
 8006b4a:	0010      	movs	r0, r2
 8006b4c:	f7ff fb50 	bl	80061f0 <__udivsi3>
 8006b50:	0003      	movs	r3, r0
 8006b52:	633b      	str	r3, [r7, #48]	; 0x30
	isense_rawADCtrip= (isense_Vtrip_mV *4095) / VDDA_APPLI; //value for AWD tershold
 8006b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b56:	0013      	movs	r3, r2
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	1a9b      	subs	r3, r3, r2
 8006b5c:	4916      	ldr	r1, [pc, #88]	; (8006bb8 <updateCurrent+0xd0>)
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7ff fbd0 	bl	8006304 <__divsi3>
 8006b64:	0003      	movs	r3, r0
 8006b66:	001a      	movs	r2, r3
 8006b68:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <updateCurrent+0xd4>)
 8006b6a:	601a      	str	r2, [r3, #0]
	Update_AWD_Thresholds(0, isense_rawADCtrip);
 8006b6c:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <updateCurrent+0xd4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	0019      	movs	r1, r3
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7ff ff44 	bl	8006a00 <Update_AWD_Thresholds>

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, handle->currentSet, 4);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	0019      	movs	r1, r3
 8006b80:	2002      	movs	r0, #2
 8006b82:	f000 fd87 	bl	8007694 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"IBUS selected: %d mA", handle->currentSet);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	490d      	ldr	r1, [pc, #52]	; (8006bc0 <updateCurrent+0xd8>)
 8006b8c:	2408      	movs	r4, #8
 8006b8e:	193b      	adds	r3, r7, r4
 8006b90:	0018      	movs	r0, r3
 8006b92:	f01c fd1f 	bl	80235d4 <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006b96:	193b      	adds	r3, r7, r4
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff fb17 	bl	80061cc <strlen>
 8006b9e:	0002      	movs	r2, r0
 8006ba0:	193b      	adds	r3, r7, r4
 8006ba2:	9200      	str	r2, [sp, #0]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	2006      	movs	r0, #6
 8006baa:	f00b ff07 	bl	80129bc <USBPD_TRACE_Add>
}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	b00f      	add	sp, #60	; 0x3c
 8006bb4:	bd90      	pop	{r4, r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	00000ce4 	.word	0x00000ce4
 8006bbc:	20000008 	.word	0x20000008
 8006bc0:	08023ef4 	.word	0x08023ef4

08006bc4 <updateCurrentOCP>:

// Helper function to update voltage
void updateCurrentOCP(SINKData_HandleTypeDef *handle) {
 8006bc4:	b590      	push	{r4, r7, lr}
 8006bc6:	b093      	sub	sp, #76	; 0x4c
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	6078      	str	r0, [r7, #4]
	//Get direction of encoder turning
	int currentTemp = handle->currentOCPSet;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
	currentTemp += handle->encoder.direction * handle->encoder.increment;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	4353      	muls	r3, r2
 8006bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bde:	18d3      	adds	r3, r2, r3
 8006be0:	63fb      	str	r3, [r7, #60]	; 0x3c

	//If required temp value is within limits, assign it to voltage
	if ( (handle->currentMin <= currentTemp) && (currentTemp <= handle->currentMax) ) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d807      	bhi.n	8006bfc <updateCurrentOCP+0x38>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69da      	ldr	r2, [r3, #28]
 8006bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <updateCurrentOCP+0x38>
		handle->currentOCPSet = currentTemp;
 8006bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
	} else {
		//currentOCPTemp = currentOCP;
	}

	int V_TRIP = (handle->currentOCPSet * R_OCP_MOHMS * G_OCP)/1000; // mV (mA * mOhms * Gain)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	0013      	movs	r3, r2
 8006c02:	015b      	lsls	r3, r3, #5
 8006c04:	1a9b      	subs	r3, r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	189b      	adds	r3, r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	23fa      	movs	r3, #250	; 0xfa
 8006c10:	0099      	lsls	r1, r3, #2
 8006c12:	0010      	movs	r0, r2
 8006c14:	f7ff faec 	bl	80061f0 <__udivsi3>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
	//Convert DAC_OUT voltage to 12B resolution
	int dac_value = (V_TRIP *4095) / VDDA_APPLI;//__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B);
 8006c1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c1e:	0013      	movs	r3, r2
 8006c20:	031b      	lsls	r3, r3, #12
 8006c22:	1a9b      	subs	r3, r3, r2
 8006c24:	4915      	ldr	r1, [pc, #84]	; (8006c7c <updateCurrentOCP+0xb8>)
 8006c26:	0018      	movs	r0, r3
 8006c28:	f7ff fb6c 	bl	8006304 <__divsi3>
 8006c2c:	0003      	movs	r3, r0
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
	//Write output with DAC..
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	4813      	ldr	r0, [pc, #76]	; (8006c80 <updateCurrentOCP+0xbc>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	2100      	movs	r1, #0
 8006c38:	f004 faba 	bl	800b1b0 <HAL_DAC_SetValue>

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, handle->currentOCPSet, 4);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2204      	movs	r2, #4
 8006c42:	0019      	movs	r1, r3
 8006c44:	2002      	movs	r0, #2
 8006c46:	f000 fd25 	bl	8007694 <max7219_PrintIspecial>

	//Print to debug
	char _str[40];
	sprintf(_str,"IOCP selected: %d mA", handle->currentOCPSet);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	490d      	ldr	r1, [pc, #52]	; (8006c84 <updateCurrentOCP+0xc0>)
 8006c50:	240c      	movs	r4, #12
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	0018      	movs	r0, r3
 8006c56:	f01c fcbd 	bl	80235d4 <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006c5a:	193b      	adds	r3, r7, r4
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f7ff fab5 	bl	80061cc <strlen>
 8006c62:	0002      	movs	r2, r0
 8006c64:	193b      	adds	r3, r7, r4
 8006c66:	9200      	str	r2, [sp, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	2006      	movs	r0, #6
 8006c6e:	f00b fea5 	bl	80129bc <USBPD_TRACE_Add>

}
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	46bd      	mov	sp, r7
 8006c76:	b011      	add	sp, #68	; 0x44
 8006c78:	bd90      	pop	{r4, r7, pc}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	00000ce4 	.word	0x00000ce4
 8006c80:	20000410 	.word	0x20000410
 8006c84:	08023f0c 	.word	0x08023f0c

08006c88 <encoder_turn_isr>:

/**
 * TIM2 encoder turning interrupt service routine
 */
void encoder_turn_isr(void) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
	//Get the TIM3 (encoder) value from CNT register
	encoderVal = (TIM3 -> CNT) >> 2;
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <encoder_turn_isr+0x8c>)
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	089b      	lsrs	r3, r3, #2
 8006c92:	001a      	movs	r2, r3
 8006c94:	4b20      	ldr	r3, [pc, #128]	; (8006d18 <encoder_turn_isr+0x90>)
 8006c96:	601a      	str	r2, [r3, #0]

	dhandle->encoder.curValue= encoderVal;
 8006c98:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <encoder_turn_isr+0x94>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1e      	ldr	r2, [pc, #120]	; (8006d18 <encoder_turn_isr+0x90>)
 8006c9e:	6812      	ldr	r2, [r2, #0]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

	if (encoderVal != dhandle->encoder.prevValue){
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	; (8006d1c <encoder_turn_isr+0x94>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca8:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <encoder_turn_isr+0x90>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d02e      	beq.n	8006d0e <encoder_turn_isr+0x86>

		dhandle->encoder.direction = (encoderVal < dhandle->encoder.prevValue) ? 1 : -1;
 8006cb0:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <encoder_turn_isr+0x94>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cb6:	4b18      	ldr	r3, [pc, #96]	; (8006d18 <encoder_turn_isr+0x90>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	dd01      	ble.n	8006cc2 <encoder_turn_isr+0x3a>
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	e001      	b.n	8006cc6 <encoder_turn_isr+0x3e>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	425a      	negs	r2, r3
 8006cc6:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <encoder_turn_isr+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	635a      	str	r2, [r3, #52]	; 0x34

		switch(currentState)
 8006ccc:	4b14      	ldr	r3, [pc, #80]	; (8006d20 <encoder_turn_isr+0x98>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d010      	beq.n	8006cf8 <encoder_turn_isr+0x70>
 8006cd6:	dc15      	bgt.n	8006d04 <encoder_turn_isr+0x7c>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <encoder_turn_isr+0x64>
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d111      	bne.n	8006d04 <encoder_turn_isr+0x7c>
		{
		case ADJUSTMENT_VOLTAGE:
		{
			updateVoltage(dhandle);
 8006ce0:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <encoder_turn_isr+0x94>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f7ff feb3 	bl	8006a50 <updateVoltage>
		}
		break;
 8006cea:	e00b      	b.n	8006d04 <encoder_turn_isr+0x7c>

		case ADJUSTMENT_CURRENT:
		{
			updateCurrent(dhandle);
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <encoder_turn_isr+0x94>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff fef9 	bl	8006ae8 <updateCurrent>

		}
		break;
 8006cf6:	e005      	b.n	8006d04 <encoder_turn_isr+0x7c>

		case ADJUSTMENT_CURRENT_OCP:
		{
			updateCurrentOCP(dhandle);
 8006cf8:	4b08      	ldr	r3, [pc, #32]	; (8006d1c <encoder_turn_isr+0x94>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7ff ff61 	bl	8006bc4 <updateCurrentOCP>
		}
		break;
 8006d02:	46c0      	nop			; (mov r8, r8)

		}

		//Save TIM2 CNT value to ValPrev
		dhandle->encoder.prevValue = encoderVal;
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <encoder_turn_isr+0x94>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a03      	ldr	r2, [pc, #12]	; (8006d18 <encoder_turn_isr+0x90>)
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40000400 	.word	0x40000400
 8006d18:	20000320 	.word	0x20000320
 8006d1c:	20000048 	.word	0x20000048
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <enc_toggle_units_isr>:


/**
 * Button interrupt service routine
 */
void enc_toggle_units_isr(void){
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	af02      	add	r7, sp, #8
	/*
	const char response[] = "POWER is ON\r\n";
	        LPUART_Transmit(LPUART2, (const uint8_t*)response, sizeof(response) - 1);*/

	//Mask unwanted button interrupts caused by debouncing on exti line 3 (PD8)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM8);
 8006d2a:	4a4f      	ldr	r2, [pc, #316]	; (8006e68 <enc_toggle_units_isr+0x144>)
 8006d2c:	2380      	movs	r3, #128	; 0x80
 8006d2e:	58d3      	ldr	r3, [r2, r3]
 8006d30:	494d      	ldr	r1, [pc, #308]	; (8006e68 <enc_toggle_units_isr+0x144>)
 8006d32:	4a4e      	ldr	r2, [pc, #312]	; (8006e6c <enc_toggle_units_isr+0x148>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	2280      	movs	r2, #128	; 0x80
 8006d38:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006d3a:	4b4d      	ldr	r3, [pc, #308]	; (8006e70 <enc_toggle_units_isr+0x14c>)
 8006d3c:	22c8      	movs	r2, #200	; 0xc8
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006d40:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <enc_toggle_units_isr+0x14c>)
 8006d42:	2100      	movs	r1, #0
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7ff fced 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006d4a:	4b49      	ldr	r3, [pc, #292]	; (8006e70 <enc_toggle_units_isr+0x14c>)
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f7ff fcdb 	bl	8006708 <LL_TIM_EnableCounter>

	//Decrement encoderPress value if higher than 4
	if (dhandle->encoder.selDigit > 1){
 8006d52:	4b48      	ldr	r3, [pc, #288]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	dd05      	ble.n	8006d68 <enc_toggle_units_isr+0x44>
		dhandle->encoder.selDigit--;
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d62:	3a01      	subs	r2, #1
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d66:	e003      	b.n	8006d70 <enc_toggle_units_isr+0x4c>
	}
	else {
		dhandle->encoder.selDigit = 4;
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	//Choose addition value based on encoderPress val and current ADJUSTMENT_STATE (voltage/current)
	int val;
	switch (currentState){
 8006d70:	4b41      	ldr	r3, [pc, #260]	; (8006e78 <enc_toggle_units_isr+0x154>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d020      	beq.n	8006dbc <enc_toggle_units_isr+0x98>
 8006d7a:	dc3e      	bgt.n	8006dfa <enc_toggle_units_isr+0xd6>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01d      	beq.n	8006dbc <enc_toggle_units_isr+0x98>
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d13a      	bne.n	8006dfa <enc_toggle_units_isr+0xd6>
		case ADJUSTMENT_VOLTAGE:
			switch (dhandle->encoder.selDigit) {
 8006d84:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d011      	beq.n	8006db2 <enc_toggle_units_isr+0x8e>
 8006d8e:	dc31      	bgt.n	8006df4 <enc_toggle_units_isr+0xd0>
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d00b      	beq.n	8006dac <enc_toggle_units_isr+0x88>
 8006d94:	dc2e      	bgt.n	8006df4 <enc_toggle_units_isr+0xd0>
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d002      	beq.n	8006da0 <enc_toggle_units_isr+0x7c>
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d003      	beq.n	8006da6 <enc_toggle_units_isr+0x82>
			case 1: val = 2; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006d9e:	e029      	b.n	8006df4 <enc_toggle_units_isr+0xd0>
			case 1: val = 2; break;
 8006da0:	2302      	movs	r3, #2
 8006da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da4:	e009      	b.n	8006dba <enc_toggle_units_isr+0x96>
			case 2: val = 10; break;
 8006da6:	230a      	movs	r3, #10
 8006da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006daa:	e006      	b.n	8006dba <enc_toggle_units_isr+0x96>
			case 3: val = 100; break;
 8006dac:	2364      	movs	r3, #100	; 0x64
 8006dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db0:	e003      	b.n	8006dba <enc_toggle_units_isr+0x96>
			case 4: val = 1000; break;
 8006db2:	23fa      	movs	r3, #250	; 0xfa
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db8:	46c0      	nop			; (mov r8, r8)
		 break;
 8006dba:	e01b      	b.n	8006df4 <enc_toggle_units_isr+0xd0>
		case ADJUSTMENT_CURRENT_OCP:
		case ADJUSTMENT_CURRENT:
			switch (dhandle->encoder.selDigit) {
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d011      	beq.n	8006dea <enc_toggle_units_isr+0xc6>
 8006dc6:	dc17      	bgt.n	8006df8 <enc_toggle_units_isr+0xd4>
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d00b      	beq.n	8006de4 <enc_toggle_units_isr+0xc0>
 8006dcc:	dc14      	bgt.n	8006df8 <enc_toggle_units_isr+0xd4>
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d002      	beq.n	8006dd8 <enc_toggle_units_isr+0xb4>
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d003      	beq.n	8006dde <enc_toggle_units_isr+0xba>
			case 1: val = 5; break;
			case 2: val = 10; break;
			case 3: val = 100; break;
			case 4: val = 1000; break;
			}
		 break;
 8006dd6:	e00f      	b.n	8006df8 <enc_toggle_units_isr+0xd4>
			case 1: val = 5; break;
 8006dd8:	2305      	movs	r3, #5
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ddc:	e009      	b.n	8006df2 <enc_toggle_units_isr+0xce>
			case 2: val = 10; break;
 8006dde:	230a      	movs	r3, #10
 8006de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de2:	e006      	b.n	8006df2 <enc_toggle_units_isr+0xce>
			case 3: val = 100; break;
 8006de4:	2364      	movs	r3, #100	; 0x64
 8006de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de8:	e003      	b.n	8006df2 <enc_toggle_units_isr+0xce>
			case 4: val = 1000; break;
 8006dea:	23fa      	movs	r3, #250	; 0xfa
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df0:	46c0      	nop			; (mov r8, r8)
		 break;
 8006df2:	e001      	b.n	8006df8 <enc_toggle_units_isr+0xd4>
		 break;
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	e000      	b.n	8006dfa <enc_toggle_units_isr+0xd6>
		 break;
 8006df8:	46c0      	nop			; (mov r8, r8)
	}

	dhandle->encoder.increment = val;
 8006dfa:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <enc_toggle_units_isr+0x150>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30

	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 8006e02:	2000      	movs	r0, #0
 8006e04:	f015 fb82 	bl	801c50c <BSP_PWR_VBUSGetVoltage>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	f015 fb9b 	bl	801c548 <BSP_PWR_VBUSGetCurrent>
 8006e12:	0003      	movs	r3, r0
 8006e14:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 8006e16:	2000      	movs	r0, #0
 8006e18:	f015 fcba 	bl	801c790 <BSP_PWR_VBUSGetCurrentOCP>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8006e20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <enc_toggle_units_isr+0x158>)
 8006e24:	0038      	movs	r0, r7
 8006e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	000b      	movs	r3, r1
 8006e30:	213c      	movs	r1, #60	; 0x3c
 8006e32:	f01c fb9b 	bl	802356c <sniprintf>
 8006e36:	0003      	movs	r3, r0
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006e3a:	003b      	movs	r3, r7
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f7ff f9c5 	bl	80061cc <strlen>
 8006e42:	0002      	movs	r2, r0
 8006e44:	003b      	movs	r3, r7
 8006e46:	9200      	str	r2, [sp, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2006      	movs	r0, #6
 8006e4e:	f00b fdb5 	bl	80129bc <USBPD_TRACE_Add>

	//Erase btn (PC3) interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <enc_toggle_units_isr+0x144>)
 8006e54:	2208      	movs	r2, #8
 8006e56:	60da      	str	r2, [r3, #12]
 8006e58:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <enc_toggle_units_isr+0x144>)
 8006e5a:	2208      	movs	r2, #8
 8006e5c:	611a      	str	r2, [r3, #16]

}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b014      	add	sp, #80	; 0x50
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	40021800 	.word	0x40021800
 8006e6c:	fffffeff 	.word	0xfffffeff
 8006e70:	40001400 	.word	0x40001400
 8006e74:	20000048 	.word	0x20000048
 8006e78:	2000000c 	.word	0x2000000c
 8006e7c:	08023f24 	.word	0x08023f24

08006e80 <tim7_btn_isr>:

/*
 * Timer7 interrupt routine for button debouncing
 */
void tim7_btn_isr(void){
 8006e80:	b580      	push	{r7, lr}
 8006e82:	af00      	add	r7, sp, #0
	//Unmask exti line 1, 2 and 3
	EXTI->IMR1 |= EXTI_IMR1_IM8; //unmask interrupt mask register on exti line 3 (PD8)
 8006e84:	4a0f      	ldr	r2, [pc, #60]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006e86:	2380      	movs	r3, #128	; 0x80
 8006e88:	58d3      	ldr	r3, [r2, r3]
 8006e8a:	490e      	ldr	r1, [pc, #56]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	0052      	lsls	r2, r2, #1
 8006e90:	4313      	orrs	r3, r2
 8006e92:	2280      	movs	r2, #128	; 0x80
 8006e94:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask interrupt mask register on exti line 2 (PB2)
 8006e96:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	58d3      	ldr	r3, [r2, r3]
 8006e9c:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	2280      	movs	r2, #128	; 0x80
 8006ea4:	508b      	str	r3, [r1, r2]
	EXTI->IMR1 |= EXTI_IMR1_IM1; //unmask interrupt mask register on exti line 1 (PB1)
 8006ea6:	4a07      	ldr	r2, [pc, #28]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006ea8:	2380      	movs	r3, #128	; 0x80
 8006eaa:	58d3      	ldr	r3, [r2, r3]
 8006eac:	4905      	ldr	r1, [pc, #20]	; (8006ec4 <tim7_btn_isr+0x44>)
 8006eae:	2202      	movs	r2, #2
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	2280      	movs	r2, #128	; 0x80
 8006eb4:	508b      	str	r3, [r1, r2]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 8006eb6:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <tim7_btn_isr+0x48>)
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7ff fc3f 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40021800 	.word	0x40021800
 8006ec8:	40001400 	.word	0x40001400

08006ecc <tim14_isr>:

/*
 * Timer interrupt routine
 */
void tim14_isr(void){
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
	//Unmask exti line 6
	EXTI->IMR1 |= EXTI_IMR1_IM6; //unmask interrupt (PB6)
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <tim14_isr+0x28>)
 8006ed2:	2380      	movs	r3, #128	; 0x80
 8006ed4:	58d3      	ldr	r3, [r2, r3]
 8006ed6:	4907      	ldr	r1, [pc, #28]	; (8006ef4 <tim14_isr+0x28>)
 8006ed8:	2240      	movs	r2, #64	; 0x40
 8006eda:	4313      	orrs	r3, r2
 8006edc:	2280      	movs	r2, #128	; 0x80
 8006ede:	508b      	str	r3, [r1, r2]

	//Alert set during turning off/on output, we need to clean it
	ocp_reset_needed = 1;
 8006ee0:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <tim14_isr+0x2c>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

	//Clear update flag on TIM7
	LL_TIM_ClearFlag_UPDATE(TIM14); //Clear update flag on TIMER7
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <tim14_isr+0x30>)
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff fc27 	bl	800673c <LL_TIM_ClearFlag_UPDATE>
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40021800 	.word	0x40021800
 8006ef8:	20000324 	.word	0x20000324
 8006efc:	40002000 	.word	0x40002000

08006f00 <sw3_on_off_isr>:


/*
 * Request button interrupt routine, request APDO with user voltage and current
 */
void sw3_on_off_isr(void){
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b097      	sub	sp, #92	; 0x5c
 8006f04:	af02      	add	r7, sp, #8
	//Read SRC capability
	//USBPD_StatusTypeDef status = USBPD_ERROR;
	//status = USBPD_DPM_RequestGetSourceCapability(0);

	//Mask unwanted button interrupts caused by debouncing on exti line 1 (PB1)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM1);
 8006f06:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <sw3_on_off_isr+0xc4>)
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	492d      	ldr	r1, [pc, #180]	; (8006fc4 <sw3_on_off_isr+0xc4>)
 8006f0e:	2202      	movs	r2, #2
 8006f10:	4393      	bics	r3, r2
 8006f12:	2280      	movs	r2, #128	; 0x80
 8006f14:	508b      	str	r3, [r1, r2]

	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006f16:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <sw3_on_off_isr+0xc8>)
 8006f18:	2100      	movs	r1, #0
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f7ff fc02 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <sw3_on_off_isr+0xc8>)
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff fbf0 	bl	8006708 <LL_TIM_EnableCounter>

	g += 1;
 8006f28:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <sw3_on_off_isr+0xcc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	4b27      	ldr	r3, [pc, #156]	; (8006fcc <sw3_on_off_isr+0xcc>)
 8006f30:	601a      	str	r2, [r3, #0]
	} USBPD_DPM_SNKPowerRequestDetailsTypeDef;
	#endif */

	//sourcecapa_limits();

	int indexSRCAPDO = USER_SERV_FindSRCIndex(0, &powerRequestDetails, dhandle->voltageSet*10, dhandle->currentSet, PDO_SEL_METHOD_MAX_CUR);
 8006f32:	4b27      	ldr	r3, [pc, #156]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	1c1a      	adds	r2, r3, #0
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	18d3      	adds	r3, r2, r3
 8006f40:	18db      	adds	r3, r3, r3
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4921      	ldr	r1, [pc, #132]	; (8006fd4 <sw3_on_off_isr+0xd4>)
 8006f4e:	2004      	movs	r0, #4
 8006f50:	9000      	str	r0, [sp, #0]
 8006f52:	2000      	movs	r0, #0
 8006f54:	f016 fac4 	bl	801d4e0 <USER_SERV_FindSRCIndex>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	//Print to debug
	char _str[70];
	sprintf(_str,"APDO request: indexSRCPDO= %lu, VBUS= %lu mV, Ibus= %d mA", indexSRCAPDO, 10*dhandle->voltageSet, dhandle->currentSet);
 8006f5c:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	0013      	movs	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	189b      	adds	r3, r3, r2
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	001c      	movs	r4, r3
 8006f6c:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f74:	4918      	ldr	r1, [pc, #96]	; (8006fd8 <sw3_on_off_isr+0xd8>)
 8006f76:	1d38      	adds	r0, r7, #4
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	0023      	movs	r3, r4
 8006f7c:	f01c fb2a 	bl	80235d4 <siprintf>
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8006f80:	1d3b      	adds	r3, r7, #4
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7ff f922 	bl	80061cc <strlen>
 8006f88:	0002      	movs	r2, r0
 8006f8a:	1d3b      	adds	r3, r7, #4
 8006f8c:	9200      	str	r2, [sp, #0]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	2006      	movs	r0, #6
 8006f94:	f00b fd12 	bl	80129bc <USBPD_TRACE_Add>
	USBPD_DPM_RequestSRCPDO(0, indexSRCAPDO, dhandle->voltageSet*10, dhandle->currentSet);
 8006f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9a:	b2d9      	uxtb	r1, r3
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	1c1a      	adds	r2, r3, #0
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	18d3      	adds	r3, r2, r3
 8006faa:	18db      	adds	r3, r3, r3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <sw3_on_off_isr+0xd0>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f015 fa3e 	bl	801c438 <USBPD_DPM_RequestSRCPDO>
	//HAL_Delay(2);
	//HAL_GPIO_WritePin(OCP_ALERT_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
}
 8006fbc:	46c0      	nop			; (mov r8, r8)
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b015      	add	sp, #84	; 0x54
 8006fc2:	bd90      	pop	{r4, r7, pc}
 8006fc4:	40021800 	.word	0x40021800
 8006fc8:	40001400 	.word	0x40001400
 8006fcc:	20000344 	.word	0x20000344
 8006fd0:	20000048 	.word	0x20000048
 8006fd4:	20000328 	.word	0x20000328
 8006fd8:	08023f4c 	.word	0x08023f4c

08006fdc <sw1_toggle_i_v_isr>:

/*
 * Change between current and voltage ADJUSTMENT_STATE
 */
void sw1_toggle_i_v_isr(void){
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b096      	sub	sp, #88	; 0x58
 8006fe0:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 8006fe2:	4a32      	ldr	r2, [pc, #200]	; (80070ac <sw1_toggle_i_v_isr+0xd0>)
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	58d3      	ldr	r3, [r2, r3]
 8006fe8:	4930      	ldr	r1, [pc, #192]	; (80070ac <sw1_toggle_i_v_isr+0xd0>)
 8006fea:	2204      	movs	r2, #4
 8006fec:	4393      	bics	r3, r2
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	508b      	str	r3, [r1, r2]

	//Set debouncing time in ms
	TIM7->ARR = 200;
 8006ff2:	4b2f      	ldr	r3, [pc, #188]	; (80070b0 <sw1_toggle_i_v_isr+0xd4>)
 8006ff4:	22c8      	movs	r2, #200	; 0xc8
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <sw1_toggle_i_v_isr+0xd4>)
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff fb91 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 8007002:	4b2b      	ldr	r3, [pc, #172]	; (80070b0 <sw1_toggle_i_v_isr+0xd4>)
 8007004:	0018      	movs	r0, r3
 8007006:	f7ff fb7f 	bl	8006708 <LL_TIM_EnableCounter>

	// Toggle the state
	if (currentState == ADJUSTMENT_CURRENT_OCP)
 800700a:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <sw1_toggle_i_v_isr+0xd8>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d103      	bne.n	800701c <sw1_toggle_i_v_isr+0x40>
	{
		currentState = ADJUSTMENT_VOLTAGE;
 8007014:	4b27      	ldr	r3, [pc, #156]	; (80070b4 <sw1_toggle_i_v_isr+0xd8>)
 8007016:	2201      	movs	r2, #1
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	e01b      	b.n	8007054 <sw1_toggle_i_v_isr+0x78>
	}
	else if (currentState == ADJUSTMENT_VOLTAGE)
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <sw1_toggle_i_v_isr+0xd8>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d10b      	bne.n	800703e <sw1_toggle_i_v_isr+0x62>
	{
		currentState = ADJUSTMENT_CURRENT;
 8007026:	4b23      	ldr	r3, [pc, #140]	; (80070b4 <sw1_toggle_i_v_isr+0xd8>)
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
		//Display output current
		max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800702c:	4b22      	ldr	r3, [pc, #136]	; (80070b8 <sw1_toggle_i_v_isr+0xdc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2204      	movs	r2, #4
 8007034:	0019      	movs	r1, r3
 8007036:	2002      	movs	r0, #2
 8007038:	f000 fb2c 	bl	8007694 <max7219_PrintIspecial>
 800703c:	e00a      	b.n	8007054 <sw1_toggle_i_v_isr+0x78>
	}
	else
	{
		currentState = ADJUSTMENT_CURRENT_OCP;
 800703e:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <sw1_toggle_i_v_isr+0xd8>)
 8007040:	2202      	movs	r2, #2
 8007042:	701a      	strb	r2, [r3, #0]
		//Display output current
		max7219_PrintIspecial(SEGMENT_2, dhandle->currentOCPSet, 4);
 8007044:	4b1c      	ldr	r3, [pc, #112]	; (80070b8 <sw1_toggle_i_v_isr+0xdc>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2204      	movs	r2, #4
 800704c:	0019      	movs	r1, r3
 800704e:	2002      	movs	r0, #2
 8007050:	f000 fb20 	bl	8007694 <max7219_PrintIspecial>
	}

	//Get Voltage level into TRACE
	char _str[60];
	uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 8007054:	2000      	movs	r0, #0
 8007056:	f015 fa59 	bl	801c50c <BSP_PWR_VBUSGetVoltage>
 800705a:	0003      	movs	r3, r0
 800705c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 800705e:	2000      	movs	r0, #0
 8007060:	f015 fa72 	bl	801c548 <BSP_PWR_VBUSGetCurrent>
 8007064:	0003      	movs	r3, r0
 8007066:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 8007068:	2000      	movs	r0, #0
 800706a:	f015 fb91 	bl	801c790 <BSP_PWR_VBUSGetCurrentOCP>
 800706e:	0003      	movs	r3, r0
 8007070:	647b      	str	r3, [r7, #68]	; 0x44

	// Use snprintf to limit the number of characters written
	int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 8007072:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007074:	4a11      	ldr	r2, [pc, #68]	; (80070bc <sw1_toggle_i_v_isr+0xe0>)
 8007076:	1d38      	adds	r0, r7, #4
 8007078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	000b      	movs	r3, r1
 8007082:	213c      	movs	r1, #60	; 0x3c
 8007084:	f01c fa72 	bl	802356c <sniprintf>
 8007088:	0003      	movs	r3, r0
 800708a:	643b      	str	r3, [r7, #64]	; 0x40

	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 800708c:	1d3b      	adds	r3, r7, #4
 800708e:	0018      	movs	r0, r3
 8007090:	f7ff f89c 	bl	80061cc <strlen>
 8007094:	0002      	movs	r2, r0
 8007096:	1d3b      	adds	r3, r7, #4
 8007098:	9200      	str	r2, [sp, #0]
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	2006      	movs	r0, #6
 80070a0:	f00b fc8c 	bl	80129bc <USBPD_TRACE_Add>
}
 80070a4:	46c0      	nop			; (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b014      	add	sp, #80	; 0x50
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40021800 	.word	0x40021800
 80070b0:	40001400 	.word	0x40001400
 80070b4:	2000000c 	.word	0x2000000c
 80070b8:	20000048 	.word	0x20000048
 80070bc:	08023f24 	.word	0x08023f24

080070c0 <sw2_lock_isr>:

void sw2_lock_isr(void){
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b094      	sub	sp, #80	; 0x50
 80070c4:	af02      	add	r7, sp, #8
	//Mask unwanted button interrupts caused by debouncing on exti line 2 (PB2)
	EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
 80070c6:	4a39      	ldr	r2, [pc, #228]	; (80071ac <sw2_lock_isr+0xec>)
 80070c8:	2380      	movs	r3, #128	; 0x80
 80070ca:	58d3      	ldr	r3, [r2, r3]
 80070cc:	4937      	ldr	r1, [pc, #220]	; (80071ac <sw2_lock_isr+0xec>)
 80070ce:	2204      	movs	r2, #4
 80070d0:	4393      	bics	r3, r2
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	508b      	str	r3, [r1, r2]

	//Mask alert pin during setting the relay on/off
	//EXTI->IMR1 &= ~(EXTI_IMR1_IM6);

	//Set debouncing time in ms
	TIM7->ARR = 200;
 80070d6:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <sw2_lock_isr+0xf0>)
 80070d8:	22c8      	movs	r2, #200	; 0xc8
 80070da:	62da      	str	r2, [r3, #44]	; 0x2c

	//Zero TIM7 counter and start counting
	LL_TIM_SetCounter(TIM7, 0); //set counter register value of timer 7 to 0
 80070dc:	4b34      	ldr	r3, [pc, #208]	; (80071b0 <sw2_lock_isr+0xf0>)
 80070de:	2100      	movs	r1, #0
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7ff fb1f 	bl	8006724 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM7); //start counting of timer 7
 80070e6:	4b32      	ldr	r3, [pc, #200]	; (80071b0 <sw2_lock_isr+0xf0>)
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7ff fb0d 	bl	8006708 <LL_TIM_EnableCounter>

	char _str[60];

	if (outputState == OUTPUT_OFF_STATE)
 80070ee:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <sw2_lock_isr+0xf4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d126      	bne.n	8007146 <sw2_lock_isr+0x86>
			{
				outputState = OUTPUT_ON_STATE;
 80070f8:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <sw2_lock_isr+0xf4>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
				//Mask unwanted button interrupts caused by debouncing on exti line 6 (PD6)
				EXTI->IMR1 &= ~(EXTI_IMR1_IM6);
 80070fe:	4a2b      	ldr	r2, [pc, #172]	; (80071ac <sw2_lock_isr+0xec>)
 8007100:	2380      	movs	r3, #128	; 0x80
 8007102:	58d3      	ldr	r3, [r2, r3]
 8007104:	4929      	ldr	r1, [pc, #164]	; (80071ac <sw2_lock_isr+0xec>)
 8007106:	2240      	movs	r2, #64	; 0x40
 8007108:	4393      	bics	r3, r2
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	508b      	str	r3, [r1, r2]

				//Set debouncing time in 6 ms
				TIM14->ARR = 6;
 800710e:	4b2a      	ldr	r3, [pc, #168]	; (80071b8 <sw2_lock_isr+0xf8>)
 8007110:	2206      	movs	r2, #6
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c
				//Zero TIM7 counter and start counting
				LL_TIM_SetCounter(TIM14, 0); //set counter register value of timer 7 to 0
 8007114:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <sw2_lock_isr+0xf8>)
 8007116:	2100      	movs	r1, #0
 8007118:	0018      	movs	r0, r3
 800711a:	f7ff fb03 	bl	8006724 <LL_TIM_SetCounter>
				LL_TIM_EnableCounter(TIM14); //start counting of timer 7
 800711e:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <sw2_lock_isr+0xf8>)
 8007120:	0018      	movs	r0, r3
 8007122:	f7ff faf1 	bl	8006708 <LL_TIM_EnableCounter>

				//put OCP to transparent mode so any alert during on/off is cleared
				//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_SET);
 8007126:	2380      	movs	r3, #128	; 0x80
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4824      	ldr	r0, [pc, #144]	; (80071bc <sw2_lock_isr+0xfc>)
 800712c:	2201      	movs	r2, #1
 800712e:	0019      	movs	r1, r3
 8007130:	f004 ff64 	bl	800bffc <HAL_GPIO_WritePin>
				// Use snprintf to limit the number of characters written
				int len = snprintf(_str, sizeof(_str), "--------Output Disabled--------");
 8007134:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <sw2_lock_isr+0x100>)
 8007136:	1d3b      	adds	r3, r7, #4
 8007138:	213c      	movs	r1, #60	; 0x3c
 800713a:	0018      	movs	r0, r3
 800713c:	f01c fa16 	bl	802356c <sniprintf>
 8007140:	0003      	movs	r3, r0
 8007142:	643b      	str	r3, [r7, #64]	; 0x40
 8007144:	e021      	b.n	800718a <sw2_lock_isr+0xca>

			}
			else {
				outputState = OUTPUT_OFF_STATE;
 8007146:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <sw2_lock_isr+0xf4>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800714c:	2380      	movs	r3, #128	; 0x80
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	481a      	ldr	r0, [pc, #104]	; (80071bc <sw2_lock_isr+0xfc>)
 8007152:	2200      	movs	r2, #0
 8007154:	0019      	movs	r1, r3
 8007156:	f004 ff51 	bl	800bffc <HAL_GPIO_WritePin>
				// Use snprintf to limit the number of characters written
				int len = snprintf(_str, sizeof(_str), "--------Output Enabled--------");
 800715a:	4a1a      	ldr	r2, [pc, #104]	; (80071c4 <sw2_lock_isr+0x104>)
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	213c      	movs	r1, #60	; 0x3c
 8007160:	0018      	movs	r0, r3
 8007162:	f01c fa03 	bl	802356c <sniprintf>
 8007166:	0003      	movs	r3, r0
 8007168:	647b      	str	r3, [r7, #68]	; 0x44

				//Display voltage
				max7219_PrintIspecial(SEGMENT_1,dhandle->voltageSet, 3);
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <sw2_lock_isr+0x108>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2203      	movs	r2, #3
 8007172:	0019      	movs	r1, r3
 8007174:	2001      	movs	r0, #1
 8007176:	f000 fa8d 	bl	8007694 <max7219_PrintIspecial>
				//Display current
				max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <sw2_lock_isr+0x108>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2204      	movs	r2, #4
 8007182:	0019      	movs	r1, r3
 8007184:	2002      	movs	r0, #2
 8007186:	f000 fa85 	bl	8007694 <max7219_PrintIspecial>
			}

	//HAL_GPIO_TogglePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin);
	//Get Voltage level into TRACE
	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	0018      	movs	r0, r3
 800718e:	f7ff f81d 	bl	80061cc <strlen>
 8007192:	0002      	movs	r2, r0
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	9200      	str	r2, [sp, #0]
 8007198:	2200      	movs	r2, #0
 800719a:	2100      	movs	r1, #0
 800719c:	2006      	movs	r0, #6
 800719e:	f00b fc0d 	bl	80129bc <USBPD_TRACE_Add>
}
 80071a2:	46c0      	nop			; (mov r8, r8)
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b012      	add	sp, #72	; 0x48
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	40021800 	.word	0x40021800
 80071b0:	40001400 	.word	0x40001400
 80071b4:	20000348 	.word	0x20000348
 80071b8:	40002000 	.word	0x40002000
 80071bc:	50000800 	.word	0x50000800
 80071c0:	08023f88 	.word	0x08023f88
 80071c4:	08023fa8 	.word	0x08023fa8
 80071c8:	20000048 	.word	0x20000048

080071cc <ocp_alert_isr>:

void ocp_alert_isr(void) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
	//Disable relay
	//Change output state
	outputState = OUTPUT_OFF_STATE;
 80071d0:	4b12      	ldr	r3, [pc, #72]	; (800721c <ocp_alert_isr+0x50>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
	//Disable output
	HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 80071d6:	2380      	movs	r3, #128	; 0x80
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4811      	ldr	r0, [pc, #68]	; (8007220 <ocp_alert_isr+0x54>)
 80071dc:	2200      	movs	r2, #0
 80071de:	0019      	movs	r1, r3
 80071e0:	f004 ff0c 	bl	800bffc <HAL_GPIO_WritePin>


	// Get number of int numbers in voltage var
	//Print the voltage to the display, set decimal point after digit position 3 (display 1 has positions 4-1)
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <ocp_alert_isr+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2203      	movs	r2, #3
 80071ec:	0019      	movs	r1, r3
 80071ee:	2001      	movs	r0, #1
 80071f0:	f000 fa50 	bl	8007694 <max7219_PrintIspecial>

	//Display output current
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80071f4:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <ocp_alert_isr+0x58>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	0019      	movs	r1, r3
 80071fe:	2002      	movs	r0, #2
 8007200:	f000 fa48 	bl	8007694 <max7219_PrintIspecial>


	ocp_reset_needed = 1;
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <ocp_alert_isr+0x5c>)
 8007206:	2201      	movs	r2, #1
 8007208:	601a      	str	r2, [r3, #0]

	//Clear IT flag
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800720a:	4b08      	ldr	r3, [pc, #32]	; (800722c <ocp_alert_isr+0x60>)
 800720c:	2240      	movs	r2, #64	; 0x40
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <ocp_alert_isr+0x60>)
 8007212:	2240      	movs	r2, #64	; 0x40
 8007214:	611a      	str	r2, [r3, #16]
}
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000348 	.word	0x20000348
 8007220:	50000800 	.word	0x50000800
 8007224:	20000048 	.word	0x20000048
 8007228:	20000324 	.word	0x20000324
 800722c:	40021800 	.word	0x40021800

08007230 <sourcecapa_limits>:
  * @param  Nav
  * @retval None
  * source: demo_disco.c Display_sourcecapa_menu_nav
  */
void sourcecapa_limits(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b092      	sub	sp, #72	; 0x48
 8007234:	af00      	add	r7, sp, #0
  uint8_t _str[30];
  uint8_t _max = DPM_Ports[0].DPM_NumberOfRcvSRCPDO;
 8007236:	4b75      	ldr	r3, [pc, #468]	; (800740c <sourcecapa_limits+0x1dc>)
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	2346      	movs	r3, #70	; 0x46
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	701a      	strb	r2, [r3, #0]
  uint8_t _start = 0;
 8007240:	2145      	movs	r1, #69	; 0x45
 8007242:	187b      	adds	r3, r7, r1
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
  SINKData_HandleTypeDef *dhandle = &SNK_data;
 8007248:	4b71      	ldr	r3, [pc, #452]	; (8007410 <sourcecapa_limits+0x1e0>)
 800724a:	643b      	str	r3, [r7, #64]	; 0x40

  for(int8_t index=_start; index < _max; index++)
 800724c:	2347      	movs	r3, #71	; 0x47
 800724e:	18fb      	adds	r3, r7, r3
 8007250:	187a      	adds	r2, r7, r1
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e0ca      	b.n	80073ee <sourcecapa_limits+0x1be>
  {
	switch(DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_TYPE_Msk)
 8007258:	2347      	movs	r3, #71	; 0x47
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	2200      	movs	r2, #0
 800725e:	569a      	ldrsb	r2, [r3, r2]
 8007260:	4b6a      	ldr	r3, [pc, #424]	; (800740c <sourcecapa_limits+0x1dc>)
 8007262:	0092      	lsls	r2, r2, #2
 8007264:	58d3      	ldr	r3, [r2, r3]
 8007266:	0f9b      	lsrs	r3, r3, #30
 8007268:	079b      	lsls	r3, r3, #30
 800726a:	22c0      	movs	r2, #192	; 0xc0
 800726c:	0612      	lsls	r2, r2, #24
 800726e:	4293      	cmp	r3, r2
 8007270:	d057      	beq.n	8007322 <sourcecapa_limits+0xf2>
 8007272:	22c0      	movs	r2, #192	; 0xc0
 8007274:	0612      	lsls	r2, r2, #24
 8007276:	4293      	cmp	r3, r2
 8007278:	d900      	bls.n	800727c <sourcecapa_limits+0x4c>
 800727a:	e0a5      	b.n	80073c8 <sourcecapa_limits+0x198>
 800727c:	2280      	movs	r2, #128	; 0x80
 800727e:	0612      	lsls	r2, r2, #24
 8007280:	4293      	cmp	r3, r2
 8007282:	d027      	beq.n	80072d4 <sourcecapa_limits+0xa4>
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	0612      	lsls	r2, r2, #24
 8007288:	4293      	cmp	r3, r2
 800728a:	d900      	bls.n	800728e <sourcecapa_limits+0x5e>
 800728c:	e09c      	b.n	80073c8 <sourcecapa_limits+0x198>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <sourcecapa_limits+0x6e>
 8007292:	2280      	movs	r2, #128	; 0x80
 8007294:	05d2      	lsls	r2, r2, #23
 8007296:	4293      	cmp	r3, r2
 8007298:	d100      	bne.n	800729c <sourcecapa_limits+0x6c>
 800729a:	e09c      	b.n	80073d6 <sourcecapa_limits+0x1a6>
 800729c:	e094      	b.n	80073c8 <sourcecapa_limits+0x198>
	{
	case USBPD_PDO_TYPE_FIXED :
	  {
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_FIXED_MAX_CURRENT_Pos)*10;
 800729e:	2147      	movs	r1, #71	; 0x47
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	2200      	movs	r2, #0
 80072a4:	569a      	ldrsb	r2, [r3, r2]
 80072a6:	4b59      	ldr	r3, [pc, #356]	; (800740c <sourcecapa_limits+0x1dc>)
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	58d3      	ldr	r3, [r2, r3]
 80072ac:	059b      	lsls	r3, r3, #22
 80072ae:	0d9a      	lsrs	r2, r3, #22
 80072b0:	0013      	movs	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	189b      	adds	r3, r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_VOLTAGE_Msk) >> USBPD_PDO_SRC_FIXED_VOLTAGE_Pos)*50;
 80072ba:	187b      	adds	r3, r7, r1
 80072bc:	2200      	movs	r2, #0
 80072be:	569a      	ldrsb	r2, [r3, r2]
 80072c0:	4b52      	ldr	r3, [pc, #328]	; (800740c <sourcecapa_limits+0x1dc>)
 80072c2:	0092      	lsls	r2, r2, #2
 80072c4:	58d3      	ldr	r3, [r2, r3]
 80072c6:	0a9b      	lsrs	r3, r3, #10
 80072c8:	059b      	lsls	r3, r3, #22
 80072ca:	0d9b      	lsrs	r3, r3, #22
 80072cc:	2232      	movs	r2, #50	; 0x32
 80072ce:	4353      	muls	r3, r2
 80072d0:	623b      	str	r3, [r7, #32]
		//sprintf((char*)_str, "FIXED:%2dV %2d.%dA", (int)(maxvoltage/1000), (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
		break;
 80072d2:	e083      	b.n	80073dc <sourcecapa_limits+0x1ac>

	  }
	  break;
	case USBPD_PDO_TYPE_VARIABLE :
	  {
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Pos) * 50;
 80072d4:	2147      	movs	r1, #71	; 0x47
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	2200      	movs	r2, #0
 80072da:	569a      	ldrsb	r2, [r3, r2]
 80072dc:	4b4b      	ldr	r3, [pc, #300]	; (800740c <sourcecapa_limits+0x1dc>)
 80072de:	0092      	lsls	r2, r2, #2
 80072e0:	58d3      	ldr	r3, [r2, r3]
 80072e2:	0d1b      	lsrs	r3, r3, #20
 80072e4:	059b      	lsls	r3, r3, #22
 80072e6:	0d9b      	lsrs	r3, r3, #22
 80072e8:	2232      	movs	r2, #50	; 0x32
 80072ea:	4353      	muls	r3, r2
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Pos) * 50;
 80072ee:	187b      	adds	r3, r7, r1
 80072f0:	2200      	movs	r2, #0
 80072f2:	569a      	ldrsb	r2, [r3, r2]
 80072f4:	4b45      	ldr	r3, [pc, #276]	; (800740c <sourcecapa_limits+0x1dc>)
 80072f6:	0092      	lsls	r2, r2, #2
 80072f8:	58d3      	ldr	r3, [r2, r3]
 80072fa:	0a9b      	lsrs	r3, r3, #10
 80072fc:	059b      	lsls	r3, r3, #22
 80072fe:	0d9b      	lsrs	r3, r3, #22
 8007300:	2232      	movs	r2, #50	; 0x32
 8007302:	4353      	muls	r3, r2
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Pos) * 10;
 8007306:	187b      	adds	r3, r7, r1
 8007308:	2200      	movs	r2, #0
 800730a:	569a      	ldrsb	r2, [r3, r2]
 800730c:	4b3f      	ldr	r3, [pc, #252]	; (800740c <sourcecapa_limits+0x1dc>)
 800730e:	0092      	lsls	r2, r2, #2
 8007310:	58d3      	ldr	r3, [r2, r3]
 8007312:	059b      	lsls	r3, r3, #22
 8007314:	0d9a      	lsrs	r2, r3, #22
 8007316:	0013      	movs	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	189b      	adds	r3, r3, r2
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
		//sprintf((char*)_str, "V:%2d.%1d-%2d.%1dV %d.%dA", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
	  }
	  break;
 8007320:	e05c      	b.n	80073dc <sourcecapa_limits+0x1ac>
	case USBPD_PDO_TYPE_APDO :
	  {
		uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Pos) * 100;
 8007322:	2147      	movs	r1, #71	; 0x47
 8007324:	187b      	adds	r3, r7, r1
 8007326:	2200      	movs	r2, #0
 8007328:	569a      	ldrsb	r2, [r3, r2]
 800732a:	4b38      	ldr	r3, [pc, #224]	; (800740c <sourcecapa_limits+0x1dc>)
 800732c:	0092      	lsls	r2, r2, #2
 800732e:	58d3      	ldr	r3, [r2, r3]
 8007330:	0a1b      	lsrs	r3, r3, #8
 8007332:	22ff      	movs	r2, #255	; 0xff
 8007334:	4013      	ands	r3, r2
 8007336:	2264      	movs	r2, #100	; 0x64
 8007338:	4353      	muls	r3, r2
 800733a:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Pos) * 100;
 800733c:	187b      	adds	r3, r7, r1
 800733e:	2200      	movs	r2, #0
 8007340:	569a      	ldrsb	r2, [r3, r2]
 8007342:	4b32      	ldr	r3, [pc, #200]	; (800740c <sourcecapa_limits+0x1dc>)
 8007344:	0092      	lsls	r2, r2, #2
 8007346:	58d3      	ldr	r3, [r2, r3]
 8007348:	0c5b      	lsrs	r3, r3, #17
 800734a:	22ff      	movs	r2, #255	; 0xff
 800734c:	4013      	ands	r3, r2
 800734e:	2264      	movs	r2, #100	; 0x64
 8007350:	4353      	muls	r3, r2
 8007352:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_APDO_MAX_CURRENT_Pos) * 50;
 8007354:	187b      	adds	r3, r7, r1
 8007356:	2200      	movs	r2, #0
 8007358:	569a      	ldrsb	r2, [r3, r2]
 800735a:	4b2c      	ldr	r3, [pc, #176]	; (800740c <sourcecapa_limits+0x1dc>)
 800735c:	0092      	lsls	r2, r2, #2
 800735e:	58d3      	ldr	r3, [r2, r3]
 8007360:	227f      	movs	r2, #127	; 0x7f
 8007362:	4013      	ands	r3, r2
 8007364:	2232      	movs	r2, #50	; 0x32
 8007366:	4353      	muls	r3, r2
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
		//sprintf((char*)_str, "A:%2d.%1d-%2d.%1dV %d.%dA",(int) (minvoltageAPDOtemp/1000),(int)(minvoltageAPDOtemp/100)%10, (int)(maxvoltageAPDOtemp/1000),(int)(maxvoltageAPDOtemp/100)%10, (int)(maxcurrentAPDOtemp/1000), (int)((maxcurrentAPDOtemp % 1000) /100));

		if (minvoltage < dhandle->voltageMin*10) {
 800736a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	0013      	movs	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	189b      	adds	r3, r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	001a      	movs	r2, r3
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	4293      	cmp	r3, r2
 800737c:	d208      	bcs.n	8007390 <sourcecapa_limits+0x160>
			dhandle -> voltageMin = (int)minvoltage/10;
 800737e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007380:	210a      	movs	r1, #10
 8007382:	0018      	movs	r0, r3
 8007384:	f7fe ffbe 	bl	8006304 <__divsi3>
 8007388:	0003      	movs	r3, r0
 800738a:	001a      	movs	r2, r3
 800738c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738e:	615a      	str	r2, [r3, #20]
		}
		if (maxvoltage > dhandle->voltageMax*10) {
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	0013      	movs	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	189b      	adds	r3, r3, r2
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	001a      	movs	r2, r3
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d908      	bls.n	80073b6 <sourcecapa_limits+0x186>
			dhandle -> voltageMax = (int)maxvoltage/10;
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	210a      	movs	r1, #10
 80073a8:	0018      	movs	r0, r3
 80073aa:	f7fe ffab 	bl	8006304 <__divsi3>
 80073ae:	0003      	movs	r3, r0
 80073b0:	001a      	movs	r2, r3
 80073b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b4:	619a      	str	r2, [r3, #24]
		}
		if (maxcurrent > dhandle->currentMax) {
 80073b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073bc:	429a      	cmp	r2, r3
 80073be:	d90c      	bls.n	80073da <sourcecapa_limits+0x1aa>
			dhandle -> currentMax = (int)maxcurrent;
 80073c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c4:	61da      	str	r2, [r3, #28]
		}
	  }
	  break;
 80073c6:	e008      	b.n	80073da <sourcecapa_limits+0x1aa>
	default :
	  sprintf((char*)_str,"Unknown Source PDO");
 80073c8:	4a12      	ldr	r2, [pc, #72]	; (8007414 <sourcecapa_limits+0x1e4>)
 80073ca:	003b      	movs	r3, r7
 80073cc:	0011      	movs	r1, r2
 80073ce:	0018      	movs	r0, r3
 80073d0:	f01c f900 	bl	80235d4 <siprintf>
	  break;
 80073d4:	e002      	b.n	80073dc <sourcecapa_limits+0x1ac>
	  break;
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	e000      	b.n	80073dc <sourcecapa_limits+0x1ac>
	  break;
 80073da:	46c0      	nop			; (mov r8, r8)
  for(int8_t index=_start; index < _max; index++)
 80073dc:	2147      	movs	r1, #71	; 0x47
 80073de:	187b      	adds	r3, r7, r1
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b25b      	sxtb	r3, r3
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	3301      	adds	r3, #1
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	187b      	adds	r3, r7, r1
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	2347      	movs	r3, #71	; 0x47
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	569a      	ldrsb	r2, [r3, r2]
 80073f6:	2346      	movs	r3, #70	; 0x46
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	da00      	bge.n	8007402 <sourcecapa_limits+0x1d2>
 8007400:	e72a      	b.n	8007258 <sourcecapa_limits+0x28>
	}
  }
}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	46c0      	nop			; (mov r8, r8)
 8007406:	46bd      	mov	sp, r7
 8007408:	b012      	add	sp, #72	; 0x48
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20002f48 	.word	0x20002f48
 8007410:	20000010 	.word	0x20000010
 8007414:	08023fc8 	.word	0x08023fc8

08007418 <DEMO_Init>:
/**
  * @brief  Demo initialisation
  * @retval DEMO_ErrorCode status
  */
DEMO_ErrorCode DEMO_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0

  /*Print initial values*/
  //max7219_PrintItos(SEGMENT_1, 4, 3300, 3);
  //max7219_PrintItos(SEGMENT_2, 4, 0, 4);

 return DEMO_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	0018      	movs	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <max7219_Init>:
static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);
static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment);

void max7219_Init(uint8_t intensivity)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	0002      	movs	r2, r0
 800742c:	1dfb      	adds	r3, r7, #7
 800742e:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 8007430:	f000 f87a 	bl	8007528 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8007434:	2107      	movs	r1, #7
 8007436:	200b      	movs	r0, #11
 8007438:	f000 f848 	bl	80074cc <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 800743c:	1dfb      	adds	r3, r7, #7
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	0018      	movs	r0, r3
 8007442:	f000 f806 	bl	8007452 <max7219_SetIntensivity>
	max7219_Clean();
 8007446:	f000 f819 	bl	800747c <max7219_Clean>
}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	46bd      	mov	sp, r7
 800744e:	b002      	add	sp, #8
 8007450:	bd80      	pop	{r7, pc}

08007452 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	0002      	movs	r2, r0
 800745a:	1dfb      	adds	r3, r7, #7
 800745c:	701a      	strb	r2, [r3, #0]
	if (intensivity > 0x0F)
 800745e:	1dfb      	adds	r3, r7, #7
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b0f      	cmp	r3, #15
 8007464:	d806      	bhi.n	8007474 <max7219_SetIntensivity+0x22>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 8007466:	1dfb      	adds	r3, r7, #7
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	0019      	movs	r1, r3
 800746c:	200a      	movs	r0, #10
 800746e:	f000 f82d 	bl	80074cc <max7219_SendData>
 8007472:	e000      	b.n	8007476 <max7219_SetIntensivity+0x24>
		return;
 8007474:	46c0      	nop			; (mov r8, r8)
}
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <max7219_Clean>:

void max7219_Clean()
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 8007482:	1dfb      	adds	r3, r7, #7
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]

	if(decodeMode == 0xFF)
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <max7219_Clean+0x4c>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2bff      	cmp	r3, #255	; 0xff
 800748e:	d102      	bne.n	8007496 <max7219_Clean+0x1a>
	{
		clear = BLANK;
 8007490:	1dfb      	adds	r3, r7, #7
 8007492:	220f      	movs	r2, #15
 8007494:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < 8; ++i)
 8007496:	2300      	movs	r3, #0
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	e00c      	b.n	80074b6 <max7219_Clean+0x3a>
	{
		max7219_SendData(i + 1, clear);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	3301      	adds	r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	1dfb      	adds	r3, r7, #7
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	0019      	movs	r1, r3
 80074aa:	0010      	movs	r0, r2
 80074ac:	f000 f80e 	bl	80074cc <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	3301      	adds	r3, #1
 80074b4:	603b      	str	r3, [r7, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	ddef      	ble.n	800749c <max7219_Clean+0x20>
	}
}
 80074bc:	46c0      	nop			; (mov r8, r8)
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	46bd      	mov	sp, r7
 80074c2:	b002      	add	sp, #8
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	20000349 	.word	0x20000349

080074cc <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	0002      	movs	r2, r0
 80074d4:	1dfb      	adds	r3, r7, #7
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	1dbb      	adds	r3, r7, #6
 80074da:	1c0a      	adds	r2, r1, #0
 80074dc:	701a      	strb	r2, [r3, #0]
	CS_SET();
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	015b      	lsls	r3, r3, #5
 80074e2:	480f      	ldr	r0, [pc, #60]	; (8007520 <max7219_SendData+0x54>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	0019      	movs	r1, r3
 80074e8:	f004 fd88 	bl	800bffc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_PORT, &addr, 1, HAL_MAX_DELAY);
 80074ec:	2301      	movs	r3, #1
 80074ee:	425b      	negs	r3, r3
 80074f0:	1df9      	adds	r1, r7, #7
 80074f2:	480c      	ldr	r0, [pc, #48]	; (8007524 <max7219_SendData+0x58>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	f007 fbe3 	bl	800ecc0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 80074fa:	2301      	movs	r3, #1
 80074fc:	425b      	negs	r3, r3
 80074fe:	1db9      	adds	r1, r7, #6
 8007500:	4808      	ldr	r0, [pc, #32]	; (8007524 <max7219_SendData+0x58>)
 8007502:	2201      	movs	r2, #1
 8007504:	f007 fbdc 	bl	800ecc0 <HAL_SPI_Transmit>
	CS_RESET();
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	015b      	lsls	r3, r3, #5
 800750c:	4804      	ldr	r0, [pc, #16]	; (8007520 <max7219_SendData+0x54>)
 800750e:	2201      	movs	r2, #1
 8007510:	0019      	movs	r1, r3
 8007512:	f004 fd73 	bl	800bffc <HAL_GPIO_WritePin>
}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	46bd      	mov	sp, r7
 800751a:	b002      	add	sp, #8
 800751c:	bd80      	pop	{r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	50000400 	.word	0x50000400
 8007524:	20000424 	.word	0x20000424

08007528 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 800752c:	2101      	movs	r1, #1
 800752e:	200c      	movs	r0, #12
 8007530:	f7ff ffcc 	bl	80074cc <max7219_SendData>
}
 8007534:	46c0      	nop			; (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <max7219_Decode_On+0x1c>)
 8007542:	22ff      	movs	r2, #255	; 0xff
 8007544:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <max7219_Decode_On+0x1c>)
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	0019      	movs	r1, r3
 800754c:	2009      	movs	r0, #9
 800754e:	f7ff ffbd 	bl	80074cc <max7219_SendData>
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000349 	.word	0x20000349

0800755c <mapPosition>:
  * @param  newPosition: Starting position of printing
  * @retval MAX7219_Digits: return new mapped Position
  */

static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	0002      	movs	r2, r0
 8007564:	1dfb      	adds	r3, r7, #7
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	1dbb      	adds	r3, r7, #6
 800756a:	1c0a      	adds	r2, r1, #0
 800756c:	701a      	strb	r2, [r3, #0]
	if (segment == 1)
 800756e:	1dbb      	adds	r3, r7, #6
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d102      	bne.n	800757c <mapPosition+0x20>
	{
		return newPosition;
 8007576:	1dfb      	adds	r3, r7, #7
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	e009      	b.n	8007590 <mapPosition+0x34>
	}
	else if (segment == 2)
 800757c:	1dbb      	adds	r3, r7, #6
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b02      	cmp	r3, #2
 8007582:	d104      	bne.n	800758e <mapPosition+0x32>
	{
		return newPosition +4;
 8007584:	1dfb      	adds	r3, r7, #7
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	3304      	adds	r3, #4
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e000      	b.n	8007590 <mapPosition+0x34>
	}
	return 0; // In case of invalid position
 800758e:	2300      	movs	r3, #0
}
 8007590:	0018      	movs	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	b002      	add	sp, #8
 8007596:	bd80      	pop	{r7, pc}

08007598 <max7219_PrintDigit>:
  * @param  point: Specify if decimal point should be displayed or not
  * @retval None
  */

void max7219_PrintDigit(MAX7219_Segments segment, MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	0005      	movs	r5, r0
 80075a0:	000c      	movs	r4, r1
 80075a2:	0010      	movs	r0, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	1dfb      	adds	r3, r7, #7
 80075a8:	1c2a      	adds	r2, r5, #0
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	1dbb      	adds	r3, r7, #6
 80075ae:	1c22      	adds	r2, r4, #0
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	1d7b      	adds	r3, r7, #5
 80075b4:	1c02      	adds	r2, r0, #0
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	1d3b      	adds	r3, r7, #4
 80075ba:	1c0a      	adds	r2, r1, #0
 80075bc:	701a      	strb	r2, [r3, #0]
	MAX7219_Digits mappedPosition = mapPosition(position, segment);
 80075be:	250f      	movs	r5, #15
 80075c0:	197c      	adds	r4, r7, r5
 80075c2:	1dfb      	adds	r3, r7, #7
 80075c4:	781a      	ldrb	r2, [r3, #0]
 80075c6:	1dbb      	adds	r3, r7, #6
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	0011      	movs	r1, r2
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7ff ffc5 	bl	800755c <mapPosition>
 80075d2:	0003      	movs	r3, r0
 80075d4:	7023      	strb	r3, [r4, #0]
	if(mappedPosition > NUMBER_OF_DIGITS)
 80075d6:	002c      	movs	r4, r5
 80075d8:	193b      	adds	r3, r7, r4
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d852      	bhi.n	8007686 <max7219_PrintDigit+0xee>
	{
		return;
	}

	if(point)
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d027      	beq.n	8007638 <max7219_PrintDigit+0xa0>
	{
		if(decodeMode == 0x00)
 80075e8:	4b29      	ldr	r3, [pc, #164]	; (8007690 <max7219_PrintDigit+0xf8>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d111      	bne.n	8007614 <max7219_PrintDigit+0x7c>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) | (1 << 7));
 80075f0:	1d7b      	adds	r3, r7, #5
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	0018      	movs	r0, r3
 80075f6:	f000 f9a7 	bl	8007948 <getSymbol>
 80075fa:	0003      	movs	r3, r0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2280      	movs	r2, #128	; 0x80
 8007600:	4252      	negs	r2, r2
 8007602:	4313      	orrs	r3, r2
 8007604:	b2da      	uxtb	r2, r3
 8007606:	193b      	adds	r3, r7, r4
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	0011      	movs	r1, r2
 800760c:	0018      	movs	r0, r3
 800760e:	f7ff ff5d 	bl	80074cc <max7219_SendData>
 8007612:	e039      	b.n	8007688 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <max7219_PrintDigit+0xf8>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2bff      	cmp	r3, #255	; 0xff
 800761a:	d135      	bne.n	8007688 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric | (1 << 7));
 800761c:	1d7b      	adds	r3, r7, #5
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2280      	movs	r2, #128	; 0x80
 8007622:	4252      	negs	r2, r2
 8007624:	4313      	orrs	r3, r2
 8007626:	b2da      	uxtb	r2, r3
 8007628:	230f      	movs	r3, #15
 800762a:	18fb      	adds	r3, r7, r3
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	0011      	movs	r1, r2
 8007630:	0018      	movs	r0, r3
 8007632:	f7ff ff4b 	bl	80074cc <max7219_SendData>
 8007636:	e027      	b.n	8007688 <max7219_PrintDigit+0xf0>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <max7219_PrintDigit+0xf8>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d111      	bne.n	8007664 <max7219_PrintDigit+0xcc>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) & (~(1 << 7)));
 8007640:	1d7b      	adds	r3, r7, #5
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	0018      	movs	r0, r3
 8007646:	f000 f97f 	bl	8007948 <getSymbol>
 800764a:	0003      	movs	r3, r0
 800764c:	b2db      	uxtb	r3, r3
 800764e:	227f      	movs	r2, #127	; 0x7f
 8007650:	4013      	ands	r3, r2
 8007652:	b2da      	uxtb	r2, r3
 8007654:	230f      	movs	r3, #15
 8007656:	18fb      	adds	r3, r7, r3
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff ff35 	bl	80074cc <max7219_SendData>
 8007662:	e011      	b.n	8007688 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 8007664:	4b0a      	ldr	r3, [pc, #40]	; (8007690 <max7219_PrintDigit+0xf8>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2bff      	cmp	r3, #255	; 0xff
 800766a:	d10d      	bne.n	8007688 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric & (~(1 << 7)));
 800766c:	1d7b      	adds	r3, r7, #5
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	227f      	movs	r2, #127	; 0x7f
 8007672:	4013      	ands	r3, r2
 8007674:	b2da      	uxtb	r2, r3
 8007676:	230f      	movs	r3, #15
 8007678:	18fb      	adds	r3, r7, r3
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	0011      	movs	r1, r2
 800767e:	0018      	movs	r0, r3
 8007680:	f7ff ff24 	bl	80074cc <max7219_SendData>
 8007684:	e000      	b.n	8007688 <max7219_PrintDigit+0xf0>
		return;
 8007686:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8007688:	46bd      	mov	sp, r7
 800768a:	b004      	add	sp, #16
 800768c:	bdb0      	pop	{r4, r5, r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	20000349 	.word	0x20000349

08007694 <max7219_PrintIspecial>:
  * @param  decimal_position: Place of decimal point
  * @retval MAX7219_Digits: current cursor position
  */

MAX7219_Digits max7219_PrintIspecial(MAX7219_Segments segment, int value, uint8_t decimal_position)
{
 8007694:	b590      	push	{r4, r7, lr}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6039      	str	r1, [r7, #0]
 800769c:	0011      	movs	r1, r2
 800769e:	1dfb      	adds	r3, r7, #7
 80076a0:	1c02      	adds	r2, r0, #0
 80076a2:	701a      	strb	r2, [r3, #0]
 80076a4:	1dbb      	adds	r3, r7, #6
 80076a6:	1c0a      	adds	r2, r1, #0
 80076a8:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 80076aa:	21ff      	movs	r1, #255	; 0xff
 80076ac:	2009      	movs	r0, #9
 80076ae:	f7ff ff0d 	bl	80074cc <max7219_SendData>

	int32_t i;
    int8_t num_digits = 0;
 80076b2:	2313      	movs	r3, #19
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]


	//Get number of non-zero digits
	i = 1;
 80076ba:	2301      	movs	r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
	while ((abs(value) / i) > 9)
 80076be:	e00e      	b.n	80076de <max7219_PrintIspecial+0x4a>
	{
		i *= 10;
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	0013      	movs	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
		num_digits++;
 80076cc:	2113      	movs	r1, #19
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	3301      	adds	r3, #1
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	187b      	adds	r3, r7, r1
 80076dc:	701a      	strb	r2, [r3, #0]
	while ((abs(value) / i) > 9)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	17da      	asrs	r2, r3, #31
 80076e2:	189b      	adds	r3, r3, r2
 80076e4:	4053      	eors	r3, r2
 80076e6:	6979      	ldr	r1, [r7, #20]
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7fe fe0b 	bl	8006304 <__divsi3>
 80076ee:	0003      	movs	r3, r0
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	dce5      	bgt.n	80076c0 <max7219_PrintIspecial+0x2c>
	}
	num_digits++;
 80076f4:	2113      	movs	r1, #19
 80076f6:	187b      	adds	r3, r7, r1
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3301      	adds	r3, #1
 8007700:	b2da      	uxtb	r2, r3
 8007702:	187b      	adds	r3, r7, r1
 8007704:	701a      	strb	r2, [r3, #0]

	int position = num_digits;
 8007706:	187b      	adds	r3, r7, r1
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	b25b      	sxtb	r3, r3
 800770c:	60fb      	str	r3, [r7, #12]

	//Handle negative numbers
	if (value < 0)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	da0e      	bge.n	8007732 <max7219_PrintIspecial+0x9e>
	{
		if(position > 0)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd08      	ble.n	800772c <max7219_PrintIspecial+0x98>
		{
			max7219_SendData(position, MINUS);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	210a      	movs	r1, #10
 8007720:	0018      	movs	r0, r3
 8007722:	f7ff fed3 	bl	80074cc <max7219_SendData>
			position--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3b01      	subs	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
		}
		value = -value;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	425b      	negs	r3, r3
 8007730:	603b      	str	r3, [r7, #0]
	}


	//Print leading zeros and check for decimal point
	for (int j= 4; j > num_digits; j--) {
 8007732:	2304      	movs	r3, #4
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	e018      	b.n	800776a <max7219_PrintIspecial+0xd6>
		if(j == decimal_position) {
 8007738:	1dbb      	adds	r3, r7, #6
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d108      	bne.n	8007754 <max7219_PrintIspecial+0xc0>
			max7219_PrintDigit(segment, j, 0, true);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	b2d9      	uxtb	r1, r3
 8007746:	1dfb      	adds	r3, r7, #7
 8007748:	7818      	ldrb	r0, [r3, #0]
 800774a:	2301      	movs	r3, #1
 800774c:	2200      	movs	r2, #0
 800774e:	f7ff ff23 	bl	8007598 <max7219_PrintDigit>
 8007752:	e007      	b.n	8007764 <max7219_PrintIspecial+0xd0>
		}
		else {
			max7219_PrintDigit(segment, j, 0, false);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	b2d9      	uxtb	r1, r3
 8007758:	1dfb      	adds	r3, r7, #7
 800775a:	7818      	ldrb	r0, [r3, #0]
 800775c:	2300      	movs	r3, #0
 800775e:	2200      	movs	r2, #0
 8007760:	f7ff ff1a 	bl	8007598 <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	3b01      	subs	r3, #1
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	2313      	movs	r3, #19
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b25b      	sxtb	r3, r3
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	dcdf      	bgt.n	8007738 <max7219_PrintIspecial+0xa4>
		}
	}


	//Print each number and decimal point
	while (i > 0)
 8007778:	e046      	b.n	8007808 <max7219_PrintIspecial+0x174>
	{
		if(position > 0)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd3c      	ble.n	80077fa <max7219_PrintIspecial+0x166>
		{	//If current number position is decimal point, print also decimal point
			if(position == decimal_position) {
 8007780:	1dbb      	adds	r3, r7, #6
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	429a      	cmp	r2, r3
 8007788:	d11a      	bne.n	80077c0 <max7219_PrintIspecial+0x12c>
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, true);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	b2dc      	uxtb	r4, r3
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	0013      	movs	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	189b      	adds	r3, r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	001a      	movs	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	0011      	movs	r1, r2
 800779e:	0018      	movs	r0, r3
 80077a0:	f7fe fe96 	bl	80064d0 <__aeabi_idivmod>
 80077a4:	000b      	movs	r3, r1
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7fe fdab 	bl	8006304 <__divsi3>
 80077ae:	0003      	movs	r3, r0
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	1dfb      	adds	r3, r7, #7
 80077b4:	7818      	ldrb	r0, [r3, #0]
 80077b6:	2301      	movs	r3, #1
 80077b8:	0021      	movs	r1, r4
 80077ba:	f7ff feed 	bl	8007598 <max7219_PrintDigit>
 80077be:	e019      	b.n	80077f4 <max7219_PrintIspecial+0x160>
			}
			else {
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, false);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	b2dc      	uxtb	r4, r3
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	0013      	movs	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	189b      	adds	r3, r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	001a      	movs	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	0011      	movs	r1, r2
 80077d4:	0018      	movs	r0, r3
 80077d6:	f7fe fe7b 	bl	80064d0 <__aeabi_idivmod>
 80077da:	000b      	movs	r3, r1
 80077dc:	6979      	ldr	r1, [r7, #20]
 80077de:	0018      	movs	r0, r3
 80077e0:	f7fe fd90 	bl	8006304 <__divsi3>
 80077e4:	0003      	movs	r3, r0
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	1dfb      	adds	r3, r7, #7
 80077ea:	7818      	ldrb	r0, [r3, #0]
 80077ec:	2300      	movs	r3, #0
 80077ee:	0021      	movs	r1, r4
 80077f0:	f7ff fed2 	bl	8007598 <max7219_PrintDigit>
			}
			position--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
		}

		i /= 10;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	210a      	movs	r1, #10
 80077fe:	0018      	movs	r0, r3
 8007800:	f7fe fd80 	bl	8006304 <__divsi3>
 8007804:	0003      	movs	r3, r0
 8007806:	617b      	str	r3, [r7, #20]
	while (i > 0)
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dcb5      	bgt.n	800777a <max7219_PrintIspecial+0xe6>

	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <max7219_PrintIspecial+0x194>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	0019      	movs	r1, r3
 8007814:	2009      	movs	r0, #9
 8007816:	f7ff fe59 	bl	80074cc <max7219_SendData>

	return position;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	b2db      	uxtb	r3, r3
}
 800781e:	0018      	movs	r0, r3
 8007820:	46bd      	mov	sp, r7
 8007822:	b007      	add	sp, #28
 8007824:	bd90      	pop	{r4, r7, pc}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	20000349 	.word	0x20000349

0800782c <max7219_BlinkDigit>:
  * @param  ms: Blink delay in milliseconds
  * @param  decimal_position: place of decimal point
  * @retval None
  */

void max7219_BlinkDigit(MAX7219_Segments segment, int *valuePtr, uint8_t n, uint32_t ms, uint8_t decimal_position) {
 800782c:	b5b0      	push	{r4, r5, r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	0011      	movs	r1, r2
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	240f      	movs	r4, #15
 800783a:	193b      	adds	r3, r7, r4
 800783c:	1c02      	adds	r2, r0, #0
 800783e:	701a      	strb	r2, [r3, #0]
 8007840:	200e      	movs	r0, #14
 8007842:	183b      	adds	r3, r7, r0
 8007844:	1c0a      	adds	r2, r1, #0
 8007846:	701a      	strb	r2, [r3, #0]
	uint32_t blinkDelay = ms; // Delay in milliseconds (adjust as needed)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	61fb      	str	r3, [r7, #28]
	uint16_t blinkDigit = n; // Digit to blink (0-3)
 800784c:	211a      	movs	r1, #26
 800784e:	187b      	adds	r3, r7, r1
 8007850:	183a      	adds	r2, r7, r0
 8007852:	7812      	ldrb	r2, [r2, #0]
 8007854:	801a      	strh	r2, [r3, #0]
	uint8_t digit;

	//Print the BLANK and also decimal point
	if (blinkDigit == decimal_position) {
 8007856:	2330      	movs	r3, #48	; 0x30
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	187a      	adds	r2, r7, r1
 8007860:	8812      	ldrh	r2, [r2, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d109      	bne.n	800787a <max7219_BlinkDigit+0x4e>
		max7219_PrintDigit(segment, blinkDigit, BLANK, true);
 8007866:	187b      	adds	r3, r7, r1
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	b2d9      	uxtb	r1, r3
 800786c:	193b      	adds	r3, r7, r4
 800786e:	7818      	ldrb	r0, [r3, #0]
 8007870:	2301      	movs	r3, #1
 8007872:	220f      	movs	r2, #15
 8007874:	f7ff fe90 	bl	8007598 <max7219_PrintDigit>
 8007878:	e00a      	b.n	8007890 <max7219_BlinkDigit+0x64>
	}
	//Print the BLANK without decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, BLANK, false);
 800787a:	231a      	movs	r3, #26
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	b2d9      	uxtb	r1, r3
 8007882:	230f      	movs	r3, #15
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	7818      	ldrb	r0, [r3, #0]
 8007888:	2300      	movs	r3, #0
 800788a:	220f      	movs	r2, #15
 800788c:	f7ff fe84 	bl	8007598 <max7219_PrintDigit>
	}

	//Delay
	uint32_t blinkTimer = HAL_GetTick() + blinkDelay;
 8007890:	f001 fd74 	bl	800937c <HAL_GetTick>
 8007894:	0002      	movs	r2, r0
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	189b      	adds	r3, r3, r2
 800789a:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	f001 fd6d 	bl	800937c <HAL_GetTick>
 80078a2:	0002      	movs	r2, r0
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d8f9      	bhi.n	800789e <max7219_BlinkDigit+0x72>

	// Get the specific digit value at n position
    digit = (*valuePtr / lcdPow10(blinkDigit-1)) % 10;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	001c      	movs	r4, r3
 80078b0:	251a      	movs	r5, #26
 80078b2:	197b      	adds	r3, r7, r5
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	3b01      	subs	r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	0018      	movs	r0, r3
 80078be:	f000 f855 	bl	800796c <lcdPow10>
 80078c2:	0003      	movs	r3, r0
 80078c4:	0019      	movs	r1, r3
 80078c6:	0020      	movs	r0, r4
 80078c8:	f7fe fc92 	bl	80061f0 <__udivsi3>
 80078cc:	0003      	movs	r3, r0
 80078ce:	210a      	movs	r1, #10
 80078d0:	0018      	movs	r0, r3
 80078d2:	f7fe fd13 	bl	80062fc <__aeabi_uidivmod>
 80078d6:	000b      	movs	r3, r1
 80078d8:	001a      	movs	r2, r3
 80078da:	2013      	movs	r0, #19
 80078dc:	183b      	adds	r3, r7, r0
 80078de:	701a      	strb	r2, [r3, #0]

	//Print back the original digit and also decimal point
	if (blinkDigit == decimal_position) {
 80078e0:	2330      	movs	r3, #48	; 0x30
 80078e2:	18fb      	adds	r3, r7, r3
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	197a      	adds	r2, r7, r5
 80078ea:	8812      	ldrh	r2, [r2, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d10b      	bne.n	8007908 <max7219_BlinkDigit+0xdc>
		max7219_PrintDigit(segment, blinkDigit, digit, true);
 80078f0:	197b      	adds	r3, r7, r5
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b2d9      	uxtb	r1, r3
 80078f6:	183b      	adds	r3, r7, r0
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	230f      	movs	r3, #15
 80078fc:	18fb      	adds	r3, r7, r3
 80078fe:	7818      	ldrb	r0, [r3, #0]
 8007900:	2301      	movs	r3, #1
 8007902:	f7ff fe49 	bl	8007598 <max7219_PrintDigit>
 8007906:	e00c      	b.n	8007922 <max7219_BlinkDigit+0xf6>
	}
	//Print back the original digit without a decimal point
	else {
		max7219_PrintDigit(segment, blinkDigit, digit, false);
 8007908:	231a      	movs	r3, #26
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	b2d9      	uxtb	r1, r3
 8007910:	2313      	movs	r3, #19
 8007912:	18fb      	adds	r3, r7, r3
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	230f      	movs	r3, #15
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	7818      	ldrb	r0, [r3, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	f7ff fe3b 	bl	8007598 <max7219_PrintDigit>
	}

	//Delay
	blinkTimer = HAL_GetTick() + blinkDelay;
 8007922:	f001 fd2b 	bl	800937c <HAL_GetTick>
 8007926:	0002      	movs	r2, r0
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	189b      	adds	r3, r3, r2
 800792c:	617b      	str	r3, [r7, #20]
	while (HAL_GetTick() < blinkTimer);
 800792e:	46c0      	nop			; (mov r8, r8)
 8007930:	f001 fd24 	bl	800937c <HAL_GetTick>
 8007934:	0002      	movs	r2, r0
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	4293      	cmp	r3, r2
 800793a:	d8f9      	bhi.n	8007930 <max7219_BlinkDigit+0x104>
}
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	46bd      	mov	sp, r7
 8007942:	b008      	add	sp, #32
 8007944:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007948 <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	0002      	movs	r2, r0
 8007950:	1dfb      	adds	r3, r7, #7
 8007952:	701a      	strb	r2, [r3, #0]
	return SYMBOLS[number];
 8007954:	1dfb      	adds	r3, r7, #7
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4a03      	ldr	r2, [pc, #12]	; (8007968 <getSymbol+0x20>)
 800795a:	5cd3      	ldrb	r3, [r2, r3]
 800795c:	b29b      	uxth	r3, r3
}
 800795e:	0018      	movs	r0, r3
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	2000004c 	.word	0x2000004c

0800796c <lcdPow10>:

static uint32_t lcdPow10(uint8_t n)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	0002      	movs	r2, r0
 8007974:	1dfb      	adds	r3, r7, #7
 8007976:	701a      	strb	r2, [r3, #0]
	uint32_t retval = 1u;
 8007978:	2301      	movs	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]

	while (n > 0u)
 800797c:	e00a      	b.n	8007994 <lcdPow10+0x28>
	{
		retval *= 10u;
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	0013      	movs	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	189b      	adds	r3, r3, r2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	60fb      	str	r3, [r7, #12]
		n--;
 800798a:	1dfb      	adds	r3, r7, #7
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	1dfb      	adds	r3, r7, #7
 8007990:	3a01      	subs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
	while (n > 0u)
 8007994:	1dfb      	adds	r3, r7, #7
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1f0      	bne.n	800797e <lcdPow10+0x12>
	}

	return retval;
 800799c:	68fb      	ldr	r3, [r7, #12]
}
 800799e:	0018      	movs	r0, r3
 80079a0:	46bd      	mov	sp, r7
 80079a2:	b004      	add	sp, #16
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	0002      	movs	r2, r0
 80079b0:	1dfb      	adds	r3, r7, #7
 80079b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079b4:	1dfb      	adds	r3, r7, #7
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b7f      	cmp	r3, #127	; 0x7f
 80079ba:	d809      	bhi.n	80079d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079bc:	1dfb      	adds	r3, r7, #7
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	001a      	movs	r2, r3
 80079c2:	231f      	movs	r3, #31
 80079c4:	401a      	ands	r2, r3
 80079c6:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <__NVIC_EnableIRQ+0x30>)
 80079c8:	2101      	movs	r1, #1
 80079ca:	4091      	lsls	r1, r2
 80079cc:	000a      	movs	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b002      	add	sp, #8
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000e100 	.word	0xe000e100

080079dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079dc:	b590      	push	{r4, r7, lr}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	0002      	movs	r2, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	1dfb      	adds	r3, r7, #7
 80079e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80079ea:	1dfb      	adds	r3, r7, #7
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b7f      	cmp	r3, #127	; 0x7f
 80079f0:	d828      	bhi.n	8007a44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80079f2:	4a2f      	ldr	r2, [pc, #188]	; (8007ab0 <__NVIC_SetPriority+0xd4>)
 80079f4:	1dfb      	adds	r3, r7, #7
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	089b      	lsrs	r3, r3, #2
 80079fc:	33c0      	adds	r3, #192	; 0xc0
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	589b      	ldr	r3, [r3, r2]
 8007a02:	1dfa      	adds	r2, r7, #7
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	0011      	movs	r1, r2
 8007a08:	2203      	movs	r2, #3
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	00d2      	lsls	r2, r2, #3
 8007a0e:	21ff      	movs	r1, #255	; 0xff
 8007a10:	4091      	lsls	r1, r2
 8007a12:	000a      	movs	r2, r1
 8007a14:	43d2      	mvns	r2, r2
 8007a16:	401a      	ands	r2, r3
 8007a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	019b      	lsls	r3, r3, #6
 8007a1e:	22ff      	movs	r2, #255	; 0xff
 8007a20:	401a      	ands	r2, r3
 8007a22:	1dfb      	adds	r3, r7, #7
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	0018      	movs	r0, r3
 8007a28:	2303      	movs	r3, #3
 8007a2a:	4003      	ands	r3, r0
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a30:	481f      	ldr	r0, [pc, #124]	; (8007ab0 <__NVIC_SetPriority+0xd4>)
 8007a32:	1dfb      	adds	r3, r7, #7
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	b25b      	sxtb	r3, r3
 8007a38:	089b      	lsrs	r3, r3, #2
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	33c0      	adds	r3, #192	; 0xc0
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007a42:	e031      	b.n	8007aa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a44:	4a1b      	ldr	r2, [pc, #108]	; (8007ab4 <__NVIC_SetPriority+0xd8>)
 8007a46:	1dfb      	adds	r3, r7, #7
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	230f      	movs	r3, #15
 8007a4e:	400b      	ands	r3, r1
 8007a50:	3b08      	subs	r3, #8
 8007a52:	089b      	lsrs	r3, r3, #2
 8007a54:	3306      	adds	r3, #6
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	1dfa      	adds	r2, r7, #7
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	0011      	movs	r1, r2
 8007a64:	2203      	movs	r2, #3
 8007a66:	400a      	ands	r2, r1
 8007a68:	00d2      	lsls	r2, r2, #3
 8007a6a:	21ff      	movs	r1, #255	; 0xff
 8007a6c:	4091      	lsls	r1, r2
 8007a6e:	000a      	movs	r2, r1
 8007a70:	43d2      	mvns	r2, r2
 8007a72:	401a      	ands	r2, r3
 8007a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	22ff      	movs	r2, #255	; 0xff
 8007a7c:	401a      	ands	r2, r3
 8007a7e:	1dfb      	adds	r3, r7, #7
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	0018      	movs	r0, r3
 8007a84:	2303      	movs	r3, #3
 8007a86:	4003      	ands	r3, r0
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007a8c:	4809      	ldr	r0, [pc, #36]	; (8007ab4 <__NVIC_SetPriority+0xd8>)
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	001c      	movs	r4, r3
 8007a94:	230f      	movs	r3, #15
 8007a96:	4023      	ands	r3, r4
 8007a98:	3b08      	subs	r3, #8
 8007a9a:	089b      	lsrs	r3, r3, #2
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	3306      	adds	r3, #6
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	18c3      	adds	r3, r0, r3
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	601a      	str	r2, [r3, #0]
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b003      	add	sp, #12
 8007aae:	bd90      	pop	{r4, r7, pc}
 8007ab0:	e000e100 	.word	0xe000e100
 8007ab4:	e000ed00 	.word	0xe000ed00

08007ab8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007ac8:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <LL_DMA_SetDataTransferDirection+0x44>)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	18d3      	adds	r3, r2, r3
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	001a      	movs	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	18d3      	adds	r3, r2, r3
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <LL_DMA_SetDataTransferDirection+0x48>)
 8007ada:	4013      	ands	r3, r2
 8007adc:	0019      	movs	r1, r3
 8007ade:	4a07      	ldr	r2, [pc, #28]	; (8007afc <LL_DMA_SetDataTransferDirection+0x44>)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	18d3      	adds	r3, r2, r3
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	001a      	movs	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	18d3      	adds	r3, r2, r3
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b006      	add	sp, #24
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	08024ef0 	.word	0x08024ef0
 8007b00:	ffffbfef 	.word	0xffffbfef

08007b04 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007b14:	4a0c      	ldr	r2, [pc, #48]	; (8007b48 <LL_DMA_SetMode+0x44>)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	18d3      	adds	r3, r2, r3
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	18d3      	adds	r3, r2, r3
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2220      	movs	r2, #32
 8007b26:	4393      	bics	r3, r2
 8007b28:	0019      	movs	r1, r3
 8007b2a:	4a07      	ldr	r2, [pc, #28]	; (8007b48 <LL_DMA_SetMode+0x44>)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	18d3      	adds	r3, r2, r3
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	001a      	movs	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	18d3      	adds	r3, r2, r3
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b006      	add	sp, #24
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	08024ef0 	.word	0x08024ef0

08007b4c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007b5c:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <LL_DMA_SetPeriphIncMode+0x44>)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	18d3      	adds	r3, r2, r3
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	001a      	movs	r2, r3
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	18d3      	adds	r3, r2, r3
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2240      	movs	r2, #64	; 0x40
 8007b6e:	4393      	bics	r3, r2
 8007b70:	0019      	movs	r1, r3
 8007b72:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <LL_DMA_SetPeriphIncMode+0x44>)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	18d3      	adds	r3, r2, r3
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	001a      	movs	r2, r3
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	18d3      	adds	r3, r2, r3
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b006      	add	sp, #24
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	08024ef0 	.word	0x08024ef0

08007b94 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007ba4:	4a0c      	ldr	r2, [pc, #48]	; (8007bd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	18d3      	adds	r3, r2, r3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	001a      	movs	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	18d3      	adds	r3, r2, r3
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2280      	movs	r2, #128	; 0x80
 8007bb6:	4393      	bics	r3, r2
 8007bb8:	0019      	movs	r1, r3
 8007bba:	4a07      	ldr	r2, [pc, #28]	; (8007bd8 <LL_DMA_SetMemoryIncMode+0x44>)
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	18d3      	adds	r3, r2, r3
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	001a      	movs	r2, r3
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	18d3      	adds	r3, r2, r3
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b006      	add	sp, #24
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	08024ef0 	.word	0x08024ef0

08007bdc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007bec:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <LL_DMA_SetPeriphSize+0x44>)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	18d3      	adds	r3, r2, r3
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	001a      	movs	r2, r3
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	18d3      	adds	r3, r2, r3
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <LL_DMA_SetPeriphSize+0x48>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	0019      	movs	r1, r3
 8007c02:	4a07      	ldr	r2, [pc, #28]	; (8007c20 <LL_DMA_SetPeriphSize+0x44>)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	001a      	movs	r2, r3
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b006      	add	sp, #24
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	08024ef0 	.word	0x08024ef0
 8007c24:	fffffcff 	.word	0xfffffcff

08007c28 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007c38:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <LL_DMA_SetMemorySize+0x44>)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	18d3      	adds	r3, r2, r3
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	001a      	movs	r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	18d3      	adds	r3, r2, r3
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a09      	ldr	r2, [pc, #36]	; (8007c70 <LL_DMA_SetMemorySize+0x48>)
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	4a07      	ldr	r2, [pc, #28]	; (8007c6c <LL_DMA_SetMemorySize+0x44>)
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	18d3      	adds	r3, r2, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	001a      	movs	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	18d3      	adds	r3, r2, r3
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b006      	add	sp, #24
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	08024ef0 	.word	0x08024ef0
 8007c70:	fffff3ff 	.word	0xfffff3ff

08007c74 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007c84:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	18d3      	adds	r3, r2, r3
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	001a      	movs	r2, r3
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	18d3      	adds	r3, r2, r3
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a09      	ldr	r2, [pc, #36]	; (8007cbc <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	0019      	movs	r1, r3
 8007c9a:	4a07      	ldr	r2, [pc, #28]	; (8007cb8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	18d3      	adds	r3, r2, r3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	001a      	movs	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	18d3      	adds	r3, r2, r3
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b006      	add	sp, #24
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	08024ef0 	.word	0x08024ef0
 8007cbc:	ffffcfff 	.word	0xffffcfff

08007cc0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	0a9b      	lsrs	r3, r3, #10
 8007cd0:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <LL_DMA_SetPeriphRequest+0x50>)
 8007cd2:	405a      	eors	r2, r3
 8007cd4:	0013      	movs	r3, r2
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	18d3      	adds	r3, r2, r3
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4a0b      	ldr	r2, [pc, #44]	; (8007d14 <LL_DMA_SetPeriphRequest+0x54>)
 8007ce6:	4694      	mov	ip, r2
 8007ce8:	4463      	add	r3, ip
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	227f      	movs	r2, #127	; 0x7f
 8007cee:	4393      	bics	r3, r2
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	18d3      	adds	r3, r2, r3
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <LL_DMA_SetPeriphRequest+0x54>)
 8007cfc:	4694      	mov	ip, r2
 8007cfe:	4463      	add	r3, ip
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	601a      	str	r2, [r3, #0]
}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b006      	add	sp, #24
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	00100080 	.word	0x00100080
 8007d14:	40020800 	.word	0x40020800

08007d18 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2201      	movs	r2, #1
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	601a      	str	r2, [r3, #0]
}
 8007d2c:	46c0      	nop			; (mov r8, r8)
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	b002      	add	sp, #8
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a03      	ldr	r2, [pc, #12]	; (8007d50 <LL_LPUART_DisableFIFO+0x1c>)
 8007d42:	401a      	ands	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	601a      	str	r2, [r3, #0]
}
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	dfffffff 	.word	0xdfffffff

08007d54 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d64:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	2301      	movs	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f383 8810 	msr	PRIMASK, r3
}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	08da      	lsrs	r2, r3, #3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	075b      	lsls	r3, r3, #29
 8007d80:	431a      	orrs	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	609a      	str	r2, [r3, #8]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f383 8810 	msr	PRIMASK, r3
}
 8007d90:	46c0      	nop			; (mov r8, r8)
}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	46bd      	mov	sp, r7
 8007d96:	b006      	add	sp, #24
 8007d98:	bd80      	pop	{r7, pc}
	...

08007d9c <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007da6:	f3ef 8310 	mrs	r3, PRIMASK
 8007daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dac:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	2301      	movs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f383 8810 	msr	PRIMASK, r3
}
 8007dba:	46c0      	nop			; (mov r8, r8)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	4a08      	ldr	r2, [pc, #32]	; (8007de4 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 8007dc2:	401a      	ands	r2, r3
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	065b      	lsls	r3, r3, #25
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	609a      	str	r2, [r3, #8]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f383 8810 	msr	PRIMASK, r3
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	b006      	add	sp, #24
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	f1ffffff 	.word	0xf1ffffff

08007de8 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	039b      	lsls	r3, r3, #14
 8007df8:	401a      	ands	r2, r3
 8007dfa:	2380      	movs	r3, #128	; 0x80
 8007dfc:	039b      	lsls	r3, r3, #14
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d101      	bne.n	8007e06 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	0018      	movs	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	2380      	movs	r3, #128	; 0x80
 8007e1e:	03db      	lsls	r3, r3, #15
 8007e20:	401a      	ands	r2, r3
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	03db      	lsls	r3, r3, #15
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d101      	bne.n	8007e2e <LL_LPUART_IsActiveFlag_REACK+0x1e>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <LL_LPUART_IsActiveFlag_REACK+0x20>
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	0018      	movs	r0, r3
 8007e32:	46bd      	mov	sp, r7
 8007e34:	b002      	add	sp, #8
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e40:	f3ef 8310 	mrs	r3, PRIMASK
 8007e44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e46:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e48:	617b      	str	r3, [r7, #20]
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f383 8810 	msr	PRIMASK, r3
}
 8007e54:	46c0      	nop			; (mov r8, r8)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f383 8810 	msr	PRIMASK, r3
}
 8007e6c:	46c0      	nop			; (mov r8, r8)
}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	46bd      	mov	sp, r7
 8007e72:	b006      	add	sp, #24
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <LL_TIM_SetOnePulseMode>:
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2208      	movs	r2, #8
 8007e86:	4393      	bics	r3, r2
 8007e88:	001a      	movs	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	601a      	str	r2, [r3, #0]
}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b002      	add	sp, #8
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <LL_TIM_EnableARRPreload>:
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
}
 8007eae:	46c0      	nop			; (mov r8, r8)
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	b002      	add	sp, #8
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <LL_TIM_SetTriggerOutput>:
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2270      	movs	r2, #112	; 0x70
 8007ec6:	4393      	bics	r3, r2
 8007ec8:	001a      	movs	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	605a      	str	r2, [r3, #4]
}
 8007ed2:	46c0      	nop			; (mov r8, r8)
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b002      	add	sp, #8
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <LL_TIM_DisableMasterSlaveMode>:
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	2280      	movs	r2, #128	; 0x80
 8007ee8:	4393      	bics	r3, r2
 8007eea:	001a      	movs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	46c0      	nop			; (mov r8, r8)
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b002      	add	sp, #8
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <LL_APB1_GRP1_EnableClock+0x28>)
 8007f02:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007f04:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <LL_APB1_GRP1_EnableClock+0x28>)
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007f0c:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <LL_APB1_GRP1_EnableClock+0x28>)
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	4013      	ands	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f16:	68fb      	ldr	r3, [r7, #12]
}
 8007f18:	46c0      	nop			; (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b004      	add	sp, #16
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	40021000 	.word	0x40021000

08007f24 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8007f2c:	4b07      	ldr	r3, [pc, #28]	; (8007f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8007f2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8007f38:	4b04      	ldr	r3, [pc, #16]	; (8007f4c <LL_APB2_GRP1_EnableClock+0x28>)
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f42:	68fb      	ldr	r3, [r7, #12]
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b004      	add	sp, #16
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40021000 	.word	0x40021000

08007f50 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007f58:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8007f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007f64:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <LL_IOP_GRP1_EnableClock+0x28>)
 8007f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	46c0      	nop			; (mov r8, r8)
 8007f72:	46bd      	mov	sp, r7
 8007f74:	b004      	add	sp, #16
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	40021000 	.word	0x40021000

08007f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007f80:	f001 f9ca 	bl	8009318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f84:	f000 f830 	bl	8007fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f88:	f000 fcac 	bl	80088e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007f8c:	f000 fc7e 	bl	800888c <MX_DMA_Init>
  MX_UCPD1_Init();
 8007f90:	f000 fbd6 	bl	8008740 <MX_UCPD1_Init>
  MX_ADC1_Init();
 8007f94:	f000 f88a 	bl	80080ac <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8007f98:	f000 f97e 	bl	8008298 <MX_LPUART1_UART_Init>
  MX_TIM7_Init();
 8007f9c:	f000 fb58 	bl	8008650 <MX_TIM7_Init>
  MX_SPI2_Init();
 8007fa0:	f000 fa5e 	bl	8008460 <MX_SPI2_Init>
  MX_TIM3_Init();
 8007fa4:	f000 fa9a 	bl	80084dc <MX_TIM3_Init>
  MX_USB_Device_Init();
 8007fa8:	f015 fbba 	bl	801d720 <MX_USB_Device_Init>
  MX_DAC1_Init();
 8007fac:	f000 f93e 	bl	800822c <MX_DAC1_Init>
  MX_TIM4_Init();
 8007fb0:	f000 faf8 	bl	80085a4 <MX_TIM4_Init>
  MX_TIM14_Init();
 8007fb4:	f000 fb8a 	bl	80086cc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8007fb8:	f7fe fc12 	bl	80067e0 <app_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8007fbc:	f00f ff04 	bl	8017dc8 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 8007fc0:	f012 fcd8 	bl	801a974 <MX_USBPD_Init>
  //app_freertos_create();
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007fc4:	4a05      	ldr	r2, [pc, #20]	; (8007fdc <main+0x60>)
 8007fc6:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <main+0x64>)
 8007fc8:	2100      	movs	r1, #0
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f00f ff44 	bl	8017e58 <osThreadNew>
 8007fd0:	0002      	movs	r2, r0
 8007fd2:	4b04      	ldr	r3, [pc, #16]	; (8007fe4 <main+0x68>)
 8007fd4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8007fd6:	f00f ff19 	bl	8017e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007fda:	e7fe      	b.n	8007fda <main+0x5e>
 8007fdc:	08024ef8 	.word	0x08024ef8
 8007fe0:	08008b89 	.word	0x08008b89
 8007fe4:	20000520 	.word	0x20000520

08007fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fe8:	b590      	push	{r4, r7, lr}
 8007fea:	b095      	sub	sp, #84	; 0x54
 8007fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fee:	2414      	movs	r4, #20
 8007ff0:	193b      	adds	r3, r7, r4
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	233c      	movs	r3, #60	; 0x3c
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	f01b fb0b 	bl	8023614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ffe:	1d3b      	adds	r3, r7, #4
 8008000:	0018      	movs	r0, r3
 8008002:	2310      	movs	r3, #16
 8008004:	001a      	movs	r2, r3
 8008006:	2100      	movs	r1, #0
 8008008:	f01b fb04 	bl	8023614 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	0018      	movs	r0, r3
 8008012:	f005 fde3 	bl	800dbdc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8008016:	193b      	adds	r3, r7, r4
 8008018:	2222      	movs	r2, #34	; 0x22
 800801a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800801c:	193b      	adds	r3, r7, r4
 800801e:	2280      	movs	r2, #128	; 0x80
 8008020:	0052      	lsls	r2, r2, #1
 8008022:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008024:	193b      	adds	r3, r7, r4
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	03d2      	lsls	r2, r2, #15
 800802a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800802c:	0021      	movs	r1, r4
 800802e:	187b      	adds	r3, r7, r1
 8008030:	2200      	movs	r2, #0
 8008032:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008034:	187b      	adds	r3, r7, r1
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800803a:	187b      	adds	r3, r7, r1
 800803c:	2202      	movs	r2, #2
 800803e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008040:	187b      	adds	r3, r7, r1
 8008042:	2202      	movs	r2, #2
 8008044:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8008046:	187b      	adds	r3, r7, r1
 8008048:	2200      	movs	r2, #0
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800804c:	187b      	adds	r3, r7, r1
 800804e:	2208      	movs	r2, #8
 8008050:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008052:	187b      	adds	r3, r7, r1
 8008054:	2280      	movs	r2, #128	; 0x80
 8008056:	0292      	lsls	r2, r2, #10
 8008058:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800805a:	187b      	adds	r3, r7, r1
 800805c:	2280      	movs	r2, #128	; 0x80
 800805e:	0492      	lsls	r2, r2, #18
 8008060:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008062:	187b      	adds	r3, r7, r1
 8008064:	2280      	movs	r2, #128	; 0x80
 8008066:	0592      	lsls	r2, r2, #22
 8008068:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800806a:	187b      	adds	r3, r7, r1
 800806c:	0018      	movs	r0, r3
 800806e:	f005 fe01 	bl	800dc74 <HAL_RCC_OscConfig>
 8008072:	1e03      	subs	r3, r0, #0
 8008074:	d001      	beq.n	800807a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8008076:	f000 fda7 	bl	8008bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	2207      	movs	r2, #7
 800807e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008080:	1d3b      	adds	r3, r7, #4
 8008082:	2202      	movs	r2, #2
 8008084:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008086:	1d3b      	adds	r3, r7, #4
 8008088:	2200      	movs	r2, #0
 800808a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	2200      	movs	r2, #0
 8008090:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	2102      	movs	r1, #2
 8008096:	0018      	movs	r0, r3
 8008098:	f006 f94c 	bl	800e334 <HAL_RCC_ClockConfig>
 800809c:	1e03      	subs	r3, r0, #0
 800809e:	d001      	beq.n	80080a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80080a0:	f000 fd92 	bl	8008bc8 <Error_Handler>
  }
}
 80080a4:	46c0      	nop			; (mov r8, r8)
 80080a6:	46bd      	mov	sp, r7
 80080a8:	b015      	add	sp, #84	; 0x54
 80080aa:	bd90      	pop	{r4, r7, pc}

080080ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80080b2:	231c      	movs	r3, #28
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	0018      	movs	r0, r3
 80080b8:	230c      	movs	r3, #12
 80080ba:	001a      	movs	r2, r3
 80080bc:	2100      	movs	r1, #0
 80080be:	f01b faa9 	bl	8023614 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	0018      	movs	r0, r3
 80080c6:	2318      	movs	r3, #24
 80080c8:	001a      	movs	r2, r3
 80080ca:	2100      	movs	r1, #0
 80080cc:	f01b faa2 	bl	8023614 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80080d0:	4b50      	ldr	r3, [pc, #320]	; (8008214 <MX_ADC1_Init+0x168>)
 80080d2:	4a51      	ldr	r2, [pc, #324]	; (8008218 <MX_ADC1_Init+0x16c>)
 80080d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80080d6:	4b4f      	ldr	r3, [pc, #316]	; (8008214 <MX_ADC1_Init+0x168>)
 80080d8:	2280      	movs	r2, #128	; 0x80
 80080da:	05d2      	lsls	r2, r2, #23
 80080dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80080de:	4b4d      	ldr	r3, [pc, #308]	; (8008214 <MX_ADC1_Init+0x168>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80080e4:	4b4b      	ldr	r3, [pc, #300]	; (8008214 <MX_ADC1_Init+0x168>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80080ea:	4b4a      	ldr	r3, [pc, #296]	; (8008214 <MX_ADC1_Init+0x168>)
 80080ec:	2280      	movs	r2, #128	; 0x80
 80080ee:	0392      	lsls	r2, r2, #14
 80080f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80080f2:	4b48      	ldr	r3, [pc, #288]	; (8008214 <MX_ADC1_Init+0x168>)
 80080f4:	2208      	movs	r2, #8
 80080f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80080f8:	4b46      	ldr	r3, [pc, #280]	; (8008214 <MX_ADC1_Init+0x168>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80080fe:	4b45      	ldr	r3, [pc, #276]	; (8008214 <MX_ADC1_Init+0x168>)
 8008100:	2200      	movs	r2, #0
 8008102:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008104:	4b43      	ldr	r3, [pc, #268]	; (8008214 <MX_ADC1_Init+0x168>)
 8008106:	2200      	movs	r2, #0
 8008108:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800810a:	4b42      	ldr	r3, [pc, #264]	; (8008214 <MX_ADC1_Init+0x168>)
 800810c:	2203      	movs	r2, #3
 800810e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008110:	4b40      	ldr	r3, [pc, #256]	; (8008214 <MX_ADC1_Init+0x168>)
 8008112:	2220      	movs	r2, #32
 8008114:	2100      	movs	r1, #0
 8008116:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8008118:	4b3e      	ldr	r3, [pc, #248]	; (8008214 <MX_ADC1_Init+0x168>)
 800811a:	22b0      	movs	r2, #176	; 0xb0
 800811c:	00d2      	lsls	r2, r2, #3
 800811e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8008120:	4b3c      	ldr	r3, [pc, #240]	; (8008214 <MX_ADC1_Init+0x168>)
 8008122:	2280      	movs	r2, #128	; 0x80
 8008124:	00d2      	lsls	r2, r2, #3
 8008126:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008128:	4b3a      	ldr	r3, [pc, #232]	; (8008214 <MX_ADC1_Init+0x168>)
 800812a:	222c      	movs	r2, #44	; 0x2c
 800812c:	2101      	movs	r1, #1
 800812e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008130:	4b38      	ldr	r3, [pc, #224]	; (8008214 <MX_ADC1_Init+0x168>)
 8008132:	2280      	movs	r2, #128	; 0x80
 8008134:	0152      	lsls	r2, r2, #5
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8008138:	4b36      	ldr	r3, [pc, #216]	; (8008214 <MX_ADC1_Init+0x168>)
 800813a:	2207      	movs	r2, #7
 800813c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800813e:	4b35      	ldr	r3, [pc, #212]	; (8008214 <MX_ADC1_Init+0x168>)
 8008140:	2207      	movs	r2, #7
 8008142:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8008144:	4b33      	ldr	r3, [pc, #204]	; (8008214 <MX_ADC1_Init+0x168>)
 8008146:	223c      	movs	r2, #60	; 0x3c
 8008148:	2100      	movs	r1, #0
 800814a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800814c:	4b31      	ldr	r3, [pc, #196]	; (8008214 <MX_ADC1_Init+0x168>)
 800814e:	2200      	movs	r2, #0
 8008150:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008152:	4b30      	ldr	r3, [pc, #192]	; (8008214 <MX_ADC1_Init+0x168>)
 8008154:	0018      	movs	r0, r3
 8008156:	f001 fb8d 	bl	8009874 <HAL_ADC_Init>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d001      	beq.n	8008162 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800815e:	f000 fd33 	bl	8008bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8008162:	211c      	movs	r1, #28
 8008164:	187b      	adds	r3, r7, r1
 8008166:	4a2d      	ldr	r2, [pc, #180]	; (800821c <MX_ADC1_Init+0x170>)
 8008168:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800816a:	187b      	adds	r3, r7, r1
 800816c:	2200      	movs	r2, #0
 800816e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8008170:	187b      	adds	r3, r7, r1
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008176:	187a      	adds	r2, r7, r1
 8008178:	4b26      	ldr	r3, [pc, #152]	; (8008214 <MX_ADC1_Init+0x168>)
 800817a:	0011      	movs	r1, r2
 800817c:	0018      	movs	r0, r3
 800817e:	f001 fedf 	bl	8009f40 <HAL_ADC_ConfigChannel>
 8008182:	1e03      	subs	r3, r0, #0
 8008184:	d001      	beq.n	800818a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008186:	f000 fd1f 	bl	8008bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800818a:	211c      	movs	r1, #28
 800818c:	187b      	adds	r3, r7, r1
 800818e:	4a24      	ldr	r2, [pc, #144]	; (8008220 <MX_ADC1_Init+0x174>)
 8008190:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008192:	187b      	adds	r3, r7, r1
 8008194:	2204      	movs	r2, #4
 8008196:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008198:	187a      	adds	r2, r7, r1
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <MX_ADC1_Init+0x168>)
 800819c:	0011      	movs	r1, r2
 800819e:	0018      	movs	r0, r3
 80081a0:	f001 fece 	bl	8009f40 <HAL_ADC_ConfigChannel>
 80081a4:	1e03      	subs	r3, r0, #0
 80081a6:	d001      	beq.n	80081ac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80081a8:	f000 fd0e 	bl	8008bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80081ac:	211c      	movs	r1, #28
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <MX_ADC1_Init+0x178>)
 80081b2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80081b4:	187b      	adds	r3, r7, r1
 80081b6:	2208      	movs	r2, #8
 80081b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081ba:	187a      	adds	r2, r7, r1
 80081bc:	4b15      	ldr	r3, [pc, #84]	; (8008214 <MX_ADC1_Init+0x168>)
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f001 febd 	bl	8009f40 <HAL_ADC_ConfigChannel>
 80081c6:	1e03      	subs	r3, r0, #0
 80081c8:	d001      	beq.n	80081ce <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80081ca:	f000 fcfd 	bl	8008bc8 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	4a15      	ldr	r2, [pc, #84]	; (8008228 <MX_ADC1_Init+0x17c>)
 80081d2:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80081d4:	1d3b      	adds	r3, r7, #4
 80081d6:	22c0      	movs	r2, #192	; 0xc0
 80081d8:	0412      	lsls	r2, r2, #16
 80081da:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_7;
 80081dc:	1d3b      	adds	r3, r7, #4
 80081de:	4a11      	ldr	r2, [pc, #68]	; (8008224 <MX_ADC1_Init+0x178>)
 80081e0:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	2201      	movs	r2, #1
 80081e6:	731a      	strb	r2, [r3, #12]
  AnalogWDGConfig.HighThreshold = 1000;
 80081e8:	1d3b      	adds	r3, r7, #4
 80081ea:	22fa      	movs	r2, #250	; 0xfa
 80081ec:	0092      	lsls	r2, r2, #2
 80081ee:	611a      	str	r2, [r3, #16]
  AnalogWDGConfig.LowThreshold = 0;
 80081f0:	1d3b      	adds	r3, r7, #4
 80081f2:	2200      	movs	r2, #0
 80081f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80081f6:	1d3a      	adds	r2, r7, #4
 80081f8:	4b06      	ldr	r3, [pc, #24]	; (8008214 <MX_ADC1_Init+0x168>)
 80081fa:	0011      	movs	r1, r2
 80081fc:	0018      	movs	r0, r3
 80081fe:	f002 f877 	bl	800a2f0 <HAL_ADC_AnalogWDGConfig>
 8008202:	1e03      	subs	r3, r0, #0
 8008204:	d001      	beq.n	800820a <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8008206:	f000 fcdf 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800820a:	46c0      	nop			; (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b00a      	add	sp, #40	; 0x28
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	2000034c 	.word	0x2000034c
 8008218:	40012400 	.word	0x40012400
 800821c:	14000020 	.word	0x14000020
 8008220:	18000040 	.word	0x18000040
 8008224:	1c000080 	.word	0x1c000080
 8008228:	0017ffff 	.word	0x0017ffff

0800822c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08a      	sub	sp, #40	; 0x28
 8008230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008232:	1d3b      	adds	r3, r7, #4
 8008234:	0018      	movs	r0, r3
 8008236:	2324      	movs	r3, #36	; 0x24
 8008238:	001a      	movs	r2, r3
 800823a:	2100      	movs	r1, #0
 800823c:	f01b f9ea 	bl	8023614 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008240:	4b13      	ldr	r3, [pc, #76]	; (8008290 <MX_DAC1_Init+0x64>)
 8008242:	4a14      	ldr	r2, [pc, #80]	; (8008294 <MX_DAC1_Init+0x68>)
 8008244:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008246:	4b12      	ldr	r3, [pc, #72]	; (8008290 <MX_DAC1_Init+0x64>)
 8008248:	0018      	movs	r0, r3
 800824a:	f002 fedc 	bl	800b006 <HAL_DAC_Init>
 800824e:	1e03      	subs	r3, r0, #0
 8008250:	d001      	beq.n	8008256 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 8008252:	f000 fcb9 	bl	8008bc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800825c:	1d3b      	adds	r3, r7, #4
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008262:	1d3b      	adds	r3, r7, #4
 8008264:	2200      	movs	r2, #0
 8008266:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	2200      	movs	r2, #0
 800826c:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800826e:	1d3b      	adds	r3, r7, #4
 8008270:	2200      	movs	r2, #0
 8008272:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008274:	1d39      	adds	r1, r7, #4
 8008276:	4b06      	ldr	r3, [pc, #24]	; (8008290 <MX_DAC1_Init+0x64>)
 8008278:	2200      	movs	r2, #0
 800827a:	0018      	movs	r0, r3
 800827c:	f002 ffc8 	bl	800b210 <HAL_DAC_ConfigChannel>
 8008280:	1e03      	subs	r3, r0, #0
 8008282:	d001      	beq.n	8008288 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 8008284:	f000 fca0 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008288:	46c0      	nop			; (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b00a      	add	sp, #40	; 0x28
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000410 	.word	0x20000410
 8008294:	40007400 	.word	0x40007400

08008298 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b0a1      	sub	sp, #132	; 0x84
 800829c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800829e:	2364      	movs	r3, #100	; 0x64
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	0018      	movs	r0, r3
 80082a4:	231c      	movs	r3, #28
 80082a6:	001a      	movs	r2, r3
 80082a8:	2100      	movs	r1, #0
 80082aa:	f01b f9b3 	bl	8023614 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082ae:	234c      	movs	r3, #76	; 0x4c
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	0018      	movs	r0, r3
 80082b4:	2318      	movs	r3, #24
 80082b6:	001a      	movs	r2, r3
 80082b8:	2100      	movs	r1, #0
 80082ba:	f01b f9ab 	bl	8023614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082be:	003b      	movs	r3, r7
 80082c0:	0018      	movs	r0, r3
 80082c2:	234c      	movs	r3, #76	; 0x4c
 80082c4:	001a      	movs	r2, r3
 80082c6:	2100      	movs	r1, #0
 80082c8:	f01b f9a4 	bl	8023614 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80082cc:	003b      	movs	r3, r7
 80082ce:	2210      	movs	r2, #16
 80082d0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80082d2:	003b      	movs	r3, r7
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082d8:	003b      	movs	r3, r7
 80082da:	0018      	movs	r0, r3
 80082dc:	f006 f9fc 	bl	800e6d8 <HAL_RCCEx_PeriphCLKConfig>
 80082e0:	1e03      	subs	r3, r0, #0
 80082e2:	d001      	beq.n	80082e8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80082e4:	f000 fc70 	bl	8008bc8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 80082e8:	2380      	movs	r3, #128	; 0x80
 80082ea:	035b      	lsls	r3, r3, #13
 80082ec:	0018      	movs	r0, r3
 80082ee:	f7ff fe03 	bl	8007ef8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80082f2:	2001      	movs	r0, #1
 80082f4:	f7ff fe2c 	bl	8007f50 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80082f8:	244c      	movs	r4, #76	; 0x4c
 80082fa:	193b      	adds	r3, r7, r4
 80082fc:	2204      	movs	r2, #4
 80082fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008300:	193b      	adds	r3, r7, r4
 8008302:	2202      	movs	r2, #2
 8008304:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8008306:	193b      	adds	r3, r7, r4
 8008308:	2200      	movs	r2, #0
 800830a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800830c:	193b      	adds	r3, r7, r4
 800830e:	2200      	movs	r2, #0
 8008310:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008312:	193b      	adds	r3, r7, r4
 8008314:	2200      	movs	r2, #0
 8008316:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8008318:	193b      	adds	r3, r7, r4
 800831a:	2206      	movs	r2, #6
 800831c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800831e:	193a      	adds	r2, r7, r4
 8008320:	23a0      	movs	r3, #160	; 0xa0
 8008322:	05db      	lsls	r3, r3, #23
 8008324:	0011      	movs	r1, r2
 8008326:	0018      	movs	r0, r3
 8008328:	f007 ffca 	bl	80102c0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800832c:	0021      	movs	r1, r4
 800832e:	187b      	adds	r3, r7, r1
 8008330:	2208      	movs	r2, #8
 8008332:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008334:	187b      	adds	r3, r7, r1
 8008336:	2202      	movs	r2, #2
 8008338:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800833a:	187b      	adds	r3, r7, r1
 800833c:	2200      	movs	r2, #0
 800833e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008340:	187b      	adds	r3, r7, r1
 8008342:	2200      	movs	r2, #0
 8008344:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008346:	187b      	adds	r3, r7, r1
 8008348:	2200      	movs	r2, #0
 800834a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800834c:	187b      	adds	r3, r7, r1
 800834e:	2206      	movs	r2, #6
 8008350:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008352:	187a      	adds	r2, r7, r1
 8008354:	23a0      	movs	r3, #160	; 0xa0
 8008356:	05db      	lsls	r3, r3, #23
 8008358:	0011      	movs	r1, r2
 800835a:	0018      	movs	r0, r3
 800835c:	f007 ffb0 	bl	80102c0 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 8008360:	4b3d      	ldr	r3, [pc, #244]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 8008362:	220f      	movs	r2, #15
 8008364:	2102      	movs	r1, #2
 8008366:	0018      	movs	r0, r3
 8008368:	f7ff fcaa 	bl	8007cc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800836c:	4b3a      	ldr	r3, [pc, #232]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 800836e:	2210      	movs	r2, #16
 8008370:	2102      	movs	r1, #2
 8008372:	0018      	movs	r0, r3
 8008374:	f7ff fba0 	bl	8007ab8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8008378:	4b37      	ldr	r3, [pc, #220]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 800837a:	2200      	movs	r2, #0
 800837c:	2102      	movs	r1, #2
 800837e:	0018      	movs	r0, r3
 8008380:	f7ff fc78 	bl	8007c74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8008384:	4b34      	ldr	r3, [pc, #208]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 8008386:	2200      	movs	r2, #0
 8008388:	2102      	movs	r1, #2
 800838a:	0018      	movs	r0, r3
 800838c:	f7ff fbba 	bl	8007b04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8008390:	4b31      	ldr	r3, [pc, #196]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 8008392:	2200      	movs	r2, #0
 8008394:	2102      	movs	r1, #2
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff fbd8 	bl	8007b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800839c:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 800839e:	2280      	movs	r2, #128	; 0x80
 80083a0:	2102      	movs	r1, #2
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff fbf6 	bl	8007b94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80083a8:	4b2b      	ldr	r3, [pc, #172]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	2102      	movs	r1, #2
 80083ae:	0018      	movs	r0, r3
 80083b0:	f7ff fc14 	bl	8007bdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80083b4:	4b28      	ldr	r3, [pc, #160]	; (8008458 <MX_LPUART1_UART_Init+0x1c0>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	2102      	movs	r1, #2
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7ff fc34 	bl	8007c28 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 80083c0:	2103      	movs	r1, #3
 80083c2:	201d      	movs	r0, #29
 80083c4:	f7ff fb0a 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 80083c8:	201d      	movs	r0, #29
 80083ca:	f7ff faed 	bl	80079a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80083ce:	2164      	movs	r1, #100	; 0x64
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 80083d6:	187b      	adds	r3, r7, r1
 80083d8:	22e1      	movs	r2, #225	; 0xe1
 80083da:	0312      	lsls	r2, r2, #12
 80083dc:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 80083de:	187b      	adds	r3, r7, r1
 80083e0:	2280      	movs	r2, #128	; 0x80
 80083e2:	0552      	lsls	r2, r2, #21
 80083e4:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80083e6:	187b      	adds	r3, r7, r1
 80083e8:	2200      	movs	r2, #0
 80083ea:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80083ec:	187b      	adds	r3, r7, r1
 80083ee:	2200      	movs	r2, #0
 80083f0:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	220c      	movs	r2, #12
 80083f6:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80083f8:	187b      	adds	r3, r7, r1
 80083fa:	2200      	movs	r2, #0
 80083fc:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80083fe:	187b      	adds	r3, r7, r1
 8008400:	4a16      	ldr	r2, [pc, #88]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 8008402:	0019      	movs	r1, r3
 8008404:	0010      	movs	r0, r2
 8008406:	f008 f843 	bl	8010490 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 800840c:	2100      	movs	r1, #0
 800840e:	0018      	movs	r0, r3
 8008410:	f7ff fca0 	bl	8007d54 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8008414:	4b11      	ldr	r3, [pc, #68]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 8008416:	2100      	movs	r1, #0
 8008418:	0018      	movs	r0, r3
 800841a:	f7ff fcbf 	bl	8007d9c <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 8008420:	0018      	movs	r0, r3
 8008422:	f7ff fc87 	bl	8007d34 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8008426:	4b0d      	ldr	r3, [pc, #52]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff fc75 	bl	8007d18 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 8008432:	0018      	movs	r0, r3
 8008434:	f7ff fcd8 	bl	8007de8 <LL_LPUART_IsActiveFlag_TEACK>
 8008438:	1e03      	subs	r3, r0, #0
 800843a:	d0f9      	beq.n	8008430 <MX_LPUART1_UART_Init+0x198>
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 800843e:	0018      	movs	r0, r3
 8008440:	f7ff fce6 	bl	8007e10 <LL_LPUART_IsActiveFlag_REACK>
 8008444:	1e03      	subs	r3, r0, #0
 8008446:	d0f3      	beq.n	8008430 <MX_LPUART1_UART_Init+0x198>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE_RXFNE(LPUART1);
 8008448:	4b04      	ldr	r3, [pc, #16]	; (800845c <MX_LPUART1_UART_Init+0x1c4>)
 800844a:	0018      	movs	r0, r3
 800844c:	f7ff fcf4 	bl	8007e38 <LL_LPUART_EnableIT_RXNE_RXFNE>
  /* USER CODE END LPUART1_Init 2 */

}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b021      	add	sp, #132	; 0x84
 8008456:	bd90      	pop	{r4, r7, pc}
 8008458:	40020000 	.word	0x40020000
 800845c:	40008000 	.word	0x40008000

08008460 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008464:	4b1b      	ldr	r3, [pc, #108]	; (80084d4 <MX_SPI2_Init+0x74>)
 8008466:	4a1c      	ldr	r2, [pc, #112]	; (80084d8 <MX_SPI2_Init+0x78>)
 8008468:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800846a:	4b1a      	ldr	r3, [pc, #104]	; (80084d4 <MX_SPI2_Init+0x74>)
 800846c:	2282      	movs	r2, #130	; 0x82
 800846e:	0052      	lsls	r2, r2, #1
 8008470:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008472:	4b18      	ldr	r3, [pc, #96]	; (80084d4 <MX_SPI2_Init+0x74>)
 8008474:	2200      	movs	r2, #0
 8008476:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008478:	4b16      	ldr	r3, [pc, #88]	; (80084d4 <MX_SPI2_Init+0x74>)
 800847a:	22e0      	movs	r2, #224	; 0xe0
 800847c:	00d2      	lsls	r2, r2, #3
 800847e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008480:	4b14      	ldr	r3, [pc, #80]	; (80084d4 <MX_SPI2_Init+0x74>)
 8008482:	2200      	movs	r2, #0
 8008484:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008486:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <MX_SPI2_Init+0x74>)
 8008488:	2200      	movs	r2, #0
 800848a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800848c:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <MX_SPI2_Init+0x74>)
 800848e:	2280      	movs	r2, #128	; 0x80
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8008494:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <MX_SPI2_Init+0x74>)
 8008496:	2220      	movs	r2, #32
 8008498:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800849a:	4b0e      	ldr	r3, [pc, #56]	; (80084d4 <MX_SPI2_Init+0x74>)
 800849c:	2200      	movs	r2, #0
 800849e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80084ac:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084ae:	2207      	movs	r2, #7
 80084b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80084b8:	4b06      	ldr	r3, [pc, #24]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084ba:	2208      	movs	r2, #8
 80084bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80084be:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <MX_SPI2_Init+0x74>)
 80084c0:	0018      	movs	r0, r3
 80084c2:	f006 fb45 	bl	800eb50 <HAL_SPI_Init>
 80084c6:	1e03      	subs	r3, r0, #0
 80084c8:	d001      	beq.n	80084ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80084ca:	f000 fb7d 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20000424 	.word	0x20000424
 80084d8:	40003800 	.word	0x40003800

080084dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b08d      	sub	sp, #52	; 0x34
 80084e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80084e2:	240c      	movs	r4, #12
 80084e4:	193b      	adds	r3, r7, r4
 80084e6:	0018      	movs	r0, r3
 80084e8:	2324      	movs	r3, #36	; 0x24
 80084ea:	001a      	movs	r2, r3
 80084ec:	2100      	movs	r1, #0
 80084ee:	f01b f891 	bl	8023614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084f2:	003b      	movs	r3, r7
 80084f4:	0018      	movs	r0, r3
 80084f6:	230c      	movs	r3, #12
 80084f8:	001a      	movs	r2, r3
 80084fa:	2100      	movs	r1, #0
 80084fc:	f01b f88a 	bl	8023614 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008500:	4b25      	ldr	r3, [pc, #148]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008502:	4a26      	ldr	r2, [pc, #152]	; (800859c <MX_TIM3_Init+0xc0>)
 8008504:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008506:	4b24      	ldr	r3, [pc, #144]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008508:	2200      	movs	r2, #0
 800850a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800850c:	4b22      	ldr	r3, [pc, #136]	; (8008598 <MX_TIM3_Init+0xbc>)
 800850e:	2200      	movs	r2, #0
 8008510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008512:	4b21      	ldr	r3, [pc, #132]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008514:	4a22      	ldr	r2, [pc, #136]	; (80085a0 <MX_TIM3_Init+0xc4>)
 8008516:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008518:	4b1f      	ldr	r3, [pc, #124]	; (8008598 <MX_TIM3_Init+0xbc>)
 800851a:	2200      	movs	r2, #0
 800851c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800851e:	4b1e      	ldr	r3, [pc, #120]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008520:	2280      	movs	r2, #128	; 0x80
 8008522:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008524:	0021      	movs	r1, r4
 8008526:	187b      	adds	r3, r7, r1
 8008528:	2203      	movs	r2, #3
 800852a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800852c:	187b      	adds	r3, r7, r1
 800852e:	2200      	movs	r2, #0
 8008530:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008532:	187b      	adds	r3, r7, r1
 8008534:	2201      	movs	r2, #1
 8008536:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008538:	187b      	adds	r3, r7, r1
 800853a:	2200      	movs	r2, #0
 800853c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 12;
 800853e:	187b      	adds	r3, r7, r1
 8008540:	220c      	movs	r2, #12
 8008542:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008544:	187b      	adds	r3, r7, r1
 8008546:	2200      	movs	r2, #0
 8008548:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800854a:	187b      	adds	r3, r7, r1
 800854c:	2201      	movs	r2, #1
 800854e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008550:	187b      	adds	r3, r7, r1
 8008552:	2200      	movs	r2, #0
 8008554:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 12;
 8008556:	187b      	adds	r3, r7, r1
 8008558:	220c      	movs	r2, #12
 800855a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800855c:	187a      	adds	r2, r7, r1
 800855e:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008560:	0011      	movs	r1, r2
 8008562:	0018      	movs	r0, r3
 8008564:	f006 ff96 	bl	800f494 <HAL_TIM_Encoder_Init>
 8008568:	1e03      	subs	r3, r0, #0
 800856a:	d001      	beq.n	8008570 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800856c:	f000 fb2c 	bl	8008bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008570:	003b      	movs	r3, r7
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008576:	003b      	movs	r3, r7
 8008578:	2200      	movs	r2, #0
 800857a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800857c:	003a      	movs	r2, r7
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <MX_TIM3_Init+0xbc>)
 8008580:	0011      	movs	r1, r2
 8008582:	0018      	movs	r0, r3
 8008584:	f007 fc48 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 8008588:	1e03      	subs	r3, r0, #0
 800858a:	d001      	beq.n	8008590 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800858c:	f000 fb1c 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b00d      	add	sp, #52	; 0x34
 8008596:	bd90      	pop	{r4, r7, pc}
 8008598:	20000488 	.word	0x20000488
 800859c:	40000400 	.word	0x40000400
 80085a0:	0000ffff 	.word	0x0000ffff

080085a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085aa:	2310      	movs	r3, #16
 80085ac:	18fb      	adds	r3, r7, r3
 80085ae:	0018      	movs	r0, r3
 80085b0:	2310      	movs	r3, #16
 80085b2:	001a      	movs	r2, r3
 80085b4:	2100      	movs	r1, #0
 80085b6:	f01b f82d 	bl	8023614 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085ba:	1d3b      	adds	r3, r7, #4
 80085bc:	0018      	movs	r0, r3
 80085be:	230c      	movs	r3, #12
 80085c0:	001a      	movs	r2, r3
 80085c2:	2100      	movs	r1, #0
 80085c4:	f01b f826 	bl	8023614 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085ca:	4a1f      	ldr	r2, [pc, #124]	; (8008648 <MX_TIM4_Init+0xa4>)
 80085cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 80085ce:	4b1d      	ldr	r3, [pc, #116]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085d0:	223f      	movs	r2, #63	; 0x3f
 80085d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085dc:	4a1b      	ldr	r2, [pc, #108]	; (800864c <MX_TIM4_Init+0xa8>)
 80085de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085e0:	4b18      	ldr	r3, [pc, #96]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085e6:	4b17      	ldr	r3, [pc, #92]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80085ec:	4b15      	ldr	r3, [pc, #84]	; (8008644 <MX_TIM4_Init+0xa0>)
 80085ee:	0018      	movs	r0, r3
 80085f0:	f006 fe3c 	bl	800f26c <HAL_TIM_Base_Init>
 80085f4:	1e03      	subs	r3, r0, #0
 80085f6:	d001      	beq.n	80085fc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80085f8:	f000 fae6 	bl	8008bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085fc:	2110      	movs	r1, #16
 80085fe:	187b      	adds	r3, r7, r1
 8008600:	2280      	movs	r2, #128	; 0x80
 8008602:	0152      	lsls	r2, r2, #5
 8008604:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008606:	187a      	adds	r2, r7, r1
 8008608:	4b0e      	ldr	r3, [pc, #56]	; (8008644 <MX_TIM4_Init+0xa0>)
 800860a:	0011      	movs	r1, r2
 800860c:	0018      	movs	r0, r3
 800860e:	f007 f9b5 	bl	800f97c <HAL_TIM_ConfigClockSource>
 8008612:	1e03      	subs	r3, r0, #0
 8008614:	d001      	beq.n	800861a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8008616:	f000 fad7 	bl	8008bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	2220      	movs	r2, #32
 800861e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008620:	1d3b      	adds	r3, r7, #4
 8008622:	2200      	movs	r2, #0
 8008624:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008626:	1d3a      	adds	r2, r7, #4
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <MX_TIM4_Init+0xa0>)
 800862a:	0011      	movs	r1, r2
 800862c:	0018      	movs	r0, r3
 800862e:	f007 fbf3 	bl	800fe18 <HAL_TIMEx_MasterConfigSynchronization>
 8008632:	1e03      	subs	r3, r0, #0
 8008634:	d001      	beq.n	800863a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8008636:	f000 fac7 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b008      	add	sp, #32
 8008640:	bd80      	pop	{r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	200004d4 	.word	0x200004d4
 8008648:	40000800 	.word	0x40000800
 800864c:	000003e7 	.word	0x000003e7

08008650 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8008656:	1d3b      	adds	r3, r7, #4
 8008658:	0018      	movs	r0, r3
 800865a:	2314      	movs	r3, #20
 800865c:	001a      	movs	r2, r3
 800865e:	2100      	movs	r1, #0
 8008660:	f01a ffd8 	bl	8023614 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8008664:	2020      	movs	r0, #32
 8008666:	f7ff fc47 	bl	8007ef8 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3);
 800866a:	2103      	movs	r1, #3
 800866c:	2012      	movs	r0, #18
 800866e:	f7ff f9b5 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8008672:	2012      	movs	r0, #18
 8008674:	f7ff f998 	bl	80079a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 8008678:	1d3b      	adds	r3, r7, #4
 800867a:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <MX_TIM7_Init+0x74>)
 800867c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800867e:	1d3b      	adds	r3, r7, #4
 8008680:	2200      	movs	r2, #0
 8008682:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 200;
 8008684:	1d3b      	adds	r3, r7, #4
 8008686:	22c8      	movs	r2, #200	; 0xc8
 8008688:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800868a:	1d3b      	adds	r3, r7, #4
 800868c:	4a0e      	ldr	r2, [pc, #56]	; (80086c8 <MX_TIM7_Init+0x78>)
 800868e:	0019      	movs	r1, r3
 8008690:	0010      	movs	r0, r2
 8008692:	f008 f94b 	bl	801092c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <MX_TIM7_Init+0x78>)
 8008698:	0018      	movs	r0, r3
 800869a:	f7ff fbfe 	bl	8007e9a <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
 800869e:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <MX_TIM7_Init+0x78>)
 80086a0:	2108      	movs	r1, #8
 80086a2:	0018      	movs	r0, r3
 80086a4:	f7ff fbe7 	bl	8007e76 <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 80086a8:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <MX_TIM7_Init+0x78>)
 80086aa:	2100      	movs	r1, #0
 80086ac:	0018      	movs	r0, r3
 80086ae:	f7ff fc02 	bl	8007eb6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80086b2:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <MX_TIM7_Init+0x78>)
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7ff fc10 	bl	8007eda <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	46bd      	mov	sp, r7
 80086be:	b006      	add	sp, #24
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	fffff9ff 	.word	0xfffff9ff
 80086c8:	40001400 	.word	0x40001400

080086cc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	0018      	movs	r0, r3
 80086d6:	2314      	movs	r3, #20
 80086d8:	001a      	movs	r2, r3
 80086da:	2100      	movs	r1, #0
 80086dc:	f01a ff9a 	bl	8023614 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM14);
 80086e0:	2380      	movs	r3, #128	; 0x80
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7ff fc1d 	bl	8007f24 <LL_APB2_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM14_IRQn, 3);
 80086ea:	2103      	movs	r1, #3
 80086ec:	2013      	movs	r0, #19
 80086ee:	f7ff f975 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM14_IRQn);
 80086f2:	2013      	movs	r0, #19
 80086f4:	f7ff f958 	bl	80079a8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	4a0f      	ldr	r2, [pc, #60]	; (8008738 <MX_TIM14_Init+0x6c>)
 80086fc:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80086fe:	1d3b      	adds	r3, r7, #4
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 5;
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	2205      	movs	r2, #5
 8008708:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800870a:	1d3b      	adds	r3, r7, #4
 800870c:	2200      	movs	r2, #0
 800870e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <MX_TIM14_Init+0x70>)
 8008714:	0019      	movs	r1, r3
 8008716:	0010      	movs	r0, r2
 8008718:	f008 f908 	bl	801092c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM14);
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <MX_TIM14_Init+0x70>)
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff fbbb 	bl	8007e9a <LL_TIM_EnableARRPreload>
  LL_TIM_SetOnePulseMode(TIM14, LL_TIM_ONEPULSEMODE_SINGLE);
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <MX_TIM14_Init+0x70>)
 8008726:	2108      	movs	r1, #8
 8008728:	0018      	movs	r0, r3
 800872a:	f7ff fba4 	bl	8007e76 <LL_TIM_SetOnePulseMode>
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	b006      	add	sp, #24
 8008734:	bd80      	pop	{r7, pc}
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	fffff9ff 	.word	0xfffff9ff
 800873c:	40002000 	.word	0x40002000

08008740 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008746:	003b      	movs	r3, r7
 8008748:	0018      	movs	r0, r3
 800874a:	2318      	movs	r3, #24
 800874c:	001a      	movs	r2, r3
 800874e:	2100      	movs	r1, #0
 8008750:	f01a ff60 	bl	8023614 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8008754:	2380      	movs	r3, #128	; 0x80
 8008756:	049b      	lsls	r3, r3, #18
 8008758:	0018      	movs	r0, r3
 800875a:	f7ff fbcd 	bl	8007ef8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800875e:	2002      	movs	r0, #2
 8008760:	f7ff fbf6 	bl	8007f50 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8008764:	2001      	movs	r0, #1
 8008766:	f7ff fbf3 	bl	8007f50 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800876a:	003b      	movs	r3, r7
 800876c:	2280      	movs	r2, #128	; 0x80
 800876e:	0212      	lsls	r2, r2, #8
 8008770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008772:	003b      	movs	r3, r7
 8008774:	2203      	movs	r2, #3
 8008776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008778:	003b      	movs	r3, r7
 800877a:	2200      	movs	r2, #0
 800877c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800877e:	003b      	movs	r3, r7
 8008780:	4a40      	ldr	r2, [pc, #256]	; (8008884 <MX_UCPD1_Init+0x144>)
 8008782:	0019      	movs	r1, r3
 8008784:	0010      	movs	r0, r2
 8008786:	f007 fd9b 	bl	80102c0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800878a:	003b      	movs	r3, r7
 800878c:	2280      	movs	r2, #128	; 0x80
 800878e:	0052      	lsls	r2, r2, #1
 8008790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008792:	003b      	movs	r3, r7
 8008794:	2203      	movs	r2, #3
 8008796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008798:	003b      	movs	r3, r7
 800879a:	2200      	movs	r2, #0
 800879c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800879e:	003a      	movs	r2, r7
 80087a0:	23a0      	movs	r3, #160	; 0xa0
 80087a2:	05db      	lsls	r3, r3, #23
 80087a4:	0011      	movs	r1, r2
 80087a6:	0018      	movs	r0, r3
 80087a8:	f007 fd8a 	bl	80102c0 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087ae:	223a      	movs	r2, #58	; 0x3a
 80087b0:	2100      	movs	r1, #0
 80087b2:	0018      	movs	r0, r3
 80087b4:	f7ff fa84 	bl	8007cc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80087b8:	4b33      	ldr	r3, [pc, #204]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	2100      	movs	r1, #0
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff f97a 	bl	8007ab8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80087c4:	4b30      	ldr	r3, [pc, #192]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	0018      	movs	r0, r3
 80087cc:	f7ff fa52 	bl	8007c74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80087d0:	4b2d      	ldr	r3, [pc, #180]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	2100      	movs	r1, #0
 80087d6:	0018      	movs	r0, r3
 80087d8:	f7ff f994 	bl	8007b04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80087dc:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087de:	2200      	movs	r2, #0
 80087e0:	2100      	movs	r1, #0
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7ff f9b2 	bl	8007b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80087e8:	4b27      	ldr	r3, [pc, #156]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087ea:	2280      	movs	r2, #128	; 0x80
 80087ec:	2100      	movs	r1, #0
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7ff f9d0 	bl	8007b94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <MX_UCPD1_Init+0x148>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	0018      	movs	r0, r3
 80087fc:	f7ff f9ee 	bl	8007bdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8008800:	4b21      	ldr	r3, [pc, #132]	; (8008888 <MX_UCPD1_Init+0x148>)
 8008802:	2200      	movs	r2, #0
 8008804:	2100      	movs	r1, #0
 8008806:	0018      	movs	r0, r3
 8008808:	f7ff fa0e 	bl	8007c28 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 800880c:	4b1e      	ldr	r3, [pc, #120]	; (8008888 <MX_UCPD1_Init+0x148>)
 800880e:	223b      	movs	r2, #59	; 0x3b
 8008810:	2101      	movs	r1, #1
 8008812:	0018      	movs	r0, r3
 8008814:	f7ff fa54 	bl	8007cc0 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8008818:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <MX_UCPD1_Init+0x148>)
 800881a:	2210      	movs	r2, #16
 800881c:	2101      	movs	r1, #1
 800881e:	0018      	movs	r0, r3
 8008820:	f7ff f94a 	bl	8007ab8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8008824:	4b18      	ldr	r3, [pc, #96]	; (8008888 <MX_UCPD1_Init+0x148>)
 8008826:	2200      	movs	r2, #0
 8008828:	2101      	movs	r1, #1
 800882a:	0018      	movs	r0, r3
 800882c:	f7ff fa22 	bl	8007c74 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8008830:	4b15      	ldr	r3, [pc, #84]	; (8008888 <MX_UCPD1_Init+0x148>)
 8008832:	2200      	movs	r2, #0
 8008834:	2101      	movs	r1, #1
 8008836:	0018      	movs	r0, r3
 8008838:	f7ff f964 	bl	8007b04 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <MX_UCPD1_Init+0x148>)
 800883e:	2200      	movs	r2, #0
 8008840:	2101      	movs	r1, #1
 8008842:	0018      	movs	r0, r3
 8008844:	f7ff f982 	bl	8007b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8008848:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <MX_UCPD1_Init+0x148>)
 800884a:	2280      	movs	r2, #128	; 0x80
 800884c:	2101      	movs	r1, #1
 800884e:	0018      	movs	r0, r3
 8008850:	f7ff f9a0 	bl	8007b94 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <MX_UCPD1_Init+0x148>)
 8008856:	2200      	movs	r2, #0
 8008858:	2101      	movs	r1, #1
 800885a:	0018      	movs	r0, r3
 800885c:	f7ff f9be 	bl	8007bdc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <MX_UCPD1_Init+0x148>)
 8008862:	2200      	movs	r2, #0
 8008864:	2101      	movs	r1, #1
 8008866:	0018      	movs	r0, r3
 8008868:	f7ff f9de 	bl	8007c28 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 800886c:	2103      	movs	r1, #3
 800886e:	2008      	movs	r0, #8
 8008870:	f7ff f8b4 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8008874:	2008      	movs	r0, #8
 8008876:	f7ff f897 	bl	80079a8 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800887a:	46c0      	nop			; (mov r8, r8)
 800887c:	46bd      	mov	sp, r7
 800887e:	b006      	add	sp, #24
 8008880:	bd80      	pop	{r7, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	50000400 	.word	0x50000400
 8008888:	40020000 	.word	0x40020000

0800888c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008892:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <MX_DMA_Init+0x54>)
 8008894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008896:	4b12      	ldr	r3, [pc, #72]	; (80088e0 <MX_DMA_Init+0x54>)
 8008898:	2101      	movs	r1, #1
 800889a:	430a      	orrs	r2, r1
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <MX_DMA_Init+0x54>)
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	2201      	movs	r2, #1
 80088a4:	4013      	ands	r3, r2
 80088a6:	607b      	str	r3, [r7, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 80088aa:	2103      	movs	r1, #3
 80088ac:	2009      	movs	r0, #9
 80088ae:	f7ff f895 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80088b2:	2009      	movs	r0, #9
 80088b4:	f7ff f878 	bl	80079a8 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 80088b8:	2103      	movs	r1, #3
 80088ba:	200a      	movs	r0, #10
 80088bc:	f7ff f88e 	bl	80079dc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80088c0:	200a      	movs	r0, #10
 80088c2:	f7ff f871 	bl	80079a8 <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 80088c6:	2200      	movs	r2, #0
 80088c8:	2103      	movs	r1, #3
 80088ca:	200b      	movs	r0, #11
 80088cc:	f002 fb72 	bl	800afb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80088d0:	200b      	movs	r0, #11
 80088d2:	f002 fb84 	bl	800afde <HAL_NVIC_EnableIRQ>

}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	46bd      	mov	sp, r7
 80088da:	b002      	add	sp, #8
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	40021000 	.word	0x40021000

080088e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b08b      	sub	sp, #44	; 0x2c
 80088e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ea:	2414      	movs	r4, #20
 80088ec:	193b      	adds	r3, r7, r4
 80088ee:	0018      	movs	r0, r3
 80088f0:	2314      	movs	r3, #20
 80088f2:	001a      	movs	r2, r3
 80088f4:	2100      	movs	r1, #0
 80088f6:	f01a fe8d 	bl	8023614 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088fa:	4b81      	ldr	r3, [pc, #516]	; (8008b00 <MX_GPIO_Init+0x21c>)
 80088fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088fe:	4b80      	ldr	r3, [pc, #512]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008900:	2101      	movs	r1, #1
 8008902:	430a      	orrs	r2, r1
 8008904:	635a      	str	r2, [r3, #52]	; 0x34
 8008906:	4b7e      	ldr	r3, [pc, #504]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	2201      	movs	r2, #1
 800890c:	4013      	ands	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
 8008910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008912:	4b7b      	ldr	r3, [pc, #492]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008916:	4b7a      	ldr	r3, [pc, #488]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008918:	2104      	movs	r1, #4
 800891a:	430a      	orrs	r2, r1
 800891c:	635a      	str	r2, [r3, #52]	; 0x34
 800891e:	4b78      	ldr	r3, [pc, #480]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	2204      	movs	r2, #4
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800892a:	4b75      	ldr	r3, [pc, #468]	; (8008b00 <MX_GPIO_Init+0x21c>)
 800892c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892e:	4b74      	ldr	r3, [pc, #464]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008930:	2102      	movs	r1, #2
 8008932:	430a      	orrs	r2, r1
 8008934:	635a      	str	r2, [r3, #52]	; 0x34
 8008936:	4b72      	ldr	r3, [pc, #456]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	2202      	movs	r2, #2
 800893c:	4013      	ands	r3, r2
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008942:	4b6f      	ldr	r3, [pc, #444]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008946:	4b6e      	ldr	r3, [pc, #440]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008948:	2108      	movs	r1, #8
 800894a:	430a      	orrs	r2, r1
 800894c:	635a      	str	r2, [r3, #52]	; 0x34
 800894e:	4b6c      	ldr	r3, [pc, #432]	; (8008b00 <MX_GPIO_Init+0x21c>)
 8008950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008952:	2208      	movs	r2, #8
 8008954:	4013      	ands	r3, r2
 8008956:	607b      	str	r3, [r7, #4]
 8008958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_LOCK_Pin|RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800895a:	2384      	movs	r3, #132	; 0x84
 800895c:	00db      	lsls	r3, r3, #3
 800895e:	4869      	ldr	r0, [pc, #420]	; (8008b04 <MX_GPIO_Init+0x220>)
 8008960:	2200      	movs	r2, #0
 8008962:	0019      	movs	r1, r3
 8008964:	f003 fb4a 	bl	800bffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB_OUT_Pin|CS_MAX7219_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 8008968:	4967      	ldr	r1, [pc, #412]	; (8008b08 <MX_GPIO_Init+0x224>)
 800896a:	4b68      	ldr	r3, [pc, #416]	; (8008b0c <MX_GPIO_Init+0x228>)
 800896c:	2200      	movs	r2, #0
 800896e:	0018      	movs	r0, r3
 8008970:	f003 fb44 	bl	800bffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	4864      	ldr	r0, [pc, #400]	; (8008b0c <MX_GPIO_Init+0x228>)
 800897a:	2201      	movs	r2, #1
 800897c:	0019      	movs	r1, r3
 800897e:	f003 fb3d 	bl	800bffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HighZ_Pin FLT_IN_TCPP_Pin */
  GPIO_InitStruct.Pin = HighZ_Pin|FLT_IN_TCPP_Pin;
 8008982:	193b      	adds	r3, r7, r4
 8008984:	2203      	movs	r2, #3
 8008986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008988:	193b      	adds	r3, r7, r4
 800898a:	2200      	movs	r2, #0
 800898c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898e:	193b      	adds	r3, r7, r4
 8008990:	2200      	movs	r2, #0
 8008992:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008994:	193a      	adds	r2, r7, r4
 8008996:	23a0      	movs	r3, #160	; 0xa0
 8008998:	05db      	lsls	r3, r3, #23
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f003 f9c1 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_DEBUG_BTN_Pin */
  GPIO_InitStruct.Pin = SW2_DEBUG_BTN_Pin;
 80089a2:	0021      	movs	r1, r4
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	2210      	movs	r2, #16
 80089a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80089aa:	187b      	adds	r3, r7, r1
 80089ac:	2284      	movs	r2, #132	; 0x84
 80089ae:	0392      	lsls	r2, r2, #14
 80089b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b2:	000c      	movs	r4, r1
 80089b4:	193b      	adds	r3, r7, r4
 80089b6:	2200      	movs	r2, #0
 80089b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 80089ba:	193b      	adds	r3, r7, r4
 80089bc:	4a51      	ldr	r2, [pc, #324]	; (8008b04 <MX_GPIO_Init+0x220>)
 80089be:	0019      	movs	r1, r3
 80089c0:	0010      	movs	r0, r2
 80089c2:	f003 f9af 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 80089c6:	193b      	adds	r3, r7, r4
 80089c8:	2220      	movs	r2, #32
 80089ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089cc:	193b      	adds	r3, r7, r4
 80089ce:	2201      	movs	r2, #1
 80089d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	2201      	movs	r2, #1
 80089d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089d8:	193b      	adds	r3, r7, r4
 80089da:	2200      	movs	r2, #0
 80089dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 80089de:	193b      	adds	r3, r7, r4
 80089e0:	4a48      	ldr	r2, [pc, #288]	; (8008b04 <MX_GPIO_Init+0x220>)
 80089e2:	0019      	movs	r1, r3
 80089e4:	0010      	movs	r0, r2
 80089e6:	f003 f99d 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB_OUT_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin|LED_USER_Pin;
 80089ea:	193b      	adds	r3, r7, r4
 80089ec:	2221      	movs	r2, #33	; 0x21
 80089ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089f0:	193b      	adds	r3, r7, r4
 80089f2:	2201      	movs	r2, #1
 80089f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089f6:	193b      	adds	r3, r7, r4
 80089f8:	2201      	movs	r2, #1
 80089fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089fc:	193b      	adds	r3, r7, r4
 80089fe:	2200      	movs	r2, #0
 8008a00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a02:	193b      	adds	r3, r7, r4
 8008a04:	4a41      	ldr	r2, [pc, #260]	; (8008b0c <MX_GPIO_Init+0x228>)
 8008a06:	0019      	movs	r1, r3
 8008a08:	0010      	movs	r0, r2
 8008a0a:	f003 f98b 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_OFF_ON_Pin SW1_TOGGLE_I_V_Pin OCP_ALERT_Pin OCP_ALERT2_Pin */
  GPIO_InitStruct.Pin = SW3_OFF_ON_Pin|SW1_TOGGLE_I_V_Pin|OCP_ALERT_Pin|OCP_ALERT2_Pin;
 8008a0e:	0021      	movs	r1, r4
 8008a10:	187b      	adds	r3, r7, r1
 8008a12:	22c6      	movs	r2, #198	; 0xc6
 8008a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	2284      	movs	r2, #132	; 0x84
 8008a1a:	0392      	lsls	r2, r2, #14
 8008a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a1e:	187b      	adds	r3, r7, r1
 8008a20:	2200      	movs	r2, #0
 8008a22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a24:	000c      	movs	r4, r1
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	4a38      	ldr	r2, [pc, #224]	; (8008b0c <MX_GPIO_Init+0x228>)
 8008a2a:	0019      	movs	r1, r3
 8008a2c:	0010      	movs	r0, r2
 8008a2e:	f003 f979 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin OCP_RESET_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|OCP_RESET_Pin;
 8008a32:	0021      	movs	r1, r4
 8008a34:	187b      	adds	r3, r7, r1
 8008a36:	2288      	movs	r2, #136	; 0x88
 8008a38:	0152      	lsls	r2, r2, #5
 8008a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a3c:	000c      	movs	r4, r1
 8008a3e:	193b      	adds	r3, r7, r4
 8008a40:	2201      	movs	r2, #1
 8008a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a44:	193b      	adds	r3, r7, r4
 8008a46:	2200      	movs	r2, #0
 8008a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a4a:	193b      	adds	r3, r7, r4
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a50:	193b      	adds	r3, r7, r4
 8008a52:	4a2e      	ldr	r2, [pc, #184]	; (8008b0c <MX_GPIO_Init+0x228>)
 8008a54:	0019      	movs	r1, r3
 8008a56:	0010      	movs	r0, r2
 8008a58:	f003 f964 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_TOGGLE_UNITS_Pin */
  GPIO_InitStruct.Pin = ENC_TOGGLE_UNITS_Pin;
 8008a5c:	0021      	movs	r1, r4
 8008a5e:	187b      	adds	r3, r7, r1
 8008a60:	2280      	movs	r2, #128	; 0x80
 8008a62:	0052      	lsls	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	2284      	movs	r2, #132	; 0x84
 8008a6a:	0392      	lsls	r2, r2, #14
 8008a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a6e:	000c      	movs	r4, r1
 8008a70:	193b      	adds	r3, r7, r4
 8008a72:	2200      	movs	r2, #0
 8008a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_TOGGLE_UNITS_GPIO_Port, &GPIO_InitStruct);
 8008a76:	193b      	adds	r3, r7, r4
 8008a78:	4a25      	ldr	r2, [pc, #148]	; (8008b10 <MX_GPIO_Init+0x22c>)
 8008a7a:	0019      	movs	r1, r3
 8008a7c:	0010      	movs	r0, r2
 8008a7e:	f003 f951 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2_G4_Pin */
  GPIO_InitStruct.Pin = CC2_G4_Pin;
 8008a82:	193b      	adds	r3, r7, r4
 8008a84:	2210      	movs	r2, #16
 8008a86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a88:	193b      	adds	r3, r7, r4
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a8e:	193b      	adds	r3, r7, r4
 8008a90:	2200      	movs	r2, #0
 8008a92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CC2_G4_GPIO_Port, &GPIO_InitStruct);
 8008a94:	193b      	adds	r3, r7, r4
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <MX_GPIO_Init+0x228>)
 8008a98:	0019      	movs	r1, r3
 8008a9a:	0010      	movs	r0, r2
 8008a9c:	f003 f942 	bl	800bd24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_ON_OFF_Pin */
  GPIO_InitStruct.Pin = RELAY_ON_OFF_Pin;
 8008aa0:	0021      	movs	r1, r4
 8008aa2:	187b      	adds	r3, r7, r1
 8008aa4:	2280      	movs	r2, #128	; 0x80
 8008aa6:	00d2      	lsls	r2, r2, #3
 8008aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008aaa:	187b      	adds	r3, r7, r1
 8008aac:	2201      	movs	r2, #1
 8008aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	187b      	adds	r3, r7, r1
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ab6:	187b      	adds	r3, r7, r1
 8008ab8:	2200      	movs	r2, #0
 8008aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8008abc:	187b      	adds	r3, r7, r1
 8008abe:	4a11      	ldr	r2, [pc, #68]	; (8008b04 <MX_GPIO_Init+0x220>)
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	0010      	movs	r0, r2
 8008ac4:	f003 f92e 	bl	800bd24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8008ac8:	2200      	movs	r2, #0
 8008aca:	2103      	movs	r1, #3
 8008acc:	2005      	movs	r0, #5
 8008ace:	f002 fa71 	bl	800afb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8008ad2:	2005      	movs	r0, #5
 8008ad4:	f002 fa83 	bl	800afde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2103      	movs	r1, #3
 8008adc:	2006      	movs	r0, #6
 8008ade:	f002 fa69 	bl	800afb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8008ae2:	2006      	movs	r0, #6
 8008ae4:	f002 fa7b 	bl	800afde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2103      	movs	r1, #3
 8008aec:	2007      	movs	r0, #7
 8008aee:	f002 fa61 	bl	800afb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8008af2:	2007      	movs	r0, #7
 8008af4:	f002 fa73 	bl	800afde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008af8:	46c0      	nop			; (mov r8, r8)
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b00b      	add	sp, #44	; 0x2c
 8008afe:	bd90      	pop	{r4, r7, pc}
 8008b00:	40021000 	.word	0x40021000
 8008b04:	50000800 	.word	0x50000800
 8008b08:	00001021 	.word	0x00001021
 8008b0c:	50000400 	.word	0x50000400
 8008b10:	50000c00 	.word	0x50000c00

08008b14 <HAL_GPIO_EXTI_Falling_Callback>:
* @brief EXTI line detection callbacks
* @param GPIO_Pin Specifies the pins connected EXTI line
* @retval None
*/
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b099      	sub	sp, #100	; 0x64
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	0002      	movs	r2, r0
 8008b1c:	1dbb      	adds	r3, r7, #6
 8008b1e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == SW2_DEBUG_BTN_Pin) /* Will display in trace the VBUS value when user button
 8008b20:	1dbb      	adds	r3, r7, #6
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	2b10      	cmp	r3, #16
 8008b26:	d128      	bne.n	8008b7a <HAL_GPIO_EXTI_Falling_Callback+0x66>
		//HAL_GPIO_TogglePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin);
		//Get Voltage level into TRACE
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));*/

		char _str2[60];
		uint32_t voltage = BSP_PWR_VBUSGetVoltage(0);
 8008b28:	2000      	movs	r0, #0
 8008b2a:	f013 fcef 	bl	801c50c <BSP_PWR_VBUSGetVoltage>
 8008b2e:	0003      	movs	r3, r0
 8008b30:	657b      	str	r3, [r7, #84]	; 0x54
		uint32_t current= BSP_PWR_VBUSGetCurrent(0);
 8008b32:	2000      	movs	r0, #0
 8008b34:	f013 fd08 	bl	801c548 <BSP_PWR_VBUSGetCurrent>
 8008b38:	0003      	movs	r3, r0
 8008b3a:	653b      	str	r3, [r7, #80]	; 0x50
		uint32_t currentOCP= BSP_PWR_VBUSGetCurrentOCP(0);
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f013 fe27 	bl	801c790 <BSP_PWR_VBUSGetCurrentOCP>
 8008b42:	0003      	movs	r3, r0
 8008b44:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Use snprintf to limit the number of characters written
		int len = snprintf(_str2, sizeof(_str2), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltage, current, currentOCP);
 8008b46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b48:	4a0e      	ldr	r2, [pc, #56]	; (8008b84 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8008b4a:	240c      	movs	r4, #12
 8008b4c:	1938      	adds	r0, r7, r4
 8008b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	000b      	movs	r3, r1
 8008b58:	213c      	movs	r1, #60	; 0x3c
 8008b5a:	f01a fd07 	bl	802356c <sniprintf>
 8008b5e:	0003      	movs	r3, r0
 8008b60:	64bb      	str	r3, [r7, #72]	; 0x48

		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 8008b62:	193b      	adds	r3, r7, r4
 8008b64:	0018      	movs	r0, r3
 8008b66:	f7fd fb31 	bl	80061cc <strlen>
 8008b6a:	0002      	movs	r2, r0
 8008b6c:	193b      	adds	r3, r7, r4
 8008b6e:	9200      	str	r2, [sp, #0]
 8008b70:	2200      	movs	r2, #0
 8008b72:	2100      	movs	r1, #0
 8008b74:	2006      	movs	r0, #6
 8008b76:	f009 ff21 	bl	80129bc <USBPD_TRACE_Add>
				}
			}**/

	}

}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	b017      	add	sp, #92	; 0x5c
 8008b80:	bd90      	pop	{r4, r7, pc}
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	08024030 	.word	0x08024030

08008b88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008b90:	2001      	movs	r0, #1
 8008b92:	f00f fa47 	bl	8018024 <osDelay>
    app_loop();
 8008b96:	f7fd fe9d 	bl	80068d4 <app_loop>
    osDelay(1);
 8008b9a:	e7f9      	b.n	8008b90 <StartDefaultTask+0x8>

08008b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a06      	ldr	r2, [pc, #24]	; (8008bc4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d101      	bne.n	8008bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008bae:	f000 fbd3 	bl	8009358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  USBPD_DPM_TimerCounter(); //related to PD device manager
 8008bb2:	f012 f86f 	bl	801ac94 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter(); //updating a graphical user interface (GUI) based on timer events.
 8008bb6:	f016 fd95 	bl	801f6e4 <GUI_TimerCounter>
  /* USER CODE END Callback 1 */
}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b002      	add	sp, #8
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	40001000 	.word	0x40001000

08008bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008bcc:	b672      	cpsid	i
}
 8008bce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008bd0:	e7fe      	b.n	8008bd0 <Error_Handler+0x8>
	...

08008bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <HAL_MspInit+0x5c>)
 8008bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bde:	4b14      	ldr	r3, [pc, #80]	; (8008c30 <HAL_MspInit+0x5c>)
 8008be0:	2101      	movs	r1, #1
 8008be2:	430a      	orrs	r2, r1
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <HAL_MspInit+0x5c>)
 8008be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bea:	2201      	movs	r2, #1
 8008bec:	4013      	ands	r3, r2
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <HAL_MspInit+0x5c>)
 8008bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf6:	4b0e      	ldr	r3, [pc, #56]	; (8008c30 <HAL_MspInit+0x5c>)
 8008bf8:	2180      	movs	r1, #128	; 0x80
 8008bfa:	0549      	lsls	r1, r1, #21
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <HAL_MspInit+0x5c>)
 8008c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c04:	2380      	movs	r3, #128	; 0x80
 8008c06:	055b      	lsls	r3, r3, #21
 8008c08:	4013      	ands	r3, r2
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8008c0e:	2302      	movs	r3, #2
 8008c10:	425b      	negs	r3, r3
 8008c12:	2200      	movs	r2, #0
 8008c14:	2103      	movs	r1, #3
 8008c16:	0018      	movs	r0, r3
 8008c18:	f002 f9cc 	bl	800afb4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008c1c:	23c0      	movs	r3, #192	; 0xc0
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	0018      	movs	r0, r3
 8008c22:	f000 fbd9 	bl	80093d8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b002      	add	sp, #8
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	40021000 	.word	0x40021000

08008c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b08b      	sub	sp, #44	; 0x2c
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c3c:	2414      	movs	r4, #20
 8008c3e:	193b      	adds	r3, r7, r4
 8008c40:	0018      	movs	r0, r3
 8008c42:	2314      	movs	r3, #20
 8008c44:	001a      	movs	r2, r3
 8008c46:	2100      	movs	r1, #0
 8008c48:	f01a fce4 	bl	8023614 <memset>
  if(hadc->Instance==ADC1)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a31      	ldr	r2, [pc, #196]	; (8008d18 <HAL_ADC_MspInit+0xe4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d15c      	bne.n	8008d10 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008c56:	4b31      	ldr	r3, [pc, #196]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c5a:	4b30      	ldr	r3, [pc, #192]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c5c:	2180      	movs	r1, #128	; 0x80
 8008c5e:	0349      	lsls	r1, r1, #13
 8008c60:	430a      	orrs	r2, r1
 8008c62:	641a      	str	r2, [r3, #64]	; 0x40
 8008c64:	4b2d      	ldr	r3, [pc, #180]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c68:	2380      	movs	r3, #128	; 0x80
 8008c6a:	035b      	lsls	r3, r3, #13
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c72:	4b2a      	ldr	r3, [pc, #168]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c78:	2101      	movs	r1, #1
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8008c7e:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <HAL_ADC_MspInit+0xe8>)
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	2201      	movs	r2, #1
 8008c84:	4013      	ands	r3, r2
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VSENSE_Pin|OCP_ADC_I_Pin|ISENSE_Pin;
 8008c8a:	193b      	adds	r3, r7, r4
 8008c8c:	22e0      	movs	r2, #224	; 0xe0
 8008c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008c90:	193b      	adds	r3, r7, r4
 8008c92:	2203      	movs	r2, #3
 8008c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	193b      	adds	r3, r7, r4
 8008c98:	2200      	movs	r2, #0
 8008c9a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c9c:	193a      	adds	r2, r7, r4
 8008c9e:	23a0      	movs	r3, #160	; 0xa0
 8008ca0:	05db      	lsls	r3, r3, #23
 8008ca2:	0011      	movs	r1, r2
 8008ca4:	0018      	movs	r0, r3
 8008ca6:	f003 f83d 	bl	800bd24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cac:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_ADC_MspInit+0xf0>)
 8008cae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008cb0:	4b1b      	ldr	r3, [pc, #108]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cb2:	2205      	movs	r2, #5
 8008cb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cbc:	4b18      	ldr	r3, [pc, #96]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008cc2:	4b17      	ldr	r3, [pc, #92]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cc4:	2280      	movs	r2, #128	; 0x80
 8008cc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008cc8:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cca:	2280      	movs	r2, #128	; 0x80
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008cd0:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	00d2      	lsls	r2, r2, #3
 8008cd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cda:	2220      	movs	r2, #32
 8008cdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008cde:	4b10      	ldr	r3, [pc, #64]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008ce4:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f002 fbca 	bl	800b480 <HAL_DMA_Init>
 8008cec:	1e03      	subs	r3, r0, #0
 8008cee:	d001      	beq.n	8008cf4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8008cf0:	f7ff ff6a 	bl	8008bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a0a      	ldr	r2, [pc, #40]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cf8:	651a      	str	r2, [r3, #80]	; 0x50
 8008cfa:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <HAL_ADC_MspInit+0xec>)
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 8008d00:	2200      	movs	r2, #0
 8008d02:	2103      	movs	r1, #3
 8008d04:	200c      	movs	r0, #12
 8008d06:	f002 f955 	bl	800afb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8008d0a:	200c      	movs	r0, #12
 8008d0c:	f002 f967 	bl	800afde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008d10:	46c0      	nop			; (mov r8, r8)
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b00b      	add	sp, #44	; 0x2c
 8008d16:	bd90      	pop	{r4, r7, pc}
 8008d18:	40012400 	.word	0x40012400
 8008d1c:	40021000 	.word	0x40021000
 8008d20:	200003b0 	.word	0x200003b0
 8008d24:	40020044 	.word	0x40020044

08008d28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b08b      	sub	sp, #44	; 0x2c
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d30:	2414      	movs	r4, #20
 8008d32:	193b      	adds	r3, r7, r4
 8008d34:	0018      	movs	r0, r3
 8008d36:	2314      	movs	r3, #20
 8008d38:	001a      	movs	r2, r3
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f01a fc6a 	bl	8023614 <memset>
  if(hdac->Instance==DAC1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a1c      	ldr	r2, [pc, #112]	; (8008db8 <HAL_DAC_MspInit+0x90>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d131      	bne.n	8008dae <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008d4a:	4b1c      	ldr	r3, [pc, #112]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4e:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d50:	2180      	movs	r1, #128	; 0x80
 8008d52:	0589      	lsls	r1, r1, #22
 8008d54:	430a      	orrs	r2, r1
 8008d56:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d58:	4b18      	ldr	r3, [pc, #96]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d5c:	2380      	movs	r3, #128	; 0x80
 8008d5e:	059b      	lsls	r3, r3, #22
 8008d60:	4013      	ands	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
 8008d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d66:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	635a      	str	r2, [r3, #52]	; 0x34
 8008d72:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <HAL_DAC_MspInit+0x94>)
 8008d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d76:	2201      	movs	r2, #1
 8008d78:	4013      	ands	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = OCP_DAC_LIMIT_Pin;
 8008d7e:	193b      	adds	r3, r7, r4
 8008d80:	2210      	movs	r2, #16
 8008d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008d84:	193b      	adds	r3, r7, r4
 8008d86:	2203      	movs	r2, #3
 8008d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d8a:	193b      	adds	r3, r7, r4
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OCP_DAC_LIMIT_GPIO_Port, &GPIO_InitStruct);
 8008d90:	193a      	adds	r2, r7, r4
 8008d92:	23a0      	movs	r3, #160	; 0xa0
 8008d94:	05db      	lsls	r3, r3, #23
 8008d96:	0011      	movs	r1, r2
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f002 ffc3 	bl	800bd24 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2103      	movs	r1, #3
 8008da2:	2011      	movs	r0, #17
 8008da4:	f002 f906 	bl	800afb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8008da8:	2011      	movs	r0, #17
 8008daa:	f002 f918 	bl	800afde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b00b      	add	sp, #44	; 0x2c
 8008db4:	bd90      	pop	{r4, r7, pc}
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	40007400 	.word	0x40007400
 8008dbc:	40021000 	.word	0x40021000

08008dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b08b      	sub	sp, #44	; 0x2c
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc8:	2414      	movs	r4, #20
 8008dca:	193b      	adds	r3, r7, r4
 8008dcc:	0018      	movs	r0, r3
 8008dce:	2314      	movs	r3, #20
 8008dd0:	001a      	movs	r2, r3
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	f01a fc1e 	bl	8023614 <memset>
  if(hspi->Instance==SPI2)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <HAL_SPI_MspInit+0x8c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d130      	bne.n	8008e44 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008de2:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008de8:	2180      	movs	r1, #128	; 0x80
 8008dea:	01c9      	lsls	r1, r1, #7
 8008dec:	430a      	orrs	r2, r1
 8008dee:	63da      	str	r2, [r3, #60]	; 0x3c
 8008df0:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	01db      	lsls	r3, r3, #7
 8008df8:	4013      	ands	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dfe:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e02:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008e04:	2102      	movs	r1, #2
 8008e06:	430a      	orrs	r2, r1
 8008e08:	635a      	str	r2, [r3, #52]	; 0x34
 8008e0a:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <HAL_SPI_MspInit+0x90>)
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0e:	2202      	movs	r2, #2
 8008e10:	4013      	ands	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB11     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008e16:	193b      	adds	r3, r7, r4
 8008e18:	22a0      	movs	r2, #160	; 0xa0
 8008e1a:	0192      	lsls	r2, r2, #6
 8008e1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e1e:	0021      	movs	r1, r4
 8008e20:	187b      	adds	r3, r7, r1
 8008e22:	2202      	movs	r2, #2
 8008e24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	2200      	movs	r2, #0
 8008e2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e2c:	187b      	adds	r3, r7, r1
 8008e2e:	2200      	movs	r2, #0
 8008e30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	2200      	movs	r2, #0
 8008e36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e38:	187b      	adds	r3, r7, r1
 8008e3a:	4a06      	ldr	r2, [pc, #24]	; (8008e54 <HAL_SPI_MspInit+0x94>)
 8008e3c:	0019      	movs	r1, r3
 8008e3e:	0010      	movs	r0, r2
 8008e40:	f002 ff70 	bl	800bd24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008e44:	46c0      	nop			; (mov r8, r8)
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b00b      	add	sp, #44	; 0x2c
 8008e4a:	bd90      	pop	{r4, r7, pc}
 8008e4c:	40003800 	.word	0x40003800
 8008e50:	40021000 	.word	0x40021000
 8008e54:	50000400 	.word	0x50000400

08008e58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b08b      	sub	sp, #44	; 0x2c
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e60:	2414      	movs	r4, #20
 8008e62:	193b      	adds	r3, r7, r4
 8008e64:	0018      	movs	r0, r3
 8008e66:	2314      	movs	r3, #20
 8008e68:	001a      	movs	r2, r3
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	f01a fbd2 	bl	8023614 <memset>
  if(htim_encoder->Instance==TIM3)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <HAL_TIM_Encoder_MspInit+0x98>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d135      	bne.n	8008ee6 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008e7a:	4b1e      	ldr	r3, [pc, #120]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e80:	2102      	movs	r1, #2
 8008e82:	430a      	orrs	r2, r1
 8008e84:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e86:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e92:	4b18      	ldr	r3, [pc, #96]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e96:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e98:	2104      	movs	r1, #4
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8008e9e:	4b15      	ldr	r3, [pc, #84]	; (8008ef4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM3_CH1_Pin|ENC_TIM3_CH2_Pin;
 8008eaa:	0021      	movs	r1, r4
 8008eac:	187b      	adds	r3, r7, r1
 8008eae:	22c0      	movs	r2, #192	; 0xc0
 8008eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eb2:	187b      	adds	r3, r7, r1
 8008eb4:	2202      	movs	r2, #2
 8008eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb8:	187b      	adds	r3, r7, r1
 8008eba:	2200      	movs	r2, #0
 8008ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ebe:	187b      	adds	r3, r7, r1
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8008ec4:	187b      	adds	r3, r7, r1
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008ece:	0019      	movs	r1, r3
 8008ed0:	0010      	movs	r0, r2
 8008ed2:	f002 ff27 	bl	800bd24 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2103      	movs	r1, #3
 8008eda:	2010      	movs	r0, #16
 8008edc:	f002 f86a 	bl	800afb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f002 f87c 	bl	800afde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	b00b      	add	sp, #44	; 0x2c
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	46c0      	nop			; (mov r8, r8)
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	50000800 	.word	0x50000800

08008efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <HAL_TIM_Base_MspInit+0x44>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d113      	bne.n	8008f36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <HAL_TIM_Base_MspInit+0x48>)
 8008f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <HAL_TIM_Base_MspInit+0x48>)
 8008f14:	2104      	movs	r1, #4
 8008f16:	430a      	orrs	r2, r1
 8008f18:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <HAL_TIM_Base_MspInit+0x48>)
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	2204      	movs	r2, #4
 8008f20:	4013      	ands	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 8008f26:	2200      	movs	r2, #0
 8008f28:	2103      	movs	r1, #3
 8008f2a:	2010      	movs	r0, #16
 8008f2c:	f002 f842 	bl	800afb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8008f30:	2010      	movs	r0, #16
 8008f32:	f002 f854 	bl	800afde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b004      	add	sp, #16
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	40000800 	.word	0x40000800
 8008f44:	40021000 	.word	0x40021000

08008f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f48:	b5b0      	push	{r4, r5, r7, lr}
 8008f4a:	b08c      	sub	sp, #48	; 0x30
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008f50:	232b      	movs	r3, #43	; 0x2b
 8008f52:	18fb      	adds	r3, r7, r3
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008f58:	4b37      	ldr	r3, [pc, #220]	; (8009038 <HAL_InitTick+0xf0>)
 8008f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <HAL_InitTick+0xf0>)
 8008f5e:	2110      	movs	r1, #16
 8008f60:	430a      	orrs	r2, r1
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f64:	4b34      	ldr	r3, [pc, #208]	; (8009038 <HAL_InitTick+0xf0>)
 8008f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f68:	2210      	movs	r2, #16
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008f70:	230c      	movs	r3, #12
 8008f72:	18fa      	adds	r2, r7, r3
 8008f74:	2410      	movs	r4, #16
 8008f76:	193b      	adds	r3, r7, r4
 8008f78:	0011      	movs	r1, r2
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f005 fb82 	bl	800e684 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008f80:	193b      	adds	r3, r7, r4
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d104      	bne.n	8008f96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008f8c:	f005 fb64 	bl	800e658 <HAL_RCC_GetPCLK1Freq>
 8008f90:	0003      	movs	r3, r0
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f94:	e004      	b.n	8008fa0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008f96:	f005 fb5f 	bl	800e658 <HAL_RCC_GetPCLK1Freq>
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	4926      	ldr	r1, [pc, #152]	; (800903c <HAL_InitTick+0xf4>)
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7fd f923 	bl	80061f0 <__udivsi3>
 8008faa:	0003      	movs	r3, r0
 8008fac:	3b01      	subs	r3, #1
 8008fae:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008fb0:	4b23      	ldr	r3, [pc, #140]	; (8009040 <HAL_InitTick+0xf8>)
 8008fb2:	4a24      	ldr	r2, [pc, #144]	; (8009044 <HAL_InitTick+0xfc>)
 8008fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008fb6:	4b22      	ldr	r3, [pc, #136]	; (8009040 <HAL_InitTick+0xf8>)
 8008fb8:	4a23      	ldr	r2, [pc, #140]	; (8009048 <HAL_InitTick+0x100>)
 8008fba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008fbc:	4b20      	ldr	r3, [pc, #128]	; (8009040 <HAL_InitTick+0xf8>)
 8008fbe:	6a3a      	ldr	r2, [r7, #32]
 8008fc0:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8008fc2:	4b1f      	ldr	r3, [pc, #124]	; (8009040 <HAL_InitTick+0xf8>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <HAL_InitTick+0xf8>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fce:	4b1c      	ldr	r3, [pc, #112]	; (8009040 <HAL_InitTick+0xf8>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008fd4:	252b      	movs	r5, #43	; 0x2b
 8008fd6:	197c      	adds	r4, r7, r5
 8008fd8:	4b19      	ldr	r3, [pc, #100]	; (8009040 <HAL_InitTick+0xf8>)
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f006 f946 	bl	800f26c <HAL_TIM_Base_Init>
 8008fe0:	0003      	movs	r3, r0
 8008fe2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8008fe4:	197b      	adds	r3, r7, r5
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d11e      	bne.n	800902a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008fec:	197c      	adds	r4, r7, r5
 8008fee:	4b14      	ldr	r3, [pc, #80]	; (8009040 <HAL_InitTick+0xf8>)
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	f006 f9ed 	bl	800f3d0 <HAL_TIM_Base_Start_IT>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8008ffa:	197b      	adds	r3, r7, r5
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d113      	bne.n	800902a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8009002:	2011      	movs	r0, #17
 8009004:	f001 ffeb 	bl	800afde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d809      	bhi.n	8009022 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	0019      	movs	r1, r3
 8009014:	2011      	movs	r0, #17
 8009016:	f001 ffcd 	bl	800afb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <HAL_InitTick+0x104>)
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	e003      	b.n	800902a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8009022:	232b      	movs	r3, #43	; 0x2b
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	2201      	movs	r2, #1
 8009028:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800902a:	232b      	movs	r3, #43	; 0x2b
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	781b      	ldrb	r3, [r3, #0]
}
 8009030:	0018      	movs	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	b00c      	add	sp, #48	; 0x30
 8009036:	bdb0      	pop	{r4, r5, r7, pc}
 8009038:	40021000 	.word	0x40021000
 800903c:	000f4240 	.word	0x000f4240
 8009040:	20000524 	.word	0x20000524
 8009044:	40001000 	.word	0x40001000
 8009048:	000003e7 	.word	0x000003e7
 800904c:	20000060 	.word	0x20000060

08009050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009054:	e7fe      	b.n	8009054 <NMI_Handler+0x4>

08009056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800905a:	e7fe      	b.n	800905a <HardFault_Handler+0x4>

0800905c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW3_OFF_ON_Pin) != RESET){
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <EXTI0_1_IRQHandler+0x34>)
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2202      	movs	r2, #2
 8009066:	4013      	ands	r3, r2
 8009068:	d104      	bne.n	8009074 <EXTI0_1_IRQHandler+0x18>
 800906a:	4b09      	ldr	r3, [pc, #36]	; (8009090 <EXTI0_1_IRQHandler+0x34>)
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2202      	movs	r2, #2
 8009070:	4013      	ands	r3, r2
 8009072:	d001      	beq.n	8009078 <EXTI0_1_IRQHandler+0x1c>
 8009074:	2301      	movs	r3, #1
 8009076:	e000      	b.n	800907a <EXTI0_1_IRQHandler+0x1e>
 8009078:	2300      	movs	r3, #0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <EXTI0_1_IRQHandler+0x26>
	  sw3_on_off_isr();
 800907e:	f7fd ff3f 	bl	8006f00 <sw3_on_off_isr>
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_OFF_ON_Pin);
 8009082:	2002      	movs	r0, #2
 8009084:	f002 fff2 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8009088:	46c0      	nop			; (mov r8, r8)
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	40021800 	.word	0x40021800

08009094 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW1_TOGGLE_I_V_Pin) != RESET){
 8009098:	4b0b      	ldr	r3, [pc, #44]	; (80090c8 <EXTI2_3_IRQHandler+0x34>)
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	2204      	movs	r2, #4
 800909e:	4013      	ands	r3, r2
 80090a0:	d104      	bne.n	80090ac <EXTI2_3_IRQHandler+0x18>
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <EXTI2_3_IRQHandler+0x34>)
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2204      	movs	r2, #4
 80090a8:	4013      	ands	r3, r2
 80090aa:	d001      	beq.n	80090b0 <EXTI2_3_IRQHandler+0x1c>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e000      	b.n	80090b2 <EXTI2_3_IRQHandler+0x1e>
 80090b0:	2300      	movs	r3, #0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <EXTI2_3_IRQHandler+0x26>
	  sw1_toggle_i_v_isr();
 80090b6:	f7fd ff91 	bl	8006fdc <sw1_toggle_i_v_isr>
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_TOGGLE_I_V_Pin);
 80090ba:	2004      	movs	r0, #4
 80090bc:	f002 ffd6 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80090c0:	46c0      	nop			; (mov r8, r8)
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	40021800 	.word	0x40021800

080090cc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(ENC_TOGGLE_UNITS_Pin) != RESET){
 80090d0:	4b26      	ldr	r3, [pc, #152]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 80090d2:	68da      	ldr	r2, [r3, #12]
 80090d4:	2380      	movs	r3, #128	; 0x80
 80090d6:	005b      	lsls	r3, r3, #1
 80090d8:	4013      	ands	r3, r2
 80090da:	d105      	bne.n	80090e8 <EXTI4_15_IRQHandler+0x1c>
 80090dc:	4b23      	ldr	r3, [pc, #140]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	4013      	ands	r3, r2
 80090e6:	d001      	beq.n	80090ec <EXTI4_15_IRQHandler+0x20>
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <EXTI4_15_IRQHandler+0x22>
 80090ec:	2300      	movs	r3, #0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <EXTI4_15_IRQHandler+0x2a>
	  enc_toggle_units_isr();
 80090f2:	f7fd fe17 	bl	8006d24 <enc_toggle_units_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(SW2_DEBUG_BTN_Pin) != RESET){
 80090f6:	4b1d      	ldr	r3, [pc, #116]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	2210      	movs	r2, #16
 80090fc:	4013      	ands	r3, r2
 80090fe:	d104      	bne.n	800910a <EXTI4_15_IRQHandler+0x3e>
 8009100:	4b1a      	ldr	r3, [pc, #104]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	2210      	movs	r2, #16
 8009106:	4013      	ands	r3, r2
 8009108:	d001      	beq.n	800910e <EXTI4_15_IRQHandler+0x42>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <EXTI4_15_IRQHandler+0x44>
 800910e:	2300      	movs	r3, #0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <EXTI4_15_IRQHandler+0x4c>
	  sw2_lock_isr();
 8009114:	f7fd ffd4 	bl	80070c0 <sw2_lock_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT_Pin) != RESET){
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	2240      	movs	r2, #64	; 0x40
 800911e:	4013      	ands	r3, r2
 8009120:	d104      	bne.n	800912c <EXTI4_15_IRQHandler+0x60>
 8009122:	4b12      	ldr	r3, [pc, #72]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	2240      	movs	r2, #64	; 0x40
 8009128:	4013      	ands	r3, r2
 800912a:	d001      	beq.n	8009130 <EXTI4_15_IRQHandler+0x64>
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <EXTI4_15_IRQHandler+0x66>
 8009130:	2300      	movs	r3, #0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <EXTI4_15_IRQHandler+0x6e>
	  ocp_alert_isr();
 8009136:	f7fe f849 	bl	80071cc <ocp_alert_isr>
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT2_Pin) != RESET){
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	2280      	movs	r2, #128	; 0x80
 8009140:	4013      	ands	r3, r2
 8009142:	d101      	bne.n	8009148 <EXTI4_15_IRQHandler+0x7c>
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <EXTI4_15_IRQHandler+0xa0>)
 8009146:	691b      	ldr	r3, [r3, #16]
	  //ocp_alert_isr();
  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_DEBUG_BTN_Pin);
 8009148:	2010      	movs	r0, #16
 800914a:	f002 ff8f 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT_Pin);
 800914e:	2040      	movs	r0, #64	; 0x40
 8009150:	f002 ff8c 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT2_Pin);
 8009154:	2080      	movs	r0, #128	; 0x80
 8009156:	f002 ff89 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_TOGGLE_UNITS_Pin);
 800915a:	2380      	movs	r3, #128	; 0x80
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	0018      	movs	r0, r3
 8009160:	f002 ff84 	bl	800c06c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	40021800 	.word	0x40021800

08009170 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8009174:	4b04      	ldr	r3, [pc, #16]	; (8009188 <USB_UCPD1_2_IRQHandler+0x18>)
 8009176:	0018      	movs	r0, r3
 8009178:	f003 f932 	bl	800c3e0 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 800917c:	f00a fc62 	bl	8013a44 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	20004474 	.word	0x20004474

0800918c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 800919a:	f019 f94d 	bl	8022438 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80091a8:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 80091aa:	0018      	movs	r0, r3
 80091ac:	f002 fa9a 	bl	800b6e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 80091b0:	46c0      	nop			; (mov r8, r8)
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	200003b0 	.word	0x200003b0

080091bc <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80091c0:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <ADC1_COMP_IRQHandler+0x14>)
 80091c2:	0018      	movs	r0, r3
 80091c4:	f000 fd8c 	bl	8009ce0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80091c8:	46c0      	nop			; (mov r8, r8)
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	46c0      	nop			; (mov r8, r8)
 80091d0:	2000034c 	.word	0x2000034c

080091d4 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */
  encoder_turn_isr();
 80091d8:	f7fd fd56 	bl	8006c88 <encoder_turn_isr>
  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80091dc:	4b05      	ldr	r3, [pc, #20]	; (80091f4 <TIM3_TIM4_IRQHandler+0x20>)
 80091de:	0018      	movs	r0, r3
 80091e0:	f006 fac4 	bl	800f76c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim4);
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <TIM3_TIM4_IRQHandler+0x24>)
 80091e6:	0018      	movs	r0, r3
 80091e8:	f006 fac0 	bl	800f76c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 80091ec:	46c0      	nop			; (mov r8, r8)
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			; (mov r8, r8)
 80091f4:	20000488 	.word	0x20000488
 80091f8:	200004d4 	.word	0x200004d4

080091fc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <TIM6_DAC_LPTIM1_IRQHandler+0x1c>)
 8009202:	0018      	movs	r0, r3
 8009204:	f006 fab2 	bl	800f76c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8009208:	4b04      	ldr	r3, [pc, #16]	; (800921c <TIM6_DAC_LPTIM1_IRQHandler+0x20>)
 800920a:	0018      	movs	r0, r3
 800920c:	f001 ff74 	bl	800b0f8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8009210:	46c0      	nop			; (mov r8, r8)
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	46c0      	nop			; (mov r8, r8)
 8009218:	20000524 	.word	0x20000524
 800921c:	20000410 	.word	0x20000410

08009220 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
  tim7_btn_isr();
 8009224:	f7fd fe2c 	bl	8006e80 <tim7_btn_isr>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8009228:	46c0      	nop			; (mov r8, r8)
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  tim14_isr();
 8009232:	f7fd fe4b 	bl	8006ecc <tim14_isr>
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8009240:	f019 f901 	bl	8022446 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8009244:	46c0      	nop			; (mov r8, r8)
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009254:	4a14      	ldr	r2, [pc, #80]	; (80092a8 <_sbrk+0x5c>)
 8009256:	4b15      	ldr	r3, [pc, #84]	; (80092ac <_sbrk+0x60>)
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009260:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <_sbrk+0x64>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009268:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <_sbrk+0x64>)
 800926a:	4a12      	ldr	r2, [pc, #72]	; (80092b4 <_sbrk+0x68>)
 800926c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800926e:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <_sbrk+0x64>)
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	18d3      	adds	r3, r2, r3
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	429a      	cmp	r2, r3
 800927a:	d207      	bcs.n	800928c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800927c:	f01a fa42 	bl	8023704 <__errno>
 8009280:	0003      	movs	r3, r0
 8009282:	220c      	movs	r2, #12
 8009284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009286:	2301      	movs	r3, #1
 8009288:	425b      	negs	r3, r3
 800928a:	e009      	b.n	80092a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800928c:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <_sbrk+0x64>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <_sbrk+0x64>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	18d2      	adds	r2, r2, r3
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <_sbrk+0x64>)
 800929c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800929e:	68fb      	ldr	r3, [r7, #12]
}
 80092a0:	0018      	movs	r0, r3
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b006      	add	sp, #24
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20024000 	.word	0x20024000
 80092ac:	00000400 	.word	0x00000400
 80092b0:	20000570 	.word	0x20000570
 80092b4:	20005188 	.word	0x20005188

080092b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092bc:	46c0      	nop			; (mov r8, r8)
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80092c4:	480d      	ldr	r0, [pc, #52]	; (80092fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80092c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80092c8:	f7ff fff6 	bl	80092b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80092cc:	480c      	ldr	r0, [pc, #48]	; (8009300 <LoopForever+0x6>)
  ldr r1, =_edata
 80092ce:	490d      	ldr	r1, [pc, #52]	; (8009304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80092d0:	4a0d      	ldr	r2, [pc, #52]	; (8009308 <LoopForever+0xe>)
  movs r3, #0
 80092d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80092d4:	e002      	b.n	80092dc <LoopCopyDataInit>

080092d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092da:	3304      	adds	r3, #4

080092dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092e0:	d3f9      	bcc.n	80092d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <LoopForever+0x12>)
  ldr r4, =_ebss
 80092e4:	4c0a      	ldr	r4, [pc, #40]	; (8009310 <LoopForever+0x16>)
  movs r3, #0
 80092e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092e8:	e001      	b.n	80092ee <LoopFillZerobss>

080092ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092ec:	3204      	adds	r2, #4

080092ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092f0:	d3fb      	bcc.n	80092ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80092f2:	f01a fa0d 	bl	8023710 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80092f6:	f7fe fe41 	bl	8007f7c <main>

080092fa <LoopForever>:

LoopForever:
  b LoopForever
 80092fa:	e7fe      	b.n	80092fa <LoopForever>
  ldr   r0, =_estack
 80092fc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8009300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009304:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8009308:	08025920 	.word	0x08025920
  ldr r2, =_sbss
 800930c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8009310:	20005184 	.word	0x20005184

08009314 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009314:	e7fe      	b.n	8009314 <CEC_IRQHandler>
	...

08009318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800931e:	1dfb      	adds	r3, r7, #7
 8009320:	2200      	movs	r2, #0
 8009322:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <HAL_Init+0x3c>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	4b0a      	ldr	r3, [pc, #40]	; (8009354 <HAL_Init+0x3c>)
 800932a:	2180      	movs	r1, #128	; 0x80
 800932c:	0049      	lsls	r1, r1, #1
 800932e:	430a      	orrs	r2, r1
 8009330:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009332:	2003      	movs	r0, #3
 8009334:	f7ff fe08 	bl	8008f48 <HAL_InitTick>
 8009338:	1e03      	subs	r3, r0, #0
 800933a:	d003      	beq.n	8009344 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800933c:	1dfb      	adds	r3, r7, #7
 800933e:	2201      	movs	r2, #1
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	e001      	b.n	8009348 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009344:	f7ff fc46 	bl	8008bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009348:	1dfb      	adds	r3, r7, #7
 800934a:	781b      	ldrb	r3, [r3, #0]
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	b002      	add	sp, #8
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40022000 	.word	0x40022000

08009358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <HAL_IncTick+0x1c>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	001a      	movs	r2, r3
 8009362:	4b05      	ldr	r3, [pc, #20]	; (8009378 <HAL_IncTick+0x20>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	18d2      	adds	r2, r2, r3
 8009368:	4b03      	ldr	r3, [pc, #12]	; (8009378 <HAL_IncTick+0x20>)
 800936a:	601a      	str	r2, [r3, #0]
}
 800936c:	46c0      	nop			; (mov r8, r8)
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	20000064 	.word	0x20000064
 8009378:	20000574 	.word	0x20000574

0800937c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  return uwTick;
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <HAL_GetTick+0x10>)
 8009382:	681b      	ldr	r3, [r3, #0]
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			; (mov r8, r8)
 800938c:	20000574 	.word	0x20000574

08009390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009398:	f7ff fff0 	bl	800937c <HAL_GetTick>
 800939c:	0003      	movs	r3, r0
 800939e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
 80093a8:	d005      	beq.n	80093b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093aa:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <HAL_Delay+0x44>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	001a      	movs	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80093b6:	46c0      	nop			; (mov r8, r8)
 80093b8:	f7ff ffe0 	bl	800937c <HAL_GetTick>
 80093bc:	0002      	movs	r2, r0
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d8f7      	bhi.n	80093b8 <HAL_Delay+0x28>
  {
  }
}
 80093c8:	46c0      	nop			; (mov r8, r8)
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	46bd      	mov	sp, r7
 80093ce:	b004      	add	sp, #16
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	20000064 	.word	0x20000064

080093d8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80093e0:	4b06      	ldr	r3, [pc, #24]	; (80093fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a06      	ldr	r2, [pc, #24]	; (8009400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	0019      	movs	r1, r3
 80093ea:	4b04      	ldr	r3, [pc, #16]	; (80093fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	601a      	str	r2, [r3, #0]
}
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	46bd      	mov	sp, r7
 80093f6:	b002      	add	sp, #8
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	40010000 	.word	0x40010000
 8009400:	fffff9ff 	.word	0xfffff9ff

08009404 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a05      	ldr	r2, [pc, #20]	; (8009428 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8009414:	401a      	ands	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	601a      	str	r2, [r3, #0]
}
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	46bd      	mov	sp, r7
 8009422:	b002      	add	sp, #8
 8009424:	bd80      	pop	{r7, pc}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	fe3fffff 	.word	0xfe3fffff

0800942c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	23e0      	movs	r3, #224	; 0xe0
 800943a:	045b      	lsls	r3, r3, #17
 800943c:	4013      	ands	r3, r2
}
 800943e:	0018      	movs	r0, r3
 8009440:	46bd      	mov	sp, r7
 8009442:	b002      	add	sp, #8
 8009444:	bd80      	pop	{r7, pc}

08009446 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	2104      	movs	r1, #4
 800945a:	400a      	ands	r2, r1
 800945c:	2107      	movs	r1, #7
 800945e:	4091      	lsls	r1, r2
 8009460:	000a      	movs	r2, r1
 8009462:	43d2      	mvns	r2, r2
 8009464:	401a      	ands	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2104      	movs	r1, #4
 800946a:	400b      	ands	r3, r1
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	4099      	lsls	r1, r3
 8009470:	000b      	movs	r3, r1
 8009472:	431a      	orrs	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	b004      	add	sp, #16
 800947e:	bd80      	pop	{r7, pc}

08009480 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	2104      	movs	r1, #4
 8009492:	400a      	ands	r2, r1
 8009494:	2107      	movs	r1, #7
 8009496:	4091      	lsls	r1, r2
 8009498:	000a      	movs	r2, r1
 800949a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	2104      	movs	r1, #4
 80094a0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80094a2:	40da      	lsrs	r2, r3
 80094a4:	0013      	movs	r3, r2
}
 80094a6:	0018      	movs	r0, r3
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b002      	add	sp, #8
 80094ac:	bd80      	pop	{r7, pc}

080094ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	23c0      	movs	r3, #192	; 0xc0
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	4013      	ands	r3, r2
 80094c0:	d101      	bne.n	80094c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e000      	b.n	80094c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	0018      	movs	r0, r3
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b002      	add	sp, #8
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	211f      	movs	r1, #31
 80094e4:	400a      	ands	r2, r1
 80094e6:	210f      	movs	r1, #15
 80094e8:	4091      	lsls	r1, r2
 80094ea:	000a      	movs	r2, r1
 80094ec:	43d2      	mvns	r2, r2
 80094ee:	401a      	ands	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	0e9b      	lsrs	r3, r3, #26
 80094f4:	210f      	movs	r1, #15
 80094f6:	4019      	ands	r1, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	201f      	movs	r0, #31
 80094fc:	4003      	ands	r3, r0
 80094fe:	4099      	lsls	r1, r3
 8009500:	000b      	movs	r3, r1
 8009502:	431a      	orrs	r2, r3
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009508:	46c0      	nop			; (mov r8, r8)
 800950a:	46bd      	mov	sp, r7
 800950c:	b004      	add	sp, #16
 800950e:	bd80      	pop	{r7, pc}

08009510 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	035b      	lsls	r3, r3, #13
 8009522:	0b5b      	lsrs	r3, r3, #13
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	629a      	str	r2, [r3, #40]	; 0x28
}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	46bd      	mov	sp, r7
 800952e:	b002      	add	sp, #8
 8009530:	bd80      	pop	{r7, pc}

08009532 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b082      	sub	sp, #8
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	0352      	lsls	r2, r2, #13
 8009544:	0b52      	lsrs	r2, r2, #13
 8009546:	43d2      	mvns	r2, r2
 8009548:	401a      	ands	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	46bd      	mov	sp, r7
 8009552:	b002      	add	sp, #8
 8009554:	bd80      	pop	{r7, pc}

08009556 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	2203      	movs	r2, #3
 8009564:	4013      	ands	r3, r2
}
 8009566:	0018      	movs	r0, r3
 8009568:	46bd      	mov	sp, r7
 800956a:	b002      	add	sp, #8
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	0212      	lsls	r2, r2, #8
 8009584:	43d2      	mvns	r2, r2
 8009586:	401a      	ands	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	400b      	ands	r3, r1
 8009590:	4904      	ldr	r1, [pc, #16]	; (80095a4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8009592:	400b      	ands	r3, r1
 8009594:	431a      	orrs	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b004      	add	sp, #16
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	07ffff00 	.word	0x07ffff00

080095a8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	4a11      	ldr	r2, [pc, #68]	; (80095fc <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d103      	bne.n	80095c4 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	330c      	adds	r3, #12
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e009      	b.n	80095d8 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	33a0      	adds	r3, #160	; 0xa0
 80095c8:	0019      	movs	r1, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	0d5b      	lsrs	r3, r3, #21
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	2204      	movs	r2, #4
 80095d2:	4013      	ands	r3, r2
 80095d4:	18cb      	adds	r3, r1, r3
 80095d6:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	4908      	ldr	r1, [pc, #32]	; (8009600 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 80095e0:	400a      	ands	r2, r1
 80095e2:	43d2      	mvns	r2, r2
 80095e4:	401a      	ands	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	400b      	ands	r3, r1
 80095ec:	431a      	orrs	r2, r3
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	46bd      	mov	sp, r7
 80095f6:	b006      	add	sp, #24
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	7cc00000 	.word	0x7cc00000
 8009600:	7cc7ffff 	.word	0x7cc7ffff

08009604 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3320      	adds	r3, #32
 8009616:	0018      	movs	r0, r3
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	0d1b      	lsrs	r3, r3, #20
 800961c:	2203      	movs	r2, #3
 800961e:	401a      	ands	r2, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	0d5b      	lsrs	r3, r3, #21
 8009624:	2101      	movs	r1, #1
 8009626:	400b      	ands	r3, r1
 8009628:	18d3      	adds	r3, r2, r3
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	18c3      	adds	r3, r0, r3
 800962e:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a06      	ldr	r2, [pc, #24]	; (8009650 <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 8009636:	401a      	ands	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	0419      	lsls	r1, r3, #16
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	430b      	orrs	r3, r1
 8009640:	431a      	orrs	r2, r3
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	46bd      	mov	sp, r7
 800964a:	b006      	add	sp, #24
 800964c:	bd80      	pop	{r7, pc}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	f000f000 	.word	0xf000f000

08009654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4a05      	ldr	r2, [pc, #20]	; (8009678 <LL_ADC_EnableInternalRegulator+0x24>)
 8009662:	4013      	ands	r3, r2
 8009664:	2280      	movs	r2, #128	; 0x80
 8009666:	0552      	lsls	r2, r2, #21
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800966e:	46c0      	nop			; (mov r8, r8)
 8009670:	46bd      	mov	sp, r7
 8009672:	b002      	add	sp, #8
 8009674:	bd80      	pop	{r7, pc}
 8009676:	46c0      	nop			; (mov r8, r8)
 8009678:	6fffffe8 	.word	0x6fffffe8

0800967c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	2380      	movs	r3, #128	; 0x80
 800968a:	055b      	lsls	r3, r3, #21
 800968c:	401a      	ands	r2, r3
 800968e:	2380      	movs	r3, #128	; 0x80
 8009690:	055b      	lsls	r3, r3, #21
 8009692:	429a      	cmp	r2, r3
 8009694:	d101      	bne.n	800969a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8009696:	2301      	movs	r3, #1
 8009698:	e000      	b.n	800969c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800969a:	2300      	movs	r3, #0
}
 800969c:	0018      	movs	r0, r3
 800969e:	46bd      	mov	sp, r7
 80096a0:	b002      	add	sp, #8
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	4a04      	ldr	r2, [pc, #16]	; (80096c4 <LL_ADC_Enable+0x20>)
 80096b2:	4013      	ands	r3, r2
 80096b4:	2201      	movs	r2, #1
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	46bd      	mov	sp, r7
 80096c0:	b002      	add	sp, #8
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	7fffffe8 	.word	0x7fffffe8

080096c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <LL_ADC_Disable+0x20>)
 80096d6:	4013      	ands	r3, r2
 80096d8:	2202      	movs	r2, #2
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80096e0:	46c0      	nop			; (mov r8, r8)
 80096e2:	46bd      	mov	sp, r7
 80096e4:	b002      	add	sp, #8
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	7fffffe8 	.word	0x7fffffe8

080096ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2201      	movs	r2, #1
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <LL_ADC_IsEnabled+0x18>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <LL_ADC_IsEnabled+0x1a>
 8009704:	2300      	movs	r3, #0
}
 8009706:	0018      	movs	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	b002      	add	sp, #8
 800970c:	bd80      	pop	{r7, pc}

0800970e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	2202      	movs	r2, #2
 800971c:	4013      	ands	r3, r2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d101      	bne.n	8009726 <LL_ADC_IsDisableOngoing+0x18>
 8009722:	2301      	movs	r3, #1
 8009724:	e000      	b.n	8009728 <LL_ADC_IsDisableOngoing+0x1a>
 8009726:	2300      	movs	r3, #0
}
 8009728:	0018      	movs	r0, r3
 800972a:	46bd      	mov	sp, r7
 800972c:	b002      	add	sp, #8
 800972e:	bd80      	pop	{r7, pc}

08009730 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	4a04      	ldr	r2, [pc, #16]	; (8009750 <LL_ADC_REG_StartConversion+0x20>)
 800973e:	4013      	ands	r3, r2
 8009740:	2204      	movs	r2, #4
 8009742:	431a      	orrs	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009748:	46c0      	nop			; (mov r8, r8)
 800974a:	46bd      	mov	sp, r7
 800974c:	b002      	add	sp, #8
 800974e:	bd80      	pop	{r7, pc}
 8009750:	7fffffe8 	.word	0x7fffffe8

08009754 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2204      	movs	r2, #4
 8009762:	4013      	ands	r3, r2
 8009764:	2b04      	cmp	r3, #4
 8009766:	d101      	bne.n	800976c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009768:	2301      	movs	r3, #1
 800976a:	e000      	b.n	800976e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800976c:	2300      	movs	r3, #0
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b002      	add	sp, #8
 8009774:	bd80      	pop	{r7, pc}

08009776 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2280      	movs	r2, #128	; 0x80
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	46c0      	nop			; (mov r8, r8)
 8009786:	46bd      	mov	sp, r7
 8009788:	b002      	add	sp, #8
 800978a:	bd80      	pop	{r7, pc}

0800978c <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2280      	movs	r2, #128	; 0x80
 8009798:	0052      	lsls	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]
}
 800979c:	46c0      	nop			; (mov r8, r8)
 800979e:	46bd      	mov	sp, r7
 80097a0:	b002      	add	sp, #8
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2280      	movs	r2, #128	; 0x80
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	601a      	str	r2, [r3, #0]
}
 80097b4:	46c0      	nop			; (mov r8, r8)
 80097b6:	46bd      	mov	sp, r7
 80097b8:	b002      	add	sp, #8
 80097ba:	bd80      	pop	{r7, pc}

080097bc <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	2280      	movs	r2, #128	; 0x80
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	605a      	str	r2, [r3, #4]
}
 80097d0:	46c0      	nop			; (mov r8, r8)
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b002      	add	sp, #8
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2280      	movs	r2, #128	; 0x80
 80097e6:	0052      	lsls	r2, r2, #1
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	605a      	str	r2, [r3, #4]
}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	46bd      	mov	sp, r7
 80097f2:	b002      	add	sp, #8
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	2280      	movs	r2, #128	; 0x80
 8009804:	0092      	lsls	r2, r2, #2
 8009806:	431a      	orrs	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	605a      	str	r2, [r3, #4]
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	46bd      	mov	sp, r7
 8009810:	b002      	add	sp, #8
 8009812:	bd80      	pop	{r7, pc}

08009814 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2280      	movs	r2, #128	; 0x80
 8009822:	4393      	bics	r3, r2
 8009824:	001a      	movs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	605a      	str	r2, [r3, #4]
}
 800982a:	46c0      	nop			; (mov r8, r8)
 800982c:	46bd      	mov	sp, r7
 800982e:	b002      	add	sp, #8
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	4a03      	ldr	r2, [pc, #12]	; (8009850 <LL_ADC_DisableIT_AWD2+0x1c>)
 8009842:	401a      	ands	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	605a      	str	r2, [r3, #4]
}
 8009848:	46c0      	nop			; (mov r8, r8)
 800984a:	46bd      	mov	sp, r7
 800984c:	b002      	add	sp, #8
 800984e:	bd80      	pop	{r7, pc}
 8009850:	fffffeff 	.word	0xfffffeff

08009854 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4a03      	ldr	r2, [pc, #12]	; (8009870 <LL_ADC_DisableIT_AWD3+0x1c>)
 8009862:	401a      	ands	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	605a      	str	r2, [r3, #4]
}
 8009868:	46c0      	nop			; (mov r8, r8)
 800986a:	46bd      	mov	sp, r7
 800986c:	b002      	add	sp, #8
 800986e:	bd80      	pop	{r7, pc}
 8009870:	fffffdff 	.word	0xfffffdff

08009874 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800987c:	231f      	movs	r3, #31
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8009884:	2300      	movs	r3, #0
 8009886:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8009888:	2300      	movs	r3, #0
 800988a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800988c:	2300      	movs	r3, #0
 800988e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e17f      	b.n	8009b9a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7ff f9c5 	bl	8008c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2254      	movs	r2, #84	; 0x54
 80098b4:	2100      	movs	r1, #0
 80098b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	0018      	movs	r0, r3
 80098be:	f7ff fedd 	bl	800967c <LL_ADC_IsInternalRegulatorEnabled>
 80098c2:	1e03      	subs	r3, r0, #0
 80098c4:	d115      	bne.n	80098f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7ff fec2 	bl	8009654 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80098d0:	4bb4      	ldr	r3, [pc, #720]	; (8009ba4 <HAL_ADC_Init+0x330>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	49b4      	ldr	r1, [pc, #720]	; (8009ba8 <HAL_ADC_Init+0x334>)
 80098d6:	0018      	movs	r0, r3
 80098d8:	f7fc fc8a 	bl	80061f0 <__udivsi3>
 80098dc:	0003      	movs	r3, r0
 80098de:	3301      	adds	r3, #1
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80098e4:	e002      	b.n	80098ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f9      	bne.n	80098e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	0018      	movs	r0, r3
 80098f8:	f7ff fec0 	bl	800967c <LL_ADC_IsInternalRegulatorEnabled>
 80098fc:	1e03      	subs	r3, r0, #0
 80098fe:	d10f      	bne.n	8009920 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009904:	2210      	movs	r2, #16
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009910:	2201      	movs	r2, #1
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009918:	231f      	movs	r3, #31
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	2201      	movs	r2, #1
 800991e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	0018      	movs	r0, r3
 8009926:	f7ff ff15 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 800992a:	0003      	movs	r3, r0
 800992c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009932:	2210      	movs	r2, #16
 8009934:	4013      	ands	r3, r2
 8009936:	d000      	beq.n	800993a <HAL_ADC_Init+0xc6>
 8009938:	e122      	b.n	8009b80 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d000      	beq.n	8009942 <HAL_ADC_Init+0xce>
 8009940:	e11e      	b.n	8009b80 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009946:	4a99      	ldr	r2, [pc, #612]	; (8009bac <HAL_ADC_Init+0x338>)
 8009948:	4013      	ands	r3, r2
 800994a:	2202      	movs	r2, #2
 800994c:	431a      	orrs	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	0018      	movs	r0, r3
 8009958:	f7ff fec8 	bl	80096ec <LL_ADC_IsEnabled>
 800995c:	1e03      	subs	r3, r0, #0
 800995e:	d000      	beq.n	8009962 <HAL_ADC_Init+0xee>
 8009960:	e0ad      	b.n	8009abe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	7e1b      	ldrb	r3, [r3, #24]
 800996a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800996c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7e5b      	ldrb	r3, [r3, #25]
 8009972:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009974:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7e9b      	ldrb	r3, [r3, #26]
 800997a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800997c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <HAL_ADC_Init+0x118>
 8009986:	2380      	movs	r3, #128	; 0x80
 8009988:	015b      	lsls	r3, r3, #5
 800998a:	e000      	b.n	800998e <HAL_ADC_Init+0x11a>
 800998c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800998e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009994:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	da04      	bge.n	80099a8 <HAL_ADC_Init+0x134>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	e001      	b.n	80099ac <HAL_ADC_Init+0x138>
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80099ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	212c      	movs	r1, #44	; 0x2c
 80099b2:	5c5b      	ldrb	r3, [r3, r1]
 80099b4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80099b6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	5c9b      	ldrb	r3, [r3, r2]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d115      	bne.n	80099f4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	7e9b      	ldrb	r3, [r3, #26]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d105      	bne.n	80099dc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2280      	movs	r2, #128	; 0x80
 80099d4:	0252      	lsls	r2, r2, #9
 80099d6:	4313      	orrs	r3, r2
 80099d8:	61bb      	str	r3, [r7, #24]
 80099da:	e00b      	b.n	80099f4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e0:	2220      	movs	r2, #32
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ec:	2201      	movs	r2, #1
 80099ee:	431a      	orrs	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00a      	beq.n	8009a12 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a00:	23e0      	movs	r3, #224	; 0xe0
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	69ba      	ldr	r2, [r7, #24]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4a65      	ldr	r2, [pc, #404]	; (8009bb0 <HAL_ADC_Init+0x33c>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	0f9b      	lsrs	r3, r3, #30
 8009a2e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a34:	4313      	orrs	r3, r2
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	223c      	movs	r2, #60	; 0x3c
 8009a40:	5c9b      	ldrb	r3, [r3, r2]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d111      	bne.n	8009a6a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	0f9b      	lsrs	r3, r3, #30
 8009a4c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009a52:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8009a58:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8009a5e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	2201      	movs	r2, #1
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a50      	ldr	r2, [pc, #320]	; (8009bb4 <HAL_ADC_Init+0x340>)
 8009a72:	4013      	ands	r3, r2
 8009a74:	0019      	movs	r1, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	23c0      	movs	r3, #192	; 0xc0
 8009a86:	061b      	lsls	r3, r3, #24
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d018      	beq.n	8009abe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009a90:	2380      	movs	r3, #128	; 0x80
 8009a92:	05db      	lsls	r3, r3, #23
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d012      	beq.n	8009abe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	061b      	lsls	r3, r3, #24
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d00c      	beq.n	8009abe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009aa4:	4b44      	ldr	r3, [pc, #272]	; (8009bb8 <HAL_ADC_Init+0x344>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a44      	ldr	r2, [pc, #272]	; (8009bbc <HAL_ADC_Init+0x348>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	0019      	movs	r1, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	23f0      	movs	r3, #240	; 0xf0
 8009ab4:	039b      	lsls	r3, r3, #14
 8009ab6:	401a      	ands	r2, r3
 8009ab8:	4b3f      	ldr	r3, [pc, #252]	; (8009bb8 <HAL_ADC_Init+0x344>)
 8009aba:	430a      	orrs	r2, r1
 8009abc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6818      	ldr	r0, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	2100      	movs	r1, #0
 8009aca:	f7ff fcbc 	bl	8009446 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad6:	493a      	ldr	r1, [pc, #232]	; (8009bc0 <HAL_ADC_Init+0x34c>)
 8009ad8:	001a      	movs	r2, r3
 8009ada:	f7ff fcb4 	bl	8009446 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2110      	movs	r1, #16
 8009af2:	4249      	negs	r1, r1
 8009af4:	430a      	orrs	r2, r1
 8009af6:	629a      	str	r2, [r3, #40]	; 0x28
 8009af8:	e018      	b.n	8009b2c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	2380      	movs	r3, #128	; 0x80
 8009b00:	039b      	lsls	r3, r3, #14
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d112      	bne.n	8009b2c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	221c      	movs	r2, #28
 8009b16:	4013      	ands	r3, r2
 8009b18:	2210      	movs	r2, #16
 8009b1a:	4252      	negs	r2, r2
 8009b1c:	409a      	lsls	r2, r3
 8009b1e:	0011      	movs	r1, r2
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2100      	movs	r1, #0
 8009b32:	0018      	movs	r0, r3
 8009b34:	f7ff fca4 	bl	8009480 <LL_ADC_GetSamplingTimeCommonChannels>
 8009b38:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d10b      	bne.n	8009b5a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4c:	2203      	movs	r2, #3
 8009b4e:	4393      	bics	r3, r2
 8009b50:	2201      	movs	r2, #1
 8009b52:	431a      	orrs	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b58:	e01c      	b.n	8009b94 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b5e:	2212      	movs	r2, #18
 8009b60:	4393      	bics	r3, r2
 8009b62:	2210      	movs	r2, #16
 8009b64:	431a      	orrs	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b6e:	2201      	movs	r2, #1
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8009b76:	231f      	movs	r3, #31
 8009b78:	18fb      	adds	r3, r7, r3
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8009b7e:	e009      	b.n	8009b94 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b84:	2210      	movs	r2, #16
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009b8c:	231f      	movs	r3, #31
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	2201      	movs	r2, #1
 8009b92:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009b94:	231f      	movs	r3, #31
 8009b96:	18fb      	adds	r3, r7, r3
 8009b98:	781b      	ldrb	r3, [r3, #0]
}
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	b008      	add	sp, #32
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	2000005c 	.word	0x2000005c
 8009ba8:	00030d40 	.word	0x00030d40
 8009bac:	fffffefd 	.word	0xfffffefd
 8009bb0:	ffde0201 	.word	0xffde0201
 8009bb4:	1ffffc02 	.word	0x1ffffc02
 8009bb8:	40012708 	.word	0x40012708
 8009bbc:	ffc3ffff 	.word	0xffc3ffff
 8009bc0:	07ffff04 	.word	0x07ffff04

08009bc4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009bc4:	b5b0      	push	{r4, r5, r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	f7ff fdbd 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 8009bda:	1e03      	subs	r3, r0, #0
 8009bdc:	d16c      	bne.n	8009cb8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2254      	movs	r2, #84	; 0x54
 8009be2:	5c9b      	ldrb	r3, [r3, r2]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_ADC_Start_DMA+0x28>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e06c      	b.n	8009cc6 <HAL_ADC_Start_DMA+0x102>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2254      	movs	r2, #84	; 0x54
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	d113      	bne.n	8009c28 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	0018      	movs	r0, r3
 8009c06:	f7ff fd71 	bl	80096ec <LL_ADC_IsEnabled>
 8009c0a:	1e03      	subs	r3, r0, #0
 8009c0c:	d004      	beq.n	8009c18 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7ff fd58 	bl	80096c8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2101      	movs	r1, #1
 8009c24:	430a      	orrs	r2, r1
 8009c26:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8009c28:	2517      	movs	r5, #23
 8009c2a:	197c      	adds	r4, r7, r5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0018      	movs	r0, r3
 8009c30:	f000 fe08 	bl	800a844 <ADC_Enable>
 8009c34:	0003      	movs	r3, r0
 8009c36:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8009c38:	002c      	movs	r4, r5
 8009c3a:	193b      	adds	r3, r7, r4
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d13e      	bne.n	8009cc0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c46:	4a22      	ldr	r2, [pc, #136]	; (8009cd0 <HAL_ADC_Start_DMA+0x10c>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2280      	movs	r2, #128	; 0x80
 8009c4c:	0052      	lsls	r2, r2, #1
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5e:	4a1d      	ldr	r2, [pc, #116]	; (8009cd4 <HAL_ADC_Start_DMA+0x110>)
 8009c60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c66:	4a1c      	ldr	r2, [pc, #112]	; (8009cd8 <HAL_ADC_Start_DMA+0x114>)
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c6e:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <HAL_ADC_Start_DMA+0x118>)
 8009c70:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	221c      	movs	r2, #28
 8009c78:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2254      	movs	r2, #84	; 0x54
 8009c7e:	2100      	movs	r1, #0
 8009c80:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2110      	movs	r1, #16
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3340      	adds	r3, #64	; 0x40
 8009c9c:	0019      	movs	r1, r3
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	193c      	adds	r4, r7, r4
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f001 fc98 	bl	800b5d8 <HAL_DMA_Start_IT>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	f7ff fd3d 	bl	8009730 <LL_ADC_REG_StartConversion>
 8009cb6:	e003      	b.n	8009cc0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009cb8:	2317      	movs	r3, #23
 8009cba:	18fb      	adds	r3, r7, r3
 8009cbc:	2202      	movs	r2, #2
 8009cbe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8009cc0:	2317      	movs	r3, #23
 8009cc2:	18fb      	adds	r3, r7, r3
 8009cc4:	781b      	ldrb	r3, [r3, #0]
}
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	b006      	add	sp, #24
 8009ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cce:	46c0      	nop			; (mov r8, r8)
 8009cd0:	fffff0fe 	.word	0xfffff0fe
 8009cd4:	0800aa0d 	.word	0x0800aa0d
 8009cd8:	0800aad5 	.word	0x0800aad5
 8009cdc:	0800aaf3 	.word	0x0800aaf3

08009ce0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4013      	ands	r3, r2
 8009d02:	d017      	beq.n	8009d34 <HAL_ADC_IRQHandler+0x54>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2202      	movs	r2, #2
 8009d08:	4013      	ands	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d10:	2210      	movs	r2, #16
 8009d12:	4013      	ands	r3, r2
 8009d14:	d106      	bne.n	8009d24 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d1a:	2280      	movs	r2, #128	; 0x80
 8009d1c:	0112      	lsls	r2, r2, #4
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	0018      	movs	r0, r3
 8009d28:	f001 f89a 	bl	800ae60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2202      	movs	r2, #2
 8009d32:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2204      	movs	r2, #4
 8009d38:	4013      	ands	r3, r2
 8009d3a:	d003      	beq.n	8009d44 <HAL_ADC_IRQHandler+0x64>
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2204      	movs	r2, #4
 8009d40:	4013      	ands	r3, r2
 8009d42:	d107      	bne.n	8009d54 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	2208      	movs	r2, #8
 8009d48:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009d4a:	d04d      	beq.n	8009de8 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2208      	movs	r2, #8
 8009d50:	4013      	ands	r3, r2
 8009d52:	d049      	beq.n	8009de8 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d58:	2210      	movs	r2, #16
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	d106      	bne.n	8009d6c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	2280      	movs	r2, #128	; 0x80
 8009d64:	0092      	lsls	r2, r2, #2
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	0018      	movs	r0, r3
 8009d72:	f7ff fb9c 	bl	80094ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8009d76:	1e03      	subs	r3, r0, #0
 8009d78:	d02e      	beq.n	8009dd8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	7e9b      	ldrb	r3, [r3, #26]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d12a      	bne.n	8009dd8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2208      	movs	r2, #8
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d123      	bne.n	8009dd8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	0018      	movs	r0, r3
 8009d96:	f7ff fcdd 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 8009d9a:	1e03      	subs	r3, r0, #0
 8009d9c:	d110      	bne.n	8009dc0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685a      	ldr	r2, [r3, #4]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	210c      	movs	r1, #12
 8009daa:	438a      	bics	r2, r1
 8009dac:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	4a56      	ldr	r2, [pc, #344]	; (8009f0c <HAL_ADC_IRQHandler+0x22c>)
 8009db4:	4013      	ands	r3, r2
 8009db6:	2201      	movs	r2, #1
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8009dbe:	e00b      	b.n	8009dd8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	0018      	movs	r0, r3
 8009ddc:	f7fc fcc8 	bl	8006770 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	220c      	movs	r2, #12
 8009de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2280      	movs	r2, #128	; 0x80
 8009dec:	4013      	ands	r3, r2
 8009dee:	d012      	beq.n	8009e16 <HAL_ADC_IRQHandler+0x136>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2280      	movs	r2, #128	; 0x80
 8009df4:	4013      	ands	r3, r2
 8009df6:	d00e      	beq.n	8009e16 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	0252      	lsls	r2, r2, #9
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f000 f889 	bl	8009f20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2280      	movs	r2, #128	; 0x80
 8009e14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	d014      	beq.n	8009e4a <HAL_ADC_IRQHandler+0x16a>
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	2380      	movs	r3, #128	; 0x80
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4013      	ands	r3, r2
 8009e28:	d00f      	beq.n	8009e4a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e2e:	2280      	movs	r2, #128	; 0x80
 8009e30:	0292      	lsls	r2, r2, #10
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	f7fc fca8 	bl	8006790 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2280      	movs	r2, #128	; 0x80
 8009e46:	0052      	lsls	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4013      	ands	r3, r2
 8009e52:	d014      	beq.n	8009e7e <HAL_ADC_IRQHandler+0x19e>
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	2380      	movs	r3, #128	; 0x80
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	d00f      	beq.n	8009e7e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	2280      	movs	r2, #128	; 0x80
 8009e64:	02d2      	lsls	r2, r2, #11
 8009e66:	431a      	orrs	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	0018      	movs	r0, r3
 8009e70:	f000 ffee 	bl	800ae50 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2280      	movs	r2, #128	; 0x80
 8009e7a:	0092      	lsls	r2, r2, #2
 8009e7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	2210      	movs	r2, #16
 8009e82:	4013      	ands	r3, r2
 8009e84:	d02b      	beq.n	8009ede <HAL_ADC_IRQHandler+0x1fe>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2210      	movs	r2, #16
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	d027      	beq.n	8009ede <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d102      	bne.n	8009e9c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
 8009e9a:	e008      	b.n	8009eae <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	0018      	movs	r0, r3
 8009ea2:	f7ff fb58 	bl	8009556 <LL_ADC_REG_GetDMATransfer>
 8009ea6:	1e03      	subs	r3, r0, #0
 8009ea8:	d001      	beq.n	8009eae <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d110      	bne.n	8009ed6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb8:	2280      	movs	r2, #128	; 0x80
 8009eba:	00d2      	lsls	r2, r2, #3
 8009ebc:	431a      	orrs	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f000 f82d 	bl	8009f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2210      	movs	r2, #16
 8009edc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	2380      	movs	r3, #128	; 0x80
 8009ee2:	019b      	lsls	r3, r3, #6
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	d00d      	beq.n	8009f04 <HAL_ADC_IRQHandler+0x224>
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	2380      	movs	r3, #128	; 0x80
 8009eec:	019b      	lsls	r3, r3, #6
 8009eee:	4013      	ands	r3, r2
 8009ef0:	d008      	beq.n	8009f04 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f000 ffbb 	bl	800ae70 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2280      	movs	r2, #128	; 0x80
 8009f00:	0192      	lsls	r2, r2, #6
 8009f02:	601a      	str	r2, [r3, #0]
  }
}
 8009f04:	46c0      	nop			; (mov r8, r8)
 8009f06:	46bd      	mov	sp, r7
 8009f08:	b006      	add	sp, #24
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	fffffefe 	.word	0xfffffefe

08009f10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009f18:	46c0      	nop			; (mov r8, r8)
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	b002      	add	sp, #8
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009f28:	46c0      	nop			; (mov r8, r8)
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	b002      	add	sp, #8
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009f38:	46c0      	nop			; (mov r8, r8)
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f4a:	2317      	movs	r3, #23
 8009f4c:	18fb      	adds	r3, r7, r3
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2254      	movs	r2, #84	; 0x54
 8009f5a:	5c9b      	ldrb	r3, [r3, r2]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d101      	bne.n	8009f64 <HAL_ADC_ConfigChannel+0x24>
 8009f60:	2302      	movs	r3, #2
 8009f62:	e1c0      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x3a6>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2254      	movs	r2, #84	; 0x54
 8009f68:	2101      	movs	r1, #1
 8009f6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	0018      	movs	r0, r3
 8009f72:	f7ff fbef 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 8009f76:	1e03      	subs	r3, r0, #0
 8009f78:	d000      	beq.n	8009f7c <HAL_ADC_ConfigChannel+0x3c>
 8009f7a:	e1a3      	b.n	800a2c4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d100      	bne.n	8009f86 <HAL_ADC_ConfigChannel+0x46>
 8009f84:	e143      	b.n	800a20e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691a      	ldr	r2, [r3, #16]
 8009f8a:	2380      	movs	r3, #128	; 0x80
 8009f8c:	061b      	lsls	r3, r3, #24
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d004      	beq.n	8009f9c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8009f96:	4ac1      	ldr	r2, [pc, #772]	; (800a29c <HAL_ADC_ConfigChannel+0x35c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d108      	bne.n	8009fae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	0019      	movs	r1, r3
 8009fa6:	0010      	movs	r0, r2
 8009fa8:	f7ff fab2 	bl	8009510 <LL_ADC_REG_SetSequencerChAdd>
 8009fac:	e0c9      	b.n	800a142 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	211f      	movs	r1, #31
 8009fb8:	400b      	ands	r3, r1
 8009fba:	210f      	movs	r1, #15
 8009fbc:	4099      	lsls	r1, r3
 8009fbe:	000b      	movs	r3, r1
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	0019      	movs	r1, r3
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	035b      	lsls	r3, r3, #13
 8009fcc:	0b5b      	lsrs	r3, r3, #13
 8009fce:	d105      	bne.n	8009fdc <HAL_ADC_ConfigChannel+0x9c>
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	0e9b      	lsrs	r3, r3, #26
 8009fd6:	221f      	movs	r2, #31
 8009fd8:	4013      	ands	r3, r2
 8009fda:	e098      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	d000      	beq.n	8009fe8 <HAL_ADC_ConfigChannel+0xa8>
 8009fe6:	e091      	b.n	800a10c <HAL_ADC_ConfigChannel+0x1cc>
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2202      	movs	r2, #2
 8009fee:	4013      	ands	r3, r2
 8009ff0:	d000      	beq.n	8009ff4 <HAL_ADC_ConfigChannel+0xb4>
 8009ff2:	e089      	b.n	800a108 <HAL_ADC_ConfigChannel+0x1c8>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2204      	movs	r2, #4
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d000      	beq.n	800a000 <HAL_ADC_ConfigChannel+0xc0>
 8009ffe:	e081      	b.n	800a104 <HAL_ADC_ConfigChannel+0x1c4>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2208      	movs	r2, #8
 800a006:	4013      	ands	r3, r2
 800a008:	d000      	beq.n	800a00c <HAL_ADC_ConfigChannel+0xcc>
 800a00a:	e079      	b.n	800a100 <HAL_ADC_ConfigChannel+0x1c0>
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2210      	movs	r2, #16
 800a012:	4013      	ands	r3, r2
 800a014:	d000      	beq.n	800a018 <HAL_ADC_ConfigChannel+0xd8>
 800a016:	e071      	b.n	800a0fc <HAL_ADC_ConfigChannel+0x1bc>
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2220      	movs	r2, #32
 800a01e:	4013      	ands	r3, r2
 800a020:	d000      	beq.n	800a024 <HAL_ADC_ConfigChannel+0xe4>
 800a022:	e069      	b.n	800a0f8 <HAL_ADC_ConfigChannel+0x1b8>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2240      	movs	r2, #64	; 0x40
 800a02a:	4013      	ands	r3, r2
 800a02c:	d000      	beq.n	800a030 <HAL_ADC_ConfigChannel+0xf0>
 800a02e:	e061      	b.n	800a0f4 <HAL_ADC_ConfigChannel+0x1b4>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2280      	movs	r2, #128	; 0x80
 800a036:	4013      	ands	r3, r2
 800a038:	d000      	beq.n	800a03c <HAL_ADC_ConfigChannel+0xfc>
 800a03a:	e059      	b.n	800a0f0 <HAL_ADC_ConfigChannel+0x1b0>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	005b      	lsls	r3, r3, #1
 800a044:	4013      	ands	r3, r2
 800a046:	d151      	bne.n	800a0ec <HAL_ADC_ConfigChannel+0x1ac>
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4013      	ands	r3, r2
 800a052:	d149      	bne.n	800a0e8 <HAL_ADC_ConfigChannel+0x1a8>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	2380      	movs	r3, #128	; 0x80
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	4013      	ands	r3, r2
 800a05e:	d141      	bne.n	800a0e4 <HAL_ADC_ConfigChannel+0x1a4>
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	2380      	movs	r3, #128	; 0x80
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	4013      	ands	r3, r2
 800a06a:	d139      	bne.n	800a0e0 <HAL_ADC_ConfigChannel+0x1a0>
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	015b      	lsls	r3, r3, #5
 800a074:	4013      	ands	r3, r2
 800a076:	d131      	bne.n	800a0dc <HAL_ADC_ConfigChannel+0x19c>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	2380      	movs	r3, #128	; 0x80
 800a07e:	019b      	lsls	r3, r3, #6
 800a080:	4013      	ands	r3, r2
 800a082:	d129      	bne.n	800a0d8 <HAL_ADC_ConfigChannel+0x198>
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	2380      	movs	r3, #128	; 0x80
 800a08a:	01db      	lsls	r3, r3, #7
 800a08c:	4013      	ands	r3, r2
 800a08e:	d121      	bne.n	800a0d4 <HAL_ADC_ConfigChannel+0x194>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	2380      	movs	r3, #128	; 0x80
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	4013      	ands	r3, r2
 800a09a:	d119      	bne.n	800a0d0 <HAL_ADC_ConfigChannel+0x190>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	2380      	movs	r3, #128	; 0x80
 800a0a2:	025b      	lsls	r3, r3, #9
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	d111      	bne.n	800a0cc <HAL_ADC_ConfigChannel+0x18c>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	2380      	movs	r3, #128	; 0x80
 800a0ae:	029b      	lsls	r3, r3, #10
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	d109      	bne.n	800a0c8 <HAL_ADC_ConfigChannel+0x188>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	02db      	lsls	r3, r3, #11
 800a0bc:	4013      	ands	r3, r2
 800a0be:	d001      	beq.n	800a0c4 <HAL_ADC_ConfigChannel+0x184>
 800a0c0:	2312      	movs	r3, #18
 800a0c2:	e024      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e022      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0c8:	2311      	movs	r3, #17
 800a0ca:	e020      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	e01e      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0d0:	230f      	movs	r3, #15
 800a0d2:	e01c      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0d4:	230e      	movs	r3, #14
 800a0d6:	e01a      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0d8:	230d      	movs	r3, #13
 800a0da:	e018      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0dc:	230c      	movs	r3, #12
 800a0de:	e016      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0e0:	230b      	movs	r3, #11
 800a0e2:	e014      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	e012      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0e8:	2309      	movs	r3, #9
 800a0ea:	e010      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0ec:	2308      	movs	r3, #8
 800a0ee:	e00e      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0f0:	2307      	movs	r3, #7
 800a0f2:	e00c      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0f4:	2306      	movs	r3, #6
 800a0f6:	e00a      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0f8:	2305      	movs	r3, #5
 800a0fa:	e008      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	e006      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a100:	2303      	movs	r3, #3
 800a102:	e004      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a104:	2302      	movs	r3, #2
 800a106:	e002      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <HAL_ADC_ConfigChannel+0x1ce>
 800a10c:	2300      	movs	r3, #0
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	6852      	ldr	r2, [r2, #4]
 800a112:	201f      	movs	r0, #31
 800a114:	4002      	ands	r2, r0
 800a116:	4093      	lsls	r3, r2
 800a118:	000a      	movs	r2, r1
 800a11a:	431a      	orrs	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	089b      	lsrs	r3, r3, #2
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d808      	bhi.n	800a142 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	6859      	ldr	r1, [r3, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	001a      	movs	r2, r3
 800a13e:	f7ff f9c7 	bl	80094d0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6819      	ldr	r1, [r3, #0]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	001a      	movs	r2, r3
 800a150:	f7ff fa0e 	bl	8009570 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	db00      	blt.n	800a15e <HAL_ADC_ConfigChannel+0x21e>
 800a15c:	e0bc      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a15e:	4b50      	ldr	r3, [pc, #320]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a160:	0018      	movs	r0, r3
 800a162:	f7ff f963 	bl	800942c <LL_ADC_GetCommonPathInternalCh>
 800a166:	0003      	movs	r3, r0
 800a168:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a4d      	ldr	r2, [pc, #308]	; (800a2a4 <HAL_ADC_ConfigChannel+0x364>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d122      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	2380      	movs	r3, #128	; 0x80
 800a178:	041b      	lsls	r3, r3, #16
 800a17a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a17c:	d11d      	bne.n	800a1ba <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2280      	movs	r2, #128	; 0x80
 800a182:	0412      	lsls	r2, r2, #16
 800a184:	4313      	orrs	r3, r2
 800a186:	4a46      	ldr	r2, [pc, #280]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a188:	0019      	movs	r1, r3
 800a18a:	0010      	movs	r0, r2
 800a18c:	f7ff f93a 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a190:	4b45      	ldr	r3, [pc, #276]	; (800a2a8 <HAL_ADC_ConfigChannel+0x368>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4945      	ldr	r1, [pc, #276]	; (800a2ac <HAL_ADC_ConfigChannel+0x36c>)
 800a196:	0018      	movs	r0, r3
 800a198:	f7fc f82a 	bl	80061f0 <__udivsi3>
 800a19c:	0003      	movs	r3, r0
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	0013      	movs	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a1aa:	e002      	b.n	800a1b2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1f9      	bne.n	800a1ac <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a1b8:	e08e      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a3c      	ldr	r2, [pc, #240]	; (800a2b0 <HAL_ADC_ConfigChannel+0x370>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d10e      	bne.n	800a1e2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	2380      	movs	r3, #128	; 0x80
 800a1c8:	045b      	lsls	r3, r3, #17
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	d109      	bne.n	800a1e2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2280      	movs	r2, #128	; 0x80
 800a1d2:	0452      	lsls	r2, r2, #17
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	4a32      	ldr	r2, [pc, #200]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a1d8:	0019      	movs	r1, r3
 800a1da:	0010      	movs	r0, r2
 800a1dc:	f7ff f912 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
 800a1e0:	e07a      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a33      	ldr	r2, [pc, #204]	; (800a2b4 <HAL_ADC_ConfigChannel+0x374>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d000      	beq.n	800a1ee <HAL_ADC_ConfigChannel+0x2ae>
 800a1ec:	e074      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	2380      	movs	r3, #128	; 0x80
 800a1f2:	03db      	lsls	r3, r3, #15
 800a1f4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a1f6:	d000      	beq.n	800a1fa <HAL_ADC_ConfigChannel+0x2ba>
 800a1f8:	e06e      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2280      	movs	r2, #128	; 0x80
 800a1fe:	03d2      	lsls	r2, r2, #15
 800a200:	4313      	orrs	r3, r2
 800a202:	4a27      	ldr	r2, [pc, #156]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a204:	0019      	movs	r1, r3
 800a206:	0010      	movs	r0, r2
 800a208:	f7ff f8fc 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
 800a20c:	e064      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691a      	ldr	r2, [r3, #16]
 800a212:	2380      	movs	r3, #128	; 0x80
 800a214:	061b      	lsls	r3, r3, #24
 800a216:	429a      	cmp	r2, r3
 800a218:	d004      	beq.n	800a224 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a21e:	4a1f      	ldr	r2, [pc, #124]	; (800a29c <HAL_ADC_ConfigChannel+0x35c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d107      	bne.n	800a234 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	0019      	movs	r1, r3
 800a22e:	0010      	movs	r0, r2
 800a230:	f7ff f97f 	bl	8009532 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da4d      	bge.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a23c:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a23e:	0018      	movs	r0, r3
 800a240:	f7ff f8f4 	bl	800942c <LL_ADC_GetCommonPathInternalCh>
 800a244:	0003      	movs	r3, r0
 800a246:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <HAL_ADC_ConfigChannel+0x364>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d108      	bne.n	800a264 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	4a18      	ldr	r2, [pc, #96]	; (800a2b8 <HAL_ADC_ConfigChannel+0x378>)
 800a256:	4013      	ands	r3, r2
 800a258:	4a11      	ldr	r2, [pc, #68]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a25a:	0019      	movs	r1, r3
 800a25c:	0010      	movs	r0, r2
 800a25e:	f7ff f8d1 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
 800a262:	e039      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a11      	ldr	r2, [pc, #68]	; (800a2b0 <HAL_ADC_ConfigChannel+0x370>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d108      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	4a12      	ldr	r2, [pc, #72]	; (800a2bc <HAL_ADC_ConfigChannel+0x37c>)
 800a272:	4013      	ands	r3, r2
 800a274:	4a0a      	ldr	r2, [pc, #40]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a276:	0019      	movs	r1, r3
 800a278:	0010      	movs	r0, r2
 800a27a:	f7ff f8c3 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
 800a27e:	e02b      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a0b      	ldr	r2, [pc, #44]	; (800a2b4 <HAL_ADC_ConfigChannel+0x374>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d126      	bne.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	4a0c      	ldr	r2, [pc, #48]	; (800a2c0 <HAL_ADC_ConfigChannel+0x380>)
 800a28e:	4013      	ands	r3, r2
 800a290:	4a03      	ldr	r2, [pc, #12]	; (800a2a0 <HAL_ADC_ConfigChannel+0x360>)
 800a292:	0019      	movs	r1, r3
 800a294:	0010      	movs	r0, r2
 800a296:	f7ff f8b5 	bl	8009404 <LL_ADC_SetCommonPathInternalCh>
 800a29a:	e01d      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x398>
 800a29c:	80000004 	.word	0x80000004
 800a2a0:	40012708 	.word	0x40012708
 800a2a4:	b0001000 	.word	0xb0001000
 800a2a8:	2000005c 	.word	0x2000005c
 800a2ac:	00030d40 	.word	0x00030d40
 800a2b0:	b8004000 	.word	0xb8004000
 800a2b4:	b4002000 	.word	0xb4002000
 800a2b8:	ff7fffff 	.word	0xff7fffff
 800a2bc:	feffffff 	.word	0xfeffffff
 800a2c0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a2d0:	2317      	movs	r3, #23
 800a2d2:	18fb      	adds	r3, r7, r3
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2254      	movs	r2, #84	; 0x54
 800a2dc:	2100      	movs	r1, #0
 800a2de:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800a2e0:	2317      	movs	r3, #23
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	781b      	ldrb	r3, [r3, #0]
}
 800a2e6:	0018      	movs	r0, r3
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	b006      	add	sp, #24
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	46c0      	nop			; (mov r8, r8)

0800a2f0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b087      	sub	sp, #28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2fa:	2317      	movs	r3, #23
 800a2fc:	18fb      	adds	r3, r7, r3
 800a2fe:	2200      	movs	r2, #0
 800a300:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2254      	movs	r2, #84	; 0x54
 800a30a:	5c9b      	ldrb	r3, [r3, r2]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d101      	bne.n	800a314 <HAL_ADC_AnalogWDGConfig+0x24>
 800a310:	2302      	movs	r3, #2
 800a312:	e289      	b.n	800a828 <HAL_ADC_AnalogWDGConfig+0x538>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2254      	movs	r2, #84	; 0x54
 800a318:	2101      	movs	r1, #1
 800a31a:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	0018      	movs	r0, r3
 800a322:	f7ff fa17 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 800a326:	1e03      	subs	r3, r0, #0
 800a328:	d000      	beq.n	800a32c <HAL_ADC_AnalogWDGConfig+0x3c>
 800a32a:	e24a      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4aa3      	ldr	r2, [pc, #652]	; (800a5c0 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d162      	bne.n	800a3fc <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	0018      	movs	r0, r3
 800a33c:	f7ff f9d6 	bl	80096ec <LL_ADC_IsEnabled>
 800a340:	1e03      	subs	r3, r0, #0
 800a342:	d009      	beq.n	800a358 <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 800a344:	2301      	movs	r3, #1
 800a346:	60bb      	str	r3, [r7, #8]
        tmp_hal_status = ADC_Disable(hadc);
 800a348:	2317      	movs	r3, #23
 800a34a:	18fc      	adds	r4, r7, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	0018      	movs	r0, r3
 800a350:	f000 fafe 	bl	800a950 <ADC_Disable>
 800a354:	0003      	movs	r3, r0
 800a356:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2280      	movs	r2, #128	; 0x80
 800a35e:	0412      	lsls	r2, r2, #16
 800a360:	4293      	cmp	r3, r2
 800a362:	d011      	beq.n	800a388 <HAL_ADC_AnalogWDGConfig+0x98>
 800a364:	22c0      	movs	r2, #192	; 0xc0
 800a366:	0412      	lsls	r2, r2, #16
 800a368:	4293      	cmp	r3, r2
 800a36a:	d115      	bne.n	800a398 <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4a93      	ldr	r2, [pc, #588]	; (800a5c4 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800a376:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800a378:	22c0      	movs	r2, #192	; 0xc0
 800a37a:	0412      	lsls	r2, r2, #16
 800a37c:	4313      	orrs	r3, r2
 800a37e:	4990      	ldr	r1, [pc, #576]	; (800a5c0 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a380:	001a      	movs	r2, r3
 800a382:	f7ff f911 	bl	80095a8 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800a386:	e00f      	b.n	800a3a8 <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a8e      	ldr	r2, [pc, #568]	; (800a5c8 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 800a38e:	498c      	ldr	r1, [pc, #560]	; (800a5c0 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a390:	0018      	movs	r0, r3
 800a392:	f7ff f909 	bl	80095a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a396:	e007      	b.n	800a3a8 <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4988      	ldr	r1, [pc, #544]	; (800a5c0 <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800a39e:	2200      	movs	r2, #0
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f7ff f901 	bl	80095a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a3a6:	46c0      	nop			; (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d10b      	bne.n	800a3c6 <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 800a3ae:	2217      	movs	r2, #23
 800a3b0:	18bb      	adds	r3, r7, r2
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 800a3b8:	18bc      	adds	r4, r7, r2
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	0018      	movs	r0, r3
 800a3be:	f000 fa41 	bl	800a844 <ADC_Enable>
 800a3c2:	0003      	movs	r3, r0
 800a3c4:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ca:	4a80      	ldr	r2, [pc, #512]	; (800a5cc <HAL_ADC_AnalogWDGConfig+0x2dc>)
 800a3cc:	401a      	ands	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7ff f9cd 	bl	8009776 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	7b1b      	ldrb	r3, [r3, #12]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d105      	bne.n	800a3f0 <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	f7ff f9e7 	bl	80097bc <LL_ADC_EnableIT_AWD1>
 800a3ee:	e1e8      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f7ff fa0d 	bl	8009814 <LL_ADC_DisableIT_AWD1>
 800a3fa:	e1e2      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	2280      	movs	r2, #128	; 0x80
 800a402:	0412      	lsls	r2, r2, #16
 800a404:	4293      	cmp	r3, r2
 800a406:	d100      	bne.n	800a40a <HAL_ADC_AnalogWDGConfig+0x11a>
 800a408:	e18f      	b.n	800a72a <HAL_ADC_AnalogWDGConfig+0x43a>
 800a40a:	22c0      	movs	r2, #192	; 0xc0
 800a40c:	0412      	lsls	r2, r2, #16
 800a40e:	4293      	cmp	r3, r2
 800a410:	d000      	beq.n	800a414 <HAL_ADC_AnalogWDGConfig+0x124>
 800a412:	e193      	b.n	800a73c <HAL_ADC_AnalogWDGConfig+0x44c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a6d      	ldr	r2, [pc, #436]	; (800a5d0 <HAL_ADC_AnalogWDGConfig+0x2e0>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d000      	beq.n	800a420 <HAL_ADC_AnalogWDGConfig+0x130>
 800a41e:	e0bc      	b.n	800a59a <HAL_ADC_AnalogWDGConfig+0x2aa>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	22a0      	movs	r2, #160	; 0xa0
 800a426:	5899      	ldr	r1, [r3, r2]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	035b      	lsls	r3, r3, #13
 800a42e:	0b5b      	lsrs	r3, r3, #13
 800a430:	d108      	bne.n	800a444 <HAL_ADC_AnalogWDGConfig+0x154>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	0e9b      	lsrs	r3, r3, #26
 800a438:	221f      	movs	r2, #31
 800a43a:	4013      	ands	r3, r2
 800a43c:	2201      	movs	r2, #1
 800a43e:	409a      	lsls	r2, r3
 800a440:	0013      	movs	r3, r2
 800a442:	e0a4      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	2201      	movs	r2, #1
 800a44a:	4013      	ands	r3, r2
 800a44c:	d000      	beq.n	800a450 <HAL_ADC_AnalogWDGConfig+0x160>
 800a44e:	e09d      	b.n	800a58c <HAL_ADC_AnalogWDGConfig+0x29c>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2202      	movs	r2, #2
 800a456:	4013      	ands	r3, r2
 800a458:	d000      	beq.n	800a45c <HAL_ADC_AnalogWDGConfig+0x16c>
 800a45a:	e095      	b.n	800a588 <HAL_ADC_AnalogWDGConfig+0x298>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	2204      	movs	r2, #4
 800a462:	4013      	ands	r3, r2
 800a464:	d000      	beq.n	800a468 <HAL_ADC_AnalogWDGConfig+0x178>
 800a466:	e08d      	b.n	800a584 <HAL_ADC_AnalogWDGConfig+0x294>
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2208      	movs	r2, #8
 800a46e:	4013      	ands	r3, r2
 800a470:	d000      	beq.n	800a474 <HAL_ADC_AnalogWDGConfig+0x184>
 800a472:	e085      	b.n	800a580 <HAL_ADC_AnalogWDGConfig+0x290>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2210      	movs	r2, #16
 800a47a:	4013      	ands	r3, r2
 800a47c:	d000      	beq.n	800a480 <HAL_ADC_AnalogWDGConfig+0x190>
 800a47e:	e07d      	b.n	800a57c <HAL_ADC_AnalogWDGConfig+0x28c>
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	2220      	movs	r2, #32
 800a486:	4013      	ands	r3, r2
 800a488:	d000      	beq.n	800a48c <HAL_ADC_AnalogWDGConfig+0x19c>
 800a48a:	e075      	b.n	800a578 <HAL_ADC_AnalogWDGConfig+0x288>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2240      	movs	r2, #64	; 0x40
 800a492:	4013      	ands	r3, r2
 800a494:	d000      	beq.n	800a498 <HAL_ADC_AnalogWDGConfig+0x1a8>
 800a496:	e06d      	b.n	800a574 <HAL_ADC_AnalogWDGConfig+0x284>
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	2280      	movs	r2, #128	; 0x80
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d000      	beq.n	800a4a4 <HAL_ADC_AnalogWDGConfig+0x1b4>
 800a4a2:	e065      	b.n	800a570 <HAL_ADC_AnalogWDGConfig+0x280>
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	2380      	movs	r3, #128	; 0x80
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	d000      	beq.n	800a4b2 <HAL_ADC_AnalogWDGConfig+0x1c2>
 800a4b0:	e05b      	b.n	800a56a <HAL_ADC_AnalogWDGConfig+0x27a>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	2380      	movs	r3, #128	; 0x80
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	d152      	bne.n	800a564 <HAL_ADC_AnalogWDGConfig+0x274>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	2380      	movs	r3, #128	; 0x80
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d149      	bne.n	800a55e <HAL_ADC_AnalogWDGConfig+0x26e>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	2380      	movs	r3, #128	; 0x80
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	d140      	bne.n	800a558 <HAL_ADC_AnalogWDGConfig+0x268>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689a      	ldr	r2, [r3, #8]
 800a4da:	2380      	movs	r3, #128	; 0x80
 800a4dc:	015b      	lsls	r3, r3, #5
 800a4de:	4013      	ands	r3, r2
 800a4e0:	d137      	bne.n	800a552 <HAL_ADC_AnalogWDGConfig+0x262>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	2380      	movs	r3, #128	; 0x80
 800a4e8:	019b      	lsls	r3, r3, #6
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	d12e      	bne.n	800a54c <HAL_ADC_AnalogWDGConfig+0x25c>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	689a      	ldr	r2, [r3, #8]
 800a4f2:	2380      	movs	r3, #128	; 0x80
 800a4f4:	01db      	lsls	r3, r3, #7
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d125      	bne.n	800a546 <HAL_ADC_AnalogWDGConfig+0x256>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	2380      	movs	r3, #128	; 0x80
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	4013      	ands	r3, r2
 800a504:	d11c      	bne.n	800a540 <HAL_ADC_AnalogWDGConfig+0x250>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	2380      	movs	r3, #128	; 0x80
 800a50c:	025b      	lsls	r3, r3, #9
 800a50e:	4013      	ands	r3, r2
 800a510:	d113      	bne.n	800a53a <HAL_ADC_AnalogWDGConfig+0x24a>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	689a      	ldr	r2, [r3, #8]
 800a516:	2380      	movs	r3, #128	; 0x80
 800a518:	029b      	lsls	r3, r3, #10
 800a51a:	4013      	ands	r3, r2
 800a51c:	d10a      	bne.n	800a534 <HAL_ADC_AnalogWDGConfig+0x244>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	689a      	ldr	r2, [r3, #8]
 800a522:	2380      	movs	r3, #128	; 0x80
 800a524:	02db      	lsls	r3, r3, #11
 800a526:	4013      	ands	r3, r2
 800a528:	d002      	beq.n	800a530 <HAL_ADC_AnalogWDGConfig+0x240>
 800a52a:	2380      	movs	r3, #128	; 0x80
 800a52c:	02db      	lsls	r3, r3, #11
 800a52e:	e02e      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a530:	2301      	movs	r3, #1
 800a532:	e02c      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a534:	2380      	movs	r3, #128	; 0x80
 800a536:	029b      	lsls	r3, r3, #10
 800a538:	e029      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a53a:	2380      	movs	r3, #128	; 0x80
 800a53c:	025b      	lsls	r3, r3, #9
 800a53e:	e026      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a540:	2380      	movs	r3, #128	; 0x80
 800a542:	021b      	lsls	r3, r3, #8
 800a544:	e023      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a546:	2380      	movs	r3, #128	; 0x80
 800a548:	01db      	lsls	r3, r3, #7
 800a54a:	e020      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a54c:	2380      	movs	r3, #128	; 0x80
 800a54e:	019b      	lsls	r3, r3, #6
 800a550:	e01d      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a552:	2380      	movs	r3, #128	; 0x80
 800a554:	015b      	lsls	r3, r3, #5
 800a556:	e01a      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a558:	2380      	movs	r3, #128	; 0x80
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	e017      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a55e:	2380      	movs	r3, #128	; 0x80
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	e014      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	e011      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a56a:	2380      	movs	r3, #128	; 0x80
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	e00e      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a570:	2380      	movs	r3, #128	; 0x80
 800a572:	e00c      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a574:	2340      	movs	r3, #64	; 0x40
 800a576:	e00a      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a578:	2320      	movs	r3, #32
 800a57a:	e008      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a57c:	2310      	movs	r3, #16
 800a57e:	e006      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a580:	2308      	movs	r3, #8
 800a582:	e004      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a584:	2304      	movs	r3, #4
 800a586:	e002      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a588:	2302      	movs	r3, #2
 800a58a:	e000      	b.n	800a58e <HAL_ADC_AnalogWDGConfig+0x29e>
 800a58c:	2301      	movs	r3, #1
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	430b      	orrs	r3, r1
 800a594:	21a0      	movs	r1, #160	; 0xa0
 800a596:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 800a598:	e0d9      	b.n	800a74e <HAL_ADC_AnalogWDGConfig+0x45e>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	22a4      	movs	r2, #164	; 0xa4
 800a5a0:	5899      	ldr	r1, [r3, r2]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	035b      	lsls	r3, r3, #13
 800a5a8:	0b5b      	lsrs	r3, r3, #13
 800a5aa:	d113      	bne.n	800a5d4 <HAL_ADC_AnalogWDGConfig+0x2e4>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	0e9b      	lsrs	r3, r3, #26
 800a5b2:	221f      	movs	r2, #31
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	409a      	lsls	r2, r3
 800a5ba:	0013      	movs	r3, r2
 800a5bc:	e0af      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	7cc00000 	.word	0x7cc00000
 800a5c4:	fc07ffff 	.word	0xfc07ffff
 800a5c8:	0087ffff 	.word	0x0087ffff
 800a5cc:	fffeffff 	.word	0xfffeffff
 800a5d0:	0017ffff 	.word	0x0017ffff
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d000      	beq.n	800a5e0 <HAL_ADC_AnalogWDGConfig+0x2f0>
 800a5de:	e09d      	b.n	800a71c <HAL_ADC_AnalogWDGConfig+0x42c>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	d000      	beq.n	800a5ec <HAL_ADC_AnalogWDGConfig+0x2fc>
 800a5ea:	e095      	b.n	800a718 <HAL_ADC_AnalogWDGConfig+0x428>
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	2204      	movs	r2, #4
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	d000      	beq.n	800a5f8 <HAL_ADC_AnalogWDGConfig+0x308>
 800a5f6:	e08d      	b.n	800a714 <HAL_ADC_AnalogWDGConfig+0x424>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	4013      	ands	r3, r2
 800a600:	d000      	beq.n	800a604 <HAL_ADC_AnalogWDGConfig+0x314>
 800a602:	e085      	b.n	800a710 <HAL_ADC_AnalogWDGConfig+0x420>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	2210      	movs	r2, #16
 800a60a:	4013      	ands	r3, r2
 800a60c:	d000      	beq.n	800a610 <HAL_ADC_AnalogWDGConfig+0x320>
 800a60e:	e07d      	b.n	800a70c <HAL_ADC_AnalogWDGConfig+0x41c>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	2220      	movs	r2, #32
 800a616:	4013      	ands	r3, r2
 800a618:	d000      	beq.n	800a61c <HAL_ADC_AnalogWDGConfig+0x32c>
 800a61a:	e075      	b.n	800a708 <HAL_ADC_AnalogWDGConfig+0x418>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2240      	movs	r2, #64	; 0x40
 800a622:	4013      	ands	r3, r2
 800a624:	d000      	beq.n	800a628 <HAL_ADC_AnalogWDGConfig+0x338>
 800a626:	e06d      	b.n	800a704 <HAL_ADC_AnalogWDGConfig+0x414>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2280      	movs	r2, #128	; 0x80
 800a62e:	4013      	ands	r3, r2
 800a630:	d000      	beq.n	800a634 <HAL_ADC_AnalogWDGConfig+0x344>
 800a632:	e065      	b.n	800a700 <HAL_ADC_AnalogWDGConfig+0x410>
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4013      	ands	r3, r2
 800a63e:	d000      	beq.n	800a642 <HAL_ADC_AnalogWDGConfig+0x352>
 800a640:	e05b      	b.n	800a6fa <HAL_ADC_AnalogWDGConfig+0x40a>
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	689a      	ldr	r2, [r3, #8]
 800a646:	2380      	movs	r3, #128	; 0x80
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4013      	ands	r3, r2
 800a64c:	d152      	bne.n	800a6f4 <HAL_ADC_AnalogWDGConfig+0x404>
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	689a      	ldr	r2, [r3, #8]
 800a652:	2380      	movs	r3, #128	; 0x80
 800a654:	00db      	lsls	r3, r3, #3
 800a656:	4013      	ands	r3, r2
 800a658:	d149      	bne.n	800a6ee <HAL_ADC_AnalogWDGConfig+0x3fe>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	689a      	ldr	r2, [r3, #8]
 800a65e:	2380      	movs	r3, #128	; 0x80
 800a660:	011b      	lsls	r3, r3, #4
 800a662:	4013      	ands	r3, r2
 800a664:	d140      	bne.n	800a6e8 <HAL_ADC_AnalogWDGConfig+0x3f8>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	2380      	movs	r3, #128	; 0x80
 800a66c:	015b      	lsls	r3, r3, #5
 800a66e:	4013      	ands	r3, r2
 800a670:	d137      	bne.n	800a6e2 <HAL_ADC_AnalogWDGConfig+0x3f2>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	2380      	movs	r3, #128	; 0x80
 800a678:	019b      	lsls	r3, r3, #6
 800a67a:	4013      	ands	r3, r2
 800a67c:	d12e      	bne.n	800a6dc <HAL_ADC_AnalogWDGConfig+0x3ec>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	689a      	ldr	r2, [r3, #8]
 800a682:	2380      	movs	r3, #128	; 0x80
 800a684:	01db      	lsls	r3, r3, #7
 800a686:	4013      	ands	r3, r2
 800a688:	d125      	bne.n	800a6d6 <HAL_ADC_AnalogWDGConfig+0x3e6>
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	689a      	ldr	r2, [r3, #8]
 800a68e:	2380      	movs	r3, #128	; 0x80
 800a690:	021b      	lsls	r3, r3, #8
 800a692:	4013      	ands	r3, r2
 800a694:	d11c      	bne.n	800a6d0 <HAL_ADC_AnalogWDGConfig+0x3e0>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	2380      	movs	r3, #128	; 0x80
 800a69c:	025b      	lsls	r3, r3, #9
 800a69e:	4013      	ands	r3, r2
 800a6a0:	d113      	bne.n	800a6ca <HAL_ADC_AnalogWDGConfig+0x3da>
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	2380      	movs	r3, #128	; 0x80
 800a6a8:	029b      	lsls	r3, r3, #10
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	d10a      	bne.n	800a6c4 <HAL_ADC_AnalogWDGConfig+0x3d4>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689a      	ldr	r2, [r3, #8]
 800a6b2:	2380      	movs	r3, #128	; 0x80
 800a6b4:	02db      	lsls	r3, r3, #11
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	d002      	beq.n	800a6c0 <HAL_ADC_AnalogWDGConfig+0x3d0>
 800a6ba:	2380      	movs	r3, #128	; 0x80
 800a6bc:	02db      	lsls	r3, r3, #11
 800a6be:	e02e      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e02c      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6c4:	2380      	movs	r3, #128	; 0x80
 800a6c6:	029b      	lsls	r3, r3, #10
 800a6c8:	e029      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6ca:	2380      	movs	r3, #128	; 0x80
 800a6cc:	025b      	lsls	r3, r3, #9
 800a6ce:	e026      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	e023      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6d6:	2380      	movs	r3, #128	; 0x80
 800a6d8:	01db      	lsls	r3, r3, #7
 800a6da:	e020      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6dc:	2380      	movs	r3, #128	; 0x80
 800a6de:	019b      	lsls	r3, r3, #6
 800a6e0:	e01d      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6e2:	2380      	movs	r3, #128	; 0x80
 800a6e4:	015b      	lsls	r3, r3, #5
 800a6e6:	e01a      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6e8:	2380      	movs	r3, #128	; 0x80
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	e017      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6ee:	2380      	movs	r3, #128	; 0x80
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	e014      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	e011      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	e00e      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	e00c      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	e00a      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a708:	2320      	movs	r3, #32
 800a70a:	e008      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a70c:	2310      	movs	r3, #16
 800a70e:	e006      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a710:	2308      	movs	r3, #8
 800a712:	e004      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a714:	2304      	movs	r3, #4
 800a716:	e002      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a718:	2302      	movs	r3, #2
 800a71a:	e000      	b.n	800a71e <HAL_ADC_AnalogWDGConfig+0x42e>
 800a71c:	2301      	movs	r3, #1
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6812      	ldr	r2, [r2, #0]
 800a722:	430b      	orrs	r3, r1
 800a724:	21a4      	movs	r1, #164	; 0xa4
 800a726:	5053      	str	r3, [r2, r1]
          break;
 800a728:	e011      	b.n	800a74e <HAL_ADC_AnalogWDGConfig+0x45e>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800a732:	4a3f      	ldr	r2, [pc, #252]	; (800a830 <HAL_ADC_AnalogWDGConfig+0x540>)
 800a734:	0019      	movs	r1, r3
 800a736:	f7fe ff37 	bl	80095a8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 800a73a:	e008      	b.n	800a74e <HAL_ADC_AnalogWDGConfig+0x45e>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6818      	ldr	r0, [r3, #0]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2200      	movs	r2, #0
 800a746:	0019      	movs	r1, r3
 800a748:	f7fe ff2e 	bl	80095a8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800a74c:	46c0      	nop			; (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a38      	ldr	r2, [pc, #224]	; (800a834 <HAL_ADC_AnalogWDGConfig+0x544>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d11a      	bne.n	800a78e <HAL_ADC_AnalogWDGConfig+0x49e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75c:	4a36      	ldr	r2, [pc, #216]	; (800a838 <HAL_ADC_AnalogWDGConfig+0x548>)
 800a75e:	401a      	ands	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	0018      	movs	r0, r3
 800a76a:	f7ff f80f 	bl	800978c <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	7b1b      	ldrb	r3, [r3, #12]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d105      	bne.n	800a782 <HAL_ADC_AnalogWDGConfig+0x492>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	0018      	movs	r0, r3
 800a77c:	f7ff f82c 	bl	80097d8 <LL_ADC_EnableIT_AWD2>
 800a780:	e01f      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	0018      	movs	r0, r3
 800a788:	f7ff f854 	bl	8009834 <LL_ADC_DisableIT_AWD2>
 800a78c:	e019      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a792:	4a2a      	ldr	r2, [pc, #168]	; (800a83c <HAL_ADC_AnalogWDGConfig+0x54c>)
 800a794:	401a      	ands	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	0018      	movs	r0, r3
 800a7a0:	f7ff f800 	bl	80097a4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	7b1b      	ldrb	r3, [r3, #12]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d105      	bne.n	800a7b8 <HAL_ADC_AnalogWDGConfig+0x4c8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	0018      	movs	r0, r3
 800a7b2:	f7ff f820 	bl	80097f6 <LL_ADC_EnableIT_AWD3>
 800a7b6:	e004      	b.n	800a7c2 <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f7ff f849 	bl	8009854 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1e      	ldr	r2, [pc, #120]	; (800a840 <HAL_ADC_AnalogWDGConfig+0x550>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d118      	bne.n	800a7fe <HAL_ADC_AnalogWDGConfig+0x50e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	08db      	lsrs	r3, r3, #3
 800a7d8:	2103      	movs	r1, #3
 800a7da:	400b      	ands	r3, r1
 800a7dc:	005b      	lsls	r3, r3, #1
 800a7de:	409a      	lsls	r2, r3
 800a7e0:	0013      	movs	r3, r2
 800a7e2:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	08db      	lsrs	r3, r3, #3
 800a7f0:	2103      	movs	r1, #3
 800a7f2:	400b      	ands	r3, r1
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	409a      	lsls	r2, r3
 800a7f8:	0013      	movs	r3, r2
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	e005      	b.n	800a80a <HAL_ADC_AnalogWDGConfig+0x51a>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	60fb      	str	r3, [r7, #12]
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6818      	ldr	r0, [r3, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	6819      	ldr	r1, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	f7fe fef5 	bl	8009604 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2254      	movs	r2, #84	; 0x54
 800a81e:	2100      	movs	r1, #0
 800a820:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800a822:	2317      	movs	r3, #23
 800a824:	18fb      	adds	r3, r7, r3
 800a826:	781b      	ldrb	r3, [r3, #0]
}
 800a828:	0018      	movs	r0, r3
 800a82a:	46bd      	mov	sp, r7
 800a82c:	b007      	add	sp, #28
 800a82e:	bd90      	pop	{r4, r7, pc}
 800a830:	0087ffff 	.word	0x0087ffff
 800a834:	0017ffff 	.word	0x0017ffff
 800a838:	fffdffff 	.word	0xfffdffff
 800a83c:	fffbffff 	.word	0xfffbffff
 800a840:	7cc00000 	.word	0x7cc00000

0800a844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	0018      	movs	r0, r3
 800a856:	f7fe ff49 	bl	80096ec <LL_ADC_IsEnabled>
 800a85a:	1e03      	subs	r3, r0, #0
 800a85c:	d000      	beq.n	800a860 <ADC_Enable+0x1c>
 800a85e:	e069      	b.n	800a934 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	4a36      	ldr	r2, [pc, #216]	; (800a940 <ADC_Enable+0xfc>)
 800a868:	4013      	ands	r3, r2
 800a86a:	d00d      	beq.n	800a888 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a870:	2210      	movs	r2, #16
 800a872:	431a      	orrs	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	2201      	movs	r2, #1
 800a87e:	431a      	orrs	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	e056      	b.n	800a936 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	0018      	movs	r0, r3
 800a88e:	f7fe ff09 	bl	80096a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800a892:	4b2c      	ldr	r3, [pc, #176]	; (800a944 <ADC_Enable+0x100>)
 800a894:	0018      	movs	r0, r3
 800a896:	f7fe fdc9 	bl	800942c <LL_ADC_GetCommonPathInternalCh>
 800a89a:	0002      	movs	r2, r0
 800a89c:	2380      	movs	r3, #128	; 0x80
 800a89e:	041b      	lsls	r3, r3, #16
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	d00f      	beq.n	800a8c4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a8a4:	4b28      	ldr	r3, [pc, #160]	; (800a948 <ADC_Enable+0x104>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4928      	ldr	r1, [pc, #160]	; (800a94c <ADC_Enable+0x108>)
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	f7fb fca0 	bl	80061f0 <__udivsi3>
 800a8b0:	0003      	movs	r3, r0
 800a8b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800a8b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a8b6:	e002      	b.n	800a8be <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f9      	bne.n	800a8b8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7e5b      	ldrb	r3, [r3, #25]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d033      	beq.n	800a934 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a8cc:	f7fe fd56 	bl	800937c <HAL_GetTick>
 800a8d0:	0003      	movs	r3, r0
 800a8d2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a8d4:	e027      	b.n	800a926 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	0018      	movs	r0, r3
 800a8dc:	f7fe ff06 	bl	80096ec <LL_ADC_IsEnabled>
 800a8e0:	1e03      	subs	r3, r0, #0
 800a8e2:	d104      	bne.n	800a8ee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	0018      	movs	r0, r3
 800a8ea:	f7fe fedb 	bl	80096a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a8ee:	f7fe fd45 	bl	800937c <HAL_GetTick>
 800a8f2:	0002      	movs	r2, r0
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d914      	bls.n	800a926 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2201      	movs	r2, #1
 800a904:	4013      	ands	r3, r2
 800a906:	2b01      	cmp	r3, #1
 800a908:	d00d      	beq.n	800a926 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90e:	2210      	movs	r2, #16
 800a910:	431a      	orrs	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91a:	2201      	movs	r2, #1
 800a91c:	431a      	orrs	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e007      	b.n	800a936 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2201      	movs	r2, #1
 800a92e:	4013      	ands	r3, r2
 800a930:	2b01      	cmp	r3, #1
 800a932:	d1d0      	bne.n	800a8d6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b004      	add	sp, #16
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	80000017 	.word	0x80000017
 800a944:	40012708 	.word	0x40012708
 800a948:	2000005c 	.word	0x2000005c
 800a94c:	00030d40 	.word	0x00030d40

0800a950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	0018      	movs	r0, r3
 800a95e:	f7fe fed6 	bl	800970e <LL_ADC_IsDisableOngoing>
 800a962:	0003      	movs	r3, r0
 800a964:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	0018      	movs	r0, r3
 800a96c:	f7fe febe 	bl	80096ec <LL_ADC_IsEnabled>
 800a970:	1e03      	subs	r3, r0, #0
 800a972:	d046      	beq.n	800aa02 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d143      	bne.n	800aa02 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	2205      	movs	r2, #5
 800a982:	4013      	ands	r3, r2
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10d      	bne.n	800a9a4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f7fe fe9b 	bl	80096c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2203      	movs	r2, #3
 800a998:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a99a:	f7fe fcef 	bl	800937c <HAL_GetTick>
 800a99e:	0003      	movs	r3, r0
 800a9a0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9a2:	e028      	b.n	800a9f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a8:	2210      	movs	r2, #16
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e021      	b.n	800aa04 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a9c0:	f7fe fcdc 	bl	800937c <HAL_GetTick>
 800a9c4:	0002      	movs	r2, r0
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d913      	bls.n	800a9f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	d00d      	beq.n	800a9f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9de:	2210      	movs	r2, #16
 800a9e0:	431a      	orrs	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	431a      	orrs	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e006      	b.n	800aa04 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	4013      	ands	r3, r2
 800aa00:	d1de      	bne.n	800a9c0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	0018      	movs	r0, r3
 800aa06:	46bd      	mov	sp, r7
 800aa08:	b004      	add	sp, #16
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1e:	2250      	movs	r2, #80	; 0x50
 800aa20:	4013      	ands	r3, r2
 800aa22:	d141      	bne.n	800aaa8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa28:	2280      	movs	r2, #128	; 0x80
 800aa2a:	0092      	lsls	r2, r2, #2
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	0018      	movs	r0, r3
 800aa38:	f7fe fd39 	bl	80094ae <LL_ADC_REG_IsTriggerSourceSWStart>
 800aa3c:	1e03      	subs	r3, r0, #0
 800aa3e:	d02e      	beq.n	800aa9e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	7e9b      	ldrb	r3, [r3, #26]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d12a      	bne.n	800aa9e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2208      	movs	r2, #8
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d123      	bne.n	800aa9e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7fe fe7a 	bl	8009754 <LL_ADC_REG_IsConversionOngoing>
 800aa60:	1e03      	subs	r3, r0, #0
 800aa62:	d110      	bne.n	800aa86 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	685a      	ldr	r2, [r3, #4]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	210c      	movs	r1, #12
 800aa70:	438a      	bics	r2, r1
 800aa72:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa78:	4a15      	ldr	r2, [pc, #84]	; (800aad0 <ADC_DMAConvCplt+0xc4>)
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	659a      	str	r2, [r3, #88]	; 0x58
 800aa84:	e00b      	b.n	800aa9e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	431a      	orrs	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa96:	2201      	movs	r2, #1
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f7fb fe65 	bl	8006770 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800aaa6:	e00f      	b.n	800aac8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaac:	2210      	movs	r2, #16
 800aaae:	4013      	ands	r3, r2
 800aab0:	d004      	beq.n	800aabc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	0018      	movs	r0, r3
 800aab6:	f7ff fa3b 	bl	8009f30 <HAL_ADC_ErrorCallback>
}
 800aaba:	e005      	b.n	800aac8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	0010      	movs	r0, r2
 800aac6:	4798      	blx	r3
}
 800aac8:	46c0      	nop			; (mov r8, r8)
 800aaca:	46bd      	mov	sp, r7
 800aacc:	b004      	add	sp, #16
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	fffffefe 	.word	0xfffffefe

0800aad4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	0018      	movs	r0, r3
 800aae6:	f7ff fa13 	bl	8009f10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800aaea:	46c0      	nop			; (mov r8, r8)
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b004      	add	sp, #16
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab04:	2240      	movs	r2, #64	; 0x40
 800ab06:	431a      	orrs	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab10:	2204      	movs	r2, #4
 800ab12:	431a      	orrs	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f7ff fa08 	bl	8009f30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ab20:	46c0      	nop			; (mov r8, r8)
 800ab22:	46bd      	mov	sp, r7
 800ab24:	b004      	add	sp, #16
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <LL_ADC_GetCommonClock>:
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	23f0      	movs	r3, #240	; 0xf0
 800ab36:	039b      	lsls	r3, r3, #14
 800ab38:	4013      	ands	r3, r2
}
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <LL_ADC_GetClock>:
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	0f9b      	lsrs	r3, r3, #30
 800ab50:	079b      	lsls	r3, r3, #30
}
 800ab52:	0018      	movs	r0, r3
 800ab54:	46bd      	mov	sp, r7
 800ab56:	b002      	add	sp, #8
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <LL_ADC_SetCalibrationFactor>:
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	22b4      	movs	r2, #180	; 0xb4
 800ab68:	589b      	ldr	r3, [r3, r2]
 800ab6a:	227f      	movs	r2, #127	; 0x7f
 800ab6c:	4393      	bics	r3, r2
 800ab6e:	001a      	movs	r2, r3
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	431a      	orrs	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	21b4      	movs	r1, #180	; 0xb4
 800ab78:	505a      	str	r2, [r3, r1]
}
 800ab7a:	46c0      	nop			; (mov r8, r8)
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	b002      	add	sp, #8
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <LL_ADC_GetCalibrationFactor>:
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b082      	sub	sp, #8
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	22b4      	movs	r2, #180	; 0xb4
 800ab8e:	589b      	ldr	r3, [r3, r2]
 800ab90:	227f      	movs	r2, #127	; 0x7f
 800ab92:	4013      	ands	r3, r2
}
 800ab94:	0018      	movs	r0, r3
 800ab96:	46bd      	mov	sp, r7
 800ab98:	b002      	add	sp, #8
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <LL_ADC_Enable>:
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	4a04      	ldr	r2, [pc, #16]	; (800abbc <LL_ADC_Enable+0x20>)
 800abaa:	4013      	ands	r3, r2
 800abac:	2201      	movs	r2, #1
 800abae:	431a      	orrs	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	609a      	str	r2, [r3, #8]
}
 800abb4:	46c0      	nop			; (mov r8, r8)
 800abb6:	46bd      	mov	sp, r7
 800abb8:	b002      	add	sp, #8
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	7fffffe8 	.word	0x7fffffe8

0800abc0 <LL_ADC_Disable>:
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4a04      	ldr	r2, [pc, #16]	; (800abe0 <LL_ADC_Disable+0x20>)
 800abce:	4013      	ands	r3, r2
 800abd0:	2202      	movs	r2, #2
 800abd2:	431a      	orrs	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	609a      	str	r2, [r3, #8]
}
 800abd8:	46c0      	nop			; (mov r8, r8)
 800abda:	46bd      	mov	sp, r7
 800abdc:	b002      	add	sp, #8
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	7fffffe8 	.word	0x7fffffe8

0800abe4 <LL_ADC_IsEnabled>:
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2201      	movs	r2, #1
 800abf2:	4013      	ands	r3, r2
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d101      	bne.n	800abfc <LL_ADC_IsEnabled+0x18>
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <LL_ADC_IsEnabled+0x1a>
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	0018      	movs	r0, r3
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b002      	add	sp, #8
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <LL_ADC_StartCalibration>:
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b082      	sub	sp, #8
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	4a05      	ldr	r2, [pc, #20]	; (800ac2c <LL_ADC_StartCalibration+0x24>)
 800ac16:	4013      	ands	r3, r2
 800ac18:	2280      	movs	r2, #128	; 0x80
 800ac1a:	0612      	lsls	r2, r2, #24
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	609a      	str	r2, [r3, #8]
}
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	46bd      	mov	sp, r7
 800ac26:	b002      	add	sp, #8
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	46c0      	nop			; (mov r8, r8)
 800ac2c:	7fffffe8 	.word	0x7fffffe8

0800ac30 <LL_ADC_IsCalibrationOnGoing>:
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	0fdb      	lsrs	r3, r3, #31
 800ac3e:	07da      	lsls	r2, r3, #31
 800ac40:	2380      	movs	r3, #128	; 0x80
 800ac42:	061b      	lsls	r3, r3, #24
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d101      	bne.n	800ac4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e000      	b.n	800ac4e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	0018      	movs	r0, r3
 800ac50:	46bd      	mov	sp, r7
 800ac52:	b002      	add	sp, #8
 800ac54:	bd80      	pop	{r7, pc}
	...

0800ac58 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800ac58:	b590      	push	{r4, r7, lr}
 800ac5a:	b08b      	sub	sp, #44	; 0x2c
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2254      	movs	r2, #84	; 0x54
 800ac6c:	5c9b      	ldrb	r3, [r3, r2]
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d101      	bne.n	800ac76 <HAL_ADCEx_Calibration_Start+0x1e>
 800ac72:	2302      	movs	r3, #2
 800ac74:	e0dd      	b.n	800ae32 <HAL_ADCEx_Calibration_Start+0x1da>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2254      	movs	r2, #84	; 0x54
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ac7e:	231f      	movs	r3, #31
 800ac80:	18fc      	adds	r4, r7, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	0018      	movs	r0, r3
 800ac86:	f7ff fe63 	bl	800a950 <ADC_Disable>
 800ac8a:	0003      	movs	r3, r0
 800ac8c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	0018      	movs	r0, r3
 800ac94:	f7ff ffa6 	bl	800abe4 <LL_ADC_IsEnabled>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d000      	beq.n	800ac9e <HAL_ADCEx_Calibration_Start+0x46>
 800ac9c:	e0bc      	b.n	800ae18 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca2:	4a66      	ldr	r2, [pc, #408]	; (800ae3c <HAL_ADCEx_Calibration_Start+0x1e4>)
 800aca4:	4013      	ands	r3, r2
 800aca6:	2202      	movs	r2, #2
 800aca8:	431a      	orrs	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	4a62      	ldr	r2, [pc, #392]	; (800ae40 <HAL_ADCEx_Calibration_Start+0x1e8>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68da      	ldr	r2, [r3, #12]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	495f      	ldr	r1, [pc, #380]	; (800ae44 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800acc6:	400a      	ands	r2, r1
 800acc8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800acca:	2300      	movs	r3, #0
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
 800acce:	e02d      	b.n	800ad2c <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	0018      	movs	r0, r3
 800acd6:	f7ff ff97 	bl	800ac08 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800acda:	e014      	b.n	800ad06 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3301      	adds	r3, #1
 800ace0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	4a58      	ldr	r2, [pc, #352]	; (800ae48 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d90d      	bls.n	800ad06 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acee:	2212      	movs	r2, #18
 800acf0:	4393      	bics	r3, r2
 800acf2:	2210      	movs	r2, #16
 800acf4:	431a      	orrs	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2254      	movs	r2, #84	; 0x54
 800acfe:	2100      	movs	r1, #0
 800ad00:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e095      	b.n	800ae32 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f7ff ff90 	bl	800ac30 <LL_ADC_IsCalibrationOnGoing>
 800ad10:	1e03      	subs	r3, r0, #0
 800ad12:	d1e3      	bne.n	800acdc <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f7ff ff32 	bl	800ab82 <LL_ADC_GetCalibrationFactor>
 800ad1e:	0002      	movs	r2, r0
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	189b      	adds	r3, r3, r2
 800ad24:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	3301      	adds	r3, #1
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	2b07      	cmp	r3, #7
 800ad30:	d9ce      	bls.n	800acd0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800ad32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad34:	6a38      	ldr	r0, [r7, #32]
 800ad36:	f7fb fa5b 	bl	80061f0 <__udivsi3>
 800ad3a:	0003      	movs	r3, r0
 800ad3c:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	0018      	movs	r0, r3
 800ad44:	f7ff ff2a 	bl	800ab9c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f7ff fef8 	bl	800ab42 <LL_ADC_GetClock>
 800ad52:	1e03      	subs	r3, r0, #0
 800ad54:	d11b      	bne.n	800ad8e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ad56:	4b3d      	ldr	r3, [pc, #244]	; (800ae4c <HAL_ADCEx_Calibration_Start+0x1f4>)
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f7ff fee5 	bl	800ab28 <LL_ADC_GetCommonClock>
 800ad5e:	0003      	movs	r3, r0
 800ad60:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	23e0      	movs	r3, #224	; 0xe0
 800ad66:	035b      	lsls	r3, r3, #13
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d310      	bcc.n	800ad8e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	0c9b      	lsrs	r3, r3, #18
 800ad70:	3b03      	subs	r3, #3
 800ad72:	2201      	movs	r2, #1
 800ad74:	409a      	lsls	r2, r3
 800ad76:	0013      	movs	r3, r2
 800ad78:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	085b      	lsrs	r3, r3, #1
 800ad7e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800ad80:	e002      	b.n	800ad88 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f9      	bne.n	800ad82 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	0011      	movs	r1, r2
 800ad96:	0018      	movs	r0, r3
 800ad98:	f7ff fedf 	bl	800ab5a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f7ff ff0d 	bl	800abc0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ada6:	f7fe fae9 	bl	800937c <HAL_GetTick>
 800adaa:	0003      	movs	r3, r0
 800adac:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800adae:	e01b      	b.n	800ade8 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800adb0:	f7fe fae4 	bl	800937c <HAL_GetTick>
 800adb4:	0002      	movs	r2, r0
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d914      	bls.n	800ade8 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	0018      	movs	r0, r3
 800adc4:	f7ff ff0e 	bl	800abe4 <LL_ADC_IsEnabled>
 800adc8:	1e03      	subs	r3, r0, #0
 800adca:	d00d      	beq.n	800ade8 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add0:	2210      	movs	r2, #16
 800add2:	431a      	orrs	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800addc:	2201      	movs	r2, #1
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e024      	b.n	800ae32 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	0018      	movs	r0, r3
 800adee:	f7ff fef9 	bl	800abe4 <LL_ADC_IsEnabled>
 800adf2:	1e03      	subs	r3, r0, #0
 800adf4:	d1dc      	bne.n	800adb0 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68d9      	ldr	r1, [r3, #12]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	69ba      	ldr	r2, [r7, #24]
 800ae02:	430a      	orrs	r2, r1
 800ae04:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	4393      	bics	r3, r2
 800ae0e:	2201      	movs	r2, #1
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	659a      	str	r2, [r3, #88]	; 0x58
 800ae16:	e005      	b.n	800ae24 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1c:	2210      	movs	r2, #16
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2254      	movs	r2, #84	; 0x54
 800ae28:	2100      	movs	r1, #0
 800ae2a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800ae2c:	231f      	movs	r3, #31
 800ae2e:	18fb      	adds	r3, r7, r3
 800ae30:	781b      	ldrb	r3, [r3, #0]
}
 800ae32:	0018      	movs	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b00b      	add	sp, #44	; 0x2c
 800ae38:	bd90      	pop	{r4, r7, pc}
 800ae3a:	46c0      	nop			; (mov r8, r8)
 800ae3c:	fffffefd 	.word	0xfffffefd
 800ae40:	00008003 	.word	0x00008003
 800ae44:	ffff7ffc 	.word	0xffff7ffc
 800ae48:	0002f1ff 	.word	0x0002f1ff
 800ae4c:	40012708 	.word	0x40012708

0800ae50 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ae58:	46c0      	nop			; (mov r8, r8)
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	b002      	add	sp, #8
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ae68:	46c0      	nop			; (mov r8, r8)
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800ae78:	46c0      	nop			; (mov r8, r8)
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <__NVIC_EnableIRQ>:
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	0002      	movs	r2, r0
 800ae88:	1dfb      	adds	r3, r7, #7
 800ae8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ae8c:	1dfb      	adds	r3, r7, #7
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	2b7f      	cmp	r3, #127	; 0x7f
 800ae92:	d809      	bhi.n	800aea8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae94:	1dfb      	adds	r3, r7, #7
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	001a      	movs	r2, r3
 800ae9a:	231f      	movs	r3, #31
 800ae9c:	401a      	ands	r2, r3
 800ae9e:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <__NVIC_EnableIRQ+0x30>)
 800aea0:	2101      	movs	r1, #1
 800aea2:	4091      	lsls	r1, r2
 800aea4:	000a      	movs	r2, r1
 800aea6:	601a      	str	r2, [r3, #0]
}
 800aea8:	46c0      	nop			; (mov r8, r8)
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b002      	add	sp, #8
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	e000e100 	.word	0xe000e100

0800aeb4 <__NVIC_SetPriority>:
{
 800aeb4:	b590      	push	{r4, r7, lr}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	0002      	movs	r2, r0
 800aebc:	6039      	str	r1, [r7, #0]
 800aebe:	1dfb      	adds	r3, r7, #7
 800aec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aec2:	1dfb      	adds	r3, r7, #7
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	2b7f      	cmp	r3, #127	; 0x7f
 800aec8:	d828      	bhi.n	800af1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aeca:	4a2f      	ldr	r2, [pc, #188]	; (800af88 <__NVIC_SetPriority+0xd4>)
 800aecc:	1dfb      	adds	r3, r7, #7
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	33c0      	adds	r3, #192	; 0xc0
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	589b      	ldr	r3, [r3, r2]
 800aeda:	1dfa      	adds	r2, r7, #7
 800aedc:	7812      	ldrb	r2, [r2, #0]
 800aede:	0011      	movs	r1, r2
 800aee0:	2203      	movs	r2, #3
 800aee2:	400a      	ands	r2, r1
 800aee4:	00d2      	lsls	r2, r2, #3
 800aee6:	21ff      	movs	r1, #255	; 0xff
 800aee8:	4091      	lsls	r1, r2
 800aeea:	000a      	movs	r2, r1
 800aeec:	43d2      	mvns	r2, r2
 800aeee:	401a      	ands	r2, r3
 800aef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	019b      	lsls	r3, r3, #6
 800aef6:	22ff      	movs	r2, #255	; 0xff
 800aef8:	401a      	ands	r2, r3
 800aefa:	1dfb      	adds	r3, r7, #7
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	0018      	movs	r0, r3
 800af00:	2303      	movs	r3, #3
 800af02:	4003      	ands	r3, r0
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af08:	481f      	ldr	r0, [pc, #124]	; (800af88 <__NVIC_SetPriority+0xd4>)
 800af0a:	1dfb      	adds	r3, r7, #7
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	089b      	lsrs	r3, r3, #2
 800af12:	430a      	orrs	r2, r1
 800af14:	33c0      	adds	r3, #192	; 0xc0
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	501a      	str	r2, [r3, r0]
}
 800af1a:	e031      	b.n	800af80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af1c:	4a1b      	ldr	r2, [pc, #108]	; (800af8c <__NVIC_SetPriority+0xd8>)
 800af1e:	1dfb      	adds	r3, r7, #7
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	0019      	movs	r1, r3
 800af24:	230f      	movs	r3, #15
 800af26:	400b      	ands	r3, r1
 800af28:	3b08      	subs	r3, #8
 800af2a:	089b      	lsrs	r3, r3, #2
 800af2c:	3306      	adds	r3, #6
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	18d3      	adds	r3, r2, r3
 800af32:	3304      	adds	r3, #4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	1dfa      	adds	r2, r7, #7
 800af38:	7812      	ldrb	r2, [r2, #0]
 800af3a:	0011      	movs	r1, r2
 800af3c:	2203      	movs	r2, #3
 800af3e:	400a      	ands	r2, r1
 800af40:	00d2      	lsls	r2, r2, #3
 800af42:	21ff      	movs	r1, #255	; 0xff
 800af44:	4091      	lsls	r1, r2
 800af46:	000a      	movs	r2, r1
 800af48:	43d2      	mvns	r2, r2
 800af4a:	401a      	ands	r2, r3
 800af4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	019b      	lsls	r3, r3, #6
 800af52:	22ff      	movs	r2, #255	; 0xff
 800af54:	401a      	ands	r2, r3
 800af56:	1dfb      	adds	r3, r7, #7
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	0018      	movs	r0, r3
 800af5c:	2303      	movs	r3, #3
 800af5e:	4003      	ands	r3, r0
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800af64:	4809      	ldr	r0, [pc, #36]	; (800af8c <__NVIC_SetPriority+0xd8>)
 800af66:	1dfb      	adds	r3, r7, #7
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	001c      	movs	r4, r3
 800af6c:	230f      	movs	r3, #15
 800af6e:	4023      	ands	r3, r4
 800af70:	3b08      	subs	r3, #8
 800af72:	089b      	lsrs	r3, r3, #2
 800af74:	430a      	orrs	r2, r1
 800af76:	3306      	adds	r3, #6
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	18c3      	adds	r3, r0, r3
 800af7c:	3304      	adds	r3, #4
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	46c0      	nop			; (mov r8, r8)
 800af82:	46bd      	mov	sp, r7
 800af84:	b003      	add	sp, #12
 800af86:	bd90      	pop	{r4, r7, pc}
 800af88:	e000e100 	.word	0xe000e100
 800af8c:	e000ed00 	.word	0xe000ed00

0800af90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800af94:	f3bf 8f4f 	dsb	sy
}
 800af98:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <__NVIC_SystemReset+0x1c>)
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <__NVIC_SystemReset+0x20>)
 800af9e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800afa0:	f3bf 8f4f 	dsb	sy
}
 800afa4:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	e7fd      	b.n	800afa6 <__NVIC_SystemReset+0x16>
 800afaa:	46c0      	nop			; (mov r8, r8)
 800afac:	e000ed00 	.word	0xe000ed00
 800afb0:	05fa0004 	.word	0x05fa0004

0800afb4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	210f      	movs	r1, #15
 800afc0:	187b      	adds	r3, r7, r1
 800afc2:	1c02      	adds	r2, r0, #0
 800afc4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	187b      	adds	r3, r7, r1
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	0011      	movs	r1, r2
 800afd0:	0018      	movs	r0, r3
 800afd2:	f7ff ff6f 	bl	800aeb4 <__NVIC_SetPriority>
}
 800afd6:	46c0      	nop			; (mov r8, r8)
 800afd8:	46bd      	mov	sp, r7
 800afda:	b004      	add	sp, #16
 800afdc:	bd80      	pop	{r7, pc}

0800afde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b082      	sub	sp, #8
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	0002      	movs	r2, r0
 800afe6:	1dfb      	adds	r3, r7, #7
 800afe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800afea:	1dfb      	adds	r3, r7, #7
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b25b      	sxtb	r3, r3
 800aff0:	0018      	movs	r0, r3
 800aff2:	f7ff ff45 	bl	800ae80 <__NVIC_EnableIRQ>
}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	46bd      	mov	sp, r7
 800affa:	b002      	add	sp, #8
 800affc:	bd80      	pop	{r7, pc}

0800affe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b002:	f7ff ffc5 	bl	800af90 <__NVIC_SystemReset>

0800b006 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b082      	sub	sp, #8
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e015      	b.n	800b044 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	791b      	ldrb	r3, [r3, #4]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	0018      	movs	r0, r3
 800b02c:	f7fd fe7c 	bl	8008d28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2202      	movs	r2, #2
 800b034:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	0018      	movs	r0, r3
 800b046:	46bd      	mov	sp, r7
 800b048:	b002      	add	sp, #8
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e047      	b.n	800b0f0 <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	795b      	ldrb	r3, [r3, #5]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d101      	bne.n	800b06c <HAL_DAC_Start+0x20>
 800b068:	2302      	movs	r3, #2
 800b06a:	e041      	b.n	800b0f0 <HAL_DAC_Start+0xa4>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2202      	movs	r2, #2
 800b076:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6819      	ldr	r1, [r3, #0]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	2210      	movs	r2, #16
 800b082:	4013      	ands	r3, r2
 800b084:	2201      	movs	r2, #1
 800b086:	409a      	lsls	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10f      	bne.n	800b0b6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	223e      	movs	r2, #62	; 0x3e
 800b09e:	4013      	ands	r3, r2
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d11e      	bne.n	800b0e2 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685a      	ldr	r2, [r3, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	605a      	str	r2, [r3, #4]
 800b0b4:	e015      	b.n	800b0e2 <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	23f8      	movs	r3, #248	; 0xf8
 800b0be:	039b      	lsls	r3, r3, #14
 800b0c0:	401a      	ands	r2, r3
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2110      	movs	r1, #16
 800b0c6:	400b      	ands	r3, r1
 800b0c8:	2102      	movs	r1, #2
 800b0ca:	4099      	lsls	r1, r3
 800b0cc:	000b      	movs	r3, r1
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d107      	bne.n	800b0e2 <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2102      	movs	r1, #2
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	0018      	movs	r0, r3
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	b002      	add	sp, #8
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b10e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	2380      	movs	r3, #128	; 0x80
 800b114:	019b      	lsls	r3, r3, #6
 800b116:	4013      	ands	r3, r2
 800b118:	d01e      	beq.n	800b158 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	019b      	lsls	r3, r3, #6
 800b120:	4013      	ands	r3, r2
 800b122:	d019      	beq.n	800b158 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2204      	movs	r2, #4
 800b128:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	2201      	movs	r2, #1
 800b130:	431a      	orrs	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2280      	movs	r2, #128	; 0x80
 800b13c:	0192      	lsls	r2, r2, #6
 800b13e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4917      	ldr	r1, [pc, #92]	; (800b1a8 <HAL_DAC_IRQHandler+0xb0>)
 800b14c:	400a      	ands	r2, r1
 800b14e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	0018      	movs	r0, r3
 800b154:	f000 f853 	bl	800b1fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	2380      	movs	r3, #128	; 0x80
 800b15c:	059b      	lsls	r3, r3, #22
 800b15e:	4013      	ands	r3, r2
 800b160:	d01e      	beq.n	800b1a0 <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	059b      	lsls	r3, r3, #22
 800b168:	4013      	ands	r3, r2
 800b16a:	d019      	beq.n	800b1a0 <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2204      	movs	r2, #4
 800b170:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2202      	movs	r2, #2
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2280      	movs	r2, #128	; 0x80
 800b184:	0592      	lsls	r2, r2, #22
 800b186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4906      	ldr	r1, [pc, #24]	; (800b1ac <HAL_DAC_IRQHandler+0xb4>)
 800b194:	400a      	ands	r2, r1
 800b196:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0018      	movs	r0, r3
 800b19c:	f000 f968 	bl	800b470 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800b1a0:	46c0      	nop			; (mov r8, r8)
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	b004      	add	sp, #16
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	ffffefff 	.word	0xffffefff
 800b1ac:	efffffff 	.word	0xefffffff

0800b1b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	60f8      	str	r0, [r7, #12]
 800b1b8:	60b9      	str	r1, [r7, #8]
 800b1ba:	607a      	str	r2, [r7, #4]
 800b1bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e014      	b.n	800b1f6 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d105      	bne.n	800b1e4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	18d3      	adds	r3, r2, r3
 800b1de:	3308      	adds	r3, #8
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	e004      	b.n	800b1ee <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	18d3      	adds	r3, r2, r3
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	b006      	add	sp, #24
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b082      	sub	sp, #8
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800b206:	46c0      	nop			; (mov r8, r8)
 800b208:	46bd      	mov	sp, r7
 800b20a:	b002      	add	sp, #8
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b21c:	231f      	movs	r3, #31
 800b21e:	18fb      	adds	r3, r7, r3
 800b220:	2200      	movs	r2, #0
 800b222:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <HAL_DAC_ConfigChannel+0x20>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e115      	b.n	800b460 <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	795b      	ldrb	r3, [r3, #5]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_DAC_ConfigChannel+0x30>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e10f      	b.n	800b460 <HAL_DAC_ConfigChannel+0x250>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2201      	movs	r2, #1
 800b244:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2202      	movs	r2, #2
 800b24a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b04      	cmp	r3, #4
 800b252:	d000      	beq.n	800b256 <HAL_DAC_ConfigChannel+0x46>
 800b254:	e07a      	b.n	800b34c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800b256:	f7fe f891 	bl	800937c <HAL_GetTick>
 800b25a:	0003      	movs	r3, r0
 800b25c:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d13d      	bne.n	800b2e0 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b264:	e018      	b.n	800b298 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b266:	f7fe f889 	bl	800937c <HAL_GetTick>
 800b26a:	0002      	movs	r2, r0
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	2b01      	cmp	r3, #1
 800b272:	d911      	bls.n	800b298 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b27a:	2380      	movs	r3, #128	; 0x80
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	4013      	ands	r3, r2
 800b280:	d00a      	beq.n	800b298 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	2208      	movs	r2, #8
 800b288:	431a      	orrs	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2203      	movs	r2, #3
 800b292:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800b294:	2303      	movs	r3, #3
 800b296:	e0e3      	b.n	800b460 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b29e:	2380      	movs	r3, #128	; 0x80
 800b2a0:	021b      	lsls	r3, r3, #8
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	d1df      	bne.n	800b266 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	6992      	ldr	r2, [r2, #24]
 800b2ae:	641a      	str	r2, [r3, #64]	; 0x40
 800b2b0:	e020      	b.n	800b2f4 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b2b2:	f7fe f863 	bl	800937c <HAL_GetTick>
 800b2b6:	0002      	movs	r2, r0
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d90f      	bls.n	800b2e0 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	da0a      	bge.n	800b2e0 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2208      	movs	r2, #8
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2203      	movs	r2, #3
 800b2da:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800b2dc:	2303      	movs	r3, #3
 800b2de:	e0bf      	b.n	800b460 <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dbe3      	blt.n	800b2b2 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	6992      	ldr	r2, [r2, #24]
 800b2f2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	2110      	movs	r1, #16
 800b2fe:	400a      	ands	r2, r1
 800b300:	4959      	ldr	r1, [pc, #356]	; (800b468 <HAL_DAC_ConfigChannel+0x258>)
 800b302:	4091      	lsls	r1, r2
 800b304:	000a      	movs	r2, r1
 800b306:	43d2      	mvns	r2, r2
 800b308:	401a      	ands	r2, r3
 800b30a:	0011      	movs	r1, r2
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	69da      	ldr	r2, [r3, #28]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2010      	movs	r0, #16
 800b314:	4003      	ands	r3, r0
 800b316:	409a      	lsls	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	430a      	orrs	r2, r1
 800b31e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	2110      	movs	r1, #16
 800b32a:	400a      	ands	r2, r1
 800b32c:	21ff      	movs	r1, #255	; 0xff
 800b32e:	4091      	lsls	r1, r2
 800b330:	000a      	movs	r2, r1
 800b332:	43d2      	mvns	r2, r2
 800b334:	401a      	ands	r2, r3
 800b336:	0011      	movs	r1, r2
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	6a1a      	ldr	r2, [r3, #32]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2010      	movs	r0, #16
 800b340:	4003      	ands	r3, r0
 800b342:	409a      	lsls	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d11d      	bne.n	800b390 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2210      	movs	r2, #16
 800b360:	4013      	ands	r3, r2
 800b362:	221f      	movs	r2, #31
 800b364:	409a      	lsls	r2, r3
 800b366:	0013      	movs	r3, r2
 800b368:	43da      	mvns	r2, r3
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	4013      	ands	r3, r2
 800b36e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2210      	movs	r2, #16
 800b37a:	4013      	ands	r3, r2
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	409a      	lsls	r2, r3
 800b380:	0013      	movs	r3, r2
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	4313      	orrs	r3, r2
 800b386:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b396:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2210      	movs	r2, #16
 800b39c:	4013      	ands	r3, r2
 800b39e:	2207      	movs	r2, #7
 800b3a0:	409a      	lsls	r2, r3
 800b3a2:	0013      	movs	r3, r2
 800b3a4:	43da      	mvns	r2, r3
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2210      	movs	r2, #16
 800b3c2:	4013      	ands	r3, r2
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	409a      	lsls	r2, r3
 800b3c8:	0013      	movs	r3, r2
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2110      	movs	r1, #16
 800b3e2:	400b      	ands	r3, r1
 800b3e4:	2180      	movs	r1, #128	; 0x80
 800b3e6:	01c9      	lsls	r1, r1, #7
 800b3e8:	4099      	lsls	r1, r3
 800b3ea:	000b      	movs	r3, r1
 800b3ec:	43d9      	mvns	r1, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	400a      	ands	r2, r1
 800b3f4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2210      	movs	r2, #16
 800b402:	4013      	ands	r3, r2
 800b404:	4a19      	ldr	r2, [pc, #100]	; (800b46c <HAL_DAC_ConfigChannel+0x25c>)
 800b406:	409a      	lsls	r2, r3
 800b408:	0013      	movs	r3, r2
 800b40a:	43da      	mvns	r2, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	4013      	ands	r3, r2
 800b410:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2210      	movs	r2, #16
 800b41c:	4013      	ands	r3, r2
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	409a      	lsls	r2, r3
 800b422:	0013      	movs	r3, r2
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	4313      	orrs	r3, r2
 800b428:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2110      	movs	r1, #16
 800b43c:	400b      	ands	r3, r1
 800b43e:	21c0      	movs	r1, #192	; 0xc0
 800b440:	4099      	lsls	r1, r3
 800b442:	000b      	movs	r3, r1
 800b444:	43d9      	mvns	r1, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	400a      	ands	r2, r1
 800b44c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2201      	movs	r2, #1
 800b452:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800b45a:	231f      	movs	r3, #31
 800b45c:	18fb      	adds	r3, r7, r3
 800b45e:	781b      	ldrb	r3, [r3, #0]
}
 800b460:	0018      	movs	r0, r3
 800b462:	46bd      	mov	sp, r7
 800b464:	b008      	add	sp, #32
 800b466:	bd80      	pop	{r7, pc}
 800b468:	000003ff 	.word	0x000003ff
 800b46c:	00000ffe 	.word	0x00000ffe

0800b470 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800b478:	46c0      	nop			; (mov r8, r8)
 800b47a:	46bd      	mov	sp, r7
 800b47c:	b002      	add	sp, #8
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e091      	b.n	800b5b6 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	001a      	movs	r2, r3
 800b498:	4b49      	ldr	r3, [pc, #292]	; (800b5c0 <HAL_DMA_Init+0x140>)
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d810      	bhi.n	800b4c0 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a48      	ldr	r2, [pc, #288]	; (800b5c4 <HAL_DMA_Init+0x144>)
 800b4a4:	4694      	mov	ip, r2
 800b4a6:	4463      	add	r3, ip
 800b4a8:	2114      	movs	r1, #20
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f7fa fea0 	bl	80061f0 <__udivsi3>
 800b4b0:	0003      	movs	r3, r0
 800b4b2:	009a      	lsls	r2, r3, #2
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a43      	ldr	r2, [pc, #268]	; (800b5c8 <HAL_DMA_Init+0x148>)
 800b4bc:	641a      	str	r2, [r3, #64]	; 0x40
 800b4be:	e00f      	b.n	800b4e0 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a41      	ldr	r2, [pc, #260]	; (800b5cc <HAL_DMA_Init+0x14c>)
 800b4c6:	4694      	mov	ip, r2
 800b4c8:	4463      	add	r3, ip
 800b4ca:	2114      	movs	r1, #20
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	f7fa fe8f 	bl	80061f0 <__udivsi3>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	009a      	lsls	r2, r3, #2
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a3c      	ldr	r2, [pc, #240]	; (800b5d0 <HAL_DMA_Init+0x150>)
 800b4de:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2225      	movs	r2, #37	; 0x25
 800b4e4:	2102      	movs	r1, #2
 800b4e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4938      	ldr	r1, [pc, #224]	; (800b5d4 <HAL_DMA_Init+0x154>)
 800b4f4:	400a      	ands	r2, r1
 800b4f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689a      	ldr	r2, [r3, #8]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	431a      	orrs	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	431a      	orrs	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	431a      	orrs	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	431a      	orrs	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	431a      	orrs	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	430a      	orrs	r2, r1
 800b52c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	0018      	movs	r0, r3
 800b532:	f000 f9d7 	bl	800b8e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	2380      	movs	r3, #128	; 0x80
 800b53c:	01db      	lsls	r3, r3, #7
 800b53e:	429a      	cmp	r2, r3
 800b540:	d102      	bne.n	800b548 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b550:	217f      	movs	r1, #127	; 0x7f
 800b552:	400a      	ands	r2, r1
 800b554:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b55e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d011      	beq.n	800b58c <HAL_DMA_Init+0x10c>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b04      	cmp	r3, #4
 800b56e:	d80d      	bhi.n	800b58c <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	0018      	movs	r0, r3
 800b574:	f000 fa00 	bl	800b978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	e008      	b.n	800b59e <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2225      	movs	r2, #37	; 0x25
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2224      	movs	r2, #36	; 0x24
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	b002      	add	sp, #8
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	40020407 	.word	0x40020407
 800b5c4:	bffdfff8 	.word	0xbffdfff8
 800b5c8:	40020000 	.word	0x40020000
 800b5cc:	bffdfbf8 	.word	0xbffdfbf8
 800b5d0:	40020400 	.word	0x40020400
 800b5d4:	ffff800f 	.word	0xffff800f

0800b5d8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e6:	2317      	movs	r3, #23
 800b5e8:	18fb      	adds	r3, r7, r3
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2224      	movs	r2, #36	; 0x24
 800b5f2:	5c9b      	ldrb	r3, [r3, r2]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_DMA_Start_IT+0x24>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e06f      	b.n	800b6dc <HAL_DMA_Start_IT+0x104>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2224      	movs	r2, #36	; 0x24
 800b600:	2101      	movs	r1, #1
 800b602:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2225      	movs	r2, #37	; 0x25
 800b608:	5c9b      	ldrb	r3, [r3, r2]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d157      	bne.n	800b6c0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2225      	movs	r2, #37	; 0x25
 800b614:	2102      	movs	r1, #2
 800b616:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2101      	movs	r1, #1
 800b62a:	438a      	bics	r2, r1
 800b62c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f919 	bl	800b86c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d008      	beq.n	800b654 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	210e      	movs	r1, #14
 800b64e:	430a      	orrs	r2, r1
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	e00f      	b.n	800b674 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681a      	ldr	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2104      	movs	r1, #4
 800b660:	438a      	bics	r2, r1
 800b662:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	210a      	movs	r1, #10
 800b670:	430a      	orrs	r2, r1
 800b672:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	2380      	movs	r3, #128	; 0x80
 800b67c:	025b      	lsls	r3, r3, #9
 800b67e:	4013      	ands	r3, r2
 800b680:	d008      	beq.n	800b694 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b68c:	2180      	movs	r1, #128	; 0x80
 800b68e:	0049      	lsls	r1, r1, #1
 800b690:	430a      	orrs	r2, r1
 800b692:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d008      	beq.n	800b6ae <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a6:	2180      	movs	r1, #128	; 0x80
 800b6a8:	0049      	lsls	r1, r1, #1
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	430a      	orrs	r2, r1
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	e00a      	b.n	800b6d6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2280      	movs	r2, #128	; 0x80
 800b6c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2224      	movs	r2, #36	; 0x24
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800b6ce:	2317      	movs	r3, #23
 800b6d0:	18fb      	adds	r3, r7, r3
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b6d6:	2317      	movs	r3, #23
 800b6d8:	18fb      	adds	r3, r7, r3
 800b6da:	781b      	ldrb	r3, [r3, #0]
}
 800b6dc:	0018      	movs	r0, r3
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	b006      	add	sp, #24
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b700:	221c      	movs	r2, #28
 800b702:	4013      	ands	r3, r2
 800b704:	2204      	movs	r2, #4
 800b706:	409a      	lsls	r2, r3
 800b708:	0013      	movs	r3, r2
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4013      	ands	r3, r2
 800b70e:	d026      	beq.n	800b75e <HAL_DMA_IRQHandler+0x7a>
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	2204      	movs	r2, #4
 800b714:	4013      	ands	r3, r2
 800b716:	d022      	beq.n	800b75e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2220      	movs	r2, #32
 800b720:	4013      	ands	r3, r2
 800b722:	d107      	bne.n	800b734 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2104      	movs	r1, #4
 800b730:	438a      	bics	r2, r1
 800b732:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b738:	221c      	movs	r2, #28
 800b73a:	401a      	ands	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b740:	2104      	movs	r1, #4
 800b742:	4091      	lsls	r1, r2
 800b744:	000a      	movs	r2, r1
 800b746:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d100      	bne.n	800b752 <HAL_DMA_IRQHandler+0x6e>
 800b750:	e080      	b.n	800b854 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	0010      	movs	r0, r2
 800b75a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800b75c:	e07a      	b.n	800b854 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b762:	221c      	movs	r2, #28
 800b764:	4013      	ands	r3, r2
 800b766:	2202      	movs	r2, #2
 800b768:	409a      	lsls	r2, r3
 800b76a:	0013      	movs	r3, r2
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4013      	ands	r3, r2
 800b770:	d03c      	beq.n	800b7ec <HAL_DMA_IRQHandler+0x108>
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2202      	movs	r2, #2
 800b776:	4013      	ands	r3, r2
 800b778:	d038      	beq.n	800b7ec <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2220      	movs	r2, #32
 800b782:	4013      	ands	r3, r2
 800b784:	d10b      	bne.n	800b79e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	210a      	movs	r1, #10
 800b792:	438a      	bics	r2, r1
 800b794:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2225      	movs	r2, #37	; 0x25
 800b79a:	2101      	movs	r1, #1
 800b79c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	001a      	movs	r2, r3
 800b7a4:	4b2e      	ldr	r3, [pc, #184]	; (800b860 <HAL_DMA_IRQHandler+0x17c>)
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d909      	bls.n	800b7be <HAL_DMA_IRQHandler+0xda>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ae:	221c      	movs	r2, #28
 800b7b0:	401a      	ands	r2, r3
 800b7b2:	4b2c      	ldr	r3, [pc, #176]	; (800b864 <HAL_DMA_IRQHandler+0x180>)
 800b7b4:	2102      	movs	r1, #2
 800b7b6:	4091      	lsls	r1, r2
 800b7b8:	000a      	movs	r2, r1
 800b7ba:	605a      	str	r2, [r3, #4]
 800b7bc:	e008      	b.n	800b7d0 <HAL_DMA_IRQHandler+0xec>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c2:	221c      	movs	r2, #28
 800b7c4:	401a      	ands	r2, r3
 800b7c6:	4b28      	ldr	r3, [pc, #160]	; (800b868 <HAL_DMA_IRQHandler+0x184>)
 800b7c8:	2102      	movs	r1, #2
 800b7ca:	4091      	lsls	r1, r2
 800b7cc:	000a      	movs	r2, r1
 800b7ce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2224      	movs	r2, #36	; 0x24
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d039      	beq.n	800b854 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	0010      	movs	r0, r2
 800b7e8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800b7ea:	e033      	b.n	800b854 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7f0:	221c      	movs	r2, #28
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	409a      	lsls	r2, r3
 800b7f8:	0013      	movs	r3, r2
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	d02a      	beq.n	800b856 <HAL_DMA_IRQHandler+0x172>
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2208      	movs	r2, #8
 800b804:	4013      	ands	r3, r2
 800b806:	d026      	beq.n	800b856 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	210e      	movs	r1, #14
 800b814:	438a      	bics	r2, r1
 800b816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b81c:	221c      	movs	r2, #28
 800b81e:	401a      	ands	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b824:	2101      	movs	r1, #1
 800b826:	4091      	lsls	r1, r2
 800b828:	000a      	movs	r2, r1
 800b82a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2225      	movs	r2, #37	; 0x25
 800b836:	2101      	movs	r1, #1
 800b838:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2224      	movs	r2, #36	; 0x24
 800b83e:	2100      	movs	r1, #0
 800b840:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	0010      	movs	r0, r2
 800b852:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b854:	46c0      	nop			; (mov r8, r8)
 800b856:	46c0      	nop			; (mov r8, r8)
}
 800b858:	46bd      	mov	sp, r7
 800b85a:	b004      	add	sp, #16
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	40020080 	.word	0x40020080
 800b864:	40020400 	.word	0x40020400
 800b868:	40020000 	.word	0x40020000

0800b86c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b882:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b894:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b89a:	221c      	movs	r2, #28
 800b89c:	401a      	ands	r2, r3
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a2:	2101      	movs	r1, #1
 800b8a4:	4091      	lsls	r1, r2
 800b8a6:	000a      	movs	r2, r1
 800b8a8:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	2b10      	cmp	r3, #16
 800b8b8:	d108      	bne.n	800b8cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b8ca:	e007      	b.n	800b8dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	60da      	str	r2, [r3, #12]
}
 800b8dc:	46c0      	nop			; (mov r8, r8)
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	b004      	add	sp, #16
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	001a      	movs	r2, r3
 800b8f2:	4b1d      	ldr	r3, [pc, #116]	; (800b968 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d814      	bhi.n	800b922 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8fc:	089b      	lsrs	r3, r3, #2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4a1a      	ldr	r2, [pc, #104]	; (800b96c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800b902:	189a      	adds	r2, r3, r2
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	001a      	movs	r2, r3
 800b90e:	23ff      	movs	r3, #255	; 0xff
 800b910:	4013      	ands	r3, r2
 800b912:	3b08      	subs	r3, #8
 800b914:	2114      	movs	r1, #20
 800b916:	0018      	movs	r0, r3
 800b918:	f7fa fc6a 	bl	80061f0 <__udivsi3>
 800b91c:	0003      	movs	r3, r0
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	e014      	b.n	800b94c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b926:	089b      	lsrs	r3, r3, #2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4a11      	ldr	r2, [pc, #68]	; (800b970 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800b92c:	189a      	adds	r2, r3, r2
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	001a      	movs	r2, r3
 800b938:	23ff      	movs	r3, #255	; 0xff
 800b93a:	4013      	ands	r3, r2
 800b93c:	3b08      	subs	r3, #8
 800b93e:	2114      	movs	r1, #20
 800b940:	0018      	movs	r0, r3
 800b942:	f7fa fc55 	bl	80061f0 <__udivsi3>
 800b946:	0003      	movs	r3, r0
 800b948:	3307      	adds	r3, #7
 800b94a:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a09      	ldr	r2, [pc, #36]	; (800b974 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800b950:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	221f      	movs	r2, #31
 800b956:	4013      	ands	r3, r2
 800b958:	2201      	movs	r2, #1
 800b95a:	409a      	lsls	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b960:	46c0      	nop			; (mov r8, r8)
 800b962:	46bd      	mov	sp, r7
 800b964:	b004      	add	sp, #16
 800b966:	bd80      	pop	{r7, pc}
 800b968:	40020407 	.word	0x40020407
 800b96c:	40020800 	.word	0x40020800
 800b970:	4002081c 	.word	0x4002081c
 800b974:	40020880 	.word	0x40020880

0800b978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	227f      	movs	r2, #127	; 0x7f
 800b986:	4013      	ands	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4a0a      	ldr	r2, [pc, #40]	; (800b9b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b98e:	4694      	mov	ip, r2
 800b990:	4463      	add	r3, ip
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	001a      	movs	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a07      	ldr	r2, [pc, #28]	; (800b9bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b99e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	2203      	movs	r2, #3
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	409a      	lsls	r2, r3
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b9b0:	46c0      	nop			; (mov r8, r8)
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	b004      	add	sp, #16
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	1000823f 	.word	0x1000823f
 800b9bc:	40020940 	.word	0x40020940

0800b9c0 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800b9c0:	b5b0      	push	{r4, r5, r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	603a      	str	r2, [r7, #0]
 800b9cc:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b9ce:	4b21      	ldr	r3, [pc, #132]	; (800ba54 <HAL_FLASH_Program+0x94>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d101      	bne.n	800b9da <HAL_FLASH_Program+0x1a>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	e038      	b.n	800ba4c <HAL_FLASH_Program+0x8c>
 800b9da:	4b1e      	ldr	r3, [pc, #120]	; (800ba54 <HAL_FLASH_Program+0x94>)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b9e0:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <HAL_FLASH_Program+0x94>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b9e6:	2517      	movs	r5, #23
 800b9e8:	197c      	adds	r4, r7, r5
 800b9ea:	23fa      	movs	r3, #250	; 0xfa
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	0018      	movs	r0, r3
 800b9f0:	f000 f87a 	bl	800bae8 <FLASH_WaitForLastOperation>
 800b9f4:	0003      	movs	r3, r0
 800b9f6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800b9f8:	197b      	adds	r3, r7, r5
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d11f      	bne.n	800ba40 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d106      	bne.n	800ba14 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	68b9      	ldr	r1, [r7, #8]
 800ba0c:	0008      	movs	r0, r1
 800ba0e:	f000 f8b9 	bl	800bb84 <FLASH_Program_DoubleWord>
 800ba12:	e005      	b.n	800ba20 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	0011      	movs	r1, r2
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f018 fa48 	bl	8023eb0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ba20:	2317      	movs	r3, #23
 800ba22:	18fc      	adds	r4, r7, r3
 800ba24:	23fa      	movs	r3, #250	; 0xfa
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	0018      	movs	r0, r3
 800ba2a:	f000 f85d 	bl	800bae8 <FLASH_WaitForLastOperation>
 800ba2e:	0003      	movs	r3, r0
 800ba30:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ba32:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <HAL_FLASH_Program+0x98>)
 800ba34:	695a      	ldr	r2, [r3, #20]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	43d9      	mvns	r1, r3
 800ba3a:	4b07      	ldr	r3, [pc, #28]	; (800ba58 <HAL_FLASH_Program+0x98>)
 800ba3c:	400a      	ands	r2, r1
 800ba3e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ba40:	4b04      	ldr	r3, [pc, #16]	; (800ba54 <HAL_FLASH_Program+0x94>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ba46:	2317      	movs	r3, #23
 800ba48:	18fb      	adds	r3, r7, r3
 800ba4a:	781b      	ldrb	r3, [r3, #0]
}
 800ba4c:	0018      	movs	r0, r3
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	b006      	add	sp, #24
 800ba52:	bdb0      	pop	{r4, r5, r7, pc}
 800ba54:	20000578 	.word	0x20000578
 800ba58:	40022000 	.word	0x40022000

0800ba5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ba62:	1dfb      	adds	r3, r7, #7
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ba68:	4b0b      	ldr	r3, [pc, #44]	; (800ba98 <HAL_FLASH_Unlock+0x3c>)
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	da0c      	bge.n	800ba8a <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ba70:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <HAL_FLASH_Unlock+0x3c>)
 800ba72:	4a0a      	ldr	r2, [pc, #40]	; (800ba9c <HAL_FLASH_Unlock+0x40>)
 800ba74:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <HAL_FLASH_Unlock+0x3c>)
 800ba78:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <HAL_FLASH_Unlock+0x44>)
 800ba7a:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ba7c:	4b06      	ldr	r3, [pc, #24]	; (800ba98 <HAL_FLASH_Unlock+0x3c>)
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da02      	bge.n	800ba8a <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800ba84:	1dfb      	adds	r3, r7, #7
 800ba86:	2201      	movs	r2, #1
 800ba88:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800ba8a:	1dfb      	adds	r3, r7, #7
 800ba8c:	781b      	ldrb	r3, [r3, #0]
}
 800ba8e:	0018      	movs	r0, r3
 800ba90:	46bd      	mov	sp, r7
 800ba92:	b002      	add	sp, #8
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	46c0      	nop			; (mov r8, r8)
 800ba98:	40022000 	.word	0x40022000
 800ba9c:	45670123 	.word	0x45670123
 800baa0:	cdef89ab 	.word	0xcdef89ab

0800baa4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800baaa:	1dfb      	adds	r3, r7, #7
 800baac:	2201      	movs	r2, #1
 800baae:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bab0:	23fa      	movs	r3, #250	; 0xfa
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	0018      	movs	r0, r3
 800bab6:	f000 f817 	bl	800bae8 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800baba:	4b0a      	ldr	r3, [pc, #40]	; (800bae4 <HAL_FLASH_Lock+0x40>)
 800babc:	695a      	ldr	r2, [r3, #20]
 800babe:	4b09      	ldr	r3, [pc, #36]	; (800bae4 <HAL_FLASH_Lock+0x40>)
 800bac0:	2180      	movs	r1, #128	; 0x80
 800bac2:	0609      	lsls	r1, r1, #24
 800bac4:	430a      	orrs	r2, r1
 800bac6:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800bac8:	4b06      	ldr	r3, [pc, #24]	; (800bae4 <HAL_FLASH_Lock+0x40>)
 800baca:	695b      	ldr	r3, [r3, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	da02      	bge.n	800bad6 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800bad0:	1dfb      	adds	r3, r7, #7
 800bad2:	2200      	movs	r2, #0
 800bad4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bad6:	1dfb      	adds	r3, r7, #7
 800bad8:	781b      	ldrb	r3, [r3, #0]
}
 800bada:	0018      	movs	r0, r3
 800badc:	46bd      	mov	sp, r7
 800bade:	b002      	add	sp, #8
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	40022000 	.word	0x40022000

0800bae8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800baf0:	f7fd fc44 	bl	800937c <HAL_GetTick>
 800baf4:	0003      	movs	r3, r0
 800baf6:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800baf8:	23c0      	movs	r3, #192	; 0xc0
 800bafa:	029b      	lsls	r3, r3, #10
 800bafc:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800bafe:	e00c      	b.n	800bb1a <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3301      	adds	r3, #1
 800bb04:	d009      	beq.n	800bb1a <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800bb06:	f7fd fc39 	bl	800937c <HAL_GetTick>
 800bb0a:	0002      	movs	r2, r0
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d801      	bhi.n	800bb1a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e028      	b.n	800bb6c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <FLASH_WaitForLastOperation+0x8c>)
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	68ba      	ldr	r2, [r7, #8]
 800bb20:	4013      	ands	r3, r2
 800bb22:	d1ed      	bne.n	800bb00 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800bb24:	4b13      	ldr	r3, [pc, #76]	; (800bb74 <FLASH_WaitForLastOperation+0x8c>)
 800bb26:	691b      	ldr	r3, [r3, #16]
 800bb28:	4a13      	ldr	r2, [pc, #76]	; (800bb78 <FLASH_WaitForLastOperation+0x90>)
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800bb2e:	4b11      	ldr	r3, [pc, #68]	; (800bb74 <FLASH_WaitForLastOperation+0x8c>)
 800bb30:	4a12      	ldr	r2, [pc, #72]	; (800bb7c <FLASH_WaitForLastOperation+0x94>)
 800bb32:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d011      	beq.n	800bb5e <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800bb3a:	4b11      	ldr	r3, [pc, #68]	; (800bb80 <FLASH_WaitForLastOperation+0x98>)
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e013      	b.n	800bb6c <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3301      	adds	r3, #1
 800bb48:	d009      	beq.n	800bb5e <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800bb4a:	f7fd fc17 	bl	800937c <HAL_GetTick>
 800bb4e:	0002      	movs	r2, r0
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d801      	bhi.n	800bb5e <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e006      	b.n	800bb6c <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800bb5e:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <FLASH_WaitForLastOperation+0x8c>)
 800bb60:	691a      	ldr	r2, [r3, #16]
 800bb62:	2380      	movs	r3, #128	; 0x80
 800bb64:	02db      	lsls	r3, r3, #11
 800bb66:	4013      	ands	r3, r2
 800bb68:	d1ec      	bne.n	800bb44 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	0018      	movs	r0, r3
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	b004      	add	sp, #16
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	40022000 	.word	0x40022000
 800bb78:	0000c3fa 	.word	0x0000c3fa
 800bb7c:	0008c3fb 	.word	0x0008c3fb
 800bb80:	20000578 	.word	0x20000578

0800bb84 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800bb84:	b5b0      	push	{r4, r5, r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	603a      	str	r2, [r7, #0]
 800bb8e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800bb90:	4b0b      	ldr	r3, [pc, #44]	; (800bbc0 <FLASH_Program_DoubleWord+0x3c>)
 800bb92:	695a      	ldr	r2, [r3, #20]
 800bb94:	4b0a      	ldr	r3, [pc, #40]	; (800bbc0 <FLASH_Program_DoubleWord+0x3c>)
 800bb96:	2101      	movs	r1, #1
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bba2:	f3bf 8f6f 	isb	sy
}
 800bba6:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	001c      	movs	r4, r3
 800bbac:	2300      	movs	r3, #0
 800bbae:	001d      	movs	r5, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	0022      	movs	r2, r4
 800bbb6:	601a      	str	r2, [r3, #0]
}
 800bbb8:	46c0      	nop			; (mov r8, r8)
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	b004      	add	sp, #16
 800bbbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bbc0:	40022000 	.word	0x40022000

0800bbc4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800bbc4:	b5b0      	push	{r4, r5, r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bbce:	4b33      	ldr	r3, [pc, #204]	; (800bc9c <HAL_FLASHEx_Erase+0xd8>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d101      	bne.n	800bbda <HAL_FLASHEx_Erase+0x16>
 800bbd6:	2302      	movs	r3, #2
 800bbd8:	e05c      	b.n	800bc94 <HAL_FLASHEx_Erase+0xd0>
 800bbda:	4b30      	ldr	r3, [pc, #192]	; (800bc9c <HAL_FLASHEx_Erase+0xd8>)
 800bbdc:	2201      	movs	r2, #1
 800bbde:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bbe0:	4b2e      	ldr	r3, [pc, #184]	; (800bc9c <HAL_FLASHEx_Erase+0xd8>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bbe6:	250f      	movs	r5, #15
 800bbe8:	197c      	adds	r4, r7, r5
 800bbea:	23fa      	movs	r3, #250	; 0xfa
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	0018      	movs	r0, r3
 800bbf0:	f7ff ff7a 	bl	800bae8 <FLASH_WaitForLastOperation>
 800bbf4:	0003      	movs	r3, r0
 800bbf6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800bbf8:	002c      	movs	r4, r5
 800bbfa:	193b      	adds	r3, r7, r4
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d142      	bne.n	800bc88 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d10d      	bne.n	800bc26 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f000 f848 	bl	800bca4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bc14:	193c      	adds	r4, r7, r4
 800bc16:	23fa      	movs	r3, #250	; 0xfa
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	0018      	movs	r0, r3
 800bc1c:	f7ff ff64 	bl	800bae8 <FLASH_WaitForLastOperation>
 800bc20:	0003      	movs	r3, r0
 800bc22:	7023      	strb	r3, [r4, #0]
 800bc24:	e030      	b.n	800bc88 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2201      	movs	r2, #1
 800bc2a:	4252      	negs	r2, r2
 800bc2c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	60bb      	str	r3, [r7, #8]
 800bc34:	e01a      	b.n	800bc6c <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	0011      	movs	r1, r2
 800bc3e:	0018      	movs	r0, r3
 800bc40:	f000 f844 	bl	800bccc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800bc44:	250f      	movs	r5, #15
 800bc46:	197c      	adds	r4, r7, r5
 800bc48:	23fa      	movs	r3, #250	; 0xfa
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	f7ff ff4b 	bl	800bae8 <FLASH_WaitForLastOperation>
 800bc52:	0003      	movs	r3, r0
 800bc54:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800bc56:	197b      	adds	r3, r7, r5
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	601a      	str	r2, [r3, #0]
          break;
 800bc64:	e00a      	b.n	800bc7c <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	60bb      	str	r3, [r7, #8]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	18d3      	adds	r3, r2, r3
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d3dc      	bcc.n	800bc36 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bc7c:	4b08      	ldr	r3, [pc, #32]	; (800bca0 <HAL_FLASHEx_Erase+0xdc>)
 800bc7e:	695a      	ldr	r2, [r3, #20]
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <HAL_FLASHEx_Erase+0xdc>)
 800bc82:	2102      	movs	r1, #2
 800bc84:	438a      	bics	r2, r1
 800bc86:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bc88:	4b04      	ldr	r3, [pc, #16]	; (800bc9c <HAL_FLASHEx_Erase+0xd8>)
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800bc8e:	230f      	movs	r3, #15
 800bc90:	18fb      	adds	r3, r7, r3
 800bc92:	781b      	ldrb	r3, [r3, #0]
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b004      	add	sp, #16
 800bc9a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc9c:	20000578 	.word	0x20000578
 800bca0:	40022000 	.word	0x40022000

0800bca4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800bcac:	4b06      	ldr	r3, [pc, #24]	; (800bcc8 <FLASH_MassErase+0x24>)
 800bcae:	695a      	ldr	r2, [r3, #20]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	431a      	orrs	r2, r3
 800bcb4:	4b04      	ldr	r3, [pc, #16]	; (800bcc8 <FLASH_MassErase+0x24>)
 800bcb6:	2180      	movs	r1, #128	; 0x80
 800bcb8:	0249      	lsls	r1, r1, #9
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	615a      	str	r2, [r3, #20]
}
 800bcbe:	46c0      	nop			; (mov r8, r8)
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	b002      	add	sp, #8
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	46c0      	nop			; (mov r8, r8)
 800bcc8:	40022000 	.word	0x40022000

0800bccc <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800bcd6:	4b0f      	ldr	r3, [pc, #60]	; (800bd14 <FLASH_PageErase+0x48>)
 800bcd8:	695b      	ldr	r3, [r3, #20]
 800bcda:	4a0f      	ldr	r2, [pc, #60]	; (800bd18 <FLASH_PageErase+0x4c>)
 800bcdc:	4013      	ands	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d005      	beq.n	800bcf2 <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2280      	movs	r2, #128	; 0x80
 800bcea:	0192      	lsls	r2, r2, #6
 800bcec:	4313      	orrs	r3, r2
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e003      	b.n	800bcfa <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <FLASH_PageErase+0x50>)
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	00da      	lsls	r2, r3, #3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	431a      	orrs	r2, r3
 800bd02:	4b04      	ldr	r3, [pc, #16]	; (800bd14 <FLASH_PageErase+0x48>)
 800bd04:	4906      	ldr	r1, [pc, #24]	; (800bd20 <FLASH_PageErase+0x54>)
 800bd06:	430a      	orrs	r2, r1
 800bd08:	615a      	str	r2, [r3, #20]
}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	b004      	add	sp, #16
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	46c0      	nop			; (mov r8, r8)
 800bd14:	40022000 	.word	0x40022000
 800bd18:	ffffe007 	.word	0xffffe007
 800bd1c:	ffffdfff 	.word	0xffffdfff
 800bd20:	00010002 	.word	0x00010002

0800bd24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bd32:	e14d      	b.n	800bfd0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2101      	movs	r1, #1
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	4091      	lsls	r1, r2
 800bd3e:	000a      	movs	r2, r1
 800bd40:	4013      	ands	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d100      	bne.n	800bd4c <HAL_GPIO_Init+0x28>
 800bd4a:	e13e      	b.n	800bfca <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2203      	movs	r2, #3
 800bd52:	4013      	ands	r3, r2
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d005      	beq.n	800bd64 <HAL_GPIO_Init+0x40>
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	4013      	ands	r3, r2
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d130      	bne.n	800bdc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	2203      	movs	r2, #3
 800bd70:	409a      	lsls	r2, r3
 800bd72:	0013      	movs	r3, r2
 800bd74:	43da      	mvns	r2, r3
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	409a      	lsls	r2, r3
 800bd86:	0013      	movs	r3, r2
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	409a      	lsls	r2, r3
 800bda0:	0013      	movs	r3, r2
 800bda2:	43da      	mvns	r2, r3
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	4013      	ands	r3, r2
 800bda8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	091b      	lsrs	r3, r3, #4
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	401a      	ands	r2, r3
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	409a      	lsls	r2, r3
 800bdb8:	0013      	movs	r3, r2
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	2203      	movs	r2, #3
 800bdcc:	4013      	ands	r3, r2
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d017      	beq.n	800be02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	2203      	movs	r2, #3
 800bdde:	409a      	lsls	r2, r3
 800bde0:	0013      	movs	r3, r2
 800bde2:	43da      	mvns	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	4013      	ands	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	005b      	lsls	r3, r3, #1
 800bdf2:	409a      	lsls	r2, r3
 800bdf4:	0013      	movs	r3, r2
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	2203      	movs	r2, #3
 800be08:	4013      	ands	r3, r2
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d123      	bne.n	800be56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	08da      	lsrs	r2, r3, #3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3208      	adds	r2, #8
 800be16:	0092      	lsls	r2, r2, #2
 800be18:	58d3      	ldr	r3, [r2, r3]
 800be1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	2207      	movs	r2, #7
 800be20:	4013      	ands	r3, r2
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	220f      	movs	r2, #15
 800be26:	409a      	lsls	r2, r3
 800be28:	0013      	movs	r3, r2
 800be2a:	43da      	mvns	r2, r3
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	4013      	ands	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	691a      	ldr	r2, [r3, #16]
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2107      	movs	r1, #7
 800be3a:	400b      	ands	r3, r1
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	409a      	lsls	r2, r3
 800be40:	0013      	movs	r3, r2
 800be42:	693a      	ldr	r2, [r7, #16]
 800be44:	4313      	orrs	r3, r2
 800be46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	08da      	lsrs	r2, r3, #3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3208      	adds	r2, #8
 800be50:	0092      	lsls	r2, r2, #2
 800be52:	6939      	ldr	r1, [r7, #16]
 800be54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	2203      	movs	r2, #3
 800be62:	409a      	lsls	r2, r3
 800be64:	0013      	movs	r3, r2
 800be66:	43da      	mvns	r2, r3
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	4013      	ands	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	2203      	movs	r2, #3
 800be74:	401a      	ands	r2, r3
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	409a      	lsls	r2, r3
 800be7c:	0013      	movs	r3, r2
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	4313      	orrs	r3, r2
 800be82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	685a      	ldr	r2, [r3, #4]
 800be8e:	23c0      	movs	r3, #192	; 0xc0
 800be90:	029b      	lsls	r3, r3, #10
 800be92:	4013      	ands	r3, r2
 800be94:	d100      	bne.n	800be98 <HAL_GPIO_Init+0x174>
 800be96:	e098      	b.n	800bfca <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800be98:	4a53      	ldr	r2, [pc, #332]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	089b      	lsrs	r3, r3, #2
 800be9e:	3318      	adds	r3, #24
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	589b      	ldr	r3, [r3, r2]
 800bea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2203      	movs	r2, #3
 800beaa:	4013      	ands	r3, r2
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	220f      	movs	r2, #15
 800beb0:	409a      	lsls	r2, r3
 800beb2:	0013      	movs	r3, r2
 800beb4:	43da      	mvns	r2, r3
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	4013      	ands	r3, r2
 800beba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	23a0      	movs	r3, #160	; 0xa0
 800bec0:	05db      	lsls	r3, r3, #23
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d019      	beq.n	800befa <HAL_GPIO_Init+0x1d6>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a48      	ldr	r2, [pc, #288]	; (800bfec <HAL_GPIO_Init+0x2c8>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d013      	beq.n	800bef6 <HAL_GPIO_Init+0x1d2>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a47      	ldr	r2, [pc, #284]	; (800bff0 <HAL_GPIO_Init+0x2cc>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d00d      	beq.n	800bef2 <HAL_GPIO_Init+0x1ce>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a46      	ldr	r2, [pc, #280]	; (800bff4 <HAL_GPIO_Init+0x2d0>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d007      	beq.n	800beee <HAL_GPIO_Init+0x1ca>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a45      	ldr	r2, [pc, #276]	; (800bff8 <HAL_GPIO_Init+0x2d4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d101      	bne.n	800beea <HAL_GPIO_Init+0x1c6>
 800bee6:	2304      	movs	r3, #4
 800bee8:	e008      	b.n	800befc <HAL_GPIO_Init+0x1d8>
 800beea:	2305      	movs	r3, #5
 800beec:	e006      	b.n	800befc <HAL_GPIO_Init+0x1d8>
 800beee:	2303      	movs	r3, #3
 800bef0:	e004      	b.n	800befc <HAL_GPIO_Init+0x1d8>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e002      	b.n	800befc <HAL_GPIO_Init+0x1d8>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <HAL_GPIO_Init+0x1d8>
 800befa:	2300      	movs	r3, #0
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	2103      	movs	r1, #3
 800bf00:	400a      	ands	r2, r1
 800bf02:	00d2      	lsls	r2, r2, #3
 800bf04:	4093      	lsls	r3, r2
 800bf06:	693a      	ldr	r2, [r7, #16]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800bf0c:	4936      	ldr	r1, [pc, #216]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	089b      	lsrs	r3, r3, #2
 800bf12:	3318      	adds	r3, #24
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf1a:	4b33      	ldr	r3, [pc, #204]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	43da      	mvns	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	4013      	ands	r3, r2
 800bf28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	2380      	movs	r3, #128	; 0x80
 800bf30:	035b      	lsls	r3, r3, #13
 800bf32:	4013      	ands	r3, r2
 800bf34:	d003      	beq.n	800bf3e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf3e:	4b2a      	ldr	r3, [pc, #168]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800bf44:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	43da      	mvns	r2, r3
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	4013      	ands	r3, r2
 800bf52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	2380      	movs	r3, #128	; 0x80
 800bf5a:	039b      	lsls	r3, r3, #14
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	d003      	beq.n	800bf68 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bf68:	4b1f      	ldr	r3, [pc, #124]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800bf6e:	4a1e      	ldr	r2, [pc, #120]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf70:	2384      	movs	r3, #132	; 0x84
 800bf72:	58d3      	ldr	r3, [r2, r3]
 800bf74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	43da      	mvns	r2, r3
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	029b      	lsls	r3, r3, #10
 800bf88:	4013      	ands	r3, r2
 800bf8a:	d003      	beq.n	800bf94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bf94:	4914      	ldr	r1, [pc, #80]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf96:	2284      	movs	r2, #132	; 0x84
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800bf9c:	4a12      	ldr	r2, [pc, #72]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bf9e:	2380      	movs	r3, #128	; 0x80
 800bfa0:	58d3      	ldr	r3, [r2, r3]
 800bfa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	43da      	mvns	r2, r3
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	2380      	movs	r3, #128	; 0x80
 800bfb4:	025b      	lsls	r3, r3, #9
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	d003      	beq.n	800bfc2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bfc2:	4909      	ldr	r1, [pc, #36]	; (800bfe8 <HAL_GPIO_Init+0x2c4>)
 800bfc4:	2280      	movs	r2, #128	; 0x80
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	40da      	lsrs	r2, r3
 800bfd8:	1e13      	subs	r3, r2, #0
 800bfda:	d000      	beq.n	800bfde <HAL_GPIO_Init+0x2ba>
 800bfdc:	e6aa      	b.n	800bd34 <HAL_GPIO_Init+0x10>
  }
}
 800bfde:	46c0      	nop			; (mov r8, r8)
 800bfe0:	46c0      	nop			; (mov r8, r8)
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	b006      	add	sp, #24
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	40021800 	.word	0x40021800
 800bfec:	50000400 	.word	0x50000400
 800bff0:	50000800 	.word	0x50000800
 800bff4:	50000c00 	.word	0x50000c00
 800bff8:	50001000 	.word	0x50001000

0800bffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	0008      	movs	r0, r1
 800c006:	0011      	movs	r1, r2
 800c008:	1cbb      	adds	r3, r7, #2
 800c00a:	1c02      	adds	r2, r0, #0
 800c00c:	801a      	strh	r2, [r3, #0]
 800c00e:	1c7b      	adds	r3, r7, #1
 800c010:	1c0a      	adds	r2, r1, #0
 800c012:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c014:	1c7b      	adds	r3, r7, #1
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c01c:	1cbb      	adds	r3, r7, #2
 800c01e:	881a      	ldrh	r2, [r3, #0]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c024:	e003      	b.n	800c02e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c026:	1cbb      	adds	r3, r7, #2
 800c028:	881a      	ldrh	r2, [r3, #0]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c02e:	46c0      	nop			; (mov r8, r8)
 800c030:	46bd      	mov	sp, r7
 800c032:	b002      	add	sp, #8
 800c034:	bd80      	pop	{r7, pc}

0800c036 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	000a      	movs	r2, r1
 800c040:	1cbb      	adds	r3, r7, #2
 800c042:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c04a:	1cbb      	adds	r3, r7, #2
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	4013      	ands	r3, r2
 800c052:	041a      	lsls	r2, r3, #16
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	43db      	mvns	r3, r3
 800c058:	1cb9      	adds	r1, r7, #2
 800c05a:	8809      	ldrh	r1, [r1, #0]
 800c05c:	400b      	ands	r3, r1
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	619a      	str	r2, [r3, #24]
}
 800c064:	46c0      	nop			; (mov r8, r8)
 800c066:	46bd      	mov	sp, r7
 800c068:	b004      	add	sp, #16
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	0002      	movs	r2, r0
 800c074:	1dbb      	adds	r3, r7, #6
 800c076:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800c078:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	1dba      	adds	r2, r7, #6
 800c07e:	8812      	ldrh	r2, [r2, #0]
 800c080:	4013      	ands	r3, r2
 800c082:	d008      	beq.n	800c096 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800c084:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c086:	1dba      	adds	r2, r7, #6
 800c088:	8812      	ldrh	r2, [r2, #0]
 800c08a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800c08c:	1dbb      	adds	r3, r7, #6
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	0018      	movs	r0, r3
 800c092:	f000 f815 	bl	800c0c0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800c096:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c098:	691b      	ldr	r3, [r3, #16]
 800c09a:	1dba      	adds	r2, r7, #6
 800c09c:	8812      	ldrh	r2, [r2, #0]
 800c09e:	4013      	ands	r3, r2
 800c0a0:	d008      	beq.n	800c0b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800c0a4:	1dba      	adds	r2, r7, #6
 800c0a6:	8812      	ldrh	r2, [r2, #0]
 800c0a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800c0aa:	1dbb      	adds	r3, r7, #6
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	0018      	movs	r0, r3
 800c0b0:	f7fc fd30 	bl	8008b14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800c0b4:	46c0      	nop			; (mov r8, r8)
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	b002      	add	sp, #8
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	40021800 	.word	0x40021800

0800c0c0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	0002      	movs	r2, r0
 800c0c8:	1dbb      	adds	r3, r7, #6
 800c0ca:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800c0cc:	46c0      	nop			; (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b002      	add	sp, #8
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	000a      	movs	r2, r1
 800c0de:	1cbb      	adds	r3, r7, #2
 800c0e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c0e2:	230a      	movs	r3, #10
 800c0e4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c0e6:	e002      	b.n	800c0ee <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f9      	bne.n	800c0e8 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800c0f4:	1cbb      	adds	r3, r7, #2
 800c0f6:	881b      	ldrh	r3, [r3, #0]
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	4a06      	ldr	r2, [pc, #24]	; (800c114 <PCD_GET_EP_RX_CNT+0x40>)
 800c0fc:	4694      	mov	ip, r2
 800c0fe:	4463      	add	r3, ip
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	0c1b      	lsrs	r3, r3, #16
 800c104:	b29b      	uxth	r3, r3
 800c106:	059b      	lsls	r3, r3, #22
 800c108:	0d9b      	lsrs	r3, r3, #22
 800c10a:	b29b      	uxth	r3, r3
}
 800c10c:	0018      	movs	r0, r3
 800c10e:	46bd      	mov	sp, r7
 800c110:	b004      	add	sp, #16
 800c112:	bd80      	pop	{r7, pc}
 800c114:	40009800 	.word	0x40009800

0800c118 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	000a      	movs	r2, r1
 800c122:	1cbb      	adds	r3, r7, #2
 800c124:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c126:	230a      	movs	r3, #10
 800c128:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c12a:	e002      	b.n	800c132 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3b01      	subs	r3, #1
 800c130:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d1f9      	bne.n	800c12c <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800c138:	1cbb      	adds	r3, r7, #2
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	00db      	lsls	r3, r3, #3
 800c13e:	4a06      	ldr	r2, [pc, #24]	; (800c158 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800c140:	4694      	mov	ip, r2
 800c142:	4463      	add	r3, ip
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	b29b      	uxth	r3, r3
 800c14a:	059b      	lsls	r3, r3, #22
 800c14c:	0d9b      	lsrs	r3, r3, #22
 800c14e:	b29b      	uxth	r3, r3
}
 800c150:	0018      	movs	r0, r3
 800c152:	46bd      	mov	sp, r7
 800c154:	b004      	add	sp, #16
 800c156:	bd80      	pop	{r7, pc}
 800c158:	40009800 	.word	0x40009800

0800c15c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	000a      	movs	r2, r1
 800c166:	1cbb      	adds	r3, r7, #2
 800c168:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800c16a:	230a      	movs	r3, #10
 800c16c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800c16e:	e002      	b.n	800c176 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3b01      	subs	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1f9      	bne.n	800c170 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800c17c:	1cbb      	adds	r3, r7, #2
 800c17e:	881b      	ldrh	r3, [r3, #0]
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	4a06      	ldr	r2, [pc, #24]	; (800c19c <PCD_GET_EP_DBUF1_CNT+0x40>)
 800c184:	4694      	mov	ip, r2
 800c186:	4463      	add	r3, ip
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	059b      	lsls	r3, r3, #22
 800c190:	0d9b      	lsrs	r3, r3, #22
 800c192:	b29b      	uxth	r3, r3
}
 800c194:	0018      	movs	r0, r3
 800c196:	46bd      	mov	sp, r7
 800c198:	b004      	add	sp, #16
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	40009800 	.word	0x40009800

0800c1a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c1a0:	b590      	push	{r4, r7, lr}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af02      	add	r7, sp, #8
 800c1a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e0ea      	b.n	800c388 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a76      	ldr	r2, [pc, #472]	; (800c390 <HAL_PCD_Init+0x1f0>)
 800c1b6:	5c9b      	ldrb	r3, [r3, r2]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d108      	bne.n	800c1d0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	23a5      	movs	r3, #165	; 0xa5
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	0018      	movs	r0, r3
 800c1cc:	f011 fc6c 	bl	801daa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a6f      	ldr	r2, [pc, #444]	; (800c390 <HAL_PCD_Init+0x1f0>)
 800c1d4:	2103      	movs	r1, #3
 800c1d6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f004 fcb9 	bl	8010b54 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1e2:	230f      	movs	r3, #15
 800c1e4:	18fb      	adds	r3, r7, r3
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	701a      	strb	r2, [r3, #0]
 800c1ea:	e049      	b.n	800c280 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c1ec:	200f      	movs	r0, #15
 800c1ee:	183b      	adds	r3, r7, r0
 800c1f0:	781a      	ldrb	r2, [r3, #0]
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	0013      	movs	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	189b      	adds	r3, r3, r2
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	18cb      	adds	r3, r1, r3
 800c1fe:	3315      	adds	r3, #21
 800c200:	2201      	movs	r2, #1
 800c202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c204:	183b      	adds	r3, r7, r0
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	0013      	movs	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	00db      	lsls	r3, r3, #3
 800c212:	18cb      	adds	r3, r1, r3
 800c214:	3314      	adds	r3, #20
 800c216:	183a      	adds	r2, r7, r0
 800c218:	7812      	ldrb	r2, [r2, #0]
 800c21a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c21c:	183b      	adds	r3, r7, r0
 800c21e:	781a      	ldrb	r2, [r3, #0]
 800c220:	6879      	ldr	r1, [r7, #4]
 800c222:	0013      	movs	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	189b      	adds	r3, r3, r2
 800c228:	00db      	lsls	r3, r3, #3
 800c22a:	18cb      	adds	r3, r1, r3
 800c22c:	3317      	adds	r3, #23
 800c22e:	2200      	movs	r2, #0
 800c230:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c232:	183b      	adds	r3, r7, r0
 800c234:	781a      	ldrb	r2, [r3, #0]
 800c236:	6879      	ldr	r1, [r7, #4]
 800c238:	0013      	movs	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	189b      	adds	r3, r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	18cb      	adds	r3, r1, r3
 800c242:	3324      	adds	r3, #36	; 0x24
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c248:	183b      	adds	r3, r7, r0
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	6879      	ldr	r1, [r7, #4]
 800c24e:	0013      	movs	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	189b      	adds	r3, r3, r2
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	18cb      	adds	r3, r1, r3
 800c258:	3328      	adds	r3, #40	; 0x28
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c25e:	183b      	adds	r3, r7, r0
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	0013      	movs	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	189b      	adds	r3, r3, r2
 800c26c:	00db      	lsls	r3, r3, #3
 800c26e:	18cb      	adds	r3, r1, r3
 800c270:	3304      	adds	r3, #4
 800c272:	2200      	movs	r2, #0
 800c274:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c276:	183b      	adds	r3, r7, r0
 800c278:	781a      	ldrb	r2, [r3, #0]
 800c27a:	183b      	adds	r3, r7, r0
 800c27c:	3201      	adds	r2, #1
 800c27e:	701a      	strb	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	791b      	ldrb	r3, [r3, #4]
 800c284:	210f      	movs	r1, #15
 800c286:	187a      	adds	r2, r7, r1
 800c288:	7812      	ldrb	r2, [r2, #0]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d3ae      	bcc.n	800c1ec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c28e:	187b      	adds	r3, r7, r1
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]
 800c294:	e056      	b.n	800c344 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c296:	240f      	movs	r4, #15
 800c298:	193b      	adds	r3, r7, r4
 800c29a:	781a      	ldrb	r2, [r3, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	2356      	movs	r3, #86	; 0x56
 800c2a0:	33ff      	adds	r3, #255	; 0xff
 800c2a2:	0019      	movs	r1, r3
 800c2a4:	0013      	movs	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	189b      	adds	r3, r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	18c3      	adds	r3, r0, r3
 800c2ae:	185b      	adds	r3, r3, r1
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c2b4:	193b      	adds	r3, r7, r4
 800c2b6:	781a      	ldrb	r2, [r3, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	23aa      	movs	r3, #170	; 0xaa
 800c2bc:	0059      	lsls	r1, r3, #1
 800c2be:	0013      	movs	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	189b      	adds	r3, r3, r2
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	18c3      	adds	r3, r0, r3
 800c2c8:	185b      	adds	r3, r3, r1
 800c2ca:	193a      	adds	r2, r7, r4
 800c2cc:	7812      	ldrb	r2, [r2, #0]
 800c2ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c2d0:	193b      	adds	r3, r7, r4
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	2358      	movs	r3, #88	; 0x58
 800c2d8:	33ff      	adds	r3, #255	; 0xff
 800c2da:	0019      	movs	r1, r3
 800c2dc:	0013      	movs	r3, r2
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	189b      	adds	r3, r3, r2
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	18c3      	adds	r3, r0, r3
 800c2e6:	185b      	adds	r3, r3, r1
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c2ec:	193b      	adds	r3, r7, r4
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	23b2      	movs	r3, #178	; 0xb2
 800c2f4:	0059      	lsls	r1, r3, #1
 800c2f6:	0013      	movs	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	189b      	adds	r3, r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	18c3      	adds	r3, r0, r3
 800c300:	185b      	adds	r3, r3, r1
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c306:	193b      	adds	r3, r7, r4
 800c308:	781a      	ldrb	r2, [r3, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	23b4      	movs	r3, #180	; 0xb4
 800c30e:	0059      	lsls	r1, r3, #1
 800c310:	0013      	movs	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	189b      	adds	r3, r3, r2
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	18c3      	adds	r3, r0, r3
 800c31a:	185b      	adds	r3, r3, r1
 800c31c:	2200      	movs	r2, #0
 800c31e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c320:	193b      	adds	r3, r7, r4
 800c322:	781a      	ldrb	r2, [r3, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	23b6      	movs	r3, #182	; 0xb6
 800c328:	0059      	lsls	r1, r3, #1
 800c32a:	0013      	movs	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	189b      	adds	r3, r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	18c3      	adds	r3, r0, r3
 800c334:	185b      	adds	r3, r3, r1
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c33a:	193b      	adds	r3, r7, r4
 800c33c:	781a      	ldrb	r2, [r3, #0]
 800c33e:	193b      	adds	r3, r7, r4
 800c340:	3201      	adds	r2, #1
 800c342:	701a      	strb	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	791b      	ldrb	r3, [r3, #4]
 800c348:	220f      	movs	r2, #15
 800c34a:	18ba      	adds	r2, r7, r2
 800c34c:	7812      	ldrb	r2, [r2, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d3a1      	bcc.n	800c296 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	466a      	mov	r2, sp
 800c35a:	7c19      	ldrb	r1, [r3, #16]
 800c35c:	7011      	strb	r1, [r2, #0]
 800c35e:	6859      	ldr	r1, [r3, #4]
 800c360:	689a      	ldr	r2, [r3, #8]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f004 fc2f 	bl	8010bc6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a07      	ldr	r2, [pc, #28]	; (800c390 <HAL_PCD_Init+0x1f0>)
 800c372:	2101      	movs	r1, #1
 800c374:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7b1b      	ldrb	r3, [r3, #12]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d103      	bne.n	800c386 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	0018      	movs	r0, r3
 800c382:	f001 fbfb 	bl	800db7c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	0018      	movs	r0, r3
 800c38a:	46bd      	mov	sp, r7
 800c38c:	b005      	add	sp, #20
 800c38e:	bd90      	pop	{r4, r7, pc}
 800c390:	00000295 	.word	0x00000295

0800c394 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	23a5      	movs	r3, #165	; 0xa5
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	5cd3      	ldrb	r3, [r2, r3]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d101      	bne.n	800c3ac <HAL_PCD_Start+0x18>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e014      	b.n	800c3d6 <HAL_PCD_Start+0x42>
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	23a5      	movs	r3, #165	; 0xa5
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f004 fbb6 	bl	8010b2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	0018      	movs	r0, r3
 800c3c6:	f006 f9c0 	bl	801274a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	23a5      	movs	r3, #165	; 0xa5
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	b002      	add	sp, #8
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f006 f9bc 	bl	801276a <USB_ReadInterrupts>
 800c3f2:	0003      	movs	r3, r0
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800c3f6:	4a7c      	ldr	r2, [pc, #496]	; (800c5e8 <HAL_PCD_IRQHandler+0x208>)
 800c3f8:	23a0      	movs	r3, #160	; 0xa0
 800c3fa:	58d3      	ldr	r3, [r2, r3]
 800c3fc:	2204      	movs	r2, #4
 800c3fe:	4013      	ands	r3, r2
 800c400:	d100      	bne.n	800c404 <HAL_PCD_IRQHandler+0x24>
 800c402:	e0ed      	b.n	800c5e0 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800c404:	68fa      	ldr	r2, [r7, #12]
 800c406:	2380      	movs	r3, #128	; 0x80
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	4013      	ands	r3, r2
 800c40c:	d004      	beq.n	800c418 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	0018      	movs	r0, r3
 800c412:	f000 fb35 	bl	800ca80 <PCD_EP_ISR_Handler>

    return;
 800c416:	e0e4      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	2380      	movs	r3, #128	; 0x80
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	4013      	ands	r3, r2
 800c420:	d011      	beq.n	800c446 <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	496f      	ldr	r1, [pc, #444]	; (800c5ec <HAL_PCD_IRQHandler+0x20c>)
 800c42e:	400a      	ands	r2, r1
 800c430:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	0018      	movs	r0, r3
 800c436:	f011 fbfa 	bl	801dc2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2100      	movs	r1, #0
 800c43e:	0018      	movs	r0, r3
 800c440:	f000 f8e4 	bl	800c60c <HAL_PCD_SetAddress>

    return;
 800c444:	e0cd      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800c446:	68fa      	ldr	r2, [r7, #12]
 800c448:	2380      	movs	r3, #128	; 0x80
 800c44a:	01db      	lsls	r3, r3, #7
 800c44c:	4013      	ands	r3, r2
 800c44e:	d008      	beq.n	800c462 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4965      	ldr	r1, [pc, #404]	; (800c5f0 <HAL_PCD_IRQHandler+0x210>)
 800c45c:	400a      	ands	r2, r1
 800c45e:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c460:	e0bf      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	019b      	lsls	r3, r3, #6
 800c468:	4013      	ands	r3, r2
 800c46a:	d008      	beq.n	800c47e <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	495f      	ldr	r1, [pc, #380]	; (800c5f4 <HAL_PCD_IRQHandler+0x214>)
 800c478:	400a      	ands	r2, r1
 800c47a:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c47c:	e0b1      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	2380      	movs	r3, #128	; 0x80
 800c482:	015b      	lsls	r3, r3, #5
 800c484:	4013      	ands	r3, r2
 800c486:	d02c      	beq.n	800c4e2 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2104      	movs	r1, #4
 800c494:	438a      	bics	r2, r1
 800c496:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2108      	movs	r1, #8
 800c4a4:	438a      	bics	r2, r1
 800c4a6:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	23b3      	movs	r3, #179	; 0xb3
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	5cd3      	ldrb	r3, [r2, r3]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d109      	bne.n	800c4c8 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	23b3      	movs	r3, #179	; 0xb3
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f011 fe32 	bl	801e12c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	0018      	movs	r0, r3
 800c4cc:	f011 fbf0 	bl	801dcb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4947      	ldr	r1, [pc, #284]	; (800c5f8 <HAL_PCD_IRQHandler+0x218>)
 800c4dc:	400a      	ands	r2, r1
 800c4de:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c4e0:	e07f      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	011b      	lsls	r3, r3, #4
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	d01c      	beq.n	800c526 <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2108      	movs	r1, #8
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	493d      	ldr	r1, [pc, #244]	; (800c5fc <HAL_PCD_IRQHandler+0x21c>)
 800c508:	400a      	ands	r2, r1
 800c50a:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2104      	movs	r1, #4
 800c518:	430a      	orrs	r2, r1
 800c51a:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	0018      	movs	r0, r3
 800c520:	f011 fbaa 	bl	801dc78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c524:	e05d      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2280      	movs	r2, #128	; 0x80
 800c52a:	4013      	ands	r3, r2
 800c52c:	d038      	beq.n	800c5a0 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4931      	ldr	r1, [pc, #196]	; (800c600 <HAL_PCD_IRQHandler+0x220>)
 800c53a:	400a      	ands	r2, r1
 800c53c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	23b3      	movs	r3, #179	; 0xb3
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	5cd3      	ldrb	r3, [r2, r3]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d125      	bne.n	800c596 <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2104      	movs	r1, #4
 800c556:	430a      	orrs	r2, r1
 800c558:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2108      	movs	r1, #8
 800c566:	430a      	orrs	r2, r1
 800c568:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	23b3      	movs	r3, #179	; 0xb3
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	2101      	movs	r1, #1
 800c572:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c57a:	089b      	lsrs	r3, r3, #2
 800c57c:	223c      	movs	r2, #60	; 0x3c
 800c57e:	4013      	ands	r3, r2
 800c580:	0019      	movs	r1, r3
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	23b4      	movs	r3, #180	; 0xb4
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2101      	movs	r1, #1
 800c58e:	0018      	movs	r0, r3
 800c590:	f011 fdcc 	bl	801e12c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800c594:	e025      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	0018      	movs	r0, r3
 800c59a:	f011 fb6d 	bl	801dc78 <HAL_PCD_SuspendCallback>
    return;
 800c59e:	e020      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	2380      	movs	r3, #128	; 0x80
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	d00c      	beq.n	800c5c4 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4913      	ldr	r1, [pc, #76]	; (800c604 <HAL_PCD_IRQHandler+0x224>)
 800c5b6:	400a      	ands	r2, r1
 800c5b8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	0018      	movs	r0, r3
 800c5be:	f011 fb27 	bl	801dc10 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800c5c2:	e00e      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	2380      	movs	r3, #128	; 0x80
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	d009      	beq.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	490b      	ldr	r1, [pc, #44]	; (800c608 <HAL_PCD_IRQHandler+0x228>)
 800c5da:	400a      	ands	r2, r1
 800c5dc:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800c5de:	e000      	b.n	800c5e2 <HAL_PCD_IRQHandler+0x202>
    return;
 800c5e0:	46c0      	nop			; (mov r8, r8)
  }
}
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	b004      	add	sp, #16
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	40010000 	.word	0x40010000
 800c5ec:	0000fbff 	.word	0x0000fbff
 800c5f0:	0000bfff 	.word	0x0000bfff
 800c5f4:	0000dfff 	.word	0x0000dfff
 800c5f8:	0000efff 	.word	0x0000efff
 800c5fc:	0000f7ff 	.word	0x0000f7ff
 800c600:	0000ff7f 	.word	0x0000ff7f
 800c604:	0000fdff 	.word	0x0000fdff
 800c608:	0000feff 	.word	0x0000feff

0800c60c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	000a      	movs	r2, r1
 800c616:	1cfb      	adds	r3, r7, #3
 800c618:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	23a5      	movs	r3, #165	; 0xa5
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	5cd3      	ldrb	r3, [r2, r3]
 800c622:	2b01      	cmp	r3, #1
 800c624:	d101      	bne.n	800c62a <HAL_PCD_SetAddress+0x1e>
 800c626:	2302      	movs	r3, #2
 800c628:	e016      	b.n	800c658 <HAL_PCD_SetAddress+0x4c>
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	23a5      	movs	r3, #165	; 0xa5
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	2101      	movs	r1, #1
 800c632:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1cfa      	adds	r2, r7, #3
 800c638:	7812      	ldrb	r2, [r2, #0]
 800c63a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	1cfb      	adds	r3, r7, #3
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	0019      	movs	r1, r3
 800c646:	0010      	movs	r0, r2
 800c648:	f006 f86c 	bl	8012724 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	23a5      	movs	r3, #165	; 0xa5
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	2100      	movs	r1, #0
 800c654:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	0018      	movs	r0, r3
 800c65a:	46bd      	mov	sp, r7
 800c65c:	b002      	add	sp, #8
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c660:	b590      	push	{r4, r7, lr}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	000c      	movs	r4, r1
 800c66a:	0010      	movs	r0, r2
 800c66c:	0019      	movs	r1, r3
 800c66e:	1cfb      	adds	r3, r7, #3
 800c670:	1c22      	adds	r2, r4, #0
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	003b      	movs	r3, r7
 800c676:	1c02      	adds	r2, r0, #0
 800c678:	801a      	strh	r2, [r3, #0]
 800c67a:	1cbb      	adds	r3, r7, #2
 800c67c:	1c0a      	adds	r2, r1, #0
 800c67e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c680:	230b      	movs	r3, #11
 800c682:	18fb      	adds	r3, r7, r3
 800c684:	2200      	movs	r2, #0
 800c686:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c688:	1cfb      	adds	r3, r7, #3
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	b25b      	sxtb	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da10      	bge.n	800c6b4 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c692:	1cfb      	adds	r3, r7, #3
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	2207      	movs	r2, #7
 800c698:	401a      	ands	r2, r3
 800c69a:	0013      	movs	r3, r2
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	189b      	adds	r3, r3, r2
 800c6a0:	00db      	lsls	r3, r3, #3
 800c6a2:	3310      	adds	r3, #16
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	18d3      	adds	r3, r2, r3
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	705a      	strb	r2, [r3, #1]
 800c6b2:	e010      	b.n	800c6d6 <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c6b4:	1cfb      	adds	r3, r7, #3
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	2207      	movs	r2, #7
 800c6ba:	401a      	ands	r2, r3
 800c6bc:	0013      	movs	r3, r2
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	189b      	adds	r3, r3, r2
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	3351      	adds	r3, #81	; 0x51
 800c6c6:	33ff      	adds	r3, #255	; 0xff
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	18d3      	adds	r3, r2, r3
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c6d6:	1cfb      	adds	r3, r7, #3
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2207      	movs	r2, #7
 800c6dc:	4013      	ands	r3, r2
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c6e4:	003b      	movs	r3, r7
 800c6e6:	881a      	ldrh	r2, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	1cba      	adds	r2, r7, #2
 800c6f0:	7812      	ldrb	r2, [r2, #0]
 800c6f2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c6f4:	1cbb      	adds	r3, r7, #2
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d102      	bne.n	800c702 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2200      	movs	r2, #0
 800c700:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	23a5      	movs	r3, #165	; 0xa5
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	5cd3      	ldrb	r3, [r2, r3]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d101      	bne.n	800c712 <HAL_PCD_EP_Open+0xb2>
 800c70e:	2302      	movs	r3, #2
 800c710:	e013      	b.n	800c73a <HAL_PCD_EP_Open+0xda>
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	23a5      	movs	r3, #165	; 0xa5
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	2101      	movs	r1, #1
 800c71a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	0011      	movs	r1, r2
 800c724:	0018      	movs	r0, r3
 800c726:	f004 fa79 	bl	8010c1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	23a5      	movs	r3, #165	; 0xa5
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	2100      	movs	r1, #0
 800c732:	54d1      	strb	r1, [r2, r3]

  return ret;
 800c734:	230b      	movs	r3, #11
 800c736:	18fb      	adds	r3, r7, r3
 800c738:	781b      	ldrb	r3, [r3, #0]
}
 800c73a:	0018      	movs	r0, r3
 800c73c:	46bd      	mov	sp, r7
 800c73e:	b005      	add	sp, #20
 800c740:	bd90      	pop	{r4, r7, pc}

0800c742 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b084      	sub	sp, #16
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	000a      	movs	r2, r1
 800c74c:	1cfb      	adds	r3, r7, #3
 800c74e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c750:	1cfb      	adds	r3, r7, #3
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	b25b      	sxtb	r3, r3
 800c756:	2b00      	cmp	r3, #0
 800c758:	da10      	bge.n	800c77c <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c75a:	1cfb      	adds	r3, r7, #3
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2207      	movs	r2, #7
 800c760:	401a      	ands	r2, r3
 800c762:	0013      	movs	r3, r2
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	189b      	adds	r3, r3, r2
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	3310      	adds	r3, #16
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	3304      	adds	r3, #4
 800c772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2201      	movs	r2, #1
 800c778:	705a      	strb	r2, [r3, #1]
 800c77a:	e010      	b.n	800c79e <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c77c:	1cfb      	adds	r3, r7, #3
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2207      	movs	r2, #7
 800c782:	401a      	ands	r2, r3
 800c784:	0013      	movs	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	189b      	adds	r3, r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	3351      	adds	r3, #81	; 0x51
 800c78e:	33ff      	adds	r3, #255	; 0xff
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	18d3      	adds	r3, r2, r3
 800c794:	3304      	adds	r3, #4
 800c796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c79e:	1cfb      	adds	r3, r7, #3
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	2207      	movs	r2, #7
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	23a5      	movs	r3, #165	; 0xa5
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	5cd3      	ldrb	r3, [r2, r3]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <HAL_PCD_EP_Close+0x7a>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e011      	b.n	800c7e0 <HAL_PCD_EP_Close+0x9e>
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	23a5      	movs	r3, #165	; 0xa5
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	0011      	movs	r1, r2
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	f004 fd58 	bl	8011284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	23a5      	movs	r3, #165	; 0xa5
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	2100      	movs	r1, #0
 800c7dc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	b004      	add	sp, #16
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	607a      	str	r2, [r7, #4]
 800c7f2:	603b      	str	r3, [r7, #0]
 800c7f4:	200b      	movs	r0, #11
 800c7f6:	183b      	adds	r3, r7, r0
 800c7f8:	1c0a      	adds	r2, r1, #0
 800c7fa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c7fc:	0001      	movs	r1, r0
 800c7fe:	187b      	adds	r3, r7, r1
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	2207      	movs	r2, #7
 800c804:	401a      	ands	r2, r3
 800c806:	0013      	movs	r3, r2
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	189b      	adds	r3, r3, r2
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	3351      	adds	r3, #81	; 0x51
 800c810:	33ff      	adds	r3, #255	; 0xff
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	18d3      	adds	r3, r2, r3
 800c816:	3304      	adds	r3, #4
 800c818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2200      	movs	r2, #0
 800c82a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2200      	movs	r2, #0
 800c830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c832:	187b      	adds	r3, r7, r1
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	2207      	movs	r2, #7
 800c838:	4013      	ands	r3, r2
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	0011      	movs	r1, r2
 800c848:	0018      	movs	r0, r3
 800c84a:	f004 fe81 	bl	8011550 <USB_EPStartXfer>

  return HAL_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	0018      	movs	r0, r3
 800c852:	46bd      	mov	sp, r7
 800c854:	b006      	add	sp, #24
 800c856:	bd80      	pop	{r7, pc}

0800c858 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	000a      	movs	r2, r1
 800c862:	1cfb      	adds	r3, r7, #3
 800c864:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c866:	1cfb      	adds	r3, r7, #3
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	2207      	movs	r2, #7
 800c86c:	401a      	ands	r2, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	23b8      	movs	r3, #184	; 0xb8
 800c872:	0059      	lsls	r1, r3, #1
 800c874:	0013      	movs	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	189b      	adds	r3, r3, r2
 800c87a:	00db      	lsls	r3, r3, #3
 800c87c:	18c3      	adds	r3, r0, r3
 800c87e:	185b      	adds	r3, r3, r1
 800c880:	681b      	ldr	r3, [r3, #0]
}
 800c882:	0018      	movs	r0, r3
 800c884:	46bd      	mov	sp, r7
 800c886:	b002      	add	sp, #8
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b086      	sub	sp, #24
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	603b      	str	r3, [r7, #0]
 800c896:	200b      	movs	r0, #11
 800c898:	183b      	adds	r3, r7, r0
 800c89a:	1c0a      	adds	r2, r1, #0
 800c89c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c89e:	183b      	adds	r3, r7, r0
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	2207      	movs	r2, #7
 800c8a4:	401a      	ands	r2, r3
 800c8a6:	0013      	movs	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	189b      	adds	r3, r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	3310      	adds	r3, #16
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	18d3      	adds	r3, r2, r3
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2224      	movs	r2, #36	; 0x24
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c8de:	183b      	adds	r3, r7, r0
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2207      	movs	r2, #7
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	0011      	movs	r1, r2
 800c8f4:	0018      	movs	r0, r3
 800c8f6:	f004 fe2b 	bl	8011550 <USB_EPStartXfer>

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	46bd      	mov	sp, r7
 800c900:	b006      	add	sp, #24
 800c902:	bd80      	pop	{r7, pc}

0800c904 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	000a      	movs	r2, r1
 800c90e:	1cfb      	adds	r3, r7, #3
 800c910:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c912:	1cfb      	adds	r3, r7, #3
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2207      	movs	r2, #7
 800c918:	4013      	ands	r3, r2
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	7912      	ldrb	r2, [r2, #4]
 800c91e:	4293      	cmp	r3, r2
 800c920:	d901      	bls.n	800c926 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	e048      	b.n	800c9b8 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c926:	1cfb      	adds	r3, r7, #3
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b25b      	sxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da10      	bge.n	800c952 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c930:	1cfb      	adds	r3, r7, #3
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2207      	movs	r2, #7
 800c936:	401a      	ands	r2, r3
 800c938:	0013      	movs	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	189b      	adds	r3, r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	3310      	adds	r3, #16
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	18d3      	adds	r3, r2, r3
 800c946:	3304      	adds	r3, #4
 800c948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2201      	movs	r2, #1
 800c94e:	705a      	strb	r2, [r3, #1]
 800c950:	e00e      	b.n	800c970 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c952:	1cfb      	adds	r3, r7, #3
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	0013      	movs	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	189b      	adds	r3, r3, r2
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	3351      	adds	r3, #81	; 0x51
 800c960:	33ff      	adds	r3, #255	; 0xff
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	18d3      	adds	r3, r2, r3
 800c966:	3304      	adds	r3, #4
 800c968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c976:	1cfb      	adds	r3, r7, #3
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2207      	movs	r2, #7
 800c97c:	4013      	ands	r3, r2
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	23a5      	movs	r3, #165	; 0xa5
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	5cd3      	ldrb	r3, [r2, r3]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d101      	bne.n	800c994 <HAL_PCD_EP_SetStall+0x90>
 800c990:	2302      	movs	r3, #2
 800c992:	e011      	b.n	800c9b8 <HAL_PCD_EP_SetStall+0xb4>
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	23a5      	movs	r3, #165	; 0xa5
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	2101      	movs	r1, #1
 800c99c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	0011      	movs	r1, r2
 800c9a6:	0018      	movs	r0, r3
 800c9a8:	f005 fde8 	bl	801257c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	23a5      	movs	r3, #165	; 0xa5
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	b004      	add	sp, #16
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	000a      	movs	r2, r1
 800c9ca:	1cfb      	adds	r3, r7, #3
 800c9cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c9ce:	1cfb      	adds	r3, r7, #3
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	220f      	movs	r2, #15
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	7912      	ldrb	r2, [r2, #4]
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d901      	bls.n	800c9e2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e04a      	b.n	800ca78 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c9e2:	1cfb      	adds	r3, r7, #3
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	b25b      	sxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	da10      	bge.n	800ca0e <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c9ec:	1cfb      	adds	r3, r7, #3
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2207      	movs	r2, #7
 800c9f2:	401a      	ands	r2, r3
 800c9f4:	0013      	movs	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	189b      	adds	r3, r3, r2
 800c9fa:	00db      	lsls	r3, r3, #3
 800c9fc:	3310      	adds	r3, #16
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	18d3      	adds	r3, r2, r3
 800ca02:	3304      	adds	r3, #4
 800ca04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	705a      	strb	r2, [r3, #1]
 800ca0c:	e010      	b.n	800ca30 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ca0e:	1cfb      	adds	r3, r7, #3
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2207      	movs	r2, #7
 800ca14:	401a      	ands	r2, r3
 800ca16:	0013      	movs	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	189b      	adds	r3, r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	3351      	adds	r3, #81	; 0x51
 800ca20:	33ff      	adds	r3, #255	; 0xff
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	18d3      	adds	r3, r2, r3
 800ca26:	3304      	adds	r3, #4
 800ca28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca36:	1cfb      	adds	r3, r7, #3
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2207      	movs	r2, #7
 800ca3c:	4013      	ands	r3, r2
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	23a5      	movs	r3, #165	; 0xa5
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	5cd3      	ldrb	r3, [r2, r3]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d101      	bne.n	800ca54 <HAL_PCD_EP_ClrStall+0x94>
 800ca50:	2302      	movs	r3, #2
 800ca52:	e011      	b.n	800ca78 <HAL_PCD_EP_ClrStall+0xb8>
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	23a5      	movs	r3, #165	; 0xa5
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	68fa      	ldr	r2, [r7, #12]
 800ca64:	0011      	movs	r1, r2
 800ca66:	0018      	movs	r0, r3
 800ca68:	f005 fdca 	bl	8012600 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	23a5      	movs	r3, #165	; 0xa5
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	2100      	movs	r1, #0
 800ca74:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	0018      	movs	r0, r3
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	b004      	add	sp, #16
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ca80:	b5b0      	push	{r4, r5, r7, lr}
 800ca82:	b08e      	sub	sp, #56	; 0x38
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ca88:	e362      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca90:	2022      	movs	r0, #34	; 0x22
 800ca92:	183b      	adds	r3, r7, r0
 800ca94:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800ca96:	183b      	adds	r3, r7, r0
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	2421      	movs	r4, #33	; 0x21
 800ca9e:	193b      	adds	r3, r7, r4
 800caa0:	210f      	movs	r1, #15
 800caa2:	400a      	ands	r2, r1
 800caa4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800caa6:	193b      	adds	r3, r7, r4
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d000      	beq.n	800cab0 <PCD_EP_ISR_Handler+0x30>
 800caae:	e12d      	b.n	800cd0c <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800cab0:	183b      	adds	r3, r7, r0
 800cab2:	881b      	ldrh	r3, [r3, #0]
 800cab4:	2210      	movs	r2, #16
 800cab6:	4013      	ands	r3, r2
 800cab8:	d140      	bne.n	800cb3c <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4ac6      	ldr	r2, [pc, #792]	; (800cddc <PCD_EP_ISR_Handler+0x35c>)
 800cac2:	4013      	ands	r3, r2
 800cac4:	60bb      	str	r3, [r7, #8]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	2180      	movs	r1, #128	; 0x80
 800cace:	0209      	lsls	r1, r1, #8
 800cad0:	430a      	orrs	r2, r1
 800cad2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3314      	adds	r3, #20
 800cad8:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	4abf      	ldr	r2, [pc, #764]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800cae2:	4694      	mov	ip, r2
 800cae4:	4463      	add	r3, ip
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	0c1b      	lsrs	r3, r3, #16
 800caea:	059b      	lsls	r3, r3, #22
 800caec:	0d9a      	lsrs	r2, r3, #22
 800caee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	695a      	ldr	r2, [r3, #20]
 800caf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	18d2      	adds	r2, r2, r3
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2100      	movs	r1, #0
 800cb04:	0018      	movs	r0, r3
 800cb06:	f011 f865 	bl	801dbd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7c5b      	ldrb	r3, [r3, #17]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d100      	bne.n	800cb16 <PCD_EP_ISR_Handler+0x96>
 800cb14:	e31c      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
 800cb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d000      	beq.n	800cb20 <PCD_EP_ISR_Handler+0xa0>
 800cb1e:	e317      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7c5b      	ldrb	r3, [r3, #17]
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	2280      	movs	r2, #128	; 0x80
 800cb28:	4252      	negs	r2, r2
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	745a      	strb	r2, [r3, #17]
 800cb3a:	e309      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3355      	adds	r3, #85	; 0x55
 800cb40:	33ff      	adds	r3, #255	; 0xff
 800cb42:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	2132      	movs	r1, #50	; 0x32
 800cb4c:	187b      	adds	r3, r7, r1
 800cb4e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800cb50:	187b      	adds	r3, r7, r1
 800cb52:	881a      	ldrh	r2, [r3, #0]
 800cb54:	2380      	movs	r3, #128	; 0x80
 800cb56:	011b      	lsls	r3, r3, #4
 800cb58:	4013      	ands	r3, r2
 800cb5a:	d02a      	beq.n	800cbb2 <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681a      	ldr	r2, [r3, #0]
 800cb60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	0019      	movs	r1, r3
 800cb68:	0010      	movs	r0, r2
 800cb6a:	f7ff fab3 	bl	800c0d4 <PCD_GET_EP_RX_CNT>
 800cb6e:	0003      	movs	r3, r0
 800cb70:	001a      	movs	r2, r3
 800cb72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6818      	ldr	r0, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	22a7      	movs	r2, #167	; 0xa7
 800cb7e:	0092      	lsls	r2, r2, #2
 800cb80:	1899      	adds	r1, r3, r2
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800cb86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	f005 fe70 	bl	8012870 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a93      	ldr	r2, [pc, #588]	; (800cde4 <PCD_EP_ISR_Handler+0x364>)
 800cb98:	4013      	ands	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	2180      	movs	r1, #128	; 0x80
 800cba4:	430a      	orrs	r2, r1
 800cba6:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	0018      	movs	r0, r3
 800cbac:	f010 ffdc 	bl	801db68 <HAL_PCD_SetupStageCallback>
 800cbb0:	e2ce      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800cbb2:	2332      	movs	r3, #50	; 0x32
 800cbb4:	18fb      	adds	r3, r7, r3
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	5e9b      	ldrsh	r3, [r3, r2]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	db00      	blt.n	800cbc0 <PCD_EP_ISR_Handler+0x140>
 800cbbe:	e2c7      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a87      	ldr	r2, [pc, #540]	; (800cde4 <PCD_EP_ISR_Handler+0x364>)
 800cbc8:	4013      	ands	r3, r2
 800cbca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd2:	2180      	movs	r1, #128	; 0x80
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	0019      	movs	r1, r3
 800cbe4:	0010      	movs	r0, r2
 800cbe6:	f7ff fa75 	bl	800c0d4 <PCD_GET_EP_RX_CNT>
 800cbea:	0003      	movs	r3, r0
 800cbec:	001a      	movs	r2, r3
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800cbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01a      	beq.n	800cc30 <PCD_EP_ISR_Handler+0x1b0>
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d016      	beq.n	800cc30 <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	6959      	ldr	r1, [r3, #20]
 800cc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc10:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	f005 fe2c 	bl	8012870 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800cc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1a:	695a      	ldr	r2, [r3, #20]
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	18d2      	adds	r2, r2, r3
 800cc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc24:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2100      	movs	r1, #0
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f010 ffb1 	bl	801db92 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	2132      	movs	r1, #50	; 0x32
 800cc38:	187b      	adds	r3, r7, r1
 800cc3a:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800cc3c:	187b      	adds	r3, r7, r1
 800cc3e:	881a      	ldrh	r2, [r3, #0]
 800cc40:	2380      	movs	r3, #128	; 0x80
 800cc42:	011b      	lsls	r3, r3, #4
 800cc44:	4013      	ands	r3, r2
 800cc46:	d000      	beq.n	800cc4a <PCD_EP_ISR_Handler+0x1ca>
 800cc48:	e282      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
 800cc4a:	187b      	adds	r3, r7, r1
 800cc4c:	881a      	ldrh	r2, [r3, #0]
 800cc4e:	23c0      	movs	r3, #192	; 0xc0
 800cc50:	019b      	lsls	r3, r3, #6
 800cc52:	401a      	ands	r2, r3
 800cc54:	23c0      	movs	r3, #192	; 0xc0
 800cc56:	019b      	lsls	r3, r3, #6
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d100      	bne.n	800cc5e <PCD_EP_ISR_Handler+0x1de>
 800cc5c:	e278      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800cc5e:	4b60      	ldr	r3, [pc, #384]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	4b5f      	ldr	r3, [pc, #380]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800cc64:	0192      	lsls	r2, r2, #6
 800cc66:	0992      	lsrs	r2, r2, #6
 800cc68:	605a      	str	r2, [r3, #4]
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	2b3e      	cmp	r3, #62	; 0x3e
 800cc70:	d916      	bls.n	800cca0 <PCD_EP_ISR_Handler+0x220>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	095b      	lsrs	r3, r3, #5
 800cc78:	617b      	str	r3, [r7, #20]
 800cc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7c:	691b      	ldr	r3, [r3, #16]
 800cc7e:	221f      	movs	r2, #31
 800cc80:	4013      	ands	r3, r2
 800cc82:	d102      	bne.n	800cc8a <PCD_EP_ISR_Handler+0x20a>
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	617b      	str	r3, [r7, #20]
 800cc8a:	4b55      	ldr	r3, [pc, #340]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	069b      	lsls	r3, r3, #26
 800cc92:	431a      	orrs	r2, r3
 800cc94:	4b52      	ldr	r3, [pc, #328]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800cc96:	2180      	movs	r1, #128	; 0x80
 800cc98:	0609      	lsls	r1, r1, #24
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	605a      	str	r2, [r3, #4]
 800cc9e:	e01e      	b.n	800ccde <PCD_EP_ISR_Handler+0x25e>
 800cca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d107      	bne.n	800ccb8 <PCD_EP_ISR_Handler+0x238>
 800cca8:	4b4d      	ldr	r3, [pc, #308]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	4b4c      	ldr	r3, [pc, #304]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800ccae:	2180      	movs	r1, #128	; 0x80
 800ccb0:	0609      	lsls	r1, r1, #24
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	605a      	str	r2, [r3, #4]
 800ccb6:	e012      	b.n	800ccde <PCD_EP_ISR_Handler+0x25e>
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	085b      	lsrs	r3, r3, #1
 800ccbe:	617b      	str	r3, [r7, #20]
 800ccc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d002      	beq.n	800ccd0 <PCD_EP_ISR_Handler+0x250>
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	3301      	adds	r3, #1
 800ccce:	617b      	str	r3, [r7, #20]
 800ccd0:	4b43      	ldr	r3, [pc, #268]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800ccd2:	6859      	ldr	r1, [r3, #4]
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	069a      	lsls	r2, r3, #26
 800ccd8:	4b41      	ldr	r3, [pc, #260]	; (800cde0 <PCD_EP_ISR_Handler+0x360>)
 800ccda:	430a      	orrs	r2, r1
 800ccdc:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a40      	ldr	r2, [pc, #256]	; (800cde8 <PCD_EP_ISR_Handler+0x368>)
 800cce6:	4013      	ands	r3, r2
 800cce8:	613b      	str	r3, [r7, #16]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2280      	movs	r2, #128	; 0x80
 800ccee:	0152      	lsls	r2, r2, #5
 800ccf0:	4053      	eors	r3, r2
 800ccf2:	613b      	str	r3, [r7, #16]
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	2280      	movs	r2, #128	; 0x80
 800ccf8:	0192      	lsls	r2, r2, #6
 800ccfa:	4053      	eors	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	4939      	ldr	r1, [pc, #228]	; (800cdec <PCD_EP_ISR_Handler+0x36c>)
 800cd06:	430a      	orrs	r2, r1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	e221      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	001a      	movs	r2, r3
 800cd12:	2121      	movs	r1, #33	; 0x21
 800cd14:	187b      	adds	r3, r7, r1
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	18d3      	adds	r3, r2, r3
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	2032      	movs	r0, #50	; 0x32
 800cd20:	183b      	adds	r3, r7, r0
 800cd22:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 800cd24:	183b      	adds	r3, r7, r0
 800cd26:	2200      	movs	r2, #0
 800cd28:	5e9b      	ldrsh	r3, [r3, r2]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	db00      	blt.n	800cd30 <PCD_EP_ISR_Handler+0x2b0>
 800cd2e:	e0e2      	b.n	800cef6 <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	001a      	movs	r2, r3
 800cd36:	187b      	adds	r3, r7, r1
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	18d3      	adds	r3, r2, r3
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a28      	ldr	r2, [pc, #160]	; (800cde4 <PCD_EP_ISR_Handler+0x364>)
 800cd42:	4013      	ands	r3, r2
 800cd44:	61fb      	str	r3, [r7, #28]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	001a      	movs	r2, r3
 800cd4c:	0008      	movs	r0, r1
 800cd4e:	187b      	adds	r3, r7, r1
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	18d3      	adds	r3, r2, r3
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	2180      	movs	r1, #128	; 0x80
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800cd5e:	183b      	adds	r3, r7, r0
 800cd60:	781a      	ldrb	r2, [r3, #0]
 800cd62:	0013      	movs	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	189b      	adds	r3, r3, r2
 800cd68:	00db      	lsls	r3, r3, #3
 800cd6a:	3351      	adds	r3, #81	; 0x51
 800cd6c:	33ff      	adds	r3, #255	; 0xff
 800cd6e:	687a      	ldr	r2, [r7, #4]
 800cd70:	18d3      	adds	r3, r2, r3
 800cd72:	3304      	adds	r3, #4
 800cd74:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800cd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd78:	7b1b      	ldrb	r3, [r3, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d11d      	bne.n	800cdba <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	2524      	movs	r5, #36	; 0x24
 800cd8a:	197c      	adds	r4, r7, r5
 800cd8c:	0019      	movs	r1, r3
 800cd8e:	0010      	movs	r0, r2
 800cd90:	f7ff f9a0 	bl	800c0d4 <PCD_GET_EP_RX_CNT>
 800cd94:	0003      	movs	r3, r0
 800cd96:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800cd98:	002c      	movs	r4, r5
 800cd9a:	193b      	adds	r3, r7, r4
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d100      	bne.n	800cda4 <PCD_EP_ISR_Handler+0x324>
 800cda2:	e080      	b.n	800cea6 <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6818      	ldr	r0, [r3, #0]
 800cda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdaa:	6959      	ldr	r1, [r3, #20]
 800cdac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdae:	88da      	ldrh	r2, [r3, #6]
 800cdb0:	193b      	adds	r3, r7, r4
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	f005 fd5c 	bl	8012870 <USB_ReadPMA>
 800cdb8:	e075      	b.n	800cea6 <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	78db      	ldrb	r3, [r3, #3]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d116      	bne.n	800cdf0 <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800cdc2:	2324      	movs	r3, #36	; 0x24
 800cdc4:	18fc      	adds	r4, r7, r3
 800cdc6:	2332      	movs	r3, #50	; 0x32
 800cdc8:	18fb      	adds	r3, r7, r3
 800cdca:	881a      	ldrh	r2, [r3, #0]
 800cdcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	0018      	movs	r0, r3
 800cdd2:	f000 f9cb 	bl	800d16c <HAL_PCD_EP_DB_Receive>
 800cdd6:	0003      	movs	r3, r0
 800cdd8:	8023      	strh	r3, [r4, #0]
 800cdda:	e064      	b.n	800cea6 <PCD_EP_ISR_Handler+0x426>
 800cddc:	07ff8f0f 	.word	0x07ff8f0f
 800cde0:	40009800 	.word	0x40009800
 800cde4:	07ff0f8f 	.word	0x07ff0f8f
 800cde8:	07ffbf8f 	.word	0x07ffbf8f
 800cdec:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	001a      	movs	r2, r3
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	18d3      	adds	r3, r2, r3
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4acb      	ldr	r2, [pc, #812]	; (800d130 <PCD_EP_ISR_Handler+0x6b0>)
 800ce02:	4013      	ands	r3, r2
 800ce04:	61bb      	str	r3, [r7, #24]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	001a      	movs	r2, r3
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	18d3      	adds	r3, r2, r3
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	49c7      	ldr	r1, [pc, #796]	; (800d134 <PCD_EP_ISR_Handler+0x6b4>)
 800ce18:	430a      	orrs	r2, r1
 800ce1a:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	001a      	movs	r2, r3
 800ce22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	18d3      	adds	r3, r2, r3
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	2380      	movs	r3, #128	; 0x80
 800ce2e:	01db      	lsls	r3, r3, #7
 800ce30:	4013      	ands	r3, r2
 800ce32:	d01c      	beq.n	800ce6e <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	2524      	movs	r5, #36	; 0x24
 800ce40:	197c      	adds	r4, r7, r5
 800ce42:	0019      	movs	r1, r3
 800ce44:	0010      	movs	r0, r2
 800ce46:	f7ff f967 	bl	800c118 <PCD_GET_EP_DBUF0_CNT>
 800ce4a:	0003      	movs	r3, r0
 800ce4c:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800ce4e:	002c      	movs	r4, r5
 800ce50:	193b      	adds	r3, r7, r4
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d026      	beq.n	800cea6 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5e:	6959      	ldr	r1, [r3, #20]
 800ce60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce62:	891a      	ldrh	r2, [r3, #8]
 800ce64:	193b      	adds	r3, r7, r4
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	f005 fd02 	bl	8012870 <USB_ReadPMA>
 800ce6c:	e01b      	b.n	800cea6 <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	2524      	movs	r5, #36	; 0x24
 800ce7a:	197c      	adds	r4, r7, r5
 800ce7c:	0019      	movs	r1, r3
 800ce7e:	0010      	movs	r0, r2
 800ce80:	f7ff f96c 	bl	800c15c <PCD_GET_EP_DBUF1_CNT>
 800ce84:	0003      	movs	r3, r0
 800ce86:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800ce88:	002c      	movs	r4, r5
 800ce8a:	193b      	adds	r3, r7, r4
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6818      	ldr	r0, [r3, #0]
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	6959      	ldr	r1, [r3, #20]
 800ce9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce9c:	895a      	ldrh	r2, [r3, #10]
 800ce9e:	193b      	adds	r3, r7, r4
 800cea0:	881b      	ldrh	r3, [r3, #0]
 800cea2:	f005 fce5 	bl	8012870 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800cea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea8:	69da      	ldr	r2, [r3, #28]
 800ceaa:	2124      	movs	r1, #36	; 0x24
 800ceac:	187b      	adds	r3, r7, r1
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	18d2      	adds	r2, r2, r3
 800ceb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb8:	695a      	ldr	r2, [r3, #20]
 800ceba:	187b      	adds	r3, r7, r1
 800cebc:	881b      	ldrh	r3, [r3, #0]
 800cebe:	18d2      	adds	r2, r2, r3
 800cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800cec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d005      	beq.n	800ced8 <PCD_EP_ISR_Handler+0x458>
 800cecc:	187b      	adds	r3, r7, r1
 800cece:	881a      	ldrh	r2, [r3, #0]
 800ced0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d207      	bcs.n	800cee8 <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	781a      	ldrb	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	0011      	movs	r1, r2
 800cee0:	0018      	movs	r0, r3
 800cee2:	f010 fe56 	bl	801db92 <HAL_PCD_DataOutStageCallback>
 800cee6:	e006      	b.n	800cef6 <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceee:	0011      	movs	r1, r2
 800cef0:	0018      	movs	r0, r3
 800cef2:	f004 fb2d 	bl	8011550 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800cef6:	2032      	movs	r0, #50	; 0x32
 800cef8:	183b      	adds	r3, r7, r0
 800cefa:	881b      	ldrh	r3, [r3, #0]
 800cefc:	2280      	movs	r2, #128	; 0x80
 800cefe:	4013      	ands	r3, r2
 800cf00:	d100      	bne.n	800cf04 <PCD_EP_ISR_Handler+0x484>
 800cf02:	e125      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 800cf04:	2121      	movs	r1, #33	; 0x21
 800cf06:	187b      	adds	r3, r7, r1
 800cf08:	781a      	ldrb	r2, [r3, #0]
 800cf0a:	0013      	movs	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	189b      	adds	r3, r3, r2
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	3310      	adds	r3, #16
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	18d3      	adds	r3, r2, r3
 800cf18:	3304      	adds	r3, #4
 800cf1a:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	001a      	movs	r2, r3
 800cf22:	187b      	adds	r3, r7, r1
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	18d3      	adds	r3, r2, r3
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a82      	ldr	r2, [pc, #520]	; (800d138 <PCD_EP_ISR_Handler+0x6b8>)
 800cf2e:	4013      	ands	r3, r2
 800cf30:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	001a      	movs	r2, r3
 800cf38:	187b      	adds	r3, r7, r1
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	18d3      	adds	r3, r2, r3
 800cf40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf42:	2180      	movs	r1, #128	; 0x80
 800cf44:	0209      	lsls	r1, r1, #8
 800cf46:	430a      	orrs	r2, r1
 800cf48:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800cf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4c:	78db      	ldrb	r3, [r3, #3]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	d000      	beq.n	800cf54 <PCD_EP_ISR_Handler+0x4d4>
 800cf52:	e0a3      	b.n	800d09c <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 800cf54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf56:	2200      	movs	r2, #0
 800cf58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800cf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5c:	7b1b      	ldrb	r3, [r3, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d100      	bne.n	800cf64 <PCD_EP_ISR_Handler+0x4e4>
 800cf62:	e093      	b.n	800d08c <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800cf64:	183b      	adds	r3, r7, r0
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	2240      	movs	r2, #64	; 0x40
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	d047      	beq.n	800cffe <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d121      	bne.n	800cfba <PCD_EP_ISR_Handler+0x53a>
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	4a6f      	ldr	r2, [pc, #444]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cf7e:	4694      	mov	ip, r2
 800cf80:	4463      	add	r3, ip
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	496c      	ldr	r1, [pc, #432]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cf8c:	468c      	mov	ip, r1
 800cf8e:	4463      	add	r3, ip
 800cf90:	0192      	lsls	r2, r2, #6
 800cf92:	0992      	lsrs	r2, r2, #6
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	4a67      	ldr	r2, [pc, #412]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cf9e:	4694      	mov	ip, r2
 800cfa0:	4463      	add	r3, ip
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	4964      	ldr	r1, [pc, #400]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cfac:	468c      	mov	ip, r1
 800cfae:	4463      	add	r3, ip
 800cfb0:	2180      	movs	r1, #128	; 0x80
 800cfb2:	0609      	lsls	r1, r1, #24
 800cfb4:	430a      	orrs	r2, r1
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	e068      	b.n	800d08c <PCD_EP_ISR_Handler+0x60c>
 800cfba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d164      	bne.n	800d08c <PCD_EP_ISR_Handler+0x60c>
 800cfc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	4a5c      	ldr	r2, [pc, #368]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cfca:	4694      	mov	ip, r2
 800cfcc:	4463      	add	r3, ip
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	4959      	ldr	r1, [pc, #356]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cfd8:	468c      	mov	ip, r1
 800cfda:	4463      	add	r3, ip
 800cfdc:	0412      	lsls	r2, r2, #16
 800cfde:	0c12      	lsrs	r2, r2, #16
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	4a54      	ldr	r2, [pc, #336]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cfea:	189a      	adds	r2, r3, r2
 800cfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	4952      	ldr	r1, [pc, #328]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800cff4:	468c      	mov	ip, r1
 800cff6:	4463      	add	r3, ip
 800cff8:	6812      	ldr	r2, [r2, #0]
 800cffa:	601a      	str	r2, [r3, #0]
 800cffc:	e046      	b.n	800d08c <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800cffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d000:	785b      	ldrb	r3, [r3, #1]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d121      	bne.n	800d04a <PCD_EP_ISR_Handler+0x5ca>
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4a4b      	ldr	r2, [pc, #300]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d00e:	4694      	mov	ip, r2
 800d010:	4463      	add	r3, ip
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4948      	ldr	r1, [pc, #288]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d01c:	468c      	mov	ip, r1
 800d01e:	4463      	add	r3, ip
 800d020:	0192      	lsls	r2, r2, #6
 800d022:	0992      	lsrs	r2, r2, #6
 800d024:	605a      	str	r2, [r3, #4]
 800d026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4a43      	ldr	r2, [pc, #268]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d02e:	4694      	mov	ip, r2
 800d030:	4463      	add	r3, ip
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	4940      	ldr	r1, [pc, #256]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d03c:	468c      	mov	ip, r1
 800d03e:	4463      	add	r3, ip
 800d040:	2180      	movs	r1, #128	; 0x80
 800d042:	0609      	lsls	r1, r1, #24
 800d044:	430a      	orrs	r2, r1
 800d046:	605a      	str	r2, [r3, #4]
 800d048:	e020      	b.n	800d08c <PCD_EP_ISR_Handler+0x60c>
 800d04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d04c:	785b      	ldrb	r3, [r3, #1]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d11c      	bne.n	800d08c <PCD_EP_ISR_Handler+0x60c>
 800d052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	00db      	lsls	r3, r3, #3
 800d058:	4a38      	ldr	r2, [pc, #224]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d05a:	4694      	mov	ip, r2
 800d05c:	4463      	add	r3, ip
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	4935      	ldr	r1, [pc, #212]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d068:	468c      	mov	ip, r1
 800d06a:	4463      	add	r3, ip
 800d06c:	0412      	lsls	r2, r2, #16
 800d06e:	0c12      	lsrs	r2, r2, #16
 800d070:	605a      	str	r2, [r3, #4]
 800d072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	00db      	lsls	r3, r3, #3
 800d078:	4a30      	ldr	r2, [pc, #192]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d07a:	189a      	adds	r2, r3, r2
 800d07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	492e      	ldr	r1, [pc, #184]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d084:	468c      	mov	ip, r1
 800d086:	4463      	add	r3, ip
 800d088:	6852      	ldr	r2, [r2, #4]
 800d08a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08e:	781a      	ldrb	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	0011      	movs	r1, r2
 800d094:	0018      	movs	r0, r3
 800d096:	f010 fd9d 	bl	801dbd4 <HAL_PCD_DataInStageCallback>
 800d09a:	e059      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800d09c:	2332      	movs	r3, #50	; 0x32
 800d09e:	18fb      	adds	r3, r7, r3
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	2380      	movs	r3, #128	; 0x80
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	d14a      	bne.n	800d140 <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	4a22      	ldr	r2, [pc, #136]	; (800d13c <PCD_EP_ISR_Handler+0x6bc>)
 800d0b2:	4694      	mov	ip, r2
 800d0b4:	4463      	add	r3, ip
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	0c1b      	lsrs	r3, r3, #16
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	2126      	movs	r1, #38	; 0x26
 800d0be:	187b      	adds	r3, r7, r1
 800d0c0:	0592      	lsls	r2, r2, #22
 800d0c2:	0d92      	lsrs	r2, r2, #22
 800d0c4:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c8:	699a      	ldr	r2, [r3, #24]
 800d0ca:	187b      	adds	r3, r7, r1
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d907      	bls.n	800d0e2 <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	187b      	adds	r3, r7, r1
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	1ad2      	subs	r2, r2, r3
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0de:	619a      	str	r2, [r3, #24]
 800d0e0:	e002      	b.n	800d0e8 <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 800d0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800d0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ea:	699b      	ldr	r3, [r3, #24]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d107      	bne.n	800d100 <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f2:	781a      	ldrb	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	0011      	movs	r1, r2
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f010 fd6b 	bl	801dbd4 <HAL_PCD_DataInStageCallback>
 800d0fe:	e027      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800d100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d102:	695a      	ldr	r2, [r3, #20]
 800d104:	2126      	movs	r1, #38	; 0x26
 800d106:	187b      	adds	r3, r7, r1
 800d108:	881b      	ldrh	r3, [r3, #0]
 800d10a:	18d2      	adds	r2, r2, r3
 800d10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800d110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d112:	69da      	ldr	r2, [r3, #28]
 800d114:	187b      	adds	r3, r7, r1
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	18d2      	adds	r2, r2, r3
 800d11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d124:	0011      	movs	r1, r2
 800d126:	0018      	movs	r0, r3
 800d128:	f004 fa12 	bl	8011550 <USB_EPStartXfer>
 800d12c:	e010      	b.n	800d150 <PCD_EP_ISR_Handler+0x6d0>
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	07ff8f8f 	.word	0x07ff8f8f
 800d134:	000080c0 	.word	0x000080c0
 800d138:	07ff8f0f 	.word	0x07ff8f0f
 800d13c:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d140:	2332      	movs	r3, #50	; 0x32
 800d142:	18fb      	adds	r3, r7, r3
 800d144:	881a      	ldrh	r2, [r3, #0]
 800d146:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	0018      	movs	r0, r3
 800d14c:	f000 f8fa 	bl	800d344 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d156:	2380      	movs	r3, #128	; 0x80
 800d158:	021b      	lsls	r3, r3, #8
 800d15a:	4013      	ands	r3, r2
 800d15c:	d000      	beq.n	800d160 <PCD_EP_ISR_Handler+0x6e0>
 800d15e:	e494      	b.n	800ca8a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	0018      	movs	r0, r3
 800d164:	46bd      	mov	sp, r7
 800d166:	b00e      	add	sp, #56	; 0x38
 800d168:	bdb0      	pop	{r4, r5, r7, pc}
 800d16a:	46c0      	nop			; (mov r8, r8)

0800d16c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d16c:	b5b0      	push	{r4, r5, r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	1dbb      	adds	r3, r7, #6
 800d178:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d17a:	1dbb      	adds	r3, r7, #6
 800d17c:	881a      	ldrh	r2, [r3, #0]
 800d17e:	2380      	movs	r3, #128	; 0x80
 800d180:	01db      	lsls	r3, r3, #7
 800d182:	4013      	ands	r3, r2
 800d184:	d068      	beq.n	800d258 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	b29b      	uxth	r3, r3
 800d190:	251e      	movs	r5, #30
 800d192:	197c      	adds	r4, r7, r5
 800d194:	0019      	movs	r1, r3
 800d196:	0010      	movs	r0, r2
 800d198:	f7fe ffbe 	bl	800c118 <PCD_GET_EP_DBUF0_CNT>
 800d19c:	0003      	movs	r3, r0
 800d19e:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	699a      	ldr	r2, [r3, #24]
 800d1a4:	197b      	adds	r3, r7, r5
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d307      	bcc.n	800d1bc <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	699a      	ldr	r2, [r3, #24]
 800d1b0:	197b      	adds	r3, r7, r5
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	1ad2      	subs	r2, r2, r3
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	619a      	str	r2, [r3, #24]
 800d1ba:	e002      	b.n	800d1c2 <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	699b      	ldr	r3, [r3, #24]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d11a      	bne.n	800d200 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	001a      	movs	r2, r3
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	18d3      	adds	r3, r2, r3
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a56      	ldr	r2, [pc, #344]	; (800d334 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800d1dc:	4013      	ands	r3, r2
 800d1de:	61bb      	str	r3, [r7, #24]
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	2280      	movs	r2, #128	; 0x80
 800d1e4:	0192      	lsls	r2, r2, #6
 800d1e6:	4053      	eors	r3, r2
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	001a      	movs	r2, r3
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	18d3      	adds	r3, r2, r3
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	494f      	ldr	r1, [pc, #316]	; (800d338 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d200:	1dbb      	adds	r3, r7, #6
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	2240      	movs	r2, #64	; 0x40
 800d206:	4013      	ands	r3, r2
 800d208:	d015      	beq.n	800d236 <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	001a      	movs	r2, r3
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	18d3      	adds	r3, r2, r3
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a48      	ldr	r2, [pc, #288]	; (800d33c <HAL_PCD_EP_DB_Receive+0x1d0>)
 800d21c:	4013      	ands	r3, r2
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	001a      	movs	r2, r3
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	18d3      	adds	r3, r2, r3
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	4943      	ldr	r1, [pc, #268]	; (800d340 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800d232:	430a      	orrs	r2, r1
 800d234:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800d236:	241e      	movs	r4, #30
 800d238:	193b      	adds	r3, r7, r4
 800d23a:	881b      	ldrh	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d100      	bne.n	800d242 <HAL_PCD_EP_DB_Receive+0xd6>
 800d240:	e071      	b.n	800d326 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6818      	ldr	r0, [r3, #0]
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	6959      	ldr	r1, [r3, #20]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	891a      	ldrh	r2, [r3, #8]
 800d24e:	193b      	adds	r3, r7, r4
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	f005 fb0d 	bl	8012870 <USB_ReadPMA>
 800d256:	e066      	b.n	800d326 <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	b29b      	uxth	r3, r3
 800d262:	251e      	movs	r5, #30
 800d264:	197c      	adds	r4, r7, r5
 800d266:	0019      	movs	r1, r3
 800d268:	0010      	movs	r0, r2
 800d26a:	f7fe ff77 	bl	800c15c <PCD_GET_EP_DBUF1_CNT>
 800d26e:	0003      	movs	r3, r0
 800d270:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	699a      	ldr	r2, [r3, #24]
 800d276:	197b      	adds	r3, r7, r5
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d307      	bcc.n	800d28e <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	699a      	ldr	r2, [r3, #24]
 800d282:	197b      	adds	r3, r7, r5
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	1ad2      	subs	r2, r2, r3
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	619a      	str	r2, [r3, #24]
 800d28c:	e002      	b.n	800d294 <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2200      	movs	r2, #0
 800d292:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d11a      	bne.n	800d2d2 <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	001a      	movs	r2, r3
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	18d3      	adds	r3, r2, r3
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a21      	ldr	r2, [pc, #132]	; (800d334 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800d2ae:	4013      	ands	r3, r2
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b4:	2280      	movs	r2, #128	; 0x80
 800d2b6:	0192      	lsls	r2, r2, #6
 800d2b8:	4053      	eors	r3, r2
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	001a      	movs	r2, r3
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	18d3      	adds	r3, r2, r3
 800d2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2cc:	491a      	ldr	r1, [pc, #104]	; (800d338 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800d2ce:	430a      	orrs	r2, r1
 800d2d0:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d2d2:	1dbb      	adds	r3, r7, #6
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	2240      	movs	r2, #64	; 0x40
 800d2d8:	4013      	ands	r3, r2
 800d2da:	d115      	bne.n	800d308 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	001a      	movs	r2, r3
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	18d3      	adds	r3, r2, r3
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a13      	ldr	r2, [pc, #76]	; (800d33c <HAL_PCD_EP_DB_Receive+0x1d0>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	623b      	str	r3, [r7, #32]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	001a      	movs	r2, r3
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	18d3      	adds	r3, r2, r3
 800d300:	6a3a      	ldr	r2, [r7, #32]
 800d302:	490f      	ldr	r1, [pc, #60]	; (800d340 <HAL_PCD_EP_DB_Receive+0x1d4>)
 800d304:	430a      	orrs	r2, r1
 800d306:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800d308:	241e      	movs	r4, #30
 800d30a:	193b      	adds	r3, r7, r4
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d009      	beq.n	800d326 <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6818      	ldr	r0, [r3, #0]
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6959      	ldr	r1, [r3, #20]
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	895a      	ldrh	r2, [r3, #10]
 800d31e:	193b      	adds	r3, r7, r4
 800d320:	881b      	ldrh	r3, [r3, #0]
 800d322:	f005 faa5 	bl	8012870 <USB_ReadPMA>
    }
  }

  return count;
 800d326:	231e      	movs	r3, #30
 800d328:	18fb      	adds	r3, r7, r3
 800d32a:	881b      	ldrh	r3, [r3, #0]
}
 800d32c:	0018      	movs	r0, r3
 800d32e:	46bd      	mov	sp, r7
 800d330:	b00a      	add	sp, #40	; 0x28
 800d332:	bdb0      	pop	{r4, r5, r7, pc}
 800d334:	07ffbf8f 	.word	0x07ffbf8f
 800d338:	00008080 	.word	0x00008080
 800d33c:	07ff8f8f 	.word	0x07ff8f8f
 800d340:	000080c0 	.word	0x000080c0

0800d344 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d344:	b5b0      	push	{r4, r5, r7, lr}
 800d346:	b08e      	sub	sp, #56	; 0x38
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	1dbb      	adds	r3, r7, #6
 800d350:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d352:	1dbb      	adds	r3, r7, #6
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	2240      	movs	r2, #64	; 0x40
 800d358:	4013      	ands	r3, r2
 800d35a:	d100      	bne.n	800d35e <HAL_PCD_EP_DB_Transmit+0x1a>
 800d35c:	e1c4      	b.n	800d6e8 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	b29b      	uxth	r3, r3
 800d368:	251e      	movs	r5, #30
 800d36a:	197c      	adds	r4, r7, r5
 800d36c:	0019      	movs	r1, r3
 800d36e:	0010      	movs	r0, r2
 800d370:	f7fe fed2 	bl	800c118 <PCD_GET_EP_DBUF0_CNT>
 800d374:	0003      	movs	r3, r0
 800d376:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	699a      	ldr	r2, [r3, #24]
 800d37c:	197b      	adds	r3, r7, r5
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	429a      	cmp	r2, r3
 800d382:	d907      	bls.n	800d394 <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	699a      	ldr	r2, [r3, #24]
 800d388:	197b      	adds	r3, r7, r5
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	1ad2      	subs	r2, r2, r3
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	619a      	str	r2, [r3, #24]
 800d392:	e002      	b.n	800d39a <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	2200      	movs	r2, #0
 800d398:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d000      	beq.n	800d3a4 <HAL_PCD_EP_DB_Transmit+0x60>
 800d3a2:	e0b2      	b.n	800d50a <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	785b      	ldrb	r3, [r3, #1]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d121      	bne.n	800d3f0 <HAL_PCD_EP_DB_Transmit+0xac>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	4adb      	ldr	r2, [pc, #876]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d3b4:	4694      	mov	ip, r2
 800d3b6:	4463      	add	r3, ip
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	49d7      	ldr	r1, [pc, #860]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d3c2:	468c      	mov	ip, r1
 800d3c4:	4463      	add	r3, ip
 800d3c6:	0192      	lsls	r2, r2, #6
 800d3c8:	0992      	lsrs	r2, r2, #6
 800d3ca:	601a      	str	r2, [r3, #0]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	4ad3      	ldr	r2, [pc, #844]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d3d4:	4694      	mov	ip, r2
 800d3d6:	4463      	add	r3, ip
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	49cf      	ldr	r1, [pc, #828]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d3e2:	468c      	mov	ip, r1
 800d3e4:	4463      	add	r3, ip
 800d3e6:	2180      	movs	r1, #128	; 0x80
 800d3e8:	0609      	lsls	r1, r1, #24
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e020      	b.n	800d432 <HAL_PCD_EP_DB_Transmit+0xee>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	785b      	ldrb	r3, [r3, #1]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d11c      	bne.n	800d432 <HAL_PCD_EP_DB_Transmit+0xee>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	00db      	lsls	r3, r3, #3
 800d3fe:	4ac8      	ldr	r2, [pc, #800]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d400:	4694      	mov	ip, r2
 800d402:	4463      	add	r3, ip
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	49c4      	ldr	r1, [pc, #784]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d40e:	468c      	mov	ip, r1
 800d410:	4463      	add	r3, ip
 800d412:	0412      	lsls	r2, r2, #16
 800d414:	0c12      	lsrs	r2, r2, #16
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	4ac0      	ldr	r2, [pc, #768]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d420:	189a      	adds	r2, r3, r2
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	00db      	lsls	r3, r3, #3
 800d428:	49bd      	ldr	r1, [pc, #756]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d42a:	468c      	mov	ip, r1
 800d42c:	4463      	add	r3, ip
 800d42e:	6812      	ldr	r2, [r2, #0]
 800d430:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	785b      	ldrb	r3, [r3, #1]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d121      	bne.n	800d47e <HAL_PCD_EP_DB_Transmit+0x13a>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4ab7      	ldr	r2, [pc, #732]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d442:	4694      	mov	ip, r2
 800d444:	4463      	add	r3, ip
 800d446:	685a      	ldr	r2, [r3, #4]
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	49b4      	ldr	r1, [pc, #720]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d450:	468c      	mov	ip, r1
 800d452:	4463      	add	r3, ip
 800d454:	0192      	lsls	r2, r2, #6
 800d456:	0992      	lsrs	r2, r2, #6
 800d458:	605a      	str	r2, [r3, #4]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	4aaf      	ldr	r2, [pc, #700]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d462:	4694      	mov	ip, r2
 800d464:	4463      	add	r3, ip
 800d466:	685a      	ldr	r2, [r3, #4]
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	00db      	lsls	r3, r3, #3
 800d46e:	49ac      	ldr	r1, [pc, #688]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d470:	468c      	mov	ip, r1
 800d472:	4463      	add	r3, ip
 800d474:	2180      	movs	r1, #128	; 0x80
 800d476:	0609      	lsls	r1, r1, #24
 800d478:	430a      	orrs	r2, r1
 800d47a:	605a      	str	r2, [r3, #4]
 800d47c:	e020      	b.n	800d4c0 <HAL_PCD_EP_DB_Transmit+0x17c>
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	785b      	ldrb	r3, [r3, #1]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d11c      	bne.n	800d4c0 <HAL_PCD_EP_DB_Transmit+0x17c>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	4aa4      	ldr	r2, [pc, #656]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d48e:	4694      	mov	ip, r2
 800d490:	4463      	add	r3, ip
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	49a1      	ldr	r1, [pc, #644]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d49c:	468c      	mov	ip, r1
 800d49e:	4463      	add	r3, ip
 800d4a0:	0412      	lsls	r2, r2, #16
 800d4a2:	0c12      	lsrs	r2, r2, #16
 800d4a4:	605a      	str	r2, [r3, #4]
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	4a9c      	ldr	r2, [pc, #624]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4ae:	189a      	adds	r2, r3, r2
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	499a      	ldr	r1, [pc, #616]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d4b8:	468c      	mov	ip, r1
 800d4ba:	4463      	add	r3, ip
 800d4bc:	6852      	ldr	r2, [r2, #4]
 800d4be:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	781a      	ldrb	r2, [r3, #0]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	0011      	movs	r1, r2
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	f010 fb83 	bl	801dbd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d4ce:	1dbb      	adds	r3, r7, #6
 800d4d0:	881a      	ldrh	r2, [r3, #0]
 800d4d2:	2380      	movs	r3, #128	; 0x80
 800d4d4:	01db      	lsls	r3, r3, #7
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	d100      	bne.n	800d4dc <HAL_PCD_EP_DB_Transmit+0x198>
 800d4da:	e2d6      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	001a      	movs	r2, r3
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	009b      	lsls	r3, r3, #2
 800d4e8:	18d3      	adds	r3, r2, r3
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a8d      	ldr	r2, [pc, #564]	; (800d724 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	637b      	str	r3, [r7, #52]	; 0x34
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	001a      	movs	r2, r3
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	18d3      	adds	r3, r2, r3
 800d500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d502:	4989      	ldr	r1, [pc, #548]	; (800d728 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800d504:	430a      	orrs	r2, r1
 800d506:	601a      	str	r2, [r3, #0]
 800d508:	e2bf      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d50a:	1dbb      	adds	r3, r7, #6
 800d50c:	881a      	ldrh	r2, [r3, #0]
 800d50e:	2380      	movs	r3, #128	; 0x80
 800d510:	01db      	lsls	r3, r3, #7
 800d512:	4013      	ands	r3, r2
 800d514:	d015      	beq.n	800d542 <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	001a      	movs	r2, r3
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	18d3      	adds	r3, r2, r3
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a7f      	ldr	r2, [pc, #508]	; (800d724 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800d528:	4013      	ands	r3, r2
 800d52a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	001a      	movs	r2, r3
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	18d3      	adds	r3, r2, r3
 800d53a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d53c:	497a      	ldr	r1, [pc, #488]	; (800d728 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 800d53e:	430a      	orrs	r2, r1
 800d540:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2224      	movs	r2, #36	; 0x24
 800d546:	5c9b      	ldrb	r3, [r3, r2]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d000      	beq.n	800d54e <HAL_PCD_EP_DB_Transmit+0x20a>
 800d54c:	e29d      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	695a      	ldr	r2, [r3, #20]
 800d552:	211e      	movs	r1, #30
 800d554:	187b      	adds	r3, r7, r1
 800d556:	881b      	ldrh	r3, [r3, #0]
 800d558:	18d2      	adds	r2, r2, r3
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	69da      	ldr	r2, [r3, #28]
 800d562:	187b      	adds	r3, r7, r1
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	18d2      	adds	r2, r2, r3
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	6a1a      	ldr	r2, [r3, #32]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	429a      	cmp	r2, r3
 800d576:	d309      	bcc.n	800d58c <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6a1a      	ldr	r2, [r3, #32]
 800d582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	621a      	str	r2, [r3, #32]
 800d58a:	e016      	b.n	800d5ba <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	6a1b      	ldr	r3, [r3, #32]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d108      	bne.n	800d5a6 <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 800d594:	231e      	movs	r3, #30
 800d596:	18fb      	adds	r3, r7, r3
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	2224      	movs	r2, #36	; 0x24
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	5499      	strb	r1, [r3, r2]
 800d5a4:	e009      	b.n	800d5ba <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	2224      	movs	r2, #36	; 0x24
 800d5aa:	2100      	movs	r1, #0
 800d5ac:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6a1b      	ldr	r3, [r3, #32]
 800d5b2:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d162      	bne.n	800d688 <HAL_PCD_EP_DB_Transmit+0x344>
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	4a55      	ldr	r2, [pc, #340]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d5ca:	4694      	mov	ip, r2
 800d5cc:	4463      	add	r3, ip
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	4952      	ldr	r1, [pc, #328]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d5d8:	468c      	mov	ip, r1
 800d5da:	4463      	add	r3, ip
 800d5dc:	0192      	lsls	r2, r2, #6
 800d5de:	0992      	lsrs	r2, r2, #6
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	2b3e      	cmp	r3, #62	; 0x3e
 800d5e6:	d91e      	bls.n	800d626 <HAL_PCD_EP_DB_Transmit+0x2e2>
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	095b      	lsrs	r3, r3, #5
 800d5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	221f      	movs	r2, #31
 800d5f2:	4013      	ands	r3, r2
 800d5f4:	d102      	bne.n	800d5fc <HAL_PCD_EP_DB_Transmit+0x2b8>
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	00db      	lsls	r3, r3, #3
 800d602:	4a47      	ldr	r2, [pc, #284]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d604:	4694      	mov	ip, r2
 800d606:	4463      	add	r3, ip
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60c:	069b      	lsls	r3, r3, #26
 800d60e:	431a      	orrs	r2, r3
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	4942      	ldr	r1, [pc, #264]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d618:	468c      	mov	ip, r1
 800d61a:	4463      	add	r3, ip
 800d61c:	2180      	movs	r1, #128	; 0x80
 800d61e:	0609      	lsls	r1, r1, #24
 800d620:	430a      	orrs	r2, r1
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	e055      	b.n	800d6d2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d111      	bne.n	800d650 <HAL_PCD_EP_DB_Transmit+0x30c>
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	00db      	lsls	r3, r3, #3
 800d632:	4a3b      	ldr	r2, [pc, #236]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d634:	4694      	mov	ip, r2
 800d636:	4463      	add	r3, ip
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	4937      	ldr	r1, [pc, #220]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d642:	468c      	mov	ip, r1
 800d644:	4463      	add	r3, ip
 800d646:	2180      	movs	r1, #128	; 0x80
 800d648:	0609      	lsls	r1, r1, #24
 800d64a:	430a      	orrs	r2, r1
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	e040      	b.n	800d6d2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	2201      	movs	r2, #1
 800d65a:	4013      	ands	r3, r2
 800d65c:	d002      	beq.n	800d664 <HAL_PCD_EP_DB_Transmit+0x320>
 800d65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d660:	3301      	adds	r3, #1
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	00db      	lsls	r3, r3, #3
 800d66a:	4a2d      	ldr	r2, [pc, #180]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d66c:	4694      	mov	ip, r2
 800d66e:	4463      	add	r3, ip
 800d670:	6819      	ldr	r1, [r3, #0]
 800d672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d674:	069a      	lsls	r2, r3, #26
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	4828      	ldr	r0, [pc, #160]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d67e:	4684      	mov	ip, r0
 800d680:	4463      	add	r3, ip
 800d682:	430a      	orrs	r2, r1
 800d684:	601a      	str	r2, [r3, #0]
 800d686:	e024      	b.n	800d6d2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	785b      	ldrb	r3, [r3, #1]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d120      	bne.n	800d6d2 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	00db      	lsls	r3, r3, #3
 800d696:	4a22      	ldr	r2, [pc, #136]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d698:	4694      	mov	ip, r2
 800d69a:	4463      	add	r3, ip
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	491e      	ldr	r1, [pc, #120]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6a6:	468c      	mov	ip, r1
 800d6a8:	4463      	add	r3, ip
 800d6aa:	0412      	lsls	r2, r2, #16
 800d6ac:	0c12      	lsrs	r2, r2, #16
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	4a1a      	ldr	r2, [pc, #104]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6b8:	4694      	mov	ip, r2
 800d6ba:	4463      	add	r3, ip
 800d6bc:	6819      	ldr	r1, [r3, #0]
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	041a      	lsls	r2, r3, #16
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	4815      	ldr	r0, [pc, #84]	; (800d720 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800d6ca:	4684      	mov	ip, r0
 800d6cc:	4463      	add	r3, ip
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	6818      	ldr	r0, [r3, #0]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	6959      	ldr	r1, [r3, #20]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	891a      	ldrh	r2, [r3, #8]
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	f005 f84f 	bl	8012784 <USB_WritePMA>
 800d6e6:	e1d0      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	251e      	movs	r5, #30
 800d6f4:	197c      	adds	r4, r7, r5
 800d6f6:	0019      	movs	r1, r3
 800d6f8:	0010      	movs	r0, r2
 800d6fa:	f7fe fd2f 	bl	800c15c <PCD_GET_EP_DBUF1_CNT>
 800d6fe:	0003      	movs	r3, r0
 800d700:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	699a      	ldr	r2, [r3, #24]
 800d706:	197b      	adds	r3, r7, r5
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d30e      	bcc.n	800d72c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	699a      	ldr	r2, [r3, #24]
 800d712:	197b      	adds	r3, r7, r5
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	1ad2      	subs	r2, r2, r3
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	619a      	str	r2, [r3, #24]
 800d71c:	e009      	b.n	800d732 <HAL_PCD_EP_DB_Transmit+0x3ee>
 800d71e:	46c0      	nop			; (mov r8, r8)
 800d720:	40009800 	.word	0x40009800
 800d724:	07ff8f8f 	.word	0x07ff8f8f
 800d728:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	2200      	movs	r2, #0
 800d730:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d000      	beq.n	800d73c <HAL_PCD_EP_DB_Transmit+0x3f8>
 800d73a:	e0b2      	b.n	800d8a2 <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	785b      	ldrb	r3, [r3, #1]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d121      	bne.n	800d788 <HAL_PCD_EP_DB_Transmit+0x444>
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	4ab5      	ldr	r2, [pc, #724]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d74c:	4694      	mov	ip, r2
 800d74e:	4463      	add	r3, ip
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	49b1      	ldr	r1, [pc, #708]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d75a:	468c      	mov	ip, r1
 800d75c:	4463      	add	r3, ip
 800d75e:	0192      	lsls	r2, r2, #6
 800d760:	0992      	lsrs	r2, r2, #6
 800d762:	601a      	str	r2, [r3, #0]
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	781b      	ldrb	r3, [r3, #0]
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	4aad      	ldr	r2, [pc, #692]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d76c:	4694      	mov	ip, r2
 800d76e:	4463      	add	r3, ip
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	49a9      	ldr	r1, [pc, #676]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d77a:	468c      	mov	ip, r1
 800d77c:	4463      	add	r3, ip
 800d77e:	2180      	movs	r1, #128	; 0x80
 800d780:	0609      	lsls	r1, r1, #24
 800d782:	430a      	orrs	r2, r1
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	e020      	b.n	800d7ca <HAL_PCD_EP_DB_Transmit+0x486>
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	785b      	ldrb	r3, [r3, #1]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d11c      	bne.n	800d7ca <HAL_PCD_EP_DB_Transmit+0x486>
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	00db      	lsls	r3, r3, #3
 800d796:	4aa2      	ldr	r2, [pc, #648]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d798:	4694      	mov	ip, r2
 800d79a:	4463      	add	r3, ip
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	00db      	lsls	r3, r3, #3
 800d7a4:	499e      	ldr	r1, [pc, #632]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7a6:	468c      	mov	ip, r1
 800d7a8:	4463      	add	r3, ip
 800d7aa:	0412      	lsls	r2, r2, #16
 800d7ac:	0c12      	lsrs	r2, r2, #16
 800d7ae:	601a      	str	r2, [r3, #0]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	00db      	lsls	r3, r3, #3
 800d7b6:	4a9a      	ldr	r2, [pc, #616]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7b8:	189a      	adds	r2, r3, r2
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	4997      	ldr	r1, [pc, #604]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7c2:	468c      	mov	ip, r1
 800d7c4:	4463      	add	r3, ip
 800d7c6:	6812      	ldr	r2, [r2, #0]
 800d7c8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d121      	bne.n	800d816 <HAL_PCD_EP_DB_Transmit+0x4d2>
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	00db      	lsls	r3, r3, #3
 800d7d8:	4a91      	ldr	r2, [pc, #580]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7da:	4694      	mov	ip, r2
 800d7dc:	4463      	add	r3, ip
 800d7de:	685a      	ldr	r2, [r3, #4]
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	00db      	lsls	r3, r3, #3
 800d7e6:	498e      	ldr	r1, [pc, #568]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7e8:	468c      	mov	ip, r1
 800d7ea:	4463      	add	r3, ip
 800d7ec:	0192      	lsls	r2, r2, #6
 800d7ee:	0992      	lsrs	r2, r2, #6
 800d7f0:	605a      	str	r2, [r3, #4]
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	4a89      	ldr	r2, [pc, #548]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d7fa:	4694      	mov	ip, r2
 800d7fc:	4463      	add	r3, ip
 800d7fe:	685a      	ldr	r2, [r3, #4]
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	4986      	ldr	r1, [pc, #536]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d808:	468c      	mov	ip, r1
 800d80a:	4463      	add	r3, ip
 800d80c:	2180      	movs	r1, #128	; 0x80
 800d80e:	0609      	lsls	r1, r1, #24
 800d810:	430a      	orrs	r2, r1
 800d812:	605a      	str	r2, [r3, #4]
 800d814:	e020      	b.n	800d858 <HAL_PCD_EP_DB_Transmit+0x514>
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d11c      	bne.n	800d858 <HAL_PCD_EP_DB_Transmit+0x514>
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	00db      	lsls	r3, r3, #3
 800d824:	4a7e      	ldr	r2, [pc, #504]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d826:	4694      	mov	ip, r2
 800d828:	4463      	add	r3, ip
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	00db      	lsls	r3, r3, #3
 800d832:	497b      	ldr	r1, [pc, #492]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d834:	468c      	mov	ip, r1
 800d836:	4463      	add	r3, ip
 800d838:	0412      	lsls	r2, r2, #16
 800d83a:	0c12      	lsrs	r2, r2, #16
 800d83c:	605a      	str	r2, [r3, #4]
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	4a76      	ldr	r2, [pc, #472]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d846:	189a      	adds	r2, r3, r2
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	00db      	lsls	r3, r3, #3
 800d84e:	4974      	ldr	r1, [pc, #464]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d850:	468c      	mov	ip, r1
 800d852:	4463      	add	r3, ip
 800d854:	6852      	ldr	r2, [r2, #4]
 800d856:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	781a      	ldrb	r2, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	0011      	movs	r1, r2
 800d860:	0018      	movs	r0, r3
 800d862:	f010 f9b7 	bl	801dbd4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d866:	1dbb      	adds	r3, r7, #6
 800d868:	881a      	ldrh	r2, [r3, #0]
 800d86a:	2380      	movs	r3, #128	; 0x80
 800d86c:	01db      	lsls	r3, r3, #7
 800d86e:	4013      	ands	r3, r2
 800d870:	d000      	beq.n	800d874 <HAL_PCD_EP_DB_Transmit+0x530>
 800d872:	e10a      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	001a      	movs	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	18d3      	adds	r3, r2, r3
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a67      	ldr	r2, [pc, #412]	; (800da24 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800d886:	4013      	ands	r3, r2
 800d888:	623b      	str	r3, [r7, #32]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	001a      	movs	r2, r3
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	18d3      	adds	r3, r2, r3
 800d898:	6a3a      	ldr	r2, [r7, #32]
 800d89a:	4963      	ldr	r1, [pc, #396]	; (800da28 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800d89c:	430a      	orrs	r2, r1
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	e0f3      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d8a2:	1dbb      	adds	r3, r7, #6
 800d8a4:	881a      	ldrh	r2, [r3, #0]
 800d8a6:	2380      	movs	r3, #128	; 0x80
 800d8a8:	01db      	lsls	r3, r3, #7
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	d115      	bne.n	800d8da <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	001a      	movs	r2, r3
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	18d3      	adds	r3, r2, r3
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a59      	ldr	r2, [pc, #356]	; (800da24 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	617b      	str	r3, [r7, #20]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	001a      	movs	r2, r3
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	18d3      	adds	r3, r2, r3
 800d8d2:	697a      	ldr	r2, [r7, #20]
 800d8d4:	4954      	ldr	r1, [pc, #336]	; (800da28 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2224      	movs	r2, #36	; 0x24
 800d8de:	5c9b      	ldrb	r3, [r3, r2]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d000      	beq.n	800d8e6 <HAL_PCD_EP_DB_Transmit+0x5a2>
 800d8e4:	e0d1      	b.n	800da8a <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	695a      	ldr	r2, [r3, #20]
 800d8ea:	211e      	movs	r1, #30
 800d8ec:	187b      	adds	r3, r7, r1
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	18d2      	adds	r2, r2, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	69da      	ldr	r2, [r3, #28]
 800d8fa:	187b      	adds	r3, r7, r1
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	18d2      	adds	r2, r2, r3
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	6a1a      	ldr	r2, [r3, #32]
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d309      	bcc.n	800d924 <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	691b      	ldr	r3, [r3, #16]
 800d914:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	6a1a      	ldr	r2, [r3, #32]
 800d91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91c:	1ad2      	subs	r2, r2, r3
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	621a      	str	r2, [r3, #32]
 800d922:	e016      	b.n	800d952 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6a1b      	ldr	r3, [r3, #32]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d108      	bne.n	800d93e <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 800d92c:	231e      	movs	r3, #30
 800d92e:	18fb      	adds	r3, r7, r3
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2224      	movs	r2, #36	; 0x24
 800d938:	2100      	movs	r1, #0
 800d93a:	5499      	strb	r1, [r3, r2]
 800d93c:	e009      	b.n	800d952 <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2200      	movs	r2, #0
 800d948:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2224      	movs	r2, #36	; 0x24
 800d94e:	2100      	movs	r1, #0
 800d950:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	785b      	ldrb	r3, [r3, #1]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d168      	bne.n	800da2c <HAL_PCD_EP_DB_Transmit+0x6e8>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	00db      	lsls	r3, r3, #3
 800d960:	4a2f      	ldr	r2, [pc, #188]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d962:	4694      	mov	ip, r2
 800d964:	4463      	add	r3, ip
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	492c      	ldr	r1, [pc, #176]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d970:	468c      	mov	ip, r1
 800d972:	4463      	add	r3, ip
 800d974:	0192      	lsls	r2, r2, #6
 800d976:	0992      	lsrs	r2, r2, #6
 800d978:	605a      	str	r2, [r3, #4]
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	2b3e      	cmp	r3, #62	; 0x3e
 800d97e:	d91e      	bls.n	800d9be <HAL_PCD_EP_DB_Transmit+0x67a>
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	095b      	lsrs	r3, r3, #5
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	221f      	movs	r2, #31
 800d98a:	4013      	ands	r3, r2
 800d98c:	d102      	bne.n	800d994 <HAL_PCD_EP_DB_Transmit+0x650>
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	3b01      	subs	r3, #1
 800d992:	61bb      	str	r3, [r7, #24]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	4a21      	ldr	r2, [pc, #132]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d99c:	4694      	mov	ip, r2
 800d99e:	4463      	add	r3, ip
 800d9a0:	685a      	ldr	r2, [r3, #4]
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	069b      	lsls	r3, r3, #26
 800d9a6:	431a      	orrs	r2, r3
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	491c      	ldr	r1, [pc, #112]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9b0:	468c      	mov	ip, r1
 800d9b2:	4463      	add	r3, ip
 800d9b4:	2180      	movs	r1, #128	; 0x80
 800d9b6:	0609      	lsls	r1, r1, #24
 800d9b8:	430a      	orrs	r2, r1
 800d9ba:	605a      	str	r2, [r3, #4]
 800d9bc:	e05b      	b.n	800da76 <HAL_PCD_EP_DB_Transmit+0x732>
 800d9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d111      	bne.n	800d9e8 <HAL_PCD_EP_DB_Transmit+0x6a4>
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	00db      	lsls	r3, r3, #3
 800d9ca:	4a15      	ldr	r2, [pc, #84]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9cc:	4694      	mov	ip, r2
 800d9ce:	4463      	add	r3, ip
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	00db      	lsls	r3, r3, #3
 800d9d8:	4911      	ldr	r1, [pc, #68]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800d9da:	468c      	mov	ip, r1
 800d9dc:	4463      	add	r3, ip
 800d9de:	2180      	movs	r1, #128	; 0x80
 800d9e0:	0609      	lsls	r1, r1, #24
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
 800d9e6:	e046      	b.n	800da76 <HAL_PCD_EP_DB_Transmit+0x732>
 800d9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	61bb      	str	r3, [r7, #24]
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	d002      	beq.n	800d9fc <HAL_PCD_EP_DB_Transmit+0x6b8>
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	61bb      	str	r3, [r7, #24]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	4a07      	ldr	r2, [pc, #28]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da04:	4694      	mov	ip, r2
 800da06:	4463      	add	r3, ip
 800da08:	6859      	ldr	r1, [r3, #4]
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	069a      	lsls	r2, r3, #26
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	4802      	ldr	r0, [pc, #8]	; (800da20 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800da16:	4684      	mov	ip, r0
 800da18:	4463      	add	r3, ip
 800da1a:	430a      	orrs	r2, r1
 800da1c:	605a      	str	r2, [r3, #4]
 800da1e:	e02a      	b.n	800da76 <HAL_PCD_EP_DB_Transmit+0x732>
 800da20:	40009800 	.word	0x40009800
 800da24:	07ff8f8f 	.word	0x07ff8f8f
 800da28:	0000c080 	.word	0x0000c080
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	785b      	ldrb	r3, [r3, #1]
 800da30:	2b01      	cmp	r3, #1
 800da32:	d120      	bne.n	800da76 <HAL_PCD_EP_DB_Transmit+0x732>
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	4a25      	ldr	r2, [pc, #148]	; (800dad0 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da3c:	4694      	mov	ip, r2
 800da3e:	4463      	add	r3, ip
 800da40:	685a      	ldr	r2, [r3, #4]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	00db      	lsls	r3, r3, #3
 800da48:	4921      	ldr	r1, [pc, #132]	; (800dad0 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da4a:	468c      	mov	ip, r1
 800da4c:	4463      	add	r3, ip
 800da4e:	0412      	lsls	r2, r2, #16
 800da50:	0c12      	lsrs	r2, r2, #16
 800da52:	605a      	str	r2, [r3, #4]
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	4a1d      	ldr	r2, [pc, #116]	; (800dad0 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da5c:	4694      	mov	ip, r2
 800da5e:	4463      	add	r3, ip
 800da60:	6859      	ldr	r1, [r3, #4]
 800da62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da64:	041a      	lsls	r2, r3, #16
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	00db      	lsls	r3, r3, #3
 800da6c:	4818      	ldr	r0, [pc, #96]	; (800dad0 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800da6e:	4684      	mov	ip, r0
 800da70:	4463      	add	r3, ip
 800da72:	430a      	orrs	r2, r1
 800da74:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	6818      	ldr	r0, [r3, #0]
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	6959      	ldr	r1, [r3, #20]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	895a      	ldrh	r2, [r3, #10]
 800da82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da84:	b29b      	uxth	r3, r3
 800da86:	f004 fe7d 	bl	8012784 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	001a      	movs	r2, r3
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	18d3      	adds	r3, r2, r3
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a0e      	ldr	r2, [pc, #56]	; (800dad4 <HAL_PCD_EP_DB_Transmit+0x790>)
 800da9c:	4013      	ands	r3, r2
 800da9e:	633b      	str	r3, [r7, #48]	; 0x30
 800daa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa2:	2210      	movs	r2, #16
 800daa4:	4053      	eors	r3, r2
 800daa6:	633b      	str	r3, [r7, #48]	; 0x30
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	2220      	movs	r2, #32
 800daac:	4053      	eors	r3, r2
 800daae:	633b      	str	r3, [r7, #48]	; 0x30
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	001a      	movs	r2, r3
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	18d3      	adds	r3, r2, r3
 800dabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac0:	4905      	ldr	r1, [pc, #20]	; (800dad8 <HAL_PCD_EP_DB_Transmit+0x794>)
 800dac2:	430a      	orrs	r2, r1
 800dac4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	0018      	movs	r0, r3
 800daca:	46bd      	mov	sp, r7
 800dacc:	b00e      	add	sp, #56	; 0x38
 800dace:	bdb0      	pop	{r4, r5, r7, pc}
 800dad0:	40009800 	.word	0x40009800
 800dad4:	07ff8fbf 	.word	0x07ff8fbf
 800dad8:	00008080 	.word	0x00008080

0800dadc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b087      	sub	sp, #28
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	0008      	movs	r0, r1
 800dae6:	0011      	movs	r1, r2
 800dae8:	607b      	str	r3, [r7, #4]
 800daea:	240a      	movs	r4, #10
 800daec:	193b      	adds	r3, r7, r4
 800daee:	1c02      	adds	r2, r0, #0
 800daf0:	801a      	strh	r2, [r3, #0]
 800daf2:	2308      	movs	r3, #8
 800daf4:	18fb      	adds	r3, r7, r3
 800daf6:	1c0a      	adds	r2, r1, #0
 800daf8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800dafa:	0021      	movs	r1, r4
 800dafc:	187b      	adds	r3, r7, r1
 800dafe:	881b      	ldrh	r3, [r3, #0]
 800db00:	2280      	movs	r2, #128	; 0x80
 800db02:	4013      	ands	r3, r2
 800db04:	b29b      	uxth	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00d      	beq.n	800db26 <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800db0a:	187b      	adds	r3, r7, r1
 800db0c:	881b      	ldrh	r3, [r3, #0]
 800db0e:	2207      	movs	r2, #7
 800db10:	401a      	ands	r2, r3
 800db12:	0013      	movs	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	189b      	adds	r3, r3, r2
 800db18:	00db      	lsls	r3, r3, #3
 800db1a:	3310      	adds	r3, #16
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	18d3      	adds	r3, r2, r3
 800db20:	3304      	adds	r3, #4
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	e00c      	b.n	800db40 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800db26:	230a      	movs	r3, #10
 800db28:	18fb      	adds	r3, r7, r3
 800db2a:	881a      	ldrh	r2, [r3, #0]
 800db2c:	0013      	movs	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	189b      	adds	r3, r3, r2
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	3351      	adds	r3, #81	; 0x51
 800db36:	33ff      	adds	r3, #255	; 0xff
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	18d3      	adds	r3, r2, r3
 800db3c:	3304      	adds	r3, #4
 800db3e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800db40:	2308      	movs	r3, #8
 800db42:	18fb      	adds	r3, r7, r3
 800db44:	881b      	ldrh	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d107      	bne.n	800db5a <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2200      	movs	r2, #0
 800db4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	b29a      	uxth	r2, r3
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	80da      	strh	r2, [r3, #6]
 800db58:	e00b      	b.n	800db72 <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2201      	movs	r2, #1
 800db5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	b29a      	uxth	r2, r3
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	0c1b      	lsrs	r3, r3, #16
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	0018      	movs	r0, r3
 800db76:	46bd      	mov	sp, r7
 800db78:	b007      	add	sp, #28
 800db7a:	bd90      	pop	{r4, r7, pc}

0800db7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	23b5      	movs	r3, #181	; 0xb5
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	2101      	movs	r1, #1
 800db92:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	23b3      	movs	r3, #179	; 0xb3
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	2100      	movs	r1, #0
 800db9c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dba2:	2201      	movs	r2, #1
 800dba4:	431a      	orrs	r2, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	2202      	movs	r2, #2
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	0018      	movs	r0, r3
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	b004      	add	sp, #16
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800dbc4:	4b04      	ldr	r3, [pc, #16]	; (800dbd8 <HAL_PWREx_EnableVddUSB+0x18>)
 800dbc6:	685a      	ldr	r2, [r3, #4]
 800dbc8:	4b03      	ldr	r3, [pc, #12]	; (800dbd8 <HAL_PWREx_EnableVddUSB+0x18>)
 800dbca:	2180      	movs	r1, #128	; 0x80
 800dbcc:	00c9      	lsls	r1, r1, #3
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
}
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	40007000 	.word	0x40007000

0800dbdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800dbe4:	4b19      	ldr	r3, [pc, #100]	; (800dc4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a19      	ldr	r2, [pc, #100]	; (800dc50 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800dbea:	4013      	ands	r3, r2
 800dbec:	0019      	movs	r1, r3
 800dbee:	4b17      	ldr	r3, [pc, #92]	; (800dc4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dbf6:	687a      	ldr	r2, [r7, #4]
 800dbf8:	2380      	movs	r3, #128	; 0x80
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d11f      	bne.n	800dc40 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800dc00:	4b14      	ldr	r3, [pc, #80]	; (800dc54 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	0013      	movs	r3, r2
 800dc06:	005b      	lsls	r3, r3, #1
 800dc08:	189b      	adds	r3, r3, r2
 800dc0a:	005b      	lsls	r3, r3, #1
 800dc0c:	4912      	ldr	r1, [pc, #72]	; (800dc58 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800dc0e:	0018      	movs	r0, r3
 800dc10:	f7f8 faee 	bl	80061f0 <__udivsi3>
 800dc14:	0003      	movs	r3, r0
 800dc16:	3301      	adds	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dc1a:	e008      	b.n	800dc2e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d003      	beq.n	800dc2a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e001      	b.n	800dc2e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	e009      	b.n	800dc42 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dc2e:	4b07      	ldr	r3, [pc, #28]	; (800dc4c <HAL_PWREx_ControlVoltageScaling+0x70>)
 800dc30:	695a      	ldr	r2, [r3, #20]
 800dc32:	2380      	movs	r3, #128	; 0x80
 800dc34:	00db      	lsls	r3, r3, #3
 800dc36:	401a      	ands	r2, r3
 800dc38:	2380      	movs	r3, #128	; 0x80
 800dc3a:	00db      	lsls	r3, r3, #3
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d0ed      	beq.n	800dc1c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	0018      	movs	r0, r3
 800dc44:	46bd      	mov	sp, r7
 800dc46:	b004      	add	sp, #16
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	40007000 	.word	0x40007000
 800dc50:	fffff9ff 	.word	0xfffff9ff
 800dc54:	2000005c 	.word	0x2000005c
 800dc58:	000f4240 	.word	0x000f4240

0800dc5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800dc60:	4b03      	ldr	r3, [pc, #12]	; (800dc70 <LL_RCC_GetAPB1Prescaler+0x14>)
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	23e0      	movs	r3, #224	; 0xe0
 800dc66:	01db      	lsls	r3, r3, #7
 800dc68:	4013      	ands	r3, r2
}
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	40021000 	.word	0x40021000

0800dc74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	f000 fb50 	bl	800e328 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	4013      	ands	r3, r2
 800dc90:	d100      	bne.n	800dc94 <HAL_RCC_OscConfig+0x20>
 800dc92:	e07c      	b.n	800dd8e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc94:	4bc3      	ldr	r3, [pc, #780]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	2238      	movs	r2, #56	; 0x38
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dc9e:	4bc1      	ldr	r3, [pc, #772]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	2203      	movs	r2, #3
 800dca4:	4013      	ands	r3, r2
 800dca6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	2b10      	cmp	r3, #16
 800dcac:	d102      	bne.n	800dcb4 <HAL_RCC_OscConfig+0x40>
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d002      	beq.n	800dcba <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	2b08      	cmp	r3, #8
 800dcb8:	d10b      	bne.n	800dcd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcba:	4bba      	ldr	r3, [pc, #744]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	2380      	movs	r3, #128	; 0x80
 800dcc0:	029b      	lsls	r3, r3, #10
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	d062      	beq.n	800dd8c <HAL_RCC_OscConfig+0x118>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d15e      	bne.n	800dd8c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e32a      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	2380      	movs	r3, #128	; 0x80
 800dcd8:	025b      	lsls	r3, r3, #9
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d107      	bne.n	800dcee <HAL_RCC_OscConfig+0x7a>
 800dcde:	4bb1      	ldr	r3, [pc, #708]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	4bb0      	ldr	r3, [pc, #704]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dce4:	2180      	movs	r1, #128	; 0x80
 800dce6:	0249      	lsls	r1, r1, #9
 800dce8:	430a      	orrs	r2, r1
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	e020      	b.n	800dd30 <HAL_RCC_OscConfig+0xbc>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685a      	ldr	r2, [r3, #4]
 800dcf2:	23a0      	movs	r3, #160	; 0xa0
 800dcf4:	02db      	lsls	r3, r3, #11
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d10e      	bne.n	800dd18 <HAL_RCC_OscConfig+0xa4>
 800dcfa:	4baa      	ldr	r3, [pc, #680]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	4ba9      	ldr	r3, [pc, #676]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd00:	2180      	movs	r1, #128	; 0x80
 800dd02:	02c9      	lsls	r1, r1, #11
 800dd04:	430a      	orrs	r2, r1
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	4ba6      	ldr	r3, [pc, #664]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	4ba5      	ldr	r3, [pc, #660]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd0e:	2180      	movs	r1, #128	; 0x80
 800dd10:	0249      	lsls	r1, r1, #9
 800dd12:	430a      	orrs	r2, r1
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	e00b      	b.n	800dd30 <HAL_RCC_OscConfig+0xbc>
 800dd18:	4ba2      	ldr	r3, [pc, #648]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	4ba1      	ldr	r3, [pc, #644]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd1e:	49a2      	ldr	r1, [pc, #648]	; (800dfa8 <HAL_RCC_OscConfig+0x334>)
 800dd20:	400a      	ands	r2, r1
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	4b9f      	ldr	r3, [pc, #636]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	4b9e      	ldr	r3, [pc, #632]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd2a:	49a0      	ldr	r1, [pc, #640]	; (800dfac <HAL_RCC_OscConfig+0x338>)
 800dd2c:	400a      	ands	r2, r1
 800dd2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d014      	beq.n	800dd62 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd38:	f7fb fb20 	bl	800937c <HAL_GetTick>
 800dd3c:	0003      	movs	r3, r0
 800dd3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd40:	e008      	b.n	800dd54 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd42:	f7fb fb1b 	bl	800937c <HAL_GetTick>
 800dd46:	0002      	movs	r2, r0
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	2b64      	cmp	r3, #100	; 0x64
 800dd4e:	d901      	bls.n	800dd54 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800dd50:	2303      	movs	r3, #3
 800dd52:	e2e9      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd54:	4b93      	ldr	r3, [pc, #588]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	2380      	movs	r3, #128	; 0x80
 800dd5a:	029b      	lsls	r3, r3, #10
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	d0f0      	beq.n	800dd42 <HAL_RCC_OscConfig+0xce>
 800dd60:	e015      	b.n	800dd8e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd62:	f7fb fb0b 	bl	800937c <HAL_GetTick>
 800dd66:	0003      	movs	r3, r0
 800dd68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dd6a:	e008      	b.n	800dd7e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd6c:	f7fb fb06 	bl	800937c <HAL_GetTick>
 800dd70:	0002      	movs	r2, r0
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	2b64      	cmp	r3, #100	; 0x64
 800dd78:	d901      	bls.n	800dd7e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	e2d4      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dd7e:	4b89      	ldr	r3, [pc, #548]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	2380      	movs	r3, #128	; 0x80
 800dd84:	029b      	lsls	r3, r3, #10
 800dd86:	4013      	ands	r3, r2
 800dd88:	d1f0      	bne.n	800dd6c <HAL_RCC_OscConfig+0xf8>
 800dd8a:	e000      	b.n	800dd8e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2202      	movs	r2, #2
 800dd94:	4013      	ands	r3, r2
 800dd96:	d100      	bne.n	800dd9a <HAL_RCC_OscConfig+0x126>
 800dd98:	e099      	b.n	800dece <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd9a:	4b82      	ldr	r3, [pc, #520]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	2238      	movs	r2, #56	; 0x38
 800dda0:	4013      	ands	r3, r2
 800dda2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dda4:	4b7f      	ldr	r3, [pc, #508]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	2203      	movs	r2, #3
 800ddaa:	4013      	ands	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800ddae:	69bb      	ldr	r3, [r7, #24]
 800ddb0:	2b10      	cmp	r3, #16
 800ddb2:	d102      	bne.n	800ddba <HAL_RCC_OscConfig+0x146>
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d002      	beq.n	800ddc0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d135      	bne.n	800de2c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ddc0:	4b78      	ldr	r3, [pc, #480]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	2380      	movs	r3, #128	; 0x80
 800ddc6:	00db      	lsls	r3, r3, #3
 800ddc8:	4013      	ands	r3, r2
 800ddca:	d005      	beq.n	800ddd8 <HAL_RCC_OscConfig+0x164>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e2a7      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddd8:	4b72      	ldr	r3, [pc, #456]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	4a74      	ldr	r2, [pc, #464]	; (800dfb0 <HAL_RCC_OscConfig+0x33c>)
 800ddde:	4013      	ands	r3, r2
 800dde0:	0019      	movs	r1, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	021a      	lsls	r2, r3, #8
 800dde8:	4b6e      	ldr	r3, [pc, #440]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800ddea:	430a      	orrs	r2, r1
 800ddec:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ddee:	69bb      	ldr	r3, [r7, #24]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d112      	bne.n	800de1a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800ddf4:	4b6b      	ldr	r3, [pc, #428]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a6e      	ldr	r2, [pc, #440]	; (800dfb4 <HAL_RCC_OscConfig+0x340>)
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	0019      	movs	r1, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	691a      	ldr	r2, [r3, #16]
 800de02:	4b68      	ldr	r3, [pc, #416]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de04:	430a      	orrs	r2, r1
 800de06:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800de08:	4b66      	ldr	r3, [pc, #408]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	0adb      	lsrs	r3, r3, #11
 800de0e:	2207      	movs	r2, #7
 800de10:	4013      	ands	r3, r2
 800de12:	4a69      	ldr	r2, [pc, #420]	; (800dfb8 <HAL_RCC_OscConfig+0x344>)
 800de14:	40da      	lsrs	r2, r3
 800de16:	4b69      	ldr	r3, [pc, #420]	; (800dfbc <HAL_RCC_OscConfig+0x348>)
 800de18:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800de1a:	4b69      	ldr	r3, [pc, #420]	; (800dfc0 <HAL_RCC_OscConfig+0x34c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	0018      	movs	r0, r3
 800de20:	f7fb f892 	bl	8008f48 <HAL_InitTick>
 800de24:	1e03      	subs	r3, r0, #0
 800de26:	d051      	beq.n	800decc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e27d      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d030      	beq.n	800de96 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800de34:	4b5b      	ldr	r3, [pc, #364]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a5e      	ldr	r2, [pc, #376]	; (800dfb4 <HAL_RCC_OscConfig+0x340>)
 800de3a:	4013      	ands	r3, r2
 800de3c:	0019      	movs	r1, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	691a      	ldr	r2, [r3, #16]
 800de42:	4b58      	ldr	r3, [pc, #352]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de44:	430a      	orrs	r2, r1
 800de46:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800de48:	4b56      	ldr	r3, [pc, #344]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	4b55      	ldr	r3, [pc, #340]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de4e:	2180      	movs	r1, #128	; 0x80
 800de50:	0049      	lsls	r1, r1, #1
 800de52:	430a      	orrs	r2, r1
 800de54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de56:	f7fb fa91 	bl	800937c <HAL_GetTick>
 800de5a:	0003      	movs	r3, r0
 800de5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800de5e:	e008      	b.n	800de72 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de60:	f7fb fa8c 	bl	800937c <HAL_GetTick>
 800de64:	0002      	movs	r2, r0
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d901      	bls.n	800de72 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e25a      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800de72:	4b4c      	ldr	r3, [pc, #304]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	2380      	movs	r3, #128	; 0x80
 800de78:	00db      	lsls	r3, r3, #3
 800de7a:	4013      	ands	r3, r2
 800de7c:	d0f0      	beq.n	800de60 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de7e:	4b49      	ldr	r3, [pc, #292]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	4a4b      	ldr	r2, [pc, #300]	; (800dfb0 <HAL_RCC_OscConfig+0x33c>)
 800de84:	4013      	ands	r3, r2
 800de86:	0019      	movs	r1, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	021a      	lsls	r2, r3, #8
 800de8e:	4b45      	ldr	r3, [pc, #276]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de90:	430a      	orrs	r2, r1
 800de92:	605a      	str	r2, [r3, #4]
 800de94:	e01b      	b.n	800dece <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800de96:	4b43      	ldr	r3, [pc, #268]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	4b42      	ldr	r3, [pc, #264]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800de9c:	4949      	ldr	r1, [pc, #292]	; (800dfc4 <HAL_RCC_OscConfig+0x350>)
 800de9e:	400a      	ands	r2, r1
 800dea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dea2:	f7fb fa6b 	bl	800937c <HAL_GetTick>
 800dea6:	0003      	movs	r3, r0
 800dea8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800deaa:	e008      	b.n	800debe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800deac:	f7fb fa66 	bl	800937c <HAL_GetTick>
 800deb0:	0002      	movs	r2, r0
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d901      	bls.n	800debe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800deba:	2303      	movs	r3, #3
 800debc:	e234      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800debe:	4b39      	ldr	r3, [pc, #228]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	2380      	movs	r3, #128	; 0x80
 800dec4:	00db      	lsls	r3, r3, #3
 800dec6:	4013      	ands	r3, r2
 800dec8:	d1f0      	bne.n	800deac <HAL_RCC_OscConfig+0x238>
 800deca:	e000      	b.n	800dece <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800decc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2208      	movs	r2, #8
 800ded4:	4013      	ands	r3, r2
 800ded6:	d047      	beq.n	800df68 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800ded8:	4b32      	ldr	r3, [pc, #200]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800deda:	689b      	ldr	r3, [r3, #8]
 800dedc:	2238      	movs	r2, #56	; 0x38
 800dede:	4013      	ands	r3, r2
 800dee0:	2b18      	cmp	r3, #24
 800dee2:	d10a      	bne.n	800defa <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800dee4:	4b2f      	ldr	r3, [pc, #188]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800dee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee8:	2202      	movs	r2, #2
 800deea:	4013      	ands	r3, r2
 800deec:	d03c      	beq.n	800df68 <HAL_RCC_OscConfig+0x2f4>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d138      	bne.n	800df68 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800def6:	2301      	movs	r3, #1
 800def8:	e216      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d019      	beq.n	800df36 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800df02:	4b28      	ldr	r3, [pc, #160]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df06:	4b27      	ldr	r3, [pc, #156]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df08:	2101      	movs	r1, #1
 800df0a:	430a      	orrs	r2, r1
 800df0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df0e:	f7fb fa35 	bl	800937c <HAL_GetTick>
 800df12:	0003      	movs	r3, r0
 800df14:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df16:	e008      	b.n	800df2a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df18:	f7fb fa30 	bl	800937c <HAL_GetTick>
 800df1c:	0002      	movs	r2, r0
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	1ad3      	subs	r3, r2, r3
 800df22:	2b02      	cmp	r3, #2
 800df24:	d901      	bls.n	800df2a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e1fe      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df2a:	4b1e      	ldr	r3, [pc, #120]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df2e:	2202      	movs	r2, #2
 800df30:	4013      	ands	r3, r2
 800df32:	d0f1      	beq.n	800df18 <HAL_RCC_OscConfig+0x2a4>
 800df34:	e018      	b.n	800df68 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800df36:	4b1b      	ldr	r3, [pc, #108]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800df3a:	4b1a      	ldr	r3, [pc, #104]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df3c:	2101      	movs	r1, #1
 800df3e:	438a      	bics	r2, r1
 800df40:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df42:	f7fb fa1b 	bl	800937c <HAL_GetTick>
 800df46:	0003      	movs	r3, r0
 800df48:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800df4a:	e008      	b.n	800df5e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df4c:	f7fb fa16 	bl	800937c <HAL_GetTick>
 800df50:	0002      	movs	r2, r0
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	2b02      	cmp	r3, #2
 800df58:	d901      	bls.n	800df5e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800df5a:	2303      	movs	r3, #3
 800df5c:	e1e4      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800df5e:	4b11      	ldr	r3, [pc, #68]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df62:	2202      	movs	r2, #2
 800df64:	4013      	ands	r3, r2
 800df66:	d1f1      	bne.n	800df4c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2204      	movs	r2, #4
 800df6e:	4013      	ands	r3, r2
 800df70:	d100      	bne.n	800df74 <HAL_RCC_OscConfig+0x300>
 800df72:	e0c7      	b.n	800e104 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800df74:	231f      	movs	r3, #31
 800df76:	18fb      	adds	r3, r7, r3
 800df78:	2200      	movs	r2, #0
 800df7a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800df7c:	4b09      	ldr	r3, [pc, #36]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	2238      	movs	r2, #56	; 0x38
 800df82:	4013      	ands	r3, r2
 800df84:	2b20      	cmp	r3, #32
 800df86:	d11f      	bne.n	800dfc8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800df88:	4b06      	ldr	r3, [pc, #24]	; (800dfa4 <HAL_RCC_OscConfig+0x330>)
 800df8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df8c:	2202      	movs	r2, #2
 800df8e:	4013      	ands	r3, r2
 800df90:	d100      	bne.n	800df94 <HAL_RCC_OscConfig+0x320>
 800df92:	e0b7      	b.n	800e104 <HAL_RCC_OscConfig+0x490>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d000      	beq.n	800df9e <HAL_RCC_OscConfig+0x32a>
 800df9c:	e0b2      	b.n	800e104 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e1c2      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
 800dfa2:	46c0      	nop			; (mov r8, r8)
 800dfa4:	40021000 	.word	0x40021000
 800dfa8:	fffeffff 	.word	0xfffeffff
 800dfac:	fffbffff 	.word	0xfffbffff
 800dfb0:	ffff80ff 	.word	0xffff80ff
 800dfb4:	ffffc7ff 	.word	0xffffc7ff
 800dfb8:	00f42400 	.word	0x00f42400
 800dfbc:	2000005c 	.word	0x2000005c
 800dfc0:	20000060 	.word	0x20000060
 800dfc4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800dfc8:	4bb5      	ldr	r3, [pc, #724]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800dfca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfcc:	2380      	movs	r3, #128	; 0x80
 800dfce:	055b      	lsls	r3, r3, #21
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	d101      	bne.n	800dfd8 <HAL_RCC_OscConfig+0x364>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <HAL_RCC_OscConfig+0x366>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d011      	beq.n	800e002 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800dfde:	4bb0      	ldr	r3, [pc, #704]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800dfe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfe2:	4baf      	ldr	r3, [pc, #700]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800dfe4:	2180      	movs	r1, #128	; 0x80
 800dfe6:	0549      	lsls	r1, r1, #21
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	63da      	str	r2, [r3, #60]	; 0x3c
 800dfec:	4bac      	ldr	r3, [pc, #688]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800dfee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dff0:	2380      	movs	r3, #128	; 0x80
 800dff2:	055b      	lsls	r3, r3, #21
 800dff4:	4013      	ands	r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
 800dff8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800dffa:	231f      	movs	r3, #31
 800dffc:	18fb      	adds	r3, r7, r3
 800dffe:	2201      	movs	r2, #1
 800e000:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e002:	4ba8      	ldr	r3, [pc, #672]	; (800e2a4 <HAL_RCC_OscConfig+0x630>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	2380      	movs	r3, #128	; 0x80
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4013      	ands	r3, r2
 800e00c:	d11a      	bne.n	800e044 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e00e:	4ba5      	ldr	r3, [pc, #660]	; (800e2a4 <HAL_RCC_OscConfig+0x630>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	4ba4      	ldr	r3, [pc, #656]	; (800e2a4 <HAL_RCC_OscConfig+0x630>)
 800e014:	2180      	movs	r1, #128	; 0x80
 800e016:	0049      	lsls	r1, r1, #1
 800e018:	430a      	orrs	r2, r1
 800e01a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800e01c:	f7fb f9ae 	bl	800937c <HAL_GetTick>
 800e020:	0003      	movs	r3, r0
 800e022:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e024:	e008      	b.n	800e038 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e026:	f7fb f9a9 	bl	800937c <HAL_GetTick>
 800e02a:	0002      	movs	r2, r0
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	2b02      	cmp	r3, #2
 800e032:	d901      	bls.n	800e038 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800e034:	2303      	movs	r3, #3
 800e036:	e177      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e038:	4b9a      	ldr	r3, [pc, #616]	; (800e2a4 <HAL_RCC_OscConfig+0x630>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	2380      	movs	r3, #128	; 0x80
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	4013      	ands	r3, r2
 800e042:	d0f0      	beq.n	800e026 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d106      	bne.n	800e05a <HAL_RCC_OscConfig+0x3e6>
 800e04c:	4b94      	ldr	r3, [pc, #592]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e04e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e050:	4b93      	ldr	r3, [pc, #588]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e052:	2101      	movs	r1, #1
 800e054:	430a      	orrs	r2, r1
 800e056:	65da      	str	r2, [r3, #92]	; 0x5c
 800e058:	e01c      	b.n	800e094 <HAL_RCC_OscConfig+0x420>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d10c      	bne.n	800e07c <HAL_RCC_OscConfig+0x408>
 800e062:	4b8f      	ldr	r3, [pc, #572]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e066:	4b8e      	ldr	r3, [pc, #568]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e068:	2104      	movs	r1, #4
 800e06a:	430a      	orrs	r2, r1
 800e06c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e06e:	4b8c      	ldr	r3, [pc, #560]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e072:	4b8b      	ldr	r3, [pc, #556]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e074:	2101      	movs	r1, #1
 800e076:	430a      	orrs	r2, r1
 800e078:	65da      	str	r2, [r3, #92]	; 0x5c
 800e07a:	e00b      	b.n	800e094 <HAL_RCC_OscConfig+0x420>
 800e07c:	4b88      	ldr	r3, [pc, #544]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e07e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e080:	4b87      	ldr	r3, [pc, #540]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e082:	2101      	movs	r1, #1
 800e084:	438a      	bics	r2, r1
 800e086:	65da      	str	r2, [r3, #92]	; 0x5c
 800e088:	4b85      	ldr	r3, [pc, #532]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e08a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e08c:	4b84      	ldr	r3, [pc, #528]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e08e:	2104      	movs	r1, #4
 800e090:	438a      	bics	r2, r1
 800e092:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d014      	beq.n	800e0c6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e09c:	f7fb f96e 	bl	800937c <HAL_GetTick>
 800e0a0:	0003      	movs	r3, r0
 800e0a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e0a4:	e009      	b.n	800e0ba <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0a6:	f7fb f969 	bl	800937c <HAL_GetTick>
 800e0aa:	0002      	movs	r2, r0
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	1ad3      	subs	r3, r2, r3
 800e0b0:	4a7d      	ldr	r2, [pc, #500]	; (800e2a8 <HAL_RCC_OscConfig+0x634>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d901      	bls.n	800e0ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e136      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e0ba:	4b79      	ldr	r3, [pc, #484]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0be:	2202      	movs	r2, #2
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	d0f0      	beq.n	800e0a6 <HAL_RCC_OscConfig+0x432>
 800e0c4:	e013      	b.n	800e0ee <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0c6:	f7fb f959 	bl	800937c <HAL_GetTick>
 800e0ca:	0003      	movs	r3, r0
 800e0cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e0ce:	e009      	b.n	800e0e4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e0d0:	f7fb f954 	bl	800937c <HAL_GetTick>
 800e0d4:	0002      	movs	r2, r0
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	4a73      	ldr	r2, [pc, #460]	; (800e2a8 <HAL_RCC_OscConfig+0x634>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d901      	bls.n	800e0e4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e121      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e0e4:	4b6e      	ldr	r3, [pc, #440]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e0e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e8:	2202      	movs	r2, #2
 800e0ea:	4013      	ands	r3, r2
 800e0ec:	d1f0      	bne.n	800e0d0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800e0ee:	231f      	movs	r3, #31
 800e0f0:	18fb      	adds	r3, r7, r3
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d105      	bne.n	800e104 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800e0f8:	4b69      	ldr	r3, [pc, #420]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0fc:	4b68      	ldr	r3, [pc, #416]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e0fe:	496b      	ldr	r1, [pc, #428]	; (800e2ac <HAL_RCC_OscConfig+0x638>)
 800e100:	400a      	ands	r2, r1
 800e102:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2220      	movs	r2, #32
 800e10a:	4013      	ands	r3, r2
 800e10c:	d039      	beq.n	800e182 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	69db      	ldr	r3, [r3, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d01b      	beq.n	800e14e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e116:	4b62      	ldr	r3, [pc, #392]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b61      	ldr	r3, [pc, #388]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e11c:	2180      	movs	r1, #128	; 0x80
 800e11e:	03c9      	lsls	r1, r1, #15
 800e120:	430a      	orrs	r2, r1
 800e122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e124:	f7fb f92a 	bl	800937c <HAL_GetTick>
 800e128:	0003      	movs	r3, r0
 800e12a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e12c:	e008      	b.n	800e140 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e12e:	f7fb f925 	bl	800937c <HAL_GetTick>
 800e132:	0002      	movs	r2, r0
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	2b02      	cmp	r3, #2
 800e13a:	d901      	bls.n	800e140 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800e13c:	2303      	movs	r3, #3
 800e13e:	e0f3      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800e140:	4b57      	ldr	r3, [pc, #348]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	2380      	movs	r3, #128	; 0x80
 800e146:	041b      	lsls	r3, r3, #16
 800e148:	4013      	ands	r3, r2
 800e14a:	d0f0      	beq.n	800e12e <HAL_RCC_OscConfig+0x4ba>
 800e14c:	e019      	b.n	800e182 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e14e:	4b54      	ldr	r3, [pc, #336]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	4b53      	ldr	r3, [pc, #332]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e154:	4956      	ldr	r1, [pc, #344]	; (800e2b0 <HAL_RCC_OscConfig+0x63c>)
 800e156:	400a      	ands	r2, r1
 800e158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e15a:	f7fb f90f 	bl	800937c <HAL_GetTick>
 800e15e:	0003      	movs	r3, r0
 800e160:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e162:	e008      	b.n	800e176 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e164:	f7fb f90a 	bl	800937c <HAL_GetTick>
 800e168:	0002      	movs	r2, r0
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d901      	bls.n	800e176 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800e172:	2303      	movs	r3, #3
 800e174:	e0d8      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800e176:	4b4a      	ldr	r3, [pc, #296]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	2380      	movs	r3, #128	; 0x80
 800e17c:	041b      	lsls	r3, r3, #16
 800e17e:	4013      	ands	r3, r2
 800e180:	d1f0      	bne.n	800e164 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a1b      	ldr	r3, [r3, #32]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d100      	bne.n	800e18c <HAL_RCC_OscConfig+0x518>
 800e18a:	e0cc      	b.n	800e326 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e18c:	4b44      	ldr	r3, [pc, #272]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	2238      	movs	r2, #56	; 0x38
 800e192:	4013      	ands	r3, r2
 800e194:	2b10      	cmp	r3, #16
 800e196:	d100      	bne.n	800e19a <HAL_RCC_OscConfig+0x526>
 800e198:	e07b      	b.n	800e292 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	2b02      	cmp	r3, #2
 800e1a0:	d156      	bne.n	800e250 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1a2:	4b3f      	ldr	r3, [pc, #252]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	4b3e      	ldr	r3, [pc, #248]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e1a8:	4942      	ldr	r1, [pc, #264]	; (800e2b4 <HAL_RCC_OscConfig+0x640>)
 800e1aa:	400a      	ands	r2, r1
 800e1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1ae:	f7fb f8e5 	bl	800937c <HAL_GetTick>
 800e1b2:	0003      	movs	r3, r0
 800e1b4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1b6:	e008      	b.n	800e1ca <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1b8:	f7fb f8e0 	bl	800937c <HAL_GetTick>
 800e1bc:	0002      	movs	r2, r0
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	1ad3      	subs	r3, r2, r3
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d901      	bls.n	800e1ca <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e0ae      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1ca:	4b35      	ldr	r3, [pc, #212]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	2380      	movs	r3, #128	; 0x80
 800e1d0:	049b      	lsls	r3, r3, #18
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	d1f0      	bne.n	800e1b8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e1d6:	4b32      	ldr	r3, [pc, #200]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	4a37      	ldr	r2, [pc, #220]	; (800e2b8 <HAL_RCC_OscConfig+0x644>)
 800e1dc:	4013      	ands	r3, r2
 800e1de:	0019      	movs	r1, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e8:	431a      	orrs	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ee:	021b      	lsls	r3, r3, #8
 800e1f0:	431a      	orrs	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1fc:	431a      	orrs	r2, r3
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e202:	431a      	orrs	r2, r3
 800e204:	4b26      	ldr	r3, [pc, #152]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e206:	430a      	orrs	r2, r1
 800e208:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e20a:	4b25      	ldr	r3, [pc, #148]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	4b24      	ldr	r3, [pc, #144]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e210:	2180      	movs	r1, #128	; 0x80
 800e212:	0449      	lsls	r1, r1, #17
 800e214:	430a      	orrs	r2, r1
 800e216:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800e218:	4b21      	ldr	r3, [pc, #132]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e21a:	68da      	ldr	r2, [r3, #12]
 800e21c:	4b20      	ldr	r3, [pc, #128]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e21e:	2180      	movs	r1, #128	; 0x80
 800e220:	0549      	lsls	r1, r1, #21
 800e222:	430a      	orrs	r2, r1
 800e224:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e226:	f7fb f8a9 	bl	800937c <HAL_GetTick>
 800e22a:	0003      	movs	r3, r0
 800e22c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e22e:	e008      	b.n	800e242 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e230:	f7fb f8a4 	bl	800937c <HAL_GetTick>
 800e234:	0002      	movs	r2, r0
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b02      	cmp	r3, #2
 800e23c:	d901      	bls.n	800e242 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800e23e:	2303      	movs	r3, #3
 800e240:	e072      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e242:	4b17      	ldr	r3, [pc, #92]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	2380      	movs	r3, #128	; 0x80
 800e248:	049b      	lsls	r3, r3, #18
 800e24a:	4013      	ands	r3, r2
 800e24c:	d0f0      	beq.n	800e230 <HAL_RCC_OscConfig+0x5bc>
 800e24e:	e06a      	b.n	800e326 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e250:	4b13      	ldr	r3, [pc, #76]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	4b12      	ldr	r3, [pc, #72]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e256:	4917      	ldr	r1, [pc, #92]	; (800e2b4 <HAL_RCC_OscConfig+0x640>)
 800e258:	400a      	ands	r2, r1
 800e25a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e25c:	f7fb f88e 	bl	800937c <HAL_GetTick>
 800e260:	0003      	movs	r3, r0
 800e262:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e264:	e008      	b.n	800e278 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e266:	f7fb f889 	bl	800937c <HAL_GetTick>
 800e26a:	0002      	movs	r2, r0
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	2b02      	cmp	r3, #2
 800e272:	d901      	bls.n	800e278 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800e274:	2303      	movs	r3, #3
 800e276:	e057      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e278:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	2380      	movs	r3, #128	; 0x80
 800e27e:	049b      	lsls	r3, r3, #18
 800e280:	4013      	ands	r3, r2
 800e282:	d1f0      	bne.n	800e266 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800e284:	4b06      	ldr	r3, [pc, #24]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	4b05      	ldr	r3, [pc, #20]	; (800e2a0 <HAL_RCC_OscConfig+0x62c>)
 800e28a:	490c      	ldr	r1, [pc, #48]	; (800e2bc <HAL_RCC_OscConfig+0x648>)
 800e28c:	400a      	ands	r2, r1
 800e28e:	60da      	str	r2, [r3, #12]
 800e290:	e049      	b.n	800e326 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d112      	bne.n	800e2c0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e044      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	40021000 	.word	0x40021000
 800e2a4:	40007000 	.word	0x40007000
 800e2a8:	00001388 	.word	0x00001388
 800e2ac:	efffffff 	.word	0xefffffff
 800e2b0:	ffbfffff 	.word	0xffbfffff
 800e2b4:	feffffff 	.word	0xfeffffff
 800e2b8:	11c1808c 	.word	0x11c1808c
 800e2bc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800e2c0:	4b1b      	ldr	r3, [pc, #108]	; (800e330 <HAL_RCC_OscConfig+0x6bc>)
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2203      	movs	r2, #3
 800e2ca:	401a      	ands	r2, r3
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d126      	bne.n	800e322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	2270      	movs	r2, #112	; 0x70
 800e2d8:	401a      	ands	r2, r3
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d11f      	bne.n	800e322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	23fe      	movs	r3, #254	; 0xfe
 800e2e6:	01db      	lsls	r3, r3, #7
 800e2e8:	401a      	ands	r2, r3
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ee:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d116      	bne.n	800e322 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e2f4:	697a      	ldr	r2, [r7, #20]
 800e2f6:	23f8      	movs	r3, #248	; 0xf8
 800e2f8:	039b      	lsls	r3, r3, #14
 800e2fa:	401a      	ands	r2, r3
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e300:	429a      	cmp	r2, r3
 800e302:	d10e      	bne.n	800e322 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	23e0      	movs	r3, #224	; 0xe0
 800e308:	051b      	lsls	r3, r3, #20
 800e30a:	401a      	ands	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800e310:	429a      	cmp	r2, r3
 800e312:	d106      	bne.n	800e322 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	0f5b      	lsrs	r3, r3, #29
 800e318:	075a      	lsls	r2, r3, #29
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800e31e:	429a      	cmp	r2, r3
 800e320:	d001      	beq.n	800e326 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	e000      	b.n	800e328 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	0018      	movs	r0, r3
 800e32a:	46bd      	mov	sp, r7
 800e32c:	b008      	add	sp, #32
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	40021000 	.word	0x40021000

0800e334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d101      	bne.n	800e348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e344:	2301      	movs	r3, #1
 800e346:	e0e9      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e348:	4b76      	ldr	r3, [pc, #472]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2207      	movs	r2, #7
 800e34e:	4013      	ands	r3, r2
 800e350:	683a      	ldr	r2, [r7, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	d91e      	bls.n	800e394 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e356:	4b73      	ldr	r3, [pc, #460]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	2207      	movs	r2, #7
 800e35c:	4393      	bics	r3, r2
 800e35e:	0019      	movs	r1, r3
 800e360:	4b70      	ldr	r3, [pc, #448]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	430a      	orrs	r2, r1
 800e366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e368:	f7fb f808 	bl	800937c <HAL_GetTick>
 800e36c:	0003      	movs	r3, r0
 800e36e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e370:	e009      	b.n	800e386 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e372:	f7fb f803 	bl	800937c <HAL_GetTick>
 800e376:	0002      	movs	r2, r0
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	1ad3      	subs	r3, r2, r3
 800e37c:	4a6a      	ldr	r2, [pc, #424]	; (800e528 <HAL_RCC_ClockConfig+0x1f4>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d901      	bls.n	800e386 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e0ca      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e386:	4b67      	ldr	r3, [pc, #412]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2207      	movs	r2, #7
 800e38c:	4013      	ands	r3, r2
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	429a      	cmp	r2, r3
 800e392:	d1ee      	bne.n	800e372 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2202      	movs	r2, #2
 800e39a:	4013      	ands	r3, r2
 800e39c:	d015      	beq.n	800e3ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2204      	movs	r2, #4
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	d006      	beq.n	800e3b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800e3a8:	4b60      	ldr	r3, [pc, #384]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3aa:	689a      	ldr	r2, [r3, #8]
 800e3ac:	4b5f      	ldr	r3, [pc, #380]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3ae:	21e0      	movs	r1, #224	; 0xe0
 800e3b0:	01c9      	lsls	r1, r1, #7
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e3b6:	4b5d      	ldr	r3, [pc, #372]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	4a5d      	ldr	r2, [pc, #372]	; (800e530 <HAL_RCC_ClockConfig+0x1fc>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	0019      	movs	r1, r3
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689a      	ldr	r2, [r3, #8]
 800e3c4:	4b59      	ldr	r3, [pc, #356]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3c6:	430a      	orrs	r2, r1
 800e3c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	d057      	beq.n	800e484 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d107      	bne.n	800e3ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e3dc:	4b53      	ldr	r3, [pc, #332]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	2380      	movs	r3, #128	; 0x80
 800e3e2:	029b      	lsls	r3, r3, #10
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	d12b      	bne.n	800e440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e097      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d107      	bne.n	800e404 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e3f4:	4b4d      	ldr	r3, [pc, #308]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	2380      	movs	r3, #128	; 0x80
 800e3fa:	049b      	lsls	r3, r3, #18
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	d11f      	bne.n	800e440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	e08b      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d107      	bne.n	800e41c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e40c:	4b47      	ldr	r3, [pc, #284]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	2380      	movs	r3, #128	; 0x80
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	4013      	ands	r3, r2
 800e416:	d113      	bne.n	800e440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e418:	2301      	movs	r3, #1
 800e41a:	e07f      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	2b03      	cmp	r3, #3
 800e422:	d106      	bne.n	800e432 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e424:	4b41      	ldr	r3, [pc, #260]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e428:	2202      	movs	r2, #2
 800e42a:	4013      	ands	r3, r2
 800e42c:	d108      	bne.n	800e440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e42e:	2301      	movs	r3, #1
 800e430:	e074      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e432:	4b3e      	ldr	r3, [pc, #248]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e436:	2202      	movs	r2, #2
 800e438:	4013      	ands	r3, r2
 800e43a:	d101      	bne.n	800e440 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e06d      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e440:	4b3a      	ldr	r3, [pc, #232]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	2207      	movs	r2, #7
 800e446:	4393      	bics	r3, r2
 800e448:	0019      	movs	r1, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	685a      	ldr	r2, [r3, #4]
 800e44e:	4b37      	ldr	r3, [pc, #220]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e450:	430a      	orrs	r2, r1
 800e452:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e454:	f7fa ff92 	bl	800937c <HAL_GetTick>
 800e458:	0003      	movs	r3, r0
 800e45a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e45c:	e009      	b.n	800e472 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e45e:	f7fa ff8d 	bl	800937c <HAL_GetTick>
 800e462:	0002      	movs	r2, r0
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	1ad3      	subs	r3, r2, r3
 800e468:	4a2f      	ldr	r2, [pc, #188]	; (800e528 <HAL_RCC_ClockConfig+0x1f4>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d901      	bls.n	800e472 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e054      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e472:	4b2e      	ldr	r3, [pc, #184]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	2238      	movs	r2, #56	; 0x38
 800e478:	401a      	ands	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	00db      	lsls	r3, r3, #3
 800e480:	429a      	cmp	r2, r3
 800e482:	d1ec      	bne.n	800e45e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e484:	4b27      	ldr	r3, [pc, #156]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2207      	movs	r2, #7
 800e48a:	4013      	ands	r3, r2
 800e48c:	683a      	ldr	r2, [r7, #0]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d21e      	bcs.n	800e4d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e492:	4b24      	ldr	r3, [pc, #144]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2207      	movs	r2, #7
 800e498:	4393      	bics	r3, r2
 800e49a:	0019      	movs	r1, r3
 800e49c:	4b21      	ldr	r3, [pc, #132]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	430a      	orrs	r2, r1
 800e4a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e4a4:	f7fa ff6a 	bl	800937c <HAL_GetTick>
 800e4a8:	0003      	movs	r3, r0
 800e4aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e4ac:	e009      	b.n	800e4c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4ae:	f7fa ff65 	bl	800937c <HAL_GetTick>
 800e4b2:	0002      	movs	r2, r0
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	4a1b      	ldr	r2, [pc, #108]	; (800e528 <HAL_RCC_ClockConfig+0x1f4>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d901      	bls.n	800e4c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	e02c      	b.n	800e51c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800e4c2:	4b18      	ldr	r3, [pc, #96]	; (800e524 <HAL_RCC_ClockConfig+0x1f0>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	2207      	movs	r2, #7
 800e4c8:	4013      	ands	r3, r2
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d1ee      	bne.n	800e4ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2204      	movs	r2, #4
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	d009      	beq.n	800e4ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800e4da:	4b14      	ldr	r3, [pc, #80]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	4a15      	ldr	r2, [pc, #84]	; (800e534 <HAL_RCC_ClockConfig+0x200>)
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	0019      	movs	r1, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	68da      	ldr	r2, [r3, #12]
 800e4e8:	4b10      	ldr	r3, [pc, #64]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800e4ee:	f000 f829 	bl	800e544 <HAL_RCC_GetSysClockFreq>
 800e4f2:	0001      	movs	r1, r0
 800e4f4:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <HAL_RCC_ClockConfig+0x1f8>)
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	0a1b      	lsrs	r3, r3, #8
 800e4fa:	220f      	movs	r2, #15
 800e4fc:	401a      	ands	r2, r3
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <HAL_RCC_ClockConfig+0x204>)
 800e500:	0092      	lsls	r2, r2, #2
 800e502:	58d3      	ldr	r3, [r2, r3]
 800e504:	221f      	movs	r2, #31
 800e506:	4013      	ands	r3, r2
 800e508:	000a      	movs	r2, r1
 800e50a:	40da      	lsrs	r2, r3
 800e50c:	4b0b      	ldr	r3, [pc, #44]	; (800e53c <HAL_RCC_ClockConfig+0x208>)
 800e50e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e510:	4b0b      	ldr	r3, [pc, #44]	; (800e540 <HAL_RCC_ClockConfig+0x20c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	0018      	movs	r0, r3
 800e516:	f7fa fd17 	bl	8008f48 <HAL_InitTick>
 800e51a:	0003      	movs	r3, r0
}
 800e51c:	0018      	movs	r0, r3
 800e51e:	46bd      	mov	sp, r7
 800e520:	b004      	add	sp, #16
 800e522:	bd80      	pop	{r7, pc}
 800e524:	40022000 	.word	0x40022000
 800e528:	00001388 	.word	0x00001388
 800e52c:	40021000 	.word	0x40021000
 800e530:	fffff0ff 	.word	0xfffff0ff
 800e534:	ffff8fff 	.word	0xffff8fff
 800e538:	08024f1c 	.word	0x08024f1c
 800e53c:	2000005c 	.word	0x2000005c
 800e540:	20000060 	.word	0x20000060

0800e544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e54a:	4b3c      	ldr	r3, [pc, #240]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	2238      	movs	r2, #56	; 0x38
 800e550:	4013      	ands	r3, r2
 800e552:	d10f      	bne.n	800e574 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e554:	4b39      	ldr	r3, [pc, #228]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	0adb      	lsrs	r3, r3, #11
 800e55a:	2207      	movs	r2, #7
 800e55c:	4013      	ands	r3, r2
 800e55e:	2201      	movs	r2, #1
 800e560:	409a      	lsls	r2, r3
 800e562:	0013      	movs	r3, r2
 800e564:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	4835      	ldr	r0, [pc, #212]	; (800e640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e56a:	f7f7 fe41 	bl	80061f0 <__udivsi3>
 800e56e:	0003      	movs	r3, r0
 800e570:	613b      	str	r3, [r7, #16]
 800e572:	e05d      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e574:	4b31      	ldr	r3, [pc, #196]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	2238      	movs	r2, #56	; 0x38
 800e57a:	4013      	ands	r3, r2
 800e57c:	2b08      	cmp	r3, #8
 800e57e:	d102      	bne.n	800e586 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e580:	4b2f      	ldr	r3, [pc, #188]	; (800e640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e582:	613b      	str	r3, [r7, #16]
 800e584:	e054      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e586:	4b2d      	ldr	r3, [pc, #180]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	2238      	movs	r2, #56	; 0x38
 800e58c:	4013      	ands	r3, r2
 800e58e:	2b10      	cmp	r3, #16
 800e590:	d138      	bne.n	800e604 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800e592:	4b2a      	ldr	r3, [pc, #168]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	2203      	movs	r2, #3
 800e598:	4013      	ands	r3, r2
 800e59a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e59c:	4b27      	ldr	r3, [pc, #156]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	091b      	lsrs	r3, r3, #4
 800e5a2:	2207      	movs	r2, #7
 800e5a4:	4013      	ands	r3, r2
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b03      	cmp	r3, #3
 800e5ae:	d10d      	bne.n	800e5cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e5b0:	68b9      	ldr	r1, [r7, #8]
 800e5b2:	4823      	ldr	r0, [pc, #140]	; (800e640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e5b4:	f7f7 fe1c 	bl	80061f0 <__udivsi3>
 800e5b8:	0003      	movs	r3, r0
 800e5ba:	0019      	movs	r1, r3
 800e5bc:	4b1f      	ldr	r3, [pc, #124]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	0a1b      	lsrs	r3, r3, #8
 800e5c2:	227f      	movs	r2, #127	; 0x7f
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	434b      	muls	r3, r1
 800e5c8:	617b      	str	r3, [r7, #20]
        break;
 800e5ca:	e00d      	b.n	800e5e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800e5cc:	68b9      	ldr	r1, [r7, #8]
 800e5ce:	481c      	ldr	r0, [pc, #112]	; (800e640 <HAL_RCC_GetSysClockFreq+0xfc>)
 800e5d0:	f7f7 fe0e 	bl	80061f0 <__udivsi3>
 800e5d4:	0003      	movs	r3, r0
 800e5d6:	0019      	movs	r1, r3
 800e5d8:	4b18      	ldr	r3, [pc, #96]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	227f      	movs	r2, #127	; 0x7f
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	434b      	muls	r3, r1
 800e5e4:	617b      	str	r3, [r7, #20]
        break;
 800e5e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800e5e8:	4b14      	ldr	r3, [pc, #80]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	0f5b      	lsrs	r3, r3, #29
 800e5ee:	2207      	movs	r2, #7
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800e5f6:	6879      	ldr	r1, [r7, #4]
 800e5f8:	6978      	ldr	r0, [r7, #20]
 800e5fa:	f7f7 fdf9 	bl	80061f0 <__udivsi3>
 800e5fe:	0003      	movs	r3, r0
 800e600:	613b      	str	r3, [r7, #16]
 800e602:	e015      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800e604:	4b0d      	ldr	r3, [pc, #52]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	2238      	movs	r2, #56	; 0x38
 800e60a:	4013      	ands	r3, r2
 800e60c:	2b20      	cmp	r3, #32
 800e60e:	d103      	bne.n	800e618 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800e610:	2380      	movs	r3, #128	; 0x80
 800e612:	021b      	lsls	r3, r3, #8
 800e614:	613b      	str	r3, [r7, #16]
 800e616:	e00b      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800e618:	4b08      	ldr	r3, [pc, #32]	; (800e63c <HAL_RCC_GetSysClockFreq+0xf8>)
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	2238      	movs	r2, #56	; 0x38
 800e61e:	4013      	ands	r3, r2
 800e620:	2b18      	cmp	r3, #24
 800e622:	d103      	bne.n	800e62c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800e624:	23fa      	movs	r3, #250	; 0xfa
 800e626:	01db      	lsls	r3, r3, #7
 800e628:	613b      	str	r3, [r7, #16]
 800e62a:	e001      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e630:	693b      	ldr	r3, [r7, #16]
}
 800e632:	0018      	movs	r0, r3
 800e634:	46bd      	mov	sp, r7
 800e636:	b006      	add	sp, #24
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	46c0      	nop			; (mov r8, r8)
 800e63c:	40021000 	.word	0x40021000
 800e640:	00f42400 	.word	0x00f42400

0800e644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e648:	4b02      	ldr	r3, [pc, #8]	; (800e654 <HAL_RCC_GetHCLKFreq+0x10>)
 800e64a:	681b      	ldr	r3, [r3, #0]
}
 800e64c:	0018      	movs	r0, r3
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	46c0      	nop			; (mov r8, r8)
 800e654:	2000005c 	.word	0x2000005c

0800e658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e658:	b5b0      	push	{r4, r5, r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e65c:	f7ff fff2 	bl	800e644 <HAL_RCC_GetHCLKFreq>
 800e660:	0004      	movs	r4, r0
 800e662:	f7ff fafb 	bl	800dc5c <LL_RCC_GetAPB1Prescaler>
 800e666:	0003      	movs	r3, r0
 800e668:	0b1a      	lsrs	r2, r3, #12
 800e66a:	4b05      	ldr	r3, [pc, #20]	; (800e680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e66c:	0092      	lsls	r2, r2, #2
 800e66e:	58d3      	ldr	r3, [r2, r3]
 800e670:	221f      	movs	r2, #31
 800e672:	4013      	ands	r3, r2
 800e674:	40dc      	lsrs	r4, r3
 800e676:	0023      	movs	r3, r4
}
 800e678:	0018      	movs	r0, r3
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bdb0      	pop	{r4, r5, r7, pc}
 800e67e:	46c0      	nop			; (mov r8, r8)
 800e680:	08024f5c 	.word	0x08024f5c

0800e684 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2207      	movs	r2, #7
 800e692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e694:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <HAL_RCC_GetClockConfig+0x4c>)
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	2207      	movs	r2, #7
 800e69a:	401a      	ands	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e6a0:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <HAL_RCC_GetClockConfig+0x4c>)
 800e6a2:	689a      	ldr	r2, [r3, #8]
 800e6a4:	23f0      	movs	r3, #240	; 0xf0
 800e6a6:	011b      	lsls	r3, r3, #4
 800e6a8:	401a      	ands	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800e6ae:	4b08      	ldr	r3, [pc, #32]	; (800e6d0 <HAL_RCC_GetClockConfig+0x4c>)
 800e6b0:	689a      	ldr	r2, [r3, #8]
 800e6b2:	23e0      	movs	r3, #224	; 0xe0
 800e6b4:	01db      	lsls	r3, r3, #7
 800e6b6:	401a      	ands	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e6bc:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <HAL_RCC_GetClockConfig+0x50>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2207      	movs	r2, #7
 800e6c2:	401a      	ands	r2, r3
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	601a      	str	r2, [r3, #0]
}
 800e6c8:	46c0      	nop			; (mov r8, r8)
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	b002      	add	sp, #8
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	40021000 	.word	0x40021000
 800e6d4:	40022000 	.word	0x40022000

0800e6d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800e6e0:	2313      	movs	r3, #19
 800e6e2:	18fb      	adds	r3, r7, r3
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e6e8:	2312      	movs	r3, #18
 800e6ea:	18fb      	adds	r3, r7, r3
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	2380      	movs	r3, #128	; 0x80
 800e6f6:	029b      	lsls	r3, r3, #10
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	d100      	bne.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 800e6fc:	e0ad      	b.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e6fe:	2011      	movs	r0, #17
 800e700:	183b      	adds	r3, r7, r0
 800e702:	2200      	movs	r2, #0
 800e704:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e706:	4b47      	ldr	r3, [pc, #284]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e70a:	2380      	movs	r3, #128	; 0x80
 800e70c:	055b      	lsls	r3, r3, #21
 800e70e:	4013      	ands	r3, r2
 800e710:	d110      	bne.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e712:	4b44      	ldr	r3, [pc, #272]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e716:	4b43      	ldr	r3, [pc, #268]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e718:	2180      	movs	r1, #128	; 0x80
 800e71a:	0549      	lsls	r1, r1, #21
 800e71c:	430a      	orrs	r2, r1
 800e71e:	63da      	str	r2, [r3, #60]	; 0x3c
 800e720:	4b40      	ldr	r3, [pc, #256]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e724:	2380      	movs	r3, #128	; 0x80
 800e726:	055b      	lsls	r3, r3, #21
 800e728:	4013      	ands	r3, r2
 800e72a:	60bb      	str	r3, [r7, #8]
 800e72c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e72e:	183b      	adds	r3, r7, r0
 800e730:	2201      	movs	r2, #1
 800e732:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e734:	4b3c      	ldr	r3, [pc, #240]	; (800e828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	4b3b      	ldr	r3, [pc, #236]	; (800e828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e73a:	2180      	movs	r1, #128	; 0x80
 800e73c:	0049      	lsls	r1, r1, #1
 800e73e:	430a      	orrs	r2, r1
 800e740:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e742:	f7fa fe1b 	bl	800937c <HAL_GetTick>
 800e746:	0003      	movs	r3, r0
 800e748:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e74a:	e00b      	b.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e74c:	f7fa fe16 	bl	800937c <HAL_GetTick>
 800e750:	0002      	movs	r2, r0
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	2b02      	cmp	r3, #2
 800e758:	d904      	bls.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800e75a:	2313      	movs	r3, #19
 800e75c:	18fb      	adds	r3, r7, r3
 800e75e:	2203      	movs	r2, #3
 800e760:	701a      	strb	r2, [r3, #0]
        break;
 800e762:	e005      	b.n	800e770 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e764:	4b30      	ldr	r3, [pc, #192]	; (800e828 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	2380      	movs	r3, #128	; 0x80
 800e76a:	005b      	lsls	r3, r3, #1
 800e76c:	4013      	ands	r3, r2
 800e76e:	d0ed      	beq.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800e770:	2313      	movs	r3, #19
 800e772:	18fb      	adds	r3, r7, r3
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d15e      	bne.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e77a:	4b2a      	ldr	r3, [pc, #168]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e77c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e77e:	23c0      	movs	r3, #192	; 0xc0
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4013      	ands	r3, r2
 800e784:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d019      	beq.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	429a      	cmp	r2, r3
 800e794:	d014      	beq.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e796:	4b23      	ldr	r3, [pc, #140]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e79a:	4a24      	ldr	r2, [pc, #144]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800e79c:	4013      	ands	r3, r2
 800e79e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e7a0:	4b20      	ldr	r3, [pc, #128]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7a4:	4b1f      	ldr	r3, [pc, #124]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7a6:	2180      	movs	r1, #128	; 0x80
 800e7a8:	0249      	lsls	r1, r1, #9
 800e7aa:	430a      	orrs	r2, r1
 800e7ac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e7ae:	4b1d      	ldr	r3, [pc, #116]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e7b2:	4b1c      	ldr	r3, [pc, #112]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7b4:	491e      	ldr	r1, [pc, #120]	; (800e830 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800e7b6:	400a      	ands	r2, r1
 800e7b8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e7ba:	4b1a      	ldr	r3, [pc, #104]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	4013      	ands	r3, r2
 800e7c6:	d016      	beq.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c8:	f7fa fdd8 	bl	800937c <HAL_GetTick>
 800e7cc:	0003      	movs	r3, r0
 800e7ce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e7d0:	e00c      	b.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7d2:	f7fa fdd3 	bl	800937c <HAL_GetTick>
 800e7d6:	0002      	movs	r2, r0
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	1ad3      	subs	r3, r2, r3
 800e7dc:	4a15      	ldr	r2, [pc, #84]	; (800e834 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d904      	bls.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800e7e2:	2313      	movs	r3, #19
 800e7e4:	18fb      	adds	r3, r7, r3
 800e7e6:	2203      	movs	r2, #3
 800e7e8:	701a      	strb	r2, [r3, #0]
            break;
 800e7ea:	e004      	b.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e7ec:	4b0d      	ldr	r3, [pc, #52]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e7ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f0:	2202      	movs	r2, #2
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	d0ed      	beq.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800e7f6:	2313      	movs	r3, #19
 800e7f8:	18fb      	adds	r3, r7, r3
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e800:	4b08      	ldr	r3, [pc, #32]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e804:	4a09      	ldr	r2, [pc, #36]	; (800e82c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800e806:	4013      	ands	r3, r2
 800e808:	0019      	movs	r1, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e80e:	4b05      	ldr	r3, [pc, #20]	; (800e824 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800e810:	430a      	orrs	r2, r1
 800e812:	65da      	str	r2, [r3, #92]	; 0x5c
 800e814:	e016      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e816:	2312      	movs	r3, #18
 800e818:	18fb      	adds	r3, r7, r3
 800e81a:	2213      	movs	r2, #19
 800e81c:	18ba      	adds	r2, r7, r2
 800e81e:	7812      	ldrb	r2, [r2, #0]
 800e820:	701a      	strb	r2, [r3, #0]
 800e822:	e00f      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800e824:	40021000 	.word	0x40021000
 800e828:	40007000 	.word	0x40007000
 800e82c:	fffffcff 	.word	0xfffffcff
 800e830:	fffeffff 	.word	0xfffeffff
 800e834:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e838:	2312      	movs	r3, #18
 800e83a:	18fb      	adds	r3, r7, r3
 800e83c:	2213      	movs	r2, #19
 800e83e:	18ba      	adds	r2, r7, r2
 800e840:	7812      	ldrb	r2, [r2, #0]
 800e842:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e844:	2311      	movs	r3, #17
 800e846:	18fb      	adds	r3, r7, r3
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d105      	bne.n	800e85a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e84e:	4bb6      	ldr	r3, [pc, #728]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e852:	4bb5      	ldr	r3, [pc, #724]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e854:	49b5      	ldr	r1, [pc, #724]	; (800eb2c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800e856:	400a      	ands	r2, r1
 800e858:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2201      	movs	r2, #1
 800e860:	4013      	ands	r3, r2
 800e862:	d009      	beq.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e864:	4bb0      	ldr	r3, [pc, #704]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e868:	2203      	movs	r2, #3
 800e86a:	4393      	bics	r3, r2
 800e86c:	0019      	movs	r1, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	4bad      	ldr	r3, [pc, #692]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e874:	430a      	orrs	r2, r1
 800e876:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2202      	movs	r2, #2
 800e87e:	4013      	ands	r3, r2
 800e880:	d009      	beq.n	800e896 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e882:	4ba9      	ldr	r3, [pc, #676]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e886:	220c      	movs	r2, #12
 800e888:	4393      	bics	r3, r2
 800e88a:	0019      	movs	r1, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689a      	ldr	r2, [r3, #8]
 800e890:	4ba5      	ldr	r3, [pc, #660]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e892:	430a      	orrs	r2, r1
 800e894:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2204      	movs	r2, #4
 800e89c:	4013      	ands	r3, r2
 800e89e:	d009      	beq.n	800e8b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e8a0:	4ba1      	ldr	r3, [pc, #644]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8a4:	2230      	movs	r2, #48	; 0x30
 800e8a6:	4393      	bics	r3, r2
 800e8a8:	0019      	movs	r1, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68da      	ldr	r2, [r3, #12]
 800e8ae:	4b9e      	ldr	r3, [pc, #632]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8b0:	430a      	orrs	r2, r1
 800e8b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2210      	movs	r2, #16
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	d009      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e8be:	4b9a      	ldr	r3, [pc, #616]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8c2:	4a9b      	ldr	r2, [pc, #620]	; (800eb30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	0019      	movs	r1, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	691a      	ldr	r2, [r3, #16]
 800e8cc:	4b96      	ldr	r3, [pc, #600]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8ce:	430a      	orrs	r2, r1
 800e8d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	2380      	movs	r3, #128	; 0x80
 800e8d8:	015b      	lsls	r3, r3, #5
 800e8da:	4013      	ands	r3, r2
 800e8dc:	d009      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800e8de:	4b92      	ldr	r3, [pc, #584]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e2:	4a94      	ldr	r2, [pc, #592]	; (800eb34 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	0019      	movs	r1, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	695a      	ldr	r2, [r3, #20]
 800e8ec:	4b8e      	ldr	r3, [pc, #568]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	2380      	movs	r3, #128	; 0x80
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	d009      	beq.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e8fe:	4b8a      	ldr	r3, [pc, #552]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e902:	4a8d      	ldr	r2, [pc, #564]	; (800eb38 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800e904:	4013      	ands	r3, r2
 800e906:	0019      	movs	r1, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e90c:	4b86      	ldr	r3, [pc, #536]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e90e:	430a      	orrs	r2, r1
 800e910:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	2380      	movs	r3, #128	; 0x80
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	4013      	ands	r3, r2
 800e91c:	d009      	beq.n	800e932 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e91e:	4b82      	ldr	r3, [pc, #520]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e922:	4a86      	ldr	r2, [pc, #536]	; (800eb3c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800e924:	4013      	ands	r3, r2
 800e926:	0019      	movs	r1, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92c:	4b7e      	ldr	r3, [pc, #504]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e92e:	430a      	orrs	r2, r1
 800e930:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2220      	movs	r2, #32
 800e938:	4013      	ands	r3, r2
 800e93a:	d009      	beq.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e93c:	4b7a      	ldr	r3, [pc, #488]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e940:	4a7f      	ldr	r2, [pc, #508]	; (800eb40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800e942:	4013      	ands	r3, r2
 800e944:	0019      	movs	r1, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	699a      	ldr	r2, [r3, #24]
 800e94a:	4b77      	ldr	r3, [pc, #476]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e94c:	430a      	orrs	r2, r1
 800e94e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2240      	movs	r2, #64	; 0x40
 800e956:	4013      	ands	r3, r2
 800e958:	d009      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e95a:	4b73      	ldr	r3, [pc, #460]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e95e:	4a79      	ldr	r2, [pc, #484]	; (800eb44 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800e960:	4013      	ands	r3, r2
 800e962:	0019      	movs	r1, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	69da      	ldr	r2, [r3, #28]
 800e968:	4b6f      	ldr	r3, [pc, #444]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e96a:	430a      	orrs	r2, r1
 800e96c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	2380      	movs	r3, #128	; 0x80
 800e974:	01db      	lsls	r3, r3, #7
 800e976:	4013      	ands	r3, r2
 800e978:	d015      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e97a:	4b6b      	ldr	r3, [pc, #428]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	0899      	lsrs	r1, r3, #2
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e986:	4b68      	ldr	r3, [pc, #416]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e988:	430a      	orrs	r2, r1
 800e98a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e990:	2380      	movs	r3, #128	; 0x80
 800e992:	05db      	lsls	r3, r3, #23
 800e994:	429a      	cmp	r2, r3
 800e996:	d106      	bne.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800e998:	4b63      	ldr	r3, [pc, #396]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e99a:	68da      	ldr	r2, [r3, #12]
 800e99c:	4b62      	ldr	r3, [pc, #392]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e99e:	2180      	movs	r1, #128	; 0x80
 800e9a0:	0249      	lsls	r1, r1, #9
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	2380      	movs	r3, #128	; 0x80
 800e9ac:	031b      	lsls	r3, r3, #12
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	d009      	beq.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e9b2:	4b5d      	ldr	r3, [pc, #372]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b6:	2240      	movs	r2, #64	; 0x40
 800e9b8:	4393      	bics	r3, r2
 800e9ba:	0019      	movs	r1, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9c0:	4b59      	ldr	r3, [pc, #356]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9c2:	430a      	orrs	r2, r1
 800e9c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	2380      	movs	r3, #128	; 0x80
 800e9cc:	039b      	lsls	r3, r3, #14
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	d016      	beq.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800e9d2:	4b55      	ldr	r3, [pc, #340]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d6:	4a5c      	ldr	r2, [pc, #368]	; (800eb48 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800e9d8:	4013      	ands	r3, r2
 800e9da:	0019      	movs	r1, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9e0:	4b51      	ldr	r3, [pc, #324]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9e2:	430a      	orrs	r2, r1
 800e9e4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9ea:	2380      	movs	r3, #128	; 0x80
 800e9ec:	03db      	lsls	r3, r3, #15
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d106      	bne.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800e9f2:	4b4d      	ldr	r3, [pc, #308]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9f4:	68da      	ldr	r2, [r3, #12]
 800e9f6:	4b4c      	ldr	r3, [pc, #304]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800e9f8:	2180      	movs	r1, #128	; 0x80
 800e9fa:	0449      	lsls	r1, r1, #17
 800e9fc:	430a      	orrs	r2, r1
 800e9fe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	2380      	movs	r3, #128	; 0x80
 800ea06:	03db      	lsls	r3, r3, #15
 800ea08:	4013      	ands	r3, r2
 800ea0a:	d016      	beq.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800ea0c:	4b46      	ldr	r3, [pc, #280]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea10:	4a4e      	ldr	r2, [pc, #312]	; (800eb4c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ea12:	4013      	ands	r3, r2
 800ea14:	0019      	movs	r1, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea1a:	4b43      	ldr	r3, [pc, #268]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea1c:	430a      	orrs	r2, r1
 800ea1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ea24:	2380      	movs	r3, #128	; 0x80
 800ea26:	045b      	lsls	r3, r3, #17
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d106      	bne.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ea2c:	4b3e      	ldr	r3, [pc, #248]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea2e:	68da      	ldr	r2, [r3, #12]
 800ea30:	4b3d      	ldr	r3, [pc, #244]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea32:	2180      	movs	r1, #128	; 0x80
 800ea34:	0449      	lsls	r1, r1, #17
 800ea36:	430a      	orrs	r2, r1
 800ea38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	2380      	movs	r3, #128	; 0x80
 800ea40:	011b      	lsls	r3, r3, #4
 800ea42:	4013      	ands	r3, r2
 800ea44:	d014      	beq.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800ea46:	4b38      	ldr	r3, [pc, #224]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea4a:	2203      	movs	r2, #3
 800ea4c:	4393      	bics	r3, r2
 800ea4e:	0019      	movs	r1, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a1a      	ldr	r2, [r3, #32]
 800ea54:	4b34      	ldr	r3, [pc, #208]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea56:	430a      	orrs	r2, r1
 800ea58:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d106      	bne.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ea62:	4b31      	ldr	r3, [pc, #196]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea64:	68da      	ldr	r2, [r3, #12]
 800ea66:	4b30      	ldr	r3, [pc, #192]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea68:	2180      	movs	r1, #128	; 0x80
 800ea6a:	0249      	lsls	r1, r1, #9
 800ea6c:	430a      	orrs	r2, r1
 800ea6e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	2380      	movs	r3, #128	; 0x80
 800ea76:	019b      	lsls	r3, r3, #6
 800ea78:	4013      	ands	r3, r2
 800ea7a:	d014      	beq.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800ea7c:	4b2a      	ldr	r3, [pc, #168]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea80:	220c      	movs	r2, #12
 800ea82:	4393      	bics	r3, r2
 800ea84:	0019      	movs	r1, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea8a:	4b27      	ldr	r3, [pc, #156]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea8c:	430a      	orrs	r2, r1
 800ea8e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea94:	2b04      	cmp	r3, #4
 800ea96:	d106      	bne.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ea98:	4b23      	ldr	r3, [pc, #140]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea9a:	68da      	ldr	r2, [r3, #12]
 800ea9c:	4b22      	ldr	r3, [pc, #136]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ea9e:	2180      	movs	r1, #128	; 0x80
 800eaa0:	0249      	lsls	r1, r1, #9
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	2380      	movs	r3, #128	; 0x80
 800eaac:	045b      	lsls	r3, r3, #17
 800eaae:	4013      	ands	r3, r2
 800eab0:	d016      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eab2:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eab6:	4a22      	ldr	r2, [pc, #136]	; (800eb40 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eab8:	4013      	ands	r3, r2
 800eaba:	0019      	movs	r1, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eac0:	4b19      	ldr	r3, [pc, #100]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eac2:	430a      	orrs	r2, r1
 800eac4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eaca:	2380      	movs	r3, #128	; 0x80
 800eacc:	019b      	lsls	r3, r3, #6
 800eace:	429a      	cmp	r2, r3
 800ead0:	d106      	bne.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ead2:	4b15      	ldr	r3, [pc, #84]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ead4:	68da      	ldr	r2, [r3, #12]
 800ead6:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800ead8:	2180      	movs	r1, #128	; 0x80
 800eada:	0449      	lsls	r1, r1, #17
 800eadc:	430a      	orrs	r2, r1
 800eade:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	2380      	movs	r3, #128	; 0x80
 800eae6:	049b      	lsls	r3, r3, #18
 800eae8:	4013      	ands	r3, r2
 800eaea:	d016      	beq.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800eaec:	4b0e      	ldr	r3, [pc, #56]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eaee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaf0:	4a10      	ldr	r2, [pc, #64]	; (800eb34 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800eaf2:	4013      	ands	r3, r2
 800eaf4:	0019      	movs	r1, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eafc:	430a      	orrs	r2, r1
 800eafe:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb04:	2380      	movs	r3, #128	; 0x80
 800eb06:	005b      	lsls	r3, r3, #1
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d106      	bne.n	800eb1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800eb0c:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb0e:	68da      	ldr	r2, [r3, #12]
 800eb10:	4b05      	ldr	r3, [pc, #20]	; (800eb28 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800eb12:	2180      	movs	r1, #128	; 0x80
 800eb14:	0449      	lsls	r1, r1, #17
 800eb16:	430a      	orrs	r2, r1
 800eb18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800eb1a:	2312      	movs	r3, #18
 800eb1c:	18fb      	adds	r3, r7, r3
 800eb1e:	781b      	ldrb	r3, [r3, #0]
}
 800eb20:	0018      	movs	r0, r3
 800eb22:	46bd      	mov	sp, r7
 800eb24:	b006      	add	sp, #24
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	40021000 	.word	0x40021000
 800eb2c:	efffffff 	.word	0xefffffff
 800eb30:	fffff3ff 	.word	0xfffff3ff
 800eb34:	fffffcff 	.word	0xfffffcff
 800eb38:	fff3ffff 	.word	0xfff3ffff
 800eb3c:	ffcfffff 	.word	0xffcfffff
 800eb40:	ffffcfff 	.word	0xffffcfff
 800eb44:	ffff3fff 	.word	0xffff3fff
 800eb48:	ffbfffff 	.word	0xffbfffff
 800eb4c:	feffffff 	.word	0xfeffffff

0800eb50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d101      	bne.n	800eb62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e0a8      	b.n	800ecb4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d109      	bne.n	800eb7e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	2382      	movs	r3, #130	; 0x82
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d009      	beq.n	800eb8a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	61da      	str	r2, [r3, #28]
 800eb7c:	e005      	b.n	800eb8a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	225d      	movs	r2, #93	; 0x5d
 800eb94:	5c9b      	ldrb	r3, [r3, r2]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d107      	bne.n	800ebac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	225c      	movs	r2, #92	; 0x5c
 800eba0:	2100      	movs	r1, #0
 800eba2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	0018      	movs	r0, r3
 800eba8:	f7fa f90a 	bl	8008dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	225d      	movs	r2, #93	; 0x5d
 800ebb0:	2102      	movs	r1, #2
 800ebb2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	2140      	movs	r1, #64	; 0x40
 800ebc0:	438a      	bics	r2, r1
 800ebc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	68da      	ldr	r2, [r3, #12]
 800ebc8:	23e0      	movs	r3, #224	; 0xe0
 800ebca:	00db      	lsls	r3, r3, #3
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d902      	bls.n	800ebd6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	e002      	b.n	800ebdc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ebd6:	2380      	movs	r3, #128	; 0x80
 800ebd8:	015b      	lsls	r3, r3, #5
 800ebda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	68da      	ldr	r2, [r3, #12]
 800ebe0:	23f0      	movs	r3, #240	; 0xf0
 800ebe2:	011b      	lsls	r3, r3, #4
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d008      	beq.n	800ebfa <HAL_SPI_Init+0xaa>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	23e0      	movs	r3, #224	; 0xe0
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d002      	beq.n	800ebfa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	2382      	movs	r3, #130	; 0x82
 800ec00:	005b      	lsls	r3, r3, #1
 800ec02:	401a      	ands	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6899      	ldr	r1, [r3, #8]
 800ec08:	2384      	movs	r3, #132	; 0x84
 800ec0a:	021b      	lsls	r3, r3, #8
 800ec0c:	400b      	ands	r3, r1
 800ec0e:	431a      	orrs	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	2102      	movs	r1, #2
 800ec16:	400b      	ands	r3, r1
 800ec18:	431a      	orrs	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	2101      	movs	r1, #1
 800ec20:	400b      	ands	r3, r1
 800ec22:	431a      	orrs	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6999      	ldr	r1, [r3, #24]
 800ec28:	2380      	movs	r3, #128	; 0x80
 800ec2a:	009b      	lsls	r3, r3, #2
 800ec2c:	400b      	ands	r3, r1
 800ec2e:	431a      	orrs	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	69db      	ldr	r3, [r3, #28]
 800ec34:	2138      	movs	r1, #56	; 0x38
 800ec36:	400b      	ands	r3, r1
 800ec38:	431a      	orrs	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	2180      	movs	r1, #128	; 0x80
 800ec40:	400b      	ands	r3, r1
 800ec42:	431a      	orrs	r2, r3
 800ec44:	0011      	movs	r1, r2
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec4a:	2380      	movs	r3, #128	; 0x80
 800ec4c:	019b      	lsls	r3, r3, #6
 800ec4e:	401a      	ands	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	699b      	ldr	r3, [r3, #24]
 800ec5c:	0c1b      	lsrs	r3, r3, #16
 800ec5e:	2204      	movs	r2, #4
 800ec60:	401a      	ands	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec66:	2110      	movs	r1, #16
 800ec68:	400b      	ands	r3, r1
 800ec6a:	431a      	orrs	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec70:	2108      	movs	r1, #8
 800ec72:	400b      	ands	r3, r1
 800ec74:	431a      	orrs	r2, r3
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68d9      	ldr	r1, [r3, #12]
 800ec7a:	23f0      	movs	r3, #240	; 0xf0
 800ec7c:	011b      	lsls	r3, r3, #4
 800ec7e:	400b      	ands	r3, r1
 800ec80:	431a      	orrs	r2, r3
 800ec82:	0011      	movs	r1, r2
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	2380      	movs	r3, #128	; 0x80
 800ec88:	015b      	lsls	r3, r3, #5
 800ec8a:	401a      	ands	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	430a      	orrs	r2, r1
 800ec92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	69da      	ldr	r2, [r3, #28]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4907      	ldr	r1, [pc, #28]	; (800ecbc <HAL_SPI_Init+0x16c>)
 800eca0:	400a      	ands	r2, r1
 800eca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	225d      	movs	r2, #93	; 0x5d
 800ecae:	2101      	movs	r1, #1
 800ecb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	0018      	movs	r0, r3
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	b004      	add	sp, #16
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	fffff7ff 	.word	0xfffff7ff

0800ecc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b088      	sub	sp, #32
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	603b      	str	r3, [r7, #0]
 800eccc:	1dbb      	adds	r3, r7, #6
 800ecce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ecd0:	231f      	movs	r3, #31
 800ecd2:	18fb      	adds	r3, r7, r3
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	225c      	movs	r2, #92	; 0x5c
 800ecdc:	5c9b      	ldrb	r3, [r3, r2]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d101      	bne.n	800ece6 <HAL_SPI_Transmit+0x26>
 800ece2:	2302      	movs	r3, #2
 800ece4:	e147      	b.n	800ef76 <HAL_SPI_Transmit+0x2b6>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	225c      	movs	r2, #92	; 0x5c
 800ecea:	2101      	movs	r1, #1
 800ecec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ecee:	f7fa fb45 	bl	800937c <HAL_GetTick>
 800ecf2:	0003      	movs	r3, r0
 800ecf4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ecf6:	2316      	movs	r3, #22
 800ecf8:	18fb      	adds	r3, r7, r3
 800ecfa:	1dba      	adds	r2, r7, #6
 800ecfc:	8812      	ldrh	r2, [r2, #0]
 800ecfe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	225d      	movs	r2, #93	; 0x5d
 800ed04:	5c9b      	ldrb	r3, [r3, r2]
 800ed06:	b2db      	uxtb	r3, r3
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d004      	beq.n	800ed16 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800ed0c:	231f      	movs	r3, #31
 800ed0e:	18fb      	adds	r3, r7, r3
 800ed10:	2202      	movs	r2, #2
 800ed12:	701a      	strb	r2, [r3, #0]
    goto error;
 800ed14:	e128      	b.n	800ef68 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d003      	beq.n	800ed24 <HAL_SPI_Transmit+0x64>
 800ed1c:	1dbb      	adds	r3, r7, #6
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d104      	bne.n	800ed2e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800ed24:	231f      	movs	r3, #31
 800ed26:	18fb      	adds	r3, r7, r3
 800ed28:	2201      	movs	r2, #1
 800ed2a:	701a      	strb	r2, [r3, #0]
    goto error;
 800ed2c:	e11c      	b.n	800ef68 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	225d      	movs	r2, #93	; 0x5d
 800ed32:	2103      	movs	r1, #3
 800ed34:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	1dba      	adds	r2, r7, #6
 800ed46:	8812      	ldrh	r2, [r2, #0]
 800ed48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	1dba      	adds	r2, r7, #6
 800ed4e:	8812      	ldrh	r2, [r2, #0]
 800ed50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2244      	movs	r2, #68	; 0x44
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2246      	movs	r2, #70	; 0x46
 800ed64:	2100      	movs	r1, #0
 800ed66:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2200      	movs	r2, #0
 800ed72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	2380      	movs	r3, #128	; 0x80
 800ed7a:	021b      	lsls	r3, r3, #8
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d110      	bne.n	800eda2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2140      	movs	r1, #64	; 0x40
 800ed8c:	438a      	bics	r2, r1
 800ed8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2180      	movs	r1, #128	; 0x80
 800ed9c:	01c9      	lsls	r1, r1, #7
 800ed9e:	430a      	orrs	r2, r1
 800eda0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2240      	movs	r2, #64	; 0x40
 800edaa:	4013      	ands	r3, r2
 800edac:	2b40      	cmp	r3, #64	; 0x40
 800edae:	d007      	beq.n	800edc0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2140      	movs	r1, #64	; 0x40
 800edbc:	430a      	orrs	r2, r1
 800edbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68da      	ldr	r2, [r3, #12]
 800edc4:	23e0      	movs	r3, #224	; 0xe0
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	429a      	cmp	r2, r3
 800edca:	d952      	bls.n	800ee72 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <HAL_SPI_Transmit+0x11e>
 800edd4:	2316      	movs	r3, #22
 800edd6:	18fb      	adds	r3, r7, r3
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d143      	bne.n	800ee66 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ede2:	881a      	ldrh	r2, [r3, #0]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edee:	1c9a      	adds	r2, r3, #2
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	3b01      	subs	r3, #1
 800edfc:	b29a      	uxth	r2, r3
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ee02:	e030      	b.n	800ee66 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d112      	bne.n	800ee38 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee16:	881a      	ldrh	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee22:	1c9a      	adds	r2, r3, #2
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee36:	e016      	b.n	800ee66 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee38:	f7fa faa0 	bl	800937c <HAL_GetTick>
 800ee3c:	0002      	movs	r2, r0
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	1ad3      	subs	r3, r2, r3
 800ee42:	683a      	ldr	r2, [r7, #0]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d802      	bhi.n	800ee4e <HAL_SPI_Transmit+0x18e>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	d102      	bne.n	800ee54 <HAL_SPI_Transmit+0x194>
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d108      	bne.n	800ee66 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 800ee54:	231f      	movs	r3, #31
 800ee56:	18fb      	adds	r3, r7, r3
 800ee58:	2203      	movs	r2, #3
 800ee5a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	225d      	movs	r2, #93	; 0x5d
 800ee60:	2101      	movs	r1, #1
 800ee62:	5499      	strb	r1, [r3, r2]
          goto error;
 800ee64:	e080      	b.n	800ef68 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1c9      	bne.n	800ee04 <HAL_SPI_Transmit+0x144>
 800ee70:	e053      	b.n	800ef1a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d004      	beq.n	800ee84 <HAL_SPI_Transmit+0x1c4>
 800ee7a:	2316      	movs	r3, #22
 800ee7c:	18fb      	adds	r3, r7, r3
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d145      	bne.n	800ef10 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	330c      	adds	r3, #12
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee96:	1c5a      	adds	r2, r3, #1
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	3b01      	subs	r3, #1
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800eeaa:	e031      	b.n	800ef10 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	2b02      	cmp	r3, #2
 800eeb8:	d113      	bne.n	800eee2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	330c      	adds	r3, #12
 800eec4:	7812      	ldrb	r2, [r2, #0]
 800eec6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eecc:	1c5a      	adds	r2, r3, #1
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	3b01      	subs	r3, #1
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eee0:	e016      	b.n	800ef10 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eee2:	f7fa fa4b 	bl	800937c <HAL_GetTick>
 800eee6:	0002      	movs	r2, r0
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d802      	bhi.n	800eef8 <HAL_SPI_Transmit+0x238>
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	3301      	adds	r3, #1
 800eef6:	d102      	bne.n	800eefe <HAL_SPI_Transmit+0x23e>
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d108      	bne.n	800ef10 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800eefe:	231f      	movs	r3, #31
 800ef00:	18fb      	adds	r3, r7, r3
 800ef02:	2203      	movs	r2, #3
 800ef04:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	225d      	movs	r2, #93	; 0x5d
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	5499      	strb	r1, [r3, r2]
          goto error;
 800ef0e:	e02b      	b.n	800ef68 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1c8      	bne.n	800eeac <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef1a:	69ba      	ldr	r2, [r7, #24]
 800ef1c:	6839      	ldr	r1, [r7, #0]
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	0018      	movs	r0, r3
 800ef22:	f000 f95d 	bl	800f1e0 <SPI_EndRxTxTransaction>
 800ef26:	1e03      	subs	r3, r0, #0
 800ef28:	d002      	beq.n	800ef30 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2220      	movs	r2, #32
 800ef2e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10a      	bne.n	800ef4e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef38:	2300      	movs	r3, #0
 800ef3a:	613b      	str	r3, [r7, #16]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	613b      	str	r3, [r7, #16]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	613b      	str	r3, [r7, #16]
 800ef4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d004      	beq.n	800ef60 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800ef56:	231f      	movs	r3, #31
 800ef58:	18fb      	adds	r3, r7, r3
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	701a      	strb	r2, [r3, #0]
 800ef5e:	e003      	b.n	800ef68 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	225d      	movs	r2, #93	; 0x5d
 800ef64:	2101      	movs	r1, #1
 800ef66:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	225c      	movs	r2, #92	; 0x5c
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ef70:	231f      	movs	r3, #31
 800ef72:	18fb      	adds	r3, r7, r3
 800ef74:	781b      	ldrb	r3, [r3, #0]
}
 800ef76:	0018      	movs	r0, r3
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	b008      	add	sp, #32
 800ef7c:	bd80      	pop	{r7, pc}
	...

0800ef80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	1dfb      	adds	r3, r7, #7
 800ef8e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ef90:	f7fa f9f4 	bl	800937c <HAL_GetTick>
 800ef94:	0002      	movs	r2, r0
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	1a9b      	subs	r3, r3, r2
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	18d3      	adds	r3, r2, r3
 800ef9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800efa0:	f7fa f9ec 	bl	800937c <HAL_GetTick>
 800efa4:	0003      	movs	r3, r0
 800efa6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800efa8:	4b3a      	ldr	r3, [pc, #232]	; (800f094 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	015b      	lsls	r3, r3, #5
 800efae:	0d1b      	lsrs	r3, r3, #20
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	4353      	muls	r3, r2
 800efb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800efb6:	e058      	b.n	800f06a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	3301      	adds	r3, #1
 800efbc:	d055      	beq.n	800f06a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800efbe:	f7fa f9dd 	bl	800937c <HAL_GetTick>
 800efc2:	0002      	movs	r2, r0
 800efc4:	69bb      	ldr	r3, [r7, #24]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	69fa      	ldr	r2, [r7, #28]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d902      	bls.n	800efd4 <SPI_WaitFlagStateUntilTimeout+0x54>
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d142      	bne.n	800f05a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	685a      	ldr	r2, [r3, #4]
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	21e0      	movs	r1, #224	; 0xe0
 800efe0:	438a      	bics	r2, r1
 800efe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	685a      	ldr	r2, [r3, #4]
 800efe8:	2382      	movs	r3, #130	; 0x82
 800efea:	005b      	lsls	r3, r3, #1
 800efec:	429a      	cmp	r2, r3
 800efee:	d113      	bne.n	800f018 <SPI_WaitFlagStateUntilTimeout+0x98>
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	689a      	ldr	r2, [r3, #8]
 800eff4:	2380      	movs	r3, #128	; 0x80
 800eff6:	021b      	lsls	r3, r3, #8
 800eff8:	429a      	cmp	r2, r3
 800effa:	d005      	beq.n	800f008 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	689a      	ldr	r2, [r3, #8]
 800f000:	2380      	movs	r3, #128	; 0x80
 800f002:	00db      	lsls	r3, r3, #3
 800f004:	429a      	cmp	r2, r3
 800f006:	d107      	bne.n	800f018 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2140      	movs	r1, #64	; 0x40
 800f014:	438a      	bics	r2, r1
 800f016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f01c:	2380      	movs	r3, #128	; 0x80
 800f01e:	019b      	lsls	r3, r3, #6
 800f020:	429a      	cmp	r2, r3
 800f022:	d110      	bne.n	800f046 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	491a      	ldr	r1, [pc, #104]	; (800f098 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800f030:	400a      	ands	r2, r1
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2180      	movs	r1, #128	; 0x80
 800f040:	0189      	lsls	r1, r1, #6
 800f042:	430a      	orrs	r2, r1
 800f044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	225d      	movs	r2, #93	; 0x5d
 800f04a:	2101      	movs	r1, #1
 800f04c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	225c      	movs	r2, #92	; 0x5c
 800f052:	2100      	movs	r1, #0
 800f054:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f056:	2303      	movs	r3, #3
 800f058:	e017      	b.n	800f08a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d101      	bne.n	800f064 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800f060:	2300      	movs	r3, #0
 800f062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	3b01      	subs	r3, #1
 800f068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	68ba      	ldr	r2, [r7, #8]
 800f072:	4013      	ands	r3, r2
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	425a      	negs	r2, r3
 800f07a:	4153      	adcs	r3, r2
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	001a      	movs	r2, r3
 800f080:	1dfb      	adds	r3, r7, #7
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d197      	bne.n	800efb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	0018      	movs	r0, r3
 800f08c:	46bd      	mov	sp, r7
 800f08e:	b008      	add	sp, #32
 800f090:	bd80      	pop	{r7, pc}
 800f092:	46c0      	nop			; (mov r8, r8)
 800f094:	2000005c 	.word	0x2000005c
 800f098:	ffffdfff 	.word	0xffffdfff

0800f09c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08a      	sub	sp, #40	; 0x28
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
 800f0a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f0aa:	2317      	movs	r3, #23
 800f0ac:	18fb      	adds	r3, r7, r3
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f0b2:	f7fa f963 	bl	800937c <HAL_GetTick>
 800f0b6:	0002      	movs	r2, r0
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ba:	1a9b      	subs	r3, r3, r2
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	18d3      	adds	r3, r2, r3
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f0c2:	f7fa f95b 	bl	800937c <HAL_GetTick>
 800f0c6:	0003      	movs	r3, r0
 800f0c8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	330c      	adds	r3, #12
 800f0d0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f0d2:	4b41      	ldr	r3, [pc, #260]	; (800f1d8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	0013      	movs	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	189b      	adds	r3, r3, r2
 800f0dc:	00da      	lsls	r2, r3, #3
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	0d1b      	lsrs	r3, r3, #20
 800f0e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e4:	4353      	muls	r3, r2
 800f0e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f0e8:	e068      	b.n	800f1bc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	23c0      	movs	r3, #192	; 0xc0
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d10a      	bne.n	800f10a <SPI_WaitFifoStateUntilTimeout+0x6e>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d107      	bne.n	800f10a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	781b      	ldrb	r3, [r3, #0]
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	2117      	movs	r1, #23
 800f102:	187b      	adds	r3, r7, r1
 800f104:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f106:	187b      	adds	r3, r7, r1
 800f108:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	3301      	adds	r3, #1
 800f10e:	d055      	beq.n	800f1bc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f110:	f7fa f934 	bl	800937c <HAL_GetTick>
 800f114:	0002      	movs	r2, r0
 800f116:	6a3b      	ldr	r3, [r7, #32]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d902      	bls.n	800f126 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	2b00      	cmp	r3, #0
 800f124:	d142      	bne.n	800f1ac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	21e0      	movs	r1, #224	; 0xe0
 800f132:	438a      	bics	r2, r1
 800f134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	2382      	movs	r3, #130	; 0x82
 800f13c:	005b      	lsls	r3, r3, #1
 800f13e:	429a      	cmp	r2, r3
 800f140:	d113      	bne.n	800f16a <SPI_WaitFifoStateUntilTimeout+0xce>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	689a      	ldr	r2, [r3, #8]
 800f146:	2380      	movs	r3, #128	; 0x80
 800f148:	021b      	lsls	r3, r3, #8
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d005      	beq.n	800f15a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	689a      	ldr	r2, [r3, #8]
 800f152:	2380      	movs	r3, #128	; 0x80
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	429a      	cmp	r2, r3
 800f158:	d107      	bne.n	800f16a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2140      	movs	r1, #64	; 0x40
 800f166:	438a      	bics	r2, r1
 800f168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f16e:	2380      	movs	r3, #128	; 0x80
 800f170:	019b      	lsls	r3, r3, #6
 800f172:	429a      	cmp	r2, r3
 800f174:	d110      	bne.n	800f198 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4916      	ldr	r1, [pc, #88]	; (800f1dc <SPI_WaitFifoStateUntilTimeout+0x140>)
 800f182:	400a      	ands	r2, r1
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2180      	movs	r1, #128	; 0x80
 800f192:	0189      	lsls	r1, r1, #6
 800f194:	430a      	orrs	r2, r1
 800f196:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	225d      	movs	r2, #93	; 0x5d
 800f19c:	2101      	movs	r1, #1
 800f19e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	225c      	movs	r2, #92	; 0x5c
 800f1a4:	2100      	movs	r1, #0
 800f1a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f1a8:	2303      	movs	r3, #3
 800f1aa:	e010      	b.n	800f1ce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	4013      	ands	r3, r2
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d18e      	bne.n	800f0ea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	0018      	movs	r0, r3
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	b00a      	add	sp, #40	; 0x28
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	46c0      	nop			; (mov r8, r8)
 800f1d8:	2000005c 	.word	0x2000005c
 800f1dc:	ffffdfff 	.word	0xffffdfff

0800f1e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	23c0      	movs	r3, #192	; 0xc0
 800f1f0:	0159      	lsls	r1, r3, #5
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	0013      	movs	r3, r2
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	f7ff ff4e 	bl	800f09c <SPI_WaitFifoStateUntilTimeout>
 800f200:	1e03      	subs	r3, r0, #0
 800f202:	d007      	beq.n	800f214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f208:	2220      	movs	r2, #32
 800f20a:	431a      	orrs	r2, r3
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f210:	2303      	movs	r3, #3
 800f212:	e027      	b.n	800f264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	9300      	str	r3, [sp, #0]
 800f21c:	0013      	movs	r3, r2
 800f21e:	2200      	movs	r2, #0
 800f220:	2180      	movs	r1, #128	; 0x80
 800f222:	f7ff fead 	bl	800ef80 <SPI_WaitFlagStateUntilTimeout>
 800f226:	1e03      	subs	r3, r0, #0
 800f228:	d007      	beq.n	800f23a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f22e:	2220      	movs	r2, #32
 800f230:	431a      	orrs	r2, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f236:	2303      	movs	r3, #3
 800f238:	e014      	b.n	800f264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	23c0      	movs	r3, #192	; 0xc0
 800f23e:	00d9      	lsls	r1, r3, #3
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	9300      	str	r3, [sp, #0]
 800f246:	0013      	movs	r3, r2
 800f248:	2200      	movs	r2, #0
 800f24a:	f7ff ff27 	bl	800f09c <SPI_WaitFifoStateUntilTimeout>
 800f24e:	1e03      	subs	r3, r0, #0
 800f250:	d007      	beq.n	800f262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f256:	2220      	movs	r2, #32
 800f258:	431a      	orrs	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f25e:	2303      	movs	r3, #3
 800f260:	e000      	b.n	800f264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f262:	2300      	movs	r3, #0
}
 800f264:	0018      	movs	r0, r3
 800f266:	46bd      	mov	sp, r7
 800f268:	b004      	add	sp, #16
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f27a:	2301      	movs	r3, #1
 800f27c:	e04a      	b.n	800f314 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	223d      	movs	r2, #61	; 0x3d
 800f282:	5c9b      	ldrb	r3, [r3, r2]
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d107      	bne.n	800f29a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	223c      	movs	r2, #60	; 0x3c
 800f28e:	2100      	movs	r1, #0
 800f290:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	0018      	movs	r0, r3
 800f296:	f7f9 fe31 	bl	8008efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	223d      	movs	r2, #61	; 0x3d
 800f29e:	2102      	movs	r1, #2
 800f2a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3304      	adds	r3, #4
 800f2aa:	0019      	movs	r1, r3
 800f2ac:	0010      	movs	r0, r2
 800f2ae:	f000 fc5b 	bl	800fb68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2248      	movs	r2, #72	; 0x48
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	223e      	movs	r2, #62	; 0x3e
 800f2be:	2101      	movs	r1, #1
 800f2c0:	5499      	strb	r1, [r3, r2]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	223f      	movs	r2, #63	; 0x3f
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	5499      	strb	r1, [r3, r2]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2240      	movs	r2, #64	; 0x40
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	5499      	strb	r1, [r3, r2]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2241      	movs	r2, #65	; 0x41
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	5499      	strb	r1, [r3, r2]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2242      	movs	r2, #66	; 0x42
 800f2de:	2101      	movs	r1, #1
 800f2e0:	5499      	strb	r1, [r3, r2]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2243      	movs	r2, #67	; 0x43
 800f2e6:	2101      	movs	r1, #1
 800f2e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2244      	movs	r2, #68	; 0x44
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	5499      	strb	r1, [r3, r2]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2245      	movs	r2, #69	; 0x45
 800f2f6:	2101      	movs	r1, #1
 800f2f8:	5499      	strb	r1, [r3, r2]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2246      	movs	r2, #70	; 0x46
 800f2fe:	2101      	movs	r1, #1
 800f300:	5499      	strb	r1, [r3, r2]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2247      	movs	r2, #71	; 0x47
 800f306:	2101      	movs	r1, #1
 800f308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	223d      	movs	r2, #61	; 0x3d
 800f30e:	2101      	movs	r1, #1
 800f310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	0018      	movs	r0, r3
 800f316:	46bd      	mov	sp, r7
 800f318:	b002      	add	sp, #8
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	223d      	movs	r2, #61	; 0x3d
 800f328:	5c9b      	ldrb	r3, [r3, r2]
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d001      	beq.n	800f334 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f330:	2301      	movs	r3, #1
 800f332:	e03f      	b.n	800f3b4 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	223d      	movs	r2, #61	; 0x3d
 800f338:	2102      	movs	r1, #2
 800f33a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4a1e      	ldr	r2, [pc, #120]	; (800f3bc <HAL_TIM_Base_Start+0xa0>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d014      	beq.n	800f370 <HAL_TIM_Base_Start+0x54>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	2380      	movs	r3, #128	; 0x80
 800f34c:	05db      	lsls	r3, r3, #23
 800f34e:	429a      	cmp	r2, r3
 800f350:	d00e      	beq.n	800f370 <HAL_TIM_Base_Start+0x54>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a1a      	ldr	r2, [pc, #104]	; (800f3c0 <HAL_TIM_Base_Start+0xa4>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d009      	beq.n	800f370 <HAL_TIM_Base_Start+0x54>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4a18      	ldr	r2, [pc, #96]	; (800f3c4 <HAL_TIM_Base_Start+0xa8>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d004      	beq.n	800f370 <HAL_TIM_Base_Start+0x54>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a17      	ldr	r2, [pc, #92]	; (800f3c8 <HAL_TIM_Base_Start+0xac>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d116      	bne.n	800f39e <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	4a15      	ldr	r2, [pc, #84]	; (800f3cc <HAL_TIM_Base_Start+0xb0>)
 800f378:	4013      	ands	r3, r2
 800f37a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2b06      	cmp	r3, #6
 800f380:	d016      	beq.n	800f3b0 <HAL_TIM_Base_Start+0x94>
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	2380      	movs	r3, #128	; 0x80
 800f386:	025b      	lsls	r3, r3, #9
 800f388:	429a      	cmp	r2, r3
 800f38a:	d011      	beq.n	800f3b0 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2101      	movs	r1, #1
 800f398:	430a      	orrs	r2, r1
 800f39a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f39c:	e008      	b.n	800f3b0 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	430a      	orrs	r2, r1
 800f3ac:	601a      	str	r2, [r3, #0]
 800f3ae:	e000      	b.n	800f3b2 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3b0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	0018      	movs	r0, r3
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	b004      	add	sp, #16
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	40012c00 	.word	0x40012c00
 800f3c0:	40000400 	.word	0x40000400
 800f3c4:	40000800 	.word	0x40000800
 800f3c8:	40014000 	.word	0x40014000
 800f3cc:	00010007 	.word	0x00010007

0800f3d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	223d      	movs	r2, #61	; 0x3d
 800f3dc:	5c9b      	ldrb	r3, [r3, r2]
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d001      	beq.n	800f3e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e047      	b.n	800f478 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	223d      	movs	r2, #61	; 0x3d
 800f3ec:	2102      	movs	r1, #2
 800f3ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	68da      	ldr	r2, [r3, #12]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	4a1e      	ldr	r2, [pc, #120]	; (800f480 <HAL_TIM_Base_Start_IT+0xb0>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d014      	beq.n	800f434 <HAL_TIM_Base_Start_IT+0x64>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	2380      	movs	r3, #128	; 0x80
 800f410:	05db      	lsls	r3, r3, #23
 800f412:	429a      	cmp	r2, r3
 800f414:	d00e      	beq.n	800f434 <HAL_TIM_Base_Start_IT+0x64>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4a1a      	ldr	r2, [pc, #104]	; (800f484 <HAL_TIM_Base_Start_IT+0xb4>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d009      	beq.n	800f434 <HAL_TIM_Base_Start_IT+0x64>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a18      	ldr	r2, [pc, #96]	; (800f488 <HAL_TIM_Base_Start_IT+0xb8>)
 800f426:	4293      	cmp	r3, r2
 800f428:	d004      	beq.n	800f434 <HAL_TIM_Base_Start_IT+0x64>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a17      	ldr	r2, [pc, #92]	; (800f48c <HAL_TIM_Base_Start_IT+0xbc>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d116      	bne.n	800f462 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	4a15      	ldr	r2, [pc, #84]	; (800f490 <HAL_TIM_Base_Start_IT+0xc0>)
 800f43c:	4013      	ands	r3, r2
 800f43e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2b06      	cmp	r3, #6
 800f444:	d016      	beq.n	800f474 <HAL_TIM_Base_Start_IT+0xa4>
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	2380      	movs	r3, #128	; 0x80
 800f44a:	025b      	lsls	r3, r3, #9
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d011      	beq.n	800f474 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2101      	movs	r1, #1
 800f45c:	430a      	orrs	r2, r1
 800f45e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f460:	e008      	b.n	800f474 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2101      	movs	r1, #1
 800f46e:	430a      	orrs	r2, r1
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	e000      	b.n	800f476 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f474:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800f476:	2300      	movs	r3, #0
}
 800f478:	0018      	movs	r0, r3
 800f47a:	46bd      	mov	sp, r7
 800f47c:	b004      	add	sp, #16
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	40012c00 	.word	0x40012c00
 800f484:	40000400 	.word	0x40000400
 800f488:	40000800 	.word	0x40000800
 800f48c:	40014000 	.word	0x40014000
 800f490:	00010007 	.word	0x00010007

0800f494 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e090      	b.n	800f5ca <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	223d      	movs	r2, #61	; 0x3d
 800f4ac:	5c9b      	ldrb	r3, [r3, r2]
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d107      	bne.n	800f4c4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	223c      	movs	r2, #60	; 0x3c
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	0018      	movs	r0, r3
 800f4c0:	f7f9 fcca 	bl	8008e58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	223d      	movs	r2, #61	; 0x3d
 800f4c8:	2102      	movs	r1, #2
 800f4ca:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	689a      	ldr	r2, [r3, #8]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	493f      	ldr	r1, [pc, #252]	; (800f5d4 <HAL_TIM_Encoder_Init+0x140>)
 800f4d8:	400a      	ands	r2, r1
 800f4da:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	3304      	adds	r3, #4
 800f4e4:	0019      	movs	r1, r3
 800f4e6:	0010      	movs	r0, r2
 800f4e8:	f000 fb3e 	bl	800fb68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	697a      	ldr	r2, [r7, #20]
 800f50a:	4313      	orrs	r3, r2
 800f50c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	4a31      	ldr	r2, [pc, #196]	; (800f5d8 <HAL_TIM_Encoder_Init+0x144>)
 800f512:	4013      	ands	r3, r2
 800f514:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	689a      	ldr	r2, [r3, #8]
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	021b      	lsls	r3, r3, #8
 800f520:	4313      	orrs	r3, r2
 800f522:	693a      	ldr	r2, [r7, #16]
 800f524:	4313      	orrs	r3, r2
 800f526:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	4a2c      	ldr	r2, [pc, #176]	; (800f5dc <HAL_TIM_Encoder_Init+0x148>)
 800f52c:	4013      	ands	r3, r2
 800f52e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	4a2b      	ldr	r2, [pc, #172]	; (800f5e0 <HAL_TIM_Encoder_Init+0x14c>)
 800f534:	4013      	ands	r3, r2
 800f536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	68da      	ldr	r2, [r3, #12]
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	021b      	lsls	r3, r3, #8
 800f542:	4313      	orrs	r3, r2
 800f544:	693a      	ldr	r2, [r7, #16]
 800f546:	4313      	orrs	r3, r2
 800f548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	011a      	lsls	r2, r3, #4
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	6a1b      	ldr	r3, [r3, #32]
 800f554:	031b      	lsls	r3, r3, #12
 800f556:	4313      	orrs	r3, r2
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2222      	movs	r2, #34	; 0x22
 800f562:	4393      	bics	r3, r2
 800f564:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2288      	movs	r2, #136	; 0x88
 800f56a:	4393      	bics	r3, r2
 800f56c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	011b      	lsls	r3, r3, #4
 800f578:	4313      	orrs	r3, r2
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2248      	movs	r2, #72	; 0x48
 800f59c:	2101      	movs	r1, #1
 800f59e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	223e      	movs	r2, #62	; 0x3e
 800f5a4:	2101      	movs	r1, #1
 800f5a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	223f      	movs	r2, #63	; 0x3f
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2244      	movs	r2, #68	; 0x44
 800f5b4:	2101      	movs	r1, #1
 800f5b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2245      	movs	r2, #69	; 0x45
 800f5bc:	2101      	movs	r1, #1
 800f5be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	223d      	movs	r2, #61	; 0x3d
 800f5c4:	2101      	movs	r1, #1
 800f5c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	b006      	add	sp, #24
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	46c0      	nop			; (mov r8, r8)
 800f5d4:	fffebff8 	.word	0xfffebff8
 800f5d8:	fffffcfc 	.word	0xfffffcfc
 800f5dc:	fffff3f3 	.word	0xfffff3f3
 800f5e0:	ffff0f0f 	.word	0xffff0f0f

0800f5e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f5e4:	b590      	push	{r4, r7, lr}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800f5ee:	200f      	movs	r0, #15
 800f5f0:	183b      	adds	r3, r7, r0
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	213e      	movs	r1, #62	; 0x3e
 800f5f6:	5c52      	ldrb	r2, [r2, r1]
 800f5f8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800f5fa:	230e      	movs	r3, #14
 800f5fc:	18fb      	adds	r3, r7, r3
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	213f      	movs	r1, #63	; 0x3f
 800f602:	5c52      	ldrb	r2, [r2, r1]
 800f604:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800f606:	240d      	movs	r4, #13
 800f608:	193b      	adds	r3, r7, r4
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	2144      	movs	r1, #68	; 0x44
 800f60e:	5c52      	ldrb	r2, [r2, r1]
 800f610:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800f612:	230c      	movs	r3, #12
 800f614:	18fb      	adds	r3, r7, r3
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	2145      	movs	r1, #69	; 0x45
 800f61a:	5c52      	ldrb	r2, [r2, r1]
 800f61c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d112      	bne.n	800f64a <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f624:	183b      	adds	r3, r7, r0
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d103      	bne.n	800f634 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800f62c:	193b      	adds	r3, r7, r4
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d001      	beq.n	800f638 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	e095      	b.n	800f764 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	223e      	movs	r2, #62	; 0x3e
 800f63c:	2102      	movs	r1, #2
 800f63e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2244      	movs	r2, #68	; 0x44
 800f644:	2102      	movs	r1, #2
 800f646:	5499      	strb	r1, [r3, r2]
 800f648:	e03d      	b.n	800f6c6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	2b04      	cmp	r3, #4
 800f64e:	d114      	bne.n	800f67a <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f650:	230e      	movs	r3, #14
 800f652:	18fb      	adds	r3, r7, r3
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b01      	cmp	r3, #1
 800f658:	d104      	bne.n	800f664 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f65a:	230c      	movs	r3, #12
 800f65c:	18fb      	adds	r3, r7, r3
 800f65e:	781b      	ldrb	r3, [r3, #0]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d001      	beq.n	800f668 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 800f664:	2301      	movs	r3, #1
 800f666:	e07d      	b.n	800f764 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	223f      	movs	r2, #63	; 0x3f
 800f66c:	2102      	movs	r1, #2
 800f66e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2245      	movs	r2, #69	; 0x45
 800f674:	2102      	movs	r1, #2
 800f676:	5499      	strb	r1, [r3, r2]
 800f678:	e025      	b.n	800f6c6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f67a:	230f      	movs	r3, #15
 800f67c:	18fb      	adds	r3, r7, r3
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d10e      	bne.n	800f6a2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800f684:	230e      	movs	r3, #14
 800f686:	18fb      	adds	r3, r7, r3
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d109      	bne.n	800f6a2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800f68e:	230d      	movs	r3, #13
 800f690:	18fb      	adds	r3, r7, r3
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d104      	bne.n	800f6a2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800f698:	230c      	movs	r3, #12
 800f69a:	18fb      	adds	r3, r7, r3
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d001      	beq.n	800f6a6 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e05e      	b.n	800f764 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	223e      	movs	r2, #62	; 0x3e
 800f6aa:	2102      	movs	r1, #2
 800f6ac:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	223f      	movs	r2, #63	; 0x3f
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2244      	movs	r2, #68	; 0x44
 800f6ba:	2102      	movs	r1, #2
 800f6bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2245      	movs	r2, #69	; 0x45
 800f6c2:	2102      	movs	r1, #2
 800f6c4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d003      	beq.n	800f6d4 <HAL_TIM_Encoder_Start_IT+0xf0>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	2b04      	cmp	r3, #4
 800f6d0:	d010      	beq.n	800f6f4 <HAL_TIM_Encoder_Start_IT+0x110>
 800f6d2:	e01f      	b.n	800f714 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	2100      	movs	r1, #0
 800f6dc:	0018      	movs	r0, r3
 800f6de:	f000 fb77 	bl	800fdd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68da      	ldr	r2, [r3, #12]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	430a      	orrs	r2, r1
 800f6f0:	60da      	str	r2, [r3, #12]
      break;
 800f6f2:	e02e      	b.n	800f752 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2201      	movs	r2, #1
 800f6fa:	2104      	movs	r1, #4
 800f6fc:	0018      	movs	r0, r3
 800f6fe:	f000 fb67 	bl	800fdd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68da      	ldr	r2, [r3, #12]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2104      	movs	r1, #4
 800f70e:	430a      	orrs	r2, r1
 800f710:	60da      	str	r2, [r3, #12]
      break;
 800f712:	e01e      	b.n	800f752 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2201      	movs	r2, #1
 800f71a:	2100      	movs	r1, #0
 800f71c:	0018      	movs	r0, r3
 800f71e:	f000 fb57 	bl	800fdd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2201      	movs	r2, #1
 800f728:	2104      	movs	r1, #4
 800f72a:	0018      	movs	r0, r3
 800f72c:	f000 fb50 	bl	800fdd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	68da      	ldr	r2, [r3, #12]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2102      	movs	r1, #2
 800f73c:	430a      	orrs	r2, r1
 800f73e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68da      	ldr	r2, [r3, #12]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2104      	movs	r1, #4
 800f74c:	430a      	orrs	r2, r1
 800f74e:	60da      	str	r2, [r3, #12]
      break;
 800f750:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2101      	movs	r1, #1
 800f75e:	430a      	orrs	r2, r1
 800f760:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f762:	2300      	movs	r3, #0
}
 800f764:	0018      	movs	r0, r3
 800f766:	46bd      	mov	sp, r7
 800f768:	b005      	add	sp, #20
 800f76a:	bd90      	pop	{r4, r7, pc}

0800f76c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2202      	movs	r2, #2
 800f788:	4013      	ands	r3, r2
 800f78a:	d021      	beq.n	800f7d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2202      	movs	r2, #2
 800f790:	4013      	ands	r3, r2
 800f792:	d01d      	beq.n	800f7d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2203      	movs	r2, #3
 800f79a:	4252      	negs	r2, r2
 800f79c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	699b      	ldr	r3, [r3, #24]
 800f7aa:	2203      	movs	r2, #3
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	d004      	beq.n	800f7ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	0018      	movs	r0, r3
 800f7b4:	f000 f9c0 	bl	800fb38 <HAL_TIM_IC_CaptureCallback>
 800f7b8:	e007      	b.n	800f7ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	0018      	movs	r0, r3
 800f7be:	f000 f9b3 	bl	800fb28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	0018      	movs	r0, r3
 800f7c6:	f000 f9bf 	bl	800fb48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2204      	movs	r2, #4
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	d022      	beq.n	800f81e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2204      	movs	r2, #4
 800f7dc:	4013      	ands	r3, r2
 800f7de:	d01e      	beq.n	800f81e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	2205      	movs	r2, #5
 800f7e6:	4252      	negs	r2, r2
 800f7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2202      	movs	r2, #2
 800f7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	699a      	ldr	r2, [r3, #24]
 800f7f6:	23c0      	movs	r3, #192	; 0xc0
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	d004      	beq.n	800f808 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	0018      	movs	r0, r3
 800f802:	f000 f999 	bl	800fb38 <HAL_TIM_IC_CaptureCallback>
 800f806:	e007      	b.n	800f818 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	0018      	movs	r0, r3
 800f80c:	f000 f98c 	bl	800fb28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	0018      	movs	r0, r3
 800f814:	f000 f998 	bl	800fb48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2208      	movs	r2, #8
 800f822:	4013      	ands	r3, r2
 800f824:	d021      	beq.n	800f86a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2208      	movs	r2, #8
 800f82a:	4013      	ands	r3, r2
 800f82c:	d01d      	beq.n	800f86a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2209      	movs	r2, #9
 800f834:	4252      	negs	r2, r2
 800f836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2204      	movs	r2, #4
 800f83c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	69db      	ldr	r3, [r3, #28]
 800f844:	2203      	movs	r2, #3
 800f846:	4013      	ands	r3, r2
 800f848:	d004      	beq.n	800f854 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	0018      	movs	r0, r3
 800f84e:	f000 f973 	bl	800fb38 <HAL_TIM_IC_CaptureCallback>
 800f852:	e007      	b.n	800f864 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	0018      	movs	r0, r3
 800f858:	f000 f966 	bl	800fb28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	0018      	movs	r0, r3
 800f860:	f000 f972 	bl	800fb48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2210      	movs	r2, #16
 800f86e:	4013      	ands	r3, r2
 800f870:	d022      	beq.n	800f8b8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2210      	movs	r2, #16
 800f876:	4013      	ands	r3, r2
 800f878:	d01e      	beq.n	800f8b8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2211      	movs	r2, #17
 800f880:	4252      	negs	r2, r2
 800f882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2208      	movs	r2, #8
 800f888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	69da      	ldr	r2, [r3, #28]
 800f890:	23c0      	movs	r3, #192	; 0xc0
 800f892:	009b      	lsls	r3, r3, #2
 800f894:	4013      	ands	r3, r2
 800f896:	d004      	beq.n	800f8a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	0018      	movs	r0, r3
 800f89c:	f000 f94c 	bl	800fb38 <HAL_TIM_IC_CaptureCallback>
 800f8a0:	e007      	b.n	800f8b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	0018      	movs	r0, r3
 800f8a6:	f000 f93f 	bl	800fb28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	0018      	movs	r0, r3
 800f8ae:	f000 f94b 	bl	800fb48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4013      	ands	r3, r2
 800f8be:	d00c      	beq.n	800f8da <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	d008      	beq.n	800f8da <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	4252      	negs	r2, r2
 800f8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	0018      	movs	r0, r3
 800f8d6:	f7f9 f961 	bl	8008b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	2280      	movs	r2, #128	; 0x80
 800f8de:	4013      	ands	r3, r2
 800f8e0:	d104      	bne.n	800f8ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f8e2:	68ba      	ldr	r2, [r7, #8]
 800f8e4:	2380      	movs	r3, #128	; 0x80
 800f8e6:	019b      	lsls	r3, r3, #6
 800f8e8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f8ea:	d00b      	beq.n	800f904 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2280      	movs	r2, #128	; 0x80
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	d007      	beq.n	800f904 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a1e      	ldr	r2, [pc, #120]	; (800f974 <HAL_TIM_IRQHandler+0x208>)
 800f8fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	0018      	movs	r0, r3
 800f900:	f000 fb08 	bl	800ff14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	2380      	movs	r3, #128	; 0x80
 800f908:	005b      	lsls	r3, r3, #1
 800f90a:	4013      	ands	r3, r2
 800f90c:	d00b      	beq.n	800f926 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2280      	movs	r2, #128	; 0x80
 800f912:	4013      	ands	r3, r2
 800f914:	d007      	beq.n	800f926 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a17      	ldr	r2, [pc, #92]	; (800f978 <HAL_TIM_IRQHandler+0x20c>)
 800f91c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	0018      	movs	r0, r3
 800f922:	f000 faff 	bl	800ff24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2240      	movs	r2, #64	; 0x40
 800f92a:	4013      	ands	r3, r2
 800f92c:	d00c      	beq.n	800f948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2240      	movs	r2, #64	; 0x40
 800f932:	4013      	ands	r3, r2
 800f934:	d008      	beq.n	800f948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2241      	movs	r2, #65	; 0x41
 800f93c:	4252      	negs	r2, r2
 800f93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	0018      	movs	r0, r3
 800f944:	f000 f908 	bl	800fb58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	2220      	movs	r2, #32
 800f94c:	4013      	ands	r3, r2
 800f94e:	d00c      	beq.n	800f96a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	2220      	movs	r2, #32
 800f954:	4013      	ands	r3, r2
 800f956:	d008      	beq.n	800f96a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2221      	movs	r2, #33	; 0x21
 800f95e:	4252      	negs	r2, r2
 800f960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	0018      	movs	r0, r3
 800f966:	f000 facd 	bl	800ff04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f96a:	46c0      	nop			; (mov r8, r8)
 800f96c:	46bd      	mov	sp, r7
 800f96e:	b004      	add	sp, #16
 800f970:	bd80      	pop	{r7, pc}
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	ffffdf7f 	.word	0xffffdf7f
 800f978:	fffffeff 	.word	0xfffffeff

0800f97c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f986:	230f      	movs	r3, #15
 800f988:	18fb      	adds	r3, r7, r3
 800f98a:	2200      	movs	r2, #0
 800f98c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	223c      	movs	r2, #60	; 0x3c
 800f992:	5c9b      	ldrb	r3, [r3, r2]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d101      	bne.n	800f99c <HAL_TIM_ConfigClockSource+0x20>
 800f998:	2302      	movs	r3, #2
 800f99a:	e0bc      	b.n	800fb16 <HAL_TIM_ConfigClockSource+0x19a>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	223c      	movs	r2, #60	; 0x3c
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	223d      	movs	r2, #61	; 0x3d
 800f9a8:	2102      	movs	r1, #2
 800f9aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	689b      	ldr	r3, [r3, #8]
 800f9b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	4a5a      	ldr	r2, [pc, #360]	; (800fb20 <HAL_TIM_ConfigClockSource+0x1a4>)
 800f9b8:	4013      	ands	r3, r2
 800f9ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	4a59      	ldr	r2, [pc, #356]	; (800fb24 <HAL_TIM_ConfigClockSource+0x1a8>)
 800f9c0:	4013      	ands	r3, r2
 800f9c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2280      	movs	r2, #128	; 0x80
 800f9d2:	0192      	lsls	r2, r2, #6
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d040      	beq.n	800fa5a <HAL_TIM_ConfigClockSource+0xde>
 800f9d8:	2280      	movs	r2, #128	; 0x80
 800f9da:	0192      	lsls	r2, r2, #6
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d900      	bls.n	800f9e2 <HAL_TIM_ConfigClockSource+0x66>
 800f9e0:	e088      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800f9e2:	2280      	movs	r2, #128	; 0x80
 800f9e4:	0152      	lsls	r2, r2, #5
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d100      	bne.n	800f9ec <HAL_TIM_ConfigClockSource+0x70>
 800f9ea:	e088      	b.n	800fafe <HAL_TIM_ConfigClockSource+0x182>
 800f9ec:	2280      	movs	r2, #128	; 0x80
 800f9ee:	0152      	lsls	r2, r2, #5
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d900      	bls.n	800f9f6 <HAL_TIM_ConfigClockSource+0x7a>
 800f9f4:	e07e      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800f9f6:	2b70      	cmp	r3, #112	; 0x70
 800f9f8:	d018      	beq.n	800fa2c <HAL_TIM_ConfigClockSource+0xb0>
 800f9fa:	d900      	bls.n	800f9fe <HAL_TIM_ConfigClockSource+0x82>
 800f9fc:	e07a      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800f9fe:	2b60      	cmp	r3, #96	; 0x60
 800fa00:	d04f      	beq.n	800faa2 <HAL_TIM_ConfigClockSource+0x126>
 800fa02:	d900      	bls.n	800fa06 <HAL_TIM_ConfigClockSource+0x8a>
 800fa04:	e076      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800fa06:	2b50      	cmp	r3, #80	; 0x50
 800fa08:	d03b      	beq.n	800fa82 <HAL_TIM_ConfigClockSource+0x106>
 800fa0a:	d900      	bls.n	800fa0e <HAL_TIM_ConfigClockSource+0x92>
 800fa0c:	e072      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800fa0e:	2b40      	cmp	r3, #64	; 0x40
 800fa10:	d057      	beq.n	800fac2 <HAL_TIM_ConfigClockSource+0x146>
 800fa12:	d900      	bls.n	800fa16 <HAL_TIM_ConfigClockSource+0x9a>
 800fa14:	e06e      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800fa16:	2b30      	cmp	r3, #48	; 0x30
 800fa18:	d063      	beq.n	800fae2 <HAL_TIM_ConfigClockSource+0x166>
 800fa1a:	d86b      	bhi.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800fa1c:	2b20      	cmp	r3, #32
 800fa1e:	d060      	beq.n	800fae2 <HAL_TIM_ConfigClockSource+0x166>
 800fa20:	d868      	bhi.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d05d      	beq.n	800fae2 <HAL_TIM_ConfigClockSource+0x166>
 800fa26:	2b10      	cmp	r3, #16
 800fa28:	d05b      	beq.n	800fae2 <HAL_TIM_ConfigClockSource+0x166>
 800fa2a:	e063      	b.n	800faf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fa3c:	f000 f9a8 	bl	800fd90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	689b      	ldr	r3, [r3, #8]
 800fa46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2277      	movs	r2, #119	; 0x77
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	609a      	str	r2, [r3, #8]
      break;
 800fa58:	e052      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fa6a:	f000 f991 	bl	800fd90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689a      	ldr	r2, [r3, #8]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2180      	movs	r1, #128	; 0x80
 800fa7a:	01c9      	lsls	r1, r1, #7
 800fa7c:	430a      	orrs	r2, r1
 800fa7e:	609a      	str	r2, [r3, #8]
      break;
 800fa80:	e03e      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fa8e:	001a      	movs	r2, r3
 800fa90:	f000 f902 	bl	800fc98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	2150      	movs	r1, #80	; 0x50
 800fa9a:	0018      	movs	r0, r3
 800fa9c:	f000 f95c 	bl	800fd58 <TIM_ITRx_SetConfig>
      break;
 800faa0:	e02e      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800faae:	001a      	movs	r2, r3
 800fab0:	f000 f920 	bl	800fcf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2160      	movs	r1, #96	; 0x60
 800faba:	0018      	movs	r0, r3
 800fabc:	f000 f94c 	bl	800fd58 <TIM_ITRx_SetConfig>
      break;
 800fac0:	e01e      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800face:	001a      	movs	r2, r3
 800fad0:	f000 f8e2 	bl	800fc98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2140      	movs	r1, #64	; 0x40
 800fada:	0018      	movs	r0, r3
 800fadc:	f000 f93c 	bl	800fd58 <TIM_ITRx_SetConfig>
      break;
 800fae0:	e00e      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	0019      	movs	r1, r3
 800faec:	0010      	movs	r0, r2
 800faee:	f000 f933 	bl	800fd58 <TIM_ITRx_SetConfig>
      break;
 800faf2:	e005      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800faf4:	230f      	movs	r3, #15
 800faf6:	18fb      	adds	r3, r7, r3
 800faf8:	2201      	movs	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
      break;
 800fafc:	e000      	b.n	800fb00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800fafe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	223d      	movs	r2, #61	; 0x3d
 800fb04:	2101      	movs	r1, #1
 800fb06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	223c      	movs	r2, #60	; 0x3c
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	5499      	strb	r1, [r3, r2]

  return status;
 800fb10:	230f      	movs	r3, #15
 800fb12:	18fb      	adds	r3, r7, r3
 800fb14:	781b      	ldrb	r3, [r3, #0]
}
 800fb16:	0018      	movs	r0, r3
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	b004      	add	sp, #16
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	46c0      	nop			; (mov r8, r8)
 800fb20:	ffceff88 	.word	0xffceff88
 800fb24:	ffff00ff 	.word	0xffff00ff

0800fb28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b082      	sub	sp, #8
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fb30:	46c0      	nop			; (mov r8, r8)
 800fb32:	46bd      	mov	sp, r7
 800fb34:	b002      	add	sp, #8
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b082      	sub	sp, #8
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fb40:	46c0      	nop			; (mov r8, r8)
 800fb42:	46bd      	mov	sp, r7
 800fb44:	b002      	add	sp, #8
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fb50:	46c0      	nop			; (mov r8, r8)
 800fb52:	46bd      	mov	sp, r7
 800fb54:	b002      	add	sp, #8
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fb60:	46c0      	nop			; (mov r8, r8)
 800fb62:	46bd      	mov	sp, r7
 800fb64:	b002      	add	sp, #8
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a3f      	ldr	r2, [pc, #252]	; (800fc78 <TIM_Base_SetConfig+0x110>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d00c      	beq.n	800fb9a <TIM_Base_SetConfig+0x32>
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	2380      	movs	r3, #128	; 0x80
 800fb84:	05db      	lsls	r3, r3, #23
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d007      	beq.n	800fb9a <TIM_Base_SetConfig+0x32>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	4a3b      	ldr	r2, [pc, #236]	; (800fc7c <TIM_Base_SetConfig+0x114>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d003      	beq.n	800fb9a <TIM_Base_SetConfig+0x32>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	4a3a      	ldr	r2, [pc, #232]	; (800fc80 <TIM_Base_SetConfig+0x118>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d108      	bne.n	800fbac <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2270      	movs	r2, #112	; 0x70
 800fb9e:	4393      	bics	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a32      	ldr	r2, [pc, #200]	; (800fc78 <TIM_Base_SetConfig+0x110>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d01c      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	2380      	movs	r3, #128	; 0x80
 800fbb8:	05db      	lsls	r3, r3, #23
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d017      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a2e      	ldr	r2, [pc, #184]	; (800fc7c <TIM_Base_SetConfig+0x114>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d013      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a2d      	ldr	r2, [pc, #180]	; (800fc80 <TIM_Base_SetConfig+0x118>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d00f      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a2c      	ldr	r2, [pc, #176]	; (800fc84 <TIM_Base_SetConfig+0x11c>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d00b      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a2b      	ldr	r2, [pc, #172]	; (800fc88 <TIM_Base_SetConfig+0x120>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d007      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	4a2a      	ldr	r2, [pc, #168]	; (800fc8c <TIM_Base_SetConfig+0x124>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d003      	beq.n	800fbee <TIM_Base_SetConfig+0x86>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a29      	ldr	r2, [pc, #164]	; (800fc90 <TIM_Base_SetConfig+0x128>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d108      	bne.n	800fc00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	4a28      	ldr	r2, [pc, #160]	; (800fc94 <TIM_Base_SetConfig+0x12c>)
 800fbf2:	4013      	ands	r3, r2
 800fbf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2280      	movs	r2, #128	; 0x80
 800fc04:	4393      	bics	r3, r2
 800fc06:	001a      	movs	r2, r3
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	695b      	ldr	r3, [r3, #20]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	689a      	ldr	r2, [r3, #8]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	681a      	ldr	r2, [r3, #0]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	4a13      	ldr	r2, [pc, #76]	; (800fc78 <TIM_Base_SetConfig+0x110>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d00b      	beq.n	800fc46 <TIM_Base_SetConfig+0xde>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a15      	ldr	r2, [pc, #84]	; (800fc88 <TIM_Base_SetConfig+0x120>)
 800fc32:	4293      	cmp	r3, r2
 800fc34:	d007      	beq.n	800fc46 <TIM_Base_SetConfig+0xde>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4a14      	ldr	r2, [pc, #80]	; (800fc8c <TIM_Base_SetConfig+0x124>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d003      	beq.n	800fc46 <TIM_Base_SetConfig+0xde>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4a13      	ldr	r2, [pc, #76]	; (800fc90 <TIM_Base_SetConfig+0x128>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d103      	bne.n	800fc4e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	691a      	ldr	r2, [r3, #16]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	691b      	ldr	r3, [r3, #16]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	2b01      	cmp	r3, #1
 800fc5e:	d106      	bne.n	800fc6e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	691b      	ldr	r3, [r3, #16]
 800fc64:	2201      	movs	r2, #1
 800fc66:	4393      	bics	r3, r2
 800fc68:	001a      	movs	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	611a      	str	r2, [r3, #16]
  }
}
 800fc6e:	46c0      	nop			; (mov r8, r8)
 800fc70:	46bd      	mov	sp, r7
 800fc72:	b004      	add	sp, #16
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	46c0      	nop			; (mov r8, r8)
 800fc78:	40012c00 	.word	0x40012c00
 800fc7c:	40000400 	.word	0x40000400
 800fc80:	40000800 	.word	0x40000800
 800fc84:	40002000 	.word	0x40002000
 800fc88:	40014000 	.word	0x40014000
 800fc8c:	40014400 	.word	0x40014400
 800fc90:	40014800 	.word	0x40014800
 800fc94:	fffffcff 	.word	0xfffffcff

0800fc98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6a1b      	ldr	r3, [r3, #32]
 800fca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	6a1b      	ldr	r3, [r3, #32]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	4393      	bics	r3, r2
 800fcb2:	001a      	movs	r2, r3
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	22f0      	movs	r2, #240	; 0xf0
 800fcc2:	4393      	bics	r3, r2
 800fcc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	011b      	lsls	r3, r3, #4
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	220a      	movs	r2, #10
 800fcd4:	4393      	bics	r3, r2
 800fcd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fcd8:	697a      	ldr	r2, [r7, #20]
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	693a      	ldr	r2, [r7, #16]
 800fce4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	697a      	ldr	r2, [r7, #20]
 800fcea:	621a      	str	r2, [r3, #32]
}
 800fcec:	46c0      	nop			; (mov r8, r8)
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	b006      	add	sp, #24
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b086      	sub	sp, #24
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	6a1b      	ldr	r3, [r3, #32]
 800fd0a:	2210      	movs	r2, #16
 800fd0c:	4393      	bics	r3, r2
 800fd0e:	001a      	movs	r2, r3
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	699b      	ldr	r3, [r3, #24]
 800fd18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	4a0d      	ldr	r2, [pc, #52]	; (800fd54 <TIM_TI2_ConfigInputStage+0x60>)
 800fd1e:	4013      	ands	r3, r2
 800fd20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	031b      	lsls	r3, r3, #12
 800fd26:	693a      	ldr	r2, [r7, #16]
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	22a0      	movs	r2, #160	; 0xa0
 800fd30:	4393      	bics	r3, r2
 800fd32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	011b      	lsls	r3, r3, #4
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	697a      	ldr	r2, [r7, #20]
 800fd48:	621a      	str	r2, [r3, #32]
}
 800fd4a:	46c0      	nop			; (mov r8, r8)
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	b006      	add	sp, #24
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	46c0      	nop			; (mov r8, r8)
 800fd54:	ffff0fff 	.word	0xffff0fff

0800fd58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4a08      	ldr	r2, [pc, #32]	; (800fd8c <TIM_ITRx_SetConfig+0x34>)
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd70:	683a      	ldr	r2, [r7, #0]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	2207      	movs	r2, #7
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	609a      	str	r2, [r3, #8]
}
 800fd82:	46c0      	nop			; (mov r8, r8)
 800fd84:	46bd      	mov	sp, r7
 800fd86:	b004      	add	sp, #16
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	46c0      	nop			; (mov r8, r8)
 800fd8c:	ffcfff8f 	.word	0xffcfff8f

0800fd90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
 800fd9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	689b      	ldr	r3, [r3, #8]
 800fda2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	4a09      	ldr	r2, [pc, #36]	; (800fdcc <TIM_ETR_SetConfig+0x3c>)
 800fda8:	4013      	ands	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	021a      	lsls	r2, r3, #8
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	697a      	ldr	r2, [r7, #20]
 800fdc2:	609a      	str	r2, [r3, #8]
}
 800fdc4:	46c0      	nop			; (mov r8, r8)
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	b006      	add	sp, #24
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	ffff00ff 	.word	0xffff00ff

0800fdd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	221f      	movs	r2, #31
 800fde0:	4013      	ands	r3, r2
 800fde2:	2201      	movs	r2, #1
 800fde4:	409a      	lsls	r2, r3
 800fde6:	0013      	movs	r3, r2
 800fde8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	43d2      	mvns	r2, r2
 800fdf2:	401a      	ands	r2, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6a1a      	ldr	r2, [r3, #32]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	211f      	movs	r1, #31
 800fe00:	400b      	ands	r3, r1
 800fe02:	6879      	ldr	r1, [r7, #4]
 800fe04:	4099      	lsls	r1, r3
 800fe06:	000b      	movs	r3, r1
 800fe08:	431a      	orrs	r2, r3
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	621a      	str	r2, [r3, #32]
}
 800fe0e:	46c0      	nop			; (mov r8, r8)
 800fe10:	46bd      	mov	sp, r7
 800fe12:	b006      	add	sp, #24
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b084      	sub	sp, #16
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	223c      	movs	r2, #60	; 0x3c
 800fe26:	5c9b      	ldrb	r3, [r3, r2]
 800fe28:	2b01      	cmp	r3, #1
 800fe2a:	d101      	bne.n	800fe30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	e05a      	b.n	800fee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	223c      	movs	r2, #60	; 0x3c
 800fe34:	2101      	movs	r1, #1
 800fe36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	223d      	movs	r2, #61	; 0x3d
 800fe3c:	2102      	movs	r1, #2
 800fe3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a26      	ldr	r2, [pc, #152]	; (800fef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d108      	bne.n	800fe6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	4a25      	ldr	r2, [pc, #148]	; (800fef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fe5e:	4013      	ands	r3, r2
 800fe60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2270      	movs	r2, #112	; 0x70
 800fe70:	4393      	bics	r3, r2
 800fe72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4a19      	ldr	r2, [pc, #100]	; (800fef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	d014      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	2380      	movs	r3, #128	; 0x80
 800fe96:	05db      	lsls	r3, r3, #23
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d00e      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a15      	ldr	r2, [pc, #84]	; (800fef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d009      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a14      	ldr	r2, [pc, #80]	; (800fefc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d004      	beq.n	800feba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4a12      	ldr	r2, [pc, #72]	; (800ff00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d10c      	bne.n	800fed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	2280      	movs	r2, #128	; 0x80
 800febe:	4393      	bics	r3, r2
 800fec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	4313      	orrs	r3, r2
 800feca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	223d      	movs	r2, #61	; 0x3d
 800fed8:	2101      	movs	r1, #1
 800feda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	223c      	movs	r2, #60	; 0x3c
 800fee0:	2100      	movs	r1, #0
 800fee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	0018      	movs	r0, r3
 800fee8:	46bd      	mov	sp, r7
 800feea:	b004      	add	sp, #16
 800feec:	bd80      	pop	{r7, pc}
 800feee:	46c0      	nop			; (mov r8, r8)
 800fef0:	40012c00 	.word	0x40012c00
 800fef4:	ff0fffff 	.word	0xff0fffff
 800fef8:	40000400 	.word	0x40000400
 800fefc:	40000800 	.word	0x40000800
 800ff00:	40014000 	.word	0x40014000

0800ff04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff0c:	46c0      	nop			; (mov r8, r8)
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	b002      	add	sp, #8
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff1c:	46c0      	nop			; (mov r8, r8)
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	b002      	add	sp, #8
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ff2c:	46c0      	nop			; (mov r8, r8)
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	b002      	add	sp, #8
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <LL_DMA_ConfigTransfer>:
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800ff44:	4a0c      	ldr	r2, [pc, #48]	; (800ff78 <LL_DMA_ConfigTransfer+0x44>)
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	18d3      	adds	r3, r2, r3
 800ff4a:	781b      	ldrb	r3, [r3, #0]
 800ff4c:	001a      	movs	r2, r3
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	18d3      	adds	r3, r2, r3
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	4a09      	ldr	r2, [pc, #36]	; (800ff7c <LL_DMA_ConfigTransfer+0x48>)
 800ff56:	4013      	ands	r3, r2
 800ff58:	0019      	movs	r1, r3
 800ff5a:	4a07      	ldr	r2, [pc, #28]	; (800ff78 <LL_DMA_ConfigTransfer+0x44>)
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	18d3      	adds	r3, r2, r3
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	001a      	movs	r2, r3
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	18d3      	adds	r3, r2, r3
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	601a      	str	r2, [r3, #0]
}
 800ff6e:	46c0      	nop			; (mov r8, r8)
 800ff70:	46bd      	mov	sp, r7
 800ff72:	b006      	add	sp, #24
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	46c0      	nop			; (mov r8, r8)
 800ff78:	08024f7c 	.word	0x08024f7c
 800ff7c:	ffff800f 	.word	0xffff800f

0800ff80 <LL_DMA_SetDataLength>:
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800ff90:	4a0b      	ldr	r2, [pc, #44]	; (800ffc0 <LL_DMA_SetDataLength+0x40>)
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	18d3      	adds	r3, r2, r3
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	001a      	movs	r2, r3
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	18d3      	adds	r3, r2, r3
 800ff9e:	685b      	ldr	r3, [r3, #4]
 800ffa0:	0c1b      	lsrs	r3, r3, #16
 800ffa2:	0419      	lsls	r1, r3, #16
 800ffa4:	4a06      	ldr	r2, [pc, #24]	; (800ffc0 <LL_DMA_SetDataLength+0x40>)
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	18d3      	adds	r3, r2, r3
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	001a      	movs	r2, r3
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	18d3      	adds	r3, r2, r3
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	430a      	orrs	r2, r1
 800ffb6:	605a      	str	r2, [r3, #4]
}
 800ffb8:	46c0      	nop			; (mov r8, r8)
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	b006      	add	sp, #24
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	08024f7c 	.word	0x08024f7c

0800ffc4 <LL_DMA_SetMemoryAddress>:
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800ffd4:	4a06      	ldr	r2, [pc, #24]	; (800fff0 <LL_DMA_SetMemoryAddress+0x2c>)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	18d3      	adds	r3, r2, r3
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	001a      	movs	r2, r3
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	18d3      	adds	r3, r2, r3
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	60da      	str	r2, [r3, #12]
}
 800ffe6:	46c0      	nop			; (mov r8, r8)
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	b006      	add	sp, #24
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	46c0      	nop			; (mov r8, r8)
 800fff0:	08024f7c 	.word	0x08024f7c

0800fff4 <LL_DMA_SetPeriphAddress>:
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 8010004:	4a06      	ldr	r2, [pc, #24]	; (8010020 <LL_DMA_SetPeriphAddress+0x2c>)
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	18d3      	adds	r3, r2, r3
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	001a      	movs	r2, r3
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	18d3      	adds	r3, r2, r3
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	609a      	str	r2, [r3, #8]
}
 8010016:	46c0      	nop			; (mov r8, r8)
 8010018:	46bd      	mov	sp, r7
 801001a:	b006      	add	sp, #24
 801001c:	bd80      	pop	{r7, pc}
 801001e:	46c0      	nop			; (mov r8, r8)
 8010020:	08024f7c 	.word	0x08024f7c

08010024 <LL_DMA_SetPeriphRequest>:
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	0a9b      	lsrs	r3, r3, #10
 8010034:	4a0f      	ldr	r2, [pc, #60]	; (8010074 <LL_DMA_SetPeriphRequest+0x50>)
 8010036:	405a      	eors	r2, r3
 8010038:	0013      	movs	r3, r2
 801003a:	00db      	lsls	r3, r3, #3
 801003c:	1a9b      	subs	r3, r3, r2
 801003e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	18d3      	adds	r3, r2, r3
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4a0b      	ldr	r2, [pc, #44]	; (8010078 <LL_DMA_SetPeriphRequest+0x54>)
 801004a:	4694      	mov	ip, r2
 801004c:	4463      	add	r3, ip
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	227f      	movs	r2, #127	; 0x7f
 8010052:	4393      	bics	r3, r2
 8010054:	0019      	movs	r1, r3
 8010056:	68ba      	ldr	r2, [r7, #8]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	18d3      	adds	r3, r2, r3
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	4a06      	ldr	r2, [pc, #24]	; (8010078 <LL_DMA_SetPeriphRequest+0x54>)
 8010060:	4694      	mov	ip, r2
 8010062:	4463      	add	r3, ip
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	430a      	orrs	r2, r1
 8010068:	601a      	str	r2, [r3, #0]
}
 801006a:	46c0      	nop			; (mov r8, r8)
 801006c:	46bd      	mov	sp, r7
 801006e:	b006      	add	sp, #24
 8010070:	bd80      	pop	{r7, pc}
 8010072:	46c0      	nop			; (mov r8, r8)
 8010074:	00100080 	.word	0x00100080
 8010078:	40020800 	.word	0x40020800

0801007c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8010090:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8010096:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 801009c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 80100a2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 80100a8:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 80100ae:	431a      	orrs	r2, r3
 80100b0:	68b9      	ldr	r1, [r7, #8]
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	0018      	movs	r0, r3
 80100b6:	f7ff ff3d 	bl	800ff34 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	68b9      	ldr	r1, [r7, #8]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	0018      	movs	r0, r3
 80100c4:	f7ff ff7e 	bl	800ffc4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	68b9      	ldr	r1, [r7, #8]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	0018      	movs	r0, r3
 80100d2:	f7ff ff8f 	bl	800fff4 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6a1a      	ldr	r2, [r3, #32]
 80100da:	68b9      	ldr	r1, [r7, #8]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	0018      	movs	r0, r3
 80100e0:	f7ff ff4e 	bl	800ff80 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100e8:	68b9      	ldr	r1, [r7, #8]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	0018      	movs	r0, r3
 80100ee:	f7ff ff99 	bl	8010024 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	0018      	movs	r0, r3
 80100f6:	46bd      	mov	sp, r7
 80100f8:	b004      	add	sp, #16
 80100fa:	bd80      	pop	{r7, pc}

080100fc <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2200      	movs	r2, #0
 8010120:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2200      	movs	r2, #0
 8010126:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2200      	movs	r2, #0
 8010132:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2200      	movs	r2, #0
 8010144:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010146:	46c0      	nop			; (mov r8, r8)
 8010148:	46bd      	mov	sp, r7
 801014a:	b002      	add	sp, #8
 801014c:	bd80      	pop	{r7, pc}

0801014e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b084      	sub	sp, #16
 8010152:	af00      	add	r7, sp, #0
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	6819      	ldr	r1, [r3, #0]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	435b      	muls	r3, r3
 8010162:	001a      	movs	r2, r3
 8010164:	0013      	movs	r3, r2
 8010166:	005b      	lsls	r3, r3, #1
 8010168:	189b      	adds	r3, r3, r2
 801016a:	43db      	mvns	r3, r3
 801016c:	400b      	ands	r3, r1
 801016e:	001a      	movs	r2, r3
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	435b      	muls	r3, r3
 8010174:	6879      	ldr	r1, [r7, #4]
 8010176:	434b      	muls	r3, r1
 8010178:	431a      	orrs	r2, r3
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	601a      	str	r2, [r3, #0]
}
 801017e:	46c0      	nop			; (mov r8, r8)
 8010180:	46bd      	mov	sp, r7
 8010182:	b004      	add	sp, #16
 8010184:	bd80      	pop	{r7, pc}

08010186 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b084      	sub	sp, #16
 801018a:	af00      	add	r7, sp, #0
 801018c:	60f8      	str	r0, [r7, #12]
 801018e:	60b9      	str	r1, [r7, #8]
 8010190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	43d2      	mvns	r2, r2
 801019a:	401a      	ands	r2, r3
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	6879      	ldr	r1, [r7, #4]
 80101a0:	434b      	muls	r3, r1
 80101a2:	431a      	orrs	r2, r3
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	605a      	str	r2, [r3, #4]
}
 80101a8:	46c0      	nop			; (mov r8, r8)
 80101aa:	46bd      	mov	sp, r7
 80101ac:	b004      	add	sp, #16
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	6899      	ldr	r1, [r3, #8]
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	435b      	muls	r3, r3
 80101c4:	001a      	movs	r2, r3
 80101c6:	0013      	movs	r3, r2
 80101c8:	005b      	lsls	r3, r3, #1
 80101ca:	189b      	adds	r3, r3, r2
 80101cc:	43db      	mvns	r3, r3
 80101ce:	400b      	ands	r3, r1
 80101d0:	001a      	movs	r2, r3
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	435b      	muls	r3, r3
 80101d6:	6879      	ldr	r1, [r7, #4]
 80101d8:	434b      	muls	r3, r1
 80101da:	431a      	orrs	r2, r3
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	609a      	str	r2, [r3, #8]
}
 80101e0:	46c0      	nop			; (mov r8, r8)
 80101e2:	46bd      	mov	sp, r7
 80101e4:	b004      	add	sp, #16
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	68d9      	ldr	r1, [r3, #12]
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	435b      	muls	r3, r3
 80101fc:	001a      	movs	r2, r3
 80101fe:	0013      	movs	r3, r2
 8010200:	005b      	lsls	r3, r3, #1
 8010202:	189b      	adds	r3, r3, r2
 8010204:	43db      	mvns	r3, r3
 8010206:	400b      	ands	r3, r1
 8010208:	001a      	movs	r2, r3
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	435b      	muls	r3, r3
 801020e:	6879      	ldr	r1, [r7, #4]
 8010210:	434b      	muls	r3, r1
 8010212:	431a      	orrs	r2, r3
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	60da      	str	r2, [r3, #12]
}
 8010218:	46c0      	nop			; (mov r8, r8)
 801021a:	46bd      	mov	sp, r7
 801021c:	b004      	add	sp, #16
 801021e:	bd80      	pop	{r7, pc}

08010220 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6a19      	ldr	r1, [r3, #32]
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	435b      	muls	r3, r3
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	4353      	muls	r3, r2
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	435a      	muls	r2, r3
 801023c:	0013      	movs	r3, r2
 801023e:	011b      	lsls	r3, r3, #4
 8010240:	1a9b      	subs	r3, r3, r2
 8010242:	43db      	mvns	r3, r3
 8010244:	400b      	ands	r3, r1
 8010246:	001a      	movs	r2, r3
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	435b      	muls	r3, r3
 801024c:	68b9      	ldr	r1, [r7, #8]
 801024e:	434b      	muls	r3, r1
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	434b      	muls	r3, r1
 8010254:	6879      	ldr	r1, [r7, #4]
 8010256:	434b      	muls	r3, r1
 8010258:	431a      	orrs	r2, r3
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 801025e:	46c0      	nop			; (mov r8, r8)
 8010260:	46bd      	mov	sp, r7
 8010262:	b004      	add	sp, #16
 8010264:	bd80      	pop	{r7, pc}

08010266 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8010266:	b580      	push	{r7, lr}
 8010268:	b084      	sub	sp, #16
 801026a:	af00      	add	r7, sp, #0
 801026c:	60f8      	str	r0, [r7, #12]
 801026e:	60b9      	str	r1, [r7, #8]
 8010270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	0a1b      	lsrs	r3, r3, #8
 801027a:	68ba      	ldr	r2, [r7, #8]
 801027c:	0a12      	lsrs	r2, r2, #8
 801027e:	4353      	muls	r3, r2
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	0a12      	lsrs	r2, r2, #8
 8010284:	4353      	muls	r3, r2
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	0a12      	lsrs	r2, r2, #8
 801028a:	435a      	muls	r2, r3
 801028c:	0013      	movs	r3, r2
 801028e:	011b      	lsls	r3, r3, #4
 8010290:	1a9b      	subs	r3, r3, r2
 8010292:	43db      	mvns	r3, r3
 8010294:	400b      	ands	r3, r1
 8010296:	001a      	movs	r2, r3
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	0a1b      	lsrs	r3, r3, #8
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	0a09      	lsrs	r1, r1, #8
 80102a0:	434b      	muls	r3, r1
 80102a2:	68b9      	ldr	r1, [r7, #8]
 80102a4:	0a09      	lsrs	r1, r1, #8
 80102a6:	434b      	muls	r3, r1
 80102a8:	68b9      	ldr	r1, [r7, #8]
 80102aa:	0a09      	lsrs	r1, r1, #8
 80102ac:	434b      	muls	r3, r1
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	434b      	muls	r3, r1
 80102b2:	431a      	orrs	r2, r3
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80102b8:	46c0      	nop			; (mov r8, r8)
 80102ba:	46bd      	mov	sp, r7
 80102bc:	b004      	add	sp, #16
 80102be:	bd80      	pop	{r7, pc}

080102c0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80102ce:	e047      	b.n	8010360 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2101      	movs	r1, #1
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	4091      	lsls	r1, r2
 80102da:	000a      	movs	r2, r1
 80102dc:	4013      	ands	r3, r2
 80102de:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d039      	beq.n	801035a <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d003      	beq.n	80102f6 <LL_GPIO_Init+0x36>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d10d      	bne.n	8010312 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	689a      	ldr	r2, [r3, #8]
 80102fa:	68b9      	ldr	r1, [r7, #8]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	0018      	movs	r0, r3
 8010300:	f7ff ff56 	bl	80101b0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	68da      	ldr	r2, [r3, #12]
 8010308:	68b9      	ldr	r1, [r7, #8]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	0018      	movs	r0, r3
 801030e:	f7ff ff3a 	bl	8010186 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	691a      	ldr	r2, [r3, #16]
 8010316:	68b9      	ldr	r1, [r7, #8]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	0018      	movs	r0, r3
 801031c:	f7ff ff64 	bl	80101e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	685b      	ldr	r3, [r3, #4]
 8010324:	2b02      	cmp	r3, #2
 8010326:	d111      	bne.n	801034c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2bff      	cmp	r3, #255	; 0xff
 801032c:	d807      	bhi.n	801033e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	695a      	ldr	r2, [r3, #20]
 8010332:	68b9      	ldr	r1, [r7, #8]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	0018      	movs	r0, r3
 8010338:	f7ff ff72 	bl	8010220 <LL_GPIO_SetAFPin_0_7>
 801033c:	e006      	b.n	801034c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	695a      	ldr	r2, [r3, #20]
 8010342:	68b9      	ldr	r1, [r7, #8]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	0018      	movs	r0, r3
 8010348:	f7ff ff8d 	bl	8010266 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	68b9      	ldr	r1, [r7, #8]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	0018      	movs	r0, r3
 8010356:	f7ff fefa 	bl	801014e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	3301      	adds	r3, #1
 801035e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	40da      	lsrs	r2, r3
 8010368:	1e13      	subs	r3, r2, #0
 801036a:	d1b1      	bne.n	80102d0 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 801036c:	2300      	movs	r3, #0
}
 801036e:	0018      	movs	r0, r3
 8010370:	46bd      	mov	sp, r7
 8010372:	b004      	add	sp, #16
 8010374:	bd80      	pop	{r7, pc}

08010376 <LL_LPUART_IsEnabled>:
{
 8010376:	b580      	push	{r7, lr}
 8010378:	b082      	sub	sp, #8
 801037a:	af00      	add	r7, sp, #0
 801037c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2201      	movs	r2, #1
 8010384:	4013      	ands	r3, r2
 8010386:	2b01      	cmp	r3, #1
 8010388:	d101      	bne.n	801038e <LL_LPUART_IsEnabled+0x18>
 801038a:	2301      	movs	r3, #1
 801038c:	e000      	b.n	8010390 <LL_LPUART_IsEnabled+0x1a>
 801038e:	2300      	movs	r3, #0
}
 8010390:	0018      	movs	r0, r3
 8010392:	46bd      	mov	sp, r7
 8010394:	b002      	add	sp, #8
 8010396:	bd80      	pop	{r7, pc}

08010398 <LL_LPUART_SetPrescaler>:
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a6:	220f      	movs	r2, #15
 80103a8:	4393      	bics	r3, r2
 80103aa:	683a      	ldr	r2, [r7, #0]
 80103ac:	b292      	uxth	r2, r2
 80103ae:	431a      	orrs	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80103b4:	46c0      	nop			; (mov r8, r8)
 80103b6:	46bd      	mov	sp, r7
 80103b8:	b002      	add	sp, #8
 80103ba:	bd80      	pop	{r7, pc}

080103bc <LL_LPUART_SetStopBitsLength>:
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	4a05      	ldr	r2, [pc, #20]	; (80103e0 <LL_LPUART_SetStopBitsLength+0x24>)
 80103cc:	401a      	ands	r2, r3
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	431a      	orrs	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	605a      	str	r2, [r3, #4]
}
 80103d6:	46c0      	nop			; (mov r8, r8)
 80103d8:	46bd      	mov	sp, r7
 80103da:	b002      	add	sp, #8
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	46c0      	nop			; (mov r8, r8)
 80103e0:	ffffcfff 	.word	0xffffcfff

080103e4 <LL_LPUART_SetHWFlowCtrl>:
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	4a05      	ldr	r2, [pc, #20]	; (8010408 <LL_LPUART_SetHWFlowCtrl+0x24>)
 80103f4:	401a      	ands	r2, r3
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	431a      	orrs	r2, r3
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	609a      	str	r2, [r3, #8]
}
 80103fe:	46c0      	nop			; (mov r8, r8)
 8010400:	46bd      	mov	sp, r7
 8010402:	b002      	add	sp, #8
 8010404:	bd80      	pop	{r7, pc}
 8010406:	46c0      	nop			; (mov r8, r8)
 8010408:	fffffcff 	.word	0xfffffcff

0801040c <LL_LPUART_SetBaudRate>:
{
 801040c:	b5b0      	push	{r4, r5, r7, lr}
 801040e:	b08c      	sub	sp, #48	; 0x30
 8010410:	af00      	add	r7, sp, #0
 8010412:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010414:	62b9      	str	r1, [r7, #40]	; 0x28
 8010416:	627a      	str	r2, [r7, #36]	; 0x24
 8010418:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 801041a:	6a3b      	ldr	r3, [r7, #32]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d030      	beq.n	8010482 <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8010420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010422:	61bb      	str	r3, [r7, #24]
 8010424:	2300      	movs	r3, #0
 8010426:	61fb      	str	r3, [r7, #28]
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	b29b      	uxth	r3, r3
 801042c:	001a      	movs	r2, r3
 801042e:	4b17      	ldr	r3, [pc, #92]	; (801048c <LL_LPUART_SetBaudRate+0x80>)
 8010430:	0052      	lsls	r2, r2, #1
 8010432:	5ad3      	ldrh	r3, [r2, r3]
 8010434:	613b      	str	r3, [r7, #16]
 8010436:	2300      	movs	r3, #0
 8010438:	617b      	str	r3, [r7, #20]
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	69b8      	ldr	r0, [r7, #24]
 8010440:	69f9      	ldr	r1, [r7, #28]
 8010442:	f7f6 f84b 	bl	80064dc <__aeabi_uldivmod>
 8010446:	0002      	movs	r2, r0
 8010448:	000b      	movs	r3, r1
 801044a:	0e11      	lsrs	r1, r2, #24
 801044c:	021d      	lsls	r5, r3, #8
 801044e:	430d      	orrs	r5, r1
 8010450:	0214      	lsls	r4, r2, #8
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	085b      	lsrs	r3, r3, #1
 8010456:	60bb      	str	r3, [r7, #8]
 8010458:	2300      	movs	r3, #0
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	68b8      	ldr	r0, [r7, #8]
 801045e:	68f9      	ldr	r1, [r7, #12]
 8010460:	1900      	adds	r0, r0, r4
 8010462:	4169      	adcs	r1, r5
 8010464:	6a3b      	ldr	r3, [r7, #32]
 8010466:	603b      	str	r3, [r7, #0]
 8010468:	2300      	movs	r3, #0
 801046a:	607b      	str	r3, [r7, #4]
 801046c:	683a      	ldr	r2, [r7, #0]
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f7f6 f834 	bl	80064dc <__aeabi_uldivmod>
 8010474:	0002      	movs	r2, r0
 8010476:	000b      	movs	r3, r1
 8010478:	0013      	movs	r3, r2
 801047a:	031b      	lsls	r3, r3, #12
 801047c:	0b1a      	lsrs	r2, r3, #12
 801047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010480:	60da      	str	r2, [r3, #12]
}
 8010482:	46c0      	nop			; (mov r8, r8)
 8010484:	46bd      	mov	sp, r7
 8010486:	b00c      	add	sp, #48	; 0x30
 8010488:	bdb0      	pop	{r4, r5, r7, pc}
 801048a:	46c0      	nop			; (mov r8, r8)
 801048c:	08024f84 	.word	0x08024f84

08010490 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b084      	sub	sp, #16
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801049a:	230f      	movs	r3, #15
 801049c:	18fb      	adds	r3, r7, r3
 801049e:	2201      	movs	r2, #1
 80104a0:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80104a2:	2300      	movs	r3, #0
 80104a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	0018      	movs	r0, r3
 80104aa:	f7ff ff64 	bl	8010376 <LL_LPUART_IsEnabled>
 80104ae:	1e03      	subs	r3, r0, #0
 80104b0:	d14d      	bne.n	801054e <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a29      	ldr	r2, [pc, #164]	; (801055c <LL_LPUART_Init+0xcc>)
 80104b8:	401a      	ands	r2, r3
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	6899      	ldr	r1, [r3, #8]
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	691b      	ldr	r3, [r3, #16]
 80104c2:	4319      	orrs	r1, r3
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	695b      	ldr	r3, [r3, #20]
 80104c8:	430b      	orrs	r3, r1
 80104ca:	431a      	orrs	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	68da      	ldr	r2, [r3, #12]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	0011      	movs	r1, r2
 80104d8:	0018      	movs	r0, r3
 80104da:	f7ff ff6f 	bl	80103bc <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	699a      	ldr	r2, [r3, #24]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	0011      	movs	r1, r2
 80104e6:	0018      	movs	r0, r3
 80104e8:	f7ff ff7c 	bl	80103e4 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	4a1c      	ldr	r2, [pc, #112]	; (8010560 <LL_LPUART_Init+0xd0>)
 80104f0:	4293      	cmp	r3, r2
 80104f2:	d107      	bne.n	8010504 <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80104f4:	23c0      	movs	r3, #192	; 0xc0
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	0018      	movs	r0, r3
 80104fa:	f000 f8bf 	bl	801067c <LL_RCC_GetLPUARTClockFreq>
 80104fe:	0003      	movs	r3, r0
 8010500:	60bb      	str	r3, [r7, #8]
 8010502:	e00a      	b.n	801051a <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a17      	ldr	r2, [pc, #92]	; (8010564 <LL_LPUART_Init+0xd4>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d106      	bne.n	801051a <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 801050c:	23c0      	movs	r3, #192	; 0xc0
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	0018      	movs	r0, r3
 8010512:	f000 f8b3 	bl	801067c <LL_RCC_GetLPUARTClockFreq>
 8010516:	0003      	movs	r3, r0
 8010518:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00f      	beq.n	8010540 <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00b      	beq.n	8010540 <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 8010528:	230f      	movs	r3, #15
 801052a:	18fb      	adds	r3, r7, r3
 801052c:	2200      	movs	r2, #0
 801052e:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8010538:	68b9      	ldr	r1, [r7, #8]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff ff66 	bl	801040c <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	0011      	movs	r1, r2
 8010548:	0018      	movs	r0, r3
 801054a:	f7ff ff25 	bl	8010398 <LL_LPUART_SetPrescaler>
  }

  return (status);
 801054e:	230f      	movs	r3, #15
 8010550:	18fb      	adds	r3, r7, r3
 8010552:	781b      	ldrb	r3, [r3, #0]
}
 8010554:	0018      	movs	r0, r3
 8010556:	46bd      	mov	sp, r7
 8010558:	b004      	add	sp, #16
 801055a:	bd80      	pop	{r7, pc}
 801055c:	efffe9f3 	.word	0xefffe9f3
 8010560:	40008000 	.word	0x40008000
 8010564:	40008400 	.word	0x40008400

08010568 <LL_RCC_HSI_IsReady>:
{
 8010568:	b580      	push	{r7, lr}
 801056a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 801056c:	4b07      	ldr	r3, [pc, #28]	; (801058c <LL_RCC_HSI_IsReady+0x24>)
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	2380      	movs	r3, #128	; 0x80
 8010572:	00db      	lsls	r3, r3, #3
 8010574:	401a      	ands	r2, r3
 8010576:	2380      	movs	r3, #128	; 0x80
 8010578:	00db      	lsls	r3, r3, #3
 801057a:	429a      	cmp	r2, r3
 801057c:	d101      	bne.n	8010582 <LL_RCC_HSI_IsReady+0x1a>
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <LL_RCC_HSI_IsReady+0x1c>
 8010582:	2300      	movs	r3, #0
}
 8010584:	0018      	movs	r0, r3
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	46c0      	nop			; (mov r8, r8)
 801058c:	40021000 	.word	0x40021000

08010590 <LL_RCC_LSE_IsReady>:
{
 8010590:	b580      	push	{r7, lr}
 8010592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8010594:	4b05      	ldr	r3, [pc, #20]	; (80105ac <LL_RCC_LSE_IsReady+0x1c>)
 8010596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010598:	2202      	movs	r2, #2
 801059a:	4013      	ands	r3, r2
 801059c:	2b02      	cmp	r3, #2
 801059e:	d101      	bne.n	80105a4 <LL_RCC_LSE_IsReady+0x14>
 80105a0:	2301      	movs	r3, #1
 80105a2:	e000      	b.n	80105a6 <LL_RCC_LSE_IsReady+0x16>
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	0018      	movs	r0, r3
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	40021000 	.word	0x40021000

080105b0 <LL_RCC_GetSysClkSource>:
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80105b4:	4b03      	ldr	r3, [pc, #12]	; (80105c4 <LL_RCC_GetSysClkSource+0x14>)
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	2238      	movs	r2, #56	; 0x38
 80105ba:	4013      	ands	r3, r2
}
 80105bc:	0018      	movs	r0, r3
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	46c0      	nop			; (mov r8, r8)
 80105c4:	40021000 	.word	0x40021000

080105c8 <LL_RCC_GetAHBPrescaler>:
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80105cc:	4b03      	ldr	r3, [pc, #12]	; (80105dc <LL_RCC_GetAHBPrescaler+0x14>)
 80105ce:	689a      	ldr	r2, [r3, #8]
 80105d0:	23f0      	movs	r3, #240	; 0xf0
 80105d2:	011b      	lsls	r3, r3, #4
 80105d4:	4013      	ands	r3, r2
}
 80105d6:	0018      	movs	r0, r3
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	40021000 	.word	0x40021000

080105e0 <LL_RCC_GetAPB1Prescaler>:
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80105e4:	4b03      	ldr	r3, [pc, #12]	; (80105f4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80105e6:	689a      	ldr	r2, [r3, #8]
 80105e8:	23e0      	movs	r3, #224	; 0xe0
 80105ea:	01db      	lsls	r3, r3, #7
 80105ec:	4013      	ands	r3, r2
}
 80105ee:	0018      	movs	r0, r3
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	40021000 	.word	0x40021000

080105f8 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 8010600:	4b05      	ldr	r3, [pc, #20]	; (8010618 <LL_RCC_GetLPUARTClockSource+0x20>)
 8010602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	401a      	ands	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	041b      	lsls	r3, r3, #16
 801060c:	4313      	orrs	r3, r2
}
 801060e:	0018      	movs	r0, r3
 8010610:	46bd      	mov	sp, r7
 8010612:	b002      	add	sp, #8
 8010614:	bd80      	pop	{r7, pc}
 8010616:	46c0      	nop			; (mov r8, r8)
 8010618:	40021000 	.word	0x40021000

0801061c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8010620:	4b03      	ldr	r3, [pc, #12]	; (8010630 <LL_RCC_PLL_GetN+0x14>)
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	0a1b      	lsrs	r3, r3, #8
 8010626:	227f      	movs	r2, #127	; 0x7f
 8010628:	4013      	ands	r3, r2
}
 801062a:	0018      	movs	r0, r3
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	40021000 	.word	0x40021000

08010634 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8010638:	4b03      	ldr	r3, [pc, #12]	; (8010648 <LL_RCC_PLL_GetR+0x14>)
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	0f5b      	lsrs	r3, r3, #29
 801063e:	075b      	lsls	r3, r3, #29
}
 8010640:	0018      	movs	r0, r3
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	46c0      	nop			; (mov r8, r8)
 8010648:	40021000 	.word	0x40021000

0801064c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8010650:	4b03      	ldr	r3, [pc, #12]	; (8010660 <LL_RCC_PLL_GetMainSource+0x14>)
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	2203      	movs	r2, #3
 8010656:	4013      	ands	r3, r2
}
 8010658:	0018      	movs	r0, r3
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	46c0      	nop			; (mov r8, r8)
 8010660:	40021000 	.word	0x40021000

08010664 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8010668:	4b03      	ldr	r3, [pc, #12]	; (8010678 <LL_RCC_PLL_GetDivider+0x14>)
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	2270      	movs	r2, #112	; 0x70
 801066e:	4013      	ands	r3, r2
}
 8010670:	0018      	movs	r0, r3
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
 8010676:	46c0      	nop			; (mov r8, r8)
 8010678:	40021000 	.word	0x40021000

0801067c <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8010684:	2300      	movs	r3, #0
 8010686:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	23c0      	movs	r3, #192	; 0xc0
 801068c:	011b      	lsls	r3, r3, #4
 801068e:	429a      	cmp	r2, r3
 8010690:	d134      	bne.n	80106fc <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	0018      	movs	r0, r3
 8010696:	f7ff ffaf 	bl	80105f8 <LL_RCC_GetLPUARTClockSource>
 801069a:	0003      	movs	r3, r0
 801069c:	4a3a      	ldr	r2, [pc, #232]	; (8010788 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d016      	beq.n	80106d0 <LL_RCC_GetLPUARTClockFreq+0x54>
 80106a2:	4a39      	ldr	r2, [pc, #228]	; (8010788 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d81c      	bhi.n	80106e2 <LL_RCC_GetLPUARTClockFreq+0x66>
 80106a8:	4a38      	ldr	r2, [pc, #224]	; (801078c <LL_RCC_GetLPUARTClockFreq+0x110>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d003      	beq.n	80106b6 <LL_RCC_GetLPUARTClockFreq+0x3a>
 80106ae:	4a38      	ldr	r2, [pc, #224]	; (8010790 <LL_RCC_GetLPUARTClockFreq+0x114>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d005      	beq.n	80106c0 <LL_RCC_GetLPUARTClockFreq+0x44>
 80106b4:	e015      	b.n	80106e2 <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 80106b6:	f000 f875 	bl	80107a4 <RCC_GetSystemClockFreq>
 80106ba:	0003      	movs	r3, r0
 80106bc:	60fb      	str	r3, [r7, #12]
        break;
 80106be:	e05e      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80106c0:	f7ff ff52 	bl	8010568 <LL_RCC_HSI_IsReady>
 80106c4:	0003      	movs	r3, r0
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d152      	bne.n	8010770 <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 80106ca:	4b32      	ldr	r3, [pc, #200]	; (8010794 <LL_RCC_GetLPUARTClockFreq+0x118>)
 80106cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80106ce:	e04f      	b.n	8010770 <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80106d0:	f7ff ff5e 	bl	8010590 <LL_RCC_LSE_IsReady>
 80106d4:	0003      	movs	r3, r0
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d14c      	bne.n	8010774 <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 80106da:	2380      	movs	r3, #128	; 0x80
 80106dc:	021b      	lsls	r3, r3, #8
 80106de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80106e0:	e048      	b.n	8010774 <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80106e2:	f000 f85f 	bl	80107a4 <RCC_GetSystemClockFreq>
 80106e6:	0003      	movs	r3, r0
 80106e8:	0018      	movs	r0, r3
 80106ea:	f000 f887 	bl	80107fc <RCC_GetHCLKClockFreq>
 80106ee:	0003      	movs	r3, r0
 80106f0:	0018      	movs	r0, r3
 80106f2:	f000 f89b 	bl	801082c <RCC_GetPCLK1ClockFreq>
 80106f6:	0003      	movs	r3, r0
 80106f8:	60fb      	str	r3, [r7, #12]
        break;
 80106fa:	e040      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	23c0      	movs	r3, #192	; 0xc0
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	429a      	cmp	r2, r3
 8010704:	d13b      	bne.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	0018      	movs	r0, r3
 801070a:	f7ff ff75 	bl	80105f8 <LL_RCC_GetLPUARTClockSource>
 801070e:	0003      	movs	r3, r0
 8010710:	4a21      	ldr	r2, [pc, #132]	; (8010798 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d016      	beq.n	8010744 <LL_RCC_GetLPUARTClockFreq+0xc8>
 8010716:	4a20      	ldr	r2, [pc, #128]	; (8010798 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d81c      	bhi.n	8010756 <LL_RCC_GetLPUARTClockFreq+0xda>
 801071c:	4a1f      	ldr	r2, [pc, #124]	; (801079c <LL_RCC_GetLPUARTClockFreq+0x120>)
 801071e:	4293      	cmp	r3, r2
 8010720:	d003      	beq.n	801072a <LL_RCC_GetLPUARTClockFreq+0xae>
 8010722:	4a1f      	ldr	r2, [pc, #124]	; (80107a0 <LL_RCC_GetLPUARTClockFreq+0x124>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d005      	beq.n	8010734 <LL_RCC_GetLPUARTClockFreq+0xb8>
 8010728:	e015      	b.n	8010756 <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 801072a:	f000 f83b 	bl	80107a4 <RCC_GetSystemClockFreq>
 801072e:	0003      	movs	r3, r0
 8010730:	60fb      	str	r3, [r7, #12]
        break;
 8010732:	e024      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8010734:	f7ff ff18 	bl	8010568 <LL_RCC_HSI_IsReady>
 8010738:	0003      	movs	r3, r0
 801073a:	2b01      	cmp	r3, #1
 801073c:	d11c      	bne.n	8010778 <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 801073e:	4b15      	ldr	r3, [pc, #84]	; (8010794 <LL_RCC_GetLPUARTClockFreq+0x118>)
 8010740:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010742:	e019      	b.n	8010778 <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8010744:	f7ff ff24 	bl	8010590 <LL_RCC_LSE_IsReady>
 8010748:	0003      	movs	r3, r0
 801074a:	2b01      	cmp	r3, #1
 801074c:	d116      	bne.n	801077c <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 801074e:	2380      	movs	r3, #128	; 0x80
 8010750:	021b      	lsls	r3, r3, #8
 8010752:	60fb      	str	r3, [r7, #12]
        }
        break;
 8010754:	e012      	b.n	801077c <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8010756:	f000 f825 	bl	80107a4 <RCC_GetSystemClockFreq>
 801075a:	0003      	movs	r3, r0
 801075c:	0018      	movs	r0, r3
 801075e:	f000 f84d 	bl	80107fc <RCC_GetHCLKClockFreq>
 8010762:	0003      	movs	r3, r0
 8010764:	0018      	movs	r0, r3
 8010766:	f000 f861 	bl	801082c <RCC_GetPCLK1ClockFreq>
 801076a:	0003      	movs	r3, r0
 801076c:	60fb      	str	r3, [r7, #12]
        break;
 801076e:	e006      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8010770:	46c0      	nop			; (mov r8, r8)
 8010772:	e004      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8010774:	46c0      	nop			; (mov r8, r8)
 8010776:	e002      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8010778:	46c0      	nop			; (mov r8, r8)
 801077a:	e000      	b.n	801077e <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 801077c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 801077e:	68fb      	ldr	r3, [r7, #12]
}
 8010780:	0018      	movs	r0, r3
 8010782:	46bd      	mov	sp, r7
 8010784:	b004      	add	sp, #16
 8010786:	bd80      	pop	{r7, pc}
 8010788:	0c000c00 	.word	0x0c000c00
 801078c:	0c000400 	.word	0x0c000400
 8010790:	0c000800 	.word	0x0c000800
 8010794:	00f42400 	.word	0x00f42400
 8010798:	03000300 	.word	0x03000300
 801079c:	03000100 	.word	0x03000100
 80107a0:	03000200 	.word	0x03000200

080107a4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80107aa:	f7ff ff01 	bl	80105b0 <LL_RCC_GetSysClkSource>
 80107ae:	0003      	movs	r3, r0
 80107b0:	2b08      	cmp	r3, #8
 80107b2:	d002      	beq.n	80107ba <RCC_GetSystemClockFreq+0x16>
 80107b4:	2b10      	cmp	r3, #16
 80107b6:	d003      	beq.n	80107c0 <RCC_GetSystemClockFreq+0x1c>
 80107b8:	e007      	b.n	80107ca <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80107ba:	4b0e      	ldr	r3, [pc, #56]	; (80107f4 <RCC_GetSystemClockFreq+0x50>)
 80107bc:	607b      	str	r3, [r7, #4]
      break;
 80107be:	e014      	b.n	80107ea <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80107c0:	f000 f84a 	bl	8010858 <RCC_PLL_GetFreqDomain_SYS>
 80107c4:	0003      	movs	r3, r0
 80107c6:	607b      	str	r3, [r7, #4]
      break;
 80107c8:	e00f      	b.n	80107ea <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80107ca:	4b0b      	ldr	r3, [pc, #44]	; (80107f8 <RCC_GetSystemClockFreq+0x54>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	0adb      	lsrs	r3, r3, #11
 80107d0:	2207      	movs	r2, #7
 80107d2:	4013      	ands	r3, r2
 80107d4:	2201      	movs	r2, #1
 80107d6:	409a      	lsls	r2, r3
 80107d8:	0013      	movs	r3, r2
 80107da:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80107dc:	6839      	ldr	r1, [r7, #0]
 80107de:	4805      	ldr	r0, [pc, #20]	; (80107f4 <RCC_GetSystemClockFreq+0x50>)
 80107e0:	f7f5 fd06 	bl	80061f0 <__udivsi3>
 80107e4:	0003      	movs	r3, r0
 80107e6:	607b      	str	r3, [r7, #4]
      break;
 80107e8:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80107ea:	687b      	ldr	r3, [r7, #4]
}
 80107ec:	0018      	movs	r0, r3
 80107ee:	46bd      	mov	sp, r7
 80107f0:	b002      	add	sp, #8
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	00f42400 	.word	0x00f42400
 80107f8:	40021000 	.word	0x40021000

080107fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8010804:	f7ff fee0 	bl	80105c8 <LL_RCC_GetAHBPrescaler>
 8010808:	0003      	movs	r3, r0
 801080a:	0a1b      	lsrs	r3, r3, #8
 801080c:	220f      	movs	r2, #15
 801080e:	401a      	ands	r2, r3
 8010810:	4b05      	ldr	r3, [pc, #20]	; (8010828 <RCC_GetHCLKClockFreq+0x2c>)
 8010812:	0092      	lsls	r2, r2, #2
 8010814:	58d3      	ldr	r3, [r2, r3]
 8010816:	221f      	movs	r2, #31
 8010818:	4013      	ands	r3, r2
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	40da      	lsrs	r2, r3
 801081e:	0013      	movs	r3, r2
}
 8010820:	0018      	movs	r0, r3
 8010822:	46bd      	mov	sp, r7
 8010824:	b002      	add	sp, #8
 8010826:	bd80      	pop	{r7, pc}
 8010828:	08024f1c 	.word	0x08024f1c

0801082c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8010834:	f7ff fed4 	bl	80105e0 <LL_RCC_GetAPB1Prescaler>
 8010838:	0003      	movs	r3, r0
 801083a:	0b1a      	lsrs	r2, r3, #12
 801083c:	4b05      	ldr	r3, [pc, #20]	; (8010854 <RCC_GetPCLK1ClockFreq+0x28>)
 801083e:	0092      	lsls	r2, r2, #2
 8010840:	58d3      	ldr	r3, [r2, r3]
 8010842:	221f      	movs	r2, #31
 8010844:	4013      	ands	r3, r2
 8010846:	687a      	ldr	r2, [r7, #4]
 8010848:	40da      	lsrs	r2, r3
 801084a:	0013      	movs	r3, r2
}
 801084c:	0018      	movs	r0, r3
 801084e:	46bd      	mov	sp, r7
 8010850:	b002      	add	sp, #8
 8010852:	bd80      	pop	{r7, pc}
 8010854:	08024f5c 	.word	0x08024f5c

08010858 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8010858:	b590      	push	{r4, r7, lr}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 801085e:	f7ff fef5 	bl	801064c <LL_RCC_PLL_GetMainSource>
 8010862:	0003      	movs	r3, r0
 8010864:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	2b02      	cmp	r3, #2
 801086a:	d003      	beq.n	8010874 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	2b03      	cmp	r3, #3
 8010870:	d003      	beq.n	801087a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8010872:	e005      	b.n	8010880 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8010874:	4b13      	ldr	r3, [pc, #76]	; (80108c4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8010876:	607b      	str	r3, [r7, #4]
      break;
 8010878:	e005      	b.n	8010886 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 801087a:	4b12      	ldr	r3, [pc, #72]	; (80108c4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 801087c:	607b      	str	r3, [r7, #4]
      break;
 801087e:	e002      	b.n	8010886 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8010880:	4b10      	ldr	r3, [pc, #64]	; (80108c4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8010882:	607b      	str	r3, [r7, #4]
      break;
 8010884:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8010886:	f7ff fec9 	bl	801061c <LL_RCC_PLL_GetN>
 801088a:	0002      	movs	r2, r0
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	4353      	muls	r3, r2
 8010890:	001c      	movs	r4, r3
 8010892:	f7ff fee7 	bl	8010664 <LL_RCC_PLL_GetDivider>
 8010896:	0003      	movs	r3, r0
 8010898:	091b      	lsrs	r3, r3, #4
 801089a:	3301      	adds	r3, #1
 801089c:	0019      	movs	r1, r3
 801089e:	0020      	movs	r0, r4
 80108a0:	f7f5 fca6 	bl	80061f0 <__udivsi3>
 80108a4:	0003      	movs	r3, r0
 80108a6:	001c      	movs	r4, r3
 80108a8:	f7ff fec4 	bl	8010634 <LL_RCC_PLL_GetR>
 80108ac:	0003      	movs	r3, r0
 80108ae:	0f5b      	lsrs	r3, r3, #29
 80108b0:	3301      	adds	r3, #1
 80108b2:	0019      	movs	r1, r3
 80108b4:	0020      	movs	r0, r4
 80108b6:	f7f5 fc9b 	bl	80061f0 <__udivsi3>
 80108ba:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80108bc:	0018      	movs	r0, r3
 80108be:	46bd      	mov	sp, r7
 80108c0:	b003      	add	sp, #12
 80108c2:	bd90      	pop	{r4, r7, pc}
 80108c4:	00f42400 	.word	0x00f42400

080108c8 <LL_TIM_SetPrescaler>:
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80108d8:	46c0      	nop			; (mov r8, r8)
 80108da:	46bd      	mov	sp, r7
 80108dc:	b002      	add	sp, #8
 80108de:	bd80      	pop	{r7, pc}

080108e0 <LL_TIM_SetAutoReload>:
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	683a      	ldr	r2, [r7, #0]
 80108ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80108f0:	46c0      	nop			; (mov r8, r8)
 80108f2:	46bd      	mov	sp, r7
 80108f4:	b002      	add	sp, #8
 80108f6:	bd80      	pop	{r7, pc}

080108f8 <LL_TIM_SetRepetitionCounter>:
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	631a      	str	r2, [r3, #48]	; 0x30
}
 8010908:	46c0      	nop			; (mov r8, r8)
 801090a:	46bd      	mov	sp, r7
 801090c:	b002      	add	sp, #8
 801090e:	bd80      	pop	{r7, pc}

08010910 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	695b      	ldr	r3, [r3, #20]
 801091c:	2201      	movs	r2, #1
 801091e:	431a      	orrs	r2, r3
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	615a      	str	r2, [r3, #20]
}
 8010924:	46c0      	nop			; (mov r8, r8)
 8010926:	46bd      	mov	sp, r7
 8010928:	b002      	add	sp, #8
 801092a:	bd80      	pop	{r7, pc}

0801092c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	4a39      	ldr	r2, [pc, #228]	; (8010a24 <LL_TIM_Init+0xf8>)
 8010940:	4293      	cmp	r3, r2
 8010942:	d00c      	beq.n	801095e <LL_TIM_Init+0x32>
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	2380      	movs	r3, #128	; 0x80
 8010948:	05db      	lsls	r3, r3, #23
 801094a:	429a      	cmp	r2, r3
 801094c:	d007      	beq.n	801095e <LL_TIM_Init+0x32>
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	4a35      	ldr	r2, [pc, #212]	; (8010a28 <LL_TIM_Init+0xfc>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d003      	beq.n	801095e <LL_TIM_Init+0x32>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4a34      	ldr	r2, [pc, #208]	; (8010a2c <LL_TIM_Init+0x100>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d107      	bne.n	801096e <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2270      	movs	r2, #112	; 0x70
 8010962:	4393      	bics	r3, r2
 8010964:	001a      	movs	r2, r3
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	4313      	orrs	r3, r2
 801096c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	4a2c      	ldr	r2, [pc, #176]	; (8010a24 <LL_TIM_Init+0xf8>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d01c      	beq.n	80109b0 <LL_TIM_Init+0x84>
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	2380      	movs	r3, #128	; 0x80
 801097a:	05db      	lsls	r3, r3, #23
 801097c:	429a      	cmp	r2, r3
 801097e:	d017      	beq.n	80109b0 <LL_TIM_Init+0x84>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a29      	ldr	r2, [pc, #164]	; (8010a28 <LL_TIM_Init+0xfc>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d013      	beq.n	80109b0 <LL_TIM_Init+0x84>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4a28      	ldr	r2, [pc, #160]	; (8010a2c <LL_TIM_Init+0x100>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d00f      	beq.n	80109b0 <LL_TIM_Init+0x84>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a27      	ldr	r2, [pc, #156]	; (8010a30 <LL_TIM_Init+0x104>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d00b      	beq.n	80109b0 <LL_TIM_Init+0x84>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a26      	ldr	r2, [pc, #152]	; (8010a34 <LL_TIM_Init+0x108>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d007      	beq.n	80109b0 <LL_TIM_Init+0x84>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a25      	ldr	r2, [pc, #148]	; (8010a38 <LL_TIM_Init+0x10c>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d003      	beq.n	80109b0 <LL_TIM_Init+0x84>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a24      	ldr	r2, [pc, #144]	; (8010a3c <LL_TIM_Init+0x110>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d106      	bne.n	80109be <LL_TIM_Init+0x92>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	4a23      	ldr	r2, [pc, #140]	; (8010a40 <LL_TIM_Init+0x114>)
 80109b4:	401a      	ands	r2, r3
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	4313      	orrs	r3, r2
 80109bc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68fa      	ldr	r2, [r7, #12]
 80109c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	689a      	ldr	r2, [r3, #8]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	0011      	movs	r1, r2
 80109cc:	0018      	movs	r0, r3
 80109ce:	f7ff ff87 	bl	80108e0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	001a      	movs	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	0011      	movs	r1, r2
 80109dc:	0018      	movs	r0, r3
 80109de:	f7ff ff73 	bl	80108c8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4a0f      	ldr	r2, [pc, #60]	; (8010a24 <LL_TIM_Init+0xf8>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d00b      	beq.n	8010a02 <LL_TIM_Init+0xd6>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a11      	ldr	r2, [pc, #68]	; (8010a34 <LL_TIM_Init+0x108>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d007      	beq.n	8010a02 <LL_TIM_Init+0xd6>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4a10      	ldr	r2, [pc, #64]	; (8010a38 <LL_TIM_Init+0x10c>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d003      	beq.n	8010a02 <LL_TIM_Init+0xd6>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a0f      	ldr	r2, [pc, #60]	; (8010a3c <LL_TIM_Init+0x110>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d106      	bne.n	8010a10 <LL_TIM_Init+0xe4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	691a      	ldr	r2, [r3, #16]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	0011      	movs	r1, r2
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	f7ff ff74 	bl	80108f8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	0018      	movs	r0, r3
 8010a14:	f7ff ff7c 	bl	8010910 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	0018      	movs	r0, r3
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	b004      	add	sp, #16
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	46c0      	nop			; (mov r8, r8)
 8010a24:	40012c00 	.word	0x40012c00
 8010a28:	40000400 	.word	0x40000400
 8010a2c:	40000800 	.word	0x40000800
 8010a30:	40002000 	.word	0x40002000
 8010a34:	40014000 	.word	0x40014000
 8010a38:	40014400 	.word	0x40014400
 8010a3c:	40014800 	.word	0x40014800
 8010a40:	fffffcff 	.word	0xfffffcff

08010a44 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	085a      	lsrs	r2, r3, #1
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	601a      	str	r2, [r3, #0]
}
 8010a58:	46c0      	nop			; (mov r8, r8)
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	b002      	add	sp, #8
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <LL_APB1_GRP1_EnableClock>:
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8010a68:	4b07      	ldr	r3, [pc, #28]	; (8010a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8010a6a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	430a      	orrs	r2, r1
 8010a72:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8010a74:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <LL_APB1_GRP1_EnableClock+0x28>)
 8010a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4013      	ands	r3, r2
 8010a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
}
 8010a80:	46c0      	nop			; (mov r8, r8)
 8010a82:	46bd      	mov	sp, r7
 8010a84:	b004      	add	sp, #16
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	40021000 	.word	0x40021000

08010a8c <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4a16      	ldr	r2, [pc, #88]	; (8010af4 <LL_UCPD_Init+0x68>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d104      	bne.n	8010aa8 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8010a9e:	2380      	movs	r3, #128	; 0x80
 8010aa0:	049b      	lsls	r3, r3, #18
 8010aa2:	0018      	movs	r0, r3
 8010aa4:	f7ff ffdc 	bl	8010a60 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a13      	ldr	r2, [pc, #76]	; (8010af8 <LL_UCPD_Init+0x6c>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d104      	bne.n	8010aba <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8010ab0:	2380      	movs	r3, #128	; 0x80
 8010ab2:	04db      	lsls	r3, r3, #19
 8010ab4:	0018      	movs	r0, r3
 8010ab6:	f7ff ffd3 	bl	8010a60 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	0018      	movs	r0, r3
 8010abe:	f7ff ffc1 	bl	8010a44 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a0d      	ldr	r2, [pc, #52]	; (8010afc <LL_UCPD_Init+0x70>)
 8010ac8:	401a      	ands	r2, r3
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	6819      	ldr	r1, [r3, #0]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	02db      	lsls	r3, r3, #11
 8010ad4:	4319      	orrs	r1, r3
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	019b      	lsls	r3, r3, #6
 8010adc:	4319      	orrs	r1, r3
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	430b      	orrs	r3, r1
 8010ae4:	431a      	orrs	r2, r3
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	0018      	movs	r0, r3
 8010aee:	46bd      	mov	sp, r7
 8010af0:	b002      	add	sp, #8
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	4000a000 	.word	0x4000a000
 8010af8:	4000a400 	.word	0x4000a400
 8010afc:	fff10000 	.word	0xfff10000

08010b00 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2280      	movs	r2, #128	; 0x80
 8010b0c:	0292      	lsls	r2, r2, #10
 8010b0e:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2207      	movs	r2, #7
 8010b14:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2210      	movs	r2, #16
 8010b1a:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	220d      	movs	r2, #13
 8010b20:	60da      	str	r2, [r3, #12]
}
 8010b22:	46c0      	nop			; (mov r8, r8)
 8010b24:	46bd      	mov	sp, r7
 8010b26:	b002      	add	sp, #8
 8010b28:	bd80      	pop	{r7, pc}
	...

08010b2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2200      	movs	r2, #0
 8010b38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010b3a:	4b05      	ldr	r3, [pc, #20]	; (8010b50 <USB_EnableGlobalInt+0x24>)
 8010b3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010b44:	2300      	movs	r3, #0
}
 8010b46:	0018      	movs	r0, r3
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	b004      	add	sp, #16
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	46c0      	nop			; (mov r8, r8)
 8010b50:	0000bf80 	.word	0x0000bf80

08010b54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010b5c:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <USB_DisableGlobalInt+0x24>)
 8010b5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	43d2      	mvns	r2, r2
 8010b68:	401a      	ands	r2, r3
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	0018      	movs	r0, r3
 8010b72:	46bd      	mov	sp, r7
 8010b74:	b004      	add	sp, #16
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	0000bf80 	.word	0x0000bf80

08010b7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	000a      	movs	r2, r1
 8010b86:	1cfb      	adds	r3, r7, #3
 8010b88:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8010b8a:	1cfb      	adds	r3, r7, #3
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d106      	bne.n	8010ba0 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	085a      	lsrs	r2, r3, #1
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8010b9e:	e00d      	b.n	8010bbc <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8010ba0:	1cfb      	adds	r3, r7, #3
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d107      	bne.n	8010bb8 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bac:	2280      	movs	r2, #128	; 0x80
 8010bae:	0612      	lsls	r2, r2, #24
 8010bb0:	431a      	orrs	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8010bb6:	e001      	b.n	8010bbc <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8010bb8:	2301      	movs	r3, #1
 8010bba:	e000      	b.n	8010bbe <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8010bbc:	2300      	movs	r3, #0
}
 8010bbe:	0018      	movs	r0, r3
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	b002      	add	sp, #8
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	b5b0      	push	{r4, r5, r7, lr}
 8010bca:	b084      	sub	sp, #16
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	2004      	movs	r0, #4
 8010bd2:	2420      	movs	r4, #32
 8010bd4:	1900      	adds	r0, r0, r4
 8010bd6:	19c0      	adds	r0, r0, r7
 8010bd8:	6001      	str	r1, [r0, #0]
 8010bda:	6042      	str	r2, [r0, #4]
 8010bdc:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2201      	movs	r2, #1
 8010be2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010be8:	2201      	movs	r2, #1
 8010bea:	4393      	bics	r3, r2
 8010bec:	001a      	movs	r2, r3
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8010bf2:	250f      	movs	r5, #15
 8010bf4:	197c      	adds	r4, r7, r5
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	0018      	movs	r0, r3
 8010bfc:	f7ff ffbe 	bl	8010b7c <USB_SetCurrentMode>
 8010c00:	0003      	movs	r3, r0
 8010c02:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2200      	movs	r2, #0
 8010c08:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8010c0a:	197b      	adds	r3, r7, r5
 8010c0c:	781b      	ldrb	r3, [r3, #0]
}
 8010c0e:	0018      	movs	r0, r3
 8010c10:	46bd      	mov	sp, r7
 8010c12:	b004      	add	sp, #16
 8010c14:	bcb0      	pop	{r4, r5, r7}
 8010c16:	bc08      	pop	{r3}
 8010c18:	b004      	add	sp, #16
 8010c1a:	4718      	bx	r3

08010c1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b09e      	sub	sp, #120	; 0x78
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010c26:	2377      	movs	r3, #119	; 0x77
 8010c28:	18fb      	adds	r3, r7, r3
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	009b      	lsls	r3, r3, #2
 8010c36:	18d3      	adds	r3, r2, r3
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	4adc      	ldr	r2, [pc, #880]	; (8010fac <USB_ActivateEndpoint+0x390>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	78db      	ldrb	r3, [r3, #3]
 8010c44:	2b03      	cmp	r3, #3
 8010c46:	d00e      	beq.n	8010c66 <USB_ActivateEndpoint+0x4a>
 8010c48:	dc19      	bgt.n	8010c7e <USB_ActivateEndpoint+0x62>
 8010c4a:	2b02      	cmp	r3, #2
 8010c4c:	d01c      	beq.n	8010c88 <USB_ActivateEndpoint+0x6c>
 8010c4e:	dc16      	bgt.n	8010c7e <USB_ActivateEndpoint+0x62>
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d002      	beq.n	8010c5a <USB_ActivateEndpoint+0x3e>
 8010c54:	2b01      	cmp	r3, #1
 8010c56:	d00c      	beq.n	8010c72 <USB_ActivateEndpoint+0x56>
 8010c58:	e011      	b.n	8010c7e <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c5c:	2280      	movs	r2, #128	; 0x80
 8010c5e:	0092      	lsls	r2, r2, #2
 8010c60:	4313      	orrs	r3, r2
 8010c62:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010c64:	e011      	b.n	8010c8a <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c68:	22c0      	movs	r2, #192	; 0xc0
 8010c6a:	00d2      	lsls	r2, r2, #3
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010c70:	e00b      	b.n	8010c8a <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c74:	2280      	movs	r2, #128	; 0x80
 8010c76:	00d2      	lsls	r2, r2, #3
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8010c7c:	e005      	b.n	8010c8a <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8010c7e:	2377      	movs	r3, #119	; 0x77
 8010c80:	18fb      	adds	r3, r7, r3
 8010c82:	2201      	movs	r2, #1
 8010c84:	701a      	strb	r2, [r3, #0]
      break;
 8010c86:	e000      	b.n	8010c8a <USB_ActivateEndpoint+0x6e>
      break;
 8010c88:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	009b      	lsls	r3, r3, #2
 8010c92:	18d3      	adds	r3, r2, r3
 8010c94:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010c96:	49c6      	ldr	r1, [pc, #792]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010c98:	430a      	orrs	r2, r1
 8010c9a:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	18d3      	adds	r3, r2, r3
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4ac2      	ldr	r2, [pc, #776]	; (8010fb4 <USB_ActivateEndpoint+0x398>)
 8010caa:	4013      	ands	r3, r2
 8010cac:	683a      	ldr	r2, [r7, #0]
 8010cae:	7812      	ldrb	r2, [r2, #0]
 8010cb0:	4313      	orrs	r3, r2
 8010cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	18d3      	adds	r3, r2, r3
 8010cbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cc0:	49bb      	ldr	r1, [pc, #748]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010cc2:	430a      	orrs	r2, r1
 8010cc4:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	7b1b      	ldrb	r3, [r3, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d000      	beq.n	8010cd0 <USB_ActivateEndpoint+0xb4>
 8010cce:	e155      	b.n	8010f7c <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	785b      	ldrb	r3, [r3, #1]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d06e      	beq.n	8010db6 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	00db      	lsls	r3, r3, #3
 8010cde:	4ab6      	ldr	r2, [pc, #728]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010ce0:	4694      	mov	ip, r2
 8010ce2:	4463      	add	r3, ip
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	00db      	lsls	r3, r3, #3
 8010cec:	49b2      	ldr	r1, [pc, #712]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010cee:	468c      	mov	ip, r1
 8010cf0:	4463      	add	r3, ip
 8010cf2:	0c12      	lsrs	r2, r2, #16
 8010cf4:	0412      	lsls	r2, r2, #16
 8010cf6:	601a      	str	r2, [r3, #0]
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	00db      	lsls	r3, r3, #3
 8010cfe:	4aae      	ldr	r2, [pc, #696]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010d00:	4694      	mov	ip, r2
 8010d02:	4463      	add	r3, ip
 8010d04:	6819      	ldr	r1, [r3, #0]
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	88db      	ldrh	r3, [r3, #6]
 8010d0a:	089b      	lsrs	r3, r3, #2
 8010d0c:	b29b      	uxth	r3, r3
 8010d0e:	009a      	lsls	r2, r3, #2
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	48a8      	ldr	r0, [pc, #672]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010d18:	4684      	mov	ip, r0
 8010d1a:	4463      	add	r3, ip
 8010d1c:	430a      	orrs	r2, r1
 8010d1e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d20:	687a      	ldr	r2, [r7, #4]
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	18d3      	adds	r3, r2, r3
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	61bb      	str	r3, [r7, #24]
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	2240      	movs	r2, #64	; 0x40
 8010d32:	4013      	ands	r3, r2
 8010d34:	d011      	beq.n	8010d5a <USB_ActivateEndpoint+0x13e>
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	18d3      	adds	r3, r2, r3
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	4a9c      	ldr	r2, [pc, #624]	; (8010fb4 <USB_ActivateEndpoint+0x398>)
 8010d44:	4013      	ands	r3, r2
 8010d46:	617b      	str	r3, [r7, #20]
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	18d3      	adds	r3, r2, r3
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	4999      	ldr	r1, [pc, #612]	; (8010fbc <USB_ActivateEndpoint+0x3a0>)
 8010d56:	430a      	orrs	r2, r1
 8010d58:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	78db      	ldrb	r3, [r3, #3]
 8010d5e:	2b01      	cmp	r3, #1
 8010d60:	d016      	beq.n	8010d90 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	009b      	lsls	r3, r3, #2
 8010d6a:	18d3      	adds	r3, r2, r3
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4a94      	ldr	r2, [pc, #592]	; (8010fc0 <USB_ActivateEndpoint+0x3a4>)
 8010d70:	4013      	ands	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2220      	movs	r2, #32
 8010d78:	4053      	eors	r3, r2
 8010d7a:	60fb      	str	r3, [r7, #12]
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	009b      	lsls	r3, r3, #2
 8010d84:	18d3      	adds	r3, r2, r3
 8010d86:	68fa      	ldr	r2, [r7, #12]
 8010d88:	4989      	ldr	r1, [pc, #548]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010d8a:	430a      	orrs	r2, r1
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	e261      	b.n	8011254 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	18d3      	adds	r3, r2, r3
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a88      	ldr	r2, [pc, #544]	; (8010fc0 <USB_ActivateEndpoint+0x3a4>)
 8010d9e:	4013      	ands	r3, r2
 8010da0:	613b      	str	r3, [r7, #16]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	18d3      	adds	r3, r2, r3
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	4980      	ldr	r1, [pc, #512]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010db0:	430a      	orrs	r2, r1
 8010db2:	601a      	str	r2, [r3, #0]
 8010db4:	e24e      	b.n	8011254 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	4a7e      	ldr	r2, [pc, #504]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010dbe:	4694      	mov	ip, r2
 8010dc0:	4463      	add	r3, ip
 8010dc2:	685a      	ldr	r2, [r3, #4]
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	00db      	lsls	r3, r3, #3
 8010dca:	497b      	ldr	r1, [pc, #492]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010dcc:	468c      	mov	ip, r1
 8010dce:	4463      	add	r3, ip
 8010dd0:	0c12      	lsrs	r2, r2, #16
 8010dd2:	0412      	lsls	r2, r2, #16
 8010dd4:	605a      	str	r2, [r3, #4]
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	781b      	ldrb	r3, [r3, #0]
 8010dda:	00db      	lsls	r3, r3, #3
 8010ddc:	4a76      	ldr	r2, [pc, #472]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010dde:	4694      	mov	ip, r2
 8010de0:	4463      	add	r3, ip
 8010de2:	6859      	ldr	r1, [r3, #4]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	88db      	ldrh	r3, [r3, #6]
 8010de8:	089b      	lsrs	r3, r3, #2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	009a      	lsls	r2, r3, #2
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	00db      	lsls	r3, r3, #3
 8010df4:	4870      	ldr	r0, [pc, #448]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010df6:	4684      	mov	ip, r0
 8010df8:	4463      	add	r3, ip
 8010dfa:	430a      	orrs	r2, r1
 8010dfc:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	4a6c      	ldr	r2, [pc, #432]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e06:	4694      	mov	ip, r2
 8010e08:	4463      	add	r3, ip
 8010e0a:	685a      	ldr	r2, [r3, #4]
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	4969      	ldr	r1, [pc, #420]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e14:	468c      	mov	ip, r1
 8010e16:	4463      	add	r3, ip
 8010e18:	0192      	lsls	r2, r2, #6
 8010e1a:	0992      	lsrs	r2, r2, #6
 8010e1c:	605a      	str	r2, [r3, #4]
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	2b3e      	cmp	r3, #62	; 0x3e
 8010e24:	d920      	bls.n	8010e68 <USB_ActivateEndpoint+0x24c>
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	095b      	lsrs	r3, r3, #5
 8010e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	221f      	movs	r2, #31
 8010e34:	4013      	ands	r3, r2
 8010e36:	d102      	bne.n	8010e3e <USB_ActivateEndpoint+0x222>
 8010e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	00db      	lsls	r3, r3, #3
 8010e44:	4a5c      	ldr	r2, [pc, #368]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e46:	4694      	mov	ip, r2
 8010e48:	4463      	add	r3, ip
 8010e4a:	685a      	ldr	r2, [r3, #4]
 8010e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e4e:	069b      	lsls	r3, r3, #26
 8010e50:	431a      	orrs	r2, r3
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	00db      	lsls	r3, r3, #3
 8010e58:	4957      	ldr	r1, [pc, #348]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e5a:	468c      	mov	ip, r1
 8010e5c:	4463      	add	r3, ip
 8010e5e:	2180      	movs	r1, #128	; 0x80
 8010e60:	0609      	lsls	r1, r1, #24
 8010e62:	430a      	orrs	r2, r1
 8010e64:	605a      	str	r2, [r3, #4]
 8010e66:	e032      	b.n	8010ece <USB_ActivateEndpoint+0x2b2>
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d111      	bne.n	8010e94 <USB_ActivateEndpoint+0x278>
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	00db      	lsls	r3, r3, #3
 8010e76:	4a50      	ldr	r2, [pc, #320]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e78:	4694      	mov	ip, r2
 8010e7a:	4463      	add	r3, ip
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	00db      	lsls	r3, r3, #3
 8010e84:	494c      	ldr	r1, [pc, #304]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010e86:	468c      	mov	ip, r1
 8010e88:	4463      	add	r3, ip
 8010e8a:	2180      	movs	r1, #128	; 0x80
 8010e8c:	0609      	lsls	r1, r1, #24
 8010e8e:	430a      	orrs	r2, r1
 8010e90:	605a      	str	r2, [r3, #4]
 8010e92:	e01c      	b.n	8010ece <USB_ActivateEndpoint+0x2b2>
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	691b      	ldr	r3, [r3, #16]
 8010e98:	085b      	lsrs	r3, r3, #1
 8010e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	d002      	beq.n	8010eac <USB_ActivateEndpoint+0x290>
 8010ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	00db      	lsls	r3, r3, #3
 8010eb2:	4a41      	ldr	r2, [pc, #260]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010eb4:	4694      	mov	ip, r2
 8010eb6:	4463      	add	r3, ip
 8010eb8:	6859      	ldr	r1, [r3, #4]
 8010eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ebc:	069a      	lsls	r2, r3, #26
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	00db      	lsls	r3, r3, #3
 8010ec4:	483c      	ldr	r0, [pc, #240]	; (8010fb8 <USB_ActivateEndpoint+0x39c>)
 8010ec6:	4684      	mov	ip, r0
 8010ec8:	4463      	add	r3, ip
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	18d3      	adds	r3, r2, r3
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8010edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ede:	2380      	movs	r3, #128	; 0x80
 8010ee0:	01db      	lsls	r3, r3, #7
 8010ee2:	4013      	ands	r3, r2
 8010ee4:	d011      	beq.n	8010f0a <USB_ActivateEndpoint+0x2ee>
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	18d3      	adds	r3, r2, r3
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	4a30      	ldr	r2, [pc, #192]	; (8010fb4 <USB_ActivateEndpoint+0x398>)
 8010ef4:	4013      	ands	r3, r2
 8010ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	18d3      	adds	r3, r2, r3
 8010f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f04:	492f      	ldr	r1, [pc, #188]	; (8010fc4 <USB_ActivateEndpoint+0x3a8>)
 8010f06:	430a      	orrs	r2, r1
 8010f08:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d11c      	bne.n	8010f4c <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010f12:	687a      	ldr	r2, [r7, #4]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	781b      	ldrb	r3, [r3, #0]
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	18d3      	adds	r3, r2, r3
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4a2a      	ldr	r2, [pc, #168]	; (8010fc8 <USB_ActivateEndpoint+0x3ac>)
 8010f20:	4013      	ands	r3, r2
 8010f22:	61fb      	str	r3, [r7, #28]
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	2280      	movs	r2, #128	; 0x80
 8010f28:	0152      	lsls	r2, r2, #5
 8010f2a:	4053      	eors	r3, r2
 8010f2c:	61fb      	str	r3, [r7, #28]
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	2280      	movs	r2, #128	; 0x80
 8010f32:	0192      	lsls	r2, r2, #6
 8010f34:	4053      	eors	r3, r2
 8010f36:	61fb      	str	r3, [r7, #28]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	18d3      	adds	r3, r2, r3
 8010f42:	69fa      	ldr	r2, [r7, #28]
 8010f44:	491a      	ldr	r1, [pc, #104]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010f46:	430a      	orrs	r2, r1
 8010f48:	601a      	str	r2, [r3, #0]
 8010f4a:	e183      	b.n	8011254 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	18d3      	adds	r3, r2, r3
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a1b      	ldr	r2, [pc, #108]	; (8010fc8 <USB_ActivateEndpoint+0x3ac>)
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	623b      	str	r3, [r7, #32]
 8010f5e:	6a3b      	ldr	r3, [r7, #32]
 8010f60:	2280      	movs	r2, #128	; 0x80
 8010f62:	0192      	lsls	r2, r2, #6
 8010f64:	4053      	eors	r3, r2
 8010f66:	623b      	str	r3, [r7, #32]
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	18d3      	adds	r3, r2, r3
 8010f72:	6a3a      	ldr	r2, [r7, #32]
 8010f74:	490e      	ldr	r1, [pc, #56]	; (8010fb0 <USB_ActivateEndpoint+0x394>)
 8010f76:	430a      	orrs	r2, r1
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	e16b      	b.n	8011254 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	78db      	ldrb	r3, [r3, #3]
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d125      	bne.n	8010fd0 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010f84:	687a      	ldr	r2, [r7, #4]
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	009b      	lsls	r3, r3, #2
 8010f8c:	18d3      	adds	r3, r2, r3
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a08      	ldr	r2, [pc, #32]	; (8010fb4 <USB_ActivateEndpoint+0x398>)
 8010f92:	4013      	ands	r3, r2
 8010f94:	663b      	str	r3, [r7, #96]	; 0x60
 8010f96:	687a      	ldr	r2, [r7, #4]
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	18d3      	adds	r3, r2, r3
 8010fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010fa2:	490a      	ldr	r1, [pc, #40]	; (8010fcc <USB_ActivateEndpoint+0x3b0>)
 8010fa4:	430a      	orrs	r2, r1
 8010fa6:	601a      	str	r2, [r3, #0]
 8010fa8:	e024      	b.n	8010ff4 <USB_ActivateEndpoint+0x3d8>
 8010faa:	46c0      	nop			; (mov r8, r8)
 8010fac:	07ff898f 	.word	0x07ff898f
 8010fb0:	00008080 	.word	0x00008080
 8010fb4:	07ff8f8f 	.word	0x07ff8f8f
 8010fb8:	40009800 	.word	0x40009800
 8010fbc:	000080c0 	.word	0x000080c0
 8010fc0:	07ff8fbf 	.word	0x07ff8fbf
 8010fc4:	0000c080 	.word	0x0000c080
 8010fc8:	07ffbf8f 	.word	0x07ffbf8f
 8010fcc:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	18d3      	adds	r3, r2, r3
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	4aa1      	ldr	r2, [pc, #644]	; (8011264 <USB_ActivateEndpoint+0x648>)
 8010fde:	4013      	ands	r3, r2
 8010fe0:	667b      	str	r3, [r7, #100]	; 0x64
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	18d3      	adds	r3, r2, r3
 8010fec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010fee:	499e      	ldr	r1, [pc, #632]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 8010ff0:	430a      	orrs	r2, r1
 8010ff2:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	4a9c      	ldr	r2, [pc, #624]	; (801126c <USB_ActivateEndpoint+0x650>)
 8010ffc:	4694      	mov	ip, r2
 8010ffe:	4463      	add	r3, ip
 8011000:	681a      	ldr	r2, [r3, #0]
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	00db      	lsls	r3, r3, #3
 8011008:	4998      	ldr	r1, [pc, #608]	; (801126c <USB_ActivateEndpoint+0x650>)
 801100a:	468c      	mov	ip, r1
 801100c:	4463      	add	r3, ip
 801100e:	0c12      	lsrs	r2, r2, #16
 8011010:	0412      	lsls	r2, r2, #16
 8011012:	601a      	str	r2, [r3, #0]
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	4a94      	ldr	r2, [pc, #592]	; (801126c <USB_ActivateEndpoint+0x650>)
 801101c:	4694      	mov	ip, r2
 801101e:	4463      	add	r3, ip
 8011020:	6819      	ldr	r1, [r3, #0]
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	089b      	lsrs	r3, r3, #2
 8011028:	b29b      	uxth	r3, r3
 801102a:	009a      	lsls	r2, r3, #2
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	00db      	lsls	r3, r3, #3
 8011032:	488e      	ldr	r0, [pc, #568]	; (801126c <USB_ActivateEndpoint+0x650>)
 8011034:	4684      	mov	ip, r0
 8011036:	4463      	add	r3, ip
 8011038:	430a      	orrs	r2, r1
 801103a:	601a      	str	r2, [r3, #0]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	00db      	lsls	r3, r3, #3
 8011042:	4a8a      	ldr	r2, [pc, #552]	; (801126c <USB_ActivateEndpoint+0x650>)
 8011044:	4694      	mov	ip, r2
 8011046:	4463      	add	r3, ip
 8011048:	685a      	ldr	r2, [r3, #4]
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	00db      	lsls	r3, r3, #3
 8011050:	4986      	ldr	r1, [pc, #536]	; (801126c <USB_ActivateEndpoint+0x650>)
 8011052:	468c      	mov	ip, r1
 8011054:	4463      	add	r3, ip
 8011056:	0c12      	lsrs	r2, r2, #16
 8011058:	0412      	lsls	r2, r2, #16
 801105a:	605a      	str	r2, [r3, #4]
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4a82      	ldr	r2, [pc, #520]	; (801126c <USB_ActivateEndpoint+0x650>)
 8011064:	4694      	mov	ip, r2
 8011066:	4463      	add	r3, ip
 8011068:	6859      	ldr	r1, [r3, #4]
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	895b      	ldrh	r3, [r3, #10]
 801106e:	089b      	lsrs	r3, r3, #2
 8011070:	b29b      	uxth	r3, r3
 8011072:	009a      	lsls	r2, r3, #2
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	487c      	ldr	r0, [pc, #496]	; (801126c <USB_ActivateEndpoint+0x650>)
 801107c:	4684      	mov	ip, r0
 801107e:	4463      	add	r3, ip
 8011080:	430a      	orrs	r2, r1
 8011082:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	785b      	ldrb	r3, [r3, #1]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d169      	bne.n	8011160 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	18d3      	adds	r3, r2, r3
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	643b      	str	r3, [r7, #64]	; 0x40
 801109a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801109c:	2380      	movs	r3, #128	; 0x80
 801109e:	01db      	lsls	r3, r3, #7
 80110a0:	4013      	ands	r3, r2
 80110a2:	d011      	beq.n	80110c8 <USB_ActivateEndpoint+0x4ac>
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	781b      	ldrb	r3, [r3, #0]
 80110aa:	009b      	lsls	r3, r3, #2
 80110ac:	18d3      	adds	r3, r2, r3
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a6f      	ldr	r2, [pc, #444]	; (8011270 <USB_ActivateEndpoint+0x654>)
 80110b2:	4013      	ands	r3, r2
 80110b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	18d3      	adds	r3, r2, r3
 80110c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110c2:	496c      	ldr	r1, [pc, #432]	; (8011274 <USB_ActivateEndpoint+0x658>)
 80110c4:	430a      	orrs	r2, r1
 80110c6:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	18d3      	adds	r3, r2, r3
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80110d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d8:	2240      	movs	r2, #64	; 0x40
 80110da:	4013      	ands	r3, r2
 80110dc:	d011      	beq.n	8011102 <USB_ActivateEndpoint+0x4e6>
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	18d3      	adds	r3, r2, r3
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a61      	ldr	r2, [pc, #388]	; (8011270 <USB_ActivateEndpoint+0x654>)
 80110ec:	4013      	ands	r3, r2
 80110ee:	637b      	str	r3, [r7, #52]	; 0x34
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	009b      	lsls	r3, r3, #2
 80110f8:	18d3      	adds	r3, r2, r3
 80110fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110fc:	495e      	ldr	r1, [pc, #376]	; (8011278 <USB_ActivateEndpoint+0x65c>)
 80110fe:	430a      	orrs	r2, r1
 8011100:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	18d3      	adds	r3, r2, r3
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a5b      	ldr	r2, [pc, #364]	; (801127c <USB_ActivateEndpoint+0x660>)
 8011110:	4013      	ands	r3, r2
 8011112:	633b      	str	r3, [r7, #48]	; 0x30
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	2280      	movs	r2, #128	; 0x80
 8011118:	0152      	lsls	r2, r2, #5
 801111a:	4053      	eors	r3, r2
 801111c:	633b      	str	r3, [r7, #48]	; 0x30
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	2280      	movs	r2, #128	; 0x80
 8011122:	0192      	lsls	r2, r2, #6
 8011124:	4053      	eors	r3, r2
 8011126:	633b      	str	r3, [r7, #48]	; 0x30
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	18d3      	adds	r3, r2, r3
 8011132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011134:	494c      	ldr	r1, [pc, #304]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 8011136:	430a      	orrs	r2, r1
 8011138:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	18d3      	adds	r3, r2, r3
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4a4e      	ldr	r2, [pc, #312]	; (8011280 <USB_ActivateEndpoint+0x664>)
 8011148:	4013      	ands	r3, r2
 801114a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	18d3      	adds	r3, r2, r3
 8011156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011158:	4943      	ldr	r1, [pc, #268]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 801115a:	430a      	orrs	r2, r1
 801115c:	601a      	str	r2, [r3, #0]
 801115e:	e079      	b.n	8011254 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	18d3      	adds	r3, r2, r3
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801116e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011170:	2380      	movs	r3, #128	; 0x80
 8011172:	01db      	lsls	r3, r3, #7
 8011174:	4013      	ands	r3, r2
 8011176:	d011      	beq.n	801119c <USB_ActivateEndpoint+0x580>
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	18d3      	adds	r3, r2, r3
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4a3a      	ldr	r2, [pc, #232]	; (8011270 <USB_ActivateEndpoint+0x654>)
 8011186:	4013      	ands	r3, r2
 8011188:	65bb      	str	r3, [r7, #88]	; 0x58
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	18d3      	adds	r3, r2, r3
 8011194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011196:	4937      	ldr	r1, [pc, #220]	; (8011274 <USB_ActivateEndpoint+0x658>)
 8011198:	430a      	orrs	r2, r1
 801119a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	781b      	ldrb	r3, [r3, #0]
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	18d3      	adds	r3, r2, r3
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	657b      	str	r3, [r7, #84]	; 0x54
 80111aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111ac:	2240      	movs	r2, #64	; 0x40
 80111ae:	4013      	ands	r3, r2
 80111b0:	d011      	beq.n	80111d6 <USB_ActivateEndpoint+0x5ba>
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	18d3      	adds	r3, r2, r3
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	4a2c      	ldr	r2, [pc, #176]	; (8011270 <USB_ActivateEndpoint+0x654>)
 80111c0:	4013      	ands	r3, r2
 80111c2:	653b      	str	r3, [r7, #80]	; 0x50
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	18d3      	adds	r3, r2, r3
 80111ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111d0:	4929      	ldr	r1, [pc, #164]	; (8011278 <USB_ActivateEndpoint+0x65c>)
 80111d2:	430a      	orrs	r2, r1
 80111d4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	78db      	ldrb	r3, [r3, #3]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d016      	beq.n	801120c <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	18d3      	adds	r3, r2, r3
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a25      	ldr	r2, [pc, #148]	; (8011280 <USB_ActivateEndpoint+0x664>)
 80111ec:	4013      	ands	r3, r2
 80111ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80111f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111f2:	2220      	movs	r2, #32
 80111f4:	4053      	eors	r3, r2
 80111f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	18d3      	adds	r3, r2, r3
 8011202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011204:	4918      	ldr	r1, [pc, #96]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 8011206:	430a      	orrs	r2, r1
 8011208:	601a      	str	r2, [r3, #0]
 801120a:	e011      	b.n	8011230 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	18d3      	adds	r3, r2, r3
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	4a19      	ldr	r2, [pc, #100]	; (8011280 <USB_ActivateEndpoint+0x664>)
 801121a:	4013      	ands	r3, r2
 801121c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	18d3      	adds	r3, r2, r3
 8011228:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801122a:	490f      	ldr	r1, [pc, #60]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 801122c:	430a      	orrs	r2, r1
 801122e:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	18d3      	adds	r3, r2, r3
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4a0f      	ldr	r2, [pc, #60]	; (801127c <USB_ActivateEndpoint+0x660>)
 801123e:	4013      	ands	r3, r2
 8011240:	647b      	str	r3, [r7, #68]	; 0x44
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	18d3      	adds	r3, r2, r3
 801124c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801124e:	4906      	ldr	r1, [pc, #24]	; (8011268 <USB_ActivateEndpoint+0x64c>)
 8011250:	430a      	orrs	r2, r1
 8011252:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011254:	2377      	movs	r3, #119	; 0x77
 8011256:	18fb      	adds	r3, r7, r3
 8011258:	781b      	ldrb	r3, [r3, #0]
}
 801125a:	0018      	movs	r0, r3
 801125c:	46bd      	mov	sp, r7
 801125e:	b01e      	add	sp, #120	; 0x78
 8011260:	bd80      	pop	{r7, pc}
 8011262:	46c0      	nop			; (mov r8, r8)
 8011264:	07ff8e8f 	.word	0x07ff8e8f
 8011268:	00008080 	.word	0x00008080
 801126c:	40009800 	.word	0x40009800
 8011270:	07ff8f8f 	.word	0x07ff8f8f
 8011274:	0000c080 	.word	0x0000c080
 8011278:	000080c0 	.word	0x000080c0
 801127c:	07ffbf8f 	.word	0x07ffbf8f
 8011280:	07ff8fbf 	.word	0x07ff8fbf

08011284 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b096      	sub	sp, #88	; 0x58
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	7b1b      	ldrb	r3, [r3, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d164      	bne.n	8011360 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	785b      	ldrb	r3, [r3, #1]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d02f      	beq.n	80112fe <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801129e:	687a      	ldr	r2, [r7, #4]
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	781b      	ldrb	r3, [r3, #0]
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	18d3      	adds	r3, r2, r3
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	613b      	str	r3, [r7, #16]
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	2240      	movs	r2, #64	; 0x40
 80112b0:	4013      	ands	r3, r2
 80112b2:	d011      	beq.n	80112d8 <USB_DeactivateEndpoint+0x54>
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	009b      	lsls	r3, r3, #2
 80112bc:	18d3      	adds	r3, r2, r3
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	4a9d      	ldr	r2, [pc, #628]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 80112c2:	4013      	ands	r3, r2
 80112c4:	60fb      	str	r3, [r7, #12]
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	18d3      	adds	r3, r2, r3
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	499a      	ldr	r1, [pc, #616]	; (801153c <USB_DeactivateEndpoint+0x2b8>)
 80112d4:	430a      	orrs	r2, r1
 80112d6:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	18d3      	adds	r3, r2, r3
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4a96      	ldr	r2, [pc, #600]	; (8011540 <USB_DeactivateEndpoint+0x2bc>)
 80112e6:	4013      	ands	r3, r2
 80112e8:	60bb      	str	r3, [r7, #8]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	18d3      	adds	r3, r2, r3
 80112f4:	68ba      	ldr	r2, [r7, #8]
 80112f6:	4993      	ldr	r1, [pc, #588]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 80112f8:	430a      	orrs	r2, r1
 80112fa:	601a      	str	r2, [r3, #0]
 80112fc:	e117      	b.n	801152e <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	18d3      	adds	r3, r2, r3
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	61fb      	str	r3, [r7, #28]
 801130c:	69fa      	ldr	r2, [r7, #28]
 801130e:	2380      	movs	r3, #128	; 0x80
 8011310:	01db      	lsls	r3, r3, #7
 8011312:	4013      	ands	r3, r2
 8011314:	d011      	beq.n	801133a <USB_DeactivateEndpoint+0xb6>
 8011316:	687a      	ldr	r2, [r7, #4]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	009b      	lsls	r3, r3, #2
 801131e:	18d3      	adds	r3, r2, r3
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	4a85      	ldr	r2, [pc, #532]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 8011324:	4013      	ands	r3, r2
 8011326:	61bb      	str	r3, [r7, #24]
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	18d3      	adds	r3, r2, r3
 8011332:	69ba      	ldr	r2, [r7, #24]
 8011334:	4984      	ldr	r1, [pc, #528]	; (8011548 <USB_DeactivateEndpoint+0x2c4>)
 8011336:	430a      	orrs	r2, r1
 8011338:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801133a:	687a      	ldr	r2, [r7, #4]
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	009b      	lsls	r3, r3, #2
 8011342:	18d3      	adds	r3, r2, r3
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	4a81      	ldr	r2, [pc, #516]	; (801154c <USB_DeactivateEndpoint+0x2c8>)
 8011348:	4013      	ands	r3, r2
 801134a:	617b      	str	r3, [r7, #20]
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	18d3      	adds	r3, r2, r3
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	497a      	ldr	r1, [pc, #488]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 801135a:	430a      	orrs	r2, r1
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	e0e6      	b.n	801152e <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	785b      	ldrb	r3, [r3, #1]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d171      	bne.n	801144c <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	009b      	lsls	r3, r3, #2
 8011370:	18d3      	adds	r3, r2, r3
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	63bb      	str	r3, [r7, #56]	; 0x38
 8011376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011378:	2380      	movs	r3, #128	; 0x80
 801137a:	01db      	lsls	r3, r3, #7
 801137c:	4013      	ands	r3, r2
 801137e:	d011      	beq.n	80113a4 <USB_DeactivateEndpoint+0x120>
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	18d3      	adds	r3, r2, r3
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a6a      	ldr	r2, [pc, #424]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 801138e:	4013      	ands	r3, r2
 8011390:	637b      	str	r3, [r7, #52]	; 0x34
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	18d3      	adds	r3, r2, r3
 801139c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801139e:	496a      	ldr	r1, [pc, #424]	; (8011548 <USB_DeactivateEndpoint+0x2c4>)
 80113a0:	430a      	orrs	r2, r1
 80113a2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80113a4:	687a      	ldr	r2, [r7, #4]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	18d3      	adds	r3, r2, r3
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	633b      	str	r3, [r7, #48]	; 0x30
 80113b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b4:	2240      	movs	r2, #64	; 0x40
 80113b6:	4013      	ands	r3, r2
 80113b8:	d011      	beq.n	80113de <USB_DeactivateEndpoint+0x15a>
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	18d3      	adds	r3, r2, r3
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4a5c      	ldr	r2, [pc, #368]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 80113c8:	4013      	ands	r3, r2
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	18d3      	adds	r3, r2, r3
 80113d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113d8:	4958      	ldr	r1, [pc, #352]	; (801153c <USB_DeactivateEndpoint+0x2b8>)
 80113da:	430a      	orrs	r2, r1
 80113dc:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	18d3      	adds	r3, r2, r3
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4a53      	ldr	r2, [pc, #332]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 80113ec:	4013      	ands	r3, r2
 80113ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80113f0:	687a      	ldr	r2, [r7, #4]
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	18d3      	adds	r3, r2, r3
 80113fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113fc:	494f      	ldr	r1, [pc, #316]	; (801153c <USB_DeactivateEndpoint+0x2b8>)
 80113fe:	430a      	orrs	r2, r1
 8011400:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011402:	687a      	ldr	r2, [r7, #4]
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	18d3      	adds	r3, r2, r3
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4a4f      	ldr	r2, [pc, #316]	; (801154c <USB_DeactivateEndpoint+0x2c8>)
 8011410:	4013      	ands	r3, r2
 8011412:	627b      	str	r3, [r7, #36]	; 0x24
 8011414:	687a      	ldr	r2, [r7, #4]
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	18d3      	adds	r3, r2, r3
 801141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011420:	4948      	ldr	r1, [pc, #288]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 8011422:	430a      	orrs	r2, r1
 8011424:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	18d3      	adds	r3, r2, r3
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	4a43      	ldr	r2, [pc, #268]	; (8011540 <USB_DeactivateEndpoint+0x2bc>)
 8011434:	4013      	ands	r3, r2
 8011436:	623b      	str	r3, [r7, #32]
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	18d3      	adds	r3, r2, r3
 8011442:	6a3a      	ldr	r2, [r7, #32]
 8011444:	493f      	ldr	r1, [pc, #252]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 8011446:	430a      	orrs	r2, r1
 8011448:	601a      	str	r2, [r3, #0]
 801144a:	e070      	b.n	801152e <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	009b      	lsls	r3, r3, #2
 8011454:	18d3      	adds	r3, r2, r3
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	657b      	str	r3, [r7, #84]	; 0x54
 801145a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801145c:	2380      	movs	r3, #128	; 0x80
 801145e:	01db      	lsls	r3, r3, #7
 8011460:	4013      	ands	r3, r2
 8011462:	d011      	beq.n	8011488 <USB_DeactivateEndpoint+0x204>
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	009b      	lsls	r3, r3, #2
 801146c:	18d3      	adds	r3, r2, r3
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	4a31      	ldr	r2, [pc, #196]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 8011472:	4013      	ands	r3, r2
 8011474:	653b      	str	r3, [r7, #80]	; 0x50
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	781b      	ldrb	r3, [r3, #0]
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	18d3      	adds	r3, r2, r3
 8011480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011482:	4931      	ldr	r1, [pc, #196]	; (8011548 <USB_DeactivateEndpoint+0x2c4>)
 8011484:	430a      	orrs	r2, r1
 8011486:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011488:	687a      	ldr	r2, [r7, #4]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	18d3      	adds	r3, r2, r3
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011498:	2240      	movs	r2, #64	; 0x40
 801149a:	4013      	ands	r3, r2
 801149c:	d011      	beq.n	80114c2 <USB_DeactivateEndpoint+0x23e>
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	18d3      	adds	r3, r2, r3
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	4a23      	ldr	r2, [pc, #140]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 80114ac:	4013      	ands	r3, r2
 80114ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	18d3      	adds	r3, r2, r3
 80114ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114bc:	491f      	ldr	r1, [pc, #124]	; (801153c <USB_DeactivateEndpoint+0x2b8>)
 80114be:	430a      	orrs	r2, r1
 80114c0:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	18d3      	adds	r3, r2, r3
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a1a      	ldr	r2, [pc, #104]	; (8011538 <USB_DeactivateEndpoint+0x2b4>)
 80114d0:	4013      	ands	r3, r2
 80114d2:	647b      	str	r3, [r7, #68]	; 0x44
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	18d3      	adds	r3, r2, r3
 80114de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114e0:	4919      	ldr	r1, [pc, #100]	; (8011548 <USB_DeactivateEndpoint+0x2c4>)
 80114e2:	430a      	orrs	r2, r1
 80114e4:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	18d3      	adds	r3, r2, r3
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4a13      	ldr	r2, [pc, #76]	; (8011540 <USB_DeactivateEndpoint+0x2bc>)
 80114f4:	4013      	ands	r3, r2
 80114f6:	643b      	str	r3, [r7, #64]	; 0x40
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	781b      	ldrb	r3, [r3, #0]
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	18d3      	adds	r3, r2, r3
 8011502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011504:	490f      	ldr	r1, [pc, #60]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 8011506:	430a      	orrs	r2, r1
 8011508:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	18d3      	adds	r3, r2, r3
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	4a0d      	ldr	r2, [pc, #52]	; (801154c <USB_DeactivateEndpoint+0x2c8>)
 8011518:	4013      	ands	r3, r2
 801151a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	009b      	lsls	r3, r3, #2
 8011524:	18d3      	adds	r3, r2, r3
 8011526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011528:	4906      	ldr	r1, [pc, #24]	; (8011544 <USB_DeactivateEndpoint+0x2c0>)
 801152a:	430a      	orrs	r2, r1
 801152c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801152e:	2300      	movs	r3, #0
}
 8011530:	0018      	movs	r0, r3
 8011532:	46bd      	mov	sp, r7
 8011534:	b016      	add	sp, #88	; 0x58
 8011536:	bd80      	pop	{r7, pc}
 8011538:	07ff8f8f 	.word	0x07ff8f8f
 801153c:	000080c0 	.word	0x000080c0
 8011540:	07ff8fbf 	.word	0x07ff8fbf
 8011544:	00008080 	.word	0x00008080
 8011548:	0000c080 	.word	0x0000c080
 801154c:	07ffbf8f 	.word	0x07ffbf8f

08011550 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8011550:	b590      	push	{r4, r7, lr}
 8011552:	b097      	sub	sp, #92	; 0x5c
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	785b      	ldrb	r3, [r3, #1]
 801155e:	2b01      	cmp	r3, #1
 8011560:	d001      	beq.n	8011566 <USB_EPStartXfer+0x16>
 8011562:	f000 fcbf 	bl	8011ee4 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	699a      	ldr	r2, [r3, #24]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	429a      	cmp	r2, r3
 8011570:	d903      	bls.n	801157a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	657b      	str	r3, [r7, #84]	; 0x54
 8011578:	e002      	b.n	8011580 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	699b      	ldr	r3, [r3, #24]
 801157e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	7b1b      	ldrb	r3, [r3, #12]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d12b      	bne.n	80115e0 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	6959      	ldr	r1, [r3, #20]
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	88da      	ldrh	r2, [r3, #6]
 8011590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011592:	b29b      	uxth	r3, r3
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f001 f8f5 	bl	8012784 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	00db      	lsls	r3, r3, #3
 80115a0:	4ace      	ldr	r2, [pc, #824]	; (80118dc <USB_EPStartXfer+0x38c>)
 80115a2:	4694      	mov	ip, r2
 80115a4:	4463      	add	r3, ip
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	781b      	ldrb	r3, [r3, #0]
 80115ac:	00db      	lsls	r3, r3, #3
 80115ae:	49cb      	ldr	r1, [pc, #812]	; (80118dc <USB_EPStartXfer+0x38c>)
 80115b0:	468c      	mov	ip, r1
 80115b2:	4463      	add	r3, ip
 80115b4:	0412      	lsls	r2, r2, #16
 80115b6:	0c12      	lsrs	r2, r2, #16
 80115b8:	601a      	str	r2, [r3, #0]
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	4ac6      	ldr	r2, [pc, #792]	; (80118dc <USB_EPStartXfer+0x38c>)
 80115c2:	4694      	mov	ip, r2
 80115c4:	4463      	add	r3, ip
 80115c6:	6819      	ldr	r1, [r3, #0]
 80115c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115ca:	041a      	lsls	r2, r3, #16
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	00db      	lsls	r3, r3, #3
 80115d2:	48c2      	ldr	r0, [pc, #776]	; (80118dc <USB_EPStartXfer+0x38c>)
 80115d4:	4684      	mov	ip, r0
 80115d6:	4463      	add	r3, ip
 80115d8:	430a      	orrs	r2, r1
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	f000 fc67 	bl	8011eae <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	78db      	ldrb	r3, [r3, #3]
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d000      	beq.n	80115ea <USB_EPStartXfer+0x9a>
 80115e8:	e31a      	b.n	8011c20 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	6a1a      	ldr	r2, [r3, #32]
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d800      	bhi.n	80115f8 <USB_EPStartXfer+0xa8>
 80115f6:	e2c7      	b.n	8011b88 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	18d3      	adds	r3, r2, r3
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	4ab6      	ldr	r2, [pc, #728]	; (80118e0 <USB_EPStartXfer+0x390>)
 8011606:	4013      	ands	r3, r2
 8011608:	613b      	str	r3, [r7, #16]
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	18d3      	adds	r3, r2, r3
 8011614:	693a      	ldr	r2, [r7, #16]
 8011616:	49b3      	ldr	r1, [pc, #716]	; (80118e4 <USB_EPStartXfer+0x394>)
 8011618:	430a      	orrs	r2, r1
 801161a:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	6a1a      	ldr	r2, [r3, #32]
 8011620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011622:	1ad2      	subs	r2, r2, r3
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011628:	687a      	ldr	r2, [r7, #4]
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	781b      	ldrb	r3, [r3, #0]
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	18d3      	adds	r3, r2, r3
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2240      	movs	r2, #64	; 0x40
 8011636:	4013      	ands	r3, r2
 8011638:	d100      	bne.n	801163c <USB_EPStartXfer+0xec>
 801163a:	e155      	b.n	80118e8 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	785b      	ldrb	r3, [r3, #1]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d162      	bne.n	801170a <USB_EPStartXfer+0x1ba>
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	00db      	lsls	r3, r3, #3
 801164a:	4aa4      	ldr	r2, [pc, #656]	; (80118dc <USB_EPStartXfer+0x38c>)
 801164c:	4694      	mov	ip, r2
 801164e:	4463      	add	r3, ip
 8011650:	685a      	ldr	r2, [r3, #4]
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	49a0      	ldr	r1, [pc, #640]	; (80118dc <USB_EPStartXfer+0x38c>)
 801165a:	468c      	mov	ip, r1
 801165c:	4463      	add	r3, ip
 801165e:	0192      	lsls	r2, r2, #6
 8011660:	0992      	lsrs	r2, r2, #6
 8011662:	605a      	str	r2, [r3, #4]
 8011664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011666:	2b3e      	cmp	r3, #62	; 0x3e
 8011668:	d91e      	bls.n	80116a8 <USB_EPStartXfer+0x158>
 801166a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801166c:	095b      	lsrs	r3, r3, #5
 801166e:	653b      	str	r3, [r7, #80]	; 0x50
 8011670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011672:	221f      	movs	r2, #31
 8011674:	4013      	ands	r3, r2
 8011676:	d102      	bne.n	801167e <USB_EPStartXfer+0x12e>
 8011678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167a:	3b01      	subs	r3, #1
 801167c:	653b      	str	r3, [r7, #80]	; 0x50
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	00db      	lsls	r3, r3, #3
 8011684:	4a95      	ldr	r2, [pc, #596]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011686:	4694      	mov	ip, r2
 8011688:	4463      	add	r3, ip
 801168a:	685a      	ldr	r2, [r3, #4]
 801168c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801168e:	069b      	lsls	r3, r3, #26
 8011690:	431a      	orrs	r2, r3
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	4990      	ldr	r1, [pc, #576]	; (80118dc <USB_EPStartXfer+0x38c>)
 801169a:	468c      	mov	ip, r1
 801169c:	4463      	add	r3, ip
 801169e:	2180      	movs	r1, #128	; 0x80
 80116a0:	0609      	lsls	r1, r1, #24
 80116a2:	430a      	orrs	r2, r1
 80116a4:	605a      	str	r2, [r3, #4]
 80116a6:	e055      	b.n	8011754 <USB_EPStartXfer+0x204>
 80116a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d111      	bne.n	80116d2 <USB_EPStartXfer+0x182>
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	00db      	lsls	r3, r3, #3
 80116b4:	4a89      	ldr	r2, [pc, #548]	; (80118dc <USB_EPStartXfer+0x38c>)
 80116b6:	4694      	mov	ip, r2
 80116b8:	4463      	add	r3, ip
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	00db      	lsls	r3, r3, #3
 80116c2:	4986      	ldr	r1, [pc, #536]	; (80118dc <USB_EPStartXfer+0x38c>)
 80116c4:	468c      	mov	ip, r1
 80116c6:	4463      	add	r3, ip
 80116c8:	2180      	movs	r1, #128	; 0x80
 80116ca:	0609      	lsls	r1, r1, #24
 80116cc:	430a      	orrs	r2, r1
 80116ce:	605a      	str	r2, [r3, #4]
 80116d0:	e040      	b.n	8011754 <USB_EPStartXfer+0x204>
 80116d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d4:	085b      	lsrs	r3, r3, #1
 80116d6:	653b      	str	r3, [r7, #80]	; 0x50
 80116d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116da:	2201      	movs	r2, #1
 80116dc:	4013      	ands	r3, r2
 80116de:	d002      	beq.n	80116e6 <USB_EPStartXfer+0x196>
 80116e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e2:	3301      	adds	r3, #1
 80116e4:	653b      	str	r3, [r7, #80]	; 0x50
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	4a7b      	ldr	r2, [pc, #492]	; (80118dc <USB_EPStartXfer+0x38c>)
 80116ee:	4694      	mov	ip, r2
 80116f0:	4463      	add	r3, ip
 80116f2:	6859      	ldr	r1, [r3, #4]
 80116f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f6:	069a      	lsls	r2, r3, #26
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	4877      	ldr	r0, [pc, #476]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011700:	4684      	mov	ip, r0
 8011702:	4463      	add	r3, ip
 8011704:	430a      	orrs	r2, r1
 8011706:	605a      	str	r2, [r3, #4]
 8011708:	e024      	b.n	8011754 <USB_EPStartXfer+0x204>
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	785b      	ldrb	r3, [r3, #1]
 801170e:	2b01      	cmp	r3, #1
 8011710:	d120      	bne.n	8011754 <USB_EPStartXfer+0x204>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	00db      	lsls	r3, r3, #3
 8011718:	4a70      	ldr	r2, [pc, #448]	; (80118dc <USB_EPStartXfer+0x38c>)
 801171a:	4694      	mov	ip, r2
 801171c:	4463      	add	r3, ip
 801171e:	685a      	ldr	r2, [r3, #4]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	496d      	ldr	r1, [pc, #436]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011728:	468c      	mov	ip, r1
 801172a:	4463      	add	r3, ip
 801172c:	0412      	lsls	r2, r2, #16
 801172e:	0c12      	lsrs	r2, r2, #16
 8011730:	605a      	str	r2, [r3, #4]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	00db      	lsls	r3, r3, #3
 8011738:	4a68      	ldr	r2, [pc, #416]	; (80118dc <USB_EPStartXfer+0x38c>)
 801173a:	4694      	mov	ip, r2
 801173c:	4463      	add	r3, ip
 801173e:	6859      	ldr	r1, [r3, #4]
 8011740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011742:	041a      	lsls	r2, r3, #16
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	00db      	lsls	r3, r3, #3
 801174a:	4864      	ldr	r0, [pc, #400]	; (80118dc <USB_EPStartXfer+0x38c>)
 801174c:	4684      	mov	ip, r0
 801174e:	4463      	add	r3, ip
 8011750:	430a      	orrs	r2, r1
 8011752:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8011754:	201a      	movs	r0, #26
 8011756:	183b      	adds	r3, r7, r0
 8011758:	683a      	ldr	r2, [r7, #0]
 801175a:	8952      	ldrh	r2, [r2, #10]
 801175c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	6959      	ldr	r1, [r3, #20]
 8011762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011764:	b29c      	uxth	r4, r3
 8011766:	183b      	adds	r3, r7, r0
 8011768:	881a      	ldrh	r2, [r3, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	0023      	movs	r3, r4
 801176e:	f001 f809 	bl	8012784 <USB_WritePMA>
            ep->xfer_buff += len;
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	695a      	ldr	r2, [r3, #20]
 8011776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011778:	18d2      	adds	r2, r2, r3
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	6a1a      	ldr	r2, [r3, #32]
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	691b      	ldr	r3, [r3, #16]
 8011786:	429a      	cmp	r2, r3
 8011788:	d906      	bls.n	8011798 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	6a1a      	ldr	r2, [r3, #32]
 801178e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011790:	1ad2      	subs	r2, r2, r3
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	621a      	str	r2, [r3, #32]
 8011796:	e005      	b.n	80117a4 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	6a1b      	ldr	r3, [r3, #32]
 801179c:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2200      	movs	r2, #0
 80117a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	785b      	ldrb	r3, [r3, #1]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d162      	bne.n	8011872 <USB_EPStartXfer+0x322>
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	00db      	lsls	r3, r3, #3
 80117b2:	4a4a      	ldr	r2, [pc, #296]	; (80118dc <USB_EPStartXfer+0x38c>)
 80117b4:	4694      	mov	ip, r2
 80117b6:	4463      	add	r3, ip
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	00db      	lsls	r3, r3, #3
 80117c0:	4946      	ldr	r1, [pc, #280]	; (80118dc <USB_EPStartXfer+0x38c>)
 80117c2:	468c      	mov	ip, r1
 80117c4:	4463      	add	r3, ip
 80117c6:	0192      	lsls	r2, r2, #6
 80117c8:	0992      	lsrs	r2, r2, #6
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ce:	2b3e      	cmp	r3, #62	; 0x3e
 80117d0:	d91e      	bls.n	8011810 <USB_EPStartXfer+0x2c0>
 80117d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117d4:	095b      	lsrs	r3, r3, #5
 80117d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117da:	221f      	movs	r2, #31
 80117dc:	4013      	ands	r3, r2
 80117de:	d102      	bne.n	80117e6 <USB_EPStartXfer+0x296>
 80117e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117e2:	3b01      	subs	r3, #1
 80117e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	00db      	lsls	r3, r3, #3
 80117ec:	4a3b      	ldr	r2, [pc, #236]	; (80118dc <USB_EPStartXfer+0x38c>)
 80117ee:	4694      	mov	ip, r2
 80117f0:	4463      	add	r3, ip
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117f6:	069b      	lsls	r3, r3, #26
 80117f8:	431a      	orrs	r2, r3
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	00db      	lsls	r3, r3, #3
 8011800:	4936      	ldr	r1, [pc, #216]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011802:	468c      	mov	ip, r1
 8011804:	4463      	add	r3, ip
 8011806:	2180      	movs	r1, #128	; 0x80
 8011808:	0609      	lsls	r1, r1, #24
 801180a:	430a      	orrs	r2, r1
 801180c:	601a      	str	r2, [r3, #0]
 801180e:	e055      	b.n	80118bc <USB_EPStartXfer+0x36c>
 8011810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011812:	2b00      	cmp	r3, #0
 8011814:	d111      	bne.n	801183a <USB_EPStartXfer+0x2ea>
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	4a2f      	ldr	r2, [pc, #188]	; (80118dc <USB_EPStartXfer+0x38c>)
 801181e:	4694      	mov	ip, r2
 8011820:	4463      	add	r3, ip
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	492c      	ldr	r1, [pc, #176]	; (80118dc <USB_EPStartXfer+0x38c>)
 801182c:	468c      	mov	ip, r1
 801182e:	4463      	add	r3, ip
 8011830:	2180      	movs	r1, #128	; 0x80
 8011832:	0609      	lsls	r1, r1, #24
 8011834:	430a      	orrs	r2, r1
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	e040      	b.n	80118bc <USB_EPStartXfer+0x36c>
 801183a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801183c:	085b      	lsrs	r3, r3, #1
 801183e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011842:	2201      	movs	r2, #1
 8011844:	4013      	ands	r3, r2
 8011846:	d002      	beq.n	801184e <USB_EPStartXfer+0x2fe>
 8011848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801184a:	3301      	adds	r3, #1
 801184c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	00db      	lsls	r3, r3, #3
 8011854:	4a21      	ldr	r2, [pc, #132]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011856:	4694      	mov	ip, r2
 8011858:	4463      	add	r3, ip
 801185a:	6819      	ldr	r1, [r3, #0]
 801185c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801185e:	069a      	lsls	r2, r3, #26
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	481d      	ldr	r0, [pc, #116]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011868:	4684      	mov	ip, r0
 801186a:	4463      	add	r3, ip
 801186c:	430a      	orrs	r2, r1
 801186e:	601a      	str	r2, [r3, #0]
 8011870:	e024      	b.n	80118bc <USB_EPStartXfer+0x36c>
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	785b      	ldrb	r3, [r3, #1]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d120      	bne.n	80118bc <USB_EPStartXfer+0x36c>
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	00db      	lsls	r3, r3, #3
 8011880:	4a16      	ldr	r2, [pc, #88]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011882:	4694      	mov	ip, r2
 8011884:	4463      	add	r3, ip
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	00db      	lsls	r3, r3, #3
 801188e:	4913      	ldr	r1, [pc, #76]	; (80118dc <USB_EPStartXfer+0x38c>)
 8011890:	468c      	mov	ip, r1
 8011892:	4463      	add	r3, ip
 8011894:	0412      	lsls	r2, r2, #16
 8011896:	0c12      	lsrs	r2, r2, #16
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	00db      	lsls	r3, r3, #3
 80118a0:	4a0e      	ldr	r2, [pc, #56]	; (80118dc <USB_EPStartXfer+0x38c>)
 80118a2:	4694      	mov	ip, r2
 80118a4:	4463      	add	r3, ip
 80118a6:	6819      	ldr	r1, [r3, #0]
 80118a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118aa:	041a      	lsls	r2, r3, #16
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	480a      	ldr	r0, [pc, #40]	; (80118dc <USB_EPStartXfer+0x38c>)
 80118b4:	4684      	mov	ip, r0
 80118b6:	4463      	add	r3, ip
 80118b8:	430a      	orrs	r2, r1
 80118ba:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80118bc:	201a      	movs	r0, #26
 80118be:	183b      	adds	r3, r7, r0
 80118c0:	683a      	ldr	r2, [r7, #0]
 80118c2:	8912      	ldrh	r2, [r2, #8]
 80118c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	6959      	ldr	r1, [r3, #20]
 80118ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118cc:	b29c      	uxth	r4, r3
 80118ce:	183b      	adds	r3, r7, r0
 80118d0:	881a      	ldrh	r2, [r3, #0]
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	0023      	movs	r3, r4
 80118d6:	f000 ff55 	bl	8012784 <USB_WritePMA>
 80118da:	e2e8      	b.n	8011eae <USB_EPStartXfer+0x95e>
 80118dc:	40009800 	.word	0x40009800
 80118e0:	07ff8f8f 	.word	0x07ff8f8f
 80118e4:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	785b      	ldrb	r3, [r3, #1]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d162      	bne.n	80119b6 <USB_EPStartXfer+0x466>
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	00db      	lsls	r3, r3, #3
 80118f6:	4ac7      	ldr	r2, [pc, #796]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80118f8:	4694      	mov	ip, r2
 80118fa:	4463      	add	r3, ip
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	00db      	lsls	r3, r3, #3
 8011904:	49c3      	ldr	r1, [pc, #780]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011906:	468c      	mov	ip, r1
 8011908:	4463      	add	r3, ip
 801190a:	0192      	lsls	r2, r2, #6
 801190c:	0992      	lsrs	r2, r2, #6
 801190e:	601a      	str	r2, [r3, #0]
 8011910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011912:	2b3e      	cmp	r3, #62	; 0x3e
 8011914:	d91e      	bls.n	8011954 <USB_EPStartXfer+0x404>
 8011916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011918:	095b      	lsrs	r3, r3, #5
 801191a:	64bb      	str	r3, [r7, #72]	; 0x48
 801191c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801191e:	221f      	movs	r2, #31
 8011920:	4013      	ands	r3, r2
 8011922:	d102      	bne.n	801192a <USB_EPStartXfer+0x3da>
 8011924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011926:	3b01      	subs	r3, #1
 8011928:	64bb      	str	r3, [r7, #72]	; 0x48
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	4ab8      	ldr	r2, [pc, #736]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011932:	4694      	mov	ip, r2
 8011934:	4463      	add	r3, ip
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801193a:	069b      	lsls	r3, r3, #26
 801193c:	431a      	orrs	r2, r3
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	49b3      	ldr	r1, [pc, #716]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011946:	468c      	mov	ip, r1
 8011948:	4463      	add	r3, ip
 801194a:	2180      	movs	r1, #128	; 0x80
 801194c:	0609      	lsls	r1, r1, #24
 801194e:	430a      	orrs	r2, r1
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	e055      	b.n	8011a00 <USB_EPStartXfer+0x4b0>
 8011954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011956:	2b00      	cmp	r3, #0
 8011958:	d111      	bne.n	801197e <USB_EPStartXfer+0x42e>
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	00db      	lsls	r3, r3, #3
 8011960:	4aac      	ldr	r2, [pc, #688]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011962:	4694      	mov	ip, r2
 8011964:	4463      	add	r3, ip
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	49a9      	ldr	r1, [pc, #676]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011970:	468c      	mov	ip, r1
 8011972:	4463      	add	r3, ip
 8011974:	2180      	movs	r1, #128	; 0x80
 8011976:	0609      	lsls	r1, r1, #24
 8011978:	430a      	orrs	r2, r1
 801197a:	601a      	str	r2, [r3, #0]
 801197c:	e040      	b.n	8011a00 <USB_EPStartXfer+0x4b0>
 801197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011980:	085b      	lsrs	r3, r3, #1
 8011982:	64bb      	str	r3, [r7, #72]	; 0x48
 8011984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011986:	2201      	movs	r2, #1
 8011988:	4013      	ands	r3, r2
 801198a:	d002      	beq.n	8011992 <USB_EPStartXfer+0x442>
 801198c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801198e:	3301      	adds	r3, #1
 8011990:	64bb      	str	r3, [r7, #72]	; 0x48
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	00db      	lsls	r3, r3, #3
 8011998:	4a9e      	ldr	r2, [pc, #632]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 801199a:	4694      	mov	ip, r2
 801199c:	4463      	add	r3, ip
 801199e:	6819      	ldr	r1, [r3, #0]
 80119a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119a2:	069a      	lsls	r2, r3, #26
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	00db      	lsls	r3, r3, #3
 80119aa:	489a      	ldr	r0, [pc, #616]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80119ac:	4684      	mov	ip, r0
 80119ae:	4463      	add	r3, ip
 80119b0:	430a      	orrs	r2, r1
 80119b2:	601a      	str	r2, [r3, #0]
 80119b4:	e024      	b.n	8011a00 <USB_EPStartXfer+0x4b0>
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	785b      	ldrb	r3, [r3, #1]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d120      	bne.n	8011a00 <USB_EPStartXfer+0x4b0>
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	00db      	lsls	r3, r3, #3
 80119c4:	4a93      	ldr	r2, [pc, #588]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80119c6:	4694      	mov	ip, r2
 80119c8:	4463      	add	r3, ip
 80119ca:	681a      	ldr	r2, [r3, #0]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	00db      	lsls	r3, r3, #3
 80119d2:	4990      	ldr	r1, [pc, #576]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80119d4:	468c      	mov	ip, r1
 80119d6:	4463      	add	r3, ip
 80119d8:	0412      	lsls	r2, r2, #16
 80119da:	0c12      	lsrs	r2, r2, #16
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	00db      	lsls	r3, r3, #3
 80119e4:	4a8b      	ldr	r2, [pc, #556]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80119e6:	4694      	mov	ip, r2
 80119e8:	4463      	add	r3, ip
 80119ea:	6819      	ldr	r1, [r3, #0]
 80119ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ee:	041a      	lsls	r2, r3, #16
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	00db      	lsls	r3, r3, #3
 80119f6:	4887      	ldr	r0, [pc, #540]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 80119f8:	4684      	mov	ip, r0
 80119fa:	4463      	add	r3, ip
 80119fc:	430a      	orrs	r2, r1
 80119fe:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011a00:	201a      	movs	r0, #26
 8011a02:	183b      	adds	r3, r7, r0
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	8912      	ldrh	r2, [r2, #8]
 8011a08:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	6959      	ldr	r1, [r3, #20]
 8011a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a10:	b29c      	uxth	r4, r3
 8011a12:	183b      	adds	r3, r7, r0
 8011a14:	881a      	ldrh	r2, [r3, #0]
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	0023      	movs	r3, r4
 8011a1a:	f000 feb3 	bl	8012784 <USB_WritePMA>
            ep->xfer_buff += len;
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	695a      	ldr	r2, [r3, #20]
 8011a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a24:	18d2      	adds	r2, r2, r3
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	6a1a      	ldr	r2, [r3, #32]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	691b      	ldr	r3, [r3, #16]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d906      	bls.n	8011a44 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	6a1a      	ldr	r2, [r3, #32]
 8011a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a3c:	1ad2      	subs	r2, r2, r3
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	621a      	str	r2, [r3, #32]
 8011a42:	e005      	b.n	8011a50 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	6a1b      	ldr	r3, [r3, #32]
 8011a48:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	785b      	ldrb	r3, [r3, #1]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d162      	bne.n	8011b1e <USB_EPStartXfer+0x5ce>
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	4a6d      	ldr	r2, [pc, #436]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011a60:	4694      	mov	ip, r2
 8011a62:	4463      	add	r3, ip
 8011a64:	685a      	ldr	r2, [r3, #4]
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	4969      	ldr	r1, [pc, #420]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011a6e:	468c      	mov	ip, r1
 8011a70:	4463      	add	r3, ip
 8011a72:	0192      	lsls	r2, r2, #6
 8011a74:	0992      	lsrs	r2, r2, #6
 8011a76:	605a      	str	r2, [r3, #4]
 8011a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8011a7c:	d91e      	bls.n	8011abc <USB_EPStartXfer+0x56c>
 8011a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a80:	095b      	lsrs	r3, r3, #5
 8011a82:	647b      	str	r3, [r7, #68]	; 0x44
 8011a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a86:	221f      	movs	r2, #31
 8011a88:	4013      	ands	r3, r2
 8011a8a:	d102      	bne.n	8011a92 <USB_EPStartXfer+0x542>
 8011a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	647b      	str	r3, [r7, #68]	; 0x44
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	4a5e      	ldr	r2, [pc, #376]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011a9a:	4694      	mov	ip, r2
 8011a9c:	4463      	add	r3, ip
 8011a9e:	685a      	ldr	r2, [r3, #4]
 8011aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aa2:	069b      	lsls	r3, r3, #26
 8011aa4:	431a      	orrs	r2, r3
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	4959      	ldr	r1, [pc, #356]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011aae:	468c      	mov	ip, r1
 8011ab0:	4463      	add	r3, ip
 8011ab2:	2180      	movs	r1, #128	; 0x80
 8011ab4:	0609      	lsls	r1, r1, #24
 8011ab6:	430a      	orrs	r2, r1
 8011ab8:	605a      	str	r2, [r3, #4]
 8011aba:	e055      	b.n	8011b68 <USB_EPStartXfer+0x618>
 8011abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d111      	bne.n	8011ae6 <USB_EPStartXfer+0x596>
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	00db      	lsls	r3, r3, #3
 8011ac8:	4a52      	ldr	r2, [pc, #328]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011aca:	4694      	mov	ip, r2
 8011acc:	4463      	add	r3, ip
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	00db      	lsls	r3, r3, #3
 8011ad6:	494f      	ldr	r1, [pc, #316]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011ad8:	468c      	mov	ip, r1
 8011ada:	4463      	add	r3, ip
 8011adc:	2180      	movs	r1, #128	; 0x80
 8011ade:	0609      	lsls	r1, r1, #24
 8011ae0:	430a      	orrs	r2, r1
 8011ae2:	605a      	str	r2, [r3, #4]
 8011ae4:	e040      	b.n	8011b68 <USB_EPStartXfer+0x618>
 8011ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ae8:	085b      	lsrs	r3, r3, #1
 8011aea:	647b      	str	r3, [r7, #68]	; 0x44
 8011aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aee:	2201      	movs	r2, #1
 8011af0:	4013      	ands	r3, r2
 8011af2:	d002      	beq.n	8011afa <USB_EPStartXfer+0x5aa>
 8011af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af6:	3301      	adds	r3, #1
 8011af8:	647b      	str	r3, [r7, #68]	; 0x44
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	4a44      	ldr	r2, [pc, #272]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b02:	4694      	mov	ip, r2
 8011b04:	4463      	add	r3, ip
 8011b06:	6859      	ldr	r1, [r3, #4]
 8011b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b0a:	069a      	lsls	r2, r3, #26
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	00db      	lsls	r3, r3, #3
 8011b12:	4840      	ldr	r0, [pc, #256]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b14:	4684      	mov	ip, r0
 8011b16:	4463      	add	r3, ip
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	605a      	str	r2, [r3, #4]
 8011b1c:	e024      	b.n	8011b68 <USB_EPStartXfer+0x618>
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	785b      	ldrb	r3, [r3, #1]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d120      	bne.n	8011b68 <USB_EPStartXfer+0x618>
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	4a39      	ldr	r2, [pc, #228]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b2e:	4694      	mov	ip, r2
 8011b30:	4463      	add	r3, ip
 8011b32:	685a      	ldr	r2, [r3, #4]
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	781b      	ldrb	r3, [r3, #0]
 8011b38:	00db      	lsls	r3, r3, #3
 8011b3a:	4936      	ldr	r1, [pc, #216]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b3c:	468c      	mov	ip, r1
 8011b3e:	4463      	add	r3, ip
 8011b40:	0412      	lsls	r2, r2, #16
 8011b42:	0c12      	lsrs	r2, r2, #16
 8011b44:	605a      	str	r2, [r3, #4]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	781b      	ldrb	r3, [r3, #0]
 8011b4a:	00db      	lsls	r3, r3, #3
 8011b4c:	4a31      	ldr	r2, [pc, #196]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b4e:	4694      	mov	ip, r2
 8011b50:	4463      	add	r3, ip
 8011b52:	6859      	ldr	r1, [r3, #4]
 8011b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b56:	041a      	lsls	r2, r3, #16
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	781b      	ldrb	r3, [r3, #0]
 8011b5c:	00db      	lsls	r3, r3, #3
 8011b5e:	482d      	ldr	r0, [pc, #180]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011b60:	4684      	mov	ip, r0
 8011b62:	4463      	add	r3, ip
 8011b64:	430a      	orrs	r2, r1
 8011b66:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8011b68:	201a      	movs	r0, #26
 8011b6a:	183b      	adds	r3, r7, r0
 8011b6c:	683a      	ldr	r2, [r7, #0]
 8011b6e:	8952      	ldrh	r2, [r2, #10]
 8011b70:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	6959      	ldr	r1, [r3, #20]
 8011b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b78:	b29c      	uxth	r4, r3
 8011b7a:	183b      	adds	r3, r7, r0
 8011b7c:	881a      	ldrh	r2, [r3, #0]
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	0023      	movs	r3, r4
 8011b82:	f000 fdff 	bl	8012784 <USB_WritePMA>
 8011b86:	e192      	b.n	8011eae <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	6a1b      	ldr	r3, [r3, #32]
 8011b8c:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	18d3      	adds	r3, r2, r3
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	4a1f      	ldr	r2, [pc, #124]	; (8011c18 <USB_EPStartXfer+0x6c8>)
 8011b9c:	4013      	ands	r3, r2
 8011b9e:	617b      	str	r3, [r7, #20]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	781b      	ldrb	r3, [r3, #0]
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	18d3      	adds	r3, r2, r3
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	491b      	ldr	r1, [pc, #108]	; (8011c1c <USB_EPStartXfer+0x6cc>)
 8011bae:	430a      	orrs	r2, r1
 8011bb0:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	4a16      	ldr	r2, [pc, #88]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011bba:	4694      	mov	ip, r2
 8011bbc:	4463      	add	r3, ip
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	4913      	ldr	r1, [pc, #76]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011bc8:	468c      	mov	ip, r1
 8011bca:	4463      	add	r3, ip
 8011bcc:	0412      	lsls	r2, r2, #16
 8011bce:	0c12      	lsrs	r2, r2, #16
 8011bd0:	601a      	str	r2, [r3, #0]
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	4a0e      	ldr	r2, [pc, #56]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011bda:	4694      	mov	ip, r2
 8011bdc:	4463      	add	r3, ip
 8011bde:	6819      	ldr	r1, [r3, #0]
 8011be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011be2:	041a      	lsls	r2, r3, #16
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	480a      	ldr	r0, [pc, #40]	; (8011c14 <USB_EPStartXfer+0x6c4>)
 8011bec:	4684      	mov	ip, r0
 8011bee:	4463      	add	r3, ip
 8011bf0:	430a      	orrs	r2, r1
 8011bf2:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011bf4:	201a      	movs	r0, #26
 8011bf6:	183b      	adds	r3, r7, r0
 8011bf8:	683a      	ldr	r2, [r7, #0]
 8011bfa:	8912      	ldrh	r2, [r2, #8]
 8011bfc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	6959      	ldr	r1, [r3, #20]
 8011c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c04:	b29c      	uxth	r4, r3
 8011c06:	183b      	adds	r3, r7, r0
 8011c08:	881a      	ldrh	r2, [r3, #0]
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	0023      	movs	r3, r4
 8011c0e:	f000 fdb9 	bl	8012784 <USB_WritePMA>
 8011c12:	e14c      	b.n	8011eae <USB_EPStartXfer+0x95e>
 8011c14:	40009800 	.word	0x40009800
 8011c18:	07ff8e8f 	.word	0x07ff8e8f
 8011c1c:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	6a1a      	ldr	r2, [r3, #32]
 8011c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c26:	1ad2      	subs	r2, r2, r3
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	18d3      	adds	r3, r2, r3
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2240      	movs	r2, #64	; 0x40
 8011c3a:	4013      	ands	r3, r2
 8011c3c:	d100      	bne.n	8011c40 <USB_EPStartXfer+0x6f0>
 8011c3e:	e09b      	b.n	8011d78 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d162      	bne.n	8011d0e <USB_EPStartXfer+0x7be>
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	00db      	lsls	r3, r3, #3
 8011c4e:	4ad6      	ldr	r2, [pc, #856]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011c50:	4694      	mov	ip, r2
 8011c52:	4463      	add	r3, ip
 8011c54:	685a      	ldr	r2, [r3, #4]
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	00db      	lsls	r3, r3, #3
 8011c5c:	49d2      	ldr	r1, [pc, #840]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011c5e:	468c      	mov	ip, r1
 8011c60:	4463      	add	r3, ip
 8011c62:	0192      	lsls	r2, r2, #6
 8011c64:	0992      	lsrs	r2, r2, #6
 8011c66:	605a      	str	r2, [r3, #4]
 8011c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c6a:	2b3e      	cmp	r3, #62	; 0x3e
 8011c6c:	d91e      	bls.n	8011cac <USB_EPStartXfer+0x75c>
 8011c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c70:	095b      	lsrs	r3, r3, #5
 8011c72:	643b      	str	r3, [r7, #64]	; 0x40
 8011c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c76:	221f      	movs	r2, #31
 8011c78:	4013      	ands	r3, r2
 8011c7a:	d102      	bne.n	8011c82 <USB_EPStartXfer+0x732>
 8011c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	643b      	str	r3, [r7, #64]	; 0x40
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	00db      	lsls	r3, r3, #3
 8011c88:	4ac7      	ldr	r2, [pc, #796]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011c8a:	4694      	mov	ip, r2
 8011c8c:	4463      	add	r3, ip
 8011c8e:	685a      	ldr	r2, [r3, #4]
 8011c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c92:	069b      	lsls	r3, r3, #26
 8011c94:	431a      	orrs	r2, r3
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	781b      	ldrb	r3, [r3, #0]
 8011c9a:	00db      	lsls	r3, r3, #3
 8011c9c:	49c2      	ldr	r1, [pc, #776]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011c9e:	468c      	mov	ip, r1
 8011ca0:	4463      	add	r3, ip
 8011ca2:	2180      	movs	r1, #128	; 0x80
 8011ca4:	0609      	lsls	r1, r1, #24
 8011ca6:	430a      	orrs	r2, r1
 8011ca8:	605a      	str	r2, [r3, #4]
 8011caa:	e055      	b.n	8011d58 <USB_EPStartXfer+0x808>
 8011cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d111      	bne.n	8011cd6 <USB_EPStartXfer+0x786>
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	00db      	lsls	r3, r3, #3
 8011cb8:	4abb      	ldr	r2, [pc, #748]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011cba:	4694      	mov	ip, r2
 8011cbc:	4463      	add	r3, ip
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	49b8      	ldr	r1, [pc, #736]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011cc8:	468c      	mov	ip, r1
 8011cca:	4463      	add	r3, ip
 8011ccc:	2180      	movs	r1, #128	; 0x80
 8011cce:	0609      	lsls	r1, r1, #24
 8011cd0:	430a      	orrs	r2, r1
 8011cd2:	605a      	str	r2, [r3, #4]
 8011cd4:	e040      	b.n	8011d58 <USB_EPStartXfer+0x808>
 8011cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cd8:	085b      	lsrs	r3, r3, #1
 8011cda:	643b      	str	r3, [r7, #64]	; 0x40
 8011cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cde:	2201      	movs	r2, #1
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	d002      	beq.n	8011cea <USB_EPStartXfer+0x79a>
 8011ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	00db      	lsls	r3, r3, #3
 8011cf0:	4aad      	ldr	r2, [pc, #692]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011cf2:	4694      	mov	ip, r2
 8011cf4:	4463      	add	r3, ip
 8011cf6:	6859      	ldr	r1, [r3, #4]
 8011cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cfa:	069a      	lsls	r2, r3, #26
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	00db      	lsls	r3, r3, #3
 8011d02:	48a9      	ldr	r0, [pc, #676]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d04:	4684      	mov	ip, r0
 8011d06:	4463      	add	r3, ip
 8011d08:	430a      	orrs	r2, r1
 8011d0a:	605a      	str	r2, [r3, #4]
 8011d0c:	e024      	b.n	8011d58 <USB_EPStartXfer+0x808>
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	785b      	ldrb	r3, [r3, #1]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d120      	bne.n	8011d58 <USB_EPStartXfer+0x808>
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	4aa2      	ldr	r2, [pc, #648]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d1e:	4694      	mov	ip, r2
 8011d20:	4463      	add	r3, ip
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	00db      	lsls	r3, r3, #3
 8011d2a:	499f      	ldr	r1, [pc, #636]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d2c:	468c      	mov	ip, r1
 8011d2e:	4463      	add	r3, ip
 8011d30:	0412      	lsls	r2, r2, #16
 8011d32:	0c12      	lsrs	r2, r2, #16
 8011d34:	605a      	str	r2, [r3, #4]
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	4a9a      	ldr	r2, [pc, #616]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d3e:	4694      	mov	ip, r2
 8011d40:	4463      	add	r3, ip
 8011d42:	6859      	ldr	r1, [r3, #4]
 8011d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d46:	041a      	lsls	r2, r3, #16
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	4896      	ldr	r0, [pc, #600]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d50:	4684      	mov	ip, r0
 8011d52:	4463      	add	r3, ip
 8011d54:	430a      	orrs	r2, r1
 8011d56:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8011d58:	201a      	movs	r0, #26
 8011d5a:	183b      	adds	r3, r7, r0
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	8952      	ldrh	r2, [r2, #10]
 8011d60:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	6959      	ldr	r1, [r3, #20]
 8011d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d68:	b29c      	uxth	r4, r3
 8011d6a:	183b      	adds	r3, r7, r0
 8011d6c:	881a      	ldrh	r2, [r3, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	0023      	movs	r3, r4
 8011d72:	f000 fd07 	bl	8012784 <USB_WritePMA>
 8011d76:	e09a      	b.n	8011eae <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	785b      	ldrb	r3, [r3, #1]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d162      	bne.n	8011e46 <USB_EPStartXfer+0x8f6>
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	00db      	lsls	r3, r3, #3
 8011d86:	4a88      	ldr	r2, [pc, #544]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d88:	4694      	mov	ip, r2
 8011d8a:	4463      	add	r3, ip
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	00db      	lsls	r3, r3, #3
 8011d94:	4984      	ldr	r1, [pc, #528]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011d96:	468c      	mov	ip, r1
 8011d98:	4463      	add	r3, ip
 8011d9a:	0192      	lsls	r2, r2, #6
 8011d9c:	0992      	lsrs	r2, r2, #6
 8011d9e:	601a      	str	r2, [r3, #0]
 8011da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da2:	2b3e      	cmp	r3, #62	; 0x3e
 8011da4:	d91e      	bls.n	8011de4 <USB_EPStartXfer+0x894>
 8011da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011da8:	095b      	lsrs	r3, r3, #5
 8011daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dae:	221f      	movs	r2, #31
 8011db0:	4013      	ands	r3, r2
 8011db2:	d102      	bne.n	8011dba <USB_EPStartXfer+0x86a>
 8011db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011db6:	3b01      	subs	r3, #1
 8011db8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	781b      	ldrb	r3, [r3, #0]
 8011dbe:	00db      	lsls	r3, r3, #3
 8011dc0:	4a79      	ldr	r2, [pc, #484]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011dc2:	4694      	mov	ip, r2
 8011dc4:	4463      	add	r3, ip
 8011dc6:	681a      	ldr	r2, [r3, #0]
 8011dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dca:	069b      	lsls	r3, r3, #26
 8011dcc:	431a      	orrs	r2, r3
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	4974      	ldr	r1, [pc, #464]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011dd6:	468c      	mov	ip, r1
 8011dd8:	4463      	add	r3, ip
 8011dda:	2180      	movs	r1, #128	; 0x80
 8011ddc:	0609      	lsls	r1, r1, #24
 8011dde:	430a      	orrs	r2, r1
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	e055      	b.n	8011e90 <USB_EPStartXfer+0x940>
 8011de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d111      	bne.n	8011e0e <USB_EPStartXfer+0x8be>
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	00db      	lsls	r3, r3, #3
 8011df0:	4a6d      	ldr	r2, [pc, #436]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011df2:	4694      	mov	ip, r2
 8011df4:	4463      	add	r3, ip
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	00db      	lsls	r3, r3, #3
 8011dfe:	496a      	ldr	r1, [pc, #424]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e00:	468c      	mov	ip, r1
 8011e02:	4463      	add	r3, ip
 8011e04:	2180      	movs	r1, #128	; 0x80
 8011e06:	0609      	lsls	r1, r1, #24
 8011e08:	430a      	orrs	r2, r1
 8011e0a:	601a      	str	r2, [r3, #0]
 8011e0c:	e040      	b.n	8011e90 <USB_EPStartXfer+0x940>
 8011e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e10:	085b      	lsrs	r3, r3, #1
 8011e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e16:	2201      	movs	r2, #1
 8011e18:	4013      	ands	r3, r2
 8011e1a:	d002      	beq.n	8011e22 <USB_EPStartXfer+0x8d2>
 8011e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1e:	3301      	adds	r3, #1
 8011e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	4a5f      	ldr	r2, [pc, #380]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e2a:	4694      	mov	ip, r2
 8011e2c:	4463      	add	r3, ip
 8011e2e:	6819      	ldr	r1, [r3, #0]
 8011e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e32:	069a      	lsls	r2, r3, #26
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	485b      	ldr	r0, [pc, #364]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e3c:	4684      	mov	ip, r0
 8011e3e:	4463      	add	r3, ip
 8011e40:	430a      	orrs	r2, r1
 8011e42:	601a      	str	r2, [r3, #0]
 8011e44:	e024      	b.n	8011e90 <USB_EPStartXfer+0x940>
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	785b      	ldrb	r3, [r3, #1]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d120      	bne.n	8011e90 <USB_EPStartXfer+0x940>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	4a54      	ldr	r2, [pc, #336]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e56:	4694      	mov	ip, r2
 8011e58:	4463      	add	r3, ip
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	4951      	ldr	r1, [pc, #324]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e64:	468c      	mov	ip, r1
 8011e66:	4463      	add	r3, ip
 8011e68:	0412      	lsls	r2, r2, #16
 8011e6a:	0c12      	lsrs	r2, r2, #16
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	00db      	lsls	r3, r3, #3
 8011e74:	4a4c      	ldr	r2, [pc, #304]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e76:	4694      	mov	ip, r2
 8011e78:	4463      	add	r3, ip
 8011e7a:	6819      	ldr	r1, [r3, #0]
 8011e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7e:	041a      	lsls	r2, r3, #16
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	4848      	ldr	r0, [pc, #288]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011e88:	4684      	mov	ip, r0
 8011e8a:	4463      	add	r3, ip
 8011e8c:	430a      	orrs	r2, r1
 8011e8e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011e90:	201a      	movs	r0, #26
 8011e92:	183b      	adds	r3, r7, r0
 8011e94:	683a      	ldr	r2, [r7, #0]
 8011e96:	8912      	ldrh	r2, [r2, #8]
 8011e98:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	6959      	ldr	r1, [r3, #20]
 8011e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ea0:	b29c      	uxth	r4, r3
 8011ea2:	183b      	adds	r3, r7, r0
 8011ea4:	881a      	ldrh	r2, [r3, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	0023      	movs	r3, r4
 8011eaa:	f000 fc6b 	bl	8012784 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	18d3      	adds	r3, r2, r3
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4a3c      	ldr	r2, [pc, #240]	; (8011fac <USB_EPStartXfer+0xa5c>)
 8011ebc:	4013      	ands	r3, r2
 8011ebe:	60fb      	str	r3, [r7, #12]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2210      	movs	r2, #16
 8011ec4:	4053      	eors	r3, r2
 8011ec6:	60fb      	str	r3, [r7, #12]
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2220      	movs	r2, #32
 8011ecc:	4053      	eors	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	781b      	ldrb	r3, [r3, #0]
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	18d3      	adds	r3, r2, r3
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	4934      	ldr	r1, [pc, #208]	; (8011fb0 <USB_EPStartXfer+0xa60>)
 8011ede:	430a      	orrs	r2, r1
 8011ee0:	601a      	str	r2, [r3, #0]
 8011ee2:	e340      	b.n	8012566 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	7b1b      	ldrb	r3, [r3, #12]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d000      	beq.n	8011eee <USB_EPStartXfer+0x99e>
 8011eec:	e07e      	b.n	8011fec <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	699a      	ldr	r2, [r3, #24]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d909      	bls.n	8011f0e <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	691b      	ldr	r3, [r3, #16]
 8011efe:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	699a      	ldr	r2, [r3, #24]
 8011f04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f06:	1ad2      	subs	r2, r2, r3
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	619a      	str	r2, [r3, #24]
 8011f0c:	e005      	b.n	8011f1a <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	2200      	movs	r2, #0
 8011f18:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	00db      	lsls	r3, r3, #3
 8011f20:	4a21      	ldr	r2, [pc, #132]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f22:	4694      	mov	ip, r2
 8011f24:	4463      	add	r3, ip
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	00db      	lsls	r3, r3, #3
 8011f2e:	491e      	ldr	r1, [pc, #120]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f30:	468c      	mov	ip, r1
 8011f32:	4463      	add	r3, ip
 8011f34:	0192      	lsls	r2, r2, #6
 8011f36:	0992      	lsrs	r2, r2, #6
 8011f38:	605a      	str	r2, [r3, #4]
 8011f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f3c:	2b3e      	cmp	r3, #62	; 0x3e
 8011f3e:	d91e      	bls.n	8011f7e <USB_EPStartXfer+0xa2e>
 8011f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f42:	095b      	lsrs	r3, r3, #5
 8011f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f48:	221f      	movs	r2, #31
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	d102      	bne.n	8011f54 <USB_EPStartXfer+0xa04>
 8011f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f50:	3b01      	subs	r3, #1
 8011f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	00db      	lsls	r3, r3, #3
 8011f5a:	4a13      	ldr	r2, [pc, #76]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f5c:	4694      	mov	ip, r2
 8011f5e:	4463      	add	r3, ip
 8011f60:	685a      	ldr	r2, [r3, #4]
 8011f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f64:	069b      	lsls	r3, r3, #26
 8011f66:	431a      	orrs	r2, r3
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	00db      	lsls	r3, r3, #3
 8011f6e:	490e      	ldr	r1, [pc, #56]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f70:	468c      	mov	ip, r1
 8011f72:	4463      	add	r3, ip
 8011f74:	2180      	movs	r1, #128	; 0x80
 8011f76:	0609      	lsls	r1, r1, #24
 8011f78:	430a      	orrs	r2, r1
 8011f7a:	605a      	str	r2, [r3, #4]
 8011f7c:	e2d7      	b.n	801252e <USB_EPStartXfer+0xfde>
 8011f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d117      	bne.n	8011fb4 <USB_EPStartXfer+0xa64>
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	00db      	lsls	r3, r3, #3
 8011f8a:	4a07      	ldr	r2, [pc, #28]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f8c:	4694      	mov	ip, r2
 8011f8e:	4463      	add	r3, ip
 8011f90:	685a      	ldr	r2, [r3, #4]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	781b      	ldrb	r3, [r3, #0]
 8011f96:	00db      	lsls	r3, r3, #3
 8011f98:	4903      	ldr	r1, [pc, #12]	; (8011fa8 <USB_EPStartXfer+0xa58>)
 8011f9a:	468c      	mov	ip, r1
 8011f9c:	4463      	add	r3, ip
 8011f9e:	2180      	movs	r1, #128	; 0x80
 8011fa0:	0609      	lsls	r1, r1, #24
 8011fa2:	430a      	orrs	r2, r1
 8011fa4:	605a      	str	r2, [r3, #4]
 8011fa6:	e2c2      	b.n	801252e <USB_EPStartXfer+0xfde>
 8011fa8:	40009800 	.word	0x40009800
 8011fac:	07ff8fbf 	.word	0x07ff8fbf
 8011fb0:	00008080 	.word	0x00008080
 8011fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fb6:	085b      	lsrs	r3, r3, #1
 8011fb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	4013      	ands	r3, r2
 8011fc0:	d002      	beq.n	8011fc8 <USB_EPStartXfer+0xa78>
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	00db      	lsls	r3, r3, #3
 8011fce:	4ac4      	ldr	r2, [pc, #784]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8011fd0:	4694      	mov	ip, r2
 8011fd2:	4463      	add	r3, ip
 8011fd4:	6859      	ldr	r1, [r3, #4]
 8011fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd8:	069a      	lsls	r2, r3, #26
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	48bf      	ldr	r0, [pc, #764]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8011fe2:	4684      	mov	ip, r0
 8011fe4:	4463      	add	r3, ip
 8011fe6:	430a      	orrs	r2, r1
 8011fe8:	605a      	str	r2, [r3, #4]
 8011fea:	e2a0      	b.n	801252e <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	78db      	ldrb	r3, [r3, #3]
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d000      	beq.n	8011ff6 <USB_EPStartXfer+0xaa6>
 8011ff4:	e15f      	b.n	80122b6 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	785b      	ldrb	r3, [r3, #1]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d168      	bne.n	80120d0 <USB_EPStartXfer+0xb80>
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	00db      	lsls	r3, r3, #3
 8012004:	4ab6      	ldr	r2, [pc, #728]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012006:	4694      	mov	ip, r2
 8012008:	4463      	add	r3, ip
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	49b3      	ldr	r1, [pc, #716]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012014:	468c      	mov	ip, r1
 8012016:	4463      	add	r3, ip
 8012018:	0192      	lsls	r2, r2, #6
 801201a:	0992      	lsrs	r2, r2, #6
 801201c:	601a      	str	r2, [r3, #0]
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	2b3e      	cmp	r3, #62	; 0x3e
 8012024:	d920      	bls.n	8012068 <USB_EPStartXfer+0xb18>
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	691b      	ldr	r3, [r3, #16]
 801202a:	095b      	lsrs	r3, r3, #5
 801202c:	637b      	str	r3, [r7, #52]	; 0x34
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	691b      	ldr	r3, [r3, #16]
 8012032:	221f      	movs	r2, #31
 8012034:	4013      	ands	r3, r2
 8012036:	d102      	bne.n	801203e <USB_EPStartXfer+0xaee>
 8012038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801203a:	3b01      	subs	r3, #1
 801203c:	637b      	str	r3, [r7, #52]	; 0x34
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	4aa6      	ldr	r2, [pc, #664]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012046:	4694      	mov	ip, r2
 8012048:	4463      	add	r3, ip
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204e:	069b      	lsls	r3, r3, #26
 8012050:	431a      	orrs	r2, r3
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	00db      	lsls	r3, r3, #3
 8012058:	49a1      	ldr	r1, [pc, #644]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801205a:	468c      	mov	ip, r1
 801205c:	4463      	add	r3, ip
 801205e:	2180      	movs	r1, #128	; 0x80
 8012060:	0609      	lsls	r1, r1, #24
 8012062:	430a      	orrs	r2, r1
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	e059      	b.n	801211c <USB_EPStartXfer+0xbcc>
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	691b      	ldr	r3, [r3, #16]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d111      	bne.n	8012094 <USB_EPStartXfer+0xb44>
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	00db      	lsls	r3, r3, #3
 8012076:	4a9a      	ldr	r2, [pc, #616]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012078:	4694      	mov	ip, r2
 801207a:	4463      	add	r3, ip
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	00db      	lsls	r3, r3, #3
 8012084:	4996      	ldr	r1, [pc, #600]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012086:	468c      	mov	ip, r1
 8012088:	4463      	add	r3, ip
 801208a:	2180      	movs	r1, #128	; 0x80
 801208c:	0609      	lsls	r1, r1, #24
 801208e:	430a      	orrs	r2, r1
 8012090:	601a      	str	r2, [r3, #0]
 8012092:	e043      	b.n	801211c <USB_EPStartXfer+0xbcc>
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	085b      	lsrs	r3, r3, #1
 801209a:	637b      	str	r3, [r7, #52]	; 0x34
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	691b      	ldr	r3, [r3, #16]
 80120a0:	2201      	movs	r2, #1
 80120a2:	4013      	ands	r3, r2
 80120a4:	d002      	beq.n	80120ac <USB_EPStartXfer+0xb5c>
 80120a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a8:	3301      	adds	r3, #1
 80120aa:	637b      	str	r3, [r7, #52]	; 0x34
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	4a8b      	ldr	r2, [pc, #556]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80120b4:	4694      	mov	ip, r2
 80120b6:	4463      	add	r3, ip
 80120b8:	6819      	ldr	r1, [r3, #0]
 80120ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120bc:	069a      	lsls	r2, r3, #26
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	4886      	ldr	r0, [pc, #536]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80120c6:	4684      	mov	ip, r0
 80120c8:	4463      	add	r3, ip
 80120ca:	430a      	orrs	r2, r1
 80120cc:	601a      	str	r2, [r3, #0]
 80120ce:	e025      	b.n	801211c <USB_EPStartXfer+0xbcc>
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	785b      	ldrb	r3, [r3, #1]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d121      	bne.n	801211c <USB_EPStartXfer+0xbcc>
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	00db      	lsls	r3, r3, #3
 80120de:	4a80      	ldr	r2, [pc, #512]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80120e0:	4694      	mov	ip, r2
 80120e2:	4463      	add	r3, ip
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	497c      	ldr	r1, [pc, #496]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80120ee:	468c      	mov	ip, r1
 80120f0:	4463      	add	r3, ip
 80120f2:	0412      	lsls	r2, r2, #16
 80120f4:	0c12      	lsrs	r2, r2, #16
 80120f6:	601a      	str	r2, [r3, #0]
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	00db      	lsls	r3, r3, #3
 80120fe:	4a78      	ldr	r2, [pc, #480]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012100:	4694      	mov	ip, r2
 8012102:	4463      	add	r3, ip
 8012104:	6819      	ldr	r1, [r3, #0]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	691b      	ldr	r3, [r3, #16]
 801210a:	041a      	lsls	r2, r3, #16
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	4873      	ldr	r0, [pc, #460]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012114:	4684      	mov	ip, r0
 8012116:	4463      	add	r3, ip
 8012118:	430a      	orrs	r2, r1
 801211a:	601a      	str	r2, [r3, #0]
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	785b      	ldrb	r3, [r3, #1]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d168      	bne.n	80121f6 <USB_EPStartXfer+0xca6>
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	00db      	lsls	r3, r3, #3
 801212a:	4a6d      	ldr	r2, [pc, #436]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801212c:	4694      	mov	ip, r2
 801212e:	4463      	add	r3, ip
 8012130:	685a      	ldr	r2, [r3, #4]
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	4969      	ldr	r1, [pc, #420]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801213a:	468c      	mov	ip, r1
 801213c:	4463      	add	r3, ip
 801213e:	0192      	lsls	r2, r2, #6
 8012140:	0992      	lsrs	r2, r2, #6
 8012142:	605a      	str	r2, [r3, #4]
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	691b      	ldr	r3, [r3, #16]
 8012148:	2b3e      	cmp	r3, #62	; 0x3e
 801214a:	d920      	bls.n	801218e <USB_EPStartXfer+0xc3e>
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	095b      	lsrs	r3, r3, #5
 8012152:	633b      	str	r3, [r7, #48]	; 0x30
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	221f      	movs	r2, #31
 801215a:	4013      	ands	r3, r2
 801215c:	d102      	bne.n	8012164 <USB_EPStartXfer+0xc14>
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	3b01      	subs	r3, #1
 8012162:	633b      	str	r3, [r7, #48]	; 0x30
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	00db      	lsls	r3, r3, #3
 801216a:	4a5d      	ldr	r2, [pc, #372]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801216c:	4694      	mov	ip, r2
 801216e:	4463      	add	r3, ip
 8012170:	685a      	ldr	r2, [r3, #4]
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	069b      	lsls	r3, r3, #26
 8012176:	431a      	orrs	r2, r3
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	4958      	ldr	r1, [pc, #352]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012180:	468c      	mov	ip, r1
 8012182:	4463      	add	r3, ip
 8012184:	2180      	movs	r1, #128	; 0x80
 8012186:	0609      	lsls	r1, r1, #24
 8012188:	430a      	orrs	r2, r1
 801218a:	605a      	str	r2, [r3, #4]
 801218c:	e059      	b.n	8012242 <USB_EPStartXfer+0xcf2>
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	691b      	ldr	r3, [r3, #16]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d111      	bne.n	80121ba <USB_EPStartXfer+0xc6a>
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	00db      	lsls	r3, r3, #3
 801219c:	4a50      	ldr	r2, [pc, #320]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801219e:	4694      	mov	ip, r2
 80121a0:	4463      	add	r3, ip
 80121a2:	685a      	ldr	r2, [r3, #4]
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	00db      	lsls	r3, r3, #3
 80121aa:	494d      	ldr	r1, [pc, #308]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80121ac:	468c      	mov	ip, r1
 80121ae:	4463      	add	r3, ip
 80121b0:	2180      	movs	r1, #128	; 0x80
 80121b2:	0609      	lsls	r1, r1, #24
 80121b4:	430a      	orrs	r2, r1
 80121b6:	605a      	str	r2, [r3, #4]
 80121b8:	e043      	b.n	8012242 <USB_EPStartXfer+0xcf2>
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	691b      	ldr	r3, [r3, #16]
 80121be:	085b      	lsrs	r3, r3, #1
 80121c0:	633b      	str	r3, [r7, #48]	; 0x30
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	691b      	ldr	r3, [r3, #16]
 80121c6:	2201      	movs	r2, #1
 80121c8:	4013      	ands	r3, r2
 80121ca:	d002      	beq.n	80121d2 <USB_EPStartXfer+0xc82>
 80121cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ce:	3301      	adds	r3, #1
 80121d0:	633b      	str	r3, [r7, #48]	; 0x30
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	4a41      	ldr	r2, [pc, #260]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80121da:	4694      	mov	ip, r2
 80121dc:	4463      	add	r3, ip
 80121de:	6859      	ldr	r1, [r3, #4]
 80121e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121e2:	069a      	lsls	r2, r3, #26
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	00db      	lsls	r3, r3, #3
 80121ea:	483d      	ldr	r0, [pc, #244]	; (80122e0 <USB_EPStartXfer+0xd90>)
 80121ec:	4684      	mov	ip, r0
 80121ee:	4463      	add	r3, ip
 80121f0:	430a      	orrs	r2, r1
 80121f2:	605a      	str	r2, [r3, #4]
 80121f4:	e025      	b.n	8012242 <USB_EPStartXfer+0xcf2>
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	785b      	ldrb	r3, [r3, #1]
 80121fa:	2b01      	cmp	r3, #1
 80121fc:	d121      	bne.n	8012242 <USB_EPStartXfer+0xcf2>
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	4a36      	ldr	r2, [pc, #216]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012206:	4694      	mov	ip, r2
 8012208:	4463      	add	r3, ip
 801220a:	685a      	ldr	r2, [r3, #4]
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	781b      	ldrb	r3, [r3, #0]
 8012210:	00db      	lsls	r3, r3, #3
 8012212:	4933      	ldr	r1, [pc, #204]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012214:	468c      	mov	ip, r1
 8012216:	4463      	add	r3, ip
 8012218:	0412      	lsls	r2, r2, #16
 801221a:	0c12      	lsrs	r2, r2, #16
 801221c:	605a      	str	r2, [r3, #4]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	00db      	lsls	r3, r3, #3
 8012224:	4a2e      	ldr	r2, [pc, #184]	; (80122e0 <USB_EPStartXfer+0xd90>)
 8012226:	4694      	mov	ip, r2
 8012228:	4463      	add	r3, ip
 801222a:	6859      	ldr	r1, [r3, #4]
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	691b      	ldr	r3, [r3, #16]
 8012230:	041a      	lsls	r2, r3, #16
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	00db      	lsls	r3, r3, #3
 8012238:	4829      	ldr	r0, [pc, #164]	; (80122e0 <USB_EPStartXfer+0xd90>)
 801223a:	4684      	mov	ip, r0
 801223c:	4463      	add	r3, ip
 801223e:	430a      	orrs	r2, r1
 8012240:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	69db      	ldr	r3, [r3, #28]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d100      	bne.n	801224c <USB_EPStartXfer+0xcfc>
 801224a:	e170      	b.n	801252e <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	18d3      	adds	r3, r2, r3
 8012256:	681a      	ldr	r2, [r3, #0]
 8012258:	2126      	movs	r1, #38	; 0x26
 801225a:	187b      	adds	r3, r7, r1
 801225c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801225e:	187b      	adds	r3, r7, r1
 8012260:	881a      	ldrh	r2, [r3, #0]
 8012262:	2380      	movs	r3, #128	; 0x80
 8012264:	01db      	lsls	r3, r3, #7
 8012266:	4013      	ands	r3, r2
 8012268:	d004      	beq.n	8012274 <USB_EPStartXfer+0xd24>
 801226a:	187b      	adds	r3, r7, r1
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	2240      	movs	r2, #64	; 0x40
 8012270:	4013      	ands	r3, r2
 8012272:	d10d      	bne.n	8012290 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012274:	2126      	movs	r1, #38	; 0x26
 8012276:	187b      	adds	r3, r7, r1
 8012278:	881a      	ldrh	r2, [r3, #0]
 801227a:	2380      	movs	r3, #128	; 0x80
 801227c:	01db      	lsls	r3, r3, #7
 801227e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012280:	d000      	beq.n	8012284 <USB_EPStartXfer+0xd34>
 8012282:	e154      	b.n	801252e <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012284:	187b      	adds	r3, r7, r1
 8012286:	881b      	ldrh	r3, [r3, #0]
 8012288:	2240      	movs	r2, #64	; 0x40
 801228a:	4013      	ands	r3, r2
 801228c:	d000      	beq.n	8012290 <USB_EPStartXfer+0xd40>
 801228e:	e14e      	b.n	801252e <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	009b      	lsls	r3, r3, #2
 8012298:	18d3      	adds	r3, r2, r3
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4a11      	ldr	r2, [pc, #68]	; (80122e4 <USB_EPStartXfer+0xd94>)
 801229e:	4013      	ands	r3, r2
 80122a0:	623b      	str	r3, [r7, #32]
 80122a2:	687a      	ldr	r2, [r7, #4]
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	009b      	lsls	r3, r3, #2
 80122aa:	18d3      	adds	r3, r2, r3
 80122ac:	6a3a      	ldr	r2, [r7, #32]
 80122ae:	490e      	ldr	r1, [pc, #56]	; (80122e8 <USB_EPStartXfer+0xd98>)
 80122b0:	430a      	orrs	r2, r1
 80122b2:	601a      	str	r2, [r3, #0]
 80122b4:	e13b      	b.n	801252e <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	78db      	ldrb	r3, [r3, #3]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d000      	beq.n	80122c0 <USB_EPStartXfer+0xd70>
 80122be:	e134      	b.n	801252a <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	699a      	ldr	r2, [r3, #24]
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	691b      	ldr	r3, [r3, #16]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d90f      	bls.n	80122ec <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	691b      	ldr	r3, [r3, #16]
 80122d0:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	699a      	ldr	r2, [r3, #24]
 80122d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122d8:	1ad2      	subs	r2, r2, r3
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	619a      	str	r2, [r3, #24]
 80122de:	e00b      	b.n	80122f8 <USB_EPStartXfer+0xda8>
 80122e0:	40009800 	.word	0x40009800
 80122e4:	07ff8f8f 	.word	0x07ff8f8f
 80122e8:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	2200      	movs	r2, #0
 80122f6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	785b      	ldrb	r3, [r3, #1]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d162      	bne.n	80123c6 <USB_EPStartXfer+0xe76>
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	00db      	lsls	r3, r3, #3
 8012306:	4a9a      	ldr	r2, [pc, #616]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012308:	4694      	mov	ip, r2
 801230a:	4463      	add	r3, ip
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	4996      	ldr	r1, [pc, #600]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012316:	468c      	mov	ip, r1
 8012318:	4463      	add	r3, ip
 801231a:	0192      	lsls	r2, r2, #6
 801231c:	0992      	lsrs	r2, r2, #6
 801231e:	601a      	str	r2, [r3, #0]
 8012320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012322:	2b3e      	cmp	r3, #62	; 0x3e
 8012324:	d91e      	bls.n	8012364 <USB_EPStartXfer+0xe14>
 8012326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012328:	095b      	lsrs	r3, r3, #5
 801232a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801232c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801232e:	221f      	movs	r2, #31
 8012330:	4013      	ands	r3, r2
 8012332:	d102      	bne.n	801233a <USB_EPStartXfer+0xdea>
 8012334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012336:	3b01      	subs	r3, #1
 8012338:	62fb      	str	r3, [r7, #44]	; 0x2c
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	781b      	ldrb	r3, [r3, #0]
 801233e:	00db      	lsls	r3, r3, #3
 8012340:	4a8b      	ldr	r2, [pc, #556]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012342:	4694      	mov	ip, r2
 8012344:	4463      	add	r3, ip
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234a:	069b      	lsls	r3, r3, #26
 801234c:	431a      	orrs	r2, r3
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	00db      	lsls	r3, r3, #3
 8012354:	4986      	ldr	r1, [pc, #536]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012356:	468c      	mov	ip, r1
 8012358:	4463      	add	r3, ip
 801235a:	2180      	movs	r1, #128	; 0x80
 801235c:	0609      	lsls	r1, r1, #24
 801235e:	430a      	orrs	r2, r1
 8012360:	601a      	str	r2, [r3, #0]
 8012362:	e055      	b.n	8012410 <USB_EPStartXfer+0xec0>
 8012364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012366:	2b00      	cmp	r3, #0
 8012368:	d111      	bne.n	801238e <USB_EPStartXfer+0xe3e>
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	00db      	lsls	r3, r3, #3
 8012370:	4a7f      	ldr	r2, [pc, #508]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012372:	4694      	mov	ip, r2
 8012374:	4463      	add	r3, ip
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	00db      	lsls	r3, r3, #3
 801237e:	497c      	ldr	r1, [pc, #496]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012380:	468c      	mov	ip, r1
 8012382:	4463      	add	r3, ip
 8012384:	2180      	movs	r1, #128	; 0x80
 8012386:	0609      	lsls	r1, r1, #24
 8012388:	430a      	orrs	r2, r1
 801238a:	601a      	str	r2, [r3, #0]
 801238c:	e040      	b.n	8012410 <USB_EPStartXfer+0xec0>
 801238e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012390:	085b      	lsrs	r3, r3, #1
 8012392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012396:	2201      	movs	r2, #1
 8012398:	4013      	ands	r3, r2
 801239a:	d002      	beq.n	80123a2 <USB_EPStartXfer+0xe52>
 801239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239e:	3301      	adds	r3, #1
 80123a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	00db      	lsls	r3, r3, #3
 80123a8:	4a71      	ldr	r2, [pc, #452]	; (8012570 <USB_EPStartXfer+0x1020>)
 80123aa:	4694      	mov	ip, r2
 80123ac:	4463      	add	r3, ip
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b2:	069a      	lsls	r2, r3, #26
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	486d      	ldr	r0, [pc, #436]	; (8012570 <USB_EPStartXfer+0x1020>)
 80123bc:	4684      	mov	ip, r0
 80123be:	4463      	add	r3, ip
 80123c0:	430a      	orrs	r2, r1
 80123c2:	601a      	str	r2, [r3, #0]
 80123c4:	e024      	b.n	8012410 <USB_EPStartXfer+0xec0>
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	785b      	ldrb	r3, [r3, #1]
 80123ca:	2b01      	cmp	r3, #1
 80123cc:	d120      	bne.n	8012410 <USB_EPStartXfer+0xec0>
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	4a66      	ldr	r2, [pc, #408]	; (8012570 <USB_EPStartXfer+0x1020>)
 80123d6:	4694      	mov	ip, r2
 80123d8:	4463      	add	r3, ip
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	00db      	lsls	r3, r3, #3
 80123e2:	4963      	ldr	r1, [pc, #396]	; (8012570 <USB_EPStartXfer+0x1020>)
 80123e4:	468c      	mov	ip, r1
 80123e6:	4463      	add	r3, ip
 80123e8:	0412      	lsls	r2, r2, #16
 80123ea:	0c12      	lsrs	r2, r2, #16
 80123ec:	601a      	str	r2, [r3, #0]
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	00db      	lsls	r3, r3, #3
 80123f4:	4a5e      	ldr	r2, [pc, #376]	; (8012570 <USB_EPStartXfer+0x1020>)
 80123f6:	4694      	mov	ip, r2
 80123f8:	4463      	add	r3, ip
 80123fa:	6819      	ldr	r1, [r3, #0]
 80123fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123fe:	041a      	lsls	r2, r3, #16
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	485a      	ldr	r0, [pc, #360]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012408:	4684      	mov	ip, r0
 801240a:	4463      	add	r3, ip
 801240c:	430a      	orrs	r2, r1
 801240e:	601a      	str	r2, [r3, #0]
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	785b      	ldrb	r3, [r3, #1]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d162      	bne.n	80124de <USB_EPStartXfer+0xf8e>
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	00db      	lsls	r3, r3, #3
 801241e:	4a54      	ldr	r2, [pc, #336]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012420:	4694      	mov	ip, r2
 8012422:	4463      	add	r3, ip
 8012424:	685a      	ldr	r2, [r3, #4]
 8012426:	683b      	ldr	r3, [r7, #0]
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	4950      	ldr	r1, [pc, #320]	; (8012570 <USB_EPStartXfer+0x1020>)
 801242e:	468c      	mov	ip, r1
 8012430:	4463      	add	r3, ip
 8012432:	0192      	lsls	r2, r2, #6
 8012434:	0992      	lsrs	r2, r2, #6
 8012436:	605a      	str	r2, [r3, #4]
 8012438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801243a:	2b3e      	cmp	r3, #62	; 0x3e
 801243c:	d91e      	bls.n	801247c <USB_EPStartXfer+0xf2c>
 801243e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012440:	095b      	lsrs	r3, r3, #5
 8012442:	62bb      	str	r3, [r7, #40]	; 0x28
 8012444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012446:	221f      	movs	r2, #31
 8012448:	4013      	ands	r3, r2
 801244a:	d102      	bne.n	8012452 <USB_EPStartXfer+0xf02>
 801244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244e:	3b01      	subs	r3, #1
 8012450:	62bb      	str	r3, [r7, #40]	; 0x28
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	00db      	lsls	r3, r3, #3
 8012458:	4a45      	ldr	r2, [pc, #276]	; (8012570 <USB_EPStartXfer+0x1020>)
 801245a:	4694      	mov	ip, r2
 801245c:	4463      	add	r3, ip
 801245e:	685a      	ldr	r2, [r3, #4]
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	069b      	lsls	r3, r3, #26
 8012464:	431a      	orrs	r2, r3
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	00db      	lsls	r3, r3, #3
 801246c:	4940      	ldr	r1, [pc, #256]	; (8012570 <USB_EPStartXfer+0x1020>)
 801246e:	468c      	mov	ip, r1
 8012470:	4463      	add	r3, ip
 8012472:	2180      	movs	r1, #128	; 0x80
 8012474:	0609      	lsls	r1, r1, #24
 8012476:	430a      	orrs	r2, r1
 8012478:	605a      	str	r2, [r3, #4]
 801247a:	e058      	b.n	801252e <USB_EPStartXfer+0xfde>
 801247c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801247e:	2b00      	cmp	r3, #0
 8012480:	d111      	bne.n	80124a6 <USB_EPStartXfer+0xf56>
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	00db      	lsls	r3, r3, #3
 8012488:	4a39      	ldr	r2, [pc, #228]	; (8012570 <USB_EPStartXfer+0x1020>)
 801248a:	4694      	mov	ip, r2
 801248c:	4463      	add	r3, ip
 801248e:	685a      	ldr	r2, [r3, #4]
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	4936      	ldr	r1, [pc, #216]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012498:	468c      	mov	ip, r1
 801249a:	4463      	add	r3, ip
 801249c:	2180      	movs	r1, #128	; 0x80
 801249e:	0609      	lsls	r1, r1, #24
 80124a0:	430a      	orrs	r2, r1
 80124a2:	605a      	str	r2, [r3, #4]
 80124a4:	e043      	b.n	801252e <USB_EPStartXfer+0xfde>
 80124a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124a8:	085b      	lsrs	r3, r3, #1
 80124aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80124ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124ae:	2201      	movs	r2, #1
 80124b0:	4013      	ands	r3, r2
 80124b2:	d002      	beq.n	80124ba <USB_EPStartXfer+0xf6a>
 80124b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b6:	3301      	adds	r3, #1
 80124b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	4a2b      	ldr	r2, [pc, #172]	; (8012570 <USB_EPStartXfer+0x1020>)
 80124c2:	4694      	mov	ip, r2
 80124c4:	4463      	add	r3, ip
 80124c6:	6859      	ldr	r1, [r3, #4]
 80124c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ca:	069a      	lsls	r2, r3, #26
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	00db      	lsls	r3, r3, #3
 80124d2:	4827      	ldr	r0, [pc, #156]	; (8012570 <USB_EPStartXfer+0x1020>)
 80124d4:	4684      	mov	ip, r0
 80124d6:	4463      	add	r3, ip
 80124d8:	430a      	orrs	r2, r1
 80124da:	605a      	str	r2, [r3, #4]
 80124dc:	e027      	b.n	801252e <USB_EPStartXfer+0xfde>
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	785b      	ldrb	r3, [r3, #1]
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d123      	bne.n	801252e <USB_EPStartXfer+0xfde>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	00db      	lsls	r3, r3, #3
 80124ec:	4a20      	ldr	r2, [pc, #128]	; (8012570 <USB_EPStartXfer+0x1020>)
 80124ee:	4694      	mov	ip, r2
 80124f0:	4463      	add	r3, ip
 80124f2:	685a      	ldr	r2, [r3, #4]
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	00db      	lsls	r3, r3, #3
 80124fa:	491d      	ldr	r1, [pc, #116]	; (8012570 <USB_EPStartXfer+0x1020>)
 80124fc:	468c      	mov	ip, r1
 80124fe:	4463      	add	r3, ip
 8012500:	0412      	lsls	r2, r2, #16
 8012502:	0c12      	lsrs	r2, r2, #16
 8012504:	605a      	str	r2, [r3, #4]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	4a18      	ldr	r2, [pc, #96]	; (8012570 <USB_EPStartXfer+0x1020>)
 801250e:	4694      	mov	ip, r2
 8012510:	4463      	add	r3, ip
 8012512:	6859      	ldr	r1, [r3, #4]
 8012514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012516:	041a      	lsls	r2, r3, #16
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	00db      	lsls	r3, r3, #3
 801251e:	4814      	ldr	r0, [pc, #80]	; (8012570 <USB_EPStartXfer+0x1020>)
 8012520:	4684      	mov	ip, r0
 8012522:	4463      	add	r3, ip
 8012524:	430a      	orrs	r2, r1
 8012526:	605a      	str	r2, [r3, #4]
 8012528:	e001      	b.n	801252e <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 801252a:	2301      	movs	r3, #1
 801252c:	e01c      	b.n	8012568 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	18d3      	adds	r3, r2, r3
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	4a0e      	ldr	r2, [pc, #56]	; (8012574 <USB_EPStartXfer+0x1024>)
 801253c:	4013      	ands	r3, r2
 801253e:	61fb      	str	r3, [r7, #28]
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	2280      	movs	r2, #128	; 0x80
 8012544:	0152      	lsls	r2, r2, #5
 8012546:	4053      	eors	r3, r2
 8012548:	61fb      	str	r3, [r7, #28]
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	2280      	movs	r2, #128	; 0x80
 801254e:	0192      	lsls	r2, r2, #6
 8012550:	4053      	eors	r3, r2
 8012552:	61fb      	str	r3, [r7, #28]
 8012554:	687a      	ldr	r2, [r7, #4]
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	009b      	lsls	r3, r3, #2
 801255c:	18d3      	adds	r3, r2, r3
 801255e:	69fa      	ldr	r2, [r7, #28]
 8012560:	4905      	ldr	r1, [pc, #20]	; (8012578 <USB_EPStartXfer+0x1028>)
 8012562:	430a      	orrs	r2, r1
 8012564:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	0018      	movs	r0, r3
 801256a:	46bd      	mov	sp, r7
 801256c:	b017      	add	sp, #92	; 0x5c
 801256e:	bd90      	pop	{r4, r7, pc}
 8012570:	40009800 	.word	0x40009800
 8012574:	07ffbf8f 	.word	0x07ffbf8f
 8012578:	00008080 	.word	0x00008080

0801257c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	785b      	ldrb	r3, [r3, #1]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d016      	beq.n	80125bc <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	18d3      	adds	r3, r2, r3
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a16      	ldr	r2, [pc, #88]	; (80125f4 <USB_EPSetStall+0x78>)
 801259c:	4013      	ands	r3, r2
 801259e:	60bb      	str	r3, [r7, #8]
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2210      	movs	r2, #16
 80125a4:	4053      	eors	r3, r2
 80125a6:	60bb      	str	r3, [r7, #8]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	18d3      	adds	r3, r2, r3
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	4910      	ldr	r1, [pc, #64]	; (80125f8 <USB_EPSetStall+0x7c>)
 80125b6:	430a      	orrs	r2, r1
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	e016      	b.n	80125ea <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80125bc:	687a      	ldr	r2, [r7, #4]
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	009b      	lsls	r3, r3, #2
 80125c4:	18d3      	adds	r3, r2, r3
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4a0c      	ldr	r2, [pc, #48]	; (80125fc <USB_EPSetStall+0x80>)
 80125ca:	4013      	ands	r3, r2
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2280      	movs	r2, #128	; 0x80
 80125d2:	0152      	lsls	r2, r2, #5
 80125d4:	4053      	eors	r3, r2
 80125d6:	60fb      	str	r3, [r7, #12]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	009b      	lsls	r3, r3, #2
 80125e0:	18d3      	adds	r3, r2, r3
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	4904      	ldr	r1, [pc, #16]	; (80125f8 <USB_EPSetStall+0x7c>)
 80125e6:	430a      	orrs	r2, r1
 80125e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80125ea:	2300      	movs	r3, #0
}
 80125ec:	0018      	movs	r0, r3
 80125ee:	46bd      	mov	sp, r7
 80125f0:	b004      	add	sp, #16
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	07ff8fbf 	.word	0x07ff8fbf
 80125f8:	00008080 	.word	0x00008080
 80125fc:	07ffbf8f 	.word	0x07ffbf8f

08012600 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b088      	sub	sp, #32
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	7b1b      	ldrb	r3, [r3, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d000      	beq.n	8012614 <USB_EPClearStall+0x14>
 8012612:	e075      	b.n	8012700 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	785b      	ldrb	r3, [r3, #1]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d037      	beq.n	801268c <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	18d3      	adds	r3, r2, r3
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	613b      	str	r3, [r7, #16]
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	2240      	movs	r2, #64	; 0x40
 801262e:	4013      	ands	r3, r2
 8012630:	d011      	beq.n	8012656 <USB_EPClearStall+0x56>
 8012632:	687a      	ldr	r2, [r7, #4]
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	18d3      	adds	r3, r2, r3
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4a33      	ldr	r2, [pc, #204]	; (801270c <USB_EPClearStall+0x10c>)
 8012640:	4013      	ands	r3, r2
 8012642:	60fb      	str	r3, [r7, #12]
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	18d3      	adds	r3, r2, r3
 801264e:	68fa      	ldr	r2, [r7, #12]
 8012650:	492f      	ldr	r1, [pc, #188]	; (8012710 <USB_EPClearStall+0x110>)
 8012652:	430a      	orrs	r2, r1
 8012654:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	78db      	ldrb	r3, [r3, #3]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d050      	beq.n	8012700 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	009b      	lsls	r3, r3, #2
 8012666:	18d3      	adds	r3, r2, r3
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4a2a      	ldr	r2, [pc, #168]	; (8012714 <USB_EPClearStall+0x114>)
 801266c:	4013      	ands	r3, r2
 801266e:	60bb      	str	r3, [r7, #8]
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2220      	movs	r2, #32
 8012674:	4053      	eors	r3, r2
 8012676:	60bb      	str	r3, [r7, #8]
 8012678:	687a      	ldr	r2, [r7, #4]
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	18d3      	adds	r3, r2, r3
 8012682:	68ba      	ldr	r2, [r7, #8]
 8012684:	4924      	ldr	r1, [pc, #144]	; (8012718 <USB_EPClearStall+0x118>)
 8012686:	430a      	orrs	r2, r1
 8012688:	601a      	str	r2, [r3, #0]
 801268a:	e039      	b.n	8012700 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	18d3      	adds	r3, r2, r3
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	61fb      	str	r3, [r7, #28]
 801269a:	69fa      	ldr	r2, [r7, #28]
 801269c:	2380      	movs	r3, #128	; 0x80
 801269e:	01db      	lsls	r3, r3, #7
 80126a0:	4013      	ands	r3, r2
 80126a2:	d011      	beq.n	80126c8 <USB_EPClearStall+0xc8>
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	18d3      	adds	r3, r2, r3
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4a16      	ldr	r2, [pc, #88]	; (801270c <USB_EPClearStall+0x10c>)
 80126b2:	4013      	ands	r3, r2
 80126b4:	61bb      	str	r3, [r7, #24]
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	18d3      	adds	r3, r2, r3
 80126c0:	69ba      	ldr	r2, [r7, #24]
 80126c2:	4916      	ldr	r1, [pc, #88]	; (801271c <USB_EPClearStall+0x11c>)
 80126c4:	430a      	orrs	r2, r1
 80126c6:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	18d3      	adds	r3, r2, r3
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4a12      	ldr	r2, [pc, #72]	; (8012720 <USB_EPClearStall+0x120>)
 80126d6:	4013      	ands	r3, r2
 80126d8:	617b      	str	r3, [r7, #20]
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	2280      	movs	r2, #128	; 0x80
 80126de:	0152      	lsls	r2, r2, #5
 80126e0:	4053      	eors	r3, r2
 80126e2:	617b      	str	r3, [r7, #20]
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	2280      	movs	r2, #128	; 0x80
 80126e8:	0192      	lsls	r2, r2, #6
 80126ea:	4053      	eors	r3, r2
 80126ec:	617b      	str	r3, [r7, #20]
 80126ee:	687a      	ldr	r2, [r7, #4]
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	18d3      	adds	r3, r2, r3
 80126f8:	697a      	ldr	r2, [r7, #20]
 80126fa:	4907      	ldr	r1, [pc, #28]	; (8012718 <USB_EPClearStall+0x118>)
 80126fc:	430a      	orrs	r2, r1
 80126fe:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8012700:	2300      	movs	r3, #0
}
 8012702:	0018      	movs	r0, r3
 8012704:	46bd      	mov	sp, r7
 8012706:	b008      	add	sp, #32
 8012708:	bd80      	pop	{r7, pc}
 801270a:	46c0      	nop			; (mov r8, r8)
 801270c:	07ff8f8f 	.word	0x07ff8f8f
 8012710:	000080c0 	.word	0x000080c0
 8012714:	07ff8fbf 	.word	0x07ff8fbf
 8012718:	00008080 	.word	0x00008080
 801271c:	0000c080 	.word	0x0000c080
 8012720:	07ffbf8f 	.word	0x07ffbf8f

08012724 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	000a      	movs	r2, r1
 801272e:	1cfb      	adds	r3, r7, #3
 8012730:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8012732:	1cfb      	adds	r3, r7, #3
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d102      	bne.n	8012740 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2280      	movs	r2, #128	; 0x80
 801273e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8012740:	2300      	movs	r3, #0
}
 8012742:	0018      	movs	r0, r3
 8012744:	46bd      	mov	sp, r7
 8012746:	b002      	add	sp, #8
 8012748:	bd80      	pop	{r7, pc}

0801274a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b082      	sub	sp, #8
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012756:	2280      	movs	r2, #128	; 0x80
 8012758:	0212      	lsls	r2, r2, #8
 801275a:	431a      	orrs	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	0018      	movs	r0, r3
 8012764:	46bd      	mov	sp, r7
 8012766:	b002      	add	sp, #8
 8012768:	bd80      	pop	{r7, pc}

0801276a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b084      	sub	sp, #16
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012776:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012778:	68fb      	ldr	r3, [r7, #12]
}
 801277a:	0018      	movs	r0, r3
 801277c:	46bd      	mov	sp, r7
 801277e:	b004      	add	sp, #16
 8012780:	bd80      	pop	{r7, pc}
	...

08012784 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b08a      	sub	sp, #40	; 0x28
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	0019      	movs	r1, r3
 8012790:	1dbb      	adds	r3, r7, #6
 8012792:	801a      	strh	r2, [r3, #0]
 8012794:	1d3b      	adds	r3, r7, #4
 8012796:	1c0a      	adds	r2, r1, #0
 8012798:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 801279a:	1d3b      	adds	r3, r7, #4
 801279c:	881b      	ldrh	r3, [r3, #0]
 801279e:	3303      	adds	r3, #3
 80127a0:	089b      	lsrs	r3, r3, #2
 80127a2:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80127a4:	2016      	movs	r0, #22
 80127a6:	183b      	adds	r3, r7, r0
 80127a8:	1d3a      	adds	r2, r7, #4
 80127aa:	8812      	ldrh	r2, [r2, #0]
 80127ac:	2103      	movs	r1, #3
 80127ae:	400a      	ands	r2, r1
 80127b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80127b6:	183b      	adds	r3, r7, r0
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d002      	beq.n	80127c4 <USB_WritePMA+0x40>
  {
    NbWords--;
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80127c4:	1dbb      	adds	r3, r7, #6
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	4a28      	ldr	r2, [pc, #160]	; (801286c <USB_WritePMA+0xe8>)
 80127ca:	4694      	mov	ip, r2
 80127cc:	4463      	add	r3, ip
 80127ce:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	623b      	str	r3, [r7, #32]
 80127d4:	e01f      	b.n	8012816 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	781a      	ldrb	r2, [r3, #0]
 80127da:	7859      	ldrb	r1, [r3, #1]
 80127dc:	0209      	lsls	r1, r1, #8
 80127de:	430a      	orrs	r2, r1
 80127e0:	7899      	ldrb	r1, [r3, #2]
 80127e2:	0409      	lsls	r1, r1, #16
 80127e4:	430a      	orrs	r2, r1
 80127e6:	78db      	ldrb	r3, [r3, #3]
 80127e8:	061b      	lsls	r3, r3, #24
 80127ea:	4313      	orrs	r3, r2
 80127ec:	001a      	movs	r2, r3
 80127ee:	69fb      	ldr	r3, [r7, #28]
 80127f0:	601a      	str	r2, [r3, #0]
    pdwVal++;
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	3304      	adds	r3, #4
 80127f6:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	3301      	adds	r3, #1
 80127fc:	613b      	str	r3, [r7, #16]
    pBuf++;
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	3301      	adds	r3, #1
 8012802:	613b      	str	r3, [r7, #16]
    pBuf++;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	3301      	adds	r3, #1
 8012808:	613b      	str	r3, [r7, #16]
    pBuf++;
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	3301      	adds	r3, #1
 801280e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8012810:	6a3b      	ldr	r3, [r7, #32]
 8012812:	3b01      	subs	r3, #1
 8012814:	623b      	str	r3, [r7, #32]
 8012816:	6a3b      	ldr	r3, [r7, #32]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d1dc      	bne.n	80127d6 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 801281c:	2316      	movs	r3, #22
 801281e:	18fb      	adds	r3, r7, r3
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d01e      	beq.n	8012864 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8012826:	2300      	movs	r3, #0
 8012828:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	001a      	movs	r2, r3
 8012830:	6a3b      	ldr	r3, [r7, #32]
 8012832:	00db      	lsls	r3, r3, #3
 8012834:	409a      	lsls	r2, r3
 8012836:	0013      	movs	r3, r2
 8012838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801283a:	4313      	orrs	r3, r2
 801283c:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 801283e:	6a3b      	ldr	r3, [r7, #32]
 8012840:	3301      	adds	r3, #1
 8012842:	623b      	str	r3, [r7, #32]
      pBuf++;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	3301      	adds	r3, #1
 8012848:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 801284a:	2116      	movs	r1, #22
 801284c:	187b      	adds	r3, r7, r1
 801284e:	881a      	ldrh	r2, [r3, #0]
 8012850:	187b      	adds	r3, r7, r1
 8012852:	3a01      	subs	r2, #1
 8012854:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8012856:	187b      	adds	r3, r7, r1
 8012858:	881b      	ldrh	r3, [r3, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1e5      	bne.n	801282a <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012862:	601a      	str	r2, [r3, #0]
  }
}
 8012864:	46c0      	nop			; (mov r8, r8)
 8012866:	46bd      	mov	sp, r7
 8012868:	b00a      	add	sp, #40	; 0x28
 801286a:	bd80      	pop	{r7, pc}
 801286c:	40009800 	.word	0x40009800

08012870 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012870:	b590      	push	{r4, r7, lr}
 8012872:	b08b      	sub	sp, #44	; 0x2c
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	0019      	movs	r1, r3
 801287c:	1dbb      	adds	r3, r7, #6
 801287e:	801a      	strh	r2, [r3, #0]
 8012880:	1d3b      	adds	r3, r7, #4
 8012882:	1c0a      	adds	r2, r1, #0
 8012884:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8012886:	1d3b      	adds	r3, r7, #4
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	3303      	adds	r3, #3
 801288c:	089b      	lsrs	r3, r3, #2
 801288e:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8012890:	201a      	movs	r0, #26
 8012892:	183b      	adds	r3, r7, r0
 8012894:	1d3a      	adds	r2, r7, #4
 8012896:	8812      	ldrh	r2, [r2, #0]
 8012898:	2103      	movs	r1, #3
 801289a:	400a      	ands	r2, r1
 801289c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 801289e:	68bb      	ldr	r3, [r7, #8]
 80128a0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80128a2:	1dbb      	adds	r3, r7, #6
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	4a39      	ldr	r2, [pc, #228]	; (801298c <USB_ReadPMA+0x11c>)
 80128a8:	4694      	mov	ip, r2
 80128aa:	4463      	add	r3, ip
 80128ac:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80128ae:	183b      	adds	r3, r7, r0
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d002      	beq.n	80128bc <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	627b      	str	r3, [r7, #36]	; 0x24
 80128c0:	e03c      	b.n	801293c <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 80128c2:	6a3b      	ldr	r3, [r7, #32]
 80128c4:	681a      	ldr	r2, [r3, #0]
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	21ff      	movs	r1, #255	; 0xff
 80128ca:	4011      	ands	r1, r2
 80128cc:	000c      	movs	r4, r1
 80128ce:	7819      	ldrb	r1, [r3, #0]
 80128d0:	2000      	movs	r0, #0
 80128d2:	4001      	ands	r1, r0
 80128d4:	1c08      	adds	r0, r1, #0
 80128d6:	1c21      	adds	r1, r4, #0
 80128d8:	4301      	orrs	r1, r0
 80128da:	7019      	strb	r1, [r3, #0]
 80128dc:	0a11      	lsrs	r1, r2, #8
 80128de:	20ff      	movs	r0, #255	; 0xff
 80128e0:	4001      	ands	r1, r0
 80128e2:	000c      	movs	r4, r1
 80128e4:	7859      	ldrb	r1, [r3, #1]
 80128e6:	2000      	movs	r0, #0
 80128e8:	4001      	ands	r1, r0
 80128ea:	1c08      	adds	r0, r1, #0
 80128ec:	1c21      	adds	r1, r4, #0
 80128ee:	4301      	orrs	r1, r0
 80128f0:	7059      	strb	r1, [r3, #1]
 80128f2:	0c11      	lsrs	r1, r2, #16
 80128f4:	20ff      	movs	r0, #255	; 0xff
 80128f6:	4001      	ands	r1, r0
 80128f8:	000c      	movs	r4, r1
 80128fa:	7899      	ldrb	r1, [r3, #2]
 80128fc:	2000      	movs	r0, #0
 80128fe:	4001      	ands	r1, r0
 8012900:	1c08      	adds	r0, r1, #0
 8012902:	1c21      	adds	r1, r4, #0
 8012904:	4301      	orrs	r1, r0
 8012906:	7099      	strb	r1, [r3, #2]
 8012908:	0e10      	lsrs	r0, r2, #24
 801290a:	78da      	ldrb	r2, [r3, #3]
 801290c:	2100      	movs	r1, #0
 801290e:	400a      	ands	r2, r1
 8012910:	1c11      	adds	r1, r2, #0
 8012912:	1c02      	adds	r2, r0, #0
 8012914:	430a      	orrs	r2, r1
 8012916:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8012918:	6a3b      	ldr	r3, [r7, #32]
 801291a:	3304      	adds	r3, #4
 801291c:	623b      	str	r3, [r7, #32]
    pBuf++;
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	3301      	adds	r3, #1
 8012922:	617b      	str	r3, [r7, #20]
    pBuf++;
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	3301      	adds	r3, #1
 8012928:	617b      	str	r3, [r7, #20]
    pBuf++;
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	3301      	adds	r3, #1
 801292e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	3301      	adds	r3, #1
 8012934:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	3b01      	subs	r3, #1
 801293a:	627b      	str	r3, [r7, #36]	; 0x24
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	2b00      	cmp	r3, #0
 8012940:	d1bf      	bne.n	80128c2 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8012942:	231a      	movs	r3, #26
 8012944:	18fb      	adds	r3, r7, r3
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d01b      	beq.n	8012984 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 801294c:	6a3b      	ldr	r3, [r7, #32]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	b2db      	uxtb	r3, r3
 8012956:	00db      	lsls	r3, r3, #3
 8012958:	693a      	ldr	r2, [r7, #16]
 801295a:	40da      	lsrs	r2, r3
 801295c:	0013      	movs	r3, r2
 801295e:	b2da      	uxtb	r2, r3
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	701a      	strb	r2, [r3, #0]
      count++;
 8012964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012966:	3301      	adds	r3, #1
 8012968:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	3301      	adds	r3, #1
 801296e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8012970:	211a      	movs	r1, #26
 8012972:	187b      	adds	r3, r7, r1
 8012974:	881a      	ldrh	r2, [r3, #0]
 8012976:	187b      	adds	r3, r7, r1
 8012978:	3a01      	subs	r2, #1
 801297a:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 801297c:	187b      	adds	r3, r7, r1
 801297e:	881b      	ldrh	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1e6      	bne.n	8012952 <USB_ReadPMA+0xe2>
  }
}
 8012984:	46c0      	nop			; (mov r8, r8)
 8012986:	46bd      	mov	sp, r7
 8012988:	b00b      	add	sp, #44	; 0x2c
 801298a:	bd90      	pop	{r4, r7, pc}
 801298c:	40009800 	.word	0x40009800

08012990 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 8012994:	f00f fcf8 	bl	8022388 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 8012998:	4b06      	ldr	r3, [pc, #24]	; (80129b4 <USBPD_TRACE_Init+0x24>)
 801299a:	2103      	movs	r1, #3
 801299c:	0018      	movs	r0, r3
 801299e:	f7ee fd97 	bl	80014d0 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 80129a2:	4b05      	ldr	r3, [pc, #20]	; (80129b8 <USBPD_TRACE_Init+0x28>)
 80129a4:	2123      	movs	r1, #35	; 0x23
 80129a6:	0018      	movs	r0, r3
 80129a8:	f00f fd7a 	bl	80224a0 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 80129ac:	46c0      	nop			; (mov r8, r8)
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	46c0      	nop			; (mov r8, r8)
 80129b4:	080129bd 	.word	0x080129bd
 80129b8:	08024f9c 	.word	0x08024f9c

080129bc <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 80129bc:	b5b0      	push	{r4, r5, r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	0004      	movs	r4, r0
 80129c4:	0008      	movs	r0, r1
 80129c6:	0011      	movs	r1, r2
 80129c8:	603b      	str	r3, [r7, #0]
 80129ca:	1dfb      	adds	r3, r7, #7
 80129cc:	1c22      	adds	r2, r4, #0
 80129ce:	701a      	strb	r2, [r3, #0]
 80129d0:	1dbb      	adds	r3, r7, #6
 80129d2:	1c02      	adds	r2, r0, #0
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	1d7b      	adds	r3, r7, #5
 80129d8:	1c0a      	adds	r2, r1, #0
 80129da:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 80129dc:	f7f6 fcce 	bl	800937c <HAL_GetTick>
 80129e0:	0003      	movs	r3, r0
 80129e2:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 80129e4:	f00f fdc0 	bl	8022568 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 80129e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ea:	3314      	adds	r3, #20
 80129ec:	0018      	movs	r0, r3
 80129ee:	f00f fe55 	bl	802269c <TRACER_EMB_AllocateBufer>
 80129f2:	0003      	movs	r3, r0
 80129f4:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	3301      	adds	r3, #1
 80129fa:	d100      	bne.n	80129fe <USBPD_TRACE_Add+0x42>
 80129fc:	e11d      	b.n	8012c3a <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 80129fe:	2314      	movs	r3, #20
 8012a00:	18fb      	adds	r3, r7, r3
 8012a02:	68fa      	ldr	r2, [r7, #12]
 8012a04:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8012a06:	2316      	movs	r3, #22
 8012a08:	18fb      	adds	r3, r7, r3
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	801a      	strh	r2, [r3, #0]
 8012a0e:	e011      	b.n	8012a34 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 8012a10:	2414      	movs	r4, #20
 8012a12:	193b      	adds	r3, r7, r4
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	21fd      	movs	r1, #253	; 0xfd
 8012a18:	0018      	movs	r0, r3
 8012a1a:	f00f fd1b 	bl	8022454 <TRACER_EMB_WriteData>
 8012a1e:	193b      	adds	r3, r7, r4
 8012a20:	193a      	adds	r2, r7, r4
 8012a22:	8812      	ldrh	r2, [r2, #0]
 8012a24:	3201      	adds	r2, #1
 8012a26:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8012a28:	2116      	movs	r1, #22
 8012a2a:	187b      	adds	r3, r7, r1
 8012a2c:	881a      	ldrh	r2, [r3, #0]
 8012a2e:	187b      	adds	r3, r7, r1
 8012a30:	3201      	adds	r2, #1
 8012a32:	801a      	strh	r2, [r3, #0]
 8012a34:	2516      	movs	r5, #22
 8012a36:	197b      	adds	r3, r7, r5
 8012a38:	881b      	ldrh	r3, [r3, #0]
 8012a3a:	2b03      	cmp	r3, #3
 8012a3c:	d9e8      	bls.n	8012a10 <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 8012a3e:	1dbb      	adds	r3, r7, #6
 8012a40:	781b      	ldrb	r3, [r3, #0]
 8012a42:	3301      	adds	r3, #1
 8012a44:	b2db      	uxtb	r3, r3
 8012a46:	015b      	lsls	r3, r3, #5
 8012a48:	b2db      	uxtb	r3, r3
 8012a4a:	2212      	movs	r2, #18
 8012a4c:	4313      	orrs	r3, r2
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	2414      	movs	r4, #20
 8012a52:	193b      	adds	r3, r7, r4
 8012a54:	881b      	ldrh	r3, [r3, #0]
 8012a56:	0011      	movs	r1, r2
 8012a58:	0018      	movs	r0, r3
 8012a5a:	f00f fcfb 	bl	8022454 <TRACER_EMB_WriteData>
 8012a5e:	0021      	movs	r1, r4
 8012a60:	187b      	adds	r3, r7, r1
 8012a62:	187a      	adds	r2, r7, r1
 8012a64:	8812      	ldrh	r2, [r2, #0]
 8012a66:	3201      	adds	r2, #1
 8012a68:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 8012a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6c:	3309      	adds	r3, #9
 8012a6e:	0a1b      	lsrs	r3, r3, #8
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	000c      	movs	r4, r1
 8012a74:	187b      	adds	r3, r7, r1
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	0011      	movs	r1, r2
 8012a7a:	0018      	movs	r0, r3
 8012a7c:	f00f fcea 	bl	8022454 <TRACER_EMB_WriteData>
 8012a80:	0021      	movs	r1, r4
 8012a82:	187b      	adds	r3, r7, r1
 8012a84:	187a      	adds	r2, r7, r1
 8012a86:	8812      	ldrh	r2, [r2, #0]
 8012a88:	3201      	adds	r2, #1
 8012a8a:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 8012a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	3309      	adds	r3, #9
 8012a92:	b2da      	uxtb	r2, r3
 8012a94:	000c      	movs	r4, r1
 8012a96:	187b      	adds	r3, r7, r1
 8012a98:	881b      	ldrh	r3, [r3, #0]
 8012a9a:	0011      	movs	r1, r2
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	f00f fcd9 	bl	8022454 <TRACER_EMB_WriteData>
 8012aa2:	0021      	movs	r1, r4
 8012aa4:	187b      	adds	r3, r7, r1
 8012aa6:	187a      	adds	r2, r7, r1
 8012aa8:	8812      	ldrh	r2, [r2, #0]
 8012aaa:	3201      	adds	r2, #1
 8012aac:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 8012aae:	1dfb      	adds	r3, r7, #7
 8012ab0:	781a      	ldrb	r2, [r3, #0]
 8012ab2:	000c      	movs	r4, r1
 8012ab4:	187b      	adds	r3, r7, r1
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	0011      	movs	r1, r2
 8012aba:	0018      	movs	r0, r3
 8012abc:	f00f fcca 	bl	8022454 <TRACER_EMB_WriteData>
 8012ac0:	0021      	movs	r1, r4
 8012ac2:	187b      	adds	r3, r7, r1
 8012ac4:	187a      	adds	r2, r7, r1
 8012ac6:	8812      	ldrh	r2, [r2, #0]
 8012ac8:	3201      	adds	r2, #1
 8012aca:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 8012acc:	693b      	ldr	r3, [r7, #16]
 8012ace:	b2da      	uxtb	r2, r3
 8012ad0:	000c      	movs	r4, r1
 8012ad2:	187b      	adds	r3, r7, r1
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	0011      	movs	r1, r2
 8012ad8:	0018      	movs	r0, r3
 8012ada:	f00f fcbb 	bl	8022454 <TRACER_EMB_WriteData>
 8012ade:	0021      	movs	r1, r4
 8012ae0:	187b      	adds	r3, r7, r1
 8012ae2:	187a      	adds	r2, r7, r1
 8012ae4:	8812      	ldrh	r2, [r2, #0]
 8012ae6:	3201      	adds	r2, #1
 8012ae8:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	0a1b      	lsrs	r3, r3, #8
 8012aee:	b2da      	uxtb	r2, r3
 8012af0:	000c      	movs	r4, r1
 8012af2:	187b      	adds	r3, r7, r1
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	0011      	movs	r1, r2
 8012af8:	0018      	movs	r0, r3
 8012afa:	f00f fcab 	bl	8022454 <TRACER_EMB_WriteData>
 8012afe:	0021      	movs	r1, r4
 8012b00:	187b      	adds	r3, r7, r1
 8012b02:	187a      	adds	r2, r7, r1
 8012b04:	8812      	ldrh	r2, [r2, #0]
 8012b06:	3201      	adds	r2, #1
 8012b08:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	0c1b      	lsrs	r3, r3, #16
 8012b0e:	b2da      	uxtb	r2, r3
 8012b10:	000c      	movs	r4, r1
 8012b12:	187b      	adds	r3, r7, r1
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	0011      	movs	r1, r2
 8012b18:	0018      	movs	r0, r3
 8012b1a:	f00f fc9b 	bl	8022454 <TRACER_EMB_WriteData>
 8012b1e:	0021      	movs	r1, r4
 8012b20:	187b      	adds	r3, r7, r1
 8012b22:	187a      	adds	r2, r7, r1
 8012b24:	8812      	ldrh	r2, [r2, #0]
 8012b26:	3201      	adds	r2, #1
 8012b28:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	0e1b      	lsrs	r3, r3, #24
 8012b2e:	b2da      	uxtb	r2, r3
 8012b30:	000c      	movs	r4, r1
 8012b32:	187b      	adds	r3, r7, r1
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	0011      	movs	r1, r2
 8012b38:	0018      	movs	r0, r3
 8012b3a:	f00f fc8b 	bl	8022454 <TRACER_EMB_WriteData>
 8012b3e:	0021      	movs	r1, r4
 8012b40:	187b      	adds	r3, r7, r1
 8012b42:	187a      	adds	r2, r7, r1
 8012b44:	8812      	ldrh	r2, [r2, #0]
 8012b46:	3201      	adds	r2, #1
 8012b48:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 8012b4a:	1dbb      	adds	r3, r7, #6
 8012b4c:	781a      	ldrb	r2, [r3, #0]
 8012b4e:	000c      	movs	r4, r1
 8012b50:	187b      	adds	r3, r7, r1
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	0011      	movs	r1, r2
 8012b56:	0018      	movs	r0, r3
 8012b58:	f00f fc7c 	bl	8022454 <TRACER_EMB_WriteData>
 8012b5c:	0021      	movs	r1, r4
 8012b5e:	187b      	adds	r3, r7, r1
 8012b60:	187a      	adds	r2, r7, r1
 8012b62:	8812      	ldrh	r2, [r2, #0]
 8012b64:	3201      	adds	r2, #1
 8012b66:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 8012b68:	1d7b      	adds	r3, r7, #5
 8012b6a:	781a      	ldrb	r2, [r3, #0]
 8012b6c:	000c      	movs	r4, r1
 8012b6e:	187b      	adds	r3, r7, r1
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	0011      	movs	r1, r2
 8012b74:	0018      	movs	r0, r3
 8012b76:	f00f fc6d 	bl	8022454 <TRACER_EMB_WriteData>
 8012b7a:	0021      	movs	r1, r4
 8012b7c:	187b      	adds	r3, r7, r1
 8012b7e:	187a      	adds	r2, r7, r1
 8012b80:	8812      	ldrh	r2, [r2, #0]
 8012b82:	3201      	adds	r2, #1
 8012b84:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 8012b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b88:	0a1b      	lsrs	r3, r3, #8
 8012b8a:	b2da      	uxtb	r2, r3
 8012b8c:	000c      	movs	r4, r1
 8012b8e:	187b      	adds	r3, r7, r1
 8012b90:	881b      	ldrh	r3, [r3, #0]
 8012b92:	0011      	movs	r1, r2
 8012b94:	0018      	movs	r0, r3
 8012b96:	f00f fc5d 	bl	8022454 <TRACER_EMB_WriteData>
 8012b9a:	0021      	movs	r1, r4
 8012b9c:	187b      	adds	r3, r7, r1
 8012b9e:	187a      	adds	r2, r7, r1
 8012ba0:	8812      	ldrh	r2, [r2, #0]
 8012ba2:	3201      	adds	r2, #1
 8012ba4:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 8012ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba8:	b2da      	uxtb	r2, r3
 8012baa:	000c      	movs	r4, r1
 8012bac:	187b      	adds	r3, r7, r1
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	0011      	movs	r1, r2
 8012bb2:	0018      	movs	r0, r3
 8012bb4:	f00f fc4e 	bl	8022454 <TRACER_EMB_WriteData>
 8012bb8:	193b      	adds	r3, r7, r4
 8012bba:	193a      	adds	r2, r7, r4
 8012bbc:	8812      	ldrh	r2, [r2, #0]
 8012bbe:	3201      	adds	r2, #1
 8012bc0:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 8012bc2:	197b      	adds	r3, r7, r5
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	801a      	strh	r2, [r3, #0]
 8012bc8:	e016      	b.n	8012bf8 <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 8012bca:	2416      	movs	r4, #22
 8012bcc:	193b      	adds	r3, r7, r4
 8012bce:	881b      	ldrh	r3, [r3, #0]
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	18d3      	adds	r3, r2, r3
 8012bd4:	781a      	ldrb	r2, [r3, #0]
 8012bd6:	2514      	movs	r5, #20
 8012bd8:	197b      	adds	r3, r7, r5
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	0011      	movs	r1, r2
 8012bde:	0018      	movs	r0, r3
 8012be0:	f00f fc38 	bl	8022454 <TRACER_EMB_WriteData>
 8012be4:	197b      	adds	r3, r7, r5
 8012be6:	197a      	adds	r2, r7, r5
 8012be8:	8812      	ldrh	r2, [r2, #0]
 8012bea:	3201      	adds	r2, #1
 8012bec:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 8012bee:	193b      	adds	r3, r7, r4
 8012bf0:	881a      	ldrh	r2, [r3, #0]
 8012bf2:	193b      	adds	r3, r7, r4
 8012bf4:	3201      	adds	r2, #1
 8012bf6:	801a      	strh	r2, [r3, #0]
 8012bf8:	2116      	movs	r1, #22
 8012bfa:	187b      	adds	r3, r7, r1
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d8e2      	bhi.n	8012bca <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8012c04:	187b      	adds	r3, r7, r1
 8012c06:	2200      	movs	r2, #0
 8012c08:	801a      	strh	r2, [r3, #0]
 8012c0a:	e011      	b.n	8012c30 <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 8012c0c:	2414      	movs	r4, #20
 8012c0e:	193b      	adds	r3, r7, r4
 8012c10:	881b      	ldrh	r3, [r3, #0]
 8012c12:	21a5      	movs	r1, #165	; 0xa5
 8012c14:	0018      	movs	r0, r3
 8012c16:	f00f fc1d 	bl	8022454 <TRACER_EMB_WriteData>
 8012c1a:	193b      	adds	r3, r7, r4
 8012c1c:	193a      	adds	r2, r7, r4
 8012c1e:	8812      	ldrh	r2, [r2, #0]
 8012c20:	3201      	adds	r2, #1
 8012c22:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8012c24:	2116      	movs	r1, #22
 8012c26:	187b      	adds	r3, r7, r1
 8012c28:	881a      	ldrh	r2, [r3, #0]
 8012c2a:	187b      	adds	r3, r7, r1
 8012c2c:	3201      	adds	r2, #1
 8012c2e:	801a      	strh	r2, [r3, #0]
 8012c30:	2316      	movs	r3, #22
 8012c32:	18fb      	adds	r3, r7, r3
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	2b03      	cmp	r3, #3
 8012c38:	d9e8      	bls.n	8012c0c <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 8012c3a:	f00f fcb3 	bl	80225a4 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 8012c3e:	f00f fccf 	bl	80225e0 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 8012c42:	46c0      	nop			; (mov r8, r8)
 8012c44:	46bd      	mov	sp, r7
 8012c46:	b006      	add	sp, #24
 8012c48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012c4c <__NVIC_EnableIRQ>:
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b082      	sub	sp, #8
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	0002      	movs	r2, r0
 8012c54:	1dfb      	adds	r3, r7, #7
 8012c56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012c58:	1dfb      	adds	r3, r7, #7
 8012c5a:	781b      	ldrb	r3, [r3, #0]
 8012c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8012c5e:	d809      	bhi.n	8012c74 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c60:	1dfb      	adds	r3, r7, #7
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	001a      	movs	r2, r3
 8012c66:	231f      	movs	r3, #31
 8012c68:	401a      	ands	r2, r3
 8012c6a:	4b04      	ldr	r3, [pc, #16]	; (8012c7c <__NVIC_EnableIRQ+0x30>)
 8012c6c:	2101      	movs	r1, #1
 8012c6e:	4091      	lsls	r1, r2
 8012c70:	000a      	movs	r2, r1
 8012c72:	601a      	str	r2, [r3, #0]
}
 8012c74:	46c0      	nop			; (mov r8, r8)
 8012c76:	46bd      	mov	sp, r7
 8012c78:	b002      	add	sp, #8
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	e000e100 	.word	0xe000e100

08012c80 <__NVIC_SetPriority>:
{
 8012c80:	b590      	push	{r4, r7, lr}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	0002      	movs	r2, r0
 8012c88:	6039      	str	r1, [r7, #0]
 8012c8a:	1dfb      	adds	r3, r7, #7
 8012c8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8012c8e:	1dfb      	adds	r3, r7, #7
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	2b7f      	cmp	r3, #127	; 0x7f
 8012c94:	d828      	bhi.n	8012ce8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012c96:	4a2f      	ldr	r2, [pc, #188]	; (8012d54 <__NVIC_SetPriority+0xd4>)
 8012c98:	1dfb      	adds	r3, r7, #7
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	b25b      	sxtb	r3, r3
 8012c9e:	089b      	lsrs	r3, r3, #2
 8012ca0:	33c0      	adds	r3, #192	; 0xc0
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	589b      	ldr	r3, [r3, r2]
 8012ca6:	1dfa      	adds	r2, r7, #7
 8012ca8:	7812      	ldrb	r2, [r2, #0]
 8012caa:	0011      	movs	r1, r2
 8012cac:	2203      	movs	r2, #3
 8012cae:	400a      	ands	r2, r1
 8012cb0:	00d2      	lsls	r2, r2, #3
 8012cb2:	21ff      	movs	r1, #255	; 0xff
 8012cb4:	4091      	lsls	r1, r2
 8012cb6:	000a      	movs	r2, r1
 8012cb8:	43d2      	mvns	r2, r2
 8012cba:	401a      	ands	r2, r3
 8012cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	019b      	lsls	r3, r3, #6
 8012cc2:	22ff      	movs	r2, #255	; 0xff
 8012cc4:	401a      	ands	r2, r3
 8012cc6:	1dfb      	adds	r3, r7, #7
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	0018      	movs	r0, r3
 8012ccc:	2303      	movs	r3, #3
 8012cce:	4003      	ands	r3, r0
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012cd4:	481f      	ldr	r0, [pc, #124]	; (8012d54 <__NVIC_SetPriority+0xd4>)
 8012cd6:	1dfb      	adds	r3, r7, #7
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	b25b      	sxtb	r3, r3
 8012cdc:	089b      	lsrs	r3, r3, #2
 8012cde:	430a      	orrs	r2, r1
 8012ce0:	33c0      	adds	r3, #192	; 0xc0
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	501a      	str	r2, [r3, r0]
}
 8012ce6:	e031      	b.n	8012d4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012ce8:	4a1b      	ldr	r2, [pc, #108]	; (8012d58 <__NVIC_SetPriority+0xd8>)
 8012cea:	1dfb      	adds	r3, r7, #7
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	0019      	movs	r1, r3
 8012cf0:	230f      	movs	r3, #15
 8012cf2:	400b      	ands	r3, r1
 8012cf4:	3b08      	subs	r3, #8
 8012cf6:	089b      	lsrs	r3, r3, #2
 8012cf8:	3306      	adds	r3, #6
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	18d3      	adds	r3, r2, r3
 8012cfe:	3304      	adds	r3, #4
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	1dfa      	adds	r2, r7, #7
 8012d04:	7812      	ldrb	r2, [r2, #0]
 8012d06:	0011      	movs	r1, r2
 8012d08:	2203      	movs	r2, #3
 8012d0a:	400a      	ands	r2, r1
 8012d0c:	00d2      	lsls	r2, r2, #3
 8012d0e:	21ff      	movs	r1, #255	; 0xff
 8012d10:	4091      	lsls	r1, r2
 8012d12:	000a      	movs	r2, r1
 8012d14:	43d2      	mvns	r2, r2
 8012d16:	401a      	ands	r2, r3
 8012d18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	019b      	lsls	r3, r3, #6
 8012d1e:	22ff      	movs	r2, #255	; 0xff
 8012d20:	401a      	ands	r2, r3
 8012d22:	1dfb      	adds	r3, r7, #7
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	0018      	movs	r0, r3
 8012d28:	2303      	movs	r3, #3
 8012d2a:	4003      	ands	r3, r0
 8012d2c:	00db      	lsls	r3, r3, #3
 8012d2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012d30:	4809      	ldr	r0, [pc, #36]	; (8012d58 <__NVIC_SetPriority+0xd8>)
 8012d32:	1dfb      	adds	r3, r7, #7
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	001c      	movs	r4, r3
 8012d38:	230f      	movs	r3, #15
 8012d3a:	4023      	ands	r3, r4
 8012d3c:	3b08      	subs	r3, #8
 8012d3e:	089b      	lsrs	r3, r3, #2
 8012d40:	430a      	orrs	r2, r1
 8012d42:	3306      	adds	r3, #6
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	18c3      	adds	r3, r0, r3
 8012d48:	3304      	adds	r3, #4
 8012d4a:	601a      	str	r2, [r3, #0]
}
 8012d4c:	46c0      	nop			; (mov r8, r8)
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	b003      	add	sp, #12
 8012d52:	bd90      	pop	{r4, r7, pc}
 8012d54:	e000e100 	.word	0xe000e100
 8012d58:	e000ed00 	.word	0xe000ed00

08012d5c <LL_UCPD_Enable>:
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2280      	movs	r2, #128	; 0x80
 8012d6a:	0612      	lsls	r2, r2, #24
 8012d6c:	431a      	orrs	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	601a      	str	r2, [r3, #0]
}
 8012d72:	46c0      	nop			; (mov r8, r8)
 8012d74:	46bd      	mov	sp, r7
 8012d76:	b002      	add	sp, #8
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
 8012d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	4a05      	ldr	r2, [pc, #20]	; (8012da0 <LL_UCPD_SetRxOrderSet+0x24>)
 8012d8c:	401a      	ands	r2, r3
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	431a      	orrs	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	601a      	str	r2, [r3, #0]
}
 8012d96:	46c0      	nop			; (mov r8, r8)
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	b002      	add	sp, #8
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	46c0      	nop			; (mov r8, r8)
 8012da0:	e00fffff 	.word	0xe00fffff

08012da4 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	4a05      	ldr	r2, [pc, #20]	; (8012dc8 <LL_UCPD_SetccEnable+0x24>)
 8012db4:	401a      	ands	r2, r3
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	431a      	orrs	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	60da      	str	r2, [r3, #12]
}
 8012dbe:	46c0      	nop			; (mov r8, r8)
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	b002      	add	sp, #8
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	46c0      	nop			; (mov r8, r8)
 8012dc8:	fffff3ff 	.word	0xfffff3ff

08012dcc <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	691b      	ldr	r3, [r3, #16]
 8012dd8:	2280      	movs	r2, #128	; 0x80
 8012dda:	0212      	lsls	r2, r2, #8
 8012ddc:	431a      	orrs	r2, r3
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	611a      	str	r2, [r3, #16]
}
 8012de2:	46c0      	nop			; (mov r8, r8)
 8012de4:	46bd      	mov	sp, r7
 8012de6:	b002      	add	sp, #8
 8012de8:	bd80      	pop	{r7, pc}

08012dea <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b082      	sub	sp, #8
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	691b      	ldr	r3, [r3, #16]
 8012df6:	2280      	movs	r2, #128	; 0x80
 8012df8:	01d2      	lsls	r2, r2, #7
 8012dfa:	431a      	orrs	r2, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	611a      	str	r2, [r3, #16]
}
 8012e00:	46c0      	nop			; (mov r8, r8)
 8012e02:	46bd      	mov	sp, r7
 8012e04:	b002      	add	sp, #8
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8012e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e0a:	b08b      	sub	sp, #44	; 0x2c
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	60b9      	str	r1, [r7, #8]
 8012e10:	607a      	str	r2, [r7, #4]
 8012e12:	603b      	str	r3, [r7, #0]
 8012e14:	240f      	movs	r4, #15
 8012e16:	193b      	adds	r3, r7, r4
 8012e18:	1c02      	adds	r2, r0, #0
 8012e1a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012e1c:	193b      	adds	r3, r7, r4
 8012e1e:	781a      	ldrb	r2, [r3, #0]
 8012e20:	0013      	movs	r3, r2
 8012e22:	005b      	lsls	r3, r3, #1
 8012e24:	189b      	adds	r3, r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	4a65      	ldr	r2, [pc, #404]	; (8012fc0 <CAD_Init+0x1b8>)
 8012e2a:	189b      	adds	r3, r3, r2
 8012e2c:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8012e2e:	193b      	adds	r3, r7, r4
 8012e30:	781a      	ldrb	r2, [r3, #0]
 8012e32:	4964      	ldr	r1, [pc, #400]	; (8012fc4 <CAD_Init+0x1bc>)
 8012e34:	0013      	movs	r3, r2
 8012e36:	011b      	lsls	r3, r3, #4
 8012e38:	1a9b      	subs	r3, r3, r2
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	18cb      	adds	r3, r1, r3
 8012e3e:	3310      	adds	r3, #16
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8012e44:	193b      	adds	r3, r7, r4
 8012e46:	781a      	ldrb	r2, [r3, #0]
 8012e48:	495e      	ldr	r1, [pc, #376]	; (8012fc4 <CAD_Init+0x1bc>)
 8012e4a:	0013      	movs	r3, r2
 8012e4c:	011b      	lsls	r3, r3, #4
 8012e4e:	1a9b      	subs	r3, r3, r2
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	18cb      	adds	r3, r1, r3
 8012e54:	330c      	adds	r3, #12
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8012e5a:	193b      	adds	r3, r7, r4
 8012e5c:	781a      	ldrb	r2, [r3, #0]
 8012e5e:	4959      	ldr	r1, [pc, #356]	; (8012fc4 <CAD_Init+0x1bc>)
 8012e60:	0013      	movs	r3, r2
 8012e62:	011b      	lsls	r3, r3, #4
 8012e64:	1a9b      	subs	r3, r3, r2
 8012e66:	009b      	lsls	r3, r3, #2
 8012e68:	18cb      	adds	r3, r1, r3
 8012e6a:	330c      	adds	r3, #12
 8012e6c:	6819      	ldr	r1, [r3, #0]
 8012e6e:	193b      	adds	r3, r7, r4
 8012e70:	781a      	ldrb	r2, [r3, #0]
 8012e72:	4854      	ldr	r0, [pc, #336]	; (8012fc4 <CAD_Init+0x1bc>)
 8012e74:	0013      	movs	r3, r2
 8012e76:	011b      	lsls	r3, r3, #4
 8012e78:	1a9b      	subs	r3, r3, r2
 8012e7a:	009b      	lsls	r3, r3, #2
 8012e7c:	18c3      	adds	r3, r0, r3
 8012e7e:	3310      	adds	r3, #16
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	794a      	ldrb	r2, [r1, #5]
 8012e84:	0612      	lsls	r2, r2, #24
 8012e86:	0f92      	lsrs	r2, r2, #30
 8012e88:	b2d2      	uxtb	r2, r2
 8012e8a:	2103      	movs	r1, #3
 8012e8c:	400a      	ands	r2, r1
 8012e8e:	0010      	movs	r0, r2
 8012e90:	789a      	ldrb	r2, [r3, #2]
 8012e92:	2103      	movs	r1, #3
 8012e94:	438a      	bics	r2, r1
 8012e96:	1c11      	adds	r1, r2, #0
 8012e98:	1c02      	adds	r2, r0, #0
 8012e9a:	430a      	orrs	r2, r1
 8012e9c:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8012e9e:	193b      	adds	r3, r7, r4
 8012ea0:	781a      	ldrb	r2, [r3, #0]
 8012ea2:	4948      	ldr	r1, [pc, #288]	; (8012fc4 <CAD_Init+0x1bc>)
 8012ea4:	0013      	movs	r3, r2
 8012ea6:	011b      	lsls	r3, r3, #4
 8012ea8:	1a9b      	subs	r3, r3, r2
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	18cb      	adds	r3, r1, r3
 8012eae:	3310      	adds	r3, #16
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	789a      	ldrb	r2, [r3, #2]
 8012eb4:	210c      	movs	r1, #12
 8012eb6:	438a      	bics	r2, r1
 8012eb8:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8012eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ebc:	220c      	movs	r2, #12
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	0018      	movs	r0, r3
 8012ec2:	f010 fba7 	bl	8023614 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8012ec6:	193b      	adds	r3, r7, r4
 8012ec8:	781a      	ldrb	r2, [r3, #0]
 8012eca:	493e      	ldr	r1, [pc, #248]	; (8012fc4 <CAD_Init+0x1bc>)
 8012ecc:	0013      	movs	r3, r2
 8012ece:	011b      	lsls	r3, r3, #4
 8012ed0:	1a9b      	subs	r3, r3, r2
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	18cb      	adds	r3, r1, r3
 8012ed6:	332c      	adds	r3, #44	; 0x2c
 8012ed8:	683a      	ldr	r2, [r7, #0]
 8012eda:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8012edc:	0025      	movs	r5, r4
 8012ede:	193b      	adds	r3, r7, r4
 8012ee0:	781c      	ldrb	r4, [r3, #0]
 8012ee2:	197b      	adds	r3, r7, r5
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	0018      	movs	r0, r3
 8012ee8:	f000 fc42 	bl	8013770 <USBPD_HW_GetUSPDInstance>
 8012eec:	0001      	movs	r1, r0
 8012eee:	4a35      	ldr	r2, [pc, #212]	; (8012fc4 <CAD_Init+0x1bc>)
 8012ef0:	0023      	movs	r3, r4
 8012ef2:	011b      	lsls	r3, r3, #4
 8012ef4:	1b1b      	subs	r3, r3, r4
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8012efa:	2614      	movs	r6, #20
 8012efc:	19bb      	adds	r3, r7, r6
 8012efe:	0018      	movs	r0, r3
 8012f00:	f7fd fdfe 	bl	8010b00 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8012f04:	002c      	movs	r4, r5
 8012f06:	193b      	adds	r3, r7, r4
 8012f08:	781a      	ldrb	r2, [r3, #0]
 8012f0a:	492e      	ldr	r1, [pc, #184]	; (8012fc4 <CAD_Init+0x1bc>)
 8012f0c:	0013      	movs	r3, r2
 8012f0e:	011b      	lsls	r3, r3, #4
 8012f10:	1a9b      	subs	r3, r3, r2
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	585b      	ldr	r3, [r3, r1]
 8012f16:	19ba      	adds	r2, r7, r6
 8012f18:	0011      	movs	r1, r2
 8012f1a:	0018      	movs	r0, r3
 8012f1c:	f7fd fdb6 	bl	8010a8c <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8012f20:	193b      	adds	r3, r7, r4
 8012f22:	781a      	ldrb	r2, [r3, #0]
 8012f24:	4927      	ldr	r1, [pc, #156]	; (8012fc4 <CAD_Init+0x1bc>)
 8012f26:	0013      	movs	r3, r2
 8012f28:	011b      	lsls	r3, r3, #4
 8012f2a:	1a9b      	subs	r3, r3, r2
 8012f2c:	009b      	lsls	r3, r3, #2
 8012f2e:	585b      	ldr	r3, [r3, r1]
 8012f30:	22f8      	movs	r2, #248	; 0xf8
 8012f32:	0452      	lsls	r2, r2, #17
 8012f34:	0011      	movs	r1, r2
 8012f36:	0018      	movs	r0, r3
 8012f38:	f7ff ff20 	bl	8012d7c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012f3c:	193b      	adds	r3, r7, r4
 8012f3e:	781a      	ldrb	r2, [r3, #0]
 8012f40:	4920      	ldr	r1, [pc, #128]	; (8012fc4 <CAD_Init+0x1bc>)
 8012f42:	0013      	movs	r3, r2
 8012f44:	011b      	lsls	r3, r3, #4
 8012f46:	1a9b      	subs	r3, r3, r2
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	585b      	ldr	r3, [r3, r1]
 8012f4c:	22c0      	movs	r2, #192	; 0xc0
 8012f4e:	0112      	lsls	r2, r2, #4
 8012f50:	0011      	movs	r1, r2
 8012f52:	0018      	movs	r0, r3
 8012f54:	f7ff ff26 	bl	8012da4 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8012f58:	193b      	adds	r3, r7, r4
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	0018      	movs	r0, r3
 8012f5e:	f009 fb11 	bl	801c584 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8012f62:	193b      	adds	r3, r7, r4
 8012f64:	781a      	ldrb	r2, [r3, #0]
 8012f66:	4917      	ldr	r1, [pc, #92]	; (8012fc4 <CAD_Init+0x1bc>)
 8012f68:	0013      	movs	r3, r2
 8012f6a:	011b      	lsls	r3, r3, #4
 8012f6c:	1a9b      	subs	r3, r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	585b      	ldr	r3, [r3, r1]
 8012f72:	0018      	movs	r0, r3
 8012f74:	f7ff fef2 	bl	8012d5c <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8012f78:	193b      	adds	r3, r7, r4
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	0018      	movs	r0, r3
 8012f7e:	f001 fdc1 	bl	8014b04 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 8012f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f84:	4a10      	ldr	r2, [pc, #64]	; (8012fc8 <CAD_Init+0x1c0>)
 8012f86:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8012f88:	193b      	adds	r3, r7, r4
 8012f8a:	781a      	ldrb	r2, [r3, #0]
 8012f8c:	490d      	ldr	r1, [pc, #52]	; (8012fc4 <CAD_Init+0x1bc>)
 8012f8e:	0013      	movs	r3, r2
 8012f90:	011b      	lsls	r3, r3, #4
 8012f92:	1a9b      	subs	r3, r3, r2
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	18cb      	adds	r3, r1, r3
 8012f98:	330c      	adds	r3, #12
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	795b      	ldrb	r3, [r3, #5]
 8012f9e:	06db      	lsls	r3, r3, #27
 8012fa0:	0fdb      	lsrs	r3, r3, #31
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	01d0      	lsls	r0, r2, #7
 8012fa8:	785a      	ldrb	r2, [r3, #1]
 8012faa:	217f      	movs	r1, #127	; 0x7f
 8012fac:	400a      	ands	r2, r1
 8012fae:	1c11      	adds	r1, r2, #0
 8012fb0:	1c02      	adds	r2, r0, #0
 8012fb2:	430a      	orrs	r2, r1
 8012fb4:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8012fb6:	46c0      	nop			; (mov r8, r8)
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	b00b      	add	sp, #44	; 0x2c
 8012fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fbe:	46c0      	nop			; (mov r8, r8)
 8012fc0:	20000594 	.word	0x20000594
 8012fc4:	200005ac 	.word	0x200005ac
 8012fc8:	080130c9 	.word	0x080130c9

08012fcc <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	0002      	movs	r2, r0
 8012fd4:	1dfb      	adds	r3, r7, #7
 8012fd6:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8012fd8:	1dfb      	adds	r3, r7, #7
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	0018      	movs	r0, r3
 8012fde:	f001 fe41 	bl	8014c64 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8012fe2:	1dfb      	adds	r3, r7, #7
 8012fe4:	7819      	ldrb	r1, [r3, #0]
 8012fe6:	4a0c      	ldr	r2, [pc, #48]	; (8013018 <CAD_Enter_ErrorRecovery+0x4c>)
 8012fe8:	000b      	movs	r3, r1
 8012fea:	005b      	lsls	r3, r3, #1
 8012fec:	185b      	adds	r3, r3, r1
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	5c99      	ldrb	r1, [r3, r2]
 8012ff2:	2080      	movs	r0, #128	; 0x80
 8012ff4:	4240      	negs	r0, r0
 8012ff6:	4301      	orrs	r1, r0
 8012ff8:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8012ffa:	1dfb      	adds	r3, r7, #7
 8012ffc:	781a      	ldrb	r2, [r3, #0]
 8012ffe:	4907      	ldr	r1, [pc, #28]	; (801301c <CAD_Enter_ErrorRecovery+0x50>)
 8013000:	0013      	movs	r3, r2
 8013002:	011b      	lsls	r3, r3, #4
 8013004:	1a9b      	subs	r3, r3, r2
 8013006:	009b      	lsls	r3, r3, #2
 8013008:	18cb      	adds	r3, r1, r3
 801300a:	332c      	adds	r3, #44	; 0x2c
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	4798      	blx	r3
}
 8013010:	46c0      	nop			; (mov r8, r8)
 8013012:	46bd      	mov	sp, r7
 8013014:	b002      	add	sp, #8
 8013016:	bd80      	pop	{r7, pc}
 8013018:	20000594 	.word	0x20000594
 801301c:	200005ac 	.word	0x200005ac

08013020 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	0002      	movs	r2, r0
 8013028:	6039      	str	r1, [r7, #0]
 801302a:	1dfb      	adds	r3, r7, #7
 801302c:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 801302e:	1dfb      	adds	r3, r7, #7
 8013030:	781a      	ldrb	r2, [r3, #0]
 8013032:	4919      	ldr	r1, [pc, #100]	; (8013098 <CAD_SRC_Set_ResistorRp+0x78>)
 8013034:	0013      	movs	r3, r2
 8013036:	011b      	lsls	r3, r3, #4
 8013038:	1a9b      	subs	r3, r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	18cb      	adds	r3, r1, r3
 801303e:	3310      	adds	r3, #16
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	683a      	ldr	r2, [r7, #0]
 8013044:	1c11      	adds	r1, r2, #0
 8013046:	2203      	movs	r2, #3
 8013048:	400a      	ands	r2, r1
 801304a:	b2d2      	uxtb	r2, r2
 801304c:	2103      	movs	r1, #3
 801304e:	400a      	ands	r2, r1
 8013050:	0010      	movs	r0, r2
 8013052:	789a      	ldrb	r2, [r3, #2]
 8013054:	2103      	movs	r1, #3
 8013056:	438a      	bics	r2, r1
 8013058:	1c11      	adds	r1, r2, #0
 801305a:	1c02      	adds	r2, r0, #0
 801305c:	430a      	orrs	r2, r1
 801305e:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8013060:	1dfb      	adds	r3, r7, #7
 8013062:	781a      	ldrb	r2, [r3, #0]
 8013064:	490d      	ldr	r1, [pc, #52]	; (801309c <CAD_SRC_Set_ResistorRp+0x7c>)
 8013066:	0013      	movs	r3, r2
 8013068:	005b      	lsls	r3, r3, #1
 801306a:	189b      	adds	r3, r3, r2
 801306c:	009b      	lsls	r3, r3, #2
 801306e:	18cb      	adds	r3, r1, r3
 8013070:	785a      	ldrb	r2, [r3, #1]
 8013072:	2101      	movs	r1, #1
 8013074:	430a      	orrs	r2, r1
 8013076:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8013078:	1dfb      	adds	r3, r7, #7
 801307a:	781a      	ldrb	r2, [r3, #0]
 801307c:	4906      	ldr	r1, [pc, #24]	; (8013098 <CAD_SRC_Set_ResistorRp+0x78>)
 801307e:	0013      	movs	r3, r2
 8013080:	011b      	lsls	r3, r3, #4
 8013082:	1a9b      	subs	r3, r3, r2
 8013084:	009b      	lsls	r3, r3, #2
 8013086:	18cb      	adds	r3, r1, r3
 8013088:	332c      	adds	r3, #44	; 0x2c
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	4798      	blx	r3
  return 0;
 801308e:	2300      	movs	r3, #0
}
 8013090:	0018      	movs	r0, r3
 8013092:	46bd      	mov	sp, r7
 8013094:	b002      	add	sp, #8
 8013096:	bd80      	pop	{r7, pc}
 8013098:	200005ac 	.word	0x200005ac
 801309c:	20000594 	.word	0x20000594

080130a0 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	0002      	movs	r2, r0
 80130a8:	6039      	str	r1, [r7, #0]
 80130aa:	1dfb      	adds	r3, r7, #7
 80130ac:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 80130ae:	683a      	ldr	r2, [r7, #0]
 80130b0:	1dfb      	adds	r3, r7, #7
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	0011      	movs	r1, r2
 80130b6:	0018      	movs	r0, r3
 80130b8:	f7ff ffb2 	bl	8013020 <CAD_SRC_Set_ResistorRp>
 80130bc:	0003      	movs	r3, r0
}
 80130be:	0018      	movs	r0, r3
 80130c0:	46bd      	mov	sp, r7
 80130c2:	b002      	add	sp, #8
 80130c4:	bd80      	pop	{r7, pc}
	...

080130c8 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b086      	sub	sp, #24
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60b9      	str	r1, [r7, #8]
 80130d0:	607a      	str	r2, [r7, #4]
 80130d2:	210f      	movs	r1, #15
 80130d4:	187b      	adds	r3, r7, r1
 80130d6:	1c02      	adds	r2, r0, #0
 80130d8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80130da:	187b      	adds	r3, r7, r1
 80130dc:	781a      	ldrb	r2, [r3, #0]
 80130de:	0013      	movs	r3, r2
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	189b      	adds	r3, r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	4a1b      	ldr	r2, [pc, #108]	; (8013154 <CAD_StateMachine_SNK+0x8c>)
 80130e8:	189b      	adds	r3, r3, r2
 80130ea:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80130ec:	2302      	movs	r3, #2
 80130ee:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	785b      	ldrb	r3, [r3, #1]
 80130f4:	069b      	lsls	r3, r3, #26
 80130f6:	0edb      	lsrs	r3, r3, #27
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b03      	cmp	r3, #3
 80130fc:	d019      	beq.n	8013132 <CAD_StateMachine_SNK+0x6a>
 80130fe:	dc23      	bgt.n	8013148 <CAD_StateMachine_SNK+0x80>
 8013100:	2b01      	cmp	r3, #1
 8013102:	d002      	beq.n	801310a <CAD_StateMachine_SNK+0x42>
 8013104:	2b02      	cmp	r3, #2
 8013106:	d009      	beq.n	801311c <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 8013108:	e01e      	b.n	8013148 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 801310a:	230f      	movs	r3, #15
 801310c:	18fb      	adds	r3, r7, r3
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	0018      	movs	r0, r3
 8013112:	f000 f9c5 	bl	80134a0 <ManageStateDetached_SNK>
 8013116:	0003      	movs	r3, r0
 8013118:	617b      	str	r3, [r7, #20]
      break;
 801311a:	e016      	b.n	801314a <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	68b9      	ldr	r1, [r7, #8]
 8013120:	230f      	movs	r3, #15
 8013122:	18fb      	adds	r3, r7, r3
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	0018      	movs	r0, r3
 8013128:	f000 fa0c 	bl	8013544 <ManageStateAttachedWait_SNK>
 801312c:	0003      	movs	r3, r0
 801312e:	617b      	str	r3, [r7, #20]
      break;
 8013130:	e00b      	b.n	801314a <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8013132:	687a      	ldr	r2, [r7, #4]
 8013134:	68b9      	ldr	r1, [r7, #8]
 8013136:	230f      	movs	r3, #15
 8013138:	18fb      	adds	r3, r7, r3
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	0018      	movs	r0, r3
 801313e:	f000 fa8f 	bl	8013660 <ManageStateAttached_SNK>
 8013142:	0003      	movs	r3, r0
 8013144:	617b      	str	r3, [r7, #20]
      break;
 8013146:	e000      	b.n	801314a <CAD_StateMachine_SNK+0x82>
      break;
 8013148:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 801314a:	697b      	ldr	r3, [r7, #20]
}
 801314c:	0018      	movs	r0, r3
 801314e:	46bd      	mov	sp, r7
 8013150:	b006      	add	sp, #24
 8013152:	bd80      	pop	{r7, pc}
 8013154:	20000594 	.word	0x20000594

08013158 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013158:	b590      	push	{r4, r7, lr}
 801315a:	b089      	sub	sp, #36	; 0x24
 801315c:	af02      	add	r7, sp, #8
 801315e:	60b9      	str	r1, [r7, #8]
 8013160:	607a      	str	r2, [r7, #4]
 8013162:	210f      	movs	r1, #15
 8013164:	187b      	adds	r3, r7, r1
 8013166:	1c02      	adds	r2, r0, #0
 8013168:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801316a:	187b      	adds	r3, r7, r1
 801316c:	781a      	ldrb	r2, [r3, #0]
 801316e:	0013      	movs	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	189b      	adds	r3, r3, r2
 8013174:	009b      	lsls	r3, r3, #2
 8013176:	4a7a      	ldr	r2, [pc, #488]	; (8013360 <CAD_StateMachine+0x208>)
 8013178:	189b      	adds	r3, r3, r2
 801317a:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801317c:	2302      	movs	r3, #2
 801317e:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	2200      	movs	r2, #0
 8013184:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8013186:	187b      	adds	r3, r7, r1
 8013188:	781a      	ldrb	r2, [r3, #0]
 801318a:	4976      	ldr	r1, [pc, #472]	; (8013364 <CAD_StateMachine+0x20c>)
 801318c:	0013      	movs	r3, r2
 801318e:	011b      	lsls	r3, r3, #4
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	18cb      	adds	r3, r1, r3
 8013196:	3310      	adds	r3, #16
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	2210      	movs	r2, #16
 801319e:	4013      	ands	r3, r2
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <CAD_StateMachine+0x52>
  {
    return _timing;
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	e0d6      	b.n	8013358 <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 80131aa:	693b      	ldr	r3, [r7, #16]
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	227f      	movs	r2, #127	; 0x7f
 80131b0:	4393      	bics	r3, r2
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d01b      	beq.n	80131f0 <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	781a      	ldrb	r2, [r3, #0]
 80131bc:	217f      	movs	r1, #127	; 0x7f
 80131be:	400a      	ands	r2, r1
 80131c0:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	785a      	ldrb	r2, [r3, #1]
 80131c6:	213e      	movs	r1, #62	; 0x3e
 80131c8:	438a      	bics	r2, r1
 80131ca:	1c11      	adds	r1, r2, #0
 80131cc:	2218      	movs	r2, #24
 80131ce:	430a      	orrs	r2, r1
 80131d0:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	785b      	ldrb	r3, [r3, #1]
 80131d6:	069b      	lsls	r3, r3, #26
 80131d8:	0edb      	lsrs	r3, r3, #27
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	001a      	movs	r2, r3
 80131de:	230f      	movs	r3, #15
 80131e0:	18fb      	adds	r3, r7, r3
 80131e2:	7819      	ldrb	r1, [r3, #0]
 80131e4:	2300      	movs	r3, #0
 80131e6:	9300      	str	r3, [sp, #0]
 80131e8:	2300      	movs	r3, #0
 80131ea:	2005      	movs	r0, #5
 80131ec:	f7ff fbe6 	bl	80129bc <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	785b      	ldrb	r3, [r3, #1]
 80131f4:	069b      	lsls	r3, r3, #26
 80131f6:	0edb      	lsrs	r3, r3, #27
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	2b0d      	cmp	r3, #13
 80131fc:	d05c      	beq.n	80132b8 <CAD_StateMachine+0x160>
 80131fe:	dc72      	bgt.n	80132e6 <CAD_StateMachine+0x18e>
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <CAD_StateMachine+0xb2>
 8013204:	2b0c      	cmp	r3, #12
 8013206:	d02b      	beq.n	8013260 <CAD_StateMachine+0x108>
 8013208:	e06d      	b.n	80132e6 <CAD_StateMachine+0x18e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 801320a:	240f      	movs	r4, #15
 801320c:	193b      	adds	r3, r7, r4
 801320e:	781a      	ldrb	r2, [r3, #0]
 8013210:	4954      	ldr	r1, [pc, #336]	; (8013364 <CAD_StateMachine+0x20c>)
 8013212:	0013      	movs	r3, r2
 8013214:	011b      	lsls	r3, r3, #4
 8013216:	1a9b      	subs	r3, r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	585b      	ldr	r3, [r3, r1]
 801321c:	0018      	movs	r0, r3
 801321e:	f7ff fdd5 	bl	8012dcc <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8013222:	193b      	adds	r3, r7, r4
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	494f      	ldr	r1, [pc, #316]	; (8013364 <CAD_StateMachine+0x20c>)
 8013228:	0013      	movs	r3, r2
 801322a:	011b      	lsls	r3, r3, #4
 801322c:	1a9b      	subs	r3, r3, r2
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	585b      	ldr	r3, [r3, r1]
 8013232:	0018      	movs	r0, r3
 8013234:	f7ff fdd9 	bl	8012dea <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 8013238:	193b      	adds	r3, r7, r4
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d106      	bne.n	801324e <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 8013240:	2102      	movs	r1, #2
 8013242:	2008      	movs	r0, #8
 8013244:	f7ff fd1c 	bl	8012c80 <__NVIC_SetPriority>
 8013248:	2008      	movs	r0, #8
 801324a:	f7ff fcff 	bl	8012c4c <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	785a      	ldrb	r2, [r3, #1]
 8013252:	213e      	movs	r1, #62	; 0x3e
 8013254:	438a      	bics	r2, r1
 8013256:	1c11      	adds	r1, r2, #0
 8013258:	2202      	movs	r2, #2
 801325a:	430a      	orrs	r2, r1
 801325c:	705a      	strb	r2, [r3, #1]
      break;
 801325e:	e04f      	b.n	8013300 <CAD_StateMachine+0x1a8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8013260:	240f      	movs	r4, #15
 8013262:	193b      	adds	r3, r7, r4
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	0018      	movs	r0, r3
 8013268:	f001 fcfc 	bl	8014c64 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 801326c:	193b      	adds	r3, r7, r4
 801326e:	781a      	ldrb	r2, [r3, #0]
 8013270:	493c      	ldr	r1, [pc, #240]	; (8013364 <CAD_StateMachine+0x20c>)
 8013272:	0013      	movs	r3, r2
 8013274:	011b      	lsls	r3, r3, #4
 8013276:	1a9b      	subs	r3, r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	18cb      	adds	r3, r1, r3
 801327c:	3334      	adds	r3, #52	; 0x34
 801327e:	2200      	movs	r2, #0
 8013280:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2200      	movs	r2, #0
 8013286:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	781a      	ldrb	r2, [r3, #0]
 801328c:	2103      	movs	r1, #3
 801328e:	438a      	bics	r2, r1
 8013290:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	2201      	movs	r2, #1
 8013296:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8013298:	f7f6 f870 	bl	800937c <HAL_GetTick>
 801329c:	0002      	movs	r2, r0
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 80132a2:	231a      	movs	r3, #26
 80132a4:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	785a      	ldrb	r2, [r3, #1]
 80132aa:	213e      	movs	r1, #62	; 0x3e
 80132ac:	438a      	bics	r2, r1
 80132ae:	1c11      	adds	r1, r2, #0
 80132b0:	221a      	movs	r2, #26
 80132b2:	430a      	orrs	r2, r1
 80132b4:	705a      	strb	r2, [r3, #1]
      break;
 80132b6:	e023      	b.n	8013300 <CAD_StateMachine+0x1a8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80132b8:	f7f6 f860 	bl	800937c <HAL_GetTick>
 80132bc:	0002      	movs	r2, r0
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	1ad3      	subs	r3, r2, r3
 80132c4:	2b1a      	cmp	r3, #26
 80132c6:	d91a      	bls.n	80132fe <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 80132c8:	230f      	movs	r3, #15
 80132ca:	18fb      	adds	r3, r7, r3
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	0018      	movs	r0, r3
 80132d0:	f001 fc18 	bl	8014b04 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	785a      	ldrb	r2, [r3, #1]
 80132d8:	213e      	movs	r1, #62	; 0x3e
 80132da:	438a      	bics	r2, r1
 80132dc:	1c11      	adds	r1, r2, #0
 80132de:	2202      	movs	r2, #2
 80132e0:	430a      	orrs	r2, r1
 80132e2:	705a      	strb	r2, [r3, #1]
      }
      break;
 80132e4:	e00b      	b.n	80132fe <CAD_StateMachine+0x1a6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	687c      	ldr	r4, [r7, #4]
 80132ec:	68b9      	ldr	r1, [r7, #8]
 80132ee:	220f      	movs	r2, #15
 80132f0:	18ba      	adds	r2, r7, r2
 80132f2:	7810      	ldrb	r0, [r2, #0]
 80132f4:	0022      	movs	r2, r4
 80132f6:	4798      	blx	r3
 80132f8:	0003      	movs	r3, r0
 80132fa:	617b      	str	r3, [r7, #20]
      break;
 80132fc:	e000      	b.n	8013300 <CAD_StateMachine+0x1a8>
      break;
 80132fe:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	785b      	ldrb	r3, [r3, #1]
 8013304:	069b      	lsls	r3, r3, #26
 8013306:	0edb      	lsrs	r3, r3, #27
 8013308:	b2da      	uxtb	r2, r3
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	789b      	ldrb	r3, [r3, #2]
 801330e:	069b      	lsls	r3, r3, #26
 8013310:	0edb      	lsrs	r3, r3, #27
 8013312:	b2db      	uxtb	r3, r3
 8013314:	429a      	cmp	r2, r3
 8013316:	d01e      	beq.n	8013356 <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	785b      	ldrb	r3, [r3, #1]
 801331c:	069b      	lsls	r3, r3, #26
 801331e:	0edb      	lsrs	r3, r3, #27
 8013320:	b2da      	uxtb	r2, r3
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	211f      	movs	r1, #31
 8013326:	400a      	ands	r2, r1
 8013328:	1890      	adds	r0, r2, r2
 801332a:	789a      	ldrb	r2, [r3, #2]
 801332c:	213e      	movs	r1, #62	; 0x3e
 801332e:	438a      	bics	r2, r1
 8013330:	1c11      	adds	r1, r2, #0
 8013332:	1c02      	adds	r2, r0, #0
 8013334:	430a      	orrs	r2, r1
 8013336:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	785b      	ldrb	r3, [r3, #1]
 801333c:	069b      	lsls	r3, r3, #26
 801333e:	0edb      	lsrs	r3, r3, #27
 8013340:	b2db      	uxtb	r3, r3
 8013342:	001a      	movs	r2, r3
 8013344:	230f      	movs	r3, #15
 8013346:	18fb      	adds	r3, r7, r3
 8013348:	7819      	ldrb	r1, [r3, #0]
 801334a:	2300      	movs	r3, #0
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	2300      	movs	r3, #0
 8013350:	2005      	movs	r0, #5
 8013352:	f7ff fb33 	bl	80129bc <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 8013356:	697b      	ldr	r3, [r7, #20]
}
 8013358:	0018      	movs	r0, r3
 801335a:	46bd      	mov	sp, r7
 801335c:	b007      	add	sp, #28
 801335e:	bd90      	pop	{r4, r7, pc}
 8013360:	20000594 	.word	0x20000594
 8013364:	200005ac 	.word	0x200005ac

08013368 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b086      	sub	sp, #24
 801336c:	af00      	add	r7, sp, #0
 801336e:	0002      	movs	r2, r0
 8013370:	1dfb      	adds	r3, r7, #7
 8013372:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013374:	1dfb      	adds	r3, r7, #7
 8013376:	781a      	ldrb	r2, [r3, #0]
 8013378:	0013      	movs	r3, r2
 801337a:	005b      	lsls	r3, r3, #1
 801337c:	189b      	adds	r3, r3, r2
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	4a45      	ldr	r2, [pc, #276]	; (8013498 <CAD_Check_HW_SNK+0x130>)
 8013382:	189b      	adds	r3, r3, r2
 8013384:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8013386:	1dfb      	adds	r3, r7, #7
 8013388:	781a      	ldrb	r2, [r3, #0]
 801338a:	4944      	ldr	r1, [pc, #272]	; (801349c <CAD_Check_HW_SNK+0x134>)
 801338c:	0013      	movs	r3, r2
 801338e:	011b      	lsls	r3, r3, #4
 8013390:	1a9b      	subs	r3, r3, r2
 8013392:	009b      	lsls	r3, r3, #2
 8013394:	585b      	ldr	r3, [r3, r1]
 8013396:	695a      	ldr	r2, [r3, #20]
 8013398:	23c0      	movs	r3, #192	; 0xc0
 801339a:	029b      	lsls	r3, r3, #10
 801339c:	4013      	ands	r3, r2
 801339e:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 80133a0:	1dfb      	adds	r3, r7, #7
 80133a2:	781a      	ldrb	r2, [r3, #0]
 80133a4:	493d      	ldr	r1, [pc, #244]	; (801349c <CAD_Check_HW_SNK+0x134>)
 80133a6:	0013      	movs	r3, r2
 80133a8:	011b      	lsls	r3, r3, #4
 80133aa:	1a9b      	subs	r3, r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	585b      	ldr	r3, [r3, r1]
 80133b0:	695a      	ldr	r2, [r3, #20]
 80133b2:	23c0      	movs	r3, #192	; 0xc0
 80133b4:	031b      	lsls	r3, r3, #12
 80133b6:	4013      	ands	r3, r2
 80133b8:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	781a      	ldrb	r2, [r3, #0]
 80133be:	2103      	movs	r1, #3
 80133c0:	438a      	bics	r2, r1
 80133c2:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	781a      	ldrb	r2, [r3, #0]
 80133c8:	211c      	movs	r1, #28
 80133ca:	438a      	bics	r2, r1
 80133cc:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d02c      	beq.n	801342e <CAD_Check_HW_SNK+0xc6>
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d129      	bne.n	801342e <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	781a      	ldrb	r2, [r3, #0]
 80133de:	211c      	movs	r1, #28
 80133e0:	438a      	bics	r2, r1
 80133e2:	1c11      	adds	r1, r2, #0
 80133e4:	2204      	movs	r2, #4
 80133e6:	430a      	orrs	r2, r1
 80133e8:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	781a      	ldrb	r2, [r3, #0]
 80133ee:	2103      	movs	r1, #3
 80133f0:	438a      	bics	r2, r1
 80133f2:	1c11      	adds	r1, r2, #0
 80133f4:	2201      	movs	r2, #1
 80133f6:	430a      	orrs	r2, r1
 80133f8:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	0c18      	lsrs	r0, r3, #16
 80133fe:	1dfb      	adds	r3, r7, #7
 8013400:	781a      	ldrb	r2, [r3, #0]
 8013402:	4926      	ldr	r1, [pc, #152]	; (801349c <CAD_Check_HW_SNK+0x134>)
 8013404:	0013      	movs	r3, r2
 8013406:	011b      	lsls	r3, r3, #4
 8013408:	1a9b      	subs	r3, r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	18cb      	adds	r3, r1, r3
 801340e:	3310      	adds	r3, #16
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	1c01      	adds	r1, r0, #0
 8013414:	2203      	movs	r2, #3
 8013416:	400a      	ands	r2, r1
 8013418:	b2d2      	uxtb	r2, r2
 801341a:	2103      	movs	r1, #3
 801341c:	400a      	ands	r2, r1
 801341e:	0090      	lsls	r0, r2, #2
 8013420:	789a      	ldrb	r2, [r3, #2]
 8013422:	210c      	movs	r1, #12
 8013424:	438a      	bics	r2, r1
 8013426:	1c11      	adds	r1, r2, #0
 8013428:	1c02      	adds	r2, r0, #0
 801342a:	430a      	orrs	r2, r1
 801342c:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d12c      	bne.n	801348e <CAD_Check_HW_SNK+0x126>
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d029      	beq.n	801348e <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	781a      	ldrb	r2, [r3, #0]
 801343e:	211c      	movs	r1, #28
 8013440:	438a      	bics	r2, r1
 8013442:	1c11      	adds	r1, r2, #0
 8013444:	2204      	movs	r2, #4
 8013446:	430a      	orrs	r2, r1
 8013448:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	781a      	ldrb	r2, [r3, #0]
 801344e:	2103      	movs	r1, #3
 8013450:	438a      	bics	r2, r1
 8013452:	1c11      	adds	r1, r2, #0
 8013454:	2202      	movs	r2, #2
 8013456:	430a      	orrs	r2, r1
 8013458:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	0c98      	lsrs	r0, r3, #18
 801345e:	1dfb      	adds	r3, r7, #7
 8013460:	781a      	ldrb	r2, [r3, #0]
 8013462:	490e      	ldr	r1, [pc, #56]	; (801349c <CAD_Check_HW_SNK+0x134>)
 8013464:	0013      	movs	r3, r2
 8013466:	011b      	lsls	r3, r3, #4
 8013468:	1a9b      	subs	r3, r3, r2
 801346a:	009b      	lsls	r3, r3, #2
 801346c:	18cb      	adds	r3, r1, r3
 801346e:	3310      	adds	r3, #16
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	1c01      	adds	r1, r0, #0
 8013474:	2203      	movs	r2, #3
 8013476:	400a      	ands	r2, r1
 8013478:	b2d2      	uxtb	r2, r2
 801347a:	2103      	movs	r1, #3
 801347c:	400a      	ands	r2, r1
 801347e:	0090      	lsls	r0, r2, #2
 8013480:	789a      	ldrb	r2, [r3, #2]
 8013482:	210c      	movs	r1, #12
 8013484:	438a      	bics	r2, r1
 8013486:	1c11      	adds	r1, r2, #0
 8013488:	1c02      	adds	r2, r0, #0
 801348a:	430a      	orrs	r2, r1
 801348c:	709a      	strb	r2, [r3, #2]
  }
}
 801348e:	46c0      	nop			; (mov r8, r8)
 8013490:	46bd      	mov	sp, r7
 8013492:	b006      	add	sp, #24
 8013494:	bd80      	pop	{r7, pc}
 8013496:	46c0      	nop			; (mov r8, r8)
 8013498:	20000594 	.word	0x20000594
 801349c:	200005ac 	.word	0x200005ac

080134a0 <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	0002      	movs	r2, r0
 80134a8:	1dfb      	adds	r3, r7, #7
 80134aa:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80134ac:	1dfb      	adds	r3, r7, #7
 80134ae:	781a      	ldrb	r2, [r3, #0]
 80134b0:	0013      	movs	r3, r2
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	189b      	adds	r3, r3, r2
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4a21      	ldr	r2, [pc, #132]	; (8013540 <ManageStateDetached_SNK+0xa0>)
 80134ba:	189b      	adds	r3, r3, r2
 80134bc:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80134be:	2302      	movs	r3, #2
 80134c0:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 80134c2:	1dfb      	adds	r3, r7, #7
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	0018      	movs	r0, r3
 80134c8:	f7ff ff4e 	bl	8013368 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80134cc:	68bb      	ldr	r3, [r7, #8]
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	221c      	movs	r2, #28
 80134d2:	4013      	ands	r3, r2
 80134d4:	b2db      	uxtb	r3, r3
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d103      	bne.n	80134e2 <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 80134da:	2301      	movs	r3, #1
 80134dc:	425b      	negs	r3, r3
 80134de:	60fb      	str	r3, [r7, #12]
 80134e0:	e029      	b.n	8013536 <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 80134e2:	f7f5 ff4b 	bl	800937c <HAL_GetTick>
 80134e6:	0002      	movs	r2, r0
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	785a      	ldrb	r2, [r3, #1]
 80134f0:	213e      	movs	r1, #62	; 0x3e
 80134f2:	438a      	bics	r2, r1
 80134f4:	1c11      	adds	r1, r2, #0
 80134f6:	2204      	movs	r2, #4
 80134f8:	430a      	orrs	r2, r1
 80134fa:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 80134fc:	2001      	movs	r0, #1
 80134fe:	f7f5 ff47 	bl	8009390 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8013502:	1dfb      	adds	r3, r7, #7
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	0018      	movs	r0, r3
 8013508:	f7ff ff2e 	bl	8013368 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	781b      	ldrb	r3, [r3, #0]
 8013510:	221c      	movs	r2, #28
 8013512:	4013      	ands	r3, r2
 8013514:	b2db      	uxtb	r3, r3
 8013516:	2b00      	cmp	r3, #0
 8013518:	d108      	bne.n	801352c <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	785a      	ldrb	r2, [r3, #1]
 801351e:	213e      	movs	r1, #62	; 0x3e
 8013520:	438a      	bics	r2, r1
 8013522:	1c11      	adds	r1, r2, #0
 8013524:	2202      	movs	r2, #2
 8013526:	430a      	orrs	r2, r1
 8013528:	705a      	strb	r2, [r3, #1]
 801352a:	e004      	b.n	8013536 <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 801352c:	1dfb      	adds	r3, r7, #7
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	0018      	movs	r0, r3
 8013532:	f009 f839 	bl	801c5a8 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8013536:	68fb      	ldr	r3, [r7, #12]
}
 8013538:	0018      	movs	r0, r3
 801353a:	46bd      	mov	sp, r7
 801353c:	b004      	add	sp, #16
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20000594 	.word	0x20000594

08013544 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013544:	b590      	push	{r4, r7, lr}
 8013546:	b089      	sub	sp, #36	; 0x24
 8013548:	af00      	add	r7, sp, #0
 801354a:	60b9      	str	r1, [r7, #8]
 801354c:	607a      	str	r2, [r7, #4]
 801354e:	240f      	movs	r4, #15
 8013550:	193b      	adds	r3, r7, r4
 8013552:	1c02      	adds	r2, r0, #0
 8013554:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013556:	193b      	adds	r3, r7, r4
 8013558:	781a      	ldrb	r2, [r3, #0]
 801355a:	0013      	movs	r3, r2
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	189b      	adds	r3, r3, r2
 8013560:	009b      	lsls	r3, r3, #2
 8013562:	4a3e      	ldr	r2, [pc, #248]	; (801365c <ManageStateAttachedWait_SNK+0x118>)
 8013564:	189b      	adds	r3, r3, r2
 8013566:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013568:	2302      	movs	r3, #2
 801356a:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 801356c:	f7f5 ff06 	bl	800937c <HAL_GetTick>
 8013570:	0002      	movs	r2, r0
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 801357a:	193b      	adds	r3, r7, r4
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	0018      	movs	r0, r3
 8013580:	f7ff fef2 	bl	8013368 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	221c      	movs	r2, #28
 801358a:	4013      	ands	r3, r2
 801358c:	b2db      	uxtb	r3, r3
 801358e:	2b04      	cmp	r3, #4
 8013590:	d130      	bne.n	80135f4 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	2b78      	cmp	r3, #120	; 0x78
 8013596:	d927      	bls.n	80135e8 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8013598:	193b      	adds	r3, r7, r4
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	2101      	movs	r1, #1
 801359e:	0018      	movs	r0, r3
 80135a0:	f007 fd26 	bl	801aff0 <USBPD_PWR_IF_GetVBUSStatus>
 80135a4:	0003      	movs	r3, r0
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d11e      	bne.n	80135e8 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	079b      	lsls	r3, r3, #30
 80135b0:	0f9b      	lsrs	r3, r3, #30
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	001a      	movs	r2, r3
 80135b6:	193b      	adds	r3, r7, r4
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	0011      	movs	r1, r2
 80135bc:	0018      	movs	r0, r3
 80135be:	f001 fbf3 	bl	8014da8 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	785a      	ldrb	r2, [r3, #1]
 80135c6:	213e      	movs	r1, #62	; 0x3e
 80135c8:	438a      	bics	r2, r1
 80135ca:	1c11      	adds	r1, r2, #0
 80135cc:	2206      	movs	r2, #6
 80135ce:	430a      	orrs	r2, r1
 80135d0:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	2202      	movs	r2, #2
 80135d6:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	079b      	lsls	r3, r3, #30
 80135de:	0f9b      	lsrs	r3, r3, #30
 80135e0:	b2db      	uxtb	r3, r3
 80135e2:	001a      	movs	r2, r3
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	781a      	ldrb	r2, [r3, #0]
 80135ec:	2120      	movs	r1, #32
 80135ee:	438a      	bics	r2, r1
 80135f0:	701a      	strb	r2, [r3, #0]
 80135f2:	e02e      	b.n	8013652 <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 80135f4:	69bb      	ldr	r3, [r7, #24]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	2220      	movs	r2, #32
 80135fa:	4013      	ands	r3, r2
 80135fc:	b2db      	uxtb	r3, r3
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d10c      	bne.n	801361c <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8013602:	f7f5 febb 	bl	800937c <HAL_GetTick>
 8013606:	0002      	movs	r2, r0
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	781a      	ldrb	r2, [r3, #0]
 8013610:	2120      	movs	r1, #32
 8013612:	430a      	orrs	r2, r1
 8013614:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8013616:	230c      	movs	r3, #12
 8013618:	61fb      	str	r3, [r7, #28]
 801361a:	e01a      	b.n	8013652 <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 801361c:	f7f5 feae 	bl	800937c <HAL_GetTick>
 8013620:	0002      	movs	r2, r0
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	685b      	ldr	r3, [r3, #4]
 8013626:	1ad3      	subs	r3, r2, r3
 8013628:	2b0c      	cmp	r3, #12
 801362a:	d912      	bls.n	8013652 <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	781a      	ldrb	r2, [r3, #0]
 8013630:	2120      	movs	r1, #32
 8013632:	438a      	bics	r2, r1
 8013634:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8013636:	69bb      	ldr	r3, [r7, #24]
 8013638:	785a      	ldrb	r2, [r3, #1]
 801363a:	213e      	movs	r1, #62	; 0x3e
 801363c:	438a      	bics	r2, r1
 801363e:	1c11      	adds	r1, r2, #0
 8013640:	2202      	movs	r2, #2
 8013642:	430a      	orrs	r2, r1
 8013644:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8013646:	230f      	movs	r3, #15
 8013648:	18fb      	adds	r3, r7, r3
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	0018      	movs	r0, r3
 801364e:	f008 ffc9 	bl	801c5e4 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8013652:	69fb      	ldr	r3, [r7, #28]
}
 8013654:	0018      	movs	r0, r3
 8013656:	46bd      	mov	sp, r7
 8013658:	b009      	add	sp, #36	; 0x24
 801365a:	bd90      	pop	{r4, r7, pc}
 801365c:	20000594 	.word	0x20000594

08013660 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013660:	b590      	push	{r4, r7, lr}
 8013662:	b089      	sub	sp, #36	; 0x24
 8013664:	af00      	add	r7, sp, #0
 8013666:	60b9      	str	r1, [r7, #8]
 8013668:	607a      	str	r2, [r7, #4]
 801366a:	210f      	movs	r1, #15
 801366c:	187b      	adds	r3, r7, r1
 801366e:	1c02      	adds	r2, r0, #0
 8013670:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013672:	0008      	movs	r0, r1
 8013674:	183b      	adds	r3, r7, r0
 8013676:	781a      	ldrb	r2, [r3, #0]
 8013678:	0013      	movs	r3, r2
 801367a:	005b      	lsls	r3, r3, #1
 801367c:	189b      	adds	r3, r3, r2
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	4a2e      	ldr	r2, [pc, #184]	; (801373c <ManageStateAttached_SNK+0xdc>)
 8013682:	189b      	adds	r3, r3, r2
 8013684:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013686:	2302      	movs	r3, #2
 8013688:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 801368a:	2300      	movs	r3, #0
 801368c:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 801368e:	183b      	adds	r3, r7, r0
 8013690:	781a      	ldrb	r2, [r3, #0]
 8013692:	492b      	ldr	r1, [pc, #172]	; (8013740 <ManageStateAttached_SNK+0xe0>)
 8013694:	0013      	movs	r3, r2
 8013696:	011b      	lsls	r3, r3, #4
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	18cb      	adds	r3, r1, r3
 801369e:	3334      	adds	r3, #52	; 0x34
 80136a0:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d10c      	bne.n	80136c0 <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80136a6:	183b      	adds	r3, r7, r0
 80136a8:	781a      	ldrb	r2, [r3, #0]
 80136aa:	4925      	ldr	r1, [pc, #148]	; (8013740 <ManageStateAttached_SNK+0xe0>)
 80136ac:	0013      	movs	r3, r2
 80136ae:	011b      	lsls	r3, r3, #4
 80136b0:	1a9b      	subs	r3, r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	585b      	ldr	r3, [r3, r1]
 80136b6:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 80136b8:	23c0      	movs	r3, #192	; 0xc0
 80136ba:	029b      	lsls	r3, r3, #10
 80136bc:	4013      	ands	r3, r2
 80136be:	e00c      	b.n	80136da <ManageStateAttached_SNK+0x7a>
 80136c0:	230f      	movs	r3, #15
 80136c2:	18fb      	adds	r3, r7, r3
 80136c4:	781a      	ldrb	r2, [r3, #0]
 80136c6:	491e      	ldr	r1, [pc, #120]	; (8013740 <ManageStateAttached_SNK+0xe0>)
 80136c8:	0013      	movs	r3, r2
 80136ca:	011b      	lsls	r3, r3, #4
 80136cc:	1a9b      	subs	r3, r3, r2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	585b      	ldr	r3, [r3, r1]
 80136d2:	695a      	ldr	r2, [r3, #20]
 80136d4:	23c0      	movs	r3, #192	; 0xc0
 80136d6:	031b      	lsls	r3, r3, #12
 80136d8:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 80136da:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 80136dc:	240f      	movs	r4, #15
 80136de:	193b      	adds	r3, r7, r4
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	2102      	movs	r1, #2
 80136e4:	0018      	movs	r0, r3
 80136e6:	f007 fc83 	bl	801aff0 <USBPD_PWR_IF_GetVBUSStatus>
 80136ea:	0003      	movs	r3, r0
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d11e      	bne.n	801372e <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 80136f0:	697a      	ldr	r2, [r7, #20]
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d11a      	bne.n	801372e <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 80136f8:	193b      	adds	r3, r7, r4
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	0018      	movs	r0, r3
 80136fe:	f001 fcb5 	bl	801506c <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	781a      	ldrb	r2, [r3, #0]
 8013706:	211c      	movs	r1, #28
 8013708:	438a      	bics	r2, r1
 801370a:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 801370c:	69bb      	ldr	r3, [r7, #24]
 801370e:	785a      	ldrb	r2, [r3, #1]
 8013710:	213e      	movs	r1, #62	; 0x3e
 8013712:	438a      	bics	r2, r1
 8013714:	1c11      	adds	r1, r2, #0
 8013716:	2202      	movs	r2, #2
 8013718:	430a      	orrs	r2, r1
 801371a:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	2201      	movs	r2, #1
 8013720:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2200      	movs	r2, #0
 8013726:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8013728:	2300      	movs	r3, #0
 801372a:	61fb      	str	r3, [r7, #28]
 801372c:	e001      	b.n	8013732 <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 801372e:	230a      	movs	r3, #10
 8013730:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8013732:	69fb      	ldr	r3, [r7, #28]
}
 8013734:	0018      	movs	r0, r3
 8013736:	46bd      	mov	sp, r7
 8013738:	b009      	add	sp, #36	; 0x24
 801373a:	bd90      	pop	{r4, r7, pc}
 801373c:	20000594 	.word	0x20000594
 8013740:	200005ac 	.word	0x200005ac

08013744 <LL_AHB1_GRP1_EnableClock>:
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 801374c:	4b07      	ldr	r3, [pc, #28]	; (801376c <LL_AHB1_GRP1_EnableClock+0x28>)
 801374e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013750:	4b06      	ldr	r3, [pc, #24]	; (801376c <LL_AHB1_GRP1_EnableClock+0x28>)
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	430a      	orrs	r2, r1
 8013756:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8013758:	4b04      	ldr	r3, [pc, #16]	; (801376c <LL_AHB1_GRP1_EnableClock+0x28>)
 801375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801375c:	687a      	ldr	r2, [r7, #4]
 801375e:	4013      	ands	r3, r2
 8013760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013762:	68fb      	ldr	r3, [r7, #12]
}
 8013764:	46c0      	nop			; (mov r8, r8)
 8013766:	46bd      	mov	sp, r7
 8013768:	b004      	add	sp, #16
 801376a:	bd80      	pop	{r7, pc}
 801376c:	40021000 	.word	0x40021000

08013770 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	0002      	movs	r2, r0
 8013778:	1dfb      	adds	r3, r7, #7
 801377a:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 801377c:	4b02      	ldr	r3, [pc, #8]	; (8013788 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 801377e:	0018      	movs	r0, r3
 8013780:	46bd      	mov	sp, r7
 8013782:	b002      	add	sp, #8
 8013784:	bd80      	pop	{r7, pc}
 8013786:	46c0      	nop			; (mov r8, r8)
 8013788:	4000a000 	.word	0x4000a000

0801378c <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 801378c:	b590      	push	{r4, r7, lr}
 801378e:	b08f      	sub	sp, #60	; 0x3c
 8013790:	af00      	add	r7, sp, #0
 8013792:	0002      	movs	r2, r0
 8013794:	1dfb      	adds	r3, r7, #7
 8013796:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8013798:	240c      	movs	r4, #12
 801379a:	193b      	adds	r3, r7, r4
 801379c:	0018      	movs	r0, r3
 801379e:	f7fc fcad 	bl	80100fc <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80137a2:	193b      	adds	r3, r7, r4
 80137a4:	2200      	movs	r2, #0
 80137a6:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 80137a8:	193b      	adds	r3, r7, r4
 80137aa:	2200      	movs	r2, #0
 80137ac:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 80137ae:	193b      	adds	r3, r7, r4
 80137b0:	2200      	movs	r2, #0
 80137b2:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 80137b4:	193b      	adds	r3, r7, r4
 80137b6:	2280      	movs	r2, #128	; 0x80
 80137b8:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80137ba:	193b      	adds	r3, r7, r4
 80137bc:	2200      	movs	r2, #0
 80137be:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80137c0:	193b      	adds	r3, r7, r4
 80137c2:	2200      	movs	r2, #0
 80137c4:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 80137c6:	193b      	adds	r3, r7, r4
 80137c8:	2200      	movs	r2, #0
 80137ca:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80137cc:	193b      	adds	r3, r7, r4
 80137ce:	2200      	movs	r2, #0
 80137d0:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80137d2:	193b      	adds	r3, r7, r4
 80137d4:	2200      	movs	r2, #0
 80137d6:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80137d8:	193b      	adds	r3, r7, r4
 80137da:	2280      	movs	r2, #128	; 0x80
 80137dc:	0192      	lsls	r2, r2, #6
 80137de:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 80137e0:	1dfb      	adds	r3, r7, #7
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d10c      	bne.n	8013802 <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 80137e8:	2001      	movs	r0, #1
 80137ea:	f7ff ffab 	bl	8013744 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 80137ee:	193b      	adds	r3, r7, r4
 80137f0:	223a      	movs	r2, #58	; 0x3a
 80137f2:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 80137f4:	193b      	adds	r3, r7, r4
 80137f6:	4806      	ldr	r0, [pc, #24]	; (8013810 <USBPD_HW_Init_DMARxInstance+0x84>)
 80137f8:	001a      	movs	r2, r3
 80137fa:	2100      	movs	r1, #0
 80137fc:	f7fc fc3e 	bl	801007c <LL_DMA_Init>
      break;
 8013800:	e000      	b.n	8013804 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8013802:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8013804:	4b03      	ldr	r3, [pc, #12]	; (8013814 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 8013806:	0018      	movs	r0, r3
 8013808:	46bd      	mov	sp, r7
 801380a:	b00f      	add	sp, #60	; 0x3c
 801380c:	bd90      	pop	{r4, r7, pc}
 801380e:	46c0      	nop			; (mov r8, r8)
 8013810:	40020000 	.word	0x40020000
 8013814:	40020008 	.word	0x40020008

08013818 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	0002      	movs	r2, r0
 8013820:	1dfb      	adds	r3, r7, #7
 8013822:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8013824:	46c0      	nop			; (mov r8, r8)
 8013826:	46bd      	mov	sp, r7
 8013828:	b002      	add	sp, #8
 801382a:	bd80      	pop	{r7, pc}

0801382c <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 801382c:	b590      	push	{r4, r7, lr}
 801382e:	b08f      	sub	sp, #60	; 0x3c
 8013830:	af00      	add	r7, sp, #0
 8013832:	0002      	movs	r2, r0
 8013834:	1dfb      	adds	r3, r7, #7
 8013836:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8013838:	240c      	movs	r4, #12
 801383a:	193b      	adds	r3, r7, r4
 801383c:	0018      	movs	r0, r3
 801383e:	f7fc fc5d 	bl	80100fc <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8013842:	193b      	adds	r3, r7, r4
 8013844:	2210      	movs	r2, #16
 8013846:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8013848:	193b      	adds	r3, r7, r4
 801384a:	2200      	movs	r2, #0
 801384c:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 801384e:	193b      	adds	r3, r7, r4
 8013850:	2200      	movs	r2, #0
 8013852:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8013854:	193b      	adds	r3, r7, r4
 8013856:	2280      	movs	r2, #128	; 0x80
 8013858:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 801385a:	193b      	adds	r3, r7, r4
 801385c:	2200      	movs	r2, #0
 801385e:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8013860:	193b      	adds	r3, r7, r4
 8013862:	2200      	movs	r2, #0
 8013864:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8013866:	193b      	adds	r3, r7, r4
 8013868:	2200      	movs	r2, #0
 801386a:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801386c:	193b      	adds	r3, r7, r4
 801386e:	2200      	movs	r2, #0
 8013870:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8013872:	193b      	adds	r3, r7, r4
 8013874:	2200      	movs	r2, #0
 8013876:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8013878:	1dfb      	adds	r3, r7, #7
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d110      	bne.n	80138a2 <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8013880:	2001      	movs	r0, #1
 8013882:	f7ff ff5f 	bl	8013744 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8013886:	193b      	adds	r3, r7, r4
 8013888:	223b      	movs	r2, #59	; 0x3b
 801388a:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801388c:	193b      	adds	r3, r7, r4
 801388e:	2280      	movs	r2, #128	; 0x80
 8013890:	0152      	lsls	r2, r2, #5
 8013892:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8013894:	193b      	adds	r3, r7, r4
 8013896:	4806      	ldr	r0, [pc, #24]	; (80138b0 <USBPD_HW_Init_DMATxInstance+0x84>)
 8013898:	001a      	movs	r2, r3
 801389a:	2101      	movs	r1, #1
 801389c:	f7fc fbee 	bl	801007c <LL_DMA_Init>
      break;
 80138a0:	e000      	b.n	80138a4 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80138a2:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 80138a4:	4b03      	ldr	r3, [pc, #12]	; (80138b4 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 80138a6:	0018      	movs	r0, r3
 80138a8:	46bd      	mov	sp, r7
 80138aa:	b00f      	add	sp, #60	; 0x3c
 80138ac:	bd90      	pop	{r4, r7, pc}
 80138ae:	46c0      	nop			; (mov r8, r8)
 80138b0:	40020000 	.word	0x40020000
 80138b4:	4002001c 	.word	0x4002001c

080138b8 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b082      	sub	sp, #8
 80138bc:	af00      	add	r7, sp, #0
 80138be:	0002      	movs	r2, r0
 80138c0:	1dfb      	adds	r3, r7, #7
 80138c2:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 80138c4:	46c0      	nop			; (mov r8, r8)
 80138c6:	46bd      	mov	sp, r7
 80138c8:	b002      	add	sp, #8
 80138ca:	bd80      	pop	{r7, pc}

080138cc <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	0002      	movs	r2, r0
 80138d4:	1dfb      	adds	r3, r7, #7
 80138d6:	701a      	strb	r2, [r3, #0]
 80138d8:	1dbb      	adds	r3, r7, #6
 80138da:	1c0a      	adds	r2, r1, #0
 80138dc:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 80138de:	46c0      	nop			; (mov r8, r8)
  }
}
 80138e0:	46c0      	nop			; (mov r8, r8)
 80138e2:	46bd      	mov	sp, r7
 80138e4:	b002      	add	sp, #8
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	699b      	ldr	r3, [r3, #24]
 80138f4:	2280      	movs	r2, #128	; 0x80
 80138f6:	0212      	lsls	r2, r2, #8
 80138f8:	431a      	orrs	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	619a      	str	r2, [r3, #24]
}
 80138fe:	46c0      	nop			; (mov r8, r8)
 8013900:	46bd      	mov	sp, r7
 8013902:	b002      	add	sp, #8
 8013904:	bd80      	pop	{r7, pc}

08013906 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8013906:	b580      	push	{r7, lr}
 8013908:	b082      	sub	sp, #8
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	699b      	ldr	r3, [r3, #24]
 8013912:	2280      	movs	r2, #128	; 0x80
 8013914:	01d2      	lsls	r2, r2, #7
 8013916:	431a      	orrs	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	619a      	str	r2, [r3, #24]
}
 801391c:	46c0      	nop			; (mov r8, r8)
 801391e:	46bd      	mov	sp, r7
 8013920:	b002      	add	sp, #8
 8013922:	bd80      	pop	{r7, pc}

08013924 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	699b      	ldr	r3, [r3, #24]
 8013930:	2280      	movs	r2, #128	; 0x80
 8013932:	0152      	lsls	r2, r2, #5
 8013934:	431a      	orrs	r2, r3
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	619a      	str	r2, [r3, #24]
}
 801393a:	46c0      	nop			; (mov r8, r8)
 801393c:	46bd      	mov	sp, r7
 801393e:	b002      	add	sp, #8
 8013940:	bd80      	pop	{r7, pc}

08013942 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8013942:	b580      	push	{r7, lr}
 8013944:	b082      	sub	sp, #8
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	699b      	ldr	r3, [r3, #24]
 801394e:	2280      	movs	r2, #128	; 0x80
 8013950:	0112      	lsls	r2, r2, #4
 8013952:	431a      	orrs	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	619a      	str	r2, [r3, #24]
}
 8013958:	46c0      	nop			; (mov r8, r8)
 801395a:	46bd      	mov	sp, r7
 801395c:	b002      	add	sp, #8
 801395e:	bd80      	pop	{r7, pc}

08013960 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	699b      	ldr	r3, [r3, #24]
 801396c:	2280      	movs	r2, #128	; 0x80
 801396e:	00d2      	lsls	r2, r2, #3
 8013970:	431a      	orrs	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	619a      	str	r2, [r3, #24]
}
 8013976:	46c0      	nop			; (mov r8, r8)
 8013978:	46bd      	mov	sp, r7
 801397a:	b002      	add	sp, #8
 801397c:	bd80      	pop	{r7, pc}

0801397e <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b082      	sub	sp, #8
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	699b      	ldr	r3, [r3, #24]
 801398a:	2280      	movs	r2, #128	; 0x80
 801398c:	0092      	lsls	r2, r2, #2
 801398e:	431a      	orrs	r2, r3
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	619a      	str	r2, [r3, #24]
}
 8013994:	46c0      	nop			; (mov r8, r8)
 8013996:	46bd      	mov	sp, r7
 8013998:	b002      	add	sp, #8
 801399a:	bd80      	pop	{r7, pc}

0801399c <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	699b      	ldr	r3, [r3, #24]
 80139a8:	2240      	movs	r2, #64	; 0x40
 80139aa:	431a      	orrs	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	619a      	str	r2, [r3, #24]
}
 80139b0:	46c0      	nop			; (mov r8, r8)
 80139b2:	46bd      	mov	sp, r7
 80139b4:	b002      	add	sp, #8
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b082      	sub	sp, #8
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	699b      	ldr	r3, [r3, #24]
 80139c4:	2220      	movs	r2, #32
 80139c6:	431a      	orrs	r2, r3
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	619a      	str	r2, [r3, #24]
}
 80139cc:	46c0      	nop			; (mov r8, r8)
 80139ce:	46bd      	mov	sp, r7
 80139d0:	b002      	add	sp, #8
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b082      	sub	sp, #8
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	699b      	ldr	r3, [r3, #24]
 80139e0:	2210      	movs	r2, #16
 80139e2:	431a      	orrs	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	619a      	str	r2, [r3, #24]
}
 80139e8:	46c0      	nop			; (mov r8, r8)
 80139ea:	46bd      	mov	sp, r7
 80139ec:	b002      	add	sp, #8
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b082      	sub	sp, #8
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	699b      	ldr	r3, [r3, #24]
 80139fc:	2208      	movs	r2, #8
 80139fe:	431a      	orrs	r2, r3
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	619a      	str	r2, [r3, #24]
}
 8013a04:	46c0      	nop			; (mov r8, r8)
 8013a06:	46bd      	mov	sp, r7
 8013a08:	b002      	add	sp, #8
 8013a0a:	bd80      	pop	{r7, pc}

08013a0c <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	699b      	ldr	r3, [r3, #24]
 8013a18:	2204      	movs	r2, #4
 8013a1a:	431a      	orrs	r2, r3
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	619a      	str	r2, [r3, #24]
}
 8013a20:	46c0      	nop			; (mov r8, r8)
 8013a22:	46bd      	mov	sp, r7
 8013a24:	b002      	add	sp, #8
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	699b      	ldr	r3, [r3, #24]
 8013a34:	2202      	movs	r2, #2
 8013a36:	431a      	orrs	r2, r3
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	619a      	str	r2, [r3, #24]
}
 8013a3c:	46c0      	nop			; (mov r8, r8)
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	b002      	add	sp, #8
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8013a48:	2000      	movs	r0, #0
 8013a4a:	f000 f803 	bl	8013a54 <PORTx_IRQHandler>
}
 8013a4e:	46c0      	nop			; (mov r8, r8)
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	0002      	movs	r2, r0
 8013a5c:	1dfb      	adds	r3, r7, #7
 8013a5e:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8013a60:	1dfb      	adds	r3, r7, #7
 8013a62:	781a      	ldrb	r2, [r3, #0]
 8013a64:	49a6      	ldr	r1, [pc, #664]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013a66:	0013      	movs	r3, r2
 8013a68:	011b      	lsls	r3, r3, #4
 8013a6a:	1a9b      	subs	r3, r3, r2
 8013a6c:	009b      	lsls	r3, r3, #2
 8013a6e:	585b      	ldr	r3, [r3, r1]
 8013a70:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	695b      	ldr	r3, [r3, #20]
 8013a76:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	691b      	ldr	r3, [r3, #16]
 8013a7c:	68ba      	ldr	r2, [r7, #8]
 8013a7e:	4013      	ands	r3, r2
 8013a80:	d100      	bne.n	8013a84 <PORTx_IRQHandler+0x30>
 8013a82:	e1fc      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2202      	movs	r2, #2
 8013a88:	4013      	ands	r3, r2
 8013a8a:	d03c      	beq.n	8013b06 <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	0018      	movs	r0, r3
 8013a90:	f7ff ffca 	bl	8013a28 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013a94:	1dfb      	adds	r3, r7, #7
 8013a96:	781a      	ldrb	r2, [r3, #0]
 8013a98:	4999      	ldr	r1, [pc, #612]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013a9a:	0013      	movs	r3, r2
 8013a9c:	011b      	lsls	r3, r3, #4
 8013a9e:	1a9b      	subs	r3, r3, r2
 8013aa0:	009b      	lsls	r3, r3, #2
 8013aa2:	18cb      	adds	r3, r1, r3
 8013aa4:	3304      	adds	r3, #4
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	6819      	ldr	r1, [r3, #0]
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	781a      	ldrb	r2, [r3, #0]
 8013aae:	4894      	ldr	r0, [pc, #592]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013ab0:	0013      	movs	r3, r2
 8013ab2:	011b      	lsls	r3, r3, #4
 8013ab4:	1a9b      	subs	r3, r3, r2
 8013ab6:	009b      	lsls	r3, r3, #2
 8013ab8:	18c3      	adds	r3, r0, r3
 8013aba:	3304      	adds	r3, #4
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2201      	movs	r2, #1
 8013ac0:	4391      	bics	r1, r2
 8013ac2:	000a      	movs	r2, r1
 8013ac4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013ac6:	46c0      	nop			; (mov r8, r8)
 8013ac8:	1dfb      	adds	r3, r7, #7
 8013aca:	781a      	ldrb	r2, [r3, #0]
 8013acc:	498c      	ldr	r1, [pc, #560]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013ace:	0013      	movs	r3, r2
 8013ad0:	011b      	lsls	r3, r3, #4
 8013ad2:	1a9b      	subs	r3, r3, r2
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	18cb      	adds	r3, r1, r3
 8013ad8:	3304      	adds	r3, #4
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2201      	movs	r2, #1
 8013ae0:	4013      	ands	r3, r2
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d0f0      	beq.n	8013ac8 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8013ae6:	1dfb      	adds	r3, r7, #7
 8013ae8:	781a      	ldrb	r2, [r3, #0]
 8013aea:	4985      	ldr	r1, [pc, #532]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013aec:	0013      	movs	r3, r2
 8013aee:	011b      	lsls	r3, r3, #4
 8013af0:	1a9b      	subs	r3, r3, r2
 8013af2:	009b      	lsls	r3, r3, #2
 8013af4:	18cb      	adds	r3, r1, r3
 8013af6:	3314      	adds	r3, #20
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	1dfa      	adds	r2, r7, #7
 8013afc:	7812      	ldrb	r2, [r2, #0]
 8013afe:	2101      	movs	r1, #1
 8013b00:	0010      	movs	r0, r2
 8013b02:	4798      	blx	r3
      return;
 8013b04:	e1bb      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	2204      	movs	r2, #4
 8013b0a:	4013      	ands	r3, r2
 8013b0c:	d03c      	beq.n	8013b88 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	0018      	movs	r0, r3
 8013b12:	f7ff ff7b 	bl	8013a0c <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013b16:	1dfb      	adds	r3, r7, #7
 8013b18:	781a      	ldrb	r2, [r3, #0]
 8013b1a:	4979      	ldr	r1, [pc, #484]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013b1c:	0013      	movs	r3, r2
 8013b1e:	011b      	lsls	r3, r3, #4
 8013b20:	1a9b      	subs	r3, r3, r2
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	18cb      	adds	r3, r1, r3
 8013b26:	3304      	adds	r3, #4
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	6819      	ldr	r1, [r3, #0]
 8013b2c:	1dfb      	adds	r3, r7, #7
 8013b2e:	781a      	ldrb	r2, [r3, #0]
 8013b30:	4873      	ldr	r0, [pc, #460]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013b32:	0013      	movs	r3, r2
 8013b34:	011b      	lsls	r3, r3, #4
 8013b36:	1a9b      	subs	r3, r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	18c3      	adds	r3, r0, r3
 8013b3c:	3304      	adds	r3, #4
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2201      	movs	r2, #1
 8013b42:	4391      	bics	r1, r2
 8013b44:	000a      	movs	r2, r1
 8013b46:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013b48:	46c0      	nop			; (mov r8, r8)
 8013b4a:	1dfb      	adds	r3, r7, #7
 8013b4c:	781a      	ldrb	r2, [r3, #0]
 8013b4e:	496c      	ldr	r1, [pc, #432]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013b50:	0013      	movs	r3, r2
 8013b52:	011b      	lsls	r3, r3, #4
 8013b54:	1a9b      	subs	r3, r3, r2
 8013b56:	009b      	lsls	r3, r3, #2
 8013b58:	18cb      	adds	r3, r1, r3
 8013b5a:	3304      	adds	r3, #4
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2201      	movs	r2, #1
 8013b62:	4013      	ands	r3, r2
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d0f0      	beq.n	8013b4a <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8013b68:	1dfb      	adds	r3, r7, #7
 8013b6a:	781a      	ldrb	r2, [r3, #0]
 8013b6c:	4964      	ldr	r1, [pc, #400]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013b6e:	0013      	movs	r3, r2
 8013b70:	011b      	lsls	r3, r3, #4
 8013b72:	1a9b      	subs	r3, r3, r2
 8013b74:	009b      	lsls	r3, r3, #2
 8013b76:	18cb      	adds	r3, r1, r3
 8013b78:	3314      	adds	r3, #20
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	1dfa      	adds	r2, r7, #7
 8013b7e:	7812      	ldrb	r2, [r2, #0]
 8013b80:	2100      	movs	r1, #0
 8013b82:	0010      	movs	r0, r2
 8013b84:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8013b86:	e17a      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	2208      	movs	r2, #8
 8013b8c:	4013      	ands	r3, r2
 8013b8e:	d03c      	beq.n	8013c0a <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	0018      	movs	r0, r3
 8013b94:	f7ff ff2c 	bl	80139f0 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8013b98:	1dfb      	adds	r3, r7, #7
 8013b9a:	781a      	ldrb	r2, [r3, #0]
 8013b9c:	4958      	ldr	r1, [pc, #352]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013b9e:	0013      	movs	r3, r2
 8013ba0:	011b      	lsls	r3, r3, #4
 8013ba2:	1a9b      	subs	r3, r3, r2
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	18cb      	adds	r3, r1, r3
 8013ba8:	3304      	adds	r3, #4
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	6819      	ldr	r1, [r3, #0]
 8013bae:	1dfb      	adds	r3, r7, #7
 8013bb0:	781a      	ldrb	r2, [r3, #0]
 8013bb2:	4853      	ldr	r0, [pc, #332]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013bb4:	0013      	movs	r3, r2
 8013bb6:	011b      	lsls	r3, r3, #4
 8013bb8:	1a9b      	subs	r3, r3, r2
 8013bba:	009b      	lsls	r3, r3, #2
 8013bbc:	18c3      	adds	r3, r0, r3
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	4391      	bics	r1, r2
 8013bc6:	000a      	movs	r2, r1
 8013bc8:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8013bca:	46c0      	nop			; (mov r8, r8)
 8013bcc:	1dfb      	adds	r3, r7, #7
 8013bce:	781a      	ldrb	r2, [r3, #0]
 8013bd0:	494b      	ldr	r1, [pc, #300]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013bd2:	0013      	movs	r3, r2
 8013bd4:	011b      	lsls	r3, r3, #4
 8013bd6:	1a9b      	subs	r3, r3, r2
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	18cb      	adds	r3, r1, r3
 8013bdc:	3304      	adds	r3, #4
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2201      	movs	r2, #1
 8013be4:	4013      	ands	r3, r2
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d0f0      	beq.n	8013bcc <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8013bea:	1dfb      	adds	r3, r7, #7
 8013bec:	781a      	ldrb	r2, [r3, #0]
 8013bee:	4944      	ldr	r1, [pc, #272]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013bf0:	0013      	movs	r3, r2
 8013bf2:	011b      	lsls	r3, r3, #4
 8013bf4:	1a9b      	subs	r3, r3, r2
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	18cb      	adds	r3, r1, r3
 8013bfa:	3314      	adds	r3, #20
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	1dfa      	adds	r2, r7, #7
 8013c00:	7812      	ldrb	r2, [r2, #0]
 8013c02:	2102      	movs	r1, #2
 8013c04:	0010      	movs	r0, r2
 8013c06:	4798      	blx	r3
      return;
 8013c08:	e139      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8013c0a:	68bb      	ldr	r3, [r7, #8]
 8013c0c:	2210      	movs	r2, #16
 8013c0e:	4013      	ands	r3, r2
 8013c10:	d004      	beq.n	8013c1c <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	0018      	movs	r0, r3
 8013c16:	f7ff fedd 	bl	80139d4 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8013c1a:	e130      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	2220      	movs	r2, #32
 8013c20:	4013      	ands	r3, r2
 8013c22:	d013      	beq.n	8013c4c <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	0018      	movs	r0, r3
 8013c28:	f7ff fec6 	bl	80139b8 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013c2c:	1dfb      	adds	r3, r7, #7
 8013c2e:	781a      	ldrb	r2, [r3, #0]
 8013c30:	4933      	ldr	r1, [pc, #204]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013c32:	0013      	movs	r3, r2
 8013c34:	011b      	lsls	r3, r3, #4
 8013c36:	1a9b      	subs	r3, r3, r2
 8013c38:	009b      	lsls	r3, r3, #2
 8013c3a:	18cb      	adds	r3, r1, r3
 8013c3c:	3324      	adds	r3, #36	; 0x24
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	1dfa      	adds	r2, r7, #7
 8013c42:	7812      	ldrb	r2, [r2, #0]
 8013c44:	2105      	movs	r1, #5
 8013c46:	0010      	movs	r0, r2
 8013c48:	4798      	blx	r3
      return;
 8013c4a:	e118      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	2240      	movs	r2, #64	; 0x40
 8013c50:	4013      	ands	r3, r2
 8013c52:	d004      	beq.n	8013c5e <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	0018      	movs	r0, r3
 8013c58:	f7ff fea0 	bl	801399c <LL_UCPD_ClearFlag_TxUND>
      return;
 8013c5c:	e10f      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8013c5e:	68ba      	ldr	r2, [r7, #8]
 8013c60:	2380      	movs	r3, #128	; 0x80
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	4013      	ands	r3, r2
 8013c66:	d023      	beq.n	8013cb0 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c6c:	2b05      	cmp	r3, #5
 8013c6e:	d10e      	bne.n	8013c8e <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8013c70:	1dfb      	adds	r3, r7, #7
 8013c72:	781a      	ldrb	r2, [r3, #0]
 8013c74:	4922      	ldr	r1, [pc, #136]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013c76:	0013      	movs	r3, r2
 8013c78:	011b      	lsls	r3, r3, #4
 8013c7a:	1a9b      	subs	r3, r3, r2
 8013c7c:	009b      	lsls	r3, r3, #2
 8013c7e:	18cb      	adds	r3, r1, r3
 8013c80:	331c      	adds	r3, #28
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	1dfa      	adds	r2, r7, #7
 8013c86:	7812      	ldrb	r2, [r2, #0]
 8013c88:	2106      	movs	r1, #6
 8013c8a:	0010      	movs	r0, r2
 8013c8c:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	0018      	movs	r0, r3
 8013c92:	f7ff fe74 	bl	801397e <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8013c96:	1dfb      	adds	r3, r7, #7
 8013c98:	781a      	ldrb	r2, [r3, #0]
 8013c9a:	4919      	ldr	r1, [pc, #100]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013c9c:	2038      	movs	r0, #56	; 0x38
 8013c9e:	0013      	movs	r3, r2
 8013ca0:	011b      	lsls	r3, r3, #4
 8013ca2:	1a9b      	subs	r3, r3, r2
 8013ca4:	009b      	lsls	r3, r3, #2
 8013ca6:	18cb      	adds	r3, r1, r3
 8013ca8:	181b      	adds	r3, r3, r0
 8013caa:	2201      	movs	r2, #1
 8013cac:	701a      	strb	r2, [r3, #0]
      return;
 8013cae:	e0e6      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8013cb0:	68ba      	ldr	r2, [r7, #8]
 8013cb2:	2380      	movs	r3, #128	; 0x80
 8013cb4:	00db      	lsls	r3, r3, #3
 8013cb6:	4013      	ands	r3, r2
 8013cb8:	d013      	beq.n	8013ce2 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013cba:	1dfb      	adds	r3, r7, #7
 8013cbc:	781a      	ldrb	r2, [r3, #0]
 8013cbe:	4910      	ldr	r1, [pc, #64]	; (8013d00 <PORTx_IRQHandler+0x2ac>)
 8013cc0:	0013      	movs	r3, r2
 8013cc2:	011b      	lsls	r3, r3, #4
 8013cc4:	1a9b      	subs	r3, r3, r2
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	18cb      	adds	r3, r1, r3
 8013cca:	331c      	adds	r3, #28
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	1dfa      	adds	r2, r7, #7
 8013cd0:	7812      	ldrb	r2, [r2, #0]
 8013cd2:	2105      	movs	r1, #5
 8013cd4:	0010      	movs	r0, r2
 8013cd6:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	0018      	movs	r0, r3
 8013cdc:	f7ff fe40 	bl	8013960 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8013ce0:	e0cd      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8013ce2:	68ba      	ldr	r2, [r7, #8]
 8013ce4:	2380      	movs	r3, #128	; 0x80
 8013ce6:	011b      	lsls	r3, r3, #4
 8013ce8:	4013      	ands	r3, r2
 8013cea:	d00d      	beq.n	8013d08 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8013cec:	1dfb      	adds	r3, r7, #7
 8013cee:	781b      	ldrb	r3, [r3, #0]
 8013cf0:	4a04      	ldr	r2, [pc, #16]	; (8013d04 <PORTx_IRQHandler+0x2b0>)
 8013cf2:	2101      	movs	r1, #1
 8013cf4:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	0018      	movs	r0, r3
 8013cfa:	f7ff fe22 	bl	8013942 <LL_UCPD_ClearFlag_RxOvr>
      return;
 8013cfe:	e0be      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
 8013d00:	200005ac 	.word	0x200005ac
 8013d04:	200005a0 	.word	0x200005a0
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8013d08:	68ba      	ldr	r2, [r7, #8]
 8013d0a:	2380      	movs	r3, #128	; 0x80
 8013d0c:	015b      	lsls	r3, r3, #5
 8013d0e:	4013      	ands	r3, r2
 8013d10:	d100      	bne.n	8013d14 <PORTx_IRQHandler+0x2c0>
 8013d12:	e096      	b.n	8013e42 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8013d14:	1dfb      	adds	r3, r7, #7
 8013d16:	781a      	ldrb	r2, [r3, #0]
 8013d18:	495a      	ldr	r1, [pc, #360]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013d1a:	2038      	movs	r0, #56	; 0x38
 8013d1c:	0013      	movs	r3, r2
 8013d1e:	011b      	lsls	r3, r3, #4
 8013d20:	1a9b      	subs	r3, r3, r2
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	18cb      	adds	r3, r1, r3
 8013d26:	181b      	adds	r3, r3, r0
 8013d28:	2200      	movs	r2, #0
 8013d2a:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	0018      	movs	r0, r3
 8013d30:	f7ff fdf8 	bl	8013924 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8013d34:	1dfb      	adds	r3, r7, #7
 8013d36:	781a      	ldrb	r2, [r3, #0]
 8013d38:	4952      	ldr	r1, [pc, #328]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013d3a:	0013      	movs	r3, r2
 8013d3c:	011b      	lsls	r3, r3, #4
 8013d3e:	1a9b      	subs	r3, r3, r2
 8013d40:	009b      	lsls	r3, r3, #2
 8013d42:	18cb      	adds	r3, r1, r3
 8013d44:	3308      	adds	r3, #8
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	6819      	ldr	r1, [r3, #0]
 8013d4a:	1dfb      	adds	r3, r7, #7
 8013d4c:	781a      	ldrb	r2, [r3, #0]
 8013d4e:	484d      	ldr	r0, [pc, #308]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013d50:	0013      	movs	r3, r2
 8013d52:	011b      	lsls	r3, r3, #4
 8013d54:	1a9b      	subs	r3, r3, r2
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	18c3      	adds	r3, r0, r3
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	4391      	bics	r1, r2
 8013d62:	000a      	movs	r2, r1
 8013d64:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8013d66:	46c0      	nop			; (mov r8, r8)
 8013d68:	1dfb      	adds	r3, r7, #7
 8013d6a:	781a      	ldrb	r2, [r3, #0]
 8013d6c:	4945      	ldr	r1, [pc, #276]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013d6e:	0013      	movs	r3, r2
 8013d70:	011b      	lsls	r3, r3, #4
 8013d72:	1a9b      	subs	r3, r3, r2
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	18cb      	adds	r3, r1, r3
 8013d78:	3308      	adds	r3, #8
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	4013      	ands	r3, r2
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d0f0      	beq.n	8013d68 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8013d86:	1dfb      	adds	r3, r7, #7
 8013d88:	781a      	ldrb	r2, [r3, #0]
 8013d8a:	493e      	ldr	r1, [pc, #248]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013d8c:	0013      	movs	r3, r2
 8013d8e:	011b      	lsls	r3, r3, #4
 8013d90:	1a9b      	subs	r3, r3, r2
 8013d92:	009b      	lsls	r3, r3, #2
 8013d94:	18cb      	adds	r3, r1, r3
 8013d96:	3330      	adds	r3, #48	; 0x30
 8013d98:	6818      	ldr	r0, [r3, #0]
 8013d9a:	1dfb      	adds	r3, r7, #7
 8013d9c:	781a      	ldrb	r2, [r3, #0]
 8013d9e:	4939      	ldr	r1, [pc, #228]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013da0:	0013      	movs	r3, r2
 8013da2:	011b      	lsls	r3, r3, #4
 8013da4:	1a9b      	subs	r3, r3, r2
 8013da6:	009b      	lsls	r3, r3, #2
 8013da8:	18cb      	adds	r3, r1, r3
 8013daa:	3308      	adds	r3, #8
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	0002      	movs	r2, r0
 8013db0:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8013db2:	1dfb      	adds	r3, r7, #7
 8013db4:	781a      	ldrb	r2, [r3, #0]
 8013db6:	4933      	ldr	r1, [pc, #204]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013db8:	0013      	movs	r3, r2
 8013dba:	011b      	lsls	r3, r3, #4
 8013dbc:	1a9b      	subs	r3, r3, r2
 8013dbe:	009b      	lsls	r3, r3, #2
 8013dc0:	18cb      	adds	r3, r1, r3
 8013dc2:	3308      	adds	r3, #8
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2284      	movs	r2, #132	; 0x84
 8013dc8:	0052      	lsls	r2, r2, #1
 8013dca:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8013dcc:	1dfb      	adds	r3, r7, #7
 8013dce:	781a      	ldrb	r2, [r3, #0]
 8013dd0:	492c      	ldr	r1, [pc, #176]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013dd2:	0013      	movs	r3, r2
 8013dd4:	011b      	lsls	r3, r3, #4
 8013dd6:	1a9b      	subs	r3, r3, r2
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	18cb      	adds	r3, r1, r3
 8013ddc:	3308      	adds	r3, #8
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	6819      	ldr	r1, [r3, #0]
 8013de2:	1dfb      	adds	r3, r7, #7
 8013de4:	781a      	ldrb	r2, [r3, #0]
 8013de6:	4827      	ldr	r0, [pc, #156]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013de8:	0013      	movs	r3, r2
 8013dea:	011b      	lsls	r3, r3, #4
 8013dec:	1a9b      	subs	r3, r3, r2
 8013dee:	009b      	lsls	r3, r3, #2
 8013df0:	18c3      	adds	r3, r0, r3
 8013df2:	3308      	adds	r3, #8
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2201      	movs	r2, #1
 8013df8:	430a      	orrs	r2, r1
 8013dfa:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8013dfc:	68ba      	ldr	r2, [r7, #8]
 8013dfe:	2380      	movs	r3, #128	; 0x80
 8013e00:	019b      	lsls	r3, r3, #6
 8013e02:	4013      	ands	r3, r2
 8013e04:	d117      	bne.n	8013e36 <PORTx_IRQHandler+0x3e2>
 8013e06:	1dfb      	adds	r3, r7, #7
 8013e08:	781b      	ldrb	r3, [r3, #0]
 8013e0a:	4a1f      	ldr	r2, [pc, #124]	; (8013e88 <PORTx_IRQHandler+0x434>)
 8013e0c:	5cd3      	ldrb	r3, [r2, r3]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d111      	bne.n	8013e36 <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8013e12:	1dfb      	adds	r3, r7, #7
 8013e14:	781a      	ldrb	r2, [r3, #0]
 8013e16:	491b      	ldr	r1, [pc, #108]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013e18:	0013      	movs	r3, r2
 8013e1a:	011b      	lsls	r3, r3, #4
 8013e1c:	1a9b      	subs	r3, r3, r2
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	18cb      	adds	r3, r1, r3
 8013e22:	3320      	adds	r3, #32
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e2a:	2107      	movs	r1, #7
 8013e2c:	4019      	ands	r1, r3
 8013e2e:	1dfb      	adds	r3, r7, #7
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	0018      	movs	r0, r3
 8013e34:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8013e36:	1dfb      	adds	r3, r7, #7
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	4a13      	ldr	r2, [pc, #76]	; (8013e88 <PORTx_IRQHandler+0x434>)
 8013e3c:	2100      	movs	r1, #0
 8013e3e:	54d1      	strb	r1, [r2, r3]
      return;
 8013e40:	e01d      	b.n	8013e7e <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8013e42:	68ba      	ldr	r2, [r7, #8]
 8013e44:	2380      	movs	r3, #128	; 0x80
 8013e46:	01db      	lsls	r3, r3, #7
 8013e48:	4013      	ands	r3, r2
 8013e4a:	d104      	bne.n	8013e56 <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	2380      	movs	r3, #128	; 0x80
 8013e50:	021b      	lsls	r3, r3, #8
 8013e52:	4013      	ands	r3, r2
 8013e54:	d013      	beq.n	8013e7e <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	0018      	movs	r0, r3
 8013e5a:	f7ff fd54 	bl	8013906 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	0018      	movs	r0, r3
 8013e62:	f7ff fd41 	bl	80138e8 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8013e66:	1dfb      	adds	r3, r7, #7
 8013e68:	781a      	ldrb	r2, [r3, #0]
 8013e6a:	4906      	ldr	r1, [pc, #24]	; (8013e84 <PORTx_IRQHandler+0x430>)
 8013e6c:	0013      	movs	r3, r2
 8013e6e:	011b      	lsls	r3, r3, #4
 8013e70:	1a9b      	subs	r3, r3, r2
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	18cb      	adds	r3, r1, r3
 8013e76:	332c      	adds	r3, #44	; 0x2c
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8013e7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	b004      	add	sp, #16
 8013e82:	bd80      	pop	{r7, pc}
 8013e84:	200005ac 	.word	0x200005ac
 8013e88:	200005a0 	.word	0x200005a0

08013e8c <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8013e8c:	b590      	push	{r4, r7, lr}
 8013e8e:	b085      	sub	sp, #20
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60b9      	str	r1, [r7, #8]
 8013e94:	607a      	str	r2, [r7, #4]
 8013e96:	603b      	str	r3, [r7, #0]
 8013e98:	240f      	movs	r4, #15
 8013e9a:	193b      	adds	r3, r7, r4
 8013e9c:	1c02      	adds	r2, r0, #0
 8013e9e:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 8013ea0:	193b      	adds	r3, r7, r4
 8013ea2:	781a      	ldrb	r2, [r3, #0]
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	6919      	ldr	r1, [r3, #16]
 8013ea8:	4830      	ldr	r0, [pc, #192]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013eaa:	0013      	movs	r3, r2
 8013eac:	011b      	lsls	r3, r3, #4
 8013eae:	1a9b      	subs	r3, r3, r2
 8013eb0:	009b      	lsls	r3, r3, #2
 8013eb2:	18c3      	adds	r3, r0, r3
 8013eb4:	3314      	adds	r3, #20
 8013eb6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8013eb8:	193b      	adds	r3, r7, r4
 8013eba:	781a      	ldrb	r2, [r3, #0]
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	68d9      	ldr	r1, [r3, #12]
 8013ec0:	482a      	ldr	r0, [pc, #168]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013ec2:	0013      	movs	r3, r2
 8013ec4:	011b      	lsls	r3, r3, #4
 8013ec6:	1a9b      	subs	r3, r3, r2
 8013ec8:	009b      	lsls	r3, r3, #2
 8013eca:	18c3      	adds	r3, r0, r3
 8013ecc:	3318      	adds	r3, #24
 8013ece:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8013ed0:	193b      	adds	r3, r7, r4
 8013ed2:	781a      	ldrb	r2, [r3, #0]
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	6859      	ldr	r1, [r3, #4]
 8013ed8:	4824      	ldr	r0, [pc, #144]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013eda:	0013      	movs	r3, r2
 8013edc:	011b      	lsls	r3, r3, #4
 8013ede:	1a9b      	subs	r3, r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	18c3      	adds	r3, r0, r3
 8013ee4:	331c      	adds	r3, #28
 8013ee6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8013ee8:	193b      	adds	r3, r7, r4
 8013eea:	781a      	ldrb	r2, [r3, #0]
 8013eec:	491f      	ldr	r1, [pc, #124]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013eee:	0013      	movs	r3, r2
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	1a9b      	subs	r3, r3, r2
 8013ef4:	009b      	lsls	r3, r3, #2
 8013ef6:	18cb      	adds	r3, r1, r3
 8013ef8:	3320      	adds	r3, #32
 8013efa:	4a1d      	ldr	r2, [pc, #116]	; (8013f70 <USBPD_PHY_Init+0xe4>)
 8013efc:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 8013efe:	193b      	adds	r3, r7, r4
 8013f00:	781a      	ldrb	r2, [r3, #0]
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	6899      	ldr	r1, [r3, #8]
 8013f06:	4819      	ldr	r0, [pc, #100]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013f08:	0013      	movs	r3, r2
 8013f0a:	011b      	lsls	r3, r3, #4
 8013f0c:	1a9b      	subs	r3, r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	18c3      	adds	r3, r0, r3
 8013f12:	3324      	adds	r3, #36	; 0x24
 8013f14:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8013f16:	193b      	adds	r3, r7, r4
 8013f18:	781a      	ldrb	r2, [r3, #0]
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	6959      	ldr	r1, [r3, #20]
 8013f1e:	4813      	ldr	r0, [pc, #76]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013f20:	0013      	movs	r3, r2
 8013f22:	011b      	lsls	r3, r3, #4
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	18c3      	adds	r3, r0, r3
 8013f2a:	3328      	adds	r3, #40	; 0x28
 8013f2c:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8013f2e:	193b      	adds	r3, r7, r4
 8013f30:	781a      	ldrb	r2, [r3, #0]
 8013f32:	490e      	ldr	r1, [pc, #56]	; (8013f6c <USBPD_PHY_Init+0xe0>)
 8013f34:	0013      	movs	r3, r2
 8013f36:	011b      	lsls	r3, r3, #4
 8013f38:	1a9b      	subs	r3, r3, r2
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	18cb      	adds	r3, r1, r3
 8013f3e:	3330      	adds	r3, #48	; 0x30
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8013f44:	193b      	adds	r3, r7, r4
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	4a0a      	ldr	r2, [pc, #40]	; (8013f74 <USBPD_PHY_Init+0xe8>)
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	18d3      	adds	r3, r2, r3
 8013f4e:	3304      	adds	r3, #4
 8013f50:	6a3a      	ldr	r2, [r7, #32]
 8013f52:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 8013f54:	193b      	adds	r3, r7, r4
 8013f56:	781a      	ldrb	r2, [r3, #0]
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	6819      	ldr	r1, [r3, #0]
 8013f5c:	4b05      	ldr	r3, [pc, #20]	; (8013f74 <USBPD_PHY_Init+0xe8>)
 8013f5e:	00d2      	lsls	r2, r2, #3
 8013f60:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 8013f62:	2300      	movs	r3, #0
}
 8013f64:	0018      	movs	r0, r3
 8013f66:	46bd      	mov	sp, r7
 8013f68:	b005      	add	sp, #20
 8013f6a:	bd90      	pop	{r4, r7, pc}
 8013f6c:	200005ac 	.word	0x200005ac
 8013f70:	0801415d 	.word	0x0801415d
 8013f74:	200005a4 	.word	0x200005a4

08013f78 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	0002      	movs	r2, r0
 8013f80:	1dfb      	adds	r3, r7, #7
 8013f82:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 8013f84:	4b02      	ldr	r3, [pc, #8]	; (8013f90 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 8013f86:	0018      	movs	r0, r3
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	b002      	add	sp, #8
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	46c0      	nop			; (mov r8, r8)
 8013f90:	00000389 	.word	0x00000389

08013f94 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b082      	sub	sp, #8
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	0002      	movs	r2, r0
 8013f9c:	1dfb      	adds	r3, r7, #7
 8013f9e:	701a      	strb	r2, [r3, #0]
  return 30u;
 8013fa0:	231e      	movs	r3, #30
}
 8013fa2:	0018      	movs	r0, r3
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	b002      	add	sp, #8
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b082      	sub	sp, #8
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	0002      	movs	r2, r0
 8013fb2:	1dfb      	adds	r3, r7, #7
 8013fb4:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8013fb6:	46c0      	nop			; (mov r8, r8)
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	b002      	add	sp, #8
 8013fbc:	bd80      	pop	{r7, pc}

08013fbe <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8013fbe:	b580      	push	{r7, lr}
 8013fc0:	b082      	sub	sp, #8
 8013fc2:	af00      	add	r7, sp, #0
 8013fc4:	0002      	movs	r2, r0
 8013fc6:	1dfb      	adds	r3, r7, #7
 8013fc8:	701a      	strb	r2, [r3, #0]
 8013fca:	1dbb      	adds	r3, r7, #6
 8013fcc:	1c0a      	adds	r2, r1, #0
 8013fce:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8013fd0:	1dbb      	adds	r3, r7, #6
 8013fd2:	7819      	ldrb	r1, [r3, #0]
 8013fd4:	1dfb      	adds	r3, r7, #7
 8013fd6:	7818      	ldrb	r0, [r3, #0]
 8013fd8:	2300      	movs	r3, #0
 8013fda:	2200      	movs	r2, #0
 8013fdc:	f000 f805 	bl	8013fea <USBPD_PHY_SendMessage>
 8013fe0:	0003      	movs	r3, r0
}
 8013fe2:	0018      	movs	r0, r3
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	b002      	add	sp, #8
 8013fe8:	bd80      	pop	{r7, pc}

08013fea <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8013fea:	b590      	push	{r4, r7, lr}
 8013fec:	b083      	sub	sp, #12
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	0004      	movs	r4, r0
 8013ff2:	0008      	movs	r0, r1
 8013ff4:	603a      	str	r2, [r7, #0]
 8013ff6:	0019      	movs	r1, r3
 8013ff8:	1dfb      	adds	r3, r7, #7
 8013ffa:	1c22      	adds	r2, r4, #0
 8013ffc:	701a      	strb	r2, [r3, #0]
 8013ffe:	1dbb      	adds	r3, r7, #6
 8014000:	1c02      	adds	r2, r0, #0
 8014002:	701a      	strb	r2, [r3, #0]
 8014004:	1d3b      	adds	r3, r7, #4
 8014006:	1c0a      	adds	r2, r1, #0
 8014008:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 801400a:	1d3b      	adds	r3, r7, #4
 801400c:	881c      	ldrh	r4, [r3, #0]
 801400e:	683a      	ldr	r2, [r7, #0]
 8014010:	1dbb      	adds	r3, r7, #6
 8014012:	7819      	ldrb	r1, [r3, #0]
 8014014:	1dfb      	adds	r3, r7, #7
 8014016:	7818      	ldrb	r0, [r3, #0]
 8014018:	0023      	movs	r3, r4
 801401a:	f000 fb2f 	bl	801467c <USBPD_HW_IF_SendBuffer>
 801401e:	0003      	movs	r3, r0
}
 8014020:	0018      	movs	r0, r3
 8014022:	46bd      	mov	sp, r7
 8014024:	b003      	add	sp, #12
 8014026:	bd90      	pop	{r4, r7, pc}

08014028 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	0002      	movs	r2, r0
 8014030:	1dfb      	adds	r3, r7, #7
 8014032:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8014034:	1dfb      	adds	r3, r7, #7
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	0018      	movs	r0, r3
 801403a:	f000 fc7d 	bl	8014938 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 801403e:	2300      	movs	r3, #0
}
 8014040:	0018      	movs	r0, r3
 8014042:	46bd      	mov	sp, r7
 8014044:	b002      	add	sp, #8
 8014046:	bd80      	pop	{r7, pc}

08014048 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b082      	sub	sp, #8
 801404c:	af00      	add	r7, sp, #0
 801404e:	0002      	movs	r2, r0
 8014050:	1dfb      	adds	r3, r7, #7
 8014052:	701a      	strb	r2, [r3, #0]
 8014054:	1dbb      	adds	r3, r7, #6
 8014056:	1c0a      	adds	r2, r1, #0
 8014058:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 801405a:	1dbb      	adds	r3, r7, #6
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	2b07      	cmp	r3, #7
 8014060:	d104      	bne.n	801406c <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8014062:	1dfb      	adds	r3, r7, #7
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	0018      	movs	r0, r3
 8014068:	f000 fad0 	bl	801460c <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 801406c:	2300      	movs	r3, #0
}
 801406e:	0018      	movs	r0, r3
 8014070:	46bd      	mov	sp, r7
 8014072:	b002      	add	sp, #8
 8014074:	bd80      	pop	{r7, pc}

08014076 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b082      	sub	sp, #8
 801407a:	af00      	add	r7, sp, #0
 801407c:	0002      	movs	r2, r0
 801407e:	1dfb      	adds	r3, r7, #7
 8014080:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8014082:	1dfb      	adds	r3, r7, #7
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	0018      	movs	r0, r3
 8014088:	f001 f87e 	bl	8015188 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 801408c:	46c0      	nop			; (mov r8, r8)
 801408e:	46bd      	mov	sp, r7
 8014090:	b002      	add	sp, #8
 8014092:	bd80      	pop	{r7, pc}

08014094 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
 801409a:	0002      	movs	r2, r0
 801409c:	1dfb      	adds	r3, r7, #7
 801409e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80140a0:	1dfb      	adds	r3, r7, #7
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	0018      	movs	r0, r3
 80140a6:	f001 f889 	bl	80151bc <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80140aa:	46c0      	nop			; (mov r8, r8)
 80140ac:	46bd      	mov	sp, r7
 80140ae:	b002      	add	sp, #8
 80140b0:	bd80      	pop	{r7, pc}
	...

080140b4 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	0002      	movs	r2, r0
 80140bc:	6039      	str	r1, [r7, #0]
 80140be:	1dfb      	adds	r3, r7, #7
 80140c0:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80140c2:	1dfb      	adds	r3, r7, #7
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	4a05      	ldr	r2, [pc, #20]	; (80140dc <USBPD_PHY_SOPSupported+0x28>)
 80140c8:	00db      	lsls	r3, r3, #3
 80140ca:	18d3      	adds	r3, r2, r3
 80140cc:	3304      	adds	r3, #4
 80140ce:	683a      	ldr	r2, [r7, #0]
 80140d0:	601a      	str	r2, [r3, #0]
}
 80140d2:	46c0      	nop			; (mov r8, r8)
 80140d4:	46bd      	mov	sp, r7
 80140d6:	b002      	add	sp, #8
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	46c0      	nop			; (mov r8, r8)
 80140dc:	200005a4 	.word	0x200005a4

080140e0 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	0002      	movs	r2, r0
 80140e8:	1dfb      	adds	r3, r7, #7
 80140ea:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80140ec:	1dfb      	adds	r3, r7, #7
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	0018      	movs	r0, r3
 80140f2:	f001 f87d 	bl	80151f0 <USBPD_HW_IF_IsResistor_SinkTxOk>
 80140f6:	0003      	movs	r3, r0
}
 80140f8:	0018      	movs	r0, r3
 80140fa:	46bd      	mov	sp, r7
 80140fc:	b002      	add	sp, #8
 80140fe:	bd80      	pop	{r7, pc}

08014100 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	0002      	movs	r2, r0
 8014108:	1dfb      	adds	r3, r7, #7
 801410a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 801410c:	1dfb      	adds	r3, r7, #7
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	0018      	movs	r0, r3
 8014112:	f001 f8b1 	bl	8015278 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 8014116:	46c0      	nop			; (mov r8, r8)
 8014118:	46bd      	mov	sp, r7
 801411a:	b002      	add	sp, #8
 801411c:	bd80      	pop	{r7, pc}

0801411e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 801411e:	b580      	push	{r7, lr}
 8014120:	b082      	sub	sp, #8
 8014122:	af00      	add	r7, sp, #0
 8014124:	0002      	movs	r2, r0
 8014126:	1dfb      	adds	r3, r7, #7
 8014128:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 801412a:	1dfb      	adds	r3, r7, #7
 801412c:	781b      	ldrb	r3, [r3, #0]
 801412e:	0018      	movs	r0, r3
 8014130:	f000 fe0a 	bl	8014d48 <USBPD_HW_IF_EnableRX>
}
 8014134:	46c0      	nop			; (mov r8, r8)
 8014136:	46bd      	mov	sp, r7
 8014138:	b002      	add	sp, #8
 801413a:	bd80      	pop	{r7, pc}

0801413c <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	0002      	movs	r2, r0
 8014144:	1dfb      	adds	r3, r7, #7
 8014146:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 8014148:	1dfb      	adds	r3, r7, #7
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	0018      	movs	r0, r3
 801414e:	f000 fe13 	bl	8014d78 <USBPD_HW_IF_DisableRX>
}
 8014152:	46c0      	nop			; (mov r8, r8)
 8014154:	46bd      	mov	sp, r7
 8014156:	b002      	add	sp, #8
 8014158:	bd80      	pop	{r7, pc}
	...

0801415c <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 801415c:	b590      	push	{r4, r7, lr}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
 8014162:	0002      	movs	r2, r0
 8014164:	6039      	str	r1, [r7, #0]
 8014166:	1dfb      	adds	r3, r7, #7
 8014168:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 801416a:	2008      	movs	r0, #8
 801416c:	183b      	adds	r3, r7, r0
 801416e:	4a2e      	ldr	r2, [pc, #184]	; (8014228 <PHY_Rx_Completed+0xcc>)
 8014170:	6811      	ldr	r1, [r2, #0]
 8014172:	6019      	str	r1, [r3, #0]
 8014174:	8892      	ldrh	r2, [r2, #4]
 8014176:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8014178:	240f      	movs	r4, #15
 801417a:	193b      	adds	r3, r7, r4
 801417c:	1839      	adds	r1, r7, r0
 801417e:	683a      	ldr	r2, [r7, #0]
 8014180:	188a      	adds	r2, r1, r2
 8014182:	7812      	ldrb	r2, [r2, #0]
 8014184:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8014186:	193b      	adds	r3, r7, r4
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	2b04      	cmp	r3, #4
 801418c:	dc02      	bgt.n	8014194 <PHY_Rx_Completed+0x38>
 801418e:	2b00      	cmp	r3, #0
 8014190:	da1d      	bge.n	80141ce <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 8014192:	e040      	b.n	8014216 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 8014194:	2b06      	cmp	r3, #6
 8014196:	d13e      	bne.n	8014216 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8014198:	1dfb      	adds	r3, r7, #7
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	4a23      	ldr	r2, [pc, #140]	; (801422c <PHY_Rx_Completed+0xd0>)
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	18d3      	adds	r3, r2, r3
 80141a2:	3304      	adds	r3, #4
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	221e      	movs	r2, #30
 80141a8:	4013      	ands	r3, r2
 80141aa:	2b1e      	cmp	r3, #30
 80141ac:	d135      	bne.n	801421a <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80141ae:	1dfb      	adds	r3, r7, #7
 80141b0:	781a      	ldrb	r2, [r3, #0]
 80141b2:	491f      	ldr	r1, [pc, #124]	; (8014230 <PHY_Rx_Completed+0xd4>)
 80141b4:	0013      	movs	r3, r2
 80141b6:	011b      	lsls	r3, r3, #4
 80141b8:	1a9b      	subs	r3, r3, r2
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	18cb      	adds	r3, r1, r3
 80141be:	331c      	adds	r3, #28
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	1dfa      	adds	r2, r7, #7
 80141c4:	7812      	ldrb	r2, [r2, #0]
 80141c6:	2106      	movs	r1, #6
 80141c8:	0010      	movs	r0, r2
 80141ca:	4798      	blx	r3
      break;
 80141cc:	e025      	b.n	801421a <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 80141ce:	240f      	movs	r4, #15
 80141d0:	193b      	adds	r3, r7, r4
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	2201      	movs	r2, #1
 80141d6:	409a      	lsls	r2, r3
 80141d8:	0013      	movs	r3, r2
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	0018      	movs	r0, r3
 80141de:	1dfb      	adds	r3, r7, #7
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	4a12      	ldr	r2, [pc, #72]	; (801422c <PHY_Rx_Completed+0xd0>)
 80141e4:	00db      	lsls	r3, r3, #3
 80141e6:	18d3      	adds	r3, r2, r3
 80141e8:	3304      	adds	r3, #4
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	193a      	adds	r2, r7, r4
 80141ee:	7812      	ldrb	r2, [r2, #0]
 80141f0:	2101      	movs	r1, #1
 80141f2:	4091      	lsls	r1, r2
 80141f4:	000a      	movs	r2, r1
 80141f6:	b2d2      	uxtb	r2, r2
 80141f8:	4013      	ands	r3, r2
 80141fa:	4298      	cmp	r0, r3
 80141fc:	d10f      	bne.n	801421e <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80141fe:	1dfb      	adds	r3, r7, #7
 8014200:	781a      	ldrb	r2, [r3, #0]
 8014202:	4b0a      	ldr	r3, [pc, #40]	; (801422c <PHY_Rx_Completed+0xd0>)
 8014204:	00d2      	lsls	r2, r2, #3
 8014206:	58d3      	ldr	r3, [r2, r3]
 8014208:	193a      	adds	r2, r7, r4
 801420a:	7811      	ldrb	r1, [r2, #0]
 801420c:	1dfa      	adds	r2, r7, #7
 801420e:	7812      	ldrb	r2, [r2, #0]
 8014210:	0010      	movs	r0, r2
 8014212:	4798      	blx	r3
      break;
 8014214:	e003      	b.n	801421e <PHY_Rx_Completed+0xc2>
      break;
 8014216:	46c0      	nop			; (mov r8, r8)
 8014218:	e002      	b.n	8014220 <PHY_Rx_Completed+0xc4>
      break;
 801421a:	46c0      	nop			; (mov r8, r8)
 801421c:	e000      	b.n	8014220 <PHY_Rx_Completed+0xc4>
      break;
 801421e:	46c0      	nop			; (mov r8, r8)
  }
}
 8014220:	46c0      	nop			; (mov r8, r8)
 8014222:	46bd      	mov	sp, r7
 8014224:	b005      	add	sp, #20
 8014226:	bd90      	pop	{r4, r7, pc}
 8014228:	08024058 	.word	0x08024058
 801422c:	200005a4 	.word	0x200005a4
 8014230:	200005ac 	.word	0x200005ac

08014234 <LL_AHB1_GRP1_EnableClock>:
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b084      	sub	sp, #16
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 801423c:	4b07      	ldr	r3, [pc, #28]	; (801425c <LL_AHB1_GRP1_EnableClock+0x28>)
 801423e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014240:	4b06      	ldr	r3, [pc, #24]	; (801425c <LL_AHB1_GRP1_EnableClock+0x28>)
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	430a      	orrs	r2, r1
 8014246:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8014248:	4b04      	ldr	r3, [pc, #16]	; (801425c <LL_AHB1_GRP1_EnableClock+0x28>)
 801424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	4013      	ands	r3, r2
 8014250:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014252:	68fb      	ldr	r3, [r7, #12]
}
 8014254:	46c0      	nop			; (mov r8, r8)
 8014256:	46bd      	mov	sp, r7
 8014258:	b004      	add	sp, #16
 801425a:	bd80      	pop	{r7, pc}
 801425c:	40021000 	.word	0x40021000

08014260 <LL_APB1_GRP1_EnableClock>:
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8014268:	4b07      	ldr	r3, [pc, #28]	; (8014288 <LL_APB1_GRP1_EnableClock+0x28>)
 801426a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801426c:	4b06      	ldr	r3, [pc, #24]	; (8014288 <LL_APB1_GRP1_EnableClock+0x28>)
 801426e:	687a      	ldr	r2, [r7, #4]
 8014270:	430a      	orrs	r2, r1
 8014272:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8014274:	4b04      	ldr	r3, [pc, #16]	; (8014288 <LL_APB1_GRP1_EnableClock+0x28>)
 8014276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	4013      	ands	r3, r2
 801427c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801427e:	68fb      	ldr	r3, [r7, #12]
}
 8014280:	46c0      	nop			; (mov r8, r8)
 8014282:	46bd      	mov	sp, r7
 8014284:	b004      	add	sp, #16
 8014286:	bd80      	pop	{r7, pc}
 8014288:	40021000 	.word	0x40021000

0801428c <LL_APB2_GRP1_EnableClock>:
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b084      	sub	sp, #16
 8014290:	af00      	add	r7, sp, #0
 8014292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8014294:	4b07      	ldr	r3, [pc, #28]	; (80142b4 <LL_APB2_GRP1_EnableClock+0x28>)
 8014296:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8014298:	4b06      	ldr	r3, [pc, #24]	; (80142b4 <LL_APB2_GRP1_EnableClock+0x28>)
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	430a      	orrs	r2, r1
 801429e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80142a0:	4b04      	ldr	r3, [pc, #16]	; (80142b4 <LL_APB2_GRP1_EnableClock+0x28>)
 80142a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142a4:	687a      	ldr	r2, [r7, #4]
 80142a6:	4013      	ands	r3, r2
 80142a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80142aa:	68fb      	ldr	r3, [r7, #12]
}
 80142ac:	46c0      	nop			; (mov r8, r8)
 80142ae:	46bd      	mov	sp, r7
 80142b0:	b004      	add	sp, #16
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	40021000 	.word	0x40021000

080142b8 <LL_UCPD_Enable>:
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	2280      	movs	r2, #128	; 0x80
 80142c6:	0612      	lsls	r2, r2, #24
 80142c8:	431a      	orrs	r2, r3
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	601a      	str	r2, [r3, #0]
}
 80142ce:	46c0      	nop			; (mov r8, r8)
 80142d0:	46bd      	mov	sp, r7
 80142d2:	b002      	add	sp, #8
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <LL_UCPD_Disable>:
{
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b082      	sub	sp, #8
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	005b      	lsls	r3, r3, #1
 80142e4:	085a      	lsrs	r2, r3, #1
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	601a      	str	r2, [r3, #0]
}
 80142ea:	46c0      	nop			; (mov r8, r8)
 80142ec:	46bd      	mov	sp, r7
 80142ee:	b002      	add	sp, #8
 80142f0:	bd80      	pop	{r7, pc}
	...

080142f4 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	4a03      	ldr	r2, [pc, #12]	; (8014310 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8014302:	401a      	ands	r2, r3
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	60da      	str	r2, [r3, #12]
}
 8014308:	46c0      	nop			; (mov r8, r8)
 801430a:	46bd      	mov	sp, r7
 801430c:	b002      	add	sp, #8
 801430e:	bd80      	pop	{r7, pc}
 8014310:	ffdfffff 	.word	0xffdfffff

08014314 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	2280      	movs	r2, #128	; 0x80
 8014322:	0392      	lsls	r2, r2, #14
 8014324:	431a      	orrs	r2, r3
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	60da      	str	r2, [r3, #12]
}
 801432a:	46c0      	nop			; (mov r8, r8)
 801432c:	46bd      	mov	sp, r7
 801432e:	b002      	add	sp, #8
 8014330:	bd80      	pop	{r7, pc}
	...

08014334 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	68db      	ldr	r3, [r3, #12]
 8014340:	4a03      	ldr	r2, [pc, #12]	; (8014350 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8014342:	401a      	ands	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	60da      	str	r2, [r3, #12]
}
 8014348:	46c0      	nop			; (mov r8, r8)
 801434a:	46bd      	mov	sp, r7
 801434c:	b002      	add	sp, #8
 801434e:	bd80      	pop	{r7, pc}
 8014350:	ffefffff 	.word	0xffefffff

08014354 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	2280      	movs	r2, #128	; 0x80
 8014362:	0352      	lsls	r2, r2, #13
 8014364:	431a      	orrs	r2, r3
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	60da      	str	r2, [r3, #12]
}
 801436a:	46c0      	nop			; (mov r8, r8)
 801436c:	46bd      	mov	sp, r7
 801436e:	b002      	add	sp, #8
 8014370:	bd80      	pop	{r7, pc}

08014372 <LL_UCPD_SignalFRSTX>:
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	2280      	movs	r2, #128	; 0x80
 8014380:	0292      	lsls	r2, r2, #10
 8014382:	431a      	orrs	r2, r3
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	60da      	str	r2, [r3, #12]
}
 8014388:	46c0      	nop			; (mov r8, r8)
 801438a:	46bd      	mov	sp, r7
 801438c:	b002      	add	sp, #8
 801438e:	bd80      	pop	{r7, pc}

08014390 <LL_UCPD_FRSDetectionEnable>:
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	68db      	ldr	r3, [r3, #12]
 801439c:	2280      	movs	r2, #128	; 0x80
 801439e:	0252      	lsls	r2, r2, #9
 80143a0:	431a      	orrs	r2, r3
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	60da      	str	r2, [r3, #12]
}
 80143a6:	46c0      	nop			; (mov r8, r8)
 80143a8:	46bd      	mov	sp, r7
 80143aa:	b002      	add	sp, #8
 80143ac:	bd80      	pop	{r7, pc}
	...

080143b0 <LL_UCPD_FRSDetectionDisable>:
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	4a03      	ldr	r2, [pc, #12]	; (80143cc <LL_UCPD_FRSDetectionDisable+0x1c>)
 80143be:	401a      	ands	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	60da      	str	r2, [r3, #12]
}
 80143c4:	46c0      	nop			; (mov r8, r8)
 80143c6:	46bd      	mov	sp, r7
 80143c8:	b002      	add	sp, #8
 80143ca:	bd80      	pop	{r7, pc}
 80143cc:	fffeffff 	.word	0xfffeffff

080143d0 <LL_UCPD_SetccEnable>:
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	4a05      	ldr	r2, [pc, #20]	; (80143f4 <LL_UCPD_SetccEnable+0x24>)
 80143e0:	401a      	ands	r2, r3
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	431a      	orrs	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	60da      	str	r2, [r3, #12]
}
 80143ea:	46c0      	nop			; (mov r8, r8)
 80143ec:	46bd      	mov	sp, r7
 80143ee:	b002      	add	sp, #8
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	46c0      	nop			; (mov r8, r8)
 80143f4:	fffff3ff 	.word	0xfffff3ff

080143f8 <LL_UCPD_SetSNKRole>:
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b082      	sub	sp, #8
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	68db      	ldr	r3, [r3, #12]
 8014404:	2280      	movs	r2, #128	; 0x80
 8014406:	0092      	lsls	r2, r2, #2
 8014408:	431a      	orrs	r2, r3
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	60da      	str	r2, [r3, #12]
}
 801440e:	46c0      	nop			; (mov r8, r8)
 8014410:	46bd      	mov	sp, r7
 8014412:	b002      	add	sp, #8
 8014414:	bd80      	pop	{r7, pc}
	...

08014418 <LL_UCPD_SetSRCRole>:
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	68db      	ldr	r3, [r3, #12]
 8014424:	4a03      	ldr	r2, [pc, #12]	; (8014434 <LL_UCPD_SetSRCRole+0x1c>)
 8014426:	401a      	ands	r2, r3
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	60da      	str	r2, [r3, #12]
}
 801442c:	46c0      	nop			; (mov r8, r8)
 801442e:	46bd      	mov	sp, r7
 8014430:	b002      	add	sp, #8
 8014432:	bd80      	pop	{r7, pc}
 8014434:	fffffdff 	.word	0xfffffdff

08014438 <LL_UCPD_SetRpResistor>:
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b082      	sub	sp, #8
 801443c:	af00      	add	r7, sp, #0
 801443e:	6078      	str	r0, [r7, #4]
 8014440:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	68db      	ldr	r3, [r3, #12]
 8014446:	4a05      	ldr	r2, [pc, #20]	; (801445c <LL_UCPD_SetRpResistor+0x24>)
 8014448:	401a      	ands	r2, r3
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	431a      	orrs	r2, r3
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	60da      	str	r2, [r3, #12]
}
 8014452:	46c0      	nop			; (mov r8, r8)
 8014454:	46bd      	mov	sp, r7
 8014456:	b002      	add	sp, #8
 8014458:	bd80      	pop	{r7, pc}
 801445a:	46c0      	nop			; (mov r8, r8)
 801445c:	fffffe7f 	.word	0xfffffe7f

08014460 <LL_UCPD_SetCCPin>:
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	2240      	movs	r2, #64	; 0x40
 8014470:	4393      	bics	r3, r2
 8014472:	001a      	movs	r2, r3
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	431a      	orrs	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	60da      	str	r2, [r3, #12]
}
 801447c:	46c0      	nop			; (mov r8, r8)
 801447e:	46bd      	mov	sp, r7
 8014480:	b002      	add	sp, #8
 8014482:	bd80      	pop	{r7, pc}

08014484 <LL_UCPD_RxEnable>:
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	68db      	ldr	r3, [r3, #12]
 8014490:	2220      	movs	r2, #32
 8014492:	431a      	orrs	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	60da      	str	r2, [r3, #12]
}
 8014498:	46c0      	nop			; (mov r8, r8)
 801449a:	46bd      	mov	sp, r7
 801449c:	b002      	add	sp, #8
 801449e:	bd80      	pop	{r7, pc}

080144a0 <LL_UCPD_RxDisable>:
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	2220      	movs	r2, #32
 80144ae:	4393      	bics	r3, r2
 80144b0:	001a      	movs	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	60da      	str	r2, [r3, #12]
}
 80144b6:	46c0      	nop			; (mov r8, r8)
 80144b8:	46bd      	mov	sp, r7
 80144ba:	b002      	add	sp, #8
 80144bc:	bd80      	pop	{r7, pc}

080144be <LL_UCPD_SetRxMode>:
{
 80144be:	b580      	push	{r7, lr}
 80144c0:	b082      	sub	sp, #8
 80144c2:	af00      	add	r7, sp, #0
 80144c4:	6078      	str	r0, [r7, #4]
 80144c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	68db      	ldr	r3, [r3, #12]
 80144cc:	2210      	movs	r2, #16
 80144ce:	4393      	bics	r3, r2
 80144d0:	001a      	movs	r2, r3
 80144d2:	683b      	ldr	r3, [r7, #0]
 80144d4:	431a      	orrs	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	60da      	str	r2, [r3, #12]
}
 80144da:	46c0      	nop			; (mov r8, r8)
 80144dc:	46bd      	mov	sp, r7
 80144de:	b002      	add	sp, #8
 80144e0:	bd80      	pop	{r7, pc}

080144e2 <LL_UCPD_SendHardReset>:
{
 80144e2:	b580      	push	{r7, lr}
 80144e4:	b082      	sub	sp, #8
 80144e6:	af00      	add	r7, sp, #0
 80144e8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	68db      	ldr	r3, [r3, #12]
 80144ee:	2208      	movs	r2, #8
 80144f0:	431a      	orrs	r2, r3
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	60da      	str	r2, [r3, #12]
}
 80144f6:	46c0      	nop			; (mov r8, r8)
 80144f8:	46bd      	mov	sp, r7
 80144fa:	b002      	add	sp, #8
 80144fc:	bd80      	pop	{r7, pc}

080144fe <LL_UCPD_SendMessage>:
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b082      	sub	sp, #8
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	2204      	movs	r2, #4
 801450c:	431a      	orrs	r2, r3
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	60da      	str	r2, [r3, #12]
}
 8014512:	46c0      	nop			; (mov r8, r8)
 8014514:	46bd      	mov	sp, r7
 8014516:	b002      	add	sp, #8
 8014518:	bd80      	pop	{r7, pc}

0801451a <LL_UCPD_SetTxMode>:
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b082      	sub	sp, #8
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	2203      	movs	r2, #3
 801452a:	4393      	bics	r3, r2
 801452c:	001a      	movs	r2, r3
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	431a      	orrs	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	60da      	str	r2, [r3, #12]
}
 8014536:	46c0      	nop			; (mov r8, r8)
 8014538:	46bd      	mov	sp, r7
 801453a:	b002      	add	sp, #8
 801453c:	bd80      	pop	{r7, pc}

0801453e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801453e:	b580      	push	{r7, lr}
 8014540:	b082      	sub	sp, #8
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2280      	movs	r2, #128	; 0x80
 801454c:	05d2      	lsls	r2, r2, #23
 801454e:	431a      	orrs	r2, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	601a      	str	r2, [r3, #0]
}
 8014554:	46c0      	nop			; (mov r8, r8)
 8014556:	46bd      	mov	sp, r7
 8014558:	b002      	add	sp, #8
 801455a:	bd80      	pop	{r7, pc}

0801455c <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b082      	sub	sp, #8
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	4a03      	ldr	r2, [pc, #12]	; (8014578 <LL_UCPD_RxDMADisable+0x1c>)
 801456a:	401a      	ands	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	601a      	str	r2, [r3, #0]
}
 8014570:	46c0      	nop			; (mov r8, r8)
 8014572:	46bd      	mov	sp, r7
 8014574:	b002      	add	sp, #8
 8014576:	bd80      	pop	{r7, pc}
 8014578:	bfffffff 	.word	0xbfffffff

0801457c <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b082      	sub	sp, #8
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	2280      	movs	r2, #128	; 0x80
 801458a:	0592      	lsls	r2, r2, #22
 801458c:	431a      	orrs	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	601a      	str	r2, [r3, #0]
}
 8014592:	46c0      	nop			; (mov r8, r8)
 8014594:	46bd      	mov	sp, r7
 8014596:	b002      	add	sp, #8
 8014598:	bd80      	pop	{r7, pc}
	...

0801459c <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	4a03      	ldr	r2, [pc, #12]	; (80145b8 <LL_UCPD_TxDMADisable+0x1c>)
 80145aa:	401a      	ands	r2, r3
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	601a      	str	r2, [r3, #0]
}
 80145b0:	46c0      	nop			; (mov r8, r8)
 80145b2:	46bd      	mov	sp, r7
 80145b4:	b002      	add	sp, #8
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	dfffffff 	.word	0xdfffffff

080145bc <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	683a      	ldr	r2, [r7, #0]
 80145ca:	61da      	str	r2, [r3, #28]
}
 80145cc:	46c0      	nop			; (mov r8, r8)
 80145ce:	46bd      	mov	sp, r7
 80145d0:	b002      	add	sp, #8
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	683a      	ldr	r2, [r7, #0]
 80145e2:	621a      	str	r2, [r3, #32]
}
 80145e4:	46c0      	nop			; (mov r8, r8)
 80145e6:	46bd      	mov	sp, r7
 80145e8:	b002      	add	sp, #8
 80145ea:	bd80      	pop	{r7, pc}

080145ec <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80145f0:	2380      	movs	r3, #128	; 0x80
 80145f2:	055b      	lsls	r3, r3, #21
 80145f4:	0018      	movs	r0, r3
 80145f6:	f7ff fe33 	bl	8014260 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80145fa:	2380      	movs	r3, #128	; 0x80
 80145fc:	015b      	lsls	r3, r3, #5
 80145fe:	0018      	movs	r0, r3
 8014600:	f7ff fe18 	bl	8014234 <LL_AHB1_GRP1_EnableClock>
}
 8014604:	46c0      	nop			; (mov r8, r8)
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
	...

0801460c <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	0002      	movs	r2, r0
 8014614:	1dfb      	adds	r3, r7, #7
 8014616:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8014618:	1dfb      	adds	r3, r7, #7
 801461a:	781a      	ldrb	r2, [r3, #0]
 801461c:	4916      	ldr	r1, [pc, #88]	; (8014678 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801461e:	0013      	movs	r3, r2
 8014620:	011b      	lsls	r3, r3, #4
 8014622:	1a9b      	subs	r3, r3, r2
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	585b      	ldr	r3, [r3, r1]
 8014628:	68db      	ldr	r3, [r3, #12]
 801462a:	2207      	movs	r2, #7
 801462c:	4393      	bics	r3, r2
 801462e:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8014630:	1dfb      	adds	r3, r7, #7
 8014632:	781a      	ldrb	r2, [r3, #0]
 8014634:	4910      	ldr	r1, [pc, #64]	; (8014678 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014636:	0013      	movs	r3, r2
 8014638:	011b      	lsls	r3, r3, #4
 801463a:	1a9b      	subs	r3, r3, r2
 801463c:	009b      	lsls	r3, r3, #2
 801463e:	585b      	ldr	r3, [r3, r1]
 8014640:	0018      	movs	r0, r3
 8014642:	f7ff fe48 	bl	80142d6 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8014646:	1dfb      	adds	r3, r7, #7
 8014648:	781a      	ldrb	r2, [r3, #0]
 801464a:	490b      	ldr	r1, [pc, #44]	; (8014678 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801464c:	0013      	movs	r3, r2
 801464e:	011b      	lsls	r3, r3, #4
 8014650:	1a9b      	subs	r3, r3, r2
 8014652:	009b      	lsls	r3, r3, #2
 8014654:	585b      	ldr	r3, [r3, r1]
 8014656:	0018      	movs	r0, r3
 8014658:	f7ff fe2e 	bl	80142b8 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 801465c:	1dfb      	adds	r3, r7, #7
 801465e:	781a      	ldrb	r2, [r3, #0]
 8014660:	4905      	ldr	r1, [pc, #20]	; (8014678 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8014662:	0013      	movs	r3, r2
 8014664:	011b      	lsls	r3, r3, #4
 8014666:	1a9b      	subs	r3, r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	585b      	ldr	r3, [r3, r1]
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	60da      	str	r2, [r3, #12]
}
 8014670:	46c0      	nop			; (mov r8, r8)
 8014672:	46bd      	mov	sp, r7
 8014674:	b004      	add	sp, #16
 8014676:	bd80      	pop	{r7, pc}
 8014678:	200005ac 	.word	0x200005ac

0801467c <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 801467c:	b590      	push	{r4, r7, lr}
 801467e:	b08b      	sub	sp, #44	; 0x2c
 8014680:	af00      	add	r7, sp, #0
 8014682:	60ba      	str	r2, [r7, #8]
 8014684:	607b      	str	r3, [r7, #4]
 8014686:	240f      	movs	r4, #15
 8014688:	193b      	adds	r3, r7, r4
 801468a:	1c02      	adds	r2, r0, #0
 801468c:	701a      	strb	r2, [r3, #0]
 801468e:	200e      	movs	r0, #14
 8014690:	183b      	adds	r3, r7, r0
 8014692:	1c0a      	adds	r2, r1, #0
 8014694:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8014696:	2327      	movs	r3, #39	; 0x27
 8014698:	18fb      	adds	r3, r7, r3
 801469a:	2200      	movs	r2, #0
 801469c:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 801469e:	183b      	adds	r3, r7, r0
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	2b05      	cmp	r3, #5
 80146a4:	d10b      	bne.n	80146be <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 80146a6:	193b      	adds	r3, r7, r4
 80146a8:	781a      	ldrb	r2, [r3, #0]
 80146aa:	499e      	ldr	r1, [pc, #632]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80146ac:	0013      	movs	r3, r2
 80146ae:	011b      	lsls	r3, r3, #4
 80146b0:	1a9b      	subs	r3, r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	585b      	ldr	r3, [r3, r1]
 80146b6:	0018      	movs	r0, r3
 80146b8:	f7ff ff13 	bl	80144e2 <LL_UCPD_SendHardReset>
 80146bc:	e12a      	b.n	8014914 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146be:	f3ef 8310 	mrs	r3, PRIMASK
 80146c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80146c4:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 80146c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80146c8:	b672      	cpsid	i
}
 80146ca:	46c0      	nop			; (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 80146cc:	240f      	movs	r4, #15
 80146ce:	193b      	adds	r3, r7, r4
 80146d0:	781a      	ldrb	r2, [r3, #0]
 80146d2:	4994      	ldr	r1, [pc, #592]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80146d4:	2038      	movs	r0, #56	; 0x38
 80146d6:	0013      	movs	r3, r2
 80146d8:	011b      	lsls	r3, r3, #4
 80146da:	1a9b      	subs	r3, r3, r2
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	18cb      	adds	r3, r1, r3
 80146e0:	181b      	adds	r3, r3, r0
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d00e      	beq.n	8014708 <USBPD_HW_IF_SendBuffer+0x8c>
 80146ea:	193b      	adds	r3, r7, r4
 80146ec:	781a      	ldrb	r2, [r3, #0]
 80146ee:	498d      	ldr	r1, [pc, #564]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80146f0:	0013      	movs	r3, r2
 80146f2:	011b      	lsls	r3, r3, #4
 80146f4:	1a9b      	subs	r3, r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	18cb      	adds	r3, r1, r3
 80146fa:	3304      	adds	r3, #4
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2201      	movs	r2, #1
 8014702:	4013      	ands	r3, r2
 8014704:	2b01      	cmp	r3, #1
 8014706:	d10a      	bne.n	801471e <USBPD_HW_IF_SendBuffer+0xa2>
 8014708:	6a3b      	ldr	r3, [r7, #32]
 801470a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801470c:	69bb      	ldr	r3, [r7, #24]
 801470e:	f383 8810 	msr	PRIMASK, r3
}
 8014712:	46c0      	nop			; (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8014714:	2327      	movs	r3, #39	; 0x27
 8014716:	18fb      	adds	r3, r7, r3
 8014718:	2202      	movs	r2, #2
 801471a:	701a      	strb	r2, [r3, #0]
 801471c:	e0fa      	b.n	8014914 <USBPD_HW_IF_SendBuffer+0x298>
 801471e:	6a3b      	ldr	r3, [r7, #32]
 8014720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014722:	697b      	ldr	r3, [r7, #20]
 8014724:	f383 8810 	msr	PRIMASK, r3
}
 8014728:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 801472a:	230e      	movs	r3, #14
 801472c:	18fb      	adds	r3, r7, r3
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	2b07      	cmp	r3, #7
 8014732:	d871      	bhi.n	8014818 <USBPD_HW_IF_SendBuffer+0x19c>
 8014734:	009a      	lsls	r2, r3, #2
 8014736:	4b7c      	ldr	r3, [pc, #496]	; (8014928 <USBPD_HW_IF_SendBuffer+0x2ac>)
 8014738:	18d3      	adds	r3, r2, r3
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 801473e:	240f      	movs	r4, #15
 8014740:	193b      	adds	r3, r7, r4
 8014742:	781a      	ldrb	r2, [r3, #0]
 8014744:	4977      	ldr	r1, [pc, #476]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014746:	0013      	movs	r3, r2
 8014748:	011b      	lsls	r3, r3, #4
 801474a:	1a9b      	subs	r3, r3, r2
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	585b      	ldr	r3, [r3, r1]
 8014750:	4a76      	ldr	r2, [pc, #472]	; (801492c <USBPD_HW_IF_SendBuffer+0x2b0>)
 8014752:	0011      	movs	r1, r2
 8014754:	0018      	movs	r0, r3
 8014756:	f7ff ff31 	bl	80145bc <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801475a:	193b      	adds	r3, r7, r4
 801475c:	781a      	ldrb	r2, [r3, #0]
 801475e:	4971      	ldr	r1, [pc, #452]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014760:	0013      	movs	r3, r2
 8014762:	011b      	lsls	r3, r3, #4
 8014764:	1a9b      	subs	r3, r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	585b      	ldr	r3, [r3, r1]
 801476a:	2100      	movs	r1, #0
 801476c:	0018      	movs	r0, r3
 801476e:	f7ff fed4 	bl	801451a <LL_UCPD_SetTxMode>
          break;
 8014772:	e056      	b.n	8014822 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8014774:	240f      	movs	r4, #15
 8014776:	193b      	adds	r3, r7, r4
 8014778:	781a      	ldrb	r2, [r3, #0]
 801477a:	496a      	ldr	r1, [pc, #424]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801477c:	0013      	movs	r3, r2
 801477e:	011b      	lsls	r3, r3, #4
 8014780:	1a9b      	subs	r3, r3, r2
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	585b      	ldr	r3, [r3, r1]
 8014786:	4a6a      	ldr	r2, [pc, #424]	; (8014930 <USBPD_HW_IF_SendBuffer+0x2b4>)
 8014788:	0011      	movs	r1, r2
 801478a:	0018      	movs	r0, r3
 801478c:	f7ff ff16 	bl	80145bc <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8014790:	193b      	adds	r3, r7, r4
 8014792:	781a      	ldrb	r2, [r3, #0]
 8014794:	4963      	ldr	r1, [pc, #396]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014796:	0013      	movs	r3, r2
 8014798:	011b      	lsls	r3, r3, #4
 801479a:	1a9b      	subs	r3, r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	585b      	ldr	r3, [r3, r1]
 80147a0:	2100      	movs	r1, #0
 80147a2:	0018      	movs	r0, r3
 80147a4:	f7ff feb9 	bl	801451a <LL_UCPD_SetTxMode>
          break;
 80147a8:	e03b      	b.n	8014822 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80147aa:	240f      	movs	r4, #15
 80147ac:	193b      	adds	r3, r7, r4
 80147ae:	781a      	ldrb	r2, [r3, #0]
 80147b0:	495c      	ldr	r1, [pc, #368]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147b2:	0013      	movs	r3, r2
 80147b4:	011b      	lsls	r3, r3, #4
 80147b6:	1a9b      	subs	r3, r3, r2
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	585b      	ldr	r3, [r3, r1]
 80147bc:	4a5d      	ldr	r2, [pc, #372]	; (8014934 <USBPD_HW_IF_SendBuffer+0x2b8>)
 80147be:	0011      	movs	r1, r2
 80147c0:	0018      	movs	r0, r3
 80147c2:	f7ff fefb 	bl	80145bc <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80147c6:	193b      	adds	r3, r7, r4
 80147c8:	781a      	ldrb	r2, [r3, #0]
 80147ca:	4956      	ldr	r1, [pc, #344]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147cc:	0013      	movs	r3, r2
 80147ce:	011b      	lsls	r3, r3, #4
 80147d0:	1a9b      	subs	r3, r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	585b      	ldr	r3, [r3, r1]
 80147d6:	2100      	movs	r1, #0
 80147d8:	0018      	movs	r0, r3
 80147da:	f7ff fe9e 	bl	801451a <LL_UCPD_SetTxMode>
          break;
 80147de:	e020      	b.n	8014822 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 80147e0:	230f      	movs	r3, #15
 80147e2:	18fb      	adds	r3, r7, r3
 80147e4:	781a      	ldrb	r2, [r3, #0]
 80147e6:	494f      	ldr	r1, [pc, #316]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80147e8:	0013      	movs	r3, r2
 80147ea:	011b      	lsls	r3, r3, #4
 80147ec:	1a9b      	subs	r3, r3, r2
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	585b      	ldr	r3, [r3, r1]
 80147f2:	2101      	movs	r1, #1
 80147f4:	0018      	movs	r0, r3
 80147f6:	f7ff fe90 	bl	801451a <LL_UCPD_SetTxMode>
          break;
 80147fa:	e012      	b.n	8014822 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 80147fc:	230f      	movs	r3, #15
 80147fe:	18fb      	adds	r3, r7, r3
 8014800:	781a      	ldrb	r2, [r3, #0]
 8014802:	4948      	ldr	r1, [pc, #288]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014804:	0013      	movs	r3, r2
 8014806:	011b      	lsls	r3, r3, #4
 8014808:	1a9b      	subs	r3, r3, r2
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	585b      	ldr	r3, [r3, r1]
 801480e:	2102      	movs	r1, #2
 8014810:	0018      	movs	r0, r3
 8014812:	f7ff fe82 	bl	801451a <LL_UCPD_SetTxMode>
          break;
 8014816:	e004      	b.n	8014822 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 8014818:	2327      	movs	r3, #39	; 0x27
 801481a:	18fb      	adds	r3, r7, r3
 801481c:	2202      	movs	r2, #2
 801481e:	701a      	strb	r2, [r3, #0]
          break;
 8014820:	46c0      	nop			; (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8014822:	2327      	movs	r3, #39	; 0x27
 8014824:	18fb      	adds	r3, r7, r3
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d173      	bne.n	8014914 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801482c:	200f      	movs	r0, #15
 801482e:	183b      	adds	r3, r7, r0
 8014830:	781a      	ldrb	r2, [r3, #0]
 8014832:	493c      	ldr	r1, [pc, #240]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014834:	0013      	movs	r3, r2
 8014836:	011b      	lsls	r3, r3, #4
 8014838:	1a9b      	subs	r3, r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	18cb      	adds	r3, r1, r3
 801483e:	3304      	adds	r3, #4
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	6819      	ldr	r1, [r3, #0]
 8014844:	183b      	adds	r3, r7, r0
 8014846:	781a      	ldrb	r2, [r3, #0]
 8014848:	4836      	ldr	r0, [pc, #216]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801484a:	0013      	movs	r3, r2
 801484c:	011b      	lsls	r3, r3, #4
 801484e:	1a9b      	subs	r3, r3, r2
 8014850:	009b      	lsls	r3, r3, #2
 8014852:	18c3      	adds	r3, r0, r3
 8014854:	3304      	adds	r3, #4
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2201      	movs	r2, #1
 801485a:	4391      	bics	r1, r2
 801485c:	000a      	movs	r2, r1
 801485e:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8014860:	46c0      	nop			; (mov r8, r8)
 8014862:	200f      	movs	r0, #15
 8014864:	183b      	adds	r3, r7, r0
 8014866:	781a      	ldrb	r2, [r3, #0]
 8014868:	492e      	ldr	r1, [pc, #184]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801486a:	0013      	movs	r3, r2
 801486c:	011b      	lsls	r3, r3, #4
 801486e:	1a9b      	subs	r3, r3, r2
 8014870:	009b      	lsls	r3, r3, #2
 8014872:	18cb      	adds	r3, r1, r3
 8014874:	3304      	adds	r3, #4
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2201      	movs	r2, #1
 801487c:	4013      	ands	r3, r2
 801487e:	2b01      	cmp	r3, #1
 8014880:	d0ef      	beq.n	8014862 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8014882:	0004      	movs	r4, r0
 8014884:	193b      	adds	r3, r7, r4
 8014886:	781a      	ldrb	r2, [r3, #0]
 8014888:	4926      	ldr	r1, [pc, #152]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801488a:	0013      	movs	r3, r2
 801488c:	011b      	lsls	r3, r3, #4
 801488e:	1a9b      	subs	r3, r3, r2
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	18cb      	adds	r3, r1, r3
 8014894:	3304      	adds	r3, #4
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	68ba      	ldr	r2, [r7, #8]
 801489a:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 801489c:	193b      	adds	r3, r7, r4
 801489e:	781a      	ldrb	r2, [r3, #0]
 80148a0:	4920      	ldr	r1, [pc, #128]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148a2:	0013      	movs	r3, r2
 80148a4:	011b      	lsls	r3, r3, #4
 80148a6:	1a9b      	subs	r3, r3, r2
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	18cb      	adds	r3, r1, r3
 80148ac:	3304      	adds	r3, #4
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	687a      	ldr	r2, [r7, #4]
 80148b2:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80148b4:	193b      	adds	r3, r7, r4
 80148b6:	781a      	ldrb	r2, [r3, #0]
 80148b8:	491a      	ldr	r1, [pc, #104]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148ba:	0013      	movs	r3, r2
 80148bc:	011b      	lsls	r3, r3, #4
 80148be:	1a9b      	subs	r3, r3, r2
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	18cb      	adds	r3, r1, r3
 80148c4:	3304      	adds	r3, #4
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	6819      	ldr	r1, [r3, #0]
 80148ca:	193b      	adds	r3, r7, r4
 80148cc:	781a      	ldrb	r2, [r3, #0]
 80148ce:	4815      	ldr	r0, [pc, #84]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148d0:	0013      	movs	r3, r2
 80148d2:	011b      	lsls	r3, r3, #4
 80148d4:	1a9b      	subs	r3, r3, r2
 80148d6:	009b      	lsls	r3, r3, #2
 80148d8:	18c3      	adds	r3, r0, r3
 80148da:	3304      	adds	r3, #4
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	2201      	movs	r2, #1
 80148e0:	430a      	orrs	r2, r1
 80148e2:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 80148e4:	193b      	adds	r3, r7, r4
 80148e6:	781a      	ldrb	r2, [r3, #0]
 80148e8:	490e      	ldr	r1, [pc, #56]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 80148ea:	0013      	movs	r3, r2
 80148ec:	011b      	lsls	r3, r3, #4
 80148ee:	1a9b      	subs	r3, r3, r2
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	585b      	ldr	r3, [r3, r1]
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	0011      	movs	r1, r2
 80148f8:	0018      	movs	r0, r3
 80148fa:	f7ff fe6b 	bl	80145d4 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80148fe:	193b      	adds	r3, r7, r4
 8014900:	781a      	ldrb	r2, [r3, #0]
 8014902:	4908      	ldr	r1, [pc, #32]	; (8014924 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8014904:	0013      	movs	r3, r2
 8014906:	011b      	lsls	r3, r3, #4
 8014908:	1a9b      	subs	r3, r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	585b      	ldr	r3, [r3, r1]
 801490e:	0018      	movs	r0, r3
 8014910:	f7ff fdf5 	bl	80144fe <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8014914:	2327      	movs	r3, #39	; 0x27
 8014916:	18fb      	adds	r3, r7, r3
 8014918:	781b      	ldrb	r3, [r3, #0]
}
 801491a:	0018      	movs	r0, r3
 801491c:	46bd      	mov	sp, r7
 801491e:	b00b      	add	sp, #44	; 0x2c
 8014920:	bd90      	pop	{r4, r7, pc}
 8014922:	46c0      	nop			; (mov r8, r8)
 8014924:	200005ac 	.word	0x200005ac
 8014928:	08024fc0 	.word	0x08024fc0
 801492c:	0008e318 	.word	0x0008e318
 8014930:	00031b18 	.word	0x00031b18
 8014934:	000360d8 	.word	0x000360d8

08014938 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	0002      	movs	r2, r0
 8014940:	1dfb      	adds	r3, r7, #7
 8014942:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8014944:	1dfb      	adds	r3, r7, #7
 8014946:	781a      	ldrb	r2, [r3, #0]
 8014948:	490c      	ldr	r1, [pc, #48]	; (801497c <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 801494a:	0013      	movs	r3, r2
 801494c:	011b      	lsls	r3, r3, #4
 801494e:	1a9b      	subs	r3, r3, r2
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	585b      	ldr	r3, [r3, r1]
 8014954:	2102      	movs	r1, #2
 8014956:	0018      	movs	r0, r3
 8014958:	f7ff fddf 	bl	801451a <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801495c:	1dfb      	adds	r3, r7, #7
 801495e:	781a      	ldrb	r2, [r3, #0]
 8014960:	4906      	ldr	r1, [pc, #24]	; (801497c <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8014962:	0013      	movs	r3, r2
 8014964:	011b      	lsls	r3, r3, #4
 8014966:	1a9b      	subs	r3, r3, r2
 8014968:	009b      	lsls	r3, r3, #2
 801496a:	585b      	ldr	r3, [r3, r1]
 801496c:	0018      	movs	r0, r3
 801496e:	f7ff fdc6 	bl	80144fe <LL_UCPD_SendMessage>
}
 8014972:	46c0      	nop			; (mov r8, r8)
 8014974:	46bd      	mov	sp, r7
 8014976:	b002      	add	sp, #8
 8014978:	bd80      	pop	{r7, pc}
 801497a:	46c0      	nop			; (mov r8, r8)
 801497c:	200005ac 	.word	0x200005ac

08014980 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	0002      	movs	r2, r0
 8014988:	1dfb      	adds	r3, r7, #7
 801498a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 801498c:	2001      	movs	r0, #1
 801498e:	f7ff fc7d 	bl	801428c <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 8014992:	1dfb      	adds	r3, r7, #7
 8014994:	781a      	ldrb	r2, [r3, #0]
 8014996:	4953      	ldr	r1, [pc, #332]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014998:	0013      	movs	r3, r2
 801499a:	011b      	lsls	r3, r3, #4
 801499c:	1a9b      	subs	r3, r3, r2
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	18cb      	adds	r3, r1, r3
 80149a2:	3310      	adds	r3, #16
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	789b      	ldrb	r3, [r3, #2]
 80149a8:	079b      	lsls	r3, r3, #30
 80149aa:	0f9b      	lsrs	r3, r3, #30
 80149ac:	b2db      	uxtb	r3, r3
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d021      	beq.n	80149f6 <USBPDM1_AssertRp+0x76>
 80149b2:	dc2f      	bgt.n	8014a14 <USBPDM1_AssertRp+0x94>
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d002      	beq.n	80149be <USBPDM1_AssertRp+0x3e>
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d00d      	beq.n	80149d8 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 80149bc:	e02a      	b.n	8014a14 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 80149be:	1dfb      	adds	r3, r7, #7
 80149c0:	781a      	ldrb	r2, [r3, #0]
 80149c2:	4948      	ldr	r1, [pc, #288]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 80149c4:	0013      	movs	r3, r2
 80149c6:	011b      	lsls	r3, r3, #4
 80149c8:	1a9b      	subs	r3, r3, r2
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	585b      	ldr	r3, [r3, r1]
 80149ce:	2180      	movs	r1, #128	; 0x80
 80149d0:	0018      	movs	r0, r3
 80149d2:	f7ff fd31 	bl	8014438 <LL_UCPD_SetRpResistor>
      break;
 80149d6:	e01e      	b.n	8014a16 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80149d8:	1dfb      	adds	r3, r7, #7
 80149da:	781a      	ldrb	r2, [r3, #0]
 80149dc:	4941      	ldr	r1, [pc, #260]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 80149de:	0013      	movs	r3, r2
 80149e0:	011b      	lsls	r3, r3, #4
 80149e2:	1a9b      	subs	r3, r3, r2
 80149e4:	009b      	lsls	r3, r3, #2
 80149e6:	585b      	ldr	r3, [r3, r1]
 80149e8:	2280      	movs	r2, #128	; 0x80
 80149ea:	0052      	lsls	r2, r2, #1
 80149ec:	0011      	movs	r1, r2
 80149ee:	0018      	movs	r0, r3
 80149f0:	f7ff fd22 	bl	8014438 <LL_UCPD_SetRpResistor>
      break;
 80149f4:	e00f      	b.n	8014a16 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80149f6:	1dfb      	adds	r3, r7, #7
 80149f8:	781a      	ldrb	r2, [r3, #0]
 80149fa:	493a      	ldr	r1, [pc, #232]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 80149fc:	0013      	movs	r3, r2
 80149fe:	011b      	lsls	r3, r3, #4
 8014a00:	1a9b      	subs	r3, r3, r2
 8014a02:	009b      	lsls	r3, r3, #2
 8014a04:	585b      	ldr	r3, [r3, r1]
 8014a06:	22c0      	movs	r2, #192	; 0xc0
 8014a08:	0052      	lsls	r2, r2, #1
 8014a0a:	0011      	movs	r1, r2
 8014a0c:	0018      	movs	r0, r3
 8014a0e:	f7ff fd13 	bl	8014438 <LL_UCPD_SetRpResistor>
      break;
 8014a12:	e000      	b.n	8014a16 <USBPDM1_AssertRp+0x96>
      break;
 8014a14:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014a16:	1dfb      	adds	r3, r7, #7
 8014a18:	781a      	ldrb	r2, [r3, #0]
 8014a1a:	4932      	ldr	r1, [pc, #200]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a1c:	0013      	movs	r3, r2
 8014a1e:	011b      	lsls	r3, r3, #4
 8014a20:	1a9b      	subs	r3, r3, r2
 8014a22:	009b      	lsls	r3, r3, #2
 8014a24:	585b      	ldr	r3, [r3, r1]
 8014a26:	2100      	movs	r1, #0
 8014a28:	0018      	movs	r0, r3
 8014a2a:	f7ff fcd1 	bl	80143d0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8014a2e:	1dfb      	adds	r3, r7, #7
 8014a30:	781a      	ldrb	r2, [r3, #0]
 8014a32:	492c      	ldr	r1, [pc, #176]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a34:	0013      	movs	r3, r2
 8014a36:	011b      	lsls	r3, r3, #4
 8014a38:	1a9b      	subs	r3, r3, r2
 8014a3a:	009b      	lsls	r3, r3, #2
 8014a3c:	585b      	ldr	r3, [r3, r1]
 8014a3e:	0018      	movs	r0, r3
 8014a40:	f7ff fcea 	bl	8014418 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8014a44:	1dfb      	adds	r3, r7, #7
 8014a46:	781a      	ldrb	r2, [r3, #0]
 8014a48:	4926      	ldr	r1, [pc, #152]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a4a:	0013      	movs	r3, r2
 8014a4c:	011b      	lsls	r3, r3, #4
 8014a4e:	1a9b      	subs	r3, r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	18cb      	adds	r3, r1, r3
 8014a54:	3334      	adds	r3, #52	; 0x34
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d10e      	bne.n	8014a7a <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8014a5c:	1dfb      	adds	r3, r7, #7
 8014a5e:	781a      	ldrb	r2, [r3, #0]
 8014a60:	4920      	ldr	r1, [pc, #128]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a62:	0013      	movs	r3, r2
 8014a64:	011b      	lsls	r3, r3, #4
 8014a66:	1a9b      	subs	r3, r3, r2
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	585b      	ldr	r3, [r3, r1]
 8014a6c:	22c0      	movs	r2, #192	; 0xc0
 8014a6e:	0112      	lsls	r2, r2, #4
 8014a70:	0011      	movs	r1, r2
 8014a72:	0018      	movs	r0, r3
 8014a74:	f7ff fcac 	bl	80143d0 <LL_UCPD_SetccEnable>
 8014a78:	e01b      	b.n	8014ab2 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014a7a:	1dfb      	adds	r3, r7, #7
 8014a7c:	781a      	ldrb	r2, [r3, #0]
 8014a7e:	4919      	ldr	r1, [pc, #100]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a80:	0013      	movs	r3, r2
 8014a82:	011b      	lsls	r3, r3, #4
 8014a84:	1a9b      	subs	r3, r3, r2
 8014a86:	009b      	lsls	r3, r3, #2
 8014a88:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8014a8a:	1dfb      	adds	r3, r7, #7
 8014a8c:	781a      	ldrb	r2, [r3, #0]
 8014a8e:	4915      	ldr	r1, [pc, #84]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014a90:	0013      	movs	r3, r2
 8014a92:	011b      	lsls	r3, r3, #4
 8014a94:	1a9b      	subs	r3, r3, r2
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	18cb      	adds	r3, r1, r3
 8014a9a:	3334      	adds	r3, #52	; 0x34
 8014a9c:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d102      	bne.n	8014aa8 <USBPDM1_AssertRp+0x128>
 8014aa2:	2380      	movs	r3, #128	; 0x80
 8014aa4:	00db      	lsls	r3, r3, #3
 8014aa6:	e001      	b.n	8014aac <USBPDM1_AssertRp+0x12c>
 8014aa8:	2380      	movs	r3, #128	; 0x80
 8014aaa:	011b      	lsls	r3, r3, #4
 8014aac:	0019      	movs	r1, r3
 8014aae:	f7ff fc8f 	bl	80143d0 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014ab2:	4b0d      	ldr	r3, [pc, #52]	; (8014ae8 <USBPDM1_AssertRp+0x168>)
 8014ab4:	6819      	ldr	r1, [r3, #0]
 8014ab6:	1dfb      	adds	r3, r7, #7
 8014ab8:	781a      	ldrb	r2, [r3, #0]
 8014aba:	480a      	ldr	r0, [pc, #40]	; (8014ae4 <USBPDM1_AssertRp+0x164>)
 8014abc:	0013      	movs	r3, r2
 8014abe:	011b      	lsls	r3, r3, #4
 8014ac0:	1a9b      	subs	r3, r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	581b      	ldr	r3, [r3, r0]
 8014ac6:	4a09      	ldr	r2, [pc, #36]	; (8014aec <USBPDM1_AssertRp+0x16c>)
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	d102      	bne.n	8014ad2 <USBPDM1_AssertRp+0x152>
 8014acc:	2380      	movs	r3, #128	; 0x80
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	e001      	b.n	8014ad6 <USBPDM1_AssertRp+0x156>
 8014ad2:	2380      	movs	r3, #128	; 0x80
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	4a04      	ldr	r2, [pc, #16]	; (8014ae8 <USBPDM1_AssertRp+0x168>)
 8014ad8:	430b      	orrs	r3, r1
 8014ada:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8014adc:	46c0      	nop			; (mov r8, r8)
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	b002      	add	sp, #8
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	200005ac 	.word	0x200005ac
 8014ae8:	40010000 	.word	0x40010000
 8014aec:	4000a000 	.word	0x4000a000

08014af0 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	0002      	movs	r2, r0
 8014af8:	1dfb      	adds	r3, r7, #7
 8014afa:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8014afc:	46c0      	nop			; (mov r8, r8)
 8014afe:	46bd      	mov	sp, r7
 8014b00:	b002      	add	sp, #8
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	0002      	movs	r2, r0
 8014b0c:	1dfb      	adds	r3, r7, #7
 8014b0e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8014b10:	1dfb      	adds	r3, r7, #7
 8014b12:	781a      	ldrb	r2, [r3, #0]
 8014b14:	494b      	ldr	r1, [pc, #300]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b16:	0013      	movs	r3, r2
 8014b18:	011b      	lsls	r3, r3, #4
 8014b1a:	1a9b      	subs	r3, r3, r2
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	585b      	ldr	r3, [r3, r1]
 8014b20:	0018      	movs	r0, r3
 8014b22:	f7ff fbf7 	bl	8014314 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8014b26:	1dfb      	adds	r3, r7, #7
 8014b28:	781a      	ldrb	r2, [r3, #0]
 8014b2a:	4946      	ldr	r1, [pc, #280]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b2c:	0013      	movs	r3, r2
 8014b2e:	011b      	lsls	r3, r3, #4
 8014b30:	1a9b      	subs	r3, r3, r2
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	585b      	ldr	r3, [r3, r1]
 8014b36:	0018      	movs	r0, r3
 8014b38:	f7ff fc0c 	bl	8014354 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8014b3c:	2001      	movs	r0, #1
 8014b3e:	f7ff fba5 	bl	801428c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014b42:	1dfb      	adds	r3, r7, #7
 8014b44:	781a      	ldrb	r2, [r3, #0]
 8014b46:	493f      	ldr	r1, [pc, #252]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b48:	0013      	movs	r3, r2
 8014b4a:	011b      	lsls	r3, r3, #4
 8014b4c:	1a9b      	subs	r3, r3, r2
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	585b      	ldr	r3, [r3, r1]
 8014b52:	2100      	movs	r1, #0
 8014b54:	0018      	movs	r0, r3
 8014b56:	f7ff fc3b 	bl	80143d0 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8014b5a:	1dfb      	adds	r3, r7, #7
 8014b5c:	781a      	ldrb	r2, [r3, #0]
 8014b5e:	4939      	ldr	r1, [pc, #228]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b60:	0013      	movs	r3, r2
 8014b62:	011b      	lsls	r3, r3, #4
 8014b64:	1a9b      	subs	r3, r3, r2
 8014b66:	009b      	lsls	r3, r3, #2
 8014b68:	585b      	ldr	r3, [r3, r1]
 8014b6a:	0018      	movs	r0, r3
 8014b6c:	f7ff fc44 	bl	80143f8 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8014b70:	1dfb      	adds	r3, r7, #7
 8014b72:	781a      	ldrb	r2, [r3, #0]
 8014b74:	4933      	ldr	r1, [pc, #204]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b76:	0013      	movs	r3, r2
 8014b78:	011b      	lsls	r3, r3, #4
 8014b7a:	1a9b      	subs	r3, r3, r2
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	18cb      	adds	r3, r1, r3
 8014b80:	3334      	adds	r3, #52	; 0x34
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d10e      	bne.n	8014ba6 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8014b88:	1dfb      	adds	r3, r7, #7
 8014b8a:	781a      	ldrb	r2, [r3, #0]
 8014b8c:	492d      	ldr	r1, [pc, #180]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014b8e:	0013      	movs	r3, r2
 8014b90:	011b      	lsls	r3, r3, #4
 8014b92:	1a9b      	subs	r3, r3, r2
 8014b94:	009b      	lsls	r3, r3, #2
 8014b96:	585b      	ldr	r3, [r3, r1]
 8014b98:	22c0      	movs	r2, #192	; 0xc0
 8014b9a:	0112      	lsls	r2, r2, #4
 8014b9c:	0011      	movs	r1, r2
 8014b9e:	0018      	movs	r0, r3
 8014ba0:	f7ff fc16 	bl	80143d0 <LL_UCPD_SetccEnable>
 8014ba4:	e01b      	b.n	8014bde <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014ba6:	1dfb      	adds	r3, r7, #7
 8014ba8:	781a      	ldrb	r2, [r3, #0]
 8014baa:	4926      	ldr	r1, [pc, #152]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014bac:	0013      	movs	r3, r2
 8014bae:	011b      	lsls	r3, r3, #4
 8014bb0:	1a9b      	subs	r3, r3, r2
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8014bb6:	1dfb      	adds	r3, r7, #7
 8014bb8:	781a      	ldrb	r2, [r3, #0]
 8014bba:	4922      	ldr	r1, [pc, #136]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014bbc:	0013      	movs	r3, r2
 8014bbe:	011b      	lsls	r3, r3, #4
 8014bc0:	1a9b      	subs	r3, r3, r2
 8014bc2:	009b      	lsls	r3, r3, #2
 8014bc4:	18cb      	adds	r3, r1, r3
 8014bc6:	3334      	adds	r3, #52	; 0x34
 8014bc8:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d102      	bne.n	8014bd4 <USBPDM1_AssertRd+0xd0>
 8014bce:	2380      	movs	r3, #128	; 0x80
 8014bd0:	00db      	lsls	r3, r3, #3
 8014bd2:	e001      	b.n	8014bd8 <USBPDM1_AssertRd+0xd4>
 8014bd4:	2380      	movs	r3, #128	; 0x80
 8014bd6:	011b      	lsls	r3, r3, #4
 8014bd8:	0019      	movs	r1, r3
 8014bda:	f7ff fbf9 	bl	80143d0 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014bde:	4b1a      	ldr	r3, [pc, #104]	; (8014c48 <USBPDM1_AssertRd+0x144>)
 8014be0:	6819      	ldr	r1, [r3, #0]
 8014be2:	1dfb      	adds	r3, r7, #7
 8014be4:	781a      	ldrb	r2, [r3, #0]
 8014be6:	4817      	ldr	r0, [pc, #92]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014be8:	0013      	movs	r3, r2
 8014bea:	011b      	lsls	r3, r3, #4
 8014bec:	1a9b      	subs	r3, r3, r2
 8014bee:	009b      	lsls	r3, r3, #2
 8014bf0:	581b      	ldr	r3, [r3, r0]
 8014bf2:	4a16      	ldr	r2, [pc, #88]	; (8014c4c <USBPDM1_AssertRd+0x148>)
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d102      	bne.n	8014bfe <USBPDM1_AssertRd+0xfa>
 8014bf8:	2380      	movs	r3, #128	; 0x80
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	e001      	b.n	8014c02 <USBPDM1_AssertRd+0xfe>
 8014bfe:	2380      	movs	r3, #128	; 0x80
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	4a11      	ldr	r2, [pc, #68]	; (8014c48 <USBPDM1_AssertRd+0x144>)
 8014c04:	430b      	orrs	r3, r1
 8014c06:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8014c08:	2001      	movs	r0, #1
 8014c0a:	f7f4 fbc1 	bl	8009390 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8014c0e:	1dfb      	adds	r3, r7, #7
 8014c10:	781a      	ldrb	r2, [r3, #0]
 8014c12:	490c      	ldr	r1, [pc, #48]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014c14:	0013      	movs	r3, r2
 8014c16:	011b      	lsls	r3, r3, #4
 8014c18:	1a9b      	subs	r3, r3, r2
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	585b      	ldr	r3, [r3, r1]
 8014c1e:	0018      	movs	r0, r3
 8014c20:	f7ff fb68 	bl	80142f4 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8014c24:	1dfb      	adds	r3, r7, #7
 8014c26:	781a      	ldrb	r2, [r3, #0]
 8014c28:	4906      	ldr	r1, [pc, #24]	; (8014c44 <USBPDM1_AssertRd+0x140>)
 8014c2a:	0013      	movs	r3, r2
 8014c2c:	011b      	lsls	r3, r3, #4
 8014c2e:	1a9b      	subs	r3, r3, r2
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	585b      	ldr	r3, [r3, r1]
 8014c34:	0018      	movs	r0, r3
 8014c36:	f7ff fb7d 	bl	8014334 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8014c3a:	46c0      	nop			; (mov r8, r8)
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	b002      	add	sp, #8
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	46c0      	nop			; (mov r8, r8)
 8014c44:	200005ac 	.word	0x200005ac
 8014c48:	40010000 	.word	0x40010000
 8014c4c:	4000a000 	.word	0x4000a000

08014c50 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b082      	sub	sp, #8
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	0002      	movs	r2, r0
 8014c58:	1dfb      	adds	r3, r7, #7
 8014c5a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8014c5c:	46c0      	nop			; (mov r8, r8)
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	b002      	add	sp, #8
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	0002      	movs	r2, r0
 8014c6c:	1dfb      	adds	r3, r7, #7
 8014c6e:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8014c70:	2001      	movs	r0, #1
 8014c72:	f7ff fb0b 	bl	801428c <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8014c76:	1dfb      	adds	r3, r7, #7
 8014c78:	781a      	ldrb	r2, [r3, #0]
 8014c7a:	4930      	ldr	r1, [pc, #192]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014c7c:	0013      	movs	r3, r2
 8014c7e:	011b      	lsls	r3, r3, #4
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	009b      	lsls	r3, r3, #2
 8014c84:	585b      	ldr	r3, [r3, r1]
 8014c86:	0018      	movs	r0, r3
 8014c88:	f7ff fbc6 	bl	8014418 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8014c8c:	1dfb      	adds	r3, r7, #7
 8014c8e:	781a      	ldrb	r2, [r3, #0]
 8014c90:	492a      	ldr	r1, [pc, #168]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014c92:	0013      	movs	r3, r2
 8014c94:	011b      	lsls	r3, r3, #4
 8014c96:	1a9b      	subs	r3, r3, r2
 8014c98:	009b      	lsls	r3, r3, #2
 8014c9a:	585b      	ldr	r3, [r3, r1]
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	0018      	movs	r0, r3
 8014ca0:	f7ff fbca 	bl	8014438 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014ca4:	1dfb      	adds	r3, r7, #7
 8014ca6:	781a      	ldrb	r2, [r3, #0]
 8014ca8:	4924      	ldr	r1, [pc, #144]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014caa:	0013      	movs	r3, r2
 8014cac:	011b      	lsls	r3, r3, #4
 8014cae:	1a9b      	subs	r3, r3, r2
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	585b      	ldr	r3, [r3, r1]
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	0018      	movs	r0, r3
 8014cb8:	f7ff fb8a 	bl	80143d0 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8014cbc:	4b20      	ldr	r3, [pc, #128]	; (8014d40 <USBPDM1_EnterErrorRecovery+0xdc>)
 8014cbe:	6819      	ldr	r1, [r3, #0]
 8014cc0:	1dfb      	adds	r3, r7, #7
 8014cc2:	781a      	ldrb	r2, [r3, #0]
 8014cc4:	481d      	ldr	r0, [pc, #116]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014cc6:	0013      	movs	r3, r2
 8014cc8:	011b      	lsls	r3, r3, #4
 8014cca:	1a9b      	subs	r3, r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	581b      	ldr	r3, [r3, r0]
 8014cd0:	4a1c      	ldr	r2, [pc, #112]	; (8014d44 <USBPDM1_EnterErrorRecovery+0xe0>)
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	d102      	bne.n	8014cdc <USBPDM1_EnterErrorRecovery+0x78>
 8014cd6:	2380      	movs	r3, #128	; 0x80
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	e001      	b.n	8014ce0 <USBPDM1_EnterErrorRecovery+0x7c>
 8014cdc:	2380      	movs	r3, #128	; 0x80
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	4a17      	ldr	r2, [pc, #92]	; (8014d40 <USBPDM1_EnterErrorRecovery+0xdc>)
 8014ce2:	430b      	orrs	r3, r1
 8014ce4:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8014ce6:	1dfb      	adds	r3, r7, #7
 8014ce8:	781a      	ldrb	r2, [r3, #0]
 8014cea:	4914      	ldr	r1, [pc, #80]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014cec:	0013      	movs	r3, r2
 8014cee:	011b      	lsls	r3, r3, #4
 8014cf0:	1a9b      	subs	r3, r3, r2
 8014cf2:	009b      	lsls	r3, r3, #2
 8014cf4:	585b      	ldr	r3, [r3, r1]
 8014cf6:	0018      	movs	r0, r3
 8014cf8:	f7ff fbd2 	bl	80144a0 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8014cfc:	1dfb      	adds	r3, r7, #7
 8014cfe:	781a      	ldrb	r2, [r3, #0]
 8014d00:	490e      	ldr	r1, [pc, #56]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d02:	0013      	movs	r3, r2
 8014d04:	011b      	lsls	r3, r3, #4
 8014d06:	1a9b      	subs	r3, r3, r2
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	18cb      	adds	r3, r1, r3
 8014d0c:	330c      	adds	r3, #12
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	7a1b      	ldrb	r3, [r3, #8]
 8014d12:	2202      	movs	r2, #2
 8014d14:	4013      	ands	r3, r2
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00a      	beq.n	8014d32 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8014d1c:	1dfb      	adds	r3, r7, #7
 8014d1e:	781a      	ldrb	r2, [r3, #0]
 8014d20:	4906      	ldr	r1, [pc, #24]	; (8014d3c <USBPDM1_EnterErrorRecovery+0xd8>)
 8014d22:	0013      	movs	r3, r2
 8014d24:	011b      	lsls	r3, r3, #4
 8014d26:	1a9b      	subs	r3, r3, r2
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	585b      	ldr	r3, [r3, r1]
 8014d2c:	0018      	movs	r0, r3
 8014d2e:	f7ff fb3f 	bl	80143b0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8014d32:	46c0      	nop			; (mov r8, r8)
 8014d34:	46bd      	mov	sp, r7
 8014d36:	b002      	add	sp, #8
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	46c0      	nop			; (mov r8, r8)
 8014d3c:	200005ac 	.word	0x200005ac
 8014d40:	40010000 	.word	0x40010000
 8014d44:	4000a000 	.word	0x4000a000

08014d48 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	0002      	movs	r2, r0
 8014d50:	1dfb      	adds	r3, r7, #7
 8014d52:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8014d54:	1dfb      	adds	r3, r7, #7
 8014d56:	781a      	ldrb	r2, [r3, #0]
 8014d58:	4906      	ldr	r1, [pc, #24]	; (8014d74 <USBPD_HW_IF_EnableRX+0x2c>)
 8014d5a:	0013      	movs	r3, r2
 8014d5c:	011b      	lsls	r3, r3, #4
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	585b      	ldr	r3, [r3, r1]
 8014d64:	0018      	movs	r0, r3
 8014d66:	f7ff fb8d 	bl	8014484 <LL_UCPD_RxEnable>
}
 8014d6a:	46c0      	nop			; (mov r8, r8)
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	b002      	add	sp, #8
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	46c0      	nop			; (mov r8, r8)
 8014d74:	200005ac 	.word	0x200005ac

08014d78 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	0002      	movs	r2, r0
 8014d80:	1dfb      	adds	r3, r7, #7
 8014d82:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8014d84:	1dfb      	adds	r3, r7, #7
 8014d86:	781a      	ldrb	r2, [r3, #0]
 8014d88:	4906      	ldr	r1, [pc, #24]	; (8014da4 <USBPD_HW_IF_DisableRX+0x2c>)
 8014d8a:	0013      	movs	r3, r2
 8014d8c:	011b      	lsls	r3, r3, #4
 8014d8e:	1a9b      	subs	r3, r3, r2
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	585b      	ldr	r3, [r3, r1]
 8014d94:	0018      	movs	r0, r3
 8014d96:	f7ff fb83 	bl	80144a0 <LL_UCPD_RxDisable>
}
 8014d9a:	46c0      	nop			; (mov r8, r8)
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	b002      	add	sp, #8
 8014da0:	bd80      	pop	{r7, pc}
 8014da2:	46c0      	nop			; (mov r8, r8)
 8014da4:	200005ac 	.word	0x200005ac

08014da8 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8014da8:	b590      	push	{r4, r7, lr}
 8014daa:	b085      	sub	sp, #20
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	0002      	movs	r2, r0
 8014db0:	6039      	str	r1, [r7, #0]
 8014db2:	1dfb      	adds	r3, r7, #7
 8014db4:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8014db6:	f000 fc65 	bl	8015684 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8014dba:	1dfb      	adds	r3, r7, #7
 8014dbc:	781c      	ldrb	r4, [r3, #0]
 8014dbe:	1dfb      	adds	r3, r7, #7
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	0018      	movs	r0, r3
 8014dc4:	f7fe fd32 	bl	801382c <USBPD_HW_Init_DMATxInstance>
 8014dc8:	0001      	movs	r1, r0
 8014dca:	4aa6      	ldr	r2, [pc, #664]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014dcc:	0023      	movs	r3, r4
 8014dce:	011b      	lsls	r3, r3, #4
 8014dd0:	1b1b      	subs	r3, r3, r4
 8014dd2:	009b      	lsls	r3, r3, #2
 8014dd4:	18d3      	adds	r3, r2, r3
 8014dd6:	3304      	adds	r3, #4
 8014dd8:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8014dda:	1dfb      	adds	r3, r7, #7
 8014ddc:	781c      	ldrb	r4, [r3, #0]
 8014dde:	1dfb      	adds	r3, r7, #7
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	0018      	movs	r0, r3
 8014de4:	f7fe fcd2 	bl	801378c <USBPD_HW_Init_DMARxInstance>
 8014de8:	0001      	movs	r1, r0
 8014dea:	4a9e      	ldr	r2, [pc, #632]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014dec:	0023      	movs	r3, r4
 8014dee:	011b      	lsls	r3, r3, #4
 8014df0:	1b1b      	subs	r3, r3, r4
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	18d3      	adds	r3, r2, r3
 8014df6:	3308      	adds	r3, #8
 8014df8:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8014dfa:	1dfb      	adds	r3, r7, #7
 8014dfc:	781a      	ldrb	r2, [r3, #0]
 8014dfe:	4999      	ldr	r1, [pc, #612]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e00:	0013      	movs	r3, r2
 8014e02:	011b      	lsls	r3, r3, #4
 8014e04:	1a9b      	subs	r3, r3, r2
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	585b      	ldr	r3, [r3, r1]
 8014e0a:	3330      	adds	r3, #48	; 0x30
 8014e0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8014e0e:	1dfb      	adds	r3, r7, #7
 8014e10:	781a      	ldrb	r2, [r3, #0]
 8014e12:	4994      	ldr	r1, [pc, #592]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e14:	0013      	movs	r3, r2
 8014e16:	011b      	lsls	r3, r3, #4
 8014e18:	1a9b      	subs	r3, r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	18cb      	adds	r3, r1, r3
 8014e1e:	3308      	adds	r3, #8
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	68fa      	ldr	r2, [r7, #12]
 8014e24:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8014e26:	1dfb      	adds	r3, r7, #7
 8014e28:	781a      	ldrb	r2, [r3, #0]
 8014e2a:	498e      	ldr	r1, [pc, #568]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e2c:	0013      	movs	r3, r2
 8014e2e:	011b      	lsls	r3, r3, #4
 8014e30:	1a9b      	subs	r3, r3, r2
 8014e32:	009b      	lsls	r3, r3, #2
 8014e34:	18cb      	adds	r3, r1, r3
 8014e36:	3330      	adds	r3, #48	; 0x30
 8014e38:	6818      	ldr	r0, [r3, #0]
 8014e3a:	1dfb      	adds	r3, r7, #7
 8014e3c:	781a      	ldrb	r2, [r3, #0]
 8014e3e:	4989      	ldr	r1, [pc, #548]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e40:	0013      	movs	r3, r2
 8014e42:	011b      	lsls	r3, r3, #4
 8014e44:	1a9b      	subs	r3, r3, r2
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	18cb      	adds	r3, r1, r3
 8014e4a:	3308      	adds	r3, #8
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	0002      	movs	r2, r0
 8014e50:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8014e52:	1dfb      	adds	r3, r7, #7
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	4983      	ldr	r1, [pc, #524]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e58:	0013      	movs	r3, r2
 8014e5a:	011b      	lsls	r3, r3, #4
 8014e5c:	1a9b      	subs	r3, r3, r2
 8014e5e:	009b      	lsls	r3, r3, #2
 8014e60:	18cb      	adds	r3, r1, r3
 8014e62:	3308      	adds	r3, #8
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	2284      	movs	r2, #132	; 0x84
 8014e68:	0052      	lsls	r2, r2, #1
 8014e6a:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8014e6c:	1dfb      	adds	r3, r7, #7
 8014e6e:	781a      	ldrb	r2, [r3, #0]
 8014e70:	497c      	ldr	r1, [pc, #496]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e72:	0013      	movs	r3, r2
 8014e74:	011b      	lsls	r3, r3, #4
 8014e76:	1a9b      	subs	r3, r3, r2
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	18cb      	adds	r3, r1, r3
 8014e7c:	3308      	adds	r3, #8
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	6819      	ldr	r1, [r3, #0]
 8014e82:	1dfb      	adds	r3, r7, #7
 8014e84:	781a      	ldrb	r2, [r3, #0]
 8014e86:	4877      	ldr	r0, [pc, #476]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014e88:	0013      	movs	r3, r2
 8014e8a:	011b      	lsls	r3, r3, #4
 8014e8c:	1a9b      	subs	r3, r3, r2
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	18c3      	adds	r3, r0, r3
 8014e92:	3308      	adds	r3, #8
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2201      	movs	r2, #1
 8014e98:	430a      	orrs	r2, r1
 8014e9a:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8014e9c:	1dfb      	adds	r3, r7, #7
 8014e9e:	781a      	ldrb	r2, [r3, #0]
 8014ea0:	4970      	ldr	r1, [pc, #448]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014ea2:	0013      	movs	r3, r2
 8014ea4:	011b      	lsls	r3, r3, #4
 8014ea6:	1a9b      	subs	r3, r3, r2
 8014ea8:	009b      	lsls	r3, r3, #2
 8014eaa:	585b      	ldr	r3, [r3, r1]
 8014eac:	3324      	adds	r3, #36	; 0x24
 8014eae:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8014eb0:	1dfb      	adds	r3, r7, #7
 8014eb2:	781a      	ldrb	r2, [r3, #0]
 8014eb4:	496b      	ldr	r1, [pc, #428]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014eb6:	0013      	movs	r3, r2
 8014eb8:	011b      	lsls	r3, r3, #4
 8014eba:	1a9b      	subs	r3, r3, r2
 8014ebc:	009b      	lsls	r3, r3, #2
 8014ebe:	18cb      	adds	r3, r1, r3
 8014ec0:	3304      	adds	r3, #4
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	68fa      	ldr	r2, [r7, #12]
 8014ec6:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8014ec8:	1dfb      	adds	r3, r7, #7
 8014eca:	781a      	ldrb	r2, [r3, #0]
 8014ecc:	4965      	ldr	r1, [pc, #404]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014ece:	0013      	movs	r3, r2
 8014ed0:	011b      	lsls	r3, r3, #4
 8014ed2:	1a9b      	subs	r3, r3, r2
 8014ed4:	009b      	lsls	r3, r3, #2
 8014ed6:	585b      	ldr	r3, [r3, r1]
 8014ed8:	6919      	ldr	r1, [r3, #16]
 8014eda:	1dfb      	adds	r3, r7, #7
 8014edc:	781a      	ldrb	r2, [r3, #0]
 8014ede:	4861      	ldr	r0, [pc, #388]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014ee0:	0013      	movs	r3, r2
 8014ee2:	011b      	lsls	r3, r3, #4
 8014ee4:	1a9b      	subs	r3, r3, r2
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	581b      	ldr	r3, [r3, r0]
 8014eea:	4a5f      	ldr	r2, [pc, #380]	; (8015068 <HW_SignalAttachement+0x2c0>)
 8014eec:	430a      	orrs	r2, r1
 8014eee:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8014ef0:	1dfb      	adds	r3, r7, #7
 8014ef2:	781a      	ldrb	r2, [r3, #0]
 8014ef4:	495b      	ldr	r1, [pc, #364]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014ef6:	0013      	movs	r3, r2
 8014ef8:	011b      	lsls	r3, r3, #4
 8014efa:	1a9b      	subs	r3, r3, r2
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	18cb      	adds	r3, r1, r3
 8014f00:	3334      	adds	r3, #52	; 0x34
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8014f06:	1dfb      	adds	r3, r7, #7
 8014f08:	781a      	ldrb	r2, [r3, #0]
 8014f0a:	4956      	ldr	r1, [pc, #344]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014f0c:	0013      	movs	r3, r2
 8014f0e:	011b      	lsls	r3, r3, #4
 8014f10:	1a9b      	subs	r3, r3, r2
 8014f12:	009b      	lsls	r3, r3, #2
 8014f14:	5858      	ldr	r0, [r3, r1]
 8014f16:	1dfb      	adds	r3, r7, #7
 8014f18:	781a      	ldrb	r2, [r3, #0]
 8014f1a:	4952      	ldr	r1, [pc, #328]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014f1c:	0013      	movs	r3, r2
 8014f1e:	011b      	lsls	r3, r3, #4
 8014f20:	1a9b      	subs	r3, r3, r2
 8014f22:	009b      	lsls	r3, r3, #2
 8014f24:	18cb      	adds	r3, r1, r3
 8014f26:	3334      	adds	r3, #52	; 0x34
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d101      	bne.n	8014f32 <HW_SignalAttachement+0x18a>
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e000      	b.n	8014f34 <HW_SignalAttachement+0x18c>
 8014f32:	2340      	movs	r3, #64	; 0x40
 8014f34:	0019      	movs	r1, r3
 8014f36:	f7ff fa93 	bl	8014460 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8014f3a:	1dfb      	adds	r3, r7, #7
 8014f3c:	781a      	ldrb	r2, [r3, #0]
 8014f3e:	4949      	ldr	r1, [pc, #292]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014f40:	0013      	movs	r3, r2
 8014f42:	011b      	lsls	r3, r3, #4
 8014f44:	1a9b      	subs	r3, r3, r2
 8014f46:	009b      	lsls	r3, r3, #2
 8014f48:	18cb      	adds	r3, r1, r3
 8014f4a:	330c      	adds	r3, #12
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	7a1b      	ldrb	r3, [r3, #8]
 8014f50:	2202      	movs	r2, #2
 8014f52:	4013      	ands	r3, r2
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d034      	beq.n	8014fc4 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8014f5a:	1dfb      	adds	r3, r7, #7
 8014f5c:	781a      	ldrb	r2, [r3, #0]
 8014f5e:	4941      	ldr	r1, [pc, #260]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014f60:	0013      	movs	r3, r2
 8014f62:	011b      	lsls	r3, r3, #4
 8014f64:	1a9b      	subs	r3, r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	18cb      	adds	r3, r1, r3
 8014f6a:	3334      	adds	r3, #52	; 0x34
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d101      	bne.n	8014f76 <HW_SignalAttachement+0x1ce>
 8014f72:	2301      	movs	r3, #1
 8014f74:	e000      	b.n	8014f78 <HW_SignalAttachement+0x1d0>
 8014f76:	2302      	movs	r3, #2
 8014f78:	1dfa      	adds	r2, r7, #7
 8014f7a:	7812      	ldrb	r2, [r2, #0]
 8014f7c:	0019      	movs	r1, r3
 8014f7e:	0010      	movs	r0, r2
 8014f80:	f7fe fca4 	bl	80138cc <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8014f84:	1dfb      	adds	r3, r7, #7
 8014f86:	781a      	ldrb	r2, [r3, #0]
 8014f88:	4936      	ldr	r1, [pc, #216]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014f8a:	0013      	movs	r3, r2
 8014f8c:	011b      	lsls	r3, r3, #4
 8014f8e:	1a9b      	subs	r3, r3, r2
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	585b      	ldr	r3, [r3, r1]
 8014f94:	0018      	movs	r0, r3
 8014f96:	f7ff f9fb 	bl	8014390 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8014f9a:	1dfb      	adds	r3, r7, #7
 8014f9c:	781a      	ldrb	r2, [r3, #0]
 8014f9e:	4931      	ldr	r1, [pc, #196]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014fa0:	0013      	movs	r3, r2
 8014fa2:	011b      	lsls	r3, r3, #4
 8014fa4:	1a9b      	subs	r3, r3, r2
 8014fa6:	009b      	lsls	r3, r3, #2
 8014fa8:	585b      	ldr	r3, [r3, r1]
 8014faa:	6919      	ldr	r1, [r3, #16]
 8014fac:	1dfb      	adds	r3, r7, #7
 8014fae:	781a      	ldrb	r2, [r3, #0]
 8014fb0:	482c      	ldr	r0, [pc, #176]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014fb2:	0013      	movs	r3, r2
 8014fb4:	011b      	lsls	r3, r3, #4
 8014fb6:	1a9b      	subs	r3, r3, r2
 8014fb8:	009b      	lsls	r3, r3, #2
 8014fba:	581b      	ldr	r3, [r3, r0]
 8014fbc:	2280      	movs	r2, #128	; 0x80
 8014fbe:	0352      	lsls	r2, r2, #13
 8014fc0:	430a      	orrs	r2, r1
 8014fc2:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8014fc4:	1dfb      	adds	r3, r7, #7
 8014fc6:	781a      	ldrb	r2, [r3, #0]
 8014fc8:	4926      	ldr	r1, [pc, #152]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014fca:	0013      	movs	r3, r2
 8014fcc:	011b      	lsls	r3, r3, #4
 8014fce:	1a9b      	subs	r3, r3, r2
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	18cb      	adds	r3, r1, r3
 8014fd4:	3334      	adds	r3, #52	; 0x34
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d10e      	bne.n	8014ffa <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8014fdc:	1dfb      	adds	r3, r7, #7
 8014fde:	781a      	ldrb	r2, [r3, #0]
 8014fe0:	4920      	ldr	r1, [pc, #128]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8014fe2:	0013      	movs	r3, r2
 8014fe4:	011b      	lsls	r3, r3, #4
 8014fe6:	1a9b      	subs	r3, r3, r2
 8014fe8:	009b      	lsls	r3, r3, #2
 8014fea:	585b      	ldr	r3, [r3, r1]
 8014fec:	2280      	movs	r2, #128	; 0x80
 8014fee:	00d2      	lsls	r2, r2, #3
 8014ff0:	0011      	movs	r1, r2
 8014ff2:	0018      	movs	r0, r3
 8014ff4:	f7ff f9ec 	bl	80143d0 <LL_UCPD_SetccEnable>
 8014ff8:	e00d      	b.n	8015016 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8014ffa:	1dfb      	adds	r3, r7, #7
 8014ffc:	781a      	ldrb	r2, [r3, #0]
 8014ffe:	4919      	ldr	r1, [pc, #100]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8015000:	0013      	movs	r3, r2
 8015002:	011b      	lsls	r3, r3, #4
 8015004:	1a9b      	subs	r3, r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	585b      	ldr	r3, [r3, r1]
 801500a:	2280      	movs	r2, #128	; 0x80
 801500c:	0112      	lsls	r2, r2, #4
 801500e:	0011      	movs	r1, r2
 8015010:	0018      	movs	r0, r3
 8015012:	f7ff f9dd 	bl	80143d0 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8015016:	1dfb      	adds	r3, r7, #7
 8015018:	781a      	ldrb	r2, [r3, #0]
 801501a:	4912      	ldr	r1, [pc, #72]	; (8015064 <HW_SignalAttachement+0x2bc>)
 801501c:	0013      	movs	r3, r2
 801501e:	011b      	lsls	r3, r3, #4
 8015020:	1a9b      	subs	r3, r3, r2
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	585b      	ldr	r3, [r3, r1]
 8015026:	2100      	movs	r1, #0
 8015028:	0018      	movs	r0, r3
 801502a:	f7ff fa48 	bl	80144be <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 801502e:	1dfb      	adds	r3, r7, #7
 8015030:	781a      	ldrb	r2, [r3, #0]
 8015032:	490c      	ldr	r1, [pc, #48]	; (8015064 <HW_SignalAttachement+0x2bc>)
 8015034:	0013      	movs	r3, r2
 8015036:	011b      	lsls	r3, r3, #4
 8015038:	1a9b      	subs	r3, r3, r2
 801503a:	009b      	lsls	r3, r3, #2
 801503c:	585b      	ldr	r3, [r3, r1]
 801503e:	0018      	movs	r0, r3
 8015040:	f7ff fa7d 	bl	801453e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8015044:	1dfb      	adds	r3, r7, #7
 8015046:	781a      	ldrb	r2, [r3, #0]
 8015048:	4906      	ldr	r1, [pc, #24]	; (8015064 <HW_SignalAttachement+0x2bc>)
 801504a:	0013      	movs	r3, r2
 801504c:	011b      	lsls	r3, r3, #4
 801504e:	1a9b      	subs	r3, r3, r2
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	585b      	ldr	r3, [r3, r1]
 8015054:	0018      	movs	r0, r3
 8015056:	f7ff fa91 	bl	801457c <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801505a:	46c0      	nop			; (mov r8, r8)
 801505c:	46bd      	mov	sp, r7
 801505e:	b005      	add	sp, #20
 8015060:	bd90      	pop	{r4, r7, pc}
 8015062:	46c0      	nop			; (mov r8, r8)
 8015064:	200005ac 	.word	0x200005ac
 8015068:	00001e7e 	.word	0x00001e7e

0801506c <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	0002      	movs	r2, r0
 8015074:	1dfb      	adds	r3, r7, #7
 8015076:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8015078:	1dfb      	adds	r3, r7, #7
 801507a:	781a      	ldrb	r2, [r3, #0]
 801507c:	4941      	ldr	r1, [pc, #260]	; (8015184 <HW_SignalDetachment+0x118>)
 801507e:	0013      	movs	r3, r2
 8015080:	011b      	lsls	r3, r3, #4
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	009b      	lsls	r3, r3, #2
 8015086:	585b      	ldr	r3, [r3, r1]
 8015088:	0018      	movs	r0, r3
 801508a:	f7ff fa67 	bl	801455c <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 801508e:	1dfb      	adds	r3, r7, #7
 8015090:	781a      	ldrb	r2, [r3, #0]
 8015092:	493c      	ldr	r1, [pc, #240]	; (8015184 <HW_SignalDetachment+0x118>)
 8015094:	0013      	movs	r3, r2
 8015096:	011b      	lsls	r3, r3, #4
 8015098:	1a9b      	subs	r3, r3, r2
 801509a:	009b      	lsls	r3, r3, #2
 801509c:	585b      	ldr	r3, [r3, r1]
 801509e:	0018      	movs	r0, r3
 80150a0:	f7ff fa7c 	bl	801459c <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80150a4:	1dfb      	adds	r3, r7, #7
 80150a6:	781a      	ldrb	r2, [r3, #0]
 80150a8:	4936      	ldr	r1, [pc, #216]	; (8015184 <HW_SignalDetachment+0x118>)
 80150aa:	0013      	movs	r3, r2
 80150ac:	011b      	lsls	r3, r3, #4
 80150ae:	1a9b      	subs	r3, r3, r2
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	585b      	ldr	r3, [r3, r1]
 80150b4:	0018      	movs	r0, r3
 80150b6:	f7ff f9f3 	bl	80144a0 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80150ba:	1dfb      	adds	r3, r7, #7
 80150bc:	781a      	ldrb	r2, [r3, #0]
 80150be:	4931      	ldr	r1, [pc, #196]	; (8015184 <HW_SignalDetachment+0x118>)
 80150c0:	0013      	movs	r3, r2
 80150c2:	011b      	lsls	r3, r3, #4
 80150c4:	1a9b      	subs	r3, r3, r2
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	585b      	ldr	r3, [r3, r1]
 80150ca:	22c0      	movs	r2, #192	; 0xc0
 80150cc:	0212      	lsls	r2, r2, #8
 80150ce:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80150d0:	1dfb      	adds	r3, r7, #7
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	0018      	movs	r0, r3
 80150d6:	f7fe fbef 	bl	80138b8 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 80150da:	1dfb      	adds	r3, r7, #7
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	0018      	movs	r0, r3
 80150e0:	f7fe fb9a 	bl	8013818 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80150e4:	1dfb      	adds	r3, r7, #7
 80150e6:	781a      	ldrb	r2, [r3, #0]
 80150e8:	4926      	ldr	r1, [pc, #152]	; (8015184 <HW_SignalDetachment+0x118>)
 80150ea:	0013      	movs	r3, r2
 80150ec:	011b      	lsls	r3, r3, #4
 80150ee:	1a9b      	subs	r3, r3, r2
 80150f0:	009b      	lsls	r3, r3, #2
 80150f2:	585b      	ldr	r3, [r3, r1]
 80150f4:	22c0      	movs	r2, #192	; 0xc0
 80150f6:	0112      	lsls	r2, r2, #4
 80150f8:	0011      	movs	r1, r2
 80150fa:	0018      	movs	r0, r3
 80150fc:	f7ff f968 	bl	80143d0 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8015100:	1dfb      	adds	r3, r7, #7
 8015102:	781a      	ldrb	r2, [r3, #0]
 8015104:	491f      	ldr	r1, [pc, #124]	; (8015184 <HW_SignalDetachment+0x118>)
 8015106:	0013      	movs	r3, r2
 8015108:	011b      	lsls	r3, r3, #4
 801510a:	1a9b      	subs	r3, r3, r2
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	18cb      	adds	r3, r1, r3
 8015110:	3310      	adds	r3, #16
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	2204      	movs	r2, #4
 8015118:	4013      	ands	r3, r2
 801511a:	b2db      	uxtb	r3, r3
 801511c:	2b00      	cmp	r3, #0
 801511e:	d104      	bne.n	801512a <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8015120:	1dfb      	adds	r3, r7, #7
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	0018      	movs	r0, r3
 8015126:	f007 fa5d 	bl	801c5e4 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801512a:	1dfb      	adds	r3, r7, #7
 801512c:	781a      	ldrb	r2, [r3, #0]
 801512e:	4915      	ldr	r1, [pc, #84]	; (8015184 <HW_SignalDetachment+0x118>)
 8015130:	0013      	movs	r3, r2
 8015132:	011b      	lsls	r3, r3, #4
 8015134:	1a9b      	subs	r3, r3, r2
 8015136:	009b      	lsls	r3, r3, #2
 8015138:	18cb      	adds	r3, r1, r3
 801513a:	330c      	adds	r3, #12
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	7a1b      	ldrb	r3, [r3, #8]
 8015140:	2202      	movs	r2, #2
 8015142:	4013      	ands	r3, r2
 8015144:	b2db      	uxtb	r3, r3
 8015146:	2b00      	cmp	r3, #0
 8015148:	d00a      	beq.n	8015160 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801514a:	1dfb      	adds	r3, r7, #7
 801514c:	781a      	ldrb	r2, [r3, #0]
 801514e:	490d      	ldr	r1, [pc, #52]	; (8015184 <HW_SignalDetachment+0x118>)
 8015150:	0013      	movs	r3, r2
 8015152:	011b      	lsls	r3, r3, #4
 8015154:	1a9b      	subs	r3, r3, r2
 8015156:	009b      	lsls	r3, r3, #2
 8015158:	585b      	ldr	r3, [r3, r1]
 801515a:	0018      	movs	r0, r3
 801515c:	f7ff f928 	bl	80143b0 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8015160:	1dfb      	adds	r3, r7, #7
 8015162:	781a      	ldrb	r2, [r3, #0]
 8015164:	4907      	ldr	r1, [pc, #28]	; (8015184 <HW_SignalDetachment+0x118>)
 8015166:	0013      	movs	r3, r2
 8015168:	011b      	lsls	r3, r3, #4
 801516a:	1a9b      	subs	r3, r3, r2
 801516c:	009b      	lsls	r3, r3, #2
 801516e:	18cb      	adds	r3, r1, r3
 8015170:	3334      	adds	r3, #52	; 0x34
 8015172:	2200      	movs	r2, #0
 8015174:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8015176:	f000 fb25 	bl	80157c4 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 801517a:	46c0      	nop			; (mov r8, r8)
 801517c:	46bd      	mov	sp, r7
 801517e:	b002      	add	sp, #8
 8015180:	bd80      	pop	{r7, pc}
 8015182:	46c0      	nop			; (mov r8, r8)
 8015184:	200005ac 	.word	0x200005ac

08015188 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	0002      	movs	r2, r0
 8015190:	1dfb      	adds	r3, r7, #7
 8015192:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8015194:	1dfb      	adds	r3, r7, #7
 8015196:	781a      	ldrb	r2, [r3, #0]
 8015198:	4907      	ldr	r1, [pc, #28]	; (80151b8 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 801519a:	0013      	movs	r3, r2
 801519c:	011b      	lsls	r3, r3, #4
 801519e:	1a9b      	subs	r3, r3, r2
 80151a0:	009b      	lsls	r3, r3, #2
 80151a2:	585b      	ldr	r3, [r3, r1]
 80151a4:	2280      	movs	r2, #128	; 0x80
 80151a6:	0052      	lsls	r2, r2, #1
 80151a8:	0011      	movs	r1, r2
 80151aa:	0018      	movs	r0, r3
 80151ac:	f7ff f944 	bl	8014438 <LL_UCPD_SetRpResistor>
}
 80151b0:	46c0      	nop			; (mov r8, r8)
 80151b2:	46bd      	mov	sp, r7
 80151b4:	b002      	add	sp, #8
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	200005ac 	.word	0x200005ac

080151bc <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	0002      	movs	r2, r0
 80151c4:	1dfb      	adds	r3, r7, #7
 80151c6:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80151c8:	1dfb      	adds	r3, r7, #7
 80151ca:	781a      	ldrb	r2, [r3, #0]
 80151cc:	4907      	ldr	r1, [pc, #28]	; (80151ec <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 80151ce:	0013      	movs	r3, r2
 80151d0:	011b      	lsls	r3, r3, #4
 80151d2:	1a9b      	subs	r3, r3, r2
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	585b      	ldr	r3, [r3, r1]
 80151d8:	22c0      	movs	r2, #192	; 0xc0
 80151da:	0052      	lsls	r2, r2, #1
 80151dc:	0011      	movs	r1, r2
 80151de:	0018      	movs	r0, r3
 80151e0:	f7ff f92a 	bl	8014438 <LL_UCPD_SetRpResistor>
}
 80151e4:	46c0      	nop			; (mov r8, r8)
 80151e6:	46bd      	mov	sp, r7
 80151e8:	b002      	add	sp, #8
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	200005ac 	.word	0x200005ac

080151f0 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	0002      	movs	r2, r0
 80151f8:	1dfb      	adds	r3, r7, #7
 80151fa:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80151fc:	1dfb      	adds	r3, r7, #7
 80151fe:	781a      	ldrb	r2, [r3, #0]
 8015200:	491c      	ldr	r1, [pc, #112]	; (8015274 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015202:	0013      	movs	r3, r2
 8015204:	011b      	lsls	r3, r3, #4
 8015206:	1a9b      	subs	r3, r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	18cb      	adds	r3, r1, r3
 801520c:	3334      	adds	r3, #52	; 0x34
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2b01      	cmp	r3, #1
 8015212:	d002      	beq.n	801521a <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8015214:	2b02      	cmp	r3, #2
 8015216:	d012      	beq.n	801523e <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8015218:	e026      	b.n	8015268 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801521a:	1dfb      	adds	r3, r7, #7
 801521c:	781a      	ldrb	r2, [r3, #0]
 801521e:	4915      	ldr	r1, [pc, #84]	; (8015274 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015220:	0013      	movs	r3, r2
 8015222:	011b      	lsls	r3, r3, #4
 8015224:	1a9b      	subs	r3, r3, r2
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	585b      	ldr	r3, [r3, r1]
 801522a:	695a      	ldr	r2, [r3, #20]
 801522c:	23c0      	movs	r3, #192	; 0xc0
 801522e:	029b      	lsls	r3, r3, #10
 8015230:	401a      	ands	r2, r3
 8015232:	23c0      	movs	r3, #192	; 0xc0
 8015234:	029b      	lsls	r3, r3, #10
 8015236:	429a      	cmp	r2, r3
 8015238:	d113      	bne.n	8015262 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 801523a:	2301      	movs	r3, #1
 801523c:	e015      	b.n	801526a <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 801523e:	1dfb      	adds	r3, r7, #7
 8015240:	781a      	ldrb	r2, [r3, #0]
 8015242:	490c      	ldr	r1, [pc, #48]	; (8015274 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8015244:	0013      	movs	r3, r2
 8015246:	011b      	lsls	r3, r3, #4
 8015248:	1a9b      	subs	r3, r3, r2
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	585b      	ldr	r3, [r3, r1]
 801524e:	695a      	ldr	r2, [r3, #20]
 8015250:	23c0      	movs	r3, #192	; 0xc0
 8015252:	031b      	lsls	r3, r3, #12
 8015254:	401a      	ands	r2, r3
 8015256:	23c0      	movs	r3, #192	; 0xc0
 8015258:	031b      	lsls	r3, r3, #12
 801525a:	429a      	cmp	r2, r3
 801525c:	d103      	bne.n	8015266 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 801525e:	2301      	movs	r3, #1
 8015260:	e003      	b.n	801526a <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 8015262:	46c0      	nop			; (mov r8, r8)
 8015264:	e000      	b.n	8015268 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 8015266:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 8015268:	2300      	movs	r3, #0
}
 801526a:	0018      	movs	r0, r3
 801526c:	46bd      	mov	sp, r7
 801526e:	b002      	add	sp, #8
 8015270:	bd80      	pop	{r7, pc}
 8015272:	46c0      	nop			; (mov r8, r8)
 8015274:	200005ac 	.word	0x200005ac

08015278 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	0002      	movs	r2, r0
 8015280:	1dfb      	adds	r3, r7, #7
 8015282:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8015284:	1dfb      	adds	r3, r7, #7
 8015286:	781a      	ldrb	r2, [r3, #0]
 8015288:	4906      	ldr	r1, [pc, #24]	; (80152a4 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 801528a:	0013      	movs	r3, r2
 801528c:	011b      	lsls	r3, r3, #4
 801528e:	1a9b      	subs	r3, r3, r2
 8015290:	009b      	lsls	r3, r3, #2
 8015292:	585b      	ldr	r3, [r3, r1]
 8015294:	0018      	movs	r0, r3
 8015296:	f7ff f86c 	bl	8014372 <LL_UCPD_SignalFRSTX>
}
 801529a:	46c0      	nop			; (mov r8, r8)
 801529c:	46bd      	mov	sp, r7
 801529e:	b002      	add	sp, #8
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	46c0      	nop			; (mov r8, r8)
 80152a4:	200005ac 	.word	0x200005ac

080152a8 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	0002      	movs	r2, r0
 80152b0:	1dfb      	adds	r3, r7, #7
 80152b2:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 80152b4:	1dfb      	adds	r3, r7, #7
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	220c      	movs	r2, #12
 80152ba:	18ba      	adds	r2, r7, r2
 80152bc:	0011      	movs	r1, r2
 80152be:	0018      	movs	r0, r3
 80152c0:	f007 f9ae 	bl	801c620 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	b29b      	uxth	r3, r3
}
 80152c8:	0018      	movs	r0, r3
 80152ca:	46bd      	mov	sp, r7
 80152cc:	b004      	add	sp, #16
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	0002      	movs	r2, r0
 80152d8:	1dfb      	adds	r3, r7, #7
 80152da:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 80152dc:	1dfb      	adds	r3, r7, #7
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	220c      	movs	r2, #12
 80152e2:	18ba      	adds	r2, r7, r2
 80152e4:	0011      	movs	r1, r2
 80152e6:	0018      	movs	r0, r3
 80152e8:	f007 f9d6 	bl	801c698 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	b21b      	sxth	r3, r3
}
 80152f0:	0018      	movs	r0, r3
 80152f2:	46bd      	mov	sp, r7
 80152f4:	b004      	add	sp, #16
 80152f6:	bd80      	pop	{r7, pc}

080152f8 <LL_APB2_GRP1_EnableClock>:
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8015300:	4b07      	ldr	r3, [pc, #28]	; (8015320 <LL_APB2_GRP1_EnableClock+0x28>)
 8015302:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8015304:	4b06      	ldr	r3, [pc, #24]	; (8015320 <LL_APB2_GRP1_EnableClock+0x28>)
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	430a      	orrs	r2, r1
 801530a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 801530c:	4b04      	ldr	r3, [pc, #16]	; (8015320 <LL_APB2_GRP1_EnableClock+0x28>)
 801530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015310:	687a      	ldr	r2, [r7, #4]
 8015312:	4013      	ands	r3, r2
 8015314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015316:	68fb      	ldr	r3, [r7, #12]
}
 8015318:	46c0      	nop			; (mov r8, r8)
 801531a:	46bd      	mov	sp, r7
 801531c:	b004      	add	sp, #16
 801531e:	bd80      	pop	{r7, pc}
 8015320:	40021000 	.word	0x40021000

08015324 <LL_APB2_GRP1_DisableClock>:
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 801532c:	4b05      	ldr	r3, [pc, #20]	; (8015344 <LL_APB2_GRP1_DisableClock+0x20>)
 801532e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	43d9      	mvns	r1, r3
 8015334:	4b03      	ldr	r3, [pc, #12]	; (8015344 <LL_APB2_GRP1_DisableClock+0x20>)
 8015336:	400a      	ands	r2, r1
 8015338:	641a      	str	r2, [r3, #64]	; 0x40
}
 801533a:	46c0      	nop			; (mov r8, r8)
 801533c:	46bd      	mov	sp, r7
 801533e:	b002      	add	sp, #8
 8015340:	bd80      	pop	{r7, pc}
 8015342:	46c0      	nop			; (mov r8, r8)
 8015344:	40021000 	.word	0x40021000

08015348 <LL_TIM_EnableCounter>:
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2201      	movs	r2, #1
 8015356:	431a      	orrs	r2, r3
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	601a      	str	r2, [r3, #0]
}
 801535c:	46c0      	nop			; (mov r8, r8)
 801535e:	46bd      	mov	sp, r7
 8015360:	b002      	add	sp, #8
 8015362:	bd80      	pop	{r7, pc}

08015364 <LL_TIM_SetCounterMode>:
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	2270      	movs	r2, #112	; 0x70
 8015374:	4393      	bics	r3, r2
 8015376:	001a      	movs	r2, r3
 8015378:	683b      	ldr	r3, [r7, #0]
 801537a:	431a      	orrs	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	601a      	str	r2, [r3, #0]
}
 8015380:	46c0      	nop			; (mov r8, r8)
 8015382:	46bd      	mov	sp, r7
 8015384:	b002      	add	sp, #8
 8015386:	bd80      	pop	{r7, pc}

08015388 <LL_TIM_SetPrescaler>:
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	683a      	ldr	r2, [r7, #0]
 8015396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015398:	46c0      	nop			; (mov r8, r8)
 801539a:	46bd      	mov	sp, r7
 801539c:	b002      	add	sp, #8
 801539e:	bd80      	pop	{r7, pc}

080153a0 <LL_TIM_GetPrescaler>:
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80153ac:	0018      	movs	r0, r3
 80153ae:	46bd      	mov	sp, r7
 80153b0:	b002      	add	sp, #8
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <LL_TIM_SetAutoReload>:
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	683a      	ldr	r2, [r7, #0]
 80153c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80153c4:	46c0      	nop			; (mov r8, r8)
 80153c6:	46bd      	mov	sp, r7
 80153c8:	b002      	add	sp, #8
 80153ca:	bd80      	pop	{r7, pc}

080153cc <LL_TIM_OC_SetMode>:
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b086      	sub	sp, #24
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	60b9      	str	r1, [r7, #8]
 80153d6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d02c      	beq.n	8015438 <LL_TIM_OC_SetMode+0x6c>
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	2b04      	cmp	r3, #4
 80153e2:	d027      	beq.n	8015434 <LL_TIM_OC_SetMode+0x68>
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	2b10      	cmp	r3, #16
 80153e8:	d022      	beq.n	8015430 <LL_TIM_OC_SetMode+0x64>
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	2b40      	cmp	r3, #64	; 0x40
 80153ee:	d01d      	beq.n	801542c <LL_TIM_OC_SetMode+0x60>
 80153f0:	68ba      	ldr	r2, [r7, #8]
 80153f2:	2380      	movs	r3, #128	; 0x80
 80153f4:	005b      	lsls	r3, r3, #1
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d016      	beq.n	8015428 <LL_TIM_OC_SetMode+0x5c>
 80153fa:	68ba      	ldr	r2, [r7, #8]
 80153fc:	2380      	movs	r3, #128	; 0x80
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	429a      	cmp	r2, r3
 8015402:	d00f      	beq.n	8015424 <LL_TIM_OC_SetMode+0x58>
 8015404:	68ba      	ldr	r2, [r7, #8]
 8015406:	2380      	movs	r3, #128	; 0x80
 8015408:	015b      	lsls	r3, r3, #5
 801540a:	429a      	cmp	r2, r3
 801540c:	d008      	beq.n	8015420 <LL_TIM_OC_SetMode+0x54>
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	2380      	movs	r3, #128	; 0x80
 8015412:	025b      	lsls	r3, r3, #9
 8015414:	429a      	cmp	r2, r3
 8015416:	d101      	bne.n	801541c <LL_TIM_OC_SetMode+0x50>
 8015418:	2307      	movs	r3, #7
 801541a:	e00e      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 801541c:	2308      	movs	r3, #8
 801541e:	e00c      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015420:	2306      	movs	r3, #6
 8015422:	e00a      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015424:	2305      	movs	r3, #5
 8015426:	e008      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015428:	2304      	movs	r3, #4
 801542a:	e006      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 801542c:	2303      	movs	r3, #3
 801542e:	e004      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015430:	2302      	movs	r3, #2
 8015432:	e002      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015434:	2301      	movs	r3, #1
 8015436:	e000      	b.n	801543a <LL_TIM_OC_SetMode+0x6e>
 8015438:	2300      	movs	r3, #0
 801543a:	2017      	movs	r0, #23
 801543c:	183a      	adds	r2, r7, r0
 801543e:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	3318      	adds	r3, #24
 8015444:	0019      	movs	r1, r3
 8015446:	183b      	adds	r3, r7, r0
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	4a0e      	ldr	r2, [pc, #56]	; (8015484 <LL_TIM_OC_SetMode+0xb8>)
 801544c:	5cd3      	ldrb	r3, [r2, r3]
 801544e:	18cb      	adds	r3, r1, r3
 8015450:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	183a      	adds	r2, r7, r0
 8015458:	7812      	ldrb	r2, [r2, #0]
 801545a:	490b      	ldr	r1, [pc, #44]	; (8015488 <LL_TIM_OC_SetMode+0xbc>)
 801545c:	5c8a      	ldrb	r2, [r1, r2]
 801545e:	0011      	movs	r1, r2
 8015460:	4a0a      	ldr	r2, [pc, #40]	; (801548c <LL_TIM_OC_SetMode+0xc0>)
 8015462:	408a      	lsls	r2, r1
 8015464:	43d2      	mvns	r2, r2
 8015466:	401a      	ands	r2, r3
 8015468:	183b      	adds	r3, r7, r0
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	4906      	ldr	r1, [pc, #24]	; (8015488 <LL_TIM_OC_SetMode+0xbc>)
 801546e:	5ccb      	ldrb	r3, [r1, r3]
 8015470:	0019      	movs	r1, r3
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	408b      	lsls	r3, r1
 8015476:	431a      	orrs	r2, r3
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	601a      	str	r2, [r3, #0]
}
 801547c:	46c0      	nop			; (mov r8, r8)
 801547e:	46bd      	mov	sp, r7
 8015480:	b006      	add	sp, #24
 8015482:	bd80      	pop	{r7, pc}
 8015484:	08024fe0 	.word	0x08024fe0
 8015488:	08024fec 	.word	0x08024fec
 801548c:	00010073 	.word	0x00010073

08015490 <LL_TIM_OC_SetPolarity>:
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b086      	sub	sp, #24
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	2b01      	cmp	r3, #1
 80154a0:	d02c      	beq.n	80154fc <LL_TIM_OC_SetPolarity+0x6c>
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	2b04      	cmp	r3, #4
 80154a6:	d027      	beq.n	80154f8 <LL_TIM_OC_SetPolarity+0x68>
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2b10      	cmp	r3, #16
 80154ac:	d022      	beq.n	80154f4 <LL_TIM_OC_SetPolarity+0x64>
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	2b40      	cmp	r3, #64	; 0x40
 80154b2:	d01d      	beq.n	80154f0 <LL_TIM_OC_SetPolarity+0x60>
 80154b4:	68ba      	ldr	r2, [r7, #8]
 80154b6:	2380      	movs	r3, #128	; 0x80
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d016      	beq.n	80154ec <LL_TIM_OC_SetPolarity+0x5c>
 80154be:	68ba      	ldr	r2, [r7, #8]
 80154c0:	2380      	movs	r3, #128	; 0x80
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d00f      	beq.n	80154e8 <LL_TIM_OC_SetPolarity+0x58>
 80154c8:	68ba      	ldr	r2, [r7, #8]
 80154ca:	2380      	movs	r3, #128	; 0x80
 80154cc:	015b      	lsls	r3, r3, #5
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d008      	beq.n	80154e4 <LL_TIM_OC_SetPolarity+0x54>
 80154d2:	68ba      	ldr	r2, [r7, #8]
 80154d4:	2380      	movs	r3, #128	; 0x80
 80154d6:	025b      	lsls	r3, r3, #9
 80154d8:	429a      	cmp	r2, r3
 80154da:	d101      	bne.n	80154e0 <LL_TIM_OC_SetPolarity+0x50>
 80154dc:	2307      	movs	r3, #7
 80154de:	e00e      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154e0:	2308      	movs	r3, #8
 80154e2:	e00c      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154e4:	2306      	movs	r3, #6
 80154e6:	e00a      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154e8:	2305      	movs	r3, #5
 80154ea:	e008      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154ec:	2304      	movs	r3, #4
 80154ee:	e006      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154f0:	2303      	movs	r3, #3
 80154f2:	e004      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154f4:	2302      	movs	r3, #2
 80154f6:	e002      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154f8:	2301      	movs	r3, #1
 80154fa:	e000      	b.n	80154fe <LL_TIM_OC_SetPolarity+0x6e>
 80154fc:	2300      	movs	r3, #0
 80154fe:	2017      	movs	r0, #23
 8015500:	183a      	adds	r2, r7, r0
 8015502:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	6a1b      	ldr	r3, [r3, #32]
 8015508:	183a      	adds	r2, r7, r0
 801550a:	7812      	ldrb	r2, [r2, #0]
 801550c:	490a      	ldr	r1, [pc, #40]	; (8015538 <LL_TIM_OC_SetPolarity+0xa8>)
 801550e:	5c8a      	ldrb	r2, [r1, r2]
 8015510:	0011      	movs	r1, r2
 8015512:	2202      	movs	r2, #2
 8015514:	408a      	lsls	r2, r1
 8015516:	43d2      	mvns	r2, r2
 8015518:	401a      	ands	r2, r3
 801551a:	183b      	adds	r3, r7, r0
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	4906      	ldr	r1, [pc, #24]	; (8015538 <LL_TIM_OC_SetPolarity+0xa8>)
 8015520:	5ccb      	ldrb	r3, [r1, r3]
 8015522:	0019      	movs	r1, r3
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	408b      	lsls	r3, r1
 8015528:	431a      	orrs	r2, r3
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	621a      	str	r2, [r3, #32]
}
 801552e:	46c0      	nop			; (mov r8, r8)
 8015530:	46bd      	mov	sp, r7
 8015532:	b006      	add	sp, #24
 8015534:	bd80      	pop	{r7, pc}
 8015536:	46c0      	nop			; (mov r8, r8)
 8015538:	08024ff8 	.word	0x08024ff8

0801553c <LL_TIM_OC_SetCompareCH1>:
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b082      	sub	sp, #8
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	683a      	ldr	r2, [r7, #0]
 801554a:	635a      	str	r2, [r3, #52]	; 0x34
}
 801554c:	46c0      	nop			; (mov r8, r8)
 801554e:	46bd      	mov	sp, r7
 8015550:	b002      	add	sp, #8
 8015552:	bd80      	pop	{r7, pc}

08015554 <LL_TIM_OC_SetCompareCH2>:
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b082      	sub	sp, #8
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	683a      	ldr	r2, [r7, #0]
 8015562:	639a      	str	r2, [r3, #56]	; 0x38
}
 8015564:	46c0      	nop			; (mov r8, r8)
 8015566:	46bd      	mov	sp, r7
 8015568:	b002      	add	sp, #8
 801556a:	bd80      	pop	{r7, pc}

0801556c <LL_TIM_OC_SetCompareCH3>:
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b082      	sub	sp, #8
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	683a      	ldr	r2, [r7, #0]
 801557a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 801557c:	46c0      	nop			; (mov r8, r8)
 801557e:	46bd      	mov	sp, r7
 8015580:	b002      	add	sp, #8
 8015582:	bd80      	pop	{r7, pc}

08015584 <LL_TIM_OC_SetCompareCH4>:
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	683a      	ldr	r2, [r7, #0]
 8015592:	641a      	str	r2, [r3, #64]	; 0x40
}
 8015594:	46c0      	nop			; (mov r8, r8)
 8015596:	46bd      	mov	sp, r7
 8015598:	b002      	add	sp, #8
 801559a:	bd80      	pop	{r7, pc}

0801559c <LL_TIM_ClearFlag_CC1>:
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2203      	movs	r2, #3
 80155a8:	4252      	negs	r2, r2
 80155aa:	611a      	str	r2, [r3, #16]
}
 80155ac:	46c0      	nop			; (mov r8, r8)
 80155ae:	46bd      	mov	sp, r7
 80155b0:	b002      	add	sp, #8
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <LL_TIM_IsActiveFlag_CC1>:
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	691b      	ldr	r3, [r3, #16]
 80155c0:	2202      	movs	r2, #2
 80155c2:	4013      	ands	r3, r2
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	d101      	bne.n	80155cc <LL_TIM_IsActiveFlag_CC1+0x18>
 80155c8:	2301      	movs	r3, #1
 80155ca:	e000      	b.n	80155ce <LL_TIM_IsActiveFlag_CC1+0x1a>
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	0018      	movs	r0, r3
 80155d0:	46bd      	mov	sp, r7
 80155d2:	b002      	add	sp, #8
 80155d4:	bd80      	pop	{r7, pc}

080155d6 <LL_TIM_ClearFlag_CC2>:
{
 80155d6:	b580      	push	{r7, lr}
 80155d8:	b082      	sub	sp, #8
 80155da:	af00      	add	r7, sp, #0
 80155dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	2205      	movs	r2, #5
 80155e2:	4252      	negs	r2, r2
 80155e4:	611a      	str	r2, [r3, #16]
}
 80155e6:	46c0      	nop			; (mov r8, r8)
 80155e8:	46bd      	mov	sp, r7
 80155ea:	b002      	add	sp, #8
 80155ec:	bd80      	pop	{r7, pc}

080155ee <LL_TIM_IsActiveFlag_CC2>:
{
 80155ee:	b580      	push	{r7, lr}
 80155f0:	b082      	sub	sp, #8
 80155f2:	af00      	add	r7, sp, #0
 80155f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	691b      	ldr	r3, [r3, #16]
 80155fa:	2204      	movs	r2, #4
 80155fc:	4013      	ands	r3, r2
 80155fe:	2b04      	cmp	r3, #4
 8015600:	d101      	bne.n	8015606 <LL_TIM_IsActiveFlag_CC2+0x18>
 8015602:	2301      	movs	r3, #1
 8015604:	e000      	b.n	8015608 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8015606:	2300      	movs	r3, #0
}
 8015608:	0018      	movs	r0, r3
 801560a:	46bd      	mov	sp, r7
 801560c:	b002      	add	sp, #8
 801560e:	bd80      	pop	{r7, pc}

08015610 <LL_TIM_ClearFlag_CC3>:
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2209      	movs	r2, #9
 801561c:	4252      	negs	r2, r2
 801561e:	611a      	str	r2, [r3, #16]
}
 8015620:	46c0      	nop			; (mov r8, r8)
 8015622:	46bd      	mov	sp, r7
 8015624:	b002      	add	sp, #8
 8015626:	bd80      	pop	{r7, pc}

08015628 <LL_TIM_IsActiveFlag_CC3>:
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	691b      	ldr	r3, [r3, #16]
 8015634:	2208      	movs	r2, #8
 8015636:	4013      	ands	r3, r2
 8015638:	2b08      	cmp	r3, #8
 801563a:	d101      	bne.n	8015640 <LL_TIM_IsActiveFlag_CC3+0x18>
 801563c:	2301      	movs	r3, #1
 801563e:	e000      	b.n	8015642 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8015640:	2300      	movs	r3, #0
}
 8015642:	0018      	movs	r0, r3
 8015644:	46bd      	mov	sp, r7
 8015646:	b002      	add	sp, #8
 8015648:	bd80      	pop	{r7, pc}

0801564a <LL_TIM_ClearFlag_CC4>:
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b082      	sub	sp, #8
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2211      	movs	r2, #17
 8015656:	4252      	negs	r2, r2
 8015658:	611a      	str	r2, [r3, #16]
}
 801565a:	46c0      	nop			; (mov r8, r8)
 801565c:	46bd      	mov	sp, r7
 801565e:	b002      	add	sp, #8
 8015660:	bd80      	pop	{r7, pc}

08015662 <LL_TIM_IsActiveFlag_CC4>:
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b082      	sub	sp, #8
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	691b      	ldr	r3, [r3, #16]
 801566e:	2210      	movs	r2, #16
 8015670:	4013      	ands	r3, r2
 8015672:	2b10      	cmp	r3, #16
 8015674:	d101      	bne.n	801567a <LL_TIM_IsActiveFlag_CC4+0x18>
 8015676:	2301      	movs	r3, #1
 8015678:	e000      	b.n	801567c <LL_TIM_IsActiveFlag_CC4+0x1a>
 801567a:	2300      	movs	r3, #0
}
 801567c:	0018      	movs	r0, r3
 801567e:	46bd      	mov	sp, r7
 8015680:	b002      	add	sp, #8
 8015682:	bd80      	pop	{r7, pc}

08015684 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8015684:	b5b0      	push	{r4, r5, r7, lr}
 8015686:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8015688:	4b48      	ldr	r3, [pc, #288]	; (80157ac <USBPD_TIM_Init+0x128>)
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	b25b      	sxtb	r3, r3
 801568e:	2b00      	cmp	r3, #0
 8015690:	d000      	beq.n	8015694 <USBPD_TIM_Init+0x10>
 8015692:	e07e      	b.n	8015792 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8015694:	2380      	movs	r3, #128	; 0x80
 8015696:	011b      	lsls	r3, r3, #4
 8015698:	0018      	movs	r0, r3
 801569a:	f7ff fe2d 	bl	80152f8 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801569e:	4b44      	ldr	r3, [pc, #272]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 80156a0:	2100      	movs	r1, #0
 80156a2:	0018      	movs	r0, r3
 80156a4:	f7ff fe5e 	bl	8015364 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 80156a8:	4b42      	ldr	r3, [pc, #264]	; (80157b4 <USBPD_TIM_Init+0x130>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4a42      	ldr	r2, [pc, #264]	; (80157b8 <USBPD_TIM_Init+0x134>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d90b      	bls.n	80156ca <USBPD_TIM_Init+0x46>
 80156b2:	4b40      	ldr	r3, [pc, #256]	; (80157b4 <USBPD_TIM_Init+0x130>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4a41      	ldr	r2, [pc, #260]	; (80157bc <USBPD_TIM_Init+0x138>)
 80156b8:	4694      	mov	ip, r2
 80156ba:	4463      	add	r3, ip
 80156bc:	4940      	ldr	r1, [pc, #256]	; (80157c0 <USBPD_TIM_Init+0x13c>)
 80156be:	0018      	movs	r0, r3
 80156c0:	f7f0 fd96 	bl	80061f0 <__udivsi3>
 80156c4:	0003      	movs	r3, r0
 80156c6:	3b01      	subs	r3, #1
 80156c8:	e000      	b.n	80156cc <USBPD_TIM_Init+0x48>
 80156ca:	2300      	movs	r3, #0
 80156cc:	4a38      	ldr	r2, [pc, #224]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 80156ce:	0019      	movs	r1, r3
 80156d0:	0010      	movs	r0, r2
 80156d2:	f7ff fe59 	bl	8015388 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 80156d6:	4b37      	ldr	r3, [pc, #220]	; (80157b4 <USBPD_TIM_Init+0x130>)
 80156d8:	681c      	ldr	r4, [r3, #0]
 80156da:	4b35      	ldr	r3, [pc, #212]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 80156dc:	0018      	movs	r0, r3
 80156de:	f7ff fe5f 	bl	80153a0 <LL_TIM_GetPrescaler>
 80156e2:	0003      	movs	r3, r0
 80156e4:	3301      	adds	r3, #1
 80156e6:	0019      	movs	r1, r3
 80156e8:	0020      	movs	r0, r4
 80156ea:	f7f0 fd81 	bl	80061f0 <__udivsi3>
 80156ee:	0003      	movs	r3, r0
 80156f0:	2b63      	cmp	r3, #99	; 0x63
 80156f2:	d910      	bls.n	8015716 <USBPD_TIM_Init+0x92>
 80156f4:	4b2f      	ldr	r3, [pc, #188]	; (80157b4 <USBPD_TIM_Init+0x130>)
 80156f6:	681c      	ldr	r4, [r3, #0]
 80156f8:	4b2d      	ldr	r3, [pc, #180]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 80156fa:	0018      	movs	r0, r3
 80156fc:	f7ff fe50 	bl	80153a0 <LL_TIM_GetPrescaler>
 8015700:	0003      	movs	r3, r0
 8015702:	3301      	adds	r3, #1
 8015704:	2264      	movs	r2, #100	; 0x64
 8015706:	4353      	muls	r3, r2
 8015708:	0019      	movs	r1, r3
 801570a:	0020      	movs	r0, r4
 801570c:	f7f0 fd70 	bl	80061f0 <__udivsi3>
 8015710:	0003      	movs	r3, r0
 8015712:	3b01      	subs	r3, #1
 8015714:	e000      	b.n	8015718 <USBPD_TIM_Init+0x94>
 8015716:	2300      	movs	r3, #0
 8015718:	4a25      	ldr	r2, [pc, #148]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 801571a:	0019      	movs	r1, r3
 801571c:	0010      	movs	r0, r2
 801571e:	f7ff fe49 	bl	80153b4 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8015722:	4b23      	ldr	r3, [pc, #140]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015724:	2230      	movs	r2, #48	; 0x30
 8015726:	2101      	movs	r1, #1
 8015728:	0018      	movs	r0, r3
 801572a:	f7ff fe4f 	bl	80153cc <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 801572e:	4b20      	ldr	r3, [pc, #128]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015730:	2230      	movs	r2, #48	; 0x30
 8015732:	2110      	movs	r1, #16
 8015734:	0018      	movs	r0, r3
 8015736:	f7ff fe49 	bl	80153cc <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 801573a:	2380      	movs	r3, #128	; 0x80
 801573c:	005b      	lsls	r3, r3, #1
 801573e:	481c      	ldr	r0, [pc, #112]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015740:	2230      	movs	r2, #48	; 0x30
 8015742:	0019      	movs	r1, r3
 8015744:	f7ff fe42 	bl	80153cc <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8015748:	2380      	movs	r3, #128	; 0x80
 801574a:	015b      	lsls	r3, r3, #5
 801574c:	4818      	ldr	r0, [pc, #96]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 801574e:	2230      	movs	r2, #48	; 0x30
 8015750:	0019      	movs	r1, r3
 8015752:	f7ff fe3b 	bl	80153cc <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8015756:	4b16      	ldr	r3, [pc, #88]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015758:	2200      	movs	r2, #0
 801575a:	2101      	movs	r1, #1
 801575c:	0018      	movs	r0, r3
 801575e:	f7ff fe97 	bl	8015490 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8015762:	4b13      	ldr	r3, [pc, #76]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015764:	2200      	movs	r2, #0
 8015766:	2110      	movs	r1, #16
 8015768:	0018      	movs	r0, r3
 801576a:	f7ff fe91 	bl	8015490 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 801576e:	2380      	movs	r3, #128	; 0x80
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	480f      	ldr	r0, [pc, #60]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015774:	2200      	movs	r2, #0
 8015776:	0019      	movs	r1, r3
 8015778:	f7ff fe8a 	bl	8015490 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 801577c:	2380      	movs	r3, #128	; 0x80
 801577e:	015b      	lsls	r3, r3, #5
 8015780:	480b      	ldr	r0, [pc, #44]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 8015782:	2200      	movs	r2, #0
 8015784:	0019      	movs	r1, r3
 8015786:	f7ff fe83 	bl	8015490 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 801578a:	4b09      	ldr	r3, [pc, #36]	; (80157b0 <USBPD_TIM_Init+0x12c>)
 801578c:	0018      	movs	r0, r3
 801578e:	f7ff fddb 	bl	8015348 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8015792:	4b06      	ldr	r3, [pc, #24]	; (80157ac <USBPD_TIM_Init+0x128>)
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	b25b      	sxtb	r3, r3
 8015798:	b2db      	uxtb	r3, r3
 801579a:	3301      	adds	r3, #1
 801579c:	b2db      	uxtb	r3, r3
 801579e:	b25a      	sxtb	r2, r3
 80157a0:	4b02      	ldr	r3, [pc, #8]	; (80157ac <USBPD_TIM_Init+0x128>)
 80157a2:	701a      	strb	r2, [r3, #0]
}
 80157a4:	46c0      	nop			; (mov r8, r8)
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bdb0      	pop	{r4, r5, r7, pc}
 80157aa:	46c0      	nop			; (mov r8, r8)
 80157ac:	200005e8 	.word	0x200005e8
 80157b0:	40012c00 	.word	0x40012c00
 80157b4:	2000005c 	.word	0x2000005c
 80157b8:	000f423f 	.word	0x000f423f
 80157bc:	0007a120 	.word	0x0007a120
 80157c0:	000f4240 	.word	0x000f4240

080157c4 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	af00      	add	r7, sp, #0
  timer_initcounter--;
 80157c8:	4b0a      	ldr	r3, [pc, #40]	; (80157f4 <USBPD_TIM_DeInit+0x30>)
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	b25b      	sxtb	r3, r3
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	3b01      	subs	r3, #1
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	b25a      	sxtb	r2, r3
 80157d6:	4b07      	ldr	r3, [pc, #28]	; (80157f4 <USBPD_TIM_DeInit+0x30>)
 80157d8:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 80157da:	4b06      	ldr	r3, [pc, #24]	; (80157f4 <USBPD_TIM_DeInit+0x30>)
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	b25b      	sxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d104      	bne.n	80157ee <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 80157e4:	2380      	movs	r3, #128	; 0x80
 80157e6:	011b      	lsls	r3, r3, #4
 80157e8:	0018      	movs	r0, r3
 80157ea:	f7ff fd9b 	bl	8015324 <LL_APB2_GRP1_DisableClock>
  }
}
 80157ee:	46c0      	nop			; (mov r8, r8)
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	200005e8 	.word	0x200005e8

080157f8 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b082      	sub	sp, #8
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	0002      	movs	r2, r0
 8015800:	6039      	str	r1, [r7, #0]
 8015802:	1dfb      	adds	r3, r7, #7
 8015804:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8015806:	1dfb      	adds	r3, r7, #7
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	2b03      	cmp	r3, #3
 801580c:	d044      	beq.n	8015898 <USBPD_TIM_Start+0xa0>
 801580e:	dc57      	bgt.n	80158c0 <USBPD_TIM_Start+0xc8>
 8015810:	2b02      	cmp	r3, #2
 8015812:	d02d      	beq.n	8015870 <USBPD_TIM_Start+0x78>
 8015814:	dc54      	bgt.n	80158c0 <USBPD_TIM_Start+0xc8>
 8015816:	2b00      	cmp	r3, #0
 8015818:	d002      	beq.n	8015820 <USBPD_TIM_Start+0x28>
 801581a:	2b01      	cmp	r3, #1
 801581c:	d014      	beq.n	8015848 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 801581e:	e04f      	b.n	80158c0 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8015820:	4b2a      	ldr	r3, [pc, #168]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015824:	683b      	ldr	r3, [r7, #0]
 8015826:	18d3      	adds	r3, r2, r3
 8015828:	4929      	ldr	r1, [pc, #164]	; (80158d0 <USBPD_TIM_Start+0xd8>)
 801582a:	0018      	movs	r0, r3
 801582c:	f7f0 fd66 	bl	80062fc <__aeabi_uidivmod>
 8015830:	000b      	movs	r3, r1
 8015832:	001a      	movs	r2, r3
 8015834:	4b25      	ldr	r3, [pc, #148]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015836:	0011      	movs	r1, r2
 8015838:	0018      	movs	r0, r3
 801583a:	f7ff fe7f 	bl	801553c <LL_TIM_OC_SetCompareCH1>
 801583e:	4b23      	ldr	r3, [pc, #140]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015840:	0018      	movs	r0, r3
 8015842:	f7ff feab 	bl	801559c <LL_TIM_ClearFlag_CC1>
      break;
 8015846:	e03c      	b.n	80158c2 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8015848:	4b20      	ldr	r3, [pc, #128]	; (80158cc <USBPD_TIM_Start+0xd4>)
 801584a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	18d3      	adds	r3, r2, r3
 8015850:	491f      	ldr	r1, [pc, #124]	; (80158d0 <USBPD_TIM_Start+0xd8>)
 8015852:	0018      	movs	r0, r3
 8015854:	f7f0 fd52 	bl	80062fc <__aeabi_uidivmod>
 8015858:	000b      	movs	r3, r1
 801585a:	001a      	movs	r2, r3
 801585c:	4b1b      	ldr	r3, [pc, #108]	; (80158cc <USBPD_TIM_Start+0xd4>)
 801585e:	0011      	movs	r1, r2
 8015860:	0018      	movs	r0, r3
 8015862:	f7ff fe77 	bl	8015554 <LL_TIM_OC_SetCompareCH2>
 8015866:	4b19      	ldr	r3, [pc, #100]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015868:	0018      	movs	r0, r3
 801586a:	f7ff feb4 	bl	80155d6 <LL_TIM_ClearFlag_CC2>
      break;
 801586e:	e028      	b.n	80158c2 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8015870:	4b16      	ldr	r3, [pc, #88]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	18d3      	adds	r3, r2, r3
 8015878:	4915      	ldr	r1, [pc, #84]	; (80158d0 <USBPD_TIM_Start+0xd8>)
 801587a:	0018      	movs	r0, r3
 801587c:	f7f0 fd3e 	bl	80062fc <__aeabi_uidivmod>
 8015880:	000b      	movs	r3, r1
 8015882:	001a      	movs	r2, r3
 8015884:	4b11      	ldr	r3, [pc, #68]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015886:	0011      	movs	r1, r2
 8015888:	0018      	movs	r0, r3
 801588a:	f7ff fe6f 	bl	801556c <LL_TIM_OC_SetCompareCH3>
 801588e:	4b0f      	ldr	r3, [pc, #60]	; (80158cc <USBPD_TIM_Start+0xd4>)
 8015890:	0018      	movs	r0, r3
 8015892:	f7ff febd 	bl	8015610 <LL_TIM_ClearFlag_CC3>
      break;
 8015896:	e014      	b.n	80158c2 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8015898:	4b0c      	ldr	r3, [pc, #48]	; (80158cc <USBPD_TIM_Start+0xd4>)
 801589a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	18d3      	adds	r3, r2, r3
 80158a0:	490b      	ldr	r1, [pc, #44]	; (80158d0 <USBPD_TIM_Start+0xd8>)
 80158a2:	0018      	movs	r0, r3
 80158a4:	f7f0 fd2a 	bl	80062fc <__aeabi_uidivmod>
 80158a8:	000b      	movs	r3, r1
 80158aa:	001a      	movs	r2, r3
 80158ac:	4b07      	ldr	r3, [pc, #28]	; (80158cc <USBPD_TIM_Start+0xd4>)
 80158ae:	0011      	movs	r1, r2
 80158b0:	0018      	movs	r0, r3
 80158b2:	f7ff fe67 	bl	8015584 <LL_TIM_OC_SetCompareCH4>
 80158b6:	4b05      	ldr	r3, [pc, #20]	; (80158cc <USBPD_TIM_Start+0xd4>)
 80158b8:	0018      	movs	r0, r3
 80158ba:	f7ff fec6 	bl	801564a <LL_TIM_ClearFlag_CC4>
      break;
 80158be:	e000      	b.n	80158c2 <USBPD_TIM_Start+0xca>
      break;
 80158c0:	46c0      	nop			; (mov r8, r8)
  }
}
 80158c2:	46c0      	nop			; (mov r8, r8)
 80158c4:	46bd      	mov	sp, r7
 80158c6:	b002      	add	sp, #8
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	46c0      	nop			; (mov r8, r8)
 80158cc:	40012c00 	.word	0x40012c00
 80158d0:	00002710 	.word	0x00002710

080158d4 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	0002      	movs	r2, r0
 80158dc:	1dfb      	adds	r3, r7, #7
 80158de:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 80158e0:	2301      	movs	r3, #1
 80158e2:	60fb      	str	r3, [r7, #12]
  switch (Id)
 80158e4:	1dfb      	adds	r3, r7, #7
 80158e6:	781b      	ldrb	r3, [r3, #0]
 80158e8:	2b03      	cmp	r3, #3
 80158ea:	d01d      	beq.n	8015928 <USBPD_TIM_IsExpired+0x54>
 80158ec:	dc23      	bgt.n	8015936 <USBPD_TIM_IsExpired+0x62>
 80158ee:	2b02      	cmp	r3, #2
 80158f0:	d013      	beq.n	801591a <USBPD_TIM_IsExpired+0x46>
 80158f2:	dc20      	bgt.n	8015936 <USBPD_TIM_IsExpired+0x62>
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d002      	beq.n	80158fe <USBPD_TIM_IsExpired+0x2a>
 80158f8:	2b01      	cmp	r3, #1
 80158fa:	d007      	beq.n	801590c <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 80158fc:	e01b      	b.n	8015936 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 80158fe:	4b11      	ldr	r3, [pc, #68]	; (8015944 <USBPD_TIM_IsExpired+0x70>)
 8015900:	0018      	movs	r0, r3
 8015902:	f7ff fe57 	bl	80155b4 <LL_TIM_IsActiveFlag_CC1>
 8015906:	0003      	movs	r3, r0
 8015908:	60fb      	str	r3, [r7, #12]
      break;
 801590a:	e015      	b.n	8015938 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 801590c:	4b0d      	ldr	r3, [pc, #52]	; (8015944 <USBPD_TIM_IsExpired+0x70>)
 801590e:	0018      	movs	r0, r3
 8015910:	f7ff fe6d 	bl	80155ee <LL_TIM_IsActiveFlag_CC2>
 8015914:	0003      	movs	r3, r0
 8015916:	60fb      	str	r3, [r7, #12]
      break;
 8015918:	e00e      	b.n	8015938 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 801591a:	4b0a      	ldr	r3, [pc, #40]	; (8015944 <USBPD_TIM_IsExpired+0x70>)
 801591c:	0018      	movs	r0, r3
 801591e:	f7ff fe83 	bl	8015628 <LL_TIM_IsActiveFlag_CC3>
 8015922:	0003      	movs	r3, r0
 8015924:	60fb      	str	r3, [r7, #12]
      break;
 8015926:	e007      	b.n	8015938 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8015928:	4b06      	ldr	r3, [pc, #24]	; (8015944 <USBPD_TIM_IsExpired+0x70>)
 801592a:	0018      	movs	r0, r3
 801592c:	f7ff fe99 	bl	8015662 <LL_TIM_IsActiveFlag_CC4>
 8015930:	0003      	movs	r3, r0
 8015932:	60fb      	str	r3, [r7, #12]
      break;
 8015934:	e000      	b.n	8015938 <USBPD_TIM_IsExpired+0x64>
      break;
 8015936:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 8015938:	68fb      	ldr	r3, [r7, #12]
}
 801593a:	0018      	movs	r0, r3
 801593c:	46bd      	mov	sp, r7
 801593e:	b004      	add	sp, #16
 8015940:	bd80      	pop	{r7, pc}
 8015942:	46c0      	nop			; (mov r8, r8)
 8015944:	40012c00 	.word	0x40012c00

08015948 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
 8015950:	000a      	movs	r2, r1
 8015952:	1cfb      	adds	r3, r7, #3
 8015954:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015956:	2387      	movs	r3, #135	; 0x87
 8015958:	009b      	lsls	r3, r3, #2
 801595a:	0018      	movs	r0, r3
 801595c:	f008 fc20 	bl	801e1a0 <USBD_static_malloc>
 8015960:	0003      	movs	r3, r0
 8015962:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d10a      	bne.n	8015980 <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	23b5      	movs	r3, #181	; 0xb5
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	58d2      	ldr	r2, [r2, r3]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	32b0      	adds	r2, #176	; 0xb0
 8015976:	0092      	lsls	r2, r2, #2
 8015978:	2100      	movs	r1, #0
 801597a:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 801597c:	2302      	movs	r3, #2
 801597e:	e0e9      	b.n	8015b54 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015980:	2387      	movs	r3, #135	; 0x87
 8015982:	009a      	lsls	r2, r3, #2
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2100      	movs	r1, #0
 8015988:	0018      	movs	r0, r3
 801598a:	f00d fe43 	bl	8023614 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801598e:	687a      	ldr	r2, [r7, #4]
 8015990:	23b5      	movs	r3, #181	; 0xb5
 8015992:	009b      	lsls	r3, r3, #2
 8015994:	58d2      	ldr	r2, [r2, r3]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	32b0      	adds	r2, #176	; 0xb0
 801599a:	0092      	lsls	r2, r2, #2
 801599c:	68f9      	ldr	r1, [r7, #12]
 801599e:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80159a0:	687a      	ldr	r2, [r7, #4]
 80159a2:	23b5      	movs	r3, #181	; 0xb5
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	58d2      	ldr	r2, [r2, r3]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	32b0      	adds	r2, #176	; 0xb0
 80159ac:	0092      	lsls	r2, r2, #2
 80159ae:	58d1      	ldr	r1, [r2, r3]
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	23af      	movs	r3, #175	; 0xaf
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	7c1b      	ldrb	r3, [r3, #16]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d13c      	bne.n	8015a3a <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80159c0:	4b66      	ldr	r3, [pc, #408]	; (8015b5c <USBD_CDC_Init+0x214>)
 80159c2:	7819      	ldrb	r1, [r3, #0]
 80159c4:	2380      	movs	r3, #128	; 0x80
 80159c6:	009b      	lsls	r3, r3, #2
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	2202      	movs	r2, #2
 80159cc:	f008 fa25 	bl	801de1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80159d0:	4b62      	ldr	r3, [pc, #392]	; (8015b5c <USBD_CDC_Init+0x214>)
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	001a      	movs	r2, r3
 80159d6:	230f      	movs	r3, #15
 80159d8:	401a      	ands	r2, r3
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	0013      	movs	r3, r2
 80159de:	009b      	lsls	r3, r3, #2
 80159e0:	189b      	adds	r3, r3, r2
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	18cb      	adds	r3, r1, r3
 80159e6:	3324      	adds	r3, #36	; 0x24
 80159e8:	2201      	movs	r2, #1
 80159ea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80159ec:	4b5c      	ldr	r3, [pc, #368]	; (8015b60 <USBD_CDC_Init+0x218>)
 80159ee:	7819      	ldrb	r1, [r3, #0]
 80159f0:	2380      	movs	r3, #128	; 0x80
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	2202      	movs	r2, #2
 80159f8:	f008 fa0f 	bl	801de1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80159fc:	4b58      	ldr	r3, [pc, #352]	; (8015b60 <USBD_CDC_Init+0x218>)
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	001a      	movs	r2, r3
 8015a02:	230f      	movs	r3, #15
 8015a04:	401a      	ands	r2, r3
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	23b2      	movs	r3, #178	; 0xb2
 8015a0a:	0059      	lsls	r1, r3, #1
 8015a0c:	0013      	movs	r3, r2
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	189b      	adds	r3, r3, r2
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	18c3      	adds	r3, r0, r3
 8015a16:	185b      	adds	r3, r3, r1
 8015a18:	2201      	movs	r2, #1
 8015a1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015a1c:	4b51      	ldr	r3, [pc, #324]	; (8015b64 <USBD_CDC_Init+0x21c>)
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	001a      	movs	r2, r3
 8015a22:	230f      	movs	r3, #15
 8015a24:	401a      	ands	r2, r3
 8015a26:	6879      	ldr	r1, [r7, #4]
 8015a28:	0013      	movs	r3, r2
 8015a2a:	009b      	lsls	r3, r3, #2
 8015a2c:	189b      	adds	r3, r3, r2
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	18cb      	adds	r3, r1, r3
 8015a32:	3326      	adds	r3, #38	; 0x26
 8015a34:	2210      	movs	r2, #16
 8015a36:	801a      	strh	r2, [r3, #0]
 8015a38:	e039      	b.n	8015aae <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015a3a:	4b48      	ldr	r3, [pc, #288]	; (8015b5c <USBD_CDC_Init+0x214>)
 8015a3c:	7819      	ldrb	r1, [r3, #0]
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	2340      	movs	r3, #64	; 0x40
 8015a42:	2202      	movs	r2, #2
 8015a44:	f008 f9e9 	bl	801de1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015a48:	4b44      	ldr	r3, [pc, #272]	; (8015b5c <USBD_CDC_Init+0x214>)
 8015a4a:	781b      	ldrb	r3, [r3, #0]
 8015a4c:	001a      	movs	r2, r3
 8015a4e:	230f      	movs	r3, #15
 8015a50:	401a      	ands	r2, r3
 8015a52:	6879      	ldr	r1, [r7, #4]
 8015a54:	0013      	movs	r3, r2
 8015a56:	009b      	lsls	r3, r3, #2
 8015a58:	189b      	adds	r3, r3, r2
 8015a5a:	009b      	lsls	r3, r3, #2
 8015a5c:	18cb      	adds	r3, r1, r3
 8015a5e:	3324      	adds	r3, #36	; 0x24
 8015a60:	2201      	movs	r2, #1
 8015a62:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015a64:	4b3e      	ldr	r3, [pc, #248]	; (8015b60 <USBD_CDC_Init+0x218>)
 8015a66:	7819      	ldrb	r1, [r3, #0]
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	2340      	movs	r3, #64	; 0x40
 8015a6c:	2202      	movs	r2, #2
 8015a6e:	f008 f9d4 	bl	801de1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015a72:	4b3b      	ldr	r3, [pc, #236]	; (8015b60 <USBD_CDC_Init+0x218>)
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	001a      	movs	r2, r3
 8015a78:	230f      	movs	r3, #15
 8015a7a:	401a      	ands	r2, r3
 8015a7c:	6878      	ldr	r0, [r7, #4]
 8015a7e:	23b2      	movs	r3, #178	; 0xb2
 8015a80:	0059      	lsls	r1, r3, #1
 8015a82:	0013      	movs	r3, r2
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	189b      	adds	r3, r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	18c3      	adds	r3, r0, r3
 8015a8c:	185b      	adds	r3, r3, r1
 8015a8e:	2201      	movs	r2, #1
 8015a90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015a92:	4b34      	ldr	r3, [pc, #208]	; (8015b64 <USBD_CDC_Init+0x21c>)
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	001a      	movs	r2, r3
 8015a98:	230f      	movs	r3, #15
 8015a9a:	401a      	ands	r2, r3
 8015a9c:	6879      	ldr	r1, [r7, #4]
 8015a9e:	0013      	movs	r3, r2
 8015aa0:	009b      	lsls	r3, r3, #2
 8015aa2:	189b      	adds	r3, r3, r2
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	18cb      	adds	r3, r1, r3
 8015aa8:	3326      	adds	r3, #38	; 0x26
 8015aaa:	2210      	movs	r2, #16
 8015aac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015aae:	4b2d      	ldr	r3, [pc, #180]	; (8015b64 <USBD_CDC_Init+0x21c>)
 8015ab0:	7819      	ldrb	r1, [r3, #0]
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	2308      	movs	r3, #8
 8015ab6:	2203      	movs	r2, #3
 8015ab8:	f008 f9af 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015abc:	4b29      	ldr	r3, [pc, #164]	; (8015b64 <USBD_CDC_Init+0x21c>)
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	001a      	movs	r2, r3
 8015ac2:	230f      	movs	r3, #15
 8015ac4:	401a      	ands	r2, r3
 8015ac6:	6879      	ldr	r1, [r7, #4]
 8015ac8:	0013      	movs	r3, r2
 8015aca:	009b      	lsls	r3, r3, #2
 8015acc:	189b      	adds	r3, r3, r2
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	18cb      	adds	r3, r1, r3
 8015ad2:	3324      	adds	r3, #36	; 0x24
 8015ad4:	2201      	movs	r2, #1
 8015ad6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015ad8:	68fa      	ldr	r2, [r7, #12]
 8015ada:	2381      	movs	r3, #129	; 0x81
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	2100      	movs	r1, #0
 8015ae0:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	23b5      	movs	r3, #181	; 0xb5
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	58d3      	ldr	r3, [r2, r3]
 8015aea:	687a      	ldr	r2, [r7, #4]
 8015aec:	33b0      	adds	r3, #176	; 0xb0
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	18d3      	adds	r3, r2, r3
 8015af2:	3304      	adds	r3, #4
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015afa:	68fa      	ldr	r2, [r7, #12]
 8015afc:	2385      	movs	r3, #133	; 0x85
 8015afe:	009b      	lsls	r3, r3, #2
 8015b00:	2100      	movs	r1, #0
 8015b02:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8015b04:	68fa      	ldr	r2, [r7, #12]
 8015b06:	2386      	movs	r3, #134	; 0x86
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	2381      	movs	r3, #129	; 0x81
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	58d3      	ldr	r3, [r2, r3]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d101      	bne.n	8015b1e <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8015b1a:	2302      	movs	r3, #2
 8015b1c:	e01a      	b.n	8015b54 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	7c1b      	ldrb	r3, [r3, #16]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d10b      	bne.n	8015b3e <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015b26:	4b0e      	ldr	r3, [pc, #56]	; (8015b60 <USBD_CDC_Init+0x218>)
 8015b28:	7819      	ldrb	r1, [r3, #0]
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	2381      	movs	r3, #129	; 0x81
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	58d2      	ldr	r2, [r2, r3]
 8015b32:	2380      	movs	r3, #128	; 0x80
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f008 fab2 	bl	801e0a0 <USBD_LL_PrepareReceive>
 8015b3c:	e009      	b.n	8015b52 <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015b3e:	4b08      	ldr	r3, [pc, #32]	; (8015b60 <USBD_CDC_Init+0x218>)
 8015b40:	7819      	ldrb	r1, [r3, #0]
 8015b42:	68fa      	ldr	r2, [r7, #12]
 8015b44:	2381      	movs	r3, #129	; 0x81
 8015b46:	009b      	lsls	r3, r3, #2
 8015b48:	58d2      	ldr	r2, [r2, r3]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	2340      	movs	r3, #64	; 0x40
 8015b4e:	f008 faa7 	bl	801e0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015b52:	2300      	movs	r3, #0
}
 8015b54:	0018      	movs	r0, r3
 8015b56:	46bd      	mov	sp, r7
 8015b58:	b004      	add	sp, #16
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	200000ef 	.word	0x200000ef
 8015b60:	200000f0 	.word	0x200000f0
 8015b64:	200000f1 	.word	0x200000f1

08015b68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
 8015b70:	000a      	movs	r2, r1
 8015b72:	1cfb      	adds	r3, r7, #3
 8015b74:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015b76:	4b41      	ldr	r3, [pc, #260]	; (8015c7c <USBD_CDC_DeInit+0x114>)
 8015b78:	781a      	ldrb	r2, [r3, #0]
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	0011      	movs	r1, r2
 8015b7e:	0018      	movs	r0, r3
 8015b80:	f008 f982 	bl	801de88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015b84:	4b3d      	ldr	r3, [pc, #244]	; (8015c7c <USBD_CDC_DeInit+0x114>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	001a      	movs	r2, r3
 8015b8a:	230f      	movs	r3, #15
 8015b8c:	401a      	ands	r2, r3
 8015b8e:	6879      	ldr	r1, [r7, #4]
 8015b90:	0013      	movs	r3, r2
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	189b      	adds	r3, r3, r2
 8015b96:	009b      	lsls	r3, r3, #2
 8015b98:	18cb      	adds	r3, r1, r3
 8015b9a:	3324      	adds	r3, #36	; 0x24
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015ba0:	4b37      	ldr	r3, [pc, #220]	; (8015c80 <USBD_CDC_DeInit+0x118>)
 8015ba2:	781a      	ldrb	r2, [r3, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	0011      	movs	r1, r2
 8015ba8:	0018      	movs	r0, r3
 8015baa:	f008 f96d 	bl	801de88 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015bae:	4b34      	ldr	r3, [pc, #208]	; (8015c80 <USBD_CDC_DeInit+0x118>)
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	001a      	movs	r2, r3
 8015bb4:	230f      	movs	r3, #15
 8015bb6:	401a      	ands	r2, r3
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	23b2      	movs	r3, #178	; 0xb2
 8015bbc:	0059      	lsls	r1, r3, #1
 8015bbe:	0013      	movs	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	189b      	adds	r3, r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	18c3      	adds	r3, r0, r3
 8015bc8:	185b      	adds	r3, r3, r1
 8015bca:	2200      	movs	r2, #0
 8015bcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015bce:	4b2d      	ldr	r3, [pc, #180]	; (8015c84 <USBD_CDC_DeInit+0x11c>)
 8015bd0:	781a      	ldrb	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	0011      	movs	r1, r2
 8015bd6:	0018      	movs	r0, r3
 8015bd8:	f008 f956 	bl	801de88 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015bdc:	4b29      	ldr	r3, [pc, #164]	; (8015c84 <USBD_CDC_DeInit+0x11c>)
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	001a      	movs	r2, r3
 8015be2:	230f      	movs	r3, #15
 8015be4:	401a      	ands	r2, r3
 8015be6:	6879      	ldr	r1, [r7, #4]
 8015be8:	0013      	movs	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	189b      	adds	r3, r3, r2
 8015bee:	009b      	lsls	r3, r3, #2
 8015bf0:	18cb      	adds	r3, r1, r3
 8015bf2:	3324      	adds	r3, #36	; 0x24
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015bf8:	4b22      	ldr	r3, [pc, #136]	; (8015c84 <USBD_CDC_DeInit+0x11c>)
 8015bfa:	781b      	ldrb	r3, [r3, #0]
 8015bfc:	001a      	movs	r2, r3
 8015bfe:	230f      	movs	r3, #15
 8015c00:	401a      	ands	r2, r3
 8015c02:	6879      	ldr	r1, [r7, #4]
 8015c04:	0013      	movs	r3, r2
 8015c06:	009b      	lsls	r3, r3, #2
 8015c08:	189b      	adds	r3, r3, r2
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	18cb      	adds	r3, r1, r3
 8015c0e:	3326      	adds	r3, #38	; 0x26
 8015c10:	2200      	movs	r2, #0
 8015c12:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	23b5      	movs	r3, #181	; 0xb5
 8015c18:	009b      	lsls	r3, r3, #2
 8015c1a:	58d2      	ldr	r2, [r2, r3]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	32b0      	adds	r2, #176	; 0xb0
 8015c20:	0092      	lsls	r2, r2, #2
 8015c22:	58d3      	ldr	r3, [r2, r3]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d024      	beq.n	8015c72 <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	23b5      	movs	r3, #181	; 0xb5
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	58d3      	ldr	r3, [r2, r3]
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	33b0      	adds	r3, #176	; 0xb0
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	18d3      	adds	r3, r2, r3
 8015c38:	3304      	adds	r3, #4
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	23b5      	movs	r3, #181	; 0xb5
 8015c44:	009b      	lsls	r3, r3, #2
 8015c46:	58d2      	ldr	r2, [r2, r3]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	32b0      	adds	r2, #176	; 0xb0
 8015c4c:	0092      	lsls	r2, r2, #2
 8015c4e:	58d3      	ldr	r3, [r2, r3]
 8015c50:	0018      	movs	r0, r3
 8015c52:	f008 fab1 	bl	801e1b8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015c56:	687a      	ldr	r2, [r7, #4]
 8015c58:	23b5      	movs	r3, #181	; 0xb5
 8015c5a:	009b      	lsls	r3, r3, #2
 8015c5c:	58d2      	ldr	r2, [r2, r3]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	32b0      	adds	r2, #176	; 0xb0
 8015c62:	0092      	lsls	r2, r2, #2
 8015c64:	2100      	movs	r1, #0
 8015c66:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	23af      	movs	r3, #175	; 0xaf
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	2100      	movs	r1, #0
 8015c70:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8015c72:	2300      	movs	r3, #0
}
 8015c74:	0018      	movs	r0, r3
 8015c76:	46bd      	mov	sp, r7
 8015c78:	b002      	add	sp, #8
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	200000ef 	.word	0x200000ef
 8015c80:	200000f0 	.word	0x200000f0
 8015c84:	200000f1 	.word	0x200000f1

08015c88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b086      	sub	sp, #24
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
 8015c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	23b5      	movs	r3, #181	; 0xb5
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	58d2      	ldr	r2, [r2, r3]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	32b0      	adds	r2, #176	; 0xb0
 8015c9e:	0092      	lsls	r2, r2, #2
 8015ca0:	58d3      	ldr	r3, [r2, r3]
 8015ca2:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015ca4:	230d      	movs	r3, #13
 8015ca6:	18fb      	adds	r3, r7, r3
 8015ca8:	2200      	movs	r2, #0
 8015caa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8015cac:	230a      	movs	r3, #10
 8015cae:	18fb      	adds	r3, r7, r3
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cb4:	2317      	movs	r3, #23
 8015cb6:	18fb      	adds	r3, r7, r3
 8015cb8:	2200      	movs	r2, #0
 8015cba:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d101      	bne.n	8015cc6 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	e0d1      	b.n	8015e6a <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	001a      	movs	r2, r3
 8015ccc:	2360      	movs	r3, #96	; 0x60
 8015cce:	4013      	ands	r3, r2
 8015cd0:	d05b      	beq.n	8015d8a <USBD_CDC_Setup+0x102>
 8015cd2:	2b20      	cmp	r3, #32
 8015cd4:	d000      	beq.n	8015cd8 <USBD_CDC_Setup+0x50>
 8015cd6:	e0ba      	b.n	8015e4e <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	88db      	ldrh	r3, [r3, #6]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d043      	beq.n	8015d68 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	b25b      	sxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	da22      	bge.n	8015d30 <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	23b5      	movs	r3, #181	; 0xb5
 8015cee:	009b      	lsls	r3, r3, #2
 8015cf0:	58d3      	ldr	r3, [r2, r3]
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	33b0      	adds	r3, #176	; 0xb0
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	18d3      	adds	r3, r2, r3
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	689b      	ldr	r3, [r3, #8]
 8015d00:	683a      	ldr	r2, [r7, #0]
 8015d02:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015d04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d06:	683a      	ldr	r2, [r7, #0]
 8015d08:	88d2      	ldrh	r2, [r2, #6]
 8015d0a:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	88db      	ldrh	r3, [r3, #6]
 8015d10:	220e      	movs	r2, #14
 8015d12:	18ba      	adds	r2, r7, r2
 8015d14:	b299      	uxth	r1, r3
 8015d16:	2907      	cmp	r1, #7
 8015d18:	d900      	bls.n	8015d1c <USBD_CDC_Setup+0x94>
 8015d1a:	2307      	movs	r3, #7
 8015d1c:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015d1e:	6939      	ldr	r1, [r7, #16]
 8015d20:	230e      	movs	r3, #14
 8015d22:	18fb      	adds	r3, r7, r3
 8015d24:	881a      	ldrh	r2, [r3, #0]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	0018      	movs	r0, r3
 8015d2a:	f001 ff3d 	bl	8017ba8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015d2e:	e099      	b.n	8015e64 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	7859      	ldrb	r1, [r3, #1]
 8015d34:	693a      	ldr	r2, [r7, #16]
 8015d36:	2380      	movs	r3, #128	; 0x80
 8015d38:	009b      	lsls	r3, r3, #2
 8015d3a:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015d3c:	683b      	ldr	r3, [r7, #0]
 8015d3e:	88db      	ldrh	r3, [r3, #6]
 8015d40:	2b3f      	cmp	r3, #63	; 0x3f
 8015d42:	d803      	bhi.n	8015d4c <USBD_CDC_Setup+0xc4>
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	88db      	ldrh	r3, [r3, #6]
 8015d48:	b2da      	uxtb	r2, r3
 8015d4a:	e000      	b.n	8015d4e <USBD_CDC_Setup+0xc6>
 8015d4c:	2240      	movs	r2, #64	; 0x40
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	4948      	ldr	r1, [pc, #288]	; (8015e74 <USBD_CDC_Setup+0x1ec>)
 8015d52:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015d54:	6939      	ldr	r1, [r7, #16]
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	4a46      	ldr	r2, [pc, #280]	; (8015e74 <USBD_CDC_Setup+0x1ec>)
 8015d5a:	5c9b      	ldrb	r3, [r3, r2]
 8015d5c:	001a      	movs	r2, r3
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	0018      	movs	r0, r3
 8015d62:	f001 ff4e 	bl	8017c02 <USBD_CtlPrepareRx>
      break;
 8015d66:	e07d      	b.n	8015e64 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	23b5      	movs	r3, #181	; 0xb5
 8015d6c:	009b      	lsls	r3, r3, #2
 8015d6e:	58d3      	ldr	r3, [r2, r3]
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	33b0      	adds	r3, #176	; 0xb0
 8015d74:	009b      	lsls	r3, r3, #2
 8015d76:	18d3      	adds	r3, r2, r3
 8015d78:	3304      	adds	r3, #4
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	689b      	ldr	r3, [r3, #8]
 8015d7e:	683a      	ldr	r2, [r7, #0]
 8015d80:	7850      	ldrb	r0, [r2, #1]
 8015d82:	6839      	ldr	r1, [r7, #0]
 8015d84:	2200      	movs	r2, #0
 8015d86:	4798      	blx	r3
      break;
 8015d88:	e06c      	b.n	8015e64 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	785b      	ldrb	r3, [r3, #1]
 8015d8e:	2b0b      	cmp	r3, #11
 8015d90:	d03c      	beq.n	8015e0c <USBD_CDC_Setup+0x184>
 8015d92:	dc4d      	bgt.n	8015e30 <USBD_CDC_Setup+0x1a8>
 8015d94:	2b0a      	cmp	r3, #10
 8015d96:	d01f      	beq.n	8015dd8 <USBD_CDC_Setup+0x150>
 8015d98:	dc4a      	bgt.n	8015e30 <USBD_CDC_Setup+0x1a8>
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d002      	beq.n	8015da4 <USBD_CDC_Setup+0x11c>
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d051      	beq.n	8015e46 <USBD_CDC_Setup+0x1be>
 8015da2:	e045      	b.n	8015e30 <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015da4:	687a      	ldr	r2, [r7, #4]
 8015da6:	23a7      	movs	r3, #167	; 0xa7
 8015da8:	009b      	lsls	r3, r3, #2
 8015daa:	5cd3      	ldrb	r3, [r2, r3]
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b03      	cmp	r3, #3
 8015db0:	d107      	bne.n	8015dc2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015db2:	230a      	movs	r3, #10
 8015db4:	18f9      	adds	r1, r7, r3
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	2202      	movs	r2, #2
 8015dba:	0018      	movs	r0, r3
 8015dbc:	f001 fef4 	bl	8017ba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015dc0:	e044      	b.n	8015e4c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	0011      	movs	r1, r2
 8015dc8:	0018      	movs	r0, r3
 8015dca:	f001 fe65 	bl	8017a98 <USBD_CtlError>
            ret = USBD_FAIL;
 8015dce:	2317      	movs	r3, #23
 8015dd0:	18fb      	adds	r3, r7, r3
 8015dd2:	2203      	movs	r2, #3
 8015dd4:	701a      	strb	r2, [r3, #0]
          break;
 8015dd6:	e039      	b.n	8015e4c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015dd8:	687a      	ldr	r2, [r7, #4]
 8015dda:	23a7      	movs	r3, #167	; 0xa7
 8015ddc:	009b      	lsls	r3, r3, #2
 8015dde:	5cd3      	ldrb	r3, [r2, r3]
 8015de0:	b2db      	uxtb	r3, r3
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d107      	bne.n	8015df6 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015de6:	230d      	movs	r3, #13
 8015de8:	18f9      	adds	r1, r7, r3
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2201      	movs	r2, #1
 8015dee:	0018      	movs	r0, r3
 8015df0:	f001 feda 	bl	8017ba8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015df4:	e02a      	b.n	8015e4c <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8015df6:	683a      	ldr	r2, [r7, #0]
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	0011      	movs	r1, r2
 8015dfc:	0018      	movs	r0, r3
 8015dfe:	f001 fe4b 	bl	8017a98 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e02:	2317      	movs	r3, #23
 8015e04:	18fb      	adds	r3, r7, r3
 8015e06:	2203      	movs	r2, #3
 8015e08:	701a      	strb	r2, [r3, #0]
          break;
 8015e0a:	e01f      	b.n	8015e4c <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	23a7      	movs	r3, #167	; 0xa7
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	5cd3      	ldrb	r3, [r2, r3]
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b03      	cmp	r3, #3
 8015e18:	d017      	beq.n	8015e4a <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 8015e1a:	683a      	ldr	r2, [r7, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	0011      	movs	r1, r2
 8015e20:	0018      	movs	r0, r3
 8015e22:	f001 fe39 	bl	8017a98 <USBD_CtlError>
            ret = USBD_FAIL;
 8015e26:	2317      	movs	r3, #23
 8015e28:	18fb      	adds	r3, r7, r3
 8015e2a:	2203      	movs	r2, #3
 8015e2c:	701a      	strb	r2, [r3, #0]
          }
          break;
 8015e2e:	e00c      	b.n	8015e4a <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015e30:	683a      	ldr	r2, [r7, #0]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	0011      	movs	r1, r2
 8015e36:	0018      	movs	r0, r3
 8015e38:	f001 fe2e 	bl	8017a98 <USBD_CtlError>
          ret = USBD_FAIL;
 8015e3c:	2317      	movs	r3, #23
 8015e3e:	18fb      	adds	r3, r7, r3
 8015e40:	2203      	movs	r2, #3
 8015e42:	701a      	strb	r2, [r3, #0]
          break;
 8015e44:	e002      	b.n	8015e4c <USBD_CDC_Setup+0x1c4>
          break;
 8015e46:	46c0      	nop			; (mov r8, r8)
 8015e48:	e00c      	b.n	8015e64 <USBD_CDC_Setup+0x1dc>
          break;
 8015e4a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8015e4c:	e00a      	b.n	8015e64 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 8015e4e:	683a      	ldr	r2, [r7, #0]
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	0011      	movs	r1, r2
 8015e54:	0018      	movs	r0, r3
 8015e56:	f001 fe1f 	bl	8017a98 <USBD_CtlError>
      ret = USBD_FAIL;
 8015e5a:	2317      	movs	r3, #23
 8015e5c:	18fb      	adds	r3, r7, r3
 8015e5e:	2203      	movs	r2, #3
 8015e60:	701a      	strb	r2, [r3, #0]
      break;
 8015e62:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8015e64:	2317      	movs	r3, #23
 8015e66:	18fb      	adds	r3, r7, r3
 8015e68:	781b      	ldrb	r3, [r3, #0]
}
 8015e6a:	0018      	movs	r0, r3
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	b006      	add	sp, #24
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	46c0      	nop			; (mov r8, r8)
 8015e74:	00000201 	.word	0x00000201

08015e78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	000a      	movs	r2, r1
 8015e82:	1cfb      	adds	r3, r7, #3
 8015e84:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	23b2      	movs	r3, #178	; 0xb2
 8015e8a:	009b      	lsls	r3, r3, #2
 8015e8c:	58d3      	ldr	r3, [r2, r3]
 8015e8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	23b5      	movs	r3, #181	; 0xb5
 8015e94:	009b      	lsls	r3, r3, #2
 8015e96:	58d2      	ldr	r2, [r2, r3]
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	32b0      	adds	r2, #176	; 0xb0
 8015e9c:	0092      	lsls	r2, r2, #2
 8015e9e:	58d3      	ldr	r3, [r2, r3]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d101      	bne.n	8015ea8 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015ea4:	2303      	movs	r3, #3
 8015ea6:	e072      	b.n	8015f8e <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	23b5      	movs	r3, #181	; 0xb5
 8015eac:	009b      	lsls	r3, r3, #2
 8015eae:	58d2      	ldr	r2, [r2, r3]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	32b0      	adds	r2, #176	; 0xb0
 8015eb4:	0092      	lsls	r2, r2, #2
 8015eb6:	58d3      	ldr	r3, [r2, r3]
 8015eb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015eba:	1cfb      	adds	r3, r7, #3
 8015ebc:	781b      	ldrb	r3, [r3, #0]
 8015ebe:	220f      	movs	r2, #15
 8015ec0:	401a      	ands	r2, r3
 8015ec2:	6879      	ldr	r1, [r7, #4]
 8015ec4:	0013      	movs	r3, r2
 8015ec6:	009b      	lsls	r3, r3, #2
 8015ec8:	189b      	adds	r3, r3, r2
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	18cb      	adds	r3, r1, r3
 8015ece:	3318      	adds	r3, #24
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d031      	beq.n	8015f3a <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015ed6:	1cfb      	adds	r3, r7, #3
 8015ed8:	781b      	ldrb	r3, [r3, #0]
 8015eda:	220f      	movs	r2, #15
 8015edc:	401a      	ands	r2, r3
 8015ede:	6879      	ldr	r1, [r7, #4]
 8015ee0:	0013      	movs	r3, r2
 8015ee2:	009b      	lsls	r3, r3, #2
 8015ee4:	189b      	adds	r3, r3, r2
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	18cb      	adds	r3, r1, r3
 8015eea:	3318      	adds	r3, #24
 8015eec:	6818      	ldr	r0, [r3, #0]
 8015eee:	1cfb      	adds	r3, r7, #3
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	220f      	movs	r2, #15
 8015ef4:	401a      	ands	r2, r3
 8015ef6:	68f9      	ldr	r1, [r7, #12]
 8015ef8:	0013      	movs	r3, r2
 8015efa:	009b      	lsls	r3, r3, #2
 8015efc:	189b      	adds	r3, r3, r2
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	18cb      	adds	r3, r1, r3
 8015f02:	3324      	adds	r3, #36	; 0x24
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	0019      	movs	r1, r3
 8015f08:	f7f0 f9f8 	bl	80062fc <__aeabi_uidivmod>
 8015f0c:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015f0e:	d114      	bne.n	8015f3a <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015f10:	1cfb      	adds	r3, r7, #3
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	220f      	movs	r2, #15
 8015f16:	401a      	ands	r2, r3
 8015f18:	6879      	ldr	r1, [r7, #4]
 8015f1a:	0013      	movs	r3, r2
 8015f1c:	009b      	lsls	r3, r3, #2
 8015f1e:	189b      	adds	r3, r3, r2
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	18cb      	adds	r3, r1, r3
 8015f24:	3318      	adds	r3, #24
 8015f26:	2200      	movs	r2, #0
 8015f28:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015f2a:	1cfb      	adds	r3, r7, #3
 8015f2c:	7819      	ldrb	r1, [r3, #0]
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	2300      	movs	r3, #0
 8015f32:	2200      	movs	r2, #0
 8015f34:	f008 f884 	bl	801e040 <USBD_LL_Transmit>
 8015f38:	e028      	b.n	8015f8c <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 8015f3a:	68ba      	ldr	r2, [r7, #8]
 8015f3c:	2385      	movs	r3, #133	; 0x85
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	2100      	movs	r1, #0
 8015f42:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	23b5      	movs	r3, #181	; 0xb5
 8015f48:	009b      	lsls	r3, r3, #2
 8015f4a:	58d3      	ldr	r3, [r2, r3]
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	33b0      	adds	r3, #176	; 0xb0
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	18d3      	adds	r3, r2, r3
 8015f54:	3304      	adds	r3, #4
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	691b      	ldr	r3, [r3, #16]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d016      	beq.n	8015f8c <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	23b5      	movs	r3, #181	; 0xb5
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	58d3      	ldr	r3, [r2, r3]
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	33b0      	adds	r3, #176	; 0xb0
 8015f6a:	009b      	lsls	r3, r3, #2
 8015f6c:	18d3      	adds	r3, r2, r3
 8015f6e:	3304      	adds	r3, #4
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	691c      	ldr	r4, [r3, #16]
 8015f74:	68ba      	ldr	r2, [r7, #8]
 8015f76:	2382      	movs	r3, #130	; 0x82
 8015f78:	009b      	lsls	r3, r3, #2
 8015f7a:	58d0      	ldr	r0, [r2, r3]
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	2284      	movs	r2, #132	; 0x84
 8015f80:	0092      	lsls	r2, r2, #2
 8015f82:	1899      	adds	r1, r3, r2
 8015f84:	1cfb      	adds	r3, r7, #3
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	001a      	movs	r2, r3
 8015f8a:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8015f8c:	2300      	movs	r3, #0
}
 8015f8e:	0018      	movs	r0, r3
 8015f90:	46bd      	mov	sp, r7
 8015f92:	b005      	add	sp, #20
 8015f94:	bd90      	pop	{r4, r7, pc}

08015f96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015f96:	b580      	push	{r7, lr}
 8015f98:	b084      	sub	sp, #16
 8015f9a:	af00      	add	r7, sp, #0
 8015f9c:	6078      	str	r0, [r7, #4]
 8015f9e:	000a      	movs	r2, r1
 8015fa0:	1cfb      	adds	r3, r7, #3
 8015fa2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015fa4:	687a      	ldr	r2, [r7, #4]
 8015fa6:	23b5      	movs	r3, #181	; 0xb5
 8015fa8:	009b      	lsls	r3, r3, #2
 8015faa:	58d2      	ldr	r2, [r2, r3]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	32b0      	adds	r2, #176	; 0xb0
 8015fb0:	0092      	lsls	r2, r2, #2
 8015fb2:	58d3      	ldr	r3, [r2, r3]
 8015fb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015fb6:	687a      	ldr	r2, [r7, #4]
 8015fb8:	23b5      	movs	r3, #181	; 0xb5
 8015fba:	009b      	lsls	r3, r3, #2
 8015fbc:	58d2      	ldr	r2, [r2, r3]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	32b0      	adds	r2, #176	; 0xb0
 8015fc2:	0092      	lsls	r2, r2, #2
 8015fc4:	58d3      	ldr	r3, [r2, r3]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d101      	bne.n	8015fce <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	e022      	b.n	8016014 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015fce:	1cfb      	adds	r3, r7, #3
 8015fd0:	781a      	ldrb	r2, [r3, #0]
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	0011      	movs	r1, r2
 8015fd6:	0018      	movs	r0, r3
 8015fd8:	f008 f892 	bl	801e100 <USBD_LL_GetRxDataSize>
 8015fdc:	0001      	movs	r1, r0
 8015fde:	68fa      	ldr	r2, [r7, #12]
 8015fe0:	2383      	movs	r3, #131	; 0x83
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	23b5      	movs	r3, #181	; 0xb5
 8015fea:	009b      	lsls	r3, r3, #2
 8015fec:	58d3      	ldr	r3, [r2, r3]
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	33b0      	adds	r3, #176	; 0xb0
 8015ff2:	009b      	lsls	r3, r3, #2
 8015ff4:	18d3      	adds	r3, r2, r3
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	68da      	ldr	r2, [r3, #12]
 8015ffc:	68f9      	ldr	r1, [r7, #12]
 8015ffe:	2381      	movs	r3, #129	; 0x81
 8016000:	009b      	lsls	r3, r3, #2
 8016002:	58c8      	ldr	r0, [r1, r3]
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2183      	movs	r1, #131	; 0x83
 8016008:	0089      	lsls	r1, r1, #2
 801600a:	468c      	mov	ip, r1
 801600c:	4463      	add	r3, ip
 801600e:	0019      	movs	r1, r3
 8016010:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	0018      	movs	r0, r3
 8016016:	46bd      	mov	sp, r7
 8016018:	b004      	add	sp, #16
 801601a:	bd80      	pop	{r7, pc}

0801601c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801601c:	b590      	push	{r4, r7, lr}
 801601e:	b085      	sub	sp, #20
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	23b5      	movs	r3, #181	; 0xb5
 8016028:	009b      	lsls	r3, r3, #2
 801602a:	58d2      	ldr	r2, [r2, r3]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	32b0      	adds	r2, #176	; 0xb0
 8016030:	0092      	lsls	r2, r2, #2
 8016032:	58d3      	ldr	r3, [r2, r3]
 8016034:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d101      	bne.n	8016040 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801603c:	2303      	movs	r3, #3
 801603e:	e02c      	b.n	801609a <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	23b5      	movs	r3, #181	; 0xb5
 8016044:	009b      	lsls	r3, r3, #2
 8016046:	58d3      	ldr	r3, [r2, r3]
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	33b0      	adds	r3, #176	; 0xb0
 801604c:	009b      	lsls	r3, r3, #2
 801604e:	18d3      	adds	r3, r2, r3
 8016050:	3304      	adds	r3, #4
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d01f      	beq.n	8016098 <USBD_CDC_EP0_RxReady+0x7c>
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	2380      	movs	r3, #128	; 0x80
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	5cd3      	ldrb	r3, [r2, r3]
 8016060:	2bff      	cmp	r3, #255	; 0xff
 8016062:	d019      	beq.n	8016098 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	23b5      	movs	r3, #181	; 0xb5
 8016068:	009b      	lsls	r3, r3, #2
 801606a:	58d3      	ldr	r3, [r2, r3]
 801606c:	687a      	ldr	r2, [r7, #4]
 801606e:	33b0      	adds	r3, #176	; 0xb0
 8016070:	009b      	lsls	r3, r3, #2
 8016072:	18d3      	adds	r3, r2, r3
 8016074:	3304      	adds	r3, #4
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	689b      	ldr	r3, [r3, #8]
 801607a:	68f9      	ldr	r1, [r7, #12]
 801607c:	2280      	movs	r2, #128	; 0x80
 801607e:	0092      	lsls	r2, r2, #2
 8016080:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 8016082:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016084:	68fa      	ldr	r2, [r7, #12]
 8016086:	4c07      	ldr	r4, [pc, #28]	; (80160a4 <USBD_CDC_EP0_RxReady+0x88>)
 8016088:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801608a:	b292      	uxth	r2, r2
 801608c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801608e:	68fa      	ldr	r2, [r7, #12]
 8016090:	2380      	movs	r3, #128	; 0x80
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	21ff      	movs	r1, #255	; 0xff
 8016096:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8016098:	2300      	movs	r3, #0
}
 801609a:	0018      	movs	r0, r3
 801609c:	46bd      	mov	sp, r7
 801609e:	b005      	add	sp, #20
 80160a0:	bd90      	pop	{r4, r7, pc}
 80160a2:	46c0      	nop			; (mov r8, r8)
 80160a4:	00000201 	.word	0x00000201

080160a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80160b0:	4b20      	ldr	r3, [pc, #128]	; (8016134 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80160b2:	2182      	movs	r1, #130	; 0x82
 80160b4:	0018      	movs	r0, r3
 80160b6:	f000 fd4e 	bl	8016b56 <USBD_GetEpDesc>
 80160ba:	0003      	movs	r3, r0
 80160bc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80160be:	4b1d      	ldr	r3, [pc, #116]	; (8016134 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80160c0:	2101      	movs	r1, #1
 80160c2:	0018      	movs	r0, r3
 80160c4:	f000 fd47 	bl	8016b56 <USBD_GetEpDesc>
 80160c8:	0003      	movs	r3, r0
 80160ca:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80160cc:	4b19      	ldr	r3, [pc, #100]	; (8016134 <USBD_CDC_GetFSCfgDesc+0x8c>)
 80160ce:	2181      	movs	r1, #129	; 0x81
 80160d0:	0018      	movs	r0, r3
 80160d2:	f000 fd40 	bl	8016b56 <USBD_GetEpDesc>
 80160d6:	0003      	movs	r3, r0
 80160d8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80160da:	697b      	ldr	r3, [r7, #20]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d002      	beq.n	80160e6 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	2210      	movs	r2, #16
 80160e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80160e6:	693b      	ldr	r3, [r7, #16]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d00b      	beq.n	8016104 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80160ec:	693b      	ldr	r3, [r7, #16]
 80160ee:	791a      	ldrb	r2, [r3, #4]
 80160f0:	2100      	movs	r1, #0
 80160f2:	400a      	ands	r2, r1
 80160f4:	1c11      	adds	r1, r2, #0
 80160f6:	2240      	movs	r2, #64	; 0x40
 80160f8:	430a      	orrs	r2, r1
 80160fa:	711a      	strb	r2, [r3, #4]
 80160fc:	795a      	ldrb	r2, [r3, #5]
 80160fe:	2100      	movs	r1, #0
 8016100:	400a      	ands	r2, r1
 8016102:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d00b      	beq.n	8016122 <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	791a      	ldrb	r2, [r3, #4]
 801610e:	2100      	movs	r1, #0
 8016110:	400a      	ands	r2, r1
 8016112:	1c11      	adds	r1, r2, #0
 8016114:	2240      	movs	r2, #64	; 0x40
 8016116:	430a      	orrs	r2, r1
 8016118:	711a      	strb	r2, [r3, #4]
 801611a:	795a      	ldrb	r2, [r3, #5]
 801611c:	2100      	movs	r1, #0
 801611e:	400a      	ands	r2, r1
 8016120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2243      	movs	r2, #67	; 0x43
 8016126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016128:	4b02      	ldr	r3, [pc, #8]	; (8016134 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 801612a:	0018      	movs	r0, r3
 801612c:	46bd      	mov	sp, r7
 801612e:	b006      	add	sp, #24
 8016130:	bd80      	pop	{r7, pc}
 8016132:	46c0      	nop			; (mov r8, r8)
 8016134:	200000ac 	.word	0x200000ac

08016138 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b086      	sub	sp, #24
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016140:	4b20      	ldr	r3, [pc, #128]	; (80161c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8016142:	2182      	movs	r1, #130	; 0x82
 8016144:	0018      	movs	r0, r3
 8016146:	f000 fd06 	bl	8016b56 <USBD_GetEpDesc>
 801614a:	0003      	movs	r3, r0
 801614c:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801614e:	4b1d      	ldr	r3, [pc, #116]	; (80161c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 8016150:	2101      	movs	r1, #1
 8016152:	0018      	movs	r0, r3
 8016154:	f000 fcff 	bl	8016b56 <USBD_GetEpDesc>
 8016158:	0003      	movs	r3, r0
 801615a:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801615c:	4b19      	ldr	r3, [pc, #100]	; (80161c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
 801615e:	2181      	movs	r1, #129	; 0x81
 8016160:	0018      	movs	r0, r3
 8016162:	f000 fcf8 	bl	8016b56 <USBD_GetEpDesc>
 8016166:	0003      	movs	r3, r0
 8016168:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d002      	beq.n	8016176 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	2210      	movs	r2, #16
 8016174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d00b      	beq.n	8016194 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	791a      	ldrb	r2, [r3, #4]
 8016180:	2100      	movs	r1, #0
 8016182:	400a      	ands	r2, r1
 8016184:	711a      	strb	r2, [r3, #4]
 8016186:	795a      	ldrb	r2, [r3, #5]
 8016188:	2100      	movs	r1, #0
 801618a:	400a      	ands	r2, r1
 801618c:	1c11      	adds	r1, r2, #0
 801618e:	2202      	movs	r2, #2
 8016190:	430a      	orrs	r2, r1
 8016192:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d00b      	beq.n	80161b2 <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	791a      	ldrb	r2, [r3, #4]
 801619e:	2100      	movs	r1, #0
 80161a0:	400a      	ands	r2, r1
 80161a2:	711a      	strb	r2, [r3, #4]
 80161a4:	795a      	ldrb	r2, [r3, #5]
 80161a6:	2100      	movs	r1, #0
 80161a8:	400a      	ands	r2, r1
 80161aa:	1c11      	adds	r1, r2, #0
 80161ac:	2202      	movs	r2, #2
 80161ae:	430a      	orrs	r2, r1
 80161b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	2243      	movs	r2, #67	; 0x43
 80161b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80161b8:	4b02      	ldr	r3, [pc, #8]	; (80161c4 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 80161ba:	0018      	movs	r0, r3
 80161bc:	46bd      	mov	sp, r7
 80161be:	b006      	add	sp, #24
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	46c0      	nop			; (mov r8, r8)
 80161c4:	200000ac 	.word	0x200000ac

080161c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b086      	sub	sp, #24
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80161d0:	4b20      	ldr	r3, [pc, #128]	; (8016254 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80161d2:	2182      	movs	r1, #130	; 0x82
 80161d4:	0018      	movs	r0, r3
 80161d6:	f000 fcbe 	bl	8016b56 <USBD_GetEpDesc>
 80161da:	0003      	movs	r3, r0
 80161dc:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80161de:	4b1d      	ldr	r3, [pc, #116]	; (8016254 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80161e0:	2101      	movs	r1, #1
 80161e2:	0018      	movs	r0, r3
 80161e4:	f000 fcb7 	bl	8016b56 <USBD_GetEpDesc>
 80161e8:	0003      	movs	r3, r0
 80161ea:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80161ec:	4b19      	ldr	r3, [pc, #100]	; (8016254 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 80161ee:	2181      	movs	r1, #129	; 0x81
 80161f0:	0018      	movs	r0, r3
 80161f2:	f000 fcb0 	bl	8016b56 <USBD_GetEpDesc>
 80161f6:	0003      	movs	r3, r0
 80161f8:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d002      	beq.n	8016206 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	2210      	movs	r2, #16
 8016204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016206:	693b      	ldr	r3, [r7, #16]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00b      	beq.n	8016224 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	791a      	ldrb	r2, [r3, #4]
 8016210:	2100      	movs	r1, #0
 8016212:	400a      	ands	r2, r1
 8016214:	1c11      	adds	r1, r2, #0
 8016216:	2240      	movs	r2, #64	; 0x40
 8016218:	430a      	orrs	r2, r1
 801621a:	711a      	strb	r2, [r3, #4]
 801621c:	795a      	ldrb	r2, [r3, #5]
 801621e:	2100      	movs	r1, #0
 8016220:	400a      	ands	r2, r1
 8016222:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00b      	beq.n	8016242 <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	791a      	ldrb	r2, [r3, #4]
 801622e:	2100      	movs	r1, #0
 8016230:	400a      	ands	r2, r1
 8016232:	1c11      	adds	r1, r2, #0
 8016234:	2240      	movs	r2, #64	; 0x40
 8016236:	430a      	orrs	r2, r1
 8016238:	711a      	strb	r2, [r3, #4]
 801623a:	795a      	ldrb	r2, [r3, #5]
 801623c:	2100      	movs	r1, #0
 801623e:	400a      	ands	r2, r1
 8016240:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2243      	movs	r2, #67	; 0x43
 8016246:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016248:	4b02      	ldr	r3, [pc, #8]	; (8016254 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 801624a:	0018      	movs	r0, r3
 801624c:	46bd      	mov	sp, r7
 801624e:	b006      	add	sp, #24
 8016250:	bd80      	pop	{r7, pc}
 8016252:	46c0      	nop			; (mov r8, r8)
 8016254:	200000ac 	.word	0x200000ac

08016258 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	220a      	movs	r2, #10
 8016264:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016266:	4b02      	ldr	r3, [pc, #8]	; (8016270 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8016268:	0018      	movs	r0, r3
 801626a:	46bd      	mov	sp, r7
 801626c:	b002      	add	sp, #8
 801626e:	bd80      	pop	{r7, pc}
 8016270:	20000068 	.word	0x20000068

08016274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b082      	sub	sp, #8
 8016278:	af00      	add	r7, sp, #0
 801627a:	6078      	str	r0, [r7, #4]
 801627c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d101      	bne.n	8016288 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016284:	2303      	movs	r3, #3
 8016286:	e00b      	b.n	80162a0 <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016288:	687a      	ldr	r2, [r7, #4]
 801628a:	23b5      	movs	r3, #181	; 0xb5
 801628c:	009b      	lsls	r3, r3, #2
 801628e:	58d3      	ldr	r3, [r2, r3]
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	33b0      	adds	r3, #176	; 0xb0
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	18d3      	adds	r3, r2, r3
 8016298:	3304      	adds	r3, #4
 801629a:	683a      	ldr	r2, [r7, #0]
 801629c:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 801629e:	2300      	movs	r3, #0
}
 80162a0:	0018      	movs	r0, r3
 80162a2:	46bd      	mov	sp, r7
 80162a4:	b002      	add	sp, #8
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b086      	sub	sp, #24
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	60f8      	str	r0, [r7, #12]
 80162b0:	60b9      	str	r1, [r7, #8]
 80162b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162b4:	68fa      	ldr	r2, [r7, #12]
 80162b6:	23b5      	movs	r3, #181	; 0xb5
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	58d2      	ldr	r2, [r2, r3]
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	32b0      	adds	r2, #176	; 0xb0
 80162c0:	0092      	lsls	r2, r2, #2
 80162c2:	58d3      	ldr	r3, [r2, r3]
 80162c4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d101      	bne.n	80162d0 <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80162cc:	2303      	movs	r3, #3
 80162ce:	e00a      	b.n	80162e6 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 80162d0:	697a      	ldr	r2, [r7, #20]
 80162d2:	2382      	movs	r3, #130	; 0x82
 80162d4:	009b      	lsls	r3, r3, #2
 80162d6:	68b9      	ldr	r1, [r7, #8]
 80162d8:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80162da:	697a      	ldr	r2, [r7, #20]
 80162dc:	2384      	movs	r3, #132	; 0x84
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	6879      	ldr	r1, [r7, #4]
 80162e2:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80162e4:	2300      	movs	r3, #0
}
 80162e6:	0018      	movs	r0, r3
 80162e8:	46bd      	mov	sp, r7
 80162ea:	b006      	add	sp, #24
 80162ec:	bd80      	pop	{r7, pc}

080162ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80162ee:	b580      	push	{r7, lr}
 80162f0:	b084      	sub	sp, #16
 80162f2:	af00      	add	r7, sp, #0
 80162f4:	6078      	str	r0, [r7, #4]
 80162f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80162f8:	687a      	ldr	r2, [r7, #4]
 80162fa:	23b5      	movs	r3, #181	; 0xb5
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	58d2      	ldr	r2, [r2, r3]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	32b0      	adds	r2, #176	; 0xb0
 8016304:	0092      	lsls	r2, r2, #2
 8016306:	58d3      	ldr	r3, [r2, r3]
 8016308:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d101      	bne.n	8016314 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016310:	2303      	movs	r3, #3
 8016312:	e005      	b.n	8016320 <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	2381      	movs	r3, #129	; 0x81
 8016318:	009b      	lsls	r3, r3, #2
 801631a:	6839      	ldr	r1, [r7, #0]
 801631c:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 801631e:	2300      	movs	r3, #0
}
 8016320:	0018      	movs	r0, r3
 8016322:	46bd      	mov	sp, r7
 8016324:	b004      	add	sp, #16
 8016326:	bd80      	pop	{r7, pc}

08016328 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	23b5      	movs	r3, #181	; 0xb5
 8016334:	009b      	lsls	r3, r3, #2
 8016336:	58d2      	ldr	r2, [r2, r3]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	32b0      	adds	r2, #176	; 0xb0
 801633c:	0092      	lsls	r2, r2, #2
 801633e:	58d3      	ldr	r3, [r2, r3]
 8016340:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016342:	687a      	ldr	r2, [r7, #4]
 8016344:	23b5      	movs	r3, #181	; 0xb5
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	58d2      	ldr	r2, [r2, r3]
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	32b0      	adds	r2, #176	; 0xb0
 801634e:	0092      	lsls	r2, r2, #2
 8016350:	58d3      	ldr	r3, [r2, r3]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d101      	bne.n	801635a <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016356:	2303      	movs	r3, #3
 8016358:	e01a      	b.n	8016390 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	7c1b      	ldrb	r3, [r3, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d10b      	bne.n	801637a <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016362:	4b0d      	ldr	r3, [pc, #52]	; (8016398 <USBD_CDC_ReceivePacket+0x70>)
 8016364:	7819      	ldrb	r1, [r3, #0]
 8016366:	68fa      	ldr	r2, [r7, #12]
 8016368:	2381      	movs	r3, #129	; 0x81
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	58d2      	ldr	r2, [r2, r3]
 801636e:	2380      	movs	r3, #128	; 0x80
 8016370:	009b      	lsls	r3, r3, #2
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f007 fe94 	bl	801e0a0 <USBD_LL_PrepareReceive>
 8016378:	e009      	b.n	801638e <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801637a:	4b07      	ldr	r3, [pc, #28]	; (8016398 <USBD_CDC_ReceivePacket+0x70>)
 801637c:	7819      	ldrb	r1, [r3, #0]
 801637e:	68fa      	ldr	r2, [r7, #12]
 8016380:	2381      	movs	r3, #129	; 0x81
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	58d2      	ldr	r2, [r2, r3]
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	2340      	movs	r3, #64	; 0x40
 801638a:	f007 fe89 	bl	801e0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801638e:	2300      	movs	r3, #0
}
 8016390:	0018      	movs	r0, r3
 8016392:	46bd      	mov	sp, r7
 8016394:	b004      	add	sp, #16
 8016396:	bd80      	pop	{r7, pc}
 8016398:	200000f0 	.word	0x200000f0

0801639c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801639c:	b5b0      	push	{r4, r5, r7, lr}
 801639e:	b086      	sub	sp, #24
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	60f8      	str	r0, [r7, #12]
 80163a4:	60b9      	str	r1, [r7, #8]
 80163a6:	1dfb      	adds	r3, r7, #7
 80163a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d101      	bne.n	80163b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80163b0:	2303      	movs	r3, #3
 80163b2:	e029      	b.n	8016408 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80163b4:	68fa      	ldr	r2, [r7, #12]
 80163b6:	23ae      	movs	r3, #174	; 0xae
 80163b8:	009b      	lsls	r3, r3, #2
 80163ba:	2100      	movs	r1, #0
 80163bc:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 80163be:	68fa      	ldr	r2, [r7, #12]
 80163c0:	23b1      	movs	r3, #177	; 0xb1
 80163c2:	009b      	lsls	r3, r3, #2
 80163c4:	2100      	movs	r1, #0
 80163c6:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80163c8:	68fa      	ldr	r2, [r7, #12]
 80163ca:	23b4      	movs	r3, #180	; 0xb4
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	2100      	movs	r1, #0
 80163d0:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d004      	beq.n	80163e2 <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 80163d8:	68fa      	ldr	r2, [r7, #12]
 80163da:	23ad      	movs	r3, #173	; 0xad
 80163dc:	009b      	lsls	r3, r3, #2
 80163de:	68b9      	ldr	r1, [r7, #8]
 80163e0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80163e2:	68fa      	ldr	r2, [r7, #12]
 80163e4:	23a7      	movs	r3, #167	; 0xa7
 80163e6:	009b      	lsls	r3, r3, #2
 80163e8:	2101      	movs	r1, #1
 80163ea:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	1dfa      	adds	r2, r7, #7
 80163f0:	7812      	ldrb	r2, [r2, #0]
 80163f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80163f4:	2517      	movs	r5, #23
 80163f6:	197c      	adds	r4, r7, r5
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	0018      	movs	r0, r3
 80163fc:	f007 fc76 	bl	801dcec <USBD_LL_Init>
 8016400:	0003      	movs	r3, r0
 8016402:	7023      	strb	r3, [r4, #0]

  return ret;
 8016404:	197b      	adds	r3, r7, r5
 8016406:	781b      	ldrb	r3, [r3, #0]
}
 8016408:	0018      	movs	r0, r3
 801640a:	46bd      	mov	sp, r7
 801640c:	b006      	add	sp, #24
 801640e:	bdb0      	pop	{r4, r5, r7, pc}

08016410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801641a:	230e      	movs	r3, #14
 801641c:	18fb      	adds	r3, r7, r3
 801641e:	2200      	movs	r2, #0
 8016420:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d101      	bne.n	801642c <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016428:	2303      	movs	r3, #3
 801642a:	e02b      	b.n	8016484 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	23ae      	movs	r3, #174	; 0xae
 8016430:	009b      	lsls	r3, r3, #2
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	23b5      	movs	r3, #181	; 0xb5
 801643a:	009b      	lsls	r3, r3, #2
 801643c:	58d2      	ldr	r2, [r2, r3]
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	32ae      	adds	r2, #174	; 0xae
 8016442:	0092      	lsls	r2, r2, #2
 8016444:	58d3      	ldr	r3, [r2, r3]
 8016446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016448:	2b00      	cmp	r3, #0
 801644a:	d011      	beq.n	8016470 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	23b5      	movs	r3, #181	; 0xb5
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	58d2      	ldr	r2, [r2, r3]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	32ae      	adds	r2, #174	; 0xae
 8016458:	0092      	lsls	r2, r2, #2
 801645a:	58d3      	ldr	r3, [r2, r3]
 801645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801645e:	220e      	movs	r2, #14
 8016460:	18ba      	adds	r2, r7, r2
 8016462:	0010      	movs	r0, r2
 8016464:	4798      	blx	r3
 8016466:	0001      	movs	r1, r0
 8016468:	687a      	ldr	r2, [r7, #4]
 801646a:	23b4      	movs	r3, #180	; 0xb4
 801646c:	009b      	lsls	r3, r3, #2
 801646e:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8016470:	687a      	ldr	r2, [r7, #4]
 8016472:	23b6      	movs	r3, #182	; 0xb6
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	58d3      	ldr	r3, [r2, r3]
 8016478:	1c59      	adds	r1, r3, #1
 801647a:	687a      	ldr	r2, [r7, #4]
 801647c:	23b6      	movs	r3, #182	; 0xb6
 801647e:	009b      	lsls	r3, r3, #2
 8016480:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8016482:	2300      	movs	r3, #0
}
 8016484:	0018      	movs	r0, r3
 8016486:	46bd      	mov	sp, r7
 8016488:	b004      	add	sp, #16
 801648a:	bd80      	pop	{r7, pc}

0801648c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b082      	sub	sp, #8
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	0018      	movs	r0, r3
 8016498:	f007 fc9a 	bl	801ddd0 <USBD_LL_Start>
 801649c:	0003      	movs	r3, r0
}
 801649e:	0018      	movs	r0, r3
 80164a0:	46bd      	mov	sp, r7
 80164a2:	b002      	add	sp, #8
 80164a4:	bd80      	pop	{r7, pc}

080164a6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80164a6:	b580      	push	{r7, lr}
 80164a8:	b082      	sub	sp, #8
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164ae:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80164b0:	0018      	movs	r0, r3
 80164b2:	46bd      	mov	sp, r7
 80164b4:	b002      	add	sp, #8
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80164b8:	b590      	push	{r4, r7, lr}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	000a      	movs	r2, r1
 80164c2:	1cfb      	adds	r3, r7, #3
 80164c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80164c6:	210f      	movs	r1, #15
 80164c8:	187b      	adds	r3, r7, r1
 80164ca:	2200      	movs	r2, #0
 80164cc:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	23ae      	movs	r3, #174	; 0xae
 80164d2:	009b      	lsls	r3, r3, #2
 80164d4:	58d3      	ldr	r3, [r2, r3]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00c      	beq.n	80164f4 <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	23ae      	movs	r3, #174	; 0xae
 80164de:	009b      	lsls	r3, r3, #2
 80164e0:	58d3      	ldr	r3, [r2, r3]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	187c      	adds	r4, r7, r1
 80164e6:	1cfa      	adds	r2, r7, #3
 80164e8:	7811      	ldrb	r1, [r2, #0]
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	0010      	movs	r0, r2
 80164ee:	4798      	blx	r3
 80164f0:	0003      	movs	r3, r0
 80164f2:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80164f4:	230f      	movs	r3, #15
 80164f6:	18fb      	adds	r3, r7, r3
 80164f8:	781b      	ldrb	r3, [r3, #0]
}
 80164fa:	0018      	movs	r0, r3
 80164fc:	46bd      	mov	sp, r7
 80164fe:	b005      	add	sp, #20
 8016500:	bd90      	pop	{r4, r7, pc}

08016502 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016502:	b590      	push	{r4, r7, lr}
 8016504:	b085      	sub	sp, #20
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
 801650a:	000a      	movs	r2, r1
 801650c:	1cfb      	adds	r3, r7, #3
 801650e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016510:	240f      	movs	r4, #15
 8016512:	193b      	adds	r3, r7, r4
 8016514:	2200      	movs	r2, #0
 8016516:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	23ae      	movs	r3, #174	; 0xae
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	58d3      	ldr	r3, [r2, r3]
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	1cfa      	adds	r2, r7, #3
 8016524:	7811      	ldrb	r1, [r2, #0]
 8016526:	687a      	ldr	r2, [r7, #4]
 8016528:	0010      	movs	r0, r2
 801652a:	4798      	blx	r3
 801652c:	1e03      	subs	r3, r0, #0
 801652e:	d002      	beq.n	8016536 <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8016530:	193b      	adds	r3, r7, r4
 8016532:	2203      	movs	r2, #3
 8016534:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016536:	230f      	movs	r3, #15
 8016538:	18fb      	adds	r3, r7, r3
 801653a:	781b      	ldrb	r3, [r3, #0]
}
 801653c:	0018      	movs	r0, r3
 801653e:	46bd      	mov	sp, r7
 8016540:	b005      	add	sp, #20
 8016542:	bd90      	pop	{r4, r7, pc}

08016544 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016544:	b590      	push	{r4, r7, lr}
 8016546:	b085      	sub	sp, #20
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4a30      	ldr	r2, [pc, #192]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 8016552:	4694      	mov	ip, r2
 8016554:	4463      	add	r3, ip
 8016556:	683a      	ldr	r2, [r7, #0]
 8016558:	0011      	movs	r1, r2
 801655a:	0018      	movs	r0, r3
 801655c:	f001 fa5f 	bl	8017a1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016560:	687a      	ldr	r2, [r7, #4]
 8016562:	23a5      	movs	r3, #165	; 0xa5
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	2101      	movs	r1, #1
 8016568:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	23ac      	movs	r3, #172	; 0xac
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	5ad3      	ldrh	r3, [r2, r3]
 8016572:	0019      	movs	r1, r3
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	23a6      	movs	r3, #166	; 0xa6
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	4a25      	ldr	r2, [pc, #148]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 8016580:	5c9b      	ldrb	r3, [r3, r2]
 8016582:	001a      	movs	r2, r3
 8016584:	231f      	movs	r3, #31
 8016586:	4013      	ands	r3, r2
 8016588:	2b02      	cmp	r3, #2
 801658a:	d01f      	beq.n	80165cc <USBD_LL_SetupStage+0x88>
 801658c:	d82b      	bhi.n	80165e6 <USBD_LL_SetupStage+0xa2>
 801658e:	2b00      	cmp	r3, #0
 8016590:	d002      	beq.n	8016598 <USBD_LL_SetupStage+0x54>
 8016592:	2b01      	cmp	r3, #1
 8016594:	d00d      	beq.n	80165b2 <USBD_LL_SetupStage+0x6e>
 8016596:	e026      	b.n	80165e6 <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	4a1e      	ldr	r2, [pc, #120]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 801659c:	189a      	adds	r2, r3, r2
 801659e:	230f      	movs	r3, #15
 80165a0:	18fc      	adds	r4, r7, r3
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	0011      	movs	r1, r2
 80165a6:	0018      	movs	r0, r3
 80165a8:	f000 fb5e 	bl	8016c68 <USBD_StdDevReq>
 80165ac:	0003      	movs	r3, r0
 80165ae:	7023      	strb	r3, [r4, #0]
      break;
 80165b0:	e029      	b.n	8016606 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	4a17      	ldr	r2, [pc, #92]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 80165b6:	189a      	adds	r2, r3, r2
 80165b8:	230f      	movs	r3, #15
 80165ba:	18fc      	adds	r4, r7, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	0011      	movs	r1, r2
 80165c0:	0018      	movs	r0, r3
 80165c2:	f000 fbcf 	bl	8016d64 <USBD_StdItfReq>
 80165c6:	0003      	movs	r3, r0
 80165c8:	7023      	strb	r3, [r4, #0]
      break;
 80165ca:	e01c      	b.n	8016606 <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	4a11      	ldr	r2, [pc, #68]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 80165d0:	189a      	adds	r2, r3, r2
 80165d2:	230f      	movs	r3, #15
 80165d4:	18fc      	adds	r4, r7, r3
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	0011      	movs	r1, r2
 80165da:	0018      	movs	r0, r3
 80165dc:	f000 fc4f 	bl	8016e7e <USBD_StdEPReq>
 80165e0:	0003      	movs	r3, r0
 80165e2:	7023      	strb	r3, [r4, #0]
      break;
 80165e4:	e00f      	b.n	8016606 <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	4a0a      	ldr	r2, [pc, #40]	; (8016614 <USBD_LL_SetupStage+0xd0>)
 80165ea:	5c9b      	ldrb	r3, [r3, r2]
 80165ec:	227f      	movs	r2, #127	; 0x7f
 80165ee:	4393      	bics	r3, r2
 80165f0:	b2da      	uxtb	r2, r3
 80165f2:	230f      	movs	r3, #15
 80165f4:	18fc      	adds	r4, r7, r3
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	0011      	movs	r1, r2
 80165fa:	0018      	movs	r0, r3
 80165fc:	f007 fc6f 	bl	801dede <USBD_LL_StallEP>
 8016600:	0003      	movs	r3, r0
 8016602:	7023      	strb	r3, [r4, #0]
      break;
 8016604:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016606:	230f      	movs	r3, #15
 8016608:	18fb      	adds	r3, r7, r3
 801660a:	781b      	ldrb	r3, [r3, #0]
}
 801660c:	0018      	movs	r0, r3
 801660e:	46bd      	mov	sp, r7
 8016610:	b005      	add	sp, #20
 8016612:	bd90      	pop	{r4, r7, pc}
 8016614:	000002aa 	.word	0x000002aa

08016618 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801661a:	b087      	sub	sp, #28
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	607a      	str	r2, [r7, #4]
 8016622:	200b      	movs	r0, #11
 8016624:	183b      	adds	r3, r7, r0
 8016626:	1c0a      	adds	r2, r1, #0
 8016628:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801662a:	2317      	movs	r3, #23
 801662c:	18fb      	adds	r3, r7, r3
 801662e:	2200      	movs	r2, #0
 8016630:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8016632:	183b      	adds	r3, r7, r0
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d000      	beq.n	801663c <USBD_LL_DataOutStage+0x24>
 801663a:	e084      	b.n	8016746 <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	3355      	adds	r3, #85	; 0x55
 8016640:	33ff      	adds	r3, #255	; 0xff
 8016642:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016644:	68fa      	ldr	r2, [r7, #12]
 8016646:	23a5      	movs	r3, #165	; 0xa5
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	58d3      	ldr	r3, [r2, r3]
 801664c:	2b03      	cmp	r3, #3
 801664e:	d000      	beq.n	8016652 <USBD_LL_DataOutStage+0x3a>
 8016650:	e0c0      	b.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	689a      	ldr	r2, [r3, #8]
 8016656:	693b      	ldr	r3, [r7, #16]
 8016658:	68db      	ldr	r3, [r3, #12]
 801665a:	429a      	cmp	r2, r3
 801665c:	d914      	bls.n	8016688 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	689a      	ldr	r2, [r3, #8]
 8016662:	693b      	ldr	r3, [r7, #16]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	1ad2      	subs	r2, r2, r3
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	68d9      	ldr	r1, [r3, #12]
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	689a      	ldr	r2, [r3, #8]
 8016674:	000b      	movs	r3, r1
 8016676:	4293      	cmp	r3, r2
 8016678:	d900      	bls.n	801667c <USBD_LL_DataOutStage+0x64>
 801667a:	0013      	movs	r3, r2
 801667c:	6879      	ldr	r1, [r7, #4]
 801667e:	68f8      	ldr	r0, [r7, #12]
 8016680:	001a      	movs	r2, r3
 8016682:	f001 fade 	bl	8017c42 <USBD_CtlContinueRx>
 8016686:	e0a5      	b.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	4a55      	ldr	r2, [pc, #340]	; (80167e0 <USBD_LL_DataOutStage+0x1c8>)
 801668c:	5c9b      	ldrb	r3, [r3, r2]
 801668e:	001a      	movs	r2, r3
 8016690:	231f      	movs	r3, #31
 8016692:	4013      	ands	r3, r2
 8016694:	2b02      	cmp	r3, #2
 8016696:	d018      	beq.n	80166ca <USBD_LL_DataOutStage+0xb2>
 8016698:	d825      	bhi.n	80166e6 <USBD_LL_DataOutStage+0xce>
 801669a:	2b00      	cmp	r3, #0
 801669c:	d002      	beq.n	80166a4 <USBD_LL_DataOutStage+0x8c>
 801669e:	2b01      	cmp	r3, #1
 80166a0:	d005      	beq.n	80166ae <USBD_LL_DataOutStage+0x96>
 80166a2:	e020      	b.n	80166e6 <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80166a4:	2316      	movs	r3, #22
 80166a6:	18fb      	adds	r3, r7, r3
 80166a8:	2200      	movs	r2, #0
 80166aa:	701a      	strb	r2, [r3, #0]
            break;
 80166ac:	e020      	b.n	80166f0 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	4a4c      	ldr	r2, [pc, #304]	; (80167e4 <USBD_LL_DataOutStage+0x1cc>)
 80166b2:	5a9b      	ldrh	r3, [r3, r2]
 80166b4:	b2da      	uxtb	r2, r3
 80166b6:	2316      	movs	r3, #22
 80166b8:	18fc      	adds	r4, r7, r3
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	0011      	movs	r1, r2
 80166be:	0018      	movs	r0, r3
 80166c0:	f000 fa31 	bl	8016b26 <USBD_CoreFindIF>
 80166c4:	0003      	movs	r3, r0
 80166c6:	7023      	strb	r3, [r4, #0]
            break;
 80166c8:	e012      	b.n	80166f0 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	4a45      	ldr	r2, [pc, #276]	; (80167e4 <USBD_LL_DataOutStage+0x1cc>)
 80166ce:	5a9b      	ldrh	r3, [r3, r2]
 80166d0:	b2da      	uxtb	r2, r3
 80166d2:	2316      	movs	r3, #22
 80166d4:	18fc      	adds	r4, r7, r3
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	0011      	movs	r1, r2
 80166da:	0018      	movs	r0, r3
 80166dc:	f000 fa2f 	bl	8016b3e <USBD_CoreFindEP>
 80166e0:	0003      	movs	r3, r0
 80166e2:	7023      	strb	r3, [r4, #0]
            break;
 80166e4:	e004      	b.n	80166f0 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80166e6:	2316      	movs	r3, #22
 80166e8:	18fb      	adds	r3, r7, r3
 80166ea:	2200      	movs	r2, #0
 80166ec:	701a      	strb	r2, [r3, #0]
            break;
 80166ee:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80166f0:	2116      	movs	r1, #22
 80166f2:	187b      	adds	r3, r7, r1
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d120      	bne.n	801673c <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	23a7      	movs	r3, #167	; 0xa7
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	5cd3      	ldrb	r3, [r2, r3]
 8016702:	b2db      	uxtb	r3, r3
 8016704:	2b03      	cmp	r3, #3
 8016706:	d119      	bne.n	801673c <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016708:	187b      	adds	r3, r7, r1
 801670a:	781a      	ldrb	r2, [r3, #0]
 801670c:	68fb      	ldr	r3, [r7, #12]
 801670e:	32ae      	adds	r2, #174	; 0xae
 8016710:	0092      	lsls	r2, r2, #2
 8016712:	58d3      	ldr	r3, [r2, r3]
 8016714:	691b      	ldr	r3, [r3, #16]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d010      	beq.n	801673c <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 801671a:	0008      	movs	r0, r1
 801671c:	187b      	adds	r3, r7, r1
 801671e:	7819      	ldrb	r1, [r3, #0]
 8016720:	68fa      	ldr	r2, [r7, #12]
 8016722:	23b5      	movs	r3, #181	; 0xb5
 8016724:	009b      	lsls	r3, r3, #2
 8016726:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016728:	183b      	adds	r3, r7, r0
 801672a:	781a      	ldrb	r2, [r3, #0]
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	32ae      	adds	r2, #174	; 0xae
 8016730:	0092      	lsls	r2, r2, #2
 8016732:	58d3      	ldr	r3, [r2, r3]
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	68fa      	ldr	r2, [r7, #12]
 8016738:	0010      	movs	r0, r2
 801673a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	0018      	movs	r0, r3
 8016740:	f001 fa90 	bl	8017c64 <USBD_CtlSendStatus>
 8016744:	e046      	b.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016746:	260b      	movs	r6, #11
 8016748:	19bb      	adds	r3, r7, r6
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	227f      	movs	r2, #127	; 0x7f
 801674e:	4013      	ands	r3, r2
 8016750:	b2da      	uxtb	r2, r3
 8016752:	2516      	movs	r5, #22
 8016754:	197c      	adds	r4, r7, r5
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	0011      	movs	r1, r2
 801675a:	0018      	movs	r0, r3
 801675c:	f000 f9ef 	bl	8016b3e <USBD_CoreFindEP>
 8016760:	0003      	movs	r3, r0
 8016762:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016764:	0029      	movs	r1, r5
 8016766:	187b      	adds	r3, r7, r1
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	2bff      	cmp	r3, #255	; 0xff
 801676c:	d032      	beq.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
 801676e:	187b      	adds	r3, r7, r1
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d12e      	bne.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016776:	68fa      	ldr	r2, [r7, #12]
 8016778:	23a7      	movs	r3, #167	; 0xa7
 801677a:	009b      	lsls	r3, r3, #2
 801677c:	5cd3      	ldrb	r3, [r2, r3]
 801677e:	b2db      	uxtb	r3, r3
 8016780:	2b03      	cmp	r3, #3
 8016782:	d11f      	bne.n	80167c4 <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016784:	187b      	adds	r3, r7, r1
 8016786:	781a      	ldrb	r2, [r3, #0]
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	32ae      	adds	r2, #174	; 0xae
 801678c:	0092      	lsls	r2, r2, #2
 801678e:	58d3      	ldr	r3, [r2, r3]
 8016790:	699b      	ldr	r3, [r3, #24]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d016      	beq.n	80167c4 <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8016796:	0008      	movs	r0, r1
 8016798:	187b      	adds	r3, r7, r1
 801679a:	7819      	ldrb	r1, [r3, #0]
 801679c:	68fa      	ldr	r2, [r7, #12]
 801679e:	23b5      	movs	r3, #181	; 0xb5
 80167a0:	009b      	lsls	r3, r3, #2
 80167a2:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80167a4:	183b      	adds	r3, r7, r0
 80167a6:	781a      	ldrb	r2, [r3, #0]
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	32ae      	adds	r2, #174	; 0xae
 80167ac:	0092      	lsls	r2, r2, #2
 80167ae:	58d3      	ldr	r3, [r2, r3]
 80167b0:	699b      	ldr	r3, [r3, #24]
 80167b2:	2217      	movs	r2, #23
 80167b4:	18bc      	adds	r4, r7, r2
 80167b6:	19ba      	adds	r2, r7, r6
 80167b8:	7811      	ldrb	r1, [r2, #0]
 80167ba:	68fa      	ldr	r2, [r7, #12]
 80167bc:	0010      	movs	r0, r2
 80167be:	4798      	blx	r3
 80167c0:	0003      	movs	r3, r0
 80167c2:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 80167c4:	2217      	movs	r2, #23
 80167c6:	18bb      	adds	r3, r7, r2
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d002      	beq.n	80167d4 <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 80167ce:	18bb      	adds	r3, r7, r2
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	e000      	b.n	80167d6 <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 80167d4:	2300      	movs	r3, #0
}
 80167d6:	0018      	movs	r0, r3
 80167d8:	46bd      	mov	sp, r7
 80167da:	b007      	add	sp, #28
 80167dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167de:	46c0      	nop			; (mov r8, r8)
 80167e0:	000002aa 	.word	0x000002aa
 80167e4:	000002ae 	.word	0x000002ae

080167e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80167e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ea:	b087      	sub	sp, #28
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	60f8      	str	r0, [r7, #12]
 80167f0:	607a      	str	r2, [r7, #4]
 80167f2:	200b      	movs	r0, #11
 80167f4:	183b      	adds	r3, r7, r0
 80167f6:	1c0a      	adds	r2, r1, #0
 80167f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80167fa:	183b      	adds	r3, r7, r0
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d000      	beq.n	8016804 <USBD_LL_DataInStage+0x1c>
 8016802:	e07d      	b.n	8016900 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3314      	adds	r3, #20
 8016808:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801680a:	68fa      	ldr	r2, [r7, #12]
 801680c:	23a5      	movs	r3, #165	; 0xa5
 801680e:	009b      	lsls	r3, r3, #2
 8016810:	58d3      	ldr	r3, [r2, r3]
 8016812:	2b02      	cmp	r3, #2
 8016814:	d164      	bne.n	80168e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	689a      	ldr	r2, [r3, #8]
 801681a:	693b      	ldr	r3, [r7, #16]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	429a      	cmp	r2, r3
 8016820:	d914      	bls.n	801684c <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	689a      	ldr	r2, [r3, #8]
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	68db      	ldr	r3, [r3, #12]
 801682a:	1ad2      	subs	r2, r2, r3
 801682c:	693b      	ldr	r3, [r7, #16]
 801682e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	689a      	ldr	r2, [r3, #8]
 8016834:	6879      	ldr	r1, [r7, #4]
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	0018      	movs	r0, r3
 801683a:	f001 f9d1 	bl	8017be0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801683e:	68f8      	ldr	r0, [r7, #12]
 8016840:	2300      	movs	r3, #0
 8016842:	2200      	movs	r2, #0
 8016844:	2100      	movs	r1, #0
 8016846:	f007 fc2b 	bl	801e0a0 <USBD_LL_PrepareReceive>
 801684a:	e049      	b.n	80168e0 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	68da      	ldr	r2, [r3, #12]
 8016850:	693b      	ldr	r3, [r7, #16]
 8016852:	689b      	ldr	r3, [r3, #8]
 8016854:	429a      	cmp	r2, r3
 8016856:	d11f      	bne.n	8016898 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	685a      	ldr	r2, [r3, #4]
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016860:	429a      	cmp	r2, r3
 8016862:	d319      	bcc.n	8016898 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	685a      	ldr	r2, [r3, #4]
 8016868:	68f9      	ldr	r1, [r7, #12]
 801686a:	23a6      	movs	r3, #166	; 0xa6
 801686c:	009b      	lsls	r3, r3, #2
 801686e:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8016870:	429a      	cmp	r2, r3
 8016872:	d211      	bcs.n	8016898 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2200      	movs	r2, #0
 8016878:	2100      	movs	r1, #0
 801687a:	0018      	movs	r0, r3
 801687c:	f001 f9b0 	bl	8017be0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016880:	68fa      	ldr	r2, [r7, #12]
 8016882:	23a6      	movs	r3, #166	; 0xa6
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	2100      	movs	r1, #0
 8016888:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801688a:	68f8      	ldr	r0, [r7, #12]
 801688c:	2300      	movs	r3, #0
 801688e:	2200      	movs	r2, #0
 8016890:	2100      	movs	r1, #0
 8016892:	f007 fc05 	bl	801e0a0 <USBD_LL_PrepareReceive>
 8016896:	e023      	b.n	80168e0 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	23a7      	movs	r3, #167	; 0xa7
 801689c:	009b      	lsls	r3, r3, #2
 801689e:	5cd3      	ldrb	r3, [r2, r3]
 80168a0:	b2db      	uxtb	r3, r3
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d113      	bne.n	80168ce <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80168a6:	68fa      	ldr	r2, [r7, #12]
 80168a8:	23ae      	movs	r3, #174	; 0xae
 80168aa:	009b      	lsls	r3, r3, #2
 80168ac:	58d3      	ldr	r3, [r2, r3]
 80168ae:	68db      	ldr	r3, [r3, #12]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d00c      	beq.n	80168ce <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 80168b4:	68fa      	ldr	r2, [r7, #12]
 80168b6:	23b5      	movs	r3, #181	; 0xb5
 80168b8:	009b      	lsls	r3, r3, #2
 80168ba:	2100      	movs	r1, #0
 80168bc:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 80168be:	68fa      	ldr	r2, [r7, #12]
 80168c0:	23ae      	movs	r3, #174	; 0xae
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	58d3      	ldr	r3, [r2, r3]
 80168c6:	68db      	ldr	r3, [r3, #12]
 80168c8:	68fa      	ldr	r2, [r7, #12]
 80168ca:	0010      	movs	r0, r2
 80168cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2180      	movs	r1, #128	; 0x80
 80168d2:	0018      	movs	r0, r3
 80168d4:	f007 fb03 	bl	801dede <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	0018      	movs	r0, r3
 80168dc:	f001 f9d6 	bl	8017c8c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80168e0:	68fa      	ldr	r2, [r7, #12]
 80168e2:	23a8      	movs	r3, #168	; 0xa8
 80168e4:	009b      	lsls	r3, r3, #2
 80168e6:	5cd3      	ldrb	r3, [r2, r3]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d050      	beq.n	801698e <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	0018      	movs	r0, r3
 80168f0:	f7ff fdd9 	bl	80164a6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	23a8      	movs	r3, #168	; 0xa8
 80168f8:	009b      	lsls	r3, r3, #2
 80168fa:	2100      	movs	r1, #0
 80168fc:	54d1      	strb	r1, [r2, r3]
 80168fe:	e046      	b.n	801698e <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016900:	260b      	movs	r6, #11
 8016902:	19bb      	adds	r3, r7, r6
 8016904:	781b      	ldrb	r3, [r3, #0]
 8016906:	2280      	movs	r2, #128	; 0x80
 8016908:	4252      	negs	r2, r2
 801690a:	4313      	orrs	r3, r2
 801690c:	b2da      	uxtb	r2, r3
 801690e:	2517      	movs	r5, #23
 8016910:	197c      	adds	r4, r7, r5
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	0011      	movs	r1, r2
 8016916:	0018      	movs	r0, r3
 8016918:	f000 f911 	bl	8016b3e <USBD_CoreFindEP>
 801691c:	0003      	movs	r3, r0
 801691e:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016920:	0029      	movs	r1, r5
 8016922:	187b      	adds	r3, r7, r1
 8016924:	781b      	ldrb	r3, [r3, #0]
 8016926:	2bff      	cmp	r3, #255	; 0xff
 8016928:	d031      	beq.n	801698e <USBD_LL_DataInStage+0x1a6>
 801692a:	187b      	adds	r3, r7, r1
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d12d      	bne.n	801698e <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016932:	68fa      	ldr	r2, [r7, #12]
 8016934:	23a7      	movs	r3, #167	; 0xa7
 8016936:	009b      	lsls	r3, r3, #2
 8016938:	5cd3      	ldrb	r3, [r2, r3]
 801693a:	b2db      	uxtb	r3, r3
 801693c:	2b03      	cmp	r3, #3
 801693e:	d126      	bne.n	801698e <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016940:	187b      	adds	r3, r7, r1
 8016942:	781a      	ldrb	r2, [r3, #0]
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	32ae      	adds	r2, #174	; 0xae
 8016948:	0092      	lsls	r2, r2, #2
 801694a:	58d3      	ldr	r3, [r2, r3]
 801694c:	695b      	ldr	r3, [r3, #20]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d01d      	beq.n	801698e <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8016952:	0008      	movs	r0, r1
 8016954:	187b      	adds	r3, r7, r1
 8016956:	7819      	ldrb	r1, [r3, #0]
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	23b5      	movs	r3, #181	; 0xb5
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016960:	183b      	adds	r3, r7, r0
 8016962:	781a      	ldrb	r2, [r3, #0]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	32ae      	adds	r2, #174	; 0xae
 8016968:	0092      	lsls	r2, r2, #2
 801696a:	58d3      	ldr	r3, [r2, r3]
 801696c:	695b      	ldr	r3, [r3, #20]
 801696e:	2516      	movs	r5, #22
 8016970:	197c      	adds	r4, r7, r5
 8016972:	19ba      	adds	r2, r7, r6
 8016974:	7811      	ldrb	r1, [r2, #0]
 8016976:	68fa      	ldr	r2, [r7, #12]
 8016978:	0010      	movs	r0, r2
 801697a:	4798      	blx	r3
 801697c:	0003      	movs	r3, r0
 801697e:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8016980:	197b      	adds	r3, r7, r5
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d002      	beq.n	801698e <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8016988:	197b      	adds	r3, r7, r5
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	e000      	b.n	8016990 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 801698e:	2300      	movs	r3, #0
}
 8016990:	0018      	movs	r0, r3
 8016992:	46bd      	mov	sp, r7
 8016994:	b007      	add	sp, #28
 8016996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016998 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016998:	b590      	push	{r4, r7, lr}
 801699a:	b085      	sub	sp, #20
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80169a0:	240f      	movs	r4, #15
 80169a2:	193b      	adds	r3, r7, r4
 80169a4:	2200      	movs	r2, #0
 80169a6:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	23a7      	movs	r3, #167	; 0xa7
 80169ac:	009b      	lsls	r3, r3, #2
 80169ae:	2101      	movs	r1, #1
 80169b0:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	23a5      	movs	r3, #165	; 0xa5
 80169b6:	009b      	lsls	r3, r3, #2
 80169b8:	2100      	movs	r1, #0
 80169ba:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	23a9      	movs	r3, #169	; 0xa9
 80169c6:	009b      	lsls	r3, r3, #2
 80169c8:	2100      	movs	r1, #0
 80169ca:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 80169cc:	687a      	ldr	r2, [r7, #4]
 80169ce:	23a8      	movs	r3, #168	; 0xa8
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	2100      	movs	r1, #0
 80169d4:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80169d6:	687a      	ldr	r2, [r7, #4]
 80169d8:	23ae      	movs	r3, #174	; 0xae
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	58d3      	ldr	r3, [r2, r3]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d016      	beq.n	8016a10 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	23ae      	movs	r3, #174	; 0xae
 80169e6:	009b      	lsls	r3, r3, #2
 80169e8:	58d3      	ldr	r3, [r2, r3]
 80169ea:	685b      	ldr	r3, [r3, #4]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d00f      	beq.n	8016a10 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80169f0:	687a      	ldr	r2, [r7, #4]
 80169f2:	23ae      	movs	r3, #174	; 0xae
 80169f4:	009b      	lsls	r3, r3, #2
 80169f6:	58d3      	ldr	r3, [r2, r3]
 80169f8:	685a      	ldr	r2, [r3, #4]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	b2d9      	uxtb	r1, r3
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	0018      	movs	r0, r3
 8016a04:	4790      	blx	r2
 8016a06:	1e03      	subs	r3, r0, #0
 8016a08:	d002      	beq.n	8016a10 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8016a0a:	193b      	adds	r3, r7, r4
 8016a0c:	2203      	movs	r2, #3
 8016a0e:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	2340      	movs	r3, #64	; 0x40
 8016a14:	2200      	movs	r2, #0
 8016a16:	2100      	movs	r1, #0
 8016a18:	f007 f9ff 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016a1c:	687a      	ldr	r2, [r7, #4]
 8016a1e:	23b2      	movs	r3, #178	; 0xb2
 8016a20:	005b      	lsls	r3, r3, #1
 8016a22:	2101      	movs	r1, #1
 8016a24:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a26:	687a      	ldr	r2, [r7, #4]
 8016a28:	23b0      	movs	r3, #176	; 0xb0
 8016a2a:	005b      	lsls	r3, r3, #1
 8016a2c:	2140      	movs	r1, #64	; 0x40
 8016a2e:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	2340      	movs	r3, #64	; 0x40
 8016a34:	2200      	movs	r2, #0
 8016a36:	2180      	movs	r1, #128	; 0x80
 8016a38:	f007 f9ef 	bl	801de1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2201      	movs	r2, #1
 8016a40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2240      	movs	r2, #64	; 0x40
 8016a46:	621a      	str	r2, [r3, #32]

  return ret;
 8016a48:	230f      	movs	r3, #15
 8016a4a:	18fb      	adds	r3, r7, r3
 8016a4c:	781b      	ldrb	r3, [r3, #0]
}
 8016a4e:	0018      	movs	r0, r3
 8016a50:	46bd      	mov	sp, r7
 8016a52:	b005      	add	sp, #20
 8016a54:	bd90      	pop	{r4, r7, pc}

08016a56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016a56:	b580      	push	{r7, lr}
 8016a58:	b082      	sub	sp, #8
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
 8016a5e:	000a      	movs	r2, r1
 8016a60:	1cfb      	adds	r3, r7, #3
 8016a62:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	1cfa      	adds	r2, r7, #3
 8016a68:	7812      	ldrb	r2, [r2, #0]
 8016a6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016a6c:	2300      	movs	r3, #0
}
 8016a6e:	0018      	movs	r0, r3
 8016a70:	46bd      	mov	sp, r7
 8016a72:	b002      	add	sp, #8
 8016a74:	bd80      	pop	{r7, pc}
	...

08016a78 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016a80:	687a      	ldr	r2, [r7, #4]
 8016a82:	23a7      	movs	r3, #167	; 0xa7
 8016a84:	009b      	lsls	r3, r3, #2
 8016a86:	5cd3      	ldrb	r3, [r2, r3]
 8016a88:	b2d9      	uxtb	r1, r3
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	4a05      	ldr	r2, [pc, #20]	; (8016aa4 <USBD_LL_Suspend+0x2c>)
 8016a8e:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016a90:	687a      	ldr	r2, [r7, #4]
 8016a92:	23a7      	movs	r3, #167	; 0xa7
 8016a94:	009b      	lsls	r3, r3, #2
 8016a96:	2104      	movs	r1, #4
 8016a98:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	0018      	movs	r0, r3
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	b002      	add	sp, #8
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	0000029d 	.word	0x0000029d

08016aa8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016ab0:	687a      	ldr	r2, [r7, #4]
 8016ab2:	23a7      	movs	r3, #167	; 0xa7
 8016ab4:	009b      	lsls	r3, r3, #2
 8016ab6:	5cd3      	ldrb	r3, [r2, r3]
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	2b04      	cmp	r3, #4
 8016abc:	d107      	bne.n	8016ace <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	4a05      	ldr	r2, [pc, #20]	; (8016ad8 <USBD_LL_Resume+0x30>)
 8016ac2:	5c9b      	ldrb	r3, [r3, r2]
 8016ac4:	b2d9      	uxtb	r1, r3
 8016ac6:	687a      	ldr	r2, [r7, #4]
 8016ac8:	23a7      	movs	r3, #167	; 0xa7
 8016aca:	009b      	lsls	r3, r3, #2
 8016acc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8016ace:	2300      	movs	r3, #0
}
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	b002      	add	sp, #8
 8016ad6:	bd80      	pop	{r7, pc}
 8016ad8:	0000029d 	.word	0x0000029d

08016adc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ae4:	687a      	ldr	r2, [r7, #4]
 8016ae6:	23a7      	movs	r3, #167	; 0xa7
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	5cd3      	ldrb	r3, [r2, r3]
 8016aec:	b2db      	uxtb	r3, r3
 8016aee:	2b03      	cmp	r3, #3
 8016af0:	d114      	bne.n	8016b1c <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	23ae      	movs	r3, #174	; 0xae
 8016af6:	009b      	lsls	r3, r3, #2
 8016af8:	58d3      	ldr	r3, [r2, r3]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00e      	beq.n	8016b1c <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	23ae      	movs	r3, #174	; 0xae
 8016b02:	009b      	lsls	r3, r3, #2
 8016b04:	58d3      	ldr	r3, [r2, r3]
 8016b06:	69db      	ldr	r3, [r3, #28]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d007      	beq.n	8016b1c <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	23ae      	movs	r3, #174	; 0xae
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	58d3      	ldr	r3, [r2, r3]
 8016b14:	69db      	ldr	r3, [r3, #28]
 8016b16:	687a      	ldr	r2, [r7, #4]
 8016b18:	0010      	movs	r0, r2
 8016b1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016b1c:	2300      	movs	r3, #0
}
 8016b1e:	0018      	movs	r0, r3
 8016b20:	46bd      	mov	sp, r7
 8016b22:	b002      	add	sp, #8
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b082      	sub	sp, #8
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	6078      	str	r0, [r7, #4]
 8016b2e:	000a      	movs	r2, r1
 8016b30:	1cfb      	adds	r3, r7, #3
 8016b32:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b36:	0018      	movs	r0, r3
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	b002      	add	sp, #8
 8016b3c:	bd80      	pop	{r7, pc}

08016b3e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b082      	sub	sp, #8
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
 8016b46:	000a      	movs	r2, r1
 8016b48:	1cfb      	adds	r3, r7, #3
 8016b4a:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016b4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016b4e:	0018      	movs	r0, r3
 8016b50:	46bd      	mov	sp, r7
 8016b52:	b002      	add	sp, #8
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016b56:	b580      	push	{r7, lr}
 8016b58:	b086      	sub	sp, #24
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	6078      	str	r0, [r7, #4]
 8016b5e:	000a      	movs	r2, r1
 8016b60:	1cfb      	adds	r3, r7, #3
 8016b62:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	789a      	ldrb	r2, [r3, #2]
 8016b74:	78db      	ldrb	r3, [r3, #3]
 8016b76:	021b      	lsls	r3, r3, #8
 8016b78:	4313      	orrs	r3, r2
 8016b7a:	b29a      	uxth	r2, r3
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d92a      	bls.n	8016bdc <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	b29a      	uxth	r2, r3
 8016b8c:	230a      	movs	r3, #10
 8016b8e:	18fb      	adds	r3, r7, r3
 8016b90:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8016b92:	e016      	b.n	8016bc2 <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016b94:	230a      	movs	r3, #10
 8016b96:	18fa      	adds	r2, r7, r3
 8016b98:	697b      	ldr	r3, [r7, #20]
 8016b9a:	0011      	movs	r1, r2
 8016b9c:	0018      	movs	r0, r3
 8016b9e:	f000 f822 	bl	8016be6 <USBD_GetNextDesc>
 8016ba2:	0003      	movs	r3, r0
 8016ba4:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	785b      	ldrb	r3, [r3, #1]
 8016baa:	2b05      	cmp	r3, #5
 8016bac:	d109      	bne.n	8016bc2 <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016bae:	697b      	ldr	r3, [r7, #20]
 8016bb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016bb2:	693b      	ldr	r3, [r7, #16]
 8016bb4:	789b      	ldrb	r3, [r3, #2]
 8016bb6:	1cfa      	adds	r2, r7, #3
 8016bb8:	7812      	ldrb	r2, [r2, #0]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	d00d      	beq.n	8016bda <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	789a      	ldrb	r2, [r3, #2]
 8016bc6:	78db      	ldrb	r3, [r3, #3]
 8016bc8:	021b      	lsls	r3, r3, #8
 8016bca:	4313      	orrs	r3, r2
 8016bcc:	b29a      	uxth	r2, r3
 8016bce:	230a      	movs	r3, #10
 8016bd0:	18fb      	adds	r3, r7, r3
 8016bd2:	881b      	ldrh	r3, [r3, #0]
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d8dd      	bhi.n	8016b94 <USBD_GetEpDesc+0x3e>
 8016bd8:	e000      	b.n	8016bdc <USBD_GetEpDesc+0x86>
          break;
 8016bda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016bdc:	693b      	ldr	r3, [r7, #16]
}
 8016bde:	0018      	movs	r0, r3
 8016be0:	46bd      	mov	sp, r7
 8016be2:	b006      	add	sp, #24
 8016be4:	bd80      	pop	{r7, pc}

08016be6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016be6:	b580      	push	{r7, lr}
 8016be8:	b084      	sub	sp, #16
 8016bea:	af00      	add	r7, sp, #0
 8016bec:	6078      	str	r0, [r7, #4]
 8016bee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	881a      	ldrh	r2, [r3, #0]
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	b29b      	uxth	r3, r3
 8016bfe:	18d3      	adds	r3, r2, r3
 8016c00:	b29a      	uxth	r2, r3
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	001a      	movs	r2, r3
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	189b      	adds	r3, r3, r2
 8016c10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016c12:	68fb      	ldr	r3, [r7, #12]
}
 8016c14:	0018      	movs	r0, r3
 8016c16:	46bd      	mov	sp, r7
 8016c18:	b004      	add	sp, #16
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b086      	sub	sp, #24
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	781a      	ldrb	r2, [r3, #0]
 8016c2c:	2112      	movs	r1, #18
 8016c2e:	187b      	adds	r3, r7, r1
 8016c30:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	3301      	adds	r3, #1
 8016c36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	781a      	ldrb	r2, [r3, #0]
 8016c3c:	2010      	movs	r0, #16
 8016c3e:	183b      	adds	r3, r7, r0
 8016c40:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016c42:	183b      	adds	r3, r7, r0
 8016c44:	881b      	ldrh	r3, [r3, #0]
 8016c46:	021b      	lsls	r3, r3, #8
 8016c48:	b21a      	sxth	r2, r3
 8016c4a:	187b      	adds	r3, r7, r1
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	5e5b      	ldrsh	r3, [r3, r1]
 8016c50:	4313      	orrs	r3, r2
 8016c52:	b21a      	sxth	r2, r3
 8016c54:	210e      	movs	r1, #14
 8016c56:	187b      	adds	r3, r7, r1
 8016c58:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 8016c5a:	187b      	adds	r3, r7, r1
 8016c5c:	881b      	ldrh	r3, [r3, #0]
}
 8016c5e:	0018      	movs	r0, r3
 8016c60:	46bd      	mov	sp, r7
 8016c62:	b006      	add	sp, #24
 8016c64:	bd80      	pop	{r7, pc}
	...

08016c68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016c72:	230f      	movs	r3, #15
 8016c74:	18fb      	adds	r3, r7, r3
 8016c76:	2200      	movs	r2, #0
 8016c78:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016c7a:	683b      	ldr	r3, [r7, #0]
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	001a      	movs	r2, r3
 8016c80:	2360      	movs	r3, #96	; 0x60
 8016c82:	4013      	ands	r3, r2
 8016c84:	2b40      	cmp	r3, #64	; 0x40
 8016c86:	d004      	beq.n	8016c92 <USBD_StdDevReq+0x2a>
 8016c88:	d85b      	bhi.n	8016d42 <USBD_StdDevReq+0xda>
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d013      	beq.n	8016cb6 <USBD_StdDevReq+0x4e>
 8016c8e:	2b20      	cmp	r3, #32
 8016c90:	d157      	bne.n	8016d42 <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	23b5      	movs	r3, #181	; 0xb5
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	58d2      	ldr	r2, [r2, r3]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	32ae      	adds	r2, #174	; 0xae
 8016c9e:	0092      	lsls	r2, r2, #2
 8016ca0:	58d3      	ldr	r3, [r2, r3]
 8016ca2:	689b      	ldr	r3, [r3, #8]
 8016ca4:	220f      	movs	r2, #15
 8016ca6:	18bc      	adds	r4, r7, r2
 8016ca8:	6839      	ldr	r1, [r7, #0]
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	0010      	movs	r0, r2
 8016cae:	4798      	blx	r3
 8016cb0:	0003      	movs	r3, r0
 8016cb2:	7023      	strb	r3, [r4, #0]
      break;
 8016cb4:	e04c      	b.n	8016d50 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	785b      	ldrb	r3, [r3, #1]
 8016cba:	2b09      	cmp	r3, #9
 8016cbc:	d839      	bhi.n	8016d32 <USBD_StdDevReq+0xca>
 8016cbe:	009a      	lsls	r2, r3, #2
 8016cc0:	4b27      	ldr	r3, [pc, #156]	; (8016d60 <USBD_StdDevReq+0xf8>)
 8016cc2:	18d3      	adds	r3, r2, r3
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016cc8:	683a      	ldr	r2, [r7, #0]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	0011      	movs	r1, r2
 8016cce:	0018      	movs	r0, r3
 8016cd0:	f000 fada 	bl	8017288 <USBD_GetDescriptor>
          break;
 8016cd4:	e034      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016cd6:	683a      	ldr	r2, [r7, #0]
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	0011      	movs	r1, r2
 8016cdc:	0018      	movs	r0, r3
 8016cde:	f000 fcad 	bl	801763c <USBD_SetAddress>
          break;
 8016ce2:	e02d      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016ce4:	230f      	movs	r3, #15
 8016ce6:	18fc      	adds	r4, r7, r3
 8016ce8:	683a      	ldr	r2, [r7, #0]
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	0011      	movs	r1, r2
 8016cee:	0018      	movs	r0, r3
 8016cf0:	f000 fcfa 	bl	80176e8 <USBD_SetConfig>
 8016cf4:	0003      	movs	r3, r0
 8016cf6:	7023      	strb	r3, [r4, #0]
          break;
 8016cf8:	e022      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	0011      	movs	r1, r2
 8016d00:	0018      	movs	r0, r3
 8016d02:	f000 fdbf 	bl	8017884 <USBD_GetConfig>
          break;
 8016d06:	e01b      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016d08:	683a      	ldr	r2, [r7, #0]
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	0011      	movs	r1, r2
 8016d0e:	0018      	movs	r0, r3
 8016d10:	f000 fdf4 	bl	80178fc <USBD_GetStatus>
          break;
 8016d14:	e014      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016d16:	683a      	ldr	r2, [r7, #0]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	0011      	movs	r1, r2
 8016d1c:	0018      	movs	r0, r3
 8016d1e:	f000 fe28 	bl	8017972 <USBD_SetFeature>
          break;
 8016d22:	e00d      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016d24:	683a      	ldr	r2, [r7, #0]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	0011      	movs	r1, r2
 8016d2a:	0018      	movs	r0, r3
 8016d2c:	f000 fe50 	bl	80179d0 <USBD_ClrFeature>
          break;
 8016d30:	e006      	b.n	8016d40 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 8016d32:	683a      	ldr	r2, [r7, #0]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	0011      	movs	r1, r2
 8016d38:	0018      	movs	r0, r3
 8016d3a:	f000 fead 	bl	8017a98 <USBD_CtlError>
          break;
 8016d3e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8016d40:	e006      	b.n	8016d50 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 8016d42:	683a      	ldr	r2, [r7, #0]
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	0011      	movs	r1, r2
 8016d48:	0018      	movs	r0, r3
 8016d4a:	f000 fea5 	bl	8017a98 <USBD_CtlError>
      break;
 8016d4e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016d50:	230f      	movs	r3, #15
 8016d52:	18fb      	adds	r3, r7, r3
 8016d54:	781b      	ldrb	r3, [r3, #0]
}
 8016d56:	0018      	movs	r0, r3
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	b005      	add	sp, #20
 8016d5c:	bd90      	pop	{r4, r7, pc}
 8016d5e:	46c0      	nop			; (mov r8, r8)
 8016d60:	08025004 	.word	0x08025004

08016d64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016d64:	b5b0      	push	{r4, r5, r7, lr}
 8016d66:	b084      	sub	sp, #16
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	6078      	str	r0, [r7, #4]
 8016d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016d6e:	230f      	movs	r3, #15
 8016d70:	18fb      	adds	r3, r7, r3
 8016d72:	2200      	movs	r2, #0
 8016d74:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	001a      	movs	r2, r3
 8016d7c:	2360      	movs	r3, #96	; 0x60
 8016d7e:	4013      	ands	r3, r2
 8016d80:	2b40      	cmp	r3, #64	; 0x40
 8016d82:	d005      	beq.n	8016d90 <USBD_StdItfReq+0x2c>
 8016d84:	d900      	bls.n	8016d88 <USBD_StdItfReq+0x24>
 8016d86:	e06c      	b.n	8016e62 <USBD_StdItfReq+0xfe>
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <USBD_StdItfReq+0x2c>
 8016d8c:	2b20      	cmp	r3, #32
 8016d8e:	d168      	bne.n	8016e62 <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016d90:	687a      	ldr	r2, [r7, #4]
 8016d92:	23a7      	movs	r3, #167	; 0xa7
 8016d94:	009b      	lsls	r3, r3, #2
 8016d96:	5cd3      	ldrb	r3, [r2, r3]
 8016d98:	b2db      	uxtb	r3, r3
 8016d9a:	3b01      	subs	r3, #1
 8016d9c:	2b02      	cmp	r3, #2
 8016d9e:	d857      	bhi.n	8016e50 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016da0:	683b      	ldr	r3, [r7, #0]
 8016da2:	889b      	ldrh	r3, [r3, #4]
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	2b01      	cmp	r3, #1
 8016da8:	d84b      	bhi.n	8016e42 <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	889b      	ldrh	r3, [r3, #4]
 8016dae:	b2da      	uxtb	r2, r3
 8016db0:	250e      	movs	r5, #14
 8016db2:	197c      	adds	r4, r7, r5
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	0011      	movs	r1, r2
 8016db8:	0018      	movs	r0, r3
 8016dba:	f7ff feb4 	bl	8016b26 <USBD_CoreFindIF>
 8016dbe:	0003      	movs	r3, r0
 8016dc0:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016dc2:	0029      	movs	r1, r5
 8016dc4:	187b      	adds	r3, r7, r1
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	2bff      	cmp	r3, #255	; 0xff
 8016dca:	d028      	beq.n	8016e1e <USBD_StdItfReq+0xba>
 8016dcc:	187b      	adds	r3, r7, r1
 8016dce:	781b      	ldrb	r3, [r3, #0]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d124      	bne.n	8016e1e <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016dd4:	187b      	adds	r3, r7, r1
 8016dd6:	781a      	ldrb	r2, [r3, #0]
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	32ae      	adds	r2, #174	; 0xae
 8016ddc:	0092      	lsls	r2, r2, #2
 8016dde:	58d3      	ldr	r3, [r2, r3]
 8016de0:	689b      	ldr	r3, [r3, #8]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d016      	beq.n	8016e14 <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 8016de6:	0008      	movs	r0, r1
 8016de8:	187b      	adds	r3, r7, r1
 8016dea:	7819      	ldrb	r1, [r3, #0]
 8016dec:	687a      	ldr	r2, [r7, #4]
 8016dee:	23b5      	movs	r3, #181	; 0xb5
 8016df0:	009b      	lsls	r3, r3, #2
 8016df2:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016df4:	183b      	adds	r3, r7, r0
 8016df6:	781a      	ldrb	r2, [r3, #0]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	32ae      	adds	r2, #174	; 0xae
 8016dfc:	0092      	lsls	r2, r2, #2
 8016dfe:	58d3      	ldr	r3, [r2, r3]
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	220f      	movs	r2, #15
 8016e04:	18bc      	adds	r4, r7, r2
 8016e06:	6839      	ldr	r1, [r7, #0]
 8016e08:	687a      	ldr	r2, [r7, #4]
 8016e0a:	0010      	movs	r0, r2
 8016e0c:	4798      	blx	r3
 8016e0e:	0003      	movs	r3, r0
 8016e10:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e12:	e008      	b.n	8016e26 <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016e14:	230f      	movs	r3, #15
 8016e16:	18fb      	adds	r3, r7, r3
 8016e18:	2203      	movs	r2, #3
 8016e1a:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 8016e1c:	e003      	b.n	8016e26 <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016e1e:	230f      	movs	r3, #15
 8016e20:	18fb      	adds	r3, r7, r3
 8016e22:	2203      	movs	r2, #3
 8016e24:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	88db      	ldrh	r3, [r3, #6]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d117      	bne.n	8016e5e <USBD_StdItfReq+0xfa>
 8016e2e:	230f      	movs	r3, #15
 8016e30:	18fb      	adds	r3, r7, r3
 8016e32:	781b      	ldrb	r3, [r3, #0]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d112      	bne.n	8016e5e <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	0018      	movs	r0, r3
 8016e3c:	f000 ff12 	bl	8017c64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016e40:	e00d      	b.n	8016e5e <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 8016e42:	683a      	ldr	r2, [r7, #0]
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	0011      	movs	r1, r2
 8016e48:	0018      	movs	r0, r3
 8016e4a:	f000 fe25 	bl	8017a98 <USBD_CtlError>
          break;
 8016e4e:	e006      	b.n	8016e5e <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 8016e50:	683a      	ldr	r2, [r7, #0]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	0011      	movs	r1, r2
 8016e56:	0018      	movs	r0, r3
 8016e58:	f000 fe1e 	bl	8017a98 <USBD_CtlError>
          break;
 8016e5c:	e000      	b.n	8016e60 <USBD_StdItfReq+0xfc>
          break;
 8016e5e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8016e60:	e006      	b.n	8016e70 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 8016e62:	683a      	ldr	r2, [r7, #0]
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	0011      	movs	r1, r2
 8016e68:	0018      	movs	r0, r3
 8016e6a:	f000 fe15 	bl	8017a98 <USBD_CtlError>
      break;
 8016e6e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8016e70:	230f      	movs	r3, #15
 8016e72:	18fb      	adds	r3, r7, r3
 8016e74:	781b      	ldrb	r3, [r3, #0]
}
 8016e76:	0018      	movs	r0, r3
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	b004      	add	sp, #16
 8016e7c:	bdb0      	pop	{r4, r5, r7, pc}

08016e7e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e7e:	b5b0      	push	{r4, r5, r7, lr}
 8016e80:	b084      	sub	sp, #16
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
 8016e86:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016e88:	230f      	movs	r3, #15
 8016e8a:	18fb      	adds	r3, r7, r3
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	889a      	ldrh	r2, [r3, #4]
 8016e94:	230e      	movs	r3, #14
 8016e96:	18fb      	adds	r3, r7, r3
 8016e98:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	001a      	movs	r2, r3
 8016ea0:	2360      	movs	r3, #96	; 0x60
 8016ea2:	4013      	ands	r3, r2
 8016ea4:	2b40      	cmp	r3, #64	; 0x40
 8016ea6:	d006      	beq.n	8016eb6 <USBD_StdEPReq+0x38>
 8016ea8:	d900      	bls.n	8016eac <USBD_StdEPReq+0x2e>
 8016eaa:	e1de      	b.n	801726a <USBD_StdEPReq+0x3ec>
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d039      	beq.n	8016f24 <USBD_StdEPReq+0xa6>
 8016eb0:	2b20      	cmp	r3, #32
 8016eb2:	d000      	beq.n	8016eb6 <USBD_StdEPReq+0x38>
 8016eb4:	e1d9      	b.n	801726a <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016eb6:	250d      	movs	r5, #13
 8016eb8:	197c      	adds	r4, r7, r5
 8016eba:	230e      	movs	r3, #14
 8016ebc:	18fb      	adds	r3, r7, r3
 8016ebe:	781a      	ldrb	r2, [r3, #0]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	0011      	movs	r1, r2
 8016ec4:	0018      	movs	r0, r3
 8016ec6:	f7ff fe3a 	bl	8016b3e <USBD_CoreFindEP>
 8016eca:	0003      	movs	r3, r0
 8016ecc:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016ece:	197b      	adds	r3, r7, r5
 8016ed0:	781b      	ldrb	r3, [r3, #0]
 8016ed2:	2bff      	cmp	r3, #255	; 0xff
 8016ed4:	d100      	bne.n	8016ed8 <USBD_StdEPReq+0x5a>
 8016ed6:	e1cf      	b.n	8017278 <USBD_StdEPReq+0x3fa>
 8016ed8:	197b      	adds	r3, r7, r5
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d000      	beq.n	8016ee2 <USBD_StdEPReq+0x64>
 8016ee0:	e1ca      	b.n	8017278 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 8016ee2:	197b      	adds	r3, r7, r5
 8016ee4:	7819      	ldrb	r1, [r3, #0]
 8016ee6:	687a      	ldr	r2, [r7, #4]
 8016ee8:	23b5      	movs	r3, #181	; 0xb5
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016eee:	0029      	movs	r1, r5
 8016ef0:	187b      	adds	r3, r7, r1
 8016ef2:	781a      	ldrb	r2, [r3, #0]
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	32ae      	adds	r2, #174	; 0xae
 8016ef8:	0092      	lsls	r2, r2, #2
 8016efa:	58d3      	ldr	r3, [r2, r3]
 8016efc:	689b      	ldr	r3, [r3, #8]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d100      	bne.n	8016f04 <USBD_StdEPReq+0x86>
 8016f02:	e1b9      	b.n	8017278 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016f04:	187b      	adds	r3, r7, r1
 8016f06:	781a      	ldrb	r2, [r3, #0]
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	32ae      	adds	r2, #174	; 0xae
 8016f0c:	0092      	lsls	r2, r2, #2
 8016f0e:	58d3      	ldr	r3, [r2, r3]
 8016f10:	689b      	ldr	r3, [r3, #8]
 8016f12:	220f      	movs	r2, #15
 8016f14:	18bc      	adds	r4, r7, r2
 8016f16:	6839      	ldr	r1, [r7, #0]
 8016f18:	687a      	ldr	r2, [r7, #4]
 8016f1a:	0010      	movs	r0, r2
 8016f1c:	4798      	blx	r3
 8016f1e:	0003      	movs	r3, r0
 8016f20:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 8016f22:	e1a9      	b.n	8017278 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	785b      	ldrb	r3, [r3, #1]
 8016f28:	2b03      	cmp	r3, #3
 8016f2a:	d007      	beq.n	8016f3c <USBD_StdEPReq+0xbe>
 8016f2c:	dd00      	ble.n	8016f30 <USBD_StdEPReq+0xb2>
 8016f2e:	e194      	b.n	801725a <USBD_StdEPReq+0x3dc>
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d100      	bne.n	8016f36 <USBD_StdEPReq+0xb8>
 8016f34:	e0c9      	b.n	80170ca <USBD_StdEPReq+0x24c>
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d04d      	beq.n	8016fd6 <USBD_StdEPReq+0x158>
 8016f3a:	e18e      	b.n	801725a <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016f3c:	687a      	ldr	r2, [r7, #4]
 8016f3e:	23a7      	movs	r3, #167	; 0xa7
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	5cd3      	ldrb	r3, [r2, r3]
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	2b02      	cmp	r3, #2
 8016f48:	d002      	beq.n	8016f50 <USBD_StdEPReq+0xd2>
 8016f4a:	2b03      	cmp	r3, #3
 8016f4c:	d01e      	beq.n	8016f8c <USBD_StdEPReq+0x10e>
 8016f4e:	e03a      	b.n	8016fc6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016f50:	220e      	movs	r2, #14
 8016f52:	18bb      	adds	r3, r7, r2
 8016f54:	781b      	ldrb	r3, [r3, #0]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d011      	beq.n	8016f7e <USBD_StdEPReq+0x100>
 8016f5a:	18bb      	adds	r3, r7, r2
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	2b80      	cmp	r3, #128	; 0x80
 8016f60:	d00d      	beq.n	8016f7e <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016f62:	18bb      	adds	r3, r7, r2
 8016f64:	781a      	ldrb	r2, [r3, #0]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	0011      	movs	r1, r2
 8016f6a:	0018      	movs	r0, r3
 8016f6c:	f006 ffb7 	bl	801dede <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2180      	movs	r1, #128	; 0x80
 8016f74:	0018      	movs	r0, r3
 8016f76:	f006 ffb2 	bl	801dede <USBD_LL_StallEP>
 8016f7a:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016f7c:	e02a      	b.n	8016fd4 <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 8016f7e:	683a      	ldr	r2, [r7, #0]
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	0011      	movs	r1, r2
 8016f84:	0018      	movs	r0, r3
 8016f86:	f000 fd87 	bl	8017a98 <USBD_CtlError>
              break;
 8016f8a:	e023      	b.n	8016fd4 <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	885b      	ldrh	r3, [r3, #2]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d113      	bne.n	8016fbc <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016f94:	220e      	movs	r2, #14
 8016f96:	18bb      	adds	r3, r7, r2
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d00e      	beq.n	8016fbc <USBD_StdEPReq+0x13e>
 8016f9e:	18bb      	adds	r3, r7, r2
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	2b80      	cmp	r3, #128	; 0x80
 8016fa4:	d00a      	beq.n	8016fbc <USBD_StdEPReq+0x13e>
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	88db      	ldrh	r3, [r3, #6]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d106      	bne.n	8016fbc <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016fae:	18bb      	adds	r3, r7, r2
 8016fb0:	781a      	ldrb	r2, [r3, #0]
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	0011      	movs	r1, r2
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	f006 ff91 	bl	801dede <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	f000 fe50 	bl	8017c64 <USBD_CtlSendStatus>

              break;
 8016fc4:	e006      	b.n	8016fd4 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8016fc6:	683a      	ldr	r2, [r7, #0]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	0011      	movs	r1, r2
 8016fcc:	0018      	movs	r0, r3
 8016fce:	f000 fd63 	bl	8017a98 <USBD_CtlError>
              break;
 8016fd2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8016fd4:	e148      	b.n	8017268 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	23a7      	movs	r3, #167	; 0xa7
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	5cd3      	ldrb	r3, [r2, r3]
 8016fde:	b2db      	uxtb	r3, r3
 8016fe0:	2b02      	cmp	r3, #2
 8016fe2:	d002      	beq.n	8016fea <USBD_StdEPReq+0x16c>
 8016fe4:	2b03      	cmp	r3, #3
 8016fe6:	d01e      	beq.n	8017026 <USBD_StdEPReq+0x1a8>
 8016fe8:	e066      	b.n	80170b8 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016fea:	220e      	movs	r2, #14
 8016fec:	18bb      	adds	r3, r7, r2
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d011      	beq.n	8017018 <USBD_StdEPReq+0x19a>
 8016ff4:	18bb      	adds	r3, r7, r2
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	2b80      	cmp	r3, #128	; 0x80
 8016ffa:	d00d      	beq.n	8017018 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016ffc:	18bb      	adds	r3, r7, r2
 8016ffe:	781a      	ldrb	r2, [r3, #0]
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	0011      	movs	r1, r2
 8017004:	0018      	movs	r0, r3
 8017006:	f006 ff6a 	bl	801dede <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	2180      	movs	r1, #128	; 0x80
 801700e:	0018      	movs	r0, r3
 8017010:	f006 ff65 	bl	801dede <USBD_LL_StallEP>
 8017014:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017016:	e057      	b.n	80170c8 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	0011      	movs	r1, r2
 801701e:	0018      	movs	r0, r3
 8017020:	f000 fd3a 	bl	8017a98 <USBD_CtlError>
              break;
 8017024:	e050      	b.n	80170c8 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	885b      	ldrh	r3, [r3, #2]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d14b      	bne.n	80170c6 <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801702e:	210e      	movs	r1, #14
 8017030:	187b      	adds	r3, r7, r1
 8017032:	781b      	ldrb	r3, [r3, #0]
 8017034:	227f      	movs	r2, #127	; 0x7f
 8017036:	4013      	ands	r3, r2
 8017038:	d006      	beq.n	8017048 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801703a:	187b      	adds	r3, r7, r1
 801703c:	781a      	ldrb	r2, [r3, #0]
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	0011      	movs	r1, r2
 8017042:	0018      	movs	r0, r3
 8017044:	f006 ff76 	bl	801df34 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	0018      	movs	r0, r3
 801704c:	f000 fe0a 	bl	8017c64 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017050:	250d      	movs	r5, #13
 8017052:	197c      	adds	r4, r7, r5
 8017054:	230e      	movs	r3, #14
 8017056:	18fb      	adds	r3, r7, r3
 8017058:	781a      	ldrb	r2, [r3, #0]
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	0011      	movs	r1, r2
 801705e:	0018      	movs	r0, r3
 8017060:	f7ff fd6d 	bl	8016b3e <USBD_CoreFindEP>
 8017064:	0003      	movs	r3, r0
 8017066:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017068:	197b      	adds	r3, r7, r5
 801706a:	781b      	ldrb	r3, [r3, #0]
 801706c:	2bff      	cmp	r3, #255	; 0xff
 801706e:	d02a      	beq.n	80170c6 <USBD_StdEPReq+0x248>
 8017070:	197b      	adds	r3, r7, r5
 8017072:	781b      	ldrb	r3, [r3, #0]
 8017074:	2b00      	cmp	r3, #0
 8017076:	d126      	bne.n	80170c6 <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 8017078:	197b      	adds	r3, r7, r5
 801707a:	7819      	ldrb	r1, [r3, #0]
 801707c:	687a      	ldr	r2, [r7, #4]
 801707e:	23b5      	movs	r3, #181	; 0xb5
 8017080:	009b      	lsls	r3, r3, #2
 8017082:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017084:	0029      	movs	r1, r5
 8017086:	187b      	adds	r3, r7, r1
 8017088:	781a      	ldrb	r2, [r3, #0]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	32ae      	adds	r2, #174	; 0xae
 801708e:	0092      	lsls	r2, r2, #2
 8017090:	58d3      	ldr	r3, [r2, r3]
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d016      	beq.n	80170c6 <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017098:	187b      	adds	r3, r7, r1
 801709a:	781a      	ldrb	r2, [r3, #0]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	32ae      	adds	r2, #174	; 0xae
 80170a0:	0092      	lsls	r2, r2, #2
 80170a2:	58d3      	ldr	r3, [r2, r3]
 80170a4:	689b      	ldr	r3, [r3, #8]
 80170a6:	220f      	movs	r2, #15
 80170a8:	18bc      	adds	r4, r7, r2
 80170aa:	6839      	ldr	r1, [r7, #0]
 80170ac:	687a      	ldr	r2, [r7, #4]
 80170ae:	0010      	movs	r0, r2
 80170b0:	4798      	blx	r3
 80170b2:	0003      	movs	r3, r0
 80170b4:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 80170b6:	e006      	b.n	80170c6 <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 80170b8:	683a      	ldr	r2, [r7, #0]
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	0011      	movs	r1, r2
 80170be:	0018      	movs	r0, r3
 80170c0:	f000 fcea 	bl	8017a98 <USBD_CtlError>
              break;
 80170c4:	e000      	b.n	80170c8 <USBD_StdEPReq+0x24a>
              break;
 80170c6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80170c8:	e0ce      	b.n	8017268 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	23a7      	movs	r3, #167	; 0xa7
 80170ce:	009b      	lsls	r3, r3, #2
 80170d0:	5cd3      	ldrb	r3, [r2, r3]
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b02      	cmp	r3, #2
 80170d6:	d002      	beq.n	80170de <USBD_StdEPReq+0x260>
 80170d8:	2b03      	cmp	r3, #3
 80170da:	d03c      	beq.n	8017156 <USBD_StdEPReq+0x2d8>
 80170dc:	e0b5      	b.n	801724a <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80170de:	220e      	movs	r2, #14
 80170e0:	18bb      	adds	r3, r7, r2
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d00a      	beq.n	80170fe <USBD_StdEPReq+0x280>
 80170e8:	18bb      	adds	r3, r7, r2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	2b80      	cmp	r3, #128	; 0x80
 80170ee:	d006      	beq.n	80170fe <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 80170f0:	683a      	ldr	r2, [r7, #0]
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	0011      	movs	r1, r2
 80170f6:	0018      	movs	r0, r3
 80170f8:	f000 fcce 	bl	8017a98 <USBD_CtlError>
                break;
 80170fc:	e0ac      	b.n	8017258 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80170fe:	220e      	movs	r2, #14
 8017100:	18bb      	adds	r3, r7, r2
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	b25b      	sxtb	r3, r3
 8017106:	2b00      	cmp	r3, #0
 8017108:	da0c      	bge.n	8017124 <USBD_StdEPReq+0x2a6>
 801710a:	18bb      	adds	r3, r7, r2
 801710c:	781b      	ldrb	r3, [r3, #0]
 801710e:	227f      	movs	r2, #127	; 0x7f
 8017110:	401a      	ands	r2, r3
 8017112:	0013      	movs	r3, r2
 8017114:	009b      	lsls	r3, r3, #2
 8017116:	189b      	adds	r3, r3, r2
 8017118:	009b      	lsls	r3, r3, #2
 801711a:	3310      	adds	r3, #16
 801711c:	687a      	ldr	r2, [r7, #4]
 801711e:	18d3      	adds	r3, r2, r3
 8017120:	3304      	adds	r3, #4
 8017122:	e00d      	b.n	8017140 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017124:	230e      	movs	r3, #14
 8017126:	18fb      	adds	r3, r7, r3
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	227f      	movs	r2, #127	; 0x7f
 801712c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801712e:	0013      	movs	r3, r2
 8017130:	009b      	lsls	r3, r3, #2
 8017132:	189b      	adds	r3, r3, r2
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	3351      	adds	r3, #81	; 0x51
 8017138:	33ff      	adds	r3, #255	; 0xff
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	18d3      	adds	r3, r2, r3
 801713e:	3304      	adds	r3, #4
 8017140:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	2200      	movs	r2, #0
 8017146:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017148:	68b9      	ldr	r1, [r7, #8]
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2202      	movs	r2, #2
 801714e:	0018      	movs	r0, r3
 8017150:	f000 fd2a 	bl	8017ba8 <USBD_CtlSendData>
              break;
 8017154:	e080      	b.n	8017258 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017156:	220e      	movs	r2, #14
 8017158:	18bb      	adds	r3, r7, r2
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	b25b      	sxtb	r3, r3
 801715e:	2b00      	cmp	r3, #0
 8017160:	da14      	bge.n	801718c <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017162:	18bb      	adds	r3, r7, r2
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	220f      	movs	r2, #15
 8017168:	401a      	ands	r2, r3
 801716a:	6879      	ldr	r1, [r7, #4]
 801716c:	0013      	movs	r3, r2
 801716e:	009b      	lsls	r3, r3, #2
 8017170:	189b      	adds	r3, r3, r2
 8017172:	009b      	lsls	r3, r3, #2
 8017174:	18cb      	adds	r3, r1, r3
 8017176:	3324      	adds	r3, #36	; 0x24
 8017178:	881b      	ldrh	r3, [r3, #0]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d11e      	bne.n	80171bc <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801717e:	683a      	ldr	r2, [r7, #0]
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	0011      	movs	r1, r2
 8017184:	0018      	movs	r0, r3
 8017186:	f000 fc87 	bl	8017a98 <USBD_CtlError>
                  break;
 801718a:	e065      	b.n	8017258 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801718c:	230e      	movs	r3, #14
 801718e:	18fb      	adds	r3, r7, r3
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	220f      	movs	r2, #15
 8017194:	401a      	ands	r2, r3
 8017196:	6878      	ldr	r0, [r7, #4]
 8017198:	23b2      	movs	r3, #178	; 0xb2
 801719a:	0059      	lsls	r1, r3, #1
 801719c:	0013      	movs	r3, r2
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	189b      	adds	r3, r3, r2
 80171a2:	009b      	lsls	r3, r3, #2
 80171a4:	18c3      	adds	r3, r0, r3
 80171a6:	185b      	adds	r3, r3, r1
 80171a8:	881b      	ldrh	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d106      	bne.n	80171bc <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 80171ae:	683a      	ldr	r2, [r7, #0]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	0011      	movs	r1, r2
 80171b4:	0018      	movs	r0, r3
 80171b6:	f000 fc6f 	bl	8017a98 <USBD_CtlError>
                  break;
 80171ba:	e04d      	b.n	8017258 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80171bc:	220e      	movs	r2, #14
 80171be:	18bb      	adds	r3, r7, r2
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	b25b      	sxtb	r3, r3
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	da0c      	bge.n	80171e2 <USBD_StdEPReq+0x364>
 80171c8:	18bb      	adds	r3, r7, r2
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	227f      	movs	r2, #127	; 0x7f
 80171ce:	401a      	ands	r2, r3
 80171d0:	0013      	movs	r3, r2
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	189b      	adds	r3, r3, r2
 80171d6:	009b      	lsls	r3, r3, #2
 80171d8:	3310      	adds	r3, #16
 80171da:	687a      	ldr	r2, [r7, #4]
 80171dc:	18d3      	adds	r3, r2, r3
 80171de:	3304      	adds	r3, #4
 80171e0:	e00d      	b.n	80171fe <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80171e2:	230e      	movs	r3, #14
 80171e4:	18fb      	adds	r3, r7, r3
 80171e6:	781b      	ldrb	r3, [r3, #0]
 80171e8:	227f      	movs	r2, #127	; 0x7f
 80171ea:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80171ec:	0013      	movs	r3, r2
 80171ee:	009b      	lsls	r3, r3, #2
 80171f0:	189b      	adds	r3, r3, r2
 80171f2:	009b      	lsls	r3, r3, #2
 80171f4:	3351      	adds	r3, #81	; 0x51
 80171f6:	33ff      	adds	r3, #255	; 0xff
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	18d3      	adds	r3, r2, r3
 80171fc:	3304      	adds	r3, #4
 80171fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017200:	220e      	movs	r2, #14
 8017202:	18bb      	adds	r3, r7, r2
 8017204:	781b      	ldrb	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d003      	beq.n	8017212 <USBD_StdEPReq+0x394>
 801720a:	18bb      	adds	r3, r7, r2
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	2b80      	cmp	r3, #128	; 0x80
 8017210:	d103      	bne.n	801721a <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 8017212:	68bb      	ldr	r3, [r7, #8]
 8017214:	2200      	movs	r2, #0
 8017216:	601a      	str	r2, [r3, #0]
 8017218:	e010      	b.n	801723c <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801721a:	230e      	movs	r3, #14
 801721c:	18fb      	adds	r3, r7, r3
 801721e:	781a      	ldrb	r2, [r3, #0]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	0011      	movs	r1, r2
 8017224:	0018      	movs	r0, r3
 8017226:	f006 feb0 	bl	801df8a <USBD_LL_IsStallEP>
 801722a:	1e03      	subs	r3, r0, #0
 801722c:	d003      	beq.n	8017236 <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 801722e:	68bb      	ldr	r3, [r7, #8]
 8017230:	2201      	movs	r2, #1
 8017232:	601a      	str	r2, [r3, #0]
 8017234:	e002      	b.n	801723c <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 8017236:	68bb      	ldr	r3, [r7, #8]
 8017238:	2200      	movs	r2, #0
 801723a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801723c:	68b9      	ldr	r1, [r7, #8]
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2202      	movs	r2, #2
 8017242:	0018      	movs	r0, r3
 8017244:	f000 fcb0 	bl	8017ba8 <USBD_CtlSendData>
              break;
 8017248:	e006      	b.n	8017258 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 801724a:	683a      	ldr	r2, [r7, #0]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	0011      	movs	r1, r2
 8017250:	0018      	movs	r0, r3
 8017252:	f000 fc21 	bl	8017a98 <USBD_CtlError>
              break;
 8017256:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8017258:	e006      	b.n	8017268 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 801725a:	683a      	ldr	r2, [r7, #0]
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	0011      	movs	r1, r2
 8017260:	0018      	movs	r0, r3
 8017262:	f000 fc19 	bl	8017a98 <USBD_CtlError>
          break;
 8017266:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8017268:	e007      	b.n	801727a <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 801726a:	683a      	ldr	r2, [r7, #0]
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	0011      	movs	r1, r2
 8017270:	0018      	movs	r0, r3
 8017272:	f000 fc11 	bl	8017a98 <USBD_CtlError>
      break;
 8017276:	e000      	b.n	801727a <USBD_StdEPReq+0x3fc>
      break;
 8017278:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801727a:	230f      	movs	r3, #15
 801727c:	18fb      	adds	r3, r7, r3
 801727e:	781b      	ldrb	r3, [r3, #0]
}
 8017280:	0018      	movs	r0, r3
 8017282:	46bd      	mov	sp, r7
 8017284:	b004      	add	sp, #16
 8017286:	bdb0      	pop	{r4, r5, r7, pc}

08017288 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017292:	2308      	movs	r3, #8
 8017294:	18fb      	adds	r3, r7, r3
 8017296:	2200      	movs	r2, #0
 8017298:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801729a:	2300      	movs	r3, #0
 801729c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801729e:	230b      	movs	r3, #11
 80172a0:	18fb      	adds	r3, r7, r3
 80172a2:	2200      	movs	r2, #0
 80172a4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	885b      	ldrh	r3, [r3, #2]
 80172aa:	0a1b      	lsrs	r3, r3, #8
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	2b0f      	cmp	r3, #15
 80172b0:	d900      	bls.n	80172b4 <USBD_GetDescriptor+0x2c>
 80172b2:	e17b      	b.n	80175ac <USBD_GetDescriptor+0x324>
 80172b4:	009a      	lsls	r2, r3, #2
 80172b6:	4bdd      	ldr	r3, [pc, #884]	; (801762c <USBD_GetDescriptor+0x3a4>)
 80172b8:	18d3      	adds	r3, r2, r3
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	23ad      	movs	r3, #173	; 0xad
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	58d3      	ldr	r3, [r2, r3]
 80172c6:	69db      	ldr	r3, [r3, #28]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d00d      	beq.n	80172e8 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	23ad      	movs	r3, #173	; 0xad
 80172d0:	009b      	lsls	r3, r3, #2
 80172d2:	58d3      	ldr	r3, [r2, r3]
 80172d4:	69db      	ldr	r3, [r3, #28]
 80172d6:	687a      	ldr	r2, [r7, #4]
 80172d8:	7c12      	ldrb	r2, [r2, #16]
 80172da:	2108      	movs	r1, #8
 80172dc:	1879      	adds	r1, r7, r1
 80172de:	0010      	movs	r0, r2
 80172e0:	4798      	blx	r3
 80172e2:	0003      	movs	r3, r0
 80172e4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80172e6:	e16e      	b.n	80175c6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 80172e8:	683a      	ldr	r2, [r7, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	0011      	movs	r1, r2
 80172ee:	0018      	movs	r0, r3
 80172f0:	f000 fbd2 	bl	8017a98 <USBD_CtlError>
        err++;
 80172f4:	210b      	movs	r1, #11
 80172f6:	187b      	adds	r3, r7, r1
 80172f8:	781a      	ldrb	r2, [r3, #0]
 80172fa:	187b      	adds	r3, r7, r1
 80172fc:	3201      	adds	r2, #1
 80172fe:	701a      	strb	r2, [r3, #0]
      break;
 8017300:	e161      	b.n	80175c6 <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017302:	687a      	ldr	r2, [r7, #4]
 8017304:	23ad      	movs	r3, #173	; 0xad
 8017306:	009b      	lsls	r3, r3, #2
 8017308:	58d3      	ldr	r3, [r2, r3]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	687a      	ldr	r2, [r7, #4]
 801730e:	7c12      	ldrb	r2, [r2, #16]
 8017310:	2108      	movs	r1, #8
 8017312:	1879      	adds	r1, r7, r1
 8017314:	0010      	movs	r0, r2
 8017316:	4798      	blx	r3
 8017318:	0003      	movs	r3, r0
 801731a:	60fb      	str	r3, [r7, #12]
      break;
 801731c:	e153      	b.n	80175c6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	7c1b      	ldrb	r3, [r3, #16]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d10f      	bne.n	8017346 <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017326:	687a      	ldr	r2, [r7, #4]
 8017328:	23ae      	movs	r3, #174	; 0xae
 801732a:	009b      	lsls	r3, r3, #2
 801732c:	58d3      	ldr	r3, [r2, r3]
 801732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017330:	2208      	movs	r2, #8
 8017332:	18ba      	adds	r2, r7, r2
 8017334:	0010      	movs	r0, r2
 8017336:	4798      	blx	r3
 8017338:	0003      	movs	r3, r0
 801733a:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	3301      	adds	r3, #1
 8017340:	2202      	movs	r2, #2
 8017342:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017344:	e13f      	b.n	80175c6 <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017346:	687a      	ldr	r2, [r7, #4]
 8017348:	23ae      	movs	r3, #174	; 0xae
 801734a:	009b      	lsls	r3, r3, #2
 801734c:	58d3      	ldr	r3, [r2, r3]
 801734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017350:	2208      	movs	r2, #8
 8017352:	18ba      	adds	r2, r7, r2
 8017354:	0010      	movs	r0, r2
 8017356:	4798      	blx	r3
 8017358:	0003      	movs	r3, r0
 801735a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	3301      	adds	r3, #1
 8017360:	2202      	movs	r2, #2
 8017362:	701a      	strb	r2, [r3, #0]
      break;
 8017364:	e12f      	b.n	80175c6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	885b      	ldrh	r3, [r3, #2]
 801736a:	b2db      	uxtb	r3, r3
 801736c:	2b05      	cmp	r3, #5
 801736e:	d900      	bls.n	8017372 <USBD_GetDescriptor+0xea>
 8017370:	e0d0      	b.n	8017514 <USBD_GetDescriptor+0x28c>
 8017372:	009a      	lsls	r2, r3, #2
 8017374:	4bae      	ldr	r3, [pc, #696]	; (8017630 <USBD_GetDescriptor+0x3a8>)
 8017376:	18d3      	adds	r3, r2, r3
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801737c:	687a      	ldr	r2, [r7, #4]
 801737e:	23ad      	movs	r3, #173	; 0xad
 8017380:	009b      	lsls	r3, r3, #2
 8017382:	58d3      	ldr	r3, [r2, r3]
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d00d      	beq.n	80173a6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801738a:	687a      	ldr	r2, [r7, #4]
 801738c:	23ad      	movs	r3, #173	; 0xad
 801738e:	009b      	lsls	r3, r3, #2
 8017390:	58d3      	ldr	r3, [r2, r3]
 8017392:	685b      	ldr	r3, [r3, #4]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	7c12      	ldrb	r2, [r2, #16]
 8017398:	2108      	movs	r1, #8
 801739a:	1879      	adds	r1, r7, r1
 801739c:	0010      	movs	r0, r2
 801739e:	4798      	blx	r3
 80173a0:	0003      	movs	r3, r0
 80173a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173a4:	e0c3      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80173a6:	683a      	ldr	r2, [r7, #0]
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	0011      	movs	r1, r2
 80173ac:	0018      	movs	r0, r3
 80173ae:	f000 fb73 	bl	8017a98 <USBD_CtlError>
            err++;
 80173b2:	210b      	movs	r1, #11
 80173b4:	187b      	adds	r3, r7, r1
 80173b6:	781a      	ldrb	r2, [r3, #0]
 80173b8:	187b      	adds	r3, r7, r1
 80173ba:	3201      	adds	r2, #1
 80173bc:	701a      	strb	r2, [r3, #0]
          break;
 80173be:	e0b6      	b.n	801752e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	23ad      	movs	r3, #173	; 0xad
 80173c4:	009b      	lsls	r3, r3, #2
 80173c6:	58d3      	ldr	r3, [r2, r3]
 80173c8:	689b      	ldr	r3, [r3, #8]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d00d      	beq.n	80173ea <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	23ad      	movs	r3, #173	; 0xad
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	58d3      	ldr	r3, [r2, r3]
 80173d6:	689b      	ldr	r3, [r3, #8]
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	7c12      	ldrb	r2, [r2, #16]
 80173dc:	2108      	movs	r1, #8
 80173de:	1879      	adds	r1, r7, r1
 80173e0:	0010      	movs	r0, r2
 80173e2:	4798      	blx	r3
 80173e4:	0003      	movs	r3, r0
 80173e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173e8:	e0a1      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80173ea:	683a      	ldr	r2, [r7, #0]
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	0011      	movs	r1, r2
 80173f0:	0018      	movs	r0, r3
 80173f2:	f000 fb51 	bl	8017a98 <USBD_CtlError>
            err++;
 80173f6:	210b      	movs	r1, #11
 80173f8:	187b      	adds	r3, r7, r1
 80173fa:	781a      	ldrb	r2, [r3, #0]
 80173fc:	187b      	adds	r3, r7, r1
 80173fe:	3201      	adds	r2, #1
 8017400:	701a      	strb	r2, [r3, #0]
          break;
 8017402:	e094      	b.n	801752e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	23ad      	movs	r3, #173	; 0xad
 8017408:	009b      	lsls	r3, r3, #2
 801740a:	58d3      	ldr	r3, [r2, r3]
 801740c:	68db      	ldr	r3, [r3, #12]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d00d      	beq.n	801742e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	23ad      	movs	r3, #173	; 0xad
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	58d3      	ldr	r3, [r2, r3]
 801741a:	68db      	ldr	r3, [r3, #12]
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	7c12      	ldrb	r2, [r2, #16]
 8017420:	2108      	movs	r1, #8
 8017422:	1879      	adds	r1, r7, r1
 8017424:	0010      	movs	r0, r2
 8017426:	4798      	blx	r3
 8017428:	0003      	movs	r3, r0
 801742a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801742c:	e07f      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801742e:	683a      	ldr	r2, [r7, #0]
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	0011      	movs	r1, r2
 8017434:	0018      	movs	r0, r3
 8017436:	f000 fb2f 	bl	8017a98 <USBD_CtlError>
            err++;
 801743a:	210b      	movs	r1, #11
 801743c:	187b      	adds	r3, r7, r1
 801743e:	781a      	ldrb	r2, [r3, #0]
 8017440:	187b      	adds	r3, r7, r1
 8017442:	3201      	adds	r2, #1
 8017444:	701a      	strb	r2, [r3, #0]
          break;
 8017446:	e072      	b.n	801752e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017448:	687a      	ldr	r2, [r7, #4]
 801744a:	23ad      	movs	r3, #173	; 0xad
 801744c:	009b      	lsls	r3, r3, #2
 801744e:	58d3      	ldr	r3, [r2, r3]
 8017450:	691b      	ldr	r3, [r3, #16]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00d      	beq.n	8017472 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	23ad      	movs	r3, #173	; 0xad
 801745a:	009b      	lsls	r3, r3, #2
 801745c:	58d3      	ldr	r3, [r2, r3]
 801745e:	691b      	ldr	r3, [r3, #16]
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	7c12      	ldrb	r2, [r2, #16]
 8017464:	2108      	movs	r1, #8
 8017466:	1879      	adds	r1, r7, r1
 8017468:	0010      	movs	r0, r2
 801746a:	4798      	blx	r3
 801746c:	0003      	movs	r3, r0
 801746e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017470:	e05d      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 8017472:	683a      	ldr	r2, [r7, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	0011      	movs	r1, r2
 8017478:	0018      	movs	r0, r3
 801747a:	f000 fb0d 	bl	8017a98 <USBD_CtlError>
            err++;
 801747e:	210b      	movs	r1, #11
 8017480:	187b      	adds	r3, r7, r1
 8017482:	781a      	ldrb	r2, [r3, #0]
 8017484:	187b      	adds	r3, r7, r1
 8017486:	3201      	adds	r2, #1
 8017488:	701a      	strb	r2, [r3, #0]
          break;
 801748a:	e050      	b.n	801752e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801748c:	687a      	ldr	r2, [r7, #4]
 801748e:	23ad      	movs	r3, #173	; 0xad
 8017490:	009b      	lsls	r3, r3, #2
 8017492:	58d3      	ldr	r3, [r2, r3]
 8017494:	695b      	ldr	r3, [r3, #20]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d00d      	beq.n	80174b6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801749a:	687a      	ldr	r2, [r7, #4]
 801749c:	23ad      	movs	r3, #173	; 0xad
 801749e:	009b      	lsls	r3, r3, #2
 80174a0:	58d3      	ldr	r3, [r2, r3]
 80174a2:	695b      	ldr	r3, [r3, #20]
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	7c12      	ldrb	r2, [r2, #16]
 80174a8:	2108      	movs	r1, #8
 80174aa:	1879      	adds	r1, r7, r1
 80174ac:	0010      	movs	r0, r2
 80174ae:	4798      	blx	r3
 80174b0:	0003      	movs	r3, r0
 80174b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174b4:	e03b      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80174b6:	683a      	ldr	r2, [r7, #0]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	0011      	movs	r1, r2
 80174bc:	0018      	movs	r0, r3
 80174be:	f000 faeb 	bl	8017a98 <USBD_CtlError>
            err++;
 80174c2:	210b      	movs	r1, #11
 80174c4:	187b      	adds	r3, r7, r1
 80174c6:	781a      	ldrb	r2, [r3, #0]
 80174c8:	187b      	adds	r3, r7, r1
 80174ca:	3201      	adds	r2, #1
 80174cc:	701a      	strb	r2, [r3, #0]
          break;
 80174ce:	e02e      	b.n	801752e <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	23ad      	movs	r3, #173	; 0xad
 80174d4:	009b      	lsls	r3, r3, #2
 80174d6:	58d3      	ldr	r3, [r2, r3]
 80174d8:	699b      	ldr	r3, [r3, #24]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d00d      	beq.n	80174fa <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	23ad      	movs	r3, #173	; 0xad
 80174e2:	009b      	lsls	r3, r3, #2
 80174e4:	58d3      	ldr	r3, [r2, r3]
 80174e6:	699b      	ldr	r3, [r3, #24]
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	7c12      	ldrb	r2, [r2, #16]
 80174ec:	2108      	movs	r1, #8
 80174ee:	1879      	adds	r1, r7, r1
 80174f0:	0010      	movs	r0, r2
 80174f2:	4798      	blx	r3
 80174f4:	0003      	movs	r3, r0
 80174f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174f8:	e019      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 80174fa:	683a      	ldr	r2, [r7, #0]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	0011      	movs	r1, r2
 8017500:	0018      	movs	r0, r3
 8017502:	f000 fac9 	bl	8017a98 <USBD_CtlError>
            err++;
 8017506:	210b      	movs	r1, #11
 8017508:	187b      	adds	r3, r7, r1
 801750a:	781a      	ldrb	r2, [r3, #0]
 801750c:	187b      	adds	r3, r7, r1
 801750e:	3201      	adds	r2, #1
 8017510:	701a      	strb	r2, [r3, #0]
          break;
 8017512:	e00c      	b.n	801752e <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017514:	683a      	ldr	r2, [r7, #0]
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	0011      	movs	r1, r2
 801751a:	0018      	movs	r0, r3
 801751c:	f000 fabc 	bl	8017a98 <USBD_CtlError>
          err++;
 8017520:	210b      	movs	r1, #11
 8017522:	187b      	adds	r3, r7, r1
 8017524:	781a      	ldrb	r2, [r3, #0]
 8017526:	187b      	adds	r3, r7, r1
 8017528:	3201      	adds	r2, #1
 801752a:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801752c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801752e:	e04a      	b.n	80175c6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	7c1b      	ldrb	r3, [r3, #16]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d10b      	bne.n	8017550 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	23ae      	movs	r3, #174	; 0xae
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	58d3      	ldr	r3, [r2, r3]
 8017540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017542:	2208      	movs	r2, #8
 8017544:	18ba      	adds	r2, r7, r2
 8017546:	0010      	movs	r0, r2
 8017548:	4798      	blx	r3
 801754a:	0003      	movs	r3, r0
 801754c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801754e:	e03a      	b.n	80175c6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8017550:	683a      	ldr	r2, [r7, #0]
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	0011      	movs	r1, r2
 8017556:	0018      	movs	r0, r3
 8017558:	f000 fa9e 	bl	8017a98 <USBD_CtlError>
        err++;
 801755c:	210b      	movs	r1, #11
 801755e:	187b      	adds	r3, r7, r1
 8017560:	781a      	ldrb	r2, [r3, #0]
 8017562:	187b      	adds	r3, r7, r1
 8017564:	3201      	adds	r2, #1
 8017566:	701a      	strb	r2, [r3, #0]
      break;
 8017568:	e02d      	b.n	80175c6 <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	7c1b      	ldrb	r3, [r3, #16]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d10f      	bne.n	8017592 <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	23ae      	movs	r3, #174	; 0xae
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	58d3      	ldr	r3, [r2, r3]
 801757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801757c:	2208      	movs	r2, #8
 801757e:	18ba      	adds	r2, r7, r2
 8017580:	0010      	movs	r0, r2
 8017582:	4798      	blx	r3
 8017584:	0003      	movs	r3, r0
 8017586:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	3301      	adds	r3, #1
 801758c:	2207      	movs	r2, #7
 801758e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017590:	e019      	b.n	80175c6 <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 8017592:	683a      	ldr	r2, [r7, #0]
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	0011      	movs	r1, r2
 8017598:	0018      	movs	r0, r3
 801759a:	f000 fa7d 	bl	8017a98 <USBD_CtlError>
        err++;
 801759e:	210b      	movs	r1, #11
 80175a0:	187b      	adds	r3, r7, r1
 80175a2:	781a      	ldrb	r2, [r3, #0]
 80175a4:	187b      	adds	r3, r7, r1
 80175a6:	3201      	adds	r2, #1
 80175a8:	701a      	strb	r2, [r3, #0]
      break;
 80175aa:	e00c      	b.n	80175c6 <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 80175ac:	683a      	ldr	r2, [r7, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	0011      	movs	r1, r2
 80175b2:	0018      	movs	r0, r3
 80175b4:	f000 fa70 	bl	8017a98 <USBD_CtlError>
      err++;
 80175b8:	210b      	movs	r1, #11
 80175ba:	187b      	adds	r3, r7, r1
 80175bc:	781a      	ldrb	r2, [r3, #0]
 80175be:	187b      	adds	r3, r7, r1
 80175c0:	3201      	adds	r2, #1
 80175c2:	701a      	strb	r2, [r3, #0]
      break;
 80175c4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80175c6:	230b      	movs	r3, #11
 80175c8:	18fb      	adds	r3, r7, r3
 80175ca:	781b      	ldrb	r3, [r3, #0]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d131      	bne.n	8017634 <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 80175d0:	683b      	ldr	r3, [r7, #0]
 80175d2:	88db      	ldrh	r3, [r3, #6]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d023      	beq.n	8017620 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 80175d8:	2108      	movs	r1, #8
 80175da:	187b      	adds	r3, r7, r1
 80175dc:	881b      	ldrh	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d017      	beq.n	8017612 <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	88da      	ldrh	r2, [r3, #6]
 80175e6:	187b      	adds	r3, r7, r1
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	1c18      	adds	r0, r3, #0
 80175ec:	1c11      	adds	r1, r2, #0
 80175ee:	b28a      	uxth	r2, r1
 80175f0:	b283      	uxth	r3, r0
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d900      	bls.n	80175f8 <USBD_GetDescriptor+0x370>
 80175f6:	1c01      	adds	r1, r0, #0
 80175f8:	b28a      	uxth	r2, r1
 80175fa:	2108      	movs	r1, #8
 80175fc:	187b      	adds	r3, r7, r1
 80175fe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017600:	187b      	adds	r3, r7, r1
 8017602:	881b      	ldrh	r3, [r3, #0]
 8017604:	001a      	movs	r2, r3
 8017606:	68f9      	ldr	r1, [r7, #12]
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	0018      	movs	r0, r3
 801760c:	f000 facc 	bl	8017ba8 <USBD_CtlSendData>
 8017610:	e011      	b.n	8017636 <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017612:	683a      	ldr	r2, [r7, #0]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	0011      	movs	r1, r2
 8017618:	0018      	movs	r0, r3
 801761a:	f000 fa3d 	bl	8017a98 <USBD_CtlError>
 801761e:	e00a      	b.n	8017636 <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	0018      	movs	r0, r3
 8017624:	f000 fb1e 	bl	8017c64 <USBD_CtlSendStatus>
 8017628:	e005      	b.n	8017636 <USBD_GetDescriptor+0x3ae>
 801762a:	46c0      	nop			; (mov r8, r8)
 801762c:	0802502c 	.word	0x0802502c
 8017630:	0802506c 	.word	0x0802506c
    return;
 8017634:	46c0      	nop			; (mov r8, r8)
  }
}
 8017636:	46bd      	mov	sp, r7
 8017638:	b004      	add	sp, #16
 801763a:	bd80      	pop	{r7, pc}

0801763c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801763c:	b590      	push	{r4, r7, lr}
 801763e:	b085      	sub	sp, #20
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	889b      	ldrh	r3, [r3, #4]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d13e      	bne.n	80176cc <USBD_SetAddress+0x90>
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	88db      	ldrh	r3, [r3, #6]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d13a      	bne.n	80176cc <USBD_SetAddress+0x90>
 8017656:	683b      	ldr	r3, [r7, #0]
 8017658:	885b      	ldrh	r3, [r3, #2]
 801765a:	2b7f      	cmp	r3, #127	; 0x7f
 801765c:	d836      	bhi.n	80176cc <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801765e:	683b      	ldr	r3, [r7, #0]
 8017660:	885b      	ldrh	r3, [r3, #2]
 8017662:	b2da      	uxtb	r2, r3
 8017664:	230f      	movs	r3, #15
 8017666:	18fb      	adds	r3, r7, r3
 8017668:	217f      	movs	r1, #127	; 0x7f
 801766a:	400a      	ands	r2, r1
 801766c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	23a7      	movs	r3, #167	; 0xa7
 8017672:	009b      	lsls	r3, r3, #2
 8017674:	5cd3      	ldrb	r3, [r2, r3]
 8017676:	b2db      	uxtb	r3, r3
 8017678:	2b03      	cmp	r3, #3
 801767a:	d106      	bne.n	801768a <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 801767c:	683a      	ldr	r2, [r7, #0]
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	0011      	movs	r1, r2
 8017682:	0018      	movs	r0, r3
 8017684:	f000 fa08 	bl	8017a98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017688:	e027      	b.n	80176da <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	240f      	movs	r4, #15
 801768e:	193a      	adds	r2, r7, r4
 8017690:	4914      	ldr	r1, [pc, #80]	; (80176e4 <USBD_SetAddress+0xa8>)
 8017692:	7812      	ldrb	r2, [r2, #0]
 8017694:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017696:	193b      	adds	r3, r7, r4
 8017698:	781a      	ldrb	r2, [r3, #0]
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	0011      	movs	r1, r2
 801769e:	0018      	movs	r0, r3
 80176a0:	f006 fca3 	bl	801dfea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	0018      	movs	r0, r3
 80176a8:	f000 fadc 	bl	8017c64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80176ac:	193b      	adds	r3, r7, r4
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d005      	beq.n	80176c0 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	23a7      	movs	r3, #167	; 0xa7
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	2102      	movs	r1, #2
 80176bc:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176be:	e00c      	b.n	80176da <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	23a7      	movs	r3, #167	; 0xa7
 80176c4:	009b      	lsls	r3, r3, #2
 80176c6:	2101      	movs	r1, #1
 80176c8:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176ca:	e006      	b.n	80176da <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80176cc:	683a      	ldr	r2, [r7, #0]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	0011      	movs	r1, r2
 80176d2:	0018      	movs	r0, r3
 80176d4:	f000 f9e0 	bl	8017a98 <USBD_CtlError>
  }
}
 80176d8:	46c0      	nop			; (mov r8, r8)
 80176da:	46c0      	nop			; (mov r8, r8)
 80176dc:	46bd      	mov	sp, r7
 80176de:	b005      	add	sp, #20
 80176e0:	bd90      	pop	{r4, r7, pc}
 80176e2:	46c0      	nop			; (mov r8, r8)
 80176e4:	0000029e 	.word	0x0000029e

080176e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80176e8:	b5b0      	push	{r4, r5, r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80176f2:	230f      	movs	r3, #15
 80176f4:	18fb      	adds	r3, r7, r3
 80176f6:	2200      	movs	r2, #0
 80176f8:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	885b      	ldrh	r3, [r3, #2]
 80176fe:	b2da      	uxtb	r2, r3
 8017700:	4b5f      	ldr	r3, [pc, #380]	; (8017880 <USBD_SetConfig+0x198>)
 8017702:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017704:	4b5e      	ldr	r3, [pc, #376]	; (8017880 <USBD_SetConfig+0x198>)
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b01      	cmp	r3, #1
 801770a:	d907      	bls.n	801771c <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 801770c:	683a      	ldr	r2, [r7, #0]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	0011      	movs	r1, r2
 8017712:	0018      	movs	r0, r3
 8017714:	f000 f9c0 	bl	8017a98 <USBD_CtlError>
    return USBD_FAIL;
 8017718:	2303      	movs	r3, #3
 801771a:	e0ac      	b.n	8017876 <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	23a7      	movs	r3, #167	; 0xa7
 8017720:	009b      	lsls	r3, r3, #2
 8017722:	5cd3      	ldrb	r3, [r2, r3]
 8017724:	b2db      	uxtb	r3, r3
 8017726:	2b02      	cmp	r3, #2
 8017728:	d002      	beq.n	8017730 <USBD_SetConfig+0x48>
 801772a:	2b03      	cmp	r3, #3
 801772c:	d033      	beq.n	8017796 <USBD_SetConfig+0xae>
 801772e:	e08d      	b.n	801784c <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017730:	4b53      	ldr	r3, [pc, #332]	; (8017880 <USBD_SetConfig+0x198>)
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d029      	beq.n	801778c <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 8017738:	4b51      	ldr	r3, [pc, #324]	; (8017880 <USBD_SetConfig+0x198>)
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	001a      	movs	r2, r3
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017742:	4b4f      	ldr	r3, [pc, #316]	; (8017880 <USBD_SetConfig+0x198>)
 8017744:	781a      	ldrb	r2, [r3, #0]
 8017746:	250f      	movs	r5, #15
 8017748:	197c      	adds	r4, r7, r5
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	0011      	movs	r1, r2
 801774e:	0018      	movs	r0, r3
 8017750:	f7fe feb2 	bl	80164b8 <USBD_SetClassConfig>
 8017754:	0003      	movs	r3, r0
 8017756:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 8017758:	197b      	adds	r3, r7, r5
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d00b      	beq.n	8017778 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 8017760:	683a      	ldr	r2, [r7, #0]
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	0011      	movs	r1, r2
 8017766:	0018      	movs	r0, r3
 8017768:	f000 f996 	bl	8017a98 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	23a7      	movs	r3, #167	; 0xa7
 8017770:	009b      	lsls	r3, r3, #2
 8017772:	2102      	movs	r1, #2
 8017774:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017776:	e07b      	b.n	8017870 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	0018      	movs	r0, r3
 801777c:	f000 fa72 	bl	8017c64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017780:	687a      	ldr	r2, [r7, #4]
 8017782:	23a7      	movs	r3, #167	; 0xa7
 8017784:	009b      	lsls	r3, r3, #2
 8017786:	2103      	movs	r1, #3
 8017788:	54d1      	strb	r1, [r2, r3]
      break;
 801778a:	e071      	b.n	8017870 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	0018      	movs	r0, r3
 8017790:	f000 fa68 	bl	8017c64 <USBD_CtlSendStatus>
      break;
 8017794:	e06c      	b.n	8017870 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017796:	4b3a      	ldr	r3, [pc, #232]	; (8017880 <USBD_SetConfig+0x198>)
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d115      	bne.n	80177ca <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	23a7      	movs	r3, #167	; 0xa7
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	2102      	movs	r1, #2
 80177a6:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 80177a8:	4b35      	ldr	r3, [pc, #212]	; (8017880 <USBD_SetConfig+0x198>)
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	001a      	movs	r2, r3
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80177b2:	4b33      	ldr	r3, [pc, #204]	; (8017880 <USBD_SetConfig+0x198>)
 80177b4:	781a      	ldrb	r2, [r3, #0]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	0011      	movs	r1, r2
 80177ba:	0018      	movs	r0, r3
 80177bc:	f7fe fea1 	bl	8016502 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	0018      	movs	r0, r3
 80177c4:	f000 fa4e 	bl	8017c64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80177c8:	e052      	b.n	8017870 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 80177ca:	4b2d      	ldr	r3, [pc, #180]	; (8017880 <USBD_SetConfig+0x198>)
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	001a      	movs	r2, r3
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	685b      	ldr	r3, [r3, #4]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d034      	beq.n	8017842 <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	b2da      	uxtb	r2, r3
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	0011      	movs	r1, r2
 80177e2:	0018      	movs	r0, r3
 80177e4:	f7fe fe8d 	bl	8016502 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80177e8:	4b25      	ldr	r3, [pc, #148]	; (8017880 <USBD_SetConfig+0x198>)
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	001a      	movs	r2, r3
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80177f2:	4b23      	ldr	r3, [pc, #140]	; (8017880 <USBD_SetConfig+0x198>)
 80177f4:	781a      	ldrb	r2, [r3, #0]
 80177f6:	250f      	movs	r5, #15
 80177f8:	197c      	adds	r4, r7, r5
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	0011      	movs	r1, r2
 80177fe:	0018      	movs	r0, r3
 8017800:	f7fe fe5a 	bl	80164b8 <USBD_SetClassConfig>
 8017804:	0003      	movs	r3, r0
 8017806:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 8017808:	197b      	adds	r3, r7, r5
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d013      	beq.n	8017838 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 8017810:	683a      	ldr	r2, [r7, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	0011      	movs	r1, r2
 8017816:	0018      	movs	r0, r3
 8017818:	f000 f93e 	bl	8017a98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	b2da      	uxtb	r2, r3
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	0011      	movs	r1, r2
 8017826:	0018      	movs	r0, r3
 8017828:	f7fe fe6b 	bl	8016502 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	23a7      	movs	r3, #167	; 0xa7
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	2102      	movs	r1, #2
 8017834:	54d1      	strb	r1, [r2, r3]
      break;
 8017836:	e01b      	b.n	8017870 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	0018      	movs	r0, r3
 801783c:	f000 fa12 	bl	8017c64 <USBD_CtlSendStatus>
      break;
 8017840:	e016      	b.n	8017870 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	0018      	movs	r0, r3
 8017846:	f000 fa0d 	bl	8017c64 <USBD_CtlSendStatus>
      break;
 801784a:	e011      	b.n	8017870 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 801784c:	683a      	ldr	r2, [r7, #0]
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	0011      	movs	r1, r2
 8017852:	0018      	movs	r0, r3
 8017854:	f000 f920 	bl	8017a98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017858:	4b09      	ldr	r3, [pc, #36]	; (8017880 <USBD_SetConfig+0x198>)
 801785a:	781a      	ldrb	r2, [r3, #0]
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	0011      	movs	r1, r2
 8017860:	0018      	movs	r0, r3
 8017862:	f7fe fe4e 	bl	8016502 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017866:	230f      	movs	r3, #15
 8017868:	18fb      	adds	r3, r7, r3
 801786a:	2203      	movs	r2, #3
 801786c:	701a      	strb	r2, [r3, #0]
      break;
 801786e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8017870:	230f      	movs	r3, #15
 8017872:	18fb      	adds	r3, r7, r3
 8017874:	781b      	ldrb	r3, [r3, #0]
}
 8017876:	0018      	movs	r0, r3
 8017878:	46bd      	mov	sp, r7
 801787a:	b004      	add	sp, #16
 801787c:	bdb0      	pop	{r4, r5, r7, pc}
 801787e:	46c0      	nop			; (mov r8, r8)
 8017880:	200005e9 	.word	0x200005e9

08017884 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	88db      	ldrh	r3, [r3, #6]
 8017892:	2b01      	cmp	r3, #1
 8017894:	d006      	beq.n	80178a4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8017896:	683a      	ldr	r2, [r7, #0]
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	0011      	movs	r1, r2
 801789c:	0018      	movs	r0, r3
 801789e:	f000 f8fb 	bl	8017a98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80178a2:	e027      	b.n	80178f4 <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	23a7      	movs	r3, #167	; 0xa7
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	5cd3      	ldrb	r3, [r2, r3]
 80178ac:	b2db      	uxtb	r3, r3
 80178ae:	2b02      	cmp	r3, #2
 80178b0:	dc02      	bgt.n	80178b8 <USBD_GetConfig+0x34>
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	dc03      	bgt.n	80178be <USBD_GetConfig+0x3a>
 80178b6:	e016      	b.n	80178e6 <USBD_GetConfig+0x62>
 80178b8:	2b03      	cmp	r3, #3
 80178ba:	d00c      	beq.n	80178d6 <USBD_GetConfig+0x52>
 80178bc:	e013      	b.n	80178e6 <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	3308      	adds	r3, #8
 80178c8:	0019      	movs	r1, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	2201      	movs	r2, #1
 80178ce:	0018      	movs	r0, r3
 80178d0:	f000 f96a 	bl	8017ba8 <USBD_CtlSendData>
        break;
 80178d4:	e00e      	b.n	80178f4 <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	1d19      	adds	r1, r3, #4
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	2201      	movs	r2, #1
 80178de:	0018      	movs	r0, r3
 80178e0:	f000 f962 	bl	8017ba8 <USBD_CtlSendData>
        break;
 80178e4:	e006      	b.n	80178f4 <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 80178e6:	683a      	ldr	r2, [r7, #0]
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	0011      	movs	r1, r2
 80178ec:	0018      	movs	r0, r3
 80178ee:	f000 f8d3 	bl	8017a98 <USBD_CtlError>
        break;
 80178f2:	46c0      	nop			; (mov r8, r8)
}
 80178f4:	46c0      	nop			; (mov r8, r8)
 80178f6:	46bd      	mov	sp, r7
 80178f8:	b002      	add	sp, #8
 80178fa:	bd80      	pop	{r7, pc}

080178fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017906:	687a      	ldr	r2, [r7, #4]
 8017908:	23a7      	movs	r3, #167	; 0xa7
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	5cd3      	ldrb	r3, [r2, r3]
 801790e:	b2db      	uxtb	r3, r3
 8017910:	3b01      	subs	r3, #1
 8017912:	2b02      	cmp	r3, #2
 8017914:	d822      	bhi.n	801795c <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	88db      	ldrh	r3, [r3, #6]
 801791a:	2b02      	cmp	r3, #2
 801791c:	d006      	beq.n	801792c <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 801791e:	683a      	ldr	r2, [r7, #0]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	0011      	movs	r1, r2
 8017924:	0018      	movs	r0, r3
 8017926:	f000 f8b7 	bl	8017a98 <USBD_CtlError>
        break;
 801792a:	e01e      	b.n	801796a <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2201      	movs	r2, #1
 8017930:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017932:	687a      	ldr	r2, [r7, #4]
 8017934:	23a9      	movs	r3, #169	; 0xa9
 8017936:	009b      	lsls	r3, r3, #2
 8017938:	58d3      	ldr	r3, [r2, r3]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d005      	beq.n	801794a <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	2202      	movs	r2, #2
 8017944:	431a      	orrs	r2, r3
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	330c      	adds	r3, #12
 801794e:	0019      	movs	r1, r3
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	2202      	movs	r2, #2
 8017954:	0018      	movs	r0, r3
 8017956:	f000 f927 	bl	8017ba8 <USBD_CtlSendData>
      break;
 801795a:	e006      	b.n	801796a <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 801795c:	683a      	ldr	r2, [r7, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	0011      	movs	r1, r2
 8017962:	0018      	movs	r0, r3
 8017964:	f000 f898 	bl	8017a98 <USBD_CtlError>
      break;
 8017968:	46c0      	nop			; (mov r8, r8)
  }
}
 801796a:	46c0      	nop			; (mov r8, r8)
 801796c:	46bd      	mov	sp, r7
 801796e:	b002      	add	sp, #8
 8017970:	bd80      	pop	{r7, pc}

08017972 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017972:	b580      	push	{r7, lr}
 8017974:	b082      	sub	sp, #8
 8017976:	af00      	add	r7, sp, #0
 8017978:	6078      	str	r0, [r7, #4]
 801797a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	885b      	ldrh	r3, [r3, #2]
 8017980:	2b01      	cmp	r3, #1
 8017982:	d109      	bne.n	8017998 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 8017984:	687a      	ldr	r2, [r7, #4]
 8017986:	23a9      	movs	r3, #169	; 0xa9
 8017988:	009b      	lsls	r3, r3, #2
 801798a:	2101      	movs	r1, #1
 801798c:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	0018      	movs	r0, r3
 8017992:	f000 f967 	bl	8017c64 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017996:	e017      	b.n	80179c8 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	885b      	ldrh	r3, [r3, #2]
 801799c:	2b02      	cmp	r3, #2
 801799e:	d10d      	bne.n	80179bc <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	889b      	ldrh	r3, [r3, #4]
 80179a4:	0a1b      	lsrs	r3, r3, #8
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	b2d9      	uxtb	r1, r3
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	23a8      	movs	r3, #168	; 0xa8
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	0018      	movs	r0, r3
 80179b6:	f000 f955 	bl	8017c64 <USBD_CtlSendStatus>
}
 80179ba:	e005      	b.n	80179c8 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 80179bc:	683a      	ldr	r2, [r7, #0]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	0011      	movs	r1, r2
 80179c2:	0018      	movs	r0, r3
 80179c4:	f000 f868 	bl	8017a98 <USBD_CtlError>
}
 80179c8:	46c0      	nop			; (mov r8, r8)
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b002      	add	sp, #8
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b082      	sub	sp, #8
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
 80179d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	23a7      	movs	r3, #167	; 0xa7
 80179de:	009b      	lsls	r3, r3, #2
 80179e0:	5cd3      	ldrb	r3, [r2, r3]
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	3b01      	subs	r3, #1
 80179e6:	2b02      	cmp	r3, #2
 80179e8:	d80d      	bhi.n	8017a06 <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	885b      	ldrh	r3, [r3, #2]
 80179ee:	2b01      	cmp	r3, #1
 80179f0:	d110      	bne.n	8017a14 <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 80179f2:	687a      	ldr	r2, [r7, #4]
 80179f4:	23a9      	movs	r3, #169	; 0xa9
 80179f6:	009b      	lsls	r3, r3, #2
 80179f8:	2100      	movs	r1, #0
 80179fa:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	0018      	movs	r0, r3
 8017a00:	f000 f930 	bl	8017c64 <USBD_CtlSendStatus>
      }
      break;
 8017a04:	e006      	b.n	8017a14 <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 8017a06:	683a      	ldr	r2, [r7, #0]
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	0011      	movs	r1, r2
 8017a0c:	0018      	movs	r0, r3
 8017a0e:	f000 f843 	bl	8017a98 <USBD_CtlError>
      break;
 8017a12:	e000      	b.n	8017a16 <USBD_ClrFeature+0x46>
      break;
 8017a14:	46c0      	nop			; (mov r8, r8)
  }
}
 8017a16:	46c0      	nop			; (mov r8, r8)
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	b002      	add	sp, #8
 8017a1c:	bd80      	pop	{r7, pc}

08017a1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b084      	sub	sp, #16
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	781a      	ldrb	r2, [r3, #0]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	3301      	adds	r3, #1
 8017a38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	781a      	ldrb	r2, [r3, #0]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	3301      	adds	r3, #1
 8017a46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	0018      	movs	r0, r3
 8017a4c:	f7ff f8e6 	bl	8016c1c <SWAPBYTE>
 8017a50:	0003      	movs	r3, r0
 8017a52:	001a      	movs	r2, r3
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	3301      	adds	r3, #1
 8017a62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	0018      	movs	r0, r3
 8017a68:	f7ff f8d8 	bl	8016c1c <SWAPBYTE>
 8017a6c:	0003      	movs	r3, r0
 8017a6e:	001a      	movs	r2, r3
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3301      	adds	r3, #1
 8017a78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	0018      	movs	r0, r3
 8017a84:	f7ff f8ca 	bl	8016c1c <SWAPBYTE>
 8017a88:	0003      	movs	r3, r0
 8017a8a:	001a      	movs	r2, r3
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	80da      	strh	r2, [r3, #6]
}
 8017a90:	46c0      	nop			; (mov r8, r8)
 8017a92:	46bd      	mov	sp, r7
 8017a94:	b004      	add	sp, #16
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2180      	movs	r1, #128	; 0x80
 8017aa6:	0018      	movs	r0, r3
 8017aa8:	f006 fa19 	bl	801dede <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2100      	movs	r1, #0
 8017ab0:	0018      	movs	r0, r3
 8017ab2:	f006 fa14 	bl	801dede <USBD_LL_StallEP>
}
 8017ab6:	46c0      	nop			; (mov r8, r8)
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	b002      	add	sp, #8
 8017abc:	bd80      	pop	{r7, pc}

08017abe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017abe:	b590      	push	{r4, r7, lr}
 8017ac0:	b087      	sub	sp, #28
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	60f8      	str	r0, [r7, #12]
 8017ac6:	60b9      	str	r1, [r7, #8]
 8017ac8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017aca:	2417      	movs	r4, #23
 8017acc:	193b      	adds	r3, r7, r4
 8017ace:	2200      	movs	r2, #0
 8017ad0:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d044      	beq.n	8017b62 <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	0018      	movs	r0, r3
 8017ae0:	f000 f843 	bl	8017b6a <USBD_GetLen>
 8017ae4:	0003      	movs	r3, r0
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	b29b      	uxth	r3, r3
 8017aea:	18db      	adds	r3, r3, r3
 8017aec:	b29a      	uxth	r2, r3
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017af2:	193b      	adds	r3, r7, r4
 8017af4:	781b      	ldrb	r3, [r3, #0]
 8017af6:	68ba      	ldr	r2, [r7, #8]
 8017af8:	18d3      	adds	r3, r2, r3
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	7812      	ldrb	r2, [r2, #0]
 8017afe:	701a      	strb	r2, [r3, #0]
  idx++;
 8017b00:	193b      	adds	r3, r7, r4
 8017b02:	781a      	ldrb	r2, [r3, #0]
 8017b04:	193b      	adds	r3, r7, r4
 8017b06:	3201      	adds	r2, #1
 8017b08:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017b0a:	193b      	adds	r3, r7, r4
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	68ba      	ldr	r2, [r7, #8]
 8017b10:	18d3      	adds	r3, r2, r3
 8017b12:	2203      	movs	r2, #3
 8017b14:	701a      	strb	r2, [r3, #0]
  idx++;
 8017b16:	193b      	adds	r3, r7, r4
 8017b18:	781a      	ldrb	r2, [r3, #0]
 8017b1a:	193b      	adds	r3, r7, r4
 8017b1c:	3201      	adds	r2, #1
 8017b1e:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 8017b20:	e01a      	b.n	8017b58 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 8017b22:	2117      	movs	r1, #23
 8017b24:	187b      	adds	r3, r7, r1
 8017b26:	781b      	ldrb	r3, [r3, #0]
 8017b28:	68ba      	ldr	r2, [r7, #8]
 8017b2a:	18d3      	adds	r3, r2, r3
 8017b2c:	693a      	ldr	r2, [r7, #16]
 8017b2e:	7812      	ldrb	r2, [r2, #0]
 8017b30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017b32:	693b      	ldr	r3, [r7, #16]
 8017b34:	3301      	adds	r3, #1
 8017b36:	613b      	str	r3, [r7, #16]
    idx++;
 8017b38:	187b      	adds	r3, r7, r1
 8017b3a:	781a      	ldrb	r2, [r3, #0]
 8017b3c:	187b      	adds	r3, r7, r1
 8017b3e:	3201      	adds	r2, #1
 8017b40:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 8017b42:	187b      	adds	r3, r7, r1
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	68ba      	ldr	r2, [r7, #8]
 8017b48:	18d3      	adds	r3, r2, r3
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8017b4e:	187b      	adds	r3, r7, r1
 8017b50:	781a      	ldrb	r2, [r3, #0]
 8017b52:	187b      	adds	r3, r7, r1
 8017b54:	3201      	adds	r2, #1
 8017b56:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 8017b58:	693b      	ldr	r3, [r7, #16]
 8017b5a:	781b      	ldrb	r3, [r3, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d1e0      	bne.n	8017b22 <USBD_GetString+0x64>
 8017b60:	e000      	b.n	8017b64 <USBD_GetString+0xa6>
    return;
 8017b62:	46c0      	nop			; (mov r8, r8)
  }
}
 8017b64:	46bd      	mov	sp, r7
 8017b66:	b007      	add	sp, #28
 8017b68:	bd90      	pop	{r4, r7, pc}

08017b6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b084      	sub	sp, #16
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017b72:	230f      	movs	r3, #15
 8017b74:	18fb      	adds	r3, r7, r3
 8017b76:	2200      	movs	r2, #0
 8017b78:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017b7e:	e008      	b.n	8017b92 <USBD_GetLen+0x28>
  {
    len++;
 8017b80:	210f      	movs	r1, #15
 8017b82:	187b      	adds	r3, r7, r1
 8017b84:	781a      	ldrb	r2, [r3, #0]
 8017b86:	187b      	adds	r3, r7, r1
 8017b88:	3201      	adds	r2, #1
 8017b8a:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8017b8c:	68bb      	ldr	r3, [r7, #8]
 8017b8e:	3301      	adds	r3, #1
 8017b90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d1f2      	bne.n	8017b80 <USBD_GetLen+0x16>
  }

  return len;
 8017b9a:	230f      	movs	r3, #15
 8017b9c:	18fb      	adds	r3, r7, r3
 8017b9e:	781b      	ldrb	r3, [r3, #0]
}
 8017ba0:	0018      	movs	r0, r3
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	b004      	add	sp, #16
 8017ba6:	bd80      	pop	{r7, pc}

08017ba8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b084      	sub	sp, #16
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017bb4:	68fa      	ldr	r2, [r7, #12]
 8017bb6:	23a5      	movs	r3, #165	; 0xa5
 8017bb8:	009b      	lsls	r3, r3, #2
 8017bba:	2102      	movs	r1, #2
 8017bbc:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	687a      	ldr	r2, [r7, #4]
 8017bc2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	68ba      	ldr	r2, [r7, #8]
 8017bce:	68f8      	ldr	r0, [r7, #12]
 8017bd0:	2100      	movs	r1, #0
 8017bd2:	f006 fa35 	bl	801e040 <USBD_LL_Transmit>

  return USBD_OK;
 8017bd6:	2300      	movs	r3, #0
}
 8017bd8:	0018      	movs	r0, r3
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	b004      	add	sp, #16
 8017bde:	bd80      	pop	{r7, pc}

08017be0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b084      	sub	sp, #16
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	68ba      	ldr	r2, [r7, #8]
 8017bf0:	68f8      	ldr	r0, [r7, #12]
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	f006 fa24 	bl	801e040 <USBD_LL_Transmit>

  return USBD_OK;
 8017bf8:	2300      	movs	r3, #0
}
 8017bfa:	0018      	movs	r0, r3
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	b004      	add	sp, #16
 8017c00:	bd80      	pop	{r7, pc}

08017c02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017c02:	b580      	push	{r7, lr}
 8017c04:	b084      	sub	sp, #16
 8017c06:	af00      	add	r7, sp, #0
 8017c08:	60f8      	str	r0, [r7, #12]
 8017c0a:	60b9      	str	r1, [r7, #8]
 8017c0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	23a5      	movs	r3, #165	; 0xa5
 8017c12:	009b      	lsls	r3, r3, #2
 8017c14:	2103      	movs	r1, #3
 8017c16:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8017c18:	68fa      	ldr	r2, [r7, #12]
 8017c1a:	23ac      	movs	r3, #172	; 0xac
 8017c1c:	005b      	lsls	r3, r3, #1
 8017c1e:	6879      	ldr	r1, [r7, #4]
 8017c20:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017c22:	68fa      	ldr	r2, [r7, #12]
 8017c24:	23ae      	movs	r3, #174	; 0xae
 8017c26:	005b      	lsls	r3, r3, #1
 8017c28:	6879      	ldr	r1, [r7, #4]
 8017c2a:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	68ba      	ldr	r2, [r7, #8]
 8017c30:	68f8      	ldr	r0, [r7, #12]
 8017c32:	2100      	movs	r1, #0
 8017c34:	f006 fa34 	bl	801e0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	0018      	movs	r0, r3
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	b004      	add	sp, #16
 8017c40:	bd80      	pop	{r7, pc}

08017c42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017c42:	b580      	push	{r7, lr}
 8017c44:	b084      	sub	sp, #16
 8017c46:	af00      	add	r7, sp, #0
 8017c48:	60f8      	str	r0, [r7, #12]
 8017c4a:	60b9      	str	r1, [r7, #8]
 8017c4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	68ba      	ldr	r2, [r7, #8]
 8017c52:	68f8      	ldr	r0, [r7, #12]
 8017c54:	2100      	movs	r1, #0
 8017c56:	f006 fa23 	bl	801e0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017c5a:	2300      	movs	r3, #0
}
 8017c5c:	0018      	movs	r0, r3
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	b004      	add	sp, #16
 8017c62:	bd80      	pop	{r7, pc}

08017c64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017c6c:	687a      	ldr	r2, [r7, #4]
 8017c6e:	23a5      	movs	r3, #165	; 0xa5
 8017c70:	009b      	lsls	r3, r3, #2
 8017c72:	2104      	movs	r1, #4
 8017c74:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	2300      	movs	r3, #0
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	2100      	movs	r1, #0
 8017c7e:	f006 f9df 	bl	801e040 <USBD_LL_Transmit>

  return USBD_OK;
 8017c82:	2300      	movs	r3, #0
}
 8017c84:	0018      	movs	r0, r3
 8017c86:	46bd      	mov	sp, r7
 8017c88:	b002      	add	sp, #8
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	23a5      	movs	r3, #165	; 0xa5
 8017c98:	009b      	lsls	r3, r3, #2
 8017c9a:	2105      	movs	r1, #5
 8017c9c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	f006 f9fb 	bl	801e0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017caa:	2300      	movs	r3, #0
}
 8017cac:	0018      	movs	r0, r3
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	b002      	add	sp, #8
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <__NVIC_SetPriority>:
{
 8017cb4:	b590      	push	{r4, r7, lr}
 8017cb6:	b083      	sub	sp, #12
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	0002      	movs	r2, r0
 8017cbc:	6039      	str	r1, [r7, #0]
 8017cbe:	1dfb      	adds	r3, r7, #7
 8017cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8017cc2:	1dfb      	adds	r3, r7, #7
 8017cc4:	781b      	ldrb	r3, [r3, #0]
 8017cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8017cc8:	d828      	bhi.n	8017d1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017cca:	4a2f      	ldr	r2, [pc, #188]	; (8017d88 <__NVIC_SetPriority+0xd4>)
 8017ccc:	1dfb      	adds	r3, r7, #7
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	b25b      	sxtb	r3, r3
 8017cd2:	089b      	lsrs	r3, r3, #2
 8017cd4:	33c0      	adds	r3, #192	; 0xc0
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	589b      	ldr	r3, [r3, r2]
 8017cda:	1dfa      	adds	r2, r7, #7
 8017cdc:	7812      	ldrb	r2, [r2, #0]
 8017cde:	0011      	movs	r1, r2
 8017ce0:	2203      	movs	r2, #3
 8017ce2:	400a      	ands	r2, r1
 8017ce4:	00d2      	lsls	r2, r2, #3
 8017ce6:	21ff      	movs	r1, #255	; 0xff
 8017ce8:	4091      	lsls	r1, r2
 8017cea:	000a      	movs	r2, r1
 8017cec:	43d2      	mvns	r2, r2
 8017cee:	401a      	ands	r2, r3
 8017cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	019b      	lsls	r3, r3, #6
 8017cf6:	22ff      	movs	r2, #255	; 0xff
 8017cf8:	401a      	ands	r2, r3
 8017cfa:	1dfb      	adds	r3, r7, #7
 8017cfc:	781b      	ldrb	r3, [r3, #0]
 8017cfe:	0018      	movs	r0, r3
 8017d00:	2303      	movs	r3, #3
 8017d02:	4003      	ands	r3, r0
 8017d04:	00db      	lsls	r3, r3, #3
 8017d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d08:	481f      	ldr	r0, [pc, #124]	; (8017d88 <__NVIC_SetPriority+0xd4>)
 8017d0a:	1dfb      	adds	r3, r7, #7
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	b25b      	sxtb	r3, r3
 8017d10:	089b      	lsrs	r3, r3, #2
 8017d12:	430a      	orrs	r2, r1
 8017d14:	33c0      	adds	r3, #192	; 0xc0
 8017d16:	009b      	lsls	r3, r3, #2
 8017d18:	501a      	str	r2, [r3, r0]
}
 8017d1a:	e031      	b.n	8017d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d1c:	4a1b      	ldr	r2, [pc, #108]	; (8017d8c <__NVIC_SetPriority+0xd8>)
 8017d1e:	1dfb      	adds	r3, r7, #7
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	0019      	movs	r1, r3
 8017d24:	230f      	movs	r3, #15
 8017d26:	400b      	ands	r3, r1
 8017d28:	3b08      	subs	r3, #8
 8017d2a:	089b      	lsrs	r3, r3, #2
 8017d2c:	3306      	adds	r3, #6
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	18d3      	adds	r3, r2, r3
 8017d32:	3304      	adds	r3, #4
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	1dfa      	adds	r2, r7, #7
 8017d38:	7812      	ldrb	r2, [r2, #0]
 8017d3a:	0011      	movs	r1, r2
 8017d3c:	2203      	movs	r2, #3
 8017d3e:	400a      	ands	r2, r1
 8017d40:	00d2      	lsls	r2, r2, #3
 8017d42:	21ff      	movs	r1, #255	; 0xff
 8017d44:	4091      	lsls	r1, r2
 8017d46:	000a      	movs	r2, r1
 8017d48:	43d2      	mvns	r2, r2
 8017d4a:	401a      	ands	r2, r3
 8017d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8017d4e:	683b      	ldr	r3, [r7, #0]
 8017d50:	019b      	lsls	r3, r3, #6
 8017d52:	22ff      	movs	r2, #255	; 0xff
 8017d54:	401a      	ands	r2, r3
 8017d56:	1dfb      	adds	r3, r7, #7
 8017d58:	781b      	ldrb	r3, [r3, #0]
 8017d5a:	0018      	movs	r0, r3
 8017d5c:	2303      	movs	r3, #3
 8017d5e:	4003      	ands	r3, r0
 8017d60:	00db      	lsls	r3, r3, #3
 8017d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8017d64:	4809      	ldr	r0, [pc, #36]	; (8017d8c <__NVIC_SetPriority+0xd8>)
 8017d66:	1dfb      	adds	r3, r7, #7
 8017d68:	781b      	ldrb	r3, [r3, #0]
 8017d6a:	001c      	movs	r4, r3
 8017d6c:	230f      	movs	r3, #15
 8017d6e:	4023      	ands	r3, r4
 8017d70:	3b08      	subs	r3, #8
 8017d72:	089b      	lsrs	r3, r3, #2
 8017d74:	430a      	orrs	r2, r1
 8017d76:	3306      	adds	r3, #6
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	18c3      	adds	r3, r0, r3
 8017d7c:	3304      	adds	r3, #4
 8017d7e:	601a      	str	r2, [r3, #0]
}
 8017d80:	46c0      	nop			; (mov r8, r8)
 8017d82:	46bd      	mov	sp, r7
 8017d84:	b003      	add	sp, #12
 8017d86:	bd90      	pop	{r4, r7, pc}
 8017d88:	e000e100 	.word	0xe000e100
 8017d8c:	e000ed00 	.word	0xe000ed00

08017d90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8017d90:	b580      	push	{r7, lr}
 8017d92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017d94:	4b05      	ldr	r3, [pc, #20]	; (8017dac <SysTick_Handler+0x1c>)
 8017d96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017d98:	f001 ff2a 	bl	8019bf0 <xTaskGetSchedulerState>
 8017d9c:	0003      	movs	r3, r0
 8017d9e:	2b01      	cmp	r3, #1
 8017da0:	d001      	beq.n	8017da6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8017da2:	f002 fbf9 	bl	801a598 <xPortSysTickHandler>
  }
}
 8017da6:	46c0      	nop			; (mov r8, r8)
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bd80      	pop	{r7, pc}
 8017dac:	e000e010 	.word	0xe000e010

08017db0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8017db0:	b580      	push	{r7, lr}
 8017db2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017db4:	2305      	movs	r3, #5
 8017db6:	425b      	negs	r3, r3
 8017db8:	2100      	movs	r1, #0
 8017dba:	0018      	movs	r0, r3
 8017dbc:	f7ff ff7a 	bl	8017cb4 <__NVIC_SetPriority>
#endif
}
 8017dc0:	46c0      	nop			; (mov r8, r8)
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
	...

08017dc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017dce:	f3ef 8305 	mrs	r3, IPSR
 8017dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8017dd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d003      	beq.n	8017de2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8017dda:	2306      	movs	r3, #6
 8017ddc:	425b      	negs	r3, r3
 8017dde:	607b      	str	r3, [r7, #4]
 8017de0:	e00c      	b.n	8017dfc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8017de2:	4b09      	ldr	r3, [pc, #36]	; (8017e08 <osKernelInitialize+0x40>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d105      	bne.n	8017df6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8017dea:	4b07      	ldr	r3, [pc, #28]	; (8017e08 <osKernelInitialize+0x40>)
 8017dec:	2201      	movs	r2, #1
 8017dee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8017df0:	2300      	movs	r3, #0
 8017df2:	607b      	str	r3, [r7, #4]
 8017df4:	e002      	b.n	8017dfc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017df6:	2301      	movs	r3, #1
 8017df8:	425b      	negs	r3, r3
 8017dfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017dfc:	687b      	ldr	r3, [r7, #4]
}
 8017dfe:	0018      	movs	r0, r3
 8017e00:	46bd      	mov	sp, r7
 8017e02:	b002      	add	sp, #8
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	46c0      	nop			; (mov r8, r8)
 8017e08:	200005ec 	.word	0x200005ec

08017e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e12:	f3ef 8305 	mrs	r3, IPSR
 8017e16:	603b      	str	r3, [r7, #0]
  return(result);
 8017e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d003      	beq.n	8017e26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8017e1e:	2306      	movs	r3, #6
 8017e20:	425b      	negs	r3, r3
 8017e22:	607b      	str	r3, [r7, #4]
 8017e24:	e010      	b.n	8017e48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017e26:	4b0b      	ldr	r3, [pc, #44]	; (8017e54 <osKernelStart+0x48>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2b01      	cmp	r3, #1
 8017e2c:	d109      	bne.n	8017e42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8017e2e:	f7ff ffbf 	bl	8017db0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017e32:	4b08      	ldr	r3, [pc, #32]	; (8017e54 <osKernelStart+0x48>)
 8017e34:	2202      	movs	r2, #2
 8017e36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017e38:	f001 fae2 	bl	8019400 <vTaskStartScheduler>
      stat = osOK;
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	607b      	str	r3, [r7, #4]
 8017e40:	e002      	b.n	8017e48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017e42:	2301      	movs	r3, #1
 8017e44:	425b      	negs	r3, r3
 8017e46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017e48:	687b      	ldr	r3, [r7, #4]
}
 8017e4a:	0018      	movs	r0, r3
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	b002      	add	sp, #8
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	46c0      	nop			; (mov r8, r8)
 8017e54:	200005ec 	.word	0x200005ec

08017e58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017e58:	b5b0      	push	{r4, r5, r7, lr}
 8017e5a:	b08e      	sub	sp, #56	; 0x38
 8017e5c:	af04      	add	r7, sp, #16
 8017e5e:	60f8      	str	r0, [r7, #12]
 8017e60:	60b9      	str	r1, [r7, #8]
 8017e62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017e64:	2300      	movs	r3, #0
 8017e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017e68:	f3ef 8305 	mrs	r3, IPSR
 8017e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8017e6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d000      	beq.n	8017e76 <osThreadNew+0x1e>
 8017e74:	e081      	b.n	8017f7a <osThreadNew+0x122>
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d100      	bne.n	8017e7e <osThreadNew+0x26>
 8017e7c:	e07d      	b.n	8017f7a <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8017e7e:	2380      	movs	r3, #128	; 0x80
 8017e80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8017e82:	2318      	movs	r3, #24
 8017e84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017e86:	2300      	movs	r3, #0
 8017e88:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	425b      	negs	r3, r3
 8017e8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d044      	beq.n	8017f20 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d002      	beq.n	8017ea4 <osThreadNew+0x4c>
        name = attr->name;
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	699b      	ldr	r3, [r3, #24]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d002      	beq.n	8017eb2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	699b      	ldr	r3, [r3, #24]
 8017eb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d007      	beq.n	8017ec8 <osThreadNew+0x70>
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	2b38      	cmp	r3, #56	; 0x38
 8017ebc:	d804      	bhi.n	8017ec8 <osThreadNew+0x70>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	4013      	ands	r3, r2
 8017ec6:	d001      	beq.n	8017ecc <osThreadNew+0x74>
        return (NULL);
 8017ec8:	2300      	movs	r3, #0
 8017eca:	e057      	b.n	8017f7c <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	695b      	ldr	r3, [r3, #20]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d003      	beq.n	8017edc <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	695b      	ldr	r3, [r3, #20]
 8017ed8:	089b      	lsrs	r3, r3, #2
 8017eda:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	689b      	ldr	r3, [r3, #8]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d00e      	beq.n	8017f02 <osThreadNew+0xaa>
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	2ba7      	cmp	r3, #167	; 0xa7
 8017eea:	d90a      	bls.n	8017f02 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d006      	beq.n	8017f02 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	695b      	ldr	r3, [r3, #20]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d002      	beq.n	8017f02 <osThreadNew+0xaa>
        mem = 1;
 8017efc:	2301      	movs	r3, #1
 8017efe:	61bb      	str	r3, [r7, #24]
 8017f00:	e010      	b.n	8017f24 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	689b      	ldr	r3, [r3, #8]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d10c      	bne.n	8017f24 <osThreadNew+0xcc>
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	68db      	ldr	r3, [r3, #12]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d108      	bne.n	8017f24 <osThreadNew+0xcc>
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	691b      	ldr	r3, [r3, #16]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d104      	bne.n	8017f24 <osThreadNew+0xcc>
          mem = 0;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	61bb      	str	r3, [r7, #24]
 8017f1e:	e001      	b.n	8017f24 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8017f20:	2300      	movs	r3, #0
 8017f22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017f24:	69bb      	ldr	r3, [r7, #24]
 8017f26:	2b01      	cmp	r3, #1
 8017f28:	d112      	bne.n	8017f50 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017f32:	68bd      	ldr	r5, [r7, #8]
 8017f34:	6a3c      	ldr	r4, [r7, #32]
 8017f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f38:	68f8      	ldr	r0, [r7, #12]
 8017f3a:	9302      	str	r3, [sp, #8]
 8017f3c:	9201      	str	r2, [sp, #4]
 8017f3e:	69fb      	ldr	r3, [r7, #28]
 8017f40:	9300      	str	r3, [sp, #0]
 8017f42:	002b      	movs	r3, r5
 8017f44:	0022      	movs	r2, r4
 8017f46:	f000 ff54 	bl	8018df2 <xTaskCreateStatic>
 8017f4a:	0003      	movs	r3, r0
 8017f4c:	613b      	str	r3, [r7, #16]
 8017f4e:	e014      	b.n	8017f7a <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d111      	bne.n	8017f7a <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017f56:	6a3b      	ldr	r3, [r7, #32]
 8017f58:	b29a      	uxth	r2, r3
 8017f5a:	68bc      	ldr	r4, [r7, #8]
 8017f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f5e:	68f8      	ldr	r0, [r7, #12]
 8017f60:	2310      	movs	r3, #16
 8017f62:	18fb      	adds	r3, r7, r3
 8017f64:	9301      	str	r3, [sp, #4]
 8017f66:	69fb      	ldr	r3, [r7, #28]
 8017f68:	9300      	str	r3, [sp, #0]
 8017f6a:	0023      	movs	r3, r4
 8017f6c:	f000 ff85 	bl	8018e7a <xTaskCreate>
 8017f70:	0003      	movs	r3, r0
 8017f72:	2b01      	cmp	r3, #1
 8017f74:	d001      	beq.n	8017f7a <osThreadNew+0x122>
            hTask = NULL;
 8017f76:	2300      	movs	r3, #0
 8017f78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017f7a:	693b      	ldr	r3, [r7, #16]
}
 8017f7c:	0018      	movs	r0, r3
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	b00a      	add	sp, #40	; 0x28
 8017f82:	bdb0      	pop	{r4, r5, r7, pc}

08017f84 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8017f8a:	f001 fe23 	bl	8019bd4 <xTaskGetCurrentTaskHandle>
 8017f8e:	0003      	movs	r3, r0
 8017f90:	607b      	str	r3, [r7, #4]

  return (id);
 8017f92:	687b      	ldr	r3, [r7, #4]
}
 8017f94:	0018      	movs	r0, r3
 8017f96:	46bd      	mov	sp, r7
 8017f98:	b002      	add	sp, #8
 8017f9a:	bd80      	pop	{r7, pc}

08017f9c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b086      	sub	sp, #24
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017fa8:	f3ef 8305 	mrs	r3, IPSR
 8017fac:	60fb      	str	r3, [r7, #12]
  return(result);
 8017fae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d003      	beq.n	8017fbc <osThreadSuspend+0x20>
    stat = osErrorISR;
 8017fb4:	2306      	movs	r3, #6
 8017fb6:	425b      	negs	r3, r3
 8017fb8:	617b      	str	r3, [r7, #20]
 8017fba:	e00c      	b.n	8017fd6 <osThreadSuspend+0x3a>
  }
  else if (hTask == NULL) {
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d103      	bne.n	8017fca <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8017fc2:	2304      	movs	r3, #4
 8017fc4:	425b      	negs	r3, r3
 8017fc6:	617b      	str	r3, [r7, #20]
 8017fc8:	e005      	b.n	8017fd6 <osThreadSuspend+0x3a>
  }
  else {
    stat = osOK;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8017fce:	693b      	ldr	r3, [r7, #16]
 8017fd0:	0018      	movs	r0, r3
 8017fd2:	f001 f93b 	bl	801924c <vTaskSuspend>
  }

  return (stat);
 8017fd6:	697b      	ldr	r3, [r7, #20]
}
 8017fd8:	0018      	movs	r0, r3
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	b006      	add	sp, #24
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b086      	sub	sp, #24
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017fec:	f3ef 8305 	mrs	r3, IPSR
 8017ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8017ff2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d003      	beq.n	8018000 <osThreadResume+0x20>
    stat = osErrorISR;
 8017ff8:	2306      	movs	r3, #6
 8017ffa:	425b      	negs	r3, r3
 8017ffc:	617b      	str	r3, [r7, #20]
 8017ffe:	e00c      	b.n	801801a <osThreadResume+0x3a>
  }
  else if (hTask == NULL) {
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d103      	bne.n	801800e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8018006:	2304      	movs	r3, #4
 8018008:	425b      	negs	r3, r3
 801800a:	617b      	str	r3, [r7, #20]
 801800c:	e005      	b.n	801801a <osThreadResume+0x3a>
  }
  else {
    stat = osOK;
 801800e:	2300      	movs	r3, #0
 8018010:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	0018      	movs	r0, r3
 8018016:	f001 f9a5 	bl	8019364 <vTaskResume>
  }

  return (stat);
 801801a:	697b      	ldr	r3, [r7, #20]
}
 801801c:	0018      	movs	r0, r3
 801801e:	46bd      	mov	sp, r7
 8018020:	b006      	add	sp, #24
 8018022:	bd80      	pop	{r7, pc}

08018024 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018024:	b580      	push	{r7, lr}
 8018026:	b084      	sub	sp, #16
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801802c:	f3ef 8305 	mrs	r3, IPSR
 8018030:	60bb      	str	r3, [r7, #8]
  return(result);
 8018032:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018034:	2b00      	cmp	r3, #0
 8018036:	d003      	beq.n	8018040 <osDelay+0x1c>
    stat = osErrorISR;
 8018038:	2306      	movs	r3, #6
 801803a:	425b      	negs	r3, r3
 801803c:	60fb      	str	r3, [r7, #12]
 801803e:	e008      	b.n	8018052 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8018040:	2300      	movs	r3, #0
 8018042:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d003      	beq.n	8018052 <osDelay+0x2e>
      vTaskDelay(ticks);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	0018      	movs	r0, r3
 801804e:	f001 f869 	bl	8019124 <vTaskDelay>
    }
  }

  return (stat);
 8018052:	68fb      	ldr	r3, [r7, #12]
}
 8018054:	0018      	movs	r0, r3
 8018056:	46bd      	mov	sp, r7
 8018058:	b004      	add	sp, #16
 801805a:	bd80      	pop	{r7, pc}

0801805c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	b08b      	sub	sp, #44	; 0x2c
 8018060:	af02      	add	r7, sp, #8
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8018068:	2300      	movs	r3, #0
 801806a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801806c:	f3ef 8305 	mrs	r3, IPSR
 8018070:	613b      	str	r3, [r7, #16]
  return(result);
 8018072:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018074:	2b00      	cmp	r3, #0
 8018076:	d000      	beq.n	801807a <osMessageQueueNew+0x1e>
 8018078:	e064      	b.n	8018144 <osMessageQueueNew+0xe8>
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d100      	bne.n	8018082 <osMessageQueueNew+0x26>
 8018080:	e060      	b.n	8018144 <osMessageQueueNew+0xe8>
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d05d      	beq.n	8018144 <osMessageQueueNew+0xe8>
    mem = -1;
 8018088:	2301      	movs	r3, #1
 801808a:	425b      	negs	r3, r3
 801808c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d028      	beq.n	80180e6 <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	689b      	ldr	r3, [r3, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d011      	beq.n	80180c0 <osMessageQueueNew+0x64>
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	2b4f      	cmp	r3, #79	; 0x4f
 80180a2:	d90d      	bls.n	80180c0 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d009      	beq.n	80180c0 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	695a      	ldr	r2, [r3, #20]
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	68b9      	ldr	r1, [r7, #8]
 80180b4:	434b      	muls	r3, r1
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d302      	bcc.n	80180c0 <osMessageQueueNew+0x64>
        mem = 1;
 80180ba:	2301      	movs	r3, #1
 80180bc:	61bb      	str	r3, [r7, #24]
 80180be:	e014      	b.n	80180ea <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	689b      	ldr	r3, [r3, #8]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d110      	bne.n	80180ea <osMessageQueueNew+0x8e>
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	68db      	ldr	r3, [r3, #12]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d10c      	bne.n	80180ea <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d108      	bne.n	80180ea <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	695b      	ldr	r3, [r3, #20]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d104      	bne.n	80180ea <osMessageQueueNew+0x8e>
          mem = 0;
 80180e0:	2300      	movs	r3, #0
 80180e2:	61bb      	str	r3, [r7, #24]
 80180e4:	e001      	b.n	80180ea <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 80180e6:	2300      	movs	r3, #0
 80180e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	2b01      	cmp	r3, #1
 80180ee:	d10c      	bne.n	801810a <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	691a      	ldr	r2, [r3, #16]
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	689b      	ldr	r3, [r3, #8]
 80180f8:	68b9      	ldr	r1, [r7, #8]
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	2400      	movs	r4, #0
 80180fe:	9400      	str	r4, [sp, #0]
 8018100:	f000 fa09 	bl	8018516 <xQueueGenericCreateStatic>
 8018104:	0003      	movs	r3, r0
 8018106:	61fb      	str	r3, [r7, #28]
 8018108:	e00a      	b.n	8018120 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 801810a:	69bb      	ldr	r3, [r7, #24]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d107      	bne.n	8018120 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018110:	68b9      	ldr	r1, [r7, #8]
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	2200      	movs	r2, #0
 8018116:	0018      	movs	r0, r3
 8018118:	f000 fa49 	bl	80185ae <xQueueGenericCreate>
 801811c:	0003      	movs	r3, r0
 801811e:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018120:	69fb      	ldr	r3, [r7, #28]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d00e      	beq.n	8018144 <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	2b00      	cmp	r3, #0
 801812a:	d003      	beq.n	8018134 <osMessageQueueNew+0xd8>
        name = attr->name;
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	617b      	str	r3, [r7, #20]
 8018132:	e001      	b.n	8018138 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 8018134:	2300      	movs	r3, #0
 8018136:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8018138:	697a      	ldr	r2, [r7, #20]
 801813a:	69fb      	ldr	r3, [r7, #28]
 801813c:	0011      	movs	r1, r2
 801813e:	0018      	movs	r0, r3
 8018140:	f000 fdfc 	bl	8018d3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8018144:	69fb      	ldr	r3, [r7, #28]
}
 8018146:	0018      	movs	r0, r3
 8018148:	46bd      	mov	sp, r7
 801814a:	b009      	add	sp, #36	; 0x24
 801814c:	bd90      	pop	{r4, r7, pc}
	...

08018150 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018150:	b580      	push	{r7, lr}
 8018152:	b088      	sub	sp, #32
 8018154:	af00      	add	r7, sp, #0
 8018156:	60f8      	str	r0, [r7, #12]
 8018158:	60b9      	str	r1, [r7, #8]
 801815a:	603b      	str	r3, [r7, #0]
 801815c:	1dfb      	adds	r3, r7, #7
 801815e:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018164:	2300      	movs	r3, #0
 8018166:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018168:	f3ef 8305 	mrs	r3, IPSR
 801816c:	617b      	str	r3, [r7, #20]
  return(result);
 801816e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8018170:	2b00      	cmp	r3, #0
 8018172:	d024      	beq.n	80181be <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018174:	69bb      	ldr	r3, [r7, #24]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d005      	beq.n	8018186 <osMessageQueuePut+0x36>
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d002      	beq.n	8018186 <osMessageQueuePut+0x36>
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d003      	beq.n	801818e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8018186:	2304      	movs	r3, #4
 8018188:	425b      	negs	r3, r3
 801818a:	61fb      	str	r3, [r7, #28]
 801818c:	e034      	b.n	80181f8 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 801818e:	2300      	movs	r3, #0
 8018190:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018192:	2310      	movs	r3, #16
 8018194:	18fa      	adds	r2, r7, r3
 8018196:	68b9      	ldr	r1, [r7, #8]
 8018198:	69b8      	ldr	r0, [r7, #24]
 801819a:	2300      	movs	r3, #0
 801819c:	f000 fb24 	bl	80187e8 <xQueueGenericSendFromISR>
 80181a0:	0003      	movs	r3, r0
 80181a2:	2b01      	cmp	r3, #1
 80181a4:	d003      	beq.n	80181ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80181a6:	2303      	movs	r3, #3
 80181a8:	425b      	negs	r3, r3
 80181aa:	61fb      	str	r3, [r7, #28]
 80181ac:	e024      	b.n	80181f8 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 80181ae:	693b      	ldr	r3, [r7, #16]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d021      	beq.n	80181f8 <osMessageQueuePut+0xa8>
 80181b4:	4b13      	ldr	r3, [pc, #76]	; (8018204 <osMessageQueuePut+0xb4>)
 80181b6:	2280      	movs	r2, #128	; 0x80
 80181b8:	0552      	lsls	r2, r2, #21
 80181ba:	601a      	str	r2, [r3, #0]
 80181bc:	e01c      	b.n	80181f8 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <osMessageQueuePut+0x7a>
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d103      	bne.n	80181d2 <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 80181ca:	2304      	movs	r3, #4
 80181cc:	425b      	negs	r3, r3
 80181ce:	61fb      	str	r3, [r7, #28]
 80181d0:	e012      	b.n	80181f8 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80181d2:	683a      	ldr	r2, [r7, #0]
 80181d4:	68b9      	ldr	r1, [r7, #8]
 80181d6:	69b8      	ldr	r0, [r7, #24]
 80181d8:	2300      	movs	r3, #0
 80181da:	f000 fa41 	bl	8018660 <xQueueGenericSend>
 80181de:	0003      	movs	r3, r0
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d009      	beq.n	80181f8 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 80181e4:	683b      	ldr	r3, [r7, #0]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 80181ea:	2302      	movs	r3, #2
 80181ec:	425b      	negs	r3, r3
 80181ee:	61fb      	str	r3, [r7, #28]
 80181f0:	e002      	b.n	80181f8 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 80181f2:	2303      	movs	r3, #3
 80181f4:	425b      	negs	r3, r3
 80181f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80181f8:	69fb      	ldr	r3, [r7, #28]
}
 80181fa:	0018      	movs	r0, r3
 80181fc:	46bd      	mov	sp, r7
 80181fe:	b008      	add	sp, #32
 8018200:	bd80      	pop	{r7, pc}
 8018202:	46c0      	nop			; (mov r8, r8)
 8018204:	e000ed04 	.word	0xe000ed04

08018208 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018208:	b580      	push	{r7, lr}
 801820a:	b088      	sub	sp, #32
 801820c:	af00      	add	r7, sp, #0
 801820e:	60f8      	str	r0, [r7, #12]
 8018210:	60b9      	str	r1, [r7, #8]
 8018212:	607a      	str	r2, [r7, #4]
 8018214:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801821a:	2300      	movs	r3, #0
 801821c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801821e:	f3ef 8305 	mrs	r3, IPSR
 8018222:	617b      	str	r3, [r7, #20]
  return(result);
 8018224:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8018226:	2b00      	cmp	r3, #0
 8018228:	d024      	beq.n	8018274 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801822a:	69bb      	ldr	r3, [r7, #24]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d005      	beq.n	801823c <osMessageQueueGet+0x34>
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d002      	beq.n	801823c <osMessageQueueGet+0x34>
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d003      	beq.n	8018244 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801823c:	2304      	movs	r3, #4
 801823e:	425b      	negs	r3, r3
 8018240:	61fb      	str	r3, [r7, #28]
 8018242:	e034      	b.n	80182ae <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 8018244:	2300      	movs	r3, #0
 8018246:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018248:	2310      	movs	r3, #16
 801824a:	18fa      	adds	r2, r7, r3
 801824c:	68b9      	ldr	r1, [r7, #8]
 801824e:	69bb      	ldr	r3, [r7, #24]
 8018250:	0018      	movs	r0, r3
 8018252:	f000 fbf2 	bl	8018a3a <xQueueReceiveFromISR>
 8018256:	0003      	movs	r3, r0
 8018258:	2b01      	cmp	r3, #1
 801825a:	d003      	beq.n	8018264 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801825c:	2303      	movs	r3, #3
 801825e:	425b      	negs	r3, r3
 8018260:	61fb      	str	r3, [r7, #28]
 8018262:	e024      	b.n	80182ae <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 8018264:	693b      	ldr	r3, [r7, #16]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d021      	beq.n	80182ae <osMessageQueueGet+0xa6>
 801826a:	4b13      	ldr	r3, [pc, #76]	; (80182b8 <osMessageQueueGet+0xb0>)
 801826c:	2280      	movs	r2, #128	; 0x80
 801826e:	0552      	lsls	r2, r2, #21
 8018270:	601a      	str	r2, [r3, #0]
 8018272:	e01c      	b.n	80182ae <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018274:	69bb      	ldr	r3, [r7, #24]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d002      	beq.n	8018280 <osMessageQueueGet+0x78>
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d103      	bne.n	8018288 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 8018280:	2304      	movs	r3, #4
 8018282:	425b      	negs	r3, r3
 8018284:	61fb      	str	r3, [r7, #28]
 8018286:	e012      	b.n	80182ae <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018288:	683a      	ldr	r2, [r7, #0]
 801828a:	68b9      	ldr	r1, [r7, #8]
 801828c:	69bb      	ldr	r3, [r7, #24]
 801828e:	0018      	movs	r0, r3
 8018290:	f000 fb1e 	bl	80188d0 <xQueueReceive>
 8018294:	0003      	movs	r3, r0
 8018296:	2b01      	cmp	r3, #1
 8018298:	d009      	beq.n	80182ae <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d003      	beq.n	80182a8 <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 80182a0:	2302      	movs	r3, #2
 80182a2:	425b      	negs	r3, r3
 80182a4:	61fb      	str	r3, [r7, #28]
 80182a6:	e002      	b.n	80182ae <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 80182a8:	2303      	movs	r3, #3
 80182aa:	425b      	negs	r3, r3
 80182ac:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80182ae:	69fb      	ldr	r3, [r7, #28]
}
 80182b0:	0018      	movs	r0, r3
 80182b2:	46bd      	mov	sp, r7
 80182b4:	b008      	add	sp, #32
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	e000ed04 	.word	0xe000ed04

080182bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80182bc:	b580      	push	{r7, lr}
 80182be:	b084      	sub	sp, #16
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	4a06      	ldr	r2, [pc, #24]	; (80182e4 <vApplicationGetIdleTaskMemory+0x28>)
 80182cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	4a05      	ldr	r2, [pc, #20]	; (80182e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80182d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2280      	movs	r2, #128	; 0x80
 80182d8:	601a      	str	r2, [r3, #0]
}
 80182da:	46c0      	nop			; (mov r8, r8)
 80182dc:	46bd      	mov	sp, r7
 80182de:	b004      	add	sp, #16
 80182e0:	bd80      	pop	{r7, pc}
 80182e2:	46c0      	nop			; (mov r8, r8)
 80182e4:	200005f0 	.word	0x200005f0
 80182e8:	20000698 	.word	0x20000698

080182ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80182ec:	b580      	push	{r7, lr}
 80182ee:	b084      	sub	sp, #16
 80182f0:	af00      	add	r7, sp, #0
 80182f2:	60f8      	str	r0, [r7, #12]
 80182f4:	60b9      	str	r1, [r7, #8]
 80182f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	4a06      	ldr	r2, [pc, #24]	; (8018314 <vApplicationGetTimerTaskMemory+0x28>)
 80182fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	4a05      	ldr	r2, [pc, #20]	; (8018318 <vApplicationGetTimerTaskMemory+0x2c>)
 8018302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2280      	movs	r2, #128	; 0x80
 8018308:	0052      	lsls	r2, r2, #1
 801830a:	601a      	str	r2, [r3, #0]
}
 801830c:	46c0      	nop			; (mov r8, r8)
 801830e:	46bd      	mov	sp, r7
 8018310:	b004      	add	sp, #16
 8018312:	bd80      	pop	{r7, pc}
 8018314:	20000898 	.word	0x20000898
 8018318:	20000940 	.word	0x20000940

0801831c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b082      	sub	sp, #8
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	3308      	adds	r3, #8
 8018328:	001a      	movs	r2, r3
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	2201      	movs	r2, #1
 8018332:	4252      	negs	r2, r2
 8018334:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	3308      	adds	r3, #8
 801833a:	001a      	movs	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3308      	adds	r3, #8
 8018344:	001a      	movs	r2, r3
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	2200      	movs	r2, #0
 801834e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018350:	46c0      	nop			; (mov r8, r8)
 8018352:	46bd      	mov	sp, r7
 8018354:	b002      	add	sp, #8
 8018356:	bd80      	pop	{r7, pc}

08018358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018358:	b580      	push	{r7, lr}
 801835a:	b082      	sub	sp, #8
 801835c:	af00      	add	r7, sp, #0
 801835e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	2200      	movs	r2, #0
 8018364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018366:	46c0      	nop			; (mov r8, r8)
 8018368:	46bd      	mov	sp, r7
 801836a:	b002      	add	sp, #8
 801836c:	bd80      	pop	{r7, pc}

0801836e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801836e:	b580      	push	{r7, lr}
 8018370:	b084      	sub	sp, #16
 8018372:	af00      	add	r7, sp, #0
 8018374:	6078      	str	r0, [r7, #4]
 8018376:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	68fa      	ldr	r2, [r7, #12]
 8018382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	689a      	ldr	r2, [r3, #8]
 8018388:	683b      	ldr	r3, [r7, #0]
 801838a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	689b      	ldr	r3, [r3, #8]
 8018390:	683a      	ldr	r2, [r7, #0]
 8018392:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	683a      	ldr	r2, [r7, #0]
 8018398:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801839a:	683b      	ldr	r3, [r7, #0]
 801839c:	687a      	ldr	r2, [r7, #4]
 801839e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	1c5a      	adds	r2, r3, #1
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	601a      	str	r2, [r3, #0]
}
 80183aa:	46c0      	nop			; (mov r8, r8)
 80183ac:	46bd      	mov	sp, r7
 80183ae:	b004      	add	sp, #16
 80183b0:	bd80      	pop	{r7, pc}

080183b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80183b2:	b580      	push	{r7, lr}
 80183b4:	b084      	sub	sp, #16
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6078      	str	r0, [r7, #4]
 80183ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	3301      	adds	r3, #1
 80183c6:	d103      	bne.n	80183d0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	691b      	ldr	r3, [r3, #16]
 80183cc:	60fb      	str	r3, [r7, #12]
 80183ce:	e00c      	b.n	80183ea <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	3308      	adds	r3, #8
 80183d4:	60fb      	str	r3, [r7, #12]
 80183d6:	e002      	b.n	80183de <vListInsert+0x2c>
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	685b      	ldr	r3, [r3, #4]
 80183dc:	60fb      	str	r3, [r7, #12]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	685b      	ldr	r3, [r3, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	68ba      	ldr	r2, [r7, #8]
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d2f6      	bcs.n	80183d8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	685a      	ldr	r2, [r3, #4]
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	683a      	ldr	r2, [r7, #0]
 80183f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	68fa      	ldr	r2, [r7, #12]
 80183fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	683a      	ldr	r2, [r7, #0]
 8018404:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018406:	683b      	ldr	r3, [r7, #0]
 8018408:	687a      	ldr	r2, [r7, #4]
 801840a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	1c5a      	adds	r2, r3, #1
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	601a      	str	r2, [r3, #0]
}
 8018416:	46c0      	nop			; (mov r8, r8)
 8018418:	46bd      	mov	sp, r7
 801841a:	b004      	add	sp, #16
 801841c:	bd80      	pop	{r7, pc}

0801841e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801841e:	b580      	push	{r7, lr}
 8018420:	b084      	sub	sp, #16
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	691b      	ldr	r3, [r3, #16]
 801842a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	687a      	ldr	r2, [r7, #4]
 8018432:	6892      	ldr	r2, [r2, #8]
 8018434:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	689b      	ldr	r3, [r3, #8]
 801843a:	687a      	ldr	r2, [r7, #4]
 801843c:	6852      	ldr	r2, [r2, #4]
 801843e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	687a      	ldr	r2, [r7, #4]
 8018446:	429a      	cmp	r2, r3
 8018448:	d103      	bne.n	8018452 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	689a      	ldr	r2, [r3, #8]
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2200      	movs	r2, #0
 8018456:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	1e5a      	subs	r2, r3, #1
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	681b      	ldr	r3, [r3, #0]
}
 8018466:	0018      	movs	r0, r3
 8018468:	46bd      	mov	sp, r7
 801846a:	b004      	add	sp, #16
 801846c:	bd80      	pop	{r7, pc}

0801846e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801846e:	b580      	push	{r7, lr}
 8018470:	b084      	sub	sp, #16
 8018472:	af00      	add	r7, sp, #0
 8018474:	6078      	str	r0, [r7, #4]
 8018476:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d101      	bne.n	8018486 <xQueueGenericReset+0x18>
 8018482:	b672      	cpsid	i
 8018484:	e7fe      	b.n	8018484 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8018486:	f002 f82b 	bl	801a4e0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	681a      	ldr	r2, [r3, #0]
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018496:	434b      	muls	r3, r1
 8018498:	18d2      	adds	r2, r2, r3
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	2200      	movs	r2, #0
 80184a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	681a      	ldr	r2, [r3, #0]
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	681a      	ldr	r2, [r3, #0]
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184b4:	1e59      	subs	r1, r3, #1
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184ba:	434b      	muls	r3, r1
 80184bc:	18d2      	adds	r2, r2, r3
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	2244      	movs	r2, #68	; 0x44
 80184c6:	21ff      	movs	r1, #255	; 0xff
 80184c8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	2245      	movs	r2, #69	; 0x45
 80184ce:	21ff      	movs	r1, #255	; 0xff
 80184d0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d10d      	bne.n	80184f4 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	691b      	ldr	r3, [r3, #16]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d013      	beq.n	8018508 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	3310      	adds	r3, #16
 80184e4:	0018      	movs	r0, r3
 80184e6:	f001 f9dd 	bl	80198a4 <xTaskRemoveFromEventList>
 80184ea:	1e03      	subs	r3, r0, #0
 80184ec:	d00c      	beq.n	8018508 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80184ee:	f001 ffe7 	bl	801a4c0 <vPortYield>
 80184f2:	e009      	b.n	8018508 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80184f4:	68fb      	ldr	r3, [r7, #12]
 80184f6:	3310      	adds	r3, #16
 80184f8:	0018      	movs	r0, r3
 80184fa:	f7ff ff0f 	bl	801831c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	3324      	adds	r3, #36	; 0x24
 8018502:	0018      	movs	r0, r3
 8018504:	f7ff ff0a 	bl	801831c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018508:	f001 fffc 	bl	801a504 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801850c:	2301      	movs	r3, #1
}
 801850e:	0018      	movs	r0, r3
 8018510:	46bd      	mov	sp, r7
 8018512:	b004      	add	sp, #16
 8018514:	bd80      	pop	{r7, pc}

08018516 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018516:	b590      	push	{r4, r7, lr}
 8018518:	b089      	sub	sp, #36	; 0x24
 801851a:	af02      	add	r7, sp, #8
 801851c:	60f8      	str	r0, [r7, #12]
 801851e:	60b9      	str	r1, [r7, #8]
 8018520:	607a      	str	r2, [r7, #4]
 8018522:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d101      	bne.n	801852e <xQueueGenericCreateStatic+0x18>
 801852a:	b672      	cpsid	i
 801852c:	e7fe      	b.n	801852c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d101      	bne.n	8018538 <xQueueGenericCreateStatic+0x22>
 8018534:	b672      	cpsid	i
 8018536:	e7fe      	b.n	8018536 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d002      	beq.n	8018544 <xQueueGenericCreateStatic+0x2e>
 801853e:	68bb      	ldr	r3, [r7, #8]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d001      	beq.n	8018548 <xQueueGenericCreateStatic+0x32>
 8018544:	2301      	movs	r3, #1
 8018546:	e000      	b.n	801854a <xQueueGenericCreateStatic+0x34>
 8018548:	2300      	movs	r3, #0
 801854a:	2b00      	cmp	r3, #0
 801854c:	d101      	bne.n	8018552 <xQueueGenericCreateStatic+0x3c>
 801854e:	b672      	cpsid	i
 8018550:	e7fe      	b.n	8018550 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d102      	bne.n	801855e <xQueueGenericCreateStatic+0x48>
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d101      	bne.n	8018562 <xQueueGenericCreateStatic+0x4c>
 801855e:	2301      	movs	r3, #1
 8018560:	e000      	b.n	8018564 <xQueueGenericCreateStatic+0x4e>
 8018562:	2300      	movs	r3, #0
 8018564:	2b00      	cmp	r3, #0
 8018566:	d101      	bne.n	801856c <xQueueGenericCreateStatic+0x56>
 8018568:	b672      	cpsid	i
 801856a:	e7fe      	b.n	801856a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801856c:	2350      	movs	r3, #80	; 0x50
 801856e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	2b50      	cmp	r3, #80	; 0x50
 8018574:	d001      	beq.n	801857a <xQueueGenericCreateStatic+0x64>
 8018576:	b672      	cpsid	i
 8018578:	e7fe      	b.n	8018578 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801857a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8018580:	697b      	ldr	r3, [r7, #20]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d00e      	beq.n	80185a4 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	2246      	movs	r2, #70	; 0x46
 801858a:	2101      	movs	r1, #1
 801858c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801858e:	2328      	movs	r3, #40	; 0x28
 8018590:	18fb      	adds	r3, r7, r3
 8018592:	781c      	ldrb	r4, [r3, #0]
 8018594:	687a      	ldr	r2, [r7, #4]
 8018596:	68b9      	ldr	r1, [r7, #8]
 8018598:	68f8      	ldr	r0, [r7, #12]
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	9300      	str	r3, [sp, #0]
 801859e:	0023      	movs	r3, r4
 80185a0:	f000 f837 	bl	8018612 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80185a4:	697b      	ldr	r3, [r7, #20]
	}
 80185a6:	0018      	movs	r0, r3
 80185a8:	46bd      	mov	sp, r7
 80185aa:	b007      	add	sp, #28
 80185ac:	bd90      	pop	{r4, r7, pc}

080185ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80185ae:	b590      	push	{r4, r7, lr}
 80185b0:	b08b      	sub	sp, #44	; 0x2c
 80185b2:	af02      	add	r7, sp, #8
 80185b4:	60f8      	str	r0, [r7, #12]
 80185b6:	60b9      	str	r1, [r7, #8]
 80185b8:	1dfb      	adds	r3, r7, #7
 80185ba:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d101      	bne.n	80185c6 <xQueueGenericCreate+0x18>
 80185c2:	b672      	cpsid	i
 80185c4:	e7fe      	b.n	80185c4 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	68ba      	ldr	r2, [r7, #8]
 80185ca:	4353      	muls	r3, r2
 80185cc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80185ce:	69fb      	ldr	r3, [r7, #28]
 80185d0:	3350      	adds	r3, #80	; 0x50
 80185d2:	0018      	movs	r0, r3
 80185d4:	f002 f81c 	bl	801a610 <pvPortMalloc>
 80185d8:	0003      	movs	r3, r0
 80185da:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80185dc:	69bb      	ldr	r3, [r7, #24]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d012      	beq.n	8018608 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80185e2:	69bb      	ldr	r3, [r7, #24]
 80185e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	3350      	adds	r3, #80	; 0x50
 80185ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80185ec:	69bb      	ldr	r3, [r7, #24]
 80185ee:	2246      	movs	r2, #70	; 0x46
 80185f0:	2100      	movs	r1, #0
 80185f2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80185f4:	1dfb      	adds	r3, r7, #7
 80185f6:	781c      	ldrb	r4, [r3, #0]
 80185f8:	697a      	ldr	r2, [r7, #20]
 80185fa:	68b9      	ldr	r1, [r7, #8]
 80185fc:	68f8      	ldr	r0, [r7, #12]
 80185fe:	69bb      	ldr	r3, [r7, #24]
 8018600:	9300      	str	r3, [sp, #0]
 8018602:	0023      	movs	r3, r4
 8018604:	f000 f805 	bl	8018612 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018608:	69bb      	ldr	r3, [r7, #24]
	}
 801860a:	0018      	movs	r0, r3
 801860c:	46bd      	mov	sp, r7
 801860e:	b009      	add	sp, #36	; 0x24
 8018610:	bd90      	pop	{r4, r7, pc}

08018612 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018612:	b580      	push	{r7, lr}
 8018614:	b084      	sub	sp, #16
 8018616:	af00      	add	r7, sp, #0
 8018618:	60f8      	str	r0, [r7, #12]
 801861a:	60b9      	str	r1, [r7, #8]
 801861c:	607a      	str	r2, [r7, #4]
 801861e:	001a      	movs	r2, r3
 8018620:	1cfb      	adds	r3, r7, #3
 8018622:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d103      	bne.n	8018632 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801862a:	69bb      	ldr	r3, [r7, #24]
 801862c:	69ba      	ldr	r2, [r7, #24]
 801862e:	601a      	str	r2, [r3, #0]
 8018630:	e002      	b.n	8018638 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018632:	69bb      	ldr	r3, [r7, #24]
 8018634:	687a      	ldr	r2, [r7, #4]
 8018636:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018638:	69bb      	ldr	r3, [r7, #24]
 801863a:	68fa      	ldr	r2, [r7, #12]
 801863c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801863e:	69bb      	ldr	r3, [r7, #24]
 8018640:	68ba      	ldr	r2, [r7, #8]
 8018642:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018644:	69bb      	ldr	r3, [r7, #24]
 8018646:	2101      	movs	r1, #1
 8018648:	0018      	movs	r0, r3
 801864a:	f7ff ff10 	bl	801846e <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801864e:	69bb      	ldr	r3, [r7, #24]
 8018650:	1cfa      	adds	r2, r7, #3
 8018652:	214c      	movs	r1, #76	; 0x4c
 8018654:	7812      	ldrb	r2, [r2, #0]
 8018656:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018658:	46c0      	nop			; (mov r8, r8)
 801865a:	46bd      	mov	sp, r7
 801865c:	b004      	add	sp, #16
 801865e:	bd80      	pop	{r7, pc}

08018660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08a      	sub	sp, #40	; 0x28
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
 801866c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801866e:	2300      	movs	r3, #0
 8018670:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8018676:	6a3b      	ldr	r3, [r7, #32]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d101      	bne.n	8018680 <xQueueGenericSend+0x20>
 801867c:	b672      	cpsid	i
 801867e:	e7fe      	b.n	801867e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d103      	bne.n	801868e <xQueueGenericSend+0x2e>
 8018686:	6a3b      	ldr	r3, [r7, #32]
 8018688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801868a:	2b00      	cmp	r3, #0
 801868c:	d101      	bne.n	8018692 <xQueueGenericSend+0x32>
 801868e:	2301      	movs	r3, #1
 8018690:	e000      	b.n	8018694 <xQueueGenericSend+0x34>
 8018692:	2300      	movs	r3, #0
 8018694:	2b00      	cmp	r3, #0
 8018696:	d101      	bne.n	801869c <xQueueGenericSend+0x3c>
 8018698:	b672      	cpsid	i
 801869a:	e7fe      	b.n	801869a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	2b02      	cmp	r3, #2
 80186a0:	d103      	bne.n	80186aa <xQueueGenericSend+0x4a>
 80186a2:	6a3b      	ldr	r3, [r7, #32]
 80186a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186a6:	2b01      	cmp	r3, #1
 80186a8:	d101      	bne.n	80186ae <xQueueGenericSend+0x4e>
 80186aa:	2301      	movs	r3, #1
 80186ac:	e000      	b.n	80186b0 <xQueueGenericSend+0x50>
 80186ae:	2300      	movs	r3, #0
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d101      	bne.n	80186b8 <xQueueGenericSend+0x58>
 80186b4:	b672      	cpsid	i
 80186b6:	e7fe      	b.n	80186b6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80186b8:	f001 fa9a 	bl	8019bf0 <xTaskGetSchedulerState>
 80186bc:	1e03      	subs	r3, r0, #0
 80186be:	d102      	bne.n	80186c6 <xQueueGenericSend+0x66>
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d101      	bne.n	80186ca <xQueueGenericSend+0x6a>
 80186c6:	2301      	movs	r3, #1
 80186c8:	e000      	b.n	80186cc <xQueueGenericSend+0x6c>
 80186ca:	2300      	movs	r3, #0
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d101      	bne.n	80186d4 <xQueueGenericSend+0x74>
 80186d0:	b672      	cpsid	i
 80186d2:	e7fe      	b.n	80186d2 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80186d4:	f001 ff04 	bl	801a4e0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80186d8:	6a3b      	ldr	r3, [r7, #32]
 80186da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80186dc:	6a3b      	ldr	r3, [r7, #32]
 80186de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d302      	bcc.n	80186ea <xQueueGenericSend+0x8a>
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	2b02      	cmp	r3, #2
 80186e8:	d11e      	bne.n	8018728 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80186ea:	683a      	ldr	r2, [r7, #0]
 80186ec:	68b9      	ldr	r1, [r7, #8]
 80186ee:	6a3b      	ldr	r3, [r7, #32]
 80186f0:	0018      	movs	r0, r3
 80186f2:	f000 fa05 	bl	8018b00 <prvCopyDataToQueue>
 80186f6:	0003      	movs	r3, r0
 80186f8:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80186fa:	6a3b      	ldr	r3, [r7, #32]
 80186fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d009      	beq.n	8018716 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018702:	6a3b      	ldr	r3, [r7, #32]
 8018704:	3324      	adds	r3, #36	; 0x24
 8018706:	0018      	movs	r0, r3
 8018708:	f001 f8cc 	bl	80198a4 <xTaskRemoveFromEventList>
 801870c:	1e03      	subs	r3, r0, #0
 801870e:	d007      	beq.n	8018720 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018710:	f001 fed6 	bl	801a4c0 <vPortYield>
 8018714:	e004      	b.n	8018720 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018716:	69fb      	ldr	r3, [r7, #28]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801871c:	f001 fed0 	bl	801a4c0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018720:	f001 fef0 	bl	801a504 <vPortExitCritical>
				return pdPASS;
 8018724:	2301      	movs	r3, #1
 8018726:	e05b      	b.n	80187e0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d103      	bne.n	8018736 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801872e:	f001 fee9 	bl	801a504 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8018732:	2300      	movs	r3, #0
 8018734:	e054      	b.n	80187e0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018738:	2b00      	cmp	r3, #0
 801873a:	d106      	bne.n	801874a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801873c:	2314      	movs	r3, #20
 801873e:	18fb      	adds	r3, r7, r3
 8018740:	0018      	movs	r0, r3
 8018742:	f001 f90b 	bl	801995c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018746:	2301      	movs	r3, #1
 8018748:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801874a:	f001 fedb 	bl	801a504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801874e:	f000 feb5 	bl	80194bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018752:	f001 fec5 	bl	801a4e0 <vPortEnterCritical>
 8018756:	6a3b      	ldr	r3, [r7, #32]
 8018758:	2244      	movs	r2, #68	; 0x44
 801875a:	5c9b      	ldrb	r3, [r3, r2]
 801875c:	b25b      	sxtb	r3, r3
 801875e:	3301      	adds	r3, #1
 8018760:	d103      	bne.n	801876a <xQueueGenericSend+0x10a>
 8018762:	6a3b      	ldr	r3, [r7, #32]
 8018764:	2244      	movs	r2, #68	; 0x44
 8018766:	2100      	movs	r1, #0
 8018768:	5499      	strb	r1, [r3, r2]
 801876a:	6a3b      	ldr	r3, [r7, #32]
 801876c:	2245      	movs	r2, #69	; 0x45
 801876e:	5c9b      	ldrb	r3, [r3, r2]
 8018770:	b25b      	sxtb	r3, r3
 8018772:	3301      	adds	r3, #1
 8018774:	d103      	bne.n	801877e <xQueueGenericSend+0x11e>
 8018776:	6a3b      	ldr	r3, [r7, #32]
 8018778:	2245      	movs	r2, #69	; 0x45
 801877a:	2100      	movs	r1, #0
 801877c:	5499      	strb	r1, [r3, r2]
 801877e:	f001 fec1 	bl	801a504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018782:	1d3a      	adds	r2, r7, #4
 8018784:	2314      	movs	r3, #20
 8018786:	18fb      	adds	r3, r7, r3
 8018788:	0011      	movs	r1, r2
 801878a:	0018      	movs	r0, r3
 801878c:	f001 f8fa 	bl	8019984 <xTaskCheckForTimeOut>
 8018790:	1e03      	subs	r3, r0, #0
 8018792:	d11e      	bne.n	80187d2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018794:	6a3b      	ldr	r3, [r7, #32]
 8018796:	0018      	movs	r0, r3
 8018798:	f000 fab7 	bl	8018d0a <prvIsQueueFull>
 801879c:	1e03      	subs	r3, r0, #0
 801879e:	d011      	beq.n	80187c4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80187a0:	6a3b      	ldr	r3, [r7, #32]
 80187a2:	3310      	adds	r3, #16
 80187a4:	687a      	ldr	r2, [r7, #4]
 80187a6:	0011      	movs	r1, r2
 80187a8:	0018      	movs	r0, r3
 80187aa:	f001 f837 	bl	801981c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80187ae:	6a3b      	ldr	r3, [r7, #32]
 80187b0:	0018      	movs	r0, r3
 80187b2:	f000 fa36 	bl	8018c22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80187b6:	f000 fe8d 	bl	80194d4 <xTaskResumeAll>
 80187ba:	1e03      	subs	r3, r0, #0
 80187bc:	d18a      	bne.n	80186d4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80187be:	f001 fe7f 	bl	801a4c0 <vPortYield>
 80187c2:	e787      	b.n	80186d4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80187c4:	6a3b      	ldr	r3, [r7, #32]
 80187c6:	0018      	movs	r0, r3
 80187c8:	f000 fa2b 	bl	8018c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80187cc:	f000 fe82 	bl	80194d4 <xTaskResumeAll>
 80187d0:	e780      	b.n	80186d4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80187d2:	6a3b      	ldr	r3, [r7, #32]
 80187d4:	0018      	movs	r0, r3
 80187d6:	f000 fa24 	bl	8018c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80187da:	f000 fe7b 	bl	80194d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80187de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80187e0:	0018      	movs	r0, r3
 80187e2:	46bd      	mov	sp, r7
 80187e4:	b00a      	add	sp, #40	; 0x28
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80187e8:	b590      	push	{r4, r7, lr}
 80187ea:	b08b      	sub	sp, #44	; 0x2c
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	60f8      	str	r0, [r7, #12]
 80187f0:	60b9      	str	r1, [r7, #8]
 80187f2:	607a      	str	r2, [r7, #4]
 80187f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80187fa:	6a3b      	ldr	r3, [r7, #32]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d101      	bne.n	8018804 <xQueueGenericSendFromISR+0x1c>
 8018800:	b672      	cpsid	i
 8018802:	e7fe      	b.n	8018802 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018804:	68bb      	ldr	r3, [r7, #8]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d103      	bne.n	8018812 <xQueueGenericSendFromISR+0x2a>
 801880a:	6a3b      	ldr	r3, [r7, #32]
 801880c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801880e:	2b00      	cmp	r3, #0
 8018810:	d101      	bne.n	8018816 <xQueueGenericSendFromISR+0x2e>
 8018812:	2301      	movs	r3, #1
 8018814:	e000      	b.n	8018818 <xQueueGenericSendFromISR+0x30>
 8018816:	2300      	movs	r3, #0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d101      	bne.n	8018820 <xQueueGenericSendFromISR+0x38>
 801881c:	b672      	cpsid	i
 801881e:	e7fe      	b.n	801881e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	2b02      	cmp	r3, #2
 8018824:	d103      	bne.n	801882e <xQueueGenericSendFromISR+0x46>
 8018826:	6a3b      	ldr	r3, [r7, #32]
 8018828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801882a:	2b01      	cmp	r3, #1
 801882c:	d101      	bne.n	8018832 <xQueueGenericSendFromISR+0x4a>
 801882e:	2301      	movs	r3, #1
 8018830:	e000      	b.n	8018834 <xQueueGenericSendFromISR+0x4c>
 8018832:	2300      	movs	r3, #0
 8018834:	2b00      	cmp	r3, #0
 8018836:	d101      	bne.n	801883c <xQueueGenericSendFromISR+0x54>
 8018838:	b672      	cpsid	i
 801883a:	e7fe      	b.n	801883a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801883c:	f001 fe7a 	bl	801a534 <ulSetInterruptMaskFromISR>
 8018840:	0003      	movs	r3, r0
 8018842:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018844:	6a3b      	ldr	r3, [r7, #32]
 8018846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018848:	6a3b      	ldr	r3, [r7, #32]
 801884a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801884c:	429a      	cmp	r2, r3
 801884e:	d302      	bcc.n	8018856 <xQueueGenericSendFromISR+0x6e>
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	2b02      	cmp	r3, #2
 8018854:	d131      	bne.n	80188ba <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018856:	241b      	movs	r4, #27
 8018858:	193b      	adds	r3, r7, r4
 801885a:	6a3a      	ldr	r2, [r7, #32]
 801885c:	2145      	movs	r1, #69	; 0x45
 801885e:	5c52      	ldrb	r2, [r2, r1]
 8018860:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018862:	6a3b      	ldr	r3, [r7, #32]
 8018864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018866:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018868:	683a      	ldr	r2, [r7, #0]
 801886a:	68b9      	ldr	r1, [r7, #8]
 801886c:	6a3b      	ldr	r3, [r7, #32]
 801886e:	0018      	movs	r0, r3
 8018870:	f000 f946 	bl	8018b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8018874:	193b      	adds	r3, r7, r4
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	b25b      	sxtb	r3, r3
 801887a:	3301      	adds	r3, #1
 801887c:	d111      	bne.n	80188a2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801887e:	6a3b      	ldr	r3, [r7, #32]
 8018880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018882:	2b00      	cmp	r3, #0
 8018884:	d016      	beq.n	80188b4 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018886:	6a3b      	ldr	r3, [r7, #32]
 8018888:	3324      	adds	r3, #36	; 0x24
 801888a:	0018      	movs	r0, r3
 801888c:	f001 f80a 	bl	80198a4 <xTaskRemoveFromEventList>
 8018890:	1e03      	subs	r3, r0, #0
 8018892:	d00f      	beq.n	80188b4 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d00c      	beq.n	80188b4 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	2201      	movs	r2, #1
 801889e:	601a      	str	r2, [r3, #0]
 80188a0:	e008      	b.n	80188b4 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80188a2:	231b      	movs	r3, #27
 80188a4:	18fb      	adds	r3, r7, r3
 80188a6:	781b      	ldrb	r3, [r3, #0]
 80188a8:	3301      	adds	r3, #1
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	b259      	sxtb	r1, r3
 80188ae:	6a3b      	ldr	r3, [r7, #32]
 80188b0:	2245      	movs	r2, #69	; 0x45
 80188b2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80188b4:	2301      	movs	r3, #1
 80188b6:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80188b8:	e001      	b.n	80188be <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80188ba:	2300      	movs	r3, #0
 80188bc:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80188be:	69fb      	ldr	r3, [r7, #28]
 80188c0:	0018      	movs	r0, r3
 80188c2:	f001 fe3d 	bl	801a540 <vClearInterruptMaskFromISR>

	return xReturn;
 80188c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80188c8:	0018      	movs	r0, r3
 80188ca:	46bd      	mov	sp, r7
 80188cc:	b00b      	add	sp, #44	; 0x2c
 80188ce:	bd90      	pop	{r4, r7, pc}

080188d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b08a      	sub	sp, #40	; 0x28
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80188dc:	2300      	movs	r3, #0
 80188de:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80188e4:	6a3b      	ldr	r3, [r7, #32]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d101      	bne.n	80188ee <xQueueReceive+0x1e>
 80188ea:	b672      	cpsid	i
 80188ec:	e7fe      	b.n	80188ec <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d103      	bne.n	80188fc <xQueueReceive+0x2c>
 80188f4:	6a3b      	ldr	r3, [r7, #32]
 80188f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d101      	bne.n	8018900 <xQueueReceive+0x30>
 80188fc:	2301      	movs	r3, #1
 80188fe:	e000      	b.n	8018902 <xQueueReceive+0x32>
 8018900:	2300      	movs	r3, #0
 8018902:	2b00      	cmp	r3, #0
 8018904:	d101      	bne.n	801890a <xQueueReceive+0x3a>
 8018906:	b672      	cpsid	i
 8018908:	e7fe      	b.n	8018908 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801890a:	f001 f971 	bl	8019bf0 <xTaskGetSchedulerState>
 801890e:	1e03      	subs	r3, r0, #0
 8018910:	d102      	bne.n	8018918 <xQueueReceive+0x48>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d101      	bne.n	801891c <xQueueReceive+0x4c>
 8018918:	2301      	movs	r3, #1
 801891a:	e000      	b.n	801891e <xQueueReceive+0x4e>
 801891c:	2300      	movs	r3, #0
 801891e:	2b00      	cmp	r3, #0
 8018920:	d101      	bne.n	8018926 <xQueueReceive+0x56>
 8018922:	b672      	cpsid	i
 8018924:	e7fe      	b.n	8018924 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018926:	f001 fddb 	bl	801a4e0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801892a:	6a3b      	ldr	r3, [r7, #32]
 801892c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801892e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d01a      	beq.n	801896c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018936:	68ba      	ldr	r2, [r7, #8]
 8018938:	6a3b      	ldr	r3, [r7, #32]
 801893a:	0011      	movs	r1, r2
 801893c:	0018      	movs	r0, r3
 801893e:	f000 f94a 	bl	8018bd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018942:	69fb      	ldr	r3, [r7, #28]
 8018944:	1e5a      	subs	r2, r3, #1
 8018946:	6a3b      	ldr	r3, [r7, #32]
 8018948:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801894a:	6a3b      	ldr	r3, [r7, #32]
 801894c:	691b      	ldr	r3, [r3, #16]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d008      	beq.n	8018964 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018952:	6a3b      	ldr	r3, [r7, #32]
 8018954:	3310      	adds	r3, #16
 8018956:	0018      	movs	r0, r3
 8018958:	f000 ffa4 	bl	80198a4 <xTaskRemoveFromEventList>
 801895c:	1e03      	subs	r3, r0, #0
 801895e:	d001      	beq.n	8018964 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018960:	f001 fdae 	bl	801a4c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018964:	f001 fdce 	bl	801a504 <vPortExitCritical>
				return pdPASS;
 8018968:	2301      	movs	r3, #1
 801896a:	e062      	b.n	8018a32 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d103      	bne.n	801897a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018972:	f001 fdc7 	bl	801a504 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018976:	2300      	movs	r3, #0
 8018978:	e05b      	b.n	8018a32 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 801897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801897c:	2b00      	cmp	r3, #0
 801897e:	d106      	bne.n	801898e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018980:	2314      	movs	r3, #20
 8018982:	18fb      	adds	r3, r7, r3
 8018984:	0018      	movs	r0, r3
 8018986:	f000 ffe9 	bl	801995c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801898a:	2301      	movs	r3, #1
 801898c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801898e:	f001 fdb9 	bl	801a504 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018992:	f000 fd93 	bl	80194bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018996:	f001 fda3 	bl	801a4e0 <vPortEnterCritical>
 801899a:	6a3b      	ldr	r3, [r7, #32]
 801899c:	2244      	movs	r2, #68	; 0x44
 801899e:	5c9b      	ldrb	r3, [r3, r2]
 80189a0:	b25b      	sxtb	r3, r3
 80189a2:	3301      	adds	r3, #1
 80189a4:	d103      	bne.n	80189ae <xQueueReceive+0xde>
 80189a6:	6a3b      	ldr	r3, [r7, #32]
 80189a8:	2244      	movs	r2, #68	; 0x44
 80189aa:	2100      	movs	r1, #0
 80189ac:	5499      	strb	r1, [r3, r2]
 80189ae:	6a3b      	ldr	r3, [r7, #32]
 80189b0:	2245      	movs	r2, #69	; 0x45
 80189b2:	5c9b      	ldrb	r3, [r3, r2]
 80189b4:	b25b      	sxtb	r3, r3
 80189b6:	3301      	adds	r3, #1
 80189b8:	d103      	bne.n	80189c2 <xQueueReceive+0xf2>
 80189ba:	6a3b      	ldr	r3, [r7, #32]
 80189bc:	2245      	movs	r2, #69	; 0x45
 80189be:	2100      	movs	r1, #0
 80189c0:	5499      	strb	r1, [r3, r2]
 80189c2:	f001 fd9f 	bl	801a504 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80189c6:	1d3a      	adds	r2, r7, #4
 80189c8:	2314      	movs	r3, #20
 80189ca:	18fb      	adds	r3, r7, r3
 80189cc:	0011      	movs	r1, r2
 80189ce:	0018      	movs	r0, r3
 80189d0:	f000 ffd8 	bl	8019984 <xTaskCheckForTimeOut>
 80189d4:	1e03      	subs	r3, r0, #0
 80189d6:	d11e      	bne.n	8018a16 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80189d8:	6a3b      	ldr	r3, [r7, #32]
 80189da:	0018      	movs	r0, r3
 80189dc:	f000 f97f 	bl	8018cde <prvIsQueueEmpty>
 80189e0:	1e03      	subs	r3, r0, #0
 80189e2:	d011      	beq.n	8018a08 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80189e4:	6a3b      	ldr	r3, [r7, #32]
 80189e6:	3324      	adds	r3, #36	; 0x24
 80189e8:	687a      	ldr	r2, [r7, #4]
 80189ea:	0011      	movs	r1, r2
 80189ec:	0018      	movs	r0, r3
 80189ee:	f000 ff15 	bl	801981c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	0018      	movs	r0, r3
 80189f6:	f000 f914 	bl	8018c22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80189fa:	f000 fd6b 	bl	80194d4 <xTaskResumeAll>
 80189fe:	1e03      	subs	r3, r0, #0
 8018a00:	d191      	bne.n	8018926 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8018a02:	f001 fd5d 	bl	801a4c0 <vPortYield>
 8018a06:	e78e      	b.n	8018926 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018a08:	6a3b      	ldr	r3, [r7, #32]
 8018a0a:	0018      	movs	r0, r3
 8018a0c:	f000 f909 	bl	8018c22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018a10:	f000 fd60 	bl	80194d4 <xTaskResumeAll>
 8018a14:	e787      	b.n	8018926 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018a16:	6a3b      	ldr	r3, [r7, #32]
 8018a18:	0018      	movs	r0, r3
 8018a1a:	f000 f902 	bl	8018c22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018a1e:	f000 fd59 	bl	80194d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a22:	6a3b      	ldr	r3, [r7, #32]
 8018a24:	0018      	movs	r0, r3
 8018a26:	f000 f95a 	bl	8018cde <prvIsQueueEmpty>
 8018a2a:	1e03      	subs	r3, r0, #0
 8018a2c:	d100      	bne.n	8018a30 <xQueueReceive+0x160>
 8018a2e:	e77a      	b.n	8018926 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018a30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018a32:	0018      	movs	r0, r3
 8018a34:	46bd      	mov	sp, r7
 8018a36:	b00a      	add	sp, #40	; 0x28
 8018a38:	bd80      	pop	{r7, pc}

08018a3a <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8018a3a:	b590      	push	{r4, r7, lr}
 8018a3c:	b08b      	sub	sp, #44	; 0x2c
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	60f8      	str	r0, [r7, #12]
 8018a42:	60b9      	str	r1, [r7, #8]
 8018a44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018a46:	68fb      	ldr	r3, [r7, #12]
 8018a48:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8018a4a:	6a3b      	ldr	r3, [r7, #32]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d101      	bne.n	8018a54 <xQueueReceiveFromISR+0x1a>
 8018a50:	b672      	cpsid	i
 8018a52:	e7fe      	b.n	8018a52 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d103      	bne.n	8018a62 <xQueueReceiveFromISR+0x28>
 8018a5a:	6a3b      	ldr	r3, [r7, #32]
 8018a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d101      	bne.n	8018a66 <xQueueReceiveFromISR+0x2c>
 8018a62:	2301      	movs	r3, #1
 8018a64:	e000      	b.n	8018a68 <xQueueReceiveFromISR+0x2e>
 8018a66:	2300      	movs	r3, #0
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d101      	bne.n	8018a70 <xQueueReceiveFromISR+0x36>
 8018a6c:	b672      	cpsid	i
 8018a6e:	e7fe      	b.n	8018a6e <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018a70:	f001 fd60 	bl	801a534 <ulSetInterruptMaskFromISR>
 8018a74:	0003      	movs	r3, r0
 8018a76:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a78:	6a3b      	ldr	r3, [r7, #32]
 8018a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a7c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018a7e:	69bb      	ldr	r3, [r7, #24]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d032      	beq.n	8018aea <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8018a84:	2417      	movs	r4, #23
 8018a86:	193b      	adds	r3, r7, r4
 8018a88:	6a3a      	ldr	r2, [r7, #32]
 8018a8a:	2144      	movs	r1, #68	; 0x44
 8018a8c:	5c52      	ldrb	r2, [r2, r1]
 8018a8e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018a90:	68ba      	ldr	r2, [r7, #8]
 8018a92:	6a3b      	ldr	r3, [r7, #32]
 8018a94:	0011      	movs	r1, r2
 8018a96:	0018      	movs	r0, r3
 8018a98:	f000 f89d 	bl	8018bd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018a9c:	69bb      	ldr	r3, [r7, #24]
 8018a9e:	1e5a      	subs	r2, r3, #1
 8018aa0:	6a3b      	ldr	r3, [r7, #32]
 8018aa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8018aa4:	193b      	adds	r3, r7, r4
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	b25b      	sxtb	r3, r3
 8018aaa:	3301      	adds	r3, #1
 8018aac:	d111      	bne.n	8018ad2 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018aae:	6a3b      	ldr	r3, [r7, #32]
 8018ab0:	691b      	ldr	r3, [r3, #16]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d016      	beq.n	8018ae4 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	3310      	adds	r3, #16
 8018aba:	0018      	movs	r0, r3
 8018abc:	f000 fef2 	bl	80198a4 <xTaskRemoveFromEventList>
 8018ac0:	1e03      	subs	r3, r0, #0
 8018ac2:	d00f      	beq.n	8018ae4 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d00c      	beq.n	8018ae4 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2201      	movs	r2, #1
 8018ace:	601a      	str	r2, [r3, #0]
 8018ad0:	e008      	b.n	8018ae4 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8018ad2:	2317      	movs	r3, #23
 8018ad4:	18fb      	adds	r3, r7, r3
 8018ad6:	781b      	ldrb	r3, [r3, #0]
 8018ad8:	3301      	adds	r3, #1
 8018ada:	b2db      	uxtb	r3, r3
 8018adc:	b259      	sxtb	r1, r3
 8018ade:	6a3b      	ldr	r3, [r7, #32]
 8018ae0:	2244      	movs	r2, #68	; 0x44
 8018ae2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8018ae8:	e001      	b.n	8018aee <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 8018aea:	2300      	movs	r3, #0
 8018aec:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8018aee:	69fb      	ldr	r3, [r7, #28]
 8018af0:	0018      	movs	r0, r3
 8018af2:	f001 fd25 	bl	801a540 <vClearInterruptMaskFromISR>

	return xReturn;
 8018af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018af8:	0018      	movs	r0, r3
 8018afa:	46bd      	mov	sp, r7
 8018afc:	b00b      	add	sp, #44	; 0x2c
 8018afe:	bd90      	pop	{r4, r7, pc}

08018b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b086      	sub	sp, #24
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d10e      	bne.n	8018b3c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d14e      	bne.n	8018bc4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	689b      	ldr	r3, [r3, #8]
 8018b2a:	0018      	movs	r0, r3
 8018b2c:	f001 f87c 	bl	8019c28 <xTaskPriorityDisinherit>
 8018b30:	0003      	movs	r3, r0
 8018b32:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	2200      	movs	r2, #0
 8018b38:	609a      	str	r2, [r3, #8]
 8018b3a:	e043      	b.n	8018bc4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d119      	bne.n	8018b76 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	6858      	ldr	r0, [r3, #4]
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018b4a:	68bb      	ldr	r3, [r7, #8]
 8018b4c:	0019      	movs	r1, r3
 8018b4e:	f00a fe15 	bl	802377c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	685a      	ldr	r2, [r3, #4]
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b5a:	18d2      	adds	r2, r2, r3
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	685a      	ldr	r2, [r3, #4]
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	689b      	ldr	r3, [r3, #8]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d32b      	bcc.n	8018bc4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	681a      	ldr	r2, [r3, #0]
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	605a      	str	r2, [r3, #4]
 8018b74:	e026      	b.n	8018bc4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	68d8      	ldr	r0, [r3, #12]
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018b7e:	68bb      	ldr	r3, [r7, #8]
 8018b80:	0019      	movs	r1, r3
 8018b82:	f00a fdfb 	bl	802377c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	68da      	ldr	r2, [r3, #12]
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b8e:	425b      	negs	r3, r3
 8018b90:	18d2      	adds	r2, r2, r3
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	68da      	ldr	r2, [r3, #12]
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d207      	bcs.n	8018bb2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	689a      	ldr	r2, [r3, #8]
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018baa:	425b      	negs	r3, r3
 8018bac:	18d2      	adds	r2, r2, r3
 8018bae:	68fb      	ldr	r3, [r7, #12]
 8018bb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	2b02      	cmp	r3, #2
 8018bb6:	d105      	bne.n	8018bc4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018bb8:	693b      	ldr	r3, [r7, #16]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d002      	beq.n	8018bc4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018bbe:	693b      	ldr	r3, [r7, #16]
 8018bc0:	3b01      	subs	r3, #1
 8018bc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018bc4:	693b      	ldr	r3, [r7, #16]
 8018bc6:	1c5a      	adds	r2, r3, #1
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018bcc:	697b      	ldr	r3, [r7, #20]
}
 8018bce:	0018      	movs	r0, r3
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	b006      	add	sp, #24
 8018bd4:	bd80      	pop	{r7, pc}

08018bd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018bd6:	b580      	push	{r7, lr}
 8018bd8:	b082      	sub	sp, #8
 8018bda:	af00      	add	r7, sp, #0
 8018bdc:	6078      	str	r0, [r7, #4]
 8018bde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d018      	beq.n	8018c1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	68da      	ldr	r2, [r3, #12]
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bf0:	18d2      	adds	r2, r2, r3
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	68da      	ldr	r2, [r3, #12]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	689b      	ldr	r3, [r3, #8]
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d303      	bcc.n	8018c0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	681a      	ldr	r2, [r3, #0]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	68d9      	ldr	r1, [r3, #12]
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	0018      	movs	r0, r3
 8018c16:	f00a fdb1 	bl	802377c <memcpy>
	}
}
 8018c1a:	46c0      	nop			; (mov r8, r8)
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	b002      	add	sp, #8
 8018c20:	bd80      	pop	{r7, pc}

08018c22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018c22:	b580      	push	{r7, lr}
 8018c24:	b084      	sub	sp, #16
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018c2a:	f001 fc59 	bl	801a4e0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018c2e:	230f      	movs	r3, #15
 8018c30:	18fb      	adds	r3, r7, r3
 8018c32:	687a      	ldr	r2, [r7, #4]
 8018c34:	2145      	movs	r1, #69	; 0x45
 8018c36:	5c52      	ldrb	r2, [r2, r1]
 8018c38:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c3a:	e013      	b.n	8018c64 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d016      	beq.n	8018c72 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	3324      	adds	r3, #36	; 0x24
 8018c48:	0018      	movs	r0, r3
 8018c4a:	f000 fe2b 	bl	80198a4 <xTaskRemoveFromEventList>
 8018c4e:	1e03      	subs	r3, r0, #0
 8018c50:	d001      	beq.n	8018c56 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018c52:	f000 fee7 	bl	8019a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018c56:	210f      	movs	r1, #15
 8018c58:	187b      	adds	r3, r7, r1
 8018c5a:	781b      	ldrb	r3, [r3, #0]
 8018c5c:	3b01      	subs	r3, #1
 8018c5e:	b2da      	uxtb	r2, r3
 8018c60:	187b      	adds	r3, r7, r1
 8018c62:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018c64:	230f      	movs	r3, #15
 8018c66:	18fb      	adds	r3, r7, r3
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	b25b      	sxtb	r3, r3
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	dce5      	bgt.n	8018c3c <prvUnlockQueue+0x1a>
 8018c70:	e000      	b.n	8018c74 <prvUnlockQueue+0x52>
					break;
 8018c72:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2245      	movs	r2, #69	; 0x45
 8018c78:	21ff      	movs	r1, #255	; 0xff
 8018c7a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8018c7c:	f001 fc42 	bl	801a504 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018c80:	f001 fc2e 	bl	801a4e0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018c84:	230e      	movs	r3, #14
 8018c86:	18fb      	adds	r3, r7, r3
 8018c88:	687a      	ldr	r2, [r7, #4]
 8018c8a:	2144      	movs	r1, #68	; 0x44
 8018c8c:	5c52      	ldrb	r2, [r2, r1]
 8018c8e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018c90:	e013      	b.n	8018cba <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	691b      	ldr	r3, [r3, #16]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d016      	beq.n	8018cc8 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	3310      	adds	r3, #16
 8018c9e:	0018      	movs	r0, r3
 8018ca0:	f000 fe00 	bl	80198a4 <xTaskRemoveFromEventList>
 8018ca4:	1e03      	subs	r3, r0, #0
 8018ca6:	d001      	beq.n	8018cac <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8018ca8:	f000 febc 	bl	8019a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018cac:	210e      	movs	r1, #14
 8018cae:	187b      	adds	r3, r7, r1
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	3b01      	subs	r3, #1
 8018cb4:	b2da      	uxtb	r2, r3
 8018cb6:	187b      	adds	r3, r7, r1
 8018cb8:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018cba:	230e      	movs	r3, #14
 8018cbc:	18fb      	adds	r3, r7, r3
 8018cbe:	781b      	ldrb	r3, [r3, #0]
 8018cc0:	b25b      	sxtb	r3, r3
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	dce5      	bgt.n	8018c92 <prvUnlockQueue+0x70>
 8018cc6:	e000      	b.n	8018cca <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8018cc8:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	2244      	movs	r2, #68	; 0x44
 8018cce:	21ff      	movs	r1, #255	; 0xff
 8018cd0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8018cd2:	f001 fc17 	bl	801a504 <vPortExitCritical>
}
 8018cd6:	46c0      	nop			; (mov r8, r8)
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	b004      	add	sp, #16
 8018cdc:	bd80      	pop	{r7, pc}

08018cde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018cde:	b580      	push	{r7, lr}
 8018ce0:	b084      	sub	sp, #16
 8018ce2:	af00      	add	r7, sp, #0
 8018ce4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018ce6:	f001 fbfb 	bl	801a4e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d102      	bne.n	8018cf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018cf2:	2301      	movs	r3, #1
 8018cf4:	60fb      	str	r3, [r7, #12]
 8018cf6:	e001      	b.n	8018cfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018cfc:	f001 fc02 	bl	801a504 <vPortExitCritical>

	return xReturn;
 8018d00:	68fb      	ldr	r3, [r7, #12]
}
 8018d02:	0018      	movs	r0, r3
 8018d04:	46bd      	mov	sp, r7
 8018d06:	b004      	add	sp, #16
 8018d08:	bd80      	pop	{r7, pc}

08018d0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018d0a:	b580      	push	{r7, lr}
 8018d0c:	b084      	sub	sp, #16
 8018d0e:	af00      	add	r7, sp, #0
 8018d10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018d12:	f001 fbe5 	bl	801a4e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d1e:	429a      	cmp	r2, r3
 8018d20:	d102      	bne.n	8018d28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018d22:	2301      	movs	r3, #1
 8018d24:	60fb      	str	r3, [r7, #12]
 8018d26:	e001      	b.n	8018d2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018d28:	2300      	movs	r3, #0
 8018d2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018d2c:	f001 fbea 	bl	801a504 <vPortExitCritical>

	return xReturn;
 8018d30:	68fb      	ldr	r3, [r7, #12]
}
 8018d32:	0018      	movs	r0, r3
 8018d34:	46bd      	mov	sp, r7
 8018d36:	b004      	add	sp, #16
 8018d38:	bd80      	pop	{r7, pc}
	...

08018d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d46:	2300      	movs	r3, #0
 8018d48:	60fb      	str	r3, [r7, #12]
 8018d4a:	e015      	b.n	8018d78 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018d4c:	4b0e      	ldr	r3, [pc, #56]	; (8018d88 <vQueueAddToRegistry+0x4c>)
 8018d4e:	68fa      	ldr	r2, [r7, #12]
 8018d50:	00d2      	lsls	r2, r2, #3
 8018d52:	58d3      	ldr	r3, [r2, r3]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d10c      	bne.n	8018d72 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018d58:	4b0b      	ldr	r3, [pc, #44]	; (8018d88 <vQueueAddToRegistry+0x4c>)
 8018d5a:	68fa      	ldr	r2, [r7, #12]
 8018d5c:	00d2      	lsls	r2, r2, #3
 8018d5e:	6839      	ldr	r1, [r7, #0]
 8018d60:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018d62:	4a09      	ldr	r2, [pc, #36]	; (8018d88 <vQueueAddToRegistry+0x4c>)
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	00db      	lsls	r3, r3, #3
 8018d68:	18d3      	adds	r3, r2, r3
 8018d6a:	3304      	adds	r3, #4
 8018d6c:	687a      	ldr	r2, [r7, #4]
 8018d6e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018d70:	e006      	b.n	8018d80 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	3301      	adds	r3, #1
 8018d76:	60fb      	str	r3, [r7, #12]
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	2b07      	cmp	r3, #7
 8018d7c:	d9e6      	bls.n	8018d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018d7e:	46c0      	nop			; (mov r8, r8)
 8018d80:	46c0      	nop			; (mov r8, r8)
 8018d82:	46bd      	mov	sp, r7
 8018d84:	b004      	add	sp, #16
 8018d86:	bd80      	pop	{r7, pc}
 8018d88:	20000d40 	.word	0x20000d40

08018d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b086      	sub	sp, #24
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	60f8      	str	r0, [r7, #12]
 8018d94:	60b9      	str	r1, [r7, #8]
 8018d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018d9c:	f001 fba0 	bl	801a4e0 <vPortEnterCritical>
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	2244      	movs	r2, #68	; 0x44
 8018da4:	5c9b      	ldrb	r3, [r3, r2]
 8018da6:	b25b      	sxtb	r3, r3
 8018da8:	3301      	adds	r3, #1
 8018daa:	d103      	bne.n	8018db4 <vQueueWaitForMessageRestricted+0x28>
 8018dac:	697b      	ldr	r3, [r7, #20]
 8018dae:	2244      	movs	r2, #68	; 0x44
 8018db0:	2100      	movs	r1, #0
 8018db2:	5499      	strb	r1, [r3, r2]
 8018db4:	697b      	ldr	r3, [r7, #20]
 8018db6:	2245      	movs	r2, #69	; 0x45
 8018db8:	5c9b      	ldrb	r3, [r3, r2]
 8018dba:	b25b      	sxtb	r3, r3
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	d103      	bne.n	8018dc8 <vQueueWaitForMessageRestricted+0x3c>
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	2245      	movs	r2, #69	; 0x45
 8018dc4:	2100      	movs	r1, #0
 8018dc6:	5499      	strb	r1, [r3, r2]
 8018dc8:	f001 fb9c 	bl	801a504 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018dcc:	697b      	ldr	r3, [r7, #20]
 8018dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d106      	bne.n	8018de2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	3324      	adds	r3, #36	; 0x24
 8018dd8:	687a      	ldr	r2, [r7, #4]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	0018      	movs	r0, r3
 8018dde:	f000 fd3b 	bl	8019858 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018de2:	697b      	ldr	r3, [r7, #20]
 8018de4:	0018      	movs	r0, r3
 8018de6:	f7ff ff1c 	bl	8018c22 <prvUnlockQueue>
	}
 8018dea:	46c0      	nop			; (mov r8, r8)
 8018dec:	46bd      	mov	sp, r7
 8018dee:	b006      	add	sp, #24
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018df2:	b590      	push	{r4, r7, lr}
 8018df4:	b08d      	sub	sp, #52	; 0x34
 8018df6:	af04      	add	r7, sp, #16
 8018df8:	60f8      	str	r0, [r7, #12]
 8018dfa:	60b9      	str	r1, [r7, #8]
 8018dfc:	607a      	str	r2, [r7, #4]
 8018dfe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d101      	bne.n	8018e0a <xTaskCreateStatic+0x18>
 8018e06:	b672      	cpsid	i
 8018e08:	e7fe      	b.n	8018e08 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8018e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d101      	bne.n	8018e14 <xTaskCreateStatic+0x22>
 8018e10:	b672      	cpsid	i
 8018e12:	e7fe      	b.n	8018e12 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018e14:	23a8      	movs	r3, #168	; 0xa8
 8018e16:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	2ba8      	cmp	r3, #168	; 0xa8
 8018e1c:	d001      	beq.n	8018e22 <xTaskCreateStatic+0x30>
 8018e1e:	b672      	cpsid	i
 8018e20:	e7fe      	b.n	8018e20 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018e22:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d020      	beq.n	8018e6c <xTaskCreateStatic+0x7a>
 8018e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d01d      	beq.n	8018e6c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e32:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018e34:	69fb      	ldr	r3, [r7, #28]
 8018e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018e38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018e3a:	69fb      	ldr	r3, [r7, #28]
 8018e3c:	22a5      	movs	r2, #165	; 0xa5
 8018e3e:	2102      	movs	r1, #2
 8018e40:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018e42:	683c      	ldr	r4, [r7, #0]
 8018e44:	687a      	ldr	r2, [r7, #4]
 8018e46:	68b9      	ldr	r1, [r7, #8]
 8018e48:	68f8      	ldr	r0, [r7, #12]
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	9303      	str	r3, [sp, #12]
 8018e4e:	69fb      	ldr	r3, [r7, #28]
 8018e50:	9302      	str	r3, [sp, #8]
 8018e52:	2318      	movs	r3, #24
 8018e54:	18fb      	adds	r3, r7, r3
 8018e56:	9301      	str	r3, [sp, #4]
 8018e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e5a:	9300      	str	r3, [sp, #0]
 8018e5c:	0023      	movs	r3, r4
 8018e5e:	f000 f859 	bl	8018f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018e62:	69fb      	ldr	r3, [r7, #28]
 8018e64:	0018      	movs	r0, r3
 8018e66:	f000 f8f5 	bl	8019054 <prvAddNewTaskToReadyList>
 8018e6a:	e001      	b.n	8018e70 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8018e6c:	2300      	movs	r3, #0
 8018e6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018e70:	69bb      	ldr	r3, [r7, #24]
	}
 8018e72:	0018      	movs	r0, r3
 8018e74:	46bd      	mov	sp, r7
 8018e76:	b009      	add	sp, #36	; 0x24
 8018e78:	bd90      	pop	{r4, r7, pc}

08018e7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018e7a:	b590      	push	{r4, r7, lr}
 8018e7c:	b08d      	sub	sp, #52	; 0x34
 8018e7e:	af04      	add	r7, sp, #16
 8018e80:	60f8      	str	r0, [r7, #12]
 8018e82:	60b9      	str	r1, [r7, #8]
 8018e84:	603b      	str	r3, [r7, #0]
 8018e86:	1dbb      	adds	r3, r7, #6
 8018e88:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018e8a:	1dbb      	adds	r3, r7, #6
 8018e8c:	881b      	ldrh	r3, [r3, #0]
 8018e8e:	009b      	lsls	r3, r3, #2
 8018e90:	0018      	movs	r0, r3
 8018e92:	f001 fbbd 	bl	801a610 <pvPortMalloc>
 8018e96:	0003      	movs	r3, r0
 8018e98:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8018e9a:	697b      	ldr	r3, [r7, #20]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d010      	beq.n	8018ec2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018ea0:	20a8      	movs	r0, #168	; 0xa8
 8018ea2:	f001 fbb5 	bl	801a610 <pvPortMalloc>
 8018ea6:	0003      	movs	r3, r0
 8018ea8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d003      	beq.n	8018eb8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018eb0:	69fb      	ldr	r3, [r7, #28]
 8018eb2:	697a      	ldr	r2, [r7, #20]
 8018eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8018eb6:	e006      	b.n	8018ec6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018eb8:	697b      	ldr	r3, [r7, #20]
 8018eba:	0018      	movs	r0, r3
 8018ebc:	f001 fc54 	bl	801a768 <vPortFree>
 8018ec0:	e001      	b.n	8018ec6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018ec6:	69fb      	ldr	r3, [r7, #28]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d01a      	beq.n	8018f02 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018ecc:	69fb      	ldr	r3, [r7, #28]
 8018ece:	22a5      	movs	r2, #165	; 0xa5
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018ed4:	1dbb      	adds	r3, r7, #6
 8018ed6:	881a      	ldrh	r2, [r3, #0]
 8018ed8:	683c      	ldr	r4, [r7, #0]
 8018eda:	68b9      	ldr	r1, [r7, #8]
 8018edc:	68f8      	ldr	r0, [r7, #12]
 8018ede:	2300      	movs	r3, #0
 8018ee0:	9303      	str	r3, [sp, #12]
 8018ee2:	69fb      	ldr	r3, [r7, #28]
 8018ee4:	9302      	str	r3, [sp, #8]
 8018ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ee8:	9301      	str	r3, [sp, #4]
 8018eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018eec:	9300      	str	r3, [sp, #0]
 8018eee:	0023      	movs	r3, r4
 8018ef0:	f000 f810 	bl	8018f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018ef4:	69fb      	ldr	r3, [r7, #28]
 8018ef6:	0018      	movs	r0, r3
 8018ef8:	f000 f8ac 	bl	8019054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018efc:	2301      	movs	r3, #1
 8018efe:	61bb      	str	r3, [r7, #24]
 8018f00:	e002      	b.n	8018f08 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018f02:	2301      	movs	r3, #1
 8018f04:	425b      	negs	r3, r3
 8018f06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018f08:	69bb      	ldr	r3, [r7, #24]
	}
 8018f0a:	0018      	movs	r0, r3
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	b009      	add	sp, #36	; 0x24
 8018f10:	bd90      	pop	{r4, r7, pc}
	...

08018f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b086      	sub	sp, #24
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	60f8      	str	r0, [r7, #12]
 8018f1c:	60b9      	str	r1, [r7, #8]
 8018f1e:	607a      	str	r2, [r7, #4]
 8018f20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	001a      	movs	r2, r3
 8018f2c:	21a5      	movs	r1, #165	; 0xa5
 8018f2e:	f00a fb71 	bl	8023614 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	4942      	ldr	r1, [pc, #264]	; (8019044 <prvInitialiseNewTask+0x130>)
 8018f3a:	468c      	mov	ip, r1
 8018f3c:	4463      	add	r3, ip
 8018f3e:	009b      	lsls	r3, r3, #2
 8018f40:	18d3      	adds	r3, r2, r3
 8018f42:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018f44:	693b      	ldr	r3, [r7, #16]
 8018f46:	2207      	movs	r2, #7
 8018f48:	4393      	bics	r3, r2
 8018f4a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018f4c:	693b      	ldr	r3, [r7, #16]
 8018f4e:	2207      	movs	r2, #7
 8018f50:	4013      	ands	r3, r2
 8018f52:	d001      	beq.n	8018f58 <prvInitialiseNewTask+0x44>
 8018f54:	b672      	cpsid	i
 8018f56:	e7fe      	b.n	8018f56 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018f58:	68bb      	ldr	r3, [r7, #8]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d020      	beq.n	8018fa0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f5e:	2300      	movs	r3, #0
 8018f60:	617b      	str	r3, [r7, #20]
 8018f62:	e013      	b.n	8018f8c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018f64:	68ba      	ldr	r2, [r7, #8]
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	18d3      	adds	r3, r2, r3
 8018f6a:	7818      	ldrb	r0, [r3, #0]
 8018f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f6e:	2134      	movs	r1, #52	; 0x34
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	18d3      	adds	r3, r2, r3
 8018f74:	185b      	adds	r3, r3, r1
 8018f76:	1c02      	adds	r2, r0, #0
 8018f78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018f7a:	68ba      	ldr	r2, [r7, #8]
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	18d3      	adds	r3, r2, r3
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	d006      	beq.n	8018f94 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	3301      	adds	r3, #1
 8018f8a:	617b      	str	r3, [r7, #20]
 8018f8c:	697b      	ldr	r3, [r7, #20]
 8018f8e:	2b0f      	cmp	r3, #15
 8018f90:	d9e8      	bls.n	8018f64 <prvInitialiseNewTask+0x50>
 8018f92:	e000      	b.n	8018f96 <prvInitialiseNewTask+0x82>
			{
				break;
 8018f94:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f98:	2243      	movs	r2, #67	; 0x43
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	5499      	strb	r1, [r3, r2]
 8018f9e:	e003      	b.n	8018fa8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fa2:	2234      	movs	r2, #52	; 0x34
 8018fa4:	2100      	movs	r1, #0
 8018fa6:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018fa8:	6a3b      	ldr	r3, [r7, #32]
 8018faa:	2b37      	cmp	r3, #55	; 0x37
 8018fac:	d901      	bls.n	8018fb2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018fae:	2337      	movs	r3, #55	; 0x37
 8018fb0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb4:	6a3a      	ldr	r2, [r7, #32]
 8018fb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fba:	6a3a      	ldr	r2, [r7, #32]
 8018fbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc6:	3304      	adds	r3, #4
 8018fc8:	0018      	movs	r0, r3
 8018fca:	f7ff f9c5 	bl	8018358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fd0:	3318      	adds	r3, #24
 8018fd2:	0018      	movs	r0, r3
 8018fd4:	f7ff f9c0 	bl	8018358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fde:	6a3b      	ldr	r3, [r7, #32]
 8018fe0:	2238      	movs	r2, #56	; 0x38
 8018fe2:	1ad2      	subs	r2, r2, r3
 8018fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018fec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff0:	22a0      	movs	r2, #160	; 0xa0
 8018ff2:	2100      	movs	r1, #0
 8018ff4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff8:	22a4      	movs	r2, #164	; 0xa4
 8018ffa:	2100      	movs	r1, #0
 8018ffc:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8018ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019000:	3354      	adds	r3, #84	; 0x54
 8019002:	224c      	movs	r2, #76	; 0x4c
 8019004:	2100      	movs	r1, #0
 8019006:	0018      	movs	r0, r3
 8019008:	f00a fb04 	bl	8023614 <memset>
 801900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801900e:	4a0e      	ldr	r2, [pc, #56]	; (8019048 <prvInitialiseNewTask+0x134>)
 8019010:	659a      	str	r2, [r3, #88]	; 0x58
 8019012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019014:	4a0d      	ldr	r2, [pc, #52]	; (801904c <prvInitialiseNewTask+0x138>)
 8019016:	65da      	str	r2, [r3, #92]	; 0x5c
 8019018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801901a:	4a0d      	ldr	r2, [pc, #52]	; (8019050 <prvInitialiseNewTask+0x13c>)
 801901c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801901e:	683a      	ldr	r2, [r7, #0]
 8019020:	68f9      	ldr	r1, [r7, #12]
 8019022:	693b      	ldr	r3, [r7, #16]
 8019024:	0018      	movs	r0, r3
 8019026:	f001 f9c1 	bl	801a3ac <pxPortInitialiseStack>
 801902a:	0002      	movs	r2, r0
 801902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019032:	2b00      	cmp	r3, #0
 8019034:	d002      	beq.n	801903c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8019036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801903a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801903c:	46c0      	nop			; (mov r8, r8)
 801903e:	46bd      	mov	sp, r7
 8019040:	b006      	add	sp, #24
 8019042:	bd80      	pop	{r7, pc}
 8019044:	3fffffff 	.word	0x3fffffff
 8019048:	20005044 	.word	0x20005044
 801904c:	200050ac 	.word	0x200050ac
 8019050:	20005114 	.word	0x20005114

08019054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801905c:	f001 fa40 	bl	801a4e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019060:	4b2a      	ldr	r3, [pc, #168]	; (801910c <prvAddNewTaskToReadyList+0xb8>)
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	1c5a      	adds	r2, r3, #1
 8019066:	4b29      	ldr	r3, [pc, #164]	; (801910c <prvAddNewTaskToReadyList+0xb8>)
 8019068:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801906a:	4b29      	ldr	r3, [pc, #164]	; (8019110 <prvAddNewTaskToReadyList+0xbc>)
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	2b00      	cmp	r3, #0
 8019070:	d109      	bne.n	8019086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8019072:	4b27      	ldr	r3, [pc, #156]	; (8019110 <prvAddNewTaskToReadyList+0xbc>)
 8019074:	687a      	ldr	r2, [r7, #4]
 8019076:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019078:	4b24      	ldr	r3, [pc, #144]	; (801910c <prvAddNewTaskToReadyList+0xb8>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	2b01      	cmp	r3, #1
 801907e:	d110      	bne.n	80190a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019080:	f000 fcea 	bl	8019a58 <prvInitialiseTaskLists>
 8019084:	e00d      	b.n	80190a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019086:	4b23      	ldr	r3, [pc, #140]	; (8019114 <prvAddNewTaskToReadyList+0xc0>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d109      	bne.n	80190a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801908e:	4b20      	ldr	r3, [pc, #128]	; (8019110 <prvAddNewTaskToReadyList+0xbc>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019098:	429a      	cmp	r2, r3
 801909a:	d802      	bhi.n	80190a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801909c:	4b1c      	ldr	r3, [pc, #112]	; (8019110 <prvAddNewTaskToReadyList+0xbc>)
 801909e:	687a      	ldr	r2, [r7, #4]
 80190a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80190a2:	4b1d      	ldr	r3, [pc, #116]	; (8019118 <prvAddNewTaskToReadyList+0xc4>)
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	1c5a      	adds	r2, r3, #1
 80190a8:	4b1b      	ldr	r3, [pc, #108]	; (8019118 <prvAddNewTaskToReadyList+0xc4>)
 80190aa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80190ac:	4b1a      	ldr	r3, [pc, #104]	; (8019118 <prvAddNewTaskToReadyList+0xc4>)
 80190ae:	681a      	ldr	r2, [r3, #0]
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190b8:	4b18      	ldr	r3, [pc, #96]	; (801911c <prvAddNewTaskToReadyList+0xc8>)
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	429a      	cmp	r2, r3
 80190be:	d903      	bls.n	80190c8 <prvAddNewTaskToReadyList+0x74>
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190c4:	4b15      	ldr	r3, [pc, #84]	; (801911c <prvAddNewTaskToReadyList+0xc8>)
 80190c6:	601a      	str	r2, [r3, #0]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190cc:	0013      	movs	r3, r2
 80190ce:	009b      	lsls	r3, r3, #2
 80190d0:	189b      	adds	r3, r3, r2
 80190d2:	009b      	lsls	r3, r3, #2
 80190d4:	4a12      	ldr	r2, [pc, #72]	; (8019120 <prvAddNewTaskToReadyList+0xcc>)
 80190d6:	189a      	adds	r2, r3, r2
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	3304      	adds	r3, #4
 80190dc:	0019      	movs	r1, r3
 80190de:	0010      	movs	r0, r2
 80190e0:	f7ff f945 	bl	801836e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80190e4:	f001 fa0e 	bl	801a504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80190e8:	4b0a      	ldr	r3, [pc, #40]	; (8019114 <prvAddNewTaskToReadyList+0xc0>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d008      	beq.n	8019102 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80190f0:	4b07      	ldr	r3, [pc, #28]	; (8019110 <prvAddNewTaskToReadyList+0xbc>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190fa:	429a      	cmp	r2, r3
 80190fc:	d201      	bcs.n	8019102 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80190fe:	f001 f9df 	bl	801a4c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019102:	46c0      	nop			; (mov r8, r8)
 8019104:	46bd      	mov	sp, r7
 8019106:	b002      	add	sp, #8
 8019108:	bd80      	pop	{r7, pc}
 801910a:	46c0      	nop			; (mov r8, r8)
 801910c:	20001254 	.word	0x20001254
 8019110:	20000d80 	.word	0x20000d80
 8019114:	20001260 	.word	0x20001260
 8019118:	20001270 	.word	0x20001270
 801911c:	2000125c 	.word	0x2000125c
 8019120:	20000d84 	.word	0x20000d84

08019124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019124:	b580      	push	{r7, lr}
 8019126:	b084      	sub	sp, #16
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801912c:	2300      	movs	r3, #0
 801912e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d010      	beq.n	8019158 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019136:	4b0d      	ldr	r3, [pc, #52]	; (801916c <vTaskDelay+0x48>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d001      	beq.n	8019142 <vTaskDelay+0x1e>
 801913e:	b672      	cpsid	i
 8019140:	e7fe      	b.n	8019140 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8019142:	f000 f9bb 	bl	80194bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2100      	movs	r1, #0
 801914a:	0018      	movs	r0, r3
 801914c:	f000 fdc8 	bl	8019ce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019150:	f000 f9c0 	bl	80194d4 <xTaskResumeAll>
 8019154:	0003      	movs	r3, r0
 8019156:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d101      	bne.n	8019162 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 801915e:	f001 f9af 	bl	801a4c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019162:	46c0      	nop			; (mov r8, r8)
 8019164:	46bd      	mov	sp, r7
 8019166:	b004      	add	sp, #16
 8019168:	bd80      	pop	{r7, pc}
 801916a:	46c0      	nop			; (mov r8, r8)
 801916c:	2000127c 	.word	0x2000127c

08019170 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8019170:	b580      	push	{r7, lr}
 8019172:	b088      	sub	sp, #32
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801917c:	69bb      	ldr	r3, [r7, #24]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d101      	bne.n	8019186 <eTaskGetState+0x16>
 8019182:	b672      	cpsid	i
 8019184:	e7fe      	b.n	8019184 <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 8019186:	4b2c      	ldr	r3, [pc, #176]	; (8019238 <eTaskGetState+0xc8>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	69ba      	ldr	r2, [r7, #24]
 801918c:	429a      	cmp	r2, r3
 801918e:	d104      	bne.n	801919a <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8019190:	231f      	movs	r3, #31
 8019192:	18fb      	adds	r3, r7, r3
 8019194:	2200      	movs	r2, #0
 8019196:	701a      	strb	r2, [r3, #0]
 8019198:	e046      	b.n	8019228 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 801919a:	f001 f9a1 	bl	801a4e0 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801919e:	69bb      	ldr	r3, [r7, #24]
 80191a0:	695b      	ldr	r3, [r3, #20]
 80191a2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80191a4:	4b25      	ldr	r3, [pc, #148]	; (801923c <eTaskGetState+0xcc>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80191aa:	4b25      	ldr	r3, [pc, #148]	; (8019240 <eTaskGetState+0xd0>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80191b0:	f001 f9a8 	bl	801a504 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80191b4:	697a      	ldr	r2, [r7, #20]
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	429a      	cmp	r2, r3
 80191ba:	d003      	beq.n	80191c4 <eTaskGetState+0x54>
 80191bc:	697a      	ldr	r2, [r7, #20]
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	429a      	cmp	r2, r3
 80191c2:	d104      	bne.n	80191ce <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80191c4:	231f      	movs	r3, #31
 80191c6:	18fb      	adds	r3, r7, r3
 80191c8:	2202      	movs	r2, #2
 80191ca:	701a      	strb	r2, [r3, #0]
 80191cc:	e02c      	b.n	8019228 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80191ce:	697a      	ldr	r2, [r7, #20]
 80191d0:	4b1c      	ldr	r3, [pc, #112]	; (8019244 <eTaskGetState+0xd4>)
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d118      	bne.n	8019208 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80191d6:	69bb      	ldr	r3, [r7, #24]
 80191d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d10f      	bne.n	80191fe <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80191de:	69bb      	ldr	r3, [r7, #24]
 80191e0:	22a4      	movs	r2, #164	; 0xa4
 80191e2:	5c9b      	ldrb	r3, [r3, r2]
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	2b01      	cmp	r3, #1
 80191e8:	d104      	bne.n	80191f4 <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 80191ea:	231f      	movs	r3, #31
 80191ec:	18fb      	adds	r3, r7, r3
 80191ee:	2202      	movs	r2, #2
 80191f0:	701a      	strb	r2, [r3, #0]
 80191f2:	e019      	b.n	8019228 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 80191f4:	231f      	movs	r3, #31
 80191f6:	18fb      	adds	r3, r7, r3
 80191f8:	2203      	movs	r2, #3
 80191fa:	701a      	strb	r2, [r3, #0]
 80191fc:	e014      	b.n	8019228 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80191fe:	231f      	movs	r3, #31
 8019200:	18fb      	adds	r3, r7, r3
 8019202:	2202      	movs	r2, #2
 8019204:	701a      	strb	r2, [r3, #0]
 8019206:	e00f      	b.n	8019228 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8019208:	697a      	ldr	r2, [r7, #20]
 801920a:	4b0f      	ldr	r3, [pc, #60]	; (8019248 <eTaskGetState+0xd8>)
 801920c:	429a      	cmp	r2, r3
 801920e:	d002      	beq.n	8019216 <eTaskGetState+0xa6>
 8019210:	697b      	ldr	r3, [r7, #20]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d104      	bne.n	8019220 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8019216:	231f      	movs	r3, #31
 8019218:	18fb      	adds	r3, r7, r3
 801921a:	2204      	movs	r2, #4
 801921c:	701a      	strb	r2, [r3, #0]
 801921e:	e003      	b.n	8019228 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8019220:	231f      	movs	r3, #31
 8019222:	18fb      	adds	r3, r7, r3
 8019224:	2201      	movs	r2, #1
 8019226:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 8019228:	231f      	movs	r3, #31
 801922a:	18fb      	adds	r3, r7, r3
 801922c:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801922e:	0018      	movs	r0, r3
 8019230:	46bd      	mov	sp, r7
 8019232:	b008      	add	sp, #32
 8019234:	bd80      	pop	{r7, pc}
 8019236:	46c0      	nop			; (mov r8, r8)
 8019238:	20000d80 	.word	0x20000d80
 801923c:	2000120c 	.word	0x2000120c
 8019240:	20001210 	.word	0x20001210
 8019244:	20001240 	.word	0x20001240
 8019248:	20001228 	.word	0x20001228

0801924c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801924c:	b580      	push	{r7, lr}
 801924e:	b084      	sub	sp, #16
 8019250:	af00      	add	r7, sp, #0
 8019252:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019254:	f001 f944 	bl	801a4e0 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d102      	bne.n	8019264 <vTaskSuspend+0x18>
 801925e:	4b29      	ldr	r3, [pc, #164]	; (8019304 <vTaskSuspend+0xb8>)
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	e000      	b.n	8019266 <vTaskSuspend+0x1a>
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	3304      	adds	r3, #4
 801926c:	0018      	movs	r0, r3
 801926e:	f7ff f8d6 	bl	801841e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019276:	2b00      	cmp	r3, #0
 8019278:	d004      	beq.n	8019284 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	3318      	adds	r3, #24
 801927e:	0018      	movs	r0, r3
 8019280:	f7ff f8cd 	bl	801841e <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	1d1a      	adds	r2, r3, #4
 8019288:	4b1f      	ldr	r3, [pc, #124]	; (8019308 <vTaskSuspend+0xbc>)
 801928a:	0011      	movs	r1, r2
 801928c:	0018      	movs	r0, r3
 801928e:	f7ff f86e 	bl	801836e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	22a4      	movs	r2, #164	; 0xa4
 8019296:	5c9b      	ldrb	r3, [r3, r2]
 8019298:	b2db      	uxtb	r3, r3
 801929a:	2b01      	cmp	r3, #1
 801929c:	d103      	bne.n	80192a6 <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	22a4      	movs	r2, #164	; 0xa4
 80192a2:	2100      	movs	r1, #0
 80192a4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80192a6:	f001 f92d 	bl	801a504 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80192aa:	4b18      	ldr	r3, [pc, #96]	; (801930c <vTaskSuspend+0xc0>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d005      	beq.n	80192be <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80192b2:	f001 f915 	bl	801a4e0 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80192b6:	f000 fc6f 	bl	8019b98 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80192ba:	f001 f923 	bl	801a504 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80192be:	4b11      	ldr	r3, [pc, #68]	; (8019304 <vTaskSuspend+0xb8>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	68fa      	ldr	r2, [r7, #12]
 80192c4:	429a      	cmp	r2, r3
 80192c6:	d118      	bne.n	80192fa <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 80192c8:	4b10      	ldr	r3, [pc, #64]	; (801930c <vTaskSuspend+0xc0>)
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d008      	beq.n	80192e2 <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80192d0:	4b0f      	ldr	r3, [pc, #60]	; (8019310 <vTaskSuspend+0xc4>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d001      	beq.n	80192dc <vTaskSuspend+0x90>
 80192d8:	b672      	cpsid	i
 80192da:	e7fe      	b.n	80192da <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 80192dc:	f001 f8f0 	bl	801a4c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80192e0:	e00b      	b.n	80192fa <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80192e2:	4b09      	ldr	r3, [pc, #36]	; (8019308 <vTaskSuspend+0xbc>)
 80192e4:	681a      	ldr	r2, [r3, #0]
 80192e6:	4b0b      	ldr	r3, [pc, #44]	; (8019314 <vTaskSuspend+0xc8>)
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d103      	bne.n	80192f6 <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 80192ee:	4b05      	ldr	r3, [pc, #20]	; (8019304 <vTaskSuspend+0xb8>)
 80192f0:	2200      	movs	r2, #0
 80192f2:	601a      	str	r2, [r3, #0]
	}
 80192f4:	e001      	b.n	80192fa <vTaskSuspend+0xae>
					vTaskSwitchContext();
 80192f6:	f000 fa37 	bl	8019768 <vTaskSwitchContext>
	}
 80192fa:	46c0      	nop			; (mov r8, r8)
 80192fc:	46bd      	mov	sp, r7
 80192fe:	b004      	add	sp, #16
 8019300:	bd80      	pop	{r7, pc}
 8019302:	46c0      	nop			; (mov r8, r8)
 8019304:	20000d80 	.word	0x20000d80
 8019308:	20001240 	.word	0x20001240
 801930c:	20001260 	.word	0x20001260
 8019310:	2000127c 	.word	0x2000127c
 8019314:	20001254 	.word	0x20001254

08019318 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019318:	b580      	push	{r7, lr}
 801931a:	b084      	sub	sp, #16
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019320:	2300      	movs	r3, #0
 8019322:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d101      	bne.n	8019332 <prvTaskIsTaskSuspended+0x1a>
 801932e:	b672      	cpsid	i
 8019330:	e7fe      	b.n	8019330 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019332:	68bb      	ldr	r3, [r7, #8]
 8019334:	695a      	ldr	r2, [r3, #20]
 8019336:	4b09      	ldr	r3, [pc, #36]	; (801935c <prvTaskIsTaskSuspended+0x44>)
 8019338:	429a      	cmp	r2, r3
 801933a:	d10a      	bne.n	8019352 <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019340:	4b07      	ldr	r3, [pc, #28]	; (8019360 <prvTaskIsTaskSuspended+0x48>)
 8019342:	429a      	cmp	r2, r3
 8019344:	d005      	beq.n	8019352 <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019346:	68bb      	ldr	r3, [r7, #8]
 8019348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801934a:	2b00      	cmp	r3, #0
 801934c:	d101      	bne.n	8019352 <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 801934e:	2301      	movs	r3, #1
 8019350:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019352:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019354:	0018      	movs	r0, r3
 8019356:	46bd      	mov	sp, r7
 8019358:	b004      	add	sp, #16
 801935a:	bd80      	pop	{r7, pc}
 801935c:	20001240 	.word	0x20001240
 8019360:	20001214 	.word	0x20001214

08019364 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d101      	bne.n	801937a <vTaskResume+0x16>
 8019376:	b672      	cpsid	i
 8019378:	e7fe      	b.n	8019378 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801937a:	4b1e      	ldr	r3, [pc, #120]	; (80193f4 <vTaskResume+0x90>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	68fa      	ldr	r2, [r7, #12]
 8019380:	429a      	cmp	r2, r3
 8019382:	d032      	beq.n	80193ea <vTaskResume+0x86>
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d02f      	beq.n	80193ea <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 801938a:	f001 f8a9 	bl	801a4e0 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	0018      	movs	r0, r3
 8019392:	f7ff ffc1 	bl	8019318 <prvTaskIsTaskSuspended>
 8019396:	1e03      	subs	r3, r0, #0
 8019398:	d025      	beq.n	80193e6 <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	3304      	adds	r3, #4
 801939e:	0018      	movs	r0, r3
 80193a0:	f7ff f83d 	bl	801841e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193a8:	4b13      	ldr	r3, [pc, #76]	; (80193f8 <vTaskResume+0x94>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d903      	bls.n	80193b8 <vTaskResume+0x54>
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193b4:	4b10      	ldr	r3, [pc, #64]	; (80193f8 <vTaskResume+0x94>)
 80193b6:	601a      	str	r2, [r3, #0]
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193bc:	0013      	movs	r3, r2
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	189b      	adds	r3, r3, r2
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4a0d      	ldr	r2, [pc, #52]	; (80193fc <vTaskResume+0x98>)
 80193c6:	189a      	adds	r2, r3, r2
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	3304      	adds	r3, #4
 80193cc:	0019      	movs	r1, r3
 80193ce:	0010      	movs	r0, r2
 80193d0:	f7fe ffcd 	bl	801836e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193d8:	4b06      	ldr	r3, [pc, #24]	; (80193f4 <vTaskResume+0x90>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80193de:	429a      	cmp	r2, r3
 80193e0:	d301      	bcc.n	80193e6 <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80193e2:	f001 f86d 	bl	801a4c0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80193e6:	f001 f88d 	bl	801a504 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80193ea:	46c0      	nop			; (mov r8, r8)
 80193ec:	46bd      	mov	sp, r7
 80193ee:	b004      	add	sp, #16
 80193f0:	bd80      	pop	{r7, pc}
 80193f2:	46c0      	nop			; (mov r8, r8)
 80193f4:	20000d80 	.word	0x20000d80
 80193f8:	2000125c 	.word	0x2000125c
 80193fc:	20000d84 	.word	0x20000d84

08019400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019400:	b590      	push	{r4, r7, lr}
 8019402:	b089      	sub	sp, #36	; 0x24
 8019404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019406:	2300      	movs	r3, #0
 8019408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801940a:	2300      	movs	r3, #0
 801940c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801940e:	003a      	movs	r2, r7
 8019410:	1d39      	adds	r1, r7, #4
 8019412:	2308      	movs	r3, #8
 8019414:	18fb      	adds	r3, r7, r3
 8019416:	0018      	movs	r0, r3
 8019418:	f7fe ff50 	bl	80182bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801941c:	683c      	ldr	r4, [r7, #0]
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	68ba      	ldr	r2, [r7, #8]
 8019422:	491e      	ldr	r1, [pc, #120]	; (801949c <vTaskStartScheduler+0x9c>)
 8019424:	481e      	ldr	r0, [pc, #120]	; (80194a0 <vTaskStartScheduler+0xa0>)
 8019426:	9202      	str	r2, [sp, #8]
 8019428:	9301      	str	r3, [sp, #4]
 801942a:	2300      	movs	r3, #0
 801942c:	9300      	str	r3, [sp, #0]
 801942e:	2300      	movs	r3, #0
 8019430:	0022      	movs	r2, r4
 8019432:	f7ff fcde 	bl	8018df2 <xTaskCreateStatic>
 8019436:	0002      	movs	r2, r0
 8019438:	4b1a      	ldr	r3, [pc, #104]	; (80194a4 <vTaskStartScheduler+0xa4>)
 801943a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801943c:	4b19      	ldr	r3, [pc, #100]	; (80194a4 <vTaskStartScheduler+0xa4>)
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d002      	beq.n	801944a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019444:	2301      	movs	r3, #1
 8019446:	60fb      	str	r3, [r7, #12]
 8019448:	e001      	b.n	801944e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801944a:	2300      	movs	r3, #0
 801944c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	2b01      	cmp	r3, #1
 8019452:	d103      	bne.n	801945c <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8019454:	f000 fc98 	bl	8019d88 <xTimerCreateTimerTask>
 8019458:	0003      	movs	r3, r0
 801945a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	2b01      	cmp	r3, #1
 8019460:	d113      	bne.n	801948a <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8019462:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019464:	4b10      	ldr	r3, [pc, #64]	; (80194a8 <vTaskStartScheduler+0xa8>)
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	3354      	adds	r3, #84	; 0x54
 801946a:	001a      	movs	r2, r3
 801946c:	4b0f      	ldr	r3, [pc, #60]	; (80194ac <vTaskStartScheduler+0xac>)
 801946e:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019470:	4b0f      	ldr	r3, [pc, #60]	; (80194b0 <vTaskStartScheduler+0xb0>)
 8019472:	2201      	movs	r2, #1
 8019474:	4252      	negs	r2, r2
 8019476:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019478:	4b0e      	ldr	r3, [pc, #56]	; (80194b4 <vTaskStartScheduler+0xb4>)
 801947a:	2201      	movs	r2, #1
 801947c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801947e:	4b0e      	ldr	r3, [pc, #56]	; (80194b8 <vTaskStartScheduler+0xb8>)
 8019480:	2200      	movs	r2, #0
 8019482:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019484:	f000 fff8 	bl	801a478 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019488:	e004      	b.n	8019494 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	3301      	adds	r3, #1
 801948e:	d101      	bne.n	8019494 <vTaskStartScheduler+0x94>
 8019490:	b672      	cpsid	i
 8019492:	e7fe      	b.n	8019492 <vTaskStartScheduler+0x92>
}
 8019494:	46c0      	nop			; (mov r8, r8)
 8019496:	46bd      	mov	sp, r7
 8019498:	b005      	add	sp, #20
 801949a:	bd90      	pop	{r4, r7, pc}
 801949c:	08024060 	.word	0x08024060
 80194a0:	08019a39 	.word	0x08019a39
 80194a4:	20001278 	.word	0x20001278
 80194a8:	20000d80 	.word	0x20000d80
 80194ac:	20000254 	.word	0x20000254
 80194b0:	20001274 	.word	0x20001274
 80194b4:	20001260 	.word	0x20001260
 80194b8:	20001258 	.word	0x20001258

080194bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80194c0:	4b03      	ldr	r3, [pc, #12]	; (80194d0 <vTaskSuspendAll+0x14>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	1c5a      	adds	r2, r3, #1
 80194c6:	4b02      	ldr	r3, [pc, #8]	; (80194d0 <vTaskSuspendAll+0x14>)
 80194c8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80194ca:	46c0      	nop			; (mov r8, r8)
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	2000127c 	.word	0x2000127c

080194d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80194da:	2300      	movs	r3, #0
 80194dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80194de:	2300      	movs	r3, #0
 80194e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80194e2:	4b3a      	ldr	r3, [pc, #232]	; (80195cc <xTaskResumeAll+0xf8>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d101      	bne.n	80194ee <xTaskResumeAll+0x1a>
 80194ea:	b672      	cpsid	i
 80194ec:	e7fe      	b.n	80194ec <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80194ee:	f000 fff7 	bl	801a4e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80194f2:	4b36      	ldr	r3, [pc, #216]	; (80195cc <xTaskResumeAll+0xf8>)
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	1e5a      	subs	r2, r3, #1
 80194f8:	4b34      	ldr	r3, [pc, #208]	; (80195cc <xTaskResumeAll+0xf8>)
 80194fa:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80194fc:	4b33      	ldr	r3, [pc, #204]	; (80195cc <xTaskResumeAll+0xf8>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d15b      	bne.n	80195bc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019504:	4b32      	ldr	r3, [pc, #200]	; (80195d0 <xTaskResumeAll+0xfc>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d057      	beq.n	80195bc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801950c:	e02f      	b.n	801956e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801950e:	4b31      	ldr	r3, [pc, #196]	; (80195d4 <xTaskResumeAll+0x100>)
 8019510:	68db      	ldr	r3, [r3, #12]
 8019512:	68db      	ldr	r3, [r3, #12]
 8019514:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	3318      	adds	r3, #24
 801951a:	0018      	movs	r0, r3
 801951c:	f7fe ff7f 	bl	801841e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	3304      	adds	r3, #4
 8019524:	0018      	movs	r0, r3
 8019526:	f7fe ff7a 	bl	801841e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801952e:	4b2a      	ldr	r3, [pc, #168]	; (80195d8 <xTaskResumeAll+0x104>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	429a      	cmp	r2, r3
 8019534:	d903      	bls.n	801953e <xTaskResumeAll+0x6a>
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801953a:	4b27      	ldr	r3, [pc, #156]	; (80195d8 <xTaskResumeAll+0x104>)
 801953c:	601a      	str	r2, [r3, #0]
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019542:	0013      	movs	r3, r2
 8019544:	009b      	lsls	r3, r3, #2
 8019546:	189b      	adds	r3, r3, r2
 8019548:	009b      	lsls	r3, r3, #2
 801954a:	4a24      	ldr	r2, [pc, #144]	; (80195dc <xTaskResumeAll+0x108>)
 801954c:	189a      	adds	r2, r3, r2
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	3304      	adds	r3, #4
 8019552:	0019      	movs	r1, r3
 8019554:	0010      	movs	r0, r2
 8019556:	f7fe ff0a 	bl	801836e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801955e:	4b20      	ldr	r3, [pc, #128]	; (80195e0 <xTaskResumeAll+0x10c>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019564:	429a      	cmp	r2, r3
 8019566:	d302      	bcc.n	801956e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8019568:	4b1e      	ldr	r3, [pc, #120]	; (80195e4 <xTaskResumeAll+0x110>)
 801956a:	2201      	movs	r2, #1
 801956c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801956e:	4b19      	ldr	r3, [pc, #100]	; (80195d4 <xTaskResumeAll+0x100>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d1cb      	bne.n	801950e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	2b00      	cmp	r3, #0
 801957a:	d001      	beq.n	8019580 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801957c:	f000 fb0c 	bl	8019b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019580:	4b19      	ldr	r3, [pc, #100]	; (80195e8 <xTaskResumeAll+0x114>)
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00f      	beq.n	80195ac <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801958c:	f000 f83c 	bl	8019608 <xTaskIncrementTick>
 8019590:	1e03      	subs	r3, r0, #0
 8019592:	d002      	beq.n	801959a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8019594:	4b13      	ldr	r3, [pc, #76]	; (80195e4 <xTaskResumeAll+0x110>)
 8019596:	2201      	movs	r2, #1
 8019598:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	3b01      	subs	r3, #1
 801959e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d1f2      	bne.n	801958c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80195a6:	4b10      	ldr	r3, [pc, #64]	; (80195e8 <xTaskResumeAll+0x114>)
 80195a8:	2200      	movs	r2, #0
 80195aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80195ac:	4b0d      	ldr	r3, [pc, #52]	; (80195e4 <xTaskResumeAll+0x110>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d003      	beq.n	80195bc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80195b4:	2301      	movs	r3, #1
 80195b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80195b8:	f000 ff82 	bl	801a4c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80195bc:	f000 ffa2 	bl	801a504 <vPortExitCritical>

	return xAlreadyYielded;
 80195c0:	68bb      	ldr	r3, [r7, #8]
}
 80195c2:	0018      	movs	r0, r3
 80195c4:	46bd      	mov	sp, r7
 80195c6:	b004      	add	sp, #16
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	46c0      	nop			; (mov r8, r8)
 80195cc:	2000127c 	.word	0x2000127c
 80195d0:	20001254 	.word	0x20001254
 80195d4:	20001214 	.word	0x20001214
 80195d8:	2000125c 	.word	0x2000125c
 80195dc:	20000d84 	.word	0x20000d84
 80195e0:	20000d80 	.word	0x20000d80
 80195e4:	20001268 	.word	0x20001268
 80195e8:	20001264 	.word	0x20001264

080195ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80195f2:	4b04      	ldr	r3, [pc, #16]	; (8019604 <xTaskGetTickCount+0x18>)
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80195f8:	687b      	ldr	r3, [r7, #4]
}
 80195fa:	0018      	movs	r0, r3
 80195fc:	46bd      	mov	sp, r7
 80195fe:	b002      	add	sp, #8
 8019600:	bd80      	pop	{r7, pc}
 8019602:	46c0      	nop			; (mov r8, r8)
 8019604:	20001258 	.word	0x20001258

08019608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b086      	sub	sp, #24
 801960c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801960e:	2300      	movs	r3, #0
 8019610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019612:	4b4a      	ldr	r3, [pc, #296]	; (801973c <xTaskIncrementTick+0x134>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d000      	beq.n	801961c <xTaskIncrementTick+0x14>
 801961a:	e084      	b.n	8019726 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801961c:	4b48      	ldr	r3, [pc, #288]	; (8019740 <xTaskIncrementTick+0x138>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	3301      	adds	r3, #1
 8019622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019624:	4b46      	ldr	r3, [pc, #280]	; (8019740 <xTaskIncrementTick+0x138>)
 8019626:	693a      	ldr	r2, [r7, #16]
 8019628:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d117      	bne.n	8019660 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8019630:	4b44      	ldr	r3, [pc, #272]	; (8019744 <xTaskIncrementTick+0x13c>)
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d001      	beq.n	801963e <xTaskIncrementTick+0x36>
 801963a:	b672      	cpsid	i
 801963c:	e7fe      	b.n	801963c <xTaskIncrementTick+0x34>
 801963e:	4b41      	ldr	r3, [pc, #260]	; (8019744 <xTaskIncrementTick+0x13c>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	60fb      	str	r3, [r7, #12]
 8019644:	4b40      	ldr	r3, [pc, #256]	; (8019748 <xTaskIncrementTick+0x140>)
 8019646:	681a      	ldr	r2, [r3, #0]
 8019648:	4b3e      	ldr	r3, [pc, #248]	; (8019744 <xTaskIncrementTick+0x13c>)
 801964a:	601a      	str	r2, [r3, #0]
 801964c:	4b3e      	ldr	r3, [pc, #248]	; (8019748 <xTaskIncrementTick+0x140>)
 801964e:	68fa      	ldr	r2, [r7, #12]
 8019650:	601a      	str	r2, [r3, #0]
 8019652:	4b3e      	ldr	r3, [pc, #248]	; (801974c <xTaskIncrementTick+0x144>)
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	1c5a      	adds	r2, r3, #1
 8019658:	4b3c      	ldr	r3, [pc, #240]	; (801974c <xTaskIncrementTick+0x144>)
 801965a:	601a      	str	r2, [r3, #0]
 801965c:	f000 fa9c 	bl	8019b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019660:	4b3b      	ldr	r3, [pc, #236]	; (8019750 <xTaskIncrementTick+0x148>)
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	693a      	ldr	r2, [r7, #16]
 8019666:	429a      	cmp	r2, r3
 8019668:	d349      	bcc.n	80196fe <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801966a:	4b36      	ldr	r3, [pc, #216]	; (8019744 <xTaskIncrementTick+0x13c>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d104      	bne.n	801967e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019674:	4b36      	ldr	r3, [pc, #216]	; (8019750 <xTaskIncrementTick+0x148>)
 8019676:	2201      	movs	r2, #1
 8019678:	4252      	negs	r2, r2
 801967a:	601a      	str	r2, [r3, #0]
					break;
 801967c:	e03f      	b.n	80196fe <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801967e:	4b31      	ldr	r3, [pc, #196]	; (8019744 <xTaskIncrementTick+0x13c>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	68db      	ldr	r3, [r3, #12]
 8019684:	68db      	ldr	r3, [r3, #12]
 8019686:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019688:	68bb      	ldr	r3, [r7, #8]
 801968a:	685b      	ldr	r3, [r3, #4]
 801968c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801968e:	693a      	ldr	r2, [r7, #16]
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	429a      	cmp	r2, r3
 8019694:	d203      	bcs.n	801969e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019696:	4b2e      	ldr	r3, [pc, #184]	; (8019750 <xTaskIncrementTick+0x148>)
 8019698:	687a      	ldr	r2, [r7, #4]
 801969a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801969c:	e02f      	b.n	80196fe <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	3304      	adds	r3, #4
 80196a2:	0018      	movs	r0, r3
 80196a4:	f7fe febb 	bl	801841e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	d004      	beq.n	80196ba <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	3318      	adds	r3, #24
 80196b4:	0018      	movs	r0, r3
 80196b6:	f7fe feb2 	bl	801841e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80196ba:	68bb      	ldr	r3, [r7, #8]
 80196bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196be:	4b25      	ldr	r3, [pc, #148]	; (8019754 <xTaskIncrementTick+0x14c>)
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	d903      	bls.n	80196ce <xTaskIncrementTick+0xc6>
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196ca:	4b22      	ldr	r3, [pc, #136]	; (8019754 <xTaskIncrementTick+0x14c>)
 80196cc:	601a      	str	r2, [r3, #0]
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196d2:	0013      	movs	r3, r2
 80196d4:	009b      	lsls	r3, r3, #2
 80196d6:	189b      	adds	r3, r3, r2
 80196d8:	009b      	lsls	r3, r3, #2
 80196da:	4a1f      	ldr	r2, [pc, #124]	; (8019758 <xTaskIncrementTick+0x150>)
 80196dc:	189a      	adds	r2, r3, r2
 80196de:	68bb      	ldr	r3, [r7, #8]
 80196e0:	3304      	adds	r3, #4
 80196e2:	0019      	movs	r1, r3
 80196e4:	0010      	movs	r0, r2
 80196e6:	f7fe fe42 	bl	801836e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196ee:	4b1b      	ldr	r3, [pc, #108]	; (801975c <xTaskIncrementTick+0x154>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d3b8      	bcc.n	801966a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80196f8:	2301      	movs	r3, #1
 80196fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80196fc:	e7b5      	b.n	801966a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80196fe:	4b17      	ldr	r3, [pc, #92]	; (801975c <xTaskIncrementTick+0x154>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019704:	4914      	ldr	r1, [pc, #80]	; (8019758 <xTaskIncrementTick+0x150>)
 8019706:	0013      	movs	r3, r2
 8019708:	009b      	lsls	r3, r3, #2
 801970a:	189b      	adds	r3, r3, r2
 801970c:	009b      	lsls	r3, r3, #2
 801970e:	585b      	ldr	r3, [r3, r1]
 8019710:	2b01      	cmp	r3, #1
 8019712:	d901      	bls.n	8019718 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8019714:	2301      	movs	r3, #1
 8019716:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019718:	4b11      	ldr	r3, [pc, #68]	; (8019760 <xTaskIncrementTick+0x158>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d007      	beq.n	8019730 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8019720:	2301      	movs	r3, #1
 8019722:	617b      	str	r3, [r7, #20]
 8019724:	e004      	b.n	8019730 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019726:	4b0f      	ldr	r3, [pc, #60]	; (8019764 <xTaskIncrementTick+0x15c>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	1c5a      	adds	r2, r3, #1
 801972c:	4b0d      	ldr	r3, [pc, #52]	; (8019764 <xTaskIncrementTick+0x15c>)
 801972e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8019730:	697b      	ldr	r3, [r7, #20]
}
 8019732:	0018      	movs	r0, r3
 8019734:	46bd      	mov	sp, r7
 8019736:	b006      	add	sp, #24
 8019738:	bd80      	pop	{r7, pc}
 801973a:	46c0      	nop			; (mov r8, r8)
 801973c:	2000127c 	.word	0x2000127c
 8019740:	20001258 	.word	0x20001258
 8019744:	2000120c 	.word	0x2000120c
 8019748:	20001210 	.word	0x20001210
 801974c:	2000126c 	.word	0x2000126c
 8019750:	20001274 	.word	0x20001274
 8019754:	2000125c 	.word	0x2000125c
 8019758:	20000d84 	.word	0x20000d84
 801975c:	20000d80 	.word	0x20000d80
 8019760:	20001268 	.word	0x20001268
 8019764:	20001264 	.word	0x20001264

08019768 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019768:	b580      	push	{r7, lr}
 801976a:	b082      	sub	sp, #8
 801976c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801976e:	4b25      	ldr	r3, [pc, #148]	; (8019804 <vTaskSwitchContext+0x9c>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d003      	beq.n	801977e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019776:	4b24      	ldr	r3, [pc, #144]	; (8019808 <vTaskSwitchContext+0xa0>)
 8019778:	2201      	movs	r2, #1
 801977a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801977c:	e03d      	b.n	80197fa <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 801977e:	4b22      	ldr	r3, [pc, #136]	; (8019808 <vTaskSwitchContext+0xa0>)
 8019780:	2200      	movs	r2, #0
 8019782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019784:	4b21      	ldr	r3, [pc, #132]	; (801980c <vTaskSwitchContext+0xa4>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	607b      	str	r3, [r7, #4]
 801978a:	e007      	b.n	801979c <vTaskSwitchContext+0x34>
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d101      	bne.n	8019796 <vTaskSwitchContext+0x2e>
 8019792:	b672      	cpsid	i
 8019794:	e7fe      	b.n	8019794 <vTaskSwitchContext+0x2c>
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	3b01      	subs	r3, #1
 801979a:	607b      	str	r3, [r7, #4]
 801979c:	491c      	ldr	r1, [pc, #112]	; (8019810 <vTaskSwitchContext+0xa8>)
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	0013      	movs	r3, r2
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	189b      	adds	r3, r3, r2
 80197a6:	009b      	lsls	r3, r3, #2
 80197a8:	585b      	ldr	r3, [r3, r1]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d0ee      	beq.n	801978c <vTaskSwitchContext+0x24>
 80197ae:	687a      	ldr	r2, [r7, #4]
 80197b0:	0013      	movs	r3, r2
 80197b2:	009b      	lsls	r3, r3, #2
 80197b4:	189b      	adds	r3, r3, r2
 80197b6:	009b      	lsls	r3, r3, #2
 80197b8:	4a15      	ldr	r2, [pc, #84]	; (8019810 <vTaskSwitchContext+0xa8>)
 80197ba:	189b      	adds	r3, r3, r2
 80197bc:	603b      	str	r3, [r7, #0]
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	685b      	ldr	r3, [r3, #4]
 80197c2:	685a      	ldr	r2, [r3, #4]
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	605a      	str	r2, [r3, #4]
 80197c8:	683b      	ldr	r3, [r7, #0]
 80197ca:	685a      	ldr	r2, [r3, #4]
 80197cc:	683b      	ldr	r3, [r7, #0]
 80197ce:	3308      	adds	r3, #8
 80197d0:	429a      	cmp	r2, r3
 80197d2:	d104      	bne.n	80197de <vTaskSwitchContext+0x76>
 80197d4:	683b      	ldr	r3, [r7, #0]
 80197d6:	685b      	ldr	r3, [r3, #4]
 80197d8:	685a      	ldr	r2, [r3, #4]
 80197da:	683b      	ldr	r3, [r7, #0]
 80197dc:	605a      	str	r2, [r3, #4]
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	68da      	ldr	r2, [r3, #12]
 80197e4:	4b0b      	ldr	r3, [pc, #44]	; (8019814 <vTaskSwitchContext+0xac>)
 80197e6:	601a      	str	r2, [r3, #0]
 80197e8:	4b08      	ldr	r3, [pc, #32]	; (801980c <vTaskSwitchContext+0xa4>)
 80197ea:	687a      	ldr	r2, [r7, #4]
 80197ec:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80197ee:	4b09      	ldr	r3, [pc, #36]	; (8019814 <vTaskSwitchContext+0xac>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	3354      	adds	r3, #84	; 0x54
 80197f4:	001a      	movs	r2, r3
 80197f6:	4b08      	ldr	r3, [pc, #32]	; (8019818 <vTaskSwitchContext+0xb0>)
 80197f8:	601a      	str	r2, [r3, #0]
}
 80197fa:	46c0      	nop			; (mov r8, r8)
 80197fc:	46bd      	mov	sp, r7
 80197fe:	b002      	add	sp, #8
 8019800:	bd80      	pop	{r7, pc}
 8019802:	46c0      	nop			; (mov r8, r8)
 8019804:	2000127c 	.word	0x2000127c
 8019808:	20001268 	.word	0x20001268
 801980c:	2000125c 	.word	0x2000125c
 8019810:	20000d84 	.word	0x20000d84
 8019814:	20000d80 	.word	0x20000d80
 8019818:	20000254 	.word	0x20000254

0801981c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
 8019824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d101      	bne.n	8019830 <vTaskPlaceOnEventList+0x14>
 801982c:	b672      	cpsid	i
 801982e:	e7fe      	b.n	801982e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019830:	4b08      	ldr	r3, [pc, #32]	; (8019854 <vTaskPlaceOnEventList+0x38>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	3318      	adds	r3, #24
 8019836:	001a      	movs	r2, r3
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	0011      	movs	r1, r2
 801983c:	0018      	movs	r0, r3
 801983e:	f7fe fdb8 	bl	80183b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019842:	683b      	ldr	r3, [r7, #0]
 8019844:	2101      	movs	r1, #1
 8019846:	0018      	movs	r0, r3
 8019848:	f000 fa4a 	bl	8019ce0 <prvAddCurrentTaskToDelayedList>
}
 801984c:	46c0      	nop			; (mov r8, r8)
 801984e:	46bd      	mov	sp, r7
 8019850:	b002      	add	sp, #8
 8019852:	bd80      	pop	{r7, pc}
 8019854:	20000d80 	.word	0x20000d80

08019858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	60f8      	str	r0, [r7, #12]
 8019860:	60b9      	str	r1, [r7, #8]
 8019862:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d101      	bne.n	801986e <vTaskPlaceOnEventListRestricted+0x16>
 801986a:	b672      	cpsid	i
 801986c:	e7fe      	b.n	801986c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801986e:	4b0c      	ldr	r3, [pc, #48]	; (80198a0 <vTaskPlaceOnEventListRestricted+0x48>)
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	3318      	adds	r3, #24
 8019874:	001a      	movs	r2, r3
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	0011      	movs	r1, r2
 801987a:	0018      	movs	r0, r3
 801987c:	f7fe fd77 	bl	801836e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d002      	beq.n	801988c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8019886:	2301      	movs	r3, #1
 8019888:	425b      	negs	r3, r3
 801988a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801988c:	687a      	ldr	r2, [r7, #4]
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	0011      	movs	r1, r2
 8019892:	0018      	movs	r0, r3
 8019894:	f000 fa24 	bl	8019ce0 <prvAddCurrentTaskToDelayedList>
	}
 8019898:	46c0      	nop			; (mov r8, r8)
 801989a:	46bd      	mov	sp, r7
 801989c:	b004      	add	sp, #16
 801989e:	bd80      	pop	{r7, pc}
 80198a0:	20000d80 	.word	0x20000d80

080198a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b084      	sub	sp, #16
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	68db      	ldr	r3, [r3, #12]
 80198b0:	68db      	ldr	r3, [r3, #12]
 80198b2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80198b4:	68bb      	ldr	r3, [r7, #8]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d101      	bne.n	80198be <xTaskRemoveFromEventList+0x1a>
 80198ba:	b672      	cpsid	i
 80198bc:	e7fe      	b.n	80198bc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	3318      	adds	r3, #24
 80198c2:	0018      	movs	r0, r3
 80198c4:	f7fe fdab 	bl	801841e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80198c8:	4b1e      	ldr	r3, [pc, #120]	; (8019944 <xTaskRemoveFromEventList+0xa0>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d11d      	bne.n	801990c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80198d0:	68bb      	ldr	r3, [r7, #8]
 80198d2:	3304      	adds	r3, #4
 80198d4:	0018      	movs	r0, r3
 80198d6:	f7fe fda2 	bl	801841e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80198da:	68bb      	ldr	r3, [r7, #8]
 80198dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198de:	4b1a      	ldr	r3, [pc, #104]	; (8019948 <xTaskRemoveFromEventList+0xa4>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	429a      	cmp	r2, r3
 80198e4:	d903      	bls.n	80198ee <xTaskRemoveFromEventList+0x4a>
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198ea:	4b17      	ldr	r3, [pc, #92]	; (8019948 <xTaskRemoveFromEventList+0xa4>)
 80198ec:	601a      	str	r2, [r3, #0]
 80198ee:	68bb      	ldr	r3, [r7, #8]
 80198f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80198f2:	0013      	movs	r3, r2
 80198f4:	009b      	lsls	r3, r3, #2
 80198f6:	189b      	adds	r3, r3, r2
 80198f8:	009b      	lsls	r3, r3, #2
 80198fa:	4a14      	ldr	r2, [pc, #80]	; (801994c <xTaskRemoveFromEventList+0xa8>)
 80198fc:	189a      	adds	r2, r3, r2
 80198fe:	68bb      	ldr	r3, [r7, #8]
 8019900:	3304      	adds	r3, #4
 8019902:	0019      	movs	r1, r3
 8019904:	0010      	movs	r0, r2
 8019906:	f7fe fd32 	bl	801836e <vListInsertEnd>
 801990a:	e007      	b.n	801991c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801990c:	68bb      	ldr	r3, [r7, #8]
 801990e:	3318      	adds	r3, #24
 8019910:	001a      	movs	r2, r3
 8019912:	4b0f      	ldr	r3, [pc, #60]	; (8019950 <xTaskRemoveFromEventList+0xac>)
 8019914:	0011      	movs	r1, r2
 8019916:	0018      	movs	r0, r3
 8019918:	f7fe fd29 	bl	801836e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019920:	4b0c      	ldr	r3, [pc, #48]	; (8019954 <xTaskRemoveFromEventList+0xb0>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019926:	429a      	cmp	r2, r3
 8019928:	d905      	bls.n	8019936 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801992a:	2301      	movs	r3, #1
 801992c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801992e:	4b0a      	ldr	r3, [pc, #40]	; (8019958 <xTaskRemoveFromEventList+0xb4>)
 8019930:	2201      	movs	r2, #1
 8019932:	601a      	str	r2, [r3, #0]
 8019934:	e001      	b.n	801993a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8019936:	2300      	movs	r3, #0
 8019938:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801993a:	68fb      	ldr	r3, [r7, #12]
}
 801993c:	0018      	movs	r0, r3
 801993e:	46bd      	mov	sp, r7
 8019940:	b004      	add	sp, #16
 8019942:	bd80      	pop	{r7, pc}
 8019944:	2000127c 	.word	0x2000127c
 8019948:	2000125c 	.word	0x2000125c
 801994c:	20000d84 	.word	0x20000d84
 8019950:	20001214 	.word	0x20001214
 8019954:	20000d80 	.word	0x20000d80
 8019958:	20001268 	.word	0x20001268

0801995c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019964:	4b05      	ldr	r3, [pc, #20]	; (801997c <vTaskInternalSetTimeOutState+0x20>)
 8019966:	681a      	ldr	r2, [r3, #0]
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801996c:	4b04      	ldr	r3, [pc, #16]	; (8019980 <vTaskInternalSetTimeOutState+0x24>)
 801996e:	681a      	ldr	r2, [r3, #0]
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	605a      	str	r2, [r3, #4]
}
 8019974:	46c0      	nop			; (mov r8, r8)
 8019976:	46bd      	mov	sp, r7
 8019978:	b002      	add	sp, #8
 801997a:	bd80      	pop	{r7, pc}
 801997c:	2000126c 	.word	0x2000126c
 8019980:	20001258 	.word	0x20001258

08019984 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b086      	sub	sp, #24
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d101      	bne.n	8019998 <xTaskCheckForTimeOut+0x14>
 8019994:	b672      	cpsid	i
 8019996:	e7fe      	b.n	8019996 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8019998:	683b      	ldr	r3, [r7, #0]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d101      	bne.n	80199a2 <xTaskCheckForTimeOut+0x1e>
 801999e:	b672      	cpsid	i
 80199a0:	e7fe      	b.n	80199a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80199a2:	f000 fd9d 	bl	801a4e0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80199a6:	4b1d      	ldr	r3, [pc, #116]	; (8019a1c <xTaskCheckForTimeOut+0x98>)
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	685b      	ldr	r3, [r3, #4]
 80199b0:	693a      	ldr	r2, [r7, #16]
 80199b2:	1ad3      	subs	r3, r2, r3
 80199b4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80199b6:	683b      	ldr	r3, [r7, #0]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	3301      	adds	r3, #1
 80199bc:	d102      	bne.n	80199c4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80199be:	2300      	movs	r3, #0
 80199c0:	617b      	str	r3, [r7, #20]
 80199c2:	e024      	b.n	8019a0e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	681a      	ldr	r2, [r3, #0]
 80199c8:	4b15      	ldr	r3, [pc, #84]	; (8019a20 <xTaskCheckForTimeOut+0x9c>)
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d007      	beq.n	80199e0 <xTaskCheckForTimeOut+0x5c>
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	685b      	ldr	r3, [r3, #4]
 80199d4:	693a      	ldr	r2, [r7, #16]
 80199d6:	429a      	cmp	r2, r3
 80199d8:	d302      	bcc.n	80199e0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80199da:	2301      	movs	r3, #1
 80199dc:	617b      	str	r3, [r7, #20]
 80199de:	e016      	b.n	8019a0e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	68fa      	ldr	r2, [r7, #12]
 80199e6:	429a      	cmp	r2, r3
 80199e8:	d20c      	bcs.n	8019a04 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	681a      	ldr	r2, [r3, #0]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	1ad2      	subs	r2, r2, r3
 80199f2:	683b      	ldr	r3, [r7, #0]
 80199f4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	0018      	movs	r0, r3
 80199fa:	f7ff ffaf 	bl	801995c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80199fe:	2300      	movs	r3, #0
 8019a00:	617b      	str	r3, [r7, #20]
 8019a02:	e004      	b.n	8019a0e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	2200      	movs	r2, #0
 8019a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8019a0e:	f000 fd79 	bl	801a504 <vPortExitCritical>

	return xReturn;
 8019a12:	697b      	ldr	r3, [r7, #20]
}
 8019a14:	0018      	movs	r0, r3
 8019a16:	46bd      	mov	sp, r7
 8019a18:	b006      	add	sp, #24
 8019a1a:	bd80      	pop	{r7, pc}
 8019a1c:	20001258 	.word	0x20001258
 8019a20:	2000126c 	.word	0x2000126c

08019a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019a24:	b580      	push	{r7, lr}
 8019a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019a28:	4b02      	ldr	r3, [pc, #8]	; (8019a34 <vTaskMissedYield+0x10>)
 8019a2a:	2201      	movs	r2, #1
 8019a2c:	601a      	str	r2, [r3, #0]
}
 8019a2e:	46c0      	nop			; (mov r8, r8)
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bd80      	pop	{r7, pc}
 8019a34:	20001268 	.word	0x20001268

08019a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b082      	sub	sp, #8
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019a40:	f000 f84e 	bl	8019ae0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019a44:	4b03      	ldr	r3, [pc, #12]	; (8019a54 <prvIdleTask+0x1c>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b01      	cmp	r3, #1
 8019a4a:	d9f9      	bls.n	8019a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019a4c:	f000 fd38 	bl	801a4c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8019a50:	e7f6      	b.n	8019a40 <prvIdleTask+0x8>
 8019a52:	46c0      	nop			; (mov r8, r8)
 8019a54:	20000d84 	.word	0x20000d84

08019a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	b082      	sub	sp, #8
 8019a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019a5e:	2300      	movs	r3, #0
 8019a60:	607b      	str	r3, [r7, #4]
 8019a62:	e00c      	b.n	8019a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019a64:	687a      	ldr	r2, [r7, #4]
 8019a66:	0013      	movs	r3, r2
 8019a68:	009b      	lsls	r3, r3, #2
 8019a6a:	189b      	adds	r3, r3, r2
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	4a14      	ldr	r2, [pc, #80]	; (8019ac0 <prvInitialiseTaskLists+0x68>)
 8019a70:	189b      	adds	r3, r3, r2
 8019a72:	0018      	movs	r0, r3
 8019a74:	f7fe fc52 	bl	801831c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	3301      	adds	r3, #1
 8019a7c:	607b      	str	r3, [r7, #4]
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	2b37      	cmp	r3, #55	; 0x37
 8019a82:	d9ef      	bls.n	8019a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019a84:	4b0f      	ldr	r3, [pc, #60]	; (8019ac4 <prvInitialiseTaskLists+0x6c>)
 8019a86:	0018      	movs	r0, r3
 8019a88:	f7fe fc48 	bl	801831c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019a8c:	4b0e      	ldr	r3, [pc, #56]	; (8019ac8 <prvInitialiseTaskLists+0x70>)
 8019a8e:	0018      	movs	r0, r3
 8019a90:	f7fe fc44 	bl	801831c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019a94:	4b0d      	ldr	r3, [pc, #52]	; (8019acc <prvInitialiseTaskLists+0x74>)
 8019a96:	0018      	movs	r0, r3
 8019a98:	f7fe fc40 	bl	801831c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019a9c:	4b0c      	ldr	r3, [pc, #48]	; (8019ad0 <prvInitialiseTaskLists+0x78>)
 8019a9e:	0018      	movs	r0, r3
 8019aa0:	f7fe fc3c 	bl	801831c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019aa4:	4b0b      	ldr	r3, [pc, #44]	; (8019ad4 <prvInitialiseTaskLists+0x7c>)
 8019aa6:	0018      	movs	r0, r3
 8019aa8:	f7fe fc38 	bl	801831c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019aac:	4b0a      	ldr	r3, [pc, #40]	; (8019ad8 <prvInitialiseTaskLists+0x80>)
 8019aae:	4a05      	ldr	r2, [pc, #20]	; (8019ac4 <prvInitialiseTaskLists+0x6c>)
 8019ab0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019ab2:	4b0a      	ldr	r3, [pc, #40]	; (8019adc <prvInitialiseTaskLists+0x84>)
 8019ab4:	4a04      	ldr	r2, [pc, #16]	; (8019ac8 <prvInitialiseTaskLists+0x70>)
 8019ab6:	601a      	str	r2, [r3, #0]
}
 8019ab8:	46c0      	nop			; (mov r8, r8)
 8019aba:	46bd      	mov	sp, r7
 8019abc:	b002      	add	sp, #8
 8019abe:	bd80      	pop	{r7, pc}
 8019ac0:	20000d84 	.word	0x20000d84
 8019ac4:	200011e4 	.word	0x200011e4
 8019ac8:	200011f8 	.word	0x200011f8
 8019acc:	20001214 	.word	0x20001214
 8019ad0:	20001228 	.word	0x20001228
 8019ad4:	20001240 	.word	0x20001240
 8019ad8:	2000120c 	.word	0x2000120c
 8019adc:	20001210 	.word	0x20001210

08019ae0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b082      	sub	sp, #8
 8019ae4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019ae6:	e01a      	b.n	8019b1e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8019ae8:	f000 fcfa 	bl	801a4e0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019aec:	4b10      	ldr	r3, [pc, #64]	; (8019b30 <prvCheckTasksWaitingTermination+0x50>)
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	68db      	ldr	r3, [r3, #12]
 8019af2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	3304      	adds	r3, #4
 8019af8:	0018      	movs	r0, r3
 8019afa:	f7fe fc90 	bl	801841e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019afe:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <prvCheckTasksWaitingTermination+0x54>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	1e5a      	subs	r2, r3, #1
 8019b04:	4b0b      	ldr	r3, [pc, #44]	; (8019b34 <prvCheckTasksWaitingTermination+0x54>)
 8019b06:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019b08:	4b0b      	ldr	r3, [pc, #44]	; (8019b38 <prvCheckTasksWaitingTermination+0x58>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	1e5a      	subs	r2, r3, #1
 8019b0e:	4b0a      	ldr	r3, [pc, #40]	; (8019b38 <prvCheckTasksWaitingTermination+0x58>)
 8019b10:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8019b12:	f000 fcf7 	bl	801a504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	0018      	movs	r0, r3
 8019b1a:	f000 f80f 	bl	8019b3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019b1e:	4b06      	ldr	r3, [pc, #24]	; (8019b38 <prvCheckTasksWaitingTermination+0x58>)
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d1e0      	bne.n	8019ae8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019b26:	46c0      	nop			; (mov r8, r8)
 8019b28:	46c0      	nop			; (mov r8, r8)
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	b002      	add	sp, #8
 8019b2e:	bd80      	pop	{r7, pc}
 8019b30:	20001228 	.word	0x20001228
 8019b34:	20001254 	.word	0x20001254
 8019b38:	2000123c 	.word	0x2000123c

08019b3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b082      	sub	sp, #8
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	3354      	adds	r3, #84	; 0x54
 8019b48:	0018      	movs	r0, r3
 8019b4a:	f009 fd6b 	bl	8023624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	22a5      	movs	r2, #165	; 0xa5
 8019b52:	5c9b      	ldrb	r3, [r3, r2]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d109      	bne.n	8019b6c <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019b5c:	0018      	movs	r0, r3
 8019b5e:	f000 fe03 	bl	801a768 <vPortFree>
				vPortFree( pxTCB );
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	0018      	movs	r0, r3
 8019b66:	f000 fdff 	bl	801a768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8019b6a:	e010      	b.n	8019b8e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	22a5      	movs	r2, #165	; 0xa5
 8019b70:	5c9b      	ldrb	r3, [r3, r2]
 8019b72:	2b01      	cmp	r3, #1
 8019b74:	d104      	bne.n	8019b80 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	0018      	movs	r0, r3
 8019b7a:	f000 fdf5 	bl	801a768 <vPortFree>
	}
 8019b7e:	e006      	b.n	8019b8e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	22a5      	movs	r2, #165	; 0xa5
 8019b84:	5c9b      	ldrb	r3, [r3, r2]
 8019b86:	2b02      	cmp	r3, #2
 8019b88:	d001      	beq.n	8019b8e <prvDeleteTCB+0x52>
 8019b8a:	b672      	cpsid	i
 8019b8c:	e7fe      	b.n	8019b8c <prvDeleteTCB+0x50>
	}
 8019b8e:	46c0      	nop			; (mov r8, r8)
 8019b90:	46bd      	mov	sp, r7
 8019b92:	b002      	add	sp, #8
 8019b94:	bd80      	pop	{r7, pc}
	...

08019b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b082      	sub	sp, #8
 8019b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019b9e:	4b0b      	ldr	r3, [pc, #44]	; (8019bcc <prvResetNextTaskUnblockTime+0x34>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d104      	bne.n	8019bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8019ba8:	4b09      	ldr	r3, [pc, #36]	; (8019bd0 <prvResetNextTaskUnblockTime+0x38>)
 8019baa:	2201      	movs	r2, #1
 8019bac:	4252      	negs	r2, r2
 8019bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8019bb0:	e008      	b.n	8019bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019bb2:	4b06      	ldr	r3, [pc, #24]	; (8019bcc <prvResetNextTaskUnblockTime+0x34>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	68db      	ldr	r3, [r3, #12]
 8019bb8:	68db      	ldr	r3, [r3, #12]
 8019bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	685a      	ldr	r2, [r3, #4]
 8019bc0:	4b03      	ldr	r3, [pc, #12]	; (8019bd0 <prvResetNextTaskUnblockTime+0x38>)
 8019bc2:	601a      	str	r2, [r3, #0]
}
 8019bc4:	46c0      	nop			; (mov r8, r8)
 8019bc6:	46bd      	mov	sp, r7
 8019bc8:	b002      	add	sp, #8
 8019bca:	bd80      	pop	{r7, pc}
 8019bcc:	2000120c 	.word	0x2000120c
 8019bd0:	20001274 	.word	0x20001274

08019bd4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b082      	sub	sp, #8
 8019bd8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8019bda:	4b04      	ldr	r3, [pc, #16]	; (8019bec <xTaskGetCurrentTaskHandle+0x18>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	607b      	str	r3, [r7, #4]

		return xReturn;
 8019be0:	687b      	ldr	r3, [r7, #4]
	}
 8019be2:	0018      	movs	r0, r3
 8019be4:	46bd      	mov	sp, r7
 8019be6:	b002      	add	sp, #8
 8019be8:	bd80      	pop	{r7, pc}
 8019bea:	46c0      	nop			; (mov r8, r8)
 8019bec:	20000d80 	.word	0x20000d80

08019bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8019bf0:	b580      	push	{r7, lr}
 8019bf2:	b082      	sub	sp, #8
 8019bf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8019bf6:	4b0a      	ldr	r3, [pc, #40]	; (8019c20 <xTaskGetSchedulerState+0x30>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d102      	bne.n	8019c04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019bfe:	2301      	movs	r3, #1
 8019c00:	607b      	str	r3, [r7, #4]
 8019c02:	e008      	b.n	8019c16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019c04:	4b07      	ldr	r3, [pc, #28]	; (8019c24 <xTaskGetSchedulerState+0x34>)
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d102      	bne.n	8019c12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019c0c:	2302      	movs	r3, #2
 8019c0e:	607b      	str	r3, [r7, #4]
 8019c10:	e001      	b.n	8019c16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019c12:	2300      	movs	r3, #0
 8019c14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019c16:	687b      	ldr	r3, [r7, #4]
	}
 8019c18:	0018      	movs	r0, r3
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	b002      	add	sp, #8
 8019c1e:	bd80      	pop	{r7, pc}
 8019c20:	20001260 	.word	0x20001260
 8019c24:	2000127c 	.word	0x2000127c

08019c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b084      	sub	sp, #16
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8019c34:	2300      	movs	r3, #0
 8019c36:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d044      	beq.n	8019cc8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019c3e:	4b25      	ldr	r3, [pc, #148]	; (8019cd4 <xTaskPriorityDisinherit+0xac>)
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	68ba      	ldr	r2, [r7, #8]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d001      	beq.n	8019c4c <xTaskPriorityDisinherit+0x24>
 8019c48:	b672      	cpsid	i
 8019c4a:	e7fe      	b.n	8019c4a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d101      	bne.n	8019c58 <xTaskPriorityDisinherit+0x30>
 8019c54:	b672      	cpsid	i
 8019c56:	e7fe      	b.n	8019c56 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c5c:	1e5a      	subs	r2, r3, #1
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019c62:	68bb      	ldr	r3, [r7, #8]
 8019c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d02c      	beq.n	8019cc8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019c6e:	68bb      	ldr	r3, [r7, #8]
 8019c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d128      	bne.n	8019cc8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019c76:	68bb      	ldr	r3, [r7, #8]
 8019c78:	3304      	adds	r3, #4
 8019c7a:	0018      	movs	r0, r3
 8019c7c:	f7fe fbcf 	bl	801841e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c8c:	2238      	movs	r2, #56	; 0x38
 8019c8e:	1ad2      	subs	r2, r2, r3
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c98:	4b0f      	ldr	r3, [pc, #60]	; (8019cd8 <xTaskPriorityDisinherit+0xb0>)
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	d903      	bls.n	8019ca8 <xTaskPriorityDisinherit+0x80>
 8019ca0:	68bb      	ldr	r3, [r7, #8]
 8019ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ca4:	4b0c      	ldr	r3, [pc, #48]	; (8019cd8 <xTaskPriorityDisinherit+0xb0>)
 8019ca6:	601a      	str	r2, [r3, #0]
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019cac:	0013      	movs	r3, r2
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	189b      	adds	r3, r3, r2
 8019cb2:	009b      	lsls	r3, r3, #2
 8019cb4:	4a09      	ldr	r2, [pc, #36]	; (8019cdc <xTaskPriorityDisinherit+0xb4>)
 8019cb6:	189a      	adds	r2, r3, r2
 8019cb8:	68bb      	ldr	r3, [r7, #8]
 8019cba:	3304      	adds	r3, #4
 8019cbc:	0019      	movs	r1, r3
 8019cbe:	0010      	movs	r0, r2
 8019cc0:	f7fe fb55 	bl	801836e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019cc4:	2301      	movs	r3, #1
 8019cc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
	}
 8019cca:	0018      	movs	r0, r3
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	b004      	add	sp, #16
 8019cd0:	bd80      	pop	{r7, pc}
 8019cd2:	46c0      	nop			; (mov r8, r8)
 8019cd4:	20000d80 	.word	0x20000d80
 8019cd8:	2000125c 	.word	0x2000125c
 8019cdc:	20000d84 	.word	0x20000d84

08019ce0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b084      	sub	sp, #16
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	6078      	str	r0, [r7, #4]
 8019ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019cea:	4b21      	ldr	r3, [pc, #132]	; (8019d70 <prvAddCurrentTaskToDelayedList+0x90>)
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019cf0:	4b20      	ldr	r3, [pc, #128]	; (8019d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	3304      	adds	r3, #4
 8019cf6:	0018      	movs	r0, r3
 8019cf8:	f7fe fb91 	bl	801841e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	3301      	adds	r3, #1
 8019d00:	d10b      	bne.n	8019d1a <prvAddCurrentTaskToDelayedList+0x3a>
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d008      	beq.n	8019d1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d08:	4b1a      	ldr	r3, [pc, #104]	; (8019d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	1d1a      	adds	r2, r3, #4
 8019d0e:	4b1a      	ldr	r3, [pc, #104]	; (8019d78 <prvAddCurrentTaskToDelayedList+0x98>)
 8019d10:	0011      	movs	r1, r2
 8019d12:	0018      	movs	r0, r3
 8019d14:	f7fe fb2b 	bl	801836e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019d18:	e026      	b.n	8019d68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019d1a:	68fa      	ldr	r2, [r7, #12]
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	18d3      	adds	r3, r2, r3
 8019d20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019d22:	4b14      	ldr	r3, [pc, #80]	; (8019d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	68ba      	ldr	r2, [r7, #8]
 8019d28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019d2a:	68ba      	ldr	r2, [r7, #8]
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d209      	bcs.n	8019d46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d32:	4b12      	ldr	r3, [pc, #72]	; (8019d7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8019d34:	681a      	ldr	r2, [r3, #0]
 8019d36:	4b0f      	ldr	r3, [pc, #60]	; (8019d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	3304      	adds	r3, #4
 8019d3c:	0019      	movs	r1, r3
 8019d3e:	0010      	movs	r0, r2
 8019d40:	f7fe fb37 	bl	80183b2 <vListInsert>
}
 8019d44:	e010      	b.n	8019d68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019d46:	4b0e      	ldr	r3, [pc, #56]	; (8019d80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019d48:	681a      	ldr	r2, [r3, #0]
 8019d4a:	4b0a      	ldr	r3, [pc, #40]	; (8019d74 <prvAddCurrentTaskToDelayedList+0x94>)
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	3304      	adds	r3, #4
 8019d50:	0019      	movs	r1, r3
 8019d52:	0010      	movs	r0, r2
 8019d54:	f7fe fb2d 	bl	80183b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019d58:	4b0a      	ldr	r3, [pc, #40]	; (8019d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	68ba      	ldr	r2, [r7, #8]
 8019d5e:	429a      	cmp	r2, r3
 8019d60:	d202      	bcs.n	8019d68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019d62:	4b08      	ldr	r3, [pc, #32]	; (8019d84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019d64:	68ba      	ldr	r2, [r7, #8]
 8019d66:	601a      	str	r2, [r3, #0]
}
 8019d68:	46c0      	nop			; (mov r8, r8)
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	b004      	add	sp, #16
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	20001258 	.word	0x20001258
 8019d74:	20000d80 	.word	0x20000d80
 8019d78:	20001240 	.word	0x20001240
 8019d7c:	20001210 	.word	0x20001210
 8019d80:	2000120c 	.word	0x2000120c
 8019d84:	20001274 	.word	0x20001274

08019d88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019d88:	b590      	push	{r4, r7, lr}
 8019d8a:	b089      	sub	sp, #36	; 0x24
 8019d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019d8e:	2300      	movs	r3, #0
 8019d90:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019d92:	f000 fac9 	bl	801a328 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019d96:	4b17      	ldr	r3, [pc, #92]	; (8019df4 <xTimerCreateTimerTask+0x6c>)
 8019d98:	681b      	ldr	r3, [r3, #0]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d020      	beq.n	8019de0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019da2:	2300      	movs	r3, #0
 8019da4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019da6:	003a      	movs	r2, r7
 8019da8:	1d39      	adds	r1, r7, #4
 8019daa:	2308      	movs	r3, #8
 8019dac:	18fb      	adds	r3, r7, r3
 8019dae:	0018      	movs	r0, r3
 8019db0:	f7fe fa9c 	bl	80182ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019db4:	683c      	ldr	r4, [r7, #0]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	68ba      	ldr	r2, [r7, #8]
 8019dba:	490f      	ldr	r1, [pc, #60]	; (8019df8 <xTimerCreateTimerTask+0x70>)
 8019dbc:	480f      	ldr	r0, [pc, #60]	; (8019dfc <xTimerCreateTimerTask+0x74>)
 8019dbe:	9202      	str	r2, [sp, #8]
 8019dc0:	9301      	str	r3, [sp, #4]
 8019dc2:	2302      	movs	r3, #2
 8019dc4:	9300      	str	r3, [sp, #0]
 8019dc6:	2300      	movs	r3, #0
 8019dc8:	0022      	movs	r2, r4
 8019dca:	f7ff f812 	bl	8018df2 <xTaskCreateStatic>
 8019dce:	0002      	movs	r2, r0
 8019dd0:	4b0b      	ldr	r3, [pc, #44]	; (8019e00 <xTimerCreateTimerTask+0x78>)
 8019dd2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019dd4:	4b0a      	ldr	r3, [pc, #40]	; (8019e00 <xTimerCreateTimerTask+0x78>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d001      	beq.n	8019de0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8019ddc:	2301      	movs	r3, #1
 8019dde:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d101      	bne.n	8019dea <xTimerCreateTimerTask+0x62>
 8019de6:	b672      	cpsid	i
 8019de8:	e7fe      	b.n	8019de8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8019dea:	68fb      	ldr	r3, [r7, #12]
}
 8019dec:	0018      	movs	r0, r3
 8019dee:	46bd      	mov	sp, r7
 8019df0:	b005      	add	sp, #20
 8019df2:	bd90      	pop	{r4, r7, pc}
 8019df4:	200012b0 	.word	0x200012b0
 8019df8:	08024068 	.word	0x08024068
 8019dfc:	08019f21 	.word	0x08019f21
 8019e00:	200012b4 	.word	0x200012b4

08019e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019e04:	b590      	push	{r4, r7, lr}
 8019e06:	b08b      	sub	sp, #44	; 0x2c
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	60f8      	str	r0, [r7, #12]
 8019e0c:	60b9      	str	r1, [r7, #8]
 8019e0e:	607a      	str	r2, [r7, #4]
 8019e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019e12:	2300      	movs	r3, #0
 8019e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d101      	bne.n	8019e20 <xTimerGenericCommand+0x1c>
 8019e1c:	b672      	cpsid	i
 8019e1e:	e7fe      	b.n	8019e1e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019e20:	4b1c      	ldr	r3, [pc, #112]	; (8019e94 <xTimerGenericCommand+0x90>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d030      	beq.n	8019e8a <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019e28:	2414      	movs	r4, #20
 8019e2a:	193b      	adds	r3, r7, r4
 8019e2c:	68ba      	ldr	r2, [r7, #8]
 8019e2e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019e30:	193b      	adds	r3, r7, r4
 8019e32:	687a      	ldr	r2, [r7, #4]
 8019e34:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019e36:	193b      	adds	r3, r7, r4
 8019e38:	68fa      	ldr	r2, [r7, #12]
 8019e3a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	2b05      	cmp	r3, #5
 8019e40:	dc19      	bgt.n	8019e76 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019e42:	f7ff fed5 	bl	8019bf0 <xTaskGetSchedulerState>
 8019e46:	0003      	movs	r3, r0
 8019e48:	2b02      	cmp	r3, #2
 8019e4a:	d109      	bne.n	8019e60 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019e4c:	4b11      	ldr	r3, [pc, #68]	; (8019e94 <xTimerGenericCommand+0x90>)
 8019e4e:	6818      	ldr	r0, [r3, #0]
 8019e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019e52:	1939      	adds	r1, r7, r4
 8019e54:	2300      	movs	r3, #0
 8019e56:	f7fe fc03 	bl	8018660 <xQueueGenericSend>
 8019e5a:	0003      	movs	r3, r0
 8019e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8019e5e:	e014      	b.n	8019e8a <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019e60:	4b0c      	ldr	r3, [pc, #48]	; (8019e94 <xTimerGenericCommand+0x90>)
 8019e62:	6818      	ldr	r0, [r3, #0]
 8019e64:	2314      	movs	r3, #20
 8019e66:	18f9      	adds	r1, r7, r3
 8019e68:	2300      	movs	r3, #0
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	f7fe fbf8 	bl	8018660 <xQueueGenericSend>
 8019e70:	0003      	movs	r3, r0
 8019e72:	627b      	str	r3, [r7, #36]	; 0x24
 8019e74:	e009      	b.n	8019e8a <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019e76:	4b07      	ldr	r3, [pc, #28]	; (8019e94 <xTimerGenericCommand+0x90>)
 8019e78:	6818      	ldr	r0, [r3, #0]
 8019e7a:	683a      	ldr	r2, [r7, #0]
 8019e7c:	2314      	movs	r3, #20
 8019e7e:	18f9      	adds	r1, r7, r3
 8019e80:	2300      	movs	r3, #0
 8019e82:	f7fe fcb1 	bl	80187e8 <xQueueGenericSendFromISR>
 8019e86:	0003      	movs	r3, r0
 8019e88:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019e8c:	0018      	movs	r0, r3
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	b00b      	add	sp, #44	; 0x2c
 8019e92:	bd90      	pop	{r4, r7, pc}
 8019e94:	200012b0 	.word	0x200012b0

08019e98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b086      	sub	sp, #24
 8019e9c:	af02      	add	r7, sp, #8
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019ea2:	4b1e      	ldr	r3, [pc, #120]	; (8019f1c <prvProcessExpiredTimer+0x84>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	68db      	ldr	r3, [r3, #12]
 8019ea8:	68db      	ldr	r3, [r3, #12]
 8019eaa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	3304      	adds	r3, #4
 8019eb0:	0018      	movs	r0, r3
 8019eb2:	f7fe fab4 	bl	801841e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	2228      	movs	r2, #40	; 0x28
 8019eba:	5c9b      	ldrb	r3, [r3, r2]
 8019ebc:	001a      	movs	r2, r3
 8019ebe:	2304      	movs	r3, #4
 8019ec0:	4013      	ands	r3, r2
 8019ec2:	d019      	beq.n	8019ef8 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	699a      	ldr	r2, [r3, #24]
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	18d1      	adds	r1, r2, r3
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	683a      	ldr	r2, [r7, #0]
 8019ed0:	68f8      	ldr	r0, [r7, #12]
 8019ed2:	f000 f8c3 	bl	801a05c <prvInsertTimerInActiveList>
 8019ed6:	1e03      	subs	r3, r0, #0
 8019ed8:	d017      	beq.n	8019f0a <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019eda:	687a      	ldr	r2, [r7, #4]
 8019edc:	68f8      	ldr	r0, [r7, #12]
 8019ede:	2300      	movs	r3, #0
 8019ee0:	9300      	str	r3, [sp, #0]
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	2100      	movs	r1, #0
 8019ee6:	f7ff ff8d 	bl	8019e04 <xTimerGenericCommand>
 8019eea:	0003      	movs	r3, r0
 8019eec:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 8019eee:	68bb      	ldr	r3, [r7, #8]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d10a      	bne.n	8019f0a <prvProcessExpiredTimer+0x72>
 8019ef4:	b672      	cpsid	i
 8019ef6:	e7fe      	b.n	8019ef6 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	2228      	movs	r2, #40	; 0x28
 8019efc:	5c9b      	ldrb	r3, [r3, r2]
 8019efe:	2201      	movs	r2, #1
 8019f00:	4393      	bics	r3, r2
 8019f02:	b2d9      	uxtb	r1, r3
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	2228      	movs	r2, #40	; 0x28
 8019f08:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	6a1b      	ldr	r3, [r3, #32]
 8019f0e:	68fa      	ldr	r2, [r7, #12]
 8019f10:	0010      	movs	r0, r2
 8019f12:	4798      	blx	r3
}
 8019f14:	46c0      	nop			; (mov r8, r8)
 8019f16:	46bd      	mov	sp, r7
 8019f18:	b004      	add	sp, #16
 8019f1a:	bd80      	pop	{r7, pc}
 8019f1c:	200012a8 	.word	0x200012a8

08019f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b084      	sub	sp, #16
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019f28:	2308      	movs	r3, #8
 8019f2a:	18fb      	adds	r3, r7, r3
 8019f2c:	0018      	movs	r0, r3
 8019f2e:	f000 f853 	bl	8019fd8 <prvGetNextExpireTime>
 8019f32:	0003      	movs	r3, r0
 8019f34:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019f36:	68ba      	ldr	r2, [r7, #8]
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	0011      	movs	r1, r2
 8019f3c:	0018      	movs	r0, r3
 8019f3e:	f000 f803 	bl	8019f48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019f42:	f000 f8cd 	bl	801a0e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019f46:	e7ef      	b.n	8019f28 <prvTimerTask+0x8>

08019f48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b084      	sub	sp, #16
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
 8019f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019f52:	f7ff fab3 	bl	80194bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019f56:	2308      	movs	r3, #8
 8019f58:	18fb      	adds	r3, r7, r3
 8019f5a:	0018      	movs	r0, r3
 8019f5c:	f000 f85e 	bl	801a01c <prvSampleTimeNow>
 8019f60:	0003      	movs	r3, r0
 8019f62:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019f64:	68bb      	ldr	r3, [r7, #8]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d12b      	bne.n	8019fc2 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019f6a:	683b      	ldr	r3, [r7, #0]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d10c      	bne.n	8019f8a <prvProcessTimerOrBlockTask+0x42>
 8019f70:	687a      	ldr	r2, [r7, #4]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	429a      	cmp	r2, r3
 8019f76:	d808      	bhi.n	8019f8a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8019f78:	f7ff faac 	bl	80194d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019f7c:	68fa      	ldr	r2, [r7, #12]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	0011      	movs	r1, r2
 8019f82:	0018      	movs	r0, r3
 8019f84:	f7ff ff88 	bl	8019e98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019f88:	e01d      	b.n	8019fc6 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8019f8a:	683b      	ldr	r3, [r7, #0]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d008      	beq.n	8019fa2 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019f90:	4b0f      	ldr	r3, [pc, #60]	; (8019fd0 <prvProcessTimerOrBlockTask+0x88>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d101      	bne.n	8019f9e <prvProcessTimerOrBlockTask+0x56>
 8019f9a:	2301      	movs	r3, #1
 8019f9c:	e000      	b.n	8019fa0 <prvProcessTimerOrBlockTask+0x58>
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019fa2:	4b0c      	ldr	r3, [pc, #48]	; (8019fd4 <prvProcessTimerOrBlockTask+0x8c>)
 8019fa4:	6818      	ldr	r0, [r3, #0]
 8019fa6:	687a      	ldr	r2, [r7, #4]
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	1ad3      	subs	r3, r2, r3
 8019fac:	683a      	ldr	r2, [r7, #0]
 8019fae:	0019      	movs	r1, r3
 8019fb0:	f7fe feec 	bl	8018d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019fb4:	f7ff fa8e 	bl	80194d4 <xTaskResumeAll>
 8019fb8:	1e03      	subs	r3, r0, #0
 8019fba:	d104      	bne.n	8019fc6 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8019fbc:	f000 fa80 	bl	801a4c0 <vPortYield>
}
 8019fc0:	e001      	b.n	8019fc6 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8019fc2:	f7ff fa87 	bl	80194d4 <xTaskResumeAll>
}
 8019fc6:	46c0      	nop			; (mov r8, r8)
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	b004      	add	sp, #16
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	46c0      	nop			; (mov r8, r8)
 8019fd0:	200012ac 	.word	0x200012ac
 8019fd4:	200012b0 	.word	0x200012b0

08019fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b084      	sub	sp, #16
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019fe0:	4b0d      	ldr	r3, [pc, #52]	; (801a018 <prvGetNextExpireTime+0x40>)
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d101      	bne.n	8019fee <prvGetNextExpireTime+0x16>
 8019fea:	2201      	movs	r2, #1
 8019fec:	e000      	b.n	8019ff0 <prvGetNextExpireTime+0x18>
 8019fee:	2200      	movs	r2, #0
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d105      	bne.n	801a008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019ffc:	4b06      	ldr	r3, [pc, #24]	; (801a018 <prvGetNextExpireTime+0x40>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	68db      	ldr	r3, [r3, #12]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	60fb      	str	r3, [r7, #12]
 801a006:	e001      	b.n	801a00c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801a008:	2300      	movs	r3, #0
 801a00a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801a00c:	68fb      	ldr	r3, [r7, #12]
}
 801a00e:	0018      	movs	r0, r3
 801a010:	46bd      	mov	sp, r7
 801a012:	b004      	add	sp, #16
 801a014:	bd80      	pop	{r7, pc}
 801a016:	46c0      	nop			; (mov r8, r8)
 801a018:	200012a8 	.word	0x200012a8

0801a01c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b084      	sub	sp, #16
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801a024:	f7ff fae2 	bl	80195ec <xTaskGetTickCount>
 801a028:	0003      	movs	r3, r0
 801a02a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 801a02c:	4b0a      	ldr	r3, [pc, #40]	; (801a058 <prvSampleTimeNow+0x3c>)
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	68fa      	ldr	r2, [r7, #12]
 801a032:	429a      	cmp	r2, r3
 801a034:	d205      	bcs.n	801a042 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801a036:	f000 f919 	bl	801a26c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2201      	movs	r2, #1
 801a03e:	601a      	str	r2, [r3, #0]
 801a040:	e002      	b.n	801a048 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2200      	movs	r2, #0
 801a046:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801a048:	4b03      	ldr	r3, [pc, #12]	; (801a058 <prvSampleTimeNow+0x3c>)
 801a04a:	68fa      	ldr	r2, [r7, #12]
 801a04c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801a04e:	68fb      	ldr	r3, [r7, #12]
}
 801a050:	0018      	movs	r0, r3
 801a052:	46bd      	mov	sp, r7
 801a054:	b004      	add	sp, #16
 801a056:	bd80      	pop	{r7, pc}
 801a058:	200012b8 	.word	0x200012b8

0801a05c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b086      	sub	sp, #24
 801a060:	af00      	add	r7, sp, #0
 801a062:	60f8      	str	r0, [r7, #12]
 801a064:	60b9      	str	r1, [r7, #8]
 801a066:	607a      	str	r2, [r7, #4]
 801a068:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801a06a:	2300      	movs	r3, #0
 801a06c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	68ba      	ldr	r2, [r7, #8]
 801a072:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	68fa      	ldr	r2, [r7, #12]
 801a078:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801a07a:	68ba      	ldr	r2, [r7, #8]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	429a      	cmp	r2, r3
 801a080:	d812      	bhi.n	801a0a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a082:	687a      	ldr	r2, [r7, #4]
 801a084:	683b      	ldr	r3, [r7, #0]
 801a086:	1ad2      	subs	r2, r2, r3
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	699b      	ldr	r3, [r3, #24]
 801a08c:	429a      	cmp	r2, r3
 801a08e:	d302      	bcc.n	801a096 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801a090:	2301      	movs	r3, #1
 801a092:	617b      	str	r3, [r7, #20]
 801a094:	e01b      	b.n	801a0ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801a096:	4b10      	ldr	r3, [pc, #64]	; (801a0d8 <prvInsertTimerInActiveList+0x7c>)
 801a098:	681a      	ldr	r2, [r3, #0]
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	3304      	adds	r3, #4
 801a09e:	0019      	movs	r1, r3
 801a0a0:	0010      	movs	r0, r2
 801a0a2:	f7fe f986 	bl	80183b2 <vListInsert>
 801a0a6:	e012      	b.n	801a0ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	d206      	bcs.n	801a0be <prvInsertTimerInActiveList+0x62>
 801a0b0:	68ba      	ldr	r2, [r7, #8]
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	429a      	cmp	r2, r3
 801a0b6:	d302      	bcc.n	801a0be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801a0b8:	2301      	movs	r3, #1
 801a0ba:	617b      	str	r3, [r7, #20]
 801a0bc:	e007      	b.n	801a0ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a0be:	4b07      	ldr	r3, [pc, #28]	; (801a0dc <prvInsertTimerInActiveList+0x80>)
 801a0c0:	681a      	ldr	r2, [r3, #0]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	3304      	adds	r3, #4
 801a0c6:	0019      	movs	r1, r3
 801a0c8:	0010      	movs	r0, r2
 801a0ca:	f7fe f972 	bl	80183b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801a0ce:	697b      	ldr	r3, [r7, #20]
}
 801a0d0:	0018      	movs	r0, r3
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	b006      	add	sp, #24
 801a0d6:	bd80      	pop	{r7, pc}
 801a0d8:	200012ac 	.word	0x200012ac
 801a0dc:	200012a8 	.word	0x200012a8

0801a0e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801a0e0:	b590      	push	{r4, r7, lr}
 801a0e2:	b08d      	sub	sp, #52	; 0x34
 801a0e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a0e6:	e0ac      	b.n	801a242 <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801a0e8:	2208      	movs	r2, #8
 801a0ea:	18bb      	adds	r3, r7, r2
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	da0f      	bge.n	801a112 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801a0f2:	18bb      	adds	r3, r7, r2
 801a0f4:	3304      	adds	r3, #4
 801a0f6:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d101      	bne.n	801a102 <prvProcessReceivedCommands+0x22>
 801a0fe:	b672      	cpsid	i
 801a100:	e7fe      	b.n	801a100 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a104:	681a      	ldr	r2, [r3, #0]
 801a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a108:	6858      	ldr	r0, [r3, #4]
 801a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a10c:	689b      	ldr	r3, [r3, #8]
 801a10e:	0019      	movs	r1, r3
 801a110:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801a112:	2208      	movs	r2, #8
 801a114:	18bb      	adds	r3, r7, r2
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2b00      	cmp	r3, #0
 801a11a:	da00      	bge.n	801a11e <prvProcessReceivedCommands+0x3e>
 801a11c:	e091      	b.n	801a242 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801a11e:	18bb      	adds	r3, r7, r2
 801a120:	689b      	ldr	r3, [r3, #8]
 801a122:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801a124:	6a3b      	ldr	r3, [r7, #32]
 801a126:	695b      	ldr	r3, [r3, #20]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d004      	beq.n	801a136 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a12c:	6a3b      	ldr	r3, [r7, #32]
 801a12e:	3304      	adds	r3, #4
 801a130:	0018      	movs	r0, r3
 801a132:	f7fe f974 	bl	801841e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a136:	1d3b      	adds	r3, r7, #4
 801a138:	0018      	movs	r0, r3
 801a13a:	f7ff ff6f 	bl	801a01c <prvSampleTimeNow>
 801a13e:	0003      	movs	r3, r0
 801a140:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801a142:	2308      	movs	r3, #8
 801a144:	18fb      	adds	r3, r7, r3
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	2b09      	cmp	r3, #9
 801a14a:	d900      	bls.n	801a14e <prvProcessReceivedCommands+0x6e>
 801a14c:	e078      	b.n	801a240 <prvProcessReceivedCommands+0x160>
 801a14e:	009a      	lsls	r2, r3, #2
 801a150:	4b44      	ldr	r3, [pc, #272]	; (801a264 <prvProcessReceivedCommands+0x184>)
 801a152:	18d3      	adds	r3, r2, r3
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a158:	6a3b      	ldr	r3, [r7, #32]
 801a15a:	2228      	movs	r2, #40	; 0x28
 801a15c:	5c9b      	ldrb	r3, [r3, r2]
 801a15e:	2201      	movs	r2, #1
 801a160:	4313      	orrs	r3, r2
 801a162:	b2d9      	uxtb	r1, r3
 801a164:	6a3b      	ldr	r3, [r7, #32]
 801a166:	2228      	movs	r2, #40	; 0x28
 801a168:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a16a:	2408      	movs	r4, #8
 801a16c:	193b      	adds	r3, r7, r4
 801a16e:	685a      	ldr	r2, [r3, #4]
 801a170:	6a3b      	ldr	r3, [r7, #32]
 801a172:	699b      	ldr	r3, [r3, #24]
 801a174:	18d1      	adds	r1, r2, r3
 801a176:	193b      	adds	r3, r7, r4
 801a178:	685b      	ldr	r3, [r3, #4]
 801a17a:	69fa      	ldr	r2, [r7, #28]
 801a17c:	6a38      	ldr	r0, [r7, #32]
 801a17e:	f7ff ff6d 	bl	801a05c <prvInsertTimerInActiveList>
 801a182:	1e03      	subs	r3, r0, #0
 801a184:	d05d      	beq.n	801a242 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a186:	6a3b      	ldr	r3, [r7, #32]
 801a188:	6a1b      	ldr	r3, [r3, #32]
 801a18a:	6a3a      	ldr	r2, [r7, #32]
 801a18c:	0010      	movs	r0, r2
 801a18e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a190:	6a3b      	ldr	r3, [r7, #32]
 801a192:	2228      	movs	r2, #40	; 0x28
 801a194:	5c9b      	ldrb	r3, [r3, r2]
 801a196:	001a      	movs	r2, r3
 801a198:	2304      	movs	r3, #4
 801a19a:	4013      	ands	r3, r2
 801a19c:	d051      	beq.n	801a242 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a19e:	193b      	adds	r3, r7, r4
 801a1a0:	685a      	ldr	r2, [r3, #4]
 801a1a2:	6a3b      	ldr	r3, [r7, #32]
 801a1a4:	699b      	ldr	r3, [r3, #24]
 801a1a6:	18d2      	adds	r2, r2, r3
 801a1a8:	6a38      	ldr	r0, [r7, #32]
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	9300      	str	r3, [sp, #0]
 801a1ae:	2300      	movs	r3, #0
 801a1b0:	2100      	movs	r1, #0
 801a1b2:	f7ff fe27 	bl	8019e04 <xTimerGenericCommand>
 801a1b6:	0003      	movs	r3, r0
 801a1b8:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d140      	bne.n	801a242 <prvProcessReceivedCommands+0x162>
 801a1c0:	b672      	cpsid	i
 801a1c2:	e7fe      	b.n	801a1c2 <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a1c4:	6a3b      	ldr	r3, [r7, #32]
 801a1c6:	2228      	movs	r2, #40	; 0x28
 801a1c8:	5c9b      	ldrb	r3, [r3, r2]
 801a1ca:	2201      	movs	r2, #1
 801a1cc:	4393      	bics	r3, r2
 801a1ce:	b2d9      	uxtb	r1, r3
 801a1d0:	6a3b      	ldr	r3, [r7, #32]
 801a1d2:	2228      	movs	r2, #40	; 0x28
 801a1d4:	5499      	strb	r1, [r3, r2]
					break;
 801a1d6:	e034      	b.n	801a242 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a1d8:	6a3b      	ldr	r3, [r7, #32]
 801a1da:	2228      	movs	r2, #40	; 0x28
 801a1dc:	5c9b      	ldrb	r3, [r3, r2]
 801a1de:	2201      	movs	r2, #1
 801a1e0:	4313      	orrs	r3, r2
 801a1e2:	b2d9      	uxtb	r1, r3
 801a1e4:	6a3b      	ldr	r3, [r7, #32]
 801a1e6:	2228      	movs	r2, #40	; 0x28
 801a1e8:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a1ea:	2308      	movs	r3, #8
 801a1ec:	18fb      	adds	r3, r7, r3
 801a1ee:	685a      	ldr	r2, [r3, #4]
 801a1f0:	6a3b      	ldr	r3, [r7, #32]
 801a1f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a1f4:	6a3b      	ldr	r3, [r7, #32]
 801a1f6:	699b      	ldr	r3, [r3, #24]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d101      	bne.n	801a200 <prvProcessReceivedCommands+0x120>
 801a1fc:	b672      	cpsid	i
 801a1fe:	e7fe      	b.n	801a1fe <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a200:	6a3b      	ldr	r3, [r7, #32]
 801a202:	699a      	ldr	r2, [r3, #24]
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	18d1      	adds	r1, r2, r3
 801a208:	69fb      	ldr	r3, [r7, #28]
 801a20a:	69fa      	ldr	r2, [r7, #28]
 801a20c:	6a38      	ldr	r0, [r7, #32]
 801a20e:	f7ff ff25 	bl	801a05c <prvInsertTimerInActiveList>
					break;
 801a212:	e016      	b.n	801a242 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a214:	6a3b      	ldr	r3, [r7, #32]
 801a216:	2228      	movs	r2, #40	; 0x28
 801a218:	5c9b      	ldrb	r3, [r3, r2]
 801a21a:	001a      	movs	r2, r3
 801a21c:	2302      	movs	r3, #2
 801a21e:	4013      	ands	r3, r2
 801a220:	d104      	bne.n	801a22c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 801a222:	6a3b      	ldr	r3, [r7, #32]
 801a224:	0018      	movs	r0, r3
 801a226:	f000 fa9f 	bl	801a768 <vPortFree>
 801a22a:	e00a      	b.n	801a242 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a22c:	6a3b      	ldr	r3, [r7, #32]
 801a22e:	2228      	movs	r2, #40	; 0x28
 801a230:	5c9b      	ldrb	r3, [r3, r2]
 801a232:	2201      	movs	r2, #1
 801a234:	4393      	bics	r3, r2
 801a236:	b2d9      	uxtb	r1, r3
 801a238:	6a3b      	ldr	r3, [r7, #32]
 801a23a:	2228      	movs	r2, #40	; 0x28
 801a23c:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a23e:	e000      	b.n	801a242 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 801a240:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a242:	4b09      	ldr	r3, [pc, #36]	; (801a268 <prvProcessReceivedCommands+0x188>)
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	2208      	movs	r2, #8
 801a248:	18b9      	adds	r1, r7, r2
 801a24a:	2200      	movs	r2, #0
 801a24c:	0018      	movs	r0, r3
 801a24e:	f7fe fb3f 	bl	80188d0 <xQueueReceive>
 801a252:	1e03      	subs	r3, r0, #0
 801a254:	d000      	beq.n	801a258 <prvProcessReceivedCommands+0x178>
 801a256:	e747      	b.n	801a0e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801a258:	46c0      	nop			; (mov r8, r8)
 801a25a:	46c0      	nop			; (mov r8, r8)
 801a25c:	46bd      	mov	sp, r7
 801a25e:	b00b      	add	sp, #44	; 0x2c
 801a260:	bd90      	pop	{r4, r7, pc}
 801a262:	46c0      	nop			; (mov r8, r8)
 801a264:	08025084 	.word	0x08025084
 801a268:	200012b0 	.word	0x200012b0

0801a26c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b088      	sub	sp, #32
 801a270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a272:	e041      	b.n	801a2f8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a274:	4b2a      	ldr	r3, [pc, #168]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	68db      	ldr	r3, [r3, #12]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a27e:	4b28      	ldr	r3, [pc, #160]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	68db      	ldr	r3, [r3, #12]
 801a284:	68db      	ldr	r3, [r3, #12]
 801a286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	3304      	adds	r3, #4
 801a28c:	0018      	movs	r0, r3
 801a28e:	f7fe f8c6 	bl	801841e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	6a1b      	ldr	r3, [r3, #32]
 801a296:	68fa      	ldr	r2, [r7, #12]
 801a298:	0010      	movs	r0, r2
 801a29a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	2228      	movs	r2, #40	; 0x28
 801a2a0:	5c9b      	ldrb	r3, [r3, r2]
 801a2a2:	001a      	movs	r2, r3
 801a2a4:	2304      	movs	r3, #4
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	d026      	beq.n	801a2f8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	699b      	ldr	r3, [r3, #24]
 801a2ae:	693a      	ldr	r2, [r7, #16]
 801a2b0:	18d3      	adds	r3, r2, r3
 801a2b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a2b4:	68ba      	ldr	r2, [r7, #8]
 801a2b6:	693b      	ldr	r3, [r7, #16]
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d90e      	bls.n	801a2da <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	68ba      	ldr	r2, [r7, #8]
 801a2c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	68fa      	ldr	r2, [r7, #12]
 801a2c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a2c8:	4b15      	ldr	r3, [pc, #84]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a2ca:	681a      	ldr	r2, [r3, #0]
 801a2cc:	68fb      	ldr	r3, [r7, #12]
 801a2ce:	3304      	adds	r3, #4
 801a2d0:	0019      	movs	r1, r3
 801a2d2:	0010      	movs	r0, r2
 801a2d4:	f7fe f86d 	bl	80183b2 <vListInsert>
 801a2d8:	e00e      	b.n	801a2f8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a2da:	693a      	ldr	r2, [r7, #16]
 801a2dc:	68f8      	ldr	r0, [r7, #12]
 801a2de:	2300      	movs	r3, #0
 801a2e0:	9300      	str	r3, [sp, #0]
 801a2e2:	2300      	movs	r3, #0
 801a2e4:	2100      	movs	r1, #0
 801a2e6:	f7ff fd8d 	bl	8019e04 <xTimerGenericCommand>
 801a2ea:	0003      	movs	r3, r0
 801a2ec:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d101      	bne.n	801a2f8 <prvSwitchTimerLists+0x8c>
 801a2f4:	b672      	cpsid	i
 801a2f6:	e7fe      	b.n	801a2f6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a2f8:	4b09      	ldr	r3, [pc, #36]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d1b8      	bne.n	801a274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a302:	4b07      	ldr	r3, [pc, #28]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a308:	4b06      	ldr	r3, [pc, #24]	; (801a324 <prvSwitchTimerLists+0xb8>)
 801a30a:	681a      	ldr	r2, [r3, #0]
 801a30c:	4b04      	ldr	r3, [pc, #16]	; (801a320 <prvSwitchTimerLists+0xb4>)
 801a30e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 801a310:	4b04      	ldr	r3, [pc, #16]	; (801a324 <prvSwitchTimerLists+0xb8>)
 801a312:	697a      	ldr	r2, [r7, #20]
 801a314:	601a      	str	r2, [r3, #0]
}
 801a316:	46c0      	nop			; (mov r8, r8)
 801a318:	46bd      	mov	sp, r7
 801a31a:	b006      	add	sp, #24
 801a31c:	bd80      	pop	{r7, pc}
 801a31e:	46c0      	nop			; (mov r8, r8)
 801a320:	200012a8 	.word	0x200012a8
 801a324:	200012ac 	.word	0x200012ac

0801a328 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b082      	sub	sp, #8
 801a32c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a32e:	f000 f8d7 	bl	801a4e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a332:	4b16      	ldr	r3, [pc, #88]	; (801a38c <prvCheckForValidListAndQueue+0x64>)
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d123      	bne.n	801a382 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801a33a:	4b15      	ldr	r3, [pc, #84]	; (801a390 <prvCheckForValidListAndQueue+0x68>)
 801a33c:	0018      	movs	r0, r3
 801a33e:	f7fd ffed 	bl	801831c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a342:	4b14      	ldr	r3, [pc, #80]	; (801a394 <prvCheckForValidListAndQueue+0x6c>)
 801a344:	0018      	movs	r0, r3
 801a346:	f7fd ffe9 	bl	801831c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a34a:	4b13      	ldr	r3, [pc, #76]	; (801a398 <prvCheckForValidListAndQueue+0x70>)
 801a34c:	4a10      	ldr	r2, [pc, #64]	; (801a390 <prvCheckForValidListAndQueue+0x68>)
 801a34e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a350:	4b12      	ldr	r3, [pc, #72]	; (801a39c <prvCheckForValidListAndQueue+0x74>)
 801a352:	4a10      	ldr	r2, [pc, #64]	; (801a394 <prvCheckForValidListAndQueue+0x6c>)
 801a354:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a356:	4b12      	ldr	r3, [pc, #72]	; (801a3a0 <prvCheckForValidListAndQueue+0x78>)
 801a358:	4a12      	ldr	r2, [pc, #72]	; (801a3a4 <prvCheckForValidListAndQueue+0x7c>)
 801a35a:	2100      	movs	r1, #0
 801a35c:	9100      	str	r1, [sp, #0]
 801a35e:	2110      	movs	r1, #16
 801a360:	200a      	movs	r0, #10
 801a362:	f7fe f8d8 	bl	8018516 <xQueueGenericCreateStatic>
 801a366:	0002      	movs	r2, r0
 801a368:	4b08      	ldr	r3, [pc, #32]	; (801a38c <prvCheckForValidListAndQueue+0x64>)
 801a36a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a36c:	4b07      	ldr	r3, [pc, #28]	; (801a38c <prvCheckForValidListAndQueue+0x64>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d006      	beq.n	801a382 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a374:	4b05      	ldr	r3, [pc, #20]	; (801a38c <prvCheckForValidListAndQueue+0x64>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	4a0b      	ldr	r2, [pc, #44]	; (801a3a8 <prvCheckForValidListAndQueue+0x80>)
 801a37a:	0011      	movs	r1, r2
 801a37c:	0018      	movs	r0, r3
 801a37e:	f7fe fcdd 	bl	8018d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a382:	f000 f8bf 	bl	801a504 <vPortExitCritical>
}
 801a386:	46c0      	nop			; (mov r8, r8)
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	200012b0 	.word	0x200012b0
 801a390:	20001280 	.word	0x20001280
 801a394:	20001294 	.word	0x20001294
 801a398:	200012a8 	.word	0x200012a8
 801a39c:	200012ac 	.word	0x200012ac
 801a3a0:	2000135c 	.word	0x2000135c
 801a3a4:	200012bc 	.word	0x200012bc
 801a3a8:	08024070 	.word	0x08024070

0801a3ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b084      	sub	sp, #16
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	60f8      	str	r0, [r7, #12]
 801a3b4:	60b9      	str	r1, [r7, #8]
 801a3b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	3b04      	subs	r3, #4
 801a3bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	2280      	movs	r2, #128	; 0x80
 801a3c2:	0452      	lsls	r2, r2, #17
 801a3c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	3b04      	subs	r3, #4
 801a3ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801a3cc:	68ba      	ldr	r2, [r7, #8]
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	3b04      	subs	r3, #4
 801a3d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a3d8:	4a08      	ldr	r2, [pc, #32]	; (801a3fc <pxPortInitialiseStack+0x50>)
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	3b14      	subs	r3, #20
 801a3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a3e4:	687a      	ldr	r2, [r7, #4]
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	3b20      	subs	r3, #32
 801a3ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
}
 801a3f2:	0018      	movs	r0, r3
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	b004      	add	sp, #16
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	46c0      	nop			; (mov r8, r8)
 801a3fc:	0801a401 	.word	0x0801a401

0801a400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b082      	sub	sp, #8
 801a404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801a406:	2300      	movs	r3, #0
 801a408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a40a:	4b08      	ldr	r3, [pc, #32]	; (801a42c <prvTaskExitError+0x2c>)
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	3301      	adds	r3, #1
 801a410:	d001      	beq.n	801a416 <prvTaskExitError+0x16>
 801a412:	b672      	cpsid	i
 801a414:	e7fe      	b.n	801a414 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801a416:	b672      	cpsid	i
	while( ulDummy == 0 )
 801a418:	46c0      	nop			; (mov r8, r8)
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d0fc      	beq.n	801a41a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a420:	46c0      	nop			; (mov r8, r8)
 801a422:	46c0      	nop			; (mov r8, r8)
 801a424:	46bd      	mov	sp, r7
 801a426:	b002      	add	sp, #8
 801a428:	bd80      	pop	{r7, pc}
 801a42a:	46c0      	nop			; (mov r8, r8)
 801a42c:	200000f4 	.word	0x200000f4

0801a430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801a430:	b580      	push	{r7, lr}
 801a432:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801a434:	46c0      	nop			; (mov r8, r8)
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}
 801a43a:	0000      	movs	r0, r0
 801a43c:	0000      	movs	r0, r0
	...

0801a440 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 801a440:	4a0b      	ldr	r2, [pc, #44]	; (801a470 <pxCurrentTCBConst2>)
 801a442:	6813      	ldr	r3, [r2, #0]
 801a444:	6818      	ldr	r0, [r3, #0]
 801a446:	3020      	adds	r0, #32
 801a448:	f380 8809 	msr	PSP, r0
 801a44c:	2002      	movs	r0, #2
 801a44e:	f380 8814 	msr	CONTROL, r0
 801a452:	f3bf 8f6f 	isb	sy
 801a456:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801a458:	46ae      	mov	lr, r5
 801a45a:	bc08      	pop	{r3}
 801a45c:	bc04      	pop	{r2}
 801a45e:	b662      	cpsie	i
 801a460:	4718      	bx	r3
 801a462:	46c0      	nop			; (mov r8, r8)
 801a464:	46c0      	nop			; (mov r8, r8)
 801a466:	46c0      	nop			; (mov r8, r8)
 801a468:	46c0      	nop			; (mov r8, r8)
 801a46a:	46c0      	nop			; (mov r8, r8)
 801a46c:	46c0      	nop			; (mov r8, r8)
 801a46e:	46c0      	nop			; (mov r8, r8)

0801a470 <pxCurrentTCBConst2>:
 801a470:	20000d80 	.word	0x20000d80
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 801a474:	46c0      	nop			; (mov r8, r8)
 801a476:	46c0      	nop			; (mov r8, r8)

0801a478 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a47c:	4b0e      	ldr	r3, [pc, #56]	; (801a4b8 <xPortStartScheduler+0x40>)
 801a47e:	681a      	ldr	r2, [r3, #0]
 801a480:	4b0d      	ldr	r3, [pc, #52]	; (801a4b8 <xPortStartScheduler+0x40>)
 801a482:	21ff      	movs	r1, #255	; 0xff
 801a484:	0409      	lsls	r1, r1, #16
 801a486:	430a      	orrs	r2, r1
 801a488:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a48a:	4b0b      	ldr	r3, [pc, #44]	; (801a4b8 <xPortStartScheduler+0x40>)
 801a48c:	681a      	ldr	r2, [r3, #0]
 801a48e:	4b0a      	ldr	r3, [pc, #40]	; (801a4b8 <xPortStartScheduler+0x40>)
 801a490:	21ff      	movs	r1, #255	; 0xff
 801a492:	0609      	lsls	r1, r1, #24
 801a494:	430a      	orrs	r2, r1
 801a496:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a498:	f000 f898 	bl	801a5cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a49c:	4b07      	ldr	r3, [pc, #28]	; (801a4bc <xPortStartScheduler+0x44>)
 801a49e:	2200      	movs	r2, #0
 801a4a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 801a4a2:	f7ff ffcd 	bl	801a440 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a4a6:	f7ff f95f 	bl	8019768 <vTaskSwitchContext>
	prvTaskExitError();
 801a4aa:	f7ff ffa9 	bl	801a400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a4ae:	2300      	movs	r3, #0
}
 801a4b0:	0018      	movs	r0, r3
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	46c0      	nop			; (mov r8, r8)
 801a4b8:	e000ed20 	.word	0xe000ed20
 801a4bc:	200000f4 	.word	0x200000f4

0801a4c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a4c4:	4b05      	ldr	r3, [pc, #20]	; (801a4dc <vPortYield+0x1c>)
 801a4c6:	2280      	movs	r2, #128	; 0x80
 801a4c8:	0552      	lsls	r2, r2, #21
 801a4ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801a4cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a4d0:	f3bf 8f6f 	isb	sy
}
 801a4d4:	46c0      	nop			; (mov r8, r8)
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bd80      	pop	{r7, pc}
 801a4da:	46c0      	nop			; (mov r8, r8)
 801a4dc:	e000ed04 	.word	0xe000ed04

0801a4e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801a4e4:	b672      	cpsid	i
	uxCriticalNesting++;
 801a4e6:	4b06      	ldr	r3, [pc, #24]	; (801a500 <vPortEnterCritical+0x20>)
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	1c5a      	adds	r2, r3, #1
 801a4ec:	4b04      	ldr	r3, [pc, #16]	; (801a500 <vPortEnterCritical+0x20>)
 801a4ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 801a4f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801a4f4:	f3bf 8f6f 	isb	sy
}
 801a4f8:	46c0      	nop			; (mov r8, r8)
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	bd80      	pop	{r7, pc}
 801a4fe:	46c0      	nop			; (mov r8, r8)
 801a500:	200000f4 	.word	0x200000f4

0801a504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a504:	b580      	push	{r7, lr}
 801a506:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a508:	4b09      	ldr	r3, [pc, #36]	; (801a530 <vPortExitCritical+0x2c>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d101      	bne.n	801a514 <vPortExitCritical+0x10>
 801a510:	b672      	cpsid	i
 801a512:	e7fe      	b.n	801a512 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 801a514:	4b06      	ldr	r3, [pc, #24]	; (801a530 <vPortExitCritical+0x2c>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	1e5a      	subs	r2, r3, #1
 801a51a:	4b05      	ldr	r3, [pc, #20]	; (801a530 <vPortExitCritical+0x2c>)
 801a51c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801a51e:	4b04      	ldr	r3, [pc, #16]	; (801a530 <vPortExitCritical+0x2c>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d100      	bne.n	801a528 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 801a526:	b662      	cpsie	i
	}
}
 801a528:	46c0      	nop			; (mov r8, r8)
 801a52a:	46bd      	mov	sp, r7
 801a52c:	bd80      	pop	{r7, pc}
 801a52e:	46c0      	nop			; (mov r8, r8)
 801a530:	200000f4 	.word	0x200000f4

0801a534 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 801a534:	f3ef 8010 	mrs	r0, PRIMASK
 801a538:	b672      	cpsid	i
 801a53a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801a53c:	46c0      	nop			; (mov r8, r8)
 801a53e:	0018      	movs	r0, r3

0801a540 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 801a540:	f380 8810 	msr	PRIMASK, r0
 801a544:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801a546:	46c0      	nop			; (mov r8, r8)
	...

0801a550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a550:	f3ef 8009 	mrs	r0, PSP
 801a554:	4b0e      	ldr	r3, [pc, #56]	; (801a590 <pxCurrentTCBConst>)
 801a556:	681a      	ldr	r2, [r3, #0]
 801a558:	3820      	subs	r0, #32
 801a55a:	6010      	str	r0, [r2, #0]
 801a55c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801a55e:	4644      	mov	r4, r8
 801a560:	464d      	mov	r5, r9
 801a562:	4656      	mov	r6, sl
 801a564:	465f      	mov	r7, fp
 801a566:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801a568:	b508      	push	{r3, lr}
 801a56a:	b672      	cpsid	i
 801a56c:	f7ff f8fc 	bl	8019768 <vTaskSwitchContext>
 801a570:	b662      	cpsie	i
 801a572:	bc0c      	pop	{r2, r3}
 801a574:	6811      	ldr	r1, [r2, #0]
 801a576:	6808      	ldr	r0, [r1, #0]
 801a578:	3010      	adds	r0, #16
 801a57a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801a57c:	46a0      	mov	r8, r4
 801a57e:	46a9      	mov	r9, r5
 801a580:	46b2      	mov	sl, r6
 801a582:	46bb      	mov	fp, r7
 801a584:	f380 8809 	msr	PSP, r0
 801a588:	3820      	subs	r0, #32
 801a58a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801a58c:	4718      	bx	r3
 801a58e:	46c0      	nop			; (mov r8, r8)

0801a590 <pxCurrentTCBConst>:
 801a590:	20000d80 	.word	0x20000d80
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 801a594:	46c0      	nop			; (mov r8, r8)
 801a596:	46c0      	nop			; (mov r8, r8)

0801a598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b082      	sub	sp, #8
 801a59c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801a59e:	f7ff ffc9 	bl	801a534 <ulSetInterruptMaskFromISR>
 801a5a2:	0003      	movs	r3, r0
 801a5a4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a5a6:	f7ff f82f 	bl	8019608 <xTaskIncrementTick>
 801a5aa:	1e03      	subs	r3, r0, #0
 801a5ac:	d003      	beq.n	801a5b6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a5ae:	4b06      	ldr	r3, [pc, #24]	; (801a5c8 <xPortSysTickHandler+0x30>)
 801a5b0:	2280      	movs	r2, #128	; 0x80
 801a5b2:	0552      	lsls	r2, r2, #21
 801a5b4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	0018      	movs	r0, r3
 801a5ba:	f7ff ffc1 	bl	801a540 <vClearInterruptMaskFromISR>
}
 801a5be:	46c0      	nop			; (mov r8, r8)
 801a5c0:	46bd      	mov	sp, r7
 801a5c2:	b002      	add	sp, #8
 801a5c4:	bd80      	pop	{r7, pc}
 801a5c6:	46c0      	nop			; (mov r8, r8)
 801a5c8:	e000ed04 	.word	0xe000ed04

0801a5cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a5d0:	4b0b      	ldr	r3, [pc, #44]	; (801a600 <vPortSetupTimerInterrupt+0x34>)
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a5d6:	4b0b      	ldr	r3, [pc, #44]	; (801a604 <vPortSetupTimerInterrupt+0x38>)
 801a5d8:	2200      	movs	r2, #0
 801a5da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a5dc:	4b0a      	ldr	r3, [pc, #40]	; (801a608 <vPortSetupTimerInterrupt+0x3c>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	22fa      	movs	r2, #250	; 0xfa
 801a5e2:	0091      	lsls	r1, r2, #2
 801a5e4:	0018      	movs	r0, r3
 801a5e6:	f7eb fe03 	bl	80061f0 <__udivsi3>
 801a5ea:	0003      	movs	r3, r0
 801a5ec:	001a      	movs	r2, r3
 801a5ee:	4b07      	ldr	r3, [pc, #28]	; (801a60c <vPortSetupTimerInterrupt+0x40>)
 801a5f0:	3a01      	subs	r2, #1
 801a5f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801a5f4:	4b02      	ldr	r3, [pc, #8]	; (801a600 <vPortSetupTimerInterrupt+0x34>)
 801a5f6:	2207      	movs	r2, #7
 801a5f8:	601a      	str	r2, [r3, #0]
}
 801a5fa:	46c0      	nop			; (mov r8, r8)
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	bd80      	pop	{r7, pc}
 801a600:	e000e010 	.word	0xe000e010
 801a604:	e000e018 	.word	0xe000e018
 801a608:	2000005c 	.word	0x2000005c
 801a60c:	e000e014 	.word	0xe000e014

0801a610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b086      	sub	sp, #24
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a618:	2300      	movs	r3, #0
 801a61a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801a61c:	f7fe ff4e 	bl	80194bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a620:	4b4b      	ldr	r3, [pc, #300]	; (801a750 <pvPortMalloc+0x140>)
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d101      	bne.n	801a62c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a628:	f000 f8ec 	bl	801a804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a62c:	4b49      	ldr	r3, [pc, #292]	; (801a754 <pvPortMalloc+0x144>)
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	4013      	ands	r3, r2
 801a634:	d000      	beq.n	801a638 <pvPortMalloc+0x28>
 801a636:	e07e      	b.n	801a736 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d012      	beq.n	801a664 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801a63e:	2208      	movs	r2, #8
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	189b      	adds	r3, r3, r2
 801a644:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2207      	movs	r2, #7
 801a64a:	4013      	ands	r3, r2
 801a64c:	d00a      	beq.n	801a664 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	2207      	movs	r2, #7
 801a652:	4393      	bics	r3, r2
 801a654:	3308      	adds	r3, #8
 801a656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	2207      	movs	r2, #7
 801a65c:	4013      	ands	r3, r2
 801a65e:	d001      	beq.n	801a664 <pvPortMalloc+0x54>
 801a660:	b672      	cpsid	i
 801a662:	e7fe      	b.n	801a662 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d065      	beq.n	801a736 <pvPortMalloc+0x126>
 801a66a:	4b3b      	ldr	r3, [pc, #236]	; (801a758 <pvPortMalloc+0x148>)
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	687a      	ldr	r2, [r7, #4]
 801a670:	429a      	cmp	r2, r3
 801a672:	d860      	bhi.n	801a736 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a674:	4b39      	ldr	r3, [pc, #228]	; (801a75c <pvPortMalloc+0x14c>)
 801a676:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801a678:	4b38      	ldr	r3, [pc, #224]	; (801a75c <pvPortMalloc+0x14c>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a67e:	e004      	b.n	801a68a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a68a:	697b      	ldr	r3, [r7, #20]
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	687a      	ldr	r2, [r7, #4]
 801a690:	429a      	cmp	r2, r3
 801a692:	d903      	bls.n	801a69c <pvPortMalloc+0x8c>
 801a694:	697b      	ldr	r3, [r7, #20]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d1f1      	bne.n	801a680 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a69c:	4b2c      	ldr	r3, [pc, #176]	; (801a750 <pvPortMalloc+0x140>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	697a      	ldr	r2, [r7, #20]
 801a6a2:	429a      	cmp	r2, r3
 801a6a4:	d047      	beq.n	801a736 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a6a6:	693b      	ldr	r3, [r7, #16]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	2208      	movs	r2, #8
 801a6ac:	189b      	adds	r3, r3, r2
 801a6ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a6b0:	697b      	ldr	r3, [r7, #20]
 801a6b2:	681a      	ldr	r2, [r3, #0]
 801a6b4:	693b      	ldr	r3, [r7, #16]
 801a6b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a6b8:	697b      	ldr	r3, [r7, #20]
 801a6ba:	685a      	ldr	r2, [r3, #4]
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	1ad2      	subs	r2, r2, r3
 801a6c0:	2308      	movs	r3, #8
 801a6c2:	005b      	lsls	r3, r3, #1
 801a6c4:	429a      	cmp	r2, r3
 801a6c6:	d916      	bls.n	801a6f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a6c8:	697a      	ldr	r2, [r7, #20]
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	18d3      	adds	r3, r2, r3
 801a6ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	2207      	movs	r2, #7
 801a6d4:	4013      	ands	r3, r2
 801a6d6:	d001      	beq.n	801a6dc <pvPortMalloc+0xcc>
 801a6d8:	b672      	cpsid	i
 801a6da:	e7fe      	b.n	801a6da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a6dc:	697b      	ldr	r3, [r7, #20]
 801a6de:	685a      	ldr	r2, [r3, #4]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	1ad2      	subs	r2, r2, r3
 801a6e4:	68bb      	ldr	r3, [r7, #8]
 801a6e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	687a      	ldr	r2, [r7, #4]
 801a6ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a6ee:	68bb      	ldr	r3, [r7, #8]
 801a6f0:	0018      	movs	r0, r3
 801a6f2:	f000 f8e7 	bl	801a8c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a6f6:	4b18      	ldr	r3, [pc, #96]	; (801a758 <pvPortMalloc+0x148>)
 801a6f8:	681a      	ldr	r2, [r3, #0]
 801a6fa:	697b      	ldr	r3, [r7, #20]
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	1ad2      	subs	r2, r2, r3
 801a700:	4b15      	ldr	r3, [pc, #84]	; (801a758 <pvPortMalloc+0x148>)
 801a702:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a704:	4b14      	ldr	r3, [pc, #80]	; (801a758 <pvPortMalloc+0x148>)
 801a706:	681a      	ldr	r2, [r3, #0]
 801a708:	4b15      	ldr	r3, [pc, #84]	; (801a760 <pvPortMalloc+0x150>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	429a      	cmp	r2, r3
 801a70e:	d203      	bcs.n	801a718 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a710:	4b11      	ldr	r3, [pc, #68]	; (801a758 <pvPortMalloc+0x148>)
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	4b12      	ldr	r3, [pc, #72]	; (801a760 <pvPortMalloc+0x150>)
 801a716:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a718:	697b      	ldr	r3, [r7, #20]
 801a71a:	685a      	ldr	r2, [r3, #4]
 801a71c:	4b0d      	ldr	r3, [pc, #52]	; (801a754 <pvPortMalloc+0x144>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	431a      	orrs	r2, r3
 801a722:	697b      	ldr	r3, [r7, #20]
 801a724:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	2200      	movs	r2, #0
 801a72a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a72c:	4b0d      	ldr	r3, [pc, #52]	; (801a764 <pvPortMalloc+0x154>)
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	1c5a      	adds	r2, r3, #1
 801a732:	4b0c      	ldr	r3, [pc, #48]	; (801a764 <pvPortMalloc+0x154>)
 801a734:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a736:	f7fe fecd 	bl	80194d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	2207      	movs	r2, #7
 801a73e:	4013      	ands	r3, r2
 801a740:	d001      	beq.n	801a746 <pvPortMalloc+0x136>
 801a742:	b672      	cpsid	i
 801a744:	e7fe      	b.n	801a744 <pvPortMalloc+0x134>
	return pvReturn;
 801a746:	68fb      	ldr	r3, [r7, #12]
}
 801a748:	0018      	movs	r0, r3
 801a74a:	46bd      	mov	sp, r7
 801a74c:	b006      	add	sp, #24
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	20002f0c 	.word	0x20002f0c
 801a754:	20002f20 	.word	0x20002f20
 801a758:	20002f10 	.word	0x20002f10
 801a75c:	20002f04 	.word	0x20002f04
 801a760:	20002f14 	.word	0x20002f14
 801a764:	20002f18 	.word	0x20002f18

0801a768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a768:	b580      	push	{r7, lr}
 801a76a:	b084      	sub	sp, #16
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d03a      	beq.n	801a7f0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a77a:	2308      	movs	r3, #8
 801a77c:	425b      	negs	r3, r3
 801a77e:	68fa      	ldr	r2, [r7, #12]
 801a780:	18d3      	adds	r3, r2, r3
 801a782:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a788:	68bb      	ldr	r3, [r7, #8]
 801a78a:	685a      	ldr	r2, [r3, #4]
 801a78c:	4b1a      	ldr	r3, [pc, #104]	; (801a7f8 <vPortFree+0x90>)
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	4013      	ands	r3, r2
 801a792:	d101      	bne.n	801a798 <vPortFree+0x30>
 801a794:	b672      	cpsid	i
 801a796:	e7fe      	b.n	801a796 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	d001      	beq.n	801a7a4 <vPortFree+0x3c>
 801a7a0:	b672      	cpsid	i
 801a7a2:	e7fe      	b.n	801a7a2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	685a      	ldr	r2, [r3, #4]
 801a7a8:	4b13      	ldr	r3, [pc, #76]	; (801a7f8 <vPortFree+0x90>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	4013      	ands	r3, r2
 801a7ae:	d01f      	beq.n	801a7f0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d11b      	bne.n	801a7f0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	685a      	ldr	r2, [r3, #4]
 801a7bc:	4b0e      	ldr	r3, [pc, #56]	; (801a7f8 <vPortFree+0x90>)
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	43db      	mvns	r3, r3
 801a7c2:	401a      	ands	r2, r3
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a7c8:	f7fe fe78 	bl	80194bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a7cc:	68bb      	ldr	r3, [r7, #8]
 801a7ce:	685a      	ldr	r2, [r3, #4]
 801a7d0:	4b0a      	ldr	r3, [pc, #40]	; (801a7fc <vPortFree+0x94>)
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	18d2      	adds	r2, r2, r3
 801a7d6:	4b09      	ldr	r3, [pc, #36]	; (801a7fc <vPortFree+0x94>)
 801a7d8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	0018      	movs	r0, r3
 801a7de:	f000 f871 	bl	801a8c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a7e2:	4b07      	ldr	r3, [pc, #28]	; (801a800 <vPortFree+0x98>)
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	1c5a      	adds	r2, r3, #1
 801a7e8:	4b05      	ldr	r3, [pc, #20]	; (801a800 <vPortFree+0x98>)
 801a7ea:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801a7ec:	f7fe fe72 	bl	80194d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a7f0:	46c0      	nop			; (mov r8, r8)
 801a7f2:	46bd      	mov	sp, r7
 801a7f4:	b004      	add	sp, #16
 801a7f6:	bd80      	pop	{r7, pc}
 801a7f8:	20002f20 	.word	0x20002f20
 801a7fc:	20002f10 	.word	0x20002f10
 801a800:	20002f1c 	.word	0x20002f1c

0801a804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a804:	b580      	push	{r7, lr}
 801a806:	b084      	sub	sp, #16
 801a808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a80a:	4b27      	ldr	r3, [pc, #156]	; (801a8a8 <prvHeapInit+0xa4>)
 801a80c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a80e:	4b27      	ldr	r3, [pc, #156]	; (801a8ac <prvHeapInit+0xa8>)
 801a810:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a812:	68fb      	ldr	r3, [r7, #12]
 801a814:	2207      	movs	r2, #7
 801a816:	4013      	ands	r3, r2
 801a818:	d00c      	beq.n	801a834 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	3307      	adds	r3, #7
 801a81e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	2207      	movs	r2, #7
 801a824:	4393      	bics	r3, r2
 801a826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a828:	68ba      	ldr	r2, [r7, #8]
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	1ad2      	subs	r2, r2, r3
 801a82e:	4b1f      	ldr	r3, [pc, #124]	; (801a8ac <prvHeapInit+0xa8>)
 801a830:	18d3      	adds	r3, r2, r3
 801a832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a834:	68fb      	ldr	r3, [r7, #12]
 801a836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a838:	4b1d      	ldr	r3, [pc, #116]	; (801a8b0 <prvHeapInit+0xac>)
 801a83a:	687a      	ldr	r2, [r7, #4]
 801a83c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a83e:	4b1c      	ldr	r3, [pc, #112]	; (801a8b0 <prvHeapInit+0xac>)
 801a840:	2200      	movs	r2, #0
 801a842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	68ba      	ldr	r2, [r7, #8]
 801a848:	18d3      	adds	r3, r2, r3
 801a84a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801a84c:	2208      	movs	r2, #8
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	1a9b      	subs	r3, r3, r2
 801a852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	2207      	movs	r2, #7
 801a858:	4393      	bics	r3, r2
 801a85a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801a85c:	68fa      	ldr	r2, [r7, #12]
 801a85e:	4b15      	ldr	r3, [pc, #84]	; (801a8b4 <prvHeapInit+0xb0>)
 801a860:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801a862:	4b14      	ldr	r3, [pc, #80]	; (801a8b4 <prvHeapInit+0xb0>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2200      	movs	r2, #0
 801a868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a86a:	4b12      	ldr	r3, [pc, #72]	; (801a8b4 <prvHeapInit+0xb0>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	2200      	movs	r2, #0
 801a870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a876:	683b      	ldr	r3, [r7, #0]
 801a878:	68fa      	ldr	r2, [r7, #12]
 801a87a:	1ad2      	subs	r2, r2, r3
 801a87c:	683b      	ldr	r3, [r7, #0]
 801a87e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a880:	4b0c      	ldr	r3, [pc, #48]	; (801a8b4 <prvHeapInit+0xb0>)
 801a882:	681a      	ldr	r2, [r3, #0]
 801a884:	683b      	ldr	r3, [r7, #0]
 801a886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	685a      	ldr	r2, [r3, #4]
 801a88c:	4b0a      	ldr	r3, [pc, #40]	; (801a8b8 <prvHeapInit+0xb4>)
 801a88e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a890:	683b      	ldr	r3, [r7, #0]
 801a892:	685a      	ldr	r2, [r3, #4]
 801a894:	4b09      	ldr	r3, [pc, #36]	; (801a8bc <prvHeapInit+0xb8>)
 801a896:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a898:	4b09      	ldr	r3, [pc, #36]	; (801a8c0 <prvHeapInit+0xbc>)
 801a89a:	2280      	movs	r2, #128	; 0x80
 801a89c:	0612      	lsls	r2, r2, #24
 801a89e:	601a      	str	r2, [r3, #0]
}
 801a8a0:	46c0      	nop			; (mov r8, r8)
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	b004      	add	sp, #16
 801a8a6:	bd80      	pop	{r7, pc}
 801a8a8:	00001b58 	.word	0x00001b58
 801a8ac:	200013ac 	.word	0x200013ac
 801a8b0:	20002f04 	.word	0x20002f04
 801a8b4:	20002f0c 	.word	0x20002f0c
 801a8b8:	20002f14 	.word	0x20002f14
 801a8bc:	20002f10 	.word	0x20002f10
 801a8c0:	20002f20 	.word	0x20002f20

0801a8c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a8c4:	b580      	push	{r7, lr}
 801a8c6:	b084      	sub	sp, #16
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a8cc:	4b27      	ldr	r3, [pc, #156]	; (801a96c <prvInsertBlockIntoFreeList+0xa8>)
 801a8ce:	60fb      	str	r3, [r7, #12]
 801a8d0:	e002      	b.n	801a8d8 <prvInsertBlockIntoFreeList+0x14>
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	60fb      	str	r3, [r7, #12]
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	d8f7      	bhi.n	801a8d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801a8e2:	68fb      	ldr	r3, [r7, #12]
 801a8e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	685b      	ldr	r3, [r3, #4]
 801a8ea:	68ba      	ldr	r2, [r7, #8]
 801a8ec:	18d3      	adds	r3, r2, r3
 801a8ee:	687a      	ldr	r2, [r7, #4]
 801a8f0:	429a      	cmp	r2, r3
 801a8f2:	d108      	bne.n	801a906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	685a      	ldr	r2, [r3, #4]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	685b      	ldr	r3, [r3, #4]
 801a8fc:	18d2      	adds	r2, r2, r3
 801a8fe:	68fb      	ldr	r3, [r7, #12]
 801a900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	685b      	ldr	r3, [r3, #4]
 801a90e:	68ba      	ldr	r2, [r7, #8]
 801a910:	18d2      	adds	r2, r2, r3
 801a912:	68fb      	ldr	r3, [r7, #12]
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	429a      	cmp	r2, r3
 801a918:	d118      	bne.n	801a94c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	681a      	ldr	r2, [r3, #0]
 801a91e:	4b14      	ldr	r3, [pc, #80]	; (801a970 <prvInsertBlockIntoFreeList+0xac>)
 801a920:	681b      	ldr	r3, [r3, #0]
 801a922:	429a      	cmp	r2, r3
 801a924:	d00d      	beq.n	801a942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	685a      	ldr	r2, [r3, #4]
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	685b      	ldr	r3, [r3, #4]
 801a930:	18d2      	adds	r2, r2, r3
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	681b      	ldr	r3, [r3, #0]
 801a93a:	681a      	ldr	r2, [r3, #0]
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	601a      	str	r2, [r3, #0]
 801a940:	e008      	b.n	801a954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a942:	4b0b      	ldr	r3, [pc, #44]	; (801a970 <prvInsertBlockIntoFreeList+0xac>)
 801a944:	681a      	ldr	r2, [r3, #0]
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	601a      	str	r2, [r3, #0]
 801a94a:	e003      	b.n	801a954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	681a      	ldr	r2, [r3, #0]
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a954:	68fa      	ldr	r2, [r7, #12]
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	429a      	cmp	r2, r3
 801a95a:	d002      	beq.n	801a962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	687a      	ldr	r2, [r7, #4]
 801a960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a962:	46c0      	nop			; (mov r8, r8)
 801a964:	46bd      	mov	sp, r7
 801a966:	b004      	add	sp, #16
 801a968:	bd80      	pop	{r7, pc}
 801a96a:	46c0      	nop			; (mov r8, r8)
 801a96c:	20002f04 	.word	0x20002f04
 801a970:	20002f0c 	.word	0x20002f0c

0801a974 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801a978:	f7f9 fe38 	bl	80145ec <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801a97c:	f000 f830 	bl	801a9e0 <USBPD_DPM_InitCore>
 801a980:	1e03      	subs	r3, r0, #0
 801a982:	d000      	beq.n	801a986 <MX_USBPD_Init+0x12>
  {
    while(1);
 801a984:	e7fe      	b.n	801a984 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 801a986:	4b0a      	ldr	r3, [pc, #40]	; (801a9b0 <MX_USBPD_Init+0x3c>)
 801a988:	4a0a      	ldr	r2, [pc, #40]	; (801a9b4 <MX_USBPD_Init+0x40>)
 801a98a:	490b      	ldr	r1, [pc, #44]	; (801a9b8 <MX_USBPD_Init+0x44>)
 801a98c:	480b      	ldr	r0, [pc, #44]	; (801a9bc <MX_USBPD_Init+0x48>)
 801a98e:	f004 fcb7 	bl	801f300 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801a992:	f000 fb7d 	bl	801b090 <USBPD_DPM_UserInit>
 801a996:	1e03      	subs	r3, r0, #0
 801a998:	d000      	beq.n	801a99c <MX_USBPD_Init+0x28>
  {
    while(1);
 801a99a:	e7fe      	b.n	801a99a <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801a99c:	f000 f8f8 	bl	801ab90 <USBPD_DPM_InitOS>
 801a9a0:	1e03      	subs	r3, r0, #0
 801a9a2:	d000      	beq.n	801a9a6 <MX_USBPD_Init+0x32>
  {
    while(1);
 801a9a4:	e7fe      	b.n	801a9a4 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 801a9a6:	b662      	cpsie	i
}
 801a9a8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801a9aa:	46c0      	nop			; (mov r8, r8)
 801a9ac:	46bd      	mov	sp, r7
 801a9ae:	bd80      	pop	{r7, pc}
 801a9b0:	080152d1 	.word	0x080152d1
 801a9b4:	080152a9 	.word	0x080152a9
 801a9b8:	0801a9d1 	.word	0x0801a9d1
 801a9bc:	0801a9c1 	.word	0x0801a9c1

0801a9c0 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 801a9c4:	4b01      	ldr	r3, [pc, #4]	; (801a9cc <BSP_GetBoardName+0xc>)
}
 801a9c6:	0018      	movs	r0, r3
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	08024078 	.word	0x08024078

0801a9d0 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 801a9d4:	4b01      	ldr	r3, [pc, #4]	; (801a9dc <BSP_GetBoardID+0xc>)
}
 801a9d6:	0018      	movs	r0, r3
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	08024084 	.word	0x08024084

0801a9e0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801a9e0:	b5b0      	push	{r4, r5, r7, lr}
 801a9e2:	b082      	sub	sp, #8
 801a9e4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801a9e6:	1dfb      	adds	r3, r7, #7
 801a9e8:	2200      	movs	r2, #0
 801a9ea:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801a9ec:	4b63      	ldr	r3, [pc, #396]	; (801ab7c <USBPD_DPM_InitCore+0x19c>)
 801a9ee:	0018      	movs	r0, r3
 801a9f0:	f7e6 fd74 	bl	80014dc <USBPD_PE_CheckLIB>
 801a9f4:	0003      	movs	r3, r0
 801a9f6:	2b01      	cmp	r3, #1
 801a9f8:	d003      	beq.n	801aa02 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801a9fa:	1dfb      	adds	r3, r7, #7
 801a9fc:	2202      	movs	r2, #2
 801a9fe:	701a      	strb	r2, [r3, #0]
    goto error;
 801aa00:	e0b6      	b.n	801ab70 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801aa02:	f7e6 fd79 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 801aa06:	0003      	movs	r3, r0
 801aa08:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 801aa0a:	f7f7 ffc1 	bl	8012990 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801aa0e:	1dbb      	adds	r3, r7, #6
 801aa10:	2200      	movs	r2, #0
 801aa12:	701a      	strb	r2, [r3, #0]
 801aa14:	e0a6      	b.n	801ab64 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801aa16:	1dbb      	adds	r3, r7, #6
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	4a59      	ldr	r2, [pc, #356]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aa1c:	009b      	lsls	r3, r3, #2
 801aa1e:	18d3      	adds	r3, r2, r3
 801aa20:	785a      	ldrb	r2, [r3, #1]
 801aa22:	2108      	movs	r1, #8
 801aa24:	438a      	bics	r2, r1
 801aa26:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801aa28:	1dbb      	adds	r3, r7, #6
 801aa2a:	781a      	ldrb	r2, [r3, #0]
 801aa2c:	1dbb      	adds	r3, r7, #6
 801aa2e:	7818      	ldrb	r0, [r3, #0]
 801aa30:	4954      	ldr	r1, [pc, #336]	; (801ab84 <USBPD_DPM_InitCore+0x1a4>)
 801aa32:	0013      	movs	r3, r2
 801aa34:	005b      	lsls	r3, r3, #1
 801aa36:	189b      	adds	r3, r3, r2
 801aa38:	009b      	lsls	r3, r3, #2
 801aa3a:	18cb      	adds	r3, r1, r3
 801aa3c:	791b      	ldrb	r3, [r3, #4]
 801aa3e:	079b      	lsls	r3, r3, #30
 801aa40:	0f9b      	lsrs	r3, r3, #30
 801aa42:	b2d9      	uxtb	r1, r3
 801aa44:	4b4e      	ldr	r3, [pc, #312]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aa46:	0082      	lsls	r2, r0, #2
 801aa48:	2003      	movs	r0, #3
 801aa4a:	4001      	ands	r1, r0
 801aa4c:	000c      	movs	r4, r1
 801aa4e:	5cd1      	ldrb	r1, [r2, r3]
 801aa50:	2003      	movs	r0, #3
 801aa52:	4381      	bics	r1, r0
 801aa54:	1c08      	adds	r0, r1, #0
 801aa56:	1c21      	adds	r1, r4, #0
 801aa58:	4301      	orrs	r1, r0
 801aa5a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801aa5c:	1dbb      	adds	r3, r7, #6
 801aa5e:	781a      	ldrb	r2, [r3, #0]
 801aa60:	1dbb      	adds	r3, r7, #6
 801aa62:	7818      	ldrb	r0, [r3, #0]
 801aa64:	4947      	ldr	r1, [pc, #284]	; (801ab84 <USBPD_DPM_InitCore+0x1a4>)
 801aa66:	0013      	movs	r3, r2
 801aa68:	005b      	lsls	r3, r3, #1
 801aa6a:	189b      	adds	r3, r3, r2
 801aa6c:	009b      	lsls	r3, r3, #2
 801aa6e:	18cb      	adds	r3, r1, r3
 801aa70:	791b      	ldrb	r3, [r3, #4]
 801aa72:	075b      	lsls	r3, r3, #29
 801aa74:	0fdb      	lsrs	r3, r3, #31
 801aa76:	b2d9      	uxtb	r1, r3
 801aa78:	4b41      	ldr	r3, [pc, #260]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aa7a:	0082      	lsls	r2, r0, #2
 801aa7c:	2001      	movs	r0, #1
 801aa7e:	4001      	ands	r1, r0
 801aa80:	008c      	lsls	r4, r1, #2
 801aa82:	5cd1      	ldrb	r1, [r2, r3]
 801aa84:	2004      	movs	r0, #4
 801aa86:	4381      	bics	r1, r0
 801aa88:	1c08      	adds	r0, r1, #0
 801aa8a:	1c21      	adds	r1, r4, #0
 801aa8c:	4301      	orrs	r1, r0
 801aa8e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801aa90:	1dbb      	adds	r3, r7, #6
 801aa92:	781a      	ldrb	r2, [r3, #0]
 801aa94:	4b3a      	ldr	r3, [pc, #232]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aa96:	0092      	lsls	r2, r2, #2
 801aa98:	5cd1      	ldrb	r1, [r2, r3]
 801aa9a:	2010      	movs	r0, #16
 801aa9c:	4381      	bics	r1, r0
 801aa9e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801aaa0:	1dbb      	adds	r3, r7, #6
 801aaa2:	781a      	ldrb	r2, [r3, #0]
 801aaa4:	4b36      	ldr	r3, [pc, #216]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aaa6:	0092      	lsls	r2, r2, #2
 801aaa8:	5cd1      	ldrb	r1, [r2, r3]
 801aaaa:	203f      	movs	r0, #63	; 0x3f
 801aaac:	4001      	ands	r1, r0
 801aaae:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801aab0:	1dbb      	adds	r3, r7, #6
 801aab2:	781b      	ldrb	r3, [r3, #0]
 801aab4:	4a32      	ldr	r2, [pc, #200]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aab6:	009b      	lsls	r3, r3, #2
 801aab8:	18d3      	adds	r3, r2, r3
 801aaba:	785a      	ldrb	r2, [r3, #1]
 801aabc:	2160      	movs	r1, #96	; 0x60
 801aabe:	438a      	bics	r2, r1
 801aac0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801aac2:	1dbb      	adds	r3, r7, #6
 801aac4:	781b      	ldrb	r3, [r3, #0]
 801aac6:	4a2e      	ldr	r2, [pc, #184]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aac8:	009b      	lsls	r3, r3, #2
 801aaca:	18d3      	adds	r3, r2, r3
 801aacc:	785a      	ldrb	r2, [r3, #1]
 801aace:	217f      	movs	r1, #127	; 0x7f
 801aad0:	400a      	ands	r2, r1
 801aad2:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 801aad4:	1dbb      	adds	r3, r7, #6
 801aad6:	781a      	ldrb	r2, [r3, #0]
 801aad8:	0013      	movs	r3, r2
 801aada:	005b      	lsls	r3, r3, #1
 801aadc:	189b      	adds	r3, r3, r2
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	4a28      	ldr	r2, [pc, #160]	; (801ab84 <USBPD_DPM_InitCore+0x1a4>)
 801aae2:	189c      	adds	r4, r3, r2
 801aae4:	1dbb      	adds	r3, r7, #6
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	009a      	lsls	r2, r3, #2
 801aaea:	4b25      	ldr	r3, [pc, #148]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801aaec:	18d2      	adds	r2, r2, r3
 801aaee:	4926      	ldr	r1, [pc, #152]	; (801ab88 <USBPD_DPM_InitCore+0x1a8>)
 801aaf0:	1dbb      	adds	r3, r7, #6
 801aaf2:	7818      	ldrb	r0, [r3, #0]
 801aaf4:	0013      	movs	r3, r2
 801aaf6:	0022      	movs	r2, r4
 801aaf8:	f7e5 fb06 	bl	8000108 <USBPD_CAD_Init>
 801aafc:	1e03      	subs	r3, r0, #0
 801aafe:	d003      	beq.n	801ab08 <USBPD_DPM_InitCore+0x128>
 801ab00:	1dfb      	adds	r3, r7, #7
 801ab02:	2202      	movs	r2, #2
 801ab04:	701a      	strb	r2, [r3, #0]
 801ab06:	e033      	b.n	801ab70 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801ab08:	1dbb      	adds	r3, r7, #6
 801ab0a:	781a      	ldrb	r2, [r3, #0]
 801ab0c:	0013      	movs	r3, r2
 801ab0e:	005b      	lsls	r3, r3, #1
 801ab10:	189b      	adds	r3, r3, r2
 801ab12:	009b      	lsls	r3, r3, #2
 801ab14:	4a1b      	ldr	r2, [pc, #108]	; (801ab84 <USBPD_DPM_InitCore+0x1a4>)
 801ab16:	1899      	adds	r1, r3, r2
 801ab18:	1dbb      	adds	r3, r7, #6
 801ab1a:	781b      	ldrb	r3, [r3, #0]
 801ab1c:	009a      	lsls	r2, r3, #2
 801ab1e:	4b18      	ldr	r3, [pc, #96]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801ab20:	18d2      	adds	r2, r2, r3
 801ab22:	1dfc      	adds	r4, r7, #7
 801ab24:	4d19      	ldr	r5, [pc, #100]	; (801ab8c <USBPD_DPM_InitCore+0x1ac>)
 801ab26:	1dbb      	adds	r3, r7, #6
 801ab28:	7818      	ldrb	r0, [r3, #0]
 801ab2a:	002b      	movs	r3, r5
 801ab2c:	f7e5 fbca 	bl	80002c4 <USBPD_PE_Init>
 801ab30:	0003      	movs	r3, r0
 801ab32:	7023      	strb	r3, [r4, #0]
 801ab34:	1dfb      	adds	r3, r7, #7
 801ab36:	781b      	ldrb	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d119      	bne.n	801ab70 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801ab3c:	1dbb      	adds	r3, r7, #6
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	4a0f      	ldr	r2, [pc, #60]	; (801ab80 <USBPD_DPM_InitCore+0x1a0>)
 801ab42:	009b      	lsls	r3, r3, #2
 801ab44:	18d3      	adds	r3, r2, r3
 801ab46:	785a      	ldrb	r2, [r3, #1]
 801ab48:	2108      	movs	r1, #8
 801ab4a:	430a      	orrs	r2, r1
 801ab4c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801ab4e:	1dbb      	adds	r3, r7, #6
 801ab50:	781b      	ldrb	r3, [r3, #0]
 801ab52:	2101      	movs	r1, #1
 801ab54:	0018      	movs	r0, r3
 801ab56:	f7e5 fb04 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801ab5a:	1dbb      	adds	r3, r7, #6
 801ab5c:	1dba      	adds	r2, r7, #6
 801ab5e:	7812      	ldrb	r2, [r2, #0]
 801ab60:	3201      	adds	r2, #1
 801ab62:	701a      	strb	r2, [r3, #0]
 801ab64:	1dbb      	adds	r3, r7, #6
 801ab66:	781b      	ldrb	r3, [r3, #0]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d100      	bne.n	801ab6e <USBPD_DPM_InitCore+0x18e>
 801ab6c:	e753      	b.n	801aa16 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801ab6e:	46c0      	nop			; (mov r8, r8)
  return _retr;
 801ab70:	1dfb      	adds	r3, r7, #7
 801ab72:	781b      	ldrb	r3, [r3, #0]
}
 801ab74:	0018      	movs	r0, r3
 801ab76:	46bd      	mov	sp, r7
 801ab78:	b002      	add	sp, #8
 801ab7a:	bdb0      	pop	{r4, r5, r7, pc}
 801ab7c:	30410000 	.word	0x30410000
 801ab80:	20002f34 	.word	0x20002f34
 801ab84:	200000f8 	.word	0x200000f8
 801ab88:	080250ac 	.word	0x080250ac
 801ab8c:	080250b4 	.word	0x080250b4

0801ab90 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801ab90:	b590      	push	{r4, r7, lr}
 801ab92:	b08d      	sub	sp, #52	; 0x34
 801ab94:	af00      	add	r7, sp, #0
  OS_INIT();
 801ab96:	242f      	movs	r4, #47	; 0x2f
 801ab98:	193b      	adds	r3, r7, r4
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 801ab9e:	2200      	movs	r2, #0
 801aba0:	2102      	movs	r1, #2
 801aba2:	2001      	movs	r0, #1
 801aba4:	f7fd fa5a 	bl	801805c <osMessageQueueNew>
 801aba8:	0002      	movs	r2, r0
 801abaa:	4b32      	ldr	r3, [pc, #200]	; (801ac74 <USBPD_DPM_InitOS+0xe4>)
 801abac:	601a      	str	r2, [r3, #0]
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 801abae:	1d3b      	adds	r3, r7, #4
 801abb0:	0018      	movs	r0, r3
 801abb2:	2324      	movs	r3, #36	; 0x24
 801abb4:	001a      	movs	r2, r3
 801abb6:	2100      	movs	r1, #0
 801abb8:	f008 fd2c 	bl	8023614 <memset>
 801abbc:	1d3b      	adds	r3, r7, #4
 801abbe:	4a2e      	ldr	r2, [pc, #184]	; (801ac78 <USBPD_DPM_InitOS+0xe8>)
 801abc0:	601a      	str	r2, [r3, #0]
 801abc2:	1d3b      	adds	r3, r7, #4
 801abc4:	2296      	movs	r2, #150	; 0x96
 801abc6:	00d2      	lsls	r2, r2, #3
 801abc8:	615a      	str	r2, [r3, #20]
 801abca:	1d3b      	adds	r3, r7, #4
 801abcc:	2230      	movs	r2, #48	; 0x30
 801abce:	619a      	str	r2, [r3, #24]
 801abd0:	1d3a      	adds	r2, r7, #4
 801abd2:	4b2a      	ldr	r3, [pc, #168]	; (801ac7c <USBPD_DPM_InitOS+0xec>)
 801abd4:	2100      	movs	r1, #0
 801abd6:	0018      	movs	r0, r3
 801abd8:	f7fd f93e 	bl	8017e58 <osThreadNew>
 801abdc:	0002      	movs	r2, r0
 801abde:	4b28      	ldr	r3, [pc, #160]	; (801ac80 <USBPD_DPM_InitOS+0xf0>)
 801abe0:	601a      	str	r2, [r3, #0]
 801abe2:	4b27      	ldr	r3, [pc, #156]	; (801ac80 <USBPD_DPM_InitOS+0xf0>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d103      	bne.n	801abf2 <USBPD_DPM_InitOS+0x62>
 801abea:	193b      	adds	r3, r7, r4
 801abec:	2202      	movs	r2, #2
 801abee:	701a      	strb	r2, [r3, #0]
 801abf0:	e039      	b.n	801ac66 <USBPD_DPM_InitOS+0xd6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801abf2:	2300      	movs	r3, #0
 801abf4:	62bb      	str	r3, [r7, #40]	; 0x28
 801abf6:	e032      	b.n	801ac5e <USBPD_DPM_InitOS+0xce>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 801abf8:	2200      	movs	r2, #0
 801abfa:	2102      	movs	r1, #2
 801abfc:	2001      	movs	r0, #1
 801abfe:	f7fd fa2d 	bl	801805c <osMessageQueueNew>
 801ac02:	0001      	movs	r1, r0
 801ac04:	4b1f      	ldr	r3, [pc, #124]	; (801ac84 <USBPD_DPM_InitOS+0xf4>)
 801ac06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ac08:	0092      	lsls	r2, r2, #2
 801ac0a:	50d1      	str	r1, [r2, r3]

    if (index == USBPD_PORT_0)
 801ac0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d122      	bne.n	801ac58 <USBPD_DPM_InitOS+0xc8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 801ac12:	1d3b      	adds	r3, r7, #4
 801ac14:	0018      	movs	r0, r3
 801ac16:	2324      	movs	r3, #36	; 0x24
 801ac18:	001a      	movs	r2, r3
 801ac1a:	2100      	movs	r1, #0
 801ac1c:	f008 fcfa 	bl	8023614 <memset>
 801ac20:	1d3b      	adds	r3, r7, #4
 801ac22:	4a19      	ldr	r2, [pc, #100]	; (801ac88 <USBPD_DPM_InitOS+0xf8>)
 801ac24:	601a      	str	r2, [r3, #0]
 801ac26:	1d3b      	adds	r3, r7, #4
 801ac28:	22af      	movs	r2, #175	; 0xaf
 801ac2a:	00d2      	lsls	r2, r2, #3
 801ac2c:	615a      	str	r2, [r3, #20]
 801ac2e:	1d3b      	adds	r3, r7, #4
 801ac30:	2220      	movs	r2, #32
 801ac32:	619a      	str	r2, [r3, #24]
 801ac34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ac36:	1d3a      	adds	r2, r7, #4
 801ac38:	4b14      	ldr	r3, [pc, #80]	; (801ac8c <USBPD_DPM_InitOS+0xfc>)
 801ac3a:	0018      	movs	r0, r3
 801ac3c:	f7fd f90c 	bl	8017e58 <osThreadNew>
 801ac40:	0002      	movs	r2, r0
 801ac42:	4b13      	ldr	r3, [pc, #76]	; (801ac90 <USBPD_DPM_InitOS+0x100>)
 801ac44:	601a      	str	r2, [r3, #0]
 801ac46:	4b12      	ldr	r3, [pc, #72]	; (801ac90 <USBPD_DPM_InitOS+0x100>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d104      	bne.n	801ac58 <USBPD_DPM_InitOS+0xc8>
 801ac4e:	232f      	movs	r3, #47	; 0x2f
 801ac50:	18fb      	adds	r3, r7, r3
 801ac52:	2202      	movs	r2, #2
 801ac54:	701a      	strb	r2, [r3, #0]
 801ac56:	e006      	b.n	801ac66 <USBPD_DPM_InitOS+0xd6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac5a:	3301      	adds	r3, #1
 801ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
 801ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d0c9      	beq.n	801abf8 <USBPD_DPM_InitOS+0x68>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 801ac64:	46c0      	nop			; (mov r8, r8)

  return _retr;
 801ac66:	232f      	movs	r3, #47	; 0x2f
 801ac68:	18fb      	adds	r3, r7, r3
 801ac6a:	781b      	ldrb	r3, [r3, #0]
}
 801ac6c:	0018      	movs	r0, r3
 801ac6e:	46bd      	mov	sp, r7
 801ac70:	b00d      	add	sp, #52	; 0x34
 801ac72:	bd90      	pop	{r4, r7, pc}
 801ac74:	20002f28 	.word	0x20002f28
 801ac78:	0802408c 	.word	0x0802408c
 801ac7c:	0801ad89 	.word	0x0801ad89
 801ac80:	20002f2c 	.word	0x20002f2c
 801ac84:	20002f30 	.word	0x20002f30
 801ac88:	08024090 	.word	0x08024090
 801ac8c:	0801ad25 	.word	0x0801ad25
 801ac90:	20002f24 	.word	0x20002f24

0801ac94 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 801ac94:	b580      	push	{r7, lr}
 801ac96:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 801ac98:	4b09      	ldr	r3, [pc, #36]	; (801acc0 <USBPD_DPM_TimerCounter+0x2c>)
 801ac9a:	785b      	ldrb	r3, [r3, #1]
 801ac9c:	2208      	movs	r2, #8
 801ac9e:	4013      	ands	r3, r2
 801aca0:	b2db      	uxtb	r3, r3
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d008      	beq.n	801acb8 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 801aca6:	2000      	movs	r0, #0
 801aca8:	f000 fa6e 	bl	801b188 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 801acac:	2000      	movs	r0, #0
 801acae:	f7e5 fb66 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 801acb2:	2000      	movs	r0, #0
 801acb4:	f7ea fcb8 	bl	8005628 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 801acb8:	46c0      	nop			; (mov r8, r8)
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}
 801acbe:	46c0      	nop			; (mov r8, r8)
 801acc0:	20002f34 	.word	0x20002f34

0801acc4 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b084      	sub	sp, #16
 801acc8:	af00      	add	r7, sp, #0
 801acca:	0002      	movs	r2, r0
 801accc:	1dfb      	adds	r3, r7, #7
 801acce:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801acd0:	4b08      	ldr	r3, [pc, #32]	; (801acf4 <USBPD_PE_TaskWakeUp+0x30>)
 801acd2:	60fb      	str	r3, [r7, #12]
 801acd4:	1dfb      	adds	r3, r7, #7
 801acd6:	781a      	ldrb	r2, [r3, #0]
 801acd8:	4b07      	ldr	r3, [pc, #28]	; (801acf8 <USBPD_PE_TaskWakeUp+0x34>)
 801acda:	0092      	lsls	r2, r2, #2
 801acdc:	58d0      	ldr	r0, [r2, r3]
 801acde:	230c      	movs	r3, #12
 801ace0:	18f9      	adds	r1, r7, r3
 801ace2:	2300      	movs	r3, #0
 801ace4:	2200      	movs	r2, #0
 801ace6:	f7fd fa33 	bl	8018150 <osMessageQueuePut>
}
 801acea:	46c0      	nop			; (mov r8, r8)
 801acec:	46bd      	mov	sp, r7
 801acee:	b004      	add	sp, #16
 801acf0:	bd80      	pop	{r7, pc}
 801acf2:	46c0      	nop			; (mov r8, r8)
 801acf4:	0000ffff 	.word	0x0000ffff
 801acf8:	20002f30 	.word	0x20002f30

0801acfc <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b082      	sub	sp, #8
 801ad00:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 801ad02:	4b06      	ldr	r3, [pc, #24]	; (801ad1c <USBPD_DPM_CADTaskWakeUp+0x20>)
 801ad04:	607b      	str	r3, [r7, #4]
 801ad06:	4b06      	ldr	r3, [pc, #24]	; (801ad20 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801ad08:	6818      	ldr	r0, [r3, #0]
 801ad0a:	1d39      	adds	r1, r7, #4
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	2200      	movs	r2, #0
 801ad10:	f7fd fa1e 	bl	8018150 <osMessageQueuePut>
}
 801ad14:	46c0      	nop			; (mov r8, r8)
 801ad16:	46bd      	mov	sp, r7
 801ad18:	b002      	add	sp, #8
 801ad1a:	bd80      	pop	{r7, pc}
 801ad1c:	0000ffff 	.word	0x0000ffff
 801ad20:	20002f28 	.word	0x20002f28

0801ad24 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 801ad24:	b590      	push	{r4, r7, lr}
 801ad26:	b087      	sub	sp, #28
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 801ad2c:	687a      	ldr	r2, [r7, #4]
 801ad2e:	2317      	movs	r3, #23
 801ad30:	18fb      	adds	r3, r7, r3
 801ad32:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801ad34:	2317      	movs	r3, #23
 801ad36:	18fb      	adds	r3, r7, r3
 801ad38:	781b      	ldrb	r3, [r3, #0]
 801ad3a:	4a11      	ldr	r2, [pc, #68]	; (801ad80 <USBPD_PE_Task+0x5c>)
 801ad3c:	009b      	lsls	r3, r3, #2
 801ad3e:	18d3      	adds	r3, r2, r3
 801ad40:	785b      	ldrb	r3, [r3, #1]
 801ad42:	06db      	lsls	r3, r3, #27
 801ad44:	0fdb      	lsrs	r3, r3, #31
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d105      	bne.n	801ad58 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 801ad4c:	f7fd f91a 	bl	8017f84 <osThreadGetId>
 801ad50:	0003      	movs	r3, r0
 801ad52:	0018      	movs	r0, r3
 801ad54:	f7fd f922 	bl	8017f9c <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 801ad58:	2417      	movs	r4, #23
 801ad5a:	193b      	adds	r3, r7, r4
 801ad5c:	781b      	ldrb	r3, [r3, #0]
 801ad5e:	0018      	movs	r0, r3
 801ad60:	f7e7 f862 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 801ad64:	0003      	movs	r3, r0
 801ad66:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 801ad68:	193b      	adds	r3, r7, r4
 801ad6a:	781a      	ldrb	r2, [r3, #0]
 801ad6c:	4b05      	ldr	r3, [pc, #20]	; (801ad84 <USBPD_PE_Task+0x60>)
 801ad6e:	0092      	lsls	r2, r2, #2
 801ad70:	58d0      	ldr	r0, [r2, r3]
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	220c      	movs	r2, #12
 801ad76:	18b9      	adds	r1, r7, r2
 801ad78:	2200      	movs	r2, #0
 801ad7a:	f7fd fa45 	bl	8018208 <osMessageQueueGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801ad7e:	e7d9      	b.n	801ad34 <USBPD_PE_Task+0x10>
 801ad80:	20002f34 	.word	0x20002f34
 801ad84:	20002f30 	.word	0x20002f30

0801ad88 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b084      	sub	sp, #16
 801ad8c:	af00      	add	r7, sp, #0
 801ad8e:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 801ad90:	f7e5 f9ee 	bl	8000170 <USBPD_CAD_Process>
 801ad94:	0003      	movs	r3, r0
 801ad96:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 801ad98:	4b04      	ldr	r3, [pc, #16]	; (801adac <USBPD_CAD_Task+0x24>)
 801ad9a:	6818      	ldr	r0, [r3, #0]
 801ad9c:	68fb      	ldr	r3, [r7, #12]
 801ad9e:	2208      	movs	r2, #8
 801ada0:	18b9      	adds	r1, r7, r2
 801ada2:	2200      	movs	r2, #0
 801ada4:	f7fd fa30 	bl	8018208 <osMessageQueueGet>
    _timing = USBPD_CAD_Process();
 801ada8:	e7f2      	b.n	801ad90 <USBPD_CAD_Task+0x8>
 801adaa:	46c0      	nop			; (mov r8, r8)
 801adac:	20002f28 	.word	0x20002f28

0801adb0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801adb0:	b580      	push	{r7, lr}
 801adb2:	b086      	sub	sp, #24
 801adb4:	af02      	add	r7, sp, #8
 801adb6:	603a      	str	r2, [r7, #0]
 801adb8:	1dfb      	adds	r3, r7, #7
 801adba:	1c02      	adds	r2, r0, #0
 801adbc:	701a      	strb	r2, [r3, #0]
 801adbe:	1dbb      	adds	r3, r7, #6
 801adc0:	1c0a      	adds	r2, r1, #0
 801adc2:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 801adc4:	1dbb      	adds	r3, r7, #6
 801adc6:	781a      	ldrb	r2, [r3, #0]
 801adc8:	1dfb      	adds	r3, r7, #7
 801adca:	7819      	ldrb	r1, [r3, #0]
 801adcc:	2300      	movs	r3, #0
 801adce:	9300      	str	r3, [sp, #0]
 801add0:	2300      	movs	r3, #0
 801add2:	2003      	movs	r0, #3
 801add4:	f7f7 fdf2 	bl	80129bc <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801add8:	1dbb      	adds	r3, r7, #6
 801adda:	781b      	ldrb	r3, [r3, #0]
 801addc:	2b04      	cmp	r3, #4
 801adde:	d009      	beq.n	801adf4 <USBPD_DPM_CADCallback+0x44>
 801ade0:	dd00      	ble.n	801ade4 <USBPD_DPM_CADCallback+0x34>
 801ade2:	e06f      	b.n	801aec4 <USBPD_DPM_CADCallback+0x114>
 801ade4:	2b03      	cmp	r3, #3
 801ade6:	d01d      	beq.n	801ae24 <USBPD_DPM_CADCallback+0x74>
 801ade8:	dc6c      	bgt.n	801aec4 <USBPD_DPM_CADCallback+0x114>
 801adea:	2b01      	cmp	r3, #1
 801adec:	d01a      	beq.n	801ae24 <USBPD_DPM_CADCallback+0x74>
 801adee:	2b02      	cmp	r3, #2
 801adf0:	d00c      	beq.n	801ae0c <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801adf2:	e067      	b.n	801aec4 <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801adf4:	1dfb      	adds	r3, r7, #7
 801adf6:	781b      	ldrb	r3, [r3, #0]
 801adf8:	2104      	movs	r1, #4
 801adfa:	0018      	movs	r0, r3
 801adfc:	f000 f96a 	bl	801b0d4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ae00:	1dfb      	adds	r3, r7, #7
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	0018      	movs	r0, r3
 801ae06:	f000 f867 	bl	801aed8 <DPM_StartPETask>
      break;
 801ae0a:	e05c      	b.n	801aec6 <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801ae0c:	1dfb      	adds	r3, r7, #7
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	2102      	movs	r1, #2
 801ae12:	0018      	movs	r0, r3
 801ae14:	f000 f95e 	bl	801b0d4 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ae18:	1dfb      	adds	r3, r7, #7
 801ae1a:	781b      	ldrb	r3, [r3, #0]
 801ae1c:	0018      	movs	r0, r3
 801ae1e:	f000 f85b 	bl	801aed8 <DPM_StartPETask>
      break;
 801ae22:	e050      	b.n	801aec6 <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 801ae24:	230f      	movs	r3, #15
 801ae26:	18fb      	adds	r3, r7, r3
 801ae28:	2200      	movs	r2, #0
 801ae2a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801ae2c:	1dfb      	adds	r3, r7, #7
 801ae2e:	781b      	ldrb	r3, [r3, #0]
 801ae30:	0018      	movs	r0, r3
 801ae32:	f7ff ff47 	bl	801acc4 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801ae36:	e015      	b.n	801ae64 <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 801ae38:	2001      	movs	r0, #1
 801ae3a:	f7fd f8f3 	bl	8018024 <osDelay>
        _timeout++;
 801ae3e:	210f      	movs	r1, #15
 801ae40:	187b      	adds	r3, r7, r1
 801ae42:	781a      	ldrb	r2, [r3, #0]
 801ae44:	187b      	adds	r3, r7, r1
 801ae46:	3201      	adds	r2, #1
 801ae48:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801ae4a:	187b      	adds	r3, r7, r1
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	2b1e      	cmp	r3, #30
 801ae50:	d908      	bls.n	801ae64 <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 801ae52:	1dfb      	adds	r3, r7, #7
 801ae54:	781a      	ldrb	r2, [r3, #0]
 801ae56:	4b1e      	ldr	r3, [pc, #120]	; (801aed0 <USBPD_DPM_CADCallback+0x120>)
 801ae58:	0092      	lsls	r2, r2, #2
 801ae5a:	58d3      	ldr	r3, [r2, r3]
 801ae5c:	0018      	movs	r0, r3
 801ae5e:	f7fd f89d 	bl	8017f9c <osThreadSuspend>
          break;
 801ae62:	e00a      	b.n	801ae7a <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801ae64:	1dfb      	adds	r3, r7, #7
 801ae66:	781a      	ldrb	r2, [r3, #0]
 801ae68:	4b19      	ldr	r3, [pc, #100]	; (801aed0 <USBPD_DPM_CADCallback+0x120>)
 801ae6a:	0092      	lsls	r2, r2, #2
 801ae6c:	58d3      	ldr	r3, [r2, r3]
 801ae6e:	0018      	movs	r0, r3
 801ae70:	f7fe f97e 	bl	8019170 <eTaskGetState>
 801ae74:	0003      	movs	r3, r0
 801ae76:	2b03      	cmp	r3, #3
 801ae78:	d1de      	bne.n	801ae38 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 801ae7a:	1dfb      	adds	r3, r7, #7
 801ae7c:	781b      	ldrb	r3, [r3, #0]
 801ae7e:	0018      	movs	r0, r3
 801ae80:	f7e5 faeb 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801ae84:	1dfb      	adds	r3, r7, #7
 801ae86:	781a      	ldrb	r2, [r3, #0]
 801ae88:	4b12      	ldr	r3, [pc, #72]	; (801aed4 <USBPD_DPM_CADCallback+0x124>)
 801ae8a:	0092      	lsls	r2, r2, #2
 801ae8c:	5cd1      	ldrb	r1, [r2, r3]
 801ae8e:	2010      	movs	r0, #16
 801ae90:	4381      	bics	r1, r0
 801ae92:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801ae94:	1dfb      	adds	r3, r7, #7
 801ae96:	781b      	ldrb	r3, [r3, #0]
 801ae98:	4a0e      	ldr	r2, [pc, #56]	; (801aed4 <USBPD_DPM_CADCallback+0x124>)
 801ae9a:	009b      	lsls	r3, r3, #2
 801ae9c:	18d3      	adds	r3, r2, r3
 801ae9e:	785a      	ldrb	r2, [r3, #1]
 801aea0:	2107      	movs	r1, #7
 801aea2:	438a      	bics	r2, r1
 801aea4:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801aea6:	1dbb      	adds	r3, r7, #6
 801aea8:	781a      	ldrb	r2, [r3, #0]
 801aeaa:	1dfb      	adds	r3, r7, #7
 801aeac:	781b      	ldrb	r3, [r3, #0]
 801aeae:	0011      	movs	r1, r2
 801aeb0:	0018      	movs	r0, r3
 801aeb2:	f000 f90f 	bl	801b0d4 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801aeb6:	1dfb      	adds	r3, r7, #7
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	2169      	movs	r1, #105	; 0x69
 801aebc:	0018      	movs	r0, r3
 801aebe:	f000 f96d 	bl	801b19c <USBPD_DPM_Notification>
      break;
 801aec2:	e000      	b.n	801aec6 <USBPD_DPM_CADCallback+0x116>
      break;
 801aec4:	46c0      	nop			; (mov r8, r8)
  }
}
 801aec6:	46c0      	nop			; (mov r8, r8)
 801aec8:	46bd      	mov	sp, r7
 801aeca:	b004      	add	sp, #16
 801aecc:	bd80      	pop	{r7, pc}
 801aece:	46c0      	nop			; (mov r8, r8)
 801aed0:	20002f24 	.word	0x20002f24
 801aed4:	20002f34 	.word	0x20002f34

0801aed8 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b082      	sub	sp, #8
 801aedc:	af00      	add	r7, sp, #0
 801aede:	0002      	movs	r2, r0
 801aee0:	1dfb      	adds	r3, r7, #7
 801aee2:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801aee4:	1dfb      	adds	r3, r7, #7
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	0018      	movs	r0, r3
 801aeea:	f7e5 fab0 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801aeee:	1dfb      	adds	r3, r7, #7
 801aef0:	781b      	ldrb	r3, [r3, #0]
 801aef2:	2b01      	cmp	r3, #1
 801aef4:	d808      	bhi.n	801af08 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801aef6:	1dfb      	adds	r3, r7, #7
 801aef8:	781a      	ldrb	r2, [r3, #0]
 801aefa:	4b0a      	ldr	r3, [pc, #40]	; (801af24 <DPM_StartPETask+0x4c>)
 801aefc:	0092      	lsls	r2, r2, #2
 801aefe:	58d3      	ldr	r3, [r2, r3]
 801af00:	0018      	movs	r0, r3
 801af02:	f7fd f86d 	bl	8017fe0 <osThreadResume>
      break;
 801af06:	e002      	b.n	801af0e <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801af08:	f000 f80e 	bl	801af28 <USBPD_DPM_ErrorHandler>
      break;
 801af0c:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801af0e:	1dfb      	adds	r3, r7, #7
 801af10:	781b      	ldrb	r3, [r3, #0]
 801af12:	2168      	movs	r1, #104	; 0x68
 801af14:	0018      	movs	r0, r3
 801af16:	f000 f941 	bl	801b19c <USBPD_DPM_Notification>
}
 801af1a:	46c0      	nop			; (mov r8, r8)
 801af1c:	46bd      	mov	sp, r7
 801af1e:	b002      	add	sp, #8
 801af20:	bd80      	pop	{r7, pc}
 801af22:	46c0      	nop			; (mov r8, r8)
 801af24:	20002f24 	.word	0x20002f24

0801af28 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 801af28:	b580      	push	{r7, lr}
 801af2a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801af2c:	e7fe      	b.n	801af2c <USBPD_DPM_ErrorHandler+0x4>
	...

0801af30 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b084      	sub	sp, #16
 801af34:	af00      	add	r7, sp, #0
 801af36:	0002      	movs	r2, r0
 801af38:	1dfb      	adds	r3, r7, #7
 801af3a:	701a      	strb	r2, [r3, #0]
 801af3c:	1dbb      	adds	r3, r7, #6
 801af3e:	1c0a      	adds	r2, r1, #0
 801af40:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801af42:	230f      	movs	r3, #15
 801af44:	18fb      	adds	r3, r7, r3
 801af46:	2202      	movs	r2, #2
 801af48:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801af4a:	1dfb      	adds	r3, r7, #7
 801af4c:	781b      	ldrb	r3, [r3, #0]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d001      	beq.n	801af56 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 801af52:	2302      	movs	r3, #2
 801af54:	e024      	b.n	801afa0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801af56:	1dfb      	adds	r3, r7, #7
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	2208      	movs	r2, #8
 801af5c:	18ba      	adds	r2, r7, r2
 801af5e:	0011      	movs	r1, r2
 801af60:	0018      	movs	r0, r3
 801af62:	f001 fb5d 	bl	801c620 <BSP_USBPD_PWR_VBUSGetVoltage>

  if (USBPD_VSAFE_0V == Vsafe)
 801af66:	1dbb      	adds	r3, r7, #6
 801af68:	781b      	ldrb	r3, [r3, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d10a      	bne.n	801af84 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	4a0d      	ldr	r2, [pc, #52]	; (801afa8 <USBPD_PWR_IF_SupplyReady+0x78>)
 801af72:	4293      	cmp	r3, r2
 801af74:	d801      	bhi.n	801af7a <USBPD_PWR_IF_SupplyReady+0x4a>
 801af76:	2200      	movs	r2, #0
 801af78:	e000      	b.n	801af7c <USBPD_PWR_IF_SupplyReady+0x4c>
 801af7a:	2202      	movs	r2, #2
 801af7c:	230f      	movs	r3, #15
 801af7e:	18fb      	adds	r3, r7, r3
 801af80:	701a      	strb	r2, [r3, #0]
 801af82:	e00a      	b.n	801af9a <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801af84:	68ba      	ldr	r2, [r7, #8]
 801af86:	23af      	movs	r3, #175	; 0xaf
 801af88:	011b      	lsls	r3, r3, #4
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d901      	bls.n	801af92 <USBPD_PWR_IF_SupplyReady+0x62>
 801af8e:	2200      	movs	r2, #0
 801af90:	e000      	b.n	801af94 <USBPD_PWR_IF_SupplyReady+0x64>
 801af92:	2202      	movs	r2, #2
 801af94:	230f      	movs	r3, #15
 801af96:	18fb      	adds	r3, r7, r3
 801af98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801af9a:	230f      	movs	r3, #15
 801af9c:	18fb      	adds	r3, r7, r3
 801af9e:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801afa0:	0018      	movs	r0, r3
 801afa2:	46bd      	mov	sp, r7
 801afa4:	b004      	add	sp, #16
 801afa6:	bd80      	pop	{r7, pc}
 801afa8:	000002ed 	.word	0x000002ed

0801afac <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801afac:	b580      	push	{r7, lr}
 801afae:	b084      	sub	sp, #16
 801afb0:	af00      	add	r7, sp, #0
 801afb2:	60ba      	str	r2, [r7, #8]
 801afb4:	607b      	str	r3, [r7, #4]
 801afb6:	230f      	movs	r3, #15
 801afb8:	18fb      	adds	r3, r7, r3
 801afba:	1c02      	adds	r2, r0, #0
 801afbc:	701a      	strb	r2, [r3, #0]
 801afbe:	230e      	movs	r3, #14
 801afc0:	18fb      	adds	r3, r7, r3
 801afc2:	1c0a      	adds	r2, r1, #0
 801afc4:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 801afc6:	4b08      	ldr	r3, [pc, #32]	; (801afe8 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801afc8:	781b      	ldrb	r3, [r3, #0]
 801afca:	001a      	movs	r2, r3
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 801afd0:	4b05      	ldr	r3, [pc, #20]	; (801afe8 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	009a      	lsls	r2, r3, #2
 801afd6:	4905      	ldr	r1, [pc, #20]	; (801afec <USBPD_PWR_IF_GetPortPDOs+0x40>)
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	0018      	movs	r0, r3
 801afdc:	f008 fbce 	bl	802377c <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801afe0:	46c0      	nop			; (mov r8, r8)
 801afe2:	46bd      	mov	sp, r7
 801afe4:	b004      	add	sp, #16
 801afe6:	bd80      	pop	{r7, pc}
 801afe8:	20000180 	.word	0x20000180
 801afec:	20000184 	.word	0x20000184

0801aff0 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b084      	sub	sp, #16
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	0002      	movs	r2, r0
 801aff8:	1dfb      	adds	r3, r7, #7
 801affa:	701a      	strb	r2, [r3, #0]
 801affc:	1dbb      	adds	r3, r7, #6
 801affe:	1c0a      	adds	r2, r1, #0
 801b000:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801b002:	230f      	movs	r3, #15
 801b004:	18fb      	adds	r3, r7, r3
 801b006:	2200      	movs	r2, #0
 801b008:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801b00a:	1dfb      	adds	r3, r7, #7
 801b00c:	781b      	ldrb	r3, [r3, #0]
 801b00e:	0018      	movs	r0, r3
 801b010:	f7fa f94a 	bl	80152a8 <HW_IF_PWR_GetVoltage>
 801b014:	0003      	movs	r3, r0
 801b016:	60bb      	str	r3, [r7, #8]

  _vbus = 5000;
 801b018:	4b1b      	ldr	r3, [pc, #108]	; (801b088 <USBPD_PWR_IF_GetVBUSStatus+0x98>)
 801b01a:	60bb      	str	r3, [r7, #8]
  switch(PowerTypeStatus)
 801b01c:	1dbb      	adds	r3, r7, #6
 801b01e:	781b      	ldrb	r3, [r3, #0]
 801b020:	2b02      	cmp	r3, #2
 801b022:	d018      	beq.n	801b056 <USBPD_PWR_IF_GetVBUSStatus+0x66>
 801b024:	dc21      	bgt.n	801b06a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801b026:	2b00      	cmp	r3, #0
 801b028:	d002      	beq.n	801b030 <USBPD_PWR_IF_GetVBUSStatus+0x40>
 801b02a:	2b01      	cmp	r3, #1
 801b02c:	d009      	beq.n	801b042 <USBPD_PWR_IF_GetVBUSStatus+0x52>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801b02e:	e01c      	b.n	801b06a <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b030:	68bb      	ldr	r3, [r7, #8]
 801b032:	4a16      	ldr	r2, [pc, #88]	; (801b08c <USBPD_PWR_IF_GetVBUSStatus+0x9c>)
 801b034:	4293      	cmp	r3, r2
 801b036:	d81a      	bhi.n	801b06e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801b038:	230f      	movs	r3, #15
 801b03a:	18fb      	adds	r3, r7, r3
 801b03c:	2201      	movs	r2, #1
 801b03e:	701a      	strb	r2, [r3, #0]
    break;
 801b040:	e015      	b.n	801b06e <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b042:	68ba      	ldr	r2, [r7, #8]
 801b044:	23af      	movs	r3, #175	; 0xaf
 801b046:	011b      	lsls	r3, r3, #4
 801b048:	429a      	cmp	r2, r3
 801b04a:	d312      	bcc.n	801b072 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801b04c:	230f      	movs	r3, #15
 801b04e:	18fb      	adds	r3, r7, r3
 801b050:	2201      	movs	r2, #1
 801b052:	701a      	strb	r2, [r3, #0]
    break;
 801b054:	e00d      	b.n	801b072 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801b056:	68ba      	ldr	r2, [r7, #8]
 801b058:	23af      	movs	r3, #175	; 0xaf
 801b05a:	011b      	lsls	r3, r3, #4
 801b05c:	429a      	cmp	r2, r3
 801b05e:	d20a      	bcs.n	801b076 <USBPD_PWR_IF_GetVBUSStatus+0x86>
 801b060:	230f      	movs	r3, #15
 801b062:	18fb      	adds	r3, r7, r3
 801b064:	2201      	movs	r2, #1
 801b066:	701a      	strb	r2, [r3, #0]
    break;
 801b068:	e005      	b.n	801b076 <USBPD_PWR_IF_GetVBUSStatus+0x86>
    break;
 801b06a:	46c0      	nop			; (mov r8, r8)
 801b06c:	e004      	b.n	801b078 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b06e:	46c0      	nop			; (mov r8, r8)
 801b070:	e002      	b.n	801b078 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b072:	46c0      	nop			; (mov r8, r8)
 801b074:	e000      	b.n	801b078 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801b076:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 801b078:	230f      	movs	r3, #15
 801b07a:	18fb      	adds	r3, r7, r3
 801b07c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801b07e:	0018      	movs	r0, r3
 801b080:	46bd      	mov	sp, r7
 801b082:	b004      	add	sp, #16
 801b084:	bd80      	pop	{r7, pc}
 801b086:	46c0      	nop			; (mov r8, r8)
 801b088:	00001388 	.word	0x00001388
 801b08c:	000002ed 	.word	0x000002ed

0801b090 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801b090:	b580      	push	{r7, lr}
 801b092:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  /* Demo initialisation */
  DEMO_Init();
 801b094:	f7ec f9c0 	bl	8007418 <DEMO_Init>
  {
	return USBPD_ERROR;
  }*/


  return USBPD_OK;
 801b098:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801b09a:	0018      	movs	r0, r3
 801b09c:	46bd      	mov	sp, r7
 801b09e:	bd80      	pop	{r7, pc}

0801b0a0 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b084      	sub	sp, #16
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 801b0ac:	4b06      	ldr	r3, [pc, #24]	; (801b0c8 <USBPD_DPM_SetNotification_GUI+0x28>)
 801b0ae:	68ba      	ldr	r2, [r7, #8]
 801b0b0:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 801b0b2:	4b06      	ldr	r3, [pc, #24]	; (801b0cc <USBPD_DPM_SetNotification_GUI+0x2c>)
 801b0b4:	68fa      	ldr	r2, [r7, #12]
 801b0b6:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 801b0b8:	4b05      	ldr	r3, [pc, #20]	; (801b0d0 <USBPD_DPM_SetNotification_GUI+0x30>)
 801b0ba:	687a      	ldr	r2, [r7, #4]
 801b0bc:	601a      	str	r2, [r3, #0]
}
 801b0be:	46c0      	nop			; (mov r8, r8)
 801b0c0:	46bd      	mov	sp, r7
 801b0c2:	b004      	add	sp, #16
 801b0c4:	bd80      	pop	{r7, pc}
 801b0c6:	46c0      	nop			; (mov r8, r8)
 801b0c8:	20002f38 	.word	0x20002f38
 801b0cc:	20002f3c 	.word	0x20002f3c
 801b0d0:	20002f40 	.word	0x20002f40

0801b0d4 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801b0d4:	b590      	push	{r4, r7, lr}
 801b0d6:	b093      	sub	sp, #76	; 0x4c
 801b0d8:	af02      	add	r7, sp, #8
 801b0da:	0002      	movs	r2, r0
 801b0dc:	1dfb      	adds	r3, r7, #7
 801b0de:	701a      	strb	r2, [r3, #0]
 801b0e0:	1dbb      	adds	r3, r7, #6
 801b0e2:	1c0a      	adds	r2, r1, #0
 801b0e4:	701a      	strb	r2, [r3, #0]
  switch(State)
 801b0e6:	1dbb      	adds	r3, r7, #6
 801b0e8:	781b      	ldrb	r3, [r3, #0]
 801b0ea:	2b02      	cmp	r3, #2
 801b0ec:	d001      	beq.n	801b0f2 <USBPD_DPM_UserCableDetection+0x1e>
 801b0ee:	2b04      	cmp	r3, #4
 801b0f0:	d10b      	bne.n	801b10a <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801b0f2:	4b22      	ldr	r3, [pc, #136]	; (801b17c <USBPD_DPM_UserCableDetection+0xa8>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d013      	beq.n	801b122 <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 801b0fa:	4b20      	ldr	r3, [pc, #128]	; (801b17c <USBPD_DPM_UserCableDetection+0xa8>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	1dfa      	adds	r2, r7, #7
 801b100:	7810      	ldrb	r0, [r2, #0]
 801b102:	2200      	movs	r2, #0
 801b104:	2120      	movs	r1, #32
 801b106:	4798      	blx	r3
    }
    break;
 801b108:	e00b      	b.n	801b122 <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801b10a:	4b1c      	ldr	r3, [pc, #112]	; (801b17c <USBPD_DPM_UserCableDetection+0xa8>)
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d008      	beq.n	801b124 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 801b112:	4b1a      	ldr	r3, [pc, #104]	; (801b17c <USBPD_DPM_UserCableDetection+0xa8>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	1dfa      	adds	r2, r7, #7
 801b118:	7810      	ldrb	r0, [r2, #0]
 801b11a:	4919      	ldr	r1, [pc, #100]	; (801b180 <USBPD_DPM_UserCableDetection+0xac>)
 801b11c:	2200      	movs	r2, #0
 801b11e:	4798      	blx	r3
 801b120:	e000      	b.n	801b124 <USBPD_DPM_UserCableDetection+0x50>
    break;
 801b122:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801b124:	4a17      	ldr	r2, [pc, #92]	; (801b184 <USBPD_DPM_UserCableDetection+0xb0>)
 801b126:	240c      	movs	r4, #12
 801b128:	193b      	adds	r3, r7, r4
 801b12a:	2132      	movs	r1, #50	; 0x32
 801b12c:	0018      	movs	r0, r3
 801b12e:	f008 fa1d 	bl	802356c <sniprintf>
 801b132:	0002      	movs	r2, r0
 801b134:	213f      	movs	r1, #63	; 0x3f
 801b136:	187b      	adds	r3, r7, r1
 801b138:	701a      	strb	r2, [r3, #0]
 801b13a:	187b      	adds	r3, r7, r1
 801b13c:	781b      	ldrb	r3, [r3, #0]
 801b13e:	2b31      	cmp	r3, #49	; 0x31
 801b140:	d80d      	bhi.n	801b15e <USBPD_DPM_UserCableDetection+0x8a>
 801b142:	193b      	adds	r3, r7, r4
 801b144:	0018      	movs	r0, r3
 801b146:	f7eb f841 	bl	80061cc <strlen>
 801b14a:	193a      	adds	r2, r7, r4
 801b14c:	1dfb      	adds	r3, r7, #7
 801b14e:	7819      	ldrb	r1, [r3, #0]
 801b150:	9000      	str	r0, [sp, #0]
 801b152:	0013      	movs	r3, r2
 801b154:	2200      	movs	r2, #0
 801b156:	2006      	movs	r0, #6
 801b158:	f7f7 fc30 	bl	80129bc <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801b15c:	e00a      	b.n	801b174 <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801b15e:	230c      	movs	r3, #12
 801b160:	18fa      	adds	r2, r7, r3
 801b162:	1dfb      	adds	r3, r7, #7
 801b164:	7819      	ldrb	r1, [r3, #0]
 801b166:	2332      	movs	r3, #50	; 0x32
 801b168:	9300      	str	r3, [sp, #0]
 801b16a:	0013      	movs	r3, r2
 801b16c:	2200      	movs	r2, #0
 801b16e:	2006      	movs	r0, #6
 801b170:	f7f7 fc24 	bl	80129bc <USBPD_TRACE_Add>
}
 801b174:	46c0      	nop			; (mov r8, r8)
 801b176:	46bd      	mov	sp, r7
 801b178:	b011      	add	sp, #68	; 0x44
 801b17a:	bd90      	pop	{r4, r7, pc}
 801b17c:	20002f3c 	.word	0x20002f3c
 801b180:	00008020 	.word	0x00008020
 801b184:	08024098 	.word	0x08024098

0801b188 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b082      	sub	sp, #8
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	0002      	movs	r2, r0
 801b190:	1dfb      	adds	r3, r7, #7
 801b192:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 801b194:	46c0      	nop			; (mov r8, r8)
 801b196:	46bd      	mov	sp, r7
 801b198:	b002      	add	sp, #8
 801b19a:	bd80      	pop	{r7, pc}

0801b19c <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801b19c:	b590      	push	{r4, r7, lr}
 801b19e:	b093      	sub	sp, #76	; 0x4c
 801b1a0:	af02      	add	r7, sp, #8
 801b1a2:	0002      	movs	r2, r0
 801b1a4:	1dfb      	adds	r3, r7, #7
 801b1a6:	701a      	strb	r2, [r3, #0]
 801b1a8:	1dbb      	adds	r3, r7, #6
 801b1aa:	1c0a      	adds	r2, r1, #0
 801b1ac:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 801b1ae:	4b2a      	ldr	r3, [pc, #168]	; (801b258 <USBPD_DPM_Notification+0xbc>)
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d008      	beq.n	801b1c8 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 801b1b6:	4b28      	ldr	r3, [pc, #160]	; (801b258 <USBPD_DPM_Notification+0xbc>)
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	1dba      	adds	r2, r7, #6
 801b1bc:	7812      	ldrb	r2, [r2, #0]
 801b1be:	b291      	uxth	r1, r2
 801b1c0:	1dfa      	adds	r2, r7, #7
 801b1c2:	7812      	ldrb	r2, [r2, #0]
 801b1c4:	0010      	movs	r0, r2
 801b1c6:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 801b1c8:	1dbb      	adds	r3, r7, #6
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	2b10      	cmp	r3, #16
 801b1ce:	d114      	bne.n	801b1fa <USBPD_DPM_Notification+0x5e>
  {
    case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
    	char _str[50];
    	sprintf(_str,"POWER_EXPLICIT_CONTRACT notification as DPM notif");
 801b1d0:	4a22      	ldr	r2, [pc, #136]	; (801b25c <USBPD_DPM_Notification+0xc0>)
 801b1d2:	240c      	movs	r4, #12
 801b1d4:	193b      	adds	r3, r7, r4
 801b1d6:	0011      	movs	r1, r2
 801b1d8:	0018      	movs	r0, r3
 801b1da:	f008 f9fb 	bl	80235d4 <siprintf>
    	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t*)_str, strlen(_str));
 801b1de:	193b      	adds	r3, r7, r4
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	f7ea fff3 	bl	80061cc <strlen>
 801b1e6:	193a      	adds	r2, r7, r4
 801b1e8:	1dfb      	adds	r3, r7, #7
 801b1ea:	7819      	ldrb	r1, [r3, #0]
 801b1ec:	9000      	str	r0, [sp, #0]
 801b1ee:	0013      	movs	r3, r2
 801b1f0:	2200      	movs	r2, #0
 801b1f2:	2006      	movs	r0, #6
 801b1f4:	f7f7 fbe2 	bl	80129bc <USBPD_TRACE_Add>
      break;
 801b1f8:	e029      	b.n	801b24e <USBPD_DPM_Notification+0xb2>
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801b1fa:	1dbb      	adds	r3, r7, #6
 801b1fc:	781b      	ldrb	r3, [r3, #0]
 801b1fe:	4a18      	ldr	r2, [pc, #96]	; (801b260 <USBPD_DPM_Notification+0xc4>)
 801b200:	240c      	movs	r4, #12
 801b202:	1938      	adds	r0, r7, r4
 801b204:	2132      	movs	r1, #50	; 0x32
 801b206:	f008 f9b1 	bl	802356c <sniprintf>
 801b20a:	0002      	movs	r2, r0
 801b20c:	213f      	movs	r1, #63	; 0x3f
 801b20e:	187b      	adds	r3, r7, r1
 801b210:	701a      	strb	r2, [r3, #0]
 801b212:	187b      	adds	r3, r7, r1
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	2b31      	cmp	r3, #49	; 0x31
 801b218:	d80d      	bhi.n	801b236 <USBPD_DPM_Notification+0x9a>
 801b21a:	193b      	adds	r3, r7, r4
 801b21c:	0018      	movs	r0, r3
 801b21e:	f7ea ffd5 	bl	80061cc <strlen>
 801b222:	193a      	adds	r2, r7, r4
 801b224:	1dfb      	adds	r3, r7, #7
 801b226:	7819      	ldrb	r1, [r3, #0]
 801b228:	9000      	str	r0, [sp, #0]
 801b22a:	0013      	movs	r3, r2
 801b22c:	2200      	movs	r2, #0
 801b22e:	2006      	movs	r0, #6
 801b230:	f7f7 fbc4 	bl	80129bc <USBPD_TRACE_Add>
      break;
 801b234:	e00a      	b.n	801b24c <USBPD_DPM_Notification+0xb0>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801b236:	230c      	movs	r3, #12
 801b238:	18fa      	adds	r2, r7, r3
 801b23a:	1dfb      	adds	r3, r7, #7
 801b23c:	7819      	ldrb	r1, [r3, #0]
 801b23e:	2332      	movs	r3, #50	; 0x32
 801b240:	9300      	str	r3, [sp, #0]
 801b242:	0013      	movs	r3, r2
 801b244:	2200      	movs	r2, #0
 801b246:	2006      	movs	r0, #6
 801b248:	f7f7 fbb8 	bl	80129bc <USBPD_TRACE_Add>
      break;
 801b24c:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801b24e:	46c0      	nop			; (mov r8, r8)
 801b250:	46bd      	mov	sp, r7
 801b252:	b011      	add	sp, #68	; 0x44
 801b254:	bd90      	pop	{r4, r7, pc}
 801b256:	46c0      	nop			; (mov r8, r8)
 801b258:	20002f38 	.word	0x20002f38
 801b25c:	080240c4 	.word	0x080240c4
 801b260:	080240f8 	.word	0x080240f8

0801b264 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801b264:	b590      	push	{r4, r7, lr}
 801b266:	b093      	sub	sp, #76	; 0x4c
 801b268:	af02      	add	r7, sp, #8
 801b26a:	6039      	str	r1, [r7, #0]
 801b26c:	0011      	movs	r1, r2
 801b26e:	1dfb      	adds	r3, r7, #7
 801b270:	1c02      	adds	r2, r0, #0
 801b272:	701a      	strb	r2, [r3, #0]
 801b274:	1dbb      	adds	r3, r7, #6
 801b276:	1c0a      	adds	r2, r1, #0
 801b278:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801b27a:	4a16      	ldr	r2, [pc, #88]	; (801b2d4 <USBPD_DPM_HardReset+0x70>)
 801b27c:	240c      	movs	r4, #12
 801b27e:	193b      	adds	r3, r7, r4
 801b280:	2132      	movs	r1, #50	; 0x32
 801b282:	0018      	movs	r0, r3
 801b284:	f008 f972 	bl	802356c <sniprintf>
 801b288:	0002      	movs	r2, r0
 801b28a:	213f      	movs	r1, #63	; 0x3f
 801b28c:	187b      	adds	r3, r7, r1
 801b28e:	701a      	strb	r2, [r3, #0]
 801b290:	187b      	adds	r3, r7, r1
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2b31      	cmp	r3, #49	; 0x31
 801b296:	d80d      	bhi.n	801b2b4 <USBPD_DPM_HardReset+0x50>
 801b298:	193b      	adds	r3, r7, r4
 801b29a:	0018      	movs	r0, r3
 801b29c:	f7ea ff96 	bl	80061cc <strlen>
 801b2a0:	193a      	adds	r2, r7, r4
 801b2a2:	1dfb      	adds	r3, r7, #7
 801b2a4:	7819      	ldrb	r1, [r3, #0]
 801b2a6:	9000      	str	r0, [sp, #0]
 801b2a8:	0013      	movs	r3, r2
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	2006      	movs	r0, #6
 801b2ae:	f7f7 fb85 	bl	80129bc <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 801b2b2:	e00a      	b.n	801b2ca <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801b2b4:	230c      	movs	r3, #12
 801b2b6:	18fa      	adds	r2, r7, r3
 801b2b8:	1dfb      	adds	r3, r7, #7
 801b2ba:	7819      	ldrb	r1, [r3, #0]
 801b2bc:	2332      	movs	r3, #50	; 0x32
 801b2be:	9300      	str	r3, [sp, #0]
 801b2c0:	0013      	movs	r3, r2
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	2006      	movs	r0, #6
 801b2c6:	f7f7 fb79 	bl	80129bc <USBPD_TRACE_Add>
}
 801b2ca:	46c0      	nop			; (mov r8, r8)
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	b011      	add	sp, #68	; 0x44
 801b2d0:	bd90      	pop	{r4, r7, pc}
 801b2d2:	46c0      	nop			; (mov r8, r8)
 801b2d4:	0802411c 	.word	0x0802411c

0801b2d8 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801b2d8:	b590      	push	{r4, r7, lr}
 801b2da:	b097      	sub	sp, #92	; 0x5c
 801b2dc:	af02      	add	r7, sp, #8
 801b2de:	60ba      	str	r2, [r7, #8]
 801b2e0:	607b      	str	r3, [r7, #4]
 801b2e2:	230f      	movs	r3, #15
 801b2e4:	18fb      	adds	r3, r7, r3
 801b2e6:	1c02      	adds	r2, r0, #0
 801b2e8:	701a      	strb	r2, [r3, #0]
 801b2ea:	200e      	movs	r0, #14
 801b2ec:	183b      	adds	r3, r7, r0
 801b2ee:	1c0a      	adds	r2, r1, #0
 801b2f0:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801b2f2:	183b      	adds	r3, r7, r0
 801b2f4:	781b      	ldrb	r3, [r3, #0]
 801b2f6:	2b01      	cmp	r3, #1
 801b2f8:	d002      	beq.n	801b300 <USBPD_DPM_GetDataInfo+0x28>
 801b2fa:	2b0a      	cmp	r3, #10
 801b2fc:	d011      	beq.n	801b322 <USBPD_DPM_GetDataInfo+0x4a>
 801b2fe:	e01e      	b.n	801b33e <USBPD_DPM_GetDataInfo+0x66>
  {

  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sink capa*/
  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801b300:	687c      	ldr	r4, [r7, #4]
 801b302:	68ba      	ldr	r2, [r7, #8]
 801b304:	230e      	movs	r3, #14
 801b306:	18fb      	adds	r3, r7, r3
 801b308:	7819      	ldrb	r1, [r3, #0]
 801b30a:	230f      	movs	r3, #15
 801b30c:	18fb      	adds	r3, r7, r3
 801b30e:	7818      	ldrb	r0, [r3, #0]
 801b310:	0023      	movs	r3, r4
 801b312:	f7ff fe4b 	bl	801afac <USBPD_PWR_IF_GetPortPDOs>
  *Size *= 4;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	009a      	lsls	r2, r3, #2
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	601a      	str	r2, [r3, #0]
  break;
 801b320:	e03a      	b.n	801b398 <USBPD_DPM_GetDataInfo+0xc0>

  case USBPD_CORE_PPS_STATUS :
	  {
		/* Get current drawn by sink */
		USBPD_PPSSDB_TypeDef pps_status = {0};
 801b322:	2300      	movs	r3, #0
 801b324:	64bb      	str	r3, [r7, #72]	; 0x48
		/*
		pps_status.fields.OutputVoltageIn20mVunits  = 0xFFFF;
		pps_status.fields.OutputCurrentIn50mAunits  = 0xFF;
		pps_status.fields.RealTimeFlags             = USBPD_PPS_REALTIMEFLAGS_PTF_NOT_SUPPORTED | USBPD_PPS_REALTIMEFLAGS_OMF_DISABLED;*/

		*Size = 4;
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	2204      	movs	r2, #4
 801b32a:	601a      	str	r2, [r3, #0]
		(void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	2348      	movs	r3, #72	; 0x48
 801b332:	18f9      	adds	r1, r7, r3
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	0018      	movs	r0, r3
 801b338:	f008 fa20 	bl	802377c <memcpy>
	  }
	  break;
 801b33c:	e02c      	b.n	801b398 <USBPD_DPM_GetDataInfo+0xc0>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801b33e:	230e      	movs	r3, #14
 801b340:	18fb      	adds	r3, r7, r3
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	4a16      	ldr	r2, [pc, #88]	; (801b3a0 <USBPD_DPM_GetDataInfo+0xc8>)
 801b346:	2414      	movs	r4, #20
 801b348:	1938      	adds	r0, r7, r4
 801b34a:	2132      	movs	r1, #50	; 0x32
 801b34c:	f008 f90e 	bl	802356c <sniprintf>
 801b350:	0002      	movs	r2, r0
 801b352:	214f      	movs	r1, #79	; 0x4f
 801b354:	187b      	adds	r3, r7, r1
 801b356:	701a      	strb	r2, [r3, #0]
 801b358:	187b      	adds	r3, r7, r1
 801b35a:	781b      	ldrb	r3, [r3, #0]
 801b35c:	2b31      	cmp	r3, #49	; 0x31
 801b35e:	d80e      	bhi.n	801b37e <USBPD_DPM_GetDataInfo+0xa6>
 801b360:	193b      	adds	r3, r7, r4
 801b362:	0018      	movs	r0, r3
 801b364:	f7ea ff32 	bl	80061cc <strlen>
 801b368:	193a      	adds	r2, r7, r4
 801b36a:	230f      	movs	r3, #15
 801b36c:	18fb      	adds	r3, r7, r3
 801b36e:	7819      	ldrb	r1, [r3, #0]
 801b370:	9000      	str	r0, [sp, #0]
 801b372:	0013      	movs	r3, r2
 801b374:	2200      	movs	r2, #0
 801b376:	2006      	movs	r0, #6
 801b378:	f7f7 fb20 	bl	80129bc <USBPD_TRACE_Add>
    break;
 801b37c:	e00b      	b.n	801b396 <USBPD_DPM_GetDataInfo+0xbe>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801b37e:	2314      	movs	r3, #20
 801b380:	18fa      	adds	r2, r7, r3
 801b382:	230f      	movs	r3, #15
 801b384:	18fb      	adds	r3, r7, r3
 801b386:	7819      	ldrb	r1, [r3, #0]
 801b388:	2332      	movs	r3, #50	; 0x32
 801b38a:	9300      	str	r3, [sp, #0]
 801b38c:	0013      	movs	r3, r2
 801b38e:	2200      	movs	r2, #0
 801b390:	2006      	movs	r0, #6
 801b392:	f7f7 fb13 	bl	80129bc <USBPD_TRACE_Add>
    break;
 801b396:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801b398:	46c0      	nop			; (mov r8, r8)
 801b39a:	46bd      	mov	sp, r7
 801b39c:	b015      	add	sp, #84	; 0x54
 801b39e:	bd90      	pop	{r4, r7, pc}
 801b3a0:	08024140 	.word	0x08024140

0801b3a4 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801b3a4:	b5b0      	push	{r4, r5, r7, lr}
 801b3a6:	b094      	sub	sp, #80	; 0x50
 801b3a8:	af02      	add	r7, sp, #8
 801b3aa:	60ba      	str	r2, [r7, #8]
 801b3ac:	607b      	str	r3, [r7, #4]
 801b3ae:	230f      	movs	r3, #15
 801b3b0:	18fb      	adds	r3, r7, r3
 801b3b2:	1c02      	adds	r2, r0, #0
 801b3b4:	701a      	strb	r2, [r3, #0]
 801b3b6:	200e      	movs	r0, #14
 801b3b8:	183b      	adds	r3, r7, r0
 801b3ba:	1c0a      	adds	r2, r1, #0
 801b3bc:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801b3be:	183b      	adds	r3, r7, r0
 801b3c0:	781b      	ldrb	r3, [r3, #0]
 801b3c2:	2b04      	cmp	r3, #4
 801b3c4:	d002      	beq.n	801b3cc <USBPD_DPM_SetDataInfo+0x28>
 801b3c6:	2b0a      	cmp	r3, #10
 801b3c8:	d00b      	beq.n	801b3e2 <USBPD_DPM_SetDataInfo+0x3e>
 801b3ca:	e01d      	b.n	801b408 <USBPD_DPM_SetDataInfo+0x64>
  {
  /* Case Received Source PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:         /*!< Storage of Received Source PDO values        */
       USBPD_USER_SERV_StoreSRCPDO(PortNum, Ptr, Size);
 801b3cc:	687a      	ldr	r2, [r7, #4]
 801b3ce:	68b9      	ldr	r1, [r7, #8]
 801b3d0:	230f      	movs	r3, #15
 801b3d2:	18fb      	adds	r3, r7, r3
 801b3d4:	781b      	ldrb	r3, [r3, #0]
 801b3d6:	0018      	movs	r0, r3
 801b3d8:	f001 f9ec 	bl	801c7b4 <USBPD_USER_SERV_StoreSRCPDO>
       USER_SERV_ExtractSRCCapa();
 801b3dc:	f002 f998 	bl	801d710 <USER_SERV_ExtractSRCCapa>
       break;
 801b3e0:	e03f      	b.n	801b462 <USBPD_DPM_SetDataInfo+0xbe>

    case USBPD_CORE_PPS_STATUS :
	  {
		uint8_t*  ext_capa;
		ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 801b3e2:	230f      	movs	r3, #15
 801b3e4:	18fb      	adds	r3, r7, r3
 801b3e6:	781a      	ldrb	r2, [r3, #0]
 801b3e8:	0013      	movs	r3, r2
 801b3ea:	009b      	lsls	r3, r3, #2
 801b3ec:	189b      	adds	r3, r3, r2
 801b3ee:	011b      	lsls	r3, r3, #4
 801b3f0:	3320      	adds	r3, #32
 801b3f2:	001a      	movs	r2, r3
 801b3f4:	4b25      	ldr	r3, [pc, #148]	; (801b48c <USBPD_DPM_SetDataInfo+0xe8>)
 801b3f6:	18d3      	adds	r3, r2, r3
 801b3f8:	647b      	str	r3, [r7, #68]	; 0x44
		memcpy(ext_capa, Ptr, Size);
 801b3fa:	687a      	ldr	r2, [r7, #4]
 801b3fc:	68b9      	ldr	r1, [r7, #8]
 801b3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b400:	0018      	movs	r0, r3
 801b402:	f008 f9bb 	bl	802377c <memcpy>
	  }
	  break;
 801b406:	e02c      	b.n	801b462 <USBPD_DPM_SetDataInfo+0xbe>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801b408:	230e      	movs	r3, #14
 801b40a:	18fb      	adds	r3, r7, r3
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	4a20      	ldr	r2, [pc, #128]	; (801b490 <USBPD_DPM_SetDataInfo+0xec>)
 801b410:	2410      	movs	r4, #16
 801b412:	1938      	adds	r0, r7, r4
 801b414:	2132      	movs	r1, #50	; 0x32
 801b416:	f008 f8a9 	bl	802356c <sniprintf>
 801b41a:	0002      	movs	r2, r0
 801b41c:	2143      	movs	r1, #67	; 0x43
 801b41e:	187b      	adds	r3, r7, r1
 801b420:	701a      	strb	r2, [r3, #0]
 801b422:	187b      	adds	r3, r7, r1
 801b424:	781b      	ldrb	r3, [r3, #0]
 801b426:	2b31      	cmp	r3, #49	; 0x31
 801b428:	d80e      	bhi.n	801b448 <USBPD_DPM_SetDataInfo+0xa4>
 801b42a:	193b      	adds	r3, r7, r4
 801b42c:	0018      	movs	r0, r3
 801b42e:	f7ea fecd 	bl	80061cc <strlen>
 801b432:	193a      	adds	r2, r7, r4
 801b434:	230f      	movs	r3, #15
 801b436:	18fb      	adds	r3, r7, r3
 801b438:	7819      	ldrb	r1, [r3, #0]
 801b43a:	9000      	str	r0, [sp, #0]
 801b43c:	0013      	movs	r3, r2
 801b43e:	2200      	movs	r2, #0
 801b440:	2006      	movs	r0, #6
 801b442:	f7f7 fabb 	bl	80129bc <USBPD_TRACE_Add>
    break;
 801b446:	e00b      	b.n	801b460 <USBPD_DPM_SetDataInfo+0xbc>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801b448:	2310      	movs	r3, #16
 801b44a:	18fa      	adds	r2, r7, r3
 801b44c:	230f      	movs	r3, #15
 801b44e:	18fb      	adds	r3, r7, r3
 801b450:	7819      	ldrb	r1, [r3, #0]
 801b452:	2332      	movs	r3, #50	; 0x32
 801b454:	9300      	str	r3, [sp, #0]
 801b456:	0013      	movs	r3, r2
 801b458:	2200      	movs	r2, #0
 801b45a:	2006      	movs	r0, #6
 801b45c:	f7f7 faae 	bl	80129bc <USBPD_TRACE_Add>
    break;
 801b460:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 801b462:	4b0c      	ldr	r3, [pc, #48]	; (801b494 <USBPD_DPM_SetDataInfo+0xf0>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d00b      	beq.n	801b482 <USBPD_DPM_SetDataInfo+0xde>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801b46a:	4b0a      	ldr	r3, [pc, #40]	; (801b494 <USBPD_DPM_SetDataInfo+0xf0>)
 801b46c:	681c      	ldr	r4, [r3, #0]
 801b46e:	687d      	ldr	r5, [r7, #4]
 801b470:	68ba      	ldr	r2, [r7, #8]
 801b472:	230e      	movs	r3, #14
 801b474:	18fb      	adds	r3, r7, r3
 801b476:	7819      	ldrb	r1, [r3, #0]
 801b478:	230f      	movs	r3, #15
 801b47a:	18fb      	adds	r3, r7, r3
 801b47c:	7818      	ldrb	r0, [r3, #0]
 801b47e:	002b      	movs	r3, r5
 801b480:	47a0      	blx	r4
  }
}
 801b482:	46c0      	nop			; (mov r8, r8)
 801b484:	46bd      	mov	sp, r7
 801b486:	b012      	add	sp, #72	; 0x48
 801b488:	bdb0      	pop	{r4, r5, r7, pc}
 801b48a:	46c0      	nop			; (mov r8, r8)
 801b48c:	20002f48 	.word	0x20002f48
 801b490:	08024168 	.word	0x08024168
 801b494:	20002f40 	.word	0x20002f40

0801b498 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801b498:	b590      	push	{r4, r7, lr}
 801b49a:	b085      	sub	sp, #20
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	60b9      	str	r1, [r7, #8]
 801b4a0:	607a      	str	r2, [r7, #4]
 801b4a2:	240f      	movs	r4, #15
 801b4a4:	193b      	adds	r3, r7, r4
 801b4a6:	1c02      	adds	r2, r0, #0
 801b4a8:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

	/* Variable PDO*/
	USBPD_USER_SERV_EvaluateCapa(PortNum, PtrRequestData, PtrPowerObjectType);
 801b4aa:	687a      	ldr	r2, [r7, #4]
 801b4ac:	68b9      	ldr	r1, [r7, #8]
 801b4ae:	193b      	adds	r3, r7, r4
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	0018      	movs	r0, r3
 801b4b4:	f001 f9be 	bl	801c834 <USBPD_USER_SERV_EvaluateCapa>
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
	*PtrRequestData = rdo.d32;*/


/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801b4b8:	46c0      	nop			; (mov r8, r8)
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	b005      	add	sp, #20
 801b4be:	bd90      	pop	{r4, r7, pc}

0801b4c0 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801b4c0:	b590      	push	{r4, r7, lr}
 801b4c2:	b083      	sub	sp, #12
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	0004      	movs	r4, r0
 801b4c8:	0008      	movs	r0, r1
 801b4ca:	603a      	str	r2, [r7, #0]
 801b4cc:	0019      	movs	r1, r3
 801b4ce:	1dfb      	adds	r3, r7, #7
 801b4d0:	1c22      	adds	r2, r4, #0
 801b4d2:	701a      	strb	r2, [r3, #0]
 801b4d4:	1dbb      	adds	r3, r7, #6
 801b4d6:	1c02      	adds	r2, r0, #0
 801b4d8:	701a      	strb	r2, [r3, #0]
 801b4da:	1d3b      	adds	r3, r7, #4
 801b4dc:	1c0a      	adds	r2, r1, #0
 801b4de:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801b4e0:	46c0      	nop			; (mov r8, r8)
 801b4e2:	46bd      	mov	sp, r7
 801b4e4:	b003      	add	sp, #12
 801b4e6:	bd90      	pop	{r4, r7, pc}

0801b4e8 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801b4e8:	b580      	push	{r7, lr}
 801b4ea:	b082      	sub	sp, #8
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	0002      	movs	r2, r0
 801b4f0:	1dfb      	adds	r3, r7, #7
 801b4f2:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801b4f4:	1dfb      	adds	r3, r7, #7
 801b4f6:	781b      	ldrb	r3, [r3, #0]
 801b4f8:	0018      	movs	r0, r3
 801b4fa:	f7e4 fecf 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801b4fe:	46c0      	nop			; (mov r8, r8)
 801b500:	46bd      	mov	sp, r7
 801b502:	b002      	add	sp, #8
 801b504:	bd80      	pop	{r7, pc}
	...

0801b508 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b084      	sub	sp, #16
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	0002      	movs	r2, r0
 801b510:	1dfb      	adds	r3, r7, #7
 801b512:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801b514:	230f      	movs	r3, #15
 801b516:	18fb      	adds	r3, r7, r3
 801b518:	220c      	movs	r2, #12
 801b51a:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801b51c:	1dfb      	adds	r3, r7, #7
 801b51e:	781a      	ldrb	r2, [r3, #0]
 801b520:	4b2c      	ldr	r3, [pc, #176]	; (801b5d4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b522:	2174      	movs	r1, #116	; 0x74
 801b524:	434a      	muls	r2, r1
 801b526:	5cd3      	ldrb	r3, [r2, r3]
 801b528:	07db      	lsls	r3, r3, #31
 801b52a:	0fdb      	lsrs	r3, r3, #31
 801b52c:	b2db      	uxtb	r3, r3
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d015      	beq.n	801b55e <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801b532:	1dfb      	adds	r3, r7, #7
 801b534:	781a      	ldrb	r2, [r3, #0]
 801b536:	4b27      	ldr	r3, [pc, #156]	; (801b5d4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b538:	2174      	movs	r1, #116	; 0x74
 801b53a:	434a      	muls	r2, r1
 801b53c:	5cd3      	ldrb	r3, [r2, r3]
 801b53e:	075b      	lsls	r3, r3, #29
 801b540:	0fdb      	lsrs	r3, r3, #31
 801b542:	b2db      	uxtb	r3, r3
 801b544:	2b00      	cmp	r3, #0
 801b546:	d10f      	bne.n	801b568 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801b548:	1dfb      	adds	r3, r7, #7
 801b54a:	781a      	ldrb	r2, [r3, #0]
 801b54c:	4b21      	ldr	r3, [pc, #132]	; (801b5d4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b54e:	2174      	movs	r1, #116	; 0x74
 801b550:	434a      	muls	r2, r1
 801b552:	5cd3      	ldrb	r3, [r2, r3]
 801b554:	071b      	lsls	r3, r3, #28
 801b556:	0fdb      	lsrs	r3, r3, #31
 801b558:	b2db      	uxtb	r3, r3
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d104      	bne.n	801b568 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801b55e:	230f      	movs	r3, #15
 801b560:	18fb      	adds	r3, r7, r3
 801b562:	2201      	movs	r2, #1
 801b564:	701a      	strb	r2, [r3, #0]
 801b566:	e02d      	b.n	801b5c4 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801b568:	1dfb      	adds	r3, r7, #7
 801b56a:	781a      	ldrb	r2, [r3, #0]
 801b56c:	4b19      	ldr	r3, [pc, #100]	; (801b5d4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b56e:	2174      	movs	r1, #116	; 0x74
 801b570:	434a      	muls	r2, r1
 801b572:	5cd3      	ldrb	r3, [r2, r3]
 801b574:	075b      	lsls	r3, r3, #29
 801b576:	0fdb      	lsrs	r3, r3, #31
 801b578:	b2db      	uxtb	r3, r3
 801b57a:	2b01      	cmp	r3, #1
 801b57c:	d109      	bne.n	801b592 <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801b57e:	1dfb      	adds	r3, r7, #7
 801b580:	781a      	ldrb	r2, [r3, #0]
 801b582:	4b15      	ldr	r3, [pc, #84]	; (801b5d8 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801b584:	0092      	lsls	r2, r2, #2
 801b586:	5cd3      	ldrb	r3, [r2, r3]
 801b588:	071b      	lsls	r3, r3, #28
 801b58a:	0fdb      	lsrs	r3, r3, #31
 801b58c:	b2db      	uxtb	r3, r3
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d014      	beq.n	801b5bc <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801b592:	1dfb      	adds	r3, r7, #7
 801b594:	781a      	ldrb	r2, [r3, #0]
 801b596:	4b0f      	ldr	r3, [pc, #60]	; (801b5d4 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801b598:	2174      	movs	r1, #116	; 0x74
 801b59a:	434a      	muls	r2, r1
 801b59c:	5cd3      	ldrb	r3, [r2, r3]
 801b59e:	071b      	lsls	r3, r3, #28
 801b5a0:	0fdb      	lsrs	r3, r3, #31
 801b5a2:	b2db      	uxtb	r3, r3
 801b5a4:	2b01      	cmp	r3, #1
 801b5a6:	d10d      	bne.n	801b5c4 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801b5a8:	1dfb      	adds	r3, r7, #7
 801b5aa:	781a      	ldrb	r2, [r3, #0]
 801b5ac:	4b0a      	ldr	r3, [pc, #40]	; (801b5d8 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801b5ae:	0092      	lsls	r2, r2, #2
 801b5b0:	5cd3      	ldrb	r3, [r2, r3]
 801b5b2:	071b      	lsls	r3, r3, #28
 801b5b4:	0fdb      	lsrs	r3, r3, #31
 801b5b6:	b2db      	uxtb	r3, r3
 801b5b8:	2b01      	cmp	r3, #1
 801b5ba:	d103      	bne.n	801b5c4 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801b5bc:	230f      	movs	r3, #15
 801b5be:	18fb      	adds	r3, r7, r3
 801b5c0:	220a      	movs	r2, #10
 801b5c2:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801b5c4:	230f      	movs	r3, #15
 801b5c6:	18fb      	adds	r3, r7, r3
 801b5c8:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801b5ca:	0018      	movs	r0, r3
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	b004      	add	sp, #16
 801b5d0:	bd80      	pop	{r7, pc}
 801b5d2:	46c0      	nop			; (mov r8, r8)
 801b5d4:	2000010c 	.word	0x2000010c
 801b5d8:	20002f34 	.word	0x20002f34

0801b5dc <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b082      	sub	sp, #8
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	0002      	movs	r2, r0
 801b5e4:	1dfb      	adds	r3, r7, #7
 801b5e6:	701a      	strb	r2, [r3, #0]
 801b5e8:	1dbb      	adds	r3, r7, #6
 801b5ea:	1c0a      	adds	r2, r1, #0
 801b5ec:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801b5ee:	1dbb      	adds	r3, r7, #6
 801b5f0:	781a      	ldrb	r2, [r3, #0]
 801b5f2:	1dfb      	adds	r3, r7, #7
 801b5f4:	781b      	ldrb	r3, [r3, #0]
 801b5f6:	0011      	movs	r1, r2
 801b5f8:	0018      	movs	r0, r3
 801b5fa:	f7ff fc99 	bl	801af30 <USBPD_PWR_IF_SupplyReady>
 801b5fe:	0003      	movs	r3, r0
 801b600:	425a      	negs	r2, r3
 801b602:	4153      	adcs	r3, r2
 801b604:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801b606:	0018      	movs	r0, r3
 801b608:	46bd      	mov	sp, r7
 801b60a:	b002      	add	sp, #8
 801b60c:	bd80      	pop	{r7, pc}
	...

0801b610 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 801b610:	b5b0      	push	{r4, r5, r7, lr}
 801b612:	b092      	sub	sp, #72	; 0x48
 801b614:	af02      	add	r7, sp, #8
 801b616:	0002      	movs	r2, r0
 801b618:	1dfb      	adds	r3, r7, #7
 801b61a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 801b61c:	253f      	movs	r5, #63	; 0x3f
 801b61e:	197c      	adds	r4, r7, r5
 801b620:	1dfb      	adds	r3, r7, #7
 801b622:	781b      	ldrb	r3, [r3, #0]
 801b624:	0018      	movs	r0, r3
 801b626:	f7e4 ff47 	bl	80004b8 <USBPD_PE_Request_HardReset>
 801b62a:	0003      	movs	r3, r0
 801b62c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 801b62e:	197b      	adds	r3, r7, r5
 801b630:	781b      	ldrb	r3, [r3, #0]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d027      	beq.n	801b686 <USBPD_DPM_RequestHardReset+0x76>
 801b636:	4a17      	ldr	r2, [pc, #92]	; (801b694 <USBPD_DPM_RequestHardReset+0x84>)
 801b638:	240c      	movs	r4, #12
 801b63a:	193b      	adds	r3, r7, r4
 801b63c:	2132      	movs	r1, #50	; 0x32
 801b63e:	0018      	movs	r0, r3
 801b640:	f007 ff94 	bl	802356c <sniprintf>
 801b644:	0002      	movs	r2, r0
 801b646:	213e      	movs	r1, #62	; 0x3e
 801b648:	187b      	adds	r3, r7, r1
 801b64a:	701a      	strb	r2, [r3, #0]
 801b64c:	187b      	adds	r3, r7, r1
 801b64e:	781b      	ldrb	r3, [r3, #0]
 801b650:	2b31      	cmp	r3, #49	; 0x31
 801b652:	d80d      	bhi.n	801b670 <USBPD_DPM_RequestHardReset+0x60>
 801b654:	193b      	adds	r3, r7, r4
 801b656:	0018      	movs	r0, r3
 801b658:	f7ea fdb8 	bl	80061cc <strlen>
 801b65c:	193a      	adds	r2, r7, r4
 801b65e:	1dfb      	adds	r3, r7, #7
 801b660:	7819      	ldrb	r1, [r3, #0]
 801b662:	9000      	str	r0, [sp, #0]
 801b664:	0013      	movs	r3, r2
 801b666:	2200      	movs	r2, #0
 801b668:	2006      	movs	r0, #6
 801b66a:	f7f7 f9a7 	bl	80129bc <USBPD_TRACE_Add>
 801b66e:	e00a      	b.n	801b686 <USBPD_DPM_RequestHardReset+0x76>
 801b670:	230c      	movs	r3, #12
 801b672:	18fa      	adds	r2, r7, r3
 801b674:	1dfb      	adds	r3, r7, #7
 801b676:	7819      	ldrb	r1, [r3, #0]
 801b678:	2332      	movs	r3, #50	; 0x32
 801b67a:	9300      	str	r3, [sp, #0]
 801b67c:	0013      	movs	r3, r2
 801b67e:	2200      	movs	r2, #0
 801b680:	2006      	movs	r0, #6
 801b682:	f7f7 f99b 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801b686:	233f      	movs	r3, #63	; 0x3f
 801b688:	18fb      	adds	r3, r7, r3
 801b68a:	781b      	ldrb	r3, [r3, #0]
}
 801b68c:	0018      	movs	r0, r3
 801b68e:	46bd      	mov	sp, r7
 801b690:	b010      	add	sp, #64	; 0x40
 801b692:	bdb0      	pop	{r4, r5, r7, pc}
 801b694:	08024190 	.word	0x08024190

0801b698 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801b698:	b5b0      	push	{r4, r5, r7, lr}
 801b69a:	b092      	sub	sp, #72	; 0x48
 801b69c:	af02      	add	r7, sp, #8
 801b69e:	0002      	movs	r2, r0
 801b6a0:	1dfb      	adds	r3, r7, #7
 801b6a2:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 801b6a4:	253f      	movs	r5, #63	; 0x3f
 801b6a6:	197c      	adds	r4, r7, r5
 801b6a8:	1dfb      	adds	r3, r7, #7
 801b6aa:	781b      	ldrb	r3, [r3, #0]
 801b6ac:	0018      	movs	r0, r3
 801b6ae:	f7e4 ff0f 	bl	80004d0 <USBPD_PE_Request_CableReset>
 801b6b2:	0003      	movs	r3, r0
 801b6b4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801b6b6:	197b      	adds	r3, r7, r5
 801b6b8:	781b      	ldrb	r3, [r3, #0]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d027      	beq.n	801b70e <USBPD_DPM_RequestCableReset+0x76>
 801b6be:	4a17      	ldr	r2, [pc, #92]	; (801b71c <USBPD_DPM_RequestCableReset+0x84>)
 801b6c0:	240c      	movs	r4, #12
 801b6c2:	193b      	adds	r3, r7, r4
 801b6c4:	2132      	movs	r1, #50	; 0x32
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	f007 ff50 	bl	802356c <sniprintf>
 801b6cc:	0002      	movs	r2, r0
 801b6ce:	213e      	movs	r1, #62	; 0x3e
 801b6d0:	187b      	adds	r3, r7, r1
 801b6d2:	701a      	strb	r2, [r3, #0]
 801b6d4:	187b      	adds	r3, r7, r1
 801b6d6:	781b      	ldrb	r3, [r3, #0]
 801b6d8:	2b31      	cmp	r3, #49	; 0x31
 801b6da:	d80d      	bhi.n	801b6f8 <USBPD_DPM_RequestCableReset+0x60>
 801b6dc:	193b      	adds	r3, r7, r4
 801b6de:	0018      	movs	r0, r3
 801b6e0:	f7ea fd74 	bl	80061cc <strlen>
 801b6e4:	193a      	adds	r2, r7, r4
 801b6e6:	1dfb      	adds	r3, r7, #7
 801b6e8:	7819      	ldrb	r1, [r3, #0]
 801b6ea:	9000      	str	r0, [sp, #0]
 801b6ec:	0013      	movs	r3, r2
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	2006      	movs	r0, #6
 801b6f2:	f7f7 f963 	bl	80129bc <USBPD_TRACE_Add>
 801b6f6:	e00a      	b.n	801b70e <USBPD_DPM_RequestCableReset+0x76>
 801b6f8:	230c      	movs	r3, #12
 801b6fa:	18fa      	adds	r2, r7, r3
 801b6fc:	1dfb      	adds	r3, r7, #7
 801b6fe:	7819      	ldrb	r1, [r3, #0]
 801b700:	2332      	movs	r3, #50	; 0x32
 801b702:	9300      	str	r3, [sp, #0]
 801b704:	0013      	movs	r3, r2
 801b706:	2200      	movs	r2, #0
 801b708:	2006      	movs	r0, #6
 801b70a:	f7f7 f957 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801b70e:	233f      	movs	r3, #63	; 0x3f
 801b710:	18fb      	adds	r3, r7, r3
 801b712:	781b      	ldrb	r3, [r3, #0]
}
 801b714:	0018      	movs	r0, r3
 801b716:	46bd      	mov	sp, r7
 801b718:	b010      	add	sp, #64	; 0x40
 801b71a:	bdb0      	pop	{r4, r5, r7, pc}
 801b71c:	080241b8 	.word	0x080241b8

0801b720 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 801b720:	b5b0      	push	{r4, r5, r7, lr}
 801b722:	b092      	sub	sp, #72	; 0x48
 801b724:	af02      	add	r7, sp, #8
 801b726:	0002      	movs	r2, r0
 801b728:	1dfb      	adds	r3, r7, #7
 801b72a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 801b72c:	253f      	movs	r5, #63	; 0x3f
 801b72e:	197c      	adds	r4, r7, r5
 801b730:	1dfb      	adds	r3, r7, #7
 801b732:	781b      	ldrb	r3, [r3, #0]
 801b734:	2200      	movs	r2, #0
 801b736:	2102      	movs	r1, #2
 801b738:	0018      	movs	r0, r3
 801b73a:	f7e4 fee3 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b73e:	0003      	movs	r3, r0
 801b740:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 801b742:	197b      	adds	r3, r7, r5
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	2b00      	cmp	r3, #0
 801b748:	d027      	beq.n	801b79a <USBPD_DPM_RequestGotoMin+0x7a>
 801b74a:	4a17      	ldr	r2, [pc, #92]	; (801b7a8 <USBPD_DPM_RequestGotoMin+0x88>)
 801b74c:	240c      	movs	r4, #12
 801b74e:	193b      	adds	r3, r7, r4
 801b750:	2132      	movs	r1, #50	; 0x32
 801b752:	0018      	movs	r0, r3
 801b754:	f007 ff0a 	bl	802356c <sniprintf>
 801b758:	0002      	movs	r2, r0
 801b75a:	213e      	movs	r1, #62	; 0x3e
 801b75c:	187b      	adds	r3, r7, r1
 801b75e:	701a      	strb	r2, [r3, #0]
 801b760:	187b      	adds	r3, r7, r1
 801b762:	781b      	ldrb	r3, [r3, #0]
 801b764:	2b31      	cmp	r3, #49	; 0x31
 801b766:	d80d      	bhi.n	801b784 <USBPD_DPM_RequestGotoMin+0x64>
 801b768:	193b      	adds	r3, r7, r4
 801b76a:	0018      	movs	r0, r3
 801b76c:	f7ea fd2e 	bl	80061cc <strlen>
 801b770:	193a      	adds	r2, r7, r4
 801b772:	1dfb      	adds	r3, r7, #7
 801b774:	7819      	ldrb	r1, [r3, #0]
 801b776:	9000      	str	r0, [sp, #0]
 801b778:	0013      	movs	r3, r2
 801b77a:	2200      	movs	r2, #0
 801b77c:	2006      	movs	r0, #6
 801b77e:	f7f7 f91d 	bl	80129bc <USBPD_TRACE_Add>
 801b782:	e00a      	b.n	801b79a <USBPD_DPM_RequestGotoMin+0x7a>
 801b784:	230c      	movs	r3, #12
 801b786:	18fa      	adds	r2, r7, r3
 801b788:	1dfb      	adds	r3, r7, #7
 801b78a:	7819      	ldrb	r1, [r3, #0]
 801b78c:	2332      	movs	r3, #50	; 0x32
 801b78e:	9300      	str	r3, [sp, #0]
 801b790:	0013      	movs	r3, r2
 801b792:	2200      	movs	r2, #0
 801b794:	2006      	movs	r0, #6
 801b796:	f7f7 f911 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801b79a:	233f      	movs	r3, #63	; 0x3f
 801b79c:	18fb      	adds	r3, r7, r3
 801b79e:	781b      	ldrb	r3, [r3, #0]
}
 801b7a0:	0018      	movs	r0, r3
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	b010      	add	sp, #64	; 0x40
 801b7a6:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a8:	080241e0 	.word	0x080241e0

0801b7ac <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 801b7ac:	b5b0      	push	{r4, r5, r7, lr}
 801b7ae:	b092      	sub	sp, #72	; 0x48
 801b7b0:	af02      	add	r7, sp, #8
 801b7b2:	0002      	movs	r2, r0
 801b7b4:	1dfb      	adds	r3, r7, #7
 801b7b6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801b7b8:	253f      	movs	r5, #63	; 0x3f
 801b7ba:	197c      	adds	r4, r7, r5
 801b7bc:	1dfb      	adds	r3, r7, #7
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	2105      	movs	r1, #5
 801b7c4:	0018      	movs	r0, r3
 801b7c6:	f7e4 fe9d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b7ca:	0003      	movs	r3, r0
 801b7cc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 801b7ce:	197b      	adds	r3, r7, r5
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d027      	beq.n	801b826 <USBPD_DPM_RequestPing+0x7a>
 801b7d6:	4a17      	ldr	r2, [pc, #92]	; (801b834 <USBPD_DPM_RequestPing+0x88>)
 801b7d8:	240c      	movs	r4, #12
 801b7da:	193b      	adds	r3, r7, r4
 801b7dc:	2132      	movs	r1, #50	; 0x32
 801b7de:	0018      	movs	r0, r3
 801b7e0:	f007 fec4 	bl	802356c <sniprintf>
 801b7e4:	0002      	movs	r2, r0
 801b7e6:	213e      	movs	r1, #62	; 0x3e
 801b7e8:	187b      	adds	r3, r7, r1
 801b7ea:	701a      	strb	r2, [r3, #0]
 801b7ec:	187b      	adds	r3, r7, r1
 801b7ee:	781b      	ldrb	r3, [r3, #0]
 801b7f0:	2b31      	cmp	r3, #49	; 0x31
 801b7f2:	d80d      	bhi.n	801b810 <USBPD_DPM_RequestPing+0x64>
 801b7f4:	193b      	adds	r3, r7, r4
 801b7f6:	0018      	movs	r0, r3
 801b7f8:	f7ea fce8 	bl	80061cc <strlen>
 801b7fc:	193a      	adds	r2, r7, r4
 801b7fe:	1dfb      	adds	r3, r7, #7
 801b800:	7819      	ldrb	r1, [r3, #0]
 801b802:	9000      	str	r0, [sp, #0]
 801b804:	0013      	movs	r3, r2
 801b806:	2200      	movs	r2, #0
 801b808:	2006      	movs	r0, #6
 801b80a:	f7f7 f8d7 	bl	80129bc <USBPD_TRACE_Add>
 801b80e:	e00a      	b.n	801b826 <USBPD_DPM_RequestPing+0x7a>
 801b810:	230c      	movs	r3, #12
 801b812:	18fa      	adds	r2, r7, r3
 801b814:	1dfb      	adds	r3, r7, #7
 801b816:	7819      	ldrb	r1, [r3, #0]
 801b818:	2332      	movs	r3, #50	; 0x32
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	0013      	movs	r3, r2
 801b81e:	2200      	movs	r2, #0
 801b820:	2006      	movs	r0, #6
 801b822:	f7f7 f8cb 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801b826:	233f      	movs	r3, #63	; 0x3f
 801b828:	18fb      	adds	r3, r7, r3
 801b82a:	781b      	ldrb	r3, [r3, #0]
}
 801b82c:	0018      	movs	r0, r3
 801b82e:	46bd      	mov	sp, r7
 801b830:	b010      	add	sp, #64	; 0x40
 801b832:	bdb0      	pop	{r4, r5, r7, pc}
 801b834:	08024204 	.word	0x08024204

0801b838 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 801b838:	b5b0      	push	{r4, r5, r7, lr}
 801b83a:	b09e      	sub	sp, #120	; 0x78
 801b83c:	af02      	add	r7, sp, #8
 801b83e:	0004      	movs	r4, r0
 801b840:	0008      	movs	r0, r1
 801b842:	0011      	movs	r1, r2
 801b844:	1dfb      	adds	r3, r7, #7
 801b846:	1c22      	adds	r2, r4, #0
 801b848:	701a      	strb	r2, [r3, #0]
 801b84a:	1dbb      	adds	r3, r7, #6
 801b84c:	1c02      	adds	r2, r0, #0
 801b84e:	701a      	strb	r2, [r3, #0]
 801b850:	1d3b      	adds	r3, r7, #4
 801b852:	1c0a      	adds	r2, r1, #0
 801b854:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801b856:	256f      	movs	r5, #111	; 0x6f
 801b858:	197b      	adds	r3, r7, r5
 801b85a:	2202      	movs	r2, #2
 801b85c:	701a      	strb	r2, [r3, #0]
  //source: https://community.st.com/t5/stm32-mcus-other-solutions/message-rejected-for-this-port-configuration-on-the-stm32-x-cube/td-p/86358
    uint32_t voltage, allowablepower;
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_PDO_TypeDef  pdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801b85e:	1dfb      	adds	r3, r7, #7
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	2274      	movs	r2, #116	; 0x74
 801b864:	435a      	muls	r2, r3
 801b866:	4b52      	ldr	r3, [pc, #328]	; (801b9b0 <USBPD_DPM_RequestMessageRequest+0x178>)
 801b868:	18d3      	adds	r3, r2, r3
 801b86a:	66bb      	str	r3, [r7, #104]	; 0x68
	USBPD_DPM_SNKPowerRequestDetailsTypeDef request_details;
	rdo.d32 = 0;
 801b86c:	2300      	movs	r3, #0
 801b86e:	65bb      	str	r3, [r7, #88]	; 0x58

	/* selected SRC PDO */
	pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 801b870:	1dfb      	adds	r3, r7, #7
 801b872:	781a      	ldrb	r2, [r3, #0]
 801b874:	1dbb      	adds	r3, r7, #6
 801b876:	781b      	ldrb	r3, [r3, #0]
 801b878:	1e58      	subs	r0, r3, #1
 801b87a:	494e      	ldr	r1, [pc, #312]	; (801b9b4 <USBPD_DPM_RequestMessageRequest+0x17c>)
 801b87c:	0013      	movs	r3, r2
 801b87e:	009b      	lsls	r3, r3, #2
 801b880:	189b      	adds	r3, r3, r2
 801b882:	009b      	lsls	r3, r3, #2
 801b884:	181b      	adds	r3, r3, r0
 801b886:	009b      	lsls	r3, r3, #2
 801b888:	585b      	ldr	r3, [r3, r1]
 801b88a:	657b      	str	r3, [r7, #84]	; 0x54
	voltage = RequestedVoltage;
 801b88c:	1d3b      	adds	r3, r7, #4
 801b88e:	881b      	ldrh	r3, [r3, #0]
 801b890:	663b      	str	r3, [r7, #96]	; 0x60
	allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000U;
 801b892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b894:	685b      	ldr	r3, [r3, #4]
 801b896:	1d3a      	adds	r2, r7, #4
 801b898:	8812      	ldrh	r2, [r2, #0]
 801b89a:	4353      	muls	r3, r2
 801b89c:	22fa      	movs	r2, #250	; 0xfa
 801b89e:	0091      	lsls	r1, r2, #2
 801b8a0:	0018      	movs	r0, r3
 801b8a2:	f7ea fca5 	bl	80061f0 <__udivsi3>
 801b8a6:	0003      	movs	r3, r0
 801b8a8:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801b8aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b8ac:	235c      	movs	r3, #92	; 0x5c
 801b8ae:	18fc      	adds	r4, r7, r3
 801b8b0:	2360      	movs	r3, #96	; 0x60
 801b8b2:	18fa      	adds	r2, r7, r3
 801b8b4:	1dfb      	adds	r3, r7, #7
 801b8b6:	7818      	ldrb	r0, [r3, #0]
 801b8b8:	0023      	movs	r3, r4
 801b8ba:	f001 f8a3 	bl	801ca04 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801b8be:	0003      	movs	r3, r0
 801b8c0:	2b01      	cmp	r3, #1
 801b8c2:	d141      	bne.n	801b948 <USBPD_DPM_RequestMessageRequest+0x110>
	{
	  /* Check that voltage has been correctly selected */
	  if (RequestedVoltage == voltage)
 801b8c4:	1d3b      	adds	r3, r7, #4
 801b8c6:	881a      	ldrh	r2, [r3, #0]
 801b8c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d13c      	bne.n	801b948 <USBPD_DPM_RequestMessageRequest+0x110>
	  {
		request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 801b8ce:	1d3b      	adds	r3, r7, #4
 801b8d0:	881a      	ldrh	r2, [r3, #0]
 801b8d2:	243c      	movs	r4, #60	; 0x3c
 801b8d4:	193b      	adds	r3, r7, r4
 801b8d6:	601a      	str	r2, [r3, #0]
		request_details.OperatingCurrentInmAunits    = (1000U * allowablepower)/RequestedVoltage;
 801b8d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801b8da:	0013      	movs	r3, r2
 801b8dc:	015b      	lsls	r3, r3, #5
 801b8de:	1a9b      	subs	r3, r3, r2
 801b8e0:	009b      	lsls	r3, r3, #2
 801b8e2:	189b      	adds	r3, r3, r2
 801b8e4:	00db      	lsls	r3, r3, #3
 801b8e6:	001a      	movs	r2, r3
 801b8e8:	1d3b      	adds	r3, r7, #4
 801b8ea:	881b      	ldrh	r3, [r3, #0]
 801b8ec:	0019      	movs	r1, r3
 801b8ee:	0010      	movs	r0, r2
 801b8f0:	f7ea fc7e 	bl	80061f0 <__udivsi3>
 801b8f4:	0003      	movs	r3, r0
 801b8f6:	001a      	movs	r2, r3
 801b8f8:	0020      	movs	r0, r4
 801b8fa:	183b      	adds	r3, r7, r0
 801b8fc:	609a      	str	r2, [r3, #8]
		request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801b8fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b900:	685a      	ldr	r2, [r3, #4]
 801b902:	183b      	adds	r3, r7, r0
 801b904:	605a      	str	r2, [r3, #4]
		request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801b906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b908:	699a      	ldr	r2, [r3, #24]
 801b90a:	183b      	adds	r3, r7, r0
 801b90c:	60da      	str	r2, [r3, #12]
		request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 801b90e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b910:	695a      	ldr	r2, [r3, #20]
 801b912:	183b      	adds	r3, r7, r0
 801b914:	611a      	str	r2, [r3, #16]

		USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 801b916:	1dbb      	adds	r3, r7, #6
 801b918:	781b      	ldrb	r3, [r3, #0]
 801b91a:	3b01      	subs	r3, #1
 801b91c:	b2d9      	uxtb	r1, r3
 801b91e:	2358      	movs	r3, #88	; 0x58
 801b920:	18fc      	adds	r4, r7, r3
 801b922:	183a      	adds	r2, r7, r0
 801b924:	1dfb      	adds	r3, r7, #7
 801b926:	7818      	ldrb	r0, [r3, #0]
 801b928:	2350      	movs	r3, #80	; 0x50
 801b92a:	18fb      	adds	r3, r7, r3
 801b92c:	9300      	str	r3, [sp, #0]
 801b92e:	0023      	movs	r3, r4
 801b930:	f001 fafc 	bl	801cf2c <USER_SERV_SNK_BuildRDOfromSelectedPDO>

		_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801b934:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801b936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801b938:	197c      	adds	r4, r7, r5
 801b93a:	1dfb      	adds	r3, r7, #7
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	0018      	movs	r0, r3
 801b940:	f7e4 fee2 	bl	8000708 <USBPD_PE_Send_Request>
 801b944:	0003      	movs	r3, r0
 801b946:	7023      	strb	r3, [r4, #0]
	  }
	}

/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801b948:	236f      	movs	r3, #111	; 0x6f
 801b94a:	18fb      	adds	r3, r7, r3
 801b94c:	781b      	ldrb	r3, [r3, #0]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d027      	beq.n	801b9a2 <USBPD_DPM_RequestMessageRequest+0x16a>
 801b952:	4a19      	ldr	r2, [pc, #100]	; (801b9b8 <USBPD_DPM_RequestMessageRequest+0x180>)
 801b954:	2408      	movs	r4, #8
 801b956:	193b      	adds	r3, r7, r4
 801b958:	2132      	movs	r1, #50	; 0x32
 801b95a:	0018      	movs	r0, r3
 801b95c:	f007 fe06 	bl	802356c <sniprintf>
 801b960:	0002      	movs	r2, r0
 801b962:	2167      	movs	r1, #103	; 0x67
 801b964:	187b      	adds	r3, r7, r1
 801b966:	701a      	strb	r2, [r3, #0]
 801b968:	187b      	adds	r3, r7, r1
 801b96a:	781b      	ldrb	r3, [r3, #0]
 801b96c:	2b31      	cmp	r3, #49	; 0x31
 801b96e:	d80d      	bhi.n	801b98c <USBPD_DPM_RequestMessageRequest+0x154>
 801b970:	193b      	adds	r3, r7, r4
 801b972:	0018      	movs	r0, r3
 801b974:	f7ea fc2a 	bl	80061cc <strlen>
 801b978:	193a      	adds	r2, r7, r4
 801b97a:	1dfb      	adds	r3, r7, #7
 801b97c:	7819      	ldrb	r1, [r3, #0]
 801b97e:	9000      	str	r0, [sp, #0]
 801b980:	0013      	movs	r3, r2
 801b982:	2200      	movs	r2, #0
 801b984:	2006      	movs	r0, #6
 801b986:	f7f7 f819 	bl	80129bc <USBPD_TRACE_Add>
 801b98a:	e00a      	b.n	801b9a2 <USBPD_DPM_RequestMessageRequest+0x16a>
 801b98c:	2308      	movs	r3, #8
 801b98e:	18fa      	adds	r2, r7, r3
 801b990:	1dfb      	adds	r3, r7, #7
 801b992:	7819      	ldrb	r1, [r3, #0]
 801b994:	2332      	movs	r3, #50	; 0x32
 801b996:	9300      	str	r3, [sp, #0]
 801b998:	0013      	movs	r3, r2
 801b99a:	2200      	movs	r2, #0
 801b99c:	2006      	movs	r0, #6
 801b99e:	f7f7 f80d 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801b9a2:	236f      	movs	r3, #111	; 0x6f
 801b9a4:	18fb      	adds	r3, r7, r3
 801b9a6:	781b      	ldrb	r3, [r3, #0]
}
 801b9a8:	0018      	movs	r0, r3
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	b01c      	add	sp, #112	; 0x70
 801b9ae:	bdb0      	pop	{r4, r5, r7, pc}
 801b9b0:	2000010c 	.word	0x2000010c
 801b9b4:	20002f48 	.word	0x20002f48
 801b9b8:	08024224 	.word	0x08024224

0801b9bc <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 801b9bc:	b5b0      	push	{r4, r5, r7, lr}
 801b9be:	b092      	sub	sp, #72	; 0x48
 801b9c0:	af02      	add	r7, sp, #8
 801b9c2:	0002      	movs	r2, r0
 801b9c4:	1dfb      	adds	r3, r7, #7
 801b9c6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 801b9c8:	253f      	movs	r5, #63	; 0x3f
 801b9ca:	197c      	adds	r4, r7, r5
 801b9cc:	1dfb      	adds	r3, r7, #7
 801b9ce:	781b      	ldrb	r3, [r3, #0]
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	2107      	movs	r1, #7
 801b9d4:	0018      	movs	r0, r3
 801b9d6:	f7e4 fd95 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801b9da:	0003      	movs	r3, r0
 801b9dc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 801b9de:	197b      	adds	r3, r7, r5
 801b9e0:	781b      	ldrb	r3, [r3, #0]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d027      	beq.n	801ba36 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801b9e6:	4a17      	ldr	r2, [pc, #92]	; (801ba44 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 801b9e8:	240c      	movs	r4, #12
 801b9ea:	193b      	adds	r3, r7, r4
 801b9ec:	2132      	movs	r1, #50	; 0x32
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	f007 fdbc 	bl	802356c <sniprintf>
 801b9f4:	0002      	movs	r2, r0
 801b9f6:	213e      	movs	r1, #62	; 0x3e
 801b9f8:	187b      	adds	r3, r7, r1
 801b9fa:	701a      	strb	r2, [r3, #0]
 801b9fc:	187b      	adds	r3, r7, r1
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	2b31      	cmp	r3, #49	; 0x31
 801ba02:	d80d      	bhi.n	801ba20 <USBPD_DPM_RequestGetSourceCapability+0x64>
 801ba04:	193b      	adds	r3, r7, r4
 801ba06:	0018      	movs	r0, r3
 801ba08:	f7ea fbe0 	bl	80061cc <strlen>
 801ba0c:	193a      	adds	r2, r7, r4
 801ba0e:	1dfb      	adds	r3, r7, #7
 801ba10:	7819      	ldrb	r1, [r3, #0]
 801ba12:	9000      	str	r0, [sp, #0]
 801ba14:	0013      	movs	r3, r2
 801ba16:	2200      	movs	r2, #0
 801ba18:	2006      	movs	r0, #6
 801ba1a:	f7f6 ffcf 	bl	80129bc <USBPD_TRACE_Add>
 801ba1e:	e00a      	b.n	801ba36 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801ba20:	230c      	movs	r3, #12
 801ba22:	18fa      	adds	r2, r7, r3
 801ba24:	1dfb      	adds	r3, r7, #7
 801ba26:	7819      	ldrb	r1, [r3, #0]
 801ba28:	2332      	movs	r3, #50	; 0x32
 801ba2a:	9300      	str	r3, [sp, #0]
 801ba2c:	0013      	movs	r3, r2
 801ba2e:	2200      	movs	r2, #0
 801ba30:	2006      	movs	r0, #6
 801ba32:	f7f6 ffc3 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801ba36:	233f      	movs	r3, #63	; 0x3f
 801ba38:	18fb      	adds	r3, r7, r3
 801ba3a:	781b      	ldrb	r3, [r3, #0]
}
 801ba3c:	0018      	movs	r0, r3
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	b010      	add	sp, #64	; 0x40
 801ba42:	bdb0      	pop	{r4, r5, r7, pc}
 801ba44:	08024248 	.word	0x08024248

0801ba48 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 801ba48:	b5b0      	push	{r4, r5, r7, lr}
 801ba4a:	b092      	sub	sp, #72	; 0x48
 801ba4c:	af02      	add	r7, sp, #8
 801ba4e:	0002      	movs	r2, r0
 801ba50:	1dfb      	adds	r3, r7, #7
 801ba52:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801ba54:	253f      	movs	r5, #63	; 0x3f
 801ba56:	197c      	adds	r4, r7, r5
 801ba58:	1dfb      	adds	r3, r7, #7
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	2200      	movs	r2, #0
 801ba5e:	2108      	movs	r1, #8
 801ba60:	0018      	movs	r0, r3
 801ba62:	f7e4 fd4f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ba66:	0003      	movs	r3, r0
 801ba68:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 801ba6a:	197b      	adds	r3, r7, r5
 801ba6c:	781b      	ldrb	r3, [r3, #0]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d027      	beq.n	801bac2 <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801ba72:	4a17      	ldr	r2, [pc, #92]	; (801bad0 <USBPD_DPM_RequestGetSinkCapability+0x88>)
 801ba74:	240c      	movs	r4, #12
 801ba76:	193b      	adds	r3, r7, r4
 801ba78:	2132      	movs	r1, #50	; 0x32
 801ba7a:	0018      	movs	r0, r3
 801ba7c:	f007 fd76 	bl	802356c <sniprintf>
 801ba80:	0002      	movs	r2, r0
 801ba82:	213e      	movs	r1, #62	; 0x3e
 801ba84:	187b      	adds	r3, r7, r1
 801ba86:	701a      	strb	r2, [r3, #0]
 801ba88:	187b      	adds	r3, r7, r1
 801ba8a:	781b      	ldrb	r3, [r3, #0]
 801ba8c:	2b31      	cmp	r3, #49	; 0x31
 801ba8e:	d80d      	bhi.n	801baac <USBPD_DPM_RequestGetSinkCapability+0x64>
 801ba90:	193b      	adds	r3, r7, r4
 801ba92:	0018      	movs	r0, r3
 801ba94:	f7ea fb9a 	bl	80061cc <strlen>
 801ba98:	193a      	adds	r2, r7, r4
 801ba9a:	1dfb      	adds	r3, r7, #7
 801ba9c:	7819      	ldrb	r1, [r3, #0]
 801ba9e:	9000      	str	r0, [sp, #0]
 801baa0:	0013      	movs	r3, r2
 801baa2:	2200      	movs	r2, #0
 801baa4:	2006      	movs	r0, #6
 801baa6:	f7f6 ff89 	bl	80129bc <USBPD_TRACE_Add>
 801baaa:	e00a      	b.n	801bac2 <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801baac:	230c      	movs	r3, #12
 801baae:	18fa      	adds	r2, r7, r3
 801bab0:	1dfb      	adds	r3, r7, #7
 801bab2:	7819      	ldrb	r1, [r3, #0]
 801bab4:	2332      	movs	r3, #50	; 0x32
 801bab6:	9300      	str	r3, [sp, #0]
 801bab8:	0013      	movs	r3, r2
 801baba:	2200      	movs	r2, #0
 801babc:	2006      	movs	r0, #6
 801babe:	f7f6 ff7d 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bac2:	233f      	movs	r3, #63	; 0x3f
 801bac4:	18fb      	adds	r3, r7, r3
 801bac6:	781b      	ldrb	r3, [r3, #0]
}
 801bac8:	0018      	movs	r0, r3
 801baca:	46bd      	mov	sp, r7
 801bacc:	b010      	add	sp, #64	; 0x40
 801bace:	bdb0      	pop	{r4, r5, r7, pc}
 801bad0:	08024270 	.word	0x08024270

0801bad4 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 801bad4:	b5b0      	push	{r4, r5, r7, lr}
 801bad6:	b092      	sub	sp, #72	; 0x48
 801bad8:	af02      	add	r7, sp, #8
 801bada:	0002      	movs	r2, r0
 801badc:	1dfb      	adds	r3, r7, #7
 801bade:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 801bae0:	253f      	movs	r5, #63	; 0x3f
 801bae2:	197c      	adds	r4, r7, r5
 801bae4:	1dfb      	adds	r3, r7, #7
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	2200      	movs	r2, #0
 801baea:	2109      	movs	r1, #9
 801baec:	0018      	movs	r0, r3
 801baee:	f7e4 fd09 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801baf2:	0003      	movs	r3, r0
 801baf4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 801baf6:	197b      	adds	r3, r7, r5
 801baf8:	781b      	ldrb	r3, [r3, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d027      	beq.n	801bb4e <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801bafe:	4a17      	ldr	r2, [pc, #92]	; (801bb5c <USBPD_DPM_RequestDataRoleSwap+0x88>)
 801bb00:	240c      	movs	r4, #12
 801bb02:	193b      	adds	r3, r7, r4
 801bb04:	2132      	movs	r1, #50	; 0x32
 801bb06:	0018      	movs	r0, r3
 801bb08:	f007 fd30 	bl	802356c <sniprintf>
 801bb0c:	0002      	movs	r2, r0
 801bb0e:	213e      	movs	r1, #62	; 0x3e
 801bb10:	187b      	adds	r3, r7, r1
 801bb12:	701a      	strb	r2, [r3, #0]
 801bb14:	187b      	adds	r3, r7, r1
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	2b31      	cmp	r3, #49	; 0x31
 801bb1a:	d80d      	bhi.n	801bb38 <USBPD_DPM_RequestDataRoleSwap+0x64>
 801bb1c:	193b      	adds	r3, r7, r4
 801bb1e:	0018      	movs	r0, r3
 801bb20:	f7ea fb54 	bl	80061cc <strlen>
 801bb24:	193a      	adds	r2, r7, r4
 801bb26:	1dfb      	adds	r3, r7, #7
 801bb28:	7819      	ldrb	r1, [r3, #0]
 801bb2a:	9000      	str	r0, [sp, #0]
 801bb2c:	0013      	movs	r3, r2
 801bb2e:	2200      	movs	r2, #0
 801bb30:	2006      	movs	r0, #6
 801bb32:	f7f6 ff43 	bl	80129bc <USBPD_TRACE_Add>
 801bb36:	e00a      	b.n	801bb4e <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801bb38:	230c      	movs	r3, #12
 801bb3a:	18fa      	adds	r2, r7, r3
 801bb3c:	1dfb      	adds	r3, r7, #7
 801bb3e:	7819      	ldrb	r1, [r3, #0]
 801bb40:	2332      	movs	r3, #50	; 0x32
 801bb42:	9300      	str	r3, [sp, #0]
 801bb44:	0013      	movs	r3, r2
 801bb46:	2200      	movs	r2, #0
 801bb48:	2006      	movs	r0, #6
 801bb4a:	f7f6 ff37 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bb4e:	233f      	movs	r3, #63	; 0x3f
 801bb50:	18fb      	adds	r3, r7, r3
 801bb52:	781b      	ldrb	r3, [r3, #0]
}
 801bb54:	0018      	movs	r0, r3
 801bb56:	46bd      	mov	sp, r7
 801bb58:	b010      	add	sp, #64	; 0x40
 801bb5a:	bdb0      	pop	{r4, r5, r7, pc}
 801bb5c:	08024298 	.word	0x08024298

0801bb60 <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 801bb60:	b590      	push	{r4, r7, lr}
 801bb62:	b093      	sub	sp, #76	; 0x4c
 801bb64:	af02      	add	r7, sp, #8
 801bb66:	0002      	movs	r2, r0
 801bb68:	1dfb      	adds	r3, r7, #7
 801bb6a:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 801bb6c:	4a16      	ldr	r2, [pc, #88]	; (801bbc8 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 801bb6e:	240c      	movs	r4, #12
 801bb70:	193b      	adds	r3, r7, r4
 801bb72:	2132      	movs	r1, #50	; 0x32
 801bb74:	0018      	movs	r0, r3
 801bb76:	f007 fcf9 	bl	802356c <sniprintf>
 801bb7a:	0002      	movs	r2, r0
 801bb7c:	213f      	movs	r1, #63	; 0x3f
 801bb7e:	187b      	adds	r3, r7, r1
 801bb80:	701a      	strb	r2, [r3, #0]
 801bb82:	187b      	adds	r3, r7, r1
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	2b31      	cmp	r3, #49	; 0x31
 801bb88:	d80d      	bhi.n	801bba6 <USBPD_DPM_RequestPowerRoleSwap+0x46>
 801bb8a:	193b      	adds	r3, r7, r4
 801bb8c:	0018      	movs	r0, r3
 801bb8e:	f7ea fb1d 	bl	80061cc <strlen>
 801bb92:	193a      	adds	r2, r7, r4
 801bb94:	1dfb      	adds	r3, r7, #7
 801bb96:	7819      	ldrb	r1, [r3, #0]
 801bb98:	9000      	str	r0, [sp, #0]
 801bb9a:	0013      	movs	r3, r2
 801bb9c:	2200      	movs	r2, #0
 801bb9e:	2006      	movs	r0, #6
 801bba0:	f7f6 ff0c 	bl	80129bc <USBPD_TRACE_Add>
 801bba4:	e00a      	b.n	801bbbc <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 801bba6:	230c      	movs	r3, #12
 801bba8:	18fa      	adds	r2, r7, r3
 801bbaa:	1dfb      	adds	r3, r7, #7
 801bbac:	7819      	ldrb	r1, [r3, #0]
 801bbae:	2332      	movs	r3, #50	; 0x32
 801bbb0:	9300      	str	r3, [sp, #0]
 801bbb2:	0013      	movs	r3, r2
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	2006      	movs	r0, #6
 801bbb8:	f7f6 ff00 	bl	80129bc <USBPD_TRACE_Add>
  return USBPD_ERROR;
 801bbbc:	2302      	movs	r3, #2
}
 801bbbe:	0018      	movs	r0, r3
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	b011      	add	sp, #68	; 0x44
 801bbc4:	bd90      	pop	{r4, r7, pc}
 801bbc6:	46c0      	nop			; (mov r8, r8)
 801bbc8:	080242b8 	.word	0x080242b8

0801bbcc <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 801bbcc:	b5b0      	push	{r4, r5, r7, lr}
 801bbce:	b092      	sub	sp, #72	; 0x48
 801bbd0:	af02      	add	r7, sp, #8
 801bbd2:	0002      	movs	r2, r0
 801bbd4:	1dfb      	adds	r3, r7, #7
 801bbd6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 801bbd8:	253f      	movs	r5, #63	; 0x3f
 801bbda:	197c      	adds	r4, r7, r5
 801bbdc:	1dfb      	adds	r3, r7, #7
 801bbde:	781b      	ldrb	r3, [r3, #0]
 801bbe0:	2200      	movs	r2, #0
 801bbe2:	210b      	movs	r1, #11
 801bbe4:	0018      	movs	r0, r3
 801bbe6:	f7e4 fc8d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bbea:	0003      	movs	r3, r0
 801bbec:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 801bbee:	197b      	adds	r3, r7, r5
 801bbf0:	781b      	ldrb	r3, [r3, #0]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d027      	beq.n	801bc46 <USBPD_DPM_RequestVconnSwap+0x7a>
 801bbf6:	4a17      	ldr	r2, [pc, #92]	; (801bc54 <USBPD_DPM_RequestVconnSwap+0x88>)
 801bbf8:	240c      	movs	r4, #12
 801bbfa:	193b      	adds	r3, r7, r4
 801bbfc:	2132      	movs	r1, #50	; 0x32
 801bbfe:	0018      	movs	r0, r3
 801bc00:	f007 fcb4 	bl	802356c <sniprintf>
 801bc04:	0002      	movs	r2, r0
 801bc06:	213e      	movs	r1, #62	; 0x3e
 801bc08:	187b      	adds	r3, r7, r1
 801bc0a:	701a      	strb	r2, [r3, #0]
 801bc0c:	187b      	adds	r3, r7, r1
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	2b31      	cmp	r3, #49	; 0x31
 801bc12:	d80d      	bhi.n	801bc30 <USBPD_DPM_RequestVconnSwap+0x64>
 801bc14:	193b      	adds	r3, r7, r4
 801bc16:	0018      	movs	r0, r3
 801bc18:	f7ea fad8 	bl	80061cc <strlen>
 801bc1c:	193a      	adds	r2, r7, r4
 801bc1e:	1dfb      	adds	r3, r7, #7
 801bc20:	7819      	ldrb	r1, [r3, #0]
 801bc22:	9000      	str	r0, [sp, #0]
 801bc24:	0013      	movs	r3, r2
 801bc26:	2200      	movs	r2, #0
 801bc28:	2006      	movs	r0, #6
 801bc2a:	f7f6 fec7 	bl	80129bc <USBPD_TRACE_Add>
 801bc2e:	e00a      	b.n	801bc46 <USBPD_DPM_RequestVconnSwap+0x7a>
 801bc30:	230c      	movs	r3, #12
 801bc32:	18fa      	adds	r2, r7, r3
 801bc34:	1dfb      	adds	r3, r7, #7
 801bc36:	7819      	ldrb	r1, [r3, #0]
 801bc38:	2332      	movs	r3, #50	; 0x32
 801bc3a:	9300      	str	r3, [sp, #0]
 801bc3c:	0013      	movs	r3, r2
 801bc3e:	2200      	movs	r2, #0
 801bc40:	2006      	movs	r0, #6
 801bc42:	f7f6 febb 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bc46:	233f      	movs	r3, #63	; 0x3f
 801bc48:	18fb      	adds	r3, r7, r3
 801bc4a:	781b      	ldrb	r3, [r3, #0]
}
 801bc4c:	0018      	movs	r0, r3
 801bc4e:	46bd      	mov	sp, r7
 801bc50:	b010      	add	sp, #64	; 0x40
 801bc52:	bdb0      	pop	{r4, r5, r7, pc}
 801bc54:	080242d8 	.word	0x080242d8

0801bc58 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 801bc58:	b5b0      	push	{r4, r5, r7, lr}
 801bc5a:	b092      	sub	sp, #72	; 0x48
 801bc5c:	af02      	add	r7, sp, #8
 801bc5e:	0002      	movs	r2, r0
 801bc60:	1dfb      	adds	r3, r7, #7
 801bc62:	701a      	strb	r2, [r3, #0]
 801bc64:	1dbb      	adds	r3, r7, #6
 801bc66:	1c0a      	adds	r2, r1, #0
 801bc68:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 801bc6a:	253f      	movs	r5, #63	; 0x3f
 801bc6c:	197c      	adds	r4, r7, r5
 801bc6e:	1dbb      	adds	r3, r7, #6
 801bc70:	781a      	ldrb	r2, [r3, #0]
 801bc72:	1dfb      	adds	r3, r7, #7
 801bc74:	781b      	ldrb	r3, [r3, #0]
 801bc76:	210d      	movs	r1, #13
 801bc78:	0018      	movs	r0, r3
 801bc7a:	f7e4 fc43 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bc7e:	0003      	movs	r3, r0
 801bc80:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 801bc82:	197b      	adds	r3, r7, r5
 801bc84:	781b      	ldrb	r3, [r3, #0]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d027      	beq.n	801bcda <USBPD_DPM_RequestSoftReset+0x82>
 801bc8a:	4a17      	ldr	r2, [pc, #92]	; (801bce8 <USBPD_DPM_RequestSoftReset+0x90>)
 801bc8c:	240c      	movs	r4, #12
 801bc8e:	193b      	adds	r3, r7, r4
 801bc90:	2132      	movs	r1, #50	; 0x32
 801bc92:	0018      	movs	r0, r3
 801bc94:	f007 fc6a 	bl	802356c <sniprintf>
 801bc98:	0002      	movs	r2, r0
 801bc9a:	213e      	movs	r1, #62	; 0x3e
 801bc9c:	187b      	adds	r3, r7, r1
 801bc9e:	701a      	strb	r2, [r3, #0]
 801bca0:	187b      	adds	r3, r7, r1
 801bca2:	781b      	ldrb	r3, [r3, #0]
 801bca4:	2b31      	cmp	r3, #49	; 0x31
 801bca6:	d80d      	bhi.n	801bcc4 <USBPD_DPM_RequestSoftReset+0x6c>
 801bca8:	193b      	adds	r3, r7, r4
 801bcaa:	0018      	movs	r0, r3
 801bcac:	f7ea fa8e 	bl	80061cc <strlen>
 801bcb0:	193a      	adds	r2, r7, r4
 801bcb2:	1dfb      	adds	r3, r7, #7
 801bcb4:	7819      	ldrb	r1, [r3, #0]
 801bcb6:	9000      	str	r0, [sp, #0]
 801bcb8:	0013      	movs	r3, r2
 801bcba:	2200      	movs	r2, #0
 801bcbc:	2006      	movs	r0, #6
 801bcbe:	f7f6 fe7d 	bl	80129bc <USBPD_TRACE_Add>
 801bcc2:	e00a      	b.n	801bcda <USBPD_DPM_RequestSoftReset+0x82>
 801bcc4:	230c      	movs	r3, #12
 801bcc6:	18fa      	adds	r2, r7, r3
 801bcc8:	1dfb      	adds	r3, r7, #7
 801bcca:	7819      	ldrb	r1, [r3, #0]
 801bccc:	2332      	movs	r3, #50	; 0x32
 801bcce:	9300      	str	r3, [sp, #0]
 801bcd0:	0013      	movs	r3, r2
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	2006      	movs	r0, #6
 801bcd6:	f7f6 fe71 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bcda:	233f      	movs	r3, #63	; 0x3f
 801bcdc:	18fb      	adds	r3, r7, r3
 801bcde:	781b      	ldrb	r3, [r3, #0]
}
 801bce0:	0018      	movs	r0, r3
 801bce2:	46bd      	mov	sp, r7
 801bce4:	b010      	add	sp, #64	; 0x40
 801bce6:	bdb0      	pop	{r4, r5, r7, pc}
 801bce8:	080242f8 	.word	0x080242f8

0801bcec <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 801bcec:	b5b0      	push	{r4, r5, r7, lr}
 801bcee:	b092      	sub	sp, #72	; 0x48
 801bcf0:	af02      	add	r7, sp, #8
 801bcf2:	0002      	movs	r2, r0
 801bcf4:	1dfb      	adds	r3, r7, #7
 801bcf6:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 801bcf8:	253f      	movs	r5, #63	; 0x3f
 801bcfa:	197c      	adds	r4, r7, r5
 801bcfc:	1dfb      	adds	r3, r7, #7
 801bcfe:	781b      	ldrb	r3, [r3, #0]
 801bd00:	2200      	movs	r2, #0
 801bd02:	2101      	movs	r1, #1
 801bd04:	0018      	movs	r0, r3
 801bd06:	f7e4 fca9 	bl	800065c <USBPD_PE_Request_DataMessage>
 801bd0a:	0003      	movs	r3, r0
 801bd0c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 801bd0e:	197b      	adds	r3, r7, r5
 801bd10:	781b      	ldrb	r3, [r3, #0]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	d027      	beq.n	801bd66 <USBPD_DPM_RequestSourceCapability+0x7a>
 801bd16:	4a17      	ldr	r2, [pc, #92]	; (801bd74 <USBPD_DPM_RequestSourceCapability+0x88>)
 801bd18:	240c      	movs	r4, #12
 801bd1a:	193b      	adds	r3, r7, r4
 801bd1c:	2132      	movs	r1, #50	; 0x32
 801bd1e:	0018      	movs	r0, r3
 801bd20:	f007 fc24 	bl	802356c <sniprintf>
 801bd24:	0002      	movs	r2, r0
 801bd26:	213e      	movs	r1, #62	; 0x3e
 801bd28:	187b      	adds	r3, r7, r1
 801bd2a:	701a      	strb	r2, [r3, #0]
 801bd2c:	187b      	adds	r3, r7, r1
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	2b31      	cmp	r3, #49	; 0x31
 801bd32:	d80d      	bhi.n	801bd50 <USBPD_DPM_RequestSourceCapability+0x64>
 801bd34:	193b      	adds	r3, r7, r4
 801bd36:	0018      	movs	r0, r3
 801bd38:	f7ea fa48 	bl	80061cc <strlen>
 801bd3c:	193a      	adds	r2, r7, r4
 801bd3e:	1dfb      	adds	r3, r7, #7
 801bd40:	7819      	ldrb	r1, [r3, #0]
 801bd42:	9000      	str	r0, [sp, #0]
 801bd44:	0013      	movs	r3, r2
 801bd46:	2200      	movs	r2, #0
 801bd48:	2006      	movs	r0, #6
 801bd4a:	f7f6 fe37 	bl	80129bc <USBPD_TRACE_Add>
 801bd4e:	e00a      	b.n	801bd66 <USBPD_DPM_RequestSourceCapability+0x7a>
 801bd50:	230c      	movs	r3, #12
 801bd52:	18fa      	adds	r2, r7, r3
 801bd54:	1dfb      	adds	r3, r7, #7
 801bd56:	7819      	ldrb	r1, [r3, #0]
 801bd58:	2332      	movs	r3, #50	; 0x32
 801bd5a:	9300      	str	r3, [sp, #0]
 801bd5c:	0013      	movs	r3, r2
 801bd5e:	2200      	movs	r2, #0
 801bd60:	2006      	movs	r0, #6
 801bd62:	f7f6 fe2b 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bd66:	233f      	movs	r3, #63	; 0x3f
 801bd68:	18fb      	adds	r3, r7, r3
 801bd6a:	781b      	ldrb	r3, [r3, #0]
}
 801bd6c:	0018      	movs	r0, r3
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	b010      	add	sp, #64	; 0x40
 801bd72:	bdb0      	pop	{r4, r5, r7, pc}
 801bd74:	08024320 	.word	0x08024320

0801bd78 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 801bd78:	b5b0      	push	{r4, r5, r7, lr}
 801bd7a:	b092      	sub	sp, #72	; 0x48
 801bd7c:	af02      	add	r7, sp, #8
 801bd7e:	0002      	movs	r2, r0
 801bd80:	6039      	str	r1, [r7, #0]
 801bd82:	1dfb      	adds	r3, r7, #7
 801bd84:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 801bd86:	253f      	movs	r5, #63	; 0x3f
 801bd88:	197c      	adds	r4, r7, r5
 801bd8a:	003a      	movs	r2, r7
 801bd8c:	1dfb      	adds	r3, r7, #7
 801bd8e:	781b      	ldrb	r3, [r3, #0]
 801bd90:	2106      	movs	r1, #6
 801bd92:	0018      	movs	r0, r3
 801bd94:	f7e4 fc62 	bl	800065c <USBPD_PE_Request_DataMessage>
 801bd98:	0003      	movs	r3, r0
 801bd9a:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 801bd9c:	197b      	adds	r3, r7, r5
 801bd9e:	781b      	ldrb	r3, [r3, #0]
 801bda0:	2b00      	cmp	r3, #0
 801bda2:	d027      	beq.n	801bdf4 <USBPD_DPM_RequestAlert+0x7c>
 801bda4:	4a17      	ldr	r2, [pc, #92]	; (801be04 <USBPD_DPM_RequestAlert+0x8c>)
 801bda6:	240c      	movs	r4, #12
 801bda8:	193b      	adds	r3, r7, r4
 801bdaa:	2132      	movs	r1, #50	; 0x32
 801bdac:	0018      	movs	r0, r3
 801bdae:	f007 fbdd 	bl	802356c <sniprintf>
 801bdb2:	0002      	movs	r2, r0
 801bdb4:	213e      	movs	r1, #62	; 0x3e
 801bdb6:	187b      	adds	r3, r7, r1
 801bdb8:	701a      	strb	r2, [r3, #0]
 801bdba:	187b      	adds	r3, r7, r1
 801bdbc:	781b      	ldrb	r3, [r3, #0]
 801bdbe:	2b31      	cmp	r3, #49	; 0x31
 801bdc0:	d80d      	bhi.n	801bdde <USBPD_DPM_RequestAlert+0x66>
 801bdc2:	193b      	adds	r3, r7, r4
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	f7ea fa01 	bl	80061cc <strlen>
 801bdca:	193a      	adds	r2, r7, r4
 801bdcc:	1dfb      	adds	r3, r7, #7
 801bdce:	7819      	ldrb	r1, [r3, #0]
 801bdd0:	9000      	str	r0, [sp, #0]
 801bdd2:	0013      	movs	r3, r2
 801bdd4:	2200      	movs	r2, #0
 801bdd6:	2006      	movs	r0, #6
 801bdd8:	f7f6 fdf0 	bl	80129bc <USBPD_TRACE_Add>
 801bddc:	e00a      	b.n	801bdf4 <USBPD_DPM_RequestAlert+0x7c>
 801bdde:	230c      	movs	r3, #12
 801bde0:	18fa      	adds	r2, r7, r3
 801bde2:	1dfb      	adds	r3, r7, #7
 801bde4:	7819      	ldrb	r1, [r3, #0]
 801bde6:	2332      	movs	r3, #50	; 0x32
 801bde8:	9300      	str	r3, [sp, #0]
 801bdea:	0013      	movs	r3, r2
 801bdec:	2200      	movs	r2, #0
 801bdee:	2006      	movs	r0, #6
 801bdf0:	f7f6 fde4 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bdf4:	233f      	movs	r3, #63	; 0x3f
 801bdf6:	18fb      	adds	r3, r7, r3
 801bdf8:	781b      	ldrb	r3, [r3, #0]
}
 801bdfa:	0018      	movs	r0, r3
 801bdfc:	46bd      	mov	sp, r7
 801bdfe:	b010      	add	sp, #64	; 0x40
 801be00:	bdb0      	pop	{r4, r5, r7, pc}
 801be02:	46c0      	nop			; (mov r8, r8)
 801be04:	080244b0 	.word	0x080244b0

0801be08 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 801be08:	b5b0      	push	{r4, r5, r7, lr}
 801be0a:	b092      	sub	sp, #72	; 0x48
 801be0c:	af02      	add	r7, sp, #8
 801be0e:	0002      	movs	r2, r0
 801be10:	1dfb      	adds	r3, r7, #7
 801be12:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 801be14:	253f      	movs	r5, #63	; 0x3f
 801be16:	197c      	adds	r4, r7, r5
 801be18:	1dfb      	adds	r3, r7, #7
 801be1a:	781b      	ldrb	r3, [r3, #0]
 801be1c:	2200      	movs	r2, #0
 801be1e:	2111      	movs	r1, #17
 801be20:	0018      	movs	r0, r3
 801be22:	f7e4 fb6f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801be26:	0003      	movs	r3, r0
 801be28:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 801be2a:	197b      	adds	r3, r7, r5
 801be2c:	781b      	ldrb	r3, [r3, #0]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d027      	beq.n	801be82 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801be32:	4a17      	ldr	r2, [pc, #92]	; (801be90 <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 801be34:	240c      	movs	r4, #12
 801be36:	193b      	adds	r3, r7, r4
 801be38:	2132      	movs	r1, #50	; 0x32
 801be3a:	0018      	movs	r0, r3
 801be3c:	f007 fb96 	bl	802356c <sniprintf>
 801be40:	0002      	movs	r2, r0
 801be42:	213e      	movs	r1, #62	; 0x3e
 801be44:	187b      	adds	r3, r7, r1
 801be46:	701a      	strb	r2, [r3, #0]
 801be48:	187b      	adds	r3, r7, r1
 801be4a:	781b      	ldrb	r3, [r3, #0]
 801be4c:	2b31      	cmp	r3, #49	; 0x31
 801be4e:	d80d      	bhi.n	801be6c <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 801be50:	193b      	adds	r3, r7, r4
 801be52:	0018      	movs	r0, r3
 801be54:	f7ea f9ba 	bl	80061cc <strlen>
 801be58:	193a      	adds	r2, r7, r4
 801be5a:	1dfb      	adds	r3, r7, #7
 801be5c:	7819      	ldrb	r1, [r3, #0]
 801be5e:	9000      	str	r0, [sp, #0]
 801be60:	0013      	movs	r3, r2
 801be62:	2200      	movs	r2, #0
 801be64:	2006      	movs	r0, #6
 801be66:	f7f6 fda9 	bl	80129bc <USBPD_TRACE_Add>
 801be6a:	e00a      	b.n	801be82 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801be6c:	230c      	movs	r3, #12
 801be6e:	18fa      	adds	r2, r7, r3
 801be70:	1dfb      	adds	r3, r7, #7
 801be72:	7819      	ldrb	r1, [r3, #0]
 801be74:	2332      	movs	r3, #50	; 0x32
 801be76:	9300      	str	r3, [sp, #0]
 801be78:	0013      	movs	r3, r2
 801be7a:	2200      	movs	r2, #0
 801be7c:	2006      	movs	r0, #6
 801be7e:	f7f6 fd9d 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801be82:	233f      	movs	r3, #63	; 0x3f
 801be84:	18fb      	adds	r3, r7, r3
 801be86:	781b      	ldrb	r3, [r3, #0]
}
 801be88:	0018      	movs	r0, r3
 801be8a:	46bd      	mov	sp, r7
 801be8c:	b010      	add	sp, #64	; 0x40
 801be8e:	bdb0      	pop	{r4, r5, r7, pc}
 801be90:	080244d0 	.word	0x080244d0

0801be94 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 801be94:	b5b0      	push	{r4, r5, r7, lr}
 801be96:	b092      	sub	sp, #72	; 0x48
 801be98:	af02      	add	r7, sp, #8
 801be9a:	0002      	movs	r2, r0
 801be9c:	1dfb      	adds	r3, r7, #7
 801be9e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 801bea0:	253f      	movs	r5, #63	; 0x3f
 801bea2:	197c      	adds	r4, r7, r5
 801bea4:	1dfb      	adds	r3, r7, #7
 801bea6:	781b      	ldrb	r3, [r3, #0]
 801bea8:	2200      	movs	r2, #0
 801beaa:	2116      	movs	r1, #22
 801beac:	0018      	movs	r0, r3
 801beae:	f7e4 fb29 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801beb2:	0003      	movs	r3, r0
 801beb4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 801beb6:	197b      	adds	r3, r7, r5
 801beb8:	781b      	ldrb	r3, [r3, #0]
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d027      	beq.n	801bf0e <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801bebe:	4a17      	ldr	r2, [pc, #92]	; (801bf1c <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 801bec0:	240c      	movs	r4, #12
 801bec2:	193b      	adds	r3, r7, r4
 801bec4:	2132      	movs	r1, #50	; 0x32
 801bec6:	0018      	movs	r0, r3
 801bec8:	f007 fb50 	bl	802356c <sniprintf>
 801becc:	0002      	movs	r2, r0
 801bece:	213e      	movs	r1, #62	; 0x3e
 801bed0:	187b      	adds	r3, r7, r1
 801bed2:	701a      	strb	r2, [r3, #0]
 801bed4:	187b      	adds	r3, r7, r1
 801bed6:	781b      	ldrb	r3, [r3, #0]
 801bed8:	2b31      	cmp	r3, #49	; 0x31
 801beda:	d80d      	bhi.n	801bef8 <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 801bedc:	193b      	adds	r3, r7, r4
 801bede:	0018      	movs	r0, r3
 801bee0:	f7ea f974 	bl	80061cc <strlen>
 801bee4:	193a      	adds	r2, r7, r4
 801bee6:	1dfb      	adds	r3, r7, #7
 801bee8:	7819      	ldrb	r1, [r3, #0]
 801beea:	9000      	str	r0, [sp, #0]
 801beec:	0013      	movs	r3, r2
 801beee:	2200      	movs	r2, #0
 801bef0:	2006      	movs	r0, #6
 801bef2:	f7f6 fd63 	bl	80129bc <USBPD_TRACE_Add>
 801bef6:	e00a      	b.n	801bf0e <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801bef8:	230c      	movs	r3, #12
 801befa:	18fa      	adds	r2, r7, r3
 801befc:	1dfb      	adds	r3, r7, #7
 801befe:	7819      	ldrb	r1, [r3, #0]
 801bf00:	2332      	movs	r3, #50	; 0x32
 801bf02:	9300      	str	r3, [sp, #0]
 801bf04:	0013      	movs	r3, r2
 801bf06:	2200      	movs	r2, #0
 801bf08:	2006      	movs	r0, #6
 801bf0a:	f7f6 fd57 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bf0e:	233f      	movs	r3, #63	; 0x3f
 801bf10:	18fb      	adds	r3, r7, r3
 801bf12:	781b      	ldrb	r3, [r3, #0]
}
 801bf14:	0018      	movs	r0, r3
 801bf16:	46bd      	mov	sp, r7
 801bf18:	b010      	add	sp, #64	; 0x40
 801bf1a:	bdb0      	pop	{r4, r5, r7, pc}
 801bf1c:	080244fc 	.word	0x080244fc

0801bf20 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 801bf20:	b590      	push	{r4, r7, lr}
 801bf22:	b093      	sub	sp, #76	; 0x4c
 801bf24:	af02      	add	r7, sp, #8
 801bf26:	603a      	str	r2, [r7, #0]
 801bf28:	1dfb      	adds	r3, r7, #7
 801bf2a:	1c02      	adds	r2, r0, #0
 801bf2c:	701a      	strb	r2, [r3, #0]
 801bf2e:	1dbb      	adds	r3, r7, #6
 801bf30:	1c0a      	adds	r2, r1, #0
 801bf32:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801bf34:	213f      	movs	r1, #63	; 0x3f
 801bf36:	187b      	adds	r3, r7, r1
 801bf38:	2202      	movs	r2, #2
 801bf3a:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 801bf3c:	1dbb      	adds	r3, r7, #6
 801bf3e:	781b      	ldrb	r3, [r3, #0]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d10d      	bne.n	801bf60 <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 801bf44:	187c      	adds	r4, r7, r1
 801bf46:	683a      	ldr	r2, [r7, #0]
 801bf48:	1dbb      	adds	r3, r7, #6
 801bf4a:	7819      	ldrb	r1, [r3, #0]
 801bf4c:	1dfb      	adds	r3, r7, #7
 801bf4e:	7818      	ldrb	r0, [r3, #0]
 801bf50:	2302      	movs	r3, #2
 801bf52:	9300      	str	r3, [sp, #0]
 801bf54:	0013      	movs	r3, r2
 801bf56:	2206      	movs	r2, #6
 801bf58:	f7e4 fc0c 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801bf5c:	0003      	movs	r3, r0
 801bf5e:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 801bf60:	233f      	movs	r3, #63	; 0x3f
 801bf62:	18fb      	adds	r3, r7, r3
 801bf64:	781b      	ldrb	r3, [r3, #0]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d027      	beq.n	801bfba <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801bf6a:	4a17      	ldr	r2, [pc, #92]	; (801bfc8 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 801bf6c:	240c      	movs	r4, #12
 801bf6e:	193b      	adds	r3, r7, r4
 801bf70:	2132      	movs	r1, #50	; 0x32
 801bf72:	0018      	movs	r0, r3
 801bf74:	f007 fafa 	bl	802356c <sniprintf>
 801bf78:	0002      	movs	r2, r0
 801bf7a:	213e      	movs	r1, #62	; 0x3e
 801bf7c:	187b      	adds	r3, r7, r1
 801bf7e:	701a      	strb	r2, [r3, #0]
 801bf80:	187b      	adds	r3, r7, r1
 801bf82:	781b      	ldrb	r3, [r3, #0]
 801bf84:	2b31      	cmp	r3, #49	; 0x31
 801bf86:	d80d      	bhi.n	801bfa4 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 801bf88:	193b      	adds	r3, r7, r4
 801bf8a:	0018      	movs	r0, r3
 801bf8c:	f7ea f91e 	bl	80061cc <strlen>
 801bf90:	193a      	adds	r2, r7, r4
 801bf92:	1dfb      	adds	r3, r7, #7
 801bf94:	7819      	ldrb	r1, [r3, #0]
 801bf96:	9000      	str	r0, [sp, #0]
 801bf98:	0013      	movs	r3, r2
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	2006      	movs	r0, #6
 801bf9e:	f7f6 fd0d 	bl	80129bc <USBPD_TRACE_Add>
 801bfa2:	e00a      	b.n	801bfba <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801bfa4:	230c      	movs	r3, #12
 801bfa6:	18fa      	adds	r2, r7, r3
 801bfa8:	1dfb      	adds	r3, r7, #7
 801bfaa:	7819      	ldrb	r1, [r3, #0]
 801bfac:	2332      	movs	r3, #50	; 0x32
 801bfae:	9300      	str	r3, [sp, #0]
 801bfb0:	0013      	movs	r3, r2
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	2006      	movs	r0, #6
 801bfb6:	f7f6 fd01 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801bfba:	233f      	movs	r3, #63	; 0x3f
 801bfbc:	18fb      	adds	r3, r7, r3
 801bfbe:	781b      	ldrb	r3, [r3, #0]
}
 801bfc0:	0018      	movs	r0, r3
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	b011      	add	sp, #68	; 0x44
 801bfc6:	bd90      	pop	{r4, r7, pc}
 801bfc8:	08024528 	.word	0x08024528

0801bfcc <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 801bfcc:	b5b0      	push	{r4, r5, r7, lr}
 801bfce:	b092      	sub	sp, #72	; 0x48
 801bfd0:	af02      	add	r7, sp, #8
 801bfd2:	0002      	movs	r2, r0
 801bfd4:	1dfb      	adds	r3, r7, #7
 801bfd6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 801bfd8:	253f      	movs	r5, #63	; 0x3f
 801bfda:	197c      	adds	r4, r7, r5
 801bfdc:	1dfb      	adds	r3, r7, #7
 801bfde:	781b      	ldrb	r3, [r3, #0]
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	2114      	movs	r1, #20
 801bfe4:	0018      	movs	r0, r3
 801bfe6:	f7e4 fa8d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801bfea:	0003      	movs	r3, r0
 801bfec:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 801bfee:	197b      	adds	r3, r7, r5
 801bff0:	781b      	ldrb	r3, [r3, #0]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d027      	beq.n	801c046 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801bff6:	4a17      	ldr	r2, [pc, #92]	; (801c054 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 801bff8:	240c      	movs	r4, #12
 801bffa:	193b      	adds	r3, r7, r4
 801bffc:	2132      	movs	r1, #50	; 0x32
 801bffe:	0018      	movs	r0, r3
 801c000:	f007 fab4 	bl	802356c <sniprintf>
 801c004:	0002      	movs	r2, r0
 801c006:	213e      	movs	r1, #62	; 0x3e
 801c008:	187b      	adds	r3, r7, r1
 801c00a:	701a      	strb	r2, [r3, #0]
 801c00c:	187b      	adds	r3, r7, r1
 801c00e:	781b      	ldrb	r3, [r3, #0]
 801c010:	2b31      	cmp	r3, #49	; 0x31
 801c012:	d80d      	bhi.n	801c030 <USBPD_DPM_RequestGetPPS_Status+0x64>
 801c014:	193b      	adds	r3, r7, r4
 801c016:	0018      	movs	r0, r3
 801c018:	f7ea f8d8 	bl	80061cc <strlen>
 801c01c:	193a      	adds	r2, r7, r4
 801c01e:	1dfb      	adds	r3, r7, #7
 801c020:	7819      	ldrb	r1, [r3, #0]
 801c022:	9000      	str	r0, [sp, #0]
 801c024:	0013      	movs	r3, r2
 801c026:	2200      	movs	r2, #0
 801c028:	2006      	movs	r0, #6
 801c02a:	f7f6 fcc7 	bl	80129bc <USBPD_TRACE_Add>
 801c02e:	e00a      	b.n	801c046 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801c030:	230c      	movs	r3, #12
 801c032:	18fa      	adds	r2, r7, r3
 801c034:	1dfb      	adds	r3, r7, #7
 801c036:	7819      	ldrb	r1, [r3, #0]
 801c038:	2332      	movs	r3, #50	; 0x32
 801c03a:	9300      	str	r3, [sp, #0]
 801c03c:	0013      	movs	r3, r2
 801c03e:	2200      	movs	r2, #0
 801c040:	2006      	movs	r0, #6
 801c042:	f7f6 fcbb 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c046:	233f      	movs	r3, #63	; 0x3f
 801c048:	18fb      	adds	r3, r7, r3
 801c04a:	781b      	ldrb	r3, [r3, #0]
}
 801c04c:	0018      	movs	r0, r3
 801c04e:	46bd      	mov	sp, r7
 801c050:	b010      	add	sp, #64	; 0x40
 801c052:	bdb0      	pop	{r4, r5, r7, pc}
 801c054:	08024550 	.word	0x08024550

0801c058 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 801c058:	b5b0      	push	{r4, r5, r7, lr}
 801c05a:	b092      	sub	sp, #72	; 0x48
 801c05c:	af02      	add	r7, sp, #8
 801c05e:	0002      	movs	r2, r0
 801c060:	1dfb      	adds	r3, r7, #7
 801c062:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 801c064:	253f      	movs	r5, #63	; 0x3f
 801c066:	197c      	adds	r4, r7, r5
 801c068:	1dfb      	adds	r3, r7, #7
 801c06a:	781b      	ldrb	r3, [r3, #0]
 801c06c:	2200      	movs	r2, #0
 801c06e:	2112      	movs	r1, #18
 801c070:	0018      	movs	r0, r3
 801c072:	f7e4 fa47 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c076:	0003      	movs	r3, r0
 801c078:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 801c07a:	197b      	adds	r3, r7, r5
 801c07c:	781b      	ldrb	r3, [r3, #0]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d027      	beq.n	801c0d2 <USBPD_DPM_RequestGetStatus+0x7a>
 801c082:	4a17      	ldr	r2, [pc, #92]	; (801c0e0 <USBPD_DPM_RequestGetStatus+0x88>)
 801c084:	240c      	movs	r4, #12
 801c086:	193b      	adds	r3, r7, r4
 801c088:	2132      	movs	r1, #50	; 0x32
 801c08a:	0018      	movs	r0, r3
 801c08c:	f007 fa6e 	bl	802356c <sniprintf>
 801c090:	0002      	movs	r2, r0
 801c092:	213e      	movs	r1, #62	; 0x3e
 801c094:	187b      	adds	r3, r7, r1
 801c096:	701a      	strb	r2, [r3, #0]
 801c098:	187b      	adds	r3, r7, r1
 801c09a:	781b      	ldrb	r3, [r3, #0]
 801c09c:	2b31      	cmp	r3, #49	; 0x31
 801c09e:	d80d      	bhi.n	801c0bc <USBPD_DPM_RequestGetStatus+0x64>
 801c0a0:	193b      	adds	r3, r7, r4
 801c0a2:	0018      	movs	r0, r3
 801c0a4:	f7ea f892 	bl	80061cc <strlen>
 801c0a8:	193a      	adds	r2, r7, r4
 801c0aa:	1dfb      	adds	r3, r7, #7
 801c0ac:	7819      	ldrb	r1, [r3, #0]
 801c0ae:	9000      	str	r0, [sp, #0]
 801c0b0:	0013      	movs	r3, r2
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	2006      	movs	r0, #6
 801c0b6:	f7f6 fc81 	bl	80129bc <USBPD_TRACE_Add>
 801c0ba:	e00a      	b.n	801c0d2 <USBPD_DPM_RequestGetStatus+0x7a>
 801c0bc:	230c      	movs	r3, #12
 801c0be:	18fa      	adds	r2, r7, r3
 801c0c0:	1dfb      	adds	r3, r7, #7
 801c0c2:	7819      	ldrb	r1, [r3, #0]
 801c0c4:	2332      	movs	r3, #50	; 0x32
 801c0c6:	9300      	str	r3, [sp, #0]
 801c0c8:	0013      	movs	r3, r2
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	2006      	movs	r0, #6
 801c0ce:	f7f6 fc75 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c0d2:	233f      	movs	r3, #63	; 0x3f
 801c0d4:	18fb      	adds	r3, r7, r3
 801c0d6:	781b      	ldrb	r3, [r3, #0]
}
 801c0d8:	0018      	movs	r0, r3
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	b010      	add	sp, #64	; 0x40
 801c0de:	bdb0      	pop	{r4, r5, r7, pc}
 801c0e0:	0802457c 	.word	0x0802457c

0801c0e4 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 801c0e4:	b5b0      	push	{r4, r5, r7, lr}
 801c0e6:	b092      	sub	sp, #72	; 0x48
 801c0e8:	af02      	add	r7, sp, #8
 801c0ea:	0002      	movs	r2, r0
 801c0ec:	1dfb      	adds	r3, r7, #7
 801c0ee:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 801c0f0:	253f      	movs	r5, #63	; 0x3f
 801c0f2:	197c      	adds	r4, r7, r5
 801c0f4:	1dfb      	adds	r3, r7, #7
 801c0f6:	781b      	ldrb	r3, [r3, #0]
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	2113      	movs	r1, #19
 801c0fc:	0018      	movs	r0, r3
 801c0fe:	f7e4 fa01 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c102:	0003      	movs	r3, r0
 801c104:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 801c106:	197b      	adds	r3, r7, r5
 801c108:	781b      	ldrb	r3, [r3, #0]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d027      	beq.n	801c15e <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801c10e:	4a17      	ldr	r2, [pc, #92]	; (801c16c <USBPD_DPM_RequestFastRoleSwap+0x88>)
 801c110:	240c      	movs	r4, #12
 801c112:	193b      	adds	r3, r7, r4
 801c114:	2132      	movs	r1, #50	; 0x32
 801c116:	0018      	movs	r0, r3
 801c118:	f007 fa28 	bl	802356c <sniprintf>
 801c11c:	0002      	movs	r2, r0
 801c11e:	213e      	movs	r1, #62	; 0x3e
 801c120:	187b      	adds	r3, r7, r1
 801c122:	701a      	strb	r2, [r3, #0]
 801c124:	187b      	adds	r3, r7, r1
 801c126:	781b      	ldrb	r3, [r3, #0]
 801c128:	2b31      	cmp	r3, #49	; 0x31
 801c12a:	d80d      	bhi.n	801c148 <USBPD_DPM_RequestFastRoleSwap+0x64>
 801c12c:	193b      	adds	r3, r7, r4
 801c12e:	0018      	movs	r0, r3
 801c130:	f7ea f84c 	bl	80061cc <strlen>
 801c134:	193a      	adds	r2, r7, r4
 801c136:	1dfb      	adds	r3, r7, #7
 801c138:	7819      	ldrb	r1, [r3, #0]
 801c13a:	9000      	str	r0, [sp, #0]
 801c13c:	0013      	movs	r3, r2
 801c13e:	2200      	movs	r2, #0
 801c140:	2006      	movs	r0, #6
 801c142:	f7f6 fc3b 	bl	80129bc <USBPD_TRACE_Add>
 801c146:	e00a      	b.n	801c15e <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801c148:	230c      	movs	r3, #12
 801c14a:	18fa      	adds	r2, r7, r3
 801c14c:	1dfb      	adds	r3, r7, #7
 801c14e:	7819      	ldrb	r1, [r3, #0]
 801c150:	2332      	movs	r3, #50	; 0x32
 801c152:	9300      	str	r3, [sp, #0]
 801c154:	0013      	movs	r3, r2
 801c156:	2200      	movs	r2, #0
 801c158:	2006      	movs	r0, #6
 801c15a:	f7f6 fc2f 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c15e:	233f      	movs	r3, #63	; 0x3f
 801c160:	18fb      	adds	r3, r7, r3
 801c162:	781b      	ldrb	r3, [r3, #0]
}
 801c164:	0018      	movs	r0, r3
 801c166:	46bd      	mov	sp, r7
 801c168:	b010      	add	sp, #64	; 0x40
 801c16a:	bdb0      	pop	{r4, r5, r7, pc}
 801c16c:	080245a4 	.word	0x080245a4

0801c170 <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 801c170:	b5b0      	push	{r4, r5, r7, lr}
 801c172:	b092      	sub	sp, #72	; 0x48
 801c174:	af02      	add	r7, sp, #8
 801c176:	0002      	movs	r2, r0
 801c178:	1dfb      	adds	r3, r7, #7
 801c17a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 801c17c:	253f      	movs	r5, #63	; 0x3f
 801c17e:	197c      	adds	r4, r7, r5
 801c180:	1dfb      	adds	r3, r7, #7
 801c182:	781b      	ldrb	r3, [r3, #0]
 801c184:	2200      	movs	r2, #0
 801c186:	2115      	movs	r1, #21
 801c188:	0018      	movs	r0, r3
 801c18a:	f7e4 f9bb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801c18e:	0003      	movs	r3, r0
 801c190:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 801c192:	197b      	adds	r3, r7, r5
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d027      	beq.n	801c1ea <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801c19a:	4a17      	ldr	r2, [pc, #92]	; (801c1f8 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 801c19c:	240c      	movs	r4, #12
 801c19e:	193b      	adds	r3, r7, r4
 801c1a0:	2132      	movs	r1, #50	; 0x32
 801c1a2:	0018      	movs	r0, r3
 801c1a4:	f007 f9e2 	bl	802356c <sniprintf>
 801c1a8:	0002      	movs	r2, r0
 801c1aa:	213e      	movs	r1, #62	; 0x3e
 801c1ac:	187b      	adds	r3, r7, r1
 801c1ae:	701a      	strb	r2, [r3, #0]
 801c1b0:	187b      	adds	r3, r7, r1
 801c1b2:	781b      	ldrb	r3, [r3, #0]
 801c1b4:	2b31      	cmp	r3, #49	; 0x31
 801c1b6:	d80d      	bhi.n	801c1d4 <USBPD_DPM_RequestGetCountryCodes+0x64>
 801c1b8:	193b      	adds	r3, r7, r4
 801c1ba:	0018      	movs	r0, r3
 801c1bc:	f7ea f806 	bl	80061cc <strlen>
 801c1c0:	193a      	adds	r2, r7, r4
 801c1c2:	1dfb      	adds	r3, r7, #7
 801c1c4:	7819      	ldrb	r1, [r3, #0]
 801c1c6:	9000      	str	r0, [sp, #0]
 801c1c8:	0013      	movs	r3, r2
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	2006      	movs	r0, #6
 801c1ce:	f7f6 fbf5 	bl	80129bc <USBPD_TRACE_Add>
 801c1d2:	e00a      	b.n	801c1ea <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801c1d4:	230c      	movs	r3, #12
 801c1d6:	18fa      	adds	r2, r7, r3
 801c1d8:	1dfb      	adds	r3, r7, #7
 801c1da:	7819      	ldrb	r1, [r3, #0]
 801c1dc:	2332      	movs	r3, #50	; 0x32
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	0013      	movs	r3, r2
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	2006      	movs	r0, #6
 801c1e6:	f7f6 fbe9 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c1ea:	233f      	movs	r3, #63	; 0x3f
 801c1ec:	18fb      	adds	r3, r7, r3
 801c1ee:	781b      	ldrb	r3, [r3, #0]
}
 801c1f0:	0018      	movs	r0, r3
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	b010      	add	sp, #64	; 0x40
 801c1f6:	bdb0      	pop	{r4, r5, r7, pc}
 801c1f8:	080245c4 	.word	0x080245c4

0801c1fc <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 801c1fc:	b5b0      	push	{r4, r5, r7, lr}
 801c1fe:	b092      	sub	sp, #72	; 0x48
 801c200:	af02      	add	r7, sp, #8
 801c202:	0002      	movs	r2, r0
 801c204:	1dfb      	adds	r3, r7, #7
 801c206:	701a      	strb	r2, [r3, #0]
 801c208:	1d3b      	adds	r3, r7, #4
 801c20a:	1c0a      	adds	r2, r1, #0
 801c20c:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 801c20e:	253f      	movs	r5, #63	; 0x3f
 801c210:	197c      	adds	r4, r7, r5
 801c212:	1d3a      	adds	r2, r7, #4
 801c214:	1dfb      	adds	r3, r7, #7
 801c216:	781b      	ldrb	r3, [r3, #0]
 801c218:	2107      	movs	r1, #7
 801c21a:	0018      	movs	r0, r3
 801c21c:	f7e4 fa1e 	bl	800065c <USBPD_PE_Request_DataMessage>
 801c220:	0003      	movs	r3, r0
 801c222:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 801c224:	197b      	adds	r3, r7, r5
 801c226:	781b      	ldrb	r3, [r3, #0]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d027      	beq.n	801c27c <USBPD_DPM_RequestGetCountryInfo+0x80>
 801c22c:	4a17      	ldr	r2, [pc, #92]	; (801c28c <USBPD_DPM_RequestGetCountryInfo+0x90>)
 801c22e:	240c      	movs	r4, #12
 801c230:	193b      	adds	r3, r7, r4
 801c232:	2132      	movs	r1, #50	; 0x32
 801c234:	0018      	movs	r0, r3
 801c236:	f007 f999 	bl	802356c <sniprintf>
 801c23a:	0002      	movs	r2, r0
 801c23c:	213e      	movs	r1, #62	; 0x3e
 801c23e:	187b      	adds	r3, r7, r1
 801c240:	701a      	strb	r2, [r3, #0]
 801c242:	187b      	adds	r3, r7, r1
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	2b31      	cmp	r3, #49	; 0x31
 801c248:	d80d      	bhi.n	801c266 <USBPD_DPM_RequestGetCountryInfo+0x6a>
 801c24a:	193b      	adds	r3, r7, r4
 801c24c:	0018      	movs	r0, r3
 801c24e:	f7e9 ffbd 	bl	80061cc <strlen>
 801c252:	193a      	adds	r2, r7, r4
 801c254:	1dfb      	adds	r3, r7, #7
 801c256:	7819      	ldrb	r1, [r3, #0]
 801c258:	9000      	str	r0, [sp, #0]
 801c25a:	0013      	movs	r3, r2
 801c25c:	2200      	movs	r2, #0
 801c25e:	2006      	movs	r0, #6
 801c260:	f7f6 fbac 	bl	80129bc <USBPD_TRACE_Add>
 801c264:	e00a      	b.n	801c27c <USBPD_DPM_RequestGetCountryInfo+0x80>
 801c266:	230c      	movs	r3, #12
 801c268:	18fa      	adds	r2, r7, r3
 801c26a:	1dfb      	adds	r3, r7, #7
 801c26c:	7819      	ldrb	r1, [r3, #0]
 801c26e:	2332      	movs	r3, #50	; 0x32
 801c270:	9300      	str	r3, [sp, #0]
 801c272:	0013      	movs	r3, r2
 801c274:	2200      	movs	r2, #0
 801c276:	2006      	movs	r0, #6
 801c278:	f7f6 fba0 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c27c:	233f      	movs	r3, #63	; 0x3f
 801c27e:	18fb      	adds	r3, r7, r3
 801c280:	781b      	ldrb	r3, [r3, #0]
}
 801c282:	0018      	movs	r0, r3
 801c284:	46bd      	mov	sp, r7
 801c286:	b010      	add	sp, #64	; 0x40
 801c288:	bdb0      	pop	{r4, r5, r7, pc}
 801c28a:	46c0      	nop			; (mov r8, r8)
 801c28c:	080245f0 	.word	0x080245f0

0801c290 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 801c290:	b5b0      	push	{r4, r5, r7, lr}
 801c292:	b092      	sub	sp, #72	; 0x48
 801c294:	af02      	add	r7, sp, #8
 801c296:	0002      	movs	r2, r0
 801c298:	6039      	str	r1, [r7, #0]
 801c29a:	1dfb      	adds	r3, r7, #7
 801c29c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 801c29e:	253f      	movs	r5, #63	; 0x3f
 801c2a0:	197c      	adds	r4, r7, r5
 801c2a2:	683a      	ldr	r2, [r7, #0]
 801c2a4:	1dfb      	adds	r3, r7, #7
 801c2a6:	7818      	ldrb	r0, [r3, #0]
 801c2a8:	2301      	movs	r3, #1
 801c2aa:	9300      	str	r3, [sp, #0]
 801c2ac:	0013      	movs	r3, r2
 801c2ae:	2203      	movs	r2, #3
 801c2b0:	2100      	movs	r1, #0
 801c2b2:	f7e4 fa5f 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801c2b6:	0003      	movs	r3, r0
 801c2b8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 801c2ba:	197b      	adds	r3, r7, r5
 801c2bc:	781b      	ldrb	r3, [r3, #0]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d027      	beq.n	801c312 <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801c2c2:	4a17      	ldr	r2, [pc, #92]	; (801c320 <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 801c2c4:	240c      	movs	r4, #12
 801c2c6:	193b      	adds	r3, r7, r4
 801c2c8:	2132      	movs	r1, #50	; 0x32
 801c2ca:	0018      	movs	r0, r3
 801c2cc:	f007 f94e 	bl	802356c <sniprintf>
 801c2d0:	0002      	movs	r2, r0
 801c2d2:	213e      	movs	r1, #62	; 0x3e
 801c2d4:	187b      	adds	r3, r7, r1
 801c2d6:	701a      	strb	r2, [r3, #0]
 801c2d8:	187b      	adds	r3, r7, r1
 801c2da:	781b      	ldrb	r3, [r3, #0]
 801c2dc:	2b31      	cmp	r3, #49	; 0x31
 801c2de:	d80d      	bhi.n	801c2fc <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 801c2e0:	193b      	adds	r3, r7, r4
 801c2e2:	0018      	movs	r0, r3
 801c2e4:	f7e9 ff72 	bl	80061cc <strlen>
 801c2e8:	193a      	adds	r2, r7, r4
 801c2ea:	1dfb      	adds	r3, r7, #7
 801c2ec:	7819      	ldrb	r1, [r3, #0]
 801c2ee:	9000      	str	r0, [sp, #0]
 801c2f0:	0013      	movs	r3, r2
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	2006      	movs	r0, #6
 801c2f6:	f7f6 fb61 	bl	80129bc <USBPD_TRACE_Add>
 801c2fa:	e00a      	b.n	801c312 <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801c2fc:	230c      	movs	r3, #12
 801c2fe:	18fa      	adds	r2, r7, r3
 801c300:	1dfb      	adds	r3, r7, #7
 801c302:	7819      	ldrb	r1, [r3, #0]
 801c304:	2332      	movs	r3, #50	; 0x32
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	0013      	movs	r3, r2
 801c30a:	2200      	movs	r2, #0
 801c30c:	2006      	movs	r0, #6
 801c30e:	f7f6 fb55 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c312:	233f      	movs	r3, #63	; 0x3f
 801c314:	18fb      	adds	r3, r7, r3
 801c316:	781b      	ldrb	r3, [r3, #0]
}
 801c318:	0018      	movs	r0, r3
 801c31a:	46bd      	mov	sp, r7
 801c31c:	b010      	add	sp, #64	; 0x40
 801c31e:	bdb0      	pop	{r4, r5, r7, pc}
 801c320:	0802461c 	.word	0x0802461c

0801c324 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 801c324:	b5b0      	push	{r4, r5, r7, lr}
 801c326:	b092      	sub	sp, #72	; 0x48
 801c328:	af02      	add	r7, sp, #8
 801c32a:	0002      	movs	r2, r0
 801c32c:	6039      	str	r1, [r7, #0]
 801c32e:	1dfb      	adds	r3, r7, #7
 801c330:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 801c332:	253f      	movs	r5, #63	; 0x3f
 801c334:	197c      	adds	r4, r7, r5
 801c336:	683a      	ldr	r2, [r7, #0]
 801c338:	1dfb      	adds	r3, r7, #7
 801c33a:	7818      	ldrb	r0, [r3, #0]
 801c33c:	2301      	movs	r3, #1
 801c33e:	9300      	str	r3, [sp, #0]
 801c340:	0013      	movs	r3, r2
 801c342:	2204      	movs	r2, #4
 801c344:	2100      	movs	r1, #0
 801c346:	f7e4 fa15 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801c34a:	0003      	movs	r3, r0
 801c34c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801c34e:	197b      	adds	r3, r7, r5
 801c350:	781b      	ldrb	r3, [r3, #0]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d027      	beq.n	801c3a6 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801c356:	4a17      	ldr	r2, [pc, #92]	; (801c3b4 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 801c358:	240c      	movs	r4, #12
 801c35a:	193b      	adds	r3, r7, r4
 801c35c:	2132      	movs	r1, #50	; 0x32
 801c35e:	0018      	movs	r0, r3
 801c360:	f007 f904 	bl	802356c <sniprintf>
 801c364:	0002      	movs	r2, r0
 801c366:	213e      	movs	r1, #62	; 0x3e
 801c368:	187b      	adds	r3, r7, r1
 801c36a:	701a      	strb	r2, [r3, #0]
 801c36c:	187b      	adds	r3, r7, r1
 801c36e:	781b      	ldrb	r3, [r3, #0]
 801c370:	2b31      	cmp	r3, #49	; 0x31
 801c372:	d80d      	bhi.n	801c390 <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 801c374:	193b      	adds	r3, r7, r4
 801c376:	0018      	movs	r0, r3
 801c378:	f7e9 ff28 	bl	80061cc <strlen>
 801c37c:	193a      	adds	r2, r7, r4
 801c37e:	1dfb      	adds	r3, r7, #7
 801c380:	7819      	ldrb	r1, [r3, #0]
 801c382:	9000      	str	r0, [sp, #0]
 801c384:	0013      	movs	r3, r2
 801c386:	2200      	movs	r2, #0
 801c388:	2006      	movs	r0, #6
 801c38a:	f7f6 fb17 	bl	80129bc <USBPD_TRACE_Add>
 801c38e:	e00a      	b.n	801c3a6 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801c390:	230c      	movs	r3, #12
 801c392:	18fa      	adds	r2, r7, r3
 801c394:	1dfb      	adds	r3, r7, #7
 801c396:	7819      	ldrb	r1, [r3, #0]
 801c398:	2332      	movs	r3, #50	; 0x32
 801c39a:	9300      	str	r3, [sp, #0]
 801c39c:	0013      	movs	r3, r2
 801c39e:	2200      	movs	r2, #0
 801c3a0:	2006      	movs	r0, #6
 801c3a2:	f7f6 fb0b 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c3a6:	233f      	movs	r3, #63	; 0x3f
 801c3a8:	18fb      	adds	r3, r7, r3
 801c3aa:	781b      	ldrb	r3, [r3, #0]
}
 801c3ac:	0018      	movs	r0, r3
 801c3ae:	46bd      	mov	sp, r7
 801c3b0:	b010      	add	sp, #64	; 0x40
 801c3b2:	bdb0      	pop	{r4, r5, r7, pc}
 801c3b4:	08024648 	.word	0x08024648

0801c3b8 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 801c3b8:	b590      	push	{r4, r7, lr}
 801c3ba:	b093      	sub	sp, #76	; 0x4c
 801c3bc:	af02      	add	r7, sp, #8
 801c3be:	0002      	movs	r2, r0
 801c3c0:	1dfb      	adds	r3, r7, #7
 801c3c2:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801c3c4:	213f      	movs	r1, #63	; 0x3f
 801c3c6:	187b      	adds	r3, r7, r1
 801c3c8:	2202      	movs	r2, #2
 801c3ca:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 801c3cc:	187b      	adds	r3, r7, r1
 801c3ce:	781b      	ldrb	r3, [r3, #0]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d027      	beq.n	801c424 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801c3d4:	4a17      	ldr	r2, [pc, #92]	; (801c434 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 801c3d6:	240c      	movs	r4, #12
 801c3d8:	193b      	adds	r3, r7, r4
 801c3da:	2132      	movs	r1, #50	; 0x32
 801c3dc:	0018      	movs	r0, r3
 801c3de:	f007 f8c5 	bl	802356c <sniprintf>
 801c3e2:	0002      	movs	r2, r0
 801c3e4:	213e      	movs	r1, #62	; 0x3e
 801c3e6:	187b      	adds	r3, r7, r1
 801c3e8:	701a      	strb	r2, [r3, #0]
 801c3ea:	187b      	adds	r3, r7, r1
 801c3ec:	781b      	ldrb	r3, [r3, #0]
 801c3ee:	2b31      	cmp	r3, #49	; 0x31
 801c3f0:	d80d      	bhi.n	801c40e <USBPD_DPM_RequestSecurityRequest+0x56>
 801c3f2:	193b      	adds	r3, r7, r4
 801c3f4:	0018      	movs	r0, r3
 801c3f6:	f7e9 fee9 	bl	80061cc <strlen>
 801c3fa:	193a      	adds	r2, r7, r4
 801c3fc:	1dfb      	adds	r3, r7, #7
 801c3fe:	7819      	ldrb	r1, [r3, #0]
 801c400:	9000      	str	r0, [sp, #0]
 801c402:	0013      	movs	r3, r2
 801c404:	2200      	movs	r2, #0
 801c406:	2006      	movs	r0, #6
 801c408:	f7f6 fad8 	bl	80129bc <USBPD_TRACE_Add>
 801c40c:	e00a      	b.n	801c424 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801c40e:	230c      	movs	r3, #12
 801c410:	18fa      	adds	r2, r7, r3
 801c412:	1dfb      	adds	r3, r7, #7
 801c414:	7819      	ldrb	r1, [r3, #0]
 801c416:	2332      	movs	r3, #50	; 0x32
 801c418:	9300      	str	r3, [sp, #0]
 801c41a:	0013      	movs	r3, r2
 801c41c:	2200      	movs	r2, #0
 801c41e:	2006      	movs	r0, #6
 801c420:	f7f6 facc 	bl	80129bc <USBPD_TRACE_Add>
  return _status;
 801c424:	233f      	movs	r3, #63	; 0x3f
 801c426:	18fb      	adds	r3, r7, r3
 801c428:	781b      	ldrb	r3, [r3, #0]
}
 801c42a:	0018      	movs	r0, r3
 801c42c:	46bd      	mov	sp, r7
 801c42e:	b011      	add	sp, #68	; 0x44
 801c430:	bd90      	pop	{r4, r7, pc}
 801c432:	46c0      	nop			; (mov r8, r8)
 801c434:	08024678 	.word	0x08024678

0801c438 <USBPD_DPM_RequestSRCPDO>:
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @param  RequestedCurrent Requested current (in MA and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSRCPDO(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage, uint16_t RequestedCurrent)
{
 801c438:	b5b0      	push	{r4, r5, r7, lr}
 801c43a:	b094      	sub	sp, #80	; 0x50
 801c43c:	af02      	add	r7, sp, #8
 801c43e:	0005      	movs	r5, r0
 801c440:	000c      	movs	r4, r1
 801c442:	0010      	movs	r0, r2
 801c444:	0019      	movs	r1, r3
 801c446:	1dfb      	adds	r3, r7, #7
 801c448:	1c2a      	adds	r2, r5, #0
 801c44a:	701a      	strb	r2, [r3, #0]
 801c44c:	1dbb      	adds	r3, r7, #6
 801c44e:	1c22      	adds	r2, r4, #0
 801c450:	701a      	strb	r2, [r3, #0]
 801c452:	1d3b      	adds	r3, r7, #4
 801c454:	1c02      	adds	r2, r0, #0
 801c456:	801a      	strh	r2, [r3, #0]
 801c458:	1cbb      	adds	r3, r7, #2
 801c45a:	1c0a      	adds	r2, r1, #0
 801c45c:	801a      	strh	r2, [r3, #0]
	USBPD_StatusTypeDef _status = USBPD_ERROR;
 801c45e:	2547      	movs	r5, #71	; 0x47
 801c460:	197b      	adds	r3, r7, r5
 801c462:	2202      	movs	r2, #2
 801c464:	701a      	strb	r2, [r3, #0]
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;

	/* Initialize RDO object*/
	rdo.d32 = 0;
 801c466:	2300      	movs	r3, #0
 801c468:	643b      	str	r3, [r7, #64]	; 0x40

	USER_SERV_SNK_BuildRequestedRDO(PortNum,IndexSrcPDO, RequestedVoltage, RequestedCurrent, &rdo, &pdo_object);
 801c46a:	1dbb      	adds	r3, r7, #6
 801c46c:	781b      	ldrb	r3, [r3, #0]
 801c46e:	b299      	uxth	r1, r3
 801c470:	1cbb      	adds	r3, r7, #2
 801c472:	881c      	ldrh	r4, [r3, #0]
 801c474:	1d3b      	adds	r3, r7, #4
 801c476:	881a      	ldrh	r2, [r3, #0]
 801c478:	1dfb      	adds	r3, r7, #7
 801c47a:	7818      	ldrb	r0, [r3, #0]
 801c47c:	233c      	movs	r3, #60	; 0x3c
 801c47e:	18fb      	adds	r3, r7, r3
 801c480:	9301      	str	r3, [sp, #4]
 801c482:	2340      	movs	r3, #64	; 0x40
 801c484:	18fb      	adds	r3, r7, r3
 801c486:	9300      	str	r3, [sp, #0]
 801c488:	0023      	movs	r3, r4
 801c48a:	f000 ff3d 	bl	801d308 <USER_SERV_SNK_BuildRequestedRDO>

	/*Send requested rdo to Policy Engine */
	_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801c48e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c492:	197c      	adds	r4, r7, r5
 801c494:	1dfb      	adds	r3, r7, #7
 801c496:	781b      	ldrb	r3, [r3, #0]
 801c498:	0018      	movs	r0, r3
 801c49a:	f7e4 f935 	bl	8000708 <USBPD_PE_Send_Request>
 801c49e:	0003      	movs	r3, r0
 801c4a0:	7023      	strb	r3, [r4, #0]

    /* USER CODE END USBPD_DPM_RequestMessageRequest */
	DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801c4a2:	197b      	adds	r3, r7, r5
 801c4a4:	781b      	ldrb	r3, [r3, #0]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d027      	beq.n	801c4fa <USBPD_DPM_RequestSRCPDO+0xc2>
 801c4aa:	4a17      	ldr	r2, [pc, #92]	; (801c508 <USBPD_DPM_RequestSRCPDO+0xd0>)
 801c4ac:	2408      	movs	r4, #8
 801c4ae:	193b      	adds	r3, r7, r4
 801c4b0:	2132      	movs	r1, #50	; 0x32
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f007 f85a 	bl	802356c <sniprintf>
 801c4b8:	0002      	movs	r2, r0
 801c4ba:	2146      	movs	r1, #70	; 0x46
 801c4bc:	187b      	adds	r3, r7, r1
 801c4be:	701a      	strb	r2, [r3, #0]
 801c4c0:	187b      	adds	r3, r7, r1
 801c4c2:	781b      	ldrb	r3, [r3, #0]
 801c4c4:	2b31      	cmp	r3, #49	; 0x31
 801c4c6:	d80d      	bhi.n	801c4e4 <USBPD_DPM_RequestSRCPDO+0xac>
 801c4c8:	193b      	adds	r3, r7, r4
 801c4ca:	0018      	movs	r0, r3
 801c4cc:	f7e9 fe7e 	bl	80061cc <strlen>
 801c4d0:	193a      	adds	r2, r7, r4
 801c4d2:	1dfb      	adds	r3, r7, #7
 801c4d4:	7819      	ldrb	r1, [r3, #0]
 801c4d6:	9000      	str	r0, [sp, #0]
 801c4d8:	0013      	movs	r3, r2
 801c4da:	2200      	movs	r2, #0
 801c4dc:	2006      	movs	r0, #6
 801c4de:	f7f6 fa6d 	bl	80129bc <USBPD_TRACE_Add>
 801c4e2:	e00a      	b.n	801c4fa <USBPD_DPM_RequestSRCPDO+0xc2>
 801c4e4:	2308      	movs	r3, #8
 801c4e6:	18fa      	adds	r2, r7, r3
 801c4e8:	1dfb      	adds	r3, r7, #7
 801c4ea:	7819      	ldrb	r1, [r3, #0]
 801c4ec:	2332      	movs	r3, #50	; 0x32
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	0013      	movs	r3, r2
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	2006      	movs	r0, #6
 801c4f6:	f7f6 fa61 	bl	80129bc <USBPD_TRACE_Add>
	return _status;
 801c4fa:	2347      	movs	r3, #71	; 0x47
 801c4fc:	18fb      	adds	r3, r7, r3
 801c4fe:	781b      	ldrb	r3, [r3, #0]
}
 801c500:	0018      	movs	r0, r3
 801c502:	46bd      	mov	sp, r7
 801c504:	b012      	add	sp, #72	; 0x48
 801c506:	bdb0      	pop	{r4, r5, r7, pc}
 801c508:	08024224 	.word	0x08024224

0801c50c <BSP_PWR_VBUSGetVoltage>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Voltage measured voltage level (in mV)
  */
__weak uint32_t BSP_PWR_VBUSGetVoltage(uint32_t PortId)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b086      	sub	sp, #24
 801c510:	af02      	add	r7, sp, #8
 801c512:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetVoltage");
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	b2d9      	uxtb	r1, r3
 801c518:	4b0a      	ldr	r3, [pc, #40]	; (801c544 <BSP_PWR_VBUSGetVoltage+0x38>)
 801c51a:	2227      	movs	r2, #39	; 0x27
 801c51c:	9200      	str	r2, [sp, #0]
 801c51e:	2200      	movs	r2, #0
 801c520:	2006      	movs	r0, #6
 801c522:	f7f6 fa4b 	bl	80129bc <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetVoltage */
  uint32_t voltage = 0;
 801c526:	2300      	movs	r3, #0
 801c528:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetVoltage(PortId, &voltage);
 801c52a:	230c      	movs	r3, #12
 801c52c:	18fa      	adds	r2, r7, r3
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	0011      	movs	r1, r2
 801c532:	0018      	movs	r0, r3
 801c534:	f000 f874 	bl	801c620 <BSP_USBPD_PWR_VBUSGetVoltage>
  return voltage;
 801c538:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetVoltage */
}
 801c53a:	0018      	movs	r0, r3
 801c53c:	46bd      	mov	sp, r7
 801c53e:	b004      	add	sp, #16
 801c540:	bd80      	pop	{r7, pc}
 801c542:	46c0      	nop			; (mov r8, r8)
 801c544:	08024818 	.word	0x08024818

0801c548 <BSP_PWR_VBUSGetCurrent>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrent(uint32_t PortId)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b086      	sub	sp, #24
 801c54c:	af02      	add	r7, sp, #8
 801c54e:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrent");
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	b2d9      	uxtb	r1, r3
 801c554:	4b0a      	ldr	r3, [pc, #40]	; (801c580 <BSP_PWR_VBUSGetCurrent+0x38>)
 801c556:	2227      	movs	r2, #39	; 0x27
 801c558:	9200      	str	r2, [sp, #0]
 801c55a:	2200      	movs	r2, #0
 801c55c:	2006      	movs	r0, #6
 801c55e:	f7f6 fa2d 	bl	80129bc <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t current = 0;
 801c562:	2300      	movs	r3, #0
 801c564:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrent(PortId, &current);
 801c566:	230c      	movs	r3, #12
 801c568:	18fa      	adds	r2, r7, r3
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	0011      	movs	r1, r2
 801c56e:	0018      	movs	r0, r3
 801c570:	f000 f892 	bl	801c698 <BSP_USBPD_PWR_VBUSGetCurrent>

  return current;
 801c574:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801c576:	0018      	movs	r0, r3
 801c578:	46bd      	mov	sp, r7
 801c57a:	b004      	add	sp, #16
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	46c0      	nop			; (mov r8, r8)
 801c580:	08024840 	.word	0x08024840

0801c584 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b084      	sub	sp, #16
 801c588:	af00      	add	r7, sp, #0
 801c58a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801c58c:	2300      	movs	r3, #0
 801c58e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	2b01      	cmp	r3, #1
 801c594:	d902      	bls.n	801c59c <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c596:	2302      	movs	r3, #2
 801c598:	425b      	negs	r3, r3
 801c59a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801c59c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801c59e:	0018      	movs	r0, r3
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	b004      	add	sp, #16
 801c5a4:	bd80      	pop	{r7, pc}
	...

0801c5a8 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b086      	sub	sp, #24
 801c5ac:	af02      	add	r7, sp, #8
 801c5ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	2b01      	cmp	r3, #1
 801c5b8:	d903      	bls.n	801c5c2 <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c5ba:	2302      	movs	r3, #2
 801c5bc:	425b      	negs	r3, r3
 801c5be:	60fb      	str	r3, [r7, #12]
 801c5c0:	e008      	b.n	801c5d4 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	b2d9      	uxtb	r1, r3
 801c5c6:	4b06      	ldr	r3, [pc, #24]	; (801c5e0 <BSP_USBPD_PWR_VBUSInit+0x38>)
 801c5c8:	2225      	movs	r2, #37	; 0x25
 801c5ca:	9200      	str	r2, [sp, #0]
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	2006      	movs	r0, #6
 801c5d0:	f7f6 f9f4 	bl	80129bc <USBPD_TRACE_Add>
  }

  return ret;
 801c5d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801c5d6:	0018      	movs	r0, r3
 801c5d8:	46bd      	mov	sp, r7
 801c5da:	b004      	add	sp, #16
 801c5dc:	bd80      	pop	{r7, pc}
 801c5de:	46c0      	nop			; (mov r8, r8)
 801c5e0:	08024a54 	.word	0x08024a54

0801c5e4 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801c5e4:	b580      	push	{r7, lr}
 801c5e6:	b086      	sub	sp, #24
 801c5e8:	af02      	add	r7, sp, #8
 801c5ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c5ec:	230b      	movs	r3, #11
 801c5ee:	425b      	negs	r3, r3
 801c5f0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	2b01      	cmp	r3, #1
 801c5f6:	d902      	bls.n	801c5fe <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c5f8:	2302      	movs	r3, #2
 801c5fa:	425b      	negs	r3, r3
 801c5fc:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	b2d9      	uxtb	r1, r3
 801c602:	4b06      	ldr	r3, [pc, #24]	; (801c61c <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 801c604:	2227      	movs	r2, #39	; 0x27
 801c606:	9200      	str	r2, [sp, #0]
 801c608:	2200      	movs	r2, #0
 801c60a:	2006      	movs	r0, #6
 801c60c:	f7f6 f9d6 	bl	80129bc <USBPD_TRACE_Add>
  return ret;
 801c610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801c612:	0018      	movs	r0, r3
 801c614:	46bd      	mov	sp, r7
 801c616:	b004      	add	sp, #16
 801c618:	bd80      	pop	{r7, pc}
 801c61a:	46c0      	nop			; (mov r8, r8)
 801c61c:	08024a7c 	.word	0x08024a7c

0801c620 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b086      	sub	sp, #24
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid */
  int32_t ret = BSP_ERROR_NONE;
 801c62a:	2300      	movs	r3, #0
 801c62c:	617b      	str	r3, [r7, #20]
  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	2b01      	cmp	r3, #1
 801c632:	d802      	bhi.n	801c63a <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801c634:	683b      	ldr	r3, [r7, #0]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d106      	bne.n	801c648 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  {
	  ret = BSP_ERROR_WRONG_PARAM;
 801c63a:	2302      	movs	r3, #2
 801c63c:	425b      	negs	r3, r3
 801c63e:	617b      	str	r3, [r7, #20]
	  *pVoltage = 0;
 801c640:	683b      	ldr	r3, [r7, #0]
 801c642:	2200      	movs	r2, #0
 801c644:	601a      	str	r2, [r3, #0]
 801c646:	e017      	b.n	801c678 <BSP_USBPD_PWR_VBUSGetVoltage+0x58>
  {
	  uint32_t vadc;
	  uint32_t vsense;

	  //Calculate vadc(mV) on ADC pin based on ADC resolution and reference voltage VDDA
	  vadc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c648:	4b0e      	ldr	r3, [pc, #56]	; (801c684 <BSP_USBPD_PWR_VBUSGetVoltage+0x64>)
 801c64a:	881b      	ldrh	r3, [r3, #0]
 801c64c:	b29b      	uxth	r3, r3
 801c64e:	001a      	movs	r2, r3
 801c650:	4b0d      	ldr	r3, [pc, #52]	; (801c688 <BSP_USBPD_PWR_VBUSGetVoltage+0x68>)
 801c652:	4353      	muls	r3, r2
 801c654:	490d      	ldr	r1, [pc, #52]	; (801c68c <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 801c656:	0018      	movs	r0, r3
 801c658:	f7e9 fdca 	bl	80061f0 <__udivsi3>
 801c65c:	0003      	movs	r3, r0
 801c65e:	613b      	str	r3, [r7, #16]
			  LL_ADC_RESOLUTION_12B); /* mV */


	  /* Calculate VBUS on PD_sense line*/
	  /* Value is multiplied by 5.97 (Divider R_B/R_A (40.2K/200K) for VSENSE) */
	  vsense = vadc * (R_A + R_B)/R_B;
 801c660:	693b      	ldr	r3, [r7, #16]
 801c662:	4a0b      	ldr	r2, [pc, #44]	; (801c690 <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 801c664:	4353      	muls	r3, r2
 801c666:	490b      	ldr	r1, [pc, #44]	; (801c694 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 801c668:	0018      	movs	r0, r3
 801c66a:	f7e9 fdc1 	bl	80061f0 <__udivsi3>
 801c66e:	0003      	movs	r3, r0
 801c670:	60fb      	str	r3, [r7, #12]
	  *pVoltage = vsense;
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	68fa      	ldr	r2, [r7, #12]
 801c676:	601a      	str	r2, [r3, #0]
  }
  return ret;
 801c678:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801c67a:	0018      	movs	r0, r3
 801c67c:	46bd      	mov	sp, r7
 801c67e:	b006      	add	sp, #24
 801c680:	bd80      	pop	{r7, pc}
 801c682:	46c0      	nop			; (mov r8, r8)
 801c684:	2000033c 	.word	0x2000033c
 801c688:	00000ce4 	.word	0x00000ce4
 801c68c:	00000fff 	.word	0x00000fff
 801c690:	000399e0 	.word	0x000399e0
 801c694:	00008ca0 	.word	0x00008ca0

0801c698 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 801c698:	b580      	push	{r7, lr}
 801c69a:	b086      	sub	sp, #24
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
 801c6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	2b01      	cmp	r3, #1
 801c6a6:	d802      	bhi.n	801c6ae <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 801c6a8:	683b      	ldr	r3, [r7, #0]
 801c6aa:	2b00      	cmp	r3, #0
 801c6ac:	d106      	bne.n	801c6bc <BSP_USBPD_PWR_VBUSGetCurrent+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c6ae:	2302      	movs	r3, #2
 801c6b0:	425b      	negs	r3, r3
 801c6b2:	617b      	str	r3, [r7, #20]
    *pCurrent = 0;
 801c6b4:	683b      	ldr	r3, [r7, #0]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	601a      	str	r2, [r3, #0]
 801c6ba:	e020      	b.n	801c6fe <BSP_USBPD_PWR_VBUSGetCurrent+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c6bc:	4b12      	ldr	r3, [pc, #72]	; (801c708 <BSP_USBPD_PWR_VBUSGetCurrent+0x70>)
 801c6be:	889b      	ldrh	r3, [r3, #4]
 801c6c0:	b29b      	uxth	r3, r3
 801c6c2:	001a      	movs	r2, r3
 801c6c4:	4b11      	ldr	r3, [pc, #68]	; (801c70c <BSP_USBPD_PWR_VBUSGetCurrent+0x74>)
 801c6c6:	4353      	muls	r3, r2
 801c6c8:	4911      	ldr	r1, [pc, #68]	; (801c710 <BSP_USBPD_PWR_VBUSGetCurrent+0x78>)
 801c6ca:	0018      	movs	r0, r3
 801c6cc:	f7e9 fd90 	bl	80061f0 <__udivsi3>
 801c6d0:	0003      	movs	r3, r0
 801c6d2:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_2], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate isense on PD_sense based on R_SENSE and G of amplifier
	 isense = vout_adc * 1000 / (G_SENSE*R_SENSE_MOHMS); /* mA */
 801c6d4:	693a      	ldr	r2, [r7, #16]
 801c6d6:	0013      	movs	r3, r2
 801c6d8:	015b      	lsls	r3, r3, #5
 801c6da:	1a9b      	subs	r3, r3, r2
 801c6dc:	009b      	lsls	r3, r3, #2
 801c6de:	189b      	adds	r3, r3, r2
 801c6e0:	00db      	lsls	r3, r3, #3
 801c6e2:	001a      	movs	r2, r3
 801c6e4:	2396      	movs	r3, #150	; 0x96
 801c6e6:	0099      	lsls	r1, r3, #2
 801c6e8:	0010      	movs	r0, r2
 801c6ea:	f7e9 fd81 	bl	80061f0 <__udivsi3>
 801c6ee:	0003      	movs	r3, r0
 801c6f0:	60fb      	str	r3, [r7, #12]
	*pCurrent = isense;
 801c6f2:	68fa      	ldr	r2, [r7, #12]
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c6f8:	230b      	movs	r3, #11
 801c6fa:	425b      	negs	r3, r3
 801c6fc:	617b      	str	r3, [r7, #20]
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  //PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
  return ret;
 801c6fe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801c700:	0018      	movs	r0, r3
 801c702:	46bd      	mov	sp, r7
 801c704:	b006      	add	sp, #24
 801c706:	bd80      	pop	{r7, pc}
 801c708:	2000033c 	.word	0x2000033c
 801c70c:	00000ce4 	.word	0x00000ce4
 801c710:	00000fff 	.word	0x00000fff

0801c714 <BSP_USBPD_PWR_VBUSGetCurrentOCP>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrentOCP(uint32_t Instance, int32_t *pCurrentOCP)
{
 801c714:	b580      	push	{r7, lr}
 801c716:	b086      	sub	sp, #24
 801c718:	af00      	add	r7, sp, #0
 801c71a:	6078      	str	r0, [r7, #4]
 801c71c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrentOCP))
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	2b01      	cmp	r3, #1
 801c722:	d802      	bhi.n	801c72a <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x16>
 801c724:	683b      	ldr	r3, [r7, #0]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d106      	bne.n	801c738 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801c72a:	2302      	movs	r3, #2
 801c72c:	425b      	negs	r3, r3
 801c72e:	617b      	str	r3, [r7, #20]
    *pCurrentOCP = 0;
 801c730:	683b      	ldr	r3, [r7, #0]
 801c732:	2200      	movs	r2, #0
 801c734:	601a      	str	r2, [r3, #0]
 801c736:	e020      	b.n	801c77a <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801c738:	4b12      	ldr	r3, [pc, #72]	; (801c784 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x70>)
 801c73a:	885b      	ldrh	r3, [r3, #2]
 801c73c:	b29b      	uxth	r3, r3
 801c73e:	001a      	movs	r2, r3
 801c740:	4b11      	ldr	r3, [pc, #68]	; (801c788 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x74>)
 801c742:	4353      	muls	r3, r2
 801c744:	4911      	ldr	r1, [pc, #68]	; (801c78c <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x78>)
 801c746:	0018      	movs	r0, r3
 801c748:	f7e9 fd52 	bl	80061f0 <__udivsi3>
 801c74c:	0003      	movs	r3, r0
 801c74e:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_1], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate OCP current on PD_OCP line based on R_OCP and G of amplifier INA301
	 isense = vout_adc * 1000 / (G_OCP*R_OCP_MOHMS); /* mA */
 801c750:	693a      	ldr	r2, [r7, #16]
 801c752:	0013      	movs	r3, r2
 801c754:	015b      	lsls	r3, r3, #5
 801c756:	1a9b      	subs	r3, r3, r2
 801c758:	009b      	lsls	r3, r3, #2
 801c75a:	189b      	adds	r3, r3, r2
 801c75c:	00db      	lsls	r3, r3, #3
 801c75e:	001a      	movs	r2, r3
 801c760:	23fa      	movs	r3, #250	; 0xfa
 801c762:	0059      	lsls	r1, r3, #1
 801c764:	0010      	movs	r0, r2
 801c766:	f7e9 fd43 	bl	80061f0 <__udivsi3>
 801c76a:	0003      	movs	r3, r0
 801c76c:	60fb      	str	r3, [r7, #12]
	*pCurrentOCP = isense;
 801c76e:	68fa      	ldr	r2, [r7, #12]
 801c770:	683b      	ldr	r3, [r7, #0]
 801c772:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801c774:	230b      	movs	r3, #11
 801c776:	425b      	negs	r3, r3
 801c778:	617b      	str	r3, [r7, #20]
  }

  return ret;
 801c77a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801c77c:	0018      	movs	r0, r3
 801c77e:	46bd      	mov	sp, r7
 801c780:	b006      	add	sp, #24
 801c782:	bd80      	pop	{r7, pc}
 801c784:	2000033c 	.word	0x2000033c
 801c788:	00000ce4 	.word	0x00000ce4
 801c78c:	00000fff 	.word	0x00000fff

0801c790 <BSP_PWR_VBUSGetCurrentOCP>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrentOCP(uint32_t PortId)
{
 801c790:	b580      	push	{r7, lr}
 801c792:	b084      	sub	sp, #16
 801c794:	af00      	add	r7, sp, #0
 801c796:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrentOCP");
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t currentOCP = 0;
 801c798:	2300      	movs	r3, #0
 801c79a:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrentOCP(PortId, &currentOCP);
 801c79c:	230c      	movs	r3, #12
 801c79e:	18fa      	adds	r2, r7, r3
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	0011      	movs	r1, r2
 801c7a4:	0018      	movs	r0, r3
 801c7a6:	f7ff ffb5 	bl	801c714 <BSP_USBPD_PWR_VBUSGetCurrentOCP>

  return currentOCP;
 801c7aa:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801c7ac:	0018      	movs	r0, r3
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	b004      	add	sp, #16
 801c7b2:	bd80      	pop	{r7, pc}

0801c7b4 <USBPD_USER_SERV_StoreSRCPDO>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_USER_SERV_StoreSRCPDO(uint8_t PortNum, uint8_t *Ptr, uint32_t Size)
{
 801c7b4:	b580      	push	{r7, lr}
 801c7b6:	b086      	sub	sp, #24
 801c7b8:	af00      	add	r7, sp, #0
 801c7ba:	60b9      	str	r1, [r7, #8]
 801c7bc:	607a      	str	r2, [r7, #4]
 801c7be:	210f      	movs	r1, #15
 801c7c0:	187b      	adds	r3, r7, r1
 801c7c2:	1c02      	adds	r2, r0, #0
 801c7c4:	701a      	strb	r2, [r3, #0]
  /*!< Storage of Received Source PDO values */
  if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	2b1c      	cmp	r3, #28
 801c7ca:	d82c      	bhi.n	801c826 <USBPD_USER_SERV_StoreSRCPDO+0x72>
  {
    uint8_t *rdo;
    DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4U);
 801c7cc:	187b      	adds	r3, r7, r1
 801c7ce:	781a      	ldrb	r2, [r3, #0]
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	0899      	lsrs	r1, r3, #2
 801c7d4:	4816      	ldr	r0, [pc, #88]	; (801c830 <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801c7d6:	0013      	movs	r3, r2
 801c7d8:	009b      	lsls	r3, r3, #2
 801c7da:	189b      	adds	r3, r3, r2
 801c7dc:	011b      	lsls	r3, r3, #4
 801c7de:	18c3      	adds	r3, r0, r3
 801c7e0:	331c      	adds	r3, #28
 801c7e2:	6019      	str	r1, [r3, #0]
    /* Copy PDO data in DPM Handle field */
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	617b      	str	r3, [r7, #20]
 801c7e8:	e018      	b.n	801c81c <USBPD_USER_SERV_StoreSRCPDO+0x68>
    {
      rdo = (uint8_t *)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 801c7ea:	230f      	movs	r3, #15
 801c7ec:	18fb      	adds	r3, r7, r3
 801c7ee:	781a      	ldrb	r2, [r3, #0]
 801c7f0:	0013      	movs	r3, r2
 801c7f2:	009b      	lsls	r3, r3, #2
 801c7f4:	189b      	adds	r3, r3, r2
 801c7f6:	009b      	lsls	r3, r3, #2
 801c7f8:	697a      	ldr	r2, [r7, #20]
 801c7fa:	189b      	adds	r3, r3, r2
 801c7fc:	009a      	lsls	r2, r3, #2
 801c7fe:	4b0c      	ldr	r3, [pc, #48]	; (801c830 <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801c800:	18d3      	adds	r3, r2, r3
 801c802:	613b      	str	r3, [r7, #16]
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801c804:	697b      	ldr	r3, [r7, #20]
 801c806:	009b      	lsls	r3, r3, #2
 801c808:	68ba      	ldr	r2, [r7, #8]
 801c80a:	18d1      	adds	r1, r2, r3
 801c80c:	693b      	ldr	r3, [r7, #16]
 801c80e:	2204      	movs	r2, #4
 801c810:	0018      	movs	r0, r3
 801c812:	f006 ffb3 	bl	802377c <memcpy>
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801c816:	697b      	ldr	r3, [r7, #20]
 801c818:	3301      	adds	r3, #1
 801c81a:	617b      	str	r3, [r7, #20]
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	089b      	lsrs	r3, r3, #2
 801c820:	697a      	ldr	r2, [r7, #20]
 801c822:	429a      	cmp	r2, r3
 801c824:	d3e1      	bcc.n	801c7ea <USBPD_USER_SERV_StoreSRCPDO+0x36>
    }
  }
}
 801c826:	46c0      	nop			; (mov r8, r8)
 801c828:	46bd      	mov	sp, r7
 801c82a:	b006      	add	sp, #24
 801c82c:	bd80      	pop	{r7, pc}
 801c82e:	46c0      	nop			; (mov r8, r8)
 801c830:	20002f48 	.word	0x20002f48

0801c834 <USBPD_USER_SERV_EvaluateCapa>:
  * @retval None
  */
void USBPD_USER_SERV_EvaluateCapa(uint8_t PortNum,
                                  uint32_t *PtrRequestData,
                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801c834:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c836:	b0ab      	sub	sp, #172	; 0xac
 801c838:	af02      	add	r7, sp, #8
 801c83a:	60b9      	str	r1, [r7, #8]
 801c83c:	607a      	str	r2, [r7, #4]
 801c83e:	240f      	movs	r4, #15
 801c840:	193b      	adds	r3, r7, r4
 801c842:	1c02      	adds	r2, r0, #0
 801c844:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801c846:	193b      	adds	r3, r7, r4
 801c848:	781a      	ldrb	r2, [r3, #0]
 801c84a:	0013      	movs	r3, r2
 801c84c:	009b      	lsls	r3, r3, #2
 801c84e:	189b      	adds	r3, r3, r2
 801c850:	011b      	lsls	r3, r3, #4
 801c852:	4a66      	ldr	r2, [pc, #408]	; (801c9ec <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801c854:	189b      	adds	r3, r3, r2
 801c856:	269c      	movs	r6, #156	; 0x9c
 801c858:	19ba      	adds	r2, r7, r6
 801c85a:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801c85c:	193b      	adds	r3, r7, r4
 801c85e:	781b      	ldrb	r3, [r3, #0]
 801c860:	2274      	movs	r2, #116	; 0x74
 801c862:	435a      	muls	r2, r3
 801c864:	4b62      	ldr	r3, [pc, #392]	; (801c9f0 <USBPD_USER_SERV_EvaluateCapa+0x1bc>)
 801c866:	18d3      	adds	r3, r2, r3
 801c868:	2298      	movs	r2, #152	; 0x98
 801c86a:	18b9      	adds	r1, r7, r2
 801c86c:	600b      	str	r3, [r1, #0]
  uint32_t pdoindex;
  uint32_t size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 0;
 801c86e:	2178      	movs	r1, #120	; 0x78
 801c870:	187b      	adds	r3, r7, r1
 801c872:	2200      	movs	r2, #0
 801c874:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 0;
 801c876:	187b      	adds	r3, r7, r1
 801c878:	2200      	movs	r2, #0
 801c87a:	609a      	str	r2, [r3, #8]

  /* Find the Pdo index for the requested voltage, depending on the wanted method */
  pdoindex = USER_SERV_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USER_SERV_PDO_Sel_Method);
 801c87c:	193b      	adds	r3, r7, r4
 801c87e:	7818      	ldrb	r0, [r3, #0]
 801c880:	4b5c      	ldr	r3, [pc, #368]	; (801c9f4 <USBPD_USER_SERV_EvaluateCapa+0x1c0>)
 801c882:	781a      	ldrb	r2, [r3, #0]
 801c884:	187b      	adds	r3, r7, r1
 801c886:	0019      	movs	r1, r3
 801c888:	f000 fa56 	bl	801cd38 <USER_SERV_FindVoltageIndex>
 801c88c:	0003      	movs	r3, r0
 801c88e:	2194      	movs	r1, #148	; 0x94
 801c890:	1878      	adds	r0, r7, r1
 801c892:	6003      	str	r3, [r0, #0]

  /* Initialize RDO */
  rdo.d32 = 0;
 801c894:	2300      	movs	r3, #0
 801c896:	258c      	movs	r5, #140	; 0x8c
 801c898:	1978      	adds	r0, r7, r5
 801c89a:	6003      	str	r3, [r0, #0]

  /* If no valid SNK PDO or if no SRC PDO match found
      (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND */
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 801c89c:	19b8      	adds	r0, r7, r6
 801c89e:	6803      	ldr	r3, [r0, #0]
 801c8a0:	69db      	ldr	r3, [r3, #28]
 801c8a2:	1879      	adds	r1, r7, r1
 801c8a4:	680a      	ldr	r2, [r1, #0]
 801c8a6:	429a      	cmp	r2, r3
 801c8a8:	d200      	bcs.n	801c8ac <USBPD_USER_SERV_EvaluateCapa+0x78>
 801c8aa:	e085      	b.n	801c9b8 <USBPD_USER_SERV_EvaluateCapa+0x184>
  {
#if defined(_TRACE)
    uint8_t msg[] = "USBPD_USER_SERV_EvaluateCapa: could not find desired voltage";
 801c8ac:	2114      	movs	r1, #20
 801c8ae:	187a      	adds	r2, r7, r1
 801c8b0:	4b51      	ldr	r3, [pc, #324]	; (801c9f8 <USBPD_USER_SERV_EvaluateCapa+0x1c4>)
 801c8b2:	0010      	movs	r0, r2
 801c8b4:	0019      	movs	r1, r3
 801c8b6:	233d      	movs	r3, #61	; 0x3d
 801c8b8:	001a      	movs	r2, r3
 801c8ba:	f006 ff5f 	bl	802377c <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801c8be:	2114      	movs	r1, #20
 801c8c0:	187a      	adds	r2, r7, r1
 801c8c2:	193b      	adds	r3, r7, r4
 801c8c4:	7819      	ldrb	r1, [r3, #0]
 801c8c6:	233d      	movs	r3, #61	; 0x3d
 801c8c8:	9300      	str	r3, [sp, #0]
 801c8ca:	0013      	movs	r3, r2
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	2006      	movs	r0, #6
 801c8d0:	f7f6 f874 	bl	80129bc <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801c8d4:	19b9      	adds	r1, r7, r6
 801c8d6:	680b      	ldr	r3, [r1, #0]
 801c8d8:	681b      	ldr	r3, [r3, #0]
 801c8da:	2090      	movs	r0, #144	; 0x90
 801c8dc:	1839      	adds	r1, r7, r0
 801c8de:	600b      	str	r3, [r1, #0]
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801c8e0:	2174      	movs	r1, #116	; 0x74
 801c8e2:	1879      	adds	r1, r7, r1
 801c8e4:	2358      	movs	r3, #88	; 0x58
 801c8e6:	18fa      	adds	r2, r7, r3
 801c8e8:	193b      	adds	r3, r7, r4
 801c8ea:	7818      	ldrb	r0, [r3, #0]
 801c8ec:	000b      	movs	r3, r1
 801c8ee:	2101      	movs	r1, #1
 801c8f0:	f7fe fb5c 	bl	801afac <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 801c8f4:	2158      	movs	r1, #88	; 0x58
 801c8f6:	187b      	adds	r3, r7, r1
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	657b      	str	r3, [r7, #84]	; 0x54
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801c8fc:	238f      	movs	r3, #143	; 0x8f
 801c8fe:	18fb      	adds	r3, r7, r3
 801c900:	781a      	ldrb	r2, [r3, #0]
 801c902:	2170      	movs	r1, #112	; 0x70
 801c904:	438a      	bics	r2, r1
 801c906:	1c11      	adds	r1, r2, #0
 801c908:	2210      	movs	r2, #16
 801c90a:	430a      	orrs	r2, r1
 801c90c:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c90e:	2090      	movs	r0, #144	; 0x90
 801c910:	183b      	adds	r3, r7, r0
 801c912:	881b      	ldrh	r3, [r3, #0]
 801c914:	059b      	lsls	r3, r3, #22
 801c916:	0d9b      	lsrs	r3, r3, #22
 801c918:	b29b      	uxth	r3, r3
 801c91a:	059b      	lsls	r3, r3, #22
 801c91c:	0d9b      	lsrs	r3, r3, #22
 801c91e:	029b      	lsls	r3, r3, #10
 801c920:	1979      	adds	r1, r7, r5
 801c922:	680a      	ldr	r2, [r1, #0]
 801c924:	4935      	ldr	r1, [pc, #212]	; (801c9fc <USBPD_USER_SERV_EvaluateCapa+0x1c8>)
 801c926:	400a      	ands	r2, r1
 801c928:	4313      	orrs	r3, r2
 801c92a:	1979      	adds	r1, r7, r5
 801c92c:	600b      	str	r3, [r1, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801c92e:	183b      	adds	r3, r7, r0
 801c930:	881b      	ldrh	r3, [r3, #0]
 801c932:	059b      	lsls	r3, r3, #22
 801c934:	0d9b      	lsrs	r3, r3, #22
 801c936:	b29a      	uxth	r2, r3
 801c938:	197b      	adds	r3, r7, r5
 801c93a:	0592      	lsls	r2, r2, #22
 801c93c:	0d90      	lsrs	r0, r2, #22
 801c93e:	881a      	ldrh	r2, [r3, #0]
 801c940:	0a92      	lsrs	r2, r2, #10
 801c942:	0292      	lsls	r2, r2, #10
 801c944:	1c11      	adds	r1, r2, #0
 801c946:	1c02      	adds	r2, r0, #0
 801c948:	430a      	orrs	r2, r1
 801c94a:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1U;
 801c94c:	208f      	movs	r0, #143	; 0x8f
 801c94e:	183b      	adds	r3, r7, r0
 801c950:	781a      	ldrb	r2, [r3, #0]
 801c952:	2104      	movs	r1, #4
 801c954:	430a      	orrs	r2, r1
 801c956:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801c958:	2157      	movs	r1, #87	; 0x57
 801c95a:	187b      	adds	r3, r7, r1
 801c95c:	781b      	ldrb	r3, [r3, #0]
 801c95e:	075b      	lsls	r3, r3, #29
 801c960:	0fdb      	lsrs	r3, r3, #31
 801c962:	b2da      	uxtb	r2, r3
 801c964:	183b      	adds	r3, r7, r0
 801c966:	2101      	movs	r1, #1
 801c968:	400a      	ands	r2, r1
 801c96a:	1890      	adds	r0, r2, r2
 801c96c:	781a      	ldrb	r2, [r3, #0]
 801c96e:	2102      	movs	r1, #2
 801c970:	438a      	bics	r2, r1
 801c972:	1c11      	adds	r1, r2, #0
 801c974:	1c02      	adds	r2, r0, #0
 801c976:	430a      	orrs	r2, r1
 801c978:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801c97a:	193b      	adds	r3, r7, r4
 801c97c:	781a      	ldrb	r2, [r3, #0]
 801c97e:	2398      	movs	r3, #152	; 0x98
 801c980:	18fb      	adds	r3, r7, r3
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	6859      	ldr	r1, [r3, #4]
 801c986:	4819      	ldr	r0, [pc, #100]	; (801c9ec <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801c988:	0013      	movs	r3, r2
 801c98a:	009b      	lsls	r3, r3, #2
 801c98c:	189b      	adds	r3, r3, r2
 801c98e:	011b      	lsls	r3, r3, #4
 801c990:	18c3      	adds	r3, r0, r3
 801c992:	334c      	adds	r3, #76	; 0x4c
 801c994:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801c996:	197b      	adds	r3, r7, r5
 801c998:	681a      	ldr	r2, [r3, #0]
 801c99a:	19bb      	adds	r3, r7, r6
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	63da      	str	r2, [r3, #60]	; 0x3c
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	601a      	str	r2, [r3, #0]
    *PtrRequestData = rdo.d32;
 801c9a6:	197b      	adds	r3, r7, r5
 801c9a8:	681a      	ldr	r2, [r3, #0]
 801c9aa:	68bb      	ldr	r3, [r7, #8]
 801c9ac:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000U;
 801c9ae:	19bb      	adds	r3, r7, r6
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	4a13      	ldr	r2, [pc, #76]	; (801ca00 <USBPD_USER_SERV_EvaluateCapa+0x1cc>)
 801c9b4:	649a      	str	r2, [r3, #72]	; 0x48
 801c9b6:	e015      	b.n	801c9e4 <USBPD_USER_SERV_EvaluateCapa+0x1b0>
    return;
  }

  USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails, &rdo, PtrPowerObjectType);
 801c9b8:	2394      	movs	r3, #148	; 0x94
 801c9ba:	18fb      	adds	r3, r7, r3
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	b2d9      	uxtb	r1, r3
 801c9c0:	238c      	movs	r3, #140	; 0x8c
 801c9c2:	18fc      	adds	r4, r7, r3
 801c9c4:	2378      	movs	r3, #120	; 0x78
 801c9c6:	18fa      	adds	r2, r7, r3
 801c9c8:	230f      	movs	r3, #15
 801c9ca:	18fb      	adds	r3, r7, r3
 801c9cc:	7818      	ldrb	r0, [r3, #0]
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	9300      	str	r3, [sp, #0]
 801c9d2:	0023      	movs	r3, r4
 801c9d4:	f000 faaa 	bl	801cf2c <USER_SERV_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 801c9d8:	239c      	movs	r3, #156	; 0x9c
 801c9da:	18fb      	adds	r3, r7, r3
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c9e0:	68bb      	ldr	r3, [r7, #8]
 801c9e2:	601a      	str	r2, [r3, #0]
}
 801c9e4:	46bd      	mov	sp, r7
 801c9e6:	b029      	add	sp, #164	; 0xa4
 801c9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9ea:	46c0      	nop			; (mov r8, r8)
 801c9ec:	20002f48 	.word	0x20002f48
 801c9f0:	2000010c 	.word	0x2000010c
 801c9f4:	20002f44 	.word	0x20002f44
 801c9f8:	08024d84 	.word	0x08024d84
 801c9fc:	fff003ff 	.word	0xfff003ff
 801ca00:	00001388 	.word	0x00001388

0801ca04 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>:
  */
uint32_t USER_SERV_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum,
                                                      uint32_t SrcPDO,
                                                      uint32_t *PtrRequestedVoltage,
                                                      uint32_t *PtrRequestedPower)
{
 801ca04:	b590      	push	{r4, r7, lr}
 801ca06:	b09b      	sub	sp, #108	; 0x6c
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	60b9      	str	r1, [r7, #8]
 801ca0c:	607a      	str	r2, [r7, #4]
 801ca0e:	603b      	str	r3, [r7, #0]
 801ca10:	240f      	movs	r4, #15
 801ca12:	193b      	adds	r3, r7, r4
 801ca14:	1c02      	adds	r2, r0, #0
 801ca16:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef srcpdo;
  USBPD_PDO_TypeDef snkpdo;
  uint32_t match = USBPD_FALSE;
 801ca18:	2300      	movs	r3, #0
 801ca1a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t currentrequestedpower;
  uint32_t maxrequestedvoltage;
  uint32_t currentrequestedvoltage;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)snkpdo_array, &nbsnkpdo);
 801ca1c:	2330      	movs	r3, #48	; 0x30
 801ca1e:	18f9      	adds	r1, r7, r3
 801ca20:	2314      	movs	r3, #20
 801ca22:	18fa      	adds	r2, r7, r3
 801ca24:	193b      	adds	r3, r7, r4
 801ca26:	7818      	ldrb	r0, [r3, #0]
 801ca28:	000b      	movs	r3, r1
 801ca2a:	2101      	movs	r1, #1
 801ca2c:	f7fe fabe 	bl	801afac <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 801ca30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d101      	bne.n	801ca3a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x36>
  {
    return (USBPD_FALSE);
 801ca36:	2300      	movs	r3, #0
 801ca38:	e179      	b.n	801cd2e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 801ca3a:	2300      	movs	r3, #0
 801ca3c:	663b      	str	r3, [r7, #96]	; 0x60
  maxrequestedvoltage  = 0;
 801ca3e:	2300      	movs	r3, #0
 801ca40:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 801ca42:	68bb      	ldr	r3, [r7, #8]
 801ca44:	63bb      	str	r3, [r7, #56]	; 0x38
  switch (srcpdo.GenericPDO.PowerObject)
 801ca46:	233b      	movs	r3, #59	; 0x3b
 801ca48:	18fb      	adds	r3, r7, r3
 801ca4a:	781b      	ldrb	r3, [r3, #0]
 801ca4c:	061b      	lsls	r3, r3, #24
 801ca4e:	0f9b      	lsrs	r3, r3, #30
 801ca50:	b2db      	uxtb	r3, r3
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d003      	beq.n	801ca5e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x5a>
 801ca56:	2b03      	cmp	r3, #3
 801ca58:	d100      	bne.n	801ca5c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x58>
 801ca5a:	e06c      	b.n	801cb36 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x132>
 801ca5c:	e159      	b.n	801cd12 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30e>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
    {
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 801ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca60:	031b      	lsls	r3, r3, #12
 801ca62:	0d9b      	lsrs	r3, r3, #22
 801ca64:	b29a      	uxth	r2, r3
 801ca66:	2342      	movs	r3, #66	; 0x42
 801ca68:	18fb      	adds	r3, r7, r3
 801ca6a:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801ca6c:	2338      	movs	r3, #56	; 0x38
 801ca6e:	18fb      	adds	r3, r7, r3
 801ca70:	881b      	ldrh	r3, [r3, #0]
 801ca72:	059b      	lsls	r3, r3, #22
 801ca74:	0d9b      	lsrs	r3, r3, #22
 801ca76:	b29a      	uxth	r2, r3
 801ca78:	2340      	movs	r3, #64	; 0x40
 801ca7a:	18fb      	adds	r3, r7, r3
 801ca7c:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801ca7e:	2352      	movs	r3, #82	; 0x52
 801ca80:	18fb      	adds	r3, r7, r3
 801ca82:	2200      	movs	r2, #0
 801ca84:	801a      	strh	r2, [r3, #0]
 801ca86:	e04f      	b.n	801cb28 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x124>
      {
        currentrequestedpower = 0;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801ca90:	2352      	movs	r3, #82	; 0x52
 801ca92:	18fb      	adds	r3, r7, r3
 801ca94:	881a      	ldrh	r2, [r3, #0]
 801ca96:	2314      	movs	r3, #20
 801ca98:	18fb      	adds	r3, r7, r3
 801ca9a:	0092      	lsls	r2, r2, #2
 801ca9c:	58d3      	ldr	r3, [r2, r3]
 801ca9e:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801caa0:	2337      	movs	r3, #55	; 0x37
 801caa2:	18fb      	adds	r3, r7, r3
 801caa4:	781b      	ldrb	r3, [r3, #0]
 801caa6:	061b      	lsls	r3, r3, #24
 801caa8:	0f9b      	lsrs	r3, r3, #30
 801caaa:	b2db      	uxtb	r3, r3
 801caac:	2b00      	cmp	r3, #0
 801caae:	d128      	bne.n	801cb02 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0xfe>
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 801cab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cab2:	031b      	lsls	r3, r3, #12
 801cab4:	0d9b      	lsrs	r3, r3, #22
 801cab6:	b29a      	uxth	r2, r3
 801cab8:	213e      	movs	r1, #62	; 0x3e
 801caba:	187b      	adds	r3, r7, r1
 801cabc:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 801cabe:	2334      	movs	r3, #52	; 0x34
 801cac0:	18fb      	adds	r3, r7, r3
 801cac2:	881b      	ldrh	r3, [r3, #0]
 801cac4:	059b      	lsls	r3, r3, #22
 801cac6:	0d9b      	lsrs	r3, r3, #22
 801cac8:	b29a      	uxth	r2, r3
 801caca:	203c      	movs	r0, #60	; 0x3c
 801cacc:	183b      	adds	r3, r7, r0
 801cace:	801a      	strh	r2, [r3, #0]

               Requested Voltage: SNK Voltage
               Requested Op Current: SNK Op Current
               Requested Max Current: SNK Op Current
            */
            if ((snkvoltage50mv == srcvoltage50mv) && (snkopcurrent10ma <= srcmaxcurrent10ma))
 801cad0:	187a      	adds	r2, r7, r1
 801cad2:	2342      	movs	r3, #66	; 0x42
 801cad4:	18fb      	adds	r3, r7, r3
 801cad6:	8812      	ldrh	r2, [r2, #0]
 801cad8:	881b      	ldrh	r3, [r3, #0]
 801cada:	429a      	cmp	r2, r3
 801cadc:	d113      	bne.n	801cb06 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
 801cade:	183a      	adds	r2, r7, r0
 801cae0:	2340      	movs	r3, #64	; 0x40
 801cae2:	18fb      	adds	r3, r7, r3
 801cae4:	8812      	ldrh	r2, [r2, #0]
 801cae6:	881b      	ldrh	r3, [r3, #0]
 801cae8:	429a      	cmp	r2, r3
 801caea:	d80c      	bhi.n	801cb06 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2U; /* To get value in mW */
 801caec:	187b      	adds	r3, r7, r1
 801caee:	881b      	ldrh	r3, [r3, #0]
 801caf0:	183a      	adds	r2, r7, r0
 801caf2:	8812      	ldrh	r2, [r2, #0]
 801caf4:	4353      	muls	r3, r2
 801caf6:	085b      	lsrs	r3, r3, #1
 801caf8:	65fb      	str	r3, [r7, #92]	; 0x5c
              currentrequestedvoltage = snkvoltage50mv;
 801cafa:	187b      	adds	r3, r7, r1
 801cafc:	881b      	ldrh	r3, [r3, #0]
 801cafe:	657b      	str	r3, [r7, #84]	; 0x54
            }
            break;
 801cb00:	e001      	b.n	801cb06 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
          }
          /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
 801cb02:	46c0      	nop			; (mov r8, r8)
 801cb04:	e000      	b.n	801cb08 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x104>
            break;
 801cb06:	46c0      	nop			; (mov r8, r8)

          default:
            break;
        }

        if (currentrequestedpower > maxrequestedpower)
 801cb08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cb0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cb0c:	429a      	cmp	r2, r3
 801cb0e:	d905      	bls.n	801cb1c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x118>
        {
          match = USBPD_TRUE;
 801cb10:	2301      	movs	r3, #1
 801cb12:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801cb14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cb16:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801cb18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cb1a:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cb1c:	2152      	movs	r1, #82	; 0x52
 801cb1e:	187b      	adds	r3, r7, r1
 801cb20:	881a      	ldrh	r2, [r3, #0]
 801cb22:	187b      	adds	r3, r7, r1
 801cb24:	3201      	adds	r2, #1
 801cb26:	801a      	strh	r2, [r3, #0]
 801cb28:	2352      	movs	r3, #82	; 0x52
 801cb2a:	18fb      	adds	r3, r7, r3
 801cb2c:	881a      	ldrh	r2, [r3, #0]
 801cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb30:	429a      	cmp	r2, r3
 801cb32:	d3a9      	bcc.n	801ca88 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x84>
        }
      }
    }
    break;
 801cb34:	e0ef      	b.n	801cd16 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>
    case USBPD_CORE_PDO_TYPE_APDO:
    {
      uint16_t srcmaxvoltage100mv;
      uint16_t srcminvoltage100mv;
      uint16_t srcmaxcurrent50ma;
      srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801cb36:	233a      	movs	r3, #58	; 0x3a
 801cb38:	18fb      	adds	r3, r7, r3
 801cb3a:	881b      	ldrh	r3, [r3, #0]
 801cb3c:	05db      	lsls	r3, r3, #23
 801cb3e:	0e1b      	lsrs	r3, r3, #24
 801cb40:	b2da      	uxtb	r2, r3
 801cb42:	234e      	movs	r3, #78	; 0x4e
 801cb44:	18fb      	adds	r3, r7, r3
 801cb46:	801a      	strh	r2, [r3, #0]
      srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801cb48:	2138      	movs	r1, #56	; 0x38
 801cb4a:	187b      	adds	r3, r7, r1
 801cb4c:	785a      	ldrb	r2, [r3, #1]
 801cb4e:	234c      	movs	r3, #76	; 0x4c
 801cb50:	18fb      	adds	r3, r7, r3
 801cb52:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801cb54:	187b      	adds	r3, r7, r1
 801cb56:	781b      	ldrb	r3, [r3, #0]
 801cb58:	065b      	lsls	r3, r3, #25
 801cb5a:	0e5b      	lsrs	r3, r3, #25
 801cb5c:	b2da      	uxtb	r2, r3
 801cb5e:	234a      	movs	r3, #74	; 0x4a
 801cb60:	18fb      	adds	r3, r7, r3
 801cb62:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801cb64:	2350      	movs	r3, #80	; 0x50
 801cb66:	18fb      	adds	r3, r7, r3
 801cb68:	2200      	movs	r2, #0
 801cb6a:	801a      	strh	r2, [r3, #0]
 801cb6c:	e0c9      	b.n	801cd02 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2fe>
      {
        currentrequestedpower = 0;
 801cb6e:	2300      	movs	r3, #0
 801cb70:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801cb72:	2300      	movs	r3, #0
 801cb74:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801cb76:	2350      	movs	r3, #80	; 0x50
 801cb78:	18fb      	adds	r3, r7, r3
 801cb7a:	881a      	ldrh	r2, [r3, #0]
 801cb7c:	2314      	movs	r3, #20
 801cb7e:	18fb      	adds	r3, r7, r3
 801cb80:	0092      	lsls	r2, r2, #2
 801cb82:	58d3      	ldr	r3, [r2, r3]
 801cb84:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801cb86:	2337      	movs	r3, #55	; 0x37
 801cb88:	18fb      	adds	r3, r7, r3
 801cb8a:	781b      	ldrb	r3, [r3, #0]
 801cb8c:	061b      	lsls	r3, r3, #24
 801cb8e:	0f9b      	lsrs	r3, r3, #30
 801cb90:	b2db      	uxtb	r3, r3
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d100      	bne.n	801cb98 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x194>
 801cb96:	e09f      	b.n	801ccd8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 801cb98:	2b03      	cmp	r3, #3
 801cb9a:	d000      	beq.n	801cb9e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x19a>
 801cb9c:	e09e      	b.n	801ccdc <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d8>
          {
            uint16_t snkmaxvoltage100mv;
            uint16_t snkminvoltage100mv;
            uint16_t snkmaxcurrent50ma;

            snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801cb9e:	2134      	movs	r1, #52	; 0x34
 801cba0:	187b      	adds	r3, r7, r1
 801cba2:	785a      	ldrb	r2, [r3, #1]
 801cba4:	2048      	movs	r0, #72	; 0x48
 801cba6:	183b      	adds	r3, r7, r0
 801cba8:	801a      	strh	r2, [r3, #0]
            snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801cbaa:	2336      	movs	r3, #54	; 0x36
 801cbac:	18fb      	adds	r3, r7, r3
 801cbae:	881b      	ldrh	r3, [r3, #0]
 801cbb0:	05db      	lsls	r3, r3, #23
 801cbb2:	0e1b      	lsrs	r3, r3, #24
 801cbb4:	b2da      	uxtb	r2, r3
 801cbb6:	2446      	movs	r4, #70	; 0x46
 801cbb8:	193b      	adds	r3, r7, r4
 801cbba:	801a      	strh	r2, [r3, #0]
            snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801cbbc:	187b      	adds	r3, r7, r1
 801cbbe:	781b      	ldrb	r3, [r3, #0]
 801cbc0:	065b      	lsls	r3, r3, #25
 801cbc2:	0e5b      	lsrs	r3, r3, #25
 801cbc4:	b2da      	uxtb	r2, r3
 801cbc6:	2344      	movs	r3, #68	; 0x44
 801cbc8:	18fb      	adds	r3, r7, r3
 801cbca:	801a      	strh	r2, [r3, #0]

            /* Match if SNK APDO voltage overlaps with the SRC APDO voltage range */
            if (((srcminvoltage100mv <= snkmaxvoltage100mv) && (srcminvoltage100mv >= snkminvoltage100mv)) ||
 801cbcc:	214c      	movs	r1, #76	; 0x4c
 801cbce:	187a      	adds	r2, r7, r1
 801cbd0:	193b      	adds	r3, r7, r4
 801cbd2:	8812      	ldrh	r2, [r2, #0]
 801cbd4:	881b      	ldrh	r3, [r3, #0]
 801cbd6:	429a      	cmp	r2, r3
 801cbd8:	d805      	bhi.n	801cbe6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1e2>
 801cbda:	187a      	adds	r2, r7, r1
 801cbdc:	183b      	adds	r3, r7, r0
 801cbde:	8812      	ldrh	r2, [r2, #0]
 801cbe0:	881b      	ldrh	r3, [r3, #0]
 801cbe2:	429a      	cmp	r2, r3
 801cbe4:	d210      	bcs.n	801cc08 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801cbe6:	2148      	movs	r1, #72	; 0x48
 801cbe8:	187a      	adds	r2, r7, r1
 801cbea:	234e      	movs	r3, #78	; 0x4e
 801cbec:	18fb      	adds	r3, r7, r3
 801cbee:	8812      	ldrh	r2, [r2, #0]
 801cbf0:	881b      	ldrh	r3, [r3, #0]
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	d900      	bls.n	801cbf8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1f4>
 801cbf6:	e073      	b.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				((snkminvoltage100mv <= srcmaxvoltage100mv) && (snkminvoltage100mv >= srcminvoltage100mv)))
 801cbf8:	187a      	adds	r2, r7, r1
 801cbfa:	234c      	movs	r3, #76	; 0x4c
 801cbfc:	18fb      	adds	r3, r7, r3
 801cbfe:	8812      	ldrh	r2, [r2, #0]
 801cc00:	881b      	ldrh	r3, [r3, #0]
 801cc02:	429a      	cmp	r2, r3
 801cc04:	d200      	bcs.n	801cc08 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 801cc06:	e06b      	b.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			{
			  if (snkmaxcurrent50ma <= srcmaxcurrent50ma)
 801cc08:	2044      	movs	r0, #68	; 0x44
 801cc0a:	183a      	adds	r2, r7, r0
 801cc0c:	234a      	movs	r3, #74	; 0x4a
 801cc0e:	18fb      	adds	r3, r7, r3
 801cc10:	8812      	ldrh	r2, [r2, #0]
 801cc12:	881b      	ldrh	r3, [r3, #0]
 801cc14:	429a      	cmp	r2, r3
 801cc16:	d863      	bhi.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			  {
				if (0U != *PtrRequestedPower)
 801cc18:	683b      	ldr	r3, [r7, #0]
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d02c      	beq.n	801cc7a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x276>
				{
				  /* A specific voltage was requested, verify it */
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801cc20:	2348      	movs	r3, #72	; 0x48
 801cc22:	18fb      	adds	r3, r7, r3
 801cc24:	881b      	ldrh	r3, [r3, #0]
 801cc26:	2264      	movs	r2, #100	; 0x64
 801cc28:	4353      	muls	r3, r2
 801cc2a:	b29b      	uxth	r3, r3
 801cc2c:	001a      	movs	r2, r3
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	429a      	cmp	r2, r3
 801cc34:	d854      	bhi.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
					 ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv)))
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	2246      	movs	r2, #70	; 0x46
 801cc3c:	18ba      	adds	r2, r7, r2
 801cc3e:	8812      	ldrh	r2, [r2, #0]
 801cc40:	2164      	movs	r1, #100	; 0x64
 801cc42:	434a      	muls	r2, r1
 801cc44:	b292      	uxth	r2, r2
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 801cc46:	4293      	cmp	r3, r2
 801cc48:	d84a      	bhi.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  {
					currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	183a      	adds	r2, r7, r0
 801cc50:	8812      	ldrh	r2, [r2, #0]
 801cc52:	2132      	movs	r1, #50	; 0x32
 801cc54:	434a      	muls	r2, r1
 801cc56:	b292      	uxth	r2, r2
 801cc58:	4353      	muls	r3, r2
 801cc5a:	22fa      	movs	r2, #250	; 0xfa
 801cc5c:	0091      	lsls	r1, r2, #2
 801cc5e:	0018      	movs	r0, r3
 801cc60:	f7e9 fac6 	bl	80061f0 <__udivsi3>
 801cc64:	0003      	movs	r3, r0
 801cc66:	65fb      	str	r3, [r7, #92]	; 0x5c
											/ 1000U; /* mW */
					currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	2132      	movs	r1, #50	; 0x32
 801cc6e:	0018      	movs	r0, r3
 801cc70:	f7e9 fabe 	bl	80061f0 <__udivsi3>
 801cc74:	0003      	movs	r3, r0
 801cc76:	657b      	str	r3, [r7, #84]	; 0x54
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
				}
			  }
			}
          }
          break;
 801cc78:	e032      	b.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv),
 801cc7a:	2346      	movs	r3, #70	; 0x46
 801cc7c:	18fb      	adds	r3, r7, r3
 801cc7e:	881b      	ldrh	r3, [r3, #0]
 801cc80:	2264      	movs	r2, #100	; 0x64
 801cc82:	4353      	muls	r3, r2
 801cc84:	b299      	uxth	r1, r3
 801cc86:	234e      	movs	r3, #78	; 0x4e
 801cc88:	18fb      	adds	r3, r7, r3
 801cc8a:	881b      	ldrh	r3, [r3, #0]
 801cc8c:	2264      	movs	r2, #100	; 0x64
 801cc8e:	4353      	muls	r3, r2
 801cc90:	b29b      	uxth	r3, r3
 801cc92:	1c18      	adds	r0, r3, #0
 801cc94:	b28a      	uxth	r2, r1
 801cc96:	b283      	uxth	r3, r0
 801cc98:	429a      	cmp	r2, r3
 801cc9a:	d900      	bls.n	801cc9e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x29a>
 801cc9c:	1c01      	adds	r1, r0, #0
 801cc9e:	b28b      	uxth	r3, r1
 801cca0:	001a      	movs	r2, r3
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	601a      	str	r2, [r3, #0]
				  currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2244      	movs	r2, #68	; 0x44
 801ccac:	18ba      	adds	r2, r7, r2
 801ccae:	8812      	ldrh	r2, [r2, #0]
 801ccb0:	2132      	movs	r1, #50	; 0x32
 801ccb2:	434a      	muls	r2, r1
 801ccb4:	b292      	uxth	r2, r2
 801ccb6:	4353      	muls	r3, r2
 801ccb8:	22fa      	movs	r2, #250	; 0xfa
 801ccba:	0091      	lsls	r1, r2, #2
 801ccbc:	0018      	movs	r0, r3
 801ccbe:	f7e9 fa97 	bl	80061f0 <__udivsi3>
 801ccc2:	0003      	movs	r3, r0
 801ccc4:	65fb      	str	r3, [r7, #92]	; 0x5c
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	2132      	movs	r1, #50	; 0x32
 801cccc:	0018      	movs	r0, r3
 801ccce:	f7e9 fa8f 	bl	80061f0 <__udivsi3>
 801ccd2:	0003      	movs	r3, r0
 801ccd4:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 801ccd6:	e003      	b.n	801cce0 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
            break;
 801ccd8:	46c0      	nop			; (mov r8, r8)
 801ccda:	e002      	b.n	801cce2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>

          default:
            break;
 801ccdc:	46c0      	nop			; (mov r8, r8)
 801ccde:	e000      	b.n	801cce2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>
          break;
 801cce0:	46c0      	nop			; (mov r8, r8)
        }

        if (currentrequestedpower > maxrequestedpower)
 801cce2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801cce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cce6:	429a      	cmp	r2, r3
 801cce8:	d905      	bls.n	801ccf6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2f2>
        {
          match = USBPD_TRUE;
 801ccea:	2301      	movs	r3, #1
 801ccec:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801ccee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ccf0:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801ccf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ccf4:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801ccf6:	2150      	movs	r1, #80	; 0x50
 801ccf8:	187b      	adds	r3, r7, r1
 801ccfa:	881a      	ldrh	r2, [r3, #0]
 801ccfc:	187b      	adds	r3, r7, r1
 801ccfe:	3201      	adds	r2, #1
 801cd00:	801a      	strh	r2, [r3, #0]
 801cd02:	2350      	movs	r3, #80	; 0x50
 801cd04:	18fb      	adds	r3, r7, r3
 801cd06:	881a      	ldrh	r2, [r3, #0]
 801cd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd0a:	429a      	cmp	r2, r3
 801cd0c:	d200      	bcs.n	801cd10 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30c>
 801cd0e:	e72e      	b.n	801cb6e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x16a>
        }
      }
    }
    break;
 801cd10:	e001      	b.n	801cd16 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>

    default:
      return (USBPD_FALSE);
 801cd12:	2300      	movs	r3, #0
 801cd14:	e00b      	b.n	801cd2e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  if (maxrequestedpower > 0)
 801cd16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d007      	beq.n	801cd2c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x328>
  {
    *PtrRequestedPower   = maxrequestedpower;
 801cd1c:	683b      	ldr	r3, [r7, #0]
 801cd1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801cd20:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50U; /* value in mV */
 801cd22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801cd24:	2232      	movs	r2, #50	; 0x32
 801cd26:	435a      	muls	r2, r3
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	601a      	str	r2, [r3, #0]
  }
  return (match);
 801cd2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 801cd2e:	0018      	movs	r0, r3
 801cd30:	46bd      	mov	sp, r7
 801cd32:	b01b      	add	sp, #108	; 0x6c
 801cd34:	bd90      	pop	{r4, r7, pc}
	...

0801cd38 <USER_SERV_FindVoltageIndex>:
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
uint32_t USER_SERV_FindVoltageIndex(uint32_t PortNum,
                                           USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                           uint8_t Method)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b090      	sub	sp, #64	; 0x40
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	1dfb      	adds	r3, r7, #7
 801cd44:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801cd46:	23ff      	movs	r3, #255	; 0xff
 801cd48:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801cd4a:	68fb      	ldr	r3, [r7, #12]
 801cd4c:	2274      	movs	r2, #116	; 0x74
 801cd4e:	435a      	muls	r2, r3
 801cd50:	4b73      	ldr	r3, [pc, #460]	; (801cf20 <USER_SERV_FindVoltageIndex+0x1e8>)
 801cd52:	18d3      	adds	r3, r2, r3
 801cd54:	62bb      	str	r3, [r7, #40]	; 0x28

  allowablepower = 0;
 801cd56:	2300      	movs	r3, #0
 801cd58:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	63bb      	str	r3, [r7, #56]	; 0x38
  reqvoltage     = 0;
 801cd5e:	2300      	movs	r3, #0
 801cd60:	63fb      	str	r3, [r7, #60]	; 0x3c
  voltage        = 0;
 801cd62:	2300      	movs	r3, #0
 801cd64:	617b      	str	r3, [r7, #20]
  selcurrent     = 0;
 801cd66:	2300      	movs	r3, #0
 801cd68:	637b      	str	r3, [r7, #52]	; 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801cd6a:	496e      	ldr	r1, [pc, #440]	; (801cf24 <USER_SERV_FindVoltageIndex+0x1ec>)
 801cd6c:	68fa      	ldr	r2, [r7, #12]
 801cd6e:	0013      	movs	r3, r2
 801cd70:	009b      	lsls	r3, r3, #2
 801cd72:	189b      	adds	r3, r3, r2
 801cd74:	011b      	lsls	r3, r3, #4
 801cd76:	18cb      	adds	r3, r1, r3
 801cd78:	331c      	adds	r3, #28
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	627b      	str	r3, [r7, #36]	; 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801cd7e:	68fa      	ldr	r2, [r7, #12]
 801cd80:	0013      	movs	r3, r2
 801cd82:	009b      	lsls	r3, r3, #2
 801cd84:	189b      	adds	r3, r3, r2
 801cd86:	011b      	lsls	r3, r3, #4
 801cd88:	4a66      	ldr	r2, [pc, #408]	; (801cf24 <USER_SERV_FindVoltageIndex+0x1ec>)
 801cd8a:	189b      	adds	r3, r3, r2
 801cd8c:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801cd8e:	2300      	movs	r3, #0
 801cd90:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd92:	e09a      	b.n	801ceca <USER_SERV_FindVoltageIndex+0x192>
  {
    pdo.d32 = ptpdoarray[temp_index];
 801cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd96:	009b      	lsls	r3, r3, #2
 801cd98:	6a3a      	ldr	r2, [r7, #32]
 801cd9a:	18d3      	adds	r3, r2, r3
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 801cda0:	2300      	movs	r3, #0
 801cda2:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	b2d8      	uxtb	r0, r3
 801cda8:	69b9      	ldr	r1, [r7, #24]
 801cdaa:	2310      	movs	r3, #16
 801cdac:	18fb      	adds	r3, r7, r3
 801cdae:	2214      	movs	r2, #20
 801cdb0:	18ba      	adds	r2, r7, r2
 801cdb2:	f7ff fe27 	bl	801ca04 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801cdb6:	0003      	movs	r3, r0
 801cdb8:	2b01      	cmp	r3, #1
 801cdba:	d000      	beq.n	801cdbe <USER_SERV_FindVoltageIndex+0x86>
 801cdbc:	e082      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	697a      	ldr	r2, [r7, #20]
 801cdc2:	0011      	movs	r1, r2
 801cdc4:	0018      	movs	r0, r3
 801cdc6:	f7e9 fa13 	bl	80061f0 <__udivsi3>
 801cdca:	0003      	movs	r3, r0
 801cdcc:	001a      	movs	r2, r3
 801cdce:	0013      	movs	r3, r2
 801cdd0:	015b      	lsls	r3, r3, #5
 801cdd2:	1a9b      	subs	r3, r3, r2
 801cdd4:	009b      	lsls	r3, r3, #2
 801cdd6:	189b      	adds	r3, r3, r2
 801cdd8:	00db      	lsls	r3, r3, #3
 801cdda:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 801cddc:	1dfb      	adds	r3, r7, #7
 801cdde:	781b      	ldrb	r3, [r3, #0]
 801cde0:	2b05      	cmp	r3, #5
 801cde2:	d85b      	bhi.n	801ce9c <USER_SERV_FindVoltageIndex+0x164>
 801cde4:	009a      	lsls	r2, r3, #2
 801cde6:	4b50      	ldr	r3, [pc, #320]	; (801cf28 <USER_SERV_FindVoltageIndex+0x1f0>)
 801cde8:	18d3      	adds	r3, r2, r3
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 801cdee:	693b      	ldr	r3, [r7, #16]
 801cdf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cdf2:	429a      	cmp	r2, r3
 801cdf4:	d25b      	bcs.n	801ceae <USER_SERV_FindVoltageIndex+0x176>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdf8:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801cdfa:	693b      	ldr	r3, [r7, #16]
 801cdfc:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801cdfe:	697b      	ldr	r3, [r7, #20]
 801ce00:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce02:	69fb      	ldr	r3, [r7, #28]
 801ce04:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce06:	e052      	b.n	801ceae <USER_SERV_FindVoltageIndex+0x176>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 801ce08:	693b      	ldr	r3, [r7, #16]
 801ce0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ce0c:	429a      	cmp	r2, r3
 801ce0e:	d802      	bhi.n	801ce16 <USER_SERV_FindVoltageIndex+0xde>
 801ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d14d      	bne.n	801ceb2 <USER_SERV_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce18:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce1a:	693b      	ldr	r3, [r7, #16]
 801ce1c:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce22:	69fb      	ldr	r3, [r7, #28]
 801ce24:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce26:	e044      	b.n	801ceb2 <USER_SERV_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 801ce28:	697b      	ldr	r3, [r7, #20]
 801ce2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ce2c:	429a      	cmp	r2, r3
 801ce2e:	d242      	bcs.n	801ceb6 <USER_SERV_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce32:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce34:	693b      	ldr	r3, [r7, #16]
 801ce36:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce40:	e039      	b.n	801ceb6 <USER_SERV_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 801ce42:	697b      	ldr	r3, [r7, #20]
 801ce44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ce46:	429a      	cmp	r2, r3
 801ce48:	d802      	bhi.n	801ce50 <USER_SERV_FindVoltageIndex+0x118>
 801ce4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d134      	bne.n	801ceba <USER_SERV_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce52:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce54:	693b      	ldr	r3, [r7, #16]
 801ce56:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce58:	697b      	ldr	r3, [r7, #20]
 801ce5a:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce5c:	69fb      	ldr	r3, [r7, #28]
 801ce5e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce60:	e02b      	b.n	801ceba <USER_SERV_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 801ce62:	69fa      	ldr	r2, [r7, #28]
 801ce64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce66:	429a      	cmp	r2, r3
 801ce68:	d929      	bls.n	801cebe <USER_SERV_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce6c:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce6e:	693b      	ldr	r3, [r7, #16]
 801ce70:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce72:	697b      	ldr	r3, [r7, #20]
 801ce74:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce76:	69fb      	ldr	r3, [r7, #28]
 801ce78:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce7a:	e020      	b.n	801cebe <USER_SERV_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801ce7c:	69fa      	ldr	r2, [r7, #28]
 801ce7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce80:	429a      	cmp	r2, r3
 801ce82:	d302      	bcc.n	801ce8a <USER_SERV_FindVoltageIndex+0x152>
 801ce84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d11b      	bne.n	801cec2 <USER_SERV_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 801ce8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce8c:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 801ce8e:	693b      	ldr	r3, [r7, #16]
 801ce90:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 801ce92:	697b      	ldr	r3, [r7, #20]
 801ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 801ce96:	69fb      	ldr	r3, [r7, #28]
 801ce98:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 801ce9a:	e012      	b.n	801cec2 <USER_SERV_FindVoltageIndex+0x18a>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 801ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce9e:	633b      	str	r3, [r7, #48]	; 0x30
          selpower   = allowablepower;
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	63bb      	str	r3, [r7, #56]	; 0x38
          reqvoltage = voltage;
 801cea4:	697b      	ldr	r3, [r7, #20]
 801cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          selcurrent = allowablecurrent;
 801cea8:	69fb      	ldr	r3, [r7, #28]
 801ceaa:	637b      	str	r3, [r7, #52]	; 0x34
 801ceac:	e00a      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801ceae:	46c0      	nop			; (mov r8, r8)
 801ceb0:	e008      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801ceb2:	46c0      	nop			; (mov r8, r8)
 801ceb4:	e006      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801ceb6:	46c0      	nop			; (mov r8, r8)
 801ceb8:	e004      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801ceba:	46c0      	nop			; (mov r8, r8)
 801cebc:	e002      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cebe:	46c0      	nop			; (mov r8, r8)
 801cec0:	e000      	b.n	801cec4 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 801cec2:	46c0      	nop			; (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 801cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cec6:	3301      	adds	r3, #1
 801cec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ceca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cece:	429a      	cmp	r2, r3
 801ced0:	d200      	bcs.n	801ced4 <USER_SERV_FindVoltageIndex+0x19c>
 801ced2:	e75f      	b.n	801cd94 <USER_SERV_FindVoltageIndex+0x5c>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 801ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ced6:	2bff      	cmp	r3, #255	; 0xff
 801ced8:	d01c      	beq.n	801cf14 <USER_SERV_FindVoltageIndex+0x1dc>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cedc:	685a      	ldr	r2, [r3, #4]
 801cede:	68bb      	ldr	r3, [r7, #8]
 801cee0:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 801cee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cee4:	0013      	movs	r3, r2
 801cee6:	015b      	lsls	r3, r3, #5
 801cee8:	1a9b      	subs	r3, r3, r2
 801ceea:	009b      	lsls	r3, r3, #2
 801ceec:	189b      	adds	r3, r3, r2
 801ceee:	00db      	lsls	r3, r3, #3
 801cef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cef2:	0018      	movs	r0, r3
 801cef4:	f7e9 f97c 	bl	80061f0 <__udivsi3>
 801cef8:	0003      	movs	r3, r0
 801cefa:	001a      	movs	r2, r3
 801cefc:	68bb      	ldr	r3, [r7, #8]
 801cefe:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cf02:	699a      	ldr	r2, [r3, #24]
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 801cf08:	68bb      	ldr	r3, [r7, #8]
 801cf0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cf0c:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 801cf0e:	68bb      	ldr	r3, [r7, #8]
 801cf10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cf12:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 801cf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801cf16:	0018      	movs	r0, r3
 801cf18:	46bd      	mov	sp, r7
 801cf1a:	b010      	add	sp, #64	; 0x40
 801cf1c:	bd80      	pop	{r7, pc}
 801cf1e:	46c0      	nop			; (mov r8, r8)
 801cf20:	2000010c 	.word	0x2000010c
 801cf24:	20002f48 	.word	0x20002f48
 801cf28:	080250f4 	.word	0x080250f4

0801cf2c <USER_SERV_SNK_BuildRDOfromSelectedPDO>:
void USER_SERV_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum,
                                                  uint8_t IndexSrcPDO,
                                                  USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801cf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf2e:	b0a7      	sub	sp, #156	; 0x9c
 801cf30:	af02      	add	r7, sp, #8
 801cf32:	60ba      	str	r2, [r7, #8]
 801cf34:	607b      	str	r3, [r7, #4]
 801cf36:	240f      	movs	r4, #15
 801cf38:	193b      	adds	r3, r7, r4
 801cf3a:	1c02      	adds	r2, r0, #0
 801cf3c:	701a      	strb	r2, [r3, #0]
 801cf3e:	230e      	movs	r3, #14
 801cf40:	18fb      	adds	r3, r7, r3
 801cf42:	1c0a      	adds	r2, r1, #0
 801cf44:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0;
 801cf46:	2300      	movs	r3, #0
 801cf48:	228c      	movs	r2, #140	; 0x8c
 801cf4a:	18ba      	adds	r2, r7, r2
 801cf4c:	6013      	str	r3, [r2, #0]
  uint32_t ma = 0;
 801cf4e:	2300      	movs	r3, #0
 801cf50:	2288      	movs	r2, #136	; 0x88
 801cf52:	18ba      	adds	r2, r7, r2
 801cf54:	6013      	str	r3, [r2, #0]
  uint32_t size;
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801cf56:	193b      	adds	r3, r7, r4
 801cf58:	781a      	ldrb	r2, [r3, #0]
 801cf5a:	0013      	movs	r3, r2
 801cf5c:	009b      	lsls	r3, r3, #2
 801cf5e:	189b      	adds	r3, r3, r2
 801cf60:	011b      	lsls	r3, r3, #4
 801cf62:	4ae2      	ldr	r2, [pc, #904]	; (801d2ec <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801cf64:	189b      	adds	r3, r3, r2
 801cf66:	2584      	movs	r5, #132	; 0x84
 801cf68:	197a      	adds	r2, r7, r5
 801cf6a:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801cf6c:	193b      	adds	r3, r7, r4
 801cf6e:	781b      	ldrb	r3, [r3, #0]
 801cf70:	2274      	movs	r2, #116	; 0x74
 801cf72:	435a      	muls	r2, r3
 801cf74:	4bde      	ldr	r3, [pc, #888]	; (801d2f0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c4>)
 801cf76:	18d3      	adds	r3, r2, r3
 801cf78:	2280      	movs	r2, #128	; 0x80
 801cf7a:	18ba      	adds	r2, r7, r2
 801cf7c:	6013      	str	r3, [r2, #0]
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 801cf7e:	2300      	movs	r3, #0
 801cf80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801cf82:	237c      	movs	r3, #124	; 0x7c
 801cf84:	18f9      	adds	r1, r7, r3
 801cf86:	2658      	movs	r6, #88	; 0x58
 801cf88:	19ba      	adds	r2, r7, r6
 801cf8a:	193b      	adds	r3, r7, r4
 801cf8c:	7818      	ldrb	r0, [r3, #0]
 801cf8e:	000b      	movs	r3, r1
 801cf90:	2101      	movs	r1, #1
 801cf92:	f7fe f80b 	bl	801afac <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 801cf96:	19bb      	adds	r3, r7, r6
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801cf9c:	197b      	adds	r3, r7, r5
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	67bb      	str	r3, [r7, #120]	; 0x78
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801cfa4:	2357      	movs	r3, #87	; 0x57
 801cfa6:	18fb      	adds	r3, r7, r3
 801cfa8:	781b      	ldrb	r3, [r3, #0]
 801cfaa:	075b      	lsls	r3, r3, #29
 801cfac:	0fdb      	lsrs	r3, r3, #31
 801cfae:	b2da      	uxtb	r2, r3
 801cfb0:	2377      	movs	r3, #119	; 0x77
 801cfb2:	18fb      	adds	r3, r7, r3
 801cfb4:	2101      	movs	r1, #1
 801cfb6:	400a      	ands	r2, r1
 801cfb8:	1890      	adds	r0, r2, r2
 801cfba:	781a      	ldrb	r2, [r3, #0]
 801cfbc:	2102      	movs	r1, #2
 801cfbe:	438a      	bics	r2, r1
 801cfc0:	1c11      	adds	r1, r2, #0
 801cfc2:	1c02      	adds	r2, r0, #0
 801cfc4:	430a      	orrs	r2, r1
 801cfc6:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 801cfc8:	193b      	adds	r3, r7, r4
 801cfca:	781a      	ldrb	r2, [r3, #0]
 801cfcc:	4bc9      	ldr	r3, [pc, #804]	; (801d2f4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801cfce:	0092      	lsls	r2, r2, #2
 801cfd0:	5cd3      	ldrb	r3, [r2, r3]
 801cfd2:	079b      	lsls	r3, r3, #30
 801cfd4:	0f9b      	lsrs	r3, r3, #30
 801cfd6:	b2db      	uxtb	r3, r3
 801cfd8:	2b01      	cmp	r3, #1
 801cfda:	d931      	bls.n	801d040 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
  {
#if defined(USBPDCORE_UNCHUNCKED_MODE)
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 801cfdc:	193b      	adds	r3, r7, r4
 801cfde:	781a      	ldrb	r2, [r3, #0]
 801cfe0:	49c5      	ldr	r1, [pc, #788]	; (801d2f8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3cc>)
 801cfe2:	2008      	movs	r0, #8
 801cfe4:	0013      	movs	r3, r2
 801cfe6:	005b      	lsls	r3, r3, #1
 801cfe8:	189b      	adds	r3, r3, r2
 801cfea:	009b      	lsls	r3, r3, #2
 801cfec:	18cb      	adds	r3, r1, r3
 801cfee:	181b      	adds	r3, r3, r0
 801cff0:	781b      	ldrb	r3, [r3, #0]
 801cff2:	07db      	lsls	r3, r3, #31
 801cff4:	0fdb      	lsrs	r3, r3, #31
 801cff6:	b2da      	uxtb	r2, r3
 801cff8:	2376      	movs	r3, #118	; 0x76
 801cffa:	18fb      	adds	r3, r7, r3
 801cffc:	01d0      	lsls	r0, r2, #7
 801cffe:	781a      	ldrb	r2, [r3, #0]
 801d000:	217f      	movs	r1, #127	; 0x7f
 801d002:	400a      	ands	r2, r1
 801d004:	1c11      	adds	r1, r2, #0
 801d006:	1c02      	adds	r2, r0, #0
 801d008:	430a      	orrs	r2, r1
 801d00a:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 801d00c:	193b      	adds	r3, r7, r4
 801d00e:	781b      	ldrb	r3, [r3, #0]
 801d010:	4ab8      	ldr	r2, [pc, #736]	; (801d2f4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801d012:	009b      	lsls	r3, r3, #2
 801d014:	18d3      	adds	r3, r2, r3
 801d016:	78da      	ldrb	r2, [r3, #3]
 801d018:	2102      	movs	r1, #2
 801d01a:	438a      	bics	r2, r1
 801d01c:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 801d01e:	237b      	movs	r3, #123	; 0x7b
 801d020:	18fb      	adds	r3, r7, r3
 801d022:	781b      	ldrb	r3, [r3, #0]
 801d024:	2201      	movs	r2, #1
 801d026:	4013      	ands	r3, r2
 801d028:	b2db      	uxtb	r3, r3
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	d008      	beq.n	801d040 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x114>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 801d02e:	193b      	adds	r3, r7, r4
 801d030:	781b      	ldrb	r3, [r3, #0]
 801d032:	4ab0      	ldr	r2, [pc, #704]	; (801d2f4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c8>)
 801d034:	009b      	lsls	r3, r3, #2
 801d036:	18d3      	adds	r3, r2, r3
 801d038:	78da      	ldrb	r2, [r3, #3]
 801d03a:	2102      	movs	r1, #2
 801d03c:	430a      	orrs	r2, r1
 801d03e:	70da      	strb	r2, [r3, #3]
    }
#endif /* USBPDCORE_UNCHUNCKED_MODE */
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 801d040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d042:	2b00      	cmp	r3, #0
 801d044:	d008      	beq.n	801d058 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x12c>
 801d046:	230e      	movs	r3, #14
 801d048:	18fb      	adds	r3, r7, r3
 801d04a:	781a      	ldrb	r2, [r3, #0]
 801d04c:	2384      	movs	r3, #132	; 0x84
 801d04e:	18fb      	adds	r3, r7, r3
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	69db      	ldr	r3, [r3, #28]
 801d054:	429a      	cmp	r2, r3
 801d056:	d364      	bcc.n	801d122 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x1f6>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    uint8_t msg[] = "USER_SERV_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection";
 801d058:	2414      	movs	r4, #20
 801d05a:	193a      	adds	r2, r7, r4
 801d05c:	4ba7      	ldr	r3, [pc, #668]	; (801d2fc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d0>)
 801d05e:	0010      	movs	r0, r2
 801d060:	0019      	movs	r1, r3
 801d062:	233f      	movs	r3, #63	; 0x3f
 801d064:	001a      	movs	r2, r3
 801d066:	f006 fb89 	bl	802377c <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801d06a:	193a      	adds	r2, r7, r4
 801d06c:	250f      	movs	r5, #15
 801d06e:	197b      	adds	r3, r7, r5
 801d070:	7819      	ldrb	r1, [r3, #0]
 801d072:	233f      	movs	r3, #63	; 0x3f
 801d074:	9300      	str	r3, [sp, #0]
 801d076:	0013      	movs	r3, r2
 801d078:	2200      	movs	r2, #0
 801d07a:	2006      	movs	r0, #6
 801d07c:	f7f5 fc9e 	bl	80129bc <USBPD_TRACE_Add>
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801d080:	2477      	movs	r4, #119	; 0x77
 801d082:	193b      	adds	r3, r7, r4
 801d084:	781a      	ldrb	r2, [r3, #0]
 801d086:	2170      	movs	r1, #112	; 0x70
 801d088:	438a      	bics	r2, r1
 801d08a:	1c11      	adds	r1, r2, #0
 801d08c:	2210      	movs	r2, #16
 801d08e:	430a      	orrs	r2, r1
 801d090:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801d092:	2078      	movs	r0, #120	; 0x78
 801d094:	183b      	adds	r3, r7, r0
 801d096:	881b      	ldrh	r3, [r3, #0]
 801d098:	059b      	lsls	r3, r3, #22
 801d09a:	0d9b      	lsrs	r3, r3, #22
 801d09c:	b29b      	uxth	r3, r3
 801d09e:	059b      	lsls	r3, r3, #22
 801d0a0:	0d9b      	lsrs	r3, r3, #22
 801d0a2:	029b      	lsls	r3, r3, #10
 801d0a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d0a6:	4996      	ldr	r1, [pc, #600]	; (801d300 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 801d0a8:	400a      	ands	r2, r1
 801d0aa:	4313      	orrs	r3, r2
 801d0ac:	677b      	str	r3, [r7, #116]	; 0x74
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801d0ae:	183b      	adds	r3, r7, r0
 801d0b0:	881b      	ldrh	r3, [r3, #0]
 801d0b2:	059b      	lsls	r3, r3, #22
 801d0b4:	0d9b      	lsrs	r3, r3, #22
 801d0b6:	b29a      	uxth	r2, r3
 801d0b8:	2374      	movs	r3, #116	; 0x74
 801d0ba:	18fb      	adds	r3, r7, r3
 801d0bc:	0592      	lsls	r2, r2, #22
 801d0be:	0d90      	lsrs	r0, r2, #22
 801d0c0:	881a      	ldrh	r2, [r3, #0]
 801d0c2:	0a92      	lsrs	r2, r2, #10
 801d0c4:	0292      	lsls	r2, r2, #10
 801d0c6:	1c11      	adds	r1, r2, #0
 801d0c8:	1c02      	adds	r2, r0, #0
 801d0ca:	430a      	orrs	r2, r1
 801d0cc:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1U;
 801d0ce:	193b      	adds	r3, r7, r4
 801d0d0:	781a      	ldrb	r2, [r3, #0]
 801d0d2:	2104      	movs	r1, #4
 801d0d4:	430a      	orrs	r2, r1
 801d0d6:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801d0d8:	2357      	movs	r3, #87	; 0x57
 801d0da:	18fb      	adds	r3, r7, r3
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	075b      	lsls	r3, r3, #29
 801d0e0:	0fdb      	lsrs	r3, r3, #31
 801d0e2:	b2da      	uxtb	r2, r3
 801d0e4:	193b      	adds	r3, r7, r4
 801d0e6:	2101      	movs	r1, #1
 801d0e8:	400a      	ands	r2, r1
 801d0ea:	1890      	adds	r0, r2, r2
 801d0ec:	781a      	ldrb	r2, [r3, #0]
 801d0ee:	2102      	movs	r1, #2
 801d0f0:	438a      	bics	r2, r1
 801d0f2:	1c11      	adds	r1, r2, #0
 801d0f4:	1c02      	adds	r2, r0, #0
 801d0f6:	430a      	orrs	r2, r1
 801d0f8:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801d0fa:	197b      	adds	r3, r7, r5
 801d0fc:	781a      	ldrb	r2, [r3, #0]
 801d0fe:	2380      	movs	r3, #128	; 0x80
 801d100:	18fb      	adds	r3, r7, r3
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	6859      	ldr	r1, [r3, #4]
 801d106:	4879      	ldr	r0, [pc, #484]	; (801d2ec <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801d108:	0013      	movs	r3, r2
 801d10a:	009b      	lsls	r3, r3, #2
 801d10c:	189b      	adds	r3, r3, r2
 801d10e:	011b      	lsls	r3, r3, #4
 801d110:	18c3      	adds	r3, r0, r3
 801d112:	334c      	adds	r3, #76	; 0x4c
 801d114:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d116:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d118:	2384      	movs	r3, #132	; 0x84
 801d11a:	18fb      	adds	r3, r7, r3
 801d11c:	681b      	ldr	r3, [r3, #0]
 801d11e:	63da      	str	r2, [r3, #60]	; 0x3c
 801d120:	e0e0      	b.n	801d2e4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3b8>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1U;
 801d122:	240e      	movs	r4, #14
 801d124:	193b      	adds	r3, r7, r4
 801d126:	781b      	ldrb	r3, [r3, #0]
 801d128:	3301      	adds	r3, #1
 801d12a:	b2db      	uxtb	r3, r3
 801d12c:	1c1a      	adds	r2, r3, #0
 801d12e:	2307      	movs	r3, #7
 801d130:	4013      	ands	r3, r2
 801d132:	b2da      	uxtb	r2, r3
 801d134:	2577      	movs	r5, #119	; 0x77
 801d136:	197b      	adds	r3, r7, r5
 801d138:	2107      	movs	r1, #7
 801d13a:	400a      	ands	r2, r1
 801d13c:	0110      	lsls	r0, r2, #4
 801d13e:	781a      	ldrb	r2, [r3, #0]
 801d140:	2170      	movs	r1, #112	; 0x70
 801d142:	438a      	bics	r2, r1
 801d144:	1c11      	adds	r1, r2, #0
 801d146:	1c02      	adds	r2, r0, #0
 801d148:	430a      	orrs	r2, r1
 801d14a:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 801d14c:	197b      	adds	r3, r7, r5
 801d14e:	781a      	ldrb	r2, [r3, #0]
 801d150:	2101      	movs	r1, #1
 801d152:	438a      	bics	r2, r1
 801d154:	701a      	strb	r2, [r3, #0]

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 801d156:	193b      	adds	r3, r7, r4
 801d158:	781a      	ldrb	r2, [r3, #0]
 801d15a:	2384      	movs	r3, #132	; 0x84
 801d15c:	18fb      	adds	r3, r7, r3
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	0092      	lsls	r2, r2, #2
 801d162:	58d3      	ldr	r3, [r2, r3]
 801d164:	67bb      	str	r3, [r7, #120]	; 0x78

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801d166:	217b      	movs	r1, #123	; 0x7b
 801d168:	187b      	adds	r3, r7, r1
 801d16a:	781b      	ldrb	r3, [r3, #0]
 801d16c:	061b      	lsls	r3, r3, #24
 801d16e:	0f9b      	lsrs	r3, r3, #30
 801d170:	b2db      	uxtb	r3, r3
 801d172:	001a      	movs	r2, r3
 801d174:	2398      	movs	r3, #152	; 0x98
 801d176:	2010      	movs	r0, #16
 801d178:	181b      	adds	r3, r3, r0
 801d17a:	19db      	adds	r3, r3, r7
 801d17c:	681b      	ldr	r3, [r3, #0]
 801d17e:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	228c      	movs	r2, #140	; 0x8c
 801d186:	18ba      	adds	r2, r7, r2
 801d188:	6013      	str	r3, [r2, #0]
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	689b      	ldr	r3, [r3, #8]
 801d18e:	2288      	movs	r2, #136	; 0x88
 801d190:	18ba      	adds	r2, r7, r2
 801d192:	6013      	str	r3, [r2, #0]

  switch (pdo.GenericPDO.PowerObject)
 801d194:	187b      	adds	r3, r7, r1
 801d196:	781b      	ldrb	r3, [r3, #0]
 801d198:	061b      	lsls	r3, r3, #24
 801d19a:	0f9b      	lsrs	r3, r3, #30
 801d19c:	b2db      	uxtb	r3, r3
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d002      	beq.n	801d1a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x27c>
 801d1a2:	2b03      	cmp	r3, #3
 801d1a4:	d036      	beq.n	801d214 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x2e8>
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
    }
    break;

    default:
      break;
 801d1a6:	e083      	b.n	801d2b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801d1a8:	230f      	movs	r3, #15
 801d1aa:	18fb      	adds	r3, r7, r3
 801d1ac:	781a      	ldrb	r2, [r3, #0]
 801d1ae:	494f      	ldr	r1, [pc, #316]	; (801d2ec <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801d1b0:	0013      	movs	r3, r2
 801d1b2:	009b      	lsls	r3, r3, #2
 801d1b4:	189b      	adds	r3, r3, r2
 801d1b6:	011b      	lsls	r3, r3, #4
 801d1b8:	18cb      	adds	r3, r1, r3
 801d1ba:	334c      	adds	r3, #76	; 0x4c
 801d1bc:	2488      	movs	r4, #136	; 0x88
 801d1be:	193a      	adds	r2, r7, r4
 801d1c0:	6812      	ldr	r2, [r2, #0]
 801d1c2:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801d1c4:	193b      	adds	r3, r7, r4
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	210a      	movs	r1, #10
 801d1ca:	0018      	movs	r0, r3
 801d1cc:	f7e9 f810 	bl	80061f0 <__udivsi3>
 801d1d0:	0003      	movs	r3, r0
 801d1d2:	059b      	lsls	r3, r3, #22
 801d1d4:	0d9b      	lsrs	r3, r3, #22
 801d1d6:	b29b      	uxth	r3, r3
 801d1d8:	059b      	lsls	r3, r3, #22
 801d1da:	0d9b      	lsrs	r3, r3, #22
 801d1dc:	029b      	lsls	r3, r3, #10
 801d1de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d1e0:	4947      	ldr	r1, [pc, #284]	; (801d300 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d4>)
 801d1e2:	400a      	ands	r2, r1
 801d1e4:	4313      	orrs	r3, r2
 801d1e6:	677b      	str	r3, [r7, #116]	; 0x74
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 801d1e8:	193b      	adds	r3, r7, r4
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	210a      	movs	r1, #10
 801d1ee:	0018      	movs	r0, r3
 801d1f0:	f7e8 fffe 	bl	80061f0 <__udivsi3>
 801d1f4:	0003      	movs	r3, r0
 801d1f6:	059b      	lsls	r3, r3, #22
 801d1f8:	0d9b      	lsrs	r3, r3, #22
 801d1fa:	b29a      	uxth	r2, r3
 801d1fc:	2374      	movs	r3, #116	; 0x74
 801d1fe:	18fb      	adds	r3, r7, r3
 801d200:	0592      	lsls	r2, r2, #22
 801d202:	0d90      	lsrs	r0, r2, #22
 801d204:	881a      	ldrh	r2, [r3, #0]
 801d206:	0a92      	lsrs	r2, r2, #10
 801d208:	0292      	lsls	r2, r2, #10
 801d20a:	1c11      	adds	r1, r2, #0
 801d20c:	1c02      	adds	r2, r0, #0
 801d20e:	430a      	orrs	r2, r1
 801d210:	801a      	strh	r2, [r3, #0]
    break;
 801d212:	e04d      	b.n	801d2b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x384>
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801d214:	230f      	movs	r3, #15
 801d216:	18fb      	adds	r3, r7, r3
 801d218:	781a      	ldrb	r2, [r3, #0]
 801d21a:	4934      	ldr	r1, [pc, #208]	; (801d2ec <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>)
 801d21c:	0013      	movs	r3, r2
 801d21e:	009b      	lsls	r3, r3, #2
 801d220:	189b      	adds	r3, r3, r2
 801d222:	011b      	lsls	r3, r3, #4
 801d224:	18cb      	adds	r3, r1, r3
 801d226:	334c      	adds	r3, #76	; 0x4c
 801d228:	2488      	movs	r4, #136	; 0x88
 801d22a:	193a      	adds	r2, r7, r4
 801d22c:	6812      	ldr	r2, [r2, #0]
 801d22e:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1U;
 801d230:	230e      	movs	r3, #14
 801d232:	18fb      	adds	r3, r7, r3
 801d234:	781b      	ldrb	r3, [r3, #0]
 801d236:	3301      	adds	r3, #1
 801d238:	b2db      	uxtb	r3, r3
 801d23a:	1c1a      	adds	r2, r3, #0
 801d23c:	2307      	movs	r3, #7
 801d23e:	4013      	ands	r3, r2
 801d240:	b2da      	uxtb	r2, r3
 801d242:	2377      	movs	r3, #119	; 0x77
 801d244:	18fb      	adds	r3, r7, r3
 801d246:	2107      	movs	r1, #7
 801d248:	400a      	ands	r2, r1
 801d24a:	0110      	lsls	r0, r2, #4
 801d24c:	781a      	ldrb	r2, [r3, #0]
 801d24e:	2170      	movs	r1, #112	; 0x70
 801d250:	438a      	bics	r2, r1
 801d252:	1c11      	adds	r1, r2, #0
 801d254:	1c02      	adds	r2, r0, #0
 801d256:	430a      	orrs	r2, r1
 801d258:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801d25a:	193b      	adds	r3, r7, r4
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	2132      	movs	r1, #50	; 0x32
 801d260:	0018      	movs	r0, r3
 801d262:	f7e8 ffc5 	bl	80061f0 <__udivsi3>
 801d266:	0003      	movs	r3, r0
 801d268:	1c1a      	adds	r2, r3, #0
 801d26a:	237f      	movs	r3, #127	; 0x7f
 801d26c:	4013      	ands	r3, r2
 801d26e:	b2da      	uxtb	r2, r3
 801d270:	2374      	movs	r3, #116	; 0x74
 801d272:	18fb      	adds	r3, r7, r3
 801d274:	217f      	movs	r1, #127	; 0x7f
 801d276:	400a      	ands	r2, r1
 801d278:	0010      	movs	r0, r2
 801d27a:	781a      	ldrb	r2, [r3, #0]
 801d27c:	217f      	movs	r1, #127	; 0x7f
 801d27e:	438a      	bics	r2, r1
 801d280:	1c11      	adds	r1, r2, #0
 801d282:	1c02      	adds	r2, r0, #0
 801d284:	430a      	orrs	r2, r1
 801d286:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801d288:	238c      	movs	r3, #140	; 0x8c
 801d28a:	18fb      	adds	r3, r7, r3
 801d28c:	681b      	ldr	r3, [r3, #0]
 801d28e:	2114      	movs	r1, #20
 801d290:	0018      	movs	r0, r3
 801d292:	f7e8 ffad 	bl	80061f0 <__udivsi3>
 801d296:	0003      	movs	r3, r0
 801d298:	055b      	lsls	r3, r3, #21
 801d29a:	0d5b      	lsrs	r3, r3, #21
 801d29c:	b29b      	uxth	r3, r3
 801d29e:	055b      	lsls	r3, r3, #21
 801d2a0:	0d5b      	lsrs	r3, r3, #21
 801d2a2:	025b      	lsls	r3, r3, #9
 801d2a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d2a6:	4917      	ldr	r1, [pc, #92]	; (801d304 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3d8>)
 801d2a8:	400a      	ands	r2, r1
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	677b      	str	r3, [r7, #116]	; 0x74
    break;
 801d2ae:	46c0      	nop			; (mov r8, r8)
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d2b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d2b2:	2184      	movs	r1, #132	; 0x84
 801d2b4:	187b      	adds	r3, r7, r1
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	63da      	str	r2, [r3, #60]	; 0x3c
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801d2ba:	2377      	movs	r3, #119	; 0x77
 801d2bc:	18fb      	adds	r3, r7, r3
 801d2be:	781b      	ldrb	r3, [r3, #0]
 801d2c0:	065b      	lsls	r3, r3, #25
 801d2c2:	0f5b      	lsrs	r3, r3, #29
 801d2c4:	b2db      	uxtb	r3, r3
 801d2c6:	001a      	movs	r2, r3
 801d2c8:	187b      	adds	r3, r7, r1
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801d2ce:	187b      	adds	r3, r7, r1
 801d2d0:	681b      	ldr	r3, [r3, #0]
 801d2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 801d2d8:	187b      	adds	r3, r7, r1
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	228c      	movs	r2, #140	; 0x8c
 801d2de:	18ba      	adds	r2, r7, r2
 801d2e0:	6812      	ldr	r2, [r2, #0]
 801d2e2:	649a      	str	r2, [r3, #72]	; 0x48
}
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	b025      	add	sp, #148	; 0x94
 801d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2ea:	46c0      	nop			; (mov r8, r8)
 801d2ec:	20002f48 	.word	0x20002f48
 801d2f0:	2000010c 	.word	0x2000010c
 801d2f4:	20002f34 	.word	0x20002f34
 801d2f8:	200000f8 	.word	0x200000f8
 801d2fc:	08024dc4 	.word	0x08024dc4
 801d300:	fff003ff 	.word	0xfff003ff
 801d304:	fff001ff 	.word	0xfff001ff

0801d308 <USER_SERV_SNK_BuildRequestedRDO>:
void USER_SERV_SNK_BuildRequestedRDO(uint8_t PortNum,
                                                  uint16_t IndexSrcPDO,
												  uint16_t Voltage_mV, uint16_t Current_mA,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801d308:	b5b0      	push	{r4, r5, r7, lr}
 801d30a:	b088      	sub	sp, #32
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	0005      	movs	r5, r0
 801d310:	000c      	movs	r4, r1
 801d312:	0010      	movs	r0, r2
 801d314:	0019      	movs	r1, r3
 801d316:	1dfb      	adds	r3, r7, #7
 801d318:	1c2a      	adds	r2, r5, #0
 801d31a:	701a      	strb	r2, [r3, #0]
 801d31c:	1d3b      	adds	r3, r7, #4
 801d31e:	1c22      	adds	r2, r4, #0
 801d320:	801a      	strh	r2, [r3, #0]
 801d322:	1cbb      	adds	r3, r7, #2
 801d324:	1c02      	adds	r2, r0, #0
 801d326:	801a      	strh	r2, [r3, #0]
 801d328:	003b      	movs	r3, r7
 801d32a:	1c0a      	adds	r2, r1, #0
 801d32c:	801a      	strh	r2, [r3, #0]
  uint32_t mv = Voltage_mV;
 801d32e:	1cbb      	adds	r3, r7, #2
 801d330:	881b      	ldrh	r3, [r3, #0]
 801d332:	61fb      	str	r3, [r7, #28]
  uint32_t ma = Current_mA;
 801d334:	003b      	movs	r3, r7
 801d336:	881b      	ldrh	r3, [r3, #0]
 801d338:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801d33a:	1dfb      	adds	r3, r7, #7
 801d33c:	781a      	ldrb	r2, [r3, #0]
 801d33e:	0013      	movs	r3, r2
 801d340:	009b      	lsls	r3, r3, #2
 801d342:	189b      	adds	r3, r3, r2
 801d344:	011b      	lsls	r3, r3, #4
 801d346:	4a63      	ldr	r2, [pc, #396]	; (801d4d4 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d348:	189b      	adds	r3, r3, r2
 801d34a:	617b      	str	r3, [r7, #20]

  /* Initialize RDO */
  rdo.d32 = 0;
 801d34c:	2300      	movs	r3, #0
 801d34e:	60fb      	str	r3, [r7, #12]
  rdo.GenericRDO.USBCommunicationsCapable = 0; //snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801d350:	200f      	movs	r0, #15
 801d352:	183b      	adds	r3, r7, r0
 801d354:	781a      	ldrb	r2, [r3, #0]
 801d356:	2102      	movs	r1, #2
 801d358:	438a      	bics	r2, r1
 801d35a:	701a      	strb	r2, [r3, #0]
                                               //Shall only be set for Sources capable of communication over the USB data lines
  rdo.GenericRDO.NoUSBSuspend             = 1; //Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting
 801d35c:	183b      	adds	r3, r7, r0
 801d35e:	781a      	ldrb	r2, [r3, #0]
 801d360:	2101      	movs	r1, #1
 801d362:	430a      	orrs	r2, r1
 801d364:	701a      	strb	r2, [r3, #0]
                                               //the No USB Suspend flag in a Request Message
  rdo.GenericRDO.ObjectPosition = IndexSrcPDO;
 801d366:	1d3b      	adds	r3, r7, #4
 801d368:	881b      	ldrh	r3, [r3, #0]
 801d36a:	1c1a      	adds	r2, r3, #0
 801d36c:	2307      	movs	r3, #7
 801d36e:	4013      	ands	r3, r2
 801d370:	b2da      	uxtb	r2, r3
 801d372:	183b      	adds	r3, r7, r0
 801d374:	2107      	movs	r1, #7
 801d376:	400a      	ands	r2, r1
 801d378:	0110      	lsls	r0, r2, #4
 801d37a:	781a      	ldrb	r2, [r3, #0]
 801d37c:	2170      	movs	r1, #112	; 0x70
 801d37e:	438a      	bics	r2, r1
 801d380:	1c11      	adds	r1, r2, #0
 801d382:	1c02      	adds	r2, r0, #0
 801d384:	430a      	orrs	r2, r1
 801d386:	701a      	strb	r2, [r3, #0]

  /* Initialize PDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO-1];
 801d388:	1d3b      	adds	r3, r7, #4
 801d38a:	881b      	ldrh	r3, [r3, #0]
 801d38c:	1e5a      	subs	r2, r3, #1
 801d38e:	697b      	ldr	r3, [r7, #20]
 801d390:	0092      	lsls	r2, r2, #2
 801d392:	58d3      	ldr	r3, [r2, r3]
 801d394:	613b      	str	r3, [r7, #16]
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 801d396:	2113      	movs	r1, #19
 801d398:	187b      	adds	r3, r7, r1
 801d39a:	781b      	ldrb	r3, [r3, #0]
 801d39c:	061b      	lsls	r3, r3, #24
 801d39e:	0f9b      	lsrs	r3, r3, #30
 801d3a0:	b2db      	uxtb	r3, r3
 801d3a2:	001a      	movs	r2, r3
 801d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3a6:	601a      	str	r2, [r3, #0]

  /* Build RDO*/
  switch (pdo.GenericPDO.PowerObject)
 801d3a8:	187b      	adds	r3, r7, r1
 801d3aa:	781b      	ldrb	r3, [r3, #0]
 801d3ac:	061b      	lsls	r3, r3, #24
 801d3ae:	0f9b      	lsrs	r3, r3, #30
 801d3b0:	b2db      	uxtb	r3, r3
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d002      	beq.n	801d3bc <USER_SERV_SNK_BuildRequestedRDO+0xb4>
 801d3b6:	2b03      	cmp	r3, #3
 801d3b8:	d02e      	beq.n	801d418 <USER_SERV_SNK_BuildRequestedRDO+0x110>
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
      }
      break;

      default:
        break;
 801d3ba:	e072      	b.n	801d4a2 <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 801d3bc:	1dfb      	adds	r3, r7, #7
 801d3be:	781a      	ldrb	r2, [r3, #0]
 801d3c0:	4944      	ldr	r1, [pc, #272]	; (801d4d4 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d3c2:	0013      	movs	r3, r2
 801d3c4:	009b      	lsls	r3, r3, #2
 801d3c6:	189b      	adds	r3, r3, r2
 801d3c8:	011b      	lsls	r3, r3, #4
 801d3ca:	18cb      	adds	r3, r1, r3
 801d3cc:	334c      	adds	r3, #76	; 0x4c
 801d3ce:	69ba      	ldr	r2, [r7, #24]
 801d3d0:	601a      	str	r2, [r3, #0]
        rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 801d3d2:	69bb      	ldr	r3, [r7, #24]
 801d3d4:	210a      	movs	r1, #10
 801d3d6:	0018      	movs	r0, r3
 801d3d8:	f7e8 ff0a 	bl	80061f0 <__udivsi3>
 801d3dc:	0003      	movs	r3, r0
 801d3de:	059b      	lsls	r3, r3, #22
 801d3e0:	0d9b      	lsrs	r3, r3, #22
 801d3e2:	b29b      	uxth	r3, r3
 801d3e4:	059b      	lsls	r3, r3, #22
 801d3e6:	0d9b      	lsrs	r3, r3, #22
 801d3e8:	029b      	lsls	r3, r3, #10
 801d3ea:	68fa      	ldr	r2, [r7, #12]
 801d3ec:	493a      	ldr	r1, [pc, #232]	; (801d4d8 <USER_SERV_SNK_BuildRequestedRDO+0x1d0>)
 801d3ee:	400a      	ands	r2, r1
 801d3f0:	4313      	orrs	r3, r2
 801d3f2:	60fb      	str	r3, [r7, #12]
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits; //ma / 10U;
 801d3f4:	2310      	movs	r3, #16
 801d3f6:	18fb      	adds	r3, r7, r3
 801d3f8:	881b      	ldrh	r3, [r3, #0]
 801d3fa:	059b      	lsls	r3, r3, #22
 801d3fc:	0d9b      	lsrs	r3, r3, #22
 801d3fe:	b29a      	uxth	r2, r3
 801d400:	230c      	movs	r3, #12
 801d402:	18fb      	adds	r3, r7, r3
 801d404:	0592      	lsls	r2, r2, #22
 801d406:	0d90      	lsrs	r0, r2, #22
 801d408:	881a      	ldrh	r2, [r3, #0]
 801d40a:	0a92      	lsrs	r2, r2, #10
 801d40c:	0292      	lsls	r2, r2, #10
 801d40e:	1c11      	adds	r1, r2, #0
 801d410:	1c02      	adds	r2, r0, #0
 801d412:	430a      	orrs	r2, r1
 801d414:	801a      	strh	r2, [r3, #0]
      break;
 801d416:	e044      	b.n	801d4a2 <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 801d418:	1dfb      	adds	r3, r7, #7
 801d41a:	781a      	ldrb	r2, [r3, #0]
 801d41c:	492d      	ldr	r1, [pc, #180]	; (801d4d4 <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 801d41e:	0013      	movs	r3, r2
 801d420:	009b      	lsls	r3, r3, #2
 801d422:	189b      	adds	r3, r3, r2
 801d424:	011b      	lsls	r3, r3, #4
 801d426:	18cb      	adds	r3, r1, r3
 801d428:	334c      	adds	r3, #76	; 0x4c
 801d42a:	69ba      	ldr	r2, [r7, #24]
 801d42c:	601a      	str	r2, [r3, #0]
        rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO;
 801d42e:	1d3b      	adds	r3, r7, #4
 801d430:	881b      	ldrh	r3, [r3, #0]
 801d432:	1c1a      	adds	r2, r3, #0
 801d434:	2307      	movs	r3, #7
 801d436:	4013      	ands	r3, r2
 801d438:	b2da      	uxtb	r2, r3
 801d43a:	230f      	movs	r3, #15
 801d43c:	18fb      	adds	r3, r7, r3
 801d43e:	2107      	movs	r1, #7
 801d440:	400a      	ands	r2, r1
 801d442:	0110      	lsls	r0, r2, #4
 801d444:	781a      	ldrb	r2, [r3, #0]
 801d446:	2170      	movs	r1, #112	; 0x70
 801d448:	438a      	bics	r2, r1
 801d44a:	1c11      	adds	r1, r2, #0
 801d44c:	1c02      	adds	r2, r0, #0
 801d44e:	430a      	orrs	r2, r1
 801d450:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 801d452:	69bb      	ldr	r3, [r7, #24]
 801d454:	2132      	movs	r1, #50	; 0x32
 801d456:	0018      	movs	r0, r3
 801d458:	f7e8 feca 	bl	80061f0 <__udivsi3>
 801d45c:	0003      	movs	r3, r0
 801d45e:	1c1a      	adds	r2, r3, #0
 801d460:	237f      	movs	r3, #127	; 0x7f
 801d462:	4013      	ands	r3, r2
 801d464:	b2da      	uxtb	r2, r3
 801d466:	230c      	movs	r3, #12
 801d468:	18fb      	adds	r3, r7, r3
 801d46a:	217f      	movs	r1, #127	; 0x7f
 801d46c:	400a      	ands	r2, r1
 801d46e:	0010      	movs	r0, r2
 801d470:	781a      	ldrb	r2, [r3, #0]
 801d472:	217f      	movs	r1, #127	; 0x7f
 801d474:	438a      	bics	r2, r1
 801d476:	1c11      	adds	r1, r2, #0
 801d478:	1c02      	adds	r2, r0, #0
 801d47a:	430a      	orrs	r2, r1
 801d47c:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 801d47e:	69fb      	ldr	r3, [r7, #28]
 801d480:	2114      	movs	r1, #20
 801d482:	0018      	movs	r0, r3
 801d484:	f7e8 feb4 	bl	80061f0 <__udivsi3>
 801d488:	0003      	movs	r3, r0
 801d48a:	055b      	lsls	r3, r3, #21
 801d48c:	0d5b      	lsrs	r3, r3, #21
 801d48e:	b29b      	uxth	r3, r3
 801d490:	055b      	lsls	r3, r3, #21
 801d492:	0d5b      	lsrs	r3, r3, #21
 801d494:	025b      	lsls	r3, r3, #9
 801d496:	68fa      	ldr	r2, [r7, #12]
 801d498:	4910      	ldr	r1, [pc, #64]	; (801d4dc <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 801d49a:	400a      	ands	r2, r1
 801d49c:	4313      	orrs	r3, r2
 801d49e:	60fb      	str	r3, [r7, #12]
      break;
 801d4a0:	46c0      	nop			; (mov r8, r8)
    }

  /*Assign request values to pdhandle*/
  pdhandle->DPM_RDOPositionPrevious = pdhandle->DPM_RDOPosition;
 801d4a2:	697b      	ldr	r3, [r7, #20]
 801d4a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801d4a6:	697b      	ldr	r3, [r7, #20]
 801d4a8:	645a      	str	r2, [r3, #68]	; 0x44
  pdhandle->DPM_RDOPosition = IndexSrcPDO; //pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 801d4aa:	1d3b      	adds	r3, r7, #4
 801d4ac:	881a      	ldrh	r2, [r3, #0]
 801d4ae:	697b      	ldr	r3, [r7, #20]
 801d4b0:	641a      	str	r2, [r3, #64]	; 0x40
  pdhandle->DPM_RequestedVoltage = mv;
 801d4b2:	697b      	ldr	r3, [r7, #20]
 801d4b4:	69fa      	ldr	r2, [r7, #28]
 801d4b6:	649a      	str	r2, [r3, #72]	; 0x48
  pdhandle->DPM_RequestedCurrent = ma;
 801d4b8:	697b      	ldr	r3, [r7, #20]
 801d4ba:	69ba      	ldr	r2, [r7, #24]
 801d4bc:	64da      	str	r2, [r3, #76]	; 0x4c

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 801d4be:	68fa      	ldr	r2, [r7, #12]
 801d4c0:	697b      	ldr	r3, [r7, #20]
 801d4c2:	63da      	str	r2, [r3, #60]	; 0x3c
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 801d4c4:	697b      	ldr	r3, [r7, #20]
 801d4c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d4ca:	601a      	str	r2, [r3, #0]

}
 801d4cc:	46c0      	nop			; (mov r8, r8)
 801d4ce:	46bd      	mov	sp, r7
 801d4d0:	b008      	add	sp, #32
 801d4d2:	bdb0      	pop	{r4, r5, r7, pc}
 801d4d4:	20002f48 	.word	0x20002f48
 801d4d8:	fff003ff 	.word	0xfff003ff
 801d4dc:	fff001ff 	.word	0xfff001ff

0801d4e0 <USER_SERV_FindSRCIndex>:
											USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
											uint16_t Voltage_mV,
											uint16_t Current_mA,
											uint8_t Method)

{
 801d4e0:	b590      	push	{r4, r7, lr}
 801d4e2:	b099      	sub	sp, #100	; 0x64
 801d4e4:	af00      	add	r7, sp, #0
 801d4e6:	60f8      	str	r0, [r7, #12]
 801d4e8:	60b9      	str	r1, [r7, #8]
 801d4ea:	0019      	movs	r1, r3
 801d4ec:	1dbb      	adds	r3, r7, #6
 801d4ee:	801a      	strh	r2, [r3, #0]
 801d4f0:	1d3b      	adds	r3, r7, #4
 801d4f2:	1c0a      	adds	r2, r1, #0
 801d4f4:	801a      	strh	r2, [r3, #0]
	USBPD_PDO_TypeDef srcpdo;
	uint32_t *ptpdoarray;
	uint32_t reqvoltage = Voltage_mV;
 801d4f6:	1dbb      	adds	r3, r7, #6
 801d4f8:	881b      	ldrh	r3, [r3, #0]
 801d4fa:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t reqcurrent = Current_mA;
 801d4fc:	1d3b      	adds	r3, r7, #4
 801d4fe:	881b      	ldrh	r3, [r3, #0]
 801d500:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t nbsrcpdo;
	uint32_t allowablepower;
	uint32_t selpower;
	uint32_t allowablecurrent;
	uint32_t selcurrent = 0;
 801d502:	2300      	movs	r3, #0
 801d504:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 801d506:	23ff      	movs	r3, #255	; 0xff
 801d508:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t temp_index;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	2274      	movs	r2, #116	; 0x74
 801d50e:	435a      	muls	r2, r3
 801d510:	4b7d      	ldr	r3, [pc, #500]	; (801d708 <USER_SERV_FindSRCIndex+0x228>)
 801d512:	18d3      	adds	r3, r2, r3
 801d514:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t RDOposition;
	uint32_t nbsrcAPDO = 0;
 801d516:	2300      	movs	r3, #0
 801d518:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t nbsrcFixedPDO = 0;
 801d51a:	2300      	movs	r3, #0
 801d51c:	64fb      	str	r3, [r7, #76]	; 0x4c


	//Get current PDO position
	USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801d51e:	68fa      	ldr	r2, [r7, #12]
 801d520:	0013      	movs	r3, r2
 801d522:	009b      	lsls	r3, r3, #2
 801d524:	189b      	adds	r3, r3, r2
 801d526:	011b      	lsls	r3, r3, #4
 801d528:	4a78      	ldr	r2, [pc, #480]	; (801d70c <USER_SERV_FindSRCIndex+0x22c>)
 801d52a:	189b      	adds	r3, r3, r2
 801d52c:	637b      	str	r3, [r7, #52]	; 0x34
	RDOposition = pdhandle->DPM_RDOPosition;
 801d52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d532:	633b      	str	r3, [r7, #48]	; 0x30

	//Get number of source PDOs
	nbsrcpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 801d534:	4975      	ldr	r1, [pc, #468]	; (801d70c <USER_SERV_FindSRCIndex+0x22c>)
 801d536:	68fa      	ldr	r2, [r7, #12]
 801d538:	0013      	movs	r3, r2
 801d53a:	009b      	lsls	r3, r3, #2
 801d53c:	189b      	adds	r3, r3, r2
 801d53e:	011b      	lsls	r3, r3, #4
 801d540:	18cb      	adds	r3, r1, r3
 801d542:	331c      	adds	r3, #28
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Get array list of SRC PDOs
	ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801d548:	68fa      	ldr	r2, [r7, #12]
 801d54a:	0013      	movs	r3, r2
 801d54c:	009b      	lsls	r3, r3, #2
 801d54e:	189b      	adds	r3, r3, r2
 801d550:	011b      	lsls	r3, r3, #4
 801d552:	4a6e      	ldr	r2, [pc, #440]	; (801d70c <USER_SERV_FindSRCIndex+0x22c>)
 801d554:	189b      	adds	r3, r3, r2
 801d556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get number of APDOs and FixedPDOs */
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d558:	2300      	movs	r3, #0
 801d55a:	657b      	str	r3, [r7, #84]	; 0x54
 801d55c:	e019      	b.n	801d592 <USER_SERV_FindSRCIndex+0xb2>
	{
		srcpdo.d32 = ptpdoarray[temp_index];
 801d55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d560:	009b      	lsls	r3, r3, #2
 801d562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d564:	18d3      	adds	r3, r2, r3
 801d566:	681b      	ldr	r3, [r3, #0]
 801d568:	613b      	str	r3, [r7, #16]

		switch (srcpdo.GenericPDO.PowerObject)
 801d56a:	2313      	movs	r3, #19
 801d56c:	18fb      	adds	r3, r7, r3
 801d56e:	781b      	ldrb	r3, [r3, #0]
 801d570:	061b      	lsls	r3, r3, #24
 801d572:	0f9b      	lsrs	r3, r3, #30
 801d574:	b2db      	uxtb	r3, r3
 801d576:	2b00      	cmp	r3, #0
 801d578:	d002      	beq.n	801d580 <USER_SERV_FindSRCIndex+0xa0>
 801d57a:	2b03      	cmp	r3, #3
 801d57c:	d003      	beq.n	801d586 <USER_SERV_FindSRCIndex+0xa6>
 801d57e:	e005      	b.n	801d58c <USER_SERV_FindSRCIndex+0xac>
		{
			/* SRC Fixed Supply PDO */
			case USBPD_CORE_PDO_TYPE_FIXED:
			{
				nbsrcFixedPDO++;
 801d580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d582:	3301      	adds	r3, #1
 801d584:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			/* Augmented Power Data Object (APDO) */
			case USBPD_CORE_PDO_TYPE_APDO:
			{
				//nbsrcAPDO++;
				nbsrcAPDO++;
 801d586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d588:	3301      	adds	r3, #1
 801d58a:	653b      	str	r3, [r7, #80]	; 0x50
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d58c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d58e:	3301      	adds	r3, #1
 801d590:	657b      	str	r3, [r7, #84]	; 0x54
 801d592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d596:	429a      	cmp	r2, r3
 801d598:	d3e1      	bcc.n	801d55e <USER_SERV_FindSRCIndex+0x7e>
		}
	}


	// Search for matching APDO or find next FixedPDO
	if (nbsrcAPDO > 0)
 801d59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d100      	bne.n	801d5a2 <USER_SERV_FindSRCIndex+0xc2>
 801d5a0:	e07c      	b.n	801d69c <USER_SERV_FindSRCIndex+0x1bc>
	{

		/* Check SRC PDO value according to its type */
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	657b      	str	r3, [r7, #84]	; 0x54
 801d5a6:	e074      	b.n	801d692 <USER_SERV_FindSRCIndex+0x1b2>
		{
			srcpdo.d32 = ptpdoarray[temp_index];
 801d5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d5aa:	009b      	lsls	r3, r3, #2
 801d5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d5ae:	18d3      	adds	r3, r2, r3
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	613b      	str	r3, [r7, #16]

			switch (srcpdo.GenericPDO.PowerObject)
 801d5b4:	2313      	movs	r3, #19
 801d5b6:	18fb      	adds	r3, r7, r3
 801d5b8:	781b      	ldrb	r3, [r3, #0]
 801d5ba:	061b      	lsls	r3, r3, #24
 801d5bc:	0f9b      	lsrs	r3, r3, #30
 801d5be:	b2db      	uxtb	r3, r3
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d001      	beq.n	801d5c8 <USER_SERV_FindSRCIndex+0xe8>
 801d5c4:	2b03      	cmp	r3, #3
 801d5c6:	d161      	bne.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
			{
				uint16_t srcmaxvoltage100mv;
				uint16_t srcminvoltage100mv;
				uint16_t srcmaxcurrent50ma;
				//Extract voltage and current limits of given SRC APDO
				srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801d5c8:	2312      	movs	r3, #18
 801d5ca:	18fb      	adds	r3, r7, r3
 801d5cc:	881b      	ldrh	r3, [r3, #0]
 801d5ce:	05db      	lsls	r3, r3, #23
 801d5d0:	0e1b      	lsrs	r3, r3, #24
 801d5d2:	b2da      	uxtb	r2, r3
 801d5d4:	201e      	movs	r0, #30
 801d5d6:	183b      	adds	r3, r7, r0
 801d5d8:	801a      	strh	r2, [r3, #0]
				srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801d5da:	2110      	movs	r1, #16
 801d5dc:	187b      	adds	r3, r7, r1
 801d5de:	785a      	ldrb	r2, [r3, #1]
 801d5e0:	241c      	movs	r4, #28
 801d5e2:	193b      	adds	r3, r7, r4
 801d5e4:	801a      	strh	r2, [r3, #0]
				srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801d5e6:	187b      	adds	r3, r7, r1
 801d5e8:	781b      	ldrb	r3, [r3, #0]
 801d5ea:	065b      	lsls	r3, r3, #25
 801d5ec:	0e5b      	lsrs	r3, r3, #25
 801d5ee:	b2da      	uxtb	r2, r3
 801d5f0:	211a      	movs	r1, #26
 801d5f2:	187b      	adds	r3, r7, r1
 801d5f4:	801a      	strh	r2, [r3, #0]

				/*Check if reqvoltage falls within SRC_APDO voltage range*/
				if ( (PWR_DECODE_100MV(srcminvoltage100mv) <= reqvoltage) && (reqvoltage <= PWR_DECODE_100MV(srcmaxvoltage100mv)) )
 801d5f6:	193b      	adds	r3, r7, r4
 801d5f8:	881b      	ldrh	r3, [r3, #0]
 801d5fa:	2264      	movs	r2, #100	; 0x64
 801d5fc:	4353      	muls	r3, r2
 801d5fe:	b29b      	uxth	r3, r3
 801d600:	001a      	movs	r2, r3
 801d602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d604:	4293      	cmp	r3, r2
 801d606:	d341      	bcc.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
 801d608:	183b      	adds	r3, r7, r0
 801d60a:	881b      	ldrh	r3, [r3, #0]
 801d60c:	2264      	movs	r2, #100	; 0x64
 801d60e:	4353      	muls	r3, r2
 801d610:	b29b      	uxth	r3, r3
 801d612:	001a      	movs	r2, r3
 801d614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d616:	4293      	cmp	r3, r2
 801d618:	d838      	bhi.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
				{
					/*Check that reqcurrent is smaller or equal to srcmaxcurrent*/
					if ( (reqcurrent <= PWR_DECODE_50MA(srcmaxcurrent50ma)) && (reqcurrent != 0) )
 801d61a:	187b      	adds	r3, r7, r1
 801d61c:	881b      	ldrh	r3, [r3, #0]
 801d61e:	2232      	movs	r2, #50	; 0x32
 801d620:	4353      	muls	r3, r2
 801d622:	b29b      	uxth	r3, r3
 801d624:	001a      	movs	r2, r3
 801d626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d628:	4293      	cmp	r3, r2
 801d62a:	d82f      	bhi.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
 801d62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d02c      	beq.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
					{
						/*Convert srcmaxcurrent into mV*/
						allowablecurrent = PWR_DECODE_50MA(srcmaxcurrent50ma);
 801d632:	187b      	adds	r3, r7, r1
 801d634:	881b      	ldrh	r3, [r3, #0]
 801d636:	2232      	movs	r2, #50	; 0x32
 801d638:	4353      	muls	r3, r2
 801d63a:	b29b      	uxth	r3, r3
 801d63c:	617b      	str	r3, [r7, #20]

						/*Find the best APDO index based on the method */
						switch(Method)
 801d63e:	2368      	movs	r3, #104	; 0x68
 801d640:	2208      	movs	r2, #8
 801d642:	189b      	adds	r3, r3, r2
 801d644:	19db      	adds	r3, r3, r7
 801d646:	781b      	ldrb	r3, [r3, #0]
 801d648:	2b04      	cmp	r3, #4
 801d64a:	d002      	beq.n	801d652 <USER_SERV_FindSRCIndex+0x172>
 801d64c:	2b05      	cmp	r3, #5
 801d64e:	d009      	beq.n	801d664 <USER_SERV_FindSRCIndex+0x184>
 801d650:	e014      	b.n	801d67c <USER_SERV_FindSRCIndex+0x19c>
						{
						case PDO_SEL_METHOD_MAX_CUR:
							if (allowablecurrent > selcurrent)
 801d652:	697a      	ldr	r2, [r7, #20]
 801d654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d656:	429a      	cmp	r2, r3
 801d658:	d915      	bls.n	801d686 <USER_SERV_FindSRCIndex+0x1a6>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801d65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d65c:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801d65e:	697b      	ldr	r3, [r7, #20]
 801d660:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801d662:	e010      	b.n	801d686 <USER_SERV_FindSRCIndex+0x1a6>

						case PDO_SEL_METHOD_MIN_CUR:
							if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 801d664:	697a      	ldr	r2, [r7, #20]
 801d666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d668:	429a      	cmp	r2, r3
 801d66a:	d302      	bcc.n	801d672 <USER_SERV_FindSRCIndex+0x192>
 801d66c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d10b      	bne.n	801d68a <USER_SERV_FindSRCIndex+0x1aa>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 801d672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d674:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 801d676:	697b      	ldr	r3, [r7, #20]
 801d678:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 801d67a:	e006      	b.n	801d68a <USER_SERV_FindSRCIndex+0x1aa>

						default:
							/* Default behavior: last PDO is selected */
							curr_index = temp_index;
 801d67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d67e:	65bb      	str	r3, [r7, #88]	; 0x58
							selcurrent = allowablecurrent;
 801d680:	697b      	ldr	r3, [r7, #20]
 801d682:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d684:	e002      	b.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801d686:	46c0      	nop			; (mov r8, r8)
 801d688:	e000      	b.n	801d68c <USER_SERV_FindSRCIndex+0x1ac>
							break;
 801d68a:	46c0      	nop			; (mov r8, r8)
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 801d68c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d68e:	3301      	adds	r3, #1
 801d690:	657b      	str	r3, [r7, #84]	; 0x54
 801d692:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d696:	429a      	cmp	r2, r3
 801d698:	d386      	bcc.n	801d5a8 <USER_SERV_FindSRCIndex+0xc8>
 801d69a:	e02e      	b.n	801d6fa <USER_SERV_FindSRCIndex+0x21a>
		}
	}

	else
	{
		uint32_t start_index = RDOposition;
 801d69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d69e:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t found_fixed_pdo = 0;
 801d6a0:	2300      	movs	r3, #0
 801d6a2:	64bb      	str	r3, [r7, #72]	; 0x48

		// Start searching for the next Fixed PDO
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	647b      	str	r3, [r7, #68]	; 0x44
 801d6a8:	e01e      	b.n	801d6e8 <USER_SERV_FindSRCIndex+0x208>
		{
			// Increment and wrap around if necessary
			uint32_t check_index = (start_index + i) % nbsrcpdo;
 801d6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d6ae:	18d3      	adds	r3, r2, r3
 801d6b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6b2:	0018      	movs	r0, r3
 801d6b4:	f7e8 fe22 	bl	80062fc <__aeabi_uidivmod>
 801d6b8:	000b      	movs	r3, r1
 801d6ba:	623b      	str	r3, [r7, #32]

			// Load the PDO
			srcpdo.d32 = ptpdoarray[check_index];
 801d6bc:	6a3b      	ldr	r3, [r7, #32]
 801d6be:	009b      	lsls	r3, r3, #2
 801d6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6c2:	18d3      	adds	r3, r2, r3
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	613b      	str	r3, [r7, #16]

			// Check if it's a Fixed PDO
			if (srcpdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 801d6c8:	2313      	movs	r3, #19
 801d6ca:	18fb      	adds	r3, r7, r3
 801d6cc:	781b      	ldrb	r3, [r3, #0]
 801d6ce:	223f      	movs	r2, #63	; 0x3f
 801d6d0:	4393      	bics	r3, r2
 801d6d2:	b2db      	uxtb	r3, r3
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d104      	bne.n	801d6e2 <USER_SERV_FindSRCIndex+0x202>
			{
				curr_index = check_index;
 801d6d8:	6a3b      	ldr	r3, [r7, #32]
 801d6da:	65bb      	str	r3, [r7, #88]	; 0x58
				found_fixed_pdo = 1;
 801d6dc:	2301      	movs	r3, #1
 801d6de:	64bb      	str	r3, [r7, #72]	; 0x48
				break;
 801d6e0:	e006      	b.n	801d6f0 <USER_SERV_FindSRCIndex+0x210>
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 801d6e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	647b      	str	r3, [r7, #68]	; 0x44
 801d6e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ec:	429a      	cmp	r2, r3
 801d6ee:	d3dc      	bcc.n	801d6aa <USER_SERV_FindSRCIndex+0x1ca>
			}
		}

		// Default to the first Fixed PDO if none found (failsafe)
		if (!found_fixed_pdo)
 801d6f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d101      	bne.n	801d6fa <USER_SERV_FindSRCIndex+0x21a>
		{
			curr_index = 0;
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	65bb      	str	r3, [r7, #88]	; 0x58
		}
	}

	return curr_index+1;
 801d6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d6fc:	3301      	adds	r3, #1
}
 801d6fe:	0018      	movs	r0, r3
 801d700:	46bd      	mov	sp, r7
 801d702:	b019      	add	sp, #100	; 0x64
 801d704:	bd90      	pop	{r4, r7, pc}
 801d706:	46c0      	nop			; (mov r8, r8)
 801d708:	2000010c 	.word	0x2000010c
 801d70c:	20002f48 	.word	0x20002f48

0801d710 <USER_SERV_ExtractSRCCapa>:

void USER_SERV_ExtractSRCCapa(void) {
 801d710:	b580      	push	{r7, lr}
 801d712:	af00      	add	r7, sp, #0
	sourcecapa_limits();
 801d714:	f7e9 fd8c 	bl	8007230 <sourcecapa_limits>
}
 801d718:	46c0      	nop			; (mov r8, r8)
 801d71a:	46bd      	mov	sp, r7
 801d71c:	bd80      	pop	{r7, pc}
	...

0801d720 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801d720:	b580      	push	{r7, lr}
 801d722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801d724:	4914      	ldr	r1, [pc, #80]	; (801d778 <MX_USB_Device_Init+0x58>)
 801d726:	4b15      	ldr	r3, [pc, #84]	; (801d77c <MX_USB_Device_Init+0x5c>)
 801d728:	2200      	movs	r2, #0
 801d72a:	0018      	movs	r0, r3
 801d72c:	f7f8 fe36 	bl	801639c <USBD_Init>
 801d730:	1e03      	subs	r3, r0, #0
 801d732:	d001      	beq.n	801d738 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801d734:	f7eb fa48 	bl	8008bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801d738:	4a11      	ldr	r2, [pc, #68]	; (801d780 <MX_USB_Device_Init+0x60>)
 801d73a:	4b10      	ldr	r3, [pc, #64]	; (801d77c <MX_USB_Device_Init+0x5c>)
 801d73c:	0011      	movs	r1, r2
 801d73e:	0018      	movs	r0, r3
 801d740:	f7f8 fe66 	bl	8016410 <USBD_RegisterClass>
 801d744:	1e03      	subs	r3, r0, #0
 801d746:	d001      	beq.n	801d74c <MX_USB_Device_Init+0x2c>
    Error_Handler();
 801d748:	f7eb fa3e 	bl	8008bc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801d74c:	4a0d      	ldr	r2, [pc, #52]	; (801d784 <MX_USB_Device_Init+0x64>)
 801d74e:	4b0b      	ldr	r3, [pc, #44]	; (801d77c <MX_USB_Device_Init+0x5c>)
 801d750:	0011      	movs	r1, r2
 801d752:	0018      	movs	r0, r3
 801d754:	f7f8 fd8e 	bl	8016274 <USBD_CDC_RegisterInterface>
 801d758:	1e03      	subs	r3, r0, #0
 801d75a:	d001      	beq.n	801d760 <MX_USB_Device_Init+0x40>
    Error_Handler();
 801d75c:	f7eb fa34 	bl	8008bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801d760:	4b06      	ldr	r3, [pc, #24]	; (801d77c <MX_USB_Device_Init+0x5c>)
 801d762:	0018      	movs	r0, r3
 801d764:	f7f8 fe92 	bl	801648c <USBD_Start>
 801d768:	1e03      	subs	r3, r0, #0
 801d76a:	d001      	beq.n	801d770 <MX_USB_Device_Init+0x50>
    Error_Handler();
 801d76c:	f7eb fa2c 	bl	8008bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801d770:	46c0      	nop			; (mov r8, r8)
 801d772:	46bd      	mov	sp, r7
 801d774:	bd80      	pop	{r7, pc}
 801d776:	46c0      	nop			; (mov r8, r8)
 801d778:	200001b4 	.word	0x200001b4
 801d77c:	20002f98 	.word	0x20002f98
 801d780:	20000074 	.word	0x20000074
 801d784:	200001a0 	.word	0x200001a0

0801d788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d78c:	4907      	ldr	r1, [pc, #28]	; (801d7ac <CDC_Init_FS+0x24>)
 801d78e:	4b08      	ldr	r3, [pc, #32]	; (801d7b0 <CDC_Init_FS+0x28>)
 801d790:	2200      	movs	r2, #0
 801d792:	0018      	movs	r0, r3
 801d794:	f7f8 fd88 	bl	80162a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d798:	4a06      	ldr	r2, [pc, #24]	; (801d7b4 <CDC_Init_FS+0x2c>)
 801d79a:	4b05      	ldr	r3, [pc, #20]	; (801d7b0 <CDC_Init_FS+0x28>)
 801d79c:	0011      	movs	r1, r2
 801d79e:	0018      	movs	r0, r3
 801d7a0:	f7f8 fda5 	bl	80162ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d7a4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d7a6:	0018      	movs	r0, r3
 801d7a8:	46bd      	mov	sp, r7
 801d7aa:	bd80      	pop	{r7, pc}
 801d7ac:	20003a74 	.word	0x20003a74
 801d7b0:	20002f98 	.word	0x20002f98
 801d7b4:	20003274 	.word	0x20003274

0801d7b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d7b8:	b580      	push	{r7, lr}
 801d7ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d7bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d7be:	0018      	movs	r0, r3
 801d7c0:	46bd      	mov	sp, r7
 801d7c2:	bd80      	pop	{r7, pc}

0801d7c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d7c4:	b580      	push	{r7, lr}
 801d7c6:	b082      	sub	sp, #8
 801d7c8:	af00      	add	r7, sp, #0
 801d7ca:	6039      	str	r1, [r7, #0]
 801d7cc:	0011      	movs	r1, r2
 801d7ce:	1dfb      	adds	r3, r7, #7
 801d7d0:	1c02      	adds	r2, r0, #0
 801d7d2:	701a      	strb	r2, [r3, #0]
 801d7d4:	1d3b      	adds	r3, r7, #4
 801d7d6:	1c0a      	adds	r2, r1, #0
 801d7d8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801d7da:	1dfb      	adds	r3, r7, #7
 801d7dc:	781b      	ldrb	r3, [r3, #0]
 801d7de:	2b23      	cmp	r3, #35	; 0x23
 801d7e0:	d804      	bhi.n	801d7ec <CDC_Control_FS+0x28>
 801d7e2:	009a      	lsls	r2, r3, #2
 801d7e4:	4b04      	ldr	r3, [pc, #16]	; (801d7f8 <CDC_Control_FS+0x34>)
 801d7e6:	18d3      	adds	r3, r2, r3
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d7ec:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 801d7ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d7f0:	0018      	movs	r0, r3
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	b002      	add	sp, #8
 801d7f6:	bd80      	pop	{r7, pc}
 801d7f8:	0802510c 	.word	0x0802510c

0801d7fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d7fc:	b580      	push	{r7, lr}
 801d7fe:	b082      	sub	sp, #8
 801d800:	af00      	add	r7, sp, #0
 801d802:	6078      	str	r0, [r7, #4]
 801d804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d806:	687a      	ldr	r2, [r7, #4]
 801d808:	4b06      	ldr	r3, [pc, #24]	; (801d824 <CDC_Receive_FS+0x28>)
 801d80a:	0011      	movs	r1, r2
 801d80c:	0018      	movs	r0, r3
 801d80e:	f7f8 fd6e 	bl	80162ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d812:	4b04      	ldr	r3, [pc, #16]	; (801d824 <CDC_Receive_FS+0x28>)
 801d814:	0018      	movs	r0, r3
 801d816:	f7f8 fd87 	bl	8016328 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d81a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d81c:	0018      	movs	r0, r3
 801d81e:	46bd      	mov	sp, r7
 801d820:	b002      	add	sp, #8
 801d822:	bd80      	pop	{r7, pc}
 801d824:	20002f98 	.word	0x20002f98

0801d828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801d828:	b580      	push	{r7, lr}
 801d82a:	b086      	sub	sp, #24
 801d82c:	af00      	add	r7, sp, #0
 801d82e:	60f8      	str	r0, [r7, #12]
 801d830:	60b9      	str	r1, [r7, #8]
 801d832:	1dfb      	adds	r3, r7, #7
 801d834:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801d836:	2117      	movs	r1, #23
 801d838:	187b      	adds	r3, r7, r1
 801d83a:	2200      	movs	r2, #0
 801d83c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801d83e:	187b      	adds	r3, r7, r1
 801d840:	781b      	ldrb	r3, [r3, #0]
 801d842:	b25b      	sxtb	r3, r3
}
 801d844:	0018      	movs	r0, r3
 801d846:	46bd      	mov	sp, r7
 801d848:	b006      	add	sp, #24
 801d84a:	bd80      	pop	{r7, pc}

0801d84c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b082      	sub	sp, #8
 801d850:	af00      	add	r7, sp, #0
 801d852:	0002      	movs	r2, r0
 801d854:	6039      	str	r1, [r7, #0]
 801d856:	1dfb      	adds	r3, r7, #7
 801d858:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801d85a:	683b      	ldr	r3, [r7, #0]
 801d85c:	2212      	movs	r2, #18
 801d85e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801d860:	4b02      	ldr	r3, [pc, #8]	; (801d86c <USBD_CDC_DeviceDescriptor+0x20>)
}
 801d862:	0018      	movs	r0, r3
 801d864:	46bd      	mov	sp, r7
 801d866:	b002      	add	sp, #8
 801d868:	bd80      	pop	{r7, pc}
 801d86a:	46c0      	nop			; (mov r8, r8)
 801d86c:	200001d4 	.word	0x200001d4

0801d870 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	b082      	sub	sp, #8
 801d874:	af00      	add	r7, sp, #0
 801d876:	0002      	movs	r2, r0
 801d878:	6039      	str	r1, [r7, #0]
 801d87a:	1dfb      	adds	r3, r7, #7
 801d87c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d87e:	683b      	ldr	r3, [r7, #0]
 801d880:	2204      	movs	r2, #4
 801d882:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d884:	4b02      	ldr	r3, [pc, #8]	; (801d890 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801d886:	0018      	movs	r0, r3
 801d888:	46bd      	mov	sp, r7
 801d88a:	b002      	add	sp, #8
 801d88c:	bd80      	pop	{r7, pc}
 801d88e:	46c0      	nop			; (mov r8, r8)
 801d890:	200001e8 	.word	0x200001e8

0801d894 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b082      	sub	sp, #8
 801d898:	af00      	add	r7, sp, #0
 801d89a:	0002      	movs	r2, r0
 801d89c:	6039      	str	r1, [r7, #0]
 801d89e:	1dfb      	adds	r3, r7, #7
 801d8a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d8a2:	1dfb      	adds	r3, r7, #7
 801d8a4:	781b      	ldrb	r3, [r3, #0]
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	d106      	bne.n	801d8b8 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801d8aa:	683a      	ldr	r2, [r7, #0]
 801d8ac:	4908      	ldr	r1, [pc, #32]	; (801d8d0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 801d8ae:	4b09      	ldr	r3, [pc, #36]	; (801d8d4 <USBD_CDC_ProductStrDescriptor+0x40>)
 801d8b0:	0018      	movs	r0, r3
 801d8b2:	f7fa f904 	bl	8017abe <USBD_GetString>
 801d8b6:	e005      	b.n	801d8c4 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801d8b8:	683a      	ldr	r2, [r7, #0]
 801d8ba:	4905      	ldr	r1, [pc, #20]	; (801d8d0 <USBD_CDC_ProductStrDescriptor+0x3c>)
 801d8bc:	4b05      	ldr	r3, [pc, #20]	; (801d8d4 <USBD_CDC_ProductStrDescriptor+0x40>)
 801d8be:	0018      	movs	r0, r3
 801d8c0:	f7fa f8fd 	bl	8017abe <USBD_GetString>
  }
  return USBD_StrDesc;
 801d8c4:	4b02      	ldr	r3, [pc, #8]	; (801d8d0 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 801d8c6:	0018      	movs	r0, r3
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	b002      	add	sp, #8
 801d8cc:	bd80      	pop	{r7, pc}
 801d8ce:	46c0      	nop			; (mov r8, r8)
 801d8d0:	20004274 	.word	0x20004274
 801d8d4:	08024e04 	.word	0x08024e04

0801d8d8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8d8:	b580      	push	{r7, lr}
 801d8da:	b082      	sub	sp, #8
 801d8dc:	af00      	add	r7, sp, #0
 801d8de:	0002      	movs	r2, r0
 801d8e0:	6039      	str	r1, [r7, #0]
 801d8e2:	1dfb      	adds	r3, r7, #7
 801d8e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d8e6:	683a      	ldr	r2, [r7, #0]
 801d8e8:	4904      	ldr	r1, [pc, #16]	; (801d8fc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801d8ea:	4b05      	ldr	r3, [pc, #20]	; (801d900 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 801d8ec:	0018      	movs	r0, r3
 801d8ee:	f7fa f8e6 	bl	8017abe <USBD_GetString>
  return USBD_StrDesc;
 801d8f2:	4b02      	ldr	r3, [pc, #8]	; (801d8fc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 801d8f4:	0018      	movs	r0, r3
 801d8f6:	46bd      	mov	sp, r7
 801d8f8:	b002      	add	sp, #8
 801d8fa:	bd80      	pop	{r7, pc}
 801d8fc:	20004274 	.word	0x20004274
 801d900:	08024e1c 	.word	0x08024e1c

0801d904 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
 801d90a:	0002      	movs	r2, r0
 801d90c:	6039      	str	r1, [r7, #0]
 801d90e:	1dfb      	adds	r3, r7, #7
 801d910:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	221a      	movs	r2, #26
 801d916:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d918:	f000 f84c 	bl	801d9b4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801d91c:	4b02      	ldr	r3, [pc, #8]	; (801d928 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 801d91e:	0018      	movs	r0, r3
 801d920:	46bd      	mov	sp, r7
 801d922:	b002      	add	sp, #8
 801d924:	bd80      	pop	{r7, pc}
 801d926:	46c0      	nop			; (mov r8, r8)
 801d928:	200001ec 	.word	0x200001ec

0801d92c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b082      	sub	sp, #8
 801d930:	af00      	add	r7, sp, #0
 801d932:	0002      	movs	r2, r0
 801d934:	6039      	str	r1, [r7, #0]
 801d936:	1dfb      	adds	r3, r7, #7
 801d938:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801d93a:	1dfb      	adds	r3, r7, #7
 801d93c:	781b      	ldrb	r3, [r3, #0]
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d106      	bne.n	801d950 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801d942:	683a      	ldr	r2, [r7, #0]
 801d944:	4908      	ldr	r1, [pc, #32]	; (801d968 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801d946:	4b09      	ldr	r3, [pc, #36]	; (801d96c <USBD_CDC_ConfigStrDescriptor+0x40>)
 801d948:	0018      	movs	r0, r3
 801d94a:	f7fa f8b8 	bl	8017abe <USBD_GetString>
 801d94e:	e005      	b.n	801d95c <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801d950:	683a      	ldr	r2, [r7, #0]
 801d952:	4905      	ldr	r1, [pc, #20]	; (801d968 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 801d954:	4b05      	ldr	r3, [pc, #20]	; (801d96c <USBD_CDC_ConfigStrDescriptor+0x40>)
 801d956:	0018      	movs	r0, r3
 801d958:	f7fa f8b1 	bl	8017abe <USBD_GetString>
  }
  return USBD_StrDesc;
 801d95c:	4b02      	ldr	r3, [pc, #8]	; (801d968 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 801d95e:	0018      	movs	r0, r3
 801d960:	46bd      	mov	sp, r7
 801d962:	b002      	add	sp, #8
 801d964:	bd80      	pop	{r7, pc}
 801d966:	46c0      	nop			; (mov r8, r8)
 801d968:	20004274 	.word	0x20004274
 801d96c:	08024e30 	.word	0x08024e30

0801d970 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b082      	sub	sp, #8
 801d974:	af00      	add	r7, sp, #0
 801d976:	0002      	movs	r2, r0
 801d978:	6039      	str	r1, [r7, #0]
 801d97a:	1dfb      	adds	r3, r7, #7
 801d97c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801d97e:	1dfb      	adds	r3, r7, #7
 801d980:	781b      	ldrb	r3, [r3, #0]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d106      	bne.n	801d994 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801d986:	683a      	ldr	r2, [r7, #0]
 801d988:	4908      	ldr	r1, [pc, #32]	; (801d9ac <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801d98a:	4b09      	ldr	r3, [pc, #36]	; (801d9b0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801d98c:	0018      	movs	r0, r3
 801d98e:	f7fa f896 	bl	8017abe <USBD_GetString>
 801d992:	e005      	b.n	801d9a0 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801d994:	683a      	ldr	r2, [r7, #0]
 801d996:	4905      	ldr	r1, [pc, #20]	; (801d9ac <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 801d998:	4b05      	ldr	r3, [pc, #20]	; (801d9b0 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 801d99a:	0018      	movs	r0, r3
 801d99c:	f7fa f88f 	bl	8017abe <USBD_GetString>
  }
  return USBD_StrDesc;
 801d9a0:	4b02      	ldr	r3, [pc, #8]	; (801d9ac <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 801d9a2:	0018      	movs	r0, r3
 801d9a4:	46bd      	mov	sp, r7
 801d9a6:	b002      	add	sp, #8
 801d9a8:	bd80      	pop	{r7, pc}
 801d9aa:	46c0      	nop			; (mov r8, r8)
 801d9ac:	20004274 	.word	0x20004274
 801d9b0:	08024e3c 	.word	0x08024e3c

0801d9b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b084      	sub	sp, #16
 801d9b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d9ba:	4b10      	ldr	r3, [pc, #64]	; (801d9fc <Get_SerialNum+0x48>)
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d9c0:	4b0f      	ldr	r3, [pc, #60]	; (801da00 <Get_SerialNum+0x4c>)
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d9c6:	4b0f      	ldr	r3, [pc, #60]	; (801da04 <Get_SerialNum+0x50>)
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d9cc:	68fa      	ldr	r2, [r7, #12]
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	18d3      	adds	r3, r2, r3
 801d9d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d00b      	beq.n	801d9f2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d9da:	490b      	ldr	r1, [pc, #44]	; (801da08 <Get_SerialNum+0x54>)
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	2208      	movs	r2, #8
 801d9e0:	0018      	movs	r0, r3
 801d9e2:	f000 f815 	bl	801da10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d9e6:	4909      	ldr	r1, [pc, #36]	; (801da0c <Get_SerialNum+0x58>)
 801d9e8:	68bb      	ldr	r3, [r7, #8]
 801d9ea:	2204      	movs	r2, #4
 801d9ec:	0018      	movs	r0, r3
 801d9ee:	f000 f80f 	bl	801da10 <IntToUnicode>
  }
}
 801d9f2:	46c0      	nop			; (mov r8, r8)
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	b004      	add	sp, #16
 801d9f8:	bd80      	pop	{r7, pc}
 801d9fa:	46c0      	nop			; (mov r8, r8)
 801d9fc:	1fff7590 	.word	0x1fff7590
 801da00:	1fff7594 	.word	0x1fff7594
 801da04:	1fff7598 	.word	0x1fff7598
 801da08:	200001ee 	.word	0x200001ee
 801da0c:	200001fe 	.word	0x200001fe

0801da10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801da10:	b580      	push	{r7, lr}
 801da12:	b086      	sub	sp, #24
 801da14:	af00      	add	r7, sp, #0
 801da16:	60f8      	str	r0, [r7, #12]
 801da18:	60b9      	str	r1, [r7, #8]
 801da1a:	1dfb      	adds	r3, r7, #7
 801da1c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801da1e:	2117      	movs	r1, #23
 801da20:	187b      	adds	r3, r7, r1
 801da22:	2200      	movs	r2, #0
 801da24:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801da26:	187b      	adds	r3, r7, r1
 801da28:	2200      	movs	r2, #0
 801da2a:	701a      	strb	r2, [r3, #0]
 801da2c:	e02f      	b.n	801da8e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	0f1b      	lsrs	r3, r3, #28
 801da32:	2b09      	cmp	r3, #9
 801da34:	d80d      	bhi.n	801da52 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	0f1b      	lsrs	r3, r3, #28
 801da3a:	b2da      	uxtb	r2, r3
 801da3c:	2317      	movs	r3, #23
 801da3e:	18fb      	adds	r3, r7, r3
 801da40:	781b      	ldrb	r3, [r3, #0]
 801da42:	005b      	lsls	r3, r3, #1
 801da44:	0019      	movs	r1, r3
 801da46:	68bb      	ldr	r3, [r7, #8]
 801da48:	185b      	adds	r3, r3, r1
 801da4a:	3230      	adds	r2, #48	; 0x30
 801da4c:	b2d2      	uxtb	r2, r2
 801da4e:	701a      	strb	r2, [r3, #0]
 801da50:	e00c      	b.n	801da6c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801da52:	68fb      	ldr	r3, [r7, #12]
 801da54:	0f1b      	lsrs	r3, r3, #28
 801da56:	b2da      	uxtb	r2, r3
 801da58:	2317      	movs	r3, #23
 801da5a:	18fb      	adds	r3, r7, r3
 801da5c:	781b      	ldrb	r3, [r3, #0]
 801da5e:	005b      	lsls	r3, r3, #1
 801da60:	0019      	movs	r1, r3
 801da62:	68bb      	ldr	r3, [r7, #8]
 801da64:	185b      	adds	r3, r3, r1
 801da66:	3237      	adds	r2, #55	; 0x37
 801da68:	b2d2      	uxtb	r2, r2
 801da6a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	011b      	lsls	r3, r3, #4
 801da70:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801da72:	2117      	movs	r1, #23
 801da74:	187b      	adds	r3, r7, r1
 801da76:	781b      	ldrb	r3, [r3, #0]
 801da78:	005b      	lsls	r3, r3, #1
 801da7a:	3301      	adds	r3, #1
 801da7c:	68ba      	ldr	r2, [r7, #8]
 801da7e:	18d3      	adds	r3, r2, r3
 801da80:	2200      	movs	r2, #0
 801da82:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801da84:	187b      	adds	r3, r7, r1
 801da86:	781a      	ldrb	r2, [r3, #0]
 801da88:	187b      	adds	r3, r7, r1
 801da8a:	3201      	adds	r2, #1
 801da8c:	701a      	strb	r2, [r3, #0]
 801da8e:	2317      	movs	r3, #23
 801da90:	18fa      	adds	r2, r7, r3
 801da92:	1dfb      	adds	r3, r7, #7
 801da94:	7812      	ldrb	r2, [r2, #0]
 801da96:	781b      	ldrb	r3, [r3, #0]
 801da98:	429a      	cmp	r2, r3
 801da9a:	d3c8      	bcc.n	801da2e <IntToUnicode+0x1e>
  }
}
 801da9c:	46c0      	nop			; (mov r8, r8)
 801da9e:	46c0      	nop			; (mov r8, r8)
 801daa0:	46bd      	mov	sp, r7
 801daa2:	b006      	add	sp, #24
 801daa4:	bd80      	pop	{r7, pc}
	...

0801daa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801daa8:	b590      	push	{r4, r7, lr}
 801daaa:	b099      	sub	sp, #100	; 0x64
 801daac:	af00      	add	r7, sp, #0
 801daae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801dab0:	2414      	movs	r4, #20
 801dab2:	193b      	adds	r3, r7, r4
 801dab4:	0018      	movs	r0, r3
 801dab6:	234c      	movs	r3, #76	; 0x4c
 801dab8:	001a      	movs	r2, r3
 801daba:	2100      	movs	r1, #0
 801dabc:	f005 fdaa 	bl	8023614 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	4a25      	ldr	r2, [pc, #148]	; (801db5c <HAL_PCD_MspInit+0xb4>)
 801dac6:	4293      	cmp	r3, r2
 801dac8:	d143      	bne.n	801db52 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801daca:	193b      	adds	r3, r7, r4
 801dacc:	2280      	movs	r2, #128	; 0x80
 801dace:	0452      	lsls	r2, r2, #17
 801dad0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801dad2:	193b      	adds	r3, r7, r4
 801dad4:	2200      	movs	r2, #0
 801dad6:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801dad8:	193b      	adds	r3, r7, r4
 801dada:	0018      	movs	r0, r3
 801dadc:	f7f0 fdfc 	bl	800e6d8 <HAL_RCCEx_PeriphCLKConfig>
 801dae0:	1e03      	subs	r3, r0, #0
 801dae2:	d001      	beq.n	801dae8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 801dae4:	f7eb f870 	bl	8008bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801dae8:	4b1d      	ldr	r3, [pc, #116]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801daea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801daec:	4b1c      	ldr	r3, [pc, #112]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801daee:	2180      	movs	r1, #128	; 0x80
 801daf0:	0189      	lsls	r1, r1, #6
 801daf2:	430a      	orrs	r2, r1
 801daf4:	63da      	str	r2, [r3, #60]	; 0x3c
 801daf6:	4b1a      	ldr	r3, [pc, #104]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801daf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801dafa:	2380      	movs	r3, #128	; 0x80
 801dafc:	019b      	lsls	r3, r3, #6
 801dafe:	4013      	ands	r3, r2
 801db00:	613b      	str	r3, [r7, #16]
 801db02:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801db04:	4b16      	ldr	r3, [pc, #88]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801db08:	2380      	movs	r3, #128	; 0x80
 801db0a:	055b      	lsls	r3, r3, #21
 801db0c:	4013      	ands	r3, r2
 801db0e:	d116      	bne.n	801db3e <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801db10:	4b13      	ldr	r3, [pc, #76]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801db14:	4b12      	ldr	r3, [pc, #72]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db16:	2180      	movs	r1, #128	; 0x80
 801db18:	0549      	lsls	r1, r1, #21
 801db1a:	430a      	orrs	r2, r1
 801db1c:	63da      	str	r2, [r3, #60]	; 0x3c
 801db1e:	4b10      	ldr	r3, [pc, #64]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801db22:	2380      	movs	r3, #128	; 0x80
 801db24:	055b      	lsls	r3, r3, #21
 801db26:	4013      	ands	r3, r2
 801db28:	60fb      	str	r3, [r7, #12]
 801db2a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 801db2c:	f7f0 f848 	bl	800dbc0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801db30:	4b0b      	ldr	r3, [pc, #44]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801db34:	4b0a      	ldr	r3, [pc, #40]	; (801db60 <HAL_PCD_MspInit+0xb8>)
 801db36:	490b      	ldr	r1, [pc, #44]	; (801db64 <HAL_PCD_MspInit+0xbc>)
 801db38:	400a      	ands	r2, r1
 801db3a:	63da      	str	r2, [r3, #60]	; 0x3c
 801db3c:	e001      	b.n	801db42 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801db3e:	f7f0 f83f 	bl	800dbc0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 801db42:	2200      	movs	r2, #0
 801db44:	2103      	movs	r1, #3
 801db46:	2008      	movs	r0, #8
 801db48:	f7ed fa34 	bl	800afb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 801db4c:	2008      	movs	r0, #8
 801db4e:	f7ed fa46 	bl	800afde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 801db52:	46c0      	nop			; (mov r8, r8)
 801db54:	46bd      	mov	sp, r7
 801db56:	b019      	add	sp, #100	; 0x64
 801db58:	bd90      	pop	{r4, r7, pc}
 801db5a:	46c0      	nop			; (mov r8, r8)
 801db5c:	40005c00 	.word	0x40005c00
 801db60:	40021000 	.word	0x40021000
 801db64:	efffffff 	.word	0xefffffff

0801db68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db68:	b580      	push	{r7, lr}
 801db6a:	b082      	sub	sp, #8
 801db6c:	af00      	add	r7, sp, #0
 801db6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801db70:	687a      	ldr	r2, [r7, #4]
 801db72:	23b7      	movs	r3, #183	; 0xb7
 801db74:	009b      	lsls	r3, r3, #2
 801db76:	58d2      	ldr	r2, [r2, r3]
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	21a7      	movs	r1, #167	; 0xa7
 801db7c:	0089      	lsls	r1, r1, #2
 801db7e:	468c      	mov	ip, r1
 801db80:	4463      	add	r3, ip
 801db82:	0019      	movs	r1, r3
 801db84:	0010      	movs	r0, r2
 801db86:	f7f8 fcdd 	bl	8016544 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801db8a:	46c0      	nop			; (mov r8, r8)
 801db8c:	46bd      	mov	sp, r7
 801db8e:	b002      	add	sp, #8
 801db90:	bd80      	pop	{r7, pc}

0801db92 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db92:	b590      	push	{r4, r7, lr}
 801db94:	b083      	sub	sp, #12
 801db96:	af00      	add	r7, sp, #0
 801db98:	6078      	str	r0, [r7, #4]
 801db9a:	000a      	movs	r2, r1
 801db9c:	1cfb      	adds	r3, r7, #3
 801db9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801dba0:	687a      	ldr	r2, [r7, #4]
 801dba2:	23b7      	movs	r3, #183	; 0xb7
 801dba4:	009b      	lsls	r3, r3, #2
 801dba6:	58d4      	ldr	r4, [r2, r3]
 801dba8:	1cfb      	adds	r3, r7, #3
 801dbaa:	781a      	ldrb	r2, [r3, #0]
 801dbac:	6878      	ldr	r0, [r7, #4]
 801dbae:	23b4      	movs	r3, #180	; 0xb4
 801dbb0:	0059      	lsls	r1, r3, #1
 801dbb2:	0013      	movs	r3, r2
 801dbb4:	009b      	lsls	r3, r3, #2
 801dbb6:	189b      	adds	r3, r3, r2
 801dbb8:	00db      	lsls	r3, r3, #3
 801dbba:	18c3      	adds	r3, r0, r3
 801dbbc:	185b      	adds	r3, r3, r1
 801dbbe:	681a      	ldr	r2, [r3, #0]
 801dbc0:	1cfb      	adds	r3, r7, #3
 801dbc2:	781b      	ldrb	r3, [r3, #0]
 801dbc4:	0019      	movs	r1, r3
 801dbc6:	0020      	movs	r0, r4
 801dbc8:	f7f8 fd26 	bl	8016618 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801dbcc:	46c0      	nop			; (mov r8, r8)
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	b003      	add	sp, #12
 801dbd2:	bd90      	pop	{r4, r7, pc}

0801dbd4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbd4:	b580      	push	{r7, lr}
 801dbd6:	b082      	sub	sp, #8
 801dbd8:	af00      	add	r7, sp, #0
 801dbda:	6078      	str	r0, [r7, #4]
 801dbdc:	000a      	movs	r2, r1
 801dbde:	1cfb      	adds	r3, r7, #3
 801dbe0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dbe2:	687a      	ldr	r2, [r7, #4]
 801dbe4:	23b7      	movs	r3, #183	; 0xb7
 801dbe6:	009b      	lsls	r3, r3, #2
 801dbe8:	58d0      	ldr	r0, [r2, r3]
 801dbea:	1cfb      	adds	r3, r7, #3
 801dbec:	781a      	ldrb	r2, [r3, #0]
 801dbee:	6879      	ldr	r1, [r7, #4]
 801dbf0:	0013      	movs	r3, r2
 801dbf2:	009b      	lsls	r3, r3, #2
 801dbf4:	189b      	adds	r3, r3, r2
 801dbf6:	00db      	lsls	r3, r3, #3
 801dbf8:	18cb      	adds	r3, r1, r3
 801dbfa:	3328      	adds	r3, #40	; 0x28
 801dbfc:	681a      	ldr	r2, [r3, #0]
 801dbfe:	1cfb      	adds	r3, r7, #3
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	0019      	movs	r1, r3
 801dc04:	f7f8 fdf0 	bl	80167e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801dc08:	46c0      	nop			; (mov r8, r8)
 801dc0a:	46bd      	mov	sp, r7
 801dc0c:	b002      	add	sp, #8
 801dc0e:	bd80      	pop	{r7, pc}

0801dc10 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc10:	b580      	push	{r7, lr}
 801dc12:	b082      	sub	sp, #8
 801dc14:	af00      	add	r7, sp, #0
 801dc16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dc18:	687a      	ldr	r2, [r7, #4]
 801dc1a:	23b7      	movs	r3, #183	; 0xb7
 801dc1c:	009b      	lsls	r3, r3, #2
 801dc1e:	58d3      	ldr	r3, [r2, r3]
 801dc20:	0018      	movs	r0, r3
 801dc22:	f7f8 ff5b 	bl	8016adc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801dc26:	46c0      	nop			; (mov r8, r8)
 801dc28:	46bd      	mov	sp, r7
 801dc2a:	b002      	add	sp, #8
 801dc2c:	bd80      	pop	{r7, pc}

0801dc2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc2e:	b580      	push	{r7, lr}
 801dc30:	b084      	sub	sp, #16
 801dc32:	af00      	add	r7, sp, #0
 801dc34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801dc36:	230f      	movs	r3, #15
 801dc38:	18fb      	adds	r3, r7, r3
 801dc3a:	2201      	movs	r2, #1
 801dc3c:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	79db      	ldrb	r3, [r3, #7]
 801dc42:	2b02      	cmp	r3, #2
 801dc44:	d001      	beq.n	801dc4a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801dc46:	f7ea ffbf 	bl	8008bc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801dc4a:	687a      	ldr	r2, [r7, #4]
 801dc4c:	23b7      	movs	r3, #183	; 0xb7
 801dc4e:	009b      	lsls	r3, r3, #2
 801dc50:	58d2      	ldr	r2, [r2, r3]
 801dc52:	230f      	movs	r3, #15
 801dc54:	18fb      	adds	r3, r7, r3
 801dc56:	781b      	ldrb	r3, [r3, #0]
 801dc58:	0019      	movs	r1, r3
 801dc5a:	0010      	movs	r0, r2
 801dc5c:	f7f8 fefb 	bl	8016a56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801dc60:	687a      	ldr	r2, [r7, #4]
 801dc62:	23b7      	movs	r3, #183	; 0xb7
 801dc64:	009b      	lsls	r3, r3, #2
 801dc66:	58d3      	ldr	r3, [r2, r3]
 801dc68:	0018      	movs	r0, r3
 801dc6a:	f7f8 fe95 	bl	8016998 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801dc6e:	46c0      	nop			; (mov r8, r8)
 801dc70:	46bd      	mov	sp, r7
 801dc72:	b004      	add	sp, #16
 801dc74:	bd80      	pop	{r7, pc}
	...

0801dc78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	b082      	sub	sp, #8
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801dc80:	687a      	ldr	r2, [r7, #4]
 801dc82:	23b7      	movs	r3, #183	; 0xb7
 801dc84:	009b      	lsls	r3, r3, #2
 801dc86:	58d3      	ldr	r3, [r2, r3]
 801dc88:	0018      	movs	r0, r3
 801dc8a:	f7f8 fef5 	bl	8016a78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	7adb      	ldrb	r3, [r3, #11]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d005      	beq.n	801dca2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dc96:	4b05      	ldr	r3, [pc, #20]	; (801dcac <HAL_PCD_SuspendCallback+0x34>)
 801dc98:	691a      	ldr	r2, [r3, #16]
 801dc9a:	4b04      	ldr	r3, [pc, #16]	; (801dcac <HAL_PCD_SuspendCallback+0x34>)
 801dc9c:	2106      	movs	r1, #6
 801dc9e:	430a      	orrs	r2, r1
 801dca0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801dca2:	46c0      	nop			; (mov r8, r8)
 801dca4:	46bd      	mov	sp, r7
 801dca6:	b002      	add	sp, #8
 801dca8:	bd80      	pop	{r7, pc}
 801dcaa:	46c0      	nop			; (mov r8, r8)
 801dcac:	e000ed00 	.word	0xe000ed00

0801dcb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dcb0:	b580      	push	{r7, lr}
 801dcb2:	b082      	sub	sp, #8
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	7adb      	ldrb	r3, [r3, #11]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d007      	beq.n	801dcd0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801dcc0:	4b09      	ldr	r3, [pc, #36]	; (801dce8 <HAL_PCD_ResumeCallback+0x38>)
 801dcc2:	691a      	ldr	r2, [r3, #16]
 801dcc4:	4b08      	ldr	r3, [pc, #32]	; (801dce8 <HAL_PCD_ResumeCallback+0x38>)
 801dcc6:	2106      	movs	r1, #6
 801dcc8:	438a      	bics	r2, r1
 801dcca:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801dccc:	f000 fa7c 	bl	801e1c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dcd0:	687a      	ldr	r2, [r7, #4]
 801dcd2:	23b7      	movs	r3, #183	; 0xb7
 801dcd4:	009b      	lsls	r3, r3, #2
 801dcd6:	58d3      	ldr	r3, [r2, r3]
 801dcd8:	0018      	movs	r0, r3
 801dcda:	f7f8 fee5 	bl	8016aa8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801dcde:	46c0      	nop			; (mov r8, r8)
 801dce0:	46bd      	mov	sp, r7
 801dce2:	b002      	add	sp, #8
 801dce4:	bd80      	pop	{r7, pc}
 801dce6:	46c0      	nop			; (mov r8, r8)
 801dce8:	e000ed00 	.word	0xe000ed00

0801dcec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b082      	sub	sp, #8
 801dcf0:	af00      	add	r7, sp, #0
 801dcf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 801dcf4:	4a34      	ldr	r2, [pc, #208]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dcf6:	23b7      	movs	r3, #183	; 0xb7
 801dcf8:	009b      	lsls	r3, r3, #2
 801dcfa:	6879      	ldr	r1, [r7, #4]
 801dcfc:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 801dcfe:	687a      	ldr	r2, [r7, #4]
 801dd00:	23b2      	movs	r3, #178	; 0xb2
 801dd02:	009b      	lsls	r3, r3, #2
 801dd04:	4930      	ldr	r1, [pc, #192]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd06:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 801dd08:	4b2f      	ldr	r3, [pc, #188]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd0a:	4a30      	ldr	r2, [pc, #192]	; (801ddcc <USBD_LL_Init+0xe0>)
 801dd0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 801dd0e:	4b2e      	ldr	r3, [pc, #184]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd10:	2208      	movs	r2, #8
 801dd12:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 801dd14:	4b2c      	ldr	r3, [pc, #176]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd16:	2208      	movs	r2, #8
 801dd18:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 801dd1a:	4b2b      	ldr	r3, [pc, #172]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd1c:	2202      	movs	r2, #2
 801dd1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dd20:	4b29      	ldr	r3, [pc, #164]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd22:	2202      	movs	r2, #2
 801dd24:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 801dd26:	4b28      	ldr	r3, [pc, #160]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd28:	2200      	movs	r2, #0
 801dd2a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 801dd2c:	4b26      	ldr	r3, [pc, #152]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd2e:	2200      	movs	r2, #0
 801dd30:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 801dd32:	4b25      	ldr	r3, [pc, #148]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd34:	2200      	movs	r2, #0
 801dd36:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 801dd38:	4b23      	ldr	r3, [pc, #140]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd3a:	2200      	movs	r2, #0
 801dd3c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 801dd3e:	4b22      	ldr	r3, [pc, #136]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd40:	2200      	movs	r2, #0
 801dd42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 801dd44:	4b20      	ldr	r3, [pc, #128]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd46:	2200      	movs	r2, #0
 801dd48:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 801dd4a:	4b1f      	ldr	r3, [pc, #124]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd4c:	2200      	movs	r2, #0
 801dd4e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 801dd50:	4b1d      	ldr	r3, [pc, #116]	; (801ddc8 <USBD_LL_Init+0xdc>)
 801dd52:	0018      	movs	r0, r3
 801dd54:	f7ee fa24 	bl	800c1a0 <HAL_PCD_Init>
 801dd58:	1e03      	subs	r3, r0, #0
 801dd5a:	d001      	beq.n	801dd60 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 801dd5c:	f7ea ff34 	bl	8008bc8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801dd60:	687a      	ldr	r2, [r7, #4]
 801dd62:	23b2      	movs	r3, #178	; 0xb2
 801dd64:	009b      	lsls	r3, r3, #2
 801dd66:	58d0      	ldr	r0, [r2, r3]
 801dd68:	2318      	movs	r3, #24
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	2100      	movs	r1, #0
 801dd6e:	f7ef feb5 	bl	800dadc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801dd72:	687a      	ldr	r2, [r7, #4]
 801dd74:	23b2      	movs	r3, #178	; 0xb2
 801dd76:	009b      	lsls	r3, r3, #2
 801dd78:	58d0      	ldr	r0, [r2, r3]
 801dd7a:	2358      	movs	r3, #88	; 0x58
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	2180      	movs	r1, #128	; 0x80
 801dd80:	f7ef feac 	bl	800dadc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801dd84:	687a      	ldr	r2, [r7, #4]
 801dd86:	23b2      	movs	r3, #178	; 0xb2
 801dd88:	009b      	lsls	r3, r3, #2
 801dd8a:	58d0      	ldr	r0, [r2, r3]
 801dd8c:	23c0      	movs	r3, #192	; 0xc0
 801dd8e:	2200      	movs	r2, #0
 801dd90:	2181      	movs	r1, #129	; 0x81
 801dd92:	f7ef fea3 	bl	800dadc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801dd96:	687a      	ldr	r2, [r7, #4]
 801dd98:	23b2      	movs	r3, #178	; 0xb2
 801dd9a:	009b      	lsls	r3, r3, #2
 801dd9c:	58d0      	ldr	r0, [r2, r3]
 801dd9e:	2388      	movs	r3, #136	; 0x88
 801dda0:	005b      	lsls	r3, r3, #1
 801dda2:	2200      	movs	r2, #0
 801dda4:	2101      	movs	r1, #1
 801dda6:	f7ef fe99 	bl	800dadc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801ddaa:	687a      	ldr	r2, [r7, #4]
 801ddac:	23b2      	movs	r3, #178	; 0xb2
 801ddae:	009b      	lsls	r3, r3, #2
 801ddb0:	58d0      	ldr	r0, [r2, r3]
 801ddb2:	2380      	movs	r3, #128	; 0x80
 801ddb4:	005b      	lsls	r3, r3, #1
 801ddb6:	2200      	movs	r2, #0
 801ddb8:	2182      	movs	r1, #130	; 0x82
 801ddba:	f7ef fe8f 	bl	800dadc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 801ddbe:	2300      	movs	r3, #0
}
 801ddc0:	0018      	movs	r0, r3
 801ddc2:	46bd      	mov	sp, r7
 801ddc4:	b002      	add	sp, #8
 801ddc6:	bd80      	pop	{r7, pc}
 801ddc8:	20004474 	.word	0x20004474
 801ddcc:	40005c00 	.word	0x40005c00

0801ddd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801ddd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ddd2:	b085      	sub	sp, #20
 801ddd4:	af00      	add	r7, sp, #0
 801ddd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ddd8:	210f      	movs	r1, #15
 801ddda:	187b      	adds	r3, r7, r1
 801dddc:	2200      	movs	r2, #0
 801ddde:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dde0:	260e      	movs	r6, #14
 801dde2:	19bb      	adds	r3, r7, r6
 801dde4:	2200      	movs	r2, #0
 801dde6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801dde8:	687a      	ldr	r2, [r7, #4]
 801ddea:	23b2      	movs	r3, #178	; 0xb2
 801ddec:	009b      	lsls	r3, r3, #2
 801ddee:	58d3      	ldr	r3, [r2, r3]
 801ddf0:	000d      	movs	r5, r1
 801ddf2:	187c      	adds	r4, r7, r1
 801ddf4:	0018      	movs	r0, r3
 801ddf6:	f7ee facd 	bl	800c394 <HAL_PCD_Start>
 801ddfa:	0003      	movs	r3, r0
 801ddfc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ddfe:	19bc      	adds	r4, r7, r6
 801de00:	197b      	adds	r3, r7, r5
 801de02:	781b      	ldrb	r3, [r3, #0]
 801de04:	0018      	movs	r0, r3
 801de06:	f000 f9e6 	bl	801e1d6 <USBD_Get_USB_Status>
 801de0a:	0003      	movs	r3, r0
 801de0c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801de0e:	19bb      	adds	r3, r7, r6
 801de10:	781b      	ldrb	r3, [r3, #0]
}
 801de12:	0018      	movs	r0, r3
 801de14:	46bd      	mov	sp, r7
 801de16:	b005      	add	sp, #20
 801de18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801de1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801de1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de1c:	b085      	sub	sp, #20
 801de1e:	af00      	add	r7, sp, #0
 801de20:	6078      	str	r0, [r7, #4]
 801de22:	000c      	movs	r4, r1
 801de24:	0010      	movs	r0, r2
 801de26:	0019      	movs	r1, r3
 801de28:	1cfb      	adds	r3, r7, #3
 801de2a:	1c22      	adds	r2, r4, #0
 801de2c:	701a      	strb	r2, [r3, #0]
 801de2e:	1cbb      	adds	r3, r7, #2
 801de30:	1c02      	adds	r2, r0, #0
 801de32:	701a      	strb	r2, [r3, #0]
 801de34:	003b      	movs	r3, r7
 801de36:	1c0a      	adds	r2, r1, #0
 801de38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de3a:	260f      	movs	r6, #15
 801de3c:	19bb      	adds	r3, r7, r6
 801de3e:	2200      	movs	r2, #0
 801de40:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de42:	250e      	movs	r5, #14
 801de44:	197b      	adds	r3, r7, r5
 801de46:	2200      	movs	r2, #0
 801de48:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801de4a:	687a      	ldr	r2, [r7, #4]
 801de4c:	23b2      	movs	r3, #178	; 0xb2
 801de4e:	009b      	lsls	r3, r3, #2
 801de50:	58d0      	ldr	r0, [r2, r3]
 801de52:	19bc      	adds	r4, r7, r6
 801de54:	1cbb      	adds	r3, r7, #2
 801de56:	781d      	ldrb	r5, [r3, #0]
 801de58:	003b      	movs	r3, r7
 801de5a:	881a      	ldrh	r2, [r3, #0]
 801de5c:	1cfb      	adds	r3, r7, #3
 801de5e:	7819      	ldrb	r1, [r3, #0]
 801de60:	002b      	movs	r3, r5
 801de62:	f7ee fbfd 	bl	800c660 <HAL_PCD_EP_Open>
 801de66:	0003      	movs	r3, r0
 801de68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801de6a:	250e      	movs	r5, #14
 801de6c:	197c      	adds	r4, r7, r5
 801de6e:	19bb      	adds	r3, r7, r6
 801de70:	781b      	ldrb	r3, [r3, #0]
 801de72:	0018      	movs	r0, r3
 801de74:	f000 f9af 	bl	801e1d6 <USBD_Get_USB_Status>
 801de78:	0003      	movs	r3, r0
 801de7a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801de7c:	197b      	adds	r3, r7, r5
 801de7e:	781b      	ldrb	r3, [r3, #0]
}
 801de80:	0018      	movs	r0, r3
 801de82:	46bd      	mov	sp, r7
 801de84:	b005      	add	sp, #20
 801de86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801de88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 801de8a:	b085      	sub	sp, #20
 801de8c:	af00      	add	r7, sp, #0
 801de8e:	6078      	str	r0, [r7, #4]
 801de90:	000a      	movs	r2, r1
 801de92:	1cfb      	adds	r3, r7, #3
 801de94:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de96:	210f      	movs	r1, #15
 801de98:	187b      	adds	r3, r7, r1
 801de9a:	2200      	movs	r2, #0
 801de9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de9e:	260e      	movs	r6, #14
 801dea0:	19bb      	adds	r3, r7, r6
 801dea2:	2200      	movs	r2, #0
 801dea4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801dea6:	687a      	ldr	r2, [r7, #4]
 801dea8:	23b2      	movs	r3, #178	; 0xb2
 801deaa:	009b      	lsls	r3, r3, #2
 801deac:	58d2      	ldr	r2, [r2, r3]
 801deae:	000d      	movs	r5, r1
 801deb0:	187c      	adds	r4, r7, r1
 801deb2:	1cfb      	adds	r3, r7, #3
 801deb4:	781b      	ldrb	r3, [r3, #0]
 801deb6:	0019      	movs	r1, r3
 801deb8:	0010      	movs	r0, r2
 801deba:	f7ee fc42 	bl	800c742 <HAL_PCD_EP_Close>
 801debe:	0003      	movs	r3, r0
 801dec0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dec2:	19bc      	adds	r4, r7, r6
 801dec4:	197b      	adds	r3, r7, r5
 801dec6:	781b      	ldrb	r3, [r3, #0]
 801dec8:	0018      	movs	r0, r3
 801deca:	f000 f984 	bl	801e1d6 <USBD_Get_USB_Status>
 801dece:	0003      	movs	r3, r0
 801ded0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ded2:	19bb      	adds	r3, r7, r6
 801ded4:	781b      	ldrb	r3, [r3, #0]
}
 801ded6:	0018      	movs	r0, r3
 801ded8:	46bd      	mov	sp, r7
 801deda:	b005      	add	sp, #20
 801dedc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dede <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dede:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dee0:	b085      	sub	sp, #20
 801dee2:	af00      	add	r7, sp, #0
 801dee4:	6078      	str	r0, [r7, #4]
 801dee6:	000a      	movs	r2, r1
 801dee8:	1cfb      	adds	r3, r7, #3
 801deea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801deec:	210f      	movs	r1, #15
 801deee:	187b      	adds	r3, r7, r1
 801def0:	2200      	movs	r2, #0
 801def2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801def4:	260e      	movs	r6, #14
 801def6:	19bb      	adds	r3, r7, r6
 801def8:	2200      	movs	r2, #0
 801defa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801defc:	687a      	ldr	r2, [r7, #4]
 801defe:	23b2      	movs	r3, #178	; 0xb2
 801df00:	009b      	lsls	r3, r3, #2
 801df02:	58d2      	ldr	r2, [r2, r3]
 801df04:	000d      	movs	r5, r1
 801df06:	187c      	adds	r4, r7, r1
 801df08:	1cfb      	adds	r3, r7, #3
 801df0a:	781b      	ldrb	r3, [r3, #0]
 801df0c:	0019      	movs	r1, r3
 801df0e:	0010      	movs	r0, r2
 801df10:	f7ee fcf8 	bl	800c904 <HAL_PCD_EP_SetStall>
 801df14:	0003      	movs	r3, r0
 801df16:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df18:	19bc      	adds	r4, r7, r6
 801df1a:	197b      	adds	r3, r7, r5
 801df1c:	781b      	ldrb	r3, [r3, #0]
 801df1e:	0018      	movs	r0, r3
 801df20:	f000 f959 	bl	801e1d6 <USBD_Get_USB_Status>
 801df24:	0003      	movs	r3, r0
 801df26:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df28:	19bb      	adds	r3, r7, r6
 801df2a:	781b      	ldrb	r3, [r3, #0]
}
 801df2c:	0018      	movs	r0, r3
 801df2e:	46bd      	mov	sp, r7
 801df30:	b005      	add	sp, #20
 801df32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df36:	b085      	sub	sp, #20
 801df38:	af00      	add	r7, sp, #0
 801df3a:	6078      	str	r0, [r7, #4]
 801df3c:	000a      	movs	r2, r1
 801df3e:	1cfb      	adds	r3, r7, #3
 801df40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df42:	210f      	movs	r1, #15
 801df44:	187b      	adds	r3, r7, r1
 801df46:	2200      	movs	r2, #0
 801df48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df4a:	260e      	movs	r6, #14
 801df4c:	19bb      	adds	r3, r7, r6
 801df4e:	2200      	movs	r2, #0
 801df50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801df52:	687a      	ldr	r2, [r7, #4]
 801df54:	23b2      	movs	r3, #178	; 0xb2
 801df56:	009b      	lsls	r3, r3, #2
 801df58:	58d2      	ldr	r2, [r2, r3]
 801df5a:	000d      	movs	r5, r1
 801df5c:	187c      	adds	r4, r7, r1
 801df5e:	1cfb      	adds	r3, r7, #3
 801df60:	781b      	ldrb	r3, [r3, #0]
 801df62:	0019      	movs	r1, r3
 801df64:	0010      	movs	r0, r2
 801df66:	f7ee fd2b 	bl	800c9c0 <HAL_PCD_EP_ClrStall>
 801df6a:	0003      	movs	r3, r0
 801df6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801df6e:	19bc      	adds	r4, r7, r6
 801df70:	197b      	adds	r3, r7, r5
 801df72:	781b      	ldrb	r3, [r3, #0]
 801df74:	0018      	movs	r0, r3
 801df76:	f000 f92e 	bl	801e1d6 <USBD_Get_USB_Status>
 801df7a:	0003      	movs	r3, r0
 801df7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801df7e:	19bb      	adds	r3, r7, r6
 801df80:	781b      	ldrb	r3, [r3, #0]
}
 801df82:	0018      	movs	r0, r3
 801df84:	46bd      	mov	sp, r7
 801df86:	b005      	add	sp, #20
 801df88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801df8a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df8a:	b580      	push	{r7, lr}
 801df8c:	b084      	sub	sp, #16
 801df8e:	af00      	add	r7, sp, #0
 801df90:	6078      	str	r0, [r7, #4]
 801df92:	000a      	movs	r2, r1
 801df94:	1cfb      	adds	r3, r7, #3
 801df96:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801df98:	687a      	ldr	r2, [r7, #4]
 801df9a:	23b2      	movs	r3, #178	; 0xb2
 801df9c:	009b      	lsls	r3, r3, #2
 801df9e:	58d3      	ldr	r3, [r2, r3]
 801dfa0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801dfa2:	1cfb      	adds	r3, r7, #3
 801dfa4:	781b      	ldrb	r3, [r3, #0]
 801dfa6:	b25b      	sxtb	r3, r3
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	da0c      	bge.n	801dfc6 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801dfac:	1cfb      	adds	r3, r7, #3
 801dfae:	781b      	ldrb	r3, [r3, #0]
 801dfb0:	227f      	movs	r2, #127	; 0x7f
 801dfb2:	401a      	ands	r2, r3
 801dfb4:	68f9      	ldr	r1, [r7, #12]
 801dfb6:	0013      	movs	r3, r2
 801dfb8:	009b      	lsls	r3, r3, #2
 801dfba:	189b      	adds	r3, r3, r2
 801dfbc:	00db      	lsls	r3, r3, #3
 801dfbe:	18cb      	adds	r3, r1, r3
 801dfc0:	3316      	adds	r3, #22
 801dfc2:	781b      	ldrb	r3, [r3, #0]
 801dfc4:	e00d      	b.n	801dfe2 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801dfc6:	1cfb      	adds	r3, r7, #3
 801dfc8:	781b      	ldrb	r3, [r3, #0]
 801dfca:	227f      	movs	r2, #127	; 0x7f
 801dfcc:	401a      	ands	r2, r3
 801dfce:	68f8      	ldr	r0, [r7, #12]
 801dfd0:	23ab      	movs	r3, #171	; 0xab
 801dfd2:	0059      	lsls	r1, r3, #1
 801dfd4:	0013      	movs	r3, r2
 801dfd6:	009b      	lsls	r3, r3, #2
 801dfd8:	189b      	adds	r3, r3, r2
 801dfda:	00db      	lsls	r3, r3, #3
 801dfdc:	18c3      	adds	r3, r0, r3
 801dfde:	185b      	adds	r3, r3, r1
 801dfe0:	781b      	ldrb	r3, [r3, #0]
  }
}
 801dfe2:	0018      	movs	r0, r3
 801dfe4:	46bd      	mov	sp, r7
 801dfe6:	b004      	add	sp, #16
 801dfe8:	bd80      	pop	{r7, pc}

0801dfea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801dfea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfec:	b085      	sub	sp, #20
 801dfee:	af00      	add	r7, sp, #0
 801dff0:	6078      	str	r0, [r7, #4]
 801dff2:	000a      	movs	r2, r1
 801dff4:	1cfb      	adds	r3, r7, #3
 801dff6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dff8:	210f      	movs	r1, #15
 801dffa:	187b      	adds	r3, r7, r1
 801dffc:	2200      	movs	r2, #0
 801dffe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e000:	260e      	movs	r6, #14
 801e002:	19bb      	adds	r3, r7, r6
 801e004:	2200      	movs	r2, #0
 801e006:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e008:	687a      	ldr	r2, [r7, #4]
 801e00a:	23b2      	movs	r3, #178	; 0xb2
 801e00c:	009b      	lsls	r3, r3, #2
 801e00e:	58d2      	ldr	r2, [r2, r3]
 801e010:	000d      	movs	r5, r1
 801e012:	187c      	adds	r4, r7, r1
 801e014:	1cfb      	adds	r3, r7, #3
 801e016:	781b      	ldrb	r3, [r3, #0]
 801e018:	0019      	movs	r1, r3
 801e01a:	0010      	movs	r0, r2
 801e01c:	f7ee faf6 	bl	800c60c <HAL_PCD_SetAddress>
 801e020:	0003      	movs	r3, r0
 801e022:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e024:	19bc      	adds	r4, r7, r6
 801e026:	197b      	adds	r3, r7, r5
 801e028:	781b      	ldrb	r3, [r3, #0]
 801e02a:	0018      	movs	r0, r3
 801e02c:	f000 f8d3 	bl	801e1d6 <USBD_Get_USB_Status>
 801e030:	0003      	movs	r3, r0
 801e032:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e034:	19bb      	adds	r3, r7, r6
 801e036:	781b      	ldrb	r3, [r3, #0]
}
 801e038:	0018      	movs	r0, r3
 801e03a:	46bd      	mov	sp, r7
 801e03c:	b005      	add	sp, #20
 801e03e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e040 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e040:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e042:	b087      	sub	sp, #28
 801e044:	af00      	add	r7, sp, #0
 801e046:	60f8      	str	r0, [r7, #12]
 801e048:	607a      	str	r2, [r7, #4]
 801e04a:	603b      	str	r3, [r7, #0]
 801e04c:	230b      	movs	r3, #11
 801e04e:	18fb      	adds	r3, r7, r3
 801e050:	1c0a      	adds	r2, r1, #0
 801e052:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e054:	2617      	movs	r6, #23
 801e056:	19bb      	adds	r3, r7, r6
 801e058:	2200      	movs	r2, #0
 801e05a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e05c:	2516      	movs	r5, #22
 801e05e:	197b      	adds	r3, r7, r5
 801e060:	2200      	movs	r2, #0
 801e062:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e064:	68fa      	ldr	r2, [r7, #12]
 801e066:	23b2      	movs	r3, #178	; 0xb2
 801e068:	009b      	lsls	r3, r3, #2
 801e06a:	58d0      	ldr	r0, [r2, r3]
 801e06c:	19bc      	adds	r4, r7, r6
 801e06e:	683d      	ldr	r5, [r7, #0]
 801e070:	687a      	ldr	r2, [r7, #4]
 801e072:	230b      	movs	r3, #11
 801e074:	18fb      	adds	r3, r7, r3
 801e076:	7819      	ldrb	r1, [r3, #0]
 801e078:	002b      	movs	r3, r5
 801e07a:	f7ee fc06 	bl	800c88a <HAL_PCD_EP_Transmit>
 801e07e:	0003      	movs	r3, r0
 801e080:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e082:	2516      	movs	r5, #22
 801e084:	197c      	adds	r4, r7, r5
 801e086:	19bb      	adds	r3, r7, r6
 801e088:	781b      	ldrb	r3, [r3, #0]
 801e08a:	0018      	movs	r0, r3
 801e08c:	f000 f8a3 	bl	801e1d6 <USBD_Get_USB_Status>
 801e090:	0003      	movs	r3, r0
 801e092:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e094:	197b      	adds	r3, r7, r5
 801e096:	781b      	ldrb	r3, [r3, #0]
}
 801e098:	0018      	movs	r0, r3
 801e09a:	46bd      	mov	sp, r7
 801e09c:	b007      	add	sp, #28
 801e09e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e0a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0a2:	b087      	sub	sp, #28
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	60f8      	str	r0, [r7, #12]
 801e0a8:	607a      	str	r2, [r7, #4]
 801e0aa:	603b      	str	r3, [r7, #0]
 801e0ac:	230b      	movs	r3, #11
 801e0ae:	18fb      	adds	r3, r7, r3
 801e0b0:	1c0a      	adds	r2, r1, #0
 801e0b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e0b4:	2617      	movs	r6, #23
 801e0b6:	19bb      	adds	r3, r7, r6
 801e0b8:	2200      	movs	r2, #0
 801e0ba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e0bc:	2516      	movs	r5, #22
 801e0be:	197b      	adds	r3, r7, r5
 801e0c0:	2200      	movs	r2, #0
 801e0c2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e0c4:	68fa      	ldr	r2, [r7, #12]
 801e0c6:	23b2      	movs	r3, #178	; 0xb2
 801e0c8:	009b      	lsls	r3, r3, #2
 801e0ca:	58d0      	ldr	r0, [r2, r3]
 801e0cc:	19bc      	adds	r4, r7, r6
 801e0ce:	683d      	ldr	r5, [r7, #0]
 801e0d0:	687a      	ldr	r2, [r7, #4]
 801e0d2:	230b      	movs	r3, #11
 801e0d4:	18fb      	adds	r3, r7, r3
 801e0d6:	7819      	ldrb	r1, [r3, #0]
 801e0d8:	002b      	movs	r3, r5
 801e0da:	f7ee fb85 	bl	800c7e8 <HAL_PCD_EP_Receive>
 801e0de:	0003      	movs	r3, r0
 801e0e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e0e2:	2516      	movs	r5, #22
 801e0e4:	197c      	adds	r4, r7, r5
 801e0e6:	19bb      	adds	r3, r7, r6
 801e0e8:	781b      	ldrb	r3, [r3, #0]
 801e0ea:	0018      	movs	r0, r3
 801e0ec:	f000 f873 	bl	801e1d6 <USBD_Get_USB_Status>
 801e0f0:	0003      	movs	r3, r0
 801e0f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801e0f4:	197b      	adds	r3, r7, r5
 801e0f6:	781b      	ldrb	r3, [r3, #0]
}
 801e0f8:	0018      	movs	r0, r3
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	b007      	add	sp, #28
 801e0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801e100 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b082      	sub	sp, #8
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
 801e108:	000a      	movs	r2, r1
 801e10a:	1cfb      	adds	r3, r7, #3
 801e10c:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e10e:	687a      	ldr	r2, [r7, #4]
 801e110:	23b2      	movs	r3, #178	; 0xb2
 801e112:	009b      	lsls	r3, r3, #2
 801e114:	58d2      	ldr	r2, [r2, r3]
 801e116:	1cfb      	adds	r3, r7, #3
 801e118:	781b      	ldrb	r3, [r3, #0]
 801e11a:	0019      	movs	r1, r3
 801e11c:	0010      	movs	r0, r2
 801e11e:	f7ee fb9b 	bl	800c858 <HAL_PCD_EP_GetRxCount>
 801e122:	0003      	movs	r3, r0
}
 801e124:	0018      	movs	r0, r3
 801e126:	46bd      	mov	sp, r7
 801e128:	b002      	add	sp, #8
 801e12a:	bd80      	pop	{r7, pc}

0801e12c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e12c:	b580      	push	{r7, lr}
 801e12e:	b082      	sub	sp, #8
 801e130:	af00      	add	r7, sp, #0
 801e132:	6078      	str	r0, [r7, #4]
 801e134:	000a      	movs	r2, r1
 801e136:	1cfb      	adds	r3, r7, #3
 801e138:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801e13a:	1cfb      	adds	r3, r7, #3
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d002      	beq.n	801e148 <HAL_PCDEx_LPM_Callback+0x1c>
 801e142:	2b01      	cmp	r3, #1
 801e144:	d014      	beq.n	801e170 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801e146:	e025      	b.n	801e194 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	7adb      	ldrb	r3, [r3, #11]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d007      	beq.n	801e160 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 801e150:	f000 f83a 	bl	801e1c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e154:	4b11      	ldr	r3, [pc, #68]	; (801e19c <HAL_PCDEx_LPM_Callback+0x70>)
 801e156:	691a      	ldr	r2, [r3, #16]
 801e158:	4b10      	ldr	r3, [pc, #64]	; (801e19c <HAL_PCDEx_LPM_Callback+0x70>)
 801e15a:	2106      	movs	r1, #6
 801e15c:	438a      	bics	r2, r1
 801e15e:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 801e160:	687a      	ldr	r2, [r7, #4]
 801e162:	23b7      	movs	r3, #183	; 0xb7
 801e164:	009b      	lsls	r3, r3, #2
 801e166:	58d3      	ldr	r3, [r2, r3]
 801e168:	0018      	movs	r0, r3
 801e16a:	f7f8 fc9d 	bl	8016aa8 <USBD_LL_Resume>
    break;
 801e16e:	e011      	b.n	801e194 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 801e170:	687a      	ldr	r2, [r7, #4]
 801e172:	23b7      	movs	r3, #183	; 0xb7
 801e174:	009b      	lsls	r3, r3, #2
 801e176:	58d3      	ldr	r3, [r2, r3]
 801e178:	0018      	movs	r0, r3
 801e17a:	f7f8 fc7d 	bl	8016a78 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	7adb      	ldrb	r3, [r3, #11]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d005      	beq.n	801e192 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e186:	4b05      	ldr	r3, [pc, #20]	; (801e19c <HAL_PCDEx_LPM_Callback+0x70>)
 801e188:	691a      	ldr	r2, [r3, #16]
 801e18a:	4b04      	ldr	r3, [pc, #16]	; (801e19c <HAL_PCDEx_LPM_Callback+0x70>)
 801e18c:	2106      	movs	r1, #6
 801e18e:	430a      	orrs	r2, r1
 801e190:	611a      	str	r2, [r3, #16]
    break;
 801e192:	46c0      	nop			; (mov r8, r8)
}
 801e194:	46c0      	nop			; (mov r8, r8)
 801e196:	46bd      	mov	sp, r7
 801e198:	b002      	add	sp, #8
 801e19a:	bd80      	pop	{r7, pc}
 801e19c:	e000ed00 	.word	0xe000ed00

0801e1a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801e1a0:	b580      	push	{r7, lr}
 801e1a2:	b082      	sub	sp, #8
 801e1a4:	af00      	add	r7, sp, #0
 801e1a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801e1a8:	4b02      	ldr	r3, [pc, #8]	; (801e1b4 <USBD_static_malloc+0x14>)
}
 801e1aa:	0018      	movs	r0, r3
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	b002      	add	sp, #8
 801e1b0:	bd80      	pop	{r7, pc}
 801e1b2:	46c0      	nop			; (mov r8, r8)
 801e1b4:	20004754 	.word	0x20004754

0801e1b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801e1b8:	b580      	push	{r7, lr}
 801e1ba:	b082      	sub	sp, #8
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]

}
 801e1c0:	46c0      	nop			; (mov r8, r8)
 801e1c2:	46bd      	mov	sp, r7
 801e1c4:	b002      	add	sp, #8
 801e1c6:	bd80      	pop	{r7, pc}

0801e1c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e1c8:	b580      	push	{r7, lr}
 801e1ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e1cc:	f7e9 ff0c 	bl	8007fe8 <SystemClock_Config>
}
 801e1d0:	46c0      	nop			; (mov r8, r8)
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	bd80      	pop	{r7, pc}

0801e1d6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e1d6:	b580      	push	{r7, lr}
 801e1d8:	b084      	sub	sp, #16
 801e1da:	af00      	add	r7, sp, #0
 801e1dc:	0002      	movs	r2, r0
 801e1de:	1dfb      	adds	r3, r7, #7
 801e1e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1e2:	230f      	movs	r3, #15
 801e1e4:	18fb      	adds	r3, r7, r3
 801e1e6:	2200      	movs	r2, #0
 801e1e8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801e1ea:	1dfb      	adds	r3, r7, #7
 801e1ec:	781b      	ldrb	r3, [r3, #0]
 801e1ee:	2b03      	cmp	r3, #3
 801e1f0:	d017      	beq.n	801e222 <USBD_Get_USB_Status+0x4c>
 801e1f2:	dc1b      	bgt.n	801e22c <USBD_Get_USB_Status+0x56>
 801e1f4:	2b02      	cmp	r3, #2
 801e1f6:	d00f      	beq.n	801e218 <USBD_Get_USB_Status+0x42>
 801e1f8:	dc18      	bgt.n	801e22c <USBD_Get_USB_Status+0x56>
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d002      	beq.n	801e204 <USBD_Get_USB_Status+0x2e>
 801e1fe:	2b01      	cmp	r3, #1
 801e200:	d005      	beq.n	801e20e <USBD_Get_USB_Status+0x38>
 801e202:	e013      	b.n	801e22c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e204:	230f      	movs	r3, #15
 801e206:	18fb      	adds	r3, r7, r3
 801e208:	2200      	movs	r2, #0
 801e20a:	701a      	strb	r2, [r3, #0]
    break;
 801e20c:	e013      	b.n	801e236 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e20e:	230f      	movs	r3, #15
 801e210:	18fb      	adds	r3, r7, r3
 801e212:	2203      	movs	r2, #3
 801e214:	701a      	strb	r2, [r3, #0]
    break;
 801e216:	e00e      	b.n	801e236 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e218:	230f      	movs	r3, #15
 801e21a:	18fb      	adds	r3, r7, r3
 801e21c:	2201      	movs	r2, #1
 801e21e:	701a      	strb	r2, [r3, #0]
    break;
 801e220:	e009      	b.n	801e236 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e222:	230f      	movs	r3, #15
 801e224:	18fb      	adds	r3, r7, r3
 801e226:	2203      	movs	r2, #3
 801e228:	701a      	strb	r2, [r3, #0]
    break;
 801e22a:	e004      	b.n	801e236 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801e22c:	230f      	movs	r3, #15
 801e22e:	18fb      	adds	r3, r7, r3
 801e230:	2203      	movs	r2, #3
 801e232:	701a      	strb	r2, [r3, #0]
    break;
 801e234:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 801e236:	230f      	movs	r3, #15
 801e238:	18fb      	adds	r3, r7, r3
 801e23a:	781b      	ldrb	r3, [r3, #0]
}
 801e23c:	0018      	movs	r0, r3
 801e23e:	46bd      	mov	sp, r7
 801e240:	b004      	add	sp, #16
 801e242:	bd80      	pop	{r7, pc}

0801e244 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 801e244:	b580      	push	{r7, lr}
 801e246:	b086      	sub	sp, #24
 801e248:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 801e24a:	230f      	movs	r3, #15
 801e24c:	18fb      	adds	r3, r7, r3
 801e24e:	2203      	movs	r2, #3
 801e250:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 801e252:	4bc0      	ldr	r3, [pc, #768]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e254:	681a      	ldr	r2, [r3, #0]
 801e256:	23c0      	movs	r3, #192	; 0xc0
 801e258:	049b      	lsls	r3, r3, #18
 801e25a:	4013      	ands	r3, r2
 801e25c:	d00e      	beq.n	801e27c <BSP_GUI_LoadDataFromFlash+0x38>
 801e25e:	4bbd      	ldr	r3, [pc, #756]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e260:	681a      	ldr	r2, [r3, #0]
 801e262:	23c0      	movs	r3, #192	; 0xc0
 801e264:	049b      	lsls	r3, r3, #18
 801e266:	401a      	ands	r2, r3
 801e268:	2380      	movs	r3, #128	; 0x80
 801e26a:	045b      	lsls	r3, r3, #17
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d110      	bne.n	801e292 <BSP_GUI_LoadDataFromFlash+0x4e>
 801e270:	4bb9      	ldr	r3, [pc, #740]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e272:	681a      	ldr	r2, [r3, #0]
 801e274:	2380      	movs	r3, #128	; 0x80
 801e276:	039b      	lsls	r3, r3, #14
 801e278:	4013      	ands	r3, r2
 801e27a:	d10a      	bne.n	801e292 <BSP_GUI_LoadDataFromFlash+0x4e>
 801e27c:	4bb7      	ldr	r3, [pc, #732]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e27e:	681b      	ldr	r3, [r3, #0]
 801e280:	029b      	lsls	r3, r3, #10
 801e282:	4ab7      	ldr	r2, [pc, #732]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e284:	4013      	ands	r3, r2
 801e286:	0adb      	lsrs	r3, r3, #11
 801e288:	031b      	lsls	r3, r3, #12
 801e28a:	4ab6      	ldr	r2, [pc, #728]	; (801e564 <BSP_GUI_LoadDataFromFlash+0x320>)
 801e28c:	4694      	mov	ip, r2
 801e28e:	4463      	add	r3, ip
 801e290:	e00a      	b.n	801e2a8 <BSP_GUI_LoadDataFromFlash+0x64>
 801e292:	4bb2      	ldr	r3, [pc, #712]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e294:	681b      	ldr	r3, [r3, #0]
 801e296:	029b      	lsls	r3, r3, #10
 801e298:	085b      	lsrs	r3, r3, #1
 801e29a:	4ab3      	ldr	r2, [pc, #716]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e29c:	4013      	ands	r3, r2
 801e29e:	0adb      	lsrs	r3, r3, #11
 801e2a0:	031b      	lsls	r3, r3, #12
 801e2a2:	4ab0      	ldr	r2, [pc, #704]	; (801e564 <BSP_GUI_LoadDataFromFlash+0x320>)
 801e2a4:	4694      	mov	ip, r2
 801e2a6:	4463      	add	r3, ip
 801e2a8:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 801e2aa:	4baa      	ldr	r3, [pc, #680]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e2ac:	681a      	ldr	r2, [r3, #0]
 801e2ae:	23c0      	movs	r3, #192	; 0xc0
 801e2b0:	049b      	lsls	r3, r3, #18
 801e2b2:	4013      	ands	r3, r2
 801e2b4:	d00e      	beq.n	801e2d4 <BSP_GUI_LoadDataFromFlash+0x90>
 801e2b6:	4ba7      	ldr	r3, [pc, #668]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e2b8:	681a      	ldr	r2, [r3, #0]
 801e2ba:	23c0      	movs	r3, #192	; 0xc0
 801e2bc:	049b      	lsls	r3, r3, #18
 801e2be:	401a      	ands	r2, r3
 801e2c0:	2380      	movs	r3, #128	; 0x80
 801e2c2:	045b      	lsls	r3, r3, #17
 801e2c4:	429a      	cmp	r2, r3
 801e2c6:	d10f      	bne.n	801e2e8 <BSP_GUI_LoadDataFromFlash+0xa4>
 801e2c8:	4ba3      	ldr	r3, [pc, #652]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e2ca:	681a      	ldr	r2, [r3, #0]
 801e2cc:	2380      	movs	r3, #128	; 0x80
 801e2ce:	039b      	lsls	r3, r3, #14
 801e2d0:	4013      	ands	r3, r2
 801e2d2:	d109      	bne.n	801e2e8 <BSP_GUI_LoadDataFromFlash+0xa4>
 801e2d4:	4ba1      	ldr	r3, [pc, #644]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	029b      	lsls	r3, r3, #10
 801e2da:	4aa1      	ldr	r2, [pc, #644]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e2dc:	4013      	ands	r3, r2
 801e2de:	0adb      	lsrs	r3, r3, #11
 801e2e0:	031b      	lsls	r3, r3, #12
 801e2e2:	4aa2      	ldr	r2, [pc, #648]	; (801e56c <BSP_GUI_LoadDataFromFlash+0x328>)
 801e2e4:	189a      	adds	r2, r3, r2
 801e2e6:	e009      	b.n	801e2fc <BSP_GUI_LoadDataFromFlash+0xb8>
 801e2e8:	4b9c      	ldr	r3, [pc, #624]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	029b      	lsls	r3, r3, #10
 801e2ee:	085b      	lsrs	r3, r3, #1
 801e2f0:	4a9d      	ldr	r2, [pc, #628]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e2f2:	4013      	ands	r3, r2
 801e2f4:	0adb      	lsrs	r3, r3, #11
 801e2f6:	031b      	lsls	r3, r3, #12
 801e2f8:	4a9c      	ldr	r2, [pc, #624]	; (801e56c <BSP_GUI_LoadDataFromFlash+0x328>)
 801e2fa:	189a      	adds	r2, r3, r2
 801e2fc:	4b95      	ldr	r3, [pc, #596]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e2fe:	6819      	ldr	r1, [r3, #0]
 801e300:	23c0      	movs	r3, #192	; 0xc0
 801e302:	049b      	lsls	r3, r3, #18
 801e304:	400b      	ands	r3, r1
 801e306:	d00e      	beq.n	801e326 <BSP_GUI_LoadDataFromFlash+0xe2>
 801e308:	4b92      	ldr	r3, [pc, #584]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e30a:	6819      	ldr	r1, [r3, #0]
 801e30c:	23c0      	movs	r3, #192	; 0xc0
 801e30e:	049b      	lsls	r3, r3, #18
 801e310:	4019      	ands	r1, r3
 801e312:	2380      	movs	r3, #128	; 0x80
 801e314:	045b      	lsls	r3, r3, #17
 801e316:	4299      	cmp	r1, r3
 801e318:	d112      	bne.n	801e340 <BSP_GUI_LoadDataFromFlash+0xfc>
 801e31a:	4b8f      	ldr	r3, [pc, #572]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e31c:	6819      	ldr	r1, [r3, #0]
 801e31e:	2380      	movs	r3, #128	; 0x80
 801e320:	039b      	lsls	r3, r3, #14
 801e322:	400b      	ands	r3, r1
 801e324:	d10c      	bne.n	801e340 <BSP_GUI_LoadDataFromFlash+0xfc>
 801e326:	4b8d      	ldr	r3, [pc, #564]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	029b      	lsls	r3, r3, #10
 801e32c:	498c      	ldr	r1, [pc, #560]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e32e:	400b      	ands	r3, r1
 801e330:	0adb      	lsrs	r3, r3, #11
 801e332:	2180      	movs	r1, #128	; 0x80
 801e334:	0209      	lsls	r1, r1, #8
 801e336:	468c      	mov	ip, r1
 801e338:	4463      	add	r3, ip
 801e33a:	031b      	lsls	r3, r3, #12
 801e33c:	3b01      	subs	r3, #1
 801e33e:	e00c      	b.n	801e35a <BSP_GUI_LoadDataFromFlash+0x116>
 801e340:	4b86      	ldr	r3, [pc, #536]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	029b      	lsls	r3, r3, #10
 801e346:	085b      	lsrs	r3, r3, #1
 801e348:	4987      	ldr	r1, [pc, #540]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e34a:	400b      	ands	r3, r1
 801e34c:	0adb      	lsrs	r3, r3, #11
 801e34e:	2180      	movs	r1, #128	; 0x80
 801e350:	0209      	lsls	r1, r1, #8
 801e352:	468c      	mov	ip, r1
 801e354:	4463      	add	r3, ip
 801e356:	031b      	lsls	r3, r3, #12
 801e358:	3b01      	subs	r3, #1
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d900      	bls.n	801e360 <BSP_GUI_LoadDataFromFlash+0x11c>
 801e35e:	e17a      	b.n	801e656 <BSP_GUI_LoadDataFromFlash+0x412>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 801e360:	68bb      	ldr	r3, [r7, #8]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	3301      	adds	r3, #1
 801e366:	d011      	beq.n	801e38c <BSP_GUI_LoadDataFromFlash+0x148>
 801e368:	68bb      	ldr	r3, [r7, #8]
 801e36a:	681a      	ldr	r2, [r3, #0]
 801e36c:	685b      	ldr	r3, [r3, #4]
 801e36e:	4880      	ldr	r0, [pc, #512]	; (801e570 <BSP_GUI_LoadDataFromFlash+0x32c>)
 801e370:	4980      	ldr	r1, [pc, #512]	; (801e574 <BSP_GUI_LoadDataFromFlash+0x330>)
 801e372:	4282      	cmp	r2, r0
 801e374:	d101      	bne.n	801e37a <BSP_GUI_LoadDataFromFlash+0x136>
 801e376:	428b      	cmp	r3, r1
 801e378:	d008      	beq.n	801e38c <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 801e37a:	4b7f      	ldr	r3, [pc, #508]	; (801e578 <BSP_GUI_LoadDataFromFlash+0x334>)
 801e37c:	2218      	movs	r2, #24
 801e37e:	9200      	str	r2, [sp, #0]
 801e380:	2200      	movs	r2, #0
 801e382:	2100      	movs	r1, #0
 801e384:	2006      	movs	r0, #6
 801e386:	f7f4 fb19 	bl	80129bc <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 801e38a:	e167      	b.n	801e65c <BSP_GUI_LoadDataFromFlash+0x418>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 801e38c:	68bb      	ldr	r3, [r7, #8]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	3301      	adds	r3, #1
 801e392:	d100      	bne.n	801e396 <BSP_GUI_LoadDataFromFlash+0x152>
 801e394:	e161      	b.n	801e65a <BSP_GUI_LoadDataFromFlash+0x416>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 801e396:	4b6f      	ldr	r3, [pc, #444]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e398:	681a      	ldr	r2, [r3, #0]
 801e39a:	23c0      	movs	r3, #192	; 0xc0
 801e39c:	049b      	lsls	r3, r3, #18
 801e39e:	4013      	ands	r3, r2
 801e3a0:	d00e      	beq.n	801e3c0 <BSP_GUI_LoadDataFromFlash+0x17c>
 801e3a2:	4b6c      	ldr	r3, [pc, #432]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e3a4:	681a      	ldr	r2, [r3, #0]
 801e3a6:	23c0      	movs	r3, #192	; 0xc0
 801e3a8:	049b      	lsls	r3, r3, #18
 801e3aa:	401a      	ands	r2, r3
 801e3ac:	2380      	movs	r3, #128	; 0x80
 801e3ae:	045b      	lsls	r3, r3, #17
 801e3b0:	429a      	cmp	r2, r3
 801e3b2:	d110      	bne.n	801e3d6 <BSP_GUI_LoadDataFromFlash+0x192>
 801e3b4:	4b68      	ldr	r3, [pc, #416]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e3b6:	681a      	ldr	r2, [r3, #0]
 801e3b8:	2380      	movs	r3, #128	; 0x80
 801e3ba:	039b      	lsls	r3, r3, #14
 801e3bc:	4013      	ands	r3, r2
 801e3be:	d10a      	bne.n	801e3d6 <BSP_GUI_LoadDataFromFlash+0x192>
 801e3c0:	4b66      	ldr	r3, [pc, #408]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	029b      	lsls	r3, r3, #10
 801e3c6:	4a66      	ldr	r2, [pc, #408]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e3c8:	4013      	ands	r3, r2
 801e3ca:	0adb      	lsrs	r3, r3, #11
 801e3cc:	031b      	lsls	r3, r3, #12
 801e3ce:	4a6b      	ldr	r2, [pc, #428]	; (801e57c <BSP_GUI_LoadDataFromFlash+0x338>)
 801e3d0:	4694      	mov	ip, r2
 801e3d2:	4463      	add	r3, ip
 801e3d4:	e00a      	b.n	801e3ec <BSP_GUI_LoadDataFromFlash+0x1a8>
 801e3d6:	4b61      	ldr	r3, [pc, #388]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	029b      	lsls	r3, r3, #10
 801e3dc:	085b      	lsrs	r3, r3, #1
 801e3de:	4a62      	ldr	r2, [pc, #392]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e3e0:	4013      	ands	r3, r2
 801e3e2:	0adb      	lsrs	r3, r3, #11
 801e3e4:	031b      	lsls	r3, r3, #12
 801e3e6:	4a65      	ldr	r2, [pc, #404]	; (801e57c <BSP_GUI_LoadDataFromFlash+0x338>)
 801e3e8:	4694      	mov	ip, r2
 801e3ea:	4463      	add	r3, ip
 801e3ec:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 801e3ee:	4b64      	ldr	r3, [pc, #400]	; (801e580 <BSP_GUI_LoadDataFromFlash+0x33c>)
 801e3f0:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 801e3f2:	230e      	movs	r3, #14
 801e3f4:	18fb      	adds	r3, r7, r3
 801e3f6:	2200      	movs	r2, #0
 801e3f8:	701a      	strb	r2, [r3, #0]
 801e3fa:	e012      	b.n	801e422 <BSP_GUI_LoadDataFromFlash+0x1de>
 801e3fc:	68bb      	ldr	r3, [r7, #8]
 801e3fe:	681a      	ldr	r2, [r3, #0]
 801e400:	200e      	movs	r0, #14
 801e402:	183b      	adds	r3, r7, r0
 801e404:	781b      	ldrb	r3, [r3, #0]
 801e406:	00db      	lsls	r3, r3, #3
 801e408:	40da      	lsrs	r2, r3
 801e40a:	0011      	movs	r1, r2
 801e40c:	183b      	adds	r3, r7, r0
 801e40e:	781b      	ldrb	r3, [r3, #0]
 801e410:	687a      	ldr	r2, [r7, #4]
 801e412:	18d3      	adds	r3, r2, r3
 801e414:	b2ca      	uxtb	r2, r1
 801e416:	701a      	strb	r2, [r3, #0]
 801e418:	183b      	adds	r3, r7, r0
 801e41a:	781a      	ldrb	r2, [r3, #0]
 801e41c:	183b      	adds	r3, r7, r0
 801e41e:	3201      	adds	r2, #1
 801e420:	701a      	strb	r2, [r3, #0]
 801e422:	230e      	movs	r3, #14
 801e424:	18fb      	adds	r3, r7, r3
 801e426:	781b      	ldrb	r3, [r3, #0]
 801e428:	2b03      	cmp	r3, #3
 801e42a:	d9e7      	bls.n	801e3fc <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 801e42c:	230f      	movs	r3, #15
 801e42e:	18fb      	adds	r3, r7, r3
 801e430:	2200      	movs	r2, #0
 801e432:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801e434:	4b47      	ldr	r3, [pc, #284]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e436:	681a      	ldr	r2, [r3, #0]
 801e438:	23c0      	movs	r3, #192	; 0xc0
 801e43a:	049b      	lsls	r3, r3, #18
 801e43c:	4013      	ands	r3, r2
 801e43e:	d00e      	beq.n	801e45e <BSP_GUI_LoadDataFromFlash+0x21a>
 801e440:	4b44      	ldr	r3, [pc, #272]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e442:	681a      	ldr	r2, [r3, #0]
 801e444:	23c0      	movs	r3, #192	; 0xc0
 801e446:	049b      	lsls	r3, r3, #18
 801e448:	401a      	ands	r2, r3
 801e44a:	2380      	movs	r3, #128	; 0x80
 801e44c:	045b      	lsls	r3, r3, #17
 801e44e:	429a      	cmp	r2, r3
 801e450:	d110      	bne.n	801e474 <BSP_GUI_LoadDataFromFlash+0x230>
 801e452:	4b41      	ldr	r3, [pc, #260]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e454:	681a      	ldr	r2, [r3, #0]
 801e456:	2380      	movs	r3, #128	; 0x80
 801e458:	039b      	lsls	r3, r3, #14
 801e45a:	4013      	ands	r3, r2
 801e45c:	d10a      	bne.n	801e474 <BSP_GUI_LoadDataFromFlash+0x230>
 801e45e:	4b3f      	ldr	r3, [pc, #252]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	029b      	lsls	r3, r3, #10
 801e464:	4a3e      	ldr	r2, [pc, #248]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e466:	4013      	ands	r3, r2
 801e468:	0adb      	lsrs	r3, r3, #11
 801e46a:	031b      	lsls	r3, r3, #12
 801e46c:	4a45      	ldr	r2, [pc, #276]	; (801e584 <BSP_GUI_LoadDataFromFlash+0x340>)
 801e46e:	4694      	mov	ip, r2
 801e470:	4463      	add	r3, ip
 801e472:	e00a      	b.n	801e48a <BSP_GUI_LoadDataFromFlash+0x246>
 801e474:	4b39      	ldr	r3, [pc, #228]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	029b      	lsls	r3, r3, #10
 801e47a:	085b      	lsrs	r3, r3, #1
 801e47c:	4a3a      	ldr	r2, [pc, #232]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e47e:	4013      	ands	r3, r2
 801e480:	0adb      	lsrs	r3, r3, #11
 801e482:	031b      	lsls	r3, r3, #12
 801e484:	4a3f      	ldr	r2, [pc, #252]	; (801e584 <BSP_GUI_LoadDataFromFlash+0x340>)
 801e486:	4694      	mov	ip, r2
 801e488:	4463      	add	r3, ip
 801e48a:	4a3f      	ldr	r2, [pc, #252]	; (801e588 <BSP_GUI_LoadDataFromFlash+0x344>)
 801e48c:	0011      	movs	r1, r2
 801e48e:	0018      	movs	r0, r3
 801e490:	f000 fc52 	bl	801ed38 <LoadPDOFromFlash>
 801e494:	0003      	movs	r3, r0
 801e496:	0019      	movs	r1, r3
 801e498:	220f      	movs	r2, #15
 801e49a:	18bb      	adds	r3, r7, r2
 801e49c:	18ba      	adds	r2, r7, r2
 801e49e:	7812      	ldrb	r2, [r2, #0]
 801e4a0:	430a      	orrs	r2, r1
 801e4a2:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 801e4a4:	4b2b      	ldr	r3, [pc, #172]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e4a6:	681a      	ldr	r2, [r3, #0]
 801e4a8:	23c0      	movs	r3, #192	; 0xc0
 801e4aa:	049b      	lsls	r3, r3, #18
 801e4ac:	4013      	ands	r3, r2
 801e4ae:	d00e      	beq.n	801e4ce <BSP_GUI_LoadDataFromFlash+0x28a>
 801e4b0:	4b28      	ldr	r3, [pc, #160]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e4b2:	681a      	ldr	r2, [r3, #0]
 801e4b4:	23c0      	movs	r3, #192	; 0xc0
 801e4b6:	049b      	lsls	r3, r3, #18
 801e4b8:	401a      	ands	r2, r3
 801e4ba:	2380      	movs	r3, #128	; 0x80
 801e4bc:	045b      	lsls	r3, r3, #17
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	d110      	bne.n	801e4e4 <BSP_GUI_LoadDataFromFlash+0x2a0>
 801e4c2:	4b25      	ldr	r3, [pc, #148]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e4c4:	681a      	ldr	r2, [r3, #0]
 801e4c6:	2380      	movs	r3, #128	; 0x80
 801e4c8:	039b      	lsls	r3, r3, #14
 801e4ca:	4013      	ands	r3, r2
 801e4cc:	d10a      	bne.n	801e4e4 <BSP_GUI_LoadDataFromFlash+0x2a0>
 801e4ce:	4b23      	ldr	r3, [pc, #140]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	029b      	lsls	r3, r3, #10
 801e4d4:	4a22      	ldr	r2, [pc, #136]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e4d6:	4013      	ands	r3, r2
 801e4d8:	0adb      	lsrs	r3, r3, #11
 801e4da:	031b      	lsls	r3, r3, #12
 801e4dc:	4a2b      	ldr	r2, [pc, #172]	; (801e58c <BSP_GUI_LoadDataFromFlash+0x348>)
 801e4de:	4694      	mov	ip, r2
 801e4e0:	4463      	add	r3, ip
 801e4e2:	e00a      	b.n	801e4fa <BSP_GUI_LoadDataFromFlash+0x2b6>
 801e4e4:	4b1d      	ldr	r3, [pc, #116]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	029b      	lsls	r3, r3, #10
 801e4ea:	085b      	lsrs	r3, r3, #1
 801e4ec:	4a1e      	ldr	r2, [pc, #120]	; (801e568 <BSP_GUI_LoadDataFromFlash+0x324>)
 801e4ee:	4013      	ands	r3, r2
 801e4f0:	0adb      	lsrs	r3, r3, #11
 801e4f2:	031b      	lsls	r3, r3, #12
 801e4f4:	4a25      	ldr	r2, [pc, #148]	; (801e58c <BSP_GUI_LoadDataFromFlash+0x348>)
 801e4f6:	4694      	mov	ip, r2
 801e4f8:	4463      	add	r3, ip
 801e4fa:	4925      	ldr	r1, [pc, #148]	; (801e590 <BSP_GUI_LoadDataFromFlash+0x34c>)
 801e4fc:	220c      	movs	r2, #12
 801e4fe:	0018      	movs	r0, r3
 801e500:	f000 fc42 	bl	801ed88 <LoadSettingsFromFlash>
 801e504:	0003      	movs	r3, r0
 801e506:	0019      	movs	r1, r3
 801e508:	220f      	movs	r2, #15
 801e50a:	18bb      	adds	r3, r7, r2
 801e50c:	18ba      	adds	r2, r7, r2
 801e50e:	7812      	ldrb	r2, [r2, #0]
 801e510:	430a      	orrs	r2, r1
 801e512:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 801e514:	4b0f      	ldr	r3, [pc, #60]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e516:	681a      	ldr	r2, [r3, #0]
 801e518:	23c0      	movs	r3, #192	; 0xc0
 801e51a:	049b      	lsls	r3, r3, #18
 801e51c:	4013      	ands	r3, r2
 801e51e:	d00e      	beq.n	801e53e <BSP_GUI_LoadDataFromFlash+0x2fa>
 801e520:	4b0c      	ldr	r3, [pc, #48]	; (801e554 <BSP_GUI_LoadDataFromFlash+0x310>)
 801e522:	681a      	ldr	r2, [r3, #0]
 801e524:	23c0      	movs	r3, #192	; 0xc0
 801e526:	049b      	lsls	r3, r3, #18
 801e528:	401a      	ands	r2, r3
 801e52a:	2380      	movs	r3, #128	; 0x80
 801e52c:	045b      	lsls	r3, r3, #17
 801e52e:	429a      	cmp	r2, r3
 801e530:	d132      	bne.n	801e598 <BSP_GUI_LoadDataFromFlash+0x354>
 801e532:	4b09      	ldr	r3, [pc, #36]	; (801e558 <BSP_GUI_LoadDataFromFlash+0x314>)
 801e534:	681a      	ldr	r2, [r3, #0]
 801e536:	2380      	movs	r3, #128	; 0x80
 801e538:	039b      	lsls	r3, r3, #14
 801e53a:	4013      	ands	r3, r2
 801e53c:	d12c      	bne.n	801e598 <BSP_GUI_LoadDataFromFlash+0x354>
 801e53e:	4b07      	ldr	r3, [pc, #28]	; (801e55c <BSP_GUI_LoadDataFromFlash+0x318>)
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	029b      	lsls	r3, r3, #10
 801e544:	4a06      	ldr	r2, [pc, #24]	; (801e560 <BSP_GUI_LoadDataFromFlash+0x31c>)
 801e546:	4013      	ands	r3, r2
 801e548:	0adb      	lsrs	r3, r3, #11
 801e54a:	031b      	lsls	r3, r3, #12
 801e54c:	4a11      	ldr	r2, [pc, #68]	; (801e594 <BSP_GUI_LoadDataFromFlash+0x350>)
 801e54e:	4694      	mov	ip, r2
 801e550:	4463      	add	r3, ip
 801e552:	e02c      	b.n	801e5ae <BSP_GUI_LoadDataFromFlash+0x36a>
 801e554:	1fff7500 	.word	0x1fff7500
 801e558:	40022020 	.word	0x40022020
 801e55c:	1fff75e0 	.word	0x1fff75e0
 801e560:	000ffc00 	.word	0x000ffc00
 801e564:	07fff800 	.word	0x07fff800
 801e568:	0007fe00 	.word	0x0007fe00
 801e56c:	07fff924 	.word	0x07fff924
 801e570:	deadf00d 	.word	0xdeadf00d
 801e574:	deadbabe 	.word	0xdeadbabe
 801e578:	08024e4c 	.word	0x08024e4c
 801e57c:	07fff808 	.word	0x07fff808
 801e580:	20000180 	.word	0x20000180
 801e584:	07fff830 	.word	0x07fff830
 801e588:	20000184 	.word	0x20000184
 801e58c:	07fff890 	.word	0x07fff890
 801e590:	200000f8 	.word	0x200000f8
 801e594:	07fff91c 	.word	0x07fff91c
 801e598:	4b34      	ldr	r3, [pc, #208]	; (801e66c <BSP_GUI_LoadDataFromFlash+0x428>)
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	029b      	lsls	r3, r3, #10
 801e59e:	085b      	lsrs	r3, r3, #1
 801e5a0:	4a33      	ldr	r2, [pc, #204]	; (801e670 <BSP_GUI_LoadDataFromFlash+0x42c>)
 801e5a2:	4013      	ands	r3, r2
 801e5a4:	0adb      	lsrs	r3, r3, #11
 801e5a6:	031b      	lsls	r3, r3, #12
 801e5a8:	4a32      	ldr	r2, [pc, #200]	; (801e674 <BSP_GUI_LoadDataFromFlash+0x430>)
 801e5aa:	4694      	mov	ip, r2
 801e5ac:	4463      	add	r3, ip
 801e5ae:	4932      	ldr	r1, [pc, #200]	; (801e678 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e5b0:	2208      	movs	r2, #8
 801e5b2:	0018      	movs	r0, r3
 801e5b4:	f000 fbe8 	bl	801ed88 <LoadSettingsFromFlash>
 801e5b8:	0003      	movs	r3, r0
 801e5ba:	0019      	movs	r1, r3
 801e5bc:	220f      	movs	r2, #15
 801e5be:	18bb      	adds	r3, r7, r2
 801e5c0:	18ba      	adds	r2, r7, r2
 801e5c2:	7812      	ldrb	r2, [r2, #0]
 801e5c4:	430a      	orrs	r2, r1
 801e5c6:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 801e5c8:	4b2c      	ldr	r3, [pc, #176]	; (801e67c <BSP_GUI_LoadDataFromFlash+0x438>)
 801e5ca:	681a      	ldr	r2, [r3, #0]
 801e5cc:	23c0      	movs	r3, #192	; 0xc0
 801e5ce:	049b      	lsls	r3, r3, #18
 801e5d0:	4013      	ands	r3, r2
 801e5d2:	d00e      	beq.n	801e5f2 <BSP_GUI_LoadDataFromFlash+0x3ae>
 801e5d4:	4b29      	ldr	r3, [pc, #164]	; (801e67c <BSP_GUI_LoadDataFromFlash+0x438>)
 801e5d6:	681a      	ldr	r2, [r3, #0]
 801e5d8:	23c0      	movs	r3, #192	; 0xc0
 801e5da:	049b      	lsls	r3, r3, #18
 801e5dc:	401a      	ands	r2, r3
 801e5de:	2380      	movs	r3, #128	; 0x80
 801e5e0:	045b      	lsls	r3, r3, #17
 801e5e2:	429a      	cmp	r2, r3
 801e5e4:	d110      	bne.n	801e608 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801e5e6:	4b26      	ldr	r3, [pc, #152]	; (801e680 <BSP_GUI_LoadDataFromFlash+0x43c>)
 801e5e8:	681a      	ldr	r2, [r3, #0]
 801e5ea:	2380      	movs	r3, #128	; 0x80
 801e5ec:	039b      	lsls	r3, r3, #14
 801e5ee:	4013      	ands	r3, r2
 801e5f0:	d10a      	bne.n	801e608 <BSP_GUI_LoadDataFromFlash+0x3c4>
 801e5f2:	4b1e      	ldr	r3, [pc, #120]	; (801e66c <BSP_GUI_LoadDataFromFlash+0x428>)
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	029b      	lsls	r3, r3, #10
 801e5f8:	4a22      	ldr	r2, [pc, #136]	; (801e684 <BSP_GUI_LoadDataFromFlash+0x440>)
 801e5fa:	4013      	ands	r3, r2
 801e5fc:	0adb      	lsrs	r3, r3, #11
 801e5fe:	031b      	lsls	r3, r3, #12
 801e600:	4a21      	ldr	r2, [pc, #132]	; (801e688 <BSP_GUI_LoadDataFromFlash+0x444>)
 801e602:	4694      	mov	ip, r2
 801e604:	4463      	add	r3, ip
 801e606:	e00a      	b.n	801e61e <BSP_GUI_LoadDataFromFlash+0x3da>
 801e608:	4b18      	ldr	r3, [pc, #96]	; (801e66c <BSP_GUI_LoadDataFromFlash+0x428>)
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	029b      	lsls	r3, r3, #10
 801e60e:	085b      	lsrs	r3, r3, #1
 801e610:	4a17      	ldr	r2, [pc, #92]	; (801e670 <BSP_GUI_LoadDataFromFlash+0x42c>)
 801e612:	4013      	ands	r3, r2
 801e614:	0adb      	lsrs	r3, r3, #11
 801e616:	031b      	lsls	r3, r3, #12
 801e618:	4a1b      	ldr	r2, [pc, #108]	; (801e688 <BSP_GUI_LoadDataFromFlash+0x444>)
 801e61a:	4694      	mov	ip, r2
 801e61c:	4463      	add	r3, ip
 801e61e:	491b      	ldr	r1, [pc, #108]	; (801e68c <BSP_GUI_LoadDataFromFlash+0x448>)
 801e620:	2274      	movs	r2, #116	; 0x74
 801e622:	0018      	movs	r0, r3
 801e624:	f000 fbb0 	bl	801ed88 <LoadSettingsFromFlash>
 801e628:	0003      	movs	r3, r0
 801e62a:	0019      	movs	r1, r3
 801e62c:	220f      	movs	r2, #15
 801e62e:	18bb      	adds	r3, r7, r2
 801e630:	18ba      	adds	r2, r7, r2
 801e632:	7812      	ldrb	r2, [r2, #0]
 801e634:	430a      	orrs	r2, r1
 801e636:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 801e638:	4b0f      	ldr	r3, [pc, #60]	; (801e678 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e63a:	681a      	ldr	r2, [r3, #0]
 801e63c:	4b13      	ldr	r3, [pc, #76]	; (801e68c <BSP_GUI_LoadDataFromFlash+0x448>)
 801e63e:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 801e640:	4b0d      	ldr	r3, [pc, #52]	; (801e678 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e642:	8899      	ldrh	r1, [r3, #4]
 801e644:	4b11      	ldr	r3, [pc, #68]	; (801e68c <BSP_GUI_LoadDataFromFlash+0x448>)
 801e646:	2250      	movs	r2, #80	; 0x50
 801e648:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 801e64a:	4b0b      	ldr	r3, [pc, #44]	; (801e678 <BSP_GUI_LoadDataFromFlash+0x434>)
 801e64c:	88d9      	ldrh	r1, [r3, #6]
 801e64e:	4b0f      	ldr	r3, [pc, #60]	; (801e68c <BSP_GUI_LoadDataFromFlash+0x448>)
 801e650:	2252      	movs	r2, #82	; 0x52
 801e652:	5299      	strh	r1, [r3, r2]
 801e654:	e002      	b.n	801e65c <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801e656:	46c0      	nop			; (mov r8, r8)
 801e658:	e000      	b.n	801e65c <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 801e65a:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 801e65c:	230f      	movs	r3, #15
 801e65e:	18fb      	adds	r3, r7, r3
 801e660:	781b      	ldrb	r3, [r3, #0]
}
 801e662:	0018      	movs	r0, r3
 801e664:	46bd      	mov	sp, r7
 801e666:	b004      	add	sp, #16
 801e668:	bd80      	pop	{r7, pc}
 801e66a:	46c0      	nop			; (mov r8, r8)
 801e66c:	1fff75e0 	.word	0x1fff75e0
 801e670:	0007fe00 	.word	0x0007fe00
 801e674:	07fff91c 	.word	0x07fff91c
 801e678:	20000104 	.word	0x20000104
 801e67c:	1fff7500 	.word	0x1fff7500
 801e680:	40022020 	.word	0x40022020
 801e684:	000ffc00 	.word	0x000ffc00
 801e688:	07fff89c 	.word	0x07fff89c
 801e68c:	2000010c 	.word	0x2000010c

0801e690 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 801e690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e692:	b099      	sub	sp, #100	; 0x64
 801e694:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 801e696:	2327      	movs	r3, #39	; 0x27
 801e698:	2638      	movs	r6, #56	; 0x38
 801e69a:	199b      	adds	r3, r3, r6
 801e69c:	19da      	adds	r2, r3, r7
 801e69e:	2300      	movs	r3, #0
 801e6a0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6a2:	b672      	cpsid	i
}
 801e6a4:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 801e6a6:	f7ed f9d9 	bl	800ba5c <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 801e6aa:	2308      	movs	r3, #8
 801e6ac:	199b      	adds	r3, r3, r6
 801e6ae:	19da      	adds	r2, r3, r7
 801e6b0:	2302      	movs	r3, #2
 801e6b2:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801e6b4:	4bbf      	ldr	r3, [pc, #764]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e6b6:	681a      	ldr	r2, [r3, #0]
 801e6b8:	23c0      	movs	r3, #192	; 0xc0
 801e6ba:	049b      	lsls	r3, r3, #18
 801e6bc:	4013      	ands	r3, r2
 801e6be:	d00e      	beq.n	801e6de <BSP_GUI_SaveDataInFlash+0x4e>
 801e6c0:	4bbc      	ldr	r3, [pc, #752]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e6c2:	681a      	ldr	r2, [r3, #0]
 801e6c4:	23c0      	movs	r3, #192	; 0xc0
 801e6c6:	049b      	lsls	r3, r3, #18
 801e6c8:	401a      	ands	r2, r3
 801e6ca:	2380      	movs	r3, #128	; 0x80
 801e6cc:	045b      	lsls	r3, r3, #17
 801e6ce:	429a      	cmp	r2, r3
 801e6d0:	d10e      	bne.n	801e6f0 <BSP_GUI_SaveDataInFlash+0x60>
 801e6d2:	4bb9      	ldr	r3, [pc, #740]	; (801e9b8 <BSP_GUI_SaveDataInFlash+0x328>)
 801e6d4:	681a      	ldr	r2, [r3, #0]
 801e6d6:	2380      	movs	r3, #128	; 0x80
 801e6d8:	039b      	lsls	r3, r3, #14
 801e6da:	4013      	ands	r3, r2
 801e6dc:	d108      	bne.n	801e6f0 <BSP_GUI_SaveDataInFlash+0x60>
 801e6de:	4bb7      	ldr	r3, [pc, #732]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	029a      	lsls	r2, r3, #10
 801e6e4:	4bb6      	ldr	r3, [pc, #728]	; (801e9c0 <BSP_GUI_SaveDataInFlash+0x330>)
 801e6e6:	4013      	ands	r3, r2
 801e6e8:	0adb      	lsrs	r3, r3, #11
 801e6ea:	005b      	lsls	r3, r3, #1
 801e6ec:	1e5a      	subs	r2, r3, #1
 801e6ee:	e008      	b.n	801e702 <BSP_GUI_SaveDataInFlash+0x72>
 801e6f0:	4bb2      	ldr	r3, [pc, #712]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e6f2:	681b      	ldr	r3, [r3, #0]
 801e6f4:	029b      	lsls	r3, r3, #10
 801e6f6:	085a      	lsrs	r2, r3, #1
 801e6f8:	4bb2      	ldr	r3, [pc, #712]	; (801e9c4 <BSP_GUI_SaveDataInFlash+0x334>)
 801e6fa:	4013      	ands	r3, r2
 801e6fc:	0adb      	lsrs	r3, r3, #11
 801e6fe:	005b      	lsls	r3, r3, #1
 801e700:	1e5a      	subs	r2, r3, #1
 801e702:	2108      	movs	r1, #8
 801e704:	2038      	movs	r0, #56	; 0x38
 801e706:	180b      	adds	r3, r1, r0
 801e708:	19db      	adds	r3, r3, r7
 801e70a:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 801e70c:	180b      	adds	r3, r1, r0
 801e70e:	19da      	adds	r2, r3, r7
 801e710:	2380      	movs	r3, #128	; 0x80
 801e712:	021b      	lsls	r3, r3, #8
 801e714:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 801e716:	180b      	adds	r3, r1, r0
 801e718:	19da      	adds	r2, r3, r7
 801e71a:	2301      	movs	r3, #1
 801e71c:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 801e71e:	4baa      	ldr	r3, [pc, #680]	; (801e9c8 <BSP_GUI_SaveDataInFlash+0x338>)
 801e720:	691b      	ldr	r3, [r3, #16]
 801e722:	2b00      	cmp	r3, #0
 801e724:	d003      	beq.n	801e72e <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 801e726:	4aa8      	ldr	r2, [pc, #672]	; (801e9c8 <BSP_GUI_SaveDataInFlash+0x338>)
 801e728:	2380      	movs	r3, #128	; 0x80
 801e72a:	021b      	lsls	r3, r3, #8
 801e72c:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 801e72e:	233c      	movs	r3, #60	; 0x3c
 801e730:	18fa      	adds	r2, r7, r3
 801e732:	2308      	movs	r3, #8
 801e734:	2638      	movs	r6, #56	; 0x38
 801e736:	199b      	adds	r3, r3, r6
 801e738:	19db      	adds	r3, r3, r7
 801e73a:	0011      	movs	r1, r2
 801e73c:	0018      	movs	r0, r3
 801e73e:	f7ed fa41 	bl	800bbc4 <HAL_FLASHEx_Erase>
 801e742:	1e03      	subs	r3, r0, #0
 801e744:	d004      	beq.n	801e750 <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 801e746:	2327      	movs	r3, #39	; 0x27
 801e748:	199b      	adds	r3, r3, r6
 801e74a:	19da      	adds	r2, r3, r7
 801e74c:	2301      	movs	r3, #1
 801e74e:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 801e750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e752:	3301      	adds	r3, #1
 801e754:	d000      	beq.n	801e758 <BSP_GUI_SaveDataInFlash+0xc8>
 801e756:	e1d9      	b.n	801eb0c <BSP_GUI_SaveDataInFlash+0x47c>
 801e758:	2327      	movs	r3, #39	; 0x27
 801e75a:	2238      	movs	r2, #56	; 0x38
 801e75c:	189b      	adds	r3, r3, r2
 801e75e:	19db      	adds	r3, r3, r7
 801e760:	781b      	ldrb	r3, [r3, #0]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d000      	beq.n	801e768 <BSP_GUI_SaveDataInFlash+0xd8>
 801e766:	e1d1      	b.n	801eb0c <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 801e768:	4b92      	ldr	r3, [pc, #584]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e76a:	681a      	ldr	r2, [r3, #0]
 801e76c:	23c0      	movs	r3, #192	; 0xc0
 801e76e:	049b      	lsls	r3, r3, #18
 801e770:	4013      	ands	r3, r2
 801e772:	d00e      	beq.n	801e792 <BSP_GUI_SaveDataInFlash+0x102>
 801e774:	4b8f      	ldr	r3, [pc, #572]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e776:	681a      	ldr	r2, [r3, #0]
 801e778:	23c0      	movs	r3, #192	; 0xc0
 801e77a:	049b      	lsls	r3, r3, #18
 801e77c:	401a      	ands	r2, r3
 801e77e:	2380      	movs	r3, #128	; 0x80
 801e780:	045b      	lsls	r3, r3, #17
 801e782:	429a      	cmp	r2, r3
 801e784:	d10f      	bne.n	801e7a6 <BSP_GUI_SaveDataInFlash+0x116>
 801e786:	4b8c      	ldr	r3, [pc, #560]	; (801e9b8 <BSP_GUI_SaveDataInFlash+0x328>)
 801e788:	681a      	ldr	r2, [r3, #0]
 801e78a:	2380      	movs	r3, #128	; 0x80
 801e78c:	039b      	lsls	r3, r3, #14
 801e78e:	4013      	ands	r3, r2
 801e790:	d109      	bne.n	801e7a6 <BSP_GUI_SaveDataInFlash+0x116>
 801e792:	4b8a      	ldr	r3, [pc, #552]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	029a      	lsls	r2, r3, #10
 801e798:	4b89      	ldr	r3, [pc, #548]	; (801e9c0 <BSP_GUI_SaveDataInFlash+0x330>)
 801e79a:	4013      	ands	r3, r2
 801e79c:	0adb      	lsrs	r3, r3, #11
 801e79e:	031b      	lsls	r3, r3, #12
 801e7a0:	4a8a      	ldr	r2, [pc, #552]	; (801e9cc <BSP_GUI_SaveDataInFlash+0x33c>)
 801e7a2:	1899      	adds	r1, r3, r2
 801e7a4:	e009      	b.n	801e7ba <BSP_GUI_SaveDataInFlash+0x12a>
 801e7a6:	4b85      	ldr	r3, [pc, #532]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	029b      	lsls	r3, r3, #10
 801e7ac:	085a      	lsrs	r2, r3, #1
 801e7ae:	4b85      	ldr	r3, [pc, #532]	; (801e9c4 <BSP_GUI_SaveDataInFlash+0x334>)
 801e7b0:	4013      	ands	r3, r2
 801e7b2:	0adb      	lsrs	r3, r3, #11
 801e7b4:	031b      	lsls	r3, r3, #12
 801e7b6:	4a85      	ldr	r2, [pc, #532]	; (801e9cc <BSP_GUI_SaveDataInFlash+0x33c>)
 801e7b8:	1899      	adds	r1, r3, r2
 801e7ba:	4a85      	ldr	r2, [pc, #532]	; (801e9d0 <BSP_GUI_SaveDataInFlash+0x340>)
 801e7bc:	4b85      	ldr	r3, [pc, #532]	; (801e9d4 <BSP_GUI_SaveDataInFlash+0x344>)
 801e7be:	2001      	movs	r0, #1
 801e7c0:	f7ed f8fe 	bl	800b9c0 <HAL_FLASH_Program>
 801e7c4:	1e03      	subs	r3, r0, #0
 801e7c6:	d005      	beq.n	801e7d4 <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 801e7c8:	2327      	movs	r3, #39	; 0x27
 801e7ca:	2238      	movs	r2, #56	; 0x38
 801e7cc:	189b      	adds	r3, r3, r2
 801e7ce:	19da      	adds	r2, r3, r7
 801e7d0:	2302      	movs	r3, #2
 801e7d2:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 801e7d4:	2327      	movs	r3, #39	; 0x27
 801e7d6:	2238      	movs	r2, #56	; 0x38
 801e7d8:	189b      	adds	r3, r3, r2
 801e7da:	19db      	adds	r3, r3, r7
 801e7dc:	781b      	ldrb	r3, [r3, #0]
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d000      	beq.n	801e7e4 <BSP_GUI_SaveDataInFlash+0x154>
 801e7e2:	e082      	b.n	801e8ea <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 801e7e4:	2200      	movs	r2, #0
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	653a      	str	r2, [r7, #80]	; 0x50
 801e7ea:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 801e7ec:	4b7a      	ldr	r3, [pc, #488]	; (801e9d8 <BSP_GUI_SaveDataInFlash+0x348>)
 801e7ee:	781b      	ldrb	r3, [r3, #0]
 801e7f0:	633b      	str	r3, [r7, #48]	; 0x30
 801e7f2:	2300      	movs	r3, #0
 801e7f4:	637b      	str	r3, [r7, #52]	; 0x34
 801e7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e7f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e7fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e7fc:	0008      	movs	r0, r1
 801e7fe:	4318      	orrs	r0, r3
 801e800:	0004      	movs	r4, r0
 801e802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e804:	431a      	orrs	r2, r3
 801e806:	0015      	movs	r5, r2
 801e808:	653c      	str	r4, [r7, #80]	; 0x50
 801e80a:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 801e80c:	4b72      	ldr	r3, [pc, #456]	; (801e9d8 <BSP_GUI_SaveDataInFlash+0x348>)
 801e80e:	785b      	ldrb	r3, [r3, #1]
 801e810:	021b      	lsls	r3, r3, #8
 801e812:	62bb      	str	r3, [r7, #40]	; 0x28
 801e814:	17db      	asrs	r3, r3, #31
 801e816:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e81e:	0008      	movs	r0, r1
 801e820:	4318      	orrs	r0, r3
 801e822:	6138      	str	r0, [r7, #16]
 801e824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e826:	431a      	orrs	r2, r3
 801e828:	617a      	str	r2, [r7, #20]
 801e82a:	693b      	ldr	r3, [r7, #16]
 801e82c:	697c      	ldr	r4, [r7, #20]
 801e82e:	653b      	str	r3, [r7, #80]	; 0x50
 801e830:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 801e832:	4b69      	ldr	r3, [pc, #420]	; (801e9d8 <BSP_GUI_SaveDataInFlash+0x348>)
 801e834:	789b      	ldrb	r3, [r3, #2]
 801e836:	041b      	lsls	r3, r3, #16
 801e838:	623b      	str	r3, [r7, #32]
 801e83a:	17db      	asrs	r3, r3, #31
 801e83c:	627b      	str	r3, [r7, #36]	; 0x24
 801e83e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e840:	6a39      	ldr	r1, [r7, #32]
 801e842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e844:	0008      	movs	r0, r1
 801e846:	4318      	orrs	r0, r3
 801e848:	60b8      	str	r0, [r7, #8]
 801e84a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e84c:	431a      	orrs	r2, r3
 801e84e:	60fa      	str	r2, [r7, #12]
 801e850:	68bb      	ldr	r3, [r7, #8]
 801e852:	68fc      	ldr	r4, [r7, #12]
 801e854:	653b      	str	r3, [r7, #80]	; 0x50
 801e856:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 801e858:	4b5f      	ldr	r3, [pc, #380]	; (801e9d8 <BSP_GUI_SaveDataInFlash+0x348>)
 801e85a:	78db      	ldrb	r3, [r3, #3]
 801e85c:	061b      	lsls	r3, r3, #24
 801e85e:	61bb      	str	r3, [r7, #24]
 801e860:	17db      	asrs	r3, r3, #31
 801e862:	61fb      	str	r3, [r7, #28]
 801e864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e866:	69b9      	ldr	r1, [r7, #24]
 801e868:	69fa      	ldr	r2, [r7, #28]
 801e86a:	0008      	movs	r0, r1
 801e86c:	4318      	orrs	r0, r3
 801e86e:	6038      	str	r0, [r7, #0]
 801e870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e872:	431a      	orrs	r2, r3
 801e874:	607a      	str	r2, [r7, #4]
 801e876:	683b      	ldr	r3, [r7, #0]
 801e878:	687c      	ldr	r4, [r7, #4]
 801e87a:	653b      	str	r3, [r7, #80]	; 0x50
 801e87c:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 801e87e:	4b4d      	ldr	r3, [pc, #308]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e880:	681a      	ldr	r2, [r3, #0]
 801e882:	23c0      	movs	r3, #192	; 0xc0
 801e884:	049b      	lsls	r3, r3, #18
 801e886:	4013      	ands	r3, r2
 801e888:	d00e      	beq.n	801e8a8 <BSP_GUI_SaveDataInFlash+0x218>
 801e88a:	4b4a      	ldr	r3, [pc, #296]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e88c:	681a      	ldr	r2, [r3, #0]
 801e88e:	23c0      	movs	r3, #192	; 0xc0
 801e890:	049b      	lsls	r3, r3, #18
 801e892:	401a      	ands	r2, r3
 801e894:	2380      	movs	r3, #128	; 0x80
 801e896:	045b      	lsls	r3, r3, #17
 801e898:	429a      	cmp	r2, r3
 801e89a:	d10f      	bne.n	801e8bc <BSP_GUI_SaveDataInFlash+0x22c>
 801e89c:	4b46      	ldr	r3, [pc, #280]	; (801e9b8 <BSP_GUI_SaveDataInFlash+0x328>)
 801e89e:	681a      	ldr	r2, [r3, #0]
 801e8a0:	2380      	movs	r3, #128	; 0x80
 801e8a2:	039b      	lsls	r3, r3, #14
 801e8a4:	4013      	ands	r3, r2
 801e8a6:	d109      	bne.n	801e8bc <BSP_GUI_SaveDataInFlash+0x22c>
 801e8a8:	4b44      	ldr	r3, [pc, #272]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	029b      	lsls	r3, r3, #10
 801e8ae:	4a44      	ldr	r2, [pc, #272]	; (801e9c0 <BSP_GUI_SaveDataInFlash+0x330>)
 801e8b0:	4013      	ands	r3, r2
 801e8b2:	0adb      	lsrs	r3, r3, #11
 801e8b4:	031b      	lsls	r3, r3, #12
 801e8b6:	4a49      	ldr	r2, [pc, #292]	; (801e9dc <BSP_GUI_SaveDataInFlash+0x34c>)
 801e8b8:	1899      	adds	r1, r3, r2
 801e8ba:	e009      	b.n	801e8d0 <BSP_GUI_SaveDataInFlash+0x240>
 801e8bc:	4b3f      	ldr	r3, [pc, #252]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	029b      	lsls	r3, r3, #10
 801e8c2:	085b      	lsrs	r3, r3, #1
 801e8c4:	4a3f      	ldr	r2, [pc, #252]	; (801e9c4 <BSP_GUI_SaveDataInFlash+0x334>)
 801e8c6:	4013      	ands	r3, r2
 801e8c8:	0adb      	lsrs	r3, r3, #11
 801e8ca:	031b      	lsls	r3, r3, #12
 801e8cc:	4a43      	ldr	r2, [pc, #268]	; (801e9dc <BSP_GUI_SaveDataInFlash+0x34c>)
 801e8ce:	1899      	adds	r1, r3, r2
 801e8d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e8d4:	2001      	movs	r0, #1
 801e8d6:	f7ed f873 	bl	800b9c0 <HAL_FLASH_Program>
 801e8da:	1e03      	subs	r3, r0, #0
 801e8dc:	d005      	beq.n	801e8ea <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 801e8de:	2327      	movs	r3, #39	; 0x27
 801e8e0:	2238      	movs	r2, #56	; 0x38
 801e8e2:	189b      	adds	r3, r3, r2
 801e8e4:	19db      	adds	r3, r3, r7
 801e8e6:	2202      	movs	r2, #2
 801e8e8:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 801e8ea:	2327      	movs	r3, #39	; 0x27
 801e8ec:	2238      	movs	r2, #56	; 0x38
 801e8ee:	189b      	adds	r3, r3, r2
 801e8f0:	19db      	adds	r3, r3, r7
 801e8f2:	781b      	ldrb	r3, [r3, #0]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d135      	bne.n	801e964 <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 801e8f8:	4b2e      	ldr	r3, [pc, #184]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e8fa:	681a      	ldr	r2, [r3, #0]
 801e8fc:	23c0      	movs	r3, #192	; 0xc0
 801e8fe:	049b      	lsls	r3, r3, #18
 801e900:	4013      	ands	r3, r2
 801e902:	d00e      	beq.n	801e922 <BSP_GUI_SaveDataInFlash+0x292>
 801e904:	4b2b      	ldr	r3, [pc, #172]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e906:	681a      	ldr	r2, [r3, #0]
 801e908:	23c0      	movs	r3, #192	; 0xc0
 801e90a:	049b      	lsls	r3, r3, #18
 801e90c:	401a      	ands	r2, r3
 801e90e:	2380      	movs	r3, #128	; 0x80
 801e910:	045b      	lsls	r3, r3, #17
 801e912:	429a      	cmp	r2, r3
 801e914:	d110      	bne.n	801e938 <BSP_GUI_SaveDataInFlash+0x2a8>
 801e916:	4b28      	ldr	r3, [pc, #160]	; (801e9b8 <BSP_GUI_SaveDataInFlash+0x328>)
 801e918:	681a      	ldr	r2, [r3, #0]
 801e91a:	2380      	movs	r3, #128	; 0x80
 801e91c:	039b      	lsls	r3, r3, #14
 801e91e:	4013      	ands	r3, r2
 801e920:	d10a      	bne.n	801e938 <BSP_GUI_SaveDataInFlash+0x2a8>
 801e922:	4b26      	ldr	r3, [pc, #152]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	029b      	lsls	r3, r3, #10
 801e928:	4a25      	ldr	r2, [pc, #148]	; (801e9c0 <BSP_GUI_SaveDataInFlash+0x330>)
 801e92a:	4013      	ands	r3, r2
 801e92c:	0adb      	lsrs	r3, r3, #11
 801e92e:	031b      	lsls	r3, r3, #12
 801e930:	4a2b      	ldr	r2, [pc, #172]	; (801e9e0 <BSP_GUI_SaveDataInFlash+0x350>)
 801e932:	4694      	mov	ip, r2
 801e934:	4463      	add	r3, ip
 801e936:	e00a      	b.n	801e94e <BSP_GUI_SaveDataInFlash+0x2be>
 801e938:	4b20      	ldr	r3, [pc, #128]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	029b      	lsls	r3, r3, #10
 801e93e:	085b      	lsrs	r3, r3, #1
 801e940:	4a20      	ldr	r2, [pc, #128]	; (801e9c4 <BSP_GUI_SaveDataInFlash+0x334>)
 801e942:	4013      	ands	r3, r2
 801e944:	0adb      	lsrs	r3, r3, #11
 801e946:	031b      	lsls	r3, r3, #12
 801e948:	4a25      	ldr	r2, [pc, #148]	; (801e9e0 <BSP_GUI_SaveDataInFlash+0x350>)
 801e94a:	4694      	mov	ip, r2
 801e94c:	4463      	add	r3, ip
 801e94e:	2227      	movs	r2, #39	; 0x27
 801e950:	2138      	movs	r1, #56	; 0x38
 801e952:	1852      	adds	r2, r2, r1
 801e954:	19d4      	adds	r4, r2, r7
 801e956:	4a23      	ldr	r2, [pc, #140]	; (801e9e4 <BSP_GUI_SaveDataInFlash+0x354>)
 801e958:	0011      	movs	r1, r2
 801e95a:	0018      	movs	r0, r3
 801e95c:	f000 f8fa 	bl	801eb54 <SavePDOInFlash>
 801e960:	0003      	movs	r3, r0
 801e962:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801e964:	2327      	movs	r3, #39	; 0x27
 801e966:	2238      	movs	r2, #56	; 0x38
 801e968:	189b      	adds	r3, r3, r2
 801e96a:	19db      	adds	r3, r3, r7
 801e96c:	781b      	ldrb	r3, [r3, #0]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d152      	bne.n	801ea18 <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 801e972:	4b10      	ldr	r3, [pc, #64]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e974:	681a      	ldr	r2, [r3, #0]
 801e976:	23c0      	movs	r3, #192	; 0xc0
 801e978:	049b      	lsls	r3, r3, #18
 801e97a:	4013      	ands	r3, r2
 801e97c:	d00e      	beq.n	801e99c <BSP_GUI_SaveDataInFlash+0x30c>
 801e97e:	4b0d      	ldr	r3, [pc, #52]	; (801e9b4 <BSP_GUI_SaveDataInFlash+0x324>)
 801e980:	681a      	ldr	r2, [r3, #0]
 801e982:	23c0      	movs	r3, #192	; 0xc0
 801e984:	049b      	lsls	r3, r3, #18
 801e986:	401a      	ands	r2, r3
 801e988:	2380      	movs	r3, #128	; 0x80
 801e98a:	045b      	lsls	r3, r3, #17
 801e98c:	429a      	cmp	r2, r3
 801e98e:	d12d      	bne.n	801e9ec <BSP_GUI_SaveDataInFlash+0x35c>
 801e990:	4b09      	ldr	r3, [pc, #36]	; (801e9b8 <BSP_GUI_SaveDataInFlash+0x328>)
 801e992:	681a      	ldr	r2, [r3, #0]
 801e994:	2380      	movs	r3, #128	; 0x80
 801e996:	039b      	lsls	r3, r3, #14
 801e998:	4013      	ands	r3, r2
 801e99a:	d127      	bne.n	801e9ec <BSP_GUI_SaveDataInFlash+0x35c>
 801e99c:	4b07      	ldr	r3, [pc, #28]	; (801e9bc <BSP_GUI_SaveDataInFlash+0x32c>)
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	029b      	lsls	r3, r3, #10
 801e9a2:	4a07      	ldr	r2, [pc, #28]	; (801e9c0 <BSP_GUI_SaveDataInFlash+0x330>)
 801e9a4:	4013      	ands	r3, r2
 801e9a6:	0adb      	lsrs	r3, r3, #11
 801e9a8:	031b      	lsls	r3, r3, #12
 801e9aa:	4a0f      	ldr	r2, [pc, #60]	; (801e9e8 <BSP_GUI_SaveDataInFlash+0x358>)
 801e9ac:	4694      	mov	ip, r2
 801e9ae:	4463      	add	r3, ip
 801e9b0:	e027      	b.n	801ea02 <BSP_GUI_SaveDataInFlash+0x372>
 801e9b2:	46c0      	nop			; (mov r8, r8)
 801e9b4:	1fff7500 	.word	0x1fff7500
 801e9b8:	40022020 	.word	0x40022020
 801e9bc:	1fff75e0 	.word	0x1fff75e0
 801e9c0:	000ffc00 	.word	0x000ffc00
 801e9c4:	0007fe00 	.word	0x0007fe00
 801e9c8:	40022000 	.word	0x40022000
 801e9cc:	07fff800 	.word	0x07fff800
 801e9d0:	deadf00d 	.word	0xdeadf00d
 801e9d4:	deadbabe 	.word	0xdeadbabe
 801e9d8:	20000180 	.word	0x20000180
 801e9dc:	07fff808 	.word	0x07fff808
 801e9e0:	07fff830 	.word	0x07fff830
 801e9e4:	20000184 	.word	0x20000184
 801e9e8:	07fff890 	.word	0x07fff890
 801e9ec:	4b4e      	ldr	r3, [pc, #312]	; (801eb28 <BSP_GUI_SaveDataInFlash+0x498>)
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	029b      	lsls	r3, r3, #10
 801e9f2:	085b      	lsrs	r3, r3, #1
 801e9f4:	4a4d      	ldr	r2, [pc, #308]	; (801eb2c <BSP_GUI_SaveDataInFlash+0x49c>)
 801e9f6:	4013      	ands	r3, r2
 801e9f8:	0adb      	lsrs	r3, r3, #11
 801e9fa:	031b      	lsls	r3, r3, #12
 801e9fc:	4a4c      	ldr	r2, [pc, #304]	; (801eb30 <BSP_GUI_SaveDataInFlash+0x4a0>)
 801e9fe:	4694      	mov	ip, r2
 801ea00:	4463      	add	r3, ip
 801ea02:	2227      	movs	r2, #39	; 0x27
 801ea04:	2138      	movs	r1, #56	; 0x38
 801ea06:	1852      	adds	r2, r2, r1
 801ea08:	19d4      	adds	r4, r2, r7
 801ea0a:	494a      	ldr	r1, [pc, #296]	; (801eb34 <BSP_GUI_SaveDataInFlash+0x4a4>)
 801ea0c:	220c      	movs	r2, #12
 801ea0e:	0018      	movs	r0, r3
 801ea10:	f000 f913 	bl	801ec3a <SaveSettingsInFlash>
 801ea14:	0003      	movs	r3, r0
 801ea16:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 801ea18:	2327      	movs	r3, #39	; 0x27
 801ea1a:	2238      	movs	r2, #56	; 0x38
 801ea1c:	189b      	adds	r3, r3, r2
 801ea1e:	19db      	adds	r3, r3, r7
 801ea20:	781b      	ldrb	r3, [r3, #0]
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d135      	bne.n	801ea92 <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 801ea26:	4b44      	ldr	r3, [pc, #272]	; (801eb38 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801ea28:	681a      	ldr	r2, [r3, #0]
 801ea2a:	23c0      	movs	r3, #192	; 0xc0
 801ea2c:	049b      	lsls	r3, r3, #18
 801ea2e:	4013      	ands	r3, r2
 801ea30:	d00e      	beq.n	801ea50 <BSP_GUI_SaveDataInFlash+0x3c0>
 801ea32:	4b41      	ldr	r3, [pc, #260]	; (801eb38 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801ea34:	681a      	ldr	r2, [r3, #0]
 801ea36:	23c0      	movs	r3, #192	; 0xc0
 801ea38:	049b      	lsls	r3, r3, #18
 801ea3a:	401a      	ands	r2, r3
 801ea3c:	2380      	movs	r3, #128	; 0x80
 801ea3e:	045b      	lsls	r3, r3, #17
 801ea40:	429a      	cmp	r2, r3
 801ea42:	d110      	bne.n	801ea66 <BSP_GUI_SaveDataInFlash+0x3d6>
 801ea44:	4b3d      	ldr	r3, [pc, #244]	; (801eb3c <BSP_GUI_SaveDataInFlash+0x4ac>)
 801ea46:	681a      	ldr	r2, [r3, #0]
 801ea48:	2380      	movs	r3, #128	; 0x80
 801ea4a:	039b      	lsls	r3, r3, #14
 801ea4c:	4013      	ands	r3, r2
 801ea4e:	d10a      	bne.n	801ea66 <BSP_GUI_SaveDataInFlash+0x3d6>
 801ea50:	4b35      	ldr	r3, [pc, #212]	; (801eb28 <BSP_GUI_SaveDataInFlash+0x498>)
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	029b      	lsls	r3, r3, #10
 801ea56:	4a3a      	ldr	r2, [pc, #232]	; (801eb40 <BSP_GUI_SaveDataInFlash+0x4b0>)
 801ea58:	4013      	ands	r3, r2
 801ea5a:	0adb      	lsrs	r3, r3, #11
 801ea5c:	031b      	lsls	r3, r3, #12
 801ea5e:	4a39      	ldr	r2, [pc, #228]	; (801eb44 <BSP_GUI_SaveDataInFlash+0x4b4>)
 801ea60:	4694      	mov	ip, r2
 801ea62:	4463      	add	r3, ip
 801ea64:	e00a      	b.n	801ea7c <BSP_GUI_SaveDataInFlash+0x3ec>
 801ea66:	4b30      	ldr	r3, [pc, #192]	; (801eb28 <BSP_GUI_SaveDataInFlash+0x498>)
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	029b      	lsls	r3, r3, #10
 801ea6c:	085b      	lsrs	r3, r3, #1
 801ea6e:	4a2f      	ldr	r2, [pc, #188]	; (801eb2c <BSP_GUI_SaveDataInFlash+0x49c>)
 801ea70:	4013      	ands	r3, r2
 801ea72:	0adb      	lsrs	r3, r3, #11
 801ea74:	031b      	lsls	r3, r3, #12
 801ea76:	4a33      	ldr	r2, [pc, #204]	; (801eb44 <BSP_GUI_SaveDataInFlash+0x4b4>)
 801ea78:	4694      	mov	ip, r2
 801ea7a:	4463      	add	r3, ip
 801ea7c:	2227      	movs	r2, #39	; 0x27
 801ea7e:	2138      	movs	r1, #56	; 0x38
 801ea80:	1852      	adds	r2, r2, r1
 801ea82:	19d4      	adds	r4, r2, r7
 801ea84:	4930      	ldr	r1, [pc, #192]	; (801eb48 <BSP_GUI_SaveDataInFlash+0x4b8>)
 801ea86:	2208      	movs	r2, #8
 801ea88:	0018      	movs	r0, r3
 801ea8a:	f000 f8d6 	bl	801ec3a <SaveSettingsInFlash>
 801ea8e:	0003      	movs	r3, r0
 801ea90:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 801ea92:	2327      	movs	r3, #39	; 0x27
 801ea94:	2238      	movs	r2, #56	; 0x38
 801ea96:	189b      	adds	r3, r3, r2
 801ea98:	19db      	adds	r3, r3, r7
 801ea9a:	781b      	ldrb	r3, [r3, #0]
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d135      	bne.n	801eb0c <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 801eaa0:	4b25      	ldr	r3, [pc, #148]	; (801eb38 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eaa2:	681a      	ldr	r2, [r3, #0]
 801eaa4:	23c0      	movs	r3, #192	; 0xc0
 801eaa6:	049b      	lsls	r3, r3, #18
 801eaa8:	4013      	ands	r3, r2
 801eaaa:	d00e      	beq.n	801eaca <BSP_GUI_SaveDataInFlash+0x43a>
 801eaac:	4b22      	ldr	r3, [pc, #136]	; (801eb38 <BSP_GUI_SaveDataInFlash+0x4a8>)
 801eaae:	681a      	ldr	r2, [r3, #0]
 801eab0:	23c0      	movs	r3, #192	; 0xc0
 801eab2:	049b      	lsls	r3, r3, #18
 801eab4:	401a      	ands	r2, r3
 801eab6:	2380      	movs	r3, #128	; 0x80
 801eab8:	045b      	lsls	r3, r3, #17
 801eaba:	429a      	cmp	r2, r3
 801eabc:	d110      	bne.n	801eae0 <BSP_GUI_SaveDataInFlash+0x450>
 801eabe:	4b1f      	ldr	r3, [pc, #124]	; (801eb3c <BSP_GUI_SaveDataInFlash+0x4ac>)
 801eac0:	681a      	ldr	r2, [r3, #0]
 801eac2:	2380      	movs	r3, #128	; 0x80
 801eac4:	039b      	lsls	r3, r3, #14
 801eac6:	4013      	ands	r3, r2
 801eac8:	d10a      	bne.n	801eae0 <BSP_GUI_SaveDataInFlash+0x450>
 801eaca:	4b17      	ldr	r3, [pc, #92]	; (801eb28 <BSP_GUI_SaveDataInFlash+0x498>)
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	029b      	lsls	r3, r3, #10
 801ead0:	4a1b      	ldr	r2, [pc, #108]	; (801eb40 <BSP_GUI_SaveDataInFlash+0x4b0>)
 801ead2:	4013      	ands	r3, r2
 801ead4:	0adb      	lsrs	r3, r3, #11
 801ead6:	031b      	lsls	r3, r3, #12
 801ead8:	4a1c      	ldr	r2, [pc, #112]	; (801eb4c <BSP_GUI_SaveDataInFlash+0x4bc>)
 801eada:	4694      	mov	ip, r2
 801eadc:	4463      	add	r3, ip
 801eade:	e00a      	b.n	801eaf6 <BSP_GUI_SaveDataInFlash+0x466>
 801eae0:	4b11      	ldr	r3, [pc, #68]	; (801eb28 <BSP_GUI_SaveDataInFlash+0x498>)
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	029b      	lsls	r3, r3, #10
 801eae6:	085b      	lsrs	r3, r3, #1
 801eae8:	4a10      	ldr	r2, [pc, #64]	; (801eb2c <BSP_GUI_SaveDataInFlash+0x49c>)
 801eaea:	4013      	ands	r3, r2
 801eaec:	0adb      	lsrs	r3, r3, #11
 801eaee:	031b      	lsls	r3, r3, #12
 801eaf0:	4a16      	ldr	r2, [pc, #88]	; (801eb4c <BSP_GUI_SaveDataInFlash+0x4bc>)
 801eaf2:	4694      	mov	ip, r2
 801eaf4:	4463      	add	r3, ip
 801eaf6:	2227      	movs	r2, #39	; 0x27
 801eaf8:	2138      	movs	r1, #56	; 0x38
 801eafa:	1852      	adds	r2, r2, r1
 801eafc:	19d4      	adds	r4, r2, r7
 801eafe:	4914      	ldr	r1, [pc, #80]	; (801eb50 <BSP_GUI_SaveDataInFlash+0x4c0>)
 801eb00:	2274      	movs	r2, #116	; 0x74
 801eb02:	0018      	movs	r0, r3
 801eb04:	f000 f899 	bl	801ec3a <SaveSettingsInFlash>
 801eb08:	0003      	movs	r3, r0
 801eb0a:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 801eb0c:	f7ec ffca 	bl	800baa4 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801eb10:	b662      	cpsie	i
}
 801eb12:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 801eb14:	2327      	movs	r3, #39	; 0x27
 801eb16:	2238      	movs	r2, #56	; 0x38
 801eb18:	189b      	adds	r3, r3, r2
 801eb1a:	19db      	adds	r3, r3, r7
 801eb1c:	781b      	ldrb	r3, [r3, #0]
}
 801eb1e:	0018      	movs	r0, r3
 801eb20:	46bd      	mov	sp, r7
 801eb22:	b019      	add	sp, #100	; 0x64
 801eb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb26:	46c0      	nop			; (mov r8, r8)
 801eb28:	1fff75e0 	.word	0x1fff75e0
 801eb2c:	0007fe00 	.word	0x0007fe00
 801eb30:	07fff890 	.word	0x07fff890
 801eb34:	200000f8 	.word	0x200000f8
 801eb38:	1fff7500 	.word	0x1fff7500
 801eb3c:	40022020 	.word	0x40022020
 801eb40:	000ffc00 	.word	0x000ffc00
 801eb44:	07fff91c 	.word	0x07fff91c
 801eb48:	20000104 	.word	0x20000104
 801eb4c:	07fff89c 	.word	0x07fff89c
 801eb50:	2000010c 	.word	0x2000010c

0801eb54 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801eb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eb56:	b08f      	sub	sp, #60	; 0x3c
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6178      	str	r0, [r7, #20]
 801eb5c:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 801eb5e:	231f      	movs	r3, #31
 801eb60:	2210      	movs	r2, #16
 801eb62:	189b      	adds	r3, r3, r2
 801eb64:	19db      	adds	r3, r3, r7
 801eb66:	2200      	movs	r2, #0
 801eb68:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 801eb6a:	2300      	movs	r3, #0
 801eb6c:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801eb6e:	2300      	movs	r3, #0
 801eb70:	637b      	str	r3, [r7, #52]	; 0x34
 801eb72:	e04f      	b.n	801ec14 <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 801eb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb76:	009b      	lsls	r3, r3, #2
 801eb78:	693a      	ldr	r2, [r7, #16]
 801eb7a:	18d3      	adds	r3, r2, r3
 801eb7c:	681a      	ldr	r2, [r3, #0]
 801eb7e:	2108      	movs	r1, #8
 801eb80:	2010      	movs	r0, #16
 801eb82:	180b      	adds	r3, r1, r0
 801eb84:	19db      	adds	r3, r3, r7
 801eb86:	601a      	str	r2, [r3, #0]
    index++;
 801eb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb8a:	3301      	adds	r3, #1
 801eb8c:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 801eb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb90:	2b06      	cmp	r3, #6
 801eb92:	d808      	bhi.n	801eba6 <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 801eb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb96:	009b      	lsls	r3, r3, #2
 801eb98:	693a      	ldr	r2, [r7, #16]
 801eb9a:	18d3      	adds	r3, r2, r3
 801eb9c:	681a      	ldr	r2, [r3, #0]
 801eb9e:	180b      	adds	r3, r1, r0
 801eba0:	19db      	adds	r3, r3, r7
 801eba2:	605a      	str	r2, [r3, #4]
 801eba4:	e006      	b.n	801ebb4 <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801eba6:	2308      	movs	r3, #8
 801eba8:	2210      	movs	r2, #16
 801ebaa:	189b      	adds	r3, r3, r2
 801ebac:	19db      	adds	r3, r3, r7
 801ebae:	2201      	movs	r2, #1
 801ebb0:	4252      	negs	r2, r2
 801ebb2:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801ebb4:	2208      	movs	r2, #8
 801ebb6:	2610      	movs	r6, #16
 801ebb8:	1993      	adds	r3, r2, r6
 801ebba:	19db      	adds	r3, r3, r7
 801ebbc:	681b      	ldr	r3, [r3, #0]
 801ebbe:	60bb      	str	r3, [r7, #8]
 801ebc0:	2300      	movs	r3, #0
 801ebc2:	60fb      	str	r3, [r7, #12]
 801ebc4:	1993      	adds	r3, r2, r6
 801ebc6:	19db      	adds	r3, r3, r7
 801ebc8:	685b      	ldr	r3, [r3, #4]
 801ebca:	603b      	str	r3, [r7, #0]
 801ebcc:	2300      	movs	r3, #0
 801ebce:	607b      	str	r3, [r7, #4]
 801ebd0:	683b      	ldr	r3, [r7, #0]
 801ebd2:	001d      	movs	r5, r3
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	001c      	movs	r4, r3
 801ebd8:	68b9      	ldr	r1, [r7, #8]
 801ebda:	68fa      	ldr	r2, [r7, #12]
 801ebdc:	000b      	movs	r3, r1
 801ebde:	4323      	orrs	r3, r4
 801ebe0:	623b      	str	r3, [r7, #32]
 801ebe2:	0013      	movs	r3, r2
 801ebe4:	432b      	orrs	r3, r5
 801ebe6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ebea:	00da      	lsls	r2, r3, #3
 801ebec:	697b      	ldr	r3, [r7, #20]
 801ebee:	18d1      	adds	r1, r2, r3
 801ebf0:	6a3a      	ldr	r2, [r7, #32]
 801ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf4:	2001      	movs	r0, #1
 801ebf6:	f7ec fee3 	bl	800b9c0 <HAL_FLASH_Program>
 801ebfa:	1e03      	subs	r3, r0, #0
 801ebfc:	d004      	beq.n	801ec08 <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 801ebfe:	231f      	movs	r3, #31
 801ec00:	199b      	adds	r3, r3, r6
 801ec02:	19db      	adds	r3, r3, r7
 801ec04:	2202      	movs	r2, #2
 801ec06:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 801ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec0a:	3301      	adds	r3, #1
 801ec0c:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 801ec0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec10:	3301      	adds	r3, #1
 801ec12:	637b      	str	r3, [r7, #52]	; 0x34
 801ec14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec16:	2b06      	cmp	r3, #6
 801ec18:	d806      	bhi.n	801ec28 <SavePDOInFlash+0xd4>
 801ec1a:	231f      	movs	r3, #31
 801ec1c:	2210      	movs	r2, #16
 801ec1e:	189b      	adds	r3, r3, r2
 801ec20:	19db      	adds	r3, r3, r7
 801ec22:	781b      	ldrb	r3, [r3, #0]
 801ec24:	2b00      	cmp	r3, #0
 801ec26:	d0a5      	beq.n	801eb74 <SavePDOInFlash+0x20>
  }
  return status;
 801ec28:	231f      	movs	r3, #31
 801ec2a:	2210      	movs	r2, #16
 801ec2c:	189b      	adds	r3, r3, r2
 801ec2e:	19db      	adds	r3, r3, r7
 801ec30:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801ec32:	0018      	movs	r0, r3
 801ec34:	46bd      	mov	sp, r7
 801ec36:	b00f      	add	sp, #60	; 0x3c
 801ec38:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ec3a <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801ec3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec3c:	b091      	sub	sp, #68	; 0x44
 801ec3e:	af00      	add	r7, sp, #0
 801ec40:	61f8      	str	r0, [r7, #28]
 801ec42:	61b9      	str	r1, [r7, #24]
 801ec44:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 801ec46:	697b      	ldr	r3, [r7, #20]
 801ec48:	089b      	lsrs	r3, r3, #2
 801ec4a:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 801ec4c:	2327      	movs	r3, #39	; 0x27
 801ec4e:	2210      	movs	r2, #16
 801ec50:	189b      	adds	r3, r3, r2
 801ec52:	19db      	adds	r3, r3, r7
 801ec54:	2200      	movs	r2, #0
 801ec56:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 801ec58:	697b      	ldr	r3, [r7, #20]
 801ec5a:	2203      	movs	r2, #3
 801ec5c:	4013      	ands	r3, r2
 801ec5e:	d001      	beq.n	801ec64 <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 801ec60:	2303      	movs	r3, #3
 801ec62:	e065      	b.n	801ed30 <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 801ec64:	2300      	movs	r3, #0
 801ec66:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801ec68:	2300      	movs	r3, #0
 801ec6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ec6c:	e050      	b.n	801ed10 <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 801ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec70:	009b      	lsls	r3, r3, #2
 801ec72:	69ba      	ldr	r2, [r7, #24]
 801ec74:	18d3      	adds	r3, r2, r3
 801ec76:	681a      	ldr	r2, [r3, #0]
 801ec78:	2110      	movs	r1, #16
 801ec7a:	2010      	movs	r0, #16
 801ec7c:	180b      	adds	r3, r1, r0
 801ec7e:	19db      	adds	r3, r3, r7
 801ec80:	601a      	str	r2, [r3, #0]
    index++;
 801ec82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec84:	3301      	adds	r3, #1
 801ec86:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 801ec88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec8c:	429a      	cmp	r2, r3
 801ec8e:	d208      	bcs.n	801eca2 <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 801ec90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec92:	009b      	lsls	r3, r3, #2
 801ec94:	69ba      	ldr	r2, [r7, #24]
 801ec96:	18d3      	adds	r3, r2, r3
 801ec98:	681a      	ldr	r2, [r3, #0]
 801ec9a:	180b      	adds	r3, r1, r0
 801ec9c:	19db      	adds	r3, r3, r7
 801ec9e:	605a      	str	r2, [r3, #4]
 801eca0:	e006      	b.n	801ecb0 <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 801eca2:	2310      	movs	r3, #16
 801eca4:	2210      	movs	r2, #16
 801eca6:	189b      	adds	r3, r3, r2
 801eca8:	19db      	adds	r3, r3, r7
 801ecaa:	2201      	movs	r2, #1
 801ecac:	4252      	negs	r2, r2
 801ecae:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 801ecb0:	2210      	movs	r2, #16
 801ecb2:	2610      	movs	r6, #16
 801ecb4:	1993      	adds	r3, r2, r6
 801ecb6:	19db      	adds	r3, r3, r7
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	60bb      	str	r3, [r7, #8]
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	60fb      	str	r3, [r7, #12]
 801ecc0:	1993      	adds	r3, r2, r6
 801ecc2:	19db      	adds	r3, r3, r7
 801ecc4:	685b      	ldr	r3, [r3, #4]
 801ecc6:	603b      	str	r3, [r7, #0]
 801ecc8:	2300      	movs	r3, #0
 801ecca:	607b      	str	r3, [r7, #4]
 801eccc:	683b      	ldr	r3, [r7, #0]
 801ecce:	001d      	movs	r5, r3
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	001c      	movs	r4, r3
 801ecd4:	68b9      	ldr	r1, [r7, #8]
 801ecd6:	68fa      	ldr	r2, [r7, #12]
 801ecd8:	000b      	movs	r3, r1
 801ecda:	4323      	orrs	r3, r4
 801ecdc:	62bb      	str	r3, [r7, #40]	; 0x28
 801ecde:	0013      	movs	r3, r2
 801ece0:	432b      	orrs	r3, r5
 801ece2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 801ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ece6:	00da      	lsls	r2, r3, #3
 801ece8:	69fb      	ldr	r3, [r7, #28]
 801ecea:	18d1      	adds	r1, r2, r3
 801ecec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ecf0:	2001      	movs	r0, #1
 801ecf2:	f7ec fe65 	bl	800b9c0 <HAL_FLASH_Program>
 801ecf6:	1e03      	subs	r3, r0, #0
 801ecf8:	d004      	beq.n	801ed04 <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 801ecfa:	2327      	movs	r3, #39	; 0x27
 801ecfc:	199b      	adds	r3, r3, r6
 801ecfe:	19db      	adds	r3, r3, r7
 801ed00:	2202      	movs	r2, #2
 801ed02:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 801ed04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ed06:	3301      	adds	r3, #1
 801ed08:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 801ed0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ed0c:	3301      	adds	r3, #1
 801ed0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ed10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed14:	429a      	cmp	r2, r3
 801ed16:	d206      	bcs.n	801ed26 <SaveSettingsInFlash+0xec>
 801ed18:	2327      	movs	r3, #39	; 0x27
 801ed1a:	2210      	movs	r2, #16
 801ed1c:	189b      	adds	r3, r3, r2
 801ed1e:	19db      	adds	r3, r3, r7
 801ed20:	781b      	ldrb	r3, [r3, #0]
 801ed22:	2b00      	cmp	r3, #0
 801ed24:	d0a3      	beq.n	801ec6e <SaveSettingsInFlash+0x34>
  }
  return status;
 801ed26:	2327      	movs	r3, #39	; 0x27
 801ed28:	2210      	movs	r2, #16
 801ed2a:	189b      	adds	r3, r3, r2
 801ed2c:	19db      	adds	r3, r3, r7
 801ed2e:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 801ed30:	0018      	movs	r0, r3
 801ed32:	46bd      	mov	sp, r7
 801ed34:	b011      	add	sp, #68	; 0x44
 801ed36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ed38 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 801ed38:	b580      	push	{r7, lr}
 801ed3a:	b086      	sub	sp, #24
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	6078      	str	r0, [r7, #4]
 801ed40:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801ed46:	230f      	movs	r3, #15
 801ed48:	18fb      	adds	r3, r7, r3
 801ed4a:	2203      	movs	r2, #3
 801ed4c:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ed4e:	2300      	movs	r3, #0
 801ed50:	613b      	str	r3, [r7, #16]
 801ed52:	e00c      	b.n	801ed6e <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 801ed54:	697a      	ldr	r2, [r7, #20]
 801ed56:	693b      	ldr	r3, [r7, #16]
 801ed58:	009b      	lsls	r3, r3, #2
 801ed5a:	6839      	ldr	r1, [r7, #0]
 801ed5c:	18cb      	adds	r3, r1, r3
 801ed5e:	6812      	ldr	r2, [r2, #0]
 801ed60:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 801ed62:	697b      	ldr	r3, [r7, #20]
 801ed64:	3304      	adds	r3, #4
 801ed66:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 801ed68:	693b      	ldr	r3, [r7, #16]
 801ed6a:	3301      	adds	r3, #1
 801ed6c:	613b      	str	r3, [r7, #16]
 801ed6e:	693b      	ldr	r3, [r7, #16]
 801ed70:	2b06      	cmp	r3, #6
 801ed72:	d9ef      	bls.n	801ed54 <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 801ed74:	210f      	movs	r1, #15
 801ed76:	187b      	adds	r3, r7, r1
 801ed78:	2200      	movs	r2, #0
 801ed7a:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801ed7c:	187b      	adds	r3, r7, r1
 801ed7e:	781b      	ldrb	r3, [r3, #0]
}
 801ed80:	0018      	movs	r0, r3
 801ed82:	46bd      	mov	sp, r7
 801ed84:	b006      	add	sp, #24
 801ed86:	bd80      	pop	{r7, pc}

0801ed88 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 801ed88:	b590      	push	{r4, r7, lr}
 801ed8a:	b087      	sub	sp, #28
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	60f8      	str	r0, [r7, #12]
 801ed90:	60b9      	str	r1, [r7, #8]
 801ed92:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 801ed94:	68fb      	ldr	r3, [r7, #12]
 801ed96:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 801ed98:	2413      	movs	r4, #19
 801ed9a:	193b      	adds	r3, r7, r4
 801ed9c:	2203      	movs	r2, #3
 801ed9e:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 801eda0:	6979      	ldr	r1, [r7, #20]
 801eda2:	687a      	ldr	r2, [r7, #4]
 801eda4:	68bb      	ldr	r3, [r7, #8]
 801eda6:	0018      	movs	r0, r3
 801eda8:	f004 fce8 	bl	802377c <memcpy>
    _status = GUI_OK;
 801edac:	193b      	adds	r3, r7, r4
 801edae:	2200      	movs	r2, #0
 801edb0:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 801edb2:	193b      	adds	r3, r7, r4
 801edb4:	781b      	ldrb	r3, [r3, #0]
}
 801edb6:	0018      	movs	r0, r3
 801edb8:	46bd      	mov	sp, r7
 801edba:	b007      	add	sp, #28
 801edbc:	bd90      	pop	{r4, r7, pc}

0801edbe <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 801edbe:	b580      	push	{r7, lr}
 801edc0:	b084      	sub	sp, #16
 801edc2:	af00      	add	r7, sp, #0
 801edc4:	60f8      	str	r0, [r7, #12]
 801edc6:	0008      	movs	r0, r1
 801edc8:	0011      	movs	r1, r2
 801edca:	607b      	str	r3, [r7, #4]
 801edcc:	230b      	movs	r3, #11
 801edce:	18fb      	adds	r3, r7, r3
 801edd0:	1c02      	adds	r2, r0, #0
 801edd2:	701a      	strb	r2, [r3, #0]
 801edd4:	2308      	movs	r3, #8
 801edd6:	18fb      	adds	r3, r7, r3
 801edd8:	1c0a      	adds	r2, r1, #0
 801edda:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d101      	bne.n	801ede6 <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 801ede2:	23ff      	movs	r3, #255	; 0xff
 801ede4:	e04a      	b.n	801ee7c <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 801ede6:	2308      	movs	r3, #8
 801ede8:	18fb      	adds	r3, r7, r3
 801edea:	881b      	ldrh	r3, [r3, #0]
 801edec:	2b0a      	cmp	r3, #10
 801edee:	d801      	bhi.n	801edf4 <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 801edf0:	23ff      	movs	r3, #255	; 0xff
 801edf2:	e043      	b.n	801ee7c <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 801edf4:	68fb      	ldr	r3, [r7, #12]
 801edf6:	687a      	ldr	r2, [r7, #4]
 801edf8:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 801edfa:	68fb      	ldr	r3, [r7, #12]
 801edfc:	2208      	movs	r2, #8
 801edfe:	18ba      	adds	r2, r7, r2
 801ee00:	8812      	ldrh	r2, [r2, #0]
 801ee02:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 801ee04:	68fb      	ldr	r3, [r7, #12]
 801ee06:	681b      	ldr	r3, [r3, #0]
 801ee08:	22fd      	movs	r2, #253	; 0xfd
 801ee0a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 801ee0c:	68fb      	ldr	r3, [r7, #12]
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	3301      	adds	r3, #1
 801ee12:	22fd      	movs	r2, #253	; 0xfd
 801ee14:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	3302      	adds	r3, #2
 801ee1c:	22fd      	movs	r2, #253	; 0xfd
 801ee1e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	3303      	adds	r3, #3
 801ee26:	22fd      	movs	r2, #253	; 0xfd
 801ee28:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 801ee2a:	68fb      	ldr	r3, [r7, #12]
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	3304      	adds	r3, #4
 801ee30:	220b      	movs	r2, #11
 801ee32:	18ba      	adds	r2, r7, r2
 801ee34:	7812      	ldrb	r2, [r2, #0]
 801ee36:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 801ee38:	68fb      	ldr	r3, [r7, #12]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	3305      	adds	r3, #5
 801ee3e:	2200      	movs	r2, #0
 801ee40:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	3306      	adds	r3, #6
 801ee48:	2200      	movs	r2, #0
 801ee4a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	3307      	adds	r3, #7
 801ee52:	22a5      	movs	r2, #165	; 0xa5
 801ee54:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 801ee56:	68fb      	ldr	r3, [r7, #12]
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	3308      	adds	r3, #8
 801ee5c:	22a5      	movs	r2, #165	; 0xa5
 801ee5e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 801ee60:	68fb      	ldr	r3, [r7, #12]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	3309      	adds	r3, #9
 801ee66:	22a5      	movs	r2, #165	; 0xa5
 801ee68:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	330a      	adds	r3, #10
 801ee70:	22a5      	movs	r2, #165	; 0xa5
 801ee72:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	2207      	movs	r2, #7
 801ee78:	80da      	strh	r2, [r3, #6]

  return 0;
 801ee7a:	2300      	movs	r3, #0
}
 801ee7c:	0018      	movs	r0, r3
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	b004      	add	sp, #16
 801ee82:	bd80      	pop	{r7, pc}

0801ee84 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 801ee84:	b580      	push	{r7, lr}
 801ee86:	b086      	sub	sp, #24
 801ee88:	af00      	add	r7, sp, #0
 801ee8a:	60f8      	str	r0, [r7, #12]
 801ee8c:	0008      	movs	r0, r1
 801ee8e:	0011      	movs	r1, r2
 801ee90:	607b      	str	r3, [r7, #4]
 801ee92:	230b      	movs	r3, #11
 801ee94:	18fb      	adds	r3, r7, r3
 801ee96:	1c02      	adds	r2, r0, #0
 801ee98:	701a      	strb	r2, [r3, #0]
 801ee9a:	2308      	movs	r3, #8
 801ee9c:	18fb      	adds	r3, r7, r3
 801ee9e:	1c0a      	adds	r2, r1, #0
 801eea0:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	68fa      	ldr	r2, [r7, #12]
 801eea8:	88d2      	ldrh	r2, [r2, #6]
 801eeaa:	189b      	adds	r3, r3, r2
 801eeac:	781b      	ldrb	r3, [r3, #0]
 801eeae:	2ba5      	cmp	r3, #165	; 0xa5
 801eeb0:	d001      	beq.n	801eeb6 <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801eeb2:	4b5a      	ldr	r3, [pc, #360]	; (801f01c <TLV_add+0x198>)
 801eeb4:	e0ae      	b.n	801f014 <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	88db      	ldrh	r3, [r3, #6]
 801eeba:	001a      	movs	r2, r3
 801eebc:	2308      	movs	r3, #8
 801eebe:	18fb      	adds	r3, r7, r3
 801eec0:	881b      	ldrh	r3, [r3, #0]
 801eec2:	18d3      	adds	r3, r2, r3
 801eec4:	3307      	adds	r3, #7
 801eec6:	68fa      	ldr	r2, [r7, #12]
 801eec8:	8892      	ldrh	r2, [r2, #4]
 801eeca:	4293      	cmp	r3, r2
 801eecc:	d901      	bls.n	801eed2 <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801eece:	4b53      	ldr	r3, [pc, #332]	; (801f01c <TLV_add+0x198>)
 801eed0:	e0a0      	b.n	801f014 <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	681b      	ldr	r3, [r3, #0]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d101      	bne.n	801eede <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801eeda:	4b50      	ldr	r3, [pc, #320]	; (801f01c <TLV_add+0x198>)
 801eedc:	e09a      	b.n	801f014 <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801eede:	68fb      	ldr	r3, [r7, #12]
 801eee0:	88db      	ldrh	r3, [r3, #6]
 801eee2:	4a4e      	ldr	r2, [pc, #312]	; (801f01c <TLV_add+0x198>)
 801eee4:	4293      	cmp	r3, r2
 801eee6:	d101      	bne.n	801eeec <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801eee8:	4b4c      	ldr	r3, [pc, #304]	; (801f01c <TLV_add+0x198>)
 801eeea:	e093      	b.n	801f014 <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 801eeec:	68fb      	ldr	r3, [r7, #12]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	68fa      	ldr	r2, [r7, #12]
 801eef2:	88d2      	ldrh	r2, [r2, #6]
 801eef4:	189b      	adds	r3, r3, r2
 801eef6:	220b      	movs	r2, #11
 801eef8:	18ba      	adds	r2, r7, r2
 801eefa:	7812      	ldrb	r2, [r2, #0]
 801eefc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 801eefe:	68fb      	ldr	r3, [r7, #12]
 801ef00:	88db      	ldrh	r3, [r3, #6]
 801ef02:	3301      	adds	r3, #1
 801ef04:	b29a      	uxth	r2, r3
 801ef06:	68fb      	ldr	r3, [r7, #12]
 801ef08:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 801ef0a:	68fb      	ldr	r3, [r7, #12]
 801ef0c:	88da      	ldrh	r2, [r3, #6]
 801ef0e:	68fb      	ldr	r3, [r7, #12]
 801ef10:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 801ef12:	2008      	movs	r0, #8
 801ef14:	183b      	adds	r3, r7, r0
 801ef16:	881b      	ldrh	r3, [r3, #0]
 801ef18:	0a1b      	lsrs	r3, r3, #8
 801ef1a:	b299      	uxth	r1, r3
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	68fa      	ldr	r2, [r7, #12]
 801ef22:	88d2      	ldrh	r2, [r2, #6]
 801ef24:	189b      	adds	r3, r3, r2
 801ef26:	b2ca      	uxtb	r2, r1
 801ef28:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 801ef2a:	68fb      	ldr	r3, [r7, #12]
 801ef2c:	681a      	ldr	r2, [r3, #0]
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	88db      	ldrh	r3, [r3, #6]
 801ef32:	3301      	adds	r3, #1
 801ef34:	18d3      	adds	r3, r2, r3
 801ef36:	183a      	adds	r2, r7, r0
 801ef38:	8812      	ldrh	r2, [r2, #0]
 801ef3a:	b2d2      	uxtb	r2, r2
 801ef3c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	88db      	ldrh	r3, [r3, #6]
 801ef42:	3302      	adds	r3, #2
 801ef44:	b29a      	uxth	r2, r3
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801ef4a:	2300      	movs	r3, #0
 801ef4c:	617b      	str	r3, [r7, #20]
 801ef4e:	e012      	b.n	801ef76 <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801ef50:	687a      	ldr	r2, [r7, #4]
 801ef52:	697b      	ldr	r3, [r7, #20]
 801ef54:	18d2      	adds	r2, r2, r3
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	681b      	ldr	r3, [r3, #0]
 801ef5a:	68f9      	ldr	r1, [r7, #12]
 801ef5c:	88c9      	ldrh	r1, [r1, #6]
 801ef5e:	185b      	adds	r3, r3, r1
 801ef60:	7812      	ldrb	r2, [r2, #0]
 801ef62:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	88db      	ldrh	r3, [r3, #6]
 801ef68:	3301      	adds	r3, #1
 801ef6a:	b29a      	uxth	r2, r3
 801ef6c:	68fb      	ldr	r3, [r7, #12]
 801ef6e:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 801ef70:	697b      	ldr	r3, [r7, #20]
 801ef72:	3301      	adds	r3, #1
 801ef74:	617b      	str	r3, [r7, #20]
 801ef76:	2108      	movs	r1, #8
 801ef78:	187b      	adds	r3, r7, r1
 801ef7a:	881b      	ldrh	r3, [r3, #0]
 801ef7c:	697a      	ldr	r2, [r7, #20]
 801ef7e:	429a      	cmp	r2, r3
 801ef80:	d3e6      	bcc.n	801ef50 <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	68fa      	ldr	r2, [r7, #12]
 801ef88:	88d2      	ldrh	r2, [r2, #6]
 801ef8a:	189b      	adds	r3, r3, r2
 801ef8c:	22a5      	movs	r2, #165	; 0xa5
 801ef8e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801ef90:	68fb      	ldr	r3, [r7, #12]
 801ef92:	681a      	ldr	r2, [r3, #0]
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	88db      	ldrh	r3, [r3, #6]
 801ef98:	3301      	adds	r3, #1
 801ef9a:	18d3      	adds	r3, r2, r3
 801ef9c:	22a5      	movs	r2, #165	; 0xa5
 801ef9e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	681a      	ldr	r2, [r3, #0]
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	88db      	ldrh	r3, [r3, #6]
 801efa8:	3302      	adds	r3, #2
 801efaa:	18d3      	adds	r3, r2, r3
 801efac:	22a5      	movs	r2, #165	; 0xa5
 801efae:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	681a      	ldr	r2, [r3, #0]
 801efb4:	68fb      	ldr	r3, [r7, #12]
 801efb6:	88db      	ldrh	r3, [r3, #6]
 801efb8:	3303      	adds	r3, #3
 801efba:	18d3      	adds	r3, r2, r3
 801efbc:	22a5      	movs	r2, #165	; 0xa5
 801efbe:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 801efc0:	68fb      	ldr	r3, [r7, #12]
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	3305      	adds	r3, #5
 801efc6:	781b      	ldrb	r3, [r3, #0]
 801efc8:	b29b      	uxth	r3, r3
 801efca:	021b      	lsls	r3, r3, #8
 801efcc:	b29a      	uxth	r2, r3
 801efce:	68fb      	ldr	r3, [r7, #12]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	3306      	adds	r3, #6
 801efd4:	781b      	ldrb	r3, [r3, #0]
 801efd6:	b29b      	uxth	r3, r3
 801efd8:	18d3      	adds	r3, r2, r3
 801efda:	b29a      	uxth	r2, r3
 801efdc:	187b      	adds	r3, r7, r1
 801efde:	881b      	ldrh	r3, [r3, #0]
 801efe0:	18d3      	adds	r3, r2, r3
 801efe2:	b29a      	uxth	r2, r3
 801efe4:	2012      	movs	r0, #18
 801efe6:	183b      	adds	r3, r7, r0
 801efe8:	3203      	adds	r2, #3
 801efea:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801efec:	183b      	adds	r3, r7, r0
 801efee:	881b      	ldrh	r3, [r3, #0]
 801eff0:	0a1b      	lsrs	r3, r3, #8
 801eff2:	b29a      	uxth	r2, r3
 801eff4:	68fb      	ldr	r3, [r7, #12]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	3305      	adds	r3, #5
 801effa:	b2d2      	uxtb	r2, r2
 801effc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 801effe:	68fb      	ldr	r3, [r7, #12]
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	3306      	adds	r3, #6
 801f004:	183a      	adds	r2, r7, r0
 801f006:	8812      	ldrh	r2, [r2, #0]
 801f008:	b2d2      	uxtb	r2, r2
 801f00a:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 801f00c:	187b      	adds	r3, r7, r1
 801f00e:	881b      	ldrh	r3, [r3, #0]
 801f010:	3303      	adds	r3, #3
 801f012:	b29b      	uxth	r3, r3
}
 801f014:	0018      	movs	r0, r3
 801f016:	46bd      	mov	sp, r7
 801f018:	b006      	add	sp, #24
 801f01a:	bd80      	pop	{r7, pc}
 801f01c:	0000ffff 	.word	0x0000ffff

0801f020 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b086      	sub	sp, #24
 801f024:	af00      	add	r7, sp, #0
 801f026:	60f8      	str	r0, [r7, #12]
 801f028:	60b9      	str	r1, [r7, #8]
 801f02a:	1dbb      	adds	r3, r7, #6
 801f02c:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	68fa      	ldr	r2, [r7, #12]
 801f034:	88d2      	ldrh	r2, [r2, #6]
 801f036:	189b      	adds	r3, r3, r2
 801f038:	781b      	ldrb	r3, [r3, #0]
 801f03a:	2ba5      	cmp	r3, #165	; 0xa5
 801f03c:	d001      	beq.n	801f042 <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 801f03e:	4b41      	ldr	r3, [pc, #260]	; (801f144 <TLV_addValue+0x124>)
 801f040:	e07c      	b.n	801f13c <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 801f042:	68fb      	ldr	r3, [r7, #12]
 801f044:	88db      	ldrh	r3, [r3, #6]
 801f046:	001a      	movs	r2, r3
 801f048:	1dbb      	adds	r3, r7, #6
 801f04a:	881b      	ldrh	r3, [r3, #0]
 801f04c:	18d3      	adds	r3, r2, r3
 801f04e:	3307      	adds	r3, #7
 801f050:	68fa      	ldr	r2, [r7, #12]
 801f052:	8892      	ldrh	r2, [r2, #4]
 801f054:	4293      	cmp	r3, r2
 801f056:	d901      	bls.n	801f05c <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801f058:	4b3a      	ldr	r3, [pc, #232]	; (801f144 <TLV_addValue+0x124>)
 801f05a:	e06f      	b.n	801f13c <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 801f05c:	68fb      	ldr	r3, [r7, #12]
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d101      	bne.n	801f068 <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801f064:	4b37      	ldr	r3, [pc, #220]	; (801f144 <TLV_addValue+0x124>)
 801f066:	e069      	b.n	801f13c <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801f068:	68fb      	ldr	r3, [r7, #12]
 801f06a:	88db      	ldrh	r3, [r3, #6]
 801f06c:	4a35      	ldr	r2, [pc, #212]	; (801f144 <TLV_addValue+0x124>)
 801f06e:	4293      	cmp	r3, r2
 801f070:	d101      	bne.n	801f076 <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 801f072:	4b34      	ldr	r3, [pc, #208]	; (801f144 <TLV_addValue+0x124>)
 801f074:	e062      	b.n	801f13c <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801f076:	2300      	movs	r3, #0
 801f078:	617b      	str	r3, [r7, #20]
 801f07a:	e012      	b.n	801f0a2 <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 801f07c:	68ba      	ldr	r2, [r7, #8]
 801f07e:	697b      	ldr	r3, [r7, #20]
 801f080:	18d2      	adds	r2, r2, r3
 801f082:	68fb      	ldr	r3, [r7, #12]
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	68f9      	ldr	r1, [r7, #12]
 801f088:	88c9      	ldrh	r1, [r1, #6]
 801f08a:	185b      	adds	r3, r3, r1
 801f08c:	7812      	ldrb	r2, [r2, #0]
 801f08e:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	88db      	ldrh	r3, [r3, #6]
 801f094:	3301      	adds	r3, #1
 801f096:	b29a      	uxth	r2, r3
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 801f09c:	697b      	ldr	r3, [r7, #20]
 801f09e:	3301      	adds	r3, #1
 801f0a0:	617b      	str	r3, [r7, #20]
 801f0a2:	1dbb      	adds	r3, r7, #6
 801f0a4:	881b      	ldrh	r3, [r3, #0]
 801f0a6:	697a      	ldr	r2, [r7, #20]
 801f0a8:	429a      	cmp	r2, r3
 801f0aa:	d3e7      	bcc.n	801f07c <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	68fa      	ldr	r2, [r7, #12]
 801f0b2:	88d2      	ldrh	r2, [r2, #6]
 801f0b4:	189b      	adds	r3, r3, r2
 801f0b6:	22a5      	movs	r2, #165	; 0xa5
 801f0b8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 801f0ba:	68fb      	ldr	r3, [r7, #12]
 801f0bc:	681a      	ldr	r2, [r3, #0]
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	88db      	ldrh	r3, [r3, #6]
 801f0c2:	3301      	adds	r3, #1
 801f0c4:	18d3      	adds	r3, r2, r3
 801f0c6:	22a5      	movs	r2, #165	; 0xa5
 801f0c8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	681a      	ldr	r2, [r3, #0]
 801f0ce:	68fb      	ldr	r3, [r7, #12]
 801f0d0:	88db      	ldrh	r3, [r3, #6]
 801f0d2:	3302      	adds	r3, #2
 801f0d4:	18d3      	adds	r3, r2, r3
 801f0d6:	22a5      	movs	r2, #165	; 0xa5
 801f0d8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	681a      	ldr	r2, [r3, #0]
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	88db      	ldrh	r3, [r3, #6]
 801f0e2:	3303      	adds	r3, #3
 801f0e4:	18d3      	adds	r3, r2, r3
 801f0e6:	22a5      	movs	r2, #165	; 0xa5
 801f0e8:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	3305      	adds	r3, #5
 801f0f0:	781b      	ldrb	r3, [r3, #0]
 801f0f2:	b29b      	uxth	r3, r3
 801f0f4:	021b      	lsls	r3, r3, #8
 801f0f6:	b29a      	uxth	r2, r3
 801f0f8:	68fb      	ldr	r3, [r7, #12]
 801f0fa:	681b      	ldr	r3, [r3, #0]
 801f0fc:	3306      	adds	r3, #6
 801f0fe:	781b      	ldrb	r3, [r3, #0]
 801f100:	b29b      	uxth	r3, r3
 801f102:	18d3      	adds	r3, r2, r3
 801f104:	b299      	uxth	r1, r3
 801f106:	2012      	movs	r0, #18
 801f108:	183b      	adds	r3, r7, r0
 801f10a:	1dba      	adds	r2, r7, #6
 801f10c:	8812      	ldrh	r2, [r2, #0]
 801f10e:	188a      	adds	r2, r1, r2
 801f110:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 801f112:	0001      	movs	r1, r0
 801f114:	187b      	adds	r3, r7, r1
 801f116:	881b      	ldrh	r3, [r3, #0]
 801f118:	0a1b      	lsrs	r3, r3, #8
 801f11a:	b29a      	uxth	r2, r3
 801f11c:	68fb      	ldr	r3, [r7, #12]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	3305      	adds	r3, #5
 801f122:	b2d2      	uxtb	r2, r2
 801f124:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 801f126:	68fb      	ldr	r3, [r7, #12]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	3306      	adds	r3, #6
 801f12c:	187a      	adds	r2, r7, r1
 801f12e:	8812      	ldrh	r2, [r2, #0]
 801f130:	b2d2      	uxtb	r2, r2
 801f132:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 801f134:	1dbb      	adds	r3, r7, #6
 801f136:	881b      	ldrh	r3, [r3, #0]
 801f138:	3303      	adds	r3, #3
 801f13a:	b29b      	uxth	r3, r3
}
 801f13c:	0018      	movs	r0, r3
 801f13e:	46bd      	mov	sp, r7
 801f140:	b006      	add	sp, #24
 801f142:	bd80      	pop	{r7, pc}
 801f144:	0000ffff 	.word	0x0000ffff

0801f148 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 801f148:	b580      	push	{r7, lr}
 801f14a:	b082      	sub	sp, #8
 801f14c:	af00      	add	r7, sp, #0
 801f14e:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	2200      	movs	r2, #0
 801f154:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	2201      	movs	r2, #1
 801f15a:	4252      	negs	r2, r2
 801f15c:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	2200      	movs	r2, #0
 801f162:	809a      	strh	r2, [r3, #4]
}
 801f164:	46c0      	nop			; (mov r8, r8)
 801f166:	46bd      	mov	sp, r7
 801f168:	b002      	add	sp, #8
 801f16a:	bd80      	pop	{r7, pc}

0801f16c <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 801f16c:	b580      	push	{r7, lr}
 801f16e:	b082      	sub	sp, #8
 801f170:	af00      	add	r7, sp, #0
 801f172:	6078      	str	r0, [r7, #4]
 801f174:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 801f176:	683b      	ldr	r3, [r7, #0]
 801f178:	2b00      	cmp	r3, #0
 801f17a:	d101      	bne.n	801f180 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 801f17c:	23ff      	movs	r3, #255	; 0xff
 801f17e:	e01d      	b.n	801f1bc <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 801f180:	683b      	ldr	r3, [r7, #0]
 801f182:	781b      	ldrb	r3, [r3, #0]
 801f184:	2bfd      	cmp	r3, #253	; 0xfd
 801f186:	d10e      	bne.n	801f1a6 <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 801f188:	683b      	ldr	r3, [r7, #0]
 801f18a:	3301      	adds	r3, #1
 801f18c:	781b      	ldrb	r3, [r3, #0]
 801f18e:	2bfd      	cmp	r3, #253	; 0xfd
 801f190:	d109      	bne.n	801f1a6 <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 801f192:	683b      	ldr	r3, [r7, #0]
 801f194:	3302      	adds	r3, #2
 801f196:	781b      	ldrb	r3, [r3, #0]
 801f198:	2bfd      	cmp	r3, #253	; 0xfd
 801f19a:	d104      	bne.n	801f1a6 <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 801f19c:	683b      	ldr	r3, [r7, #0]
 801f19e:	3303      	adds	r3, #3
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	2bfd      	cmp	r3, #253	; 0xfd
 801f1a4:	d001      	beq.n	801f1aa <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 801f1a6:	23ff      	movs	r3, #255	; 0xff
 801f1a8:	e008      	b.n	801f1bc <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	683a      	ldr	r2, [r7, #0]
 801f1ae:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	2207      	movs	r2, #7
 801f1b4:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	889b      	ldrh	r3, [r3, #4]
 801f1ba:	b2db      	uxtb	r3, r3
}
 801f1bc:	0018      	movs	r0, r3
 801f1be:	46bd      	mov	sp, r7
 801f1c0:	b002      	add	sp, #8
 801f1c2:	bd80      	pop	{r7, pc}

0801f1c4 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b084      	sub	sp, #16
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	60f8      	str	r0, [r7, #12]
 801f1cc:	60b9      	str	r1, [r7, #8]
 801f1ce:	607a      	str	r2, [r7, #4]
 801f1d0:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d101      	bne.n	801f1de <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801f1da:	23ff      	movs	r3, #255	; 0xff
 801f1dc:	e048      	b.n	801f270 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	889b      	ldrh	r3, [r3, #4]
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d101      	bne.n	801f1ea <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 801f1e6:	23ff      	movs	r3, #255	; 0xff
 801f1e8:	e042      	b.n	801f270 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801f1ea:	68fb      	ldr	r3, [r7, #12]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	68fa      	ldr	r2, [r7, #12]
 801f1f0:	8892      	ldrh	r2, [r2, #4]
 801f1f2:	189b      	adds	r3, r3, r2
 801f1f4:	781b      	ldrb	r3, [r3, #0]
 801f1f6:	2ba5      	cmp	r3, #165	; 0xa5
 801f1f8:	d101      	bne.n	801f1fe <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801f1fa:	23ff      	movs	r3, #255	; 0xff
 801f1fc:	e038      	b.n	801f270 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 801f1fe:	68fb      	ldr	r3, [r7, #12]
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	68fa      	ldr	r2, [r7, #12]
 801f204:	8892      	ldrh	r2, [r2, #4]
 801f206:	189b      	adds	r3, r3, r2
 801f208:	781a      	ldrb	r2, [r3, #0]
 801f20a:	68bb      	ldr	r3, [r7, #8]
 801f20c:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	889b      	ldrh	r3, [r3, #4]
 801f212:	3301      	adds	r3, #1
 801f214:	b29a      	uxth	r2, r3
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801f21a:	68fb      	ldr	r3, [r7, #12]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	68fa      	ldr	r2, [r7, #12]
 801f220:	8892      	ldrh	r2, [r2, #4]
 801f222:	189b      	adds	r3, r3, r2
 801f224:	781b      	ldrb	r3, [r3, #0]
 801f226:	b29b      	uxth	r3, r3
 801f228:	021b      	lsls	r3, r3, #8
 801f22a:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 801f22c:	68fb      	ldr	r3, [r7, #12]
 801f22e:	6819      	ldr	r1, [r3, #0]
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	889b      	ldrh	r3, [r3, #4]
 801f234:	3301      	adds	r3, #1
 801f236:	18cb      	adds	r3, r1, r3
 801f238:	781b      	ldrb	r3, [r3, #0]
 801f23a:	b29b      	uxth	r3, r3
 801f23c:	18d3      	adds	r3, r2, r3
 801f23e:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	889b      	ldrh	r3, [r3, #4]
 801f248:	3302      	adds	r3, #2
 801f24a:	b29a      	uxth	r2, r3
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	68fa      	ldr	r2, [r7, #12]
 801f256:	8892      	ldrh	r2, [r2, #4]
 801f258:	189a      	adds	r2, r3, r2
 801f25a:	683b      	ldr	r3, [r7, #0]
 801f25c:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	889a      	ldrh	r2, [r3, #4]
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	881b      	ldrh	r3, [r3, #0]
 801f266:	18d3      	adds	r3, r2, r3
 801f268:	b29a      	uxth	r2, r3
 801f26a:	68fb      	ldr	r3, [r7, #12]
 801f26c:	809a      	strh	r2, [r3, #4]

  return 0;
 801f26e:	2300      	movs	r3, #0
}
 801f270:	0018      	movs	r0, r3
 801f272:	46bd      	mov	sp, r7
 801f274:	b004      	add	sp, #16
 801f276:	bd80      	pop	{r7, pc}

0801f278 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b082      	sub	sp, #8
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	2200      	movs	r2, #0
 801f284:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	2200      	movs	r2, #0
 801f28a:	809a      	strh	r2, [r3, #4]
}
 801f28c:	46c0      	nop			; (mov r8, r8)
 801f28e:	46bd      	mov	sp, r7
 801f290:	b002      	add	sp, #8
 801f292:	bd80      	pop	{r7, pc}

0801f294 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 801f294:	b580      	push	{r7, lr}
 801f296:	b084      	sub	sp, #16
 801f298:	af00      	add	r7, sp, #0
 801f29a:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 801f29c:	230f      	movs	r3, #15
 801f29e:	18fb      	adds	r3, r7, r3
 801f2a0:	2200      	movs	r2, #0
 801f2a2:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 801f2a4:	e005      	b.n	801f2b2 <TLV_get_string_length+0x1e>
  {
    start++;
 801f2a6:	210f      	movs	r1, #15
 801f2a8:	187b      	adds	r3, r7, r1
 801f2aa:	781a      	ldrb	r2, [r3, #0]
 801f2ac:	187b      	adds	r3, r7, r1
 801f2ae:	3201      	adds	r2, #1
 801f2b0:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 801f2b2:	210f      	movs	r1, #15
 801f2b4:	187b      	adds	r3, r7, r1
 801f2b6:	781b      	ldrb	r3, [r3, #0]
 801f2b8:	687a      	ldr	r2, [r7, #4]
 801f2ba:	18d3      	adds	r3, r2, r3
 801f2bc:	781b      	ldrb	r3, [r3, #0]
 801f2be:	2bfd      	cmp	r3, #253	; 0xfd
 801f2c0:	d0f1      	beq.n	801f2a6 <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 801f2c2:	187b      	adds	r3, r7, r1
 801f2c4:	781b      	ldrb	r3, [r3, #0]
 801f2c6:	3301      	adds	r3, #1
 801f2c8:	687a      	ldr	r2, [r7, #4]
 801f2ca:	18d3      	adds	r3, r2, r3
 801f2cc:	781b      	ldrb	r3, [r3, #0]
 801f2ce:	021b      	lsls	r3, r3, #8
 801f2d0:	b21a      	sxth	r2, r3
 801f2d2:	187b      	adds	r3, r7, r1
 801f2d4:	781b      	ldrb	r3, [r3, #0]
 801f2d6:	3302      	adds	r3, #2
 801f2d8:	6879      	ldr	r1, [r7, #4]
 801f2da:	18cb      	adds	r3, r1, r3
 801f2dc:	781b      	ldrb	r3, [r3, #0]
 801f2de:	b21b      	sxth	r3, r3
 801f2e0:	4313      	orrs	r3, r2
 801f2e2:	b21a      	sxth	r2, r3
 801f2e4:	210c      	movs	r1, #12
 801f2e6:	187b      	adds	r3, r7, r1
 801f2e8:	801a      	strh	r2, [r3, #0]
  length += 3U;
 801f2ea:	187b      	adds	r3, r7, r1
 801f2ec:	187a      	adds	r2, r7, r1
 801f2ee:	8812      	ldrh	r2, [r2, #0]
 801f2f0:	3203      	adds	r2, #3
 801f2f2:	801a      	strh	r2, [r3, #0]

  return length;
 801f2f4:	187b      	adds	r3, r7, r1
 801f2f6:	881b      	ldrh	r3, [r3, #0]
}
 801f2f8:	0018      	movs	r0, r3
 801f2fa:	46bd      	mov	sp, r7
 801f2fc:	b004      	add	sp, #16
 801f2fe:	bd80      	pop	{r7, pc}

0801f300 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 801f300:	b580      	push	{r7, lr}
 801f302:	b086      	sub	sp, #24
 801f304:	af00      	add	r7, sp, #0
 801f306:	60f8      	str	r0, [r7, #12]
 801f308:	60b9      	str	r1, [r7, #8]
 801f30a:	607a      	str	r2, [r7, #4]
 801f30c:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 801f30e:	2317      	movs	r3, #23
 801f310:	18fb      	adds	r3, r7, r3
 801f312:	2201      	movs	r2, #1
 801f314:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 801f316:	f7fe ff95 	bl	801e244 <BSP_GUI_LoadDataFromFlash>
 801f31a:	0003      	movs	r3, r0
 801f31c:	1e5a      	subs	r2, r3, #1
 801f31e:	4193      	sbcs	r3, r2
 801f320:	b2db      	uxtb	r3, r3
 801f322:	001a      	movs	r2, r3
 801f324:	4b3f      	ldr	r3, [pc, #252]	; (801f424 <GUI_Init+0x124>)
 801f326:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 801f328:	4b3f      	ldr	r3, [pc, #252]	; (801f428 <GUI_Init+0x128>)
 801f32a:	799b      	ldrb	r3, [r3, #6]
 801f32c:	2b00      	cmp	r3, #0
 801f32e:	d003      	beq.n	801f338 <GUI_Init+0x38>
 801f330:	4b3d      	ldr	r3, [pc, #244]	; (801f428 <GUI_Init+0x128>)
 801f332:	79db      	ldrb	r3, [r3, #7]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d115      	bne.n	801f364 <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 801f338:	4b3c      	ldr	r3, [pc, #240]	; (801f42c <GUI_Init+0x12c>)
 801f33a:	226b      	movs	r2, #107	; 0x6b
 801f33c:	189b      	adds	r3, r3, r2
 801f33e:	785a      	ldrb	r2, [r3, #1]
 801f340:	2101      	movs	r1, #1
 801f342:	400a      	ands	r2, r1
 801f344:	1c11      	adds	r1, r2, #0
 801f346:	2260      	movs	r2, #96	; 0x60
 801f348:	4252      	negs	r2, r2
 801f34a:	430a      	orrs	r2, r1
 801f34c:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 801f34e:	4b37      	ldr	r3, [pc, #220]	; (801f42c <GUI_Init+0x12c>)
 801f350:	226b      	movs	r2, #107	; 0x6b
 801f352:	189b      	adds	r3, r3, r2
 801f354:	789a      	ldrb	r2, [r3, #2]
 801f356:	217f      	movs	r1, #127	; 0x7f
 801f358:	438a      	bics	r2, r1
 801f35a:	1c11      	adds	r1, r2, #0
 801f35c:	2232      	movs	r2, #50	; 0x32
 801f35e:	430a      	orrs	r2, r1
 801f360:	709a      	strb	r2, [r3, #2]
 801f362:	e040      	b.n	801f3e6 <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f364:	4b30      	ldr	r3, [pc, #192]	; (801f428 <GUI_Init+0x128>)
 801f366:	79db      	ldrb	r3, [r3, #7]
 801f368:	001a      	movs	r2, r3
 801f36a:	2364      	movs	r3, #100	; 0x64
 801f36c:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801f36e:	4b2e      	ldr	r3, [pc, #184]	; (801f428 <GUI_Init+0x128>)
 801f370:	79db      	ldrb	r3, [r3, #7]
 801f372:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 801f374:	4b2c      	ldr	r3, [pc, #176]	; (801f428 <GUI_Init+0x128>)
 801f376:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801f378:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f37a:	0019      	movs	r1, r3
 801f37c:	0010      	movs	r0, r2
 801f37e:	f7e6 ff37 	bl	80061f0 <__udivsi3>
 801f382:	0003      	movs	r3, r0
 801f384:	1c1a      	adds	r2, r3, #0
 801f386:	237f      	movs	r3, #127	; 0x7f
 801f388:	4013      	ands	r3, r2
 801f38a:	b2da      	uxtb	r2, r3
 801f38c:	4b27      	ldr	r3, [pc, #156]	; (801f42c <GUI_Init+0x12c>)
 801f38e:	216b      	movs	r1, #107	; 0x6b
 801f390:	185b      	adds	r3, r3, r1
 801f392:	217f      	movs	r1, #127	; 0x7f
 801f394:	400a      	ands	r2, r1
 801f396:	0010      	movs	r0, r2
 801f398:	789a      	ldrb	r2, [r3, #2]
 801f39a:	217f      	movs	r1, #127	; 0x7f
 801f39c:	438a      	bics	r2, r1
 801f39e:	1c11      	adds	r1, r2, #0
 801f3a0:	1c02      	adds	r2, r0, #0
 801f3a2:	430a      	orrs	r2, r1
 801f3a4:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f3a6:	4b20      	ldr	r3, [pc, #128]	; (801f428 <GUI_Init+0x128>)
 801f3a8:	79db      	ldrb	r3, [r3, #7]
 801f3aa:	001a      	movs	r2, r3
 801f3ac:	2364      	movs	r3, #100	; 0x64
 801f3ae:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 801f3b0:	4b1e      	ldr	r3, [pc, #120]	; (801f42c <GUI_Init+0x12c>)
 801f3b2:	216d      	movs	r1, #109	; 0x6d
 801f3b4:	5c5b      	ldrb	r3, [r3, r1]
 801f3b6:	065b      	lsls	r3, r3, #25
 801f3b8:	0e5b      	lsrs	r3, r3, #25
 801f3ba:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 801f3bc:	0019      	movs	r1, r3
 801f3be:	0010      	movs	r0, r2
 801f3c0:	f7e6 ff16 	bl	80061f0 <__udivsi3>
 801f3c4:	0003      	movs	r3, r0
 801f3c6:	1c1a      	adds	r2, r3, #0
 801f3c8:	237f      	movs	r3, #127	; 0x7f
 801f3ca:	4013      	ands	r3, r2
 801f3cc:	b2d9      	uxtb	r1, r3
 801f3ce:	4b17      	ldr	r3, [pc, #92]	; (801f42c <GUI_Init+0x12c>)
 801f3d0:	226b      	movs	r2, #107	; 0x6b
 801f3d2:	189b      	adds	r3, r3, r2
 801f3d4:	1c0a      	adds	r2, r1, #0
 801f3d6:	1890      	adds	r0, r2, r2
 801f3d8:	785a      	ldrb	r2, [r3, #1]
 801f3da:	2101      	movs	r1, #1
 801f3dc:	400a      	ands	r2, r1
 801f3de:	1c11      	adds	r1, r2, #0
 801f3e0:	1c02      	adds	r2, r0, #0
 801f3e2:	430a      	orrs	r2, r1
 801f3e4:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 801f3e6:	4b12      	ldr	r3, [pc, #72]	; (801f430 <GUI_Init+0x130>)
 801f3e8:	68fa      	ldr	r2, [r7, #12]
 801f3ea:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 801f3ec:	4b11      	ldr	r3, [pc, #68]	; (801f434 <GUI_Init+0x134>)
 801f3ee:	68ba      	ldr	r2, [r7, #8]
 801f3f0:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 801f3f2:	4b11      	ldr	r3, [pc, #68]	; (801f438 <GUI_Init+0x138>)
 801f3f4:	687a      	ldr	r2, [r7, #4]
 801f3f6:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 801f3f8:	4b10      	ldr	r3, [pc, #64]	; (801f43c <GUI_Init+0x13c>)
 801f3fa:	683a      	ldr	r2, [r7, #0]
 801f3fc:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 801f3fe:	4a10      	ldr	r2, [pc, #64]	; (801f440 <GUI_Init+0x140>)
 801f400:	4910      	ldr	r1, [pc, #64]	; (801f444 <GUI_Init+0x144>)
 801f402:	4b11      	ldr	r3, [pc, #68]	; (801f448 <GUI_Init+0x148>)
 801f404:	0018      	movs	r0, r3
 801f406:	f7fb fe4b 	bl	801b0a0 <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 801f40a:	2000      	movs	r0, #0
 801f40c:	f000 f81e 	bl	801f44c <GUI_InitOS>
 801f410:	0002      	movs	r2, r0
 801f412:	2117      	movs	r1, #23
 801f414:	187b      	adds	r3, r7, r1
 801f416:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 801f418:	187b      	adds	r3, r7, r1
 801f41a:	781b      	ldrb	r3, [r3, #0]
}
 801f41c:	0018      	movs	r0, r3
 801f41e:	46bd      	mov	sp, r7
 801f420:	b006      	add	sp, #24
 801f422:	bd80      	pop	{r7, pc}
 801f424:	20004b81 	.word	0x20004b81
 801f428:	200000f8 	.word	0x200000f8
 801f42c:	2000010c 	.word	0x2000010c
 801f430:	20004b8c 	.word	0x20004b8c
 801f434:	20004b90 	.word	0x20004b90
 801f438:	20004b94 	.word	0x20004b94
 801f43c:	20004b98 	.word	0x20004b98
 801f440:	08020531 	.word	0x08020531
 801f444:	08020461 	.word	0x08020461
 801f448:	0801f827 	.word	0x0801f827

0801f44c <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 801f44c:	b590      	push	{r4, r7, lr}
 801f44e:	b08d      	sub	sp, #52	; 0x34
 801f450:	af00      	add	r7, sp, #0
 801f452:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 801f454:	2301      	movs	r3, #1
 801f456:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 801f458:	4b1f      	ldr	r3, [pc, #124]	; (801f4d8 <GUI_InitOS+0x8c>)
 801f45a:	781b      	ldrb	r3, [r3, #0]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d134      	bne.n	801f4ca <GUI_InitOS+0x7e>
  {
    _init = 1;
 801f460:	4b1d      	ldr	r3, [pc, #116]	; (801f4d8 <GUI_InitOS+0x8c>)
 801f462:	2201      	movs	r2, #1
 801f464:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 801f466:	2200      	movs	r2, #0
 801f468:	2104      	movs	r1, #4
 801f46a:	201e      	movs	r0, #30
 801f46c:	f7f8 fdf6 	bl	801805c <osMessageQueueNew>
 801f470:	0002      	movs	r2, r0
 801f472:	4b1a      	ldr	r3, [pc, #104]	; (801f4dc <GUI_InitOS+0x90>)
 801f474:	601a      	str	r2, [r3, #0]
 801f476:	4b19      	ldr	r3, [pc, #100]	; (801f4dc <GUI_InitOS+0x90>)
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d102      	bne.n	801f484 <GUI_InitOS+0x38>
 801f47e:	2300      	movs	r3, #0
 801f480:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f482:	e023      	b.n	801f4cc <GUI_InitOS+0x80>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 801f484:	2408      	movs	r4, #8
 801f486:	193b      	adds	r3, r7, r4
 801f488:	0018      	movs	r0, r3
 801f48a:	2324      	movs	r3, #36	; 0x24
 801f48c:	001a      	movs	r2, r3
 801f48e:	2100      	movs	r1, #0
 801f490:	f004 f8c0 	bl	8023614 <memset>
 801f494:	0021      	movs	r1, r4
 801f496:	187b      	adds	r3, r7, r1
 801f498:	4a11      	ldr	r2, [pc, #68]	; (801f4e0 <GUI_InitOS+0x94>)
 801f49a:	601a      	str	r2, [r3, #0]
 801f49c:	187b      	adds	r3, r7, r1
 801f49e:	2296      	movs	r2, #150	; 0x96
 801f4a0:	00d2      	lsls	r2, r2, #3
 801f4a2:	615a      	str	r2, [r3, #20]
 801f4a4:	187b      	adds	r3, r7, r1
 801f4a6:	2208      	movs	r2, #8
 801f4a8:	619a      	str	r2, [r3, #24]
 801f4aa:	187a      	adds	r2, r7, r1
 801f4ac:	490b      	ldr	r1, [pc, #44]	; (801f4dc <GUI_InitOS+0x90>)
 801f4ae:	4b0d      	ldr	r3, [pc, #52]	; (801f4e4 <GUI_InitOS+0x98>)
 801f4b0:	0018      	movs	r0, r3
 801f4b2:	f7f8 fcd1 	bl	8017e58 <osThreadNew>
 801f4b6:	0002      	movs	r2, r0
 801f4b8:	4b0b      	ldr	r3, [pc, #44]	; (801f4e8 <GUI_InitOS+0x9c>)
 801f4ba:	601a      	str	r2, [r3, #0]
 801f4bc:	4b0a      	ldr	r3, [pc, #40]	; (801f4e8 <GUI_InitOS+0x9c>)
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	d103      	bne.n	801f4cc <GUI_InitOS+0x80>
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f4c8:	e000      	b.n	801f4cc <GUI_InitOS+0x80>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 801f4ca:	46c0      	nop			; (mov r8, r8)
  return(_status);
 801f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 801f4ce:	0018      	movs	r0, r3
 801f4d0:	46bd      	mov	sp, r7
 801f4d2:	b00d      	add	sp, #52	; 0x34
 801f4d4:	bd90      	pop	{r4, r7, pc}
 801f4d6:	46c0      	nop			; (mov r8, r8)
 801f4d8:	20004c10 	.word	0x20004c10
 801f4dc:	20004b84 	.word	0x20004b84
 801f4e0:	08024e64 	.word	0x08024e64
 801f4e4:	0801f505 	.word	0x0801f505
 801f4e8:	20004b88 	.word	0x20004b88

0801f4ec <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 801f4ec:	b580      	push	{r7, lr}
 801f4ee:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 801f4f0:	4b03      	ldr	r3, [pc, #12]	; (801f500 <GUI_Start+0x14>)
 801f4f2:	0018      	movs	r0, r3
 801f4f4:	f002 ffc6 	bl	8022484 <TRACER_EMB_StartRX>
}
 801f4f8:	46c0      	nop			; (mov r8, r8)
 801f4fa:	46bd      	mov	sp, r7
 801f4fc:	bd80      	pop	{r7, pc}
 801f4fe:	46c0      	nop			; (mov r8, r8)
 801f500:	0801f721 	.word	0x0801f721

0801f504 <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 801f504:	b580      	push	{r7, lr}
 801f506:	b088      	sub	sp, #32
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801f50c:	2301      	movs	r3, #1
 801f50e:	425b      	negs	r3, r3
 801f510:	61fb      	str	r3, [r7, #28]
  GUI_Start();
 801f512:	f7ff ffeb 	bl	801f4ec <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 801f516:	2300      	movs	r3, #0
 801f518:	613b      	str	r3, [r7, #16]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 801f51a:	4b54      	ldr	r3, [pc, #336]	; (801f66c <TaskGUI+0x168>)
 801f51c:	6818      	ldr	r0, [r3, #0]
 801f51e:	69fb      	ldr	r3, [r7, #28]
 801f520:	2210      	movs	r2, #16
 801f522:	18b9      	adds	r1, r7, r2
 801f524:	2200      	movs	r2, #0
 801f526:	f7f8 fe6f 	bl	8018208 <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 801f52a:	693b      	ldr	r3, [r7, #16]
 801f52c:	b2db      	uxtb	r3, r3
 801f52e:	001a      	movs	r2, r3
 801f530:	230f      	movs	r3, #15
 801f532:	4013      	ands	r3, r2
 801f534:	d011      	beq.n	801f55a <TaskGUI+0x56>
 801f536:	2b01      	cmp	r3, #1
 801f538:	d000      	beq.n	801f53c <TaskGUI+0x38>
 801f53a:	e090      	b.n	801f65e <TaskGUI+0x15a>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 801f53c:	693b      	ldr	r3, [r7, #16]
 801f53e:	0018      	movs	r0, r3
 801f540:	f000 f918 	bl	801f774 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 801f544:	2300      	movs	r3, #0
 801f546:	60fb      	str	r3, [r7, #12]
 801f548:	4b48      	ldr	r3, [pc, #288]	; (801f66c <TaskGUI+0x168>)
 801f54a:	6818      	ldr	r0, [r3, #0]
 801f54c:	230c      	movs	r3, #12
 801f54e:	18f9      	adds	r1, r7, r3
 801f550:	2300      	movs	r3, #0
 801f552:	2200      	movs	r2, #0
 801f554:	f7f8 fdfc 	bl	8018150 <osMessageQueuePut>
        break;
 801f558:	e082      	b.n	801f660 <TaskGUI+0x15c>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801f55a:	231b      	movs	r3, #27
 801f55c:	18fb      	adds	r3, r7, r3
 801f55e:	2200      	movs	r2, #0
 801f560:	701a      	strb	r2, [r3, #0]
 801f562:	e076      	b.n	801f652 <TaskGUI+0x14e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 801f564:	201b      	movs	r0, #27
 801f566:	183b      	adds	r3, r7, r0
 801f568:	781b      	ldrb	r3, [r3, #0]
 801f56a:	4a41      	ldr	r2, [pc, #260]	; (801f670 <TaskGUI+0x16c>)
 801f56c:	009b      	lsls	r3, r3, #2
 801f56e:	18d3      	adds	r3, r2, r3
 801f570:	785b      	ldrb	r3, [r3, #1]
 801f572:	06db      	lsls	r3, r3, #27
 801f574:	0fdb      	lsrs	r3, r3, #31
 801f576:	b2db      	uxtb	r3, r3
 801f578:	2b01      	cmp	r3, #1
 801f57a:	d15d      	bne.n	801f638 <TaskGUI+0x134>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 801f57c:	183b      	adds	r3, r7, r0
 801f57e:	781a      	ldrb	r2, [r3, #0]
 801f580:	493c      	ldr	r1, [pc, #240]	; (801f674 <TaskGUI+0x170>)
 801f582:	0013      	movs	r3, r2
 801f584:	005b      	lsls	r3, r3, #1
 801f586:	189b      	adds	r3, r3, r2
 801f588:	005b      	lsls	r3, r3, #1
 801f58a:	18cb      	adds	r3, r1, r3
 801f58c:	791b      	ldrb	r3, [r3, #4]
 801f58e:	061b      	lsls	r3, r3, #24
 801f590:	0fdb      	lsrs	r3, r3, #31
 801f592:	b2db      	uxtb	r3, r3
 801f594:	2b01      	cmp	r3, #1
 801f596:	d14f      	bne.n	801f638 <TaskGUI+0x134>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 801f598:	183b      	adds	r3, r7, r0
 801f59a:	781a      	ldrb	r2, [r3, #0]
 801f59c:	4935      	ldr	r1, [pc, #212]	; (801f674 <TaskGUI+0x170>)
 801f59e:	0013      	movs	r3, r2
 801f5a0:	005b      	lsls	r3, r3, #1
 801f5a2:	189b      	adds	r3, r3, r2
 801f5a4:	005b      	lsls	r3, r3, #1
 801f5a6:	18cb      	adds	r3, r1, r3
 801f5a8:	791b      	ldrb	r3, [r3, #4]
 801f5aa:	065b      	lsls	r3, r3, #25
 801f5ac:	0e5b      	lsrs	r3, r3, #25
 801f5ae:	b2db      	uxtb	r3, r3
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d041      	beq.n	801f638 <TaskGUI+0x134>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 801f5b4:	183b      	adds	r3, r7, r0
 801f5b6:	781a      	ldrb	r2, [r3, #0]
 801f5b8:	4b2f      	ldr	r3, [pc, #188]	; (801f678 <TaskGUI+0x174>)
 801f5ba:	0052      	lsls	r2, r2, #1
 801f5bc:	5ad3      	ldrh	r3, [r2, r3]
 801f5be:	b29a      	uxth	r2, r3
 801f5c0:	2380      	movs	r3, #128	; 0x80
 801f5c2:	021b      	lsls	r3, r3, #8
 801f5c4:	429a      	cmp	r2, r3
 801f5c6:	d109      	bne.n	801f5dc <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 801f5c8:	183b      	adds	r3, r7, r0
 801f5ca:	781b      	ldrb	r3, [r3, #0]
 801f5cc:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 801f5ce:	4a2b      	ldr	r2, [pc, #172]	; (801f67c <TaskGUI+0x178>)
 801f5d0:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 801f5d2:	617b      	str	r3, [r7, #20]
              (void)GUI_RXProcess(event_mr);
 801f5d4:	697b      	ldr	r3, [r7, #20]
 801f5d6:	0018      	movs	r0, r3
 801f5d8:	f000 f8cc 	bl	801f774 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801f5dc:	201b      	movs	r0, #27
 801f5de:	183b      	adds	r3, r7, r0
 801f5e0:	781a      	ldrb	r2, [r3, #0]
 801f5e2:	4b25      	ldr	r3, [pc, #148]	; (801f678 <TaskGUI+0x174>)
 801f5e4:	0052      	lsls	r2, r2, #1
 801f5e6:	5ad3      	ldrh	r3, [r2, r3]
 801f5e8:	b29b      	uxth	r3, r3
 801f5ea:	045b      	lsls	r3, r3, #17
 801f5ec:	0c5b      	lsrs	r3, r3, #17
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	dc29      	bgt.n	801f646 <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 801f5f2:	183b      	adds	r3, r7, r0
 801f5f4:	781a      	ldrb	r2, [r3, #0]
 801f5f6:	491f      	ldr	r1, [pc, #124]	; (801f674 <TaskGUI+0x170>)
 801f5f8:	0013      	movs	r3, r2
 801f5fa:	005b      	lsls	r3, r3, #1
 801f5fc:	189b      	adds	r3, r3, r2
 801f5fe:	005b      	lsls	r3, r3, #1
 801f600:	18cb      	adds	r3, r1, r3
 801f602:	791b      	ldrb	r3, [r3, #4]
 801f604:	065b      	lsls	r3, r3, #25
 801f606:	0e5b      	lsrs	r3, r3, #25
 801f608:	b2db      	uxtb	r3, r3
 801f60a:	b29b      	uxth	r3, r3
 801f60c:	2228      	movs	r2, #40	; 0x28
 801f60e:	4353      	muls	r3, r2
 801f610:	b29b      	uxth	r3, r3
 801f612:	183a      	adds	r2, r7, r0
 801f614:	7812      	ldrb	r2, [r2, #0]
 801f616:	491a      	ldr	r1, [pc, #104]	; (801f680 <TaskGUI+0x17c>)
 801f618:	430b      	orrs	r3, r1
 801f61a:	b299      	uxth	r1, r3
 801f61c:	4b16      	ldr	r3, [pc, #88]	; (801f678 <TaskGUI+0x174>)
 801f61e:	0052      	lsls	r2, r2, #1
 801f620:	52d1      	strh	r1, [r2, r3]
 801f622:	2300      	movs	r3, #0
 801f624:	60bb      	str	r3, [r7, #8]
 801f626:	4b11      	ldr	r3, [pc, #68]	; (801f66c <TaskGUI+0x168>)
 801f628:	6818      	ldr	r0, [r3, #0]
 801f62a:	2308      	movs	r3, #8
 801f62c:	18f9      	adds	r1, r7, r3
 801f62e:	2300      	movs	r3, #0
 801f630:	2200      	movs	r2, #0
 801f632:	f7f8 fd8d 	bl	8018150 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801f636:	e006      	b.n	801f646 <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 801f638:	231b      	movs	r3, #27
 801f63a:	18fb      	adds	r3, r7, r3
 801f63c:	781a      	ldrb	r2, [r3, #0]
 801f63e:	4b0e      	ldr	r3, [pc, #56]	; (801f678 <TaskGUI+0x174>)
 801f640:	0052      	lsls	r2, r2, #1
 801f642:	2100      	movs	r1, #0
 801f644:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 801f646:	211b      	movs	r1, #27
 801f648:	187b      	adds	r3, r7, r1
 801f64a:	781a      	ldrb	r2, [r3, #0]
 801f64c:	187b      	adds	r3, r7, r1
 801f64e:	3201      	adds	r2, #1
 801f650:	701a      	strb	r2, [r3, #0]
 801f652:	231b      	movs	r3, #27
 801f654:	18fb      	adds	r3, r7, r3
 801f656:	781b      	ldrb	r3, [r3, #0]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d083      	beq.n	801f564 <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 801f65c:	e000      	b.n	801f660 <TaskGUI+0x15c>
      }

      default:
        break;
 801f65e:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 801f660:	f000 f810 	bl	801f684 <CheckGUITimers>
 801f664:	0003      	movs	r3, r0
 801f666:	61fb      	str	r3, [r7, #28]
  {
 801f668:	e755      	b.n	801f516 <TaskGUI+0x12>
 801f66a:	46c0      	nop			; (mov r8, r8)
 801f66c:	20004b84 	.word	0x20004b84
 801f670:	20002f34 	.word	0x20002f34
 801f674:	20004978 	.word	0x20004978
 801f678:	20004974 	.word	0x20004974
 801f67c:	00000711 	.word	0x00000711
 801f680:	ffff8000 	.word	0xffff8000

0801f684 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 801f684:	b580      	push	{r7, lr}
 801f686:	b084      	sub	sp, #16
 801f688:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 801f68a:	2301      	movs	r3, #1
 801f68c:	425b      	negs	r3, r3
 801f68e:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801f690:	230b      	movs	r3, #11
 801f692:	18fb      	adds	r3, r7, r3
 801f694:	2200      	movs	r2, #0
 801f696:	701a      	strb	r2, [r3, #0]
 801f698:	e018      	b.n	801f6cc <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 801f69a:	230b      	movs	r3, #11
 801f69c:	18fb      	adds	r3, r7, r3
 801f69e:	781a      	ldrb	r2, [r3, #0]
 801f6a0:	4b0f      	ldr	r3, [pc, #60]	; (801f6e0 <CheckGUITimers+0x5c>)
 801f6a2:	0052      	lsls	r2, r2, #1
 801f6a4:	5ad3      	ldrh	r3, [r2, r3]
 801f6a6:	b29b      	uxth	r3, r3
 801f6a8:	045b      	lsls	r3, r3, #17
 801f6aa:	0c5b      	lsrs	r3, r3, #17
 801f6ac:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d005      	beq.n	801f6c0 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 801f6b4:	687a      	ldr	r2, [r7, #4]
 801f6b6:	68fb      	ldr	r3, [r7, #12]
 801f6b8:	429a      	cmp	r2, r3
 801f6ba:	d201      	bcs.n	801f6c0 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801f6c0:	210b      	movs	r1, #11
 801f6c2:	187b      	adds	r3, r7, r1
 801f6c4:	781a      	ldrb	r2, [r3, #0]
 801f6c6:	187b      	adds	r3, r7, r1
 801f6c8:	3201      	adds	r2, #1
 801f6ca:	701a      	strb	r2, [r3, #0]
 801f6cc:	230b      	movs	r3, #11
 801f6ce:	18fb      	adds	r3, r7, r3
 801f6d0:	781b      	ldrb	r3, [r3, #0]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d0e1      	beq.n	801f69a <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 801f6d6:	68fb      	ldr	r3, [r7, #12]
}
 801f6d8:	0018      	movs	r0, r3
 801f6da:	46bd      	mov	sp, r7
 801f6dc:	b004      	add	sp, #16
 801f6de:	bd80      	pop	{r7, pc}
 801f6e0:	20004974 	.word	0x20004974

0801f6e4 <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 801f6e4:	b580      	push	{r7, lr}
 801f6e6:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 801f6e8:	4b0b      	ldr	r3, [pc, #44]	; (801f718 <GUI_TimerCounter+0x34>)
 801f6ea:	791b      	ldrb	r3, [r3, #4]
 801f6ec:	227f      	movs	r2, #127	; 0x7f
 801f6ee:	4393      	bics	r3, r2
 801f6f0:	b2db      	uxtb	r3, r3
 801f6f2:	2b00      	cmp	r3, #0
 801f6f4:	d00c      	beq.n	801f710 <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 801f6f6:	4b09      	ldr	r3, [pc, #36]	; (801f71c <GUI_TimerCounter+0x38>)
 801f6f8:	881b      	ldrh	r3, [r3, #0]
 801f6fa:	b29b      	uxth	r3, r3
 801f6fc:	045b      	lsls	r3, r3, #17
 801f6fe:	0c5b      	lsrs	r3, r3, #17
 801f700:	d006      	beq.n	801f710 <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 801f702:	4b06      	ldr	r3, [pc, #24]	; (801f71c <GUI_TimerCounter+0x38>)
 801f704:	881b      	ldrh	r3, [r3, #0]
 801f706:	b29b      	uxth	r3, r3
 801f708:	3b01      	subs	r3, #1
 801f70a:	b29a      	uxth	r2, r3
 801f70c:	4b03      	ldr	r3, [pc, #12]	; (801f71c <GUI_TimerCounter+0x38>)
 801f70e:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 801f710:	46c0      	nop			; (mov r8, r8)
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}
 801f716:	46c0      	nop			; (mov r8, r8)
 801f718:	20004978 	.word	0x20004978
 801f71c:	20004974 	.word	0x20004974

0801f720 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 801f720:	b580      	push	{r7, lr}
 801f722:	b084      	sub	sp, #16
 801f724:	af00      	add	r7, sp, #0
 801f726:	0002      	movs	r2, r0
 801f728:	1dfb      	adds	r3, r7, #7
 801f72a:	701a      	strb	r2, [r3, #0]
 801f72c:	1dbb      	adds	r3, r7, #6
 801f72e:	1c0a      	adds	r2, r1, #0
 801f730:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801f732:	b672      	cpsid	i
}
 801f734:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 801f736:	1dbb      	adds	r3, r7, #6
 801f738:	781a      	ldrb	r2, [r3, #0]
 801f73a:	1dfb      	adds	r3, r7, #7
 801f73c:	781b      	ldrb	r3, [r3, #0]
 801f73e:	0011      	movs	r1, r2
 801f740:	0018      	movs	r0, r3
 801f742:	f000 f891 	bl	801f868 <GUI_GetMessage>
 801f746:	0003      	movs	r3, r0
 801f748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 801f74a:	b662      	cpsie	i
}
 801f74c:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 801f74e:	68fb      	ldr	r3, [r7, #12]
 801f750:	2b01      	cmp	r3, #1
 801f752:	d109      	bne.n	801f768 <GUI_CALLBACK_RX+0x48>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 801f754:	2301      	movs	r3, #1
 801f756:	60bb      	str	r3, [r7, #8]
 801f758:	4b05      	ldr	r3, [pc, #20]	; (801f770 <GUI_CALLBACK_RX+0x50>)
 801f75a:	6818      	ldr	r0, [r3, #0]
 801f75c:	2308      	movs	r3, #8
 801f75e:	18f9      	adds	r1, r7, r3
 801f760:	2300      	movs	r3, #0
 801f762:	2200      	movs	r2, #0
 801f764:	f7f8 fcf4 	bl	8018150 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 801f768:	46c0      	nop			; (mov r8, r8)
 801f76a:	46bd      	mov	sp, r7
 801f76c:	b004      	add	sp, #16
 801f76e:	bd80      	pop	{r7, pc}
 801f770:	20004b84 	.word	0x20004b84

0801f774 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 801f774:	b5b0      	push	{r4, r5, r7, lr}
 801f776:	b086      	sub	sp, #24
 801f778:	af00      	add	r7, sp, #0
 801f77a:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 801f77c:	687a      	ldr	r2, [r7, #4]
 801f77e:	23ff      	movs	r3, #255	; 0xff
 801f780:	011b      	lsls	r3, r3, #4
 801f782:	4013      	ands	r3, r2
 801f784:	d11f      	bne.n	801f7c6 <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 801f786:	2515      	movs	r5, #21
 801f788:	197c      	adds	r4, r7, r5
 801f78a:	230f      	movs	r3, #15
 801f78c:	18fa      	adds	r2, r7, r3
 801f78e:	2310      	movs	r3, #16
 801f790:	18fb      	adds	r3, r7, r3
 801f792:	0011      	movs	r1, r2
 801f794:	0018      	movs	r0, r3
 801f796:	f000 f96b 	bl	801fa70 <GUI_SendAnswer>
 801f79a:	0003      	movs	r3, r0
 801f79c:	7023      	strb	r3, [r4, #0]

    switch (state)
 801f79e:	197b      	adds	r3, r7, r5
 801f7a0:	781b      	ldrb	r3, [r3, #0]
 801f7a2:	2b00      	cmp	r3, #0
 801f7a4:	d039      	beq.n	801f81a <GUI_RXProcess+0xa6>
 801f7a6:	2b02      	cmp	r3, #2
 801f7a8:	d104      	bne.n	801f7b4 <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 801f7aa:	f7fe ff71 	bl	801e690 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 801f7ae:	f7eb fc26 	bl	800affe <HAL_NVIC_SystemReset>
        break;
 801f7b2:	e033      	b.n	801f81c <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 801f7b4:	693a      	ldr	r2, [r7, #16]
 801f7b6:	230f      	movs	r3, #15
 801f7b8:	18fb      	adds	r3, r7, r3
 801f7ba:	781b      	ldrb	r3, [r3, #0]
 801f7bc:	0019      	movs	r1, r3
 801f7be:	0010      	movs	r0, r2
 801f7c0:	f002 fdf6 	bl	80223b0 <TRACER_EMB_Add>
        break;
 801f7c4:	e02a      	b.n	801f81c <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	b29b      	uxth	r3, r3
 801f7ca:	091b      	lsrs	r3, r3, #4
 801f7cc:	b29a      	uxth	r2, r3
 801f7ce:	2016      	movs	r0, #22
 801f7d0:	183b      	adds	r3, r7, r0
 801f7d2:	21ff      	movs	r1, #255	; 0xff
 801f7d4:	400a      	ands	r2, r1
 801f7d6:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 801f7d8:	183b      	adds	r3, r7, r0
 801f7da:	881b      	ldrh	r3, [r3, #0]
 801f7dc:	2b71      	cmp	r3, #113	; 0x71
 801f7de:	d10e      	bne.n	801f7fe <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	0e1b      	lsrs	r3, r3, #24
 801f7e4:	2203      	movs	r2, #3
 801f7e6:	4013      	ands	r3, r2
 801f7e8:	001c      	movs	r4, r3
 801f7ea:	f7e9 fdc7 	bl	800937c <HAL_GetTick>
 801f7ee:	0002      	movs	r2, r0
 801f7f0:	2380      	movs	r3, #128	; 0x80
 801f7f2:	011b      	lsls	r3, r3, #4
 801f7f4:	0019      	movs	r1, r3
 801f7f6:	0020      	movs	r0, r4
 801f7f8:	f000 f815 	bl	801f826 <GUI_FormatAndSendNotification>
 801f7fc:	e00e      	b.n	801f81c <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	0e1b      	lsrs	r3, r3, #24
 801f802:	2203      	movs	r2, #3
 801f804:	4013      	ands	r3, r2
 801f806:	0018      	movs	r0, r3
 801f808:	2316      	movs	r3, #22
 801f80a:	18fb      	adds	r3, r7, r3
 801f80c:	881a      	ldrh	r2, [r3, #0]
 801f80e:	2380      	movs	r3, #128	; 0x80
 801f810:	019b      	lsls	r3, r3, #6
 801f812:	0019      	movs	r1, r3
 801f814:	f000 f807 	bl	801f826 <GUI_FormatAndSendNotification>
 801f818:	e000      	b.n	801f81c <GUI_RXProcess+0xa8>
        break;
 801f81a:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 801f81c:	2300      	movs	r3, #0
}
 801f81e:	0018      	movs	r0, r3
 801f820:	46bd      	mov	sp, r7
 801f822:	b006      	add	sp, #24
 801f824:	bdb0      	pop	{r4, r5, r7, pc}

0801f826 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 801f826:	b5b0      	push	{r4, r5, r7, lr}
 801f828:	b088      	sub	sp, #32
 801f82a:	af02      	add	r7, sp, #8
 801f82c:	60f8      	str	r0, [r7, #12]
 801f82e:	60b9      	str	r1, [r7, #8]
 801f830:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	b2d8      	uxtb	r0, r3
 801f836:	68bc      	ldr	r4, [r7, #8]
 801f838:	2513      	movs	r5, #19
 801f83a:	197a      	adds	r2, r7, r5
 801f83c:	2314      	movs	r3, #20
 801f83e:	18f9      	adds	r1, r7, r3
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	9300      	str	r3, [sp, #0]
 801f844:	0023      	movs	r3, r4
 801f846:	f000 fa03 	bl	801fc50 <GUI_SendNotification>
 801f84a:	1e03      	subs	r3, r0, #0
 801f84c:	d006      	beq.n	801f85c <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 801f84e:	697a      	ldr	r2, [r7, #20]
 801f850:	197b      	adds	r3, r7, r5
 801f852:	781b      	ldrb	r3, [r3, #0]
 801f854:	0019      	movs	r1, r3
 801f856:	0010      	movs	r0, r2
 801f858:	f002 fdaa 	bl	80223b0 <TRACER_EMB_Add>
  }
  return 0;
 801f85c:	2300      	movs	r3, #0
}
 801f85e:	0018      	movs	r0, r3
 801f860:	46bd      	mov	sp, r7
 801f862:	b006      	add	sp, #24
 801f864:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801f868 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 801f868:	b580      	push	{r7, lr}
 801f86a:	b084      	sub	sp, #16
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	0002      	movs	r2, r0
 801f870:	1dfb      	adds	r3, r7, #7
 801f872:	701a      	strb	r2, [r3, #0]
 801f874:	1dbb      	adds	r3, r7, #6
 801f876:	1c0a      	adds	r2, r1, #0
 801f878:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 801f87a:	2300      	movs	r3, #0
 801f87c:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 801f87e:	4b76      	ldr	r3, [pc, #472]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f880:	881b      	ldrh	r3, [r3, #0]
 801f882:	2bff      	cmp	r3, #255	; 0xff
 801f884:	d80b      	bhi.n	801f89e <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 801f886:	4b74      	ldr	r3, [pc, #464]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f888:	881b      	ldrh	r3, [r3, #0]
 801f88a:	0019      	movs	r1, r3
 801f88c:	4b73      	ldr	r3, [pc, #460]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f88e:	1dfa      	adds	r2, r7, #7
 801f890:	7812      	ldrb	r2, [r2, #0]
 801f892:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 801f894:	1dbb      	adds	r3, r7, #6
 801f896:	781b      	ldrb	r3, [r3, #0]
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d00e      	beq.n	801f8ba <GUI_GetMessage+0x52>
 801f89c:	e00a      	b.n	801f8b4 <GUI_GetMessage+0x4c>
    cursor = 0U;
 801f89e:	4b6e      	ldr	r3, [pc, #440]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 801f8a4:	4b6e      	ldr	r3, [pc, #440]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f8a6:	2200      	movs	r2, #0
 801f8a8:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 801f8aa:	4b6e      	ldr	r3, [pc, #440]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f8ac:	2200      	movs	r2, #0
 801f8ae:	701a      	strb	r2, [r3, #0]
    return 0;
 801f8b0:	2300      	movs	r3, #0
 801f8b2:	e0cc      	b.n	801fa4e <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 801f8b4:	4b6b      	ldr	r3, [pc, #428]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f8b6:	2204      	movs	r2, #4
 801f8b8:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 801f8ba:	4b6a      	ldr	r3, [pc, #424]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f8bc:	781b      	ldrb	r3, [r3, #0]
 801f8be:	2b04      	cmp	r3, #4
 801f8c0:	d900      	bls.n	801f8c4 <GUI_GetMessage+0x5c>
 801f8c2:	e0b4      	b.n	801fa2e <GUI_GetMessage+0x1c6>
 801f8c4:	009a      	lsls	r2, r3, #2
 801f8c6:	4b68      	ldr	r3, [pc, #416]	; (801fa68 <GUI_GetMessage+0x200>)
 801f8c8:	18d3      	adds	r3, r2, r3
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 801f8ce:	4b62      	ldr	r3, [pc, #392]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f8d0:	881b      	ldrh	r3, [r3, #0]
 801f8d2:	001a      	movs	r2, r3
 801f8d4:	4b61      	ldr	r3, [pc, #388]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f8d6:	5c9b      	ldrb	r3, [r3, r2]
 801f8d8:	2bfd      	cmp	r3, #253	; 0xfd
 801f8da:	d106      	bne.n	801f8ea <GUI_GetMessage+0x82>
      {
        counter++;
 801f8dc:	4b60      	ldr	r3, [pc, #384]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f8de:	881b      	ldrh	r3, [r3, #0]
 801f8e0:	3301      	adds	r3, #1
 801f8e2:	b29a      	uxth	r2, r3
 801f8e4:	4b5e      	ldr	r3, [pc, #376]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f8e6:	801a      	strh	r2, [r3, #0]
 801f8e8:	e006      	b.n	801f8f8 <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 801f8ea:	4b5d      	ldr	r3, [pc, #372]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f8ec:	2200      	movs	r2, #0
 801f8ee:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 801f8f0:	4b59      	ldr	r3, [pc, #356]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f8f2:	2201      	movs	r2, #1
 801f8f4:	4252      	negs	r2, r2
 801f8f6:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 801f8f8:	4b59      	ldr	r3, [pc, #356]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f8fa:	881b      	ldrh	r3, [r3, #0]
 801f8fc:	2b04      	cmp	r3, #4
 801f8fe:	d000      	beq.n	801f902 <GUI_GetMessage+0x9a>
 801f900:	e097      	b.n	801fa32 <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 801f902:	4b57      	ldr	r3, [pc, #348]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f904:	2200      	movs	r2, #0
 801f906:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 801f908:	4b56      	ldr	r3, [pc, #344]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f90a:	2202      	movs	r2, #2
 801f90c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801f90e:	e090      	b.n	801fa32 <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 801f910:	4b53      	ldr	r3, [pc, #332]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f912:	881b      	ldrh	r3, [r3, #0]
 801f914:	3301      	adds	r3, #1
 801f916:	b29a      	uxth	r2, r3
 801f918:	4b51      	ldr	r3, [pc, #324]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f91a:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 801f91c:	4b50      	ldr	r3, [pc, #320]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f91e:	881b      	ldrh	r3, [r3, #0]
 801f920:	2b03      	cmp	r3, #3
 801f922:	d000      	beq.n	801f926 <GUI_GetMessage+0xbe>
 801f924:	e087      	b.n	801fa36 <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 801f926:	4b4c      	ldr	r3, [pc, #304]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f928:	881b      	ldrh	r3, [r3, #0]
 801f92a:	3b01      	subs	r3, #1
 801f92c:	4a4b      	ldr	r2, [pc, #300]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f92e:	5cd3      	ldrb	r3, [r2, r3]
 801f930:	b29b      	uxth	r3, r3
 801f932:	021b      	lsls	r3, r3, #8
 801f934:	b29a      	uxth	r2, r3
 801f936:	4b48      	ldr	r3, [pc, #288]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f938:	881b      	ldrh	r3, [r3, #0]
 801f93a:	0019      	movs	r1, r3
 801f93c:	4b47      	ldr	r3, [pc, #284]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f93e:	5c5b      	ldrb	r3, [r3, r1]
 801f940:	b29b      	uxth	r3, r3
 801f942:	18d3      	adds	r3, r2, r3
 801f944:	b29a      	uxth	r2, r3
 801f946:	4b49      	ldr	r3, [pc, #292]	; (801fa6c <GUI_GetMessage+0x204>)
 801f948:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 801f94a:	4b48      	ldr	r3, [pc, #288]	; (801fa6c <GUI_GetMessage+0x204>)
 801f94c:	881b      	ldrh	r3, [r3, #0]
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d103      	bne.n	801f95a <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 801f952:	4b44      	ldr	r3, [pc, #272]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f954:	2203      	movs	r2, #3
 801f956:	701a      	strb	r2, [r3, #0]
 801f958:	e002      	b.n	801f960 <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 801f95a:	4b42      	ldr	r3, [pc, #264]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f95c:	2201      	movs	r2, #1
 801f95e:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 801f960:	4b3f      	ldr	r3, [pc, #252]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f962:	2200      	movs	r2, #0
 801f964:	801a      	strh	r2, [r3, #0]
      }
      break;
 801f966:	e066      	b.n	801fa36 <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 801f968:	4b3d      	ldr	r3, [pc, #244]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f96a:	881b      	ldrh	r3, [r3, #0]
 801f96c:	3301      	adds	r3, #1
 801f96e:	b29a      	uxth	r2, r3
 801f970:	4b3b      	ldr	r3, [pc, #236]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f972:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 801f974:	4b3a      	ldr	r3, [pc, #232]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f976:	881a      	ldrh	r2, [r3, #0]
 801f978:	4b3c      	ldr	r3, [pc, #240]	; (801fa6c <GUI_GetMessage+0x204>)
 801f97a:	881b      	ldrh	r3, [r3, #0]
 801f97c:	429a      	cmp	r2, r3
 801f97e:	d15c      	bne.n	801fa3a <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 801f980:	4b37      	ldr	r3, [pc, #220]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f982:	2200      	movs	r2, #0
 801f984:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 801f986:	4b37      	ldr	r3, [pc, #220]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f988:	2203      	movs	r2, #3
 801f98a:	701a      	strb	r2, [r3, #0]
      }
      break;
 801f98c:	e055      	b.n	801fa3a <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 801f98e:	4b34      	ldr	r3, [pc, #208]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f990:	881b      	ldrh	r3, [r3, #0]
 801f992:	3301      	adds	r3, #1
 801f994:	b29a      	uxth	r2, r3
 801f996:	4b32      	ldr	r3, [pc, #200]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f998:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 801f99a:	4b2f      	ldr	r3, [pc, #188]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f99c:	881b      	ldrh	r3, [r3, #0]
 801f99e:	001a      	movs	r2, r3
 801f9a0:	4b2e      	ldr	r3, [pc, #184]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f9a2:	5c9b      	ldrb	r3, [r3, r2]
 801f9a4:	2ba5      	cmp	r3, #165	; 0xa5
 801f9a6:	d124      	bne.n	801f9f2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 801f9a8:	4b2b      	ldr	r3, [pc, #172]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f9aa:	881b      	ldrh	r3, [r3, #0]
 801f9ac:	3b01      	subs	r3, #1
 801f9ae:	4a2b      	ldr	r2, [pc, #172]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f9b0:	5cd3      	ldrb	r3, [r2, r3]
 801f9b2:	2ba5      	cmp	r3, #165	; 0xa5
 801f9b4:	d11d      	bne.n	801f9f2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 801f9b6:	4b28      	ldr	r3, [pc, #160]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f9b8:	881b      	ldrh	r3, [r3, #0]
 801f9ba:	3b02      	subs	r3, #2
 801f9bc:	4a27      	ldr	r2, [pc, #156]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f9be:	5cd3      	ldrb	r3, [r2, r3]
 801f9c0:	2ba5      	cmp	r3, #165	; 0xa5
 801f9c2:	d116      	bne.n	801f9f2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 801f9c4:	4b24      	ldr	r3, [pc, #144]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f9c6:	881b      	ldrh	r3, [r3, #0]
 801f9c8:	3b03      	subs	r3, #3
 801f9ca:	4a24      	ldr	r2, [pc, #144]	; (801fa5c <GUI_GetMessage+0x1f4>)
 801f9cc:	5cd3      	ldrb	r3, [r2, r3]
 801f9ce:	2ba5      	cmp	r3, #165	; 0xa5
 801f9d0:	d10f      	bne.n	801f9f2 <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 801f9d2:	4b23      	ldr	r3, [pc, #140]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f9d4:	881b      	ldrh	r3, [r3, #0]
 801f9d6:	2b04      	cmp	r3, #4
 801f9d8:	d101      	bne.n	801f9de <GUI_GetMessage+0x176>
        {
          status = 1U;
 801f9da:	2301      	movs	r3, #1
 801f9dc:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 801f9de:	4b20      	ldr	r3, [pc, #128]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801f9e0:	2200      	movs	r2, #0
 801f9e2:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801f9e4:	4b1c      	ldr	r3, [pc, #112]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f9e6:	2201      	movs	r2, #1
 801f9e8:	4252      	negs	r2, r2
 801f9ea:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801f9ec:	4b1d      	ldr	r3, [pc, #116]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 801f9f2:	4b19      	ldr	r3, [pc, #100]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801f9f4:	881b      	ldrh	r3, [r3, #0]
 801f9f6:	001a      	movs	r2, r3
 801f9f8:	4b1c      	ldr	r3, [pc, #112]	; (801fa6c <GUI_GetMessage+0x204>)
 801f9fa:	881b      	ldrh	r3, [r3, #0]
 801f9fc:	330b      	adds	r3, #11
 801f9fe:	429a      	cmp	r2, r3
 801fa00:	d11d      	bne.n	801fa3e <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 801fa02:	4b17      	ldr	r3, [pc, #92]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801fa04:	2200      	movs	r2, #0
 801fa06:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 801fa08:	4b13      	ldr	r3, [pc, #76]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801fa0a:	2201      	movs	r2, #1
 801fa0c:	4252      	negs	r2, r2
 801fa0e:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 801fa10:	4b14      	ldr	r3, [pc, #80]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801fa12:	2200      	movs	r2, #0
 801fa14:	701a      	strb	r2, [r3, #0]
      }
      break;
 801fa16:	e012      	b.n	801fa3e <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 801fa18:	4b11      	ldr	r3, [pc, #68]	; (801fa60 <GUI_GetMessage+0x1f8>)
 801fa1a:	2200      	movs	r2, #0
 801fa1c:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 801fa1e:	4b0e      	ldr	r3, [pc, #56]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801fa20:	2201      	movs	r2, #1
 801fa22:	4252      	negs	r2, r2
 801fa24:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 801fa26:	4b0f      	ldr	r3, [pc, #60]	; (801fa64 <GUI_GetMessage+0x1fc>)
 801fa28:	2200      	movs	r2, #0
 801fa2a:	701a      	strb	r2, [r3, #0]
      break;
 801fa2c:	e008      	b.n	801fa40 <GUI_GetMessage+0x1d8>
    default:
      break;
 801fa2e:	46c0      	nop			; (mov r8, r8)
 801fa30:	e006      	b.n	801fa40 <GUI_GetMessage+0x1d8>
      break;
 801fa32:	46c0      	nop			; (mov r8, r8)
 801fa34:	e004      	b.n	801fa40 <GUI_GetMessage+0x1d8>
      break;
 801fa36:	46c0      	nop			; (mov r8, r8)
 801fa38:	e002      	b.n	801fa40 <GUI_GetMessage+0x1d8>
      break;
 801fa3a:	46c0      	nop			; (mov r8, r8)
 801fa3c:	e000      	b.n	801fa40 <GUI_GetMessage+0x1d8>
      break;
 801fa3e:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 801fa40:	4b05      	ldr	r3, [pc, #20]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801fa42:	881b      	ldrh	r3, [r3, #0]
 801fa44:	3301      	adds	r3, #1
 801fa46:	b29a      	uxth	r2, r3
 801fa48:	4b03      	ldr	r3, [pc, #12]	; (801fa58 <GUI_GetMessage+0x1f0>)
 801fa4a:	801a      	strh	r2, [r3, #0]
  return status;
 801fa4c:	68fb      	ldr	r3, [r7, #12]
}
 801fa4e:	0018      	movs	r0, r3
 801fa50:	46bd      	mov	sp, r7
 801fa52:	b004      	add	sp, #16
 801fa54:	bd80      	pop	{r7, pc}
 801fa56:	46c0      	nop			; (mov r8, r8)
 801fa58:	20004c12 	.word	0x20004c12
 801fa5c:	20004980 	.word	0x20004980
 801fa60:	20004c14 	.word	0x20004c14
 801fa64:	20004c16 	.word	0x20004c16
 801fa68:	0802519c 	.word	0x0802519c
 801fa6c:	20004c18 	.word	0x20004c18

0801fa70 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 801fa70:	b590      	push	{r4, r7, lr}
 801fa72:	b085      	sub	sp, #20
 801fa74:	af00      	add	r7, sp, #0
 801fa76:	6078      	str	r0, [r7, #4]
 801fa78:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 801fa7a:	4b70      	ldr	r3, [pc, #448]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fa7c:	791a      	ldrb	r2, [r3, #4]
 801fa7e:	230f      	movs	r3, #15
 801fa80:	18fb      	adds	r3, r7, r3
 801fa82:	0952      	lsrs	r2, r2, #5
 801fa84:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 801fa86:	4b6d      	ldr	r3, [pc, #436]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fa88:	791b      	ldrb	r3, [r3, #4]
 801fa8a:	001a      	movs	r2, r3
 801fa8c:	231f      	movs	r3, #31
 801fa8e:	4013      	ands	r3, r2
 801fa90:	2b10      	cmp	r3, #16
 801fa92:	d900      	bls.n	801fa96 <GUI_SendAnswer+0x26>
 801fa94:	e0be      	b.n	801fc14 <GUI_SendAnswer+0x1a4>
 801fa96:	009a      	lsls	r2, r3, #2
 801fa98:	4b69      	ldr	r3, [pc, #420]	; (801fc40 <GUI_SendAnswer+0x1d0>)
 801fa9a:	18d3      	adds	r3, r2, r3
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 801faa0:	2302      	movs	r3, #2
 801faa2:	e0c7      	b.n	801fc34 <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 801faa4:	4a67      	ldr	r2, [pc, #412]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801faa6:	240f      	movs	r4, #15
 801faa8:	193b      	adds	r3, r7, r4
 801faaa:	781b      	ldrb	r3, [r3, #0]
 801faac:	0011      	movs	r1, r2
 801faae:	0018      	movs	r0, r3
 801fab0:	f000 fe2c 	bl	802070c <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	4a63      	ldr	r2, [pc, #396]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fab8:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801faba:	4b62      	ldr	r3, [pc, #392]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fabc:	0018      	movs	r0, r3
 801fabe:	f7ff fbe9 	bl	801f294 <TLV_get_string_length>
 801fac2:	0003      	movs	r3, r0
 801fac4:	b2db      	uxtb	r3, r3
 801fac6:	3308      	adds	r3, #8
 801fac8:	b2da      	uxtb	r2, r3
 801faca:	683b      	ldr	r3, [r7, #0]
 801facc:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	681a      	ldr	r2, [r3, #0]
 801fad2:	683b      	ldr	r3, [r7, #0]
 801fad4:	781b      	ldrb	r3, [r3, #0]
 801fad6:	0019      	movs	r1, r3
 801fad8:	0010      	movs	r0, r2
 801fada:	f002 fc69 	bl	80223b0 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 801fade:	4b5a      	ldr	r3, [pc, #360]	; (801fc48 <GUI_SendAnswer+0x1d8>)
 801fae0:	2201      	movs	r2, #1
 801fae2:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 801fae4:	193b      	adds	r3, r7, r4
 801fae6:	781b      	ldrb	r3, [r3, #0]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d105      	bne.n	801faf8 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 801faec:	4b57      	ldr	r3, [pc, #348]	; (801fc4c <GUI_SendAnswer+0x1dc>)
 801faee:	2270      	movs	r2, #112	; 0x70
 801faf0:	0019      	movs	r1, r3
 801faf2:	2000      	movs	r0, #0
 801faf4:	f7ff fe97 	bl	801f826 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 801faf8:	2300      	movs	r3, #0
 801fafa:	e09b      	b.n	801fc34 <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 801fafc:	220f      	movs	r2, #15
 801fafe:	18bb      	adds	r3, r7, r2
 801fb00:	781b      	ldrb	r3, [r3, #0]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d009      	beq.n	801fb1a <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 801fb06:	18bb      	adds	r3, r7, r2
 801fb08:	781b      	ldrb	r3, [r3, #0]
 801fb0a:	3b01      	subs	r3, #1
 801fb0c:	b2db      	uxtb	r3, r3
 801fb0e:	4a4d      	ldr	r2, [pc, #308]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb10:	494a      	ldr	r1, [pc, #296]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fb12:	0018      	movs	r0, r3
 801fb14:	f001 ff28 	bl	8021968 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fb18:	e07d      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fb1a:	494a      	ldr	r1, [pc, #296]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb1c:	230f      	movs	r3, #15
 801fb1e:	18fb      	adds	r3, r7, r3
 801fb20:	781b      	ldrb	r3, [r3, #0]
 801fb22:	2205      	movs	r2, #5
 801fb24:	0018      	movs	r0, r3
 801fb26:	f002 f9ff 	bl	8021f28 <Send_DpmConfigGetRej>
      break;
 801fb2a:	e074      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 801fb2c:	220f      	movs	r2, #15
 801fb2e:	18bb      	adds	r3, r7, r2
 801fb30:	781b      	ldrb	r3, [r3, #0]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d009      	beq.n	801fb4a <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 801fb36:	18bb      	adds	r3, r7, r2
 801fb38:	781b      	ldrb	r3, [r3, #0]
 801fb3a:	3b01      	subs	r3, #1
 801fb3c:	b2db      	uxtb	r3, r3
 801fb3e:	4a41      	ldr	r2, [pc, #260]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb40:	493e      	ldr	r1, [pc, #248]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fb42:	0018      	movs	r0, r3
 801fb44:	f001 fad0 	bl	80210e8 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fb48:	e065      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fb4a:	493e      	ldr	r1, [pc, #248]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb4c:	230f      	movs	r3, #15
 801fb4e:	18fb      	adds	r3, r7, r3
 801fb50:	781b      	ldrb	r3, [r3, #0]
 801fb52:	2205      	movs	r2, #5
 801fb54:	0018      	movs	r0, r3
 801fb56:	f002 f9e7 	bl	8021f28 <Send_DpmConfigGetRej>
      break;
 801fb5a:	e05c      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 801fb5c:	220f      	movs	r2, #15
 801fb5e:	18bb      	adds	r3, r7, r2
 801fb60:	781b      	ldrb	r3, [r3, #0]
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d009      	beq.n	801fb7a <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 801fb66:	18bb      	adds	r3, r7, r2
 801fb68:	781b      	ldrb	r3, [r3, #0]
 801fb6a:	3b01      	subs	r3, #1
 801fb6c:	b2db      	uxtb	r3, r3
 801fb6e:	4a35      	ldr	r2, [pc, #212]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb70:	4932      	ldr	r1, [pc, #200]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fb72:	0018      	movs	r0, r3
 801fb74:	f000 ff78 	bl	8020a68 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fb78:	e04d      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fb7a:	4932      	ldr	r1, [pc, #200]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fb7c:	230f      	movs	r3, #15
 801fb7e:	18fb      	adds	r3, r7, r3
 801fb80:	781b      	ldrb	r3, [r3, #0]
 801fb82:	2205      	movs	r2, #5
 801fb84:	0018      	movs	r0, r3
 801fb86:	f002 f9f1 	bl	8021f6c <Send_DpmMessageRej>
      break;
 801fb8a:	e044      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 801fb8c:	220f      	movs	r2, #15
 801fb8e:	18bb      	adds	r3, r7, r2
 801fb90:	781b      	ldrb	r3, [r3, #0]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d01d      	beq.n	801fbd2 <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 801fb96:	4b29      	ldr	r3, [pc, #164]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fb98:	795b      	ldrb	r3, [r3, #5]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d10d      	bne.n	801fbba <GUI_SendAnswer+0x14a>
 801fb9e:	4b27      	ldr	r3, [pc, #156]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fba0:	799b      	ldrb	r3, [r3, #6]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d109      	bne.n	801fbba <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 801fba6:	18bb      	adds	r3, r7, r2
 801fba8:	781b      	ldrb	r3, [r3, #0]
 801fbaa:	3b01      	subs	r3, #1
 801fbac:	b2db      	uxtb	r3, r3
 801fbae:	4925      	ldr	r1, [pc, #148]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fbb0:	22ff      	movs	r2, #255	; 0xff
 801fbb2:	0018      	movs	r0, r3
 801fbb4:	f002 f9fc 	bl	8021fb0 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fbb8:	e02d      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 801fbba:	230f      	movs	r3, #15
 801fbbc:	18fb      	adds	r3, r7, r3
 801fbbe:	781b      	ldrb	r3, [r3, #0]
 801fbc0:	3b01      	subs	r3, #1
 801fbc2:	b2d8      	uxtb	r0, r3
 801fbc4:	4b1d      	ldr	r3, [pc, #116]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fbc6:	79da      	ldrb	r2, [r3, #7]
 801fbc8:	4b1e      	ldr	r3, [pc, #120]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fbca:	0019      	movs	r1, r3
 801fbcc:	f002 f9f0 	bl	8021fb0 <Send_DpmRegisterReadCnf>
      break;
 801fbd0:	e021      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fbd2:	491c      	ldr	r1, [pc, #112]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fbd4:	230f      	movs	r3, #15
 801fbd6:	18fb      	adds	r3, r7, r3
 801fbd8:	781b      	ldrb	r3, [r3, #0]
 801fbda:	2205      	movs	r2, #5
 801fbdc:	0018      	movs	r0, r3
 801fbde:	f002 f9a3 	bl	8021f28 <Send_DpmConfigGetRej>
      break;
 801fbe2:	e018      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 801fbe4:	220f      	movs	r2, #15
 801fbe6:	18bb      	adds	r3, r7, r2
 801fbe8:	781b      	ldrb	r3, [r3, #0]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d009      	beq.n	801fc02 <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 801fbee:	18bb      	adds	r3, r7, r2
 801fbf0:	781b      	ldrb	r3, [r3, #0]
 801fbf2:	3b01      	subs	r3, #1
 801fbf4:	b2db      	uxtb	r3, r3
 801fbf6:	4a11      	ldr	r2, [pc, #68]	; (801fc3c <GUI_SendAnswer+0x1cc>)
 801fbf8:	4912      	ldr	r1, [pc, #72]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fbfa:	0018      	movs	r0, r3
 801fbfc:	f002 fa36 	bl	802206c <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 801fc00:	e009      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 801fc02:	4910      	ldr	r1, [pc, #64]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fc04:	230f      	movs	r3, #15
 801fc06:	18fb      	adds	r3, r7, r3
 801fc08:	781b      	ldrb	r3, [r3, #0]
 801fc0a:	2205      	movs	r2, #5
 801fc0c:	0018      	movs	r0, r3
 801fc0e:	f002 f98b 	bl	8021f28 <Send_DpmConfigGetRej>
      break;
 801fc12:	e000      	b.n	801fc16 <GUI_SendAnswer+0x1a6>
    default :
      break;
 801fc14:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	4a0a      	ldr	r2, [pc, #40]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fc1a:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 801fc1c:	4b09      	ldr	r3, [pc, #36]	; (801fc44 <GUI_SendAnswer+0x1d4>)
 801fc1e:	0018      	movs	r0, r3
 801fc20:	f7ff fb38 	bl	801f294 <TLV_get_string_length>
 801fc24:	0003      	movs	r3, r0
 801fc26:	b2db      	uxtb	r3, r3
 801fc28:	3308      	adds	r3, #8
 801fc2a:	b2da      	uxtb	r2, r3
 801fc2c:	683b      	ldr	r3, [r7, #0]
 801fc2e:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 801fc30:	4b05      	ldr	r3, [pc, #20]	; (801fc48 <GUI_SendAnswer+0x1d8>)
 801fc32:	781b      	ldrb	r3, [r3, #0]
}
 801fc34:	0018      	movs	r0, r3
 801fc36:	46bd      	mov	sp, r7
 801fc38:	b005      	add	sp, #20
 801fc3a:	bd90      	pop	{r4, r7, pc}
 801fc3c:	20004980 	.word	0x20004980
 801fc40:	080251b0 	.word	0x080251b0
 801fc44:	20004a80 	.word	0x20004a80
 801fc48:	20004b80 	.word	0x20004b80
 801fc4c:	00006020 	.word	0x00006020

0801fc50 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 801fc50:	b5b0      	push	{r4, r5, r7, lr}
 801fc52:	b0a6      	sub	sp, #152	; 0x98
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	60b9      	str	r1, [r7, #8]
 801fc58:	607a      	str	r2, [r7, #4]
 801fc5a:	603b      	str	r3, [r7, #0]
 801fc5c:	240f      	movs	r4, #15
 801fc5e:	193b      	adds	r3, r7, r4
 801fc60:	1c02      	adds	r2, r0, #0
 801fc62:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 801fc64:	2397      	movs	r3, #151	; 0x97
 801fc66:	18fb      	adds	r3, r7, r3
 801fc68:	2200      	movs	r2, #0
 801fc6a:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 801fc6c:	4bbf      	ldr	r3, [pc, #764]	; (801ff6c <GUI_SendNotification+0x31c>)
 801fc6e:	781b      	ldrb	r3, [r3, #0]
 801fc70:	2b01      	cmp	r3, #1
 801fc72:	d001      	beq.n	801fc78 <GUI_SendNotification+0x28>
 801fc74:	f000 fbe4 	bl	8020440 <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 801fc78:	193b      	adds	r3, r7, r4
 801fc7a:	781b      	ldrb	r3, [r3, #0]
 801fc7c:	3301      	adds	r3, #1
 801fc7e:	b2db      	uxtb	r3, r3
 801fc80:	015b      	lsls	r3, r3, #5
 801fc82:	b2db      	uxtb	r3, r3
 801fc84:	220c      	movs	r2, #12
 801fc86:	4313      	orrs	r3, r2
 801fc88:	b2d9      	uxtb	r1, r3
 801fc8a:	4bb9      	ldr	r3, [pc, #740]	; (801ff70 <GUI_SendNotification+0x320>)
 801fc8c:	2280      	movs	r2, #128	; 0x80
 801fc8e:	0052      	lsls	r2, r2, #1
 801fc90:	2584      	movs	r5, #132	; 0x84
 801fc92:	1978      	adds	r0, r7, r5
 801fc94:	f7ff f893 	bl	801edbe <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 801fc98:	683b      	ldr	r3, [r7, #0]
 801fc9a:	2220      	movs	r2, #32
 801fc9c:	4013      	ands	r3, r2
 801fc9e:	d100      	bne.n	801fca2 <GUI_SendNotification+0x52>
 801fca0:	e08d      	b.n	801fdbe <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 801fca2:	193b      	adds	r3, r7, r4
 801fca4:	781b      	ldrb	r3, [r3, #0]
 801fca6:	4ab3      	ldr	r2, [pc, #716]	; (801ff74 <GUI_SendNotification+0x324>)
 801fca8:	009b      	lsls	r3, r3, #2
 801fcaa:	18d3      	adds	r3, r2, r3
 801fcac:	785b      	ldrb	r3, [r3, #1]
 801fcae:	075b      	lsls	r3, r3, #29
 801fcb0:	0f5b      	lsrs	r3, r3, #29
 801fcb2:	b2db      	uxtb	r3, r3
 801fcb4:	001a      	movs	r2, r3
 801fcb6:	2180      	movs	r1, #128	; 0x80
 801fcb8:	187b      	adds	r3, r7, r1
 801fcba:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801fcbc:	187b      	adds	r3, r7, r1
 801fcbe:	1978      	adds	r0, r7, r5
 801fcc0:	2201      	movs	r2, #1
 801fcc2:	2105      	movs	r1, #5
 801fcc4:	f7ff f8de 	bl	801ee84 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 801fcc8:	193b      	adds	r3, r7, r4
 801fcca:	781b      	ldrb	r3, [r3, #0]
 801fccc:	4aa9      	ldr	r2, [pc, #676]	; (801ff74 <GUI_SendNotification+0x324>)
 801fcce:	009b      	lsls	r3, r3, #2
 801fcd0:	18d3      	adds	r3, r2, r3
 801fcd2:	785b      	ldrb	r3, [r3, #1]
 801fcd4:	06db      	lsls	r3, r3, #27
 801fcd6:	0fdb      	lsrs	r3, r3, #31
 801fcd8:	b2db      	uxtb	r3, r3
 801fcda:	2b01      	cmp	r3, #1
 801fcdc:	d16f      	bne.n	801fdbe <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801fcde:	193b      	adds	r3, r7, r4
 801fce0:	781a      	ldrb	r2, [r3, #0]
 801fce2:	4ba4      	ldr	r3, [pc, #656]	; (801ff74 <GUI_SendNotification+0x324>)
 801fce4:	0092      	lsls	r2, r2, #2
 801fce6:	5cd3      	ldrb	r3, [r2, r3]
 801fce8:	061b      	lsls	r3, r3, #24
 801fcea:	0f9b      	lsrs	r3, r3, #30
 801fcec:	b2db      	uxtb	r3, r3
 801fcee:	001a      	movs	r2, r3
 801fcf0:	217c      	movs	r1, #124	; 0x7c
 801fcf2:	187b      	adds	r3, r7, r1
 801fcf4:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801fcf6:	187b      	adds	r3, r7, r1
 801fcf8:	1978      	adds	r0, r7, r5
 801fcfa:	2201      	movs	r2, #1
 801fcfc:	2106      	movs	r1, #6
 801fcfe:	f7ff f8c1 	bl	801ee84 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801fd02:	193b      	adds	r3, r7, r4
 801fd04:	781a      	ldrb	r2, [r3, #0]
 801fd06:	4b9b      	ldr	r3, [pc, #620]	; (801ff74 <GUI_SendNotification+0x324>)
 801fd08:	0092      	lsls	r2, r2, #2
 801fd0a:	5cd3      	ldrb	r3, [r2, r3]
 801fd0c:	075b      	lsls	r3, r3, #29
 801fd0e:	0fdb      	lsrs	r3, r3, #31
 801fd10:	b2db      	uxtb	r3, r3
 801fd12:	001a      	movs	r2, r3
 801fd14:	2178      	movs	r1, #120	; 0x78
 801fd16:	187b      	adds	r3, r7, r1
 801fd18:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801fd1a:	187b      	adds	r3, r7, r1
 801fd1c:	1978      	adds	r0, r7, r5
 801fd1e:	2201      	movs	r2, #1
 801fd20:	2108      	movs	r1, #8
 801fd22:	f7ff f8af 	bl	801ee84 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 801fd26:	217f      	movs	r1, #127	; 0x7f
 801fd28:	187b      	adds	r3, r7, r1
 801fd2a:	2203      	movs	r2, #3
 801fd2c:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 801fd2e:	187b      	adds	r3, r7, r1
 801fd30:	1978      	adds	r0, r7, r5
 801fd32:	2201      	movs	r2, #1
 801fd34:	2109      	movs	r1, #9
 801fd36:	f7ff f8a5 	bl	801ee84 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 801fd3a:	193b      	adds	r3, r7, r4
 801fd3c:	781b      	ldrb	r3, [r3, #0]
 801fd3e:	4a8d      	ldr	r2, [pc, #564]	; (801ff74 <GUI_SendNotification+0x324>)
 801fd40:	009b      	lsls	r3, r3, #2
 801fd42:	18d3      	adds	r3, r2, r3
 801fd44:	785b      	ldrb	r3, [r3, #1]
 801fd46:	075b      	lsls	r3, r3, #29
 801fd48:	0f5b      	lsrs	r3, r3, #29
 801fd4a:	b2db      	uxtb	r3, r3
 801fd4c:	2b03      	cmp	r3, #3
 801fd4e:	d136      	bne.n	801fdbe <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 801fd50:	193b      	adds	r3, r7, r4
 801fd52:	781a      	ldrb	r2, [r3, #0]
 801fd54:	4b87      	ldr	r3, [pc, #540]	; (801ff74 <GUI_SendNotification+0x324>)
 801fd56:	0092      	lsls	r2, r2, #2
 801fd58:	5cd3      	ldrb	r3, [r2, r3]
 801fd5a:	071b      	lsls	r3, r3, #28
 801fd5c:	0fdb      	lsrs	r3, r3, #31
 801fd5e:	b2db      	uxtb	r3, r3
 801fd60:	001a      	movs	r2, r3
 801fd62:	2174      	movs	r1, #116	; 0x74
 801fd64:	187b      	adds	r3, r7, r1
 801fd66:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 801fd68:	187b      	adds	r3, r7, r1
 801fd6a:	1978      	adds	r0, r7, r5
 801fd6c:	2201      	movs	r2, #1
 801fd6e:	2107      	movs	r1, #7
 801fd70:	f7ff f888 	bl	801ee84 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 801fd74:	193b      	adds	r3, r7, r4
 801fd76:	781b      	ldrb	r3, [r3, #0]
 801fd78:	4a7e      	ldr	r2, [pc, #504]	; (801ff74 <GUI_SendNotification+0x324>)
 801fd7a:	009b      	lsls	r3, r3, #2
 801fd7c:	18d3      	adds	r3, r2, r3
 801fd7e:	785b      	ldrb	r3, [r3, #1]
 801fd80:	061b      	lsls	r3, r3, #24
 801fd82:	0fdb      	lsrs	r3, r3, #31
 801fd84:	b2db      	uxtb	r3, r3
 801fd86:	001a      	movs	r2, r3
 801fd88:	2170      	movs	r1, #112	; 0x70
 801fd8a:	187b      	adds	r3, r7, r1
 801fd8c:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801fd8e:	187b      	adds	r3, r7, r1
 801fd90:	1978      	adds	r0, r7, r5
 801fd92:	2201      	movs	r2, #1
 801fd94:	210a      	movs	r1, #10
 801fd96:	f7ff f875 	bl	801ee84 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 801fd9a:	193b      	adds	r3, r7, r4
 801fd9c:	781a      	ldrb	r2, [r3, #0]
 801fd9e:	4b75      	ldr	r3, [pc, #468]	; (801ff74 <GUI_SendNotification+0x324>)
 801fda0:	0092      	lsls	r2, r2, #2
 801fda2:	5cd3      	ldrb	r3, [r2, r3]
 801fda4:	079b      	lsls	r3, r3, #30
 801fda6:	0f9b      	lsrs	r3, r3, #30
 801fda8:	b2db      	uxtb	r3, r3
 801fdaa:	001a      	movs	r2, r3
 801fdac:	216c      	movs	r1, #108	; 0x6c
 801fdae:	187b      	adds	r3, r7, r1
 801fdb0:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801fdb2:	187b      	adds	r3, r7, r1
 801fdb4:	1978      	adds	r0, r7, r5
 801fdb6:	2201      	movs	r2, #1
 801fdb8:	210d      	movs	r1, #13
 801fdba:	f7ff f863 	bl	801ee84 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 801fdbe:	683a      	ldr	r2, [r7, #0]
 801fdc0:	2380      	movs	r3, #128	; 0x80
 801fdc2:	019b      	lsls	r3, r3, #6
 801fdc4:	4013      	ands	r3, r2
 801fdc6:	d100      	bne.n	801fdca <GUI_SendNotification+0x17a>
 801fdc8:	e27d      	b.n	80202c6 <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 801fdca:	22a0      	movs	r2, #160	; 0xa0
 801fdcc:	2108      	movs	r1, #8
 801fdce:	1853      	adds	r3, r2, r1
 801fdd0:	19db      	adds	r3, r3, r7
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	2b70      	cmp	r3, #112	; 0x70
 801fdd6:	d100      	bne.n	801fdda <GUI_SendNotification+0x18a>
 801fdd8:	e1c1      	b.n	802015e <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 801fdda:	2384      	movs	r3, #132	; 0x84
 801fddc:	18f8      	adds	r0, r7, r3
 801fdde:	0014      	movs	r4, r2
 801fde0:	000d      	movs	r5, r1
 801fde2:	1853      	adds	r3, r2, r1
 801fde4:	19db      	adds	r3, r3, r7
 801fde6:	2201      	movs	r2, #1
 801fde8:	210e      	movs	r1, #14
 801fdea:	f7ff f84b 	bl	801ee84 <TLV_add>

        switch (Value)
 801fdee:	0022      	movs	r2, r4
 801fdf0:	1953      	adds	r3, r2, r5
 801fdf2:	19db      	adds	r3, r3, r7
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	2b42      	cmp	r3, #66	; 0x42
 801fdf8:	d80b      	bhi.n	801fe12 <GUI_SendNotification+0x1c2>
 801fdfa:	2b07      	cmp	r3, #7
 801fdfc:	d200      	bcs.n	801fe00 <GUI_SendNotification+0x1b0>
 801fdfe:	e25b      	b.n	80202b8 <GUI_SendNotification+0x668>
 801fe00:	3b07      	subs	r3, #7
 801fe02:	2b3b      	cmp	r3, #59	; 0x3b
 801fe04:	d900      	bls.n	801fe08 <GUI_SendNotification+0x1b8>
 801fe06:	e257      	b.n	80202b8 <GUI_SendNotification+0x668>
 801fe08:	009a      	lsls	r2, r3, #2
 801fe0a:	4b5b      	ldr	r3, [pc, #364]	; (801ff78 <GUI_SendNotification+0x328>)
 801fe0c:	18d3      	adds	r3, r2, r3
 801fe0e:	681b      	ldr	r3, [r3, #0]
 801fe10:	469f      	mov	pc, r3
 801fe12:	2b5a      	cmp	r3, #90	; 0x5a
 801fe14:	d000      	beq.n	801fe18 <GUI_SendNotification+0x1c8>
 801fe16:	e24f      	b.n	80202b8 <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 801fe18:	240f      	movs	r4, #15
 801fe1a:	193b      	adds	r3, r7, r4
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	4a55      	ldr	r2, [pc, #340]	; (801ff74 <GUI_SendNotification+0x324>)
 801fe20:	009b      	lsls	r3, r3, #2
 801fe22:	18d3      	adds	r3, r2, r3
 801fe24:	785b      	ldrb	r3, [r3, #1]
 801fe26:	075b      	lsls	r3, r3, #29
 801fe28:	0f5b      	lsrs	r3, r3, #29
 801fe2a:	b2db      	uxtb	r3, r3
 801fe2c:	001a      	movs	r2, r3
 801fe2e:	2168      	movs	r1, #104	; 0x68
 801fe30:	187b      	adds	r3, r7, r1
 801fe32:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 801fe34:	187b      	adds	r3, r7, r1
 801fe36:	2584      	movs	r5, #132	; 0x84
 801fe38:	1978      	adds	r0, r7, r5
 801fe3a:	2201      	movs	r2, #1
 801fe3c:	2105      	movs	r1, #5
 801fe3e:	f7ff f821 	bl	801ee84 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 801fe42:	193b      	adds	r3, r7, r4
 801fe44:	781b      	ldrb	r3, [r3, #0]
 801fe46:	4a4b      	ldr	r2, [pc, #300]	; (801ff74 <GUI_SendNotification+0x324>)
 801fe48:	009b      	lsls	r3, r3, #2
 801fe4a:	18d3      	adds	r3, r2, r3
 801fe4c:	785b      	ldrb	r3, [r3, #1]
 801fe4e:	075b      	lsls	r3, r3, #29
 801fe50:	0f5b      	lsrs	r3, r3, #29
 801fe52:	b2db      	uxtb	r3, r3
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d000      	beq.n	801fe5a <GUI_SendNotification+0x20a>
 801fe58:	e234      	b.n	80202c4 <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 801fe5a:	193b      	adds	r3, r7, r4
 801fe5c:	781a      	ldrb	r2, [r3, #0]
 801fe5e:	4b45      	ldr	r3, [pc, #276]	; (801ff74 <GUI_SendNotification+0x324>)
 801fe60:	0092      	lsls	r2, r2, #2
 801fe62:	5cd3      	ldrb	r3, [r2, r3]
 801fe64:	061b      	lsls	r3, r3, #24
 801fe66:	0f9b      	lsrs	r3, r3, #30
 801fe68:	b2db      	uxtb	r3, r3
 801fe6a:	001a      	movs	r2, r3
 801fe6c:	2138      	movs	r1, #56	; 0x38
 801fe6e:	187b      	adds	r3, r7, r1
 801fe70:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 801fe72:	187b      	adds	r3, r7, r1
 801fe74:	1978      	adds	r0, r7, r5
 801fe76:	2201      	movs	r2, #1
 801fe78:	2106      	movs	r1, #6
 801fe7a:	f7ff f803 	bl	801ee84 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801fe7e:	193b      	adds	r3, r7, r4
 801fe80:	781a      	ldrb	r2, [r3, #0]
 801fe82:	4b3c      	ldr	r3, [pc, #240]	; (801ff74 <GUI_SendNotification+0x324>)
 801fe84:	0092      	lsls	r2, r2, #2
 801fe86:	5cd3      	ldrb	r3, [r2, r3]
 801fe88:	075b      	lsls	r3, r3, #29
 801fe8a:	0fdb      	lsrs	r3, r3, #31
 801fe8c:	b2db      	uxtb	r3, r3
 801fe8e:	001a      	movs	r2, r3
 801fe90:	2134      	movs	r1, #52	; 0x34
 801fe92:	187b      	adds	r3, r7, r1
 801fe94:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801fe96:	187b      	adds	r3, r7, r1
 801fe98:	1978      	adds	r0, r7, r5
 801fe9a:	2201      	movs	r2, #1
 801fe9c:	2108      	movs	r1, #8
 801fe9e:	f7fe fff1 	bl	801ee84 <TLV_add>
            }
            break;
 801fea2:	e20f      	b.n	80202c4 <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 801fea4:	240f      	movs	r4, #15
 801fea6:	193b      	adds	r3, r7, r4
 801fea8:	781a      	ldrb	r2, [r3, #0]
 801feaa:	4934      	ldr	r1, [pc, #208]	; (801ff7c <GUI_SendNotification+0x32c>)
 801feac:	0013      	movs	r3, r2
 801feae:	00db      	lsls	r3, r3, #3
 801feb0:	1a9b      	subs	r3, r3, r2
 801feb2:	011b      	lsls	r3, r3, #4
 801feb4:	18cb      	adds	r3, r1, r3
 801feb6:	333c      	adds	r3, #60	; 0x3c
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	b2da      	uxtb	r2, r3
 801febc:	2164      	movs	r1, #100	; 0x64
 801febe:	187b      	adds	r3, r7, r1
 801fec0:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801fec2:	187b      	adds	r3, r7, r1
 801fec4:	2584      	movs	r5, #132	; 0x84
 801fec6:	1978      	adds	r0, r7, r5
 801fec8:	2201      	movs	r2, #1
 801feca:	2100      	movs	r1, #0
 801fecc:	f7fe ffda 	bl	801ee84 <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801fed0:	193b      	adds	r3, r7, r4
 801fed2:	781a      	ldrb	r2, [r3, #0]
 801fed4:	4929      	ldr	r1, [pc, #164]	; (801ff7c <GUI_SendNotification+0x32c>)
 801fed6:	0013      	movs	r3, r2
 801fed8:	00db      	lsls	r3, r3, #3
 801feda:	1a9b      	subs	r3, r3, r2
 801fedc:	011b      	lsls	r3, r3, #4
 801fede:	18cb      	adds	r3, r1, r3
 801fee0:	333c      	adds	r3, #60	; 0x3c
 801fee2:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801fee4:	b29b      	uxth	r3, r3
 801fee6:	009b      	lsls	r3, r3, #2
 801fee8:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 801feea:	193b      	adds	r3, r7, r4
 801feec:	781a      	ldrb	r2, [r3, #0]
 801feee:	0013      	movs	r3, r2
 801fef0:	00db      	lsls	r3, r3, #3
 801fef2:	1a9b      	subs	r3, r3, r2
 801fef4:	011b      	lsls	r3, r3, #4
 801fef6:	3320      	adds	r3, #32
 801fef8:	001a      	movs	r2, r3
 801fefa:	4b20      	ldr	r3, [pc, #128]	; (801ff7c <GUI_SendNotification+0x32c>)
 801fefc:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801fefe:	1978      	adds	r0, r7, r5
 801ff00:	000a      	movs	r2, r1
 801ff02:	2104      	movs	r1, #4
 801ff04:	f7fe ffbe 	bl	801ee84 <TLV_add>
            break;
 801ff08:	e1dd      	b.n	80202c6 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801ff0a:	240f      	movs	r4, #15
 801ff0c:	193b      	adds	r3, r7, r4
 801ff0e:	781a      	ldrb	r2, [r3, #0]
 801ff10:	491a      	ldr	r1, [pc, #104]	; (801ff7c <GUI_SendNotification+0x32c>)
 801ff12:	0013      	movs	r3, r2
 801ff14:	00db      	lsls	r3, r3, #3
 801ff16:	1a9b      	subs	r3, r3, r2
 801ff18:	011b      	lsls	r3, r3, #4
 801ff1a:	18cb      	adds	r3, r1, r3
 801ff1c:	331c      	adds	r3, #28
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	b2da      	uxtb	r2, r3
 801ff22:	2160      	movs	r1, #96	; 0x60
 801ff24:	187b      	adds	r3, r7, r1
 801ff26:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801ff28:	187b      	adds	r3, r7, r1
 801ff2a:	2584      	movs	r5, #132	; 0x84
 801ff2c:	1978      	adds	r0, r7, r5
 801ff2e:	2201      	movs	r2, #1
 801ff30:	2103      	movs	r1, #3
 801ff32:	f7fe ffa7 	bl	801ee84 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801ff36:	193b      	adds	r3, r7, r4
 801ff38:	781a      	ldrb	r2, [r3, #0]
 801ff3a:	4910      	ldr	r1, [pc, #64]	; (801ff7c <GUI_SendNotification+0x32c>)
 801ff3c:	0013      	movs	r3, r2
 801ff3e:	00db      	lsls	r3, r3, #3
 801ff40:	1a9b      	subs	r3, r3, r2
 801ff42:	011b      	lsls	r3, r3, #4
 801ff44:	18cb      	adds	r3, r1, r3
 801ff46:	331c      	adds	r3, #28
 801ff48:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801ff4a:	b29b      	uxth	r3, r3
 801ff4c:	009b      	lsls	r3, r3, #2
 801ff4e:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801ff50:	193b      	adds	r3, r7, r4
 801ff52:	781a      	ldrb	r2, [r3, #0]
 801ff54:	0013      	movs	r3, r2
 801ff56:	00db      	lsls	r3, r3, #3
 801ff58:	1a9b      	subs	r3, r3, r2
 801ff5a:	011b      	lsls	r3, r3, #4
 801ff5c:	4a07      	ldr	r2, [pc, #28]	; (801ff7c <GUI_SendNotification+0x32c>)
 801ff5e:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801ff60:	1978      	adds	r0, r7, r5
 801ff62:	000a      	movs	r2, r1
 801ff64:	2102      	movs	r1, #2
 801ff66:	f7fe ff8d 	bl	801ee84 <TLV_add>
            break;
 801ff6a:	e1ac      	b.n	80202c6 <GUI_SendNotification+0x676>
 801ff6c:	20004b80 	.word	0x20004b80
 801ff70:	20004a80 	.word	0x20004a80
 801ff74:	20002f34 	.word	0x20002f34
 801ff78:	080251f4 	.word	0x080251f4
 801ff7c:	20004ba0 	.word	0x20004ba0
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801ff80:	240f      	movs	r4, #15
 801ff82:	193b      	adds	r3, r7, r4
 801ff84:	781a      	ldrb	r2, [r3, #0]
 801ff86:	4bcd      	ldr	r3, [pc, #820]	; (80202bc <GUI_SendNotification+0x66c>)
 801ff88:	0092      	lsls	r2, r2, #2
 801ff8a:	5cd3      	ldrb	r3, [r2, r3]
 801ff8c:	075b      	lsls	r3, r3, #29
 801ff8e:	0fdb      	lsrs	r3, r3, #31
 801ff90:	b2db      	uxtb	r3, r3
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d12e      	bne.n	801fff4 <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801ff96:	193b      	adds	r3, r7, r4
 801ff98:	781a      	ldrb	r2, [r3, #0]
 801ff9a:	49c9      	ldr	r1, [pc, #804]	; (80202c0 <GUI_SendNotification+0x670>)
 801ff9c:	0013      	movs	r3, r2
 801ff9e:	00db      	lsls	r3, r3, #3
 801ffa0:	1a9b      	subs	r3, r3, r2
 801ffa2:	011b      	lsls	r3, r3, #4
 801ffa4:	18cb      	adds	r3, r1, r3
 801ffa6:	331c      	adds	r3, #28
 801ffa8:	681b      	ldr	r3, [r3, #0]
 801ffaa:	b2da      	uxtb	r2, r3
 801ffac:	2130      	movs	r1, #48	; 0x30
 801ffae:	187b      	adds	r3, r7, r1
 801ffb0:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 801ffb2:	187b      	adds	r3, r7, r1
 801ffb4:	2584      	movs	r5, #132	; 0x84
 801ffb6:	1978      	adds	r0, r7, r5
 801ffb8:	2201      	movs	r2, #1
 801ffba:	2103      	movs	r1, #3
 801ffbc:	f7fe ff62 	bl	801ee84 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 801ffc0:	193b      	adds	r3, r7, r4
 801ffc2:	781a      	ldrb	r2, [r3, #0]
 801ffc4:	49be      	ldr	r1, [pc, #760]	; (80202c0 <GUI_SendNotification+0x670>)
 801ffc6:	0013      	movs	r3, r2
 801ffc8:	00db      	lsls	r3, r3, #3
 801ffca:	1a9b      	subs	r3, r3, r2
 801ffcc:	011b      	lsls	r3, r3, #4
 801ffce:	18cb      	adds	r3, r1, r3
 801ffd0:	331c      	adds	r3, #28
 801ffd2:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801ffd4:	b29b      	uxth	r3, r3
 801ffd6:	009b      	lsls	r3, r3, #2
 801ffd8:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801ffda:	193b      	adds	r3, r7, r4
 801ffdc:	781a      	ldrb	r2, [r3, #0]
 801ffde:	0013      	movs	r3, r2
 801ffe0:	00db      	lsls	r3, r3, #3
 801ffe2:	1a9b      	subs	r3, r3, r2
 801ffe4:	011b      	lsls	r3, r3, #4
 801ffe6:	4ab6      	ldr	r2, [pc, #728]	; (80202c0 <GUI_SendNotification+0x670>)
 801ffe8:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801ffea:	1978      	adds	r0, r7, r5
 801ffec:	000a      	movs	r2, r1
 801ffee:	2102      	movs	r1, #2
 801fff0:	f7fe ff48 	bl	801ee84 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 801fff4:	240f      	movs	r4, #15
 801fff6:	193b      	adds	r3, r7, r4
 801fff8:	781a      	ldrb	r2, [r3, #0]
 801fffa:	49b1      	ldr	r1, [pc, #708]	; (80202c0 <GUI_SendNotification+0x670>)
 801fffc:	0013      	movs	r3, r2
 801fffe:	00db      	lsls	r3, r3, #3
 8020000:	1a9b      	subs	r3, r3, r2
 8020002:	011b      	lsls	r3, r3, #4
 8020004:	18cb      	adds	r3, r1, r3
 8020006:	3340      	adds	r3, #64	; 0x40
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	b2da      	uxtb	r2, r3
 802000c:	215c      	movs	r1, #92	; 0x5c
 802000e:	187b      	adds	r3, r7, r1
 8020010:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8020012:	187b      	adds	r3, r7, r1
 8020014:	2584      	movs	r5, #132	; 0x84
 8020016:	1978      	adds	r0, r7, r5
 8020018:	2201      	movs	r2, #1
 802001a:	2101      	movs	r1, #1
 802001c:	f7fe ff32 	bl	801ee84 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8020020:	193b      	adds	r3, r7, r4
 8020022:	781a      	ldrb	r2, [r3, #0]
 8020024:	4ba5      	ldr	r3, [pc, #660]	; (80202bc <GUI_SendNotification+0x66c>)
 8020026:	0092      	lsls	r2, r2, #2
 8020028:	5cd3      	ldrb	r3, [r2, r3]
 802002a:	071b      	lsls	r3, r3, #28
 802002c:	0fdb      	lsrs	r3, r3, #31
 802002e:	b2db      	uxtb	r3, r3
 8020030:	001a      	movs	r2, r3
 8020032:	2158      	movs	r1, #88	; 0x58
 8020034:	187b      	adds	r3, r7, r1
 8020036:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8020038:	187b      	adds	r3, r7, r1
 802003a:	1978      	adds	r0, r7, r5
 802003c:	2201      	movs	r2, #1
 802003e:	2107      	movs	r1, #7
 8020040:	f7fe ff20 	bl	801ee84 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8020044:	193b      	adds	r3, r7, r4
 8020046:	781a      	ldrb	r2, [r3, #0]
 8020048:	4b9c      	ldr	r3, [pc, #624]	; (80202bc <GUI_SendNotification+0x66c>)
 802004a:	0092      	lsls	r2, r2, #2
 802004c:	5cd3      	ldrb	r3, [r2, r3]
 802004e:	075b      	lsls	r3, r3, #29
 8020050:	0fdb      	lsrs	r3, r3, #31
 8020052:	b2db      	uxtb	r3, r3
 8020054:	001a      	movs	r2, r3
 8020056:	2154      	movs	r1, #84	; 0x54
 8020058:	187b      	adds	r3, r7, r1
 802005a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 802005c:	187b      	adds	r3, r7, r1
 802005e:	1978      	adds	r0, r7, r5
 8020060:	2201      	movs	r2, #1
 8020062:	2108      	movs	r1, #8
 8020064:	f7fe ff0e 	bl	801ee84 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8020068:	193b      	adds	r3, r7, r4
 802006a:	781b      	ldrb	r3, [r3, #0]
 802006c:	4a93      	ldr	r2, [pc, #588]	; (80202bc <GUI_SendNotification+0x66c>)
 802006e:	009b      	lsls	r3, r3, #2
 8020070:	18d3      	adds	r3, r2, r3
 8020072:	785b      	ldrb	r3, [r3, #1]
 8020074:	061b      	lsls	r3, r3, #24
 8020076:	0fdb      	lsrs	r3, r3, #31
 8020078:	b2db      	uxtb	r3, r3
 802007a:	001a      	movs	r2, r3
 802007c:	2150      	movs	r1, #80	; 0x50
 802007e:	187b      	adds	r3, r7, r1
 8020080:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8020082:	187b      	adds	r3, r7, r1
 8020084:	1978      	adds	r0, r7, r5
 8020086:	2201      	movs	r2, #1
 8020088:	210a      	movs	r1, #10
 802008a:	f7fe fefb 	bl	801ee84 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 802008e:	193b      	adds	r3, r7, r4
 8020090:	781a      	ldrb	r2, [r3, #0]
 8020092:	4b8a      	ldr	r3, [pc, #552]	; (80202bc <GUI_SendNotification+0x66c>)
 8020094:	0092      	lsls	r2, r2, #2
 8020096:	5cd3      	ldrb	r3, [r2, r3]
 8020098:	079b      	lsls	r3, r3, #30
 802009a:	0f9b      	lsrs	r3, r3, #30
 802009c:	b2db      	uxtb	r3, r3
 802009e:	001a      	movs	r2, r3
 80200a0:	214c      	movs	r1, #76	; 0x4c
 80200a2:	187b      	adds	r3, r7, r1
 80200a4:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80200a6:	187b      	adds	r3, r7, r1
 80200a8:	1978      	adds	r0, r7, r5
 80200aa:	2201      	movs	r2, #1
 80200ac:	210d      	movs	r1, #13
 80200ae:	f7fe fee9 	bl	801ee84 <TLV_add>
            break;
 80200b2:	e108      	b.n	80202c6 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80200b4:	230f      	movs	r3, #15
 80200b6:	18fb      	adds	r3, r7, r3
 80200b8:	781a      	ldrb	r2, [r3, #0]
 80200ba:	4b80      	ldr	r3, [pc, #512]	; (80202bc <GUI_SendNotification+0x66c>)
 80200bc:	0092      	lsls	r2, r2, #2
 80200be:	5cd3      	ldrb	r3, [r2, r3]
 80200c0:	075b      	lsls	r3, r3, #29
 80200c2:	0fdb      	lsrs	r3, r3, #31
 80200c4:	b2db      	uxtb	r3, r3
 80200c6:	001a      	movs	r2, r3
 80200c8:	2148      	movs	r1, #72	; 0x48
 80200ca:	187b      	adds	r3, r7, r1
 80200cc:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80200ce:	187b      	adds	r3, r7, r1
 80200d0:	2284      	movs	r2, #132	; 0x84
 80200d2:	18b8      	adds	r0, r7, r2
 80200d4:	2201      	movs	r2, #1
 80200d6:	2108      	movs	r1, #8
 80200d8:	f7fe fed4 	bl	801ee84 <TLV_add>
            break;
 80200dc:	e0f3      	b.n	80202c6 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80200de:	230f      	movs	r3, #15
 80200e0:	18fb      	adds	r3, r7, r3
 80200e2:	781a      	ldrb	r2, [r3, #0]
 80200e4:	4b75      	ldr	r3, [pc, #468]	; (80202bc <GUI_SendNotification+0x66c>)
 80200e6:	0092      	lsls	r2, r2, #2
 80200e8:	5cd3      	ldrb	r3, [r2, r3]
 80200ea:	071b      	lsls	r3, r3, #28
 80200ec:	0fdb      	lsrs	r3, r3, #31
 80200ee:	b2db      	uxtb	r3, r3
 80200f0:	001a      	movs	r2, r3
 80200f2:	2144      	movs	r1, #68	; 0x44
 80200f4:	187b      	adds	r3, r7, r1
 80200f6:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80200f8:	187b      	adds	r3, r7, r1
 80200fa:	2284      	movs	r2, #132	; 0x84
 80200fc:	18b8      	adds	r0, r7, r2
 80200fe:	2201      	movs	r2, #1
 8020100:	2107      	movs	r1, #7
 8020102:	f7fe febf 	bl	801ee84 <TLV_add>
            break;
 8020106:	e0de      	b.n	80202c6 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8020108:	230f      	movs	r3, #15
 802010a:	18fb      	adds	r3, r7, r3
 802010c:	781a      	ldrb	r2, [r3, #0]
 802010e:	4b6b      	ldr	r3, [pc, #428]	; (80202bc <GUI_SendNotification+0x66c>)
 8020110:	0092      	lsls	r2, r2, #2
 8020112:	5cd3      	ldrb	r3, [r2, r3]
 8020114:	079b      	lsls	r3, r3, #30
 8020116:	0f9b      	lsrs	r3, r3, #30
 8020118:	b2db      	uxtb	r3, r3
 802011a:	001a      	movs	r2, r3
 802011c:	2140      	movs	r1, #64	; 0x40
 802011e:	187b      	adds	r3, r7, r1
 8020120:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8020122:	187b      	adds	r3, r7, r1
 8020124:	2284      	movs	r2, #132	; 0x84
 8020126:	18b8      	adds	r0, r7, r2
 8020128:	2201      	movs	r2, #1
 802012a:	210d      	movs	r1, #13
 802012c:	f7fe feaa 	bl	801ee84 <TLV_add>
            break;
 8020130:	e0c9      	b.n	80202c6 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8020132:	230f      	movs	r3, #15
 8020134:	18fb      	adds	r3, r7, r3
 8020136:	781b      	ldrb	r3, [r3, #0]
 8020138:	4a60      	ldr	r2, [pc, #384]	; (80202bc <GUI_SendNotification+0x66c>)
 802013a:	009b      	lsls	r3, r3, #2
 802013c:	18d3      	adds	r3, r2, r3
 802013e:	785b      	ldrb	r3, [r3, #1]
 8020140:	061b      	lsls	r3, r3, #24
 8020142:	0fdb      	lsrs	r3, r3, #31
 8020144:	b2db      	uxtb	r3, r3
 8020146:	001a      	movs	r2, r3
 8020148:	213c      	movs	r1, #60	; 0x3c
 802014a:	187b      	adds	r3, r7, r1
 802014c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 802014e:	187b      	adds	r3, r7, r1
 8020150:	2284      	movs	r2, #132	; 0x84
 8020152:	18b8      	adds	r0, r7, r2
 8020154:	2201      	movs	r2, #1
 8020156:	210a      	movs	r1, #10
 8020158:	f7fe fe94 	bl	801ee84 <TLV_add>
            break;
 802015c:	e0b3      	b.n	80202c6 <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 802015e:	240f      	movs	r4, #15
 8020160:	193b      	adds	r3, r7, r4
 8020162:	781b      	ldrb	r3, [r3, #0]
 8020164:	4a55      	ldr	r2, [pc, #340]	; (80202bc <GUI_SendNotification+0x66c>)
 8020166:	009b      	lsls	r3, r3, #2
 8020168:	18d3      	adds	r3, r2, r3
 802016a:	785b      	ldrb	r3, [r3, #1]
 802016c:	06db      	lsls	r3, r3, #27
 802016e:	0fdb      	lsrs	r3, r3, #31
 8020170:	b2db      	uxtb	r3, r3
 8020172:	2b01      	cmp	r3, #1
 8020174:	d000      	beq.n	8020178 <GUI_SendNotification+0x528>
 8020176:	e0a6      	b.n	80202c6 <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8020178:	193b      	adds	r3, r7, r4
 802017a:	781a      	ldrb	r2, [r3, #0]
 802017c:	4950      	ldr	r1, [pc, #320]	; (80202c0 <GUI_SendNotification+0x670>)
 802017e:	0013      	movs	r3, r2
 8020180:	00db      	lsls	r3, r3, #3
 8020182:	1a9b      	subs	r3, r3, r2
 8020184:	011b      	lsls	r3, r3, #4
 8020186:	18cb      	adds	r3, r1, r3
 8020188:	333c      	adds	r3, #60	; 0x3c
 802018a:	681b      	ldr	r3, [r3, #0]
 802018c:	2b00      	cmp	r3, #0
 802018e:	d030      	beq.n	80201f2 <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8020190:	193b      	adds	r3, r7, r4
 8020192:	781a      	ldrb	r2, [r3, #0]
 8020194:	494a      	ldr	r1, [pc, #296]	; (80202c0 <GUI_SendNotification+0x670>)
 8020196:	0013      	movs	r3, r2
 8020198:	00db      	lsls	r3, r3, #3
 802019a:	1a9b      	subs	r3, r3, r2
 802019c:	011b      	lsls	r3, r3, #4
 802019e:	18cb      	adds	r3, r1, r3
 80201a0:	333c      	adds	r3, #60	; 0x3c
 80201a2:	681b      	ldr	r3, [r3, #0]
 80201a4:	b2da      	uxtb	r2, r3
 80201a6:	2124      	movs	r1, #36	; 0x24
 80201a8:	187b      	adds	r3, r7, r1
 80201aa:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 80201ac:	187b      	adds	r3, r7, r1
 80201ae:	2584      	movs	r5, #132	; 0x84
 80201b0:	1978      	adds	r0, r7, r5
 80201b2:	2201      	movs	r2, #1
 80201b4:	2100      	movs	r1, #0
 80201b6:	f7fe fe65 	bl	801ee84 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 80201ba:	193b      	adds	r3, r7, r4
 80201bc:	781a      	ldrb	r2, [r3, #0]
 80201be:	4940      	ldr	r1, [pc, #256]	; (80202c0 <GUI_SendNotification+0x670>)
 80201c0:	0013      	movs	r3, r2
 80201c2:	00db      	lsls	r3, r3, #3
 80201c4:	1a9b      	subs	r3, r3, r2
 80201c6:	011b      	lsls	r3, r3, #4
 80201c8:	18cb      	adds	r3, r1, r3
 80201ca:	333c      	adds	r3, #60	; 0x3c
 80201cc:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80201ce:	b29b      	uxth	r3, r3
 80201d0:	009b      	lsls	r3, r3, #2
 80201d2:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 80201d4:	193b      	adds	r3, r7, r4
 80201d6:	781a      	ldrb	r2, [r3, #0]
 80201d8:	0013      	movs	r3, r2
 80201da:	00db      	lsls	r3, r3, #3
 80201dc:	1a9b      	subs	r3, r3, r2
 80201de:	011b      	lsls	r3, r3, #4
 80201e0:	3320      	adds	r3, #32
 80201e2:	001a      	movs	r2, r3
 80201e4:	4b36      	ldr	r3, [pc, #216]	; (80202c0 <GUI_SendNotification+0x670>)
 80201e6:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80201e8:	1978      	adds	r0, r7, r5
 80201ea:	000a      	movs	r2, r1
 80201ec:	2104      	movs	r1, #4
 80201ee:	f7fe fe49 	bl	801ee84 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80201f2:	240f      	movs	r4, #15
 80201f4:	193b      	adds	r3, r7, r4
 80201f6:	781a      	ldrb	r2, [r3, #0]
 80201f8:	4931      	ldr	r1, [pc, #196]	; (80202c0 <GUI_SendNotification+0x670>)
 80201fa:	0013      	movs	r3, r2
 80201fc:	00db      	lsls	r3, r3, #3
 80201fe:	1a9b      	subs	r3, r3, r2
 8020200:	011b      	lsls	r3, r3, #4
 8020202:	18cb      	adds	r3, r1, r3
 8020204:	3340      	adds	r3, #64	; 0x40
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	b2da      	uxtb	r2, r3
 802020a:	212c      	movs	r1, #44	; 0x2c
 802020c:	187b      	adds	r3, r7, r1
 802020e:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 8020210:	187b      	adds	r3, r7, r1
 8020212:	2584      	movs	r5, #132	; 0x84
 8020214:	1978      	adds	r0, r7, r5
 8020216:	2201      	movs	r2, #1
 8020218:	2101      	movs	r1, #1
 802021a:	f7fe fe33 	bl	801ee84 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 802021e:	193b      	adds	r3, r7, r4
 8020220:	781a      	ldrb	r2, [r3, #0]
 8020222:	4b26      	ldr	r3, [pc, #152]	; (80202bc <GUI_SendNotification+0x66c>)
 8020224:	0092      	lsls	r2, r2, #2
 8020226:	5cd3      	ldrb	r3, [r2, r3]
 8020228:	075b      	lsls	r3, r3, #29
 802022a:	0fdb      	lsrs	r3, r3, #31
 802022c:	b2db      	uxtb	r3, r3
 802022e:	2b00      	cmp	r3, #0
 8020230:	d12d      	bne.n	802028e <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8020232:	193b      	adds	r3, r7, r4
 8020234:	781a      	ldrb	r2, [r3, #0]
 8020236:	4922      	ldr	r1, [pc, #136]	; (80202c0 <GUI_SendNotification+0x670>)
 8020238:	0013      	movs	r3, r2
 802023a:	00db      	lsls	r3, r3, #3
 802023c:	1a9b      	subs	r3, r3, r2
 802023e:	011b      	lsls	r3, r3, #4
 8020240:	18cb      	adds	r3, r1, r3
 8020242:	331c      	adds	r3, #28
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	b2da      	uxtb	r2, r3
 8020248:	2120      	movs	r1, #32
 802024a:	187b      	adds	r3, r7, r1
 802024c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 802024e:	187b      	adds	r3, r7, r1
 8020250:	1978      	adds	r0, r7, r5
 8020252:	2201      	movs	r2, #1
 8020254:	2103      	movs	r1, #3
 8020256:	f7fe fe15 	bl	801ee84 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 802025a:	193b      	adds	r3, r7, r4
 802025c:	781a      	ldrb	r2, [r3, #0]
 802025e:	4918      	ldr	r1, [pc, #96]	; (80202c0 <GUI_SendNotification+0x670>)
 8020260:	0013      	movs	r3, r2
 8020262:	00db      	lsls	r3, r3, #3
 8020264:	1a9b      	subs	r3, r3, r2
 8020266:	011b      	lsls	r3, r3, #4
 8020268:	18cb      	adds	r3, r1, r3
 802026a:	331c      	adds	r3, #28
 802026c:	681b      	ldr	r3, [r3, #0]
 802026e:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8020270:	009b      	lsls	r3, r3, #2
 8020272:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8020274:	193b      	adds	r3, r7, r4
 8020276:	781a      	ldrb	r2, [r3, #0]
 8020278:	0013      	movs	r3, r2
 802027a:	00db      	lsls	r3, r3, #3
 802027c:	1a9b      	subs	r3, r3, r2
 802027e:	011b      	lsls	r3, r3, #4
 8020280:	4a0f      	ldr	r2, [pc, #60]	; (80202c0 <GUI_SendNotification+0x670>)
 8020282:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8020284:	1978      	adds	r0, r7, r5
 8020286:	000a      	movs	r2, r1
 8020288:	2102      	movs	r1, #2
 802028a:	f7fe fdfb 	bl	801ee84 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 802028e:	230f      	movs	r3, #15
 8020290:	18fb      	adds	r3, r7, r3
 8020292:	781a      	ldrb	r2, [r3, #0]
 8020294:	4b09      	ldr	r3, [pc, #36]	; (80202bc <GUI_SendNotification+0x66c>)
 8020296:	0092      	lsls	r2, r2, #2
 8020298:	5cd3      	ldrb	r3, [r2, r3]
 802029a:	079b      	lsls	r3, r3, #30
 802029c:	0f9b      	lsrs	r3, r3, #30
 802029e:	b2db      	uxtb	r3, r3
 80202a0:	001a      	movs	r2, r3
 80202a2:	2128      	movs	r1, #40	; 0x28
 80202a4:	187b      	adds	r3, r7, r1
 80202a6:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80202a8:	187b      	adds	r3, r7, r1
 80202aa:	2284      	movs	r2, #132	; 0x84
 80202ac:	18b8      	adds	r0, r7, r2
 80202ae:	2201      	movs	r2, #1
 80202b0:	210d      	movs	r1, #13
 80202b2:	f7fe fde7 	bl	801ee84 <TLV_add>
 80202b6:	e006      	b.n	80202c6 <GUI_SendNotification+0x676>
            break;
 80202b8:	46c0      	nop			; (mov r8, r8)
 80202ba:	e004      	b.n	80202c6 <GUI_SendNotification+0x676>
 80202bc:	20002f34 	.word	0x20002f34
 80202c0:	20004ba0 	.word	0x20004ba0
            break;
 80202c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 80202c6:	683a      	ldr	r2, [r7, #0]
 80202c8:	2380      	movs	r3, #128	; 0x80
 80202ca:	011b      	lsls	r3, r3, #4
 80202cc:	4013      	ands	r3, r2
 80202ce:	d043      	beq.n	8020358 <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 80202d0:	2300      	movs	r3, #0
 80202d2:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 80202d4:	2300      	movs	r3, #0
 80202d6:	2290      	movs	r2, #144	; 0x90
 80202d8:	18ba      	adds	r2, r7, r2
 80202da:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 80202dc:	2384      	movs	r3, #132	; 0x84
 80202de:	18f8      	adds	r0, r7, r3
 80202e0:	23a0      	movs	r3, #160	; 0xa0
 80202e2:	2208      	movs	r2, #8
 80202e4:	189b      	adds	r3, r3, r2
 80202e6:	19db      	adds	r3, r3, r7
 80202e8:	2204      	movs	r2, #4
 80202ea:	2113      	movs	r1, #19
 80202ec:	f7fe fdca 	bl	801ee84 <TLV_add>

      if (NULL != pCB_GetVoltage)
 80202f0:	4b57      	ldr	r3, [pc, #348]	; (8020450 <GUI_SendNotification+0x800>)
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d008      	beq.n	802030a <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 80202f8:	4b55      	ldr	r3, [pc, #340]	; (8020450 <GUI_SendNotification+0x800>)
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	220f      	movs	r2, #15
 80202fe:	18ba      	adds	r2, r7, r2
 8020300:	7812      	ldrb	r2, [r2, #0]
 8020302:	0010      	movs	r0, r2
 8020304:	4798      	blx	r3
 8020306:	0003      	movs	r3, r0
 8020308:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 802030a:	4b51      	ldr	r3, [pc, #324]	; (8020450 <GUI_SendNotification+0x800>)
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	2b00      	cmp	r3, #0
 8020310:	d013      	beq.n	802033a <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 8020312:	4b50      	ldr	r3, [pc, #320]	; (8020454 <GUI_SendNotification+0x804>)
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	220f      	movs	r2, #15
 8020318:	18ba      	adds	r2, r7, r2
 802031a:	7812      	ldrb	r2, [r2, #0]
 802031c:	0010      	movs	r0, r2
 802031e:	4798      	blx	r3
 8020320:	0003      	movs	r3, r0
 8020322:	2290      	movs	r2, #144	; 0x90
 8020324:	18b9      	adds	r1, r7, r2
 8020326:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 8020328:	18bb      	adds	r3, r7, r2
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	2b00      	cmp	r3, #0
 802032e:	da04      	bge.n	802033a <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 8020330:	18bb      	adds	r3, r7, r2
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	425b      	negs	r3, r3
 8020336:	18ba      	adds	r2, r7, r2
 8020338:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 802033a:	2390      	movs	r3, #144	; 0x90
 802033c:	18fb      	adds	r3, r7, r3
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	041a      	lsls	r2, r3, #16
 8020342:	69fb      	ldr	r3, [r7, #28]
 8020344:	4313      	orrs	r3, r2
 8020346:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8020348:	231c      	movs	r3, #28
 802034a:	18fb      	adds	r3, r7, r3
 802034c:	2284      	movs	r2, #132	; 0x84
 802034e:	18b8      	adds	r0, r7, r2
 8020350:	2204      	movs	r2, #4
 8020352:	210c      	movs	r1, #12
 8020354:	f7fe fd96 	bl	801ee84 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8020358:	683a      	ldr	r2, [r7, #0]
 802035a:	2380      	movs	r3, #128	; 0x80
 802035c:	01db      	lsls	r3, r3, #7
 802035e:	4013      	ands	r3, r2
 8020360:	d009      	beq.n	8020376 <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8020362:	2384      	movs	r3, #132	; 0x84
 8020364:	18f8      	adds	r0, r7, r3
 8020366:	23a0      	movs	r3, #160	; 0xa0
 8020368:	2208      	movs	r2, #8
 802036a:	189b      	adds	r3, r3, r2
 802036c:	19db      	adds	r3, r3, r7
 802036e:	2204      	movs	r2, #4
 8020370:	2113      	movs	r1, #19
 8020372:	f7fe fd87 	bl	801ee84 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8020376:	683a      	ldr	r2, [r7, #0]
 8020378:	2380      	movs	r3, #128	; 0x80
 802037a:	021b      	lsls	r3, r3, #8
 802037c:	4013      	ands	r3, r2
 802037e:	d043      	beq.n	8020408 <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8020380:	240f      	movs	r4, #15
 8020382:	193b      	adds	r3, r7, r4
 8020384:	781b      	ldrb	r3, [r3, #0]
 8020386:	4a34      	ldr	r2, [pc, #208]	; (8020458 <GUI_SendNotification+0x808>)
 8020388:	009b      	lsls	r3, r3, #2
 802038a:	18d3      	adds	r3, r2, r3
 802038c:	785b      	ldrb	r3, [r3, #1]
 802038e:	075b      	lsls	r3, r3, #29
 8020390:	0f5b      	lsrs	r3, r3, #29
 8020392:	b2db      	uxtb	r3, r3
 8020394:	001a      	movs	r2, r3
 8020396:	2118      	movs	r1, #24
 8020398:	187b      	adds	r3, r7, r1
 802039a:	701a      	strb	r2, [r3, #0]
 802039c:	187b      	adds	r3, r7, r1
 802039e:	2584      	movs	r5, #132	; 0x84
 80203a0:	1978      	adds	r0, r7, r5
 80203a2:	2201      	movs	r2, #1
 80203a4:	2105      	movs	r1, #5
 80203a6:	f7fe fd6d 	bl	801ee84 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 80203aa:	193b      	adds	r3, r7, r4
 80203ac:	781b      	ldrb	r3, [r3, #0]
 80203ae:	4a2a      	ldr	r2, [pc, #168]	; (8020458 <GUI_SendNotification+0x808>)
 80203b0:	009b      	lsls	r3, r3, #2
 80203b2:	18d3      	adds	r3, r2, r3
 80203b4:	785b      	ldrb	r3, [r3, #1]
 80203b6:	075b      	lsls	r3, r3, #29
 80203b8:	0f5b      	lsrs	r3, r3, #29
 80203ba:	b2db      	uxtb	r3, r3
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d123      	bne.n	8020408 <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 80203c0:	193b      	adds	r3, r7, r4
 80203c2:	781a      	ldrb	r2, [r3, #0]
 80203c4:	4b24      	ldr	r3, [pc, #144]	; (8020458 <GUI_SendNotification+0x808>)
 80203c6:	0092      	lsls	r2, r2, #2
 80203c8:	5cd3      	ldrb	r3, [r2, r3]
 80203ca:	061b      	lsls	r3, r3, #24
 80203cc:	0f9b      	lsrs	r3, r3, #30
 80203ce:	b2db      	uxtb	r3, r3
 80203d0:	001a      	movs	r2, r3
 80203d2:	2114      	movs	r1, #20
 80203d4:	187b      	adds	r3, r7, r1
 80203d6:	701a      	strb	r2, [r3, #0]
 80203d8:	187b      	adds	r3, r7, r1
 80203da:	1978      	adds	r0, r7, r5
 80203dc:	2201      	movs	r2, #1
 80203de:	2106      	movs	r1, #6
 80203e0:	f7fe fd50 	bl	801ee84 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80203e4:	193b      	adds	r3, r7, r4
 80203e6:	781a      	ldrb	r2, [r3, #0]
 80203e8:	4b1b      	ldr	r3, [pc, #108]	; (8020458 <GUI_SendNotification+0x808>)
 80203ea:	0092      	lsls	r2, r2, #2
 80203ec:	5cd3      	ldrb	r3, [r2, r3]
 80203ee:	075b      	lsls	r3, r3, #29
 80203f0:	0fdb      	lsrs	r3, r3, #31
 80203f2:	b2db      	uxtb	r3, r3
 80203f4:	001a      	movs	r2, r3
 80203f6:	2110      	movs	r1, #16
 80203f8:	187b      	adds	r3, r7, r1
 80203fa:	701a      	strb	r2, [r3, #0]
 80203fc:	187b      	adds	r3, r7, r1
 80203fe:	1978      	adds	r0, r7, r5
 8020400:	2201      	movs	r2, #1
 8020402:	2108      	movs	r1, #8
 8020404:	f7fe fd3e 	bl	801ee84 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 8020408:	2384      	movs	r3, #132	; 0x84
 802040a:	18fb      	adds	r3, r7, r3
 802040c:	0018      	movs	r0, r3
 802040e:	f7fe fe9b 	bl	801f148 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 8020412:	4b12      	ldr	r3, [pc, #72]	; (802045c <GUI_SendNotification+0x80c>)
 8020414:	0018      	movs	r0, r3
 8020416:	f7fe ff3d 	bl	801f294 <TLV_get_string_length>
 802041a:	1e03      	subs	r3, r0, #0
 802041c:	d010      	beq.n	8020440 <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 802041e:	68bb      	ldr	r3, [r7, #8]
 8020420:	4a0e      	ldr	r2, [pc, #56]	; (802045c <GUI_SendNotification+0x80c>)
 8020422:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 8020424:	4b0d      	ldr	r3, [pc, #52]	; (802045c <GUI_SendNotification+0x80c>)
 8020426:	0018      	movs	r0, r3
 8020428:	f7fe ff34 	bl	801f294 <TLV_get_string_length>
 802042c:	0003      	movs	r3, r0
 802042e:	b2db      	uxtb	r3, r3
 8020430:	3308      	adds	r3, #8
 8020432:	b2da      	uxtb	r2, r3
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 8020438:	2397      	movs	r3, #151	; 0x97
 802043a:	18fb      	adds	r3, r7, r3
 802043c:	2201      	movs	r2, #1
 802043e:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 8020440:	2397      	movs	r3, #151	; 0x97
 8020442:	18fb      	adds	r3, r7, r3
 8020444:	781b      	ldrb	r3, [r3, #0]
}
 8020446:	0018      	movs	r0, r3
 8020448:	46bd      	mov	sp, r7
 802044a:	b026      	add	sp, #152	; 0x98
 802044c:	bdb0      	pop	{r4, r5, r7, pc}
 802044e:	46c0      	nop			; (mov r8, r8)
 8020450:	20004b94 	.word	0x20004b94
 8020454:	20004b98 	.word	0x20004b98
 8020458:	20002f34 	.word	0x20002f34
 802045c:	20004a80 	.word	0x20004a80

08020460 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 8020460:	b590      	push	{r4, r7, lr}
 8020462:	b085      	sub	sp, #20
 8020464:	af00      	add	r7, sp, #0
 8020466:	0002      	movs	r2, r0
 8020468:	1dfb      	adds	r3, r7, #7
 802046a:	701a      	strb	r2, [r3, #0]
 802046c:	1d3b      	adds	r3, r7, #4
 802046e:	1c0a      	adds	r2, r1, #0
 8020470:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 8020472:	1d3b      	adds	r3, r7, #4
 8020474:	881b      	ldrh	r3, [r3, #0]
 8020476:	2b01      	cmp	r3, #1
 8020478:	d136      	bne.n	80204e8 <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 802047a:	1dfb      	adds	r3, r7, #7
 802047c:	781a      	ldrb	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 802047e:	1dfb      	adds	r3, r7, #7
 8020480:	7818      	ldrb	r0, [r3, #0]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8020482:	4927      	ldr	r1, [pc, #156]	; (8020520 <GUI_PostNotificationMessage+0xc0>)
 8020484:	0013      	movs	r3, r2
 8020486:	00db      	lsls	r3, r3, #3
 8020488:	1a9b      	subs	r3, r3, r2
 802048a:	011b      	lsls	r3, r3, #4
 802048c:	18cb      	adds	r3, r1, r3
 802048e:	3344      	adds	r3, #68	; 0x44
 8020490:	681a      	ldr	r2, [r3, #0]
 8020492:	4924      	ldr	r1, [pc, #144]	; (8020524 <GUI_PostNotificationMessage+0xc4>)
 8020494:	2374      	movs	r3, #116	; 0x74
 8020496:	4343      	muls	r3, r0
 8020498:	18cb      	adds	r3, r1, r3
 802049a:	3308      	adds	r3, #8
 802049c:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 802049e:	1dfb      	adds	r3, r7, #7
 80204a0:	781a      	ldrb	r2, [r3, #0]
 80204a2:	491f      	ldr	r1, [pc, #124]	; (8020520 <GUI_PostNotificationMessage+0xc0>)
 80204a4:	0013      	movs	r3, r2
 80204a6:	00db      	lsls	r3, r3, #3
 80204a8:	1a9b      	subs	r3, r3, r2
 80204aa:	011b      	lsls	r3, r3, #4
 80204ac:	18cb      	adds	r3, r1, r3
 80204ae:	3344      	adds	r3, #68	; 0x44
 80204b0:	6819      	ldr	r1, [r3, #0]
 80204b2:	1dfb      	adds	r3, r7, #7
 80204b4:	781a      	ldrb	r2, [r3, #0]
 80204b6:	481a      	ldr	r0, [pc, #104]	; (8020520 <GUI_PostNotificationMessage+0xc0>)
 80204b8:	0013      	movs	r3, r2
 80204ba:	00db      	lsls	r3, r3, #3
 80204bc:	1a9b      	subs	r3, r3, r2
 80204be:	011b      	lsls	r3, r3, #4
 80204c0:	18c3      	adds	r3, r0, r3
 80204c2:	3348      	adds	r3, #72	; 0x48
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	434b      	muls	r3, r1
 80204c8:	001a      	movs	r2, r3
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 80204ca:	1dfb      	adds	r3, r7, #7
 80204cc:	781c      	ldrb	r4, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 80204ce:	23fa      	movs	r3, #250	; 0xfa
 80204d0:	0099      	lsls	r1, r3, #2
 80204d2:	0010      	movs	r0, r2
 80204d4:	f7e5 fe8c 	bl	80061f0 <__udivsi3>
 80204d8:	0003      	movs	r3, r0
 80204da:	0019      	movs	r1, r3
 80204dc:	4a11      	ldr	r2, [pc, #68]	; (8020524 <GUI_PostNotificationMessage+0xc4>)
 80204de:	2374      	movs	r3, #116	; 0x74
 80204e0:	4363      	muls	r3, r4
 80204e2:	18d3      	adds	r3, r2, r3
 80204e4:	3314      	adds	r3, #20
 80204e6:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80204e8:	4b0f      	ldr	r3, [pc, #60]	; (8020528 <GUI_PostNotificationMessage+0xc8>)
 80204ea:	781b      	ldrb	r3, [r3, #0]
 80204ec:	2b01      	cmp	r3, #1
 80204ee:	d113      	bne.n	8020518 <GUI_PostNotificationMessage+0xb8>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 80204f0:	1dfb      	adds	r3, r7, #7
 80204f2:	781b      	ldrb	r3, [r3, #0]
 80204f4:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 80204f6:	1d3b      	adds	r3, r7, #4
 80204f8:	881b      	ldrh	r3, [r3, #0]
 80204fa:	011b      	lsls	r3, r3, #4
 80204fc:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 80204fe:	2201      	movs	r2, #1
 8020500:	4313      	orrs	r3, r2
 8020502:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 8020504:	68fb      	ldr	r3, [r7, #12]
 8020506:	60bb      	str	r3, [r7, #8]
 8020508:	4b08      	ldr	r3, [pc, #32]	; (802052c <GUI_PostNotificationMessage+0xcc>)
 802050a:	6818      	ldr	r0, [r3, #0]
 802050c:	2308      	movs	r3, #8
 802050e:	18f9      	adds	r1, r7, r3
 8020510:	2300      	movs	r3, #0
 8020512:	2200      	movs	r2, #0
 8020514:	f7f7 fe1c 	bl	8018150 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8020518:	46c0      	nop			; (mov r8, r8)
 802051a:	46bd      	mov	sp, r7
 802051c:	b005      	add	sp, #20
 802051e:	bd90      	pop	{r4, r7, pc}
 8020520:	20004ba0 	.word	0x20004ba0
 8020524:	2000010c 	.word	0x2000010c
 8020528:	20004b80 	.word	0x20004b80
 802052c:	20004b84 	.word	0x20004b84

08020530 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 8020530:	b590      	push	{r4, r7, lr}
 8020532:	b08b      	sub	sp, #44	; 0x2c
 8020534:	af00      	add	r7, sp, #0
 8020536:	60ba      	str	r2, [r7, #8]
 8020538:	607b      	str	r3, [r7, #4]
 802053a:	230f      	movs	r3, #15
 802053c:	18fb      	adds	r3, r7, r3
 802053e:	1c02      	adds	r2, r0, #0
 8020540:	701a      	strb	r2, [r3, #0]
 8020542:	200e      	movs	r0, #14
 8020544:	183b      	adds	r3, r7, r0
 8020546:	1c0a      	adds	r2, r1, #0
 8020548:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 802054a:	183b      	adds	r3, r7, r0
 802054c:	781b      	ldrb	r3, [r3, #0]
 802054e:	2b13      	cmp	r3, #19
 8020550:	d900      	bls.n	8020554 <GUI_SaveInfo+0x24>
 8020552:	e0ca      	b.n	80206ea <GUI_SaveInfo+0x1ba>
 8020554:	009a      	lsls	r2, r3, #2
 8020556:	4b6b      	ldr	r3, [pc, #428]	; (8020704 <GUI_SaveInfo+0x1d4>)
 8020558:	18d3      	adds	r3, r2, r3
 802055a:	681b      	ldr	r3, [r3, #0]
 802055c:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	2b04      	cmp	r3, #4
 8020562:	d000      	beq.n	8020566 <GUI_SaveInfo+0x36>
 8020564:	e0c3      	b.n	80206ee <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8020566:	240f      	movs	r4, #15
 8020568:	193b      	adds	r3, r7, r4
 802056a:	781a      	ldrb	r2, [r3, #0]
 802056c:	0013      	movs	r3, r2
 802056e:	00db      	lsls	r3, r3, #3
 8020570:	1a9b      	subs	r3, r3, r2
 8020572:	011b      	lsls	r3, r3, #4
 8020574:	3340      	adds	r3, #64	; 0x40
 8020576:	001a      	movs	r2, r3
 8020578:	4b63      	ldr	r3, [pc, #396]	; (8020708 <GUI_SaveInfo+0x1d8>)
 802057a:	18d3      	adds	r3, r2, r3
 802057c:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 802057e:	687a      	ldr	r2, [r7, #4]
 8020580:	68b9      	ldr	r1, [r7, #8]
 8020582:	693b      	ldr	r3, [r7, #16]
 8020584:	0018      	movs	r0, r3
 8020586:	f003 f8f9 	bl	802377c <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 802058a:	68bb      	ldr	r3, [r7, #8]
 802058c:	7819      	ldrb	r1, [r3, #0]
 802058e:	193b      	adds	r3, r7, r4
 8020590:	781a      	ldrb	r2, [r3, #0]
 8020592:	0008      	movs	r0, r1
 8020594:	495c      	ldr	r1, [pc, #368]	; (8020708 <GUI_SaveInfo+0x1d8>)
 8020596:	0013      	movs	r3, r2
 8020598:	00db      	lsls	r3, r3, #3
 802059a:	1a9b      	subs	r3, r3, r2
 802059c:	011b      	lsls	r3, r3, #4
 802059e:	18cb      	adds	r3, r1, r3
 80205a0:	334c      	adds	r3, #76	; 0x4c
 80205a2:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 80205a4:	193b      	adds	r3, r7, r4
 80205a6:	781a      	ldrb	r2, [r3, #0]
 80205a8:	0013      	movs	r3, r2
 80205aa:	00db      	lsls	r3, r3, #3
 80205ac:	1a9b      	subs	r3, r3, r2
 80205ae:	011b      	lsls	r3, r3, #4
 80205b0:	3348      	adds	r3, #72	; 0x48
 80205b2:	001a      	movs	r2, r3
 80205b4:	4b54      	ldr	r3, [pc, #336]	; (8020708 <GUI_SaveInfo+0x1d8>)
 80205b6:	18d3      	adds	r3, r2, r3
 80205b8:	3304      	adds	r3, #4
 80205ba:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 80205bc:	687a      	ldr	r2, [r7, #4]
 80205be:	68b9      	ldr	r1, [r7, #8]
 80205c0:	693b      	ldr	r3, [r7, #16]
 80205c2:	0018      	movs	r0, r3
 80205c4:	f003 f8da 	bl	802377c <memcpy>
      }
      break;
 80205c8:	e091      	b.n	80206ee <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	2b1c      	cmp	r3, #28
 80205ce:	d900      	bls.n	80205d2 <GUI_SaveInfo+0xa2>
 80205d0:	e08f      	b.n	80206f2 <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 80205d2:	230f      	movs	r3, #15
 80205d4:	18fb      	adds	r3, r7, r3
 80205d6:	781a      	ldrb	r2, [r3, #0]
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	0899      	lsrs	r1, r3, #2
 80205dc:	484a      	ldr	r0, [pc, #296]	; (8020708 <GUI_SaveInfo+0x1d8>)
 80205de:	0013      	movs	r3, r2
 80205e0:	00db      	lsls	r3, r3, #3
 80205e2:	1a9b      	subs	r3, r3, r2
 80205e4:	011b      	lsls	r3, r3, #4
 80205e6:	18c3      	adds	r3, r0, r3
 80205e8:	331c      	adds	r3, #28
 80205ea:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 80205ec:	2300      	movs	r3, #0
 80205ee:	627b      	str	r3, [r7, #36]	; 0x24
 80205f0:	e018      	b.n	8020624 <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 80205f2:	230f      	movs	r3, #15
 80205f4:	18fb      	adds	r3, r7, r3
 80205f6:	781a      	ldrb	r2, [r3, #0]
 80205f8:	0013      	movs	r3, r2
 80205fa:	00db      	lsls	r3, r3, #3
 80205fc:	1a9b      	subs	r3, r3, r2
 80205fe:	009b      	lsls	r3, r3, #2
 8020600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020602:	189b      	adds	r3, r3, r2
 8020604:	009a      	lsls	r2, r3, #2
 8020606:	4b40      	ldr	r3, [pc, #256]	; (8020708 <GUI_SaveInfo+0x1d8>)
 8020608:	18d3      	adds	r3, r2, r3
 802060a:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 802060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802060e:	009b      	lsls	r3, r3, #2
 8020610:	68ba      	ldr	r2, [r7, #8]
 8020612:	18d1      	adds	r1, r2, r3
 8020614:	697b      	ldr	r3, [r7, #20]
 8020616:	2204      	movs	r2, #4
 8020618:	0018      	movs	r0, r3
 802061a:	f003 f8af 	bl	802377c <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 802061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020620:	3301      	adds	r3, #1
 8020622:	627b      	str	r3, [r7, #36]	; 0x24
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	089b      	lsrs	r3, r3, #2
 8020628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802062a:	429a      	cmp	r2, r3
 802062c:	d3e1      	bcc.n	80205f2 <GUI_SaveInfo+0xc2>
        }
      }
      break;
 802062e:	e060      	b.n	80206f2 <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	2b1c      	cmp	r3, #28
 8020634:	d85f      	bhi.n	80206f6 <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 8020636:	230f      	movs	r3, #15
 8020638:	18fb      	adds	r3, r7, r3
 802063a:	781a      	ldrb	r2, [r3, #0]
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	0899      	lsrs	r1, r3, #2
 8020640:	4831      	ldr	r0, [pc, #196]	; (8020708 <GUI_SaveInfo+0x1d8>)
 8020642:	0013      	movs	r3, r2
 8020644:	00db      	lsls	r3, r3, #3
 8020646:	1a9b      	subs	r3, r3, r2
 8020648:	011b      	lsls	r3, r3, #4
 802064a:	18c3      	adds	r3, r0, r3
 802064c:	333c      	adds	r3, #60	; 0x3c
 802064e:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8020650:	2300      	movs	r3, #0
 8020652:	627b      	str	r3, [r7, #36]	; 0x24
 8020654:	e019      	b.n	802068a <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8020656:	230f      	movs	r3, #15
 8020658:	18fb      	adds	r3, r7, r3
 802065a:	781a      	ldrb	r2, [r3, #0]
 802065c:	0013      	movs	r3, r2
 802065e:	00db      	lsls	r3, r3, #3
 8020660:	1a9b      	subs	r3, r3, r2
 8020662:	009b      	lsls	r3, r3, #2
 8020664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020666:	189b      	adds	r3, r3, r2
 8020668:	3308      	adds	r3, #8
 802066a:	009a      	lsls	r2, r3, #2
 802066c:	4b26      	ldr	r3, [pc, #152]	; (8020708 <GUI_SaveInfo+0x1d8>)
 802066e:	18d3      	adds	r3, r2, r3
 8020670:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8020672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020674:	009b      	lsls	r3, r3, #2
 8020676:	68ba      	ldr	r2, [r7, #8]
 8020678:	18d1      	adds	r1, r2, r3
 802067a:	69bb      	ldr	r3, [r7, #24]
 802067c:	2204      	movs	r2, #4
 802067e:	0018      	movs	r0, r3
 8020680:	f003 f87c 	bl	802377c <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8020684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020686:	3301      	adds	r3, #1
 8020688:	627b      	str	r3, [r7, #36]	; 0x24
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	089b      	lsrs	r3, r3, #2
 802068e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020690:	429a      	cmp	r2, r3
 8020692:	d3e0      	bcc.n	8020656 <GUI_SaveInfo+0x126>
        }
      }
      break;
 8020694:	e02f      	b.n	80206f6 <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	2b04      	cmp	r3, #4
 802069a:	d12e      	bne.n	80206fa <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 802069c:	230f      	movs	r3, #15
 802069e:	18fb      	adds	r3, r7, r3
 80206a0:	781a      	ldrb	r2, [r3, #0]
 80206a2:	0013      	movs	r3, r2
 80206a4:	00db      	lsls	r3, r3, #3
 80206a6:	1a9b      	subs	r3, r3, r2
 80206a8:	011b      	lsls	r3, r3, #4
 80206aa:	3350      	adds	r3, #80	; 0x50
 80206ac:	001a      	movs	r2, r3
 80206ae:	4b16      	ldr	r3, [pc, #88]	; (8020708 <GUI_SaveInfo+0x1d8>)
 80206b0:	18d3      	adds	r3, r2, r3
 80206b2:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 80206b4:	687a      	ldr	r2, [r7, #4]
 80206b6:	68b9      	ldr	r1, [r7, #8]
 80206b8:	69fb      	ldr	r3, [r7, #28]
 80206ba:	0018      	movs	r0, r3
 80206bc:	f003 f85e 	bl	802377c <memcpy>
      }
      break;
 80206c0:	e01b      	b.n	80206fa <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 80206c2:	230f      	movs	r3, #15
 80206c4:	18fb      	adds	r3, r7, r3
 80206c6:	781a      	ldrb	r2, [r3, #0]
 80206c8:	0013      	movs	r3, r2
 80206ca:	00db      	lsls	r3, r3, #3
 80206cc:	1a9b      	subs	r3, r3, r2
 80206ce:	011b      	lsls	r3, r3, #4
 80206d0:	3350      	adds	r3, #80	; 0x50
 80206d2:	001a      	movs	r2, r3
 80206d4:	4b0c      	ldr	r3, [pc, #48]	; (8020708 <GUI_SaveInfo+0x1d8>)
 80206d6:	18d3      	adds	r3, r2, r3
 80206d8:	3304      	adds	r3, #4
 80206da:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 80206dc:	687a      	ldr	r2, [r7, #4]
 80206de:	68b9      	ldr	r1, [r7, #8]
 80206e0:	6a3b      	ldr	r3, [r7, #32]
 80206e2:	0018      	movs	r0, r3
 80206e4:	f003 f84a 	bl	802377c <memcpy>
      break;
 80206e8:	e008      	b.n	80206fc <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 80206ea:	46c0      	nop			; (mov r8, r8)
 80206ec:	e006      	b.n	80206fc <GUI_SaveInfo+0x1cc>
      break;
 80206ee:	46c0      	nop			; (mov r8, r8)
 80206f0:	e004      	b.n	80206fc <GUI_SaveInfo+0x1cc>
      break;
 80206f2:	46c0      	nop			; (mov r8, r8)
 80206f4:	e002      	b.n	80206fc <GUI_SaveInfo+0x1cc>
      break;
 80206f6:	46c0      	nop			; (mov r8, r8)
 80206f8:	e000      	b.n	80206fc <GUI_SaveInfo+0x1cc>
      break;
 80206fa:	46c0      	nop			; (mov r8, r8)
  }
}
 80206fc:	46c0      	nop			; (mov r8, r8)
 80206fe:	46bd      	mov	sp, r7
 8020700:	b00b      	add	sp, #44	; 0x2c
 8020702:	bd90      	pop	{r4, r7, pc}
 8020704:	080252e4 	.word	0x080252e4
 8020708:	20004ba0 	.word	0x20004ba0

0802070c <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 802070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802070e:	b091      	sub	sp, #68	; 0x44
 8020710:	af00      	add	r7, sp, #0
 8020712:	0002      	movs	r2, r0
 8020714:	6039      	str	r1, [r7, #0]
 8020716:	1dfb      	adds	r3, r7, #7
 8020718:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 802071a:	1dfb      	adds	r3, r7, #7
 802071c:	781b      	ldrb	r3, [r3, #0]
 802071e:	015b      	lsls	r3, r3, #5
 8020720:	b25b      	sxtb	r3, r3
 8020722:	2203      	movs	r2, #3
 8020724:	4313      	orrs	r3, r2
 8020726:	b25b      	sxtb	r3, r3
 8020728:	b2d9      	uxtb	r1, r3
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	2280      	movs	r2, #128	; 0x80
 802072e:	0052      	lsls	r2, r2, #1
 8020730:	2028      	movs	r0, #40	; 0x28
 8020732:	1838      	adds	r0, r7, r0
 8020734:	f7fe fb43 	bl	801edbe <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 8020738:	1dfb      	adds	r3, r7, #7
 802073a:	781b      	ldrb	r3, [r3, #0]
 802073c:	2b00      	cmp	r3, #0
 802073e:	d163      	bne.n	8020808 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8020740:	4bc2      	ldr	r3, [pc, #776]	; (8020a4c <Send_DpmInitCnf+0x340>)
 8020742:	681b      	ldr	r3, [r3, #0]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d005      	beq.n	8020754 <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8020748:	4bc0      	ldr	r3, [pc, #768]	; (8020a4c <Send_DpmInitCnf+0x340>)
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	4798      	blx	r3
 802074e:	0003      	movs	r3, r0
 8020750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020752:	e001      	b.n	8020758 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 8020754:	4bbe      	ldr	r3, [pc, #760]	; (8020a50 <Send_DpmInitCnf+0x344>)
 8020756:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8020758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802075a:	0018      	movs	r0, r3
 802075c:	f7e5 fd36 	bl	80061cc <strlen>
 8020760:	0003      	movs	r3, r0
 8020762:	b29a      	uxth	r2, r3
 8020764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020766:	2128      	movs	r1, #40	; 0x28
 8020768:	1878      	adds	r0, r7, r1
 802076a:	2100      	movs	r1, #0
 802076c:	f7fe fb8a 	bl	801ee84 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 8020770:	4bb6      	ldr	r3, [pc, #728]	; (8020a4c <Send_DpmInitCnf+0x340>)
 8020772:	681b      	ldr	r3, [r3, #0]
 8020774:	2b00      	cmp	r3, #0
 8020776:	d005      	beq.n	8020784 <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 8020778:	4bb6      	ldr	r3, [pc, #728]	; (8020a54 <Send_DpmInitCnf+0x348>)
 802077a:	681b      	ldr	r3, [r3, #0]
 802077c:	4798      	blx	r3
 802077e:	0003      	movs	r3, r0
 8020780:	63bb      	str	r3, [r7, #56]	; 0x38
 8020782:	e001      	b.n	8020788 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8020784:	4bb2      	ldr	r3, [pc, #712]	; (8020a50 <Send_DpmInitCnf+0x344>)
 8020786:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8020788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802078a:	0018      	movs	r0, r3
 802078c:	f7e5 fd1e 	bl	80061cc <strlen>
 8020790:	0003      	movs	r3, r0
 8020792:	b29a      	uxth	r2, r3
 8020794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020796:	2428      	movs	r4, #40	; 0x28
 8020798:	1938      	adds	r0, r7, r4
 802079a:	2101      	movs	r1, #1
 802079c:	f7fe fb72 	bl	801ee84 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 80207a0:	2124      	movs	r1, #36	; 0x24
 80207a2:	187b      	adds	r3, r7, r1
 80207a4:	2201      	movs	r2, #1
 80207a6:	701a      	strb	r2, [r3, #0]
 80207a8:	187b      	adds	r3, r7, r1
 80207aa:	1938      	adds	r0, r7, r4
 80207ac:	2201      	movs	r2, #1
 80207ae:	2102      	movs	r1, #2
 80207b0:	f7fe fb68 	bl	801ee84 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 80207b4:	251c      	movs	r5, #28
 80207b6:	197b      	adds	r3, r7, r5
 80207b8:	4aa7      	ldr	r2, [pc, #668]	; (8020a58 <Send_DpmInitCnf+0x34c>)
 80207ba:	ca03      	ldmia	r2!, {r0, r1}
 80207bc:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 80207be:	197b      	adds	r3, r7, r5
 80207c0:	1938      	adds	r0, r7, r4
 80207c2:	2208      	movs	r2, #8
 80207c4:	2103      	movs	r1, #3
 80207c6:	f7fe fb5d 	bl	801ee84 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 80207ca:	2118      	movs	r1, #24
 80207cc:	187b      	adds	r3, r7, r1
 80207ce:	2200      	movs	r2, #0
 80207d0:	701a      	strb	r2, [r3, #0]
 80207d2:	187b      	adds	r3, r7, r1
 80207d4:	1938      	adds	r0, r7, r4
 80207d6:	2201      	movs	r2, #1
 80207d8:	211e      	movs	r1, #30
 80207da:	f7fe fb53 	bl	801ee84 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 80207de:	2114      	movs	r1, #20
 80207e0:	187b      	adds	r3, r7, r1
 80207e2:	2200      	movs	r2, #0
 80207e4:	701a      	strb	r2, [r3, #0]
 80207e6:	187b      	adds	r3, r7, r1
 80207e8:	1938      	adds	r0, r7, r4
 80207ea:	2201      	movs	r2, #1
 80207ec:	211e      	movs	r1, #30
 80207ee:	f7fe fb49 	bl	801ee84 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 80207f2:	4b9a      	ldr	r3, [pc, #616]	; (8020a5c <Send_DpmInitCnf+0x350>)
 80207f4:	1938      	adds	r0, r7, r4
 80207f6:	2201      	movs	r2, #1
 80207f8:	211f      	movs	r1, #31
 80207fa:	f7fe fb43 	bl	801ee84 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 80207fe:	193b      	adds	r3, r7, r4
 8020800:	0018      	movs	r0, r3
 8020802:	f7fe fca1 	bl	801f148 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 8020806:	e11c      	b.n	8020a42 <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 8020808:	2637      	movs	r6, #55	; 0x37
 802080a:	19bb      	adds	r3, r7, r6
 802080c:	1dfa      	adds	r2, r7, #7
 802080e:	7812      	ldrb	r2, [r2, #0]
 8020810:	3a01      	subs	r2, #1
 8020812:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8020814:	19bb      	adds	r3, r7, r6
 8020816:	781a      	ldrb	r2, [r3, #0]
 8020818:	4991      	ldr	r1, [pc, #580]	; (8020a60 <Send_DpmInitCnf+0x354>)
 802081a:	0013      	movs	r3, r2
 802081c:	005b      	lsls	r3, r3, #1
 802081e:	189b      	adds	r3, r3, r2
 8020820:	009b      	lsls	r3, r3, #2
 8020822:	18cb      	adds	r3, r1, r3
 8020824:	791b      	ldrb	r3, [r3, #4]
 8020826:	079b      	lsls	r3, r3, #30
 8020828:	0f9b      	lsrs	r3, r3, #30
 802082a:	b2db      	uxtb	r3, r3
 802082c:	b29a      	uxth	r2, r3
 802082e:	2412      	movs	r4, #18
 8020830:	193b      	adds	r3, r7, r4
 8020832:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 8020834:	2110      	movs	r1, #16
 8020836:	187b      	adds	r3, r7, r1
 8020838:	2212      	movs	r2, #18
 802083a:	701a      	strb	r2, [r3, #0]
 802083c:	193b      	adds	r3, r7, r4
 802083e:	881b      	ldrh	r3, [r3, #0]
 8020840:	b2da      	uxtb	r2, r3
 8020842:	187b      	adds	r3, r7, r1
 8020844:	705a      	strb	r2, [r3, #1]
 8020846:	187b      	adds	r3, r7, r1
 8020848:	2528      	movs	r5, #40	; 0x28
 802084a:	1978      	adds	r0, r7, r5
 802084c:	2202      	movs	r2, #2
 802084e:	2104      	movs	r1, #4
 8020850:	f7fe fb18 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 8020854:	19bb      	adds	r3, r7, r6
 8020856:	781a      	ldrb	r2, [r3, #0]
 8020858:	4981      	ldr	r1, [pc, #516]	; (8020a60 <Send_DpmInitCnf+0x354>)
 802085a:	2008      	movs	r0, #8
 802085c:	0013      	movs	r3, r2
 802085e:	005b      	lsls	r3, r3, #1
 8020860:	189b      	adds	r3, r3, r2
 8020862:	009b      	lsls	r3, r3, #2
 8020864:	18cb      	adds	r3, r1, r3
 8020866:	181b      	adds	r3, r3, r0
 8020868:	781b      	ldrb	r3, [r3, #0]
 802086a:	07db      	lsls	r3, r3, #31
 802086c:	0fdb      	lsrs	r3, r3, #31
 802086e:	b2db      	uxtb	r3, r3
 8020870:	b29a      	uxth	r2, r3
 8020872:	193b      	adds	r3, r7, r4
 8020874:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 8020876:	193b      	adds	r3, r7, r4
 8020878:	1978      	adds	r0, r7, r5
 802087a:	2201      	movs	r2, #1
 802087c:	2106      	movs	r1, #6
 802087e:	f7fe fb01 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 8020882:	19bb      	adds	r3, r7, r6
 8020884:	781a      	ldrb	r2, [r3, #0]
 8020886:	4976      	ldr	r1, [pc, #472]	; (8020a60 <Send_DpmInitCnf+0x354>)
 8020888:	0013      	movs	r3, r2
 802088a:	005b      	lsls	r3, r3, #1
 802088c:	189b      	adds	r3, r3, r2
 802088e:	009b      	lsls	r3, r3, #2
 8020890:	18cb      	adds	r3, r1, r3
 8020892:	795b      	ldrb	r3, [r3, #5]
 8020894:	06db      	lsls	r3, r3, #27
 8020896:	0fdb      	lsrs	r3, r3, #31
 8020898:	b2db      	uxtb	r3, r3
 802089a:	b29a      	uxth	r2, r3
 802089c:	193b      	adds	r3, r7, r4
 802089e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 80208a0:	193b      	adds	r3, r7, r4
 80208a2:	1978      	adds	r0, r7, r5
 80208a4:	2201      	movs	r2, #1
 80208a6:	2107      	movs	r1, #7
 80208a8:	f7fe faec 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 80208ac:	19bb      	adds	r3, r7, r6
 80208ae:	781b      	ldrb	r3, [r3, #0]
 80208b0:	4a6c      	ldr	r2, [pc, #432]	; (8020a64 <Send_DpmInitCnf+0x358>)
 80208b2:	2168      	movs	r1, #104	; 0x68
 80208b4:	2074      	movs	r0, #116	; 0x74
 80208b6:	4343      	muls	r3, r0
 80208b8:	18d3      	adds	r3, r2, r3
 80208ba:	185b      	adds	r3, r3, r1
 80208bc:	78db      	ldrb	r3, [r3, #3]
 80208be:	07db      	lsls	r3, r3, #31
 80208c0:	0fdb      	lsrs	r3, r3, #31
 80208c2:	b2db      	uxtb	r3, r3
 80208c4:	b29a      	uxth	r2, r3
 80208c6:	193b      	adds	r3, r7, r4
 80208c8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 80208ca:	193b      	adds	r3, r7, r4
 80208cc:	1978      	adds	r0, r7, r5
 80208ce:	2201      	movs	r2, #1
 80208d0:	2108      	movs	r1, #8
 80208d2:	f7fe fad7 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 80208d6:	19bb      	adds	r3, r7, r6
 80208d8:	781b      	ldrb	r3, [r3, #0]
 80208da:	4a62      	ldr	r2, [pc, #392]	; (8020a64 <Send_DpmInitCnf+0x358>)
 80208dc:	2168      	movs	r1, #104	; 0x68
 80208de:	2074      	movs	r0, #116	; 0x74
 80208e0:	4343      	muls	r3, r0
 80208e2:	18d3      	adds	r3, r2, r3
 80208e4:	185b      	adds	r3, r3, r1
 80208e6:	78db      	ldrb	r3, [r3, #3]
 80208e8:	079b      	lsls	r3, r3, #30
 80208ea:	0fdb      	lsrs	r3, r3, #31
 80208ec:	b2db      	uxtb	r3, r3
 80208ee:	b29a      	uxth	r2, r3
 80208f0:	193b      	adds	r3, r7, r4
 80208f2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 80208f4:	193b      	adds	r3, r7, r4
 80208f6:	1978      	adds	r0, r7, r5
 80208f8:	2201      	movs	r2, #1
 80208fa:	2109      	movs	r1, #9
 80208fc:	f7fe fac2 	bl	801ee84 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8020900:	210c      	movs	r1, #12
 8020902:	187b      	adds	r3, r7, r1
 8020904:	2200      	movs	r2, #0
 8020906:	701a      	strb	r2, [r3, #0]
 8020908:	187b      	adds	r3, r7, r1
 802090a:	1978      	adds	r0, r7, r5
 802090c:	2201      	movs	r2, #1
 802090e:	210b      	movs	r1, #11
 8020910:	f7fe fab8 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8020914:	19bb      	adds	r3, r7, r6
 8020916:	781a      	ldrb	r2, [r3, #0]
 8020918:	4951      	ldr	r1, [pc, #324]	; (8020a60 <Send_DpmInitCnf+0x354>)
 802091a:	0013      	movs	r3, r2
 802091c:	005b      	lsls	r3, r3, #1
 802091e:	189b      	adds	r3, r3, r2
 8020920:	009b      	lsls	r3, r3, #2
 8020922:	18cb      	adds	r3, r1, r3
 8020924:	795b      	ldrb	r3, [r3, #5]
 8020926:	071b      	lsls	r3, r3, #28
 8020928:	0f9b      	lsrs	r3, r3, #30
 802092a:	b2db      	uxtb	r3, r3
 802092c:	b29a      	uxth	r2, r3
 802092e:	193b      	adds	r3, r7, r4
 8020930:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8020932:	193b      	adds	r3, r7, r4
 8020934:	1978      	adds	r0, r7, r5
 8020936:	2201      	movs	r2, #1
 8020938:	2110      	movs	r1, #16
 802093a:	f7fe faa3 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 802093e:	19bb      	adds	r3, r7, r6
 8020940:	781b      	ldrb	r3, [r3, #0]
 8020942:	4a48      	ldr	r2, [pc, #288]	; (8020a64 <Send_DpmInitCnf+0x358>)
 8020944:	2168      	movs	r1, #104	; 0x68
 8020946:	2074      	movs	r0, #116	; 0x74
 8020948:	4343      	muls	r3, r0
 802094a:	18d3      	adds	r3, r2, r3
 802094c:	185b      	adds	r3, r3, r1
 802094e:	78db      	ldrb	r3, [r3, #3]
 8020950:	06db      	lsls	r3, r3, #27
 8020952:	0f9b      	lsrs	r3, r3, #30
 8020954:	b2db      	uxtb	r3, r3
 8020956:	b29a      	uxth	r2, r3
 8020958:	193b      	adds	r3, r7, r4
 802095a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 802095c:	193b      	adds	r3, r7, r4
 802095e:	1978      	adds	r0, r7, r5
 8020960:	2201      	movs	r2, #1
 8020962:	2112      	movs	r1, #18
 8020964:	f7fe fa8e 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8020968:	19bb      	adds	r3, r7, r6
 802096a:	781b      	ldrb	r3, [r3, #0]
 802096c:	4a3d      	ldr	r2, [pc, #244]	; (8020a64 <Send_DpmInitCnf+0x358>)
 802096e:	2168      	movs	r1, #104	; 0x68
 8020970:	2074      	movs	r0, #116	; 0x74
 8020972:	4343      	muls	r3, r0
 8020974:	18d3      	adds	r3, r2, r3
 8020976:	185b      	adds	r3, r3, r1
 8020978:	78db      	ldrb	r3, [r3, #3]
 802097a:	069b      	lsls	r3, r3, #26
 802097c:	0fdb      	lsrs	r3, r3, #31
 802097e:	b2db      	uxtb	r3, r3
 8020980:	b29a      	uxth	r2, r3
 8020982:	193b      	adds	r3, r7, r4
 8020984:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8020986:	193b      	adds	r3, r7, r4
 8020988:	1978      	adds	r0, r7, r5
 802098a:	2201      	movs	r2, #1
 802098c:	2113      	movs	r1, #19
 802098e:	f7fe fa79 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8020992:	19bb      	adds	r3, r7, r6
 8020994:	781b      	ldrb	r3, [r3, #0]
 8020996:	4a33      	ldr	r2, [pc, #204]	; (8020a64 <Send_DpmInitCnf+0x358>)
 8020998:	2168      	movs	r1, #104	; 0x68
 802099a:	2074      	movs	r0, #116	; 0x74
 802099c:	4343      	muls	r3, r0
 802099e:	18d3      	adds	r3, r2, r3
 80209a0:	185b      	adds	r3, r3, r1
 80209a2:	78db      	ldrb	r3, [r3, #3]
 80209a4:	065b      	lsls	r3, r3, #25
 80209a6:	0fdb      	lsrs	r3, r3, #31
 80209a8:	b2db      	uxtb	r3, r3
 80209aa:	b29a      	uxth	r2, r3
 80209ac:	193b      	adds	r3, r7, r4
 80209ae:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 80209b0:	193b      	adds	r3, r7, r4
 80209b2:	1978      	adds	r0, r7, r5
 80209b4:	2201      	movs	r2, #1
 80209b6:	2114      	movs	r1, #20
 80209b8:	f7fe fa64 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 80209bc:	19bb      	adds	r3, r7, r6
 80209be:	781b      	ldrb	r3, [r3, #0]
 80209c0:	4a28      	ldr	r2, [pc, #160]	; (8020a64 <Send_DpmInitCnf+0x358>)
 80209c2:	2168      	movs	r1, #104	; 0x68
 80209c4:	2074      	movs	r0, #116	; 0x74
 80209c6:	4343      	muls	r3, r0
 80209c8:	18d3      	adds	r3, r2, r3
 80209ca:	185b      	adds	r3, r3, r1
 80209cc:	78db      	ldrb	r3, [r3, #3]
 80209ce:	061b      	lsls	r3, r3, #24
 80209d0:	0fdb      	lsrs	r3, r3, #31
 80209d2:	b2db      	uxtb	r3, r3
 80209d4:	b29a      	uxth	r2, r3
 80209d6:	193b      	adds	r3, r7, r4
 80209d8:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 80209da:	193b      	adds	r3, r7, r4
 80209dc:	1978      	adds	r0, r7, r5
 80209de:	2201      	movs	r2, #1
 80209e0:	2115      	movs	r1, #21
 80209e2:	f7fe fa4f 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 80209e6:	19bb      	adds	r3, r7, r6
 80209e8:	781b      	ldrb	r3, [r3, #0]
 80209ea:	4a1e      	ldr	r2, [pc, #120]	; (8020a64 <Send_DpmInitCnf+0x358>)
 80209ec:	2168      	movs	r1, #104	; 0x68
 80209ee:	2074      	movs	r0, #116	; 0x74
 80209f0:	4343      	muls	r3, r0
 80209f2:	18d3      	adds	r3, r2, r3
 80209f4:	185b      	adds	r3, r3, r1
 80209f6:	78db      	ldrb	r3, [r3, #3]
 80209f8:	075b      	lsls	r3, r3, #29
 80209fa:	0fdb      	lsrs	r3, r3, #31
 80209fc:	b2db      	uxtb	r3, r3
 80209fe:	b29a      	uxth	r2, r3
 8020a00:	193b      	adds	r3, r7, r4
 8020a02:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8020a04:	193b      	adds	r3, r7, r4
 8020a06:	1978      	adds	r0, r7, r5
 8020a08:	2201      	movs	r2, #1
 8020a0a:	2116      	movs	r1, #22
 8020a0c:	f7fe fa3a 	bl	801ee84 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8020a10:	19bb      	adds	r3, r7, r6
 8020a12:	781b      	ldrb	r3, [r3, #0]
 8020a14:	4a13      	ldr	r2, [pc, #76]	; (8020a64 <Send_DpmInitCnf+0x358>)
 8020a16:	2168      	movs	r1, #104	; 0x68
 8020a18:	2074      	movs	r0, #116	; 0x74
 8020a1a:	4343      	muls	r3, r0
 8020a1c:	18d3      	adds	r3, r2, r3
 8020a1e:	185b      	adds	r3, r3, r1
 8020a20:	791b      	ldrb	r3, [r3, #4]
 8020a22:	07db      	lsls	r3, r3, #31
 8020a24:	0fdb      	lsrs	r3, r3, #31
 8020a26:	b2db      	uxtb	r3, r3
 8020a28:	b29a      	uxth	r2, r3
 8020a2a:	193b      	adds	r3, r7, r4
 8020a2c:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8020a2e:	193b      	adds	r3, r7, r4
 8020a30:	1978      	adds	r0, r7, r5
 8020a32:	2201      	movs	r2, #1
 8020a34:	2117      	movs	r1, #23
 8020a36:	f7fe fa25 	bl	801ee84 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8020a3a:	197b      	adds	r3, r7, r5
 8020a3c:	0018      	movs	r0, r3
 8020a3e:	f7fe fb83 	bl	801f148 <TLV_deinit_encode>
}
 8020a42:	46c0      	nop			; (mov r8, r8)
 8020a44:	46bd      	mov	sp, r7
 8020a46:	b011      	add	sp, #68	; 0x44
 8020a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a4a:	46c0      	nop			; (mov r8, r8)
 8020a4c:	20004b8c 	.word	0x20004b8c
 8020a50:	08024e68 	.word	0x08024e68
 8020a54:	20004b90 	.word	0x20004b90
 8020a58:	08024e70 	.word	0x08024e70
 8020a5c:	20004b81 	.word	0x20004b81
 8020a60:	200000f8 	.word	0x200000f8
 8020a64:	2000010c 	.word	0x2000010c

08020a68 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8020a68:	b5b0      	push	{r4, r5, r7, lr}
 8020a6a:	b090      	sub	sp, #64	; 0x40
 8020a6c:	af00      	add	r7, sp, #0
 8020a6e:	60b9      	str	r1, [r7, #8]
 8020a70:	607a      	str	r2, [r7, #4]
 8020a72:	240f      	movs	r4, #15
 8020a74:	193b      	adds	r3, r7, r4
 8020a76:	1c02      	adds	r2, r0, #0
 8020a78:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8020a7a:	233f      	movs	r3, #63	; 0x3f
 8020a7c:	18fb      	adds	r3, r7, r3
 8020a7e:	2202      	movs	r2, #2
 8020a80:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8020a82:	68ba      	ldr	r2, [r7, #8]
 8020a84:	252c      	movs	r5, #44	; 0x2c
 8020a86:	197b      	adds	r3, r7, r5
 8020a88:	0011      	movs	r1, r2
 8020a8a:	0018      	movs	r0, r3
 8020a8c:	f7fe fb6e 	bl	801f16c <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8020a90:	193b      	adds	r3, r7, r4
 8020a92:	781b      	ldrb	r3, [r3, #0]
 8020a94:	3301      	adds	r3, #1
 8020a96:	015b      	lsls	r3, r3, #5
 8020a98:	b25b      	sxtb	r3, r3
 8020a9a:	220a      	movs	r2, #10
 8020a9c:	4313      	orrs	r3, r2
 8020a9e:	b25b      	sxtb	r3, r3
 8020aa0:	b2d9      	uxtb	r1, r3
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	2280      	movs	r2, #128	; 0x80
 8020aa6:	0052      	lsls	r2, r2, #1
 8020aa8:	2020      	movs	r0, #32
 8020aaa:	1838      	adds	r0, r7, r0
 8020aac:	f7fe f987 	bl	801edbe <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020ab0:	2318      	movs	r3, #24
 8020ab2:	18fb      	adds	r3, r7, r3
 8020ab4:	221c      	movs	r2, #28
 8020ab6:	18ba      	adds	r2, r7, r2
 8020ab8:	241e      	movs	r4, #30
 8020aba:	1939      	adds	r1, r7, r4
 8020abc:	1978      	adds	r0, r7, r5
 8020abe:	f7fe fb81 	bl	801f1c4 <TLV_get>
  switch (tag)
 8020ac2:	193b      	adds	r3, r7, r4
 8020ac4:	781b      	ldrb	r3, [r3, #0]
 8020ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8020ac8:	d900      	bls.n	8020acc <Request_MessageReq+0x64>
 8020aca:	e2a8      	b.n	802101e <Request_MessageReq+0x5b6>
 8020acc:	009a      	lsls	r2, r3, #2
 8020ace:	4bdb      	ldr	r3, [pc, #876]	; (8020e3c <Request_MessageReq+0x3d4>)
 8020ad0:	18d3      	adds	r3, r2, r3
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8020ad6:	233f      	movs	r3, #63	; 0x3f
 8020ad8:	18fc      	adds	r4, r7, r3
 8020ada:	230f      	movs	r3, #15
 8020adc:	18fb      	adds	r3, r7, r3
 8020ade:	781b      	ldrb	r3, [r3, #0]
 8020ae0:	0018      	movs	r0, r3
 8020ae2:	f7fa fe1d 	bl	801b720 <USBPD_DPM_RequestGotoMin>
 8020ae6:	0003      	movs	r3, r0
 8020ae8:	7023      	strb	r3, [r4, #0]
      break;
 8020aea:	e2b7      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8020aec:	233f      	movs	r3, #63	; 0x3f
 8020aee:	18fc      	adds	r4, r7, r3
 8020af0:	230f      	movs	r3, #15
 8020af2:	18fb      	adds	r3, r7, r3
 8020af4:	781b      	ldrb	r3, [r3, #0]
 8020af6:	0018      	movs	r0, r3
 8020af8:	f7fa fe58 	bl	801b7ac <USBPD_DPM_RequestPing>
 8020afc:	0003      	movs	r3, r0
 8020afe:	7023      	strb	r3, [r4, #0]
      break;
 8020b00:	e2ac      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8020b02:	233f      	movs	r3, #63	; 0x3f
 8020b04:	18fc      	adds	r4, r7, r3
 8020b06:	230f      	movs	r3, #15
 8020b08:	18fb      	adds	r3, r7, r3
 8020b0a:	781b      	ldrb	r3, [r3, #0]
 8020b0c:	0018      	movs	r0, r3
 8020b0e:	f7fa ff55 	bl	801b9bc <USBPD_DPM_RequestGetSourceCapability>
 8020b12:	0003      	movs	r3, r0
 8020b14:	7023      	strb	r3, [r4, #0]
      break;
 8020b16:	e2a1      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8020b18:	233f      	movs	r3, #63	; 0x3f
 8020b1a:	18fc      	adds	r4, r7, r3
 8020b1c:	230f      	movs	r3, #15
 8020b1e:	18fb      	adds	r3, r7, r3
 8020b20:	781b      	ldrb	r3, [r3, #0]
 8020b22:	0018      	movs	r0, r3
 8020b24:	f7fa ff90 	bl	801ba48 <USBPD_DPM_RequestGetSinkCapability>
 8020b28:	0003      	movs	r3, r0
 8020b2a:	7023      	strb	r3, [r4, #0]
      break;
 8020b2c:	e296      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8020b2e:	233f      	movs	r3, #63	; 0x3f
 8020b30:	18fc      	adds	r4, r7, r3
 8020b32:	230f      	movs	r3, #15
 8020b34:	18fb      	adds	r3, r7, r3
 8020b36:	781b      	ldrb	r3, [r3, #0]
 8020b38:	0018      	movs	r0, r3
 8020b3a:	f7fa ffcb 	bl	801bad4 <USBPD_DPM_RequestDataRoleSwap>
 8020b3e:	0003      	movs	r3, r0
 8020b40:	7023      	strb	r3, [r4, #0]
      break;
 8020b42:	e28b      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8020b44:	233f      	movs	r3, #63	; 0x3f
 8020b46:	18fc      	adds	r4, r7, r3
 8020b48:	230f      	movs	r3, #15
 8020b4a:	18fb      	adds	r3, r7, r3
 8020b4c:	781b      	ldrb	r3, [r3, #0]
 8020b4e:	0018      	movs	r0, r3
 8020b50:	f7fb f806 	bl	801bb60 <USBPD_DPM_RequestPowerRoleSwap>
 8020b54:	0003      	movs	r3, r0
 8020b56:	7023      	strb	r3, [r4, #0]
      break;
 8020b58:	e280      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8020b5a:	233f      	movs	r3, #63	; 0x3f
 8020b5c:	18fc      	adds	r4, r7, r3
 8020b5e:	230f      	movs	r3, #15
 8020b60:	18fb      	adds	r3, r7, r3
 8020b62:	781b      	ldrb	r3, [r3, #0]
 8020b64:	0018      	movs	r0, r3
 8020b66:	f7fb f831 	bl	801bbcc <USBPD_DPM_RequestVconnSwap>
 8020b6a:	0003      	movs	r3, r0
 8020b6c:	7023      	strb	r3, [r4, #0]
      break;
 8020b6e:	e275      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8020b70:	233f      	movs	r3, #63	; 0x3f
 8020b72:	18fc      	adds	r4, r7, r3
 8020b74:	230f      	movs	r3, #15
 8020b76:	18fb      	adds	r3, r7, r3
 8020b78:	781b      	ldrb	r3, [r3, #0]
 8020b7a:	0018      	movs	r0, r3
 8020b7c:	f7fb f8b6 	bl	801bcec <USBPD_DPM_RequestSourceCapability>
 8020b80:	0003      	movs	r3, r0
 8020b82:	7023      	strb	r3, [r4, #0]
      break;
 8020b84:	e26a      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8020b86:	233c      	movs	r3, #60	; 0x3c
 8020b88:	18fb      	adds	r3, r7, r3
 8020b8a:	2200      	movs	r2, #0
 8020b8c:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 8020b8e:	233b      	movs	r3, #59	; 0x3b
 8020b90:	18fb      	adds	r3, r7, r3
 8020b92:	2200      	movs	r2, #0
 8020b94:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 8020b96:	233a      	movs	r3, #58	; 0x3a
 8020b98:	18fb      	adds	r3, r7, r3
 8020b9a:	2200      	movs	r2, #0
 8020b9c:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020b9e:	211c      	movs	r1, #28
 8020ba0:	187b      	adds	r3, r7, r1
 8020ba2:	881a      	ldrh	r2, [r3, #0]
 8020ba4:	2380      	movs	r3, #128	; 0x80
 8020ba6:	005b      	lsls	r3, r3, #1
 8020ba8:	429a      	cmp	r2, r3
 8020baa:	d900      	bls.n	8020bae <Request_MessageReq+0x146>
 8020bac:	e239      	b.n	8021022 <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020bae:	2318      	movs	r3, #24
 8020bb0:	18fb      	adds	r3, r7, r3
 8020bb2:	187a      	adds	r2, r7, r1
 8020bb4:	211e      	movs	r1, #30
 8020bb6:	1879      	adds	r1, r7, r1
 8020bb8:	202c      	movs	r0, #44	; 0x2c
 8020bba:	1838      	adds	r0, r7, r0
 8020bbc:	f7fe fb02 	bl	801f1c4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8020bc0:	e02c      	b.n	8020c1c <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 8020bc2:	213b      	movs	r1, #59	; 0x3b
 8020bc4:	187b      	adds	r3, r7, r1
 8020bc6:	781a      	ldrb	r2, [r3, #0]
 8020bc8:	187b      	adds	r3, r7, r1
 8020bca:	3201      	adds	r2, #1
 8020bcc:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8020bce:	231e      	movs	r3, #30
 8020bd0:	18fb      	adds	r3, r7, r3
 8020bd2:	781b      	ldrb	r3, [r3, #0]
 8020bd4:	2b01      	cmp	r3, #1
 8020bd6:	d105      	bne.n	8020be4 <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 8020bd8:	69ba      	ldr	r2, [r7, #24]
 8020bda:	233a      	movs	r3, #58	; 0x3a
 8020bdc:	18fb      	adds	r3, r7, r3
 8020bde:	7812      	ldrb	r2, [r2, #0]
 8020be0:	701a      	strb	r2, [r3, #0]
 8020be2:	e011      	b.n	8020c08 <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020be4:	231e      	movs	r3, #30
 8020be6:	18fb      	adds	r3, r7, r3
 8020be8:	781b      	ldrb	r3, [r3, #0]
 8020bea:	2b02      	cmp	r3, #2
 8020bec:	d10c      	bne.n	8020c08 <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 8020bee:	69bb      	ldr	r3, [r7, #24]
 8020bf0:	781b      	ldrb	r3, [r3, #0]
 8020bf2:	b299      	uxth	r1, r3
 8020bf4:	69bb      	ldr	r3, [r7, #24]
 8020bf6:	3301      	adds	r3, #1
 8020bf8:	781b      	ldrb	r3, [r3, #0]
 8020bfa:	b29b      	uxth	r3, r3
 8020bfc:	021b      	lsls	r3, r3, #8
 8020bfe:	b29a      	uxth	r2, r3
 8020c00:	233c      	movs	r3, #60	; 0x3c
 8020c02:	18fb      	adds	r3, r7, r3
 8020c04:	188a      	adds	r2, r1, r2
 8020c06:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020c08:	2318      	movs	r3, #24
 8020c0a:	18fb      	adds	r3, r7, r3
 8020c0c:	221c      	movs	r2, #28
 8020c0e:	18ba      	adds	r2, r7, r2
 8020c10:	211e      	movs	r1, #30
 8020c12:	1879      	adds	r1, r7, r1
 8020c14:	202c      	movs	r0, #44	; 0x2c
 8020c16:	1838      	adds	r0, r7, r0
 8020c18:	f7fe fad4 	bl	801f1c4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8020c1c:	221c      	movs	r2, #28
 8020c1e:	18bb      	adds	r3, r7, r2
 8020c20:	881b      	ldrh	r3, [r3, #0]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d008      	beq.n	8020c38 <Request_MessageReq+0x1d0>
 8020c26:	18bb      	adds	r3, r7, r2
 8020c28:	881b      	ldrh	r3, [r3, #0]
 8020c2a:	2bff      	cmp	r3, #255	; 0xff
 8020c2c:	d804      	bhi.n	8020c38 <Request_MessageReq+0x1d0>
 8020c2e:	233b      	movs	r3, #59	; 0x3b
 8020c30:	18fb      	adds	r3, r7, r3
 8020c32:	781b      	ldrb	r3, [r3, #0]
 8020c34:	2b01      	cmp	r3, #1
 8020c36:	d9c4      	bls.n	8020bc2 <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 8020c38:	233b      	movs	r3, #59	; 0x3b
 8020c3a:	18fb      	adds	r3, r7, r3
 8020c3c:	781b      	ldrb	r3, [r3, #0]
 8020c3e:	2b02      	cmp	r3, #2
 8020c40:	d000      	beq.n	8020c44 <Request_MessageReq+0x1dc>
 8020c42:	e1f0      	b.n	8021026 <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8020c44:	233f      	movs	r3, #63	; 0x3f
 8020c46:	18fc      	adds	r4, r7, r3
 8020c48:	233c      	movs	r3, #60	; 0x3c
 8020c4a:	18fb      	adds	r3, r7, r3
 8020c4c:	881a      	ldrh	r2, [r3, #0]
 8020c4e:	233a      	movs	r3, #58	; 0x3a
 8020c50:	18fb      	adds	r3, r7, r3
 8020c52:	7819      	ldrb	r1, [r3, #0]
 8020c54:	230f      	movs	r3, #15
 8020c56:	18fb      	adds	r3, r7, r3
 8020c58:	781b      	ldrb	r3, [r3, #0]
 8020c5a:	0018      	movs	r0, r3
 8020c5c:	f7fa fdec 	bl	801b838 <USBPD_DPM_RequestMessageRequest>
 8020c60:	0003      	movs	r3, r0
 8020c62:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020c64:	e1df      	b.n	8021026 <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020c66:	2318      	movs	r3, #24
 8020c68:	18fb      	adds	r3, r7, r3
 8020c6a:	221c      	movs	r2, #28
 8020c6c:	18ba      	adds	r2, r7, r2
 8020c6e:	241e      	movs	r4, #30
 8020c70:	1939      	adds	r1, r7, r4
 8020c72:	202c      	movs	r0, #44	; 0x2c
 8020c74:	1838      	adds	r0, r7, r0
 8020c76:	f7fe faa5 	bl	801f1c4 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020c7a:	193b      	adds	r3, r7, r4
 8020c7c:	781b      	ldrb	r3, [r3, #0]
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	d000      	beq.n	8020c84 <Request_MessageReq+0x21c>
 8020c82:	e1d2      	b.n	802102a <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8020c84:	69bb      	ldr	r3, [r7, #24]
 8020c86:	781a      	ldrb	r2, [r3, #0]
 8020c88:	233f      	movs	r3, #63	; 0x3f
 8020c8a:	18fc      	adds	r4, r7, r3
 8020c8c:	230f      	movs	r3, #15
 8020c8e:	18fb      	adds	r3, r7, r3
 8020c90:	781b      	ldrb	r3, [r3, #0]
 8020c92:	0011      	movs	r1, r2
 8020c94:	0018      	movs	r0, r3
 8020c96:	f7fa ffdf 	bl	801bc58 <USBPD_DPM_RequestSoftReset>
 8020c9a:	0003      	movs	r3, r0
 8020c9c:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020c9e:	e1c4      	b.n	802102a <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8020ca0:	233f      	movs	r3, #63	; 0x3f
 8020ca2:	18fc      	adds	r4, r7, r3
 8020ca4:	230f      	movs	r3, #15
 8020ca6:	18fb      	adds	r3, r7, r3
 8020ca8:	781b      	ldrb	r3, [r3, #0]
 8020caa:	0018      	movs	r0, r3
 8020cac:	f7fa fcb0 	bl	801b610 <USBPD_DPM_RequestHardReset>
 8020cb0:	0003      	movs	r3, r0
 8020cb2:	7023      	strb	r3, [r4, #0]
      break;
 8020cb4:	e1d2      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8020cb6:	233f      	movs	r3, #63	; 0x3f
 8020cb8:	18fc      	adds	r4, r7, r3
 8020cba:	230f      	movs	r3, #15
 8020cbc:	18fb      	adds	r3, r7, r3
 8020cbe:	781b      	ldrb	r3, [r3, #0]
 8020cc0:	0018      	movs	r0, r3
 8020cc2:	f7fa fce9 	bl	801b698 <USBPD_DPM_RequestCableReset>
 8020cc6:	0003      	movs	r3, r0
 8020cc8:	7023      	strb	r3, [r4, #0]
      break;
 8020cca:	e1c7      	b.n	802105c <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8020ccc:	2339      	movs	r3, #57	; 0x39
 8020cce:	18fb      	adds	r3, r7, r3
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020cd4:	211c      	movs	r1, #28
 8020cd6:	187b      	adds	r3, r7, r1
 8020cd8:	881a      	ldrh	r2, [r3, #0]
 8020cda:	2380      	movs	r3, #128	; 0x80
 8020cdc:	005b      	lsls	r3, r3, #1
 8020cde:	429a      	cmp	r2, r3
 8020ce0:	d900      	bls.n	8020ce4 <Request_MessageReq+0x27c>
 8020ce2:	e1a4      	b.n	802102e <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020ce4:	2318      	movs	r3, #24
 8020ce6:	18fb      	adds	r3, r7, r3
 8020ce8:	187a      	adds	r2, r7, r1
 8020cea:	211e      	movs	r1, #30
 8020cec:	1879      	adds	r1, r7, r1
 8020cee:	202c      	movs	r0, #44	; 0x2c
 8020cf0:	1838      	adds	r0, r7, r0
 8020cf2:	f7fe fa67 	bl	801f1c4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8020cf6:	e005      	b.n	8020d04 <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 8020cf8:	2139      	movs	r1, #57	; 0x39
 8020cfa:	187b      	adds	r3, r7, r1
 8020cfc:	781a      	ldrb	r2, [r3, #0]
 8020cfe:	187b      	adds	r3, r7, r1
 8020d00:	3201      	adds	r2, #1
 8020d02:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8020d04:	221c      	movs	r2, #28
 8020d06:	18bb      	adds	r3, r7, r2
 8020d08:	881b      	ldrh	r3, [r3, #0]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d008      	beq.n	8020d20 <Request_MessageReq+0x2b8>
 8020d0e:	18bb      	adds	r3, r7, r2
 8020d10:	881b      	ldrh	r3, [r3, #0]
 8020d12:	2bff      	cmp	r3, #255	; 0xff
 8020d14:	d804      	bhi.n	8020d20 <Request_MessageReq+0x2b8>
 8020d16:	2339      	movs	r3, #57	; 0x39
 8020d18:	18fb      	adds	r3, r7, r3
 8020d1a:	781b      	ldrb	r3, [r3, #0]
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d0eb      	beq.n	8020cf8 <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 8020d20:	2339      	movs	r3, #57	; 0x39
 8020d22:	18fb      	adds	r3, r7, r3
 8020d24:	781b      	ldrb	r3, [r3, #0]
 8020d26:	2b01      	cmp	r3, #1
 8020d28:	d000      	beq.n	8020d2c <Request_MessageReq+0x2c4>
 8020d2a:	e182      	b.n	8021032 <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 8020d2c:	69b9      	ldr	r1, [r7, #24]
 8020d2e:	231c      	movs	r3, #28
 8020d30:	18fb      	adds	r3, r7, r3
 8020d32:	881a      	ldrh	r2, [r3, #0]
 8020d34:	233f      	movs	r3, #63	; 0x3f
 8020d36:	18fc      	adds	r4, r7, r3
 8020d38:	230f      	movs	r3, #15
 8020d3a:	18fb      	adds	r3, r7, r3
 8020d3c:	781b      	ldrb	r3, [r3, #0]
 8020d3e:	0018      	movs	r0, r3
 8020d40:	f001 f9d6 	bl	80220f0 <Manage_FreeText>
 8020d44:	0003      	movs	r3, r0
 8020d46:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020d48:	e173      	b.n	8021032 <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8020d4a:	233f      	movs	r3, #63	; 0x3f
 8020d4c:	18fc      	adds	r4, r7, r3
 8020d4e:	230f      	movs	r3, #15
 8020d50:	18fb      	adds	r3, r7, r3
 8020d52:	781b      	ldrb	r3, [r3, #0]
 8020d54:	0018      	movs	r0, r3
 8020d56:	f7fb f9c5 	bl	801c0e4 <USBPD_DPM_RequestFastRoleSwap>
 8020d5a:	0003      	movs	r3, r0
 8020d5c:	7023      	strb	r3, [r4, #0]
      break;
 8020d5e:	e17d      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8020d60:	233f      	movs	r3, #63	; 0x3f
 8020d62:	18fc      	adds	r4, r7, r3
 8020d64:	230f      	movs	r3, #15
 8020d66:	18fb      	adds	r3, r7, r3
 8020d68:	781b      	ldrb	r3, [r3, #0]
 8020d6a:	0018      	movs	r0, r3
 8020d6c:	f7fb f92e 	bl	801bfcc <USBPD_DPM_RequestGetPPS_Status>
 8020d70:	0003      	movs	r3, r0
 8020d72:	7023      	strb	r3, [r4, #0]
      break;
 8020d74:	e172      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8020d76:	233f      	movs	r3, #63	; 0x3f
 8020d78:	18fc      	adds	r4, r7, r3
 8020d7a:	230f      	movs	r3, #15
 8020d7c:	18fb      	adds	r3, r7, r3
 8020d7e:	781b      	ldrb	r3, [r3, #0]
 8020d80:	0018      	movs	r0, r3
 8020d82:	f7fb f9f5 	bl	801c170 <USBPD_DPM_RequestGetCountryCodes>
 8020d86:	0003      	movs	r3, r0
 8020d88:	7023      	strb	r3, [r4, #0]
      break;
 8020d8a:	e167      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8020d8c:	233f      	movs	r3, #63	; 0x3f
 8020d8e:	18fc      	adds	r4, r7, r3
 8020d90:	230f      	movs	r3, #15
 8020d92:	18fb      	adds	r3, r7, r3
 8020d94:	781b      	ldrb	r3, [r3, #0]
 8020d96:	0018      	movs	r0, r3
 8020d98:	f7fb f95e 	bl	801c058 <USBPD_DPM_RequestGetStatus>
 8020d9c:	0003      	movs	r3, r0
 8020d9e:	7023      	strb	r3, [r4, #0]
      break;
 8020da0:	e15c      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8020da2:	233f      	movs	r3, #63	; 0x3f
 8020da4:	18fc      	adds	r4, r7, r3
 8020da6:	230f      	movs	r3, #15
 8020da8:	18fb      	adds	r3, r7, r3
 8020daa:	781b      	ldrb	r3, [r3, #0]
 8020dac:	0018      	movs	r0, r3
 8020dae:	f7fb f82b 	bl	801be08 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8020db2:	0003      	movs	r3, r0
 8020db4:	7023      	strb	r3, [r4, #0]
      break;
 8020db6:	e151      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8020db8:	233f      	movs	r3, #63	; 0x3f
 8020dba:	18fc      	adds	r4, r7, r3
 8020dbc:	230f      	movs	r3, #15
 8020dbe:	18fb      	adds	r3, r7, r3
 8020dc0:	781b      	ldrb	r3, [r3, #0]
 8020dc2:	0018      	movs	r0, r3
 8020dc4:	f7fb f866 	bl	801be94 <USBPD_DPM_RequestGetSinkCapabilityExt>
 8020dc8:	0003      	movs	r3, r0
 8020dca:	7023      	strb	r3, [r4, #0]
      break;
 8020dcc:	e146      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8020dce:	211c      	movs	r1, #28
 8020dd0:	187b      	adds	r3, r7, r1
 8020dd2:	881a      	ldrh	r2, [r3, #0]
 8020dd4:	2380      	movs	r3, #128	; 0x80
 8020dd6:	005b      	lsls	r3, r3, #1
 8020dd8:	429a      	cmp	r2, r3
 8020dda:	d900      	bls.n	8020dde <Request_MessageReq+0x376>
 8020ddc:	e12b      	b.n	8021036 <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020dde:	2318      	movs	r3, #24
 8020de0:	18fb      	adds	r3, r7, r3
 8020de2:	187a      	adds	r2, r7, r1
 8020de4:	241e      	movs	r4, #30
 8020de6:	1939      	adds	r1, r7, r4
 8020de8:	202c      	movs	r0, #44	; 0x2c
 8020dea:	1838      	adds	r0, r7, r0
 8020dec:	f7fe f9ea 	bl	801f1c4 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8020df0:	193b      	adds	r3, r7, r4
 8020df2:	781b      	ldrb	r3, [r3, #0]
 8020df4:	2b04      	cmp	r3, #4
 8020df6:	d000      	beq.n	8020dfa <Request_MessageReq+0x392>
 8020df8:	e11f      	b.n	802103a <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 8020dfa:	69bb      	ldr	r3, [r7, #24]
 8020dfc:	781b      	ldrb	r3, [r3, #0]
 8020dfe:	001a      	movs	r2, r3
 8020e00:	69bb      	ldr	r3, [r7, #24]
 8020e02:	3301      	adds	r3, #1
 8020e04:	781b      	ldrb	r3, [r3, #0]
 8020e06:	021b      	lsls	r3, r3, #8
 8020e08:	18d2      	adds	r2, r2, r3
 8020e0a:	69bb      	ldr	r3, [r7, #24]
 8020e0c:	3302      	adds	r3, #2
 8020e0e:	781b      	ldrb	r3, [r3, #0]
 8020e10:	041b      	lsls	r3, r3, #16
 8020e12:	18d2      	adds	r2, r2, r3
 8020e14:	69bb      	ldr	r3, [r7, #24]
 8020e16:	3303      	adds	r3, #3
 8020e18:	781b      	ldrb	r3, [r3, #0]
 8020e1a:	061b      	lsls	r3, r3, #24
 8020e1c:	18d3      	adds	r3, r2, r3
 8020e1e:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8020e20:	233f      	movs	r3, #63	; 0x3f
 8020e22:	18fc      	adds	r4, r7, r3
 8020e24:	697a      	ldr	r2, [r7, #20]
 8020e26:	230f      	movs	r3, #15
 8020e28:	18fb      	adds	r3, r7, r3
 8020e2a:	781b      	ldrb	r3, [r3, #0]
 8020e2c:	0011      	movs	r1, r2
 8020e2e:	0018      	movs	r0, r3
 8020e30:	f7fa ffa2 	bl	801bd78 <USBPD_DPM_RequestAlert>
 8020e34:	0003      	movs	r3, r0
 8020e36:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020e38:	e0ff      	b.n	802103a <Request_MessageReq+0x5d2>
 8020e3a:	46c0      	nop			; (mov r8, r8)
 8020e3c:	08025334 	.word	0x08025334
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8020e40:	211c      	movs	r1, #28
 8020e42:	187b      	adds	r3, r7, r1
 8020e44:	881a      	ldrh	r2, [r3, #0]
 8020e46:	2380      	movs	r3, #128	; 0x80
 8020e48:	005b      	lsls	r3, r3, #1
 8020e4a:	429a      	cmp	r2, r3
 8020e4c:	d900      	bls.n	8020e50 <Request_MessageReq+0x3e8>
 8020e4e:	e0f6      	b.n	802103e <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020e50:	2318      	movs	r3, #24
 8020e52:	18fb      	adds	r3, r7, r3
 8020e54:	187a      	adds	r2, r7, r1
 8020e56:	241e      	movs	r4, #30
 8020e58:	1939      	adds	r1, r7, r4
 8020e5a:	202c      	movs	r0, #44	; 0x2c
 8020e5c:	1838      	adds	r0, r7, r0
 8020e5e:	f7fe f9b1 	bl	801f1c4 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020e62:	193b      	adds	r3, r7, r4
 8020e64:	781b      	ldrb	r3, [r3, #0]
 8020e66:	2b05      	cmp	r3, #5
 8020e68:	d000      	beq.n	8020e6c <Request_MessageReq+0x404>
 8020e6a:	e0ea      	b.n	8021042 <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8020e6c:	69bb      	ldr	r3, [r7, #24]
 8020e6e:	781b      	ldrb	r3, [r3, #0]
 8020e70:	b299      	uxth	r1, r3
 8020e72:	69bb      	ldr	r3, [r7, #24]
 8020e74:	3301      	adds	r3, #1
 8020e76:	781b      	ldrb	r3, [r3, #0]
 8020e78:	b29b      	uxth	r3, r3
 8020e7a:	021b      	lsls	r3, r3, #8
 8020e7c:	b29a      	uxth	r2, r3
 8020e7e:	2034      	movs	r0, #52	; 0x34
 8020e80:	183b      	adds	r3, r7, r0
 8020e82:	188a      	adds	r2, r1, r2
 8020e84:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8020e86:	233f      	movs	r3, #63	; 0x3f
 8020e88:	18fc      	adds	r4, r7, r3
 8020e8a:	183b      	adds	r3, r7, r0
 8020e8c:	881a      	ldrh	r2, [r3, #0]
 8020e8e:	230f      	movs	r3, #15
 8020e90:	18fb      	adds	r3, r7, r3
 8020e92:	781b      	ldrb	r3, [r3, #0]
 8020e94:	0011      	movs	r1, r2
 8020e96:	0018      	movs	r0, r3
 8020e98:	f7fb f9b0 	bl	801c1fc <USBPD_DPM_RequestGetCountryInfo>
 8020e9c:	0003      	movs	r3, r0
 8020e9e:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020ea0:	e0cf      	b.n	8021042 <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8020ea2:	211c      	movs	r1, #28
 8020ea4:	187b      	adds	r3, r7, r1
 8020ea6:	881a      	ldrh	r2, [r3, #0]
 8020ea8:	2380      	movs	r3, #128	; 0x80
 8020eaa:	005b      	lsls	r3, r3, #1
 8020eac:	429a      	cmp	r2, r3
 8020eae:	d900      	bls.n	8020eb2 <Request_MessageReq+0x44a>
 8020eb0:	e0c9      	b.n	8021046 <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020eb2:	2318      	movs	r3, #24
 8020eb4:	18fb      	adds	r3, r7, r3
 8020eb6:	187a      	adds	r2, r7, r1
 8020eb8:	241e      	movs	r4, #30
 8020eba:	1939      	adds	r1, r7, r4
 8020ebc:	202c      	movs	r0, #44	; 0x2c
 8020ebe:	1838      	adds	r0, r7, r0
 8020ec0:	f7fe f980 	bl	801f1c4 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020ec4:	193b      	adds	r3, r7, r4
 8020ec6:	781b      	ldrb	r3, [r3, #0]
 8020ec8:	2b0c      	cmp	r3, #12
 8020eca:	d000      	beq.n	8020ece <Request_MessageReq+0x466>
 8020ecc:	e0bd      	b.n	802104a <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8020ece:	69ba      	ldr	r2, [r7, #24]
 8020ed0:	233f      	movs	r3, #63	; 0x3f
 8020ed2:	18fc      	adds	r4, r7, r3
 8020ed4:	230f      	movs	r3, #15
 8020ed6:	18fb      	adds	r3, r7, r3
 8020ed8:	781b      	ldrb	r3, [r3, #0]
 8020eda:	0011      	movs	r1, r2
 8020edc:	0018      	movs	r0, r3
 8020ede:	f7fb f9d7 	bl	801c290 <USBPD_DPM_RequestGetBatteryCapability>
 8020ee2:	0003      	movs	r3, r0
 8020ee4:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020ee6:	e0b0      	b.n	802104a <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 8020ee8:	211c      	movs	r1, #28
 8020eea:	187b      	adds	r3, r7, r1
 8020eec:	881a      	ldrh	r2, [r3, #0]
 8020eee:	2380      	movs	r3, #128	; 0x80
 8020ef0:	005b      	lsls	r3, r3, #1
 8020ef2:	429a      	cmp	r2, r3
 8020ef4:	d900      	bls.n	8020ef8 <Request_MessageReq+0x490>
 8020ef6:	e0aa      	b.n	802104e <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020ef8:	2318      	movs	r3, #24
 8020efa:	18fb      	adds	r3, r7, r3
 8020efc:	187a      	adds	r2, r7, r1
 8020efe:	241e      	movs	r4, #30
 8020f00:	1939      	adds	r1, r7, r4
 8020f02:	202c      	movs	r0, #44	; 0x2c
 8020f04:	1838      	adds	r0, r7, r0
 8020f06:	f7fe f95d 	bl	801f1c4 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f0a:	193b      	adds	r3, r7, r4
 8020f0c:	781b      	ldrb	r3, [r3, #0]
 8020f0e:	2b0c      	cmp	r3, #12
 8020f10:	d000      	beq.n	8020f14 <Request_MessageReq+0x4ac>
 8020f12:	e09e      	b.n	8021052 <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8020f14:	69ba      	ldr	r2, [r7, #24]
 8020f16:	233f      	movs	r3, #63	; 0x3f
 8020f18:	18fc      	adds	r4, r7, r3
 8020f1a:	230f      	movs	r3, #15
 8020f1c:	18fb      	adds	r3, r7, r3
 8020f1e:	781b      	ldrb	r3, [r3, #0]
 8020f20:	0011      	movs	r1, r2
 8020f22:	0018      	movs	r0, r3
 8020f24:	f7fb f9fe 	bl	801c324 <USBPD_DPM_RequestGetBatteryStatus>
 8020f28:	0003      	movs	r3, r0
 8020f2a:	7023      	strb	r3, [r4, #0]
      }
      break;
 8020f2c:	e091      	b.n	8021052 <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 8020f2e:	2338      	movs	r3, #56	; 0x38
 8020f30:	18fb      	adds	r3, r7, r3
 8020f32:	2200      	movs	r2, #0
 8020f34:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 8020f36:	2337      	movs	r3, #55	; 0x37
 8020f38:	18fb      	adds	r3, r7, r3
 8020f3a:	2200      	movs	r2, #0
 8020f3c:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8020f3e:	211c      	movs	r1, #28
 8020f40:	187b      	adds	r3, r7, r1
 8020f42:	881a      	ldrh	r2, [r3, #0]
 8020f44:	2380      	movs	r3, #128	; 0x80
 8020f46:	005b      	lsls	r3, r3, #1
 8020f48:	429a      	cmp	r2, r3
 8020f4a:	d900      	bls.n	8020f4e <Request_MessageReq+0x4e6>
 8020f4c:	e083      	b.n	8021056 <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020f4e:	2318      	movs	r3, #24
 8020f50:	18fb      	adds	r3, r7, r3
 8020f52:	187a      	adds	r2, r7, r1
 8020f54:	211e      	movs	r1, #30
 8020f56:	1879      	adds	r1, r7, r1
 8020f58:	202c      	movs	r0, #44	; 0x2c
 8020f5a:	1838      	adds	r0, r7, r0
 8020f5c:	f7fe f932 	bl	801f1c4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8020f60:	e02f      	b.n	8020fc2 <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 8020f62:	2138      	movs	r1, #56	; 0x38
 8020f64:	187b      	adds	r3, r7, r1
 8020f66:	781a      	ldrb	r2, [r3, #0]
 8020f68:	187b      	adds	r3, r7, r1
 8020f6a:	3201      	adds	r2, #1
 8020f6c:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f6e:	231e      	movs	r3, #30
 8020f70:	18fb      	adds	r3, r7, r3
 8020f72:	781b      	ldrb	r3, [r3, #0]
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d105      	bne.n	8020f84 <Request_MessageReq+0x51c>
        {
          sop = value[0];
 8020f78:	69ba      	ldr	r2, [r7, #24]
 8020f7a:	2337      	movs	r3, #55	; 0x37
 8020f7c:	18fb      	adds	r3, r7, r3
 8020f7e:	7812      	ldrb	r2, [r2, #0]
 8020f80:	701a      	strb	r2, [r3, #0]
 8020f82:	e014      	b.n	8020fae <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f84:	231e      	movs	r3, #30
 8020f86:	18fb      	adds	r3, r7, r3
 8020f88:	781b      	ldrb	r3, [r3, #0]
 8020f8a:	2b0c      	cmp	r3, #12
 8020f8c:	d105      	bne.n	8020f9a <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 8020f8e:	69bb      	ldr	r3, [r7, #24]
 8020f90:	781a      	ldrb	r2, [r3, #0]
 8020f92:	2310      	movs	r3, #16
 8020f94:	18fb      	adds	r3, r7, r3
 8020f96:	705a      	strb	r2, [r3, #1]
 8020f98:	e009      	b.n	8020fae <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8020f9a:	231e      	movs	r3, #30
 8020f9c:	18fb      	adds	r3, r7, r3
 8020f9e:	781b      	ldrb	r3, [r3, #0]
 8020fa0:	2b0d      	cmp	r3, #13
 8020fa2:	d104      	bne.n	8020fae <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 8020fa4:	69bb      	ldr	r3, [r7, #24]
 8020fa6:	781a      	ldrb	r2, [r3, #0]
 8020fa8:	2310      	movs	r3, #16
 8020faa:	18fb      	adds	r3, r7, r3
 8020fac:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8020fae:	2318      	movs	r3, #24
 8020fb0:	18fb      	adds	r3, r7, r3
 8020fb2:	221c      	movs	r2, #28
 8020fb4:	18ba      	adds	r2, r7, r2
 8020fb6:	211e      	movs	r1, #30
 8020fb8:	1879      	adds	r1, r7, r1
 8020fba:	202c      	movs	r0, #44	; 0x2c
 8020fbc:	1838      	adds	r0, r7, r0
 8020fbe:	f7fe f901 	bl	801f1c4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8020fc2:	221c      	movs	r2, #28
 8020fc4:	18bb      	adds	r3, r7, r2
 8020fc6:	881b      	ldrh	r3, [r3, #0]
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	d008      	beq.n	8020fde <Request_MessageReq+0x576>
 8020fcc:	18bb      	adds	r3, r7, r2
 8020fce:	881b      	ldrh	r3, [r3, #0]
 8020fd0:	2bff      	cmp	r3, #255	; 0xff
 8020fd2:	d804      	bhi.n	8020fde <Request_MessageReq+0x576>
 8020fd4:	2338      	movs	r3, #56	; 0x38
 8020fd6:	18fb      	adds	r3, r7, r3
 8020fd8:	781b      	ldrb	r3, [r3, #0]
 8020fda:	2b02      	cmp	r3, #2
 8020fdc:	d9c1      	bls.n	8020f62 <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 8020fde:	2338      	movs	r3, #56	; 0x38
 8020fe0:	18fb      	adds	r3, r7, r3
 8020fe2:	781b      	ldrb	r3, [r3, #0]
 8020fe4:	2b03      	cmp	r3, #3
 8020fe6:	d138      	bne.n	802105a <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8020fe8:	233f      	movs	r3, #63	; 0x3f
 8020fea:	18fc      	adds	r4, r7, r3
 8020fec:	2310      	movs	r3, #16
 8020fee:	18fa      	adds	r2, r7, r3
 8020ff0:	2337      	movs	r3, #55	; 0x37
 8020ff2:	18fb      	adds	r3, r7, r3
 8020ff4:	7819      	ldrb	r1, [r3, #0]
 8020ff6:	230f      	movs	r3, #15
 8020ff8:	18fb      	adds	r3, r7, r3
 8020ffa:	781b      	ldrb	r3, [r3, #0]
 8020ffc:	0018      	movs	r0, r3
 8020ffe:	f7fa ff8f 	bl	801bf20 <USBPD_DPM_RequestGetManufacturerInfo>
 8021002:	0003      	movs	r3, r0
 8021004:	7023      	strb	r3, [r4, #0]
      }
      break;
 8021006:	e028      	b.n	802105a <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8021008:	233f      	movs	r3, #63	; 0x3f
 802100a:	18fc      	adds	r4, r7, r3
 802100c:	230f      	movs	r3, #15
 802100e:	18fb      	adds	r3, r7, r3
 8021010:	781b      	ldrb	r3, [r3, #0]
 8021012:	0018      	movs	r0, r3
 8021014:	f7fb f9d0 	bl	801c3b8 <USBPD_DPM_RequestSecurityRequest>
 8021018:	0003      	movs	r3, r0
 802101a:	7023      	strb	r3, [r4, #0]
      break;
 802101c:	e01e      	b.n	802105c <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 802101e:	46c0      	nop			; (mov r8, r8)
 8021020:	e01c      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 8021022:	46c0      	nop			; (mov r8, r8)
 8021024:	e01a      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 8021026:	46c0      	nop			; (mov r8, r8)
 8021028:	e018      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 802102a:	46c0      	nop			; (mov r8, r8)
 802102c:	e016      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 802102e:	46c0      	nop			; (mov r8, r8)
 8021030:	e014      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 8021032:	46c0      	nop			; (mov r8, r8)
 8021034:	e012      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 8021036:	46c0      	nop			; (mov r8, r8)
 8021038:	e010      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 802103a:	46c0      	nop			; (mov r8, r8)
 802103c:	e00e      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 802103e:	46c0      	nop			; (mov r8, r8)
 8021040:	e00c      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 8021042:	46c0      	nop			; (mov r8, r8)
 8021044:	e00a      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 8021046:	46c0      	nop			; (mov r8, r8)
 8021048:	e008      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 802104a:	46c0      	nop			; (mov r8, r8)
 802104c:	e006      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 802104e:	46c0      	nop			; (mov r8, r8)
 8021050:	e004      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 8021052:	46c0      	nop			; (mov r8, r8)
 8021054:	e002      	b.n	802105c <Request_MessageReq+0x5f4>
        break;
 8021056:	46c0      	nop			; (mov r8, r8)
 8021058:	e000      	b.n	802105c <Request_MessageReq+0x5f4>
      break;
 802105a:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 802105c:	223f      	movs	r2, #63	; 0x3f
 802105e:	18bb      	adds	r3, r7, r2
 8021060:	781b      	ldrb	r3, [r3, #0]
 8021062:	2b00      	cmp	r3, #0
 8021064:	d031      	beq.n	80210ca <Request_MessageReq+0x662>
  {
    switch (status)
 8021066:	18bb      	adds	r3, r7, r2
 8021068:	781b      	ldrb	r3, [r3, #0]
 802106a:	2b03      	cmp	r3, #3
 802106c:	d002      	beq.n	8021074 <Request_MessageReq+0x60c>
 802106e:	2b04      	cmp	r3, #4
 8021070:	d005      	beq.n	802107e <Request_MessageReq+0x616>
 8021072:	e009      	b.n	8021088 <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8021074:	231f      	movs	r3, #31
 8021076:	18fb      	adds	r3, r7, r3
 8021078:	2206      	movs	r2, #6
 802107a:	701a      	strb	r2, [r3, #0]
        break;
 802107c:	e009      	b.n	8021092 <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 802107e:	231f      	movs	r3, #31
 8021080:	18fb      	adds	r3, r7, r3
 8021082:	2202      	movs	r2, #2
 8021084:	701a      	strb	r2, [r3, #0]
        break;
 8021086:	e004      	b.n	8021092 <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8021088:	231f      	movs	r3, #31
 802108a:	18fb      	adds	r3, r7, r3
 802108c:	2200      	movs	r2, #0
 802108e:	701a      	strb	r2, [r3, #0]
        break;
 8021090:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 8021092:	2420      	movs	r4, #32
 8021094:	193b      	adds	r3, r7, r4
 8021096:	0018      	movs	r0, r3
 8021098:	f7fe f856 	bl	801f148 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 802109c:	230f      	movs	r3, #15
 802109e:	18fb      	adds	r3, r7, r3
 80210a0:	781b      	ldrb	r3, [r3, #0]
 80210a2:	3301      	adds	r3, #1
 80210a4:	015b      	lsls	r3, r3, #5
 80210a6:	b25b      	sxtb	r3, r3
 80210a8:	220b      	movs	r2, #11
 80210aa:	4313      	orrs	r3, r2
 80210ac:	b25b      	sxtb	r3, r3
 80210ae:	b2d9      	uxtb	r1, r3
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	2280      	movs	r2, #128	; 0x80
 80210b4:	0052      	lsls	r2, r2, #1
 80210b6:	1938      	adds	r0, r7, r4
 80210b8:	f7fd fe81 	bl	801edbe <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 80210bc:	231f      	movs	r3, #31
 80210be:	18f9      	adds	r1, r7, r3
 80210c0:	193b      	adds	r3, r7, r4
 80210c2:	2201      	movs	r2, #1
 80210c4:	0018      	movs	r0, r3
 80210c6:	f7fd ffab 	bl	801f020 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 80210ca:	2320      	movs	r3, #32
 80210cc:	18fb      	adds	r3, r7, r3
 80210ce:	0018      	movs	r0, r3
 80210d0:	f7fe f83a 	bl	801f148 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 80210d4:	232c      	movs	r3, #44	; 0x2c
 80210d6:	18fb      	adds	r3, r7, r3
 80210d8:	0018      	movs	r0, r3
 80210da:	f7fe f8cd 	bl	801f278 <TLV_deinit_decode>
}
 80210de:	46c0      	nop			; (mov r8, r8)
 80210e0:	46bd      	mov	sp, r7
 80210e2:	b010      	add	sp, #64	; 0x40
 80210e4:	bdb0      	pop	{r4, r5, r7, pc}
 80210e6:	46c0      	nop			; (mov r8, r8)

080210e8 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80210e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210ea:	b0d5      	sub	sp, #340	; 0x154
 80210ec:	af00      	add	r7, sp, #0
 80210ee:	60b9      	str	r1, [r7, #8]
 80210f0:	607a      	str	r2, [r7, #4]
 80210f2:	4bcd      	ldr	r3, [pc, #820]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80210f4:	24a8      	movs	r4, #168	; 0xa8
 80210f6:	0064      	lsls	r4, r4, #1
 80210f8:	191b      	adds	r3, r3, r4
 80210fa:	19db      	adds	r3, r3, r7
 80210fc:	1c02      	adds	r2, r0, #0
 80210fe:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8021100:	23a7      	movs	r3, #167	; 0xa7
 8021102:	005b      	lsls	r3, r3, #1
 8021104:	18fb      	adds	r3, r7, r3
 8021106:	2200      	movs	r2, #0
 8021108:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 802110a:	231a      	movs	r3, #26
 802110c:	33ff      	adds	r3, #255	; 0xff
 802110e:	18fb      	adds	r3, r7, r3
 8021110:	22ff      	movs	r2, #255	; 0xff
 8021112:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 8021114:	234e      	movs	r3, #78	; 0x4e
 8021116:	33ff      	adds	r3, #255	; 0xff
 8021118:	18fb      	adds	r3, r7, r3
 802111a:	2200      	movs	r2, #0
 802111c:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 802111e:	23a6      	movs	r3, #166	; 0xa6
 8021120:	005b      	lsls	r3, r3, #1
 8021122:	18fb      	adds	r3, r7, r3
 8021124:	2200      	movs	r2, #0
 8021126:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 8021128:	234c      	movs	r3, #76	; 0x4c
 802112a:	33ff      	adds	r3, #255	; 0xff
 802112c:	18fb      	adds	r3, r7, r3
 802112e:	2200      	movs	r2, #0
 8021130:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 8021132:	68ba      	ldr	r2, [r7, #8]
 8021134:	2390      	movs	r3, #144	; 0x90
 8021136:	005b      	lsls	r3, r3, #1
 8021138:	18fb      	adds	r3, r7, r3
 802113a:	0011      	movs	r1, r2
 802113c:	0018      	movs	r0, r3
 802113e:	f7fe f815 	bl	801f16c <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8021142:	4bb9      	ldr	r3, [pc, #740]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 8021144:	191b      	adds	r3, r3, r4
 8021146:	19db      	adds	r3, r3, r7
 8021148:	781b      	ldrb	r3, [r3, #0]
 802114a:	3301      	adds	r3, #1
 802114c:	015b      	lsls	r3, r3, #5
 802114e:	b25b      	sxtb	r3, r3
 8021150:	2207      	movs	r2, #7
 8021152:	4313      	orrs	r3, r2
 8021154:	b25b      	sxtb	r3, r3
 8021156:	b2d9      	uxtb	r1, r3
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	2280      	movs	r2, #128	; 0x80
 802115c:	0052      	lsls	r2, r2, #1
 802115e:	2094      	movs	r0, #148	; 0x94
 8021160:	0040      	lsls	r0, r0, #1
 8021162:	1838      	adds	r0, r7, r0
 8021164:	f7fd fe2b 	bl	801edbe <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8021168:	e2e5      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 802116a:	4bb0      	ldr	r3, [pc, #704]	; (802142c <Send_DpmConfigSetCnf+0x344>)
 802116c:	22a8      	movs	r2, #168	; 0xa8
 802116e:	0052      	lsls	r2, r2, #1
 8021170:	189b      	adds	r3, r3, r2
 8021172:	19db      	adds	r3, r3, r7
 8021174:	781b      	ldrb	r3, [r3, #0]
 8021176:	2b1c      	cmp	r3, #28
 8021178:	d900      	bls.n	802117c <Send_DpmConfigSetCnf+0x94>
 802117a:	e2c3      	b.n	8021704 <Send_DpmConfigSetCnf+0x61c>
 802117c:	009a      	lsls	r2, r3, #2
 802117e:	4bac      	ldr	r3, [pc, #688]	; (8021430 <Send_DpmConfigSetCnf+0x348>)
 8021180:	18d3      	adds	r3, r2, r3
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 8021186:	238e      	movs	r3, #142	; 0x8e
 8021188:	005b      	lsls	r3, r3, #1
 802118a:	18fb      	adds	r3, r7, r3
 802118c:	681b      	ldr	r3, [r3, #0]
 802118e:	7819      	ldrb	r1, [r3, #0]
 8021190:	4ba5      	ldr	r3, [pc, #660]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 8021192:	22a8      	movs	r2, #168	; 0xa8
 8021194:	0052      	lsls	r2, r2, #1
 8021196:	189b      	adds	r3, r3, r2
 8021198:	19db      	adds	r3, r3, r7
 802119a:	781a      	ldrb	r2, [r3, #0]
 802119c:	0008      	movs	r0, r1
 802119e:	49a5      	ldr	r1, [pc, #660]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80211a0:	0013      	movs	r3, r2
 80211a2:	005b      	lsls	r3, r3, #1
 80211a4:	189b      	adds	r3, r3, r2
 80211a6:	009b      	lsls	r3, r3, #2
 80211a8:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 80211aa:	e2c4      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 80211ac:	238e      	movs	r3, #142	; 0x8e
 80211ae:	005b      	lsls	r3, r3, #1
 80211b0:	18fb      	adds	r3, r7, r3
 80211b2:	681b      	ldr	r3, [r3, #0]
 80211b4:	7819      	ldrb	r1, [r3, #0]
 80211b6:	4b9c      	ldr	r3, [pc, #624]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80211b8:	22a8      	movs	r2, #168	; 0xa8
 80211ba:	0052      	lsls	r2, r2, #1
 80211bc:	189b      	adds	r3, r3, r2
 80211be:	19db      	adds	r3, r3, r7
 80211c0:	781a      	ldrb	r2, [r3, #0]
 80211c2:	2301      	movs	r3, #1
 80211c4:	400b      	ands	r3, r1
 80211c6:	b2d9      	uxtb	r1, r3
 80211c8:	489a      	ldr	r0, [pc, #616]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80211ca:	2408      	movs	r4, #8
 80211cc:	0013      	movs	r3, r2
 80211ce:	005b      	lsls	r3, r3, #1
 80211d0:	189b      	adds	r3, r3, r2
 80211d2:	009b      	lsls	r3, r3, #2
 80211d4:	18c3      	adds	r3, r0, r3
 80211d6:	191b      	adds	r3, r3, r4
 80211d8:	2201      	movs	r2, #1
 80211da:	400a      	ands	r2, r1
 80211dc:	1890      	adds	r0, r2, r2
 80211de:	781a      	ldrb	r2, [r3, #0]
 80211e0:	2102      	movs	r1, #2
 80211e2:	438a      	bics	r2, r1
 80211e4:	1c11      	adds	r1, r2, #0
 80211e6:	1c02      	adds	r2, r0, #0
 80211e8:	430a      	orrs	r2, r1
 80211ea:	701a      	strb	r2, [r3, #0]
        break;
 80211ec:	e2a3      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 80211ee:	238e      	movs	r3, #142	; 0x8e
 80211f0:	005b      	lsls	r3, r3, #1
 80211f2:	18fb      	adds	r3, r7, r3
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	7819      	ldrb	r1, [r3, #0]
 80211f8:	4b8b      	ldr	r3, [pc, #556]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80211fa:	22a8      	movs	r2, #168	; 0xa8
 80211fc:	0052      	lsls	r2, r2, #1
 80211fe:	189b      	adds	r3, r3, r2
 8021200:	19db      	adds	r3, r3, r7
 8021202:	781a      	ldrb	r2, [r3, #0]
 8021204:	2301      	movs	r3, #1
 8021206:	400b      	ands	r3, r1
 8021208:	b2d9      	uxtb	r1, r3
 802120a:	4b8b      	ldr	r3, [pc, #556]	; (8021438 <Send_DpmConfigSetCnf+0x350>)
 802120c:	2074      	movs	r0, #116	; 0x74
 802120e:	4342      	muls	r2, r0
 8021210:	2001      	movs	r0, #1
 8021212:	4001      	ands	r1, r0
 8021214:	00cc      	lsls	r4, r1, #3
 8021216:	5cd1      	ldrb	r1, [r2, r3]
 8021218:	2008      	movs	r0, #8
 802121a:	4381      	bics	r1, r0
 802121c:	1c08      	adds	r0, r1, #0
 802121e:	1c21      	adds	r1, r4, #0
 8021220:	4301      	orrs	r1, r0
 8021222:	54d1      	strb	r1, [r2, r3]
        break;
 8021224:	e287      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 8021226:	238e      	movs	r3, #142	; 0x8e
 8021228:	005b      	lsls	r3, r3, #1
 802122a:	18fb      	adds	r3, r7, r3
 802122c:	681b      	ldr	r3, [r3, #0]
 802122e:	7819      	ldrb	r1, [r3, #0]
 8021230:	4b7d      	ldr	r3, [pc, #500]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 8021232:	22a8      	movs	r2, #168	; 0xa8
 8021234:	0052      	lsls	r2, r2, #1
 8021236:	189b      	adds	r3, r3, r2
 8021238:	19db      	adds	r3, r3, r7
 802123a:	781a      	ldrb	r2, [r3, #0]
 802123c:	2301      	movs	r3, #1
 802123e:	400b      	ands	r3, r1
 8021240:	b2d9      	uxtb	r1, r3
 8021242:	4b7d      	ldr	r3, [pc, #500]	; (8021438 <Send_DpmConfigSetCnf+0x350>)
 8021244:	2074      	movs	r0, #116	; 0x74
 8021246:	4342      	muls	r2, r0
 8021248:	2001      	movs	r0, #1
 802124a:	4001      	ands	r1, r0
 802124c:	008c      	lsls	r4, r1, #2
 802124e:	5cd1      	ldrb	r1, [r2, r3]
 8021250:	2004      	movs	r0, #4
 8021252:	4381      	bics	r1, r0
 8021254:	1c08      	adds	r0, r1, #0
 8021256:	1c21      	adds	r1, r4, #0
 8021258:	4301      	orrs	r1, r0
 802125a:	54d1      	strb	r1, [r2, r3]
        break;
 802125c:	e26b      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 802125e:	238e      	movs	r3, #142	; 0x8e
 8021260:	005b      	lsls	r3, r3, #1
 8021262:	18fb      	adds	r3, r7, r3
 8021264:	681b      	ldr	r3, [r3, #0]
 8021266:	7819      	ldrb	r1, [r3, #0]
 8021268:	4b6f      	ldr	r3, [pc, #444]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 802126a:	22a8      	movs	r2, #168	; 0xa8
 802126c:	0052      	lsls	r2, r2, #1
 802126e:	189b      	adds	r3, r3, r2
 8021270:	19db      	adds	r3, r3, r7
 8021272:	781a      	ldrb	r2, [r3, #0]
 8021274:	2301      	movs	r3, #1
 8021276:	400b      	ands	r3, r1
 8021278:	b2d9      	uxtb	r1, r3
 802127a:	486e      	ldr	r0, [pc, #440]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 802127c:	0013      	movs	r3, r2
 802127e:	005b      	lsls	r3, r3, #1
 8021280:	189b      	adds	r3, r3, r2
 8021282:	009b      	lsls	r3, r3, #2
 8021284:	18c3      	adds	r3, r0, r3
 8021286:	2201      	movs	r2, #1
 8021288:	400a      	ands	r2, r1
 802128a:	0090      	lsls	r0, r2, #2
 802128c:	791a      	ldrb	r2, [r3, #4]
 802128e:	2104      	movs	r1, #4
 8021290:	438a      	bics	r2, r1
 8021292:	1c11      	adds	r1, r2, #0
 8021294:	1c02      	adds	r2, r0, #0
 8021296:	430a      	orrs	r2, r1
 8021298:	711a      	strb	r2, [r3, #4]
        break;
 802129a:	e24c      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 802129c:	238e      	movs	r3, #142	; 0x8e
 802129e:	005b      	lsls	r3, r3, #1
 80212a0:	18fb      	adds	r3, r7, r3
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	7819      	ldrb	r1, [r3, #0]
 80212a6:	4b60      	ldr	r3, [pc, #384]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80212a8:	22a8      	movs	r2, #168	; 0xa8
 80212aa:	0052      	lsls	r2, r2, #1
 80212ac:	189b      	adds	r3, r3, r2
 80212ae:	19db      	adds	r3, r3, r7
 80212b0:	781a      	ldrb	r2, [r3, #0]
 80212b2:	2301      	movs	r3, #1
 80212b4:	400b      	ands	r3, r1
 80212b6:	b2d9      	uxtb	r1, r3
 80212b8:	485e      	ldr	r0, [pc, #376]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80212ba:	0013      	movs	r3, r2
 80212bc:	005b      	lsls	r3, r3, #1
 80212be:	189b      	adds	r3, r3, r2
 80212c0:	009b      	lsls	r3, r3, #2
 80212c2:	18c3      	adds	r3, r0, r3
 80212c4:	2201      	movs	r2, #1
 80212c6:	400a      	ands	r2, r1
 80212c8:	00d0      	lsls	r0, r2, #3
 80212ca:	791a      	ldrb	r2, [r3, #4]
 80212cc:	2108      	movs	r1, #8
 80212ce:	438a      	bics	r2, r1
 80212d0:	1c11      	adds	r1, r2, #0
 80212d2:	1c02      	adds	r2, r0, #0
 80212d4:	430a      	orrs	r2, r1
 80212d6:	711a      	strb	r2, [r3, #4]
        break;
 80212d8:	e22d      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 80212da:	238e      	movs	r3, #142	; 0x8e
 80212dc:	005b      	lsls	r3, r3, #1
 80212de:	18fb      	adds	r3, r7, r3
 80212e0:	681b      	ldr	r3, [r3, #0]
 80212e2:	7819      	ldrb	r1, [r3, #0]
 80212e4:	4b50      	ldr	r3, [pc, #320]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80212e6:	22a8      	movs	r2, #168	; 0xa8
 80212e8:	0052      	lsls	r2, r2, #1
 80212ea:	189b      	adds	r3, r3, r2
 80212ec:	19db      	adds	r3, r3, r7
 80212ee:	781a      	ldrb	r2, [r3, #0]
 80212f0:	2301      	movs	r3, #1
 80212f2:	400b      	ands	r3, r1
 80212f4:	b2d9      	uxtb	r1, r3
 80212f6:	484f      	ldr	r0, [pc, #316]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80212f8:	0013      	movs	r3, r2
 80212fa:	005b      	lsls	r3, r3, #1
 80212fc:	189b      	adds	r3, r3, r2
 80212fe:	009b      	lsls	r3, r3, #2
 8021300:	18c3      	adds	r3, r0, r3
 8021302:	2201      	movs	r2, #1
 8021304:	400a      	ands	r2, r1
 8021306:	0150      	lsls	r0, r2, #5
 8021308:	795a      	ldrb	r2, [r3, #5]
 802130a:	2120      	movs	r1, #32
 802130c:	438a      	bics	r2, r1
 802130e:	1c11      	adds	r1, r2, #0
 8021310:	1c02      	adds	r2, r0, #0
 8021312:	430a      	orrs	r2, r1
 8021314:	715a      	strb	r2, [r3, #5]
        break;
 8021316:	e20e      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 8021318:	238e      	movs	r3, #142	; 0x8e
 802131a:	005b      	lsls	r3, r3, #1
 802131c:	18fb      	adds	r3, r7, r3
 802131e:	681b      	ldr	r3, [r3, #0]
 8021320:	7819      	ldrb	r1, [r3, #0]
 8021322:	4b41      	ldr	r3, [pc, #260]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 8021324:	22a8      	movs	r2, #168	; 0xa8
 8021326:	0052      	lsls	r2, r2, #1
 8021328:	189b      	adds	r3, r3, r2
 802132a:	19db      	adds	r3, r3, r7
 802132c:	781a      	ldrb	r2, [r3, #0]
 802132e:	2301      	movs	r3, #1
 8021330:	400b      	ands	r3, r1
 8021332:	b2d9      	uxtb	r1, r3
 8021334:	483f      	ldr	r0, [pc, #252]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 8021336:	0013      	movs	r3, r2
 8021338:	005b      	lsls	r3, r3, #1
 802133a:	189b      	adds	r3, r3, r2
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	18c3      	adds	r3, r0, r3
 8021340:	01c8      	lsls	r0, r1, #7
 8021342:	791a      	ldrb	r2, [r3, #4]
 8021344:	217f      	movs	r1, #127	; 0x7f
 8021346:	400a      	ands	r2, r1
 8021348:	1c11      	adds	r1, r2, #0
 802134a:	1c02      	adds	r2, r0, #0
 802134c:	430a      	orrs	r2, r1
 802134e:	711a      	strb	r2, [r3, #4]
        break;
 8021350:	e1f1      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 8021352:	238e      	movs	r3, #142	; 0x8e
 8021354:	005b      	lsls	r3, r3, #1
 8021356:	18fb      	adds	r3, r7, r3
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	7819      	ldrb	r1, [r3, #0]
 802135c:	4b32      	ldr	r3, [pc, #200]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 802135e:	22a8      	movs	r2, #168	; 0xa8
 8021360:	0052      	lsls	r2, r2, #1
 8021362:	189b      	adds	r3, r3, r2
 8021364:	19db      	adds	r3, r3, r7
 8021366:	781a      	ldrb	r2, [r3, #0]
 8021368:	2301      	movs	r3, #1
 802136a:	400b      	ands	r3, r1
 802136c:	b2d9      	uxtb	r1, r3
 802136e:	4b32      	ldr	r3, [pc, #200]	; (8021438 <Send_DpmConfigSetCnf+0x350>)
 8021370:	2074      	movs	r0, #116	; 0x74
 8021372:	4342      	muls	r2, r0
 8021374:	2001      	movs	r0, #1
 8021376:	4001      	ands	r1, r0
 8021378:	184c      	adds	r4, r1, r1
 802137a:	5cd1      	ldrb	r1, [r2, r3]
 802137c:	2002      	movs	r0, #2
 802137e:	4381      	bics	r1, r0
 8021380:	1c08      	adds	r0, r1, #0
 8021382:	1c21      	adds	r1, r4, #0
 8021384:	4301      	orrs	r1, r0
 8021386:	54d1      	strb	r1, [r2, r3]
        break;
 8021388:	e1d5      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 802138a:	238e      	movs	r3, #142	; 0x8e
 802138c:	005b      	lsls	r3, r3, #1
 802138e:	18fb      	adds	r3, r7, r3
 8021390:	681b      	ldr	r3, [r3, #0]
 8021392:	7819      	ldrb	r1, [r3, #0]
 8021394:	4b24      	ldr	r3, [pc, #144]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 8021396:	22a8      	movs	r2, #168	; 0xa8
 8021398:	0052      	lsls	r2, r2, #1
 802139a:	189b      	adds	r3, r3, r2
 802139c:	19db      	adds	r3, r3, r7
 802139e:	781a      	ldrb	r2, [r3, #0]
 80213a0:	2301      	movs	r3, #1
 80213a2:	400b      	ands	r3, r1
 80213a4:	b2d9      	uxtb	r1, r3
 80213a6:	4823      	ldr	r0, [pc, #140]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80213a8:	0013      	movs	r3, r2
 80213aa:	005b      	lsls	r3, r3, #1
 80213ac:	189b      	adds	r3, r3, r2
 80213ae:	009b      	lsls	r3, r3, #2
 80213b0:	18c3      	adds	r3, r0, r3
 80213b2:	2201      	movs	r2, #1
 80213b4:	400a      	ands	r2, r1
 80213b6:	0190      	lsls	r0, r2, #6
 80213b8:	791a      	ldrb	r2, [r3, #4]
 80213ba:	2140      	movs	r1, #64	; 0x40
 80213bc:	438a      	bics	r2, r1
 80213be:	1c11      	adds	r1, r2, #0
 80213c0:	1c02      	adds	r2, r0, #0
 80213c2:	430a      	orrs	r2, r1
 80213c4:	711a      	strb	r2, [r3, #4]
        break;
 80213c6:	e1b6      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 80213c8:	228e      	movs	r2, #142	; 0x8e
 80213ca:	0052      	lsls	r2, r2, #1
 80213cc:	18bb      	adds	r3, r7, r2
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	781b      	ldrb	r3, [r3, #0]
 80213d2:	b299      	uxth	r1, r3
 80213d4:	18bb      	adds	r3, r7, r2
 80213d6:	681b      	ldr	r3, [r3, #0]
 80213d8:	3301      	adds	r3, #1
 80213da:	781b      	ldrb	r3, [r3, #0]
 80213dc:	b29b      	uxth	r3, r3
 80213de:	021b      	lsls	r3, r3, #8
 80213e0:	b29b      	uxth	r3, r3
 80213e2:	4a11      	ldr	r2, [pc, #68]	; (8021428 <Send_DpmConfigSetCnf+0x340>)
 80213e4:	20a8      	movs	r0, #168	; 0xa8
 80213e6:	0040      	lsls	r0, r0, #1
 80213e8:	1812      	adds	r2, r2, r0
 80213ea:	19d2      	adds	r2, r2, r7
 80213ec:	7812      	ldrb	r2, [r2, #0]
 80213ee:	18cb      	adds	r3, r1, r3
 80213f0:	b298      	uxth	r0, r3
 80213f2:	4910      	ldr	r1, [pc, #64]	; (8021434 <Send_DpmConfigSetCnf+0x34c>)
 80213f4:	0013      	movs	r3, r2
 80213f6:	005b      	lsls	r3, r3, #1
 80213f8:	189b      	adds	r3, r3, r2
 80213fa:	009b      	lsls	r3, r3, #2
 80213fc:	18cb      	adds	r3, r1, r3
 80213fe:	3308      	adds	r3, #8
 8021400:	1c02      	adds	r2, r0, #0
 8021402:	801a      	strh	r2, [r3, #0]
        break;
 8021404:	e197      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 8021406:	4b0d      	ldr	r3, [pc, #52]	; (802143c <Send_DpmConfigSetCnf+0x354>)
 8021408:	221c      	movs	r2, #28
 802140a:	2100      	movs	r1, #0
 802140c:	0018      	movs	r0, r3
 802140e:	f002 f901 	bl	8023614 <memset>
          index_pdo = 0;
 8021412:	2300      	movs	r3, #0
 8021414:	22a2      	movs	r2, #162	; 0xa2
 8021416:	0052      	lsls	r2, r2, #1
 8021418:	18ba      	adds	r2, r7, r2
 802141a:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 802141c:	2300      	movs	r3, #0
 802141e:	22a0      	movs	r2, #160	; 0xa0
 8021420:	0052      	lsls	r2, r2, #1
 8021422:	18ba      	adds	r2, r7, r2
 8021424:	6013      	str	r3, [r2, #0]
 8021426:	e048      	b.n	80214ba <Send_DpmConfigSetCnf+0x3d2>
 8021428:	fffffebf 	.word	0xfffffebf
 802142c:	fffffec7 	.word	0xfffffec7
 8021430:	080253e4 	.word	0x080253e4
 8021434:	200000f8 	.word	0x200000f8
 8021438:	2000010c 	.word	0x2000010c
 802143c:	20000184 	.word	0x20000184
          {
            pdo = USBPD_LE32(&value[index_gui]);
 8021440:	248e      	movs	r4, #142	; 0x8e
 8021442:	0064      	lsls	r4, r4, #1
 8021444:	193b      	adds	r3, r7, r4
 8021446:	681a      	ldr	r2, [r3, #0]
 8021448:	20a0      	movs	r0, #160	; 0xa0
 802144a:	0040      	lsls	r0, r0, #1
 802144c:	183b      	adds	r3, r7, r0
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	18d3      	adds	r3, r2, r3
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	0019      	movs	r1, r3
 8021456:	193b      	adds	r3, r7, r4
 8021458:	681a      	ldr	r2, [r3, #0]
 802145a:	183b      	adds	r3, r7, r0
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	3301      	adds	r3, #1
 8021460:	18d3      	adds	r3, r2, r3
 8021462:	781b      	ldrb	r3, [r3, #0]
 8021464:	021b      	lsls	r3, r3, #8
 8021466:	18ca      	adds	r2, r1, r3
 8021468:	193b      	adds	r3, r7, r4
 802146a:	6819      	ldr	r1, [r3, #0]
 802146c:	183b      	adds	r3, r7, r0
 802146e:	681b      	ldr	r3, [r3, #0]
 8021470:	3302      	adds	r3, #2
 8021472:	18cb      	adds	r3, r1, r3
 8021474:	781b      	ldrb	r3, [r3, #0]
 8021476:	041b      	lsls	r3, r3, #16
 8021478:	18d2      	adds	r2, r2, r3
 802147a:	193b      	adds	r3, r7, r4
 802147c:	6819      	ldr	r1, [r3, #0]
 802147e:	183b      	adds	r3, r7, r0
 8021480:	681b      	ldr	r3, [r3, #0]
 8021482:	3303      	adds	r3, #3
 8021484:	18cb      	adds	r3, r1, r3
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	061b      	lsls	r3, r3, #24
 802148a:	18d3      	adds	r3, r2, r3
 802148c:	219a      	movs	r1, #154	; 0x9a
 802148e:	0049      	lsls	r1, r1, #1
 8021490:	187a      	adds	r2, r7, r1
 8021492:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 8021494:	4b94      	ldr	r3, [pc, #592]	; (80216e8 <Send_DpmConfigSetCnf+0x600>)
 8021496:	24a2      	movs	r4, #162	; 0xa2
 8021498:	0064      	lsls	r4, r4, #1
 802149a:	193a      	adds	r2, r7, r4
 802149c:	6812      	ldr	r2, [r2, #0]
 802149e:	0092      	lsls	r2, r2, #2
 80214a0:	1879      	adds	r1, r7, r1
 80214a2:	6809      	ldr	r1, [r1, #0]
 80214a4:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 80214a6:	193b      	adds	r3, r7, r4
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	3301      	adds	r3, #1
 80214ac:	193a      	adds	r2, r7, r4
 80214ae:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80214b0:	183b      	adds	r3, r7, r0
 80214b2:	681b      	ldr	r3, [r3, #0]
 80214b4:	3304      	adds	r3, #4
 80214b6:	183a      	adds	r2, r7, r0
 80214b8:	6013      	str	r3, [r2, #0]
 80214ba:	218d      	movs	r1, #141	; 0x8d
 80214bc:	0049      	lsls	r1, r1, #1
 80214be:	187b      	adds	r3, r7, r1
 80214c0:	881b      	ldrh	r3, [r3, #0]
 80214c2:	001a      	movs	r2, r3
 80214c4:	23a0      	movs	r3, #160	; 0xa0
 80214c6:	005b      	lsls	r3, r3, #1
 80214c8:	18fb      	adds	r3, r7, r3
 80214ca:	681b      	ldr	r3, [r3, #0]
 80214cc:	4293      	cmp	r3, r2
 80214ce:	d3b7      	bcc.n	8021440 <Send_DpmConfigSetCnf+0x358>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 80214d0:	187b      	adds	r3, r7, r1
 80214d2:	881b      	ldrh	r3, [r3, #0]
 80214d4:	089b      	lsrs	r3, r3, #2
 80214d6:	b29b      	uxth	r3, r3
 80214d8:	b2da      	uxtb	r2, r3
 80214da:	4b84      	ldr	r3, [pc, #528]	; (80216ec <Send_DpmConfigSetCnf+0x604>)
 80214dc:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 80214de:	f000 fe2f 	bl	8022140 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 80214e2:	e128      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 80214e4:	238e      	movs	r3, #142	; 0x8e
 80214e6:	005b      	lsls	r3, r3, #1
 80214e8:	18fb      	adds	r3, r7, r3
 80214ea:	681a      	ldr	r2, [r3, #0]
 80214ec:	214c      	movs	r1, #76	; 0x4c
 80214ee:	31ff      	adds	r1, #255	; 0xff
 80214f0:	187b      	adds	r3, r7, r1
 80214f2:	7812      	ldrb	r2, [r2, #0]
 80214f4:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 80214f6:	4b7e      	ldr	r3, [pc, #504]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 80214f8:	22a8      	movs	r2, #168	; 0xa8
 80214fa:	0052      	lsls	r2, r2, #1
 80214fc:	189b      	adds	r3, r3, r2
 80214fe:	19db      	adds	r3, r3, r7
 8021500:	781b      	ldrb	r3, [r3, #0]
 8021502:	187a      	adds	r2, r7, r1
 8021504:	7812      	ldrb	r2, [r2, #0]
 8021506:	217f      	movs	r1, #127	; 0x7f
 8021508:	400a      	ands	r2, r1
 802150a:	b2d4      	uxtb	r4, r2
 802150c:	4a79      	ldr	r2, [pc, #484]	; (80216f4 <Send_DpmConfigSetCnf+0x60c>)
 802150e:	2168      	movs	r1, #104	; 0x68
 8021510:	2074      	movs	r0, #116	; 0x74
 8021512:	4343      	muls	r3, r0
 8021514:	18d3      	adds	r3, r2, r3
 8021516:	185b      	adds	r3, r3, r1
 8021518:	1c22      	adds	r2, r4, #0
 802151a:	1890      	adds	r0, r2, r2
 802151c:	791a      	ldrb	r2, [r3, #4]
 802151e:	2101      	movs	r1, #1
 8021520:	400a      	ands	r2, r1
 8021522:	1c11      	adds	r1, r2, #0
 8021524:	1c02      	adds	r2, r0, #0
 8021526:	430a      	orrs	r2, r1
 8021528:	711a      	strb	r2, [r3, #4]
        flag_drp = 1;
 802152a:	23a6      	movs	r3, #166	; 0xa6
 802152c:	005b      	lsls	r3, r3, #1
 802152e:	18fb      	adds	r3, r7, r3
 8021530:	2201      	movs	r2, #1
 8021532:	701a      	strb	r2, [r3, #0]
        break;
 8021534:	e0ff      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 8021536:	238e      	movs	r3, #142	; 0x8e
 8021538:	005b      	lsls	r3, r3, #1
 802153a:	18fb      	adds	r3, r7, r3
 802153c:	681b      	ldr	r3, [r3, #0]
 802153e:	781a      	ldrb	r2, [r3, #0]
 8021540:	21a7      	movs	r1, #167	; 0xa7
 8021542:	0049      	lsls	r1, r1, #1
 8021544:	187b      	adds	r3, r7, r1
 8021546:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 8021548:	4b69      	ldr	r3, [pc, #420]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 802154a:	22a8      	movs	r2, #168	; 0xa8
 802154c:	0052      	lsls	r2, r2, #1
 802154e:	189b      	adds	r3, r3, r2
 8021550:	19db      	adds	r3, r3, r7
 8021552:	781b      	ldrb	r3, [r3, #0]
 8021554:	187a      	adds	r2, r7, r1
 8021556:	8812      	ldrh	r2, [r2, #0]
 8021558:	1c11      	adds	r1, r2, #0
 802155a:	227f      	movs	r2, #127	; 0x7f
 802155c:	400a      	ands	r2, r1
 802155e:	b2d2      	uxtb	r2, r2
 8021560:	4964      	ldr	r1, [pc, #400]	; (80216f4 <Send_DpmConfigSetCnf+0x60c>)
 8021562:	2068      	movs	r0, #104	; 0x68
 8021564:	2474      	movs	r4, #116	; 0x74
 8021566:	4363      	muls	r3, r4
 8021568:	18cb      	adds	r3, r1, r3
 802156a:	181b      	adds	r3, r3, r0
 802156c:	217f      	movs	r1, #127	; 0x7f
 802156e:	400a      	ands	r2, r1
 8021570:	0010      	movs	r0, r2
 8021572:	795a      	ldrb	r2, [r3, #5]
 8021574:	217f      	movs	r1, #127	; 0x7f
 8021576:	438a      	bics	r2, r1
 8021578:	1c11      	adds	r1, r2, #0
 802157a:	1c02      	adds	r2, r0, #0
 802157c:	430a      	orrs	r2, r1
 802157e:	715a      	strb	r2, [r3, #5]
        flag_drp = 1;
 8021580:	23a6      	movs	r3, #166	; 0xa6
 8021582:	005b      	lsls	r3, r3, #1
 8021584:	18fb      	adds	r3, r7, r3
 8021586:	2201      	movs	r2, #1
 8021588:	701a      	strb	r2, [r3, #0]
        break;
 802158a:	e0d4      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 802158c:	238e      	movs	r3, #142	; 0x8e
 802158e:	005b      	lsls	r3, r3, #1
 8021590:	18fb      	adds	r3, r7, r3
 8021592:	681b      	ldr	r3, [r3, #0]
 8021594:	7819      	ldrb	r1, [r3, #0]
 8021596:	4b56      	ldr	r3, [pc, #344]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 8021598:	22a8      	movs	r2, #168	; 0xa8
 802159a:	0052      	lsls	r2, r2, #1
 802159c:	189b      	adds	r3, r3, r2
 802159e:	19db      	adds	r3, r3, r7
 80215a0:	781a      	ldrb	r2, [r3, #0]
 80215a2:	2301      	movs	r3, #1
 80215a4:	400b      	ands	r3, r1
 80215a6:	b2d9      	uxtb	r1, r3
 80215a8:	4853      	ldr	r0, [pc, #332]	; (80216f8 <Send_DpmConfigSetCnf+0x610>)
 80215aa:	0013      	movs	r3, r2
 80215ac:	005b      	lsls	r3, r3, #1
 80215ae:	189b      	adds	r3, r3, r2
 80215b0:	009b      	lsls	r3, r3, #2
 80215b2:	18c3      	adds	r3, r0, r3
 80215b4:	2201      	movs	r2, #1
 80215b6:	4011      	ands	r1, r2
 80215b8:	0008      	movs	r0, r1
 80215ba:	795a      	ldrb	r2, [r3, #5]
 80215bc:	2101      	movs	r1, #1
 80215be:	438a      	bics	r2, r1
 80215c0:	1c11      	adds	r1, r2, #0
 80215c2:	1c02      	adds	r2, r0, #0
 80215c4:	430a      	orrs	r2, r1
 80215c6:	715a      	strb	r2, [r3, #5]
        break;
 80215c8:	e0b5      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 80215ca:	238e      	movs	r3, #142	; 0x8e
 80215cc:	005b      	lsls	r3, r3, #1
 80215ce:	18fb      	adds	r3, r7, r3
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	7819      	ldrb	r1, [r3, #0]
 80215d4:	4b46      	ldr	r3, [pc, #280]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 80215d6:	22a8      	movs	r2, #168	; 0xa8
 80215d8:	0052      	lsls	r2, r2, #1
 80215da:	189b      	adds	r3, r3, r2
 80215dc:	19db      	adds	r3, r3, r7
 80215de:	781a      	ldrb	r2, [r3, #0]
 80215e0:	2301      	movs	r3, #1
 80215e2:	400b      	ands	r3, r1
 80215e4:	b2d9      	uxtb	r1, r3
 80215e6:	4844      	ldr	r0, [pc, #272]	; (80216f8 <Send_DpmConfigSetCnf+0x610>)
 80215e8:	0013      	movs	r3, r2
 80215ea:	005b      	lsls	r3, r3, #1
 80215ec:	189b      	adds	r3, r3, r2
 80215ee:	009b      	lsls	r3, r3, #2
 80215f0:	18c3      	adds	r3, r0, r3
 80215f2:	2201      	movs	r2, #1
 80215f4:	400a      	ands	r2, r1
 80215f6:	1890      	adds	r0, r2, r2
 80215f8:	795a      	ldrb	r2, [r3, #5]
 80215fa:	2102      	movs	r1, #2
 80215fc:	438a      	bics	r2, r1
 80215fe:	1c11      	adds	r1, r2, #0
 8021600:	1c02      	adds	r2, r0, #0
 8021602:	430a      	orrs	r2, r1
 8021604:	715a      	strb	r2, [r3, #5]
        break;
 8021606:	e096      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8021608:	208e      	movs	r0, #142	; 0x8e
 802160a:	0040      	lsls	r0, r0, #1
 802160c:	183b      	adds	r3, r7, r0
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	781b      	ldrb	r3, [r3, #0]
 8021612:	001a      	movs	r2, r3
 8021614:	183b      	adds	r3, r7, r0
 8021616:	681b      	ldr	r3, [r3, #0]
 8021618:	3301      	adds	r3, #1
 802161a:	781b      	ldrb	r3, [r3, #0]
 802161c:	021b      	lsls	r3, r3, #8
 802161e:	18d2      	adds	r2, r2, r3
 8021620:	183b      	adds	r3, r7, r0
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	3302      	adds	r3, #2
 8021626:	781b      	ldrb	r3, [r3, #0]
 8021628:	041b      	lsls	r3, r3, #16
 802162a:	18d1      	adds	r1, r2, r3
 802162c:	183b      	adds	r3, r7, r0
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	3303      	adds	r3, #3
 8021632:	781b      	ldrb	r3, [r3, #0]
 8021634:	061b      	lsls	r3, r3, #24
 8021636:	4a2e      	ldr	r2, [pc, #184]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 8021638:	20a8      	movs	r0, #168	; 0xa8
 802163a:	0040      	lsls	r0, r0, #1
 802163c:	1812      	adds	r2, r2, r0
 802163e:	19d2      	adds	r2, r2, r7
 8021640:	7812      	ldrb	r2, [r2, #0]
 8021642:	18c9      	adds	r1, r1, r3
 8021644:	4b2d      	ldr	r3, [pc, #180]	; (80216fc <Send_DpmConfigSetCnf+0x614>)
 8021646:	00d2      	lsls	r2, r2, #3
 8021648:	50d1      	str	r1, [r2, r3]
        break;
 802164a:	e074      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 802164c:	228e      	movs	r2, #142	; 0x8e
 802164e:	0052      	lsls	r2, r2, #1
 8021650:	18bb      	adds	r3, r7, r2
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	781b      	ldrb	r3, [r3, #0]
 8021656:	b299      	uxth	r1, r3
 8021658:	18bb      	adds	r3, r7, r2
 802165a:	681b      	ldr	r3, [r3, #0]
 802165c:	3301      	adds	r3, #1
 802165e:	781b      	ldrb	r3, [r3, #0]
 8021660:	b29b      	uxth	r3, r3
 8021662:	021b      	lsls	r3, r3, #8
 8021664:	b29a      	uxth	r2, r3
 8021666:	4b22      	ldr	r3, [pc, #136]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 8021668:	20a8      	movs	r0, #168	; 0xa8
 802166a:	0040      	lsls	r0, r0, #1
 802166c:	181b      	adds	r3, r3, r0
 802166e:	19db      	adds	r3, r3, r7
 8021670:	781b      	ldrb	r3, [r3, #0]
 8021672:	188a      	adds	r2, r1, r2
 8021674:	b291      	uxth	r1, r2
 8021676:	4a21      	ldr	r2, [pc, #132]	; (80216fc <Send_DpmConfigSetCnf+0x614>)
 8021678:	00db      	lsls	r3, r3, #3
 802167a:	18d3      	adds	r3, r2, r3
 802167c:	3304      	adds	r3, #4
 802167e:	1c0a      	adds	r2, r1, #0
 8021680:	801a      	strh	r2, [r3, #0]
        break;
 8021682:	e058      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 8021684:	228e      	movs	r2, #142	; 0x8e
 8021686:	0052      	lsls	r2, r2, #1
 8021688:	18bb      	adds	r3, r7, r2
 802168a:	681b      	ldr	r3, [r3, #0]
 802168c:	781b      	ldrb	r3, [r3, #0]
 802168e:	b299      	uxth	r1, r3
 8021690:	18bb      	adds	r3, r7, r2
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	3301      	adds	r3, #1
 8021696:	781b      	ldrb	r3, [r3, #0]
 8021698:	b29b      	uxth	r3, r3
 802169a:	021b      	lsls	r3, r3, #8
 802169c:	b29a      	uxth	r2, r3
 802169e:	4b14      	ldr	r3, [pc, #80]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 80216a0:	20a8      	movs	r0, #168	; 0xa8
 80216a2:	0040      	lsls	r0, r0, #1
 80216a4:	181b      	adds	r3, r3, r0
 80216a6:	19db      	adds	r3, r3, r7
 80216a8:	781b      	ldrb	r3, [r3, #0]
 80216aa:	188a      	adds	r2, r1, r2
 80216ac:	b291      	uxth	r1, r2
 80216ae:	4a13      	ldr	r2, [pc, #76]	; (80216fc <Send_DpmConfigSetCnf+0x614>)
 80216b0:	00db      	lsls	r3, r3, #3
 80216b2:	18d3      	adds	r3, r2, r3
 80216b4:	3306      	adds	r3, #6
 80216b6:	1c0a      	adds	r2, r1, #0
 80216b8:	801a      	strh	r2, [r3, #0]
        break;
 80216ba:	e03c      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 80216bc:	238e      	movs	r3, #142	; 0x8e
 80216be:	005b      	lsls	r3, r3, #1
 80216c0:	18fb      	adds	r3, r7, r3
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	4a0a      	ldr	r2, [pc, #40]	; (80216f0 <Send_DpmConfigSetCnf+0x608>)
 80216c6:	21a8      	movs	r1, #168	; 0xa8
 80216c8:	0049      	lsls	r1, r1, #1
 80216ca:	1852      	adds	r2, r2, r1
 80216cc:	19d2      	adds	r2, r2, r7
 80216ce:	7812      	ldrb	r2, [r2, #0]
 80216d0:	7818      	ldrb	r0, [r3, #0]
 80216d2:	490b      	ldr	r1, [pc, #44]	; (8021700 <Send_DpmConfigSetCnf+0x618>)
 80216d4:	0013      	movs	r3, r2
 80216d6:	005b      	lsls	r3, r3, #1
 80216d8:	189b      	adds	r3, r3, r2
 80216da:	005b      	lsls	r3, r3, #1
 80216dc:	18cb      	adds	r3, r1, r3
 80216de:	3304      	adds	r3, #4
 80216e0:	1c02      	adds	r2, r0, #0
 80216e2:	701a      	strb	r2, [r3, #0]
        break;
 80216e4:	e027      	b.n	8021736 <Send_DpmConfigSetCnf+0x64e>
 80216e6:	46c0      	nop			; (mov r8, r8)
 80216e8:	20000184 	.word	0x20000184
 80216ec:	20000180 	.word	0x20000180
 80216f0:	fffffebf 	.word	0xfffffebf
 80216f4:	2000010c 	.word	0x2000010c
 80216f8:	200000f8 	.word	0x200000f8
 80216fc:	20000104 	.word	0x20000104
 8021700:	20004978 	.word	0x20004978
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 8021704:	231a      	movs	r3, #26
 8021706:	33ff      	adds	r3, #255	; 0xff
 8021708:	18fb      	adds	r3, r7, r3
 802170a:	2200      	movs	r2, #0
 802170c:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 802170e:	204e      	movs	r0, #78	; 0x4e
 8021710:	30ff      	adds	r0, #255	; 0xff
 8021712:	183b      	adds	r3, r7, r0
 8021714:	781b      	ldrb	r3, [r3, #0]
 8021716:	4a90      	ldr	r2, [pc, #576]	; (8021958 <Send_DpmConfigSetCnf+0x870>)
 8021718:	24a8      	movs	r4, #168	; 0xa8
 802171a:	0064      	lsls	r4, r4, #1
 802171c:	1912      	adds	r2, r2, r4
 802171e:	19d2      	adds	r2, r2, r7
 8021720:	7811      	ldrb	r1, [r2, #0]
 8021722:	4a8e      	ldr	r2, [pc, #568]	; (802195c <Send_DpmConfigSetCnf+0x874>)
 8021724:	1912      	adds	r2, r2, r4
 8021726:	19d2      	adds	r2, r2, r7
 8021728:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 802172a:	183b      	adds	r3, r7, r0
 802172c:	781a      	ldrb	r2, [r3, #0]
 802172e:	183b      	adds	r3, r7, r0
 8021730:	3201      	adds	r2, #1
 8021732:	701a      	strb	r2, [r3, #0]
        break;
 8021734:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8021736:	238e      	movs	r3, #142	; 0x8e
 8021738:	005b      	lsls	r3, r3, #1
 802173a:	18fb      	adds	r3, r7, r3
 802173c:	228d      	movs	r2, #141	; 0x8d
 802173e:	0052      	lsls	r2, r2, #1
 8021740:	18ba      	adds	r2, r7, r2
 8021742:	2117      	movs	r1, #23
 8021744:	1879      	adds	r1, r7, r1
 8021746:	2090      	movs	r0, #144	; 0x90
 8021748:	0040      	lsls	r0, r0, #1
 802174a:	1838      	adds	r0, r7, r0
 802174c:	f7fd fd3a 	bl	801f1c4 <TLV_get>
 8021750:	0003      	movs	r3, r0
 8021752:	2bff      	cmp	r3, #255	; 0xff
 8021754:	d000      	beq.n	8021758 <Send_DpmConfigSetCnf+0x670>
 8021756:	e508      	b.n	802116a <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8021758:	23a6      	movs	r3, #166	; 0xa6
 802175a:	005b      	lsls	r3, r3, #1
 802175c:	18fb      	adds	r3, r7, r3
 802175e:	781b      	ldrb	r3, [r3, #0]
 8021760:	2b01      	cmp	r3, #1
 8021762:	d000      	beq.n	8021766 <Send_DpmConfigSetCnf+0x67e>
 8021764:	e0a2      	b.n	80218ac <Send_DpmConfigSetCnf+0x7c4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 8021766:	244c      	movs	r4, #76	; 0x4c
 8021768:	34ff      	adds	r4, #255	; 0xff
 802176a:	193b      	adds	r3, r7, r4
 802176c:	781b      	ldrb	r3, [r3, #0]
 802176e:	2b00      	cmp	r3, #0
 8021770:	d11c      	bne.n	80217ac <Send_DpmConfigSetCnf+0x6c4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 8021772:	4b7b      	ldr	r3, [pc, #492]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 8021774:	20a8      	movs	r0, #168	; 0xa8
 8021776:	0040      	lsls	r0, r0, #1
 8021778:	181b      	adds	r3, r3, r0
 802177a:	19db      	adds	r3, r3, r7
 802177c:	781a      	ldrb	r2, [r3, #0]
 802177e:	4979      	ldr	r1, [pc, #484]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 8021780:	0013      	movs	r3, r2
 8021782:	005b      	lsls	r3, r3, #1
 8021784:	189b      	adds	r3, r3, r2
 8021786:	009b      	lsls	r3, r3, #2
 8021788:	18cb      	adds	r3, r1, r3
 802178a:	3306      	adds	r3, #6
 802178c:	7819      	ldrb	r1, [r3, #0]
 802178e:	4b74      	ldr	r3, [pc, #464]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 8021790:	181b      	adds	r3, r3, r0
 8021792:	19db      	adds	r3, r3, r7
 8021794:	781a      	ldrb	r2, [r3, #0]
 8021796:	4873      	ldr	r0, [pc, #460]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 8021798:	0013      	movs	r3, r2
 802179a:	005b      	lsls	r3, r3, #1
 802179c:	189b      	adds	r3, r3, r2
 802179e:	009b      	lsls	r3, r3, #2
 80217a0:	18c3      	adds	r3, r0, r3
 80217a2:	3307      	adds	r3, #7
 80217a4:	781a      	ldrb	r2, [r3, #0]
 80217a6:	193b      	adds	r3, r7, r4
 80217a8:	188a      	adds	r2, r1, r2
 80217aa:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 80217ac:	26a7      	movs	r6, #167	; 0xa7
 80217ae:	0076      	lsls	r6, r6, #1
 80217b0:	19bb      	adds	r3, r7, r6
 80217b2:	881b      	ldrh	r3, [r3, #0]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d133      	bne.n	8021820 <Send_DpmConfigSetCnf+0x738>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 80217b8:	4b69      	ldr	r3, [pc, #420]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 80217ba:	24a8      	movs	r4, #168	; 0xa8
 80217bc:	0064      	lsls	r4, r4, #1
 80217be:	191b      	adds	r3, r3, r4
 80217c0:	19db      	adds	r3, r3, r7
 80217c2:	781a      	ldrb	r2, [r3, #0]
 80217c4:	4967      	ldr	r1, [pc, #412]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 80217c6:	0013      	movs	r3, r2
 80217c8:	005b      	lsls	r3, r3, #1
 80217ca:	189b      	adds	r3, r3, r2
 80217cc:	009b      	lsls	r3, r3, #2
 80217ce:	18cb      	adds	r3, r1, r3
 80217d0:	3307      	adds	r3, #7
 80217d2:	781b      	ldrb	r3, [r3, #0]
 80217d4:	001a      	movs	r2, r3
 80217d6:	2364      	movs	r3, #100	; 0x64
 80217d8:	4353      	muls	r3, r2
 80217da:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 80217dc:	4b60      	ldr	r3, [pc, #384]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 80217de:	0025      	movs	r5, r4
 80217e0:	191b      	adds	r3, r3, r4
 80217e2:	19db      	adds	r3, r3, r7
 80217e4:	781a      	ldrb	r2, [r3, #0]
 80217e6:	495f      	ldr	r1, [pc, #380]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 80217e8:	0013      	movs	r3, r2
 80217ea:	005b      	lsls	r3, r3, #1
 80217ec:	189b      	adds	r3, r3, r2
 80217ee:	009b      	lsls	r3, r3, #2
 80217f0:	18cb      	adds	r3, r1, r3
 80217f2:	3306      	adds	r3, #6
 80217f4:	781b      	ldrb	r3, [r3, #0]
 80217f6:	001c      	movs	r4, r3
 80217f8:	4b59      	ldr	r3, [pc, #356]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 80217fa:	195b      	adds	r3, r3, r5
 80217fc:	19db      	adds	r3, r3, r7
 80217fe:	781a      	ldrb	r2, [r3, #0]
 8021800:	4958      	ldr	r1, [pc, #352]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 8021802:	0013      	movs	r3, r2
 8021804:	005b      	lsls	r3, r3, #1
 8021806:	189b      	adds	r3, r3, r2
 8021808:	009b      	lsls	r3, r3, #2
 802180a:	18cb      	adds	r3, r1, r3
 802180c:	3307      	adds	r3, #7
 802180e:	781b      	ldrb	r3, [r3, #0]
 8021810:	18e3      	adds	r3, r4, r3
 8021812:	0019      	movs	r1, r3
 8021814:	f7e4 fcec 	bl	80061f0 <__udivsi3>
 8021818:	0003      	movs	r3, r0
 802181a:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 802181c:	19bb      	adds	r3, r7, r6
 802181e:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 8021820:	254c      	movs	r5, #76	; 0x4c
 8021822:	35ff      	adds	r5, #255	; 0xff
 8021824:	197b      	adds	r3, r7, r5
 8021826:	781b      	ldrb	r3, [r3, #0]
 8021828:	26a7      	movs	r6, #167	; 0xa7
 802182a:	0076      	lsls	r6, r6, #1
 802182c:	19ba      	adds	r2, r7, r6
 802182e:	8812      	ldrh	r2, [r2, #0]
 8021830:	4353      	muls	r3, r2
 8021832:	2164      	movs	r1, #100	; 0x64
 8021834:	0018      	movs	r0, r3
 8021836:	f7e4 fcdb 	bl	80061f0 <__udivsi3>
 802183a:	0003      	movs	r3, r0
 802183c:	001a      	movs	r2, r3
 802183e:	249d      	movs	r4, #157	; 0x9d
 8021840:	0064      	lsls	r4, r4, #1
 8021842:	193b      	adds	r3, r7, r4
 8021844:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 8021846:	4b46      	ldr	r3, [pc, #280]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 8021848:	22a8      	movs	r2, #168	; 0xa8
 802184a:	0052      	lsls	r2, r2, #1
 802184c:	189b      	adds	r3, r3, r2
 802184e:	19db      	adds	r3, r3, r7
 8021850:	781a      	ldrb	r2, [r3, #0]
 8021852:	193b      	adds	r3, r7, r4
 8021854:	881b      	ldrh	r3, [r3, #0]
 8021856:	b2d8      	uxtb	r0, r3
 8021858:	4942      	ldr	r1, [pc, #264]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 802185a:	0013      	movs	r3, r2
 802185c:	005b      	lsls	r3, r3, #1
 802185e:	189b      	adds	r3, r3, r2
 8021860:	009b      	lsls	r3, r3, #2
 8021862:	18cb      	adds	r3, r1, r3
 8021864:	3307      	adds	r3, #7
 8021866:	1c02      	adds	r2, r0, #0
 8021868:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 802186a:	197b      	adds	r3, r7, r5
 802186c:	781b      	ldrb	r3, [r3, #0]
 802186e:	19ba      	adds	r2, r7, r6
 8021870:	8812      	ldrh	r2, [r2, #0]
 8021872:	2164      	movs	r1, #100	; 0x64
 8021874:	1a8a      	subs	r2, r1, r2
 8021876:	4353      	muls	r3, r2
 8021878:	2164      	movs	r1, #100	; 0x64
 802187a:	0018      	movs	r0, r3
 802187c:	f7e4 fcb8 	bl	80061f0 <__udivsi3>
 8021880:	0003      	movs	r3, r0
 8021882:	001a      	movs	r2, r3
 8021884:	193b      	adds	r3, r7, r4
 8021886:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8021888:	4b35      	ldr	r3, [pc, #212]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 802188a:	22a8      	movs	r2, #168	; 0xa8
 802188c:	0052      	lsls	r2, r2, #1
 802188e:	189b      	adds	r3, r3, r2
 8021890:	19db      	adds	r3, r3, r7
 8021892:	781a      	ldrb	r2, [r3, #0]
 8021894:	193b      	adds	r3, r7, r4
 8021896:	881b      	ldrh	r3, [r3, #0]
 8021898:	b2d8      	uxtb	r0, r3
 802189a:	4932      	ldr	r1, [pc, #200]	; (8021964 <Send_DpmConfigSetCnf+0x87c>)
 802189c:	0013      	movs	r3, r2
 802189e:	005b      	lsls	r3, r3, #1
 80218a0:	189b      	adds	r3, r3, r2
 80218a2:	009b      	lsls	r3, r3, #2
 80218a4:	18cb      	adds	r3, r1, r3
 80218a6:	3306      	adds	r3, #6
 80218a8:	1c02      	adds	r2, r0, #0
 80218aa:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 80218ac:	241a      	movs	r4, #26
 80218ae:	34ff      	adds	r4, #255	; 0xff
 80218b0:	193b      	adds	r3, r7, r4
 80218b2:	781b      	ldrb	r3, [r3, #0]
 80218b4:	2bff      	cmp	r3, #255	; 0xff
 80218b6:	d04b      	beq.n	8021950 <Send_DpmConfigSetCnf+0x868>
  {
    TLV_deinit_encode(&send_tlv);
 80218b8:	2594      	movs	r5, #148	; 0x94
 80218ba:	006d      	lsls	r5, r5, #1
 80218bc:	197b      	adds	r3, r7, r5
 80218be:	0018      	movs	r0, r3
 80218c0:	f7fd fc42 	bl	801f148 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 80218c4:	4b26      	ldr	r3, [pc, #152]	; (8021960 <Send_DpmConfigSetCnf+0x878>)
 80218c6:	22a8      	movs	r2, #168	; 0xa8
 80218c8:	0052      	lsls	r2, r2, #1
 80218ca:	189b      	adds	r3, r3, r2
 80218cc:	19db      	adds	r3, r3, r7
 80218ce:	781b      	ldrb	r3, [r3, #0]
 80218d0:	3301      	adds	r3, #1
 80218d2:	015b      	lsls	r3, r3, #5
 80218d4:	b25b      	sxtb	r3, r3
 80218d6:	2208      	movs	r2, #8
 80218d8:	4313      	orrs	r3, r2
 80218da:	b25b      	sxtb	r3, r3
 80218dc:	b2d9      	uxtb	r1, r3
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	2280      	movs	r2, #128	; 0x80
 80218e2:	0052      	lsls	r2, r2, #1
 80218e4:	1978      	adds	r0, r7, r5
 80218e6:	f7fd fa6a 	bl	801edbe <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 80218ea:	1939      	adds	r1, r7, r4
 80218ec:	197b      	adds	r3, r7, r5
 80218ee:	2201      	movs	r2, #1
 80218f0:	0018      	movs	r0, r3
 80218f2:	f7fd fb95 	bl	801f020 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 80218f6:	193b      	adds	r3, r7, r4
 80218f8:	781b      	ldrb	r3, [r3, #0]
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	d022      	beq.n	8021944 <Send_DpmConfigSetCnf+0x85c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 80218fe:	2300      	movs	r3, #0
 8021900:	229e      	movs	r2, #158	; 0x9e
 8021902:	0052      	lsls	r2, r2, #1
 8021904:	18ba      	adds	r2, r7, r2
 8021906:	6013      	str	r3, [r2, #0]
 8021908:	e012      	b.n	8021930 <Send_DpmConfigSetCnf+0x848>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 802190a:	2318      	movs	r3, #24
 802190c:	18fa      	adds	r2, r7, r3
 802190e:	249e      	movs	r4, #158	; 0x9e
 8021910:	0064      	lsls	r4, r4, #1
 8021912:	193b      	adds	r3, r7, r4
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	18d1      	adds	r1, r2, r3
 8021918:	2394      	movs	r3, #148	; 0x94
 802191a:	005b      	lsls	r3, r3, #1
 802191c:	18fb      	adds	r3, r7, r3
 802191e:	2201      	movs	r2, #1
 8021920:	0018      	movs	r0, r3
 8021922:	f7fd fb7d 	bl	801f020 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 8021926:	193b      	adds	r3, r7, r4
 8021928:	681b      	ldr	r3, [r3, #0]
 802192a:	3301      	adds	r3, #1
 802192c:	193a      	adds	r2, r7, r4
 802192e:	6013      	str	r3, [r2, #0]
 8021930:	234e      	movs	r3, #78	; 0x4e
 8021932:	33ff      	adds	r3, #255	; 0xff
 8021934:	18fb      	adds	r3, r7, r3
 8021936:	781b      	ldrb	r3, [r3, #0]
 8021938:	229e      	movs	r2, #158	; 0x9e
 802193a:	0052      	lsls	r2, r2, #1
 802193c:	18ba      	adds	r2, r7, r2
 802193e:	6812      	ldr	r2, [r2, #0]
 8021940:	429a      	cmp	r2, r3
 8021942:	d3e2      	bcc.n	802190a <Send_DpmConfigSetCnf+0x822>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8021944:	2394      	movs	r3, #148	; 0x94
 8021946:	005b      	lsls	r3, r3, #1
 8021948:	18fb      	adds	r3, r7, r3
 802194a:	0018      	movs	r0, r3
 802194c:	f7fd fbfc 	bl	801f148 <TLV_deinit_encode>
  }
}
 8021950:	46c0      	nop			; (mov r8, r8)
 8021952:	46bd      	mov	sp, r7
 8021954:	b055      	add	sp, #340	; 0x154
 8021956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021958:	fffffec7 	.word	0xfffffec7
 802195c:	fffffec8 	.word	0xfffffec8
 8021960:	fffffebf 	.word	0xfffffebf
 8021964:	200000f8 	.word	0x200000f8

08021968 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8021968:	b580      	push	{r7, lr}
 802196a:	b092      	sub	sp, #72	; 0x48
 802196c:	af00      	add	r7, sp, #0
 802196e:	60b9      	str	r1, [r7, #8]
 8021970:	607a      	str	r2, [r7, #4]
 8021972:	210f      	movs	r1, #15
 8021974:	187b      	adds	r3, r7, r1
 8021976:	1c02      	adds	r2, r0, #0
 8021978:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 802197a:	187b      	adds	r3, r7, r1
 802197c:	781b      	ldrb	r3, [r3, #0]
 802197e:	3301      	adds	r3, #1
 8021980:	015b      	lsls	r3, r3, #5
 8021982:	b25b      	sxtb	r3, r3
 8021984:	2205      	movs	r2, #5
 8021986:	4313      	orrs	r3, r2
 8021988:	b25b      	sxtb	r3, r3
 802198a:	b2d9      	uxtb	r1, r3
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	2280      	movs	r2, #128	; 0x80
 8021990:	0052      	lsls	r2, r2, #1
 8021992:	2030      	movs	r0, #48	; 0x30
 8021994:	1838      	adds	r0, r7, r0
 8021996:	f7fd fa12 	bl	801edbe <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 802199a:	68bb      	ldr	r3, [r7, #8]
 802199c:	0018      	movs	r0, r3
 802199e:	f7fd fc79 	bl	801f294 <TLV_get_string_length>
 80219a2:	0003      	movs	r3, r0
 80219a4:	001a      	movs	r2, r3
 80219a6:	2344      	movs	r3, #68	; 0x44
 80219a8:	18fb      	adds	r3, r7, r3
 80219aa:	3a03      	subs	r2, #3
 80219ac:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 80219ae:	2347      	movs	r3, #71	; 0x47
 80219b0:	18fb      	adds	r3, r7, r3
 80219b2:	2200      	movs	r2, #0
 80219b4:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 80219b6:	2344      	movs	r3, #68	; 0x44
 80219b8:	18fb      	adds	r3, r7, r3
 80219ba:	881b      	ldrh	r3, [r3, #0]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d104      	bne.n	80219ca <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 80219c0:	2346      	movs	r3, #70	; 0x46
 80219c2:	18fb      	adds	r3, r7, r3
 80219c4:	22ff      	movs	r2, #255	; 0xff
 80219c6:	701a      	strb	r2, [r3, #0]
 80219c8:	e009      	b.n	80219de <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 80219ca:	2347      	movs	r3, #71	; 0x47
 80219cc:	18fb      	adds	r3, r7, r3
 80219ce:	781b      	ldrb	r3, [r3, #0]
 80219d0:	3307      	adds	r3, #7
 80219d2:	68ba      	ldr	r2, [r7, #8]
 80219d4:	18d2      	adds	r2, r2, r3
 80219d6:	2346      	movs	r3, #70	; 0x46
 80219d8:	18fb      	adds	r3, r7, r3
 80219da:	7812      	ldrb	r2, [r2, #0]
 80219dc:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 80219de:	2346      	movs	r3, #70	; 0x46
 80219e0:	18fb      	adds	r3, r7, r3
 80219e2:	781b      	ldrb	r3, [r3, #0]
 80219e4:	2b1c      	cmp	r3, #28
 80219e6:	dc0d      	bgt.n	8021a04 <Send_DpmConfigGetCnf+0x9c>
 80219e8:	2b00      	cmp	r3, #0
 80219ea:	da00      	bge.n	80219ee <Send_DpmConfigGetCnf+0x86>
 80219ec:	e243      	b.n	8021e76 <Send_DpmConfigGetCnf+0x50e>
 80219ee:	2b1c      	cmp	r3, #28
 80219f0:	d900      	bls.n	80219f4 <Send_DpmConfigGetCnf+0x8c>
 80219f2:	e240      	b.n	8021e76 <Send_DpmConfigGetCnf+0x50e>
 80219f4:	009a      	lsls	r2, r3, #2
 80219f6:	4b02      	ldr	r3, [pc, #8]	; (8021a00 <Send_DpmConfigGetCnf+0x98>)
 80219f8:	18d3      	adds	r3, r2, r3
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	469f      	mov	pc, r3
 80219fe:	46c0      	nop			; (mov r8, r8)
 8021a00:	08025458 	.word	0x08025458
 8021a04:	2bff      	cmp	r3, #255	; 0xff
 8021a06:	d000      	beq.n	8021a0a <Send_DpmConfigGetCnf+0xa2>
 8021a08:	e235      	b.n	8021e76 <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8021a0a:	230f      	movs	r3, #15
 8021a0c:	18fb      	adds	r3, r7, r3
 8021a0e:	781a      	ldrb	r2, [r3, #0]
 8021a10:	49ed      	ldr	r1, [pc, #948]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021a12:	0013      	movs	r3, r2
 8021a14:	005b      	lsls	r3, r3, #1
 8021a16:	189b      	adds	r3, r3, r2
 8021a18:	009b      	lsls	r3, r3, #2
 8021a1a:	585b      	ldr	r3, [r3, r1]
 8021a1c:	b2da      	uxtb	r2, r3
 8021a1e:	212f      	movs	r1, #47	; 0x2f
 8021a20:	187b      	adds	r3, r7, r1
 8021a22:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8021a24:	187b      	adds	r3, r7, r1
 8021a26:	2230      	movs	r2, #48	; 0x30
 8021a28:	18b8      	adds	r0, r7, r2
 8021a2a:	2201      	movs	r2, #1
 8021a2c:	2100      	movs	r1, #0
 8021a2e:	f7fd fa29 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021a32:	2344      	movs	r3, #68	; 0x44
 8021a34:	18fb      	adds	r3, r7, r3
 8021a36:	881b      	ldrh	r3, [r3, #0]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d000      	beq.n	8021a3e <Send_DpmConfigGetCnf+0xd6>
 8021a3c:	e22e      	b.n	8021e9c <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8021a3e:	230f      	movs	r3, #15
 8021a40:	18fb      	adds	r3, r7, r3
 8021a42:	781a      	ldrb	r2, [r3, #0]
 8021a44:	49e0      	ldr	r1, [pc, #896]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021a46:	2008      	movs	r0, #8
 8021a48:	0013      	movs	r3, r2
 8021a4a:	005b      	lsls	r3, r3, #1
 8021a4c:	189b      	adds	r3, r3, r2
 8021a4e:	009b      	lsls	r3, r3, #2
 8021a50:	18cb      	adds	r3, r1, r3
 8021a52:	181b      	adds	r3, r3, r0
 8021a54:	781b      	ldrb	r3, [r3, #0]
 8021a56:	079b      	lsls	r3, r3, #30
 8021a58:	0fdb      	lsrs	r3, r3, #31
 8021a5a:	b2db      	uxtb	r3, r3
 8021a5c:	001a      	movs	r2, r3
 8021a5e:	212e      	movs	r1, #46	; 0x2e
 8021a60:	187b      	adds	r3, r7, r1
 8021a62:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8021a64:	187b      	adds	r3, r7, r1
 8021a66:	2230      	movs	r2, #48	; 0x30
 8021a68:	18b8      	adds	r0, r7, r2
 8021a6a:	2201      	movs	r2, #1
 8021a6c:	2102      	movs	r1, #2
 8021a6e:	f7fd fa09 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021a72:	2344      	movs	r3, #68	; 0x44
 8021a74:	18fb      	adds	r3, r7, r3
 8021a76:	881b      	ldrh	r3, [r3, #0]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d000      	beq.n	8021a7e <Send_DpmConfigGetCnf+0x116>
 8021a7c:	e210      	b.n	8021ea0 <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8021a7e:	230f      	movs	r3, #15
 8021a80:	18fb      	adds	r3, r7, r3
 8021a82:	781a      	ldrb	r2, [r3, #0]
 8021a84:	4bd1      	ldr	r3, [pc, #836]	; (8021dcc <Send_DpmConfigGetCnf+0x464>)
 8021a86:	2174      	movs	r1, #116	; 0x74
 8021a88:	434a      	muls	r2, r1
 8021a8a:	5cd3      	ldrb	r3, [r2, r3]
 8021a8c:	071b      	lsls	r3, r3, #28
 8021a8e:	0fdb      	lsrs	r3, r3, #31
 8021a90:	b2db      	uxtb	r3, r3
 8021a92:	001a      	movs	r2, r3
 8021a94:	212d      	movs	r1, #45	; 0x2d
 8021a96:	187b      	adds	r3, r7, r1
 8021a98:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8021a9a:	187b      	adds	r3, r7, r1
 8021a9c:	2230      	movs	r2, #48	; 0x30
 8021a9e:	18b8      	adds	r0, r7, r2
 8021aa0:	2201      	movs	r2, #1
 8021aa2:	2103      	movs	r1, #3
 8021aa4:	f7fd f9ee 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021aa8:	2344      	movs	r3, #68	; 0x44
 8021aaa:	18fb      	adds	r3, r7, r3
 8021aac:	881b      	ldrh	r3, [r3, #0]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d000      	beq.n	8021ab4 <Send_DpmConfigGetCnf+0x14c>
 8021ab2:	e1f7      	b.n	8021ea4 <Send_DpmConfigGetCnf+0x53c>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8021ab4:	230f      	movs	r3, #15
 8021ab6:	18fb      	adds	r3, r7, r3
 8021ab8:	781a      	ldrb	r2, [r3, #0]
 8021aba:	4bc4      	ldr	r3, [pc, #784]	; (8021dcc <Send_DpmConfigGetCnf+0x464>)
 8021abc:	2174      	movs	r1, #116	; 0x74
 8021abe:	434a      	muls	r2, r1
 8021ac0:	5cd3      	ldrb	r3, [r2, r3]
 8021ac2:	075b      	lsls	r3, r3, #29
 8021ac4:	0fdb      	lsrs	r3, r3, #31
 8021ac6:	b2db      	uxtb	r3, r3
 8021ac8:	001a      	movs	r2, r3
 8021aca:	212c      	movs	r1, #44	; 0x2c
 8021acc:	187b      	adds	r3, r7, r1
 8021ace:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8021ad0:	187b      	adds	r3, r7, r1
 8021ad2:	2230      	movs	r2, #48	; 0x30
 8021ad4:	18b8      	adds	r0, r7, r2
 8021ad6:	2201      	movs	r2, #1
 8021ad8:	211c      	movs	r1, #28
 8021ada:	f7fd f9d3 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021ade:	2344      	movs	r3, #68	; 0x44
 8021ae0:	18fb      	adds	r3, r7, r3
 8021ae2:	881b      	ldrh	r3, [r3, #0]
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d000      	beq.n	8021aea <Send_DpmConfigGetCnf+0x182>
 8021ae8:	e1de      	b.n	8021ea8 <Send_DpmConfigGetCnf+0x540>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8021aea:	230f      	movs	r3, #15
 8021aec:	18fb      	adds	r3, r7, r3
 8021aee:	781a      	ldrb	r2, [r3, #0]
 8021af0:	49b5      	ldr	r1, [pc, #724]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021af2:	0013      	movs	r3, r2
 8021af4:	005b      	lsls	r3, r3, #1
 8021af6:	189b      	adds	r3, r3, r2
 8021af8:	009b      	lsls	r3, r3, #2
 8021afa:	18cb      	adds	r3, r1, r3
 8021afc:	791b      	ldrb	r3, [r3, #4]
 8021afe:	075b      	lsls	r3, r3, #29
 8021b00:	0fdb      	lsrs	r3, r3, #31
 8021b02:	b2db      	uxtb	r3, r3
 8021b04:	001a      	movs	r2, r3
 8021b06:	212b      	movs	r1, #43	; 0x2b
 8021b08:	187b      	adds	r3, r7, r1
 8021b0a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 8021b0c:	187b      	adds	r3, r7, r1
 8021b0e:	2230      	movs	r2, #48	; 0x30
 8021b10:	18b8      	adds	r0, r7, r2
 8021b12:	2201      	movs	r2, #1
 8021b14:	2104      	movs	r1, #4
 8021b16:	f7fd f9b5 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021b1a:	2344      	movs	r3, #68	; 0x44
 8021b1c:	18fb      	adds	r3, r7, r3
 8021b1e:	881b      	ldrh	r3, [r3, #0]
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d000      	beq.n	8021b26 <Send_DpmConfigGetCnf+0x1be>
 8021b24:	e1c2      	b.n	8021eac <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 8021b26:	230f      	movs	r3, #15
 8021b28:	18fb      	adds	r3, r7, r3
 8021b2a:	781a      	ldrb	r2, [r3, #0]
 8021b2c:	49a6      	ldr	r1, [pc, #664]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021b2e:	0013      	movs	r3, r2
 8021b30:	005b      	lsls	r3, r3, #1
 8021b32:	189b      	adds	r3, r3, r2
 8021b34:	009b      	lsls	r3, r3, #2
 8021b36:	18cb      	adds	r3, r1, r3
 8021b38:	791b      	ldrb	r3, [r3, #4]
 8021b3a:	071b      	lsls	r3, r3, #28
 8021b3c:	0fdb      	lsrs	r3, r3, #31
 8021b3e:	b2db      	uxtb	r3, r3
 8021b40:	001a      	movs	r2, r3
 8021b42:	212a      	movs	r1, #42	; 0x2a
 8021b44:	187b      	adds	r3, r7, r1
 8021b46:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8021b48:	187b      	adds	r3, r7, r1
 8021b4a:	2230      	movs	r2, #48	; 0x30
 8021b4c:	18b8      	adds	r0, r7, r2
 8021b4e:	2201      	movs	r2, #1
 8021b50:	2105      	movs	r1, #5
 8021b52:	f7fd f997 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021b56:	2344      	movs	r3, #68	; 0x44
 8021b58:	18fb      	adds	r3, r7, r3
 8021b5a:	881b      	ldrh	r3, [r3, #0]
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d000      	beq.n	8021b62 <Send_DpmConfigGetCnf+0x1fa>
 8021b60:	e1a6      	b.n	8021eb0 <Send_DpmConfigGetCnf+0x548>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8021b62:	230f      	movs	r3, #15
 8021b64:	18fb      	adds	r3, r7, r3
 8021b66:	781a      	ldrb	r2, [r3, #0]
 8021b68:	4997      	ldr	r1, [pc, #604]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021b6a:	0013      	movs	r3, r2
 8021b6c:	005b      	lsls	r3, r3, #1
 8021b6e:	189b      	adds	r3, r3, r2
 8021b70:	009b      	lsls	r3, r3, #2
 8021b72:	18cb      	adds	r3, r1, r3
 8021b74:	795b      	ldrb	r3, [r3, #5]
 8021b76:	069b      	lsls	r3, r3, #26
 8021b78:	0fdb      	lsrs	r3, r3, #31
 8021b7a:	b2db      	uxtb	r3, r3
 8021b7c:	001a      	movs	r2, r3
 8021b7e:	2129      	movs	r1, #41	; 0x29
 8021b80:	187b      	adds	r3, r7, r1
 8021b82:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8021b84:	187b      	adds	r3, r7, r1
 8021b86:	2230      	movs	r2, #48	; 0x30
 8021b88:	18b8      	adds	r0, r7, r2
 8021b8a:	2201      	movs	r2, #1
 8021b8c:	2106      	movs	r1, #6
 8021b8e:	f7fd f979 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021b92:	2344      	movs	r3, #68	; 0x44
 8021b94:	18fb      	adds	r3, r7, r3
 8021b96:	881b      	ldrh	r3, [r3, #0]
 8021b98:	2b00      	cmp	r3, #0
 8021b9a:	d000      	beq.n	8021b9e <Send_DpmConfigGetCnf+0x236>
 8021b9c:	e18a      	b.n	8021eb4 <Send_DpmConfigGetCnf+0x54c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8021b9e:	230f      	movs	r3, #15
 8021ba0:	18fb      	adds	r3, r7, r3
 8021ba2:	781a      	ldrb	r2, [r3, #0]
 8021ba4:	4988      	ldr	r1, [pc, #544]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021ba6:	0013      	movs	r3, r2
 8021ba8:	005b      	lsls	r3, r3, #1
 8021baa:	189b      	adds	r3, r3, r2
 8021bac:	009b      	lsls	r3, r3, #2
 8021bae:	18cb      	adds	r3, r1, r3
 8021bb0:	791b      	ldrb	r3, [r3, #4]
 8021bb2:	061b      	lsls	r3, r3, #24
 8021bb4:	0fdb      	lsrs	r3, r3, #31
 8021bb6:	b2db      	uxtb	r3, r3
 8021bb8:	001a      	movs	r2, r3
 8021bba:	2128      	movs	r1, #40	; 0x28
 8021bbc:	187b      	adds	r3, r7, r1
 8021bbe:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8021bc0:	187b      	adds	r3, r7, r1
 8021bc2:	2230      	movs	r2, #48	; 0x30
 8021bc4:	18b8      	adds	r0, r7, r2
 8021bc6:	2201      	movs	r2, #1
 8021bc8:	2107      	movs	r1, #7
 8021bca:	f7fd f95b 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021bce:	2344      	movs	r3, #68	; 0x44
 8021bd0:	18fb      	adds	r3, r7, r3
 8021bd2:	881b      	ldrh	r3, [r3, #0]
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	d000      	beq.n	8021bda <Send_DpmConfigGetCnf+0x272>
 8021bd8:	e16e      	b.n	8021eb8 <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8021bda:	230f      	movs	r3, #15
 8021bdc:	18fb      	adds	r3, r7, r3
 8021bde:	781a      	ldrb	r2, [r3, #0]
 8021be0:	4979      	ldr	r1, [pc, #484]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021be2:	0013      	movs	r3, r2
 8021be4:	005b      	lsls	r3, r3, #1
 8021be6:	189b      	adds	r3, r3, r2
 8021be8:	009b      	lsls	r3, r3, #2
 8021bea:	18cb      	adds	r3, r1, r3
 8021bec:	791b      	ldrb	r3, [r3, #4]
 8021bee:	065b      	lsls	r3, r3, #25
 8021bf0:	0fdb      	lsrs	r3, r3, #31
 8021bf2:	b2db      	uxtb	r3, r3
 8021bf4:	001a      	movs	r2, r3
 8021bf6:	2127      	movs	r1, #39	; 0x27
 8021bf8:	187b      	adds	r3, r7, r1
 8021bfa:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8021bfc:	187b      	adds	r3, r7, r1
 8021bfe:	2230      	movs	r2, #48	; 0x30
 8021c00:	18b8      	adds	r0, r7, r2
 8021c02:	2201      	movs	r2, #1
 8021c04:	210a      	movs	r1, #10
 8021c06:	f7fd f93d 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021c0a:	2344      	movs	r3, #68	; 0x44
 8021c0c:	18fb      	adds	r3, r7, r3
 8021c0e:	881b      	ldrh	r3, [r3, #0]
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d000      	beq.n	8021c16 <Send_DpmConfigGetCnf+0x2ae>
 8021c14:	e152      	b.n	8021ebc <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8021c16:	230f      	movs	r3, #15
 8021c18:	18fb      	adds	r3, r7, r3
 8021c1a:	781a      	ldrb	r2, [r3, #0]
 8021c1c:	496a      	ldr	r1, [pc, #424]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021c1e:	0013      	movs	r3, r2
 8021c20:	005b      	lsls	r3, r3, #1
 8021c22:	189b      	adds	r3, r3, r2
 8021c24:	009b      	lsls	r3, r3, #2
 8021c26:	18cb      	adds	r3, r1, r3
 8021c28:	3308      	adds	r3, #8
 8021c2a:	881a      	ldrh	r2, [r3, #0]
 8021c2c:	2124      	movs	r1, #36	; 0x24
 8021c2e:	187b      	adds	r3, r7, r1
 8021c30:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8021c32:	187b      	adds	r3, r7, r1
 8021c34:	2230      	movs	r2, #48	; 0x30
 8021c36:	18b8      	adds	r0, r7, r2
 8021c38:	2202      	movs	r2, #2
 8021c3a:	210b      	movs	r1, #11
 8021c3c:	f7fd f922 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021c40:	2344      	movs	r3, #68	; 0x44
 8021c42:	18fb      	adds	r3, r7, r3
 8021c44:	881b      	ldrh	r3, [r3, #0]
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d000      	beq.n	8021c4c <Send_DpmConfigGetCnf+0x2e4>
 8021c4a:	e139      	b.n	8021ec0 <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8021c4c:	230f      	movs	r3, #15
 8021c4e:	18fb      	adds	r3, r7, r3
 8021c50:	781a      	ldrb	r2, [r3, #0]
 8021c52:	4b5e      	ldr	r3, [pc, #376]	; (8021dcc <Send_DpmConfigGetCnf+0x464>)
 8021c54:	2174      	movs	r1, #116	; 0x74
 8021c56:	434a      	muls	r2, r1
 8021c58:	5cd3      	ldrb	r3, [r2, r3]
 8021c5a:	079b      	lsls	r3, r3, #30
 8021c5c:	0fdb      	lsrs	r3, r3, #31
 8021c5e:	b2db      	uxtb	r3, r3
 8021c60:	001a      	movs	r2, r3
 8021c62:	2123      	movs	r1, #35	; 0x23
 8021c64:	187b      	adds	r3, r7, r1
 8021c66:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8021c68:	187b      	adds	r3, r7, r1
 8021c6a:	2230      	movs	r2, #48	; 0x30
 8021c6c:	18b8      	adds	r0, r7, r2
 8021c6e:	2201      	movs	r2, #1
 8021c70:	2108      	movs	r1, #8
 8021c72:	f7fd f907 	bl	801ee84 <TLV_add>
        if (0U != length)
 8021c76:	2344      	movs	r3, #68	; 0x44
 8021c78:	18fb      	adds	r3, r7, r3
 8021c7a:	881b      	ldrh	r3, [r3, #0]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d000      	beq.n	8021c82 <Send_DpmConfigGetCnf+0x31a>
 8021c80:	e120      	b.n	8021ec4 <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8021c82:	2143      	movs	r1, #67	; 0x43
 8021c84:	187b      	adds	r3, r7, r1
 8021c86:	4a52      	ldr	r2, [pc, #328]	; (8021dd0 <Send_DpmConfigGetCnf+0x468>)
 8021c88:	7812      	ldrb	r2, [r2, #0]
 8021c8a:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 8021c8c:	4b51      	ldr	r3, [pc, #324]	; (8021dd4 <Send_DpmConfigGetCnf+0x46c>)
 8021c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8021c90:	187b      	adds	r3, r7, r1
 8021c92:	781b      	ldrb	r3, [r3, #0]
 8021c94:	b29b      	uxth	r3, r3
 8021c96:	009b      	lsls	r3, r3, #2
 8021c98:	b29a      	uxth	r2, r3
 8021c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021c9c:	2130      	movs	r1, #48	; 0x30
 8021c9e:	1878      	adds	r0, r7, r1
 8021ca0:	210c      	movs	r1, #12
 8021ca2:	f7fd f8ef 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021ca6:	2344      	movs	r3, #68	; 0x44
 8021ca8:	18fb      	adds	r3, r7, r3
 8021caa:	881b      	ldrh	r3, [r3, #0]
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d000      	beq.n	8021cb2 <Send_DpmConfigGetCnf+0x34a>
 8021cb0:	e10a      	b.n	8021ec8 <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8021cb2:	230f      	movs	r3, #15
 8021cb4:	18fb      	adds	r3, r7, r3
 8021cb6:	781b      	ldrb	r3, [r3, #0]
 8021cb8:	4a44      	ldr	r2, [pc, #272]	; (8021dcc <Send_DpmConfigGetCnf+0x464>)
 8021cba:	2168      	movs	r1, #104	; 0x68
 8021cbc:	2074      	movs	r0, #116	; 0x74
 8021cbe:	4343      	muls	r3, r0
 8021cc0:	18d3      	adds	r3, r2, r3
 8021cc2:	185b      	adds	r3, r3, r1
 8021cc4:	791b      	ldrb	r3, [r3, #4]
 8021cc6:	061b      	lsls	r3, r3, #24
 8021cc8:	0e5b      	lsrs	r3, r3, #25
 8021cca:	b2db      	uxtb	r3, r3
 8021ccc:	001a      	movs	r2, r3
 8021cce:	2122      	movs	r1, #34	; 0x22
 8021cd0:	187b      	adds	r3, r7, r1
 8021cd2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8021cd4:	187b      	adds	r3, r7, r1
 8021cd6:	2230      	movs	r2, #48	; 0x30
 8021cd8:	18b8      	adds	r0, r7, r2
 8021cda:	2201      	movs	r2, #1
 8021cdc:	210e      	movs	r1, #14
 8021cde:	f7fd f8d1 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021ce2:	2344      	movs	r3, #68	; 0x44
 8021ce4:	18fb      	adds	r3, r7, r3
 8021ce6:	881b      	ldrh	r3, [r3, #0]
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	d000      	beq.n	8021cee <Send_DpmConfigGetCnf+0x386>
 8021cec:	e0ee      	b.n	8021ecc <Send_DpmConfigGetCnf+0x564>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8021cee:	230f      	movs	r3, #15
 8021cf0:	18fb      	adds	r3, r7, r3
 8021cf2:	781b      	ldrb	r3, [r3, #0]
 8021cf4:	4a35      	ldr	r2, [pc, #212]	; (8021dcc <Send_DpmConfigGetCnf+0x464>)
 8021cf6:	2168      	movs	r1, #104	; 0x68
 8021cf8:	2074      	movs	r0, #116	; 0x74
 8021cfa:	4343      	muls	r3, r0
 8021cfc:	18d3      	adds	r3, r2, r3
 8021cfe:	185b      	adds	r3, r3, r1
 8021d00:	795b      	ldrb	r3, [r3, #5]
 8021d02:	065b      	lsls	r3, r3, #25
 8021d04:	0e5b      	lsrs	r3, r3, #25
 8021d06:	b2db      	uxtb	r3, r3
 8021d08:	001a      	movs	r2, r3
 8021d0a:	2121      	movs	r1, #33	; 0x21
 8021d0c:	187b      	adds	r3, r7, r1
 8021d0e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8021d10:	187b      	adds	r3, r7, r1
 8021d12:	2230      	movs	r2, #48	; 0x30
 8021d14:	18b8      	adds	r0, r7, r2
 8021d16:	2201      	movs	r2, #1
 8021d18:	210f      	movs	r1, #15
 8021d1a:	f7fd f8b3 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021d1e:	2344      	movs	r3, #68	; 0x44
 8021d20:	18fb      	adds	r3, r7, r3
 8021d22:	881b      	ldrh	r3, [r3, #0]
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d000      	beq.n	8021d2a <Send_DpmConfigGetCnf+0x3c2>
 8021d28:	e0d2      	b.n	8021ed0 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8021d2a:	230f      	movs	r3, #15
 8021d2c:	18fb      	adds	r3, r7, r3
 8021d2e:	781a      	ldrb	r2, [r3, #0]
 8021d30:	4925      	ldr	r1, [pc, #148]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021d32:	0013      	movs	r3, r2
 8021d34:	005b      	lsls	r3, r3, #1
 8021d36:	189b      	adds	r3, r3, r2
 8021d38:	009b      	lsls	r3, r3, #2
 8021d3a:	18cb      	adds	r3, r1, r3
 8021d3c:	795b      	ldrb	r3, [r3, #5]
 8021d3e:	07db      	lsls	r3, r3, #31
 8021d40:	0fdb      	lsrs	r3, r3, #31
 8021d42:	b2db      	uxtb	r3, r3
 8021d44:	001a      	movs	r2, r3
 8021d46:	2120      	movs	r1, #32
 8021d48:	187b      	adds	r3, r7, r1
 8021d4a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8021d4c:	187b      	adds	r3, r7, r1
 8021d4e:	2230      	movs	r2, #48	; 0x30
 8021d50:	18b8      	adds	r0, r7, r2
 8021d52:	2201      	movs	r2, #1
 8021d54:	2110      	movs	r1, #16
 8021d56:	f7fd f895 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021d5a:	2344      	movs	r3, #68	; 0x44
 8021d5c:	18fb      	adds	r3, r7, r3
 8021d5e:	881b      	ldrh	r3, [r3, #0]
 8021d60:	2b00      	cmp	r3, #0
 8021d62:	d000      	beq.n	8021d66 <Send_DpmConfigGetCnf+0x3fe>
 8021d64:	e0b6      	b.n	8021ed4 <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8021d66:	230f      	movs	r3, #15
 8021d68:	18fb      	adds	r3, r7, r3
 8021d6a:	781a      	ldrb	r2, [r3, #0]
 8021d6c:	4916      	ldr	r1, [pc, #88]	; (8021dc8 <Send_DpmConfigGetCnf+0x460>)
 8021d6e:	0013      	movs	r3, r2
 8021d70:	005b      	lsls	r3, r3, #1
 8021d72:	189b      	adds	r3, r3, r2
 8021d74:	009b      	lsls	r3, r3, #2
 8021d76:	18cb      	adds	r3, r1, r3
 8021d78:	795b      	ldrb	r3, [r3, #5]
 8021d7a:	079b      	lsls	r3, r3, #30
 8021d7c:	0fdb      	lsrs	r3, r3, #31
 8021d7e:	b2db      	uxtb	r3, r3
 8021d80:	001a      	movs	r2, r3
 8021d82:	211f      	movs	r1, #31
 8021d84:	187b      	adds	r3, r7, r1
 8021d86:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8021d88:	187b      	adds	r3, r7, r1
 8021d8a:	2230      	movs	r2, #48	; 0x30
 8021d8c:	18b8      	adds	r0, r7, r2
 8021d8e:	2201      	movs	r2, #1
 8021d90:	2111      	movs	r1, #17
 8021d92:	f7fd f877 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021d96:	2344      	movs	r3, #68	; 0x44
 8021d98:	18fb      	adds	r3, r7, r3
 8021d9a:	881b      	ldrh	r3, [r3, #0]
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d000      	beq.n	8021da2 <Send_DpmConfigGetCnf+0x43a>
 8021da0:	e09a      	b.n	8021ed8 <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8021da2:	230f      	movs	r3, #15
 8021da4:	18fb      	adds	r3, r7, r3
 8021da6:	781a      	ldrb	r2, [r3, #0]
 8021da8:	4b0b      	ldr	r3, [pc, #44]	; (8021dd8 <Send_DpmConfigGetCnf+0x470>)
 8021daa:	00d2      	lsls	r2, r2, #3
 8021dac:	58d3      	ldr	r3, [r2, r3]
 8021dae:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8021db0:	2318      	movs	r3, #24
 8021db2:	18fb      	adds	r3, r7, r3
 8021db4:	2230      	movs	r2, #48	; 0x30
 8021db6:	18b8      	adds	r0, r7, r2
 8021db8:	2204      	movs	r2, #4
 8021dba:	2112      	movs	r1, #18
 8021dbc:	f7fd f862 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021dc0:	2344      	movs	r3, #68	; 0x44
 8021dc2:	18fb      	adds	r3, r7, r3
 8021dc4:	e00a      	b.n	8021ddc <Send_DpmConfigGetCnf+0x474>
 8021dc6:	46c0      	nop			; (mov r8, r8)
 8021dc8:	200000f8 	.word	0x200000f8
 8021dcc:	2000010c 	.word	0x2000010c
 8021dd0:	20000180 	.word	0x20000180
 8021dd4:	20000184 	.word	0x20000184
 8021dd8:	20000104 	.word	0x20000104
 8021ddc:	881b      	ldrh	r3, [r3, #0]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d000      	beq.n	8021de4 <Send_DpmConfigGetCnf+0x47c>
 8021de2:	e07b      	b.n	8021edc <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8021de4:	230f      	movs	r3, #15
 8021de6:	18fb      	adds	r3, r7, r3
 8021de8:	781b      	ldrb	r3, [r3, #0]
 8021dea:	4a4d      	ldr	r2, [pc, #308]	; (8021f20 <Send_DpmConfigGetCnf+0x5b8>)
 8021dec:	00db      	lsls	r3, r3, #3
 8021dee:	18d3      	adds	r3, r2, r3
 8021df0:	3304      	adds	r3, #4
 8021df2:	881a      	ldrh	r2, [r3, #0]
 8021df4:	2116      	movs	r1, #22
 8021df6:	187b      	adds	r3, r7, r1
 8021df8:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8021dfa:	187b      	adds	r3, r7, r1
 8021dfc:	2230      	movs	r2, #48	; 0x30
 8021dfe:	18b8      	adds	r0, r7, r2
 8021e00:	2202      	movs	r2, #2
 8021e02:	2117      	movs	r1, #23
 8021e04:	f7fd f83e 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021e08:	2344      	movs	r3, #68	; 0x44
 8021e0a:	18fb      	adds	r3, r7, r3
 8021e0c:	881b      	ldrh	r3, [r3, #0]
 8021e0e:	2b00      	cmp	r3, #0
 8021e10:	d000      	beq.n	8021e14 <Send_DpmConfigGetCnf+0x4ac>
 8021e12:	e065      	b.n	8021ee0 <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8021e14:	230f      	movs	r3, #15
 8021e16:	18fb      	adds	r3, r7, r3
 8021e18:	781b      	ldrb	r3, [r3, #0]
 8021e1a:	4a41      	ldr	r2, [pc, #260]	; (8021f20 <Send_DpmConfigGetCnf+0x5b8>)
 8021e1c:	00db      	lsls	r3, r3, #3
 8021e1e:	18d3      	adds	r3, r2, r3
 8021e20:	3306      	adds	r3, #6
 8021e22:	881a      	ldrh	r2, [r3, #0]
 8021e24:	2114      	movs	r1, #20
 8021e26:	187b      	adds	r3, r7, r1
 8021e28:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8021e2a:	187b      	adds	r3, r7, r1
 8021e2c:	2230      	movs	r2, #48	; 0x30
 8021e2e:	18b8      	adds	r0, r7, r2
 8021e30:	2202      	movs	r2, #2
 8021e32:	2118      	movs	r1, #24
 8021e34:	f7fd f826 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021e38:	2344      	movs	r3, #68	; 0x44
 8021e3a:	18fb      	adds	r3, r7, r3
 8021e3c:	881b      	ldrh	r3, [r3, #0]
 8021e3e:	2b00      	cmp	r3, #0
 8021e40:	d150      	bne.n	8021ee4 <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8021e42:	230f      	movs	r3, #15
 8021e44:	18fb      	adds	r3, r7, r3
 8021e46:	781a      	ldrb	r2, [r3, #0]
 8021e48:	4936      	ldr	r1, [pc, #216]	; (8021f24 <Send_DpmConfigGetCnf+0x5bc>)
 8021e4a:	0013      	movs	r3, r2
 8021e4c:	005b      	lsls	r3, r3, #1
 8021e4e:	189b      	adds	r3, r3, r2
 8021e50:	005b      	lsls	r3, r3, #1
 8021e52:	18cb      	adds	r3, r1, r3
 8021e54:	3304      	adds	r3, #4
 8021e56:	781a      	ldrb	r2, [r3, #0]
 8021e58:	2113      	movs	r1, #19
 8021e5a:	187b      	adds	r3, r7, r1
 8021e5c:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8021e5e:	187b      	adds	r3, r7, r1
 8021e60:	2230      	movs	r2, #48	; 0x30
 8021e62:	18b8      	adds	r0, r7, r2
 8021e64:	2201      	movs	r2, #1
 8021e66:	211a      	movs	r1, #26
 8021e68:	f7fd f80c 	bl	801ee84 <TLV_add>
      }
      if (0U != length)
 8021e6c:	2344      	movs	r3, #68	; 0x44
 8021e6e:	18fb      	adds	r3, r7, r3
 8021e70:	881b      	ldrh	r3, [r3, #0]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d138      	bne.n	8021ee8 <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8021e76:	2344      	movs	r3, #68	; 0x44
 8021e78:	18fb      	adds	r3, r7, r3
 8021e7a:	881b      	ldrh	r3, [r3, #0]
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d035      	beq.n	8021eec <Send_DpmConfigGetCnf+0x584>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8021e80:	2330      	movs	r3, #48	; 0x30
 8021e82:	18fb      	adds	r3, r7, r3
 8021e84:	0018      	movs	r0, r3
 8021e86:	f7fd f95f 	bl	801f148 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8021e8a:	6879      	ldr	r1, [r7, #4]
 8021e8c:	230f      	movs	r3, #15
 8021e8e:	18fb      	adds	r3, r7, r3
 8021e90:	781b      	ldrb	r3, [r3, #0]
 8021e92:	2203      	movs	r2, #3
 8021e94:	0018      	movs	r0, r3
 8021e96:	f000 f847 	bl	8021f28 <Send_DpmConfigGetRej>
          goto __end;
 8021e9a:	e038      	b.n	8021f0e <Send_DpmConfigGetCnf+0x5a6>
          break;
 8021e9c:	46c0      	nop			; (mov r8, r8)
 8021e9e:	e026      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ea0:	46c0      	nop			; (mov r8, r8)
 8021ea2:	e024      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ea4:	46c0      	nop			; (mov r8, r8)
 8021ea6:	e022      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ea8:	46c0      	nop			; (mov r8, r8)
 8021eaa:	e020      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021eac:	46c0      	nop			; (mov r8, r8)
 8021eae:	e01e      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021eb0:	46c0      	nop			; (mov r8, r8)
 8021eb2:	e01c      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021eb4:	46c0      	nop			; (mov r8, r8)
 8021eb6:	e01a      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021eb8:	46c0      	nop			; (mov r8, r8)
 8021eba:	e018      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ebc:	46c0      	nop			; (mov r8, r8)
 8021ebe:	e016      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ec0:	46c0      	nop			; (mov r8, r8)
 8021ec2:	e014      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
          break;
 8021ec4:	46c0      	nop			; (mov r8, r8)
 8021ec6:	e012      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ec8:	46c0      	nop			; (mov r8, r8)
 8021eca:	e010      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ecc:	46c0      	nop			; (mov r8, r8)
 8021ece:	e00e      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ed0:	46c0      	nop			; (mov r8, r8)
 8021ed2:	e00c      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ed4:	46c0      	nop			; (mov r8, r8)
 8021ed6:	e00a      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ed8:	46c0      	nop			; (mov r8, r8)
 8021eda:	e008      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021edc:	46c0      	nop			; (mov r8, r8)
 8021ede:	e006      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ee0:	46c0      	nop			; (mov r8, r8)
 8021ee2:	e004      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ee4:	46c0      	nop			; (mov r8, r8)
 8021ee6:	e002      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        break;
 8021ee8:	46c0      	nop			; (mov r8, r8)
 8021eea:	e000      	b.n	8021eee <Send_DpmConfigGetCnf+0x586>
        }
        break;
 8021eec:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 8021eee:	2147      	movs	r1, #71	; 0x47
 8021ef0:	187b      	adds	r3, r7, r1
 8021ef2:	781a      	ldrb	r2, [r3, #0]
 8021ef4:	187b      	adds	r3, r7, r1
 8021ef6:	3201      	adds	r2, #1
 8021ef8:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8021efa:	187b      	adds	r3, r7, r1
 8021efc:	781b      	ldrb	r3, [r3, #0]
 8021efe:	b29b      	uxth	r3, r3
 8021f00:	2244      	movs	r2, #68	; 0x44
 8021f02:	18ba      	adds	r2, r7, r2
 8021f04:	8812      	ldrh	r2, [r2, #0]
 8021f06:	429a      	cmp	r2, r3
 8021f08:	d900      	bls.n	8021f0c <Send_DpmConfigGetCnf+0x5a4>
 8021f0a:	e554      	b.n	80219b6 <Send_DpmConfigGetCnf+0x4e>

__end:
 8021f0c:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 8021f0e:	2330      	movs	r3, #48	; 0x30
 8021f10:	18fb      	adds	r3, r7, r3
 8021f12:	0018      	movs	r0, r3
 8021f14:	f7fd f918 	bl	801f148 <TLV_deinit_encode>
}
 8021f18:	46c0      	nop			; (mov r8, r8)
 8021f1a:	46bd      	mov	sp, r7
 8021f1c:	b012      	add	sp, #72	; 0x48
 8021f1e:	bd80      	pop	{r7, pc}
 8021f20:	20000104 	.word	0x20000104
 8021f24:	20004978 	.word	0x20004978

08021f28 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8021f28:	b590      	push	{r4, r7, lr}
 8021f2a:	b087      	sub	sp, #28
 8021f2c:	af00      	add	r7, sp, #0
 8021f2e:	6039      	str	r1, [r7, #0]
 8021f30:	0011      	movs	r1, r2
 8021f32:	1dfb      	adds	r3, r7, #7
 8021f34:	1c02      	adds	r2, r0, #0
 8021f36:	701a      	strb	r2, [r3, #0]
 8021f38:	1dbb      	adds	r3, r7, #6
 8021f3a:	1c0a      	adds	r2, r1, #0
 8021f3c:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8021f3e:	683b      	ldr	r3, [r7, #0]
 8021f40:	2280      	movs	r2, #128	; 0x80
 8021f42:	0052      	lsls	r2, r2, #1
 8021f44:	240c      	movs	r4, #12
 8021f46:	1938      	adds	r0, r7, r4
 8021f48:	2108      	movs	r1, #8
 8021f4a:	f7fc ff38 	bl	801edbe <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8021f4e:	1dbb      	adds	r3, r7, #6
 8021f50:	7819      	ldrb	r1, [r3, #0]
 8021f52:	1938      	adds	r0, r7, r4
 8021f54:	2300      	movs	r3, #0
 8021f56:	2200      	movs	r2, #0
 8021f58:	f7fc ff94 	bl	801ee84 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8021f5c:	193b      	adds	r3, r7, r4
 8021f5e:	0018      	movs	r0, r3
 8021f60:	f7fd f8f2 	bl	801f148 <TLV_deinit_encode>
}
 8021f64:	46c0      	nop			; (mov r8, r8)
 8021f66:	46bd      	mov	sp, r7
 8021f68:	b007      	add	sp, #28
 8021f6a:	bd90      	pop	{r4, r7, pc}

08021f6c <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8021f6c:	b590      	push	{r4, r7, lr}
 8021f6e:	b087      	sub	sp, #28
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6039      	str	r1, [r7, #0]
 8021f74:	0011      	movs	r1, r2
 8021f76:	1dfb      	adds	r3, r7, #7
 8021f78:	1c02      	adds	r2, r0, #0
 8021f7a:	701a      	strb	r2, [r3, #0]
 8021f7c:	1dbb      	adds	r3, r7, #6
 8021f7e:	1c0a      	adds	r2, r1, #0
 8021f80:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8021f82:	683b      	ldr	r3, [r7, #0]
 8021f84:	2280      	movs	r2, #128	; 0x80
 8021f86:	0052      	lsls	r2, r2, #1
 8021f88:	240c      	movs	r4, #12
 8021f8a:	1938      	adds	r0, r7, r4
 8021f8c:	210b      	movs	r1, #11
 8021f8e:	f7fc ff16 	bl	801edbe <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8021f92:	1dbb      	adds	r3, r7, #6
 8021f94:	7819      	ldrb	r1, [r3, #0]
 8021f96:	1938      	adds	r0, r7, r4
 8021f98:	2300      	movs	r3, #0
 8021f9a:	2200      	movs	r2, #0
 8021f9c:	f7fc ff72 	bl	801ee84 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8021fa0:	193b      	adds	r3, r7, r4
 8021fa2:	0018      	movs	r0, r3
 8021fa4:	f7fd f8d0 	bl	801f148 <TLV_deinit_encode>
}
 8021fa8:	46c0      	nop			; (mov r8, r8)
 8021faa:	46bd      	mov	sp, r7
 8021fac:	b007      	add	sp, #28
 8021fae:	bd90      	pop	{r4, r7, pc}

08021fb0 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8021fb0:	b5b0      	push	{r4, r5, r7, lr}
 8021fb2:	b090      	sub	sp, #64	; 0x40
 8021fb4:	af00      	add	r7, sp, #0
 8021fb6:	6039      	str	r1, [r7, #0]
 8021fb8:	0011      	movs	r1, r2
 8021fba:	1dfb      	adds	r3, r7, #7
 8021fbc:	1c02      	adds	r2, r0, #0
 8021fbe:	701a      	strb	r2, [r3, #0]
 8021fc0:	1dbb      	adds	r3, r7, #6
 8021fc2:	1c0a      	adds	r2, r1, #0
 8021fc4:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8021fc6:	1dfb      	adds	r3, r7, #7
 8021fc8:	781b      	ldrb	r3, [r3, #0]
 8021fca:	3301      	adds	r3, #1
 8021fcc:	015b      	lsls	r3, r3, #5
 8021fce:	b25b      	sxtb	r3, r3
 8021fd0:	220f      	movs	r2, #15
 8021fd2:	4313      	orrs	r3, r2
 8021fd4:	b25b      	sxtb	r3, r3
 8021fd6:	b2d9      	uxtb	r1, r3
 8021fd8:	683b      	ldr	r3, [r7, #0]
 8021fda:	2280      	movs	r2, #128	; 0x80
 8021fdc:	0052      	lsls	r2, r2, #1
 8021fde:	2030      	movs	r0, #48	; 0x30
 8021fe0:	1838      	adds	r0, r7, r0
 8021fe2:	f7fc feec 	bl	801edbe <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 8021fe6:	2508      	movs	r5, #8
 8021fe8:	197b      	adds	r3, r7, r5
 8021fea:	4a1e      	ldr	r2, [pc, #120]	; (8022064 <Send_DpmRegisterReadCnf+0xb4>)
 8021fec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8021fee:	c313      	stmia	r3!, {r0, r1, r4}
 8021ff0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8021ff2:	c313      	stmia	r3!, {r0, r1, r4}
 8021ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8021ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8021ff8:	8811      	ldrh	r1, [r2, #0]
 8021ffa:	8019      	strh	r1, [r3, #0]
 8021ffc:	7892      	ldrb	r2, [r2, #2]
 8021ffe:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8022000:	233f      	movs	r3, #63	; 0x3f
 8022002:	18fb      	adds	r3, r7, r3
 8022004:	2200      	movs	r2, #0
 8022006:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 8022008:	1dbb      	adds	r3, r7, #6
 802200a:	781b      	ldrb	r3, [r3, #0]
 802200c:	2bff      	cmp	r3, #255	; 0xff
 802200e:	d003      	beq.n	8022018 <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 8022010:	197b      	adds	r3, r7, r5
 8022012:	1dba      	adds	r2, r7, #6
 8022014:	7812      	ldrb	r2, [r2, #0]
 8022016:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 8022018:	233f      	movs	r3, #63	; 0x3f
 802201a:	18fb      	adds	r3, r7, r3
 802201c:	781b      	ldrb	r3, [r3, #0]
 802201e:	2208      	movs	r2, #8
 8022020:	18ba      	adds	r2, r7, r2
 8022022:	5cd3      	ldrb	r3, [r2, r3]
 8022024:	2b80      	cmp	r3, #128	; 0x80
 8022026:	d804      	bhi.n	8022032 <Send_DpmRegisterReadCnf+0x82>
 8022028:	009a      	lsls	r2, r3, #2
 802202a:	4b0f      	ldr	r3, [pc, #60]	; (8022068 <Send_DpmRegisterReadCnf+0xb8>)
 802202c:	18d3      	adds	r3, r2, r3
 802202e:	681b      	ldr	r3, [r3, #0]
 8022030:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 8022032:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 8022034:	213f      	movs	r1, #63	; 0x3f
 8022036:	187b      	adds	r3, r7, r1
 8022038:	781a      	ldrb	r2, [r3, #0]
 802203a:	187b      	adds	r3, r7, r1
 802203c:	3201      	adds	r2, #1
 802203e:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8022040:	187b      	adds	r3, r7, r1
 8022042:	781b      	ldrb	r3, [r3, #0]
 8022044:	2b26      	cmp	r3, #38	; 0x26
 8022046:	d803      	bhi.n	8022050 <Send_DpmRegisterReadCnf+0xa0>
 8022048:	1dbb      	adds	r3, r7, #6
 802204a:	781b      	ldrb	r3, [r3, #0]
 802204c:	2bff      	cmp	r3, #255	; 0xff
 802204e:	d1e3      	bne.n	8022018 <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8022050:	2330      	movs	r3, #48	; 0x30
 8022052:	18fb      	adds	r3, r7, r3
 8022054:	0018      	movs	r0, r3
 8022056:	f7fd f877 	bl	801f148 <TLV_deinit_encode>
}
 802205a:	46c0      	nop			; (mov r8, r8)
 802205c:	46bd      	mov	sp, r7
 802205e:	b010      	add	sp, #64	; 0x40
 8022060:	bdb0      	pop	{r4, r5, r7, pc}
 8022062:	46c0      	nop			; (mov r8, r8)
 8022064:	08024e78 	.word	0x08024e78
 8022068:	080254cc 	.word	0x080254cc

0802206c <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 802206c:	b5b0      	push	{r4, r5, r7, lr}
 802206e:	b08c      	sub	sp, #48	; 0x30
 8022070:	af00      	add	r7, sp, #0
 8022072:	60b9      	str	r1, [r7, #8]
 8022074:	607a      	str	r2, [r7, #4]
 8022076:	230f      	movs	r3, #15
 8022078:	18fb      	adds	r3, r7, r3
 802207a:	1c02      	adds	r2, r0, #0
 802207c:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 802207e:	687a      	ldr	r2, [r7, #4]
 8022080:	2428      	movs	r4, #40	; 0x28
 8022082:	193b      	adds	r3, r7, r4
 8022084:	0011      	movs	r1, r2
 8022086:	0018      	movs	r0, r3
 8022088:	f7fd f870 	bl	801f16c <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 802208c:	2320      	movs	r3, #32
 802208e:	18fb      	adds	r3, r7, r3
 8022090:	2224      	movs	r2, #36	; 0x24
 8022092:	18ba      	adds	r2, r7, r2
 8022094:	2527      	movs	r5, #39	; 0x27
 8022096:	1979      	adds	r1, r7, r5
 8022098:	1938      	adds	r0, r7, r4
 802209a:	f7fd f893 	bl	801f1c4 <TLV_get>

  switch (registerName)
 802209e:	197b      	adds	r3, r7, r5
 80220a0:	781b      	ldrb	r3, [r3, #0]
 80220a2:	2b80      	cmp	r3, #128	; 0x80
 80220a4:	d804      	bhi.n	80220b0 <Send_DpmRegisterWriteCnf+0x44>
 80220a6:	009a      	lsls	r2, r3, #2
 80220a8:	4b10      	ldr	r3, [pc, #64]	; (80220ec <Send_DpmRegisterWriteCnf+0x80>)
 80220aa:	18d3      	adds	r3, r2, r3
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 80220b0:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 80220b2:	2328      	movs	r3, #40	; 0x28
 80220b4:	18fb      	adds	r3, r7, r3
 80220b6:	0018      	movs	r0, r3
 80220b8:	f7fd f8de 	bl	801f278 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 80220bc:	230f      	movs	r3, #15
 80220be:	18fb      	adds	r3, r7, r3
 80220c0:	781b      	ldrb	r3, [r3, #0]
 80220c2:	3301      	adds	r3, #1
 80220c4:	015b      	lsls	r3, r3, #5
 80220c6:	b25b      	sxtb	r3, r3
 80220c8:	2211      	movs	r2, #17
 80220ca:	4313      	orrs	r3, r2
 80220cc:	b25b      	sxtb	r3, r3
 80220ce:	b2d9      	uxtb	r1, r3
 80220d0:	68bb      	ldr	r3, [r7, #8]
 80220d2:	2414      	movs	r4, #20
 80220d4:	1938      	adds	r0, r7, r4
 80220d6:	220c      	movs	r2, #12
 80220d8:	f7fc fe71 	bl	801edbe <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 80220dc:	193b      	adds	r3, r7, r4
 80220de:	0018      	movs	r0, r3
 80220e0:	f7fd f832 	bl	801f148 <TLV_deinit_encode>
}
 80220e4:	46c0      	nop			; (mov r8, r8)
 80220e6:	46bd      	mov	sp, r7
 80220e8:	b00c      	add	sp, #48	; 0x30
 80220ea:	bdb0      	pop	{r4, r5, r7, pc}
 80220ec:	080256d0 	.word	0x080256d0

080220f0 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 80220f0:	b5b0      	push	{r4, r5, r7, lr}
 80220f2:	b084      	sub	sp, #16
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6039      	str	r1, [r7, #0]
 80220f8:	0011      	movs	r1, r2
 80220fa:	1dfb      	adds	r3, r7, #7
 80220fc:	1c02      	adds	r2, r0, #0
 80220fe:	701a      	strb	r2, [r3, #0]
 8022100:	1d3b      	adds	r3, r7, #4
 8022102:	1c0a      	adds	r2, r1, #0
 8022104:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 8022106:	250f      	movs	r5, #15
 8022108:	197b      	adds	r3, r7, r5
 802210a:	2210      	movs	r2, #16
 802210c:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 802210e:	4b0b      	ldr	r3, [pc, #44]	; (802213c <Manage_FreeText+0x4c>)
 8022110:	681b      	ldr	r3, [r3, #0]
 8022112:	2b00      	cmp	r3, #0
 8022114:	d00b      	beq.n	802212e <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 8022116:	4b09      	ldr	r3, [pc, #36]	; (802213c <Manage_FreeText+0x4c>)
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	1d3a      	adds	r2, r7, #4
 802211c:	8814      	ldrh	r4, [r2, #0]
 802211e:	6839      	ldr	r1, [r7, #0]
 8022120:	1dfa      	adds	r2, r7, #7
 8022122:	7810      	ldrb	r0, [r2, #0]
 8022124:	0022      	movs	r2, r4
 8022126:	4798      	blx	r3
    _status = USBPD_OK;
 8022128:	197b      	adds	r3, r7, r5
 802212a:	2200      	movs	r2, #0
 802212c:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 802212e:	230f      	movs	r3, #15
 8022130:	18fb      	adds	r3, r7, r3
 8022132:	781b      	ldrb	r3, [r3, #0]
}
 8022134:	0018      	movs	r0, r3
 8022136:	46bd      	mov	sp, r7
 8022138:	b004      	add	sp, #16
 802213a:	bdb0      	pop	{r4, r5, r7, pc}
 802213c:	20004b9c 	.word	0x20004b9c

08022140 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 8022140:	b580      	push	{r7, lr}
 8022142:	b088      	sub	sp, #32
 8022144:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 8022146:	2300      	movs	r3, #0
 8022148:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 802214a:	231a      	movs	r3, #26
 802214c:	18fb      	adds	r3, r7, r3
 802214e:	2201      	movs	r2, #1
 8022150:	4252      	negs	r2, r2
 8022152:	801a      	strh	r2, [r3, #0]
  uint16_t _max_voltage = 0;
 8022154:	2318      	movs	r3, #24
 8022156:	18fb      	adds	r3, r7, r3
 8022158:	2200      	movs	r2, #0
 802215a:	801a      	strh	r2, [r3, #0]
  uint16_t _max_current = 0;
 802215c:	2316      	movs	r3, #22
 802215e:	18fb      	adds	r3, r7, r3
 8022160:	2200      	movs	r2, #0
 8022162:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 8022164:	2300      	movs	r3, #0
 8022166:	613b      	str	r3, [r7, #16]
 8022168:	e0de      	b.n	8022328 <UpdateSNKPowerPort0+0x1e8>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 802216a:	4b84      	ldr	r3, [pc, #528]	; (802237c <UpdateSNKPowerPort0+0x23c>)
 802216c:	693a      	ldr	r2, [r7, #16]
 802216e:	0092      	lsls	r2, r2, #2
 8022170:	58d3      	ldr	r3, [r2, r3]
 8022172:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 8022174:	1dfb      	adds	r3, r7, #7
 8022176:	781b      	ldrb	r3, [r3, #0]
 8022178:	061b      	lsls	r3, r3, #24
 802217a:	0f9b      	lsrs	r3, r3, #30
 802217c:	b2db      	uxtb	r3, r3
 802217e:	2b02      	cmp	r3, #2
 8022180:	d100      	bne.n	8022184 <UpdateSNKPowerPort0+0x44>
 8022182:	e082      	b.n	802228a <UpdateSNKPowerPort0+0x14a>
 8022184:	dd00      	ble.n	8022188 <UpdateSNKPowerPort0+0x48>
 8022186:	e0c5      	b.n	8022314 <UpdateSNKPowerPort0+0x1d4>
 8022188:	2b00      	cmp	r3, #0
 802218a:	d002      	beq.n	8022192 <UpdateSNKPowerPort0+0x52>
 802218c:	2b01      	cmp	r3, #1
 802218e:	d03b      	beq.n	8022208 <UpdateSNKPowerPort0+0xc8>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 8022190:	e0c0      	b.n	8022314 <UpdateSNKPowerPort0+0x1d4>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 8022192:	687b      	ldr	r3, [r7, #4]
 8022194:	031b      	lsls	r3, r3, #12
 8022196:	0d9b      	lsrs	r3, r3, #22
 8022198:	b29b      	uxth	r3, r3
 802219a:	0019      	movs	r1, r3
 802219c:	200e      	movs	r0, #14
 802219e:	183b      	adds	r3, r7, r0
 80221a0:	2232      	movs	r2, #50	; 0x32
 80221a2:	434a      	muls	r2, r1
 80221a4:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80221a6:	0001      	movs	r1, r0
 80221a8:	187a      	adds	r2, r7, r1
 80221aa:	201a      	movs	r0, #26
 80221ac:	183b      	adds	r3, r7, r0
 80221ae:	8812      	ldrh	r2, [r2, #0]
 80221b0:	881b      	ldrh	r3, [r3, #0]
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d203      	bcs.n	80221be <UpdateSNKPowerPort0+0x7e>
 80221b6:	183b      	adds	r3, r7, r0
 80221b8:	187a      	adds	r2, r7, r1
 80221ba:	8812      	ldrh	r2, [r2, #0]
 80221bc:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 80221be:	210e      	movs	r1, #14
 80221c0:	187a      	adds	r2, r7, r1
 80221c2:	2018      	movs	r0, #24
 80221c4:	183b      	adds	r3, r7, r0
 80221c6:	8812      	ldrh	r2, [r2, #0]
 80221c8:	881b      	ldrh	r3, [r3, #0]
 80221ca:	429a      	cmp	r2, r3
 80221cc:	d903      	bls.n	80221d6 <UpdateSNKPowerPort0+0x96>
 80221ce:	183b      	adds	r3, r7, r0
 80221d0:	187a      	adds	r2, r7, r1
 80221d2:	8812      	ldrh	r2, [r2, #0]
 80221d4:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 80221d6:	1d3b      	adds	r3, r7, #4
 80221d8:	881b      	ldrh	r3, [r3, #0]
 80221da:	059b      	lsls	r3, r3, #22
 80221dc:	0d9b      	lsrs	r3, r3, #22
 80221de:	b29b      	uxth	r3, r3
 80221e0:	200c      	movs	r0, #12
 80221e2:	183a      	adds	r2, r7, r0
 80221e4:	1c19      	adds	r1, r3, #0
 80221e6:	0089      	lsls	r1, r1, #2
 80221e8:	18cb      	adds	r3, r1, r3
 80221ea:	18db      	adds	r3, r3, r3
 80221ec:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80221ee:	183a      	adds	r2, r7, r0
 80221f0:	2116      	movs	r1, #22
 80221f2:	187b      	adds	r3, r7, r1
 80221f4:	8812      	ldrh	r2, [r2, #0]
 80221f6:	881b      	ldrh	r3, [r3, #0]
 80221f8:	429a      	cmp	r2, r3
 80221fa:	d800      	bhi.n	80221fe <UpdateSNKPowerPort0+0xbe>
 80221fc:	e08c      	b.n	8022318 <UpdateSNKPowerPort0+0x1d8>
 80221fe:	187b      	adds	r3, r7, r1
 8022200:	183a      	adds	r2, r7, r0
 8022202:	8812      	ldrh	r2, [r2, #0]
 8022204:	801a      	strh	r2, [r3, #0]
        break;
 8022206:	e087      	b.n	8022318 <UpdateSNKPowerPort0+0x1d8>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	031b      	lsls	r3, r3, #12
 802220c:	0d9b      	lsrs	r3, r3, #22
 802220e:	b29b      	uxth	r3, r3
 8022210:	0019      	movs	r1, r3
 8022212:	200e      	movs	r0, #14
 8022214:	183b      	adds	r3, r7, r0
 8022216:	2232      	movs	r2, #50	; 0x32
 8022218:	434a      	muls	r2, r1
 802221a:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 802221c:	0001      	movs	r1, r0
 802221e:	187a      	adds	r2, r7, r1
 8022220:	201a      	movs	r0, #26
 8022222:	183b      	adds	r3, r7, r0
 8022224:	8812      	ldrh	r2, [r2, #0]
 8022226:	881b      	ldrh	r3, [r3, #0]
 8022228:	429a      	cmp	r2, r3
 802222a:	d203      	bcs.n	8022234 <UpdateSNKPowerPort0+0xf4>
 802222c:	183b      	adds	r3, r7, r0
 802222e:	187a      	adds	r2, r7, r1
 8022230:	8812      	ldrh	r2, [r2, #0]
 8022232:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 8022234:	1dbb      	adds	r3, r7, #6
 8022236:	881b      	ldrh	r3, [r3, #0]
 8022238:	049b      	lsls	r3, r3, #18
 802223a:	0d9b      	lsrs	r3, r3, #22
 802223c:	b29b      	uxth	r3, r3
 802223e:	0019      	movs	r1, r3
 8022240:	200e      	movs	r0, #14
 8022242:	183b      	adds	r3, r7, r0
 8022244:	2232      	movs	r2, #50	; 0x32
 8022246:	434a      	muls	r2, r1
 8022248:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 802224a:	0001      	movs	r1, r0
 802224c:	187a      	adds	r2, r7, r1
 802224e:	2018      	movs	r0, #24
 8022250:	183b      	adds	r3, r7, r0
 8022252:	8812      	ldrh	r2, [r2, #0]
 8022254:	881b      	ldrh	r3, [r3, #0]
 8022256:	429a      	cmp	r2, r3
 8022258:	d903      	bls.n	8022262 <UpdateSNKPowerPort0+0x122>
 802225a:	183b      	adds	r3, r7, r0
 802225c:	187a      	adds	r2, r7, r1
 802225e:	8812      	ldrh	r2, [r2, #0]
 8022260:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 8022262:	1d3b      	adds	r3, r7, #4
 8022264:	881b      	ldrh	r3, [r3, #0]
 8022266:	059b      	lsls	r3, r3, #22
 8022268:	0d9b      	lsrs	r3, r3, #22
 802226a:	b29b      	uxth	r3, r3
 802226c:	0019      	movs	r1, r3
 802226e:	200a      	movs	r0, #10
 8022270:	183b      	adds	r3, r7, r0
 8022272:	22fa      	movs	r2, #250	; 0xfa
 8022274:	434a      	muls	r2, r1
 8022276:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 8022278:	183b      	adds	r3, r7, r0
 802227a:	881b      	ldrh	r3, [r3, #0]
 802227c:	69fa      	ldr	r2, [r7, #28]
 802227e:	429a      	cmp	r2, r3
 8022280:	d24c      	bcs.n	802231c <UpdateSNKPowerPort0+0x1dc>
 8022282:	183b      	adds	r3, r7, r0
 8022284:	881b      	ldrh	r3, [r3, #0]
 8022286:	61fb      	str	r3, [r7, #28]
        break;
 8022288:	e048      	b.n	802231c <UpdateSNKPowerPort0+0x1dc>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	031b      	lsls	r3, r3, #12
 802228e:	0d9b      	lsrs	r3, r3, #22
 8022290:	b29b      	uxth	r3, r3
 8022292:	0019      	movs	r1, r3
 8022294:	200e      	movs	r0, #14
 8022296:	183b      	adds	r3, r7, r0
 8022298:	2232      	movs	r2, #50	; 0x32
 802229a:	434a      	muls	r2, r1
 802229c:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 802229e:	0001      	movs	r1, r0
 80222a0:	187a      	adds	r2, r7, r1
 80222a2:	201a      	movs	r0, #26
 80222a4:	183b      	adds	r3, r7, r0
 80222a6:	8812      	ldrh	r2, [r2, #0]
 80222a8:	881b      	ldrh	r3, [r3, #0]
 80222aa:	429a      	cmp	r2, r3
 80222ac:	d203      	bcs.n	80222b6 <UpdateSNKPowerPort0+0x176>
 80222ae:	183b      	adds	r3, r7, r0
 80222b0:	187a      	adds	r2, r7, r1
 80222b2:	8812      	ldrh	r2, [r2, #0]
 80222b4:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 80222b6:	1dbb      	adds	r3, r7, #6
 80222b8:	881b      	ldrh	r3, [r3, #0]
 80222ba:	049b      	lsls	r3, r3, #18
 80222bc:	0d9b      	lsrs	r3, r3, #22
 80222be:	b29b      	uxth	r3, r3
 80222c0:	0019      	movs	r1, r3
 80222c2:	200e      	movs	r0, #14
 80222c4:	183b      	adds	r3, r7, r0
 80222c6:	2232      	movs	r2, #50	; 0x32
 80222c8:	434a      	muls	r2, r1
 80222ca:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 80222cc:	0001      	movs	r1, r0
 80222ce:	187a      	adds	r2, r7, r1
 80222d0:	2018      	movs	r0, #24
 80222d2:	183b      	adds	r3, r7, r0
 80222d4:	8812      	ldrh	r2, [r2, #0]
 80222d6:	881b      	ldrh	r3, [r3, #0]
 80222d8:	429a      	cmp	r2, r3
 80222da:	d903      	bls.n	80222e4 <UpdateSNKPowerPort0+0x1a4>
 80222dc:	183b      	adds	r3, r7, r0
 80222de:	187a      	adds	r2, r7, r1
 80222e0:	8812      	ldrh	r2, [r2, #0]
 80222e2:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 80222e4:	1d3b      	adds	r3, r7, #4
 80222e6:	881b      	ldrh	r3, [r3, #0]
 80222e8:	059b      	lsls	r3, r3, #22
 80222ea:	0d9b      	lsrs	r3, r3, #22
 80222ec:	b29b      	uxth	r3, r3
 80222ee:	200c      	movs	r0, #12
 80222f0:	183a      	adds	r2, r7, r0
 80222f2:	1c19      	adds	r1, r3, #0
 80222f4:	0089      	lsls	r1, r1, #2
 80222f6:	18cb      	adds	r3, r1, r3
 80222f8:	18db      	adds	r3, r3, r3
 80222fa:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80222fc:	183a      	adds	r2, r7, r0
 80222fe:	2116      	movs	r1, #22
 8022300:	187b      	adds	r3, r7, r1
 8022302:	8812      	ldrh	r2, [r2, #0]
 8022304:	881b      	ldrh	r3, [r3, #0]
 8022306:	429a      	cmp	r2, r3
 8022308:	d90a      	bls.n	8022320 <UpdateSNKPowerPort0+0x1e0>
 802230a:	187b      	adds	r3, r7, r1
 802230c:	183a      	adds	r2, r7, r0
 802230e:	8812      	ldrh	r2, [r2, #0]
 8022310:	801a      	strh	r2, [r3, #0]
        break;
 8022312:	e005      	b.n	8022320 <UpdateSNKPowerPort0+0x1e0>
        break;
 8022314:	46c0      	nop			; (mov r8, r8)
 8022316:	e004      	b.n	8022322 <UpdateSNKPowerPort0+0x1e2>
        break;
 8022318:	46c0      	nop			; (mov r8, r8)
 802231a:	e002      	b.n	8022322 <UpdateSNKPowerPort0+0x1e2>
        break;
 802231c:	46c0      	nop			; (mov r8, r8)
 802231e:	e000      	b.n	8022322 <UpdateSNKPowerPort0+0x1e2>
        break;
 8022320:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 8022322:	693b      	ldr	r3, [r7, #16]
 8022324:	3301      	adds	r3, #1
 8022326:	613b      	str	r3, [r7, #16]
 8022328:	4b15      	ldr	r3, [pc, #84]	; (8022380 <UpdateSNKPowerPort0+0x240>)
 802232a:	781b      	ldrb	r3, [r3, #0]
 802232c:	001a      	movs	r2, r3
 802232e:	693b      	ldr	r3, [r7, #16]
 8022330:	4293      	cmp	r3, r2
 8022332:	d200      	bcs.n	8022336 <UpdateSNKPowerPort0+0x1f6>
 8022334:	e719      	b.n	802216a <UpdateSNKPowerPort0+0x2a>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 8022336:	231a      	movs	r3, #26
 8022338:	18fb      	adds	r3, r7, r3
 802233a:	881a      	ldrh	r2, [r3, #0]
 802233c:	4b11      	ldr	r3, [pc, #68]	; (8022384 <UpdateSNKPowerPort0+0x244>)
 802233e:	611a      	str	r2, [r3, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 8022340:	2118      	movs	r1, #24
 8022342:	187b      	adds	r3, r7, r1
 8022344:	881a      	ldrh	r2, [r3, #0]
 8022346:	4b0f      	ldr	r3, [pc, #60]	; (8022384 <UpdateSNKPowerPort0+0x244>)
 8022348:	60da      	str	r2, [r3, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 802234a:	2016      	movs	r0, #22
 802234c:	183b      	adds	r3, r7, r0
 802234e:	881a      	ldrh	r2, [r3, #0]
 8022350:	4b0c      	ldr	r3, [pc, #48]	; (8022384 <UpdateSNKPowerPort0+0x244>)
 8022352:	605a      	str	r2, [r3, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 8022354:	187b      	adds	r3, r7, r1
 8022356:	881b      	ldrh	r3, [r3, #0]
 8022358:	183a      	adds	r2, r7, r0
 802235a:	8812      	ldrh	r2, [r2, #0]
 802235c:	4353      	muls	r3, r2
 802235e:	22fa      	movs	r2, #250	; 0xfa
 8022360:	0091      	lsls	r1, r2, #2
 8022362:	0018      	movs	r0, r3
 8022364:	f7e3 ff44 	bl	80061f0 <__udivsi3>
 8022368:	0003      	movs	r3, r0
 802236a:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 802236c:	4b05      	ldr	r3, [pc, #20]	; (8022384 <UpdateSNKPowerPort0+0x244>)
 802236e:	69fa      	ldr	r2, [r7, #28]
 8022370:	619a      	str	r2, [r3, #24]
}
 8022372:	46c0      	nop			; (mov r8, r8)
 8022374:	46bd      	mov	sp, r7
 8022376:	b008      	add	sp, #32
 8022378:	bd80      	pop	{r7, pc}
 802237a:	46c0      	nop			; (mov r8, r8)
 802237c:	20000184 	.word	0x20000184
 8022380:	20000180 	.word	0x20000180
 8022384:	2000010c 	.word	0x2000010c

08022388 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8022388:	b580      	push	{r7, lr}
 802238a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 802238c:	4a06      	ldr	r2, [pc, #24]	; (80223a8 <TRACER_EMB_Init+0x20>)
 802238e:	4b07      	ldr	r3, [pc, #28]	; (80223ac <TRACER_EMB_Init+0x24>)
 8022390:	2100      	movs	r1, #0
 8022392:	0018      	movs	r0, r3
 8022394:	f001 f93e 	bl	8023614 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8022398:	f000 fe22 	bl	8022fe0 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 802239c:	f000 f9d8 	bl	8022750 <TRACER_EMB_LowPowerInit>
}
 80223a0:	46c0      	nop			; (mov r8, r8)
 80223a2:	46bd      	mov	sp, r7
 80223a4:	bd80      	pop	{r7, pc}
 80223a6:	46c0      	nop			; (mov r8, r8)
 80223a8:	0000041c 	.word	0x0000041c
 80223ac:	20004c1c 	.word	0x20004c1c

080223b0 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b086      	sub	sp, #24
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
 80223b8:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 80223be:	f000 f8d3 	bl	8022568 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 80223c2:	683b      	ldr	r3, [r7, #0]
 80223c4:	0018      	movs	r0, r3
 80223c6:	f000 f969 	bl	802269c <TRACER_EMB_AllocateBufer>
 80223ca:	0003      	movs	r3, r0
 80223cc:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 80223ce:	697b      	ldr	r3, [r7, #20]
 80223d0:	3301      	adds	r3, #1
 80223d2:	d023      	beq.n	802241c <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 80223d4:	2300      	movs	r3, #0
 80223d6:	613b      	str	r3, [r7, #16]
 80223d8:	e01c      	b.n	8022414 <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 80223da:	68fa      	ldr	r2, [r7, #12]
 80223dc:	693b      	ldr	r3, [r7, #16]
 80223de:	18d2      	adds	r2, r2, r3
 80223e0:	697b      	ldr	r3, [r7, #20]
 80223e2:	4912      	ldr	r1, [pc, #72]	; (802242c <TRACER_EMB_Add+0x7c>)
 80223e4:	400b      	ands	r3, r1
 80223e6:	d503      	bpl.n	80223f0 <TRACER_EMB_Add+0x40>
 80223e8:	3b01      	subs	r3, #1
 80223ea:	4911      	ldr	r1, [pc, #68]	; (8022430 <TRACER_EMB_Add+0x80>)
 80223ec:	430b      	orrs	r3, r1
 80223ee:	3301      	adds	r3, #1
 80223f0:	0019      	movs	r1, r3
 80223f2:	7812      	ldrb	r2, [r2, #0]
 80223f4:	4b0f      	ldr	r3, [pc, #60]	; (8022434 <TRACER_EMB_Add+0x84>)
 80223f6:	185b      	adds	r3, r3, r1
 80223f8:	76da      	strb	r2, [r3, #27]
 80223fa:	697b      	ldr	r3, [r7, #20]
 80223fc:	3301      	adds	r3, #1
 80223fe:	4a0b      	ldr	r2, [pc, #44]	; (802242c <TRACER_EMB_Add+0x7c>)
 8022400:	4013      	ands	r3, r2
 8022402:	d503      	bpl.n	802240c <TRACER_EMB_Add+0x5c>
 8022404:	3b01      	subs	r3, #1
 8022406:	4a0a      	ldr	r2, [pc, #40]	; (8022430 <TRACER_EMB_Add+0x80>)
 8022408:	4313      	orrs	r3, r2
 802240a:	3301      	adds	r3, #1
 802240c:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 802240e:	693b      	ldr	r3, [r7, #16]
 8022410:	3301      	adds	r3, #1
 8022412:	613b      	str	r3, [r7, #16]
 8022414:	693a      	ldr	r2, [r7, #16]
 8022416:	683b      	ldr	r3, [r7, #0]
 8022418:	429a      	cmp	r2, r3
 802241a:	d3de      	bcc.n	80223da <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 802241c:	f000 f8c2 	bl	80225a4 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 8022420:	f000 f8de 	bl	80225e0 <TRACER_EMB_SendData>
}
 8022424:	46c0      	nop			; (mov r8, r8)
 8022426:	46bd      	mov	sp, r7
 8022428:	b006      	add	sp, #24
 802242a:	bd80      	pop	{r7, pc}
 802242c:	800003ff 	.word	0x800003ff
 8022430:	fffffc00 	.word	0xfffffc00
 8022434:	20004c1c 	.word	0x20004c1c

08022438 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 8022438:	b580      	push	{r7, lr}
 802243a:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 802243c:	f000 febc 	bl	80231b8 <HW_TRACER_EMB_IRQHandlerDMA>
}
 8022440:	46c0      	nop			; (mov r8, r8)
 8022442:	46bd      	mov	sp, r7
 8022444:	bd80      	pop	{r7, pc}

08022446 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 8022446:	b580      	push	{r7, lr}
 8022448:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 802244a:	f000 fecd 	bl	80231e8 <HW_TRACER_EMB_IRQHandlerUSART>
}
 802244e:	46c0      	nop			; (mov r8, r8)
 8022450:	46bd      	mov	sp, r7
 8022452:	bd80      	pop	{r7, pc}

08022454 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8022454:	b580      	push	{r7, lr}
 8022456:	b082      	sub	sp, #8
 8022458:	af00      	add	r7, sp, #0
 802245a:	0002      	movs	r2, r0
 802245c:	1dbb      	adds	r3, r7, #6
 802245e:	801a      	strh	r2, [r3, #0]
 8022460:	1d7b      	adds	r3, r7, #5
 8022462:	1c0a      	adds	r2, r1, #0
 8022464:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 8022466:	1dbb      	adds	r3, r7, #6
 8022468:	881b      	ldrh	r3, [r3, #0]
 802246a:	059b      	lsls	r3, r3, #22
 802246c:	0d9b      	lsrs	r3, r3, #22
 802246e:	4a04      	ldr	r2, [pc, #16]	; (8022480 <TRACER_EMB_WriteData+0x2c>)
 8022470:	18d3      	adds	r3, r2, r3
 8022472:	1d7a      	adds	r2, r7, #5
 8022474:	7812      	ldrb	r2, [r2, #0]
 8022476:	76da      	strb	r2, [r3, #27]
}
 8022478:	46c0      	nop			; (mov r8, r8)
 802247a:	46bd      	mov	sp, r7
 802247c:	b002      	add	sp, #8
 802247e:	bd80      	pop	{r7, pc}
 8022480:	20004c1c 	.word	0x20004c1c

08022484 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 8022484:	b580      	push	{r7, lr}
 8022486:	b082      	sub	sp, #8
 8022488:	af00      	add	r7, sp, #0
 802248a:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 802248c:	687b      	ldr	r3, [r7, #4]
 802248e:	0018      	movs	r0, r3
 8022490:	f000 fe66 	bl	8023160 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 8022494:	f000 fe76 	bl	8023184 <HW_TRACER_EMB_StartRX>
}
 8022498:	46c0      	nop			; (mov r8, r8)
 802249a:	46bd      	mov	sp, r7
 802249c:	b002      	add	sp, #8
 802249e:	bd80      	pop	{r7, pc}

080224a0 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 80224a0:	b580      	push	{r7, lr}
 80224a2:	b082      	sub	sp, #8
 80224a4:	af00      	add	r7, sp, #0
 80224a6:	6078      	str	r0, [r7, #4]
 80224a8:	000a      	movs	r2, r1
 80224aa:	1cfb      	adds	r3, r7, #3
 80224ac:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 80224ae:	1cfb      	adds	r3, r7, #3
 80224b0:	781b      	ldrb	r3, [r3, #0]
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d008      	beq.n	80224c8 <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 80224b6:	4b07      	ldr	r3, [pc, #28]	; (80224d4 <TRACER_EMB_EnableOverFlow+0x34>)
 80224b8:	687a      	ldr	r2, [r7, #4]
 80224ba:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 80224bc:	4b05      	ldr	r3, [pc, #20]	; (80224d4 <TRACER_EMB_EnableOverFlow+0x34>)
 80224be:	1cfa      	adds	r2, r7, #3
 80224c0:	7812      	ldrb	r2, [r2, #0]
 80224c2:	761a      	strb	r2, [r3, #24]
    return 0;
 80224c4:	2300      	movs	r3, #0
 80224c6:	e001      	b.n	80224cc <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 80224c8:	2301      	movs	r3, #1
 80224ca:	425b      	negs	r3, r3
}
 80224cc:	0018      	movs	r0, r3
 80224ce:	46bd      	mov	sp, r7
 80224d0:	b002      	add	sp, #8
 80224d2:	bd80      	pop	{r7, pc}
 80224d4:	20004c1c 	.word	0x20004c1c

080224d8 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 80224d8:	b580      	push	{r7, lr}
 80224da:	b084      	sub	sp, #16
 80224dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80224de:	f3ef 8310 	mrs	r3, PRIMASK
 80224e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80224e4:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 80224e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80224e8:	b672      	cpsid	i
}
 80224ea:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 80224ec:	4b1d      	ldr	r3, [pc, #116]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80224ee:	681a      	ldr	r2, [r3, #0]
 80224f0:	4b1c      	ldr	r3, [pc, #112]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80224f2:	689b      	ldr	r3, [r3, #8]
 80224f4:	18d3      	adds	r3, r2, r3
 80224f6:	059b      	lsls	r3, r3, #22
 80224f8:	0d9a      	lsrs	r2, r3, #22
 80224fa:	4b1a      	ldr	r3, [pc, #104]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 80224fc:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 80224fe:	4b19      	ldr	r3, [pc, #100]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022500:	695b      	ldr	r3, [r3, #20]
 8022502:	2b00      	cmp	r3, #0
 8022504:	d019      	beq.n	802253a <TRACER_EMB_CALLBACK_TX+0x62>
 8022506:	4b17      	ldr	r3, [pc, #92]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022508:	7e9b      	ldrb	r3, [r3, #26]
 802250a:	2b01      	cmp	r3, #1
 802250c:	d115      	bne.n	802253a <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 802250e:	4b15      	ldr	r3, [pc, #84]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022510:	7e5b      	ldrb	r3, [r3, #25]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d111      	bne.n	802253a <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 8022516:	4b13      	ldr	r3, [pc, #76]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022518:	2202      	movs	r2, #2
 802251a:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 802251c:	4b11      	ldr	r3, [pc, #68]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802251e:	695a      	ldr	r2, [r3, #20]
 8022520:	4b10      	ldr	r3, [pc, #64]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022522:	7e1b      	ldrb	r3, [r3, #24]
 8022524:	0019      	movs	r1, r3
 8022526:	0010      	movs	r0, r2
 8022528:	f000 ff2c 	bl	8023384 <HW_TRACER_EMB_SendData>
 802252c:	68fb      	ldr	r3, [r7, #12]
 802252e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022530:	687b      	ldr	r3, [r7, #4]
 8022532:	f383 8810 	msr	PRIMASK, r3
}
 8022536:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 8022538:	e00f      	b.n	802255a <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 802253a:	4b0a      	ldr	r3, [pc, #40]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 802253c:	68db      	ldr	r3, [r3, #12]
 802253e:	1e5a      	subs	r2, r3, #1
 8022540:	4b08      	ldr	r3, [pc, #32]	; (8022564 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8022542:	60da      	str	r2, [r3, #12]
 8022544:	68fb      	ldr	r3, [r7, #12]
 8022546:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022548:	683b      	ldr	r3, [r7, #0]
 802254a:	f383 8810 	msr	PRIMASK, r3
}
 802254e:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8022550:	f000 f828 	bl	80225a4 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8022554:	f000 f844 	bl	80225e0 <TRACER_EMB_SendData>
  }
}
 8022558:	46c0      	nop			; (mov r8, r8)
 802255a:	46c0      	nop			; (mov r8, r8)
 802255c:	46bd      	mov	sp, r7
 802255e:	b004      	add	sp, #16
 8022560:	bd80      	pop	{r7, pc}
 8022562:	46c0      	nop			; (mov r8, r8)
 8022564:	20004c1c 	.word	0x20004c1c

08022568 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 8022568:	b580      	push	{r7, lr}
 802256a:	b084      	sub	sp, #16
 802256c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802256e:	f3ef 8310 	mrs	r3, PRIMASK
 8022572:	607b      	str	r3, [r7, #4]
  return(result);
 8022574:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8022576:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8022578:	b672      	cpsid	i
}
 802257a:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 802257c:	4b08      	ldr	r3, [pc, #32]	; (80225a0 <TRACER_EMB_Lock+0x38>)
 802257e:	7c1b      	ldrb	r3, [r3, #16]
 8022580:	b2db      	uxtb	r3, r3
 8022582:	3301      	adds	r3, #1
 8022584:	b2da      	uxtb	r2, r3
 8022586:	4b06      	ldr	r3, [pc, #24]	; (80225a0 <TRACER_EMB_Lock+0x38>)
 8022588:	741a      	strb	r2, [r3, #16]
 802258a:	68fb      	ldr	r3, [r7, #12]
 802258c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802258e:	68bb      	ldr	r3, [r7, #8]
 8022590:	f383 8810 	msr	PRIMASK, r3
}
 8022594:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8022596:	46c0      	nop			; (mov r8, r8)
 8022598:	46bd      	mov	sp, r7
 802259a:	b004      	add	sp, #16
 802259c:	bd80      	pop	{r7, pc}
 802259e:	46c0      	nop			; (mov r8, r8)
 80225a0:	20004c1c 	.word	0x20004c1c

080225a4 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b084      	sub	sp, #16
 80225a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80225aa:	f3ef 8310 	mrs	r3, PRIMASK
 80225ae:	607b      	str	r3, [r7, #4]
  return(result);
 80225b0:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80225b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80225b4:	b672      	cpsid	i
}
 80225b6:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 80225b8:	4b08      	ldr	r3, [pc, #32]	; (80225dc <TRACER_EMB_UnLock+0x38>)
 80225ba:	7c1b      	ldrb	r3, [r3, #16]
 80225bc:	b2db      	uxtb	r3, r3
 80225be:	3b01      	subs	r3, #1
 80225c0:	b2da      	uxtb	r2, r3
 80225c2:	4b06      	ldr	r3, [pc, #24]	; (80225dc <TRACER_EMB_UnLock+0x38>)
 80225c4:	741a      	strb	r2, [r3, #16]
 80225c6:	68fb      	ldr	r3, [r7, #12]
 80225c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80225ca:	68bb      	ldr	r3, [r7, #8]
 80225cc:	f383 8810 	msr	PRIMASK, r3
}
 80225d0:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 80225d2:	46c0      	nop			; (mov r8, r8)
 80225d4:	46bd      	mov	sp, r7
 80225d6:	b004      	add	sp, #16
 80225d8:	bd80      	pop	{r7, pc}
 80225da:	46c0      	nop			; (mov r8, r8)
 80225dc:	20004c1c 	.word	0x20004c1c

080225e0 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b086      	sub	sp, #24
 80225e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80225e6:	f3ef 8310 	mrs	r3, PRIMASK
 80225ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80225ec:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 80225ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80225f0:	b672      	cpsid	i
}
 80225f2:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 80225f4:	4b28      	ldr	r3, [pc, #160]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 80225f6:	7c1b      	ldrb	r3, [r3, #16]
 80225f8:	b2db      	uxtb	r3, r3
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d134      	bne.n	8022668 <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 80225fe:	4b26      	ldr	r3, [pc, #152]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 8022600:	681b      	ldr	r3, [r3, #0]
 8022602:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8022604:	4b24      	ldr	r3, [pc, #144]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 8022606:	685b      	ldr	r3, [r3, #4]
 8022608:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 802260a:	693a      	ldr	r2, [r7, #16]
 802260c:	68fb      	ldr	r3, [r7, #12]
 802260e:	429a      	cmp	r2, r3
 8022610:	d02a      	beq.n	8022668 <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 8022612:	f7ff ffa9 	bl	8022568 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 8022616:	68fa      	ldr	r2, [r7, #12]
 8022618:	693b      	ldr	r3, [r7, #16]
 802261a:	429a      	cmp	r2, r3
 802261c:	d908      	bls.n	8022630 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 802261e:	68fa      	ldr	r2, [r7, #12]
 8022620:	693b      	ldr	r3, [r7, #16]
 8022622:	1ad2      	subs	r2, r2, r3
 8022624:	4b1c      	ldr	r3, [pc, #112]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 8022626:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 8022628:	4b1b      	ldr	r3, [pc, #108]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802262a:	2200      	movs	r2, #0
 802262c:	765a      	strb	r2, [r3, #25]
 802262e:	e008      	b.n	8022642 <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8022630:	693b      	ldr	r3, [r7, #16]
 8022632:	2280      	movs	r2, #128	; 0x80
 8022634:	00d2      	lsls	r2, r2, #3
 8022636:	1ad2      	subs	r2, r2, r3
 8022638:	4b17      	ldr	r3, [pc, #92]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802263a:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 802263c:	4b16      	ldr	r3, [pc, #88]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802263e:	2201      	movs	r2, #1
 8022640:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8022642:	f000 f88a 	bl	802275a <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 8022646:	4b14      	ldr	r3, [pc, #80]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 8022648:	68db      	ldr	r3, [r3, #12]
 802264a:	1c5a      	adds	r2, r3, #1
 802264c:	4b12      	ldr	r3, [pc, #72]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802264e:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8022650:	693b      	ldr	r3, [r7, #16]
 8022652:	3318      	adds	r3, #24
 8022654:	001a      	movs	r2, r3
 8022656:	4b10      	ldr	r3, [pc, #64]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 8022658:	18d3      	adds	r3, r2, r3
 802265a:	1cda      	adds	r2, r3, #3
 802265c:	4b0e      	ldr	r3, [pc, #56]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802265e:	689b      	ldr	r3, [r3, #8]
 8022660:	0019      	movs	r1, r3
 8022662:	0010      	movs	r0, r2
 8022664:	f000 fe8e 	bl	8023384 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 8022668:	4b0b      	ldr	r3, [pc, #44]	; (8022698 <TRACER_EMB_SendData+0xb8>)
 802266a:	68db      	ldr	r3, [r3, #12]
 802266c:	2b00      	cmp	r3, #0
 802266e:	d004      	beq.n	802267a <TRACER_EMB_SendData+0x9a>
 8022670:	2b01      	cmp	r3, #1
 8022672:	d105      	bne.n	8022680 <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8022674:	f000 f871 	bl	802275a <TRACER_EMB_LowPowerSendData>
      break;
 8022678:	e003      	b.n	8022682 <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 802267a:	f000 f873 	bl	8022764 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 802267e:	e000      	b.n	8022682 <TRACER_EMB_SendData+0xa2>
    default:
      break;
 8022680:	46c0      	nop			; (mov r8, r8)
 8022682:	697b      	ldr	r3, [r7, #20]
 8022684:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	f383 8810 	msr	PRIMASK, r3
}
 802268c:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 802268e:	46c0      	nop			; (mov r8, r8)
 8022690:	46bd      	mov	sp, r7
 8022692:	b006      	add	sp, #24
 8022694:	bd80      	pop	{r7, pc}
 8022696:	46c0      	nop			; (mov r8, r8)
 8022698:	20004c1c 	.word	0x20004c1c

0802269c <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 802269c:	b580      	push	{r7, lr}
 802269e:	b088      	sub	sp, #32
 80226a0:	af00      	add	r7, sp, #0
 80226a2:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 80226a4:	2301      	movs	r3, #1
 80226a6:	425b      	negs	r3, r3
 80226a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80226aa:	f3ef 8310 	mrs	r3, PRIMASK
 80226ae:	613b      	str	r3, [r7, #16]
  return(result);
 80226b0:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 80226b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80226b4:	b672      	cpsid	i
}
 80226b6:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 80226b8:	4b24      	ldr	r3, [pc, #144]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226ba:	685a      	ldr	r2, [r3, #4]
 80226bc:	4b23      	ldr	r3, [pc, #140]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226be:	681b      	ldr	r3, [r3, #0]
 80226c0:	429a      	cmp	r2, r3
 80226c2:	d103      	bne.n	80226cc <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 80226c4:	2380      	movs	r3, #128	; 0x80
 80226c6:	00db      	lsls	r3, r3, #3
 80226c8:	61fb      	str	r3, [r7, #28]
 80226ca:	e016      	b.n	80226fa <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 80226cc:	4b1f      	ldr	r3, [pc, #124]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226ce:	685a      	ldr	r2, [r3, #4]
 80226d0:	4b1e      	ldr	r3, [pc, #120]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	429a      	cmp	r2, r3
 80226d6:	d90a      	bls.n	80226ee <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 80226d8:	4b1c      	ldr	r3, [pc, #112]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226da:	681a      	ldr	r2, [r3, #0]
 80226dc:	4b1b      	ldr	r3, [pc, #108]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226de:	685b      	ldr	r3, [r3, #4]
 80226e0:	1ad3      	subs	r3, r2, r3
 80226e2:	2280      	movs	r2, #128	; 0x80
 80226e4:	00d2      	lsls	r2, r2, #3
 80226e6:	4694      	mov	ip, r2
 80226e8:	4463      	add	r3, ip
 80226ea:	61fb      	str	r3, [r7, #28]
 80226ec:	e005      	b.n	80226fa <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 80226ee:	4b17      	ldr	r3, [pc, #92]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226f0:	681a      	ldr	r2, [r3, #0]
 80226f2:	4b16      	ldr	r3, [pc, #88]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 80226f4:	685b      	ldr	r3, [r3, #4]
 80226f6:	1ad3      	subs	r3, r2, r3
 80226f8:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 80226fa:	69fa      	ldr	r2, [r7, #28]
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	429a      	cmp	r2, r3
 8022700:	d912      	bls.n	8022728 <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 8022702:	4b12      	ldr	r3, [pc, #72]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 8022704:	685b      	ldr	r3, [r3, #4]
 8022706:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8022708:	4b10      	ldr	r3, [pc, #64]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 802270a:	685a      	ldr	r2, [r3, #4]
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	18d3      	adds	r3, r2, r3
 8022710:	059b      	lsls	r3, r3, #22
 8022712:	0d9a      	lsrs	r2, r3, #22
 8022714:	4b0d      	ldr	r3, [pc, #52]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 8022716:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 8022718:	4b0c      	ldr	r3, [pc, #48]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 802271a:	7e9b      	ldrb	r3, [r3, #26]
 802271c:	2b02      	cmp	r3, #2
 802271e:	d10a      	bne.n	8022736 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 8022720:	4b0a      	ldr	r3, [pc, #40]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 8022722:	2200      	movs	r2, #0
 8022724:	769a      	strb	r2, [r3, #26]
 8022726:	e006      	b.n	8022736 <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 8022728:	4b08      	ldr	r3, [pc, #32]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 802272a:	7e9b      	ldrb	r3, [r3, #26]
 802272c:	2b00      	cmp	r3, #0
 802272e:	d102      	bne.n	8022736 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 8022730:	4b06      	ldr	r3, [pc, #24]	; (802274c <TRACER_EMB_AllocateBufer+0xb0>)
 8022732:	2201      	movs	r2, #1
 8022734:	769a      	strb	r2, [r3, #26]
 8022736:	697b      	ldr	r3, [r7, #20]
 8022738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802273a:	68fb      	ldr	r3, [r7, #12]
 802273c:	f383 8810 	msr	PRIMASK, r3
}
 8022740:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 8022742:	69bb      	ldr	r3, [r7, #24]
}
 8022744:	0018      	movs	r0, r3
 8022746:	46bd      	mov	sp, r7
 8022748:	b008      	add	sp, #32
 802274a:	bd80      	pop	{r7, pc}
 802274c:	20004c1c 	.word	0x20004c1c

08022750 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	af00      	add	r7, sp, #0
}
 8022754:	46c0      	nop			; (mov r8, r8)
 8022756:	46bd      	mov	sp, r7
 8022758:	bd80      	pop	{r7, pc}

0802275a <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 802275a:	b580      	push	{r7, lr}
 802275c:	af00      	add	r7, sp, #0
}
 802275e:	46c0      	nop			; (mov r8, r8)
 8022760:	46bd      	mov	sp, r7
 8022762:	bd80      	pop	{r7, pc}

08022764 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 8022764:	b580      	push	{r7, lr}
 8022766:	af00      	add	r7, sp, #0
}
 8022768:	46c0      	nop			; (mov r8, r8)
 802276a:	46bd      	mov	sp, r7
 802276c:	bd80      	pop	{r7, pc}
	...

08022770 <__NVIC_EnableIRQ>:
{
 8022770:	b580      	push	{r7, lr}
 8022772:	b082      	sub	sp, #8
 8022774:	af00      	add	r7, sp, #0
 8022776:	0002      	movs	r2, r0
 8022778:	1dfb      	adds	r3, r7, #7
 802277a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 802277c:	1dfb      	adds	r3, r7, #7
 802277e:	781b      	ldrb	r3, [r3, #0]
 8022780:	2b7f      	cmp	r3, #127	; 0x7f
 8022782:	d809      	bhi.n	8022798 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022784:	1dfb      	adds	r3, r7, #7
 8022786:	781b      	ldrb	r3, [r3, #0]
 8022788:	001a      	movs	r2, r3
 802278a:	231f      	movs	r3, #31
 802278c:	401a      	ands	r2, r3
 802278e:	4b04      	ldr	r3, [pc, #16]	; (80227a0 <__NVIC_EnableIRQ+0x30>)
 8022790:	2101      	movs	r1, #1
 8022792:	4091      	lsls	r1, r2
 8022794:	000a      	movs	r2, r1
 8022796:	601a      	str	r2, [r3, #0]
}
 8022798:	46c0      	nop			; (mov r8, r8)
 802279a:	46bd      	mov	sp, r7
 802279c:	b002      	add	sp, #8
 802279e:	bd80      	pop	{r7, pc}
 80227a0:	e000e100 	.word	0xe000e100

080227a4 <__NVIC_SetPriority>:
{
 80227a4:	b590      	push	{r4, r7, lr}
 80227a6:	b083      	sub	sp, #12
 80227a8:	af00      	add	r7, sp, #0
 80227aa:	0002      	movs	r2, r0
 80227ac:	6039      	str	r1, [r7, #0]
 80227ae:	1dfb      	adds	r3, r7, #7
 80227b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80227b2:	1dfb      	adds	r3, r7, #7
 80227b4:	781b      	ldrb	r3, [r3, #0]
 80227b6:	2b7f      	cmp	r3, #127	; 0x7f
 80227b8:	d828      	bhi.n	802280c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80227ba:	4a2f      	ldr	r2, [pc, #188]	; (8022878 <__NVIC_SetPriority+0xd4>)
 80227bc:	1dfb      	adds	r3, r7, #7
 80227be:	781b      	ldrb	r3, [r3, #0]
 80227c0:	b25b      	sxtb	r3, r3
 80227c2:	089b      	lsrs	r3, r3, #2
 80227c4:	33c0      	adds	r3, #192	; 0xc0
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	589b      	ldr	r3, [r3, r2]
 80227ca:	1dfa      	adds	r2, r7, #7
 80227cc:	7812      	ldrb	r2, [r2, #0]
 80227ce:	0011      	movs	r1, r2
 80227d0:	2203      	movs	r2, #3
 80227d2:	400a      	ands	r2, r1
 80227d4:	00d2      	lsls	r2, r2, #3
 80227d6:	21ff      	movs	r1, #255	; 0xff
 80227d8:	4091      	lsls	r1, r2
 80227da:	000a      	movs	r2, r1
 80227dc:	43d2      	mvns	r2, r2
 80227de:	401a      	ands	r2, r3
 80227e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80227e2:	683b      	ldr	r3, [r7, #0]
 80227e4:	019b      	lsls	r3, r3, #6
 80227e6:	22ff      	movs	r2, #255	; 0xff
 80227e8:	401a      	ands	r2, r3
 80227ea:	1dfb      	adds	r3, r7, #7
 80227ec:	781b      	ldrb	r3, [r3, #0]
 80227ee:	0018      	movs	r0, r3
 80227f0:	2303      	movs	r3, #3
 80227f2:	4003      	ands	r3, r0
 80227f4:	00db      	lsls	r3, r3, #3
 80227f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80227f8:	481f      	ldr	r0, [pc, #124]	; (8022878 <__NVIC_SetPriority+0xd4>)
 80227fa:	1dfb      	adds	r3, r7, #7
 80227fc:	781b      	ldrb	r3, [r3, #0]
 80227fe:	b25b      	sxtb	r3, r3
 8022800:	089b      	lsrs	r3, r3, #2
 8022802:	430a      	orrs	r2, r1
 8022804:	33c0      	adds	r3, #192	; 0xc0
 8022806:	009b      	lsls	r3, r3, #2
 8022808:	501a      	str	r2, [r3, r0]
}
 802280a:	e031      	b.n	8022870 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 802280c:	4a1b      	ldr	r2, [pc, #108]	; (802287c <__NVIC_SetPriority+0xd8>)
 802280e:	1dfb      	adds	r3, r7, #7
 8022810:	781b      	ldrb	r3, [r3, #0]
 8022812:	0019      	movs	r1, r3
 8022814:	230f      	movs	r3, #15
 8022816:	400b      	ands	r3, r1
 8022818:	3b08      	subs	r3, #8
 802281a:	089b      	lsrs	r3, r3, #2
 802281c:	3306      	adds	r3, #6
 802281e:	009b      	lsls	r3, r3, #2
 8022820:	18d3      	adds	r3, r2, r3
 8022822:	3304      	adds	r3, #4
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	1dfa      	adds	r2, r7, #7
 8022828:	7812      	ldrb	r2, [r2, #0]
 802282a:	0011      	movs	r1, r2
 802282c:	2203      	movs	r2, #3
 802282e:	400a      	ands	r2, r1
 8022830:	00d2      	lsls	r2, r2, #3
 8022832:	21ff      	movs	r1, #255	; 0xff
 8022834:	4091      	lsls	r1, r2
 8022836:	000a      	movs	r2, r1
 8022838:	43d2      	mvns	r2, r2
 802283a:	401a      	ands	r2, r3
 802283c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 802283e:	683b      	ldr	r3, [r7, #0]
 8022840:	019b      	lsls	r3, r3, #6
 8022842:	22ff      	movs	r2, #255	; 0xff
 8022844:	401a      	ands	r2, r3
 8022846:	1dfb      	adds	r3, r7, #7
 8022848:	781b      	ldrb	r3, [r3, #0]
 802284a:	0018      	movs	r0, r3
 802284c:	2303      	movs	r3, #3
 802284e:	4003      	ands	r3, r0
 8022850:	00db      	lsls	r3, r3, #3
 8022852:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8022854:	4809      	ldr	r0, [pc, #36]	; (802287c <__NVIC_SetPriority+0xd8>)
 8022856:	1dfb      	adds	r3, r7, #7
 8022858:	781b      	ldrb	r3, [r3, #0]
 802285a:	001c      	movs	r4, r3
 802285c:	230f      	movs	r3, #15
 802285e:	4023      	ands	r3, r4
 8022860:	3b08      	subs	r3, #8
 8022862:	089b      	lsrs	r3, r3, #2
 8022864:	430a      	orrs	r2, r1
 8022866:	3306      	adds	r3, #6
 8022868:	009b      	lsls	r3, r3, #2
 802286a:	18c3      	adds	r3, r0, r3
 802286c:	3304      	adds	r3, #4
 802286e:	601a      	str	r2, [r3, #0]
}
 8022870:	46c0      	nop			; (mov r8, r8)
 8022872:	46bd      	mov	sp, r7
 8022874:	b003      	add	sp, #12
 8022876:	bd90      	pop	{r4, r7, pc}
 8022878:	e000e100 	.word	0xe000e100
 802287c:	e000ed00 	.word	0xe000ed00

08022880 <LL_DMA_EnableChannel>:
{
 8022880:	b580      	push	{r7, lr}
 8022882:	b084      	sub	sp, #16
 8022884:	af00      	add	r7, sp, #0
 8022886:	6078      	str	r0, [r7, #4]
 8022888:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 802288e:	4a0b      	ldr	r2, [pc, #44]	; (80228bc <LL_DMA_EnableChannel+0x3c>)
 8022890:	683b      	ldr	r3, [r7, #0]
 8022892:	18d3      	adds	r3, r2, r3
 8022894:	781b      	ldrb	r3, [r3, #0]
 8022896:	001a      	movs	r2, r3
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	18d3      	adds	r3, r2, r3
 802289c:	681a      	ldr	r2, [r3, #0]
 802289e:	4907      	ldr	r1, [pc, #28]	; (80228bc <LL_DMA_EnableChannel+0x3c>)
 80228a0:	683b      	ldr	r3, [r7, #0]
 80228a2:	18cb      	adds	r3, r1, r3
 80228a4:	781b      	ldrb	r3, [r3, #0]
 80228a6:	0019      	movs	r1, r3
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	18cb      	adds	r3, r1, r3
 80228ac:	2101      	movs	r1, #1
 80228ae:	430a      	orrs	r2, r1
 80228b0:	601a      	str	r2, [r3, #0]
}
 80228b2:	46c0      	nop			; (mov r8, r8)
 80228b4:	46bd      	mov	sp, r7
 80228b6:	b004      	add	sp, #16
 80228b8:	bd80      	pop	{r7, pc}
 80228ba:	46c0      	nop			; (mov r8, r8)
 80228bc:	080258d4 	.word	0x080258d4

080228c0 <LL_DMA_DisableChannel>:
{
 80228c0:	b580      	push	{r7, lr}
 80228c2:	b084      	sub	sp, #16
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	6078      	str	r0, [r7, #4]
 80228c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80228ca:	687b      	ldr	r3, [r7, #4]
 80228cc:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80228ce:	4a0b      	ldr	r2, [pc, #44]	; (80228fc <LL_DMA_DisableChannel+0x3c>)
 80228d0:	683b      	ldr	r3, [r7, #0]
 80228d2:	18d3      	adds	r3, r2, r3
 80228d4:	781b      	ldrb	r3, [r3, #0]
 80228d6:	001a      	movs	r2, r3
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	18d3      	adds	r3, r2, r3
 80228dc:	681a      	ldr	r2, [r3, #0]
 80228de:	4907      	ldr	r1, [pc, #28]	; (80228fc <LL_DMA_DisableChannel+0x3c>)
 80228e0:	683b      	ldr	r3, [r7, #0]
 80228e2:	18cb      	adds	r3, r1, r3
 80228e4:	781b      	ldrb	r3, [r3, #0]
 80228e6:	0019      	movs	r1, r3
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	18cb      	adds	r3, r1, r3
 80228ec:	2101      	movs	r1, #1
 80228ee:	438a      	bics	r2, r1
 80228f0:	601a      	str	r2, [r3, #0]
}
 80228f2:	46c0      	nop			; (mov r8, r8)
 80228f4:	46bd      	mov	sp, r7
 80228f6:	b004      	add	sp, #16
 80228f8:	bd80      	pop	{r7, pc}
 80228fa:	46c0      	nop			; (mov r8, r8)
 80228fc:	080258d4 	.word	0x080258d4

08022900 <LL_DMA_ConfigTransfer>:
{
 8022900:	b580      	push	{r7, lr}
 8022902:	b086      	sub	sp, #24
 8022904:	af00      	add	r7, sp, #0
 8022906:	60f8      	str	r0, [r7, #12]
 8022908:	60b9      	str	r1, [r7, #8]
 802290a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8022910:	4a0c      	ldr	r2, [pc, #48]	; (8022944 <LL_DMA_ConfigTransfer+0x44>)
 8022912:	68bb      	ldr	r3, [r7, #8]
 8022914:	18d3      	adds	r3, r2, r3
 8022916:	781b      	ldrb	r3, [r3, #0]
 8022918:	001a      	movs	r2, r3
 802291a:	697b      	ldr	r3, [r7, #20]
 802291c:	18d3      	adds	r3, r2, r3
 802291e:	681b      	ldr	r3, [r3, #0]
 8022920:	4a09      	ldr	r2, [pc, #36]	; (8022948 <LL_DMA_ConfigTransfer+0x48>)
 8022922:	4013      	ands	r3, r2
 8022924:	0019      	movs	r1, r3
 8022926:	4a07      	ldr	r2, [pc, #28]	; (8022944 <LL_DMA_ConfigTransfer+0x44>)
 8022928:	68bb      	ldr	r3, [r7, #8]
 802292a:	18d3      	adds	r3, r2, r3
 802292c:	781b      	ldrb	r3, [r3, #0]
 802292e:	001a      	movs	r2, r3
 8022930:	697b      	ldr	r3, [r7, #20]
 8022932:	18d3      	adds	r3, r2, r3
 8022934:	687a      	ldr	r2, [r7, #4]
 8022936:	430a      	orrs	r2, r1
 8022938:	601a      	str	r2, [r3, #0]
}
 802293a:	46c0      	nop			; (mov r8, r8)
 802293c:	46bd      	mov	sp, r7
 802293e:	b006      	add	sp, #24
 8022940:	bd80      	pop	{r7, pc}
 8022942:	46c0      	nop			; (mov r8, r8)
 8022944:	080258d4 	.word	0x080258d4
 8022948:	ffff800f 	.word	0xffff800f

0802294c <LL_DMA_GetDataTransferDirection>:
{
 802294c:	b580      	push	{r7, lr}
 802294e:	b084      	sub	sp, #16
 8022950:	af00      	add	r7, sp, #0
 8022952:	6078      	str	r0, [r7, #4]
 8022954:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 802295a:	4a07      	ldr	r2, [pc, #28]	; (8022978 <LL_DMA_GetDataTransferDirection+0x2c>)
 802295c:	683b      	ldr	r3, [r7, #0]
 802295e:	18d3      	adds	r3, r2, r3
 8022960:	781b      	ldrb	r3, [r3, #0]
 8022962:	001a      	movs	r2, r3
 8022964:	68fb      	ldr	r3, [r7, #12]
 8022966:	18d3      	adds	r3, r2, r3
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	4a04      	ldr	r2, [pc, #16]	; (802297c <LL_DMA_GetDataTransferDirection+0x30>)
 802296c:	4013      	ands	r3, r2
}
 802296e:	0018      	movs	r0, r3
 8022970:	46bd      	mov	sp, r7
 8022972:	b004      	add	sp, #16
 8022974:	bd80      	pop	{r7, pc}
 8022976:	46c0      	nop			; (mov r8, r8)
 8022978:	080258d4 	.word	0x080258d4
 802297c:	00004010 	.word	0x00004010

08022980 <LL_DMA_SetDataLength>:
{
 8022980:	b580      	push	{r7, lr}
 8022982:	b086      	sub	sp, #24
 8022984:	af00      	add	r7, sp, #0
 8022986:	60f8      	str	r0, [r7, #12]
 8022988:	60b9      	str	r1, [r7, #8]
 802298a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 802298c:	68fb      	ldr	r3, [r7, #12]
 802298e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8022990:	4a0b      	ldr	r2, [pc, #44]	; (80229c0 <LL_DMA_SetDataLength+0x40>)
 8022992:	68bb      	ldr	r3, [r7, #8]
 8022994:	18d3      	adds	r3, r2, r3
 8022996:	781b      	ldrb	r3, [r3, #0]
 8022998:	001a      	movs	r2, r3
 802299a:	697b      	ldr	r3, [r7, #20]
 802299c:	18d3      	adds	r3, r2, r3
 802299e:	685b      	ldr	r3, [r3, #4]
 80229a0:	0c1b      	lsrs	r3, r3, #16
 80229a2:	0419      	lsls	r1, r3, #16
 80229a4:	4a06      	ldr	r2, [pc, #24]	; (80229c0 <LL_DMA_SetDataLength+0x40>)
 80229a6:	68bb      	ldr	r3, [r7, #8]
 80229a8:	18d3      	adds	r3, r2, r3
 80229aa:	781b      	ldrb	r3, [r3, #0]
 80229ac:	001a      	movs	r2, r3
 80229ae:	697b      	ldr	r3, [r7, #20]
 80229b0:	18d3      	adds	r3, r2, r3
 80229b2:	687a      	ldr	r2, [r7, #4]
 80229b4:	430a      	orrs	r2, r1
 80229b6:	605a      	str	r2, [r3, #4]
}
 80229b8:	46c0      	nop			; (mov r8, r8)
 80229ba:	46bd      	mov	sp, r7
 80229bc:	b006      	add	sp, #24
 80229be:	bd80      	pop	{r7, pc}
 80229c0:	080258d4 	.word	0x080258d4

080229c4 <LL_DMA_ConfigAddresses>:
{
 80229c4:	b580      	push	{r7, lr}
 80229c6:	b086      	sub	sp, #24
 80229c8:	af00      	add	r7, sp, #0
 80229ca:	60f8      	str	r0, [r7, #12]
 80229cc:	60b9      	str	r1, [r7, #8]
 80229ce:	607a      	str	r2, [r7, #4]
 80229d0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80229d2:	68fb      	ldr	r3, [r7, #12]
 80229d4:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80229d6:	6a3b      	ldr	r3, [r7, #32]
 80229d8:	2b10      	cmp	r3, #16
 80229da:	d112      	bne.n	8022a02 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80229dc:	4a14      	ldr	r2, [pc, #80]	; (8022a30 <LL_DMA_ConfigAddresses+0x6c>)
 80229de:	68bb      	ldr	r3, [r7, #8]
 80229e0:	18d3      	adds	r3, r2, r3
 80229e2:	781b      	ldrb	r3, [r3, #0]
 80229e4:	001a      	movs	r2, r3
 80229e6:	697b      	ldr	r3, [r7, #20]
 80229e8:	18d3      	adds	r3, r2, r3
 80229ea:	687a      	ldr	r2, [r7, #4]
 80229ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80229ee:	4a10      	ldr	r2, [pc, #64]	; (8022a30 <LL_DMA_ConfigAddresses+0x6c>)
 80229f0:	68bb      	ldr	r3, [r7, #8]
 80229f2:	18d3      	adds	r3, r2, r3
 80229f4:	781b      	ldrb	r3, [r3, #0]
 80229f6:	001a      	movs	r2, r3
 80229f8:	697b      	ldr	r3, [r7, #20]
 80229fa:	18d3      	adds	r3, r2, r3
 80229fc:	683a      	ldr	r2, [r7, #0]
 80229fe:	609a      	str	r2, [r3, #8]
}
 8022a00:	e011      	b.n	8022a26 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8022a02:	4a0b      	ldr	r2, [pc, #44]	; (8022a30 <LL_DMA_ConfigAddresses+0x6c>)
 8022a04:	68bb      	ldr	r3, [r7, #8]
 8022a06:	18d3      	adds	r3, r2, r3
 8022a08:	781b      	ldrb	r3, [r3, #0]
 8022a0a:	001a      	movs	r2, r3
 8022a0c:	697b      	ldr	r3, [r7, #20]
 8022a0e:	18d3      	adds	r3, r2, r3
 8022a10:	687a      	ldr	r2, [r7, #4]
 8022a12:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8022a14:	4a06      	ldr	r2, [pc, #24]	; (8022a30 <LL_DMA_ConfigAddresses+0x6c>)
 8022a16:	68bb      	ldr	r3, [r7, #8]
 8022a18:	18d3      	adds	r3, r2, r3
 8022a1a:	781b      	ldrb	r3, [r3, #0]
 8022a1c:	001a      	movs	r2, r3
 8022a1e:	697b      	ldr	r3, [r7, #20]
 8022a20:	18d3      	adds	r3, r2, r3
 8022a22:	683a      	ldr	r2, [r7, #0]
 8022a24:	60da      	str	r2, [r3, #12]
}
 8022a26:	46c0      	nop			; (mov r8, r8)
 8022a28:	46bd      	mov	sp, r7
 8022a2a:	b006      	add	sp, #24
 8022a2c:	bd80      	pop	{r7, pc}
 8022a2e:	46c0      	nop			; (mov r8, r8)
 8022a30:	080258d4 	.word	0x080258d4

08022a34 <LL_DMA_SetPeriphRequest>:
{
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b086      	sub	sp, #24
 8022a38:	af00      	add	r7, sp, #0
 8022a3a:	60f8      	str	r0, [r7, #12]
 8022a3c:	60b9      	str	r1, [r7, #8]
 8022a3e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8022a40:	68fb      	ldr	r3, [r7, #12]
 8022a42:	0a9b      	lsrs	r3, r3, #10
 8022a44:	4a0f      	ldr	r2, [pc, #60]	; (8022a84 <LL_DMA_SetPeriphRequest+0x50>)
 8022a46:	405a      	eors	r2, r3
 8022a48:	0013      	movs	r3, r2
 8022a4a:	00db      	lsls	r3, r3, #3
 8022a4c:	1a9b      	subs	r3, r3, r2
 8022a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8022a50:	68ba      	ldr	r2, [r7, #8]
 8022a52:	697b      	ldr	r3, [r7, #20]
 8022a54:	18d3      	adds	r3, r2, r3
 8022a56:	009b      	lsls	r3, r3, #2
 8022a58:	4a0b      	ldr	r2, [pc, #44]	; (8022a88 <LL_DMA_SetPeriphRequest+0x54>)
 8022a5a:	4694      	mov	ip, r2
 8022a5c:	4463      	add	r3, ip
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	227f      	movs	r2, #127	; 0x7f
 8022a62:	4393      	bics	r3, r2
 8022a64:	0019      	movs	r1, r3
 8022a66:	68ba      	ldr	r2, [r7, #8]
 8022a68:	697b      	ldr	r3, [r7, #20]
 8022a6a:	18d3      	adds	r3, r2, r3
 8022a6c:	009b      	lsls	r3, r3, #2
 8022a6e:	4a06      	ldr	r2, [pc, #24]	; (8022a88 <LL_DMA_SetPeriphRequest+0x54>)
 8022a70:	4694      	mov	ip, r2
 8022a72:	4463      	add	r3, ip
 8022a74:	687a      	ldr	r2, [r7, #4]
 8022a76:	430a      	orrs	r2, r1
 8022a78:	601a      	str	r2, [r3, #0]
}
 8022a7a:	46c0      	nop			; (mov r8, r8)
 8022a7c:	46bd      	mov	sp, r7
 8022a7e:	b006      	add	sp, #24
 8022a80:	bd80      	pop	{r7, pc}
 8022a82:	46c0      	nop			; (mov r8, r8)
 8022a84:	00100080 	.word	0x00100080
 8022a88:	40020800 	.word	0x40020800

08022a8c <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(const DMA_TypeDef *DMAx)
{
 8022a8c:	b580      	push	{r7, lr}
 8022a8e:	b082      	sub	sp, #8
 8022a90:	af00      	add	r7, sp, #0
 8022a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	681a      	ldr	r2, [r3, #0]
 8022a98:	2380      	movs	r3, #128	; 0x80
 8022a9a:	009b      	lsls	r3, r3, #2
 8022a9c:	401a      	ands	r2, r3
 8022a9e:	2380      	movs	r3, #128	; 0x80
 8022aa0:	009b      	lsls	r3, r3, #2
 8022aa2:	429a      	cmp	r2, r3
 8022aa4:	d101      	bne.n	8022aaa <LL_DMA_IsActiveFlag_TC3+0x1e>
 8022aa6:	2301      	movs	r3, #1
 8022aa8:	e000      	b.n	8022aac <LL_DMA_IsActiveFlag_TC3+0x20>
 8022aaa:	2300      	movs	r3, #0
}
 8022aac:	0018      	movs	r0, r3
 8022aae:	46bd      	mov	sp, r7
 8022ab0:	b002      	add	sp, #8
 8022ab2:	bd80      	pop	{r7, pc}

08022ab4 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8022ab4:	b580      	push	{r7, lr}
 8022ab6:	b082      	sub	sp, #8
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	2280      	movs	r2, #128	; 0x80
 8022ac0:	0052      	lsls	r2, r2, #1
 8022ac2:	605a      	str	r2, [r3, #4]
}
 8022ac4:	46c0      	nop			; (mov r8, r8)
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	b002      	add	sp, #8
 8022aca:	bd80      	pop	{r7, pc}

08022acc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 8022acc:	b580      	push	{r7, lr}
 8022ace:	b084      	sub	sp, #16
 8022ad0:	af00      	add	r7, sp, #0
 8022ad2:	6078      	str	r0, [r7, #4]
 8022ad4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8022ad6:	687b      	ldr	r3, [r7, #4]
 8022ad8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8022ada:	4a0b      	ldr	r2, [pc, #44]	; (8022b08 <LL_DMA_EnableIT_TC+0x3c>)
 8022adc:	683b      	ldr	r3, [r7, #0]
 8022ade:	18d3      	adds	r3, r2, r3
 8022ae0:	781b      	ldrb	r3, [r3, #0]
 8022ae2:	001a      	movs	r2, r3
 8022ae4:	68fb      	ldr	r3, [r7, #12]
 8022ae6:	18d3      	adds	r3, r2, r3
 8022ae8:	681a      	ldr	r2, [r3, #0]
 8022aea:	4907      	ldr	r1, [pc, #28]	; (8022b08 <LL_DMA_EnableIT_TC+0x3c>)
 8022aec:	683b      	ldr	r3, [r7, #0]
 8022aee:	18cb      	adds	r3, r1, r3
 8022af0:	781b      	ldrb	r3, [r3, #0]
 8022af2:	0019      	movs	r1, r3
 8022af4:	68fb      	ldr	r3, [r7, #12]
 8022af6:	18cb      	adds	r3, r1, r3
 8022af8:	2102      	movs	r1, #2
 8022afa:	430a      	orrs	r2, r1
 8022afc:	601a      	str	r2, [r3, #0]
}
 8022afe:	46c0      	nop			; (mov r8, r8)
 8022b00:	46bd      	mov	sp, r7
 8022b02:	b004      	add	sp, #16
 8022b04:	bd80      	pop	{r7, pc}
 8022b06:	46c0      	nop			; (mov r8, r8)
 8022b08:	080258d4 	.word	0x080258d4

08022b0c <LL_AHB1_GRP1_EnableClock>:
{
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b084      	sub	sp, #16
 8022b10:	af00      	add	r7, sp, #0
 8022b12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8022b14:	4b07      	ldr	r3, [pc, #28]	; (8022b34 <LL_AHB1_GRP1_EnableClock+0x28>)
 8022b16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8022b18:	4b06      	ldr	r3, [pc, #24]	; (8022b34 <LL_AHB1_GRP1_EnableClock+0x28>)
 8022b1a:	687a      	ldr	r2, [r7, #4]
 8022b1c:	430a      	orrs	r2, r1
 8022b1e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8022b20:	4b04      	ldr	r3, [pc, #16]	; (8022b34 <LL_AHB1_GRP1_EnableClock+0x28>)
 8022b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b24:	687a      	ldr	r2, [r7, #4]
 8022b26:	4013      	ands	r3, r2
 8022b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022b2a:	68fb      	ldr	r3, [r7, #12]
}
 8022b2c:	46c0      	nop			; (mov r8, r8)
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	b004      	add	sp, #16
 8022b32:	bd80      	pop	{r7, pc}
 8022b34:	40021000 	.word	0x40021000

08022b38 <LL_APB1_GRP1_EnableClock>:
{
 8022b38:	b580      	push	{r7, lr}
 8022b3a:	b084      	sub	sp, #16
 8022b3c:	af00      	add	r7, sp, #0
 8022b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8022b40:	4b07      	ldr	r3, [pc, #28]	; (8022b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8022b42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8022b44:	4b06      	ldr	r3, [pc, #24]	; (8022b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8022b46:	687a      	ldr	r2, [r7, #4]
 8022b48:	430a      	orrs	r2, r1
 8022b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8022b4c:	4b04      	ldr	r3, [pc, #16]	; (8022b60 <LL_APB1_GRP1_EnableClock+0x28>)
 8022b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022b50:	687a      	ldr	r2, [r7, #4]
 8022b52:	4013      	ands	r3, r2
 8022b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022b56:	68fb      	ldr	r3, [r7, #12]
}
 8022b58:	46c0      	nop			; (mov r8, r8)
 8022b5a:	46bd      	mov	sp, r7
 8022b5c:	b004      	add	sp, #16
 8022b5e:	bd80      	pop	{r7, pc}
 8022b60:	40021000 	.word	0x40021000

08022b64 <LL_APB1_GRP1_DisableClock>:
{
 8022b64:	b580      	push	{r7, lr}
 8022b66:	b082      	sub	sp, #8
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 8022b6c:	4b05      	ldr	r3, [pc, #20]	; (8022b84 <LL_APB1_GRP1_DisableClock+0x20>)
 8022b6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	43d9      	mvns	r1, r3
 8022b74:	4b03      	ldr	r3, [pc, #12]	; (8022b84 <LL_APB1_GRP1_DisableClock+0x20>)
 8022b76:	400a      	ands	r2, r1
 8022b78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8022b7a:	46c0      	nop			; (mov r8, r8)
 8022b7c:	46bd      	mov	sp, r7
 8022b7e:	b002      	add	sp, #8
 8022b80:	bd80      	pop	{r7, pc}
 8022b82:	46c0      	nop			; (mov r8, r8)
 8022b84:	40021000 	.word	0x40021000

08022b88 <LL_IOP_GRP1_EnableClock>:
{
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b084      	sub	sp, #16
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8022b90:	4b07      	ldr	r3, [pc, #28]	; (8022bb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8022b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8022b94:	4b06      	ldr	r3, [pc, #24]	; (8022bb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8022b96:	687a      	ldr	r2, [r7, #4]
 8022b98:	430a      	orrs	r2, r1
 8022b9a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8022b9c:	4b04      	ldr	r3, [pc, #16]	; (8022bb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8022b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022ba0:	687a      	ldr	r2, [r7, #4]
 8022ba2:	4013      	ands	r3, r2
 8022ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8022ba6:	68fb      	ldr	r3, [r7, #12]
}
 8022ba8:	46c0      	nop			; (mov r8, r8)
 8022baa:	46bd      	mov	sp, r7
 8022bac:	b004      	add	sp, #16
 8022bae:	bd80      	pop	{r7, pc}
 8022bb0:	40021000 	.word	0x40021000

08022bb4 <LL_GPIO_SetPinMode>:
{
 8022bb4:	b580      	push	{r7, lr}
 8022bb6:	b084      	sub	sp, #16
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	60f8      	str	r0, [r7, #12]
 8022bbc:	60b9      	str	r1, [r7, #8]
 8022bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8022bc0:	68fb      	ldr	r3, [r7, #12]
 8022bc2:	6819      	ldr	r1, [r3, #0]
 8022bc4:	68bb      	ldr	r3, [r7, #8]
 8022bc6:	435b      	muls	r3, r3
 8022bc8:	001a      	movs	r2, r3
 8022bca:	0013      	movs	r3, r2
 8022bcc:	005b      	lsls	r3, r3, #1
 8022bce:	189b      	adds	r3, r3, r2
 8022bd0:	43db      	mvns	r3, r3
 8022bd2:	400b      	ands	r3, r1
 8022bd4:	001a      	movs	r2, r3
 8022bd6:	68bb      	ldr	r3, [r7, #8]
 8022bd8:	435b      	muls	r3, r3
 8022bda:	6879      	ldr	r1, [r7, #4]
 8022bdc:	434b      	muls	r3, r1
 8022bde:	431a      	orrs	r2, r3
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	601a      	str	r2, [r3, #0]
}
 8022be4:	46c0      	nop			; (mov r8, r8)
 8022be6:	46bd      	mov	sp, r7
 8022be8:	b004      	add	sp, #16
 8022bea:	bd80      	pop	{r7, pc}

08022bec <LL_GPIO_SetPinOutputType>:
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	b084      	sub	sp, #16
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	60f8      	str	r0, [r7, #12]
 8022bf4:	60b9      	str	r1, [r7, #8]
 8022bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8022bf8:	68fb      	ldr	r3, [r7, #12]
 8022bfa:	685b      	ldr	r3, [r3, #4]
 8022bfc:	68ba      	ldr	r2, [r7, #8]
 8022bfe:	43d2      	mvns	r2, r2
 8022c00:	401a      	ands	r2, r3
 8022c02:	68bb      	ldr	r3, [r7, #8]
 8022c04:	6879      	ldr	r1, [r7, #4]
 8022c06:	434b      	muls	r3, r1
 8022c08:	431a      	orrs	r2, r3
 8022c0a:	68fb      	ldr	r3, [r7, #12]
 8022c0c:	605a      	str	r2, [r3, #4]
}
 8022c0e:	46c0      	nop			; (mov r8, r8)
 8022c10:	46bd      	mov	sp, r7
 8022c12:	b004      	add	sp, #16
 8022c14:	bd80      	pop	{r7, pc}

08022c16 <LL_GPIO_SetPinSpeed>:
{
 8022c16:	b580      	push	{r7, lr}
 8022c18:	b084      	sub	sp, #16
 8022c1a:	af00      	add	r7, sp, #0
 8022c1c:	60f8      	str	r0, [r7, #12]
 8022c1e:	60b9      	str	r1, [r7, #8]
 8022c20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8022c22:	68fb      	ldr	r3, [r7, #12]
 8022c24:	6899      	ldr	r1, [r3, #8]
 8022c26:	68bb      	ldr	r3, [r7, #8]
 8022c28:	435b      	muls	r3, r3
 8022c2a:	001a      	movs	r2, r3
 8022c2c:	0013      	movs	r3, r2
 8022c2e:	005b      	lsls	r3, r3, #1
 8022c30:	189b      	adds	r3, r3, r2
 8022c32:	43db      	mvns	r3, r3
 8022c34:	400b      	ands	r3, r1
 8022c36:	001a      	movs	r2, r3
 8022c38:	68bb      	ldr	r3, [r7, #8]
 8022c3a:	435b      	muls	r3, r3
 8022c3c:	6879      	ldr	r1, [r7, #4]
 8022c3e:	434b      	muls	r3, r1
 8022c40:	431a      	orrs	r2, r3
 8022c42:	68fb      	ldr	r3, [r7, #12]
 8022c44:	609a      	str	r2, [r3, #8]
}
 8022c46:	46c0      	nop			; (mov r8, r8)
 8022c48:	46bd      	mov	sp, r7
 8022c4a:	b004      	add	sp, #16
 8022c4c:	bd80      	pop	{r7, pc}

08022c4e <LL_GPIO_SetPinPull>:
{
 8022c4e:	b580      	push	{r7, lr}
 8022c50:	b084      	sub	sp, #16
 8022c52:	af00      	add	r7, sp, #0
 8022c54:	60f8      	str	r0, [r7, #12]
 8022c56:	60b9      	str	r1, [r7, #8]
 8022c58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8022c5a:	68fb      	ldr	r3, [r7, #12]
 8022c5c:	68d9      	ldr	r1, [r3, #12]
 8022c5e:	68bb      	ldr	r3, [r7, #8]
 8022c60:	435b      	muls	r3, r3
 8022c62:	001a      	movs	r2, r3
 8022c64:	0013      	movs	r3, r2
 8022c66:	005b      	lsls	r3, r3, #1
 8022c68:	189b      	adds	r3, r3, r2
 8022c6a:	43db      	mvns	r3, r3
 8022c6c:	400b      	ands	r3, r1
 8022c6e:	001a      	movs	r2, r3
 8022c70:	68bb      	ldr	r3, [r7, #8]
 8022c72:	435b      	muls	r3, r3
 8022c74:	6879      	ldr	r1, [r7, #4]
 8022c76:	434b      	muls	r3, r1
 8022c78:	431a      	orrs	r2, r3
 8022c7a:	68fb      	ldr	r3, [r7, #12]
 8022c7c:	60da      	str	r2, [r3, #12]
}
 8022c7e:	46c0      	nop			; (mov r8, r8)
 8022c80:	46bd      	mov	sp, r7
 8022c82:	b004      	add	sp, #16
 8022c84:	bd80      	pop	{r7, pc}

08022c86 <LL_GPIO_SetAFPin_0_7>:
{
 8022c86:	b580      	push	{r7, lr}
 8022c88:	b084      	sub	sp, #16
 8022c8a:	af00      	add	r7, sp, #0
 8022c8c:	60f8      	str	r0, [r7, #12]
 8022c8e:	60b9      	str	r1, [r7, #8]
 8022c90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	6a19      	ldr	r1, [r3, #32]
 8022c96:	68bb      	ldr	r3, [r7, #8]
 8022c98:	435b      	muls	r3, r3
 8022c9a:	68ba      	ldr	r2, [r7, #8]
 8022c9c:	4353      	muls	r3, r2
 8022c9e:	68ba      	ldr	r2, [r7, #8]
 8022ca0:	435a      	muls	r2, r3
 8022ca2:	0013      	movs	r3, r2
 8022ca4:	011b      	lsls	r3, r3, #4
 8022ca6:	1a9b      	subs	r3, r3, r2
 8022ca8:	43db      	mvns	r3, r3
 8022caa:	400b      	ands	r3, r1
 8022cac:	001a      	movs	r2, r3
 8022cae:	68bb      	ldr	r3, [r7, #8]
 8022cb0:	435b      	muls	r3, r3
 8022cb2:	68b9      	ldr	r1, [r7, #8]
 8022cb4:	434b      	muls	r3, r1
 8022cb6:	68b9      	ldr	r1, [r7, #8]
 8022cb8:	434b      	muls	r3, r1
 8022cba:	6879      	ldr	r1, [r7, #4]
 8022cbc:	434b      	muls	r3, r1
 8022cbe:	431a      	orrs	r2, r3
 8022cc0:	68fb      	ldr	r3, [r7, #12]
 8022cc2:	621a      	str	r2, [r3, #32]
}
 8022cc4:	46c0      	nop			; (mov r8, r8)
 8022cc6:	46bd      	mov	sp, r7
 8022cc8:	b004      	add	sp, #16
 8022cca:	bd80      	pop	{r7, pc}

08022ccc <LL_LPUART_Enable>:
{
 8022ccc:	b580      	push	{r7, lr}
 8022cce:	b082      	sub	sp, #8
 8022cd0:	af00      	add	r7, sp, #0
 8022cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	681b      	ldr	r3, [r3, #0]
 8022cd8:	2201      	movs	r2, #1
 8022cda:	431a      	orrs	r2, r3
 8022cdc:	687b      	ldr	r3, [r7, #4]
 8022cde:	601a      	str	r2, [r3, #0]
}
 8022ce0:	46c0      	nop			; (mov r8, r8)
 8022ce2:	46bd      	mov	sp, r7
 8022ce4:	b002      	add	sp, #8
 8022ce6:	bd80      	pop	{r7, pc}

08022ce8 <LL_LPUART_Disable>:
{
 8022ce8:	b580      	push	{r7, lr}
 8022cea:	b082      	sub	sp, #8
 8022cec:	af00      	add	r7, sp, #0
 8022cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	681b      	ldr	r3, [r3, #0]
 8022cf4:	2201      	movs	r2, #1
 8022cf6:	4393      	bics	r3, r2
 8022cf8:	001a      	movs	r2, r3
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	601a      	str	r2, [r3, #0]
}
 8022cfe:	46c0      	nop			; (mov r8, r8)
 8022d00:	46bd      	mov	sp, r7
 8022d02:	b002      	add	sp, #8
 8022d04:	bd80      	pop	{r7, pc}

08022d06 <LL_LPUART_EnableDirectionRx>:
{
 8022d06:	b580      	push	{r7, lr}
 8022d08:	b086      	sub	sp, #24
 8022d0a:	af00      	add	r7, sp, #0
 8022d0c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8022d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8022d14:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8022d16:	617b      	str	r3, [r7, #20]
 8022d18:	2301      	movs	r3, #1
 8022d1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022d1c:	68fb      	ldr	r3, [r7, #12]
 8022d1e:	f383 8810 	msr	PRIMASK, r3
}
 8022d22:	46c0      	nop			; (mov r8, r8)
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	681b      	ldr	r3, [r3, #0]
 8022d28:	2204      	movs	r2, #4
 8022d2a:	431a      	orrs	r2, r3
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	601a      	str	r2, [r3, #0]
 8022d30:	697b      	ldr	r3, [r7, #20]
 8022d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022d34:	693b      	ldr	r3, [r7, #16]
 8022d36:	f383 8810 	msr	PRIMASK, r3
}
 8022d3a:	46c0      	nop			; (mov r8, r8)
}
 8022d3c:	46c0      	nop			; (mov r8, r8)
 8022d3e:	46bd      	mov	sp, r7
 8022d40:	b006      	add	sp, #24
 8022d42:	bd80      	pop	{r7, pc}

08022d44 <LL_LPUART_IsActiveFlag_TEACK>:
{
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b082      	sub	sp, #8
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	69da      	ldr	r2, [r3, #28]
 8022d50:	2380      	movs	r3, #128	; 0x80
 8022d52:	039b      	lsls	r3, r3, #14
 8022d54:	401a      	ands	r2, r3
 8022d56:	2380      	movs	r3, #128	; 0x80
 8022d58:	039b      	lsls	r3, r3, #14
 8022d5a:	429a      	cmp	r2, r3
 8022d5c:	d101      	bne.n	8022d62 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 8022d5e:	2301      	movs	r3, #1
 8022d60:	e000      	b.n	8022d64 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8022d62:	2300      	movs	r3, #0
}
 8022d64:	0018      	movs	r0, r3
 8022d66:	46bd      	mov	sp, r7
 8022d68:	b002      	add	sp, #8
 8022d6a:	bd80      	pop	{r7, pc}

08022d6c <LL_LPUART_ClearFlag_PE>:
{
 8022d6c:	b580      	push	{r7, lr}
 8022d6e:	b082      	sub	sp, #8
 8022d70:	af00      	add	r7, sp, #0
 8022d72:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8022d74:	687b      	ldr	r3, [r7, #4]
 8022d76:	2201      	movs	r2, #1
 8022d78:	621a      	str	r2, [r3, #32]
}
 8022d7a:	46c0      	nop			; (mov r8, r8)
 8022d7c:	46bd      	mov	sp, r7
 8022d7e:	b002      	add	sp, #8
 8022d80:	bd80      	pop	{r7, pc}

08022d82 <LL_LPUART_ClearFlag_FE>:
{
 8022d82:	b580      	push	{r7, lr}
 8022d84:	b082      	sub	sp, #8
 8022d86:	af00      	add	r7, sp, #0
 8022d88:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	2202      	movs	r2, #2
 8022d8e:	621a      	str	r2, [r3, #32]
}
 8022d90:	46c0      	nop			; (mov r8, r8)
 8022d92:	46bd      	mov	sp, r7
 8022d94:	b002      	add	sp, #8
 8022d96:	bd80      	pop	{r7, pc}

08022d98 <LL_LPUART_ClearFlag_NE>:
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b082      	sub	sp, #8
 8022d9c:	af00      	add	r7, sp, #0
 8022d9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	2204      	movs	r2, #4
 8022da4:	621a      	str	r2, [r3, #32]
}
 8022da6:	46c0      	nop			; (mov r8, r8)
 8022da8:	46bd      	mov	sp, r7
 8022daa:	b002      	add	sp, #8
 8022dac:	bd80      	pop	{r7, pc}

08022dae <LL_LPUART_ClearFlag_ORE>:
{
 8022dae:	b580      	push	{r7, lr}
 8022db0:	b082      	sub	sp, #8
 8022db2:	af00      	add	r7, sp, #0
 8022db4:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8022db6:	687b      	ldr	r3, [r7, #4]
 8022db8:	2208      	movs	r2, #8
 8022dba:	621a      	str	r2, [r3, #32]
}
 8022dbc:	46c0      	nop			; (mov r8, r8)
 8022dbe:	46bd      	mov	sp, r7
 8022dc0:	b002      	add	sp, #8
 8022dc2:	bd80      	pop	{r7, pc}

08022dc4 <LL_LPUART_ClearFlag_TC>:
{
 8022dc4:	b580      	push	{r7, lr}
 8022dc6:	b082      	sub	sp, #8
 8022dc8:	af00      	add	r7, sp, #0
 8022dca:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	2240      	movs	r2, #64	; 0x40
 8022dd0:	621a      	str	r2, [r3, #32]
}
 8022dd2:	46c0      	nop			; (mov r8, r8)
 8022dd4:	46bd      	mov	sp, r7
 8022dd6:	b002      	add	sp, #8
 8022dd8:	bd80      	pop	{r7, pc}

08022dda <LL_LPUART_EnableIT_RXNE_RXFNE>:
{
 8022dda:	b580      	push	{r7, lr}
 8022ddc:	b086      	sub	sp, #24
 8022dde:	af00      	add	r7, sp, #0
 8022de0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022de2:	f3ef 8310 	mrs	r3, PRIMASK
 8022de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8022de8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8022dea:	617b      	str	r3, [r7, #20]
 8022dec:	2301      	movs	r3, #1
 8022dee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022df0:	68fb      	ldr	r3, [r7, #12]
 8022df2:	f383 8810 	msr	PRIMASK, r3
}
 8022df6:	46c0      	nop			; (mov r8, r8)
 8022df8:	687b      	ldr	r3, [r7, #4]
 8022dfa:	681b      	ldr	r3, [r3, #0]
 8022dfc:	2220      	movs	r2, #32
 8022dfe:	431a      	orrs	r2, r3
 8022e00:	687b      	ldr	r3, [r7, #4]
 8022e02:	601a      	str	r2, [r3, #0]
 8022e04:	697b      	ldr	r3, [r7, #20]
 8022e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022e08:	693b      	ldr	r3, [r7, #16]
 8022e0a:	f383 8810 	msr	PRIMASK, r3
}
 8022e0e:	46c0      	nop			; (mov r8, r8)
}
 8022e10:	46c0      	nop			; (mov r8, r8)
 8022e12:	46bd      	mov	sp, r7
 8022e14:	b006      	add	sp, #24
 8022e16:	bd80      	pop	{r7, pc}

08022e18 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8022e18:	b580      	push	{r7, lr}
 8022e1a:	b086      	sub	sp, #24
 8022e1c:	af00      	add	r7, sp, #0
 8022e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022e20:	f3ef 8310 	mrs	r3, PRIMASK
 8022e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8022e26:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8022e28:	617b      	str	r3, [r7, #20]
 8022e2a:	2301      	movs	r3, #1
 8022e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022e2e:	68fb      	ldr	r3, [r7, #12]
 8022e30:	f383 8810 	msr	PRIMASK, r3
}
 8022e34:	46c0      	nop			; (mov r8, r8)
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	681b      	ldr	r3, [r3, #0]
 8022e3a:	2240      	movs	r2, #64	; 0x40
 8022e3c:	431a      	orrs	r2, r3
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	601a      	str	r2, [r3, #0]
 8022e42:	697b      	ldr	r3, [r7, #20]
 8022e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022e46:	693b      	ldr	r3, [r7, #16]
 8022e48:	f383 8810 	msr	PRIMASK, r3
}
 8022e4c:	46c0      	nop			; (mov r8, r8)
}
 8022e4e:	46c0      	nop			; (mov r8, r8)
 8022e50:	46bd      	mov	sp, r7
 8022e52:	b006      	add	sp, #24
 8022e54:	bd80      	pop	{r7, pc}

08022e56 <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8022e56:	b580      	push	{r7, lr}
 8022e58:	b086      	sub	sp, #24
 8022e5a:	af00      	add	r7, sp, #0
 8022e5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8022e62:	60bb      	str	r3, [r7, #8]
  return(result);
 8022e64:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8022e66:	617b      	str	r3, [r7, #20]
 8022e68:	2301      	movs	r3, #1
 8022e6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022e6c:	68fb      	ldr	r3, [r7, #12]
 8022e6e:	f383 8810 	msr	PRIMASK, r3
}
 8022e72:	46c0      	nop			; (mov r8, r8)
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	689b      	ldr	r3, [r3, #8]
 8022e78:	2201      	movs	r2, #1
 8022e7a:	431a      	orrs	r2, r3
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	609a      	str	r2, [r3, #8]
 8022e80:	697b      	ldr	r3, [r7, #20]
 8022e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	f383 8810 	msr	PRIMASK, r3
}
 8022e8a:	46c0      	nop			; (mov r8, r8)
}
 8022e8c:	46c0      	nop			; (mov r8, r8)
 8022e8e:	46bd      	mov	sp, r7
 8022e90:	b006      	add	sp, #24
 8022e92:	bd80      	pop	{r7, pc}

08022e94 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8022e94:	b580      	push	{r7, lr}
 8022e96:	b086      	sub	sp, #24
 8022e98:	af00      	add	r7, sp, #0
 8022e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8022ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8022ea2:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8022ea4:	617b      	str	r3, [r7, #20]
 8022ea6:	2301      	movs	r3, #1
 8022ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022eaa:	68fb      	ldr	r3, [r7, #12]
 8022eac:	f383 8810 	msr	PRIMASK, r3
}
 8022eb0:	46c0      	nop			; (mov r8, r8)
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	681b      	ldr	r3, [r3, #0]
 8022eb6:	2240      	movs	r2, #64	; 0x40
 8022eb8:	4393      	bics	r3, r2
 8022eba:	001a      	movs	r2, r3
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	601a      	str	r2, [r3, #0]
 8022ec0:	697b      	ldr	r3, [r7, #20]
 8022ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ec4:	693b      	ldr	r3, [r7, #16]
 8022ec6:	f383 8810 	msr	PRIMASK, r3
}
 8022eca:	46c0      	nop			; (mov r8, r8)
}
 8022ecc:	46c0      	nop			; (mov r8, r8)
 8022ece:	46bd      	mov	sp, r7
 8022ed0:	b006      	add	sp, #24
 8022ed2:	bd80      	pop	{r7, pc}

08022ed4 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8022ed4:	b580      	push	{r7, lr}
 8022ed6:	b082      	sub	sp, #8
 8022ed8:	af00      	add	r7, sp, #0
 8022eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	2220      	movs	r2, #32
 8022ee2:	4013      	ands	r3, r2
 8022ee4:	2b20      	cmp	r3, #32
 8022ee6:	d101      	bne.n	8022eec <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8022ee8:	2301      	movs	r3, #1
 8022eea:	e000      	b.n	8022eee <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8022eec:	2300      	movs	r3, #0
}
 8022eee:	0018      	movs	r0, r3
 8022ef0:	46bd      	mov	sp, r7
 8022ef2:	b002      	add	sp, #8
 8022ef4:	bd80      	pop	{r7, pc}

08022ef6 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 8022ef6:	b580      	push	{r7, lr}
 8022ef8:	b082      	sub	sp, #8
 8022efa:	af00      	add	r7, sp, #0
 8022efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	681b      	ldr	r3, [r3, #0]
 8022f02:	2240      	movs	r2, #64	; 0x40
 8022f04:	4013      	ands	r3, r2
 8022f06:	2b40      	cmp	r3, #64	; 0x40
 8022f08:	d101      	bne.n	8022f0e <LL_LPUART_IsEnabledIT_TC+0x18>
 8022f0a:	2301      	movs	r3, #1
 8022f0c:	e000      	b.n	8022f10 <LL_LPUART_IsEnabledIT_TC+0x1a>
 8022f0e:	2300      	movs	r3, #0
}
 8022f10:	0018      	movs	r0, r3
 8022f12:	46bd      	mov	sp, r7
 8022f14:	b002      	add	sp, #8
 8022f16:	bd80      	pop	{r7, pc}

08022f18 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 8022f18:	b580      	push	{r7, lr}
 8022f1a:	b082      	sub	sp, #8
 8022f1c:	af00      	add	r7, sp, #0
 8022f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	681a      	ldr	r2, [r3, #0]
 8022f24:	2380      	movs	r3, #128	; 0x80
 8022f26:	005b      	lsls	r3, r3, #1
 8022f28:	401a      	ands	r2, r3
 8022f2a:	2380      	movs	r3, #128	; 0x80
 8022f2c:	005b      	lsls	r3, r3, #1
 8022f2e:	429a      	cmp	r2, r3
 8022f30:	d101      	bne.n	8022f36 <LL_LPUART_IsEnabledIT_PE+0x1e>
 8022f32:	2301      	movs	r3, #1
 8022f34:	e000      	b.n	8022f38 <LL_LPUART_IsEnabledIT_PE+0x20>
 8022f36:	2300      	movs	r3, #0
}
 8022f38:	0018      	movs	r0, r3
 8022f3a:	46bd      	mov	sp, r7
 8022f3c:	b002      	add	sp, #8
 8022f3e:	bd80      	pop	{r7, pc}

08022f40 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8022f40:	b580      	push	{r7, lr}
 8022f42:	b082      	sub	sp, #8
 8022f44:	af00      	add	r7, sp, #0
 8022f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	689b      	ldr	r3, [r3, #8]
 8022f4c:	2201      	movs	r2, #1
 8022f4e:	4013      	ands	r3, r2
 8022f50:	2b01      	cmp	r3, #1
 8022f52:	d101      	bne.n	8022f58 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8022f54:	2301      	movs	r3, #1
 8022f56:	e000      	b.n	8022f5a <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8022f58:	2300      	movs	r3, #0
}
 8022f5a:	0018      	movs	r0, r3
 8022f5c:	46bd      	mov	sp, r7
 8022f5e:	b002      	add	sp, #8
 8022f60:	bd80      	pop	{r7, pc}

08022f62 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8022f62:	b580      	push	{r7, lr}
 8022f64:	b086      	sub	sp, #24
 8022f66:	af00      	add	r7, sp, #0
 8022f68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8022f6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8022f70:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8022f72:	617b      	str	r3, [r7, #20]
 8022f74:	2301      	movs	r3, #1
 8022f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f78:	68fb      	ldr	r3, [r7, #12]
 8022f7a:	f383 8810 	msr	PRIMASK, r3
}
 8022f7e:	46c0      	nop			; (mov r8, r8)
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	689b      	ldr	r3, [r3, #8]
 8022f84:	2280      	movs	r2, #128	; 0x80
 8022f86:	431a      	orrs	r2, r3
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	609a      	str	r2, [r3, #8]
 8022f8c:	697b      	ldr	r3, [r7, #20]
 8022f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022f90:	693b      	ldr	r3, [r7, #16]
 8022f92:	f383 8810 	msr	PRIMASK, r3
}
 8022f96:	46c0      	nop			; (mov r8, r8)
}
 8022f98:	46c0      	nop			; (mov r8, r8)
 8022f9a:	46bd      	mov	sp, r7
 8022f9c:	b006      	add	sp, #24
 8022f9e:	bd80      	pop	{r7, pc}

08022fa0 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8022fa0:	b580      	push	{r7, lr}
 8022fa2:	b084      	sub	sp, #16
 8022fa4:	af00      	add	r7, sp, #0
 8022fa6:	6078      	str	r0, [r7, #4]
 8022fa8:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 8022faa:	683b      	ldr	r3, [r7, #0]
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d103      	bne.n	8022fb8 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	3328      	adds	r3, #40	; 0x28
 8022fb4:	60fb      	str	r3, [r7, #12]
 8022fb6:	e002      	b.n	8022fbe <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	3324      	adds	r3, #36	; 0x24
 8022fbc:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8022fbe:	68fb      	ldr	r3, [r7, #12]
}
 8022fc0:	0018      	movs	r0, r3
 8022fc2:	46bd      	mov	sp, r7
 8022fc4:	b004      	add	sp, #16
 8022fc6:	bd80      	pop	{r7, pc}

08022fc8 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8022fc8:	b580      	push	{r7, lr}
 8022fca:	b082      	sub	sp, #8
 8022fcc:	af00      	add	r7, sp, #0
 8022fce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fd4:	b2db      	uxtb	r3, r3
}
 8022fd6:	0018      	movs	r0, r3
 8022fd8:	46bd      	mov	sp, r7
 8022fda:	b002      	add	sp, #8
 8022fdc:	bd80      	pop	{r7, pc}
	...

08022fe0 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 8022fe0:	b580      	push	{r7, lr}
 8022fe2:	b088      	sub	sp, #32
 8022fe4:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 8022fe6:	2001      	movs	r0, #1
 8022fe8:	f7ff fdce 	bl	8022b88 <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 8022fec:	2001      	movs	r0, #1
 8022fee:	f7ff fdcb 	bl	8022b88 <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 8022ff2:	23a0      	movs	r3, #160	; 0xa0
 8022ff4:	05db      	lsls	r3, r3, #23
 8022ff6:	2206      	movs	r2, #6
 8022ff8:	2104      	movs	r1, #4
 8022ffa:	0018      	movs	r0, r3
 8022ffc:	f7ff fe43 	bl	8022c86 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 8023000:	23a0      	movs	r3, #160	; 0xa0
 8023002:	05db      	lsls	r3, r3, #23
 8023004:	2202      	movs	r2, #2
 8023006:	2104      	movs	r1, #4
 8023008:	0018      	movs	r0, r3
 802300a:	f7ff fdd3 	bl	8022bb4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 802300e:	23a0      	movs	r3, #160	; 0xa0
 8023010:	05db      	lsls	r3, r3, #23
 8023012:	2202      	movs	r2, #2
 8023014:	2104      	movs	r1, #4
 8023016:	0018      	movs	r0, r3
 8023018:	f7ff fdfd 	bl	8022c16 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 802301c:	23a0      	movs	r3, #160	; 0xa0
 802301e:	05db      	lsls	r3, r3, #23
 8023020:	2200      	movs	r2, #0
 8023022:	2104      	movs	r1, #4
 8023024:	0018      	movs	r0, r3
 8023026:	f7ff fde1 	bl	8022bec <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 802302a:	23a0      	movs	r3, #160	; 0xa0
 802302c:	05db      	lsls	r3, r3, #23
 802302e:	2201      	movs	r2, #1
 8023030:	2104      	movs	r1, #4
 8023032:	0018      	movs	r0, r3
 8023034:	f7ff fe0b 	bl	8022c4e <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 8023038:	23a0      	movs	r3, #160	; 0xa0
 802303a:	05db      	lsls	r3, r3, #23
 802303c:	2206      	movs	r2, #6
 802303e:	2108      	movs	r1, #8
 8023040:	0018      	movs	r0, r3
 8023042:	f7ff fe20 	bl	8022c86 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 8023046:	23a0      	movs	r3, #160	; 0xa0
 8023048:	05db      	lsls	r3, r3, #23
 802304a:	2202      	movs	r2, #2
 802304c:	2108      	movs	r1, #8
 802304e:	0018      	movs	r0, r3
 8023050:	f7ff fdb0 	bl	8022bb4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8023054:	23a0      	movs	r3, #160	; 0xa0
 8023056:	05db      	lsls	r3, r3, #23
 8023058:	2202      	movs	r2, #2
 802305a:	2108      	movs	r1, #8
 802305c:	0018      	movs	r0, r3
 802305e:	f7ff fdda 	bl	8022c16 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8023062:	23a0      	movs	r3, #160	; 0xa0
 8023064:	05db      	lsls	r3, r3, #23
 8023066:	2200      	movs	r2, #0
 8023068:	2108      	movs	r1, #8
 802306a:	0018      	movs	r0, r3
 802306c:	f7ff fdbe 	bl	8022bec <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 8023070:	23a0      	movs	r3, #160	; 0xa0
 8023072:	05db      	lsls	r3, r3, #23
 8023074:	2201      	movs	r2, #1
 8023076:	2108      	movs	r1, #8
 8023078:	0018      	movs	r0, r3
 802307a:	f7ff fde8 	bl	8022c4e <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802307e:	2380      	movs	r3, #128	; 0x80
 8023080:	035b      	lsls	r3, r3, #13
 8023082:	0018      	movs	r0, r3
 8023084:	f7ff fd58 	bl	8022b38 <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8023088:	4b31      	ldr	r3, [pc, #196]	; (8023150 <HW_TRACER_EMB_Init+0x170>)
 802308a:	0018      	movs	r0, r3
 802308c:	f7ff fe2c 	bl	8022ce8 <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 8023090:	003b      	movs	r3, r7
 8023092:	2200      	movs	r2, #0
 8023094:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 8023096:	003b      	movs	r3, r7
 8023098:	22e1      	movs	r2, #225	; 0xe1
 802309a:	0312      	lsls	r2, r2, #12
 802309c:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 802309e:	003b      	movs	r3, r7
 80230a0:	2200      	movs	r2, #0
 80230a2:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 80230a4:	003b      	movs	r3, r7
 80230a6:	2200      	movs	r2, #0
 80230a8:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 80230aa:	003b      	movs	r3, r7
 80230ac:	2200      	movs	r2, #0
 80230ae:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 80230b0:	003b      	movs	r3, r7
 80230b2:	2208      	movs	r2, #8
 80230b4:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80230b6:	003b      	movs	r3, r7
 80230b8:	2200      	movs	r2, #0
 80230ba:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 80230bc:	003b      	movs	r3, r7
 80230be:	4a24      	ldr	r2, [pc, #144]	; (8023150 <HW_TRACER_EMB_Init+0x170>)
 80230c0:	0019      	movs	r1, r3
 80230c2:	0010      	movs	r0, r2
 80230c4:	f7ed f9e4 	bl	8010490 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 80230c8:	4b21      	ldr	r3, [pc, #132]	; (8023150 <HW_TRACER_EMB_Init+0x170>)
 80230ca:	0018      	movs	r0, r3
 80230cc:	f7ff fdfe 	bl	8022ccc <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 80230d0:	4b1f      	ldr	r3, [pc, #124]	; (8023150 <HW_TRACER_EMB_Init+0x170>)
 80230d2:	0018      	movs	r0, r3
 80230d4:	f7ff fe36 	bl	8022d44 <LL_LPUART_IsActiveFlag_TEACK>
 80230d8:	0003      	movs	r3, r0
 80230da:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 80230dc:	e005      	b.n	80230ea <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 80230de:	4b1c      	ldr	r3, [pc, #112]	; (8023150 <HW_TRACER_EMB_Init+0x170>)
 80230e0:	0018      	movs	r0, r3
 80230e2:	f7ff fe2f 	bl	8022d44 <LL_LPUART_IsActiveFlag_TEACK>
 80230e6:	0003      	movs	r3, r0
 80230e8:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 80230ea:	69fb      	ldr	r3, [r7, #28]
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	d0f6      	beq.n	80230de <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 80230f0:	2001      	movs	r0, #1
 80230f2:	f7ff fd0b 	bl	8022b0c <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 80230f6:	4a17      	ldr	r2, [pc, #92]	; (8023154 <HW_TRACER_EMB_Init+0x174>)
 80230f8:	4b17      	ldr	r3, [pc, #92]	; (8023158 <HW_TRACER_EMB_Init+0x178>)
 80230fa:	2102      	movs	r1, #2
 80230fc:	0018      	movs	r0, r3
 80230fe:	f7ff fbff 	bl	8022900 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 8023102:	4b15      	ldr	r3, [pc, #84]	; (8023158 <HW_TRACER_EMB_Init+0x178>)
 8023104:	220f      	movs	r2, #15
 8023106:	2102      	movs	r1, #2
 8023108:	0018      	movs	r0, r3
 802310a:	f7ff fc93 	bl	8022a34 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 802310e:	4b12      	ldr	r3, [pc, #72]	; (8023158 <HW_TRACER_EMB_Init+0x178>)
 8023110:	2102      	movs	r1, #2
 8023112:	0018      	movs	r0, r3
 8023114:	f7ff fcda 	bl	8022acc <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 8023118:	2100      	movs	r1, #0
 802311a:	200a      	movs	r0, #10
 802311c:	f7ff fb42 	bl	80227a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 8023120:	200a      	movs	r0, #10
 8023122:	f7ff fb25 	bl	8022770 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 8023126:	2103      	movs	r1, #3
 8023128:	201d      	movs	r0, #29
 802312a:	f7ff fb3b 	bl	80227a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 802312e:	201d      	movs	r0, #29
 8023130:	f7ff fb1e 	bl	8022770 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 8023134:	4b09      	ldr	r3, [pc, #36]	; (802315c <HW_TRACER_EMB_Init+0x17c>)
 8023136:	681b      	ldr	r3, [r3, #0]
 8023138:	2b00      	cmp	r3, #0
 802313a:	d105      	bne.n	8023148 <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 802313c:	2380      	movs	r3, #128	; 0x80
 802313e:	035b      	lsls	r3, r3, #13
 8023140:	0018      	movs	r0, r3
 8023142:	f7ff fd0f 	bl	8022b64 <LL_APB1_GRP1_DisableClock>
  }
  return;
 8023146:	46c0      	nop			; (mov r8, r8)
 8023148:	46c0      	nop			; (mov r8, r8)
}
 802314a:	46bd      	mov	sp, r7
 802314c:	b008      	add	sp, #32
 802314e:	bd80      	pop	{r7, pc}
 8023150:	40008000 	.word	0x40008000
 8023154:	00002090 	.word	0x00002090
 8023158:	40020000 	.word	0x40020000
 802315c:	20005038 	.word	0x20005038

08023160 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 8023160:	b580      	push	{r7, lr}
 8023162:	b082      	sub	sp, #8
 8023164:	af00      	add	r7, sp, #0
 8023166:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 8023168:	4b05      	ldr	r3, [pc, #20]	; (8023180 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 802316a:	687a      	ldr	r2, [r7, #4]
 802316c:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 802316e:	2380      	movs	r3, #128	; 0x80
 8023170:	035b      	lsls	r3, r3, #13
 8023172:	0018      	movs	r0, r3
 8023174:	f7ff fce0 	bl	8022b38 <LL_APB1_GRP1_EnableClock>
}
 8023178:	46c0      	nop			; (mov r8, r8)
 802317a:	46bd      	mov	sp, r7
 802317c:	b002      	add	sp, #8
 802317e:	bd80      	pop	{r7, pc}
 8023180:	20005038 	.word	0x20005038

08023184 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 8023184:	b580      	push	{r7, lr}
 8023186:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8023188:	4b0a      	ldr	r3, [pc, #40]	; (80231b4 <HW_TRACER_EMB_StartRX+0x30>)
 802318a:	0018      	movs	r0, r3
 802318c:	f7ff fe25 	bl	8022dda <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 8023190:	4b08      	ldr	r3, [pc, #32]	; (80231b4 <HW_TRACER_EMB_StartRX+0x30>)
 8023192:	0018      	movs	r0, r3
 8023194:	f7ff fe5f 	bl	8022e56 <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8023198:	4b06      	ldr	r3, [pc, #24]	; (80231b4 <HW_TRACER_EMB_StartRX+0x30>)
 802319a:	0018      	movs	r0, r3
 802319c:	f7ff fdb3 	bl	8022d06 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 80231a0:	2103      	movs	r1, #3
 80231a2:	201d      	movs	r0, #29
 80231a4:	f7ff fafe 	bl	80227a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 80231a8:	201d      	movs	r0, #29
 80231aa:	f7ff fae1 	bl	8022770 <__NVIC_EnableIRQ>
}
 80231ae:	46c0      	nop			; (mov r8, r8)
 80231b0:	46bd      	mov	sp, r7
 80231b2:	bd80      	pop	{r7, pc}
 80231b4:	40008000 	.word	0x40008000

080231b8 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 80231b8:	b580      	push	{r7, lr}
 80231ba:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 80231bc:	4b08      	ldr	r3, [pc, #32]	; (80231e0 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 80231be:	0018      	movs	r0, r3
 80231c0:	f7ff fc64 	bl	8022a8c <LL_DMA_IsActiveFlag_TC3>
 80231c4:	0003      	movs	r3, r0
 80231c6:	2b01      	cmp	r3, #1
 80231c8:	d107      	bne.n	80231da <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 80231ca:	4b06      	ldr	r3, [pc, #24]	; (80231e4 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 80231cc:	0018      	movs	r0, r3
 80231ce:	f7ff fe23 	bl	8022e18 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 80231d2:	4b03      	ldr	r3, [pc, #12]	; (80231e0 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 80231d4:	0018      	movs	r0, r3
 80231d6:	f7ff fc6d 	bl	8022ab4 <LL_DMA_ClearFlag_GI3>
  }
}
 80231da:	46c0      	nop			; (mov r8, r8)
 80231dc:	46bd      	mov	sp, r7
 80231de:	bd80      	pop	{r7, pc}
 80231e0:	40020000 	.word	0x40020000
 80231e4:	40008000 	.word	0x40008000

080231e8 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 80231e8:	b580      	push	{r7, lr}
 80231ea:	b086      	sub	sp, #24
 80231ec:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 80231ee:	2317      	movs	r3, #23
 80231f0:	18fb      	adds	r3, r7, r3
 80231f2:	2200      	movs	r2, #0
 80231f4:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 80231f6:	4b60      	ldr	r3, [pc, #384]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80231f8:	69db      	ldr	r3, [r3, #28]
 80231fa:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 80231fc:	4b5e      	ldr	r3, [pc, #376]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80231fe:	0018      	movs	r0, r3
 8023200:	f7ff fe68 	bl	8022ed4 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 8023204:	0003      	movs	r3, r0
 8023206:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 8023208:	68fb      	ldr	r3, [r7, #12]
 802320a:	2b01      	cmp	r3, #1
 802320c:	d000      	beq.n	8023210 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 802320e:	e087      	b.n	8023320 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 8023210:	693b      	ldr	r3, [r7, #16]
 8023212:	220f      	movs	r2, #15
 8023214:	4013      	ands	r3, r2
 8023216:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8023218:	693b      	ldr	r3, [r7, #16]
 802321a:	2220      	movs	r2, #32
 802321c:	4013      	ands	r3, r2
 802321e:	d015      	beq.n	802324c <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 8023220:	68bb      	ldr	r3, [r7, #8]
 8023222:	2b00      	cmp	r3, #0
 8023224:	d112      	bne.n	802324c <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 8023226:	4b54      	ldr	r3, [pc, #336]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023228:	0018      	movs	r0, r3
 802322a:	f7ff fecd 	bl	8022fc8 <LL_LPUART_ReceiveData8>
 802322e:	0003      	movs	r3, r0
 8023230:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 8023232:	4b52      	ldr	r3, [pc, #328]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023234:	681b      	ldr	r3, [r3, #0]
 8023236:	2b00      	cmp	r3, #0
 8023238:	d100      	bne.n	802323c <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 802323a:	e097      	b.n	802336c <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 802323c:	4b4f      	ldr	r3, [pc, #316]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	683a      	ldr	r2, [r7, #0]
 8023242:	b2d2      	uxtb	r2, r2
 8023244:	2100      	movs	r1, #0
 8023246:	0010      	movs	r0, r2
 8023248:	4798      	blx	r3
      }
      return;
 802324a:	e08f      	b.n	802336c <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 802324c:	68bb      	ldr	r3, [r7, #8]
 802324e:	2b00      	cmp	r3, #0
 8023250:	d066      	beq.n	8023320 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8023252:	693b      	ldr	r3, [r7, #16]
 8023254:	2220      	movs	r2, #32
 8023256:	4013      	ands	r3, r2
 8023258:	d012      	beq.n	8023280 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 802325a:	4b47      	ldr	r3, [pc, #284]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802325c:	0018      	movs	r0, r3
 802325e:	f7ff feb3 	bl	8022fc8 <LL_LPUART_ReceiveData8>
 8023262:	0003      	movs	r3, r0
 8023264:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 8023266:	4b45      	ldr	r3, [pc, #276]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	2b00      	cmp	r3, #0
 802326c:	d100      	bne.n	8023270 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 802326e:	e07f      	b.n	8023370 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 8023270:	4b42      	ldr	r3, [pc, #264]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023272:	681b      	ldr	r3, [r3, #0]
 8023274:	683a      	ldr	r2, [r7, #0]
 8023276:	b2d2      	uxtb	r2, r2
 8023278:	2100      	movs	r1, #0
 802327a:	0010      	movs	r0, r2
 802327c:	4798      	blx	r3
        }
        return;
 802327e:	e077      	b.n	8023370 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 8023280:	4b3d      	ldr	r3, [pc, #244]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023282:	0018      	movs	r0, r3
 8023284:	f7ff fe48 	bl	8022f18 <LL_LPUART_IsEnabledIT_PE>
 8023288:	0003      	movs	r3, r0
 802328a:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	2b01      	cmp	r3, #1
 8023290:	d10b      	bne.n	80232aa <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 8023292:	68bb      	ldr	r3, [r7, #8]
 8023294:	2201      	movs	r2, #1
 8023296:	4013      	ands	r3, r2
 8023298:	d007      	beq.n	80232aa <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 802329a:	4b37      	ldr	r3, [pc, #220]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802329c:	0018      	movs	r0, r3
 802329e:	f7ff fd65 	bl	8022d6c <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 80232a2:	2317      	movs	r3, #23
 80232a4:	18fb      	adds	r3, r7, r3
 80232a6:	2201      	movs	r2, #1
 80232a8:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 80232aa:	4b33      	ldr	r3, [pc, #204]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232ac:	0018      	movs	r0, r3
 80232ae:	f7ff fe47 	bl	8022f40 <LL_LPUART_IsEnabledIT_ERROR>
 80232b2:	0003      	movs	r3, r0
 80232b4:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	2b01      	cmp	r3, #1
 80232ba:	d123      	bne.n	8023304 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 80232bc:	68bb      	ldr	r3, [r7, #8]
 80232be:	2202      	movs	r2, #2
 80232c0:	4013      	ands	r3, r2
 80232c2:	d007      	beq.n	80232d4 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 80232c4:	4b2c      	ldr	r3, [pc, #176]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232c6:	0018      	movs	r0, r3
 80232c8:	f7ff fd5b 	bl	8022d82 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 80232cc:	2317      	movs	r3, #23
 80232ce:	18fb      	adds	r3, r7, r3
 80232d0:	2201      	movs	r2, #1
 80232d2:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 80232d4:	68bb      	ldr	r3, [r7, #8]
 80232d6:	2208      	movs	r2, #8
 80232d8:	4013      	ands	r3, r2
 80232da:	d007      	beq.n	80232ec <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 80232dc:	4b26      	ldr	r3, [pc, #152]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232de:	0018      	movs	r0, r3
 80232e0:	f7ff fd65 	bl	8022dae <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 80232e4:	2317      	movs	r3, #23
 80232e6:	18fb      	adds	r3, r7, r3
 80232e8:	2201      	movs	r2, #1
 80232ea:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 80232ec:	68bb      	ldr	r3, [r7, #8]
 80232ee:	2204      	movs	r2, #4
 80232f0:	4013      	ands	r3, r2
 80232f2:	d007      	beq.n	8023304 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 80232f4:	4b20      	ldr	r3, [pc, #128]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80232f6:	0018      	movs	r0, r3
 80232f8:	f7ff fd4e 	bl	8022d98 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 80232fc:	2317      	movs	r3, #23
 80232fe:	18fb      	adds	r3, r7, r3
 8023300:	2201      	movs	r2, #1
 8023302:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 8023304:	2317      	movs	r3, #23
 8023306:	18fb      	adds	r3, r7, r3
 8023308:	781b      	ldrb	r3, [r3, #0]
 802330a:	2b01      	cmp	r3, #1
 802330c:	d108      	bne.n	8023320 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 802330e:	4b1b      	ldr	r3, [pc, #108]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d004      	beq.n	8023320 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 8023316:	4b19      	ldr	r3, [pc, #100]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023318:	681b      	ldr	r3, [r3, #0]
 802331a:	2101      	movs	r1, #1
 802331c:	2001      	movs	r0, #1
 802331e:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 8023320:	4b15      	ldr	r3, [pc, #84]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023322:	0018      	movs	r0, r3
 8023324:	f7ff fde7 	bl	8022ef6 <LL_LPUART_IsEnabledIT_TC>
 8023328:	0003      	movs	r3, r0
 802332a:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 802332c:	693b      	ldr	r3, [r7, #16]
 802332e:	2240      	movs	r2, #64	; 0x40
 8023330:	4013      	ands	r3, r2
 8023332:	d01e      	beq.n	8023372 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	2b01      	cmp	r3, #1
 8023338:	d11b      	bne.n	8023372 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 802333a:	4b0f      	ldr	r3, [pc, #60]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802333c:	0018      	movs	r0, r3
 802333e:	f7ff fda9 	bl	8022e94 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 8023342:	4b0d      	ldr	r3, [pc, #52]	; (8023378 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8023344:	0018      	movs	r0, r3
 8023346:	f7ff fd3d 	bl	8022dc4 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 802334a:	4b0d      	ldr	r3, [pc, #52]	; (8023380 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 802334c:	2102      	movs	r1, #2
 802334e:	0018      	movs	r0, r3
 8023350:	f7ff fab6 	bl	80228c0 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 8023354:	4b09      	ldr	r3, [pc, #36]	; (802337c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8023356:	681b      	ldr	r3, [r3, #0]
 8023358:	2b00      	cmp	r3, #0
 802335a:	d104      	bne.n	8023366 <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 802335c:	2380      	movs	r3, #128	; 0x80
 802335e:	035b      	lsls	r3, r3, #13
 8023360:	0018      	movs	r0, r3
 8023362:	f7ff fbff 	bl	8022b64 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 8023366:	f7ff f8b7 	bl	80224d8 <TRACER_EMB_CALLBACK_TX>
 802336a:	e002      	b.n	8023372 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 802336c:	46c0      	nop			; (mov r8, r8)
 802336e:	e000      	b.n	8023372 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 8023370:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 8023372:	46bd      	mov	sp, r7
 8023374:	b006      	add	sp, #24
 8023376:	bd80      	pop	{r7, pc}
 8023378:	40008000 	.word	0x40008000
 802337c:	20005038 	.word	0x20005038
 8023380:	40020000 	.word	0x40020000

08023384 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 8023384:	b5b0      	push	{r4, r5, r7, lr}
 8023386:	b084      	sub	sp, #16
 8023388:	af02      	add	r7, sp, #8
 802338a:	6078      	str	r0, [r7, #4]
 802338c:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802338e:	2380      	movs	r3, #128	; 0x80
 8023390:	035b      	lsls	r3, r3, #13
 8023392:	0018      	movs	r0, r3
 8023394:	f7ff fbd0 	bl	8022b38 <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8023398:	687c      	ldr	r4, [r7, #4]
 802339a:	4b13      	ldr	r3, [pc, #76]	; (80233e8 <HW_TRACER_EMB_SendData+0x64>)
 802339c:	2100      	movs	r1, #0
 802339e:	0018      	movs	r0, r3
 80233a0:	f7ff fdfe 	bl	8022fa0 <LL_LPUART_DMA_GetRegAddr>
 80233a4:	0005      	movs	r5, r0
 80233a6:	4b11      	ldr	r3, [pc, #68]	; (80233ec <HW_TRACER_EMB_SendData+0x68>)
 80233a8:	2102      	movs	r1, #2
 80233aa:	0018      	movs	r0, r3
 80233ac:	f7ff face 	bl	802294c <LL_DMA_GetDataTransferDirection>
 80233b0:	0003      	movs	r3, r0
 80233b2:	480e      	ldr	r0, [pc, #56]	; (80233ec <HW_TRACER_EMB_SendData+0x68>)
 80233b4:	9300      	str	r3, [sp, #0]
 80233b6:	002b      	movs	r3, r5
 80233b8:	0022      	movs	r2, r4
 80233ba:	2102      	movs	r1, #2
 80233bc:	f7ff fb02 	bl	80229c4 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 80233c0:	683b      	ldr	r3, [r7, #0]
 80233c2:	480a      	ldr	r0, [pc, #40]	; (80233ec <HW_TRACER_EMB_SendData+0x68>)
 80233c4:	001a      	movs	r2, r3
 80233c6:	2102      	movs	r1, #2
 80233c8:	f7ff fada 	bl	8022980 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 80233cc:	4b06      	ldr	r3, [pc, #24]	; (80233e8 <HW_TRACER_EMB_SendData+0x64>)
 80233ce:	0018      	movs	r0, r3
 80233d0:	f7ff fdc7 	bl	8022f62 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 80233d4:	4b05      	ldr	r3, [pc, #20]	; (80233ec <HW_TRACER_EMB_SendData+0x68>)
 80233d6:	2102      	movs	r1, #2
 80233d8:	0018      	movs	r0, r3
 80233da:	f7ff fa51 	bl	8022880 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 80233de:	46c0      	nop			; (mov r8, r8)
 80233e0:	46bd      	mov	sp, r7
 80233e2:	b002      	add	sp, #8
 80233e4:	bdb0      	pop	{r4, r5, r7, pc}
 80233e6:	46c0      	nop			; (mov r8, r8)
 80233e8:	40008000 	.word	0x40008000
 80233ec:	40020000 	.word	0x40020000

080233f0 <malloc>:
 80233f0:	b510      	push	{r4, lr}
 80233f2:	4b03      	ldr	r3, [pc, #12]	; (8023400 <malloc+0x10>)
 80233f4:	0001      	movs	r1, r0
 80233f6:	6818      	ldr	r0, [r3, #0]
 80233f8:	f000 f826 	bl	8023448 <_malloc_r>
 80233fc:	bd10      	pop	{r4, pc}
 80233fe:	46c0      	nop			; (mov r8, r8)
 8023400:	20000254 	.word	0x20000254

08023404 <sbrk_aligned>:
 8023404:	b570      	push	{r4, r5, r6, lr}
 8023406:	4e0f      	ldr	r6, [pc, #60]	; (8023444 <sbrk_aligned+0x40>)
 8023408:	000d      	movs	r5, r1
 802340a:	6831      	ldr	r1, [r6, #0]
 802340c:	0004      	movs	r4, r0
 802340e:	2900      	cmp	r1, #0
 8023410:	d102      	bne.n	8023418 <sbrk_aligned+0x14>
 8023412:	f000 f965 	bl	80236e0 <_sbrk_r>
 8023416:	6030      	str	r0, [r6, #0]
 8023418:	0029      	movs	r1, r5
 802341a:	0020      	movs	r0, r4
 802341c:	f000 f960 	bl	80236e0 <_sbrk_r>
 8023420:	1c43      	adds	r3, r0, #1
 8023422:	d00a      	beq.n	802343a <sbrk_aligned+0x36>
 8023424:	2303      	movs	r3, #3
 8023426:	1cc5      	adds	r5, r0, #3
 8023428:	439d      	bics	r5, r3
 802342a:	42a8      	cmp	r0, r5
 802342c:	d007      	beq.n	802343e <sbrk_aligned+0x3a>
 802342e:	1a29      	subs	r1, r5, r0
 8023430:	0020      	movs	r0, r4
 8023432:	f000 f955 	bl	80236e0 <_sbrk_r>
 8023436:	3001      	adds	r0, #1
 8023438:	d101      	bne.n	802343e <sbrk_aligned+0x3a>
 802343a:	2501      	movs	r5, #1
 802343c:	426d      	negs	r5, r5
 802343e:	0028      	movs	r0, r5
 8023440:	bd70      	pop	{r4, r5, r6, pc}
 8023442:	46c0      	nop			; (mov r8, r8)
 8023444:	20005040 	.word	0x20005040

08023448 <_malloc_r>:
 8023448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802344a:	2203      	movs	r2, #3
 802344c:	1ccb      	adds	r3, r1, #3
 802344e:	4393      	bics	r3, r2
 8023450:	3308      	adds	r3, #8
 8023452:	0006      	movs	r6, r0
 8023454:	001f      	movs	r7, r3
 8023456:	2b0c      	cmp	r3, #12
 8023458:	d238      	bcs.n	80234cc <_malloc_r+0x84>
 802345a:	270c      	movs	r7, #12
 802345c:	42b9      	cmp	r1, r7
 802345e:	d837      	bhi.n	80234d0 <_malloc_r+0x88>
 8023460:	0030      	movs	r0, r6
 8023462:	f000 f873 	bl	802354c <__malloc_lock>
 8023466:	4b38      	ldr	r3, [pc, #224]	; (8023548 <_malloc_r+0x100>)
 8023468:	9300      	str	r3, [sp, #0]
 802346a:	681b      	ldr	r3, [r3, #0]
 802346c:	001c      	movs	r4, r3
 802346e:	2c00      	cmp	r4, #0
 8023470:	d133      	bne.n	80234da <_malloc_r+0x92>
 8023472:	0039      	movs	r1, r7
 8023474:	0030      	movs	r0, r6
 8023476:	f7ff ffc5 	bl	8023404 <sbrk_aligned>
 802347a:	0004      	movs	r4, r0
 802347c:	1c43      	adds	r3, r0, #1
 802347e:	d15e      	bne.n	802353e <_malloc_r+0xf6>
 8023480:	9b00      	ldr	r3, [sp, #0]
 8023482:	681c      	ldr	r4, [r3, #0]
 8023484:	0025      	movs	r5, r4
 8023486:	2d00      	cmp	r5, #0
 8023488:	d14e      	bne.n	8023528 <_malloc_r+0xe0>
 802348a:	2c00      	cmp	r4, #0
 802348c:	d051      	beq.n	8023532 <_malloc_r+0xea>
 802348e:	6823      	ldr	r3, [r4, #0]
 8023490:	0029      	movs	r1, r5
 8023492:	18e3      	adds	r3, r4, r3
 8023494:	0030      	movs	r0, r6
 8023496:	9301      	str	r3, [sp, #4]
 8023498:	f000 f922 	bl	80236e0 <_sbrk_r>
 802349c:	9b01      	ldr	r3, [sp, #4]
 802349e:	4283      	cmp	r3, r0
 80234a0:	d147      	bne.n	8023532 <_malloc_r+0xea>
 80234a2:	6823      	ldr	r3, [r4, #0]
 80234a4:	0030      	movs	r0, r6
 80234a6:	1aff      	subs	r7, r7, r3
 80234a8:	0039      	movs	r1, r7
 80234aa:	f7ff ffab 	bl	8023404 <sbrk_aligned>
 80234ae:	3001      	adds	r0, #1
 80234b0:	d03f      	beq.n	8023532 <_malloc_r+0xea>
 80234b2:	6823      	ldr	r3, [r4, #0]
 80234b4:	19db      	adds	r3, r3, r7
 80234b6:	6023      	str	r3, [r4, #0]
 80234b8:	9b00      	ldr	r3, [sp, #0]
 80234ba:	681b      	ldr	r3, [r3, #0]
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d040      	beq.n	8023542 <_malloc_r+0xfa>
 80234c0:	685a      	ldr	r2, [r3, #4]
 80234c2:	42a2      	cmp	r2, r4
 80234c4:	d133      	bne.n	802352e <_malloc_r+0xe6>
 80234c6:	2200      	movs	r2, #0
 80234c8:	605a      	str	r2, [r3, #4]
 80234ca:	e014      	b.n	80234f6 <_malloc_r+0xae>
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	dac5      	bge.n	802345c <_malloc_r+0x14>
 80234d0:	230c      	movs	r3, #12
 80234d2:	2500      	movs	r5, #0
 80234d4:	6033      	str	r3, [r6, #0]
 80234d6:	0028      	movs	r0, r5
 80234d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80234da:	6821      	ldr	r1, [r4, #0]
 80234dc:	1bc9      	subs	r1, r1, r7
 80234de:	d420      	bmi.n	8023522 <_malloc_r+0xda>
 80234e0:	290b      	cmp	r1, #11
 80234e2:	d918      	bls.n	8023516 <_malloc_r+0xce>
 80234e4:	19e2      	adds	r2, r4, r7
 80234e6:	6027      	str	r7, [r4, #0]
 80234e8:	42a3      	cmp	r3, r4
 80234ea:	d112      	bne.n	8023512 <_malloc_r+0xca>
 80234ec:	9b00      	ldr	r3, [sp, #0]
 80234ee:	601a      	str	r2, [r3, #0]
 80234f0:	6863      	ldr	r3, [r4, #4]
 80234f2:	6011      	str	r1, [r2, #0]
 80234f4:	6053      	str	r3, [r2, #4]
 80234f6:	0030      	movs	r0, r6
 80234f8:	0025      	movs	r5, r4
 80234fa:	f000 f82f 	bl	802355c <__malloc_unlock>
 80234fe:	2207      	movs	r2, #7
 8023500:	350b      	adds	r5, #11
 8023502:	1d23      	adds	r3, r4, #4
 8023504:	4395      	bics	r5, r2
 8023506:	1aea      	subs	r2, r5, r3
 8023508:	429d      	cmp	r5, r3
 802350a:	d0e4      	beq.n	80234d6 <_malloc_r+0x8e>
 802350c:	1b5b      	subs	r3, r3, r5
 802350e:	50a3      	str	r3, [r4, r2]
 8023510:	e7e1      	b.n	80234d6 <_malloc_r+0x8e>
 8023512:	605a      	str	r2, [r3, #4]
 8023514:	e7ec      	b.n	80234f0 <_malloc_r+0xa8>
 8023516:	6862      	ldr	r2, [r4, #4]
 8023518:	42a3      	cmp	r3, r4
 802351a:	d1d5      	bne.n	80234c8 <_malloc_r+0x80>
 802351c:	9b00      	ldr	r3, [sp, #0]
 802351e:	601a      	str	r2, [r3, #0]
 8023520:	e7e9      	b.n	80234f6 <_malloc_r+0xae>
 8023522:	0023      	movs	r3, r4
 8023524:	6864      	ldr	r4, [r4, #4]
 8023526:	e7a2      	b.n	802346e <_malloc_r+0x26>
 8023528:	002c      	movs	r4, r5
 802352a:	686d      	ldr	r5, [r5, #4]
 802352c:	e7ab      	b.n	8023486 <_malloc_r+0x3e>
 802352e:	0013      	movs	r3, r2
 8023530:	e7c4      	b.n	80234bc <_malloc_r+0x74>
 8023532:	230c      	movs	r3, #12
 8023534:	0030      	movs	r0, r6
 8023536:	6033      	str	r3, [r6, #0]
 8023538:	f000 f810 	bl	802355c <__malloc_unlock>
 802353c:	e7cb      	b.n	80234d6 <_malloc_r+0x8e>
 802353e:	6027      	str	r7, [r4, #0]
 8023540:	e7d9      	b.n	80234f6 <_malloc_r+0xae>
 8023542:	605b      	str	r3, [r3, #4]
 8023544:	deff      	udf	#255	; 0xff
 8023546:	46c0      	nop			; (mov r8, r8)
 8023548:	2000503c 	.word	0x2000503c

0802354c <__malloc_lock>:
 802354c:	b510      	push	{r4, lr}
 802354e:	4802      	ldr	r0, [pc, #8]	; (8023558 <__malloc_lock+0xc>)
 8023550:	f000 f902 	bl	8023758 <__retarget_lock_acquire_recursive>
 8023554:	bd10      	pop	{r4, pc}
 8023556:	46c0      	nop			; (mov r8, r8)
 8023558:	20005180 	.word	0x20005180

0802355c <__malloc_unlock>:
 802355c:	b510      	push	{r4, lr}
 802355e:	4802      	ldr	r0, [pc, #8]	; (8023568 <__malloc_unlock+0xc>)
 8023560:	f000 f8fb 	bl	802375a <__retarget_lock_release_recursive>
 8023564:	bd10      	pop	{r4, pc}
 8023566:	46c0      	nop			; (mov r8, r8)
 8023568:	20005180 	.word	0x20005180

0802356c <sniprintf>:
 802356c:	b40c      	push	{r2, r3}
 802356e:	b530      	push	{r4, r5, lr}
 8023570:	4b17      	ldr	r3, [pc, #92]	; (80235d0 <sniprintf+0x64>)
 8023572:	000c      	movs	r4, r1
 8023574:	681d      	ldr	r5, [r3, #0]
 8023576:	b09d      	sub	sp, #116	; 0x74
 8023578:	2900      	cmp	r1, #0
 802357a:	da08      	bge.n	802358e <sniprintf+0x22>
 802357c:	238b      	movs	r3, #139	; 0x8b
 802357e:	2001      	movs	r0, #1
 8023580:	602b      	str	r3, [r5, #0]
 8023582:	4240      	negs	r0, r0
 8023584:	b01d      	add	sp, #116	; 0x74
 8023586:	bc30      	pop	{r4, r5}
 8023588:	bc08      	pop	{r3}
 802358a:	b002      	add	sp, #8
 802358c:	4718      	bx	r3
 802358e:	2382      	movs	r3, #130	; 0x82
 8023590:	466a      	mov	r2, sp
 8023592:	009b      	lsls	r3, r3, #2
 8023594:	8293      	strh	r3, [r2, #20]
 8023596:	2300      	movs	r3, #0
 8023598:	9002      	str	r0, [sp, #8]
 802359a:	9006      	str	r0, [sp, #24]
 802359c:	4299      	cmp	r1, r3
 802359e:	d000      	beq.n	80235a2 <sniprintf+0x36>
 80235a0:	1e4b      	subs	r3, r1, #1
 80235a2:	9304      	str	r3, [sp, #16]
 80235a4:	9307      	str	r3, [sp, #28]
 80235a6:	2301      	movs	r3, #1
 80235a8:	466a      	mov	r2, sp
 80235aa:	425b      	negs	r3, r3
 80235ac:	82d3      	strh	r3, [r2, #22]
 80235ae:	0028      	movs	r0, r5
 80235b0:	ab21      	add	r3, sp, #132	; 0x84
 80235b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80235b4:	a902      	add	r1, sp, #8
 80235b6:	9301      	str	r3, [sp, #4]
 80235b8:	f000 f996 	bl	80238e8 <_svfiprintf_r>
 80235bc:	1c43      	adds	r3, r0, #1
 80235be:	da01      	bge.n	80235c4 <sniprintf+0x58>
 80235c0:	238b      	movs	r3, #139	; 0x8b
 80235c2:	602b      	str	r3, [r5, #0]
 80235c4:	2c00      	cmp	r4, #0
 80235c6:	d0dd      	beq.n	8023584 <sniprintf+0x18>
 80235c8:	2200      	movs	r2, #0
 80235ca:	9b02      	ldr	r3, [sp, #8]
 80235cc:	701a      	strb	r2, [r3, #0]
 80235ce:	e7d9      	b.n	8023584 <sniprintf+0x18>
 80235d0:	20000254 	.word	0x20000254

080235d4 <siprintf>:
 80235d4:	b40e      	push	{r1, r2, r3}
 80235d6:	b500      	push	{lr}
 80235d8:	490b      	ldr	r1, [pc, #44]	; (8023608 <siprintf+0x34>)
 80235da:	b09c      	sub	sp, #112	; 0x70
 80235dc:	ab1d      	add	r3, sp, #116	; 0x74
 80235de:	9002      	str	r0, [sp, #8]
 80235e0:	9006      	str	r0, [sp, #24]
 80235e2:	9107      	str	r1, [sp, #28]
 80235e4:	9104      	str	r1, [sp, #16]
 80235e6:	4809      	ldr	r0, [pc, #36]	; (802360c <siprintf+0x38>)
 80235e8:	4909      	ldr	r1, [pc, #36]	; (8023610 <siprintf+0x3c>)
 80235ea:	cb04      	ldmia	r3!, {r2}
 80235ec:	9105      	str	r1, [sp, #20]
 80235ee:	6800      	ldr	r0, [r0, #0]
 80235f0:	a902      	add	r1, sp, #8
 80235f2:	9301      	str	r3, [sp, #4]
 80235f4:	f000 f978 	bl	80238e8 <_svfiprintf_r>
 80235f8:	2200      	movs	r2, #0
 80235fa:	9b02      	ldr	r3, [sp, #8]
 80235fc:	701a      	strb	r2, [r3, #0]
 80235fe:	b01c      	add	sp, #112	; 0x70
 8023600:	bc08      	pop	{r3}
 8023602:	b003      	add	sp, #12
 8023604:	4718      	bx	r3
 8023606:	46c0      	nop			; (mov r8, r8)
 8023608:	7fffffff 	.word	0x7fffffff
 802360c:	20000254 	.word	0x20000254
 8023610:	ffff0208 	.word	0xffff0208

08023614 <memset>:
 8023614:	0003      	movs	r3, r0
 8023616:	1882      	adds	r2, r0, r2
 8023618:	4293      	cmp	r3, r2
 802361a:	d100      	bne.n	802361e <memset+0xa>
 802361c:	4770      	bx	lr
 802361e:	7019      	strb	r1, [r3, #0]
 8023620:	3301      	adds	r3, #1
 8023622:	e7f9      	b.n	8023618 <memset+0x4>

08023624 <_reclaim_reent>:
 8023624:	4b2d      	ldr	r3, [pc, #180]	; (80236dc <_reclaim_reent+0xb8>)
 8023626:	b570      	push	{r4, r5, r6, lr}
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	0004      	movs	r4, r0
 802362c:	4283      	cmp	r3, r0
 802362e:	d042      	beq.n	80236b6 <_reclaim_reent+0x92>
 8023630:	69c3      	ldr	r3, [r0, #28]
 8023632:	2b00      	cmp	r3, #0
 8023634:	d00a      	beq.n	802364c <_reclaim_reent+0x28>
 8023636:	2500      	movs	r5, #0
 8023638:	68db      	ldr	r3, [r3, #12]
 802363a:	42ab      	cmp	r3, r5
 802363c:	d140      	bne.n	80236c0 <_reclaim_reent+0x9c>
 802363e:	69e3      	ldr	r3, [r4, #28]
 8023640:	6819      	ldr	r1, [r3, #0]
 8023642:	2900      	cmp	r1, #0
 8023644:	d002      	beq.n	802364c <_reclaim_reent+0x28>
 8023646:	0020      	movs	r0, r4
 8023648:	f000 f8a2 	bl	8023790 <_free_r>
 802364c:	6961      	ldr	r1, [r4, #20]
 802364e:	2900      	cmp	r1, #0
 8023650:	d002      	beq.n	8023658 <_reclaim_reent+0x34>
 8023652:	0020      	movs	r0, r4
 8023654:	f000 f89c 	bl	8023790 <_free_r>
 8023658:	69e1      	ldr	r1, [r4, #28]
 802365a:	2900      	cmp	r1, #0
 802365c:	d002      	beq.n	8023664 <_reclaim_reent+0x40>
 802365e:	0020      	movs	r0, r4
 8023660:	f000 f896 	bl	8023790 <_free_r>
 8023664:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023666:	2900      	cmp	r1, #0
 8023668:	d002      	beq.n	8023670 <_reclaim_reent+0x4c>
 802366a:	0020      	movs	r0, r4
 802366c:	f000 f890 	bl	8023790 <_free_r>
 8023670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023672:	2900      	cmp	r1, #0
 8023674:	d002      	beq.n	802367c <_reclaim_reent+0x58>
 8023676:	0020      	movs	r0, r4
 8023678:	f000 f88a 	bl	8023790 <_free_r>
 802367c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802367e:	2900      	cmp	r1, #0
 8023680:	d002      	beq.n	8023688 <_reclaim_reent+0x64>
 8023682:	0020      	movs	r0, r4
 8023684:	f000 f884 	bl	8023790 <_free_r>
 8023688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802368a:	2900      	cmp	r1, #0
 802368c:	d002      	beq.n	8023694 <_reclaim_reent+0x70>
 802368e:	0020      	movs	r0, r4
 8023690:	f000 f87e 	bl	8023790 <_free_r>
 8023694:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8023696:	2900      	cmp	r1, #0
 8023698:	d002      	beq.n	80236a0 <_reclaim_reent+0x7c>
 802369a:	0020      	movs	r0, r4
 802369c:	f000 f878 	bl	8023790 <_free_r>
 80236a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80236a2:	2900      	cmp	r1, #0
 80236a4:	d002      	beq.n	80236ac <_reclaim_reent+0x88>
 80236a6:	0020      	movs	r0, r4
 80236a8:	f000 f872 	bl	8023790 <_free_r>
 80236ac:	6a23      	ldr	r3, [r4, #32]
 80236ae:	2b00      	cmp	r3, #0
 80236b0:	d001      	beq.n	80236b6 <_reclaim_reent+0x92>
 80236b2:	0020      	movs	r0, r4
 80236b4:	4798      	blx	r3
 80236b6:	bd70      	pop	{r4, r5, r6, pc}
 80236b8:	5949      	ldr	r1, [r1, r5]
 80236ba:	2900      	cmp	r1, #0
 80236bc:	d108      	bne.n	80236d0 <_reclaim_reent+0xac>
 80236be:	3504      	adds	r5, #4
 80236c0:	69e3      	ldr	r3, [r4, #28]
 80236c2:	68d9      	ldr	r1, [r3, #12]
 80236c4:	2d80      	cmp	r5, #128	; 0x80
 80236c6:	d1f7      	bne.n	80236b8 <_reclaim_reent+0x94>
 80236c8:	0020      	movs	r0, r4
 80236ca:	f000 f861 	bl	8023790 <_free_r>
 80236ce:	e7b6      	b.n	802363e <_reclaim_reent+0x1a>
 80236d0:	680e      	ldr	r6, [r1, #0]
 80236d2:	0020      	movs	r0, r4
 80236d4:	f000 f85c 	bl	8023790 <_free_r>
 80236d8:	0031      	movs	r1, r6
 80236da:	e7ee      	b.n	80236ba <_reclaim_reent+0x96>
 80236dc:	20000254 	.word	0x20000254

080236e0 <_sbrk_r>:
 80236e0:	2300      	movs	r3, #0
 80236e2:	b570      	push	{r4, r5, r6, lr}
 80236e4:	4d06      	ldr	r5, [pc, #24]	; (8023700 <_sbrk_r+0x20>)
 80236e6:	0004      	movs	r4, r0
 80236e8:	0008      	movs	r0, r1
 80236ea:	602b      	str	r3, [r5, #0]
 80236ec:	f7e5 fdae 	bl	800924c <_sbrk>
 80236f0:	1c43      	adds	r3, r0, #1
 80236f2:	d103      	bne.n	80236fc <_sbrk_r+0x1c>
 80236f4:	682b      	ldr	r3, [r5, #0]
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	d000      	beq.n	80236fc <_sbrk_r+0x1c>
 80236fa:	6023      	str	r3, [r4, #0]
 80236fc:	bd70      	pop	{r4, r5, r6, pc}
 80236fe:	46c0      	nop			; (mov r8, r8)
 8023700:	2000517c 	.word	0x2000517c

08023704 <__errno>:
 8023704:	4b01      	ldr	r3, [pc, #4]	; (802370c <__errno+0x8>)
 8023706:	6818      	ldr	r0, [r3, #0]
 8023708:	4770      	bx	lr
 802370a:	46c0      	nop			; (mov r8, r8)
 802370c:	20000254 	.word	0x20000254

08023710 <__libc_init_array>:
 8023710:	b570      	push	{r4, r5, r6, lr}
 8023712:	2600      	movs	r6, #0
 8023714:	4c0c      	ldr	r4, [pc, #48]	; (8023748 <__libc_init_array+0x38>)
 8023716:	4d0d      	ldr	r5, [pc, #52]	; (802374c <__libc_init_array+0x3c>)
 8023718:	1b64      	subs	r4, r4, r5
 802371a:	10a4      	asrs	r4, r4, #2
 802371c:	42a6      	cmp	r6, r4
 802371e:	d109      	bne.n	8023734 <__libc_init_array+0x24>
 8023720:	2600      	movs	r6, #0
 8023722:	f000 fbb7 	bl	8023e94 <_init>
 8023726:	4c0a      	ldr	r4, [pc, #40]	; (8023750 <__libc_init_array+0x40>)
 8023728:	4d0a      	ldr	r5, [pc, #40]	; (8023754 <__libc_init_array+0x44>)
 802372a:	1b64      	subs	r4, r4, r5
 802372c:	10a4      	asrs	r4, r4, #2
 802372e:	42a6      	cmp	r6, r4
 8023730:	d105      	bne.n	802373e <__libc_init_array+0x2e>
 8023732:	bd70      	pop	{r4, r5, r6, pc}
 8023734:	00b3      	lsls	r3, r6, #2
 8023736:	58eb      	ldr	r3, [r5, r3]
 8023738:	4798      	blx	r3
 802373a:	3601      	adds	r6, #1
 802373c:	e7ee      	b.n	802371c <__libc_init_array+0xc>
 802373e:	00b3      	lsls	r3, r6, #2
 8023740:	58eb      	ldr	r3, [r5, r3]
 8023742:	4798      	blx	r3
 8023744:	3601      	adds	r6, #1
 8023746:	e7f2      	b.n	802372e <__libc_init_array+0x1e>
 8023748:	08025918 	.word	0x08025918
 802374c:	08025918 	.word	0x08025918
 8023750:	0802591c 	.word	0x0802591c
 8023754:	08025918 	.word	0x08025918

08023758 <__retarget_lock_acquire_recursive>:
 8023758:	4770      	bx	lr

0802375a <__retarget_lock_release_recursive>:
 802375a:	4770      	bx	lr

0802375c <__aeabi_memcpy>:
 802375c:	b510      	push	{r4, lr}
 802375e:	f000 f80d 	bl	802377c <memcpy>
 8023762:	bd10      	pop	{r4, pc}

08023764 <__aeabi_memset>:
 8023764:	000b      	movs	r3, r1
 8023766:	b510      	push	{r4, lr}
 8023768:	0011      	movs	r1, r2
 802376a:	001a      	movs	r2, r3
 802376c:	f7ff ff52 	bl	8023614 <memset>
 8023770:	bd10      	pop	{r4, pc}

08023772 <__aeabi_memclr>:
 8023772:	b510      	push	{r4, lr}
 8023774:	2200      	movs	r2, #0
 8023776:	f7ff fff5 	bl	8023764 <__aeabi_memset>
 802377a:	bd10      	pop	{r4, pc}

0802377c <memcpy>:
 802377c:	2300      	movs	r3, #0
 802377e:	b510      	push	{r4, lr}
 8023780:	429a      	cmp	r2, r3
 8023782:	d100      	bne.n	8023786 <memcpy+0xa>
 8023784:	bd10      	pop	{r4, pc}
 8023786:	5ccc      	ldrb	r4, [r1, r3]
 8023788:	54c4      	strb	r4, [r0, r3]
 802378a:	3301      	adds	r3, #1
 802378c:	e7f8      	b.n	8023780 <memcpy+0x4>
	...

08023790 <_free_r>:
 8023790:	b570      	push	{r4, r5, r6, lr}
 8023792:	0005      	movs	r5, r0
 8023794:	2900      	cmp	r1, #0
 8023796:	d010      	beq.n	80237ba <_free_r+0x2a>
 8023798:	1f0c      	subs	r4, r1, #4
 802379a:	6823      	ldr	r3, [r4, #0]
 802379c:	2b00      	cmp	r3, #0
 802379e:	da00      	bge.n	80237a2 <_free_r+0x12>
 80237a0:	18e4      	adds	r4, r4, r3
 80237a2:	0028      	movs	r0, r5
 80237a4:	f7ff fed2 	bl	802354c <__malloc_lock>
 80237a8:	4a1d      	ldr	r2, [pc, #116]	; (8023820 <_free_r+0x90>)
 80237aa:	6813      	ldr	r3, [r2, #0]
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d105      	bne.n	80237bc <_free_r+0x2c>
 80237b0:	6063      	str	r3, [r4, #4]
 80237b2:	6014      	str	r4, [r2, #0]
 80237b4:	0028      	movs	r0, r5
 80237b6:	f7ff fed1 	bl	802355c <__malloc_unlock>
 80237ba:	bd70      	pop	{r4, r5, r6, pc}
 80237bc:	42a3      	cmp	r3, r4
 80237be:	d908      	bls.n	80237d2 <_free_r+0x42>
 80237c0:	6820      	ldr	r0, [r4, #0]
 80237c2:	1821      	adds	r1, r4, r0
 80237c4:	428b      	cmp	r3, r1
 80237c6:	d1f3      	bne.n	80237b0 <_free_r+0x20>
 80237c8:	6819      	ldr	r1, [r3, #0]
 80237ca:	685b      	ldr	r3, [r3, #4]
 80237cc:	1809      	adds	r1, r1, r0
 80237ce:	6021      	str	r1, [r4, #0]
 80237d0:	e7ee      	b.n	80237b0 <_free_r+0x20>
 80237d2:	001a      	movs	r2, r3
 80237d4:	685b      	ldr	r3, [r3, #4]
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d001      	beq.n	80237de <_free_r+0x4e>
 80237da:	42a3      	cmp	r3, r4
 80237dc:	d9f9      	bls.n	80237d2 <_free_r+0x42>
 80237de:	6811      	ldr	r1, [r2, #0]
 80237e0:	1850      	adds	r0, r2, r1
 80237e2:	42a0      	cmp	r0, r4
 80237e4:	d10b      	bne.n	80237fe <_free_r+0x6e>
 80237e6:	6820      	ldr	r0, [r4, #0]
 80237e8:	1809      	adds	r1, r1, r0
 80237ea:	1850      	adds	r0, r2, r1
 80237ec:	6011      	str	r1, [r2, #0]
 80237ee:	4283      	cmp	r3, r0
 80237f0:	d1e0      	bne.n	80237b4 <_free_r+0x24>
 80237f2:	6818      	ldr	r0, [r3, #0]
 80237f4:	685b      	ldr	r3, [r3, #4]
 80237f6:	1841      	adds	r1, r0, r1
 80237f8:	6011      	str	r1, [r2, #0]
 80237fa:	6053      	str	r3, [r2, #4]
 80237fc:	e7da      	b.n	80237b4 <_free_r+0x24>
 80237fe:	42a0      	cmp	r0, r4
 8023800:	d902      	bls.n	8023808 <_free_r+0x78>
 8023802:	230c      	movs	r3, #12
 8023804:	602b      	str	r3, [r5, #0]
 8023806:	e7d5      	b.n	80237b4 <_free_r+0x24>
 8023808:	6820      	ldr	r0, [r4, #0]
 802380a:	1821      	adds	r1, r4, r0
 802380c:	428b      	cmp	r3, r1
 802380e:	d103      	bne.n	8023818 <_free_r+0x88>
 8023810:	6819      	ldr	r1, [r3, #0]
 8023812:	685b      	ldr	r3, [r3, #4]
 8023814:	1809      	adds	r1, r1, r0
 8023816:	6021      	str	r1, [r4, #0]
 8023818:	6063      	str	r3, [r4, #4]
 802381a:	6054      	str	r4, [r2, #4]
 802381c:	e7ca      	b.n	80237b4 <_free_r+0x24>
 802381e:	46c0      	nop			; (mov r8, r8)
 8023820:	2000503c 	.word	0x2000503c

08023824 <__ssputs_r>:
 8023824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023826:	b085      	sub	sp, #20
 8023828:	9301      	str	r3, [sp, #4]
 802382a:	9203      	str	r2, [sp, #12]
 802382c:	688e      	ldr	r6, [r1, #8]
 802382e:	9a01      	ldr	r2, [sp, #4]
 8023830:	0007      	movs	r7, r0
 8023832:	000c      	movs	r4, r1
 8023834:	680b      	ldr	r3, [r1, #0]
 8023836:	4296      	cmp	r6, r2
 8023838:	d831      	bhi.n	802389e <__ssputs_r+0x7a>
 802383a:	898a      	ldrh	r2, [r1, #12]
 802383c:	2190      	movs	r1, #144	; 0x90
 802383e:	00c9      	lsls	r1, r1, #3
 8023840:	420a      	tst	r2, r1
 8023842:	d029      	beq.n	8023898 <__ssputs_r+0x74>
 8023844:	2003      	movs	r0, #3
 8023846:	6921      	ldr	r1, [r4, #16]
 8023848:	1a5b      	subs	r3, r3, r1
 802384a:	9302      	str	r3, [sp, #8]
 802384c:	6963      	ldr	r3, [r4, #20]
 802384e:	4343      	muls	r3, r0
 8023850:	0fdd      	lsrs	r5, r3, #31
 8023852:	18ed      	adds	r5, r5, r3
 8023854:	9b01      	ldr	r3, [sp, #4]
 8023856:	9802      	ldr	r0, [sp, #8]
 8023858:	3301      	adds	r3, #1
 802385a:	181b      	adds	r3, r3, r0
 802385c:	106d      	asrs	r5, r5, #1
 802385e:	42ab      	cmp	r3, r5
 8023860:	d900      	bls.n	8023864 <__ssputs_r+0x40>
 8023862:	001d      	movs	r5, r3
 8023864:	0552      	lsls	r2, r2, #21
 8023866:	d529      	bpl.n	80238bc <__ssputs_r+0x98>
 8023868:	0029      	movs	r1, r5
 802386a:	0038      	movs	r0, r7
 802386c:	f7ff fdec 	bl	8023448 <_malloc_r>
 8023870:	1e06      	subs	r6, r0, #0
 8023872:	d02d      	beq.n	80238d0 <__ssputs_r+0xac>
 8023874:	9a02      	ldr	r2, [sp, #8]
 8023876:	6921      	ldr	r1, [r4, #16]
 8023878:	f7ff ff80 	bl	802377c <memcpy>
 802387c:	89a2      	ldrh	r2, [r4, #12]
 802387e:	4b19      	ldr	r3, [pc, #100]	; (80238e4 <__ssputs_r+0xc0>)
 8023880:	401a      	ands	r2, r3
 8023882:	2380      	movs	r3, #128	; 0x80
 8023884:	4313      	orrs	r3, r2
 8023886:	81a3      	strh	r3, [r4, #12]
 8023888:	9b02      	ldr	r3, [sp, #8]
 802388a:	6126      	str	r6, [r4, #16]
 802388c:	18f6      	adds	r6, r6, r3
 802388e:	6026      	str	r6, [r4, #0]
 8023890:	6165      	str	r5, [r4, #20]
 8023892:	9e01      	ldr	r6, [sp, #4]
 8023894:	1aed      	subs	r5, r5, r3
 8023896:	60a5      	str	r5, [r4, #8]
 8023898:	9b01      	ldr	r3, [sp, #4]
 802389a:	429e      	cmp	r6, r3
 802389c:	d900      	bls.n	80238a0 <__ssputs_r+0x7c>
 802389e:	9e01      	ldr	r6, [sp, #4]
 80238a0:	0032      	movs	r2, r6
 80238a2:	9903      	ldr	r1, [sp, #12]
 80238a4:	6820      	ldr	r0, [r4, #0]
 80238a6:	f000 fa9f 	bl	8023de8 <memmove>
 80238aa:	2000      	movs	r0, #0
 80238ac:	68a3      	ldr	r3, [r4, #8]
 80238ae:	1b9b      	subs	r3, r3, r6
 80238b0:	60a3      	str	r3, [r4, #8]
 80238b2:	6823      	ldr	r3, [r4, #0]
 80238b4:	199b      	adds	r3, r3, r6
 80238b6:	6023      	str	r3, [r4, #0]
 80238b8:	b005      	add	sp, #20
 80238ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80238bc:	002a      	movs	r2, r5
 80238be:	0038      	movs	r0, r7
 80238c0:	f000 fab0 	bl	8023e24 <_realloc_r>
 80238c4:	1e06      	subs	r6, r0, #0
 80238c6:	d1df      	bne.n	8023888 <__ssputs_r+0x64>
 80238c8:	0038      	movs	r0, r7
 80238ca:	6921      	ldr	r1, [r4, #16]
 80238cc:	f7ff ff60 	bl	8023790 <_free_r>
 80238d0:	230c      	movs	r3, #12
 80238d2:	2001      	movs	r0, #1
 80238d4:	603b      	str	r3, [r7, #0]
 80238d6:	89a2      	ldrh	r2, [r4, #12]
 80238d8:	3334      	adds	r3, #52	; 0x34
 80238da:	4313      	orrs	r3, r2
 80238dc:	81a3      	strh	r3, [r4, #12]
 80238de:	4240      	negs	r0, r0
 80238e0:	e7ea      	b.n	80238b8 <__ssputs_r+0x94>
 80238e2:	46c0      	nop			; (mov r8, r8)
 80238e4:	fffffb7f 	.word	0xfffffb7f

080238e8 <_svfiprintf_r>:
 80238e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238ea:	b0a1      	sub	sp, #132	; 0x84
 80238ec:	9003      	str	r0, [sp, #12]
 80238ee:	001d      	movs	r5, r3
 80238f0:	898b      	ldrh	r3, [r1, #12]
 80238f2:	000f      	movs	r7, r1
 80238f4:	0016      	movs	r6, r2
 80238f6:	061b      	lsls	r3, r3, #24
 80238f8:	d511      	bpl.n	802391e <_svfiprintf_r+0x36>
 80238fa:	690b      	ldr	r3, [r1, #16]
 80238fc:	2b00      	cmp	r3, #0
 80238fe:	d10e      	bne.n	802391e <_svfiprintf_r+0x36>
 8023900:	2140      	movs	r1, #64	; 0x40
 8023902:	f7ff fda1 	bl	8023448 <_malloc_r>
 8023906:	6038      	str	r0, [r7, #0]
 8023908:	6138      	str	r0, [r7, #16]
 802390a:	2800      	cmp	r0, #0
 802390c:	d105      	bne.n	802391a <_svfiprintf_r+0x32>
 802390e:	230c      	movs	r3, #12
 8023910:	9a03      	ldr	r2, [sp, #12]
 8023912:	3801      	subs	r0, #1
 8023914:	6013      	str	r3, [r2, #0]
 8023916:	b021      	add	sp, #132	; 0x84
 8023918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802391a:	2340      	movs	r3, #64	; 0x40
 802391c:	617b      	str	r3, [r7, #20]
 802391e:	2300      	movs	r3, #0
 8023920:	ac08      	add	r4, sp, #32
 8023922:	6163      	str	r3, [r4, #20]
 8023924:	3320      	adds	r3, #32
 8023926:	7663      	strb	r3, [r4, #25]
 8023928:	3310      	adds	r3, #16
 802392a:	76a3      	strb	r3, [r4, #26]
 802392c:	9507      	str	r5, [sp, #28]
 802392e:	0035      	movs	r5, r6
 8023930:	782b      	ldrb	r3, [r5, #0]
 8023932:	2b00      	cmp	r3, #0
 8023934:	d001      	beq.n	802393a <_svfiprintf_r+0x52>
 8023936:	2b25      	cmp	r3, #37	; 0x25
 8023938:	d148      	bne.n	80239cc <_svfiprintf_r+0xe4>
 802393a:	1bab      	subs	r3, r5, r6
 802393c:	9305      	str	r3, [sp, #20]
 802393e:	42b5      	cmp	r5, r6
 8023940:	d00b      	beq.n	802395a <_svfiprintf_r+0x72>
 8023942:	0032      	movs	r2, r6
 8023944:	0039      	movs	r1, r7
 8023946:	9803      	ldr	r0, [sp, #12]
 8023948:	f7ff ff6c 	bl	8023824 <__ssputs_r>
 802394c:	3001      	adds	r0, #1
 802394e:	d100      	bne.n	8023952 <_svfiprintf_r+0x6a>
 8023950:	e0af      	b.n	8023ab2 <_svfiprintf_r+0x1ca>
 8023952:	6963      	ldr	r3, [r4, #20]
 8023954:	9a05      	ldr	r2, [sp, #20]
 8023956:	189b      	adds	r3, r3, r2
 8023958:	6163      	str	r3, [r4, #20]
 802395a:	782b      	ldrb	r3, [r5, #0]
 802395c:	2b00      	cmp	r3, #0
 802395e:	d100      	bne.n	8023962 <_svfiprintf_r+0x7a>
 8023960:	e0a7      	b.n	8023ab2 <_svfiprintf_r+0x1ca>
 8023962:	2201      	movs	r2, #1
 8023964:	2300      	movs	r3, #0
 8023966:	4252      	negs	r2, r2
 8023968:	6062      	str	r2, [r4, #4]
 802396a:	a904      	add	r1, sp, #16
 802396c:	3254      	adds	r2, #84	; 0x54
 802396e:	1852      	adds	r2, r2, r1
 8023970:	1c6e      	adds	r6, r5, #1
 8023972:	6023      	str	r3, [r4, #0]
 8023974:	60e3      	str	r3, [r4, #12]
 8023976:	60a3      	str	r3, [r4, #8]
 8023978:	7013      	strb	r3, [r2, #0]
 802397a:	65a3      	str	r3, [r4, #88]	; 0x58
 802397c:	4b55      	ldr	r3, [pc, #340]	; (8023ad4 <_svfiprintf_r+0x1ec>)
 802397e:	2205      	movs	r2, #5
 8023980:	0018      	movs	r0, r3
 8023982:	7831      	ldrb	r1, [r6, #0]
 8023984:	9305      	str	r3, [sp, #20]
 8023986:	f000 fa42 	bl	8023e0e <memchr>
 802398a:	1c75      	adds	r5, r6, #1
 802398c:	2800      	cmp	r0, #0
 802398e:	d11f      	bne.n	80239d0 <_svfiprintf_r+0xe8>
 8023990:	6822      	ldr	r2, [r4, #0]
 8023992:	06d3      	lsls	r3, r2, #27
 8023994:	d504      	bpl.n	80239a0 <_svfiprintf_r+0xb8>
 8023996:	2353      	movs	r3, #83	; 0x53
 8023998:	a904      	add	r1, sp, #16
 802399a:	185b      	adds	r3, r3, r1
 802399c:	2120      	movs	r1, #32
 802399e:	7019      	strb	r1, [r3, #0]
 80239a0:	0713      	lsls	r3, r2, #28
 80239a2:	d504      	bpl.n	80239ae <_svfiprintf_r+0xc6>
 80239a4:	2353      	movs	r3, #83	; 0x53
 80239a6:	a904      	add	r1, sp, #16
 80239a8:	185b      	adds	r3, r3, r1
 80239aa:	212b      	movs	r1, #43	; 0x2b
 80239ac:	7019      	strb	r1, [r3, #0]
 80239ae:	7833      	ldrb	r3, [r6, #0]
 80239b0:	2b2a      	cmp	r3, #42	; 0x2a
 80239b2:	d016      	beq.n	80239e2 <_svfiprintf_r+0xfa>
 80239b4:	0035      	movs	r5, r6
 80239b6:	2100      	movs	r1, #0
 80239b8:	200a      	movs	r0, #10
 80239ba:	68e3      	ldr	r3, [r4, #12]
 80239bc:	782a      	ldrb	r2, [r5, #0]
 80239be:	1c6e      	adds	r6, r5, #1
 80239c0:	3a30      	subs	r2, #48	; 0x30
 80239c2:	2a09      	cmp	r2, #9
 80239c4:	d94e      	bls.n	8023a64 <_svfiprintf_r+0x17c>
 80239c6:	2900      	cmp	r1, #0
 80239c8:	d111      	bne.n	80239ee <_svfiprintf_r+0x106>
 80239ca:	e017      	b.n	80239fc <_svfiprintf_r+0x114>
 80239cc:	3501      	adds	r5, #1
 80239ce:	e7af      	b.n	8023930 <_svfiprintf_r+0x48>
 80239d0:	9b05      	ldr	r3, [sp, #20]
 80239d2:	6822      	ldr	r2, [r4, #0]
 80239d4:	1ac0      	subs	r0, r0, r3
 80239d6:	2301      	movs	r3, #1
 80239d8:	4083      	lsls	r3, r0
 80239da:	4313      	orrs	r3, r2
 80239dc:	002e      	movs	r6, r5
 80239de:	6023      	str	r3, [r4, #0]
 80239e0:	e7cc      	b.n	802397c <_svfiprintf_r+0x94>
 80239e2:	9b07      	ldr	r3, [sp, #28]
 80239e4:	1d19      	adds	r1, r3, #4
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	9107      	str	r1, [sp, #28]
 80239ea:	2b00      	cmp	r3, #0
 80239ec:	db01      	blt.n	80239f2 <_svfiprintf_r+0x10a>
 80239ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80239f0:	e004      	b.n	80239fc <_svfiprintf_r+0x114>
 80239f2:	425b      	negs	r3, r3
 80239f4:	60e3      	str	r3, [r4, #12]
 80239f6:	2302      	movs	r3, #2
 80239f8:	4313      	orrs	r3, r2
 80239fa:	6023      	str	r3, [r4, #0]
 80239fc:	782b      	ldrb	r3, [r5, #0]
 80239fe:	2b2e      	cmp	r3, #46	; 0x2e
 8023a00:	d10a      	bne.n	8023a18 <_svfiprintf_r+0x130>
 8023a02:	786b      	ldrb	r3, [r5, #1]
 8023a04:	2b2a      	cmp	r3, #42	; 0x2a
 8023a06:	d135      	bne.n	8023a74 <_svfiprintf_r+0x18c>
 8023a08:	9b07      	ldr	r3, [sp, #28]
 8023a0a:	3502      	adds	r5, #2
 8023a0c:	1d1a      	adds	r2, r3, #4
 8023a0e:	681b      	ldr	r3, [r3, #0]
 8023a10:	9207      	str	r2, [sp, #28]
 8023a12:	2b00      	cmp	r3, #0
 8023a14:	db2b      	blt.n	8023a6e <_svfiprintf_r+0x186>
 8023a16:	9309      	str	r3, [sp, #36]	; 0x24
 8023a18:	4e2f      	ldr	r6, [pc, #188]	; (8023ad8 <_svfiprintf_r+0x1f0>)
 8023a1a:	2203      	movs	r2, #3
 8023a1c:	0030      	movs	r0, r6
 8023a1e:	7829      	ldrb	r1, [r5, #0]
 8023a20:	f000 f9f5 	bl	8023e0e <memchr>
 8023a24:	2800      	cmp	r0, #0
 8023a26:	d006      	beq.n	8023a36 <_svfiprintf_r+0x14e>
 8023a28:	2340      	movs	r3, #64	; 0x40
 8023a2a:	1b80      	subs	r0, r0, r6
 8023a2c:	4083      	lsls	r3, r0
 8023a2e:	6822      	ldr	r2, [r4, #0]
 8023a30:	3501      	adds	r5, #1
 8023a32:	4313      	orrs	r3, r2
 8023a34:	6023      	str	r3, [r4, #0]
 8023a36:	7829      	ldrb	r1, [r5, #0]
 8023a38:	2206      	movs	r2, #6
 8023a3a:	4828      	ldr	r0, [pc, #160]	; (8023adc <_svfiprintf_r+0x1f4>)
 8023a3c:	1c6e      	adds	r6, r5, #1
 8023a3e:	7621      	strb	r1, [r4, #24]
 8023a40:	f000 f9e5 	bl	8023e0e <memchr>
 8023a44:	2800      	cmp	r0, #0
 8023a46:	d03c      	beq.n	8023ac2 <_svfiprintf_r+0x1da>
 8023a48:	4b25      	ldr	r3, [pc, #148]	; (8023ae0 <_svfiprintf_r+0x1f8>)
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d125      	bne.n	8023a9a <_svfiprintf_r+0x1b2>
 8023a4e:	2207      	movs	r2, #7
 8023a50:	9b07      	ldr	r3, [sp, #28]
 8023a52:	3307      	adds	r3, #7
 8023a54:	4393      	bics	r3, r2
 8023a56:	3308      	adds	r3, #8
 8023a58:	9307      	str	r3, [sp, #28]
 8023a5a:	6963      	ldr	r3, [r4, #20]
 8023a5c:	9a04      	ldr	r2, [sp, #16]
 8023a5e:	189b      	adds	r3, r3, r2
 8023a60:	6163      	str	r3, [r4, #20]
 8023a62:	e764      	b.n	802392e <_svfiprintf_r+0x46>
 8023a64:	4343      	muls	r3, r0
 8023a66:	0035      	movs	r5, r6
 8023a68:	2101      	movs	r1, #1
 8023a6a:	189b      	adds	r3, r3, r2
 8023a6c:	e7a6      	b.n	80239bc <_svfiprintf_r+0xd4>
 8023a6e:	2301      	movs	r3, #1
 8023a70:	425b      	negs	r3, r3
 8023a72:	e7d0      	b.n	8023a16 <_svfiprintf_r+0x12e>
 8023a74:	2300      	movs	r3, #0
 8023a76:	200a      	movs	r0, #10
 8023a78:	001a      	movs	r2, r3
 8023a7a:	3501      	adds	r5, #1
 8023a7c:	6063      	str	r3, [r4, #4]
 8023a7e:	7829      	ldrb	r1, [r5, #0]
 8023a80:	1c6e      	adds	r6, r5, #1
 8023a82:	3930      	subs	r1, #48	; 0x30
 8023a84:	2909      	cmp	r1, #9
 8023a86:	d903      	bls.n	8023a90 <_svfiprintf_r+0x1a8>
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d0c5      	beq.n	8023a18 <_svfiprintf_r+0x130>
 8023a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8023a8e:	e7c3      	b.n	8023a18 <_svfiprintf_r+0x130>
 8023a90:	4342      	muls	r2, r0
 8023a92:	0035      	movs	r5, r6
 8023a94:	2301      	movs	r3, #1
 8023a96:	1852      	adds	r2, r2, r1
 8023a98:	e7f1      	b.n	8023a7e <_svfiprintf_r+0x196>
 8023a9a:	aa07      	add	r2, sp, #28
 8023a9c:	9200      	str	r2, [sp, #0]
 8023a9e:	0021      	movs	r1, r4
 8023aa0:	003a      	movs	r2, r7
 8023aa2:	4b10      	ldr	r3, [pc, #64]	; (8023ae4 <_svfiprintf_r+0x1fc>)
 8023aa4:	9803      	ldr	r0, [sp, #12]
 8023aa6:	e000      	b.n	8023aaa <_svfiprintf_r+0x1c2>
 8023aa8:	bf00      	nop
 8023aaa:	9004      	str	r0, [sp, #16]
 8023aac:	9b04      	ldr	r3, [sp, #16]
 8023aae:	3301      	adds	r3, #1
 8023ab0:	d1d3      	bne.n	8023a5a <_svfiprintf_r+0x172>
 8023ab2:	89bb      	ldrh	r3, [r7, #12]
 8023ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ab6:	065b      	lsls	r3, r3, #25
 8023ab8:	d400      	bmi.n	8023abc <_svfiprintf_r+0x1d4>
 8023aba:	e72c      	b.n	8023916 <_svfiprintf_r+0x2e>
 8023abc:	2001      	movs	r0, #1
 8023abe:	4240      	negs	r0, r0
 8023ac0:	e729      	b.n	8023916 <_svfiprintf_r+0x2e>
 8023ac2:	aa07      	add	r2, sp, #28
 8023ac4:	9200      	str	r2, [sp, #0]
 8023ac6:	0021      	movs	r1, r4
 8023ac8:	003a      	movs	r2, r7
 8023aca:	4b06      	ldr	r3, [pc, #24]	; (8023ae4 <_svfiprintf_r+0x1fc>)
 8023acc:	9803      	ldr	r0, [sp, #12]
 8023ace:	f000 f87b 	bl	8023bc8 <_printf_i>
 8023ad2:	e7ea      	b.n	8023aaa <_svfiprintf_r+0x1c2>
 8023ad4:	080258db 	.word	0x080258db
 8023ad8:	080258e1 	.word	0x080258e1
 8023adc:	080258e5 	.word	0x080258e5
 8023ae0:	00000000 	.word	0x00000000
 8023ae4:	08023825 	.word	0x08023825

08023ae8 <_printf_common>:
 8023ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023aea:	0016      	movs	r6, r2
 8023aec:	9301      	str	r3, [sp, #4]
 8023aee:	688a      	ldr	r2, [r1, #8]
 8023af0:	690b      	ldr	r3, [r1, #16]
 8023af2:	000c      	movs	r4, r1
 8023af4:	9000      	str	r0, [sp, #0]
 8023af6:	4293      	cmp	r3, r2
 8023af8:	da00      	bge.n	8023afc <_printf_common+0x14>
 8023afa:	0013      	movs	r3, r2
 8023afc:	0022      	movs	r2, r4
 8023afe:	6033      	str	r3, [r6, #0]
 8023b00:	3243      	adds	r2, #67	; 0x43
 8023b02:	7812      	ldrb	r2, [r2, #0]
 8023b04:	2a00      	cmp	r2, #0
 8023b06:	d001      	beq.n	8023b0c <_printf_common+0x24>
 8023b08:	3301      	adds	r3, #1
 8023b0a:	6033      	str	r3, [r6, #0]
 8023b0c:	6823      	ldr	r3, [r4, #0]
 8023b0e:	069b      	lsls	r3, r3, #26
 8023b10:	d502      	bpl.n	8023b18 <_printf_common+0x30>
 8023b12:	6833      	ldr	r3, [r6, #0]
 8023b14:	3302      	adds	r3, #2
 8023b16:	6033      	str	r3, [r6, #0]
 8023b18:	6822      	ldr	r2, [r4, #0]
 8023b1a:	2306      	movs	r3, #6
 8023b1c:	0015      	movs	r5, r2
 8023b1e:	401d      	ands	r5, r3
 8023b20:	421a      	tst	r2, r3
 8023b22:	d027      	beq.n	8023b74 <_printf_common+0x8c>
 8023b24:	0023      	movs	r3, r4
 8023b26:	3343      	adds	r3, #67	; 0x43
 8023b28:	781b      	ldrb	r3, [r3, #0]
 8023b2a:	1e5a      	subs	r2, r3, #1
 8023b2c:	4193      	sbcs	r3, r2
 8023b2e:	6822      	ldr	r2, [r4, #0]
 8023b30:	0692      	lsls	r2, r2, #26
 8023b32:	d430      	bmi.n	8023b96 <_printf_common+0xae>
 8023b34:	0022      	movs	r2, r4
 8023b36:	9901      	ldr	r1, [sp, #4]
 8023b38:	9800      	ldr	r0, [sp, #0]
 8023b3a:	9d08      	ldr	r5, [sp, #32]
 8023b3c:	3243      	adds	r2, #67	; 0x43
 8023b3e:	47a8      	blx	r5
 8023b40:	3001      	adds	r0, #1
 8023b42:	d025      	beq.n	8023b90 <_printf_common+0xa8>
 8023b44:	2206      	movs	r2, #6
 8023b46:	6823      	ldr	r3, [r4, #0]
 8023b48:	2500      	movs	r5, #0
 8023b4a:	4013      	ands	r3, r2
 8023b4c:	2b04      	cmp	r3, #4
 8023b4e:	d105      	bne.n	8023b5c <_printf_common+0x74>
 8023b50:	6833      	ldr	r3, [r6, #0]
 8023b52:	68e5      	ldr	r5, [r4, #12]
 8023b54:	1aed      	subs	r5, r5, r3
 8023b56:	43eb      	mvns	r3, r5
 8023b58:	17db      	asrs	r3, r3, #31
 8023b5a:	401d      	ands	r5, r3
 8023b5c:	68a3      	ldr	r3, [r4, #8]
 8023b5e:	6922      	ldr	r2, [r4, #16]
 8023b60:	4293      	cmp	r3, r2
 8023b62:	dd01      	ble.n	8023b68 <_printf_common+0x80>
 8023b64:	1a9b      	subs	r3, r3, r2
 8023b66:	18ed      	adds	r5, r5, r3
 8023b68:	2600      	movs	r6, #0
 8023b6a:	42b5      	cmp	r5, r6
 8023b6c:	d120      	bne.n	8023bb0 <_printf_common+0xc8>
 8023b6e:	2000      	movs	r0, #0
 8023b70:	e010      	b.n	8023b94 <_printf_common+0xac>
 8023b72:	3501      	adds	r5, #1
 8023b74:	68e3      	ldr	r3, [r4, #12]
 8023b76:	6832      	ldr	r2, [r6, #0]
 8023b78:	1a9b      	subs	r3, r3, r2
 8023b7a:	42ab      	cmp	r3, r5
 8023b7c:	ddd2      	ble.n	8023b24 <_printf_common+0x3c>
 8023b7e:	0022      	movs	r2, r4
 8023b80:	2301      	movs	r3, #1
 8023b82:	9901      	ldr	r1, [sp, #4]
 8023b84:	9800      	ldr	r0, [sp, #0]
 8023b86:	9f08      	ldr	r7, [sp, #32]
 8023b88:	3219      	adds	r2, #25
 8023b8a:	47b8      	blx	r7
 8023b8c:	3001      	adds	r0, #1
 8023b8e:	d1f0      	bne.n	8023b72 <_printf_common+0x8a>
 8023b90:	2001      	movs	r0, #1
 8023b92:	4240      	negs	r0, r0
 8023b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023b96:	2030      	movs	r0, #48	; 0x30
 8023b98:	18e1      	adds	r1, r4, r3
 8023b9a:	3143      	adds	r1, #67	; 0x43
 8023b9c:	7008      	strb	r0, [r1, #0]
 8023b9e:	0021      	movs	r1, r4
 8023ba0:	1c5a      	adds	r2, r3, #1
 8023ba2:	3145      	adds	r1, #69	; 0x45
 8023ba4:	7809      	ldrb	r1, [r1, #0]
 8023ba6:	18a2      	adds	r2, r4, r2
 8023ba8:	3243      	adds	r2, #67	; 0x43
 8023baa:	3302      	adds	r3, #2
 8023bac:	7011      	strb	r1, [r2, #0]
 8023bae:	e7c1      	b.n	8023b34 <_printf_common+0x4c>
 8023bb0:	0022      	movs	r2, r4
 8023bb2:	2301      	movs	r3, #1
 8023bb4:	9901      	ldr	r1, [sp, #4]
 8023bb6:	9800      	ldr	r0, [sp, #0]
 8023bb8:	9f08      	ldr	r7, [sp, #32]
 8023bba:	321a      	adds	r2, #26
 8023bbc:	47b8      	blx	r7
 8023bbe:	3001      	adds	r0, #1
 8023bc0:	d0e6      	beq.n	8023b90 <_printf_common+0xa8>
 8023bc2:	3601      	adds	r6, #1
 8023bc4:	e7d1      	b.n	8023b6a <_printf_common+0x82>
	...

08023bc8 <_printf_i>:
 8023bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bca:	b08b      	sub	sp, #44	; 0x2c
 8023bcc:	9206      	str	r2, [sp, #24]
 8023bce:	000a      	movs	r2, r1
 8023bd0:	3243      	adds	r2, #67	; 0x43
 8023bd2:	9307      	str	r3, [sp, #28]
 8023bd4:	9005      	str	r0, [sp, #20]
 8023bd6:	9204      	str	r2, [sp, #16]
 8023bd8:	7e0a      	ldrb	r2, [r1, #24]
 8023bda:	000c      	movs	r4, r1
 8023bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bde:	2a78      	cmp	r2, #120	; 0x78
 8023be0:	d809      	bhi.n	8023bf6 <_printf_i+0x2e>
 8023be2:	2a62      	cmp	r2, #98	; 0x62
 8023be4:	d80b      	bhi.n	8023bfe <_printf_i+0x36>
 8023be6:	2a00      	cmp	r2, #0
 8023be8:	d100      	bne.n	8023bec <_printf_i+0x24>
 8023bea:	e0be      	b.n	8023d6a <_printf_i+0x1a2>
 8023bec:	497c      	ldr	r1, [pc, #496]	; (8023de0 <_printf_i+0x218>)
 8023bee:	9103      	str	r1, [sp, #12]
 8023bf0:	2a58      	cmp	r2, #88	; 0x58
 8023bf2:	d100      	bne.n	8023bf6 <_printf_i+0x2e>
 8023bf4:	e093      	b.n	8023d1e <_printf_i+0x156>
 8023bf6:	0026      	movs	r6, r4
 8023bf8:	3642      	adds	r6, #66	; 0x42
 8023bfa:	7032      	strb	r2, [r6, #0]
 8023bfc:	e022      	b.n	8023c44 <_printf_i+0x7c>
 8023bfe:	0010      	movs	r0, r2
 8023c00:	3863      	subs	r0, #99	; 0x63
 8023c02:	2815      	cmp	r0, #21
 8023c04:	d8f7      	bhi.n	8023bf6 <_printf_i+0x2e>
 8023c06:	f7e2 fae9 	bl	80061dc <__gnu_thumb1_case_shi>
 8023c0a:	0016      	.short	0x0016
 8023c0c:	fff6001f 	.word	0xfff6001f
 8023c10:	fff6fff6 	.word	0xfff6fff6
 8023c14:	001ffff6 	.word	0x001ffff6
 8023c18:	fff6fff6 	.word	0xfff6fff6
 8023c1c:	fff6fff6 	.word	0xfff6fff6
 8023c20:	003600a3 	.word	0x003600a3
 8023c24:	fff60083 	.word	0xfff60083
 8023c28:	00b4fff6 	.word	0x00b4fff6
 8023c2c:	0036fff6 	.word	0x0036fff6
 8023c30:	fff6fff6 	.word	0xfff6fff6
 8023c34:	0087      	.short	0x0087
 8023c36:	0026      	movs	r6, r4
 8023c38:	681a      	ldr	r2, [r3, #0]
 8023c3a:	3642      	adds	r6, #66	; 0x42
 8023c3c:	1d11      	adds	r1, r2, #4
 8023c3e:	6019      	str	r1, [r3, #0]
 8023c40:	6813      	ldr	r3, [r2, #0]
 8023c42:	7033      	strb	r3, [r6, #0]
 8023c44:	2301      	movs	r3, #1
 8023c46:	e0a2      	b.n	8023d8e <_printf_i+0x1c6>
 8023c48:	6818      	ldr	r0, [r3, #0]
 8023c4a:	6809      	ldr	r1, [r1, #0]
 8023c4c:	1d02      	adds	r2, r0, #4
 8023c4e:	060d      	lsls	r5, r1, #24
 8023c50:	d50b      	bpl.n	8023c6a <_printf_i+0xa2>
 8023c52:	6805      	ldr	r5, [r0, #0]
 8023c54:	601a      	str	r2, [r3, #0]
 8023c56:	2d00      	cmp	r5, #0
 8023c58:	da03      	bge.n	8023c62 <_printf_i+0x9a>
 8023c5a:	232d      	movs	r3, #45	; 0x2d
 8023c5c:	9a04      	ldr	r2, [sp, #16]
 8023c5e:	426d      	negs	r5, r5
 8023c60:	7013      	strb	r3, [r2, #0]
 8023c62:	4b5f      	ldr	r3, [pc, #380]	; (8023de0 <_printf_i+0x218>)
 8023c64:	270a      	movs	r7, #10
 8023c66:	9303      	str	r3, [sp, #12]
 8023c68:	e01b      	b.n	8023ca2 <_printf_i+0xda>
 8023c6a:	6805      	ldr	r5, [r0, #0]
 8023c6c:	601a      	str	r2, [r3, #0]
 8023c6e:	0649      	lsls	r1, r1, #25
 8023c70:	d5f1      	bpl.n	8023c56 <_printf_i+0x8e>
 8023c72:	b22d      	sxth	r5, r5
 8023c74:	e7ef      	b.n	8023c56 <_printf_i+0x8e>
 8023c76:	680d      	ldr	r5, [r1, #0]
 8023c78:	6819      	ldr	r1, [r3, #0]
 8023c7a:	1d08      	adds	r0, r1, #4
 8023c7c:	6018      	str	r0, [r3, #0]
 8023c7e:	062e      	lsls	r6, r5, #24
 8023c80:	d501      	bpl.n	8023c86 <_printf_i+0xbe>
 8023c82:	680d      	ldr	r5, [r1, #0]
 8023c84:	e003      	b.n	8023c8e <_printf_i+0xc6>
 8023c86:	066d      	lsls	r5, r5, #25
 8023c88:	d5fb      	bpl.n	8023c82 <_printf_i+0xba>
 8023c8a:	680d      	ldr	r5, [r1, #0]
 8023c8c:	b2ad      	uxth	r5, r5
 8023c8e:	4b54      	ldr	r3, [pc, #336]	; (8023de0 <_printf_i+0x218>)
 8023c90:	2708      	movs	r7, #8
 8023c92:	9303      	str	r3, [sp, #12]
 8023c94:	2a6f      	cmp	r2, #111	; 0x6f
 8023c96:	d000      	beq.n	8023c9a <_printf_i+0xd2>
 8023c98:	3702      	adds	r7, #2
 8023c9a:	0023      	movs	r3, r4
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	3343      	adds	r3, #67	; 0x43
 8023ca0:	701a      	strb	r2, [r3, #0]
 8023ca2:	6863      	ldr	r3, [r4, #4]
 8023ca4:	60a3      	str	r3, [r4, #8]
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	db03      	blt.n	8023cb2 <_printf_i+0xea>
 8023caa:	2104      	movs	r1, #4
 8023cac:	6822      	ldr	r2, [r4, #0]
 8023cae:	438a      	bics	r2, r1
 8023cb0:	6022      	str	r2, [r4, #0]
 8023cb2:	2d00      	cmp	r5, #0
 8023cb4:	d102      	bne.n	8023cbc <_printf_i+0xf4>
 8023cb6:	9e04      	ldr	r6, [sp, #16]
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d00c      	beq.n	8023cd6 <_printf_i+0x10e>
 8023cbc:	9e04      	ldr	r6, [sp, #16]
 8023cbe:	0028      	movs	r0, r5
 8023cc0:	0039      	movs	r1, r7
 8023cc2:	f7e2 fb1b 	bl	80062fc <__aeabi_uidivmod>
 8023cc6:	9b03      	ldr	r3, [sp, #12]
 8023cc8:	3e01      	subs	r6, #1
 8023cca:	5c5b      	ldrb	r3, [r3, r1]
 8023ccc:	7033      	strb	r3, [r6, #0]
 8023cce:	002b      	movs	r3, r5
 8023cd0:	0005      	movs	r5, r0
 8023cd2:	429f      	cmp	r7, r3
 8023cd4:	d9f3      	bls.n	8023cbe <_printf_i+0xf6>
 8023cd6:	2f08      	cmp	r7, #8
 8023cd8:	d109      	bne.n	8023cee <_printf_i+0x126>
 8023cda:	6823      	ldr	r3, [r4, #0]
 8023cdc:	07db      	lsls	r3, r3, #31
 8023cde:	d506      	bpl.n	8023cee <_printf_i+0x126>
 8023ce0:	6862      	ldr	r2, [r4, #4]
 8023ce2:	6923      	ldr	r3, [r4, #16]
 8023ce4:	429a      	cmp	r2, r3
 8023ce6:	dc02      	bgt.n	8023cee <_printf_i+0x126>
 8023ce8:	2330      	movs	r3, #48	; 0x30
 8023cea:	3e01      	subs	r6, #1
 8023cec:	7033      	strb	r3, [r6, #0]
 8023cee:	9b04      	ldr	r3, [sp, #16]
 8023cf0:	1b9b      	subs	r3, r3, r6
 8023cf2:	6123      	str	r3, [r4, #16]
 8023cf4:	9b07      	ldr	r3, [sp, #28]
 8023cf6:	0021      	movs	r1, r4
 8023cf8:	9300      	str	r3, [sp, #0]
 8023cfa:	9805      	ldr	r0, [sp, #20]
 8023cfc:	9b06      	ldr	r3, [sp, #24]
 8023cfe:	aa09      	add	r2, sp, #36	; 0x24
 8023d00:	f7ff fef2 	bl	8023ae8 <_printf_common>
 8023d04:	3001      	adds	r0, #1
 8023d06:	d147      	bne.n	8023d98 <_printf_i+0x1d0>
 8023d08:	2001      	movs	r0, #1
 8023d0a:	4240      	negs	r0, r0
 8023d0c:	b00b      	add	sp, #44	; 0x2c
 8023d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d10:	2220      	movs	r2, #32
 8023d12:	6809      	ldr	r1, [r1, #0]
 8023d14:	430a      	orrs	r2, r1
 8023d16:	6022      	str	r2, [r4, #0]
 8023d18:	2278      	movs	r2, #120	; 0x78
 8023d1a:	4932      	ldr	r1, [pc, #200]	; (8023de4 <_printf_i+0x21c>)
 8023d1c:	9103      	str	r1, [sp, #12]
 8023d1e:	0021      	movs	r1, r4
 8023d20:	3145      	adds	r1, #69	; 0x45
 8023d22:	700a      	strb	r2, [r1, #0]
 8023d24:	6819      	ldr	r1, [r3, #0]
 8023d26:	6822      	ldr	r2, [r4, #0]
 8023d28:	c920      	ldmia	r1!, {r5}
 8023d2a:	0610      	lsls	r0, r2, #24
 8023d2c:	d402      	bmi.n	8023d34 <_printf_i+0x16c>
 8023d2e:	0650      	lsls	r0, r2, #25
 8023d30:	d500      	bpl.n	8023d34 <_printf_i+0x16c>
 8023d32:	b2ad      	uxth	r5, r5
 8023d34:	6019      	str	r1, [r3, #0]
 8023d36:	07d3      	lsls	r3, r2, #31
 8023d38:	d502      	bpl.n	8023d40 <_printf_i+0x178>
 8023d3a:	2320      	movs	r3, #32
 8023d3c:	4313      	orrs	r3, r2
 8023d3e:	6023      	str	r3, [r4, #0]
 8023d40:	2710      	movs	r7, #16
 8023d42:	2d00      	cmp	r5, #0
 8023d44:	d1a9      	bne.n	8023c9a <_printf_i+0xd2>
 8023d46:	2220      	movs	r2, #32
 8023d48:	6823      	ldr	r3, [r4, #0]
 8023d4a:	4393      	bics	r3, r2
 8023d4c:	6023      	str	r3, [r4, #0]
 8023d4e:	e7a4      	b.n	8023c9a <_printf_i+0xd2>
 8023d50:	681a      	ldr	r2, [r3, #0]
 8023d52:	680d      	ldr	r5, [r1, #0]
 8023d54:	1d10      	adds	r0, r2, #4
 8023d56:	6949      	ldr	r1, [r1, #20]
 8023d58:	6018      	str	r0, [r3, #0]
 8023d5a:	6813      	ldr	r3, [r2, #0]
 8023d5c:	062e      	lsls	r6, r5, #24
 8023d5e:	d501      	bpl.n	8023d64 <_printf_i+0x19c>
 8023d60:	6019      	str	r1, [r3, #0]
 8023d62:	e002      	b.n	8023d6a <_printf_i+0x1a2>
 8023d64:	066d      	lsls	r5, r5, #25
 8023d66:	d5fb      	bpl.n	8023d60 <_printf_i+0x198>
 8023d68:	8019      	strh	r1, [r3, #0]
 8023d6a:	2300      	movs	r3, #0
 8023d6c:	9e04      	ldr	r6, [sp, #16]
 8023d6e:	6123      	str	r3, [r4, #16]
 8023d70:	e7c0      	b.n	8023cf4 <_printf_i+0x12c>
 8023d72:	681a      	ldr	r2, [r3, #0]
 8023d74:	1d11      	adds	r1, r2, #4
 8023d76:	6019      	str	r1, [r3, #0]
 8023d78:	6816      	ldr	r6, [r2, #0]
 8023d7a:	2100      	movs	r1, #0
 8023d7c:	0030      	movs	r0, r6
 8023d7e:	6862      	ldr	r2, [r4, #4]
 8023d80:	f000 f845 	bl	8023e0e <memchr>
 8023d84:	2800      	cmp	r0, #0
 8023d86:	d001      	beq.n	8023d8c <_printf_i+0x1c4>
 8023d88:	1b80      	subs	r0, r0, r6
 8023d8a:	6060      	str	r0, [r4, #4]
 8023d8c:	6863      	ldr	r3, [r4, #4]
 8023d8e:	6123      	str	r3, [r4, #16]
 8023d90:	2300      	movs	r3, #0
 8023d92:	9a04      	ldr	r2, [sp, #16]
 8023d94:	7013      	strb	r3, [r2, #0]
 8023d96:	e7ad      	b.n	8023cf4 <_printf_i+0x12c>
 8023d98:	0032      	movs	r2, r6
 8023d9a:	6923      	ldr	r3, [r4, #16]
 8023d9c:	9906      	ldr	r1, [sp, #24]
 8023d9e:	9805      	ldr	r0, [sp, #20]
 8023da0:	9d07      	ldr	r5, [sp, #28]
 8023da2:	47a8      	blx	r5
 8023da4:	3001      	adds	r0, #1
 8023da6:	d0af      	beq.n	8023d08 <_printf_i+0x140>
 8023da8:	6823      	ldr	r3, [r4, #0]
 8023daa:	079b      	lsls	r3, r3, #30
 8023dac:	d415      	bmi.n	8023dda <_printf_i+0x212>
 8023dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db0:	68e0      	ldr	r0, [r4, #12]
 8023db2:	4298      	cmp	r0, r3
 8023db4:	daaa      	bge.n	8023d0c <_printf_i+0x144>
 8023db6:	0018      	movs	r0, r3
 8023db8:	e7a8      	b.n	8023d0c <_printf_i+0x144>
 8023dba:	0022      	movs	r2, r4
 8023dbc:	2301      	movs	r3, #1
 8023dbe:	9906      	ldr	r1, [sp, #24]
 8023dc0:	9805      	ldr	r0, [sp, #20]
 8023dc2:	9e07      	ldr	r6, [sp, #28]
 8023dc4:	3219      	adds	r2, #25
 8023dc6:	47b0      	blx	r6
 8023dc8:	3001      	adds	r0, #1
 8023dca:	d09d      	beq.n	8023d08 <_printf_i+0x140>
 8023dcc:	3501      	adds	r5, #1
 8023dce:	68e3      	ldr	r3, [r4, #12]
 8023dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023dd2:	1a9b      	subs	r3, r3, r2
 8023dd4:	42ab      	cmp	r3, r5
 8023dd6:	dcf0      	bgt.n	8023dba <_printf_i+0x1f2>
 8023dd8:	e7e9      	b.n	8023dae <_printf_i+0x1e6>
 8023dda:	2500      	movs	r5, #0
 8023ddc:	e7f7      	b.n	8023dce <_printf_i+0x206>
 8023dde:	46c0      	nop			; (mov r8, r8)
 8023de0:	080258ec 	.word	0x080258ec
 8023de4:	080258fd 	.word	0x080258fd

08023de8 <memmove>:
 8023de8:	b510      	push	{r4, lr}
 8023dea:	4288      	cmp	r0, r1
 8023dec:	d902      	bls.n	8023df4 <memmove+0xc>
 8023dee:	188b      	adds	r3, r1, r2
 8023df0:	4298      	cmp	r0, r3
 8023df2:	d303      	bcc.n	8023dfc <memmove+0x14>
 8023df4:	2300      	movs	r3, #0
 8023df6:	e007      	b.n	8023e08 <memmove+0x20>
 8023df8:	5c8b      	ldrb	r3, [r1, r2]
 8023dfa:	5483      	strb	r3, [r0, r2]
 8023dfc:	3a01      	subs	r2, #1
 8023dfe:	d2fb      	bcs.n	8023df8 <memmove+0x10>
 8023e00:	bd10      	pop	{r4, pc}
 8023e02:	5ccc      	ldrb	r4, [r1, r3]
 8023e04:	54c4      	strb	r4, [r0, r3]
 8023e06:	3301      	adds	r3, #1
 8023e08:	429a      	cmp	r2, r3
 8023e0a:	d1fa      	bne.n	8023e02 <memmove+0x1a>
 8023e0c:	e7f8      	b.n	8023e00 <memmove+0x18>

08023e0e <memchr>:
 8023e0e:	b2c9      	uxtb	r1, r1
 8023e10:	1882      	adds	r2, r0, r2
 8023e12:	4290      	cmp	r0, r2
 8023e14:	d101      	bne.n	8023e1a <memchr+0xc>
 8023e16:	2000      	movs	r0, #0
 8023e18:	4770      	bx	lr
 8023e1a:	7803      	ldrb	r3, [r0, #0]
 8023e1c:	428b      	cmp	r3, r1
 8023e1e:	d0fb      	beq.n	8023e18 <memchr+0xa>
 8023e20:	3001      	adds	r0, #1
 8023e22:	e7f6      	b.n	8023e12 <memchr+0x4>

08023e24 <_realloc_r>:
 8023e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023e26:	0007      	movs	r7, r0
 8023e28:	000e      	movs	r6, r1
 8023e2a:	0014      	movs	r4, r2
 8023e2c:	2900      	cmp	r1, #0
 8023e2e:	d105      	bne.n	8023e3c <_realloc_r+0x18>
 8023e30:	0011      	movs	r1, r2
 8023e32:	f7ff fb09 	bl	8023448 <_malloc_r>
 8023e36:	0005      	movs	r5, r0
 8023e38:	0028      	movs	r0, r5
 8023e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8023e3c:	2a00      	cmp	r2, #0
 8023e3e:	d103      	bne.n	8023e48 <_realloc_r+0x24>
 8023e40:	f7ff fca6 	bl	8023790 <_free_r>
 8023e44:	0025      	movs	r5, r4
 8023e46:	e7f7      	b.n	8023e38 <_realloc_r+0x14>
 8023e48:	f000 f81b 	bl	8023e82 <_malloc_usable_size_r>
 8023e4c:	9001      	str	r0, [sp, #4]
 8023e4e:	4284      	cmp	r4, r0
 8023e50:	d803      	bhi.n	8023e5a <_realloc_r+0x36>
 8023e52:	0035      	movs	r5, r6
 8023e54:	0843      	lsrs	r3, r0, #1
 8023e56:	42a3      	cmp	r3, r4
 8023e58:	d3ee      	bcc.n	8023e38 <_realloc_r+0x14>
 8023e5a:	0021      	movs	r1, r4
 8023e5c:	0038      	movs	r0, r7
 8023e5e:	f7ff faf3 	bl	8023448 <_malloc_r>
 8023e62:	1e05      	subs	r5, r0, #0
 8023e64:	d0e8      	beq.n	8023e38 <_realloc_r+0x14>
 8023e66:	9b01      	ldr	r3, [sp, #4]
 8023e68:	0022      	movs	r2, r4
 8023e6a:	429c      	cmp	r4, r3
 8023e6c:	d900      	bls.n	8023e70 <_realloc_r+0x4c>
 8023e6e:	001a      	movs	r2, r3
 8023e70:	0031      	movs	r1, r6
 8023e72:	0028      	movs	r0, r5
 8023e74:	f7ff fc82 	bl	802377c <memcpy>
 8023e78:	0031      	movs	r1, r6
 8023e7a:	0038      	movs	r0, r7
 8023e7c:	f7ff fc88 	bl	8023790 <_free_r>
 8023e80:	e7da      	b.n	8023e38 <_realloc_r+0x14>

08023e82 <_malloc_usable_size_r>:
 8023e82:	1f0b      	subs	r3, r1, #4
 8023e84:	681b      	ldr	r3, [r3, #0]
 8023e86:	1f18      	subs	r0, r3, #4
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	da01      	bge.n	8023e90 <_malloc_usable_size_r+0xe>
 8023e8c:	580b      	ldr	r3, [r1, r0]
 8023e8e:	18c0      	adds	r0, r0, r3
 8023e90:	4770      	bx	lr
	...

08023e94 <_init>:
 8023e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e96:	46c0      	nop			; (mov r8, r8)
 8023e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e9a:	bc08      	pop	{r3}
 8023e9c:	469e      	mov	lr, r3
 8023e9e:	4770      	bx	lr

08023ea0 <_fini>:
 8023ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ea2:	46c0      	nop			; (mov r8, r8)
 8023ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ea6:	bc08      	pop	{r3}
 8023ea8:	469e      	mov	lr, r3
 8023eaa:	4770      	bx	lr
 8023eac:	0000      	movs	r0, r0
	...

08023eb0 <__FLASH_Program_Fast_veneer>:
 8023eb0:	b401      	push	{r0}
 8023eb2:	4802      	ldr	r0, [pc, #8]	; (8023ebc <__FLASH_Program_Fast_veneer+0xc>)
 8023eb4:	4684      	mov	ip, r0
 8023eb6:	bc01      	pop	{r0}
 8023eb8:	4760      	bx	ip
 8023eba:	bf00      	nop
 8023ebc:	20000259 	.word	0x20000259

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	0800150f                                ....

20000004 <dac_value>:
20000004:	000001f4                                ....

20000008 <isense_rawADCtrip>:
20000008:	000009c4                                ....

2000000c <currentState>:
2000000c:	00000001                                ....

20000010 <SNK_data>:
20000010:	0000014a 000003e8 00000000 00000000     J...............
20000020:	00000000 000001f4 00000000 00000000     ................
	...
2000003c:	00000002 0000000a 00000000              ............

20000048 <dhandle>:
20000048:	20000010                                ... 

2000004c <SYMBOLS>:
2000004c:	796d307e 705f5b33 4f017b7f 00670e37     ~0my3[_p.{.O7.g.

2000005c <SystemCoreClock>:
2000005c:	00f42400                                .$..

20000060 <uwTickPrio>:
20000060:	00000004                                ....

20000064 <uwTickFreq>:
20000064:	00000001                                ....

20000068 <USBD_CDC_DeviceQualifierDesc>:
20000068:	0200060a 40000000 00000001              .......@....

20000074 <USBD_CDC>:
20000074:	08015949 08015b69 08015c89 00000000     IY..i[...\......
20000084:	0801601d 08015e79 08015f97 00000000     .`..y^..._......
	...
2000009c:	08016139 080160a9 080161c9 08016259     9a...`...a..Yb..

200000ac <USBD_CDC_CfgDesc>:
200000ac:	00430209 c0000102 00040932 02020100     ..C.....2.......
200000bc:	24050001 05011000 01000124 02022404     ...$....$....$..
200000cc:	00062405 82050701 10000803 00010409     .$..............
200000dc:	00000a02 01050700 00004002 02810507     .........@......
200000ec:	                                         @..

200000ef <CDCInEpAdd>:
200000ef:	                                         .

200000f0 <CDCOutEpAdd>:
200000f0:	                                         .

200000f1 <CDCCmdEpAdd>:
200000f1:	                                         ...

200000f4 <uxCriticalNesting>:
200000f4:	aaaaaaaa                                ....

200000f8 <DPM_Settings>:
200000f8:	00000001 00000002 00000000              ............

20000104 <DPM_ID_Settings>:
20000104:	f0000003 00020483                       ........

2000010c <DPM_USER_Settings>:
2000010c:	0000000c 00000000 00000000 00000000     ................
	...

20000180 <USBPD_NbPDO>:
20000180:	00000003                                ....

20000184 <PORT0_PDO_ListSNK>:
20000184:	00019096 0002d096 0603c096 00000000     ................
	...

200001a0 <USBD_Interface_fops_FS>:
200001a0:	0801d789 0801d7b9 0801d7c5 0801d7fd     ................
200001b0:	0801d829                                )...

200001b4 <CDC_Desc>:
200001b4:	0801d84d 0801d871 0801d8d9 0801d895     M...q...........
200001c4:	0801d905 0801d92d 0801d971 00000000     ....-...q.......

200001d4 <USBD_CDC_DeviceDesc>:
200001d4:	02000112 40000202 57400483 02010200     .......@..@W....
200001e4:	00000103                                ....

200001e8 <USBD_LangIDDesc>:
200001e8:	04090304                                ....

200001ec <USBD_StringSerial>:
200001ec:	0000031a 00000000 00000000 00000000     ................
	...

20000208 <_impure_data>:
20000208:	00000000 20005044 200050ac 20005114     ....DP. .P. .Q. 
	...

20000254 <_impure_ptr>:
20000254:	20000208                                ... 

20000258 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000258:	b580      	push	{r7, lr}
2000025a:	b088      	sub	sp, #32
2000025c:	af00      	add	r7, sp, #0
2000025e:	6078      	str	r0, [r7, #4]
20000260:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000262:	231f      	movs	r3, #31
20000264:	18fb      	adds	r3, r7, r3
20000266:	2200      	movs	r2, #0
20000268:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000026a:	687b      	ldr	r3, [r7, #4]
2000026c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000026e:	683b      	ldr	r3, [r7, #0]
20000270:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000272:	4b1a      	ldr	r3, [pc, #104]	; (200002dc <FLASH_Program_Fast+0x84>)
20000274:	695a      	ldr	r2, [r3, #20]
20000276:	4b19      	ldr	r3, [pc, #100]	; (200002dc <FLASH_Program_Fast+0x84>)
20000278:	2180      	movs	r1, #128	; 0x80
2000027a:	02c9      	lsls	r1, r1, #11
2000027c:	430a      	orrs	r2, r1
2000027e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000280:	f3ef 8310 	mrs	r3, PRIMASK
20000284:	60fb      	str	r3, [r7, #12]
  return(result);
20000286:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000028a:	b672      	cpsid	i
}
2000028c:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000028e:	e00f      	b.n	200002b0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000290:	697a      	ldr	r2, [r7, #20]
20000292:	69bb      	ldr	r3, [r7, #24]
20000294:	6812      	ldr	r2, [r2, #0]
20000296:	601a      	str	r2, [r3, #0]
    src += 4U;
20000298:	697b      	ldr	r3, [r7, #20]
2000029a:	3304      	adds	r3, #4
2000029c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000029e:	69bb      	ldr	r3, [r7, #24]
200002a0:	3304      	adds	r3, #4
200002a2:	61bb      	str	r3, [r7, #24]
    index++;
200002a4:	211f      	movs	r1, #31
200002a6:	187b      	adds	r3, r7, r1
200002a8:	781a      	ldrb	r2, [r3, #0]
200002aa:	187b      	adds	r3, r7, r1
200002ac:	3201      	adds	r2, #1
200002ae:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200002b0:	231f      	movs	r3, #31
200002b2:	18fb      	adds	r3, r7, r3
200002b4:	781b      	ldrb	r3, [r3, #0]
200002b6:	2b3f      	cmp	r3, #63	; 0x3f
200002b8:	d9ea      	bls.n	20000290 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	4b07      	ldr	r3, [pc, #28]	; (200002dc <FLASH_Program_Fast+0x84>)
200002be:	691a      	ldr	r2, [r3, #16]
200002c0:	23c0      	movs	r3, #192	; 0xc0
200002c2:	029b      	lsls	r3, r3, #10
200002c4:	4013      	ands	r3, r2
200002c6:	d1f9      	bne.n	200002bc <FLASH_Program_Fast+0x64>
200002c8:	693b      	ldr	r3, [r7, #16]
200002ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002cc:	68bb      	ldr	r3, [r7, #8]
200002ce:	f383 8810 	msr	PRIMASK, r3
}
200002d2:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002d4:	46c0      	nop			; (mov r8, r8)
200002d6:	46bd      	mov	sp, r7
200002d8:	b008      	add	sp, #32
200002da:	bd80      	pop	{r7, pc}
200002dc:	40022000 	.word	0x40022000
