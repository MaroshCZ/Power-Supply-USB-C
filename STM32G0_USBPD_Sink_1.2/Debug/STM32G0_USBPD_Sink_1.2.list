
STM32G0_USBPD_Sink_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029c30  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a0  08029cf0  08029cf0  00039cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bd90  0802bd90  00040514  2**0
                  CONTENTS
  4 .ARM          00000008  0802bd90  0802bd90  0003bd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bd98  0802bd98  00040514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bd98  0802bd98  0003bd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bd9c  0802bd9c  0003bd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000514  20000000  0802bda0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          0000513c  20000514  0802c2b4  00040514  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20005650  0802c2b4  00045650  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040514  2**0
                  CONTENTS, READONLY
 12 .comment      000041e7  00000000  00000000  00040542  2**0
                  CONTENTS, READONLY
 13 .iar.rtmodel  0000033c  00000000  00000000  00044729  2**0
                  CONTENTS, READONLY
 14 .iar_vfe_header 00000024  00000000  00000000  00044a68  2**2
                  CONTENTS, READONLY
 15 .debug_info   0004323e  00000000  00000000  00044a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a811  00000000  00000000  00087cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003960  00000000  00000000  000924e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002ce9  00000000  00000000  00095e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002f47d  00000000  00000000  00098b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004500c  00000000  00000000  000c7fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f82e3  00000000  00000000  0010cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000f0b4  00000000  00000000  00205298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  0021434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000514 	.word	0x20000514
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08029cc8 	.word	0x08029cc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000518 	.word	0x20000518
 8000104:	08029cc8 	.word	0x08029cc8

08000108 <USBPD_CAD_Init>:
 8000108:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	0015      	movs	r5, r2
 800010e:	001e      	movs	r6, r3
 8000110:	2400      	movs	r4, #0
 8000112:	4668      	mov	r0, sp
 8000114:	7a00      	ldrb	r0, [r0, #8]
 8000116:	2803      	cmp	r0, #3
 8000118:	d301      	bcc.n	800011e <USBPD_CAD_Init+0x16>
 800011a:	2401      	movs	r4, #1
 800011c:	e01f      	b.n	800015e <USBPD_CAD_Init+0x56>
 800011e:	9100      	str	r1, [sp, #0]
 8000120:	2900      	cmp	r1, #0
 8000122:	d101      	bne.n	8000128 <USBPD_CAD_Init+0x20>
 8000124:	2402      	movs	r4, #2
 8000126:	e01a      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000128:	200c      	movs	r0, #12
 800012a:	f026 fc47 	bl	80269bc <malloc>
 800012e:	0007      	movs	r7, r0
 8000130:	d101      	bne.n	8000136 <USBPD_CAD_Init+0x2e>
 8000132:	2403      	movs	r4, #3
 8000134:	e013      	b.n	800015e <USBPD_CAD_Init+0x56>
 8000136:	210c      	movs	r1, #12
 8000138:	f027 fe26 	bl	8027d88 <__aeabi_memclr>
 800013c:	603e      	str	r6, [r7, #0]
 800013e:	723c      	strb	r4, [r7, #8]
 8000140:	9800      	ldr	r0, [sp, #0]
 8000142:	6078      	str	r0, [r7, #4]
 8000144:	484a      	ldr	r0, [pc, #296]	; (8000270 <.text_6>)
 8000146:	4669      	mov	r1, sp
 8000148:	7a09      	ldrb	r1, [r1, #8]
 800014a:	0089      	lsls	r1, r1, #2
 800014c:	5047      	str	r7, [r0, r1]
 800014e:	9800      	ldr	r0, [sp, #0]
 8000150:	6843      	ldr	r3, [r0, #4]
 8000152:	0032      	movs	r2, r6
 8000154:	0029      	movs	r1, r5
 8000156:	4668      	mov	r0, sp
 8000158:	7a00      	ldrb	r0, [r0, #8]
 800015a:	f016 f823 	bl	80161a4 <CAD_Init>
 800015e:	0020      	movs	r0, r4
 8000160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000162 <USBPD_CAD_PortEnable>:
 8000162:	2803      	cmp	r0, #3
 8000164:	d203      	bcs.n	800016e <USBPD_CAD_PortEnable+0xc>
 8000166:	4a42      	ldr	r2, [pc, #264]	; (8000270 <.text_6>)
 8000168:	0080      	lsls	r0, r0, #2
 800016a:	5810      	ldr	r0, [r2, r0]
 800016c:	7201      	strb	r1, [r0, #8]
 800016e:	4770      	bx	lr

08000170 <USBPD_CAD_Process>:
 8000170:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000172:	2400      	movs	r4, #0
 8000174:	4669      	mov	r1, sp
 8000176:	700c      	strb	r4, [r1, #0]
 8000178:	9401      	str	r4, [sp, #4]
 800017a:	2500      	movs	r5, #0
 800017c:	43ed      	mvns	r5, r5
 800017e:	4f3d      	ldr	r7, [pc, #244]	; (8000274 <.text_7>)
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <.text_6>)
 8000182:	00a1      	lsls	r1, r4, #2
 8000184:	1846      	adds	r6, r0, r1
 8000186:	6830      	ldr	r0, [r6, #0]
 8000188:	2800      	cmp	r0, #0
 800018a:	d06c      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800018c:	7a00      	ldrb	r0, [r0, #8]
 800018e:	2801      	cmp	r0, #1
 8000190:	d169      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 8000192:	aa01      	add	r2, sp, #4
 8000194:	4669      	mov	r1, sp
 8000196:	b2e0      	uxtb	r0, r4
 8000198:	f016 f9ac 	bl	80164f4 <CAD_StateMachine>
 800019c:	42a8      	cmp	r0, r5
 800019e:	d800      	bhi.n	80001a2 <USBPD_CAD_Process+0x32>
 80001a0:	0005      	movs	r5, r0
 80001a2:	4668      	mov	r0, sp
 80001a4:	7800      	ldrb	r0, [r0, #0]
 80001a6:	2801      	cmp	r0, #1
 80001a8:	d004      	beq.n	80001b4 <USBPD_CAD_Process+0x44>
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d012      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d010      	beq.n	80001d4 <USBPD_CAD_Process+0x64>
 80001b2:	e040      	b.n	8000236 <USBPD_CAD_Process+0xc6>
 80001b4:	6830      	ldr	r0, [r6, #0]
 80001b6:	6801      	ldr	r1, [r0, #0]
 80001b8:	680a      	ldr	r2, [r1, #0]
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <.text_8>)
 80001bc:	4013      	ands	r3, r2
 80001be:	600b      	str	r3, [r1, #0]
 80001c0:	6801      	ldr	r1, [r0, #0]
 80001c2:	680a      	ldr	r2, [r1, #0]
 80001c4:	23c0      	movs	r3, #192	; 0xc0
 80001c6:	439a      	bics	r2, r3
 80001c8:	600a      	str	r2, [r1, #0]
 80001ca:	6800      	ldr	r0, [r0, #0]
 80001cc:	6801      	ldr	r1, [r0, #0]
 80001ce:	4039      	ands	r1, r7
 80001d0:	6001      	str	r1, [r0, #0]
 80001d2:	e034      	b.n	800023e <USBPD_CAD_Process+0xce>
 80001d4:	6830      	ldr	r0, [r6, #0]
 80001d6:	9901      	ldr	r1, [sp, #4]
 80001d8:	2901      	cmp	r1, #1
 80001da:	6801      	ldr	r1, [r0, #0]
 80001dc:	680a      	ldr	r2, [r1, #0]
 80001de:	d103      	bne.n	80001e8 <USBPD_CAD_Process+0x78>
 80001e0:	403a      	ands	r2, r7
 80001e2:	2380      	movs	r3, #128	; 0x80
 80001e4:	01db      	lsls	r3, r3, #7
 80001e6:	e002      	b.n	80001ee <USBPD_CAD_Process+0x7e>
 80001e8:	403a      	ands	r2, r7
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	019b      	lsls	r3, r3, #6
 80001ee:	4313      	orrs	r3, r2
 80001f0:	600b      	str	r3, [r1, #0]
 80001f2:	6801      	ldr	r1, [r0, #0]
 80001f4:	680b      	ldr	r3, [r1, #0]
 80001f6:	22c0      	movs	r2, #192	; 0xc0
 80001f8:	4393      	bics	r3, r2
 80001fa:	469c      	mov	ip, r3
 80001fc:	9a01      	ldr	r2, [sp, #4]
 80001fe:	0193      	lsls	r3, r2, #6
 8000200:	22c0      	movs	r2, #192	; 0xc0
 8000202:	401a      	ands	r2, r3
 8000204:	4663      	mov	r3, ip
 8000206:	431a      	orrs	r2, r3
 8000208:	600a      	str	r2, [r1, #0]
 800020a:	6801      	ldr	r1, [r0, #0]
 800020c:	680a      	ldr	r2, [r1, #0]
 800020e:	2380      	movs	r3, #128	; 0x80
 8000210:	015b      	lsls	r3, r3, #5
 8000212:	4313      	orrs	r3, r2
 8000214:	600b      	str	r3, [r1, #0]
 8000216:	6800      	ldr	r0, [r0, #0]
 8000218:	6801      	ldr	r1, [r0, #0]
 800021a:	074a      	lsls	r2, r1, #29
 800021c:	0fd2      	lsrs	r2, r2, #31
 800021e:	d103      	bne.n	8000228 <USBPD_CAD_Process+0xb8>
 8000220:	2208      	movs	r2, #8
 8000222:	4391      	bics	r1, r2
 8000224:	6001      	str	r1, [r0, #0]
 8000226:	e002      	b.n	800022e <USBPD_CAD_Process+0xbe>
 8000228:	2208      	movs	r2, #8
 800022a:	430a      	orrs	r2, r1
 800022c:	6002      	str	r2, [r0, #0]
 800022e:	2168      	movs	r1, #104	; 0x68
 8000230:	b2e0      	uxtb	r0, r4
 8000232:	f000 f925 	bl	8000480 <USBPD_PE_Notification>
 8000236:	4668      	mov	r0, sp
 8000238:	7800      	ldrb	r0, [r0, #0]
 800023a:	2800      	cmp	r0, #0
 800023c:	d013      	beq.n	8000266 <USBPD_CAD_Process+0xf6>
 800023e:	9a01      	ldr	r2, [sp, #4]
 8000240:	4668      	mov	r0, sp
 8000242:	7801      	ldrb	r1, [r0, #0]
 8000244:	b2e0      	uxtb	r0, r4
 8000246:	6833      	ldr	r3, [r6, #0]
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4798      	blx	r3
 800024e:	4668      	mov	r0, sp
 8000250:	7800      	ldrb	r0, [r0, #0]
 8000252:	2801      	cmp	r0, #1
 8000254:	d003      	beq.n	800025e <USBPD_CAD_Process+0xee>
 8000256:	4668      	mov	r0, sp
 8000258:	7800      	ldrb	r0, [r0, #0]
 800025a:	2803      	cmp	r0, #3
 800025c:	d103      	bne.n	8000266 <USBPD_CAD_Process+0xf6>
 800025e:	2169      	movs	r1, #105	; 0x69
 8000260:	b2e0      	uxtb	r0, r4
 8000262:	f000 f90d 	bl	8000480 <USBPD_PE_Notification>
 8000266:	1c64      	adds	r4, r4, #1
 8000268:	2c03      	cmp	r4, #3
 800026a:	d389      	bcc.n	8000180 <USBPD_CAD_Process+0x10>
 800026c:	0028      	movs	r0, r5
 800026e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000270 <.text_6>:
 8000270:	20000530 	.word	0x20000530

08000274 <.text_7>:
 8000274:	ffff9fff 	.word	0xffff9fff

08000278 <.text_8>:
 8000278:	ffffefff 	.word	0xffffefff

0800027c <USBPD_CAD_AssertRd>:
 800027c:	b510      	push	{r4, lr}
 800027e:	0004      	movs	r4, r0
 8000280:	f017 fe04 	bl	8017e8c <USBPDM1_DeAssertRp>
 8000284:	0020      	movs	r0, r4
 8000286:	f017 fe0b 	bl	8017ea0 <USBPDM1_AssertRd>
 800028a:	bd10      	pop	{r4, pc}

0800028c <USBPD_CAD_AssertRp>:
 800028c:	b510      	push	{r4, lr}
 800028e:	0004      	movs	r4, r0
 8000290:	f017 feac 	bl	8017fec <USBPDM1_DeAssertRd>
 8000294:	0020      	movs	r0, r4
 8000296:	f017 fd41 	bl	8017d1c <USBPDM1_AssertRp>
 800029a:	bd10      	pop	{r4, pc}

0800029c <USBPD_CAD_EnterErrorRecovery>:
 800029c:	b580      	push	{r7, lr}
 800029e:	f016 f863 	bl	8016368 <CAD_Enter_ErrorRecovery>
 80002a2:	bd01      	pop	{r0, pc}

080002a4 <USBPD_CAD_SRC_SetRpResistor>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	2404      	movs	r4, #4
 80002a8:	f016 f8c8 	bl	801643c <CAD_Set_ResistorRp>
 80002ac:	2800      	cmp	r0, #0
 80002ae:	d100      	bne.n	80002b2 <USBPD_CAD_SRC_SetRpResistor+0xe>
 80002b0:	2400      	movs	r4, #0
 80002b2:	0020      	movs	r0, r4
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <USBPD_CAD_SetRpResistor>:
 80002b6:	b580      	push	{r7, lr}
 80002b8:	f7ff fff4 	bl	80002a4 <USBPD_CAD_SRC_SetRpResistor>
 80002bc:	bd02      	pop	{r1, pc}

080002be <USBPD_CAD_GetMemoryConsumption>:
 80002be:	2024      	movs	r0, #36	; 0x24
 80002c0:	4770      	bx	lr
	...

080002c4 <USBPD_PE_Init>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	000e      	movs	r6, r1
 80002c8:	0017      	movs	r7, r2
 80002ca:	001c      	movs	r4, r3
 80002cc:	6871      	ldr	r1, [r6, #4]
 80002ce:	070a      	lsls	r2, r1, #28
 80002d0:	0fd2      	lsrs	r2, r2, #31
 80002d2:	d002      	beq.n	80002da <USBPD_PE_Init+0x16>
 80002d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d002      	beq.n	80002e0 <USBPD_PE_Init+0x1c>
 80002da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80002dc:	2900      	cmp	r1, #0
 80002de:	d101      	bne.n	80002e4 <USBPD_PE_Init+0x20>
 80002e0:	241b      	movs	r4, #27
 80002e2:	e04a      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002e4:	4669      	mov	r1, sp
 80002e6:	7008      	strb	r0, [r1, #0]
 80002e8:	4668      	mov	r0, sp
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	2803      	cmp	r0, #3
 80002ee:	d301      	bcc.n	80002f4 <USBPD_PE_Init+0x30>
 80002f0:	2417      	movs	r4, #23
 80002f2:	e042      	b.n	800037a <USBPD_PE_Init+0xb6>
 80002f4:	2096      	movs	r0, #150	; 0x96
 80002f6:	00c0      	lsls	r0, r0, #3
 80002f8:	f026 fb60 	bl	80269bc <malloc>
 80002fc:	0005      	movs	r5, r0
 80002fe:	d101      	bne.n	8000304 <USBPD_PE_Init+0x40>
 8000300:	2416      	movs	r4, #22
 8000302:	e03a      	b.n	800037a <USBPD_PE_Init+0xb6>
 8000304:	2196      	movs	r1, #150	; 0x96
 8000306:	00c9      	lsls	r1, r1, #3
 8000308:	f027 fd3e 	bl	8027d88 <__aeabi_memclr>
 800030c:	487a      	ldr	r0, [pc, #488]	; (80004f8 <.text_16>)
 800030e:	4669      	mov	r1, sp
 8000310:	7809      	ldrb	r1, [r1, #0]
 8000312:	0089      	lsls	r1, r1, #2
 8000314:	5045      	str	r5, [r0, r1]
 8000316:	602e      	str	r6, [r5, #0]
 8000318:	606f      	str	r7, [r5, #4]
 800031a:	4668      	mov	r0, sp
 800031c:	7800      	ldrb	r0, [r0, #0]
 800031e:	7428      	strb	r0, [r5, #16]
 8000320:	60ac      	str	r4, [r5, #8]
 8000322:	4876      	ldr	r0, [pc, #472]	; (80004fc <.text_17>)
 8000324:	182b      	adds	r3, r5, r0
 8000326:	4876      	ldr	r0, [pc, #472]	; (8000500 <.text_18>)
 8000328:	182a      	adds	r2, r5, r0
 800032a:	0031      	movs	r1, r6
 800032c:	4668      	mov	r0, sp
 800032e:	7800      	ldrb	r0, [r0, #0]
 8000330:	f005 f98c 	bl	800564c <USBPD_PRL_Init>
 8000334:	0004      	movs	r4, r0
 8000336:	d120      	bne.n	800037a <USBPD_PE_Init+0xb6>
 8000338:	6868      	ldr	r0, [r5, #4]
 800033a:	6801      	ldr	r1, [r0, #0]
 800033c:	2703      	movs	r7, #3
 800033e:	682a      	ldr	r2, [r5, #0]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	0753      	lsls	r3, r2, #29
 8000344:	0fdb      	lsrs	r3, r3, #31
 8000346:	d006      	beq.n	8000356 <USBPD_PE_Init+0x92>
 8000348:	2208      	movs	r2, #8
 800034a:	430a      	orrs	r2, r1
 800034c:	6002      	str	r2, [r0, #0]
 800034e:	6873      	ldr	r3, [r6, #4]
 8000350:	403b      	ands	r3, r7
 8000352:	2201      	movs	r2, #1
 8000354:	e005      	b.n	8000362 <USBPD_PE_Init+0x9e>
 8000356:	2208      	movs	r2, #8
 8000358:	4391      	bics	r1, r2
 800035a:	6001      	str	r1, [r0, #0]
 800035c:	6873      	ldr	r3, [r6, #4]
 800035e:	403b      	ands	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4611      	mov	r1, r2
 8000364:	4668      	mov	r0, sp
 8000366:	7800      	ldrb	r0, [r0, #0]
 8000368:	f005 f9ab 	bl	80056c2 <USBPD_PRL_SetHeader>
 800036c:	6870      	ldr	r0, [r6, #4]
 800036e:	4007      	ands	r7, r0
 8000370:	0039      	movs	r1, r7
 8000372:	4668      	mov	r0, sp
 8000374:	7800      	ldrb	r0, [r0, #0]
 8000376:	f005 f9e2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 800037a:	0020      	movs	r0, r4
 800037c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800037e <USBPD_PE_TimerCounter>:
 800037e:	495e      	ldr	r1, [pc, #376]	; (80004f8 <.text_16>)
 8000380:	0080      	lsls	r0, r0, #2
 8000382:	5808      	ldr	r0, [r1, r0]
 8000384:	49b4      	ldr	r1, [pc, #720]	; (8000658 <.text_20>)
 8000386:	084a      	lsrs	r2, r1, #1
 8000388:	8bc3      	ldrh	r3, [r0, #30]
 800038a:	4213      	tst	r3, r2
 800038c:	d002      	beq.n	8000394 <USBPD_PE_TimerCounter+0x16>
 800038e:	8bc3      	ldrh	r3, [r0, #30]
 8000390:	185b      	adds	r3, r3, r1
 8000392:	83c3      	strh	r3, [r0, #30]
 8000394:	8c03      	ldrh	r3, [r0, #32]
 8000396:	4213      	tst	r3, r2
 8000398:	d002      	beq.n	80003a0 <USBPD_PE_TimerCounter+0x22>
 800039a:	8c03      	ldrh	r3, [r0, #32]
 800039c:	185b      	adds	r3, r3, r1
 800039e:	8403      	strh	r3, [r0, #32]
 80003a0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a2:	4213      	tst	r3, r2
 80003a4:	d002      	beq.n	80003ac <USBPD_PE_TimerCounter+0x2e>
 80003a6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80003a8:	185b      	adds	r3, r3, r1
 80003aa:	84c3      	strh	r3, [r0, #38]	; 0x26
 80003ac:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003ae:	4213      	tst	r3, r2
 80003b0:	d002      	beq.n	80003b8 <USBPD_PE_TimerCounter+0x3a>
 80003b2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80003b4:	185b      	adds	r3, r3, r1
 80003b6:	8443      	strh	r3, [r0, #34]	; 0x22
 80003b8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80003ba:	4213      	tst	r3, r2
 80003bc:	d002      	beq.n	80003c4 <USBPD_PE_TimerCounter+0x46>
 80003be:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80003c0:	1851      	adds	r1, r2, r1
 80003c2:	8481      	strh	r1, [r0, #36]	; 0x24
 80003c4:	4770      	bx	lr

080003c6 <USBPD_PE_TimerCounteUpdate>:
 80003c6:	b570      	push	{r4, r5, r6, lr}
 80003c8:	000e      	movs	r6, r1
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <.text_16>)
 80003cc:	0080      	lsls	r0, r0, #2
 80003ce:	580c      	ldr	r4, [r1, r0]
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0209      	lsls	r1, r1, #8
 80003d4:	428e      	cmp	r6, r1
 80003d6:	da28      	bge.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 80003d8:	1e4d      	subs	r5, r1, #1
 80003da:	8be0      	ldrh	r0, [r4, #30]
 80003dc:	4228      	tst	r0, r5
 80003de:	d004      	beq.n	80003ea <USBPD_PE_TimerCounteUpdate+0x24>
 80003e0:	0031      	movs	r1, r6
 80003e2:	8be0      	ldrh	r0, [r4, #30]
 80003e4:	f000 ffcb 	bl	800137e <PE_UpdateTimer>
 80003e8:	83e0      	strh	r0, [r4, #30]
 80003ea:	8c20      	ldrh	r0, [r4, #32]
 80003ec:	4228      	tst	r0, r5
 80003ee:	d004      	beq.n	80003fa <USBPD_PE_TimerCounteUpdate+0x34>
 80003f0:	0031      	movs	r1, r6
 80003f2:	8c20      	ldrh	r0, [r4, #32]
 80003f4:	f000 ffc3 	bl	800137e <PE_UpdateTimer>
 80003f8:	8420      	strh	r0, [r4, #32]
 80003fa:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 80003fc:	4228      	tst	r0, r5
 80003fe:	d004      	beq.n	800040a <USBPD_PE_TimerCounteUpdate+0x44>
 8000400:	0031      	movs	r1, r6
 8000402:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8000404:	f000 ffbb 	bl	800137e <PE_UpdateTimer>
 8000408:	84e0      	strh	r0, [r4, #38]	; 0x26
 800040a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 800040c:	4228      	tst	r0, r5
 800040e:	d004      	beq.n	800041a <USBPD_PE_TimerCounteUpdate+0x54>
 8000410:	0031      	movs	r1, r6
 8000412:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8000414:	f000 ffb3 	bl	800137e <PE_UpdateTimer>
 8000418:	8460      	strh	r0, [r4, #34]	; 0x22
 800041a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800041c:	4228      	tst	r0, r5
 800041e:	d004      	beq.n	800042a <USBPD_PE_TimerCounteUpdate+0x64>
 8000420:	0031      	movs	r1, r6
 8000422:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8000424:	f000 ffab 	bl	800137e <PE_UpdateTimer>
 8000428:	84a0      	strh	r0, [r4, #36]	; 0x24
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <USBPD_PE_IsCableConnected>:
 800042c:	b510      	push	{r4, lr}
 800042e:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <.text_16>)
 8000430:	0080      	lsls	r0, r0, #2
 8000432:	5810      	ldr	r0, [r2, r0]
 8000434:	6842      	ldr	r2, [r0, #4]
 8000436:	6813      	ldr	r3, [r2, #0]
 8000438:	4cb2      	ldr	r4, [pc, #712]	; (8000704 <.text_22>)
 800043a:	401c      	ands	r4, r3
 800043c:	0309      	lsls	r1, r1, #12
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	015b      	lsls	r3, r3, #5
 8000442:	4019      	ands	r1, r3
 8000444:	4321      	orrs	r1, r4
 8000446:	6011      	str	r1, [r2, #0]
 8000448:	2148      	movs	r1, #72	; 0x48
 800044a:	7441      	strb	r1, [r0, #17]
 800044c:	bd10      	pop	{r4, pc}

0800044e <USBPD_PE_StateMachine_Reset>:
 800044e:	2148      	movs	r1, #72	; 0x48
 8000450:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <.text_16>)
 8000452:	0080      	lsls	r0, r0, #2
 8000454:	5810      	ldr	r0, [r2, r0]
 8000456:	7441      	strb	r1, [r0, #17]
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_StateMachine_Stop>:
 800045a:	b580      	push	{r7, lr}
 800045c:	f005 fc34 	bl	8005cc8 <USBPD_PRL_Stop>
 8000460:	bd01      	pop	{r0, pc}

08000462 <USBPD_PE_StateMachine_DRP>:
 8000462:	b580      	push	{r7, lr}
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <.text_16>)
 8000466:	0082      	lsls	r2, r0, #2
 8000468:	5889      	ldr	r1, [r1, r2]
 800046a:	6849      	ldr	r1, [r1, #4]
 800046c:	6809      	ldr	r1, [r1, #0]
 800046e:	074a      	lsls	r2, r1, #29
 8000470:	0fd2      	lsrs	r2, r2, #31
 8000472:	d002      	beq.n	800047a <USBPD_PE_StateMachine_DRP+0x18>
 8000474:	f002 fb8a 	bl	8002b8c <USBPD_PE_StateMachine_SRC>
 8000478:	bd02      	pop	{r1, pc}
 800047a:	f001 fcd5 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 800047e:	bd02      	pop	{r1, pc}

08000480 <USBPD_PE_Notification>:
 8000480:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000482:	0004      	movs	r4, r0
 8000484:	2803      	cmp	r0, #3
 8000486:	d211      	bcs.n	80004ac <USBPD_PE_Notification+0x2c>
 8000488:	000d      	movs	r5, r1
 800048a:	2000      	movs	r0, #0
 800048c:	9000      	str	r0, [sp, #0]
 800048e:	2300      	movs	r3, #0
 8000490:	002a      	movs	r2, r5
 8000492:	0021      	movs	r1, r4
 8000494:	2009      	movs	r0, #9
 8000496:	4eb2      	ldr	r6, [pc, #712]	; (8000760 <.text_24>)
 8000498:	6836      	ldr	r6, [r6, #0]
 800049a:	47b0      	blx	r6
 800049c:	0029      	movs	r1, r5
 800049e:	0020      	movs	r0, r4
 80004a0:	4ab0      	ldr	r2, [pc, #704]	; (8000764 <.text_25>)
 80004a2:	00a3      	lsls	r3, r4, #2
 80004a4:	58d2      	ldr	r2, [r2, r3]
 80004a6:	6892      	ldr	r2, [r2, #8]
 80004a8:	68d2      	ldr	r2, [r2, #12]
 80004aa:	4790      	blx	r2
 80004ac:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080004ae <USBPD_PE_InitVDM_Callback>:
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <.text_25>)
 80004b0:	0080      	lsls	r0, r0, #2
 80004b2:	5810      	ldr	r0, [r2, r0]
 80004b4:	60c1      	str	r1, [r0, #12]
 80004b6:	4770      	bx	lr

080004b8 <USBPD_PE_Request_HardReset>:
 80004b8:	b580      	push	{r7, lr}
 80004ba:	49aa      	ldr	r1, [pc, #680]	; (8000764 <.text_25>)
 80004bc:	0082      	lsls	r2, r0, #2
 80004be:	5889      	ldr	r1, [r1, r2]
 80004c0:	220f      	movs	r2, #15
 80004c2:	2332      	movs	r3, #50	; 0x32
 80004c4:	54ca      	strb	r2, [r1, r3]
 80004c6:	6889      	ldr	r1, [r1, #8]
 80004c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004ca:	4788      	blx	r1
 80004cc:	2000      	movs	r0, #0
 80004ce:	bd02      	pop	{r1, pc}

080004d0 <USBPD_PE_Request_CableReset>:
 80004d0:	b580      	push	{r7, lr}
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <.text_16>)
 80004d4:	0082      	lsls	r2, r0, #2
 80004d6:	5889      	ldr	r1, [r1, r2]
 80004d8:	684a      	ldr	r2, [r1, #4]
 80004da:	6812      	ldr	r2, [r2, #0]
 80004dc:	4ba2      	ldr	r3, [pc, #648]	; (8000768 <.text_26>)
 80004de:	4013      	ands	r3, r2
 80004e0:	4aa2      	ldr	r2, [pc, #648]	; (800076c <.text_27>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d105      	bne.n	80004f2 <USBPD_PE_Request_CableReset+0x22>
 80004e6:	2299      	movs	r2, #153	; 0x99
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	54ca      	strb	r2, [r1, r3]
 80004ec:	6889      	ldr	r1, [r1, #8]
 80004ee:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80004f0:	4788      	blx	r1
 80004f2:	2010      	movs	r0, #16
 80004f4:	bd02      	pop	{r1, pc}
	...

080004f8 <.text_16>:
 80004f8:	2000053c 	.word	0x2000053c

080004fc <.text_17>:
 80004fc:	0000048e 	.word	0x0000048e

08000500 <.text_18>:
 8000500:	00000281 	.word	0x00000281

08000504 <USBPD_PE_Request_CtrlMessage>:
 8000504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000506:	b096      	sub	sp, #88	; 0x58
 8000508:	4896      	ldr	r0, [pc, #600]	; (8000764 <.text_25>)
 800050a:	a916      	add	r1, sp, #88	; 0x58
 800050c:	7809      	ldrb	r1, [r1, #0]
 800050e:	0089      	lsls	r1, r1, #2
 8000510:	5840      	ldr	r0, [r0, r1]
 8000512:	9001      	str	r0, [sp, #4]
 8000514:	2400      	movs	r4, #0
 8000516:	a802      	add	r0, sp, #8
 8000518:	4995      	ldr	r1, [pc, #596]	; (8000770 <.text_28>)
 800051a:	224c      	movs	r2, #76	; 0x4c
 800051c:	f027 fc29 	bl	8027d72 <__aeabi_memcpy>
 8000520:	2303      	movs	r3, #3
 8000522:	9801      	ldr	r0, [sp, #4]
 8000524:	2132      	movs	r1, #50	; 0x32
 8000526:	5c40      	ldrb	r0, [r0, r1]
 8000528:	2800      	cmp	r0, #0
 800052a:	d105      	bne.n	8000538 <USBPD_PE_Request_CtrlMessage+0x34>
 800052c:	9801      	ldr	r0, [sp, #4]
 800052e:	6840      	ldr	r0, [r0, #4]
 8000530:	6800      	ldr	r0, [r0, #0]
 8000532:	04c1      	lsls	r1, r0, #19
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	d101      	bne.n	800053c <USBPD_PE_Request_CtrlMessage+0x38>
 8000538:	2403      	movs	r4, #3
 800053a:	e089      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	6809      	ldr	r1, [r1, #0]
 8000540:	684a      	ldr	r2, [r1, #4]
 8000542:	0712      	lsls	r2, r2, #28
 8000544:	0fd5      	lsrs	r5, r2, #31
 8000546:	466a      	mov	r2, sp
 8000548:	7055      	strb	r5, [r2, #1]
 800054a:	2201      	movs	r2, #1
 800054c:	0885      	lsrs	r5, r0, #2
 800054e:	4015      	ands	r5, r2
 8000550:	d103      	bne.n	800055a <USBPD_PE_Request_CtrlMessage+0x56>
 8000552:	2502      	movs	r5, #2
 8000554:	466f      	mov	r7, sp
 8000556:	703c      	strb	r4, [r7, #0]
 8000558:	e003      	b.n	8000562 <USBPD_PE_Request_CtrlMessage+0x5e>
 800055a:	2500      	movs	r5, #0
 800055c:	2604      	movs	r6, #4
 800055e:	466f      	mov	r7, sp
 8000560:	703e      	strb	r6, [r7, #0]
 8000562:	0546      	lsls	r6, r0, #21
 8000564:	0f76      	lsrs	r6, r6, #29
 8000566:	2e03      	cmp	r6, #3
 8000568:	d101      	bne.n	800056e <USBPD_PE_Request_CtrlMessage+0x6a>
 800056a:	2608      	movs	r6, #8
 800056c:	e000      	b.n	8000570 <USBPD_PE_Request_CtrlMessage+0x6c>
 800056e:	2600      	movs	r6, #0
 8000570:	4018      	ands	r0, r3
 8000572:	2802      	cmp	r0, #2
 8000574:	d101      	bne.n	800057a <USBPD_PE_Request_CtrlMessage+0x76>
 8000576:	2040      	movs	r0, #64	; 0x40
 8000578:	e000      	b.n	800057c <USBPD_PE_Request_CtrlMessage+0x78>
 800057a:	2000      	movs	r0, #0
 800057c:	787f      	ldrb	r7, [r7, #1]
 800057e:	433d      	orrs	r5, r7
 8000580:	466f      	mov	r7, sp
 8000582:	783f      	ldrb	r7, [r7, #0]
 8000584:	432f      	orrs	r7, r5
 8000586:	433e      	orrs	r6, r7
 8000588:	4330      	orrs	r0, r6
 800058a:	4003      	ands	r3, r0
 800058c:	d002      	beq.n	8000594 <USBPD_PE_Request_CtrlMessage+0x90>
 800058e:	0003      	movs	r3, r0
 8000590:	2010      	movs	r0, #16
 8000592:	4318      	orrs	r0, r3
 8000594:	2505      	movs	r5, #5
 8000596:	4228      	tst	r0, r5
 8000598:	d002      	beq.n	80005a0 <USBPD_PE_Request_CtrlMessage+0x9c>
 800059a:	0003      	movs	r3, r0
 800059c:	2020      	movs	r0, #32
 800059e:	4318      	orrs	r0, r3
 80005a0:	ab17      	add	r3, sp, #92	; 0x5c
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	005e      	lsls	r6, r3, #1
 80005a6:	18f3      	adds	r3, r6, r3
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	ab02      	add	r3, sp, #8
 80005ac:	9e00      	ldr	r6, [sp, #0]
 80005ae:	5d9e      	ldrb	r6, [r3, r6]
 80005b0:	4030      	ands	r0, r6
 80005b2:	42b0      	cmp	r0, r6
 80005b4:	d11f      	bne.n	80005f6 <USBPD_PE_Request_CtrlMessage+0xf2>
 80005b6:	9e01      	ldr	r6, [sp, #4]
 80005b8:	2733      	movs	r7, #51	; 0x33
 80005ba:	55f4      	strb	r4, [r6, r7]
 80005bc:	9801      	ldr	r0, [sp, #4]
 80005be:	4eb2      	ldr	r6, [pc, #712]	; (8000888 <.text_30>)
 80005c0:	1980      	adds	r0, r0, r6
 80005c2:	ae17      	add	r6, sp, #92	; 0x5c
 80005c4:	7836      	ldrb	r6, [r6, #0]
 80005c6:	2e05      	cmp	r6, #5
 80005c8:	d031      	beq.n	800062e <USBPD_PE_Request_CtrlMessage+0x12a>
 80005ca:	2e0b      	cmp	r6, #11
 80005cc:	d00e      	beq.n	80005ec <USBPD_PE_Request_CtrlMessage+0xe8>
 80005ce:	2e0d      	cmp	r6, #13
 80005d0:	d028      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005d2:	2e11      	cmp	r6, #17
 80005d4:	d011      	beq.n	80005fa <USBPD_PE_Request_CtrlMessage+0xf6>
 80005d6:	2e12      	cmp	r6, #18
 80005d8:	d013      	beq.n	8000602 <USBPD_PE_Request_CtrlMessage+0xfe>
 80005da:	2e14      	cmp	r6, #20
 80005dc:	d013      	beq.n	8000606 <USBPD_PE_Request_CtrlMessage+0x102>
 80005de:	2e15      	cmp	r6, #21
 80005e0:	d017      	beq.n	8000612 <USBPD_PE_Request_CtrlMessage+0x10e>
 80005e2:	2e16      	cmp	r6, #22
 80005e4:	d00b      	beq.n	80005fe <USBPD_PE_Request_CtrlMessage+0xfa>
 80005e6:	2e18      	cmp	r6, #24
 80005e8:	d01c      	beq.n	8000624 <USBPD_PE_Request_CtrlMessage+0x120>
 80005ea:	e021      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	6889      	ldr	r1, [r1, #8]
 80005f0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d11c      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 80005f6:	2402      	movs	r4, #2
 80005f8:	e02a      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 80005fa:	2111      	movs	r1, #17
 80005fc:	e010      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 80005fe:	2116      	movs	r1, #22
 8000600:	e00e      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000602:	2112      	movs	r1, #18
 8000604:	e00c      	b.n	8000620 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000606:	8909      	ldrh	r1, [r1, #8]
 8000608:	0889      	lsrs	r1, r1, #2
 800060a:	4211      	tst	r1, r2
 800060c:	d110      	bne.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800060e:	2410      	movs	r4, #16
 8000610:	e01e      	b.n	8000650 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000612:	8909      	ldrh	r1, [r1, #8]
 8000614:	09c9      	lsrs	r1, r1, #7
 8000616:	4211      	tst	r1, r2
 8000618:	d101      	bne.n	800061e <USBPD_PE_Request_CtrlMessage+0x11a>
 800061a:	2010      	movs	r0, #16
 800061c:	e019      	b.n	8000652 <USBPD_PE_Request_CtrlMessage+0x14e>
 800061e:	2115      	movs	r1, #21
 8000620:	7001      	strb	r1, [r0, #0]
 8000622:	e005      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000624:	a918      	add	r1, sp, #96	; 0x60
 8000626:	7809      	ldrb	r1, [r1, #0]
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	55d1      	strb	r1, [r2, r7]
 800062c:	e000      	b.n	8000630 <USBPD_PE_Request_CtrlMessage+0x12c>
 800062e:	7005      	strb	r5, [r0, #0]
 8000630:	9900      	ldr	r1, [sp, #0]
 8000632:	1859      	adds	r1, r3, r1
 8000634:	7849      	ldrb	r1, [r1, #1]
 8000636:	7041      	strb	r1, [r0, #1]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	1818      	adds	r0, r3, r0
 800063c:	7880      	ldrb	r0, [r0, #2]
 800063e:	9901      	ldr	r1, [sp, #4]
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	5488      	strb	r0, [r1, r2]
 8000644:	a816      	add	r0, sp, #88	; 0x58
 8000646:	7800      	ldrb	r0, [r0, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	6889      	ldr	r1, [r1, #8]
 800064c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800064e:	4788      	blx	r1
 8000650:	0020      	movs	r0, r4
 8000652:	b019      	add	sp, #100	; 0x64
 8000654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000658 <.text_20>:
 8000658:	0000ffff 	.word	0x0000ffff

0800065c <USBPD_PE_Request_DataMessage>:
 800065c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	000b      	movs	r3, r1
 8000662:	0017      	movs	r7, r2
 8000664:	483f      	ldr	r0, [pc, #252]	; (8000764 <.text_25>)
 8000666:	4669      	mov	r1, sp
 8000668:	7a09      	ldrb	r1, [r1, #8]
 800066a:	0089      	lsls	r1, r1, #2
 800066c:	5841      	ldr	r1, [r0, r1]
 800066e:	2402      	movs	r4, #2
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	5c08      	ldrb	r0, [r1, r0]
 8000674:	2800      	cmp	r0, #0
 8000676:	d105      	bne.n	8000684 <USBPD_PE_Request_DataMessage+0x28>
 8000678:	2001      	movs	r0, #1
 800067a:	684a      	ldr	r2, [r1, #4]
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	0b12      	lsrs	r2, r2, #12
 8000680:	4002      	ands	r2, r0
 8000682:	d101      	bne.n	8000688 <USBPD_PE_Request_DataMessage+0x2c>
 8000684:	2403      	movs	r4, #3
 8000686:	e021      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 8000688:	466a      	mov	r2, sp
 800068a:	7013      	strb	r3, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	2533      	movs	r5, #51	; 0x33
 8000690:	554a      	strb	r2, [r1, r5]
 8000692:	000b      	movs	r3, r1
 8000694:	3332      	adds	r3, #50	; 0x32
 8000696:	4dc0      	ldr	r5, [pc, #768]	; (8000998 <.text_36>)
 8000698:	4ec0      	ldr	r6, [pc, #768]	; (800099c <.text_37>)
 800069a:	9701      	str	r7, [sp, #4]
 800069c:	466f      	mov	r7, sp
 800069e:	783f      	ldrb	r7, [r7, #0]
 80006a0:	2f01      	cmp	r7, #1
 80006a2:	d004      	beq.n	80006ae <USBPD_PE_Request_DataMessage+0x52>
 80006a4:	2f06      	cmp	r7, #6
 80006a6:	d013      	beq.n	80006d0 <USBPD_PE_Request_DataMessage+0x74>
 80006a8:	2f07      	cmp	r7, #7
 80006aa:	d01b      	beq.n	80006e4 <USBPD_PE_Request_DataMessage+0x88>
 80006ac:	e027      	b.n	80006fe <USBPD_PE_Request_DataMessage+0xa2>
 80006ae:	684d      	ldr	r5, [r1, #4]
 80006b0:	682d      	ldr	r5, [r5, #0]
 80006b2:	08ad      	lsrs	r5, r5, #2
 80006b4:	4005      	ands	r5, r0
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006b8:	4cc1      	ldr	r4, [pc, #772]	; (80009c0 <.text_39>)
 80006ba:	5508      	strb	r0, [r1, r4]
 80006bc:	2007      	movs	r0, #7
 80006be:	7018      	strb	r0, [r3, #0]
 80006c0:	2400      	movs	r4, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	7a00      	ldrb	r0, [r0, #8]
 80006c6:	6889      	ldr	r1, [r1, #8]
 80006c8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80006ca:	4788      	blx	r1
 80006cc:	0020      	movs	r0, r4
 80006ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80006d0:	6848      	ldr	r0, [r1, #4]
 80006d2:	6800      	ldr	r0, [r0, #0]
 80006d4:	4006      	ands	r6, r0
 80006d6:	42ae      	cmp	r6, r5
 80006d8:	d1f8      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006da:	9801      	ldr	r0, [sp, #4]
 80006dc:	6800      	ldr	r0, [r0, #0]
 80006de:	6288      	str	r0, [r1, #40]	; 0x28
 80006e0:	202b      	movs	r0, #43	; 0x2b
 80006e2:	e7ec      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006e4:	6848      	ldr	r0, [r1, #4]
 80006e6:	6800      	ldr	r0, [r0, #0]
 80006e8:	4006      	ands	r6, r0
 80006ea:	42ae      	cmp	r6, r5
 80006ec:	d1ee      	bne.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
 80006ee:	9801      	ldr	r0, [sp, #4]
 80006f0:	6800      	ldr	r0, [r0, #0]
 80006f2:	6288      	str	r0, [r1, #40]	; 0x28
 80006f4:	205d      	movs	r0, #93	; 0x5d
 80006f6:	4cb2      	ldr	r4, [pc, #712]	; (80009c0 <.text_39>)
 80006f8:	5508      	strb	r0, [r1, r4]
 80006fa:	2062      	movs	r0, #98	; 0x62
 80006fc:	e7df      	b.n	80006be <USBPD_PE_Request_DataMessage+0x62>
 80006fe:	2410      	movs	r4, #16
 8000700:	e7e4      	b.n	80006cc <USBPD_PE_Request_DataMessage+0x70>
	...

08000704 <.text_22>:
 8000704:	ffffefff 	.word	0xffffefff

08000708 <USBPD_PE_Send_Request>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	000b      	movs	r3, r1
 800070c:	4915      	ldr	r1, [pc, #84]	; (8000764 <.text_25>)
 800070e:	0084      	lsls	r4, r0, #2
 8000710:	590d      	ldr	r5, [r1, r4]
 8000712:	2102      	movs	r1, #2
 8000714:	2432      	movs	r4, #50	; 0x32
 8000716:	5d2c      	ldrb	r4, [r5, r4]
 8000718:	2c00      	cmp	r4, #0
 800071a:	d104      	bne.n	8000726 <USBPD_PE_Send_Request+0x1e>
 800071c:	686c      	ldr	r4, [r5, #4]
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	04e6      	lsls	r6, r4, #19
 8000722:	0ff6      	lsrs	r6, r6, #31
 8000724:	d101      	bne.n	800072a <USBPD_PE_Send_Request+0x22>
 8000726:	2103      	movs	r1, #3
 8000728:	e017      	b.n	800075a <USBPD_PE_Send_Request+0x52>
 800072a:	4ea6      	ldr	r6, [pc, #664]	; (80009c4 <.text_40>)
 800072c:	4026      	ands	r6, r4
 800072e:	24c0      	movs	r4, #192	; 0xc0
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	42a6      	cmp	r6, r4
 8000734:	d111      	bne.n	800075a <USBPD_PE_Send_Request+0x52>
 8000736:	2145      	movs	r1, #69	; 0x45
 8000738:	2432      	movs	r4, #50	; 0x32
 800073a:	5529      	strb	r1, [r5, r4]
 800073c:	61ab      	str	r3, [r5, #24]
 800073e:	6969      	ldr	r1, [r5, #20]
 8000740:	2318      	movs	r3, #24
 8000742:	4399      	bics	r1, r3
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	4013      	ands	r3, r2
 8000748:	430b      	orrs	r3, r1
 800074a:	616b      	str	r3, [r5, #20]
 800074c:	2400      	movs	r4, #0
 800074e:	2233      	movs	r2, #51	; 0x33
 8000750:	54ac      	strb	r4, [r5, r2]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000756:	4788      	blx	r1
 8000758:	2100      	movs	r1, #0
 800075a:	0008      	movs	r0, r1
 800075c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000760 <.text_24>:
 8000760:	20000000 	.word	0x20000000

08000764 <.text_25>:
 8000764:	2000053c 	.word	0x2000053c

08000768 <.text_26>:
 8000768:	00008708 	.word	0x00008708

0800076c <.text_27>:
 800076c:	00008308 	.word	0x00008308

08000770 <.text_28>:
 8000770:	0802aeec 	.word	0x0802aeec

08000774 <USBPD_PE_SendExtendedMessage>:
 8000774:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000776:	b083      	sub	sp, #12
 8000778:	001f      	movs	r7, r3
 800077a:	2400      	movs	r4, #0
 800077c:	2500      	movs	r5, #0
 800077e:	48b5      	ldr	r0, [pc, #724]	; (8000a54 <.text_43>)
 8000780:	4669      	mov	r1, sp
 8000782:	7b09      	ldrb	r1, [r1, #12]
 8000784:	0089      	lsls	r1, r1, #2
 8000786:	5846      	ldr	r6, [r0, r1]
 8000788:	2003      	movs	r0, #3
 800078a:	2132      	movs	r1, #50	; 0x32
 800078c:	5c71      	ldrb	r1, [r6, r1]
 800078e:	2900      	cmp	r1, #0
 8000790:	d107      	bne.n	80007a2 <USBPD_PE_SendExtendedMessage+0x2e>
 8000792:	6871      	ldr	r1, [r6, #4]
 8000794:	6809      	ldr	r1, [r1, #0]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	9b00      	ldr	r3, [sp, #0]
 800079c:	0b1b      	lsrs	r3, r3, #12
 800079e:	400b      	ands	r3, r1
 80007a0:	d101      	bne.n	80007a6 <USBPD_PE_SendExtendedMessage+0x32>
 80007a2:	2503      	movs	r5, #3
 80007a4:	e06c      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007a6:	9b00      	ldr	r3, [sp, #0]
 80007a8:	055b      	lsls	r3, r3, #21
 80007aa:	0f5b      	lsrs	r3, r3, #29
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d10b      	bne.n	80007c8 <USBPD_PE_SendExtendedMessage+0x54>
 80007b0:	9b00      	ldr	r3, [sp, #0]
 80007b2:	4018      	ands	r0, r3
 80007b4:	2801      	cmp	r0, #1
 80007b6:	d801      	bhi.n	80007bc <USBPD_PE_SendExtendedMessage+0x48>
 80007b8:	2501      	movs	r5, #1
 80007ba:	e061      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007bc:	4668      	mov	r0, sp
 80007be:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80007c0:	21ff      	movs	r1, #255	; 0xff
 80007c2:	1d89      	adds	r1, r1, #6
 80007c4:	4288      	cmp	r0, r1
 80007c6:	d301      	bcc.n	80007cc <USBPD_PE_SendExtendedMessage+0x58>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e059      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 80007cc:	4668      	mov	r0, sp
 80007ce:	7002      	strb	r2, [r0, #0]
 80007d0:	6970      	ldr	r0, [r6, #20]
 80007d2:	2120      	movs	r1, #32
 80007d4:	4388      	bics	r0, r1
 80007d6:	6170      	str	r0, [r6, #20]
 80007d8:	2020      	movs	r0, #32
 80007da:	4669      	mov	r1, sp
 80007dc:	7809      	ldrb	r1, [r1, #0]
 80007de:	2903      	cmp	r1, #3
 80007e0:	d008      	beq.n	80007f4 <USBPD_PE_SendExtendedMessage+0x80>
 80007e2:	2904      	cmp	r1, #4
 80007e4:	d020      	beq.n	8000828 <USBPD_PE_SendExtendedMessage+0xb4>
 80007e6:	2906      	cmp	r1, #6
 80007e8:	d020      	beq.n	800082c <USBPD_PE_SendExtendedMessage+0xb8>
 80007ea:	2908      	cmp	r1, #8
 80007ec:	d020      	beq.n	8000830 <USBPD_PE_SendExtendedMessage+0xbc>
 80007ee:	290a      	cmp	r1, #10
 80007f0:	d023      	beq.n	800083a <USBPD_PE_SendExtendedMessage+0xc6>
 80007f2:	e024      	b.n	800083e <USBPD_PE_SendExtendedMessage+0xca>
 80007f4:	210c      	movs	r1, #12
 80007f6:	4aac      	ldr	r2, [pc, #688]	; (8000aa8 <.text_45>)
 80007f8:	18b2      	adds	r2, r6, r2
 80007fa:	7091      	strb	r1, [r2, #2]
 80007fc:	6971      	ldr	r1, [r6, #20]
 80007fe:	4308      	orrs	r0, r1
 8000800:	6170      	str	r0, [r6, #20]
 8000802:	4668      	mov	r0, sp
 8000804:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8000806:	2800      	cmp	r0, #0
 8000808:	d027      	beq.n	800085a <USBPD_PE_SendExtendedMessage+0xe6>
 800080a:	9401      	str	r4, [sp, #4]
 800080c:	4668      	mov	r0, sp
 800080e:	7b00      	ldrb	r0, [r0, #12]
 8000810:	f000 fa98 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8000814:	2801      	cmp	r0, #1
 8000816:	d101      	bne.n	800081c <USBPD_PE_SendExtendedMessage+0xa8>
 8000818:	2004      	movs	r0, #4
 800081a:	9001      	str	r0, [sp, #4]
 800081c:	9702      	str	r7, [sp, #8]
 800081e:	9801      	ldr	r0, [sp, #4]
 8000820:	4669      	mov	r1, sp
 8000822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8000824:	4fa1      	ldr	r7, [pc, #644]	; (8000aac <.text_46>)
 8000826:	e012      	b.n	800084e <USBPD_PE_SendExtendedMessage+0xda>
 8000828:	210d      	movs	r1, #13
 800082a:	e7e4      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 800082c:	210e      	movs	r1, #14
 800082e:	e7e2      	b.n	80007f6 <USBPD_PE_SendExtendedMessage+0x82>
 8000830:	205b      	movs	r0, #91	; 0x5b
 8000832:	499d      	ldr	r1, [pc, #628]	; (8000aa8 <.text_45>)
 8000834:	1871      	adds	r1, r6, r1
 8000836:	7088      	strb	r0, [r1, #2]
 8000838:	e7e3      	b.n	8000802 <USBPD_PE_SendExtendedMessage+0x8e>
 800083a:	205c      	movs	r0, #92	; 0x5c
 800083c:	e7f9      	b.n	8000832 <USBPD_PE_SendExtendedMessage+0xbe>
 800083e:	2510      	movs	r5, #16
 8000840:	e01e      	b.n	8000880 <USBPD_PE_SendExtendedMessage+0x10c>
 8000842:	9a02      	ldr	r2, [sp, #8]
 8000844:	5d12      	ldrb	r2, [r2, r4]
 8000846:	1823      	adds	r3, r4, r0
 8000848:	18f3      	adds	r3, r6, r3
 800084a:	55da      	strb	r2, [r3, r7]
 800084c:	1c64      	adds	r4, r4, #1
 800084e:	428c      	cmp	r4, r1
 8000850:	d3f7      	bcc.n	8000842 <USBPD_PE_SendExtendedMessage+0xce>
 8000852:	2092      	movs	r0, #146	; 0x92
 8000854:	00c0      	lsls	r0, r0, #3
 8000856:	5231      	strh	r1, [r6, r0]
 8000858:	e002      	b.n	8000860 <USBPD_PE_SendExtendedMessage+0xec>
 800085a:	2092      	movs	r0, #146	; 0x92
 800085c:	00c0      	lsls	r0, r0, #3
 800085e:	5234      	strh	r4, [r6, r0]
 8000860:	4668      	mov	r0, sp
 8000862:	7c00      	ldrb	r0, [r0, #16]
 8000864:	2133      	movs	r1, #51	; 0x33
 8000866:	5470      	strb	r0, [r6, r1]
 8000868:	4668      	mov	r0, sp
 800086a:	7800      	ldrb	r0, [r0, #0]
 800086c:	498e      	ldr	r1, [pc, #568]	; (8000aa8 <.text_45>)
 800086e:	5470      	strb	r0, [r6, r1]
 8000870:	2031      	movs	r0, #49	; 0x31
 8000872:	2132      	movs	r1, #50	; 0x32
 8000874:	5470      	strb	r0, [r6, r1]
 8000876:	4668      	mov	r0, sp
 8000878:	7b00      	ldrb	r0, [r0, #12]
 800087a:	68b1      	ldr	r1, [r6, #8]
 800087c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800087e:	4788      	blx	r1
 8000880:	0028      	movs	r0, r5
 8000882:	b005      	add	sp, #20
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000888 <.text_30>:
 8000888:	0000025e 	.word	0x0000025e

0800088c <PE_Send_RESET>:
 800088c:	b538      	push	{r3, r4, r5, lr}
 800088e:	0005      	movs	r5, r0
 8000890:	000c      	movs	r4, r1
 8000892:	2c05      	cmp	r4, #5
 8000894:	d101      	bne.n	800089a <PE_Send_RESET+0xe>
 8000896:	211f      	movs	r1, #31
 8000898:	e000      	b.n	800089c <PE_Send_RESET+0x10>
 800089a:	215e      	movs	r1, #94	; 0x5e
 800089c:	7c28      	ldrb	r0, [r5, #16]
 800089e:	f7ff fdef 	bl	8000480 <USBPD_PE_Notification>
 80008a2:	0021      	movs	r1, r4
 80008a4:	7c28      	ldrb	r0, [r5, #16]
 80008a6:	f005 f9ab 	bl	8005c00 <USBPD_PRL_ResetRequestProcess>
 80008aa:	f3ef 8010 	mrs	r0, PRIMASK
 80008ae:	b672      	cpsid	i
 80008b0:	2100      	movs	r1, #0
 80008b2:	223c      	movs	r2, #60	; 0x3c
 80008b4:	54a9      	strb	r1, [r5, r2]
 80008b6:	f380 8810 	msr	PRIMASK, r0
 80008ba:	bd31      	pop	{r0, r4, r5, pc}

080008bc <PE_Get_SpecRevision>:
 80008bc:	4965      	ldr	r1, [pc, #404]	; (8000a54 <.text_43>)
 80008be:	0080      	lsls	r0, r0, #2
 80008c0:	5808      	ldr	r0, [r1, r0]
 80008c2:	6840      	ldr	r0, [r0, #4]
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	0780      	lsls	r0, r0, #30
 80008c8:	0f80      	lsrs	r0, r0, #30
 80008ca:	4770      	bx	lr

080008cc <PE_ChangePowerRole>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	6842      	ldr	r2, [r0, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	2404      	movs	r4, #4
 80008d4:	43a3      	bics	r3, r4
 80008d6:	008c      	lsls	r4, r1, #2
 80008d8:	2504      	movs	r5, #4
 80008da:	402c      	ands	r4, r5
 80008dc:	431c      	orrs	r4, r3
 80008de:	6014      	str	r4, [r2, #0]
 80008e0:	7c00      	ldrb	r0, [r0, #16]
 80008e2:	f004 ff0a 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80008e6:	bd31      	pop	{r0, r4, r5, pc}

080008e8 <PE_Get_RxEvent>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0001      	movs	r1, r0
 80008ec:	2014      	movs	r0, #20
 80008ee:	f3ef 8210 	mrs	r2, PRIMASK
 80008f2:	b672      	cpsid	i
 80008f4:	233c      	movs	r3, #60	; 0x3c
 80008f6:	5ccc      	ldrb	r4, [r1, r3]
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d029      	beq.n	8000950 <PE_Get_RxEvent+0x68>
 80008fc:	2393      	movs	r3, #147	; 0x93
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18cb      	adds	r3, r1, r3
 8000902:	5d1d      	ldrb	r5, [r3, r4]
 8000904:	066d      	lsls	r5, r5, #25
 8000906:	d401      	bmi.n	800090c <PE_Get_RxEvent+0x24>
 8000908:	2003      	movs	r0, #3
 800090a:	e021      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800090c:	2584      	movs	r5, #132	; 0x84
 800090e:	006d      	lsls	r5, r5, #1
 8000910:	436c      	muls	r4, r5
 8000912:	190c      	adds	r4, r1, r4
 8000914:	3ccb      	subs	r4, #203	; 0xcb
 8000916:	638c      	str	r4, [r1, #56]	; 0x38
 8000918:	7825      	ldrb	r5, [r4, #0]
 800091a:	7864      	ldrb	r4, [r4, #1]
 800091c:	0224      	lsls	r4, r4, #8
 800091e:	192c      	adds	r4, r5, r4
 8000920:	868c      	strh	r4, [r1, #52]	; 0x34
 8000922:	000c      	movs	r4, r1
 8000924:	3430      	adds	r4, #48	; 0x30
 8000926:	253c      	movs	r5, #60	; 0x3c
 8000928:	5d49      	ldrb	r1, [r1, r5]
 800092a:	5c59      	ldrb	r1, [r3, r1]
 800092c:	06c9      	lsls	r1, r1, #27
 800092e:	0ec9      	lsrs	r1, r1, #27
 8000930:	2901      	cmp	r1, #1
 8000932:	d004      	beq.n	800093e <PE_Get_RxEvent+0x56>
 8000934:	2902      	cmp	r1, #2
 8000936:	d005      	beq.n	8000944 <PE_Get_RxEvent+0x5c>
 8000938:	2904      	cmp	r1, #4
 800093a:	d006      	beq.n	800094a <PE_Get_RxEvent+0x62>
 800093c:	e008      	b.n	8000950 <PE_Get_RxEvent+0x68>
 800093e:	2011      	movs	r0, #17
 8000940:	2100      	movs	r1, #0
 8000942:	e004      	b.n	800094e <PE_Get_RxEvent+0x66>
 8000944:	2012      	movs	r0, #18
 8000946:	2101      	movs	r1, #1
 8000948:	e001      	b.n	800094e <PE_Get_RxEvent+0x66>
 800094a:	2013      	movs	r0, #19
 800094c:	2102      	movs	r1, #2
 800094e:	7021      	strb	r1, [r4, #0]
 8000950:	f382 8810 	msr	PRIMASK, r2
 8000954:	bd30      	pop	{r4, r5, pc}

08000956 <PE_Clear_RxEvent>:
 8000956:	b510      	push	{r4, lr}
 8000958:	0001      	movs	r1, r0
 800095a:	f3ef 8010 	mrs	r0, PRIMASK
 800095e:	b672      	cpsid	i
 8000960:	223c      	movs	r2, #60	; 0x3c
 8000962:	5c8a      	ldrb	r2, [r1, r2]
 8000964:	2a00      	cmp	r2, #0
 8000966:	d014      	beq.n	8000992 <PE_Clear_RxEvent+0x3c>
 8000968:	1e53      	subs	r3, r2, #1
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4acb      	ldr	r2, [pc, #812]	; (8000c9c <.text_56>)
 800096e:	188c      	adds	r4, r1, r2
 8000970:	2200      	movs	r2, #0
 8000972:	54e2      	strb	r2, [r4, r3]
 8000974:	1e5b      	subs	r3, r3, #1
 8000976:	419b      	sbcs	r3, r3
 8000978:	0fdb      	lsrs	r3, r3, #31
 800097a:	5ce4      	ldrb	r4, [r4, r3]
 800097c:	0664      	lsls	r4, r4, #25
 800097e:	d506      	bpl.n	800098e <PE_Clear_RxEvent+0x38>
 8000980:	1c5b      	adds	r3, r3, #1
 8000982:	223c      	movs	r2, #60	; 0x3c
 8000984:	548b      	strb	r3, [r1, r2]
 8000986:	f380 8810 	msr	PRIMASK, r0
 800098a:	7c08      	ldrb	r0, [r1, #16]
 800098c:	e168      	b.n	8000c60 <.text_54>
 800098e:	233c      	movs	r3, #60	; 0x3c
 8000990:	54ca      	strb	r2, [r1, r3]
 8000992:	f380 8810 	msr	PRIMASK, r0
 8000996:	bd10      	pop	{r4, pc}

08000998 <.text_36>:
 8000998:	00000302 	.word	0x00000302

0800099c <.text_37>:
 800099c:	00000703 	.word	0x00000703

080009a0 <PE_PRL_Control_RxEvent>:
 80009a0:	492c      	ldr	r1, [pc, #176]	; (8000a54 <.text_43>)
 80009a2:	0080      	lsls	r0, r0, #2
 80009a4:	580a      	ldr	r2, [r1, r0]
 80009a6:	2000      	movs	r0, #0
 80009a8:	f3ef 8110 	mrs	r1, PRIMASK
 80009ac:	b672      	cpsid	i
 80009ae:	233c      	movs	r3, #60	; 0x3c
 80009b0:	5cd2      	ldrb	r2, [r2, r3]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d000      	beq.n	80009b8 <PE_PRL_Control_RxEvent+0x18>
 80009b6:	2001      	movs	r0, #1
 80009b8:	f381 8810 	msr	PRIMASK, r1
 80009bc:	4770      	bx	lr
	...

080009c0 <.text_39>:
 80009c0:	0000025f 	.word	0x0000025f

080009c4 <.text_40>:
 80009c4:	00000704 	.word	0x00000704

080009c8 <PE_Convert_SOPRxEvent>:
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d003      	beq.n	80009d4 <PE_Convert_SOPRxEvent+0xc>
 80009cc:	2802      	cmp	r0, #2
 80009ce:	d005      	beq.n	80009dc <PE_Convert_SOPRxEvent+0x14>
 80009d0:	d302      	bcc.n	80009d8 <PE_Convert_SOPRxEvent+0x10>
 80009d2:	e005      	b.n	80009e0 <PE_Convert_SOPRxEvent+0x18>
 80009d4:	2011      	movs	r0, #17
 80009d6:	4770      	bx	lr
 80009d8:	2012      	movs	r0, #18
 80009da:	4770      	bx	lr
 80009dc:	2013      	movs	r0, #19
 80009de:	4770      	bx	lr
 80009e0:	2014      	movs	r0, #20
 80009e2:	4770      	bx	lr

080009e4 <PE_Check_AMSConflict>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	0005      	movs	r5, r0
 80009e8:	2400      	movs	r4, #0
 80009ea:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80009ec:	49b7      	ldr	r1, [pc, #732]	; (8000ccc <.text_58>)
 80009ee:	4001      	ands	r1, r0
 80009f0:	290d      	cmp	r1, #13
 80009f2:	d101      	bne.n	80009f8 <PE_Check_AMSConflict+0x14>
 80009f4:	2010      	movs	r0, #16
 80009f6:	e01b      	b.n	8000a30 <PE_Check_AMSConflict+0x4c>
 80009f8:	2603      	movs	r6, #3
 80009fa:	200f      	movs	r0, #15
 80009fc:	7f29      	ldrb	r1, [r5, #28]
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d011      	beq.n	8000a26 <PE_Check_AMSConflict+0x42>
 8000a02:	1e49      	subs	r1, r1, #1
 8000a04:	2901      	cmp	r1, #1
 8000a06:	d912      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a08:	1e89      	subs	r1, r1, #2
 8000a0a:	d011      	beq.n	8000a30 <PE_Check_AMSConflict+0x4c>
 8000a0c:	1e49      	subs	r1, r1, #1
 8000a0e:	d01d      	beq.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a10:	1e49      	subs	r1, r1, #1
 8000a12:	2909      	cmp	r1, #9
 8000a14:	d90b      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a16:	390b      	subs	r1, #11
 8000a18:	2901      	cmp	r1, #1
 8000a1a:	d908      	bls.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a1c:	1e89      	subs	r1, r1, #2
 8000a1e:	d004      	beq.n	8000a2a <PE_Check_AMSConflict+0x46>
 8000a20:	394d      	subs	r1, #77	; 0x4d
 8000a22:	d004      	beq.n	8000a2e <PE_Check_AMSConflict+0x4a>
 8000a24:	e006      	b.n	8000a34 <PE_Check_AMSConflict+0x50>
 8000a26:	746e      	strb	r6, [r5, #17]
 8000a28:	e011      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2a:	7468      	strb	r0, [r5, #17]
 8000a2c:	e00f      	b.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a2e:	2011      	movs	r0, #17
 8000a30:	7468      	strb	r0, [r5, #17]
 8000a32:	e00b      	b.n	8000a4c <PE_Check_AMSConflict+0x68>
 8000a34:	215c      	movs	r1, #92	; 0x5c
 8000a36:	7c28      	ldrb	r0, [r5, #16]
 8000a38:	f7ff fd22 	bl	8000480 <USBPD_PE_Notification>
 8000a3c:	746e      	strb	r6, [r5, #17]
 8000a3e:	6868      	ldr	r0, [r5, #4]
 8000a40:	6800      	ldr	r0, [r0, #0]
 8000a42:	49c4      	ldr	r1, [pc, #784]	; (8000d54 <.text_62>)
 8000a44:	4001      	ands	r1, r0
 8000a46:	0230      	lsls	r0, r6, #8
 8000a48:	4281      	cmp	r1, r0
 8000a4a:	d000      	beq.n	8000a4e <PE_Check_AMSConflict+0x6a>
 8000a4c:	2415      	movs	r4, #21
 8000a4e:	0020      	movs	r0, r4
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a54 <.text_43>:
 8000a54:	2000053c 	.word	0x2000053c

08000a58 <PE_PRL_ResetReceived>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	48be      	ldr	r0, [pc, #760]	; (8000d58 <.text_63>)
 8000a5e:	00a2      	lsls	r2, r4, #2
 8000a60:	5885      	ldr	r5, [r0, r2]
 8000a62:	2905      	cmp	r1, #5
 8000a64:	d115      	bne.n	8000a92 <PE_PRL_ResetReceived+0x3a>
 8000a66:	6868      	ldr	r0, [r5, #4]
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	4391      	bics	r1, r2
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6968      	ldr	r0, [r5, #20]
 8000a72:	49ba      	ldr	r1, [pc, #744]	; (8000d5c <.text_64>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	0150      	lsls	r0, r2, #5
 8000a78:	4308      	orrs	r0, r1
 8000a7a:	6168      	str	r0, [r5, #20]
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	2132      	movs	r1, #50	; 0x32
 8000a80:	5468      	strb	r0, [r5, r1]
 8000a82:	2000      	movs	r0, #0
 8000a84:	213c      	movs	r1, #60	; 0x3c
 8000a86:	5468      	strb	r0, [r5, r1]
 8000a88:	211e      	movs	r1, #30
 8000a8a:	7c28      	ldrb	r0, [r5, #16]
 8000a8c:	f7ff fcf8 	bl	8000480 <USBPD_PE_Notification>
 8000a90:	e004      	b.n	8000a9c <PE_PRL_ResetReceived+0x44>
 8000a92:	6968      	ldr	r0, [r5, #20]
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	02c9      	lsls	r1, r1, #11
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	6169      	str	r1, [r5, #20]
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	68a9      	ldr	r1, [r5, #8]
 8000aa0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000aa2:	4788      	blx	r1
 8000aa4:	bd31      	pop	{r0, r4, r5, pc}
	...

08000aa8 <.text_45>:
 8000aa8:	0000025d 	.word	0x0000025d

08000aac <.text_46>:
 8000aac:	00000385 	.word	0x00000385

08000ab0 <PE_PRL_BistCompleted>:
 8000ab0:	4770      	bx	lr

08000ab2 <PE_Reset_HardReset>:
 8000ab2:	b538      	push	{r3, r4, r5, lr}
 8000ab4:	0004      	movs	r4, r0
 8000ab6:	2032      	movs	r0, #50	; 0x32
 8000ab8:	5c20      	ldrb	r0, [r4, r0]
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d003      	beq.n	8000ac6 <PE_Reset_HardReset+0x14>
 8000abe:	215b      	movs	r1, #91	; 0x5b
 8000ac0:	7c20      	ldrb	r0, [r4, #16]
 8000ac2:	f7ff fcdd 	bl	8000480 <USBPD_PE_Notification>
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f000 f82c 	bl	8000b24 <PE_Reset_ZI>
 8000acc:	2503      	movs	r5, #3
 8000ace:	6820      	ldr	r0, [r4, #0]
 8000ad0:	6843      	ldr	r3, [r0, #4]
 8000ad2:	402b      	ands	r3, r5
 8000ad4:	7c20      	ldrb	r0, [r4, #16]
 8000ad6:	6861      	ldr	r1, [r4, #4]
 8000ad8:	6809      	ldr	r1, [r1, #0]
 8000ada:	074a      	lsls	r2, r1, #29
 8000adc:	0fd2      	lsrs	r2, r2, #31
 8000ade:	d008      	beq.n	8000af2 <PE_Reset_HardReset+0x40>
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	f004 fdee 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000ae6:	6860      	ldr	r0, [r4, #4]
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	2208      	movs	r2, #8
 8000aec:	430a      	orrs	r2, r1
 8000aee:	6002      	str	r2, [r0, #0]
 8000af0:	e007      	b.n	8000b02 <PE_Reset_HardReset+0x50>
 8000af2:	2100      	movs	r1, #0
 8000af4:	f004 fde5 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000af8:	6860      	ldr	r0, [r4, #4]
 8000afa:	6801      	ldr	r1, [r0, #0]
 8000afc:	2208      	movs	r2, #8
 8000afe:	4391      	bics	r1, r2
 8000b00:	6001      	str	r1, [r0, #0]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	6840      	ldr	r0, [r0, #4]
 8000b06:	4005      	ands	r5, r0
 8000b08:	6860      	ldr	r0, [r4, #4]
 8000b0a:	6801      	ldr	r1, [r0, #0]
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	4391      	bics	r1, r2
 8000b10:	430d      	orrs	r5, r1
 8000b12:	6005      	str	r5, [r0, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	7c20      	ldrb	r0, [r4, #16]
 8000b18:	f004 fe44 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8000b1c:	7c20      	ldrb	r0, [r4, #16]
 8000b1e:	f005 f8ad 	bl	8005c7c <USBPD_PRL_Reset>
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Reset_ZI>:
 8000b24:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000b26:	0004      	movs	r4, r0
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	6860      	ldr	r0, [r4, #4]
 8000b2e:	6801      	ldr	r1, [r0, #0]
 8000b30:	2210      	movs	r2, #16
 8000b32:	4391      	bics	r1, r2
 8000b34:	6001      	str	r1, [r0, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	0020      	movs	r0, r4
 8000b3a:	f000 fc34 	bl	80013a6 <PE_SetPowerNegotiation>
 8000b3e:	2193      	movs	r1, #147	; 0x93
 8000b40:	0089      	lsls	r1, r1, #2
 8000b42:	0020      	movs	r0, r4
 8000b44:	3014      	adds	r0, #20
 8000b46:	f027 f91f 	bl	8027d88 <__aeabi_memclr>
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	aa01      	add	r2, sp, #4
 8000b4e:	2102      	movs	r1, #2
 8000b50:	7c20      	ldrb	r0, [r4, #16]
 8000b52:	68a5      	ldr	r5, [r4, #8]
 8000b54:	69ad      	ldr	r5, [r5, #24]
 8000b56:	47a8      	blx	r5
 8000b58:	2080      	movs	r0, #128	; 0x80
 8000b5a:	0440      	lsls	r0, r0, #17
 8000b5c:	9000      	str	r0, [sp, #0]
 8000b5e:	2304      	movs	r3, #4
 8000b60:	466a      	mov	r2, sp
 8000b62:	2106      	movs	r1, #6
 8000b64:	7c20      	ldrb	r0, [r4, #16]
 8000b66:	68a5      	ldr	r5, [r4, #8]
 8000b68:	69ad      	ldr	r5, [r5, #24]
 8000b6a:	47a8      	blx	r5
 8000b6c:	2503      	movs	r5, #3
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	6841      	ldr	r1, [r0, #4]
 8000b72:	4029      	ands	r1, r5
 8000b74:	7c20      	ldrb	r0, [r4, #16]
 8000b76:	f004 fde2 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8000b7a:	6820      	ldr	r0, [r4, #0]
 8000b7c:	6840      	ldr	r0, [r0, #4]
 8000b7e:	4005      	ands	r5, r0
 8000b80:	6860      	ldr	r0, [r4, #4]
 8000b82:	6801      	ldr	r1, [r0, #0]
 8000b84:	4a76      	ldr	r2, [pc, #472]	; (8000d60 <.text_65>)
 8000b86:	400a      	ands	r2, r1
 8000b88:	06a9      	lsls	r1, r5, #26
 8000b8a:	4311      	orrs	r1, r2
 8000b8c:	6001      	str	r1, [r0, #0]
 8000b8e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b90 <PE_Reset_Counter>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	2103      	movs	r1, #3
 8000b94:	2298      	movs	r2, #152	; 0x98
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	1880      	adds	r0, r0, r2
 8000b9a:	f027 f8f5 	bl	8027d88 <__aeabi_memclr>
 8000b9e:	bd01      	pop	{r0, pc}

08000ba0 <PE_Reset_StateMachine>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	0004      	movs	r4, r0
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	5c20      	ldrb	r0, [r4, r0]
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d003      	beq.n	8000bb4 <PE_Reset_StateMachine+0x14>
 8000bac:	215b      	movs	r1, #91	; 0x5b
 8000bae:	7c20      	ldrb	r0, [r4, #16]
 8000bb0:	f7ff fc66 	bl	8000480 <USBPD_PE_Notification>
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f7ff ffb5 	bl	8000b24 <PE_Reset_ZI>
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0020      	movs	r0, r4
 8000bbe:	f000 fbf2 	bl	80013a6 <PE_SetPowerNegotiation>
 8000bc2:	7c20      	ldrb	r0, [r4, #16]
 8000bc4:	f005 f85a 	bl	8005c7c <USBPD_PRL_Reset>
 8000bc8:	6860      	ldr	r0, [r4, #4]
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	2501      	movs	r5, #1
 8000bce:	08ca      	lsrs	r2, r1, #3
 8000bd0:	402a      	ands	r2, r5
 8000bd2:	078b      	lsls	r3, r1, #30
 8000bd4:	0f9b      	lsrs	r3, r3, #30
 8000bd6:	7c20      	ldrb	r0, [r4, #16]
 8000bd8:	0889      	lsrs	r1, r1, #2
 8000bda:	400d      	ands	r5, r1
 8000bdc:	d004      	beq.n	8000be8 <PE_Reset_StateMachine+0x48>
 8000bde:	2101      	movs	r1, #1
 8000be0:	f004 fd6f 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000be4:	2002      	movs	r0, #2
 8000be6:	e003      	b.n	8000bf0 <PE_Reset_StateMachine+0x50>
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 fd6a 	bl	80056c2 <USBPD_PRL_SetHeader>
 8000bee:	203e      	movs	r0, #62	; 0x3e
 8000bf0:	7460      	strb	r0, [r4, #17]
 8000bf2:	bd31      	pop	{r0, r4, r5, pc}

08000bf4 <PE_ExtRevisionInteroperability>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	4957      	ldr	r1, [pc, #348]	; (8000d58 <.text_63>)
 8000bfa:	0083      	lsls	r3, r0, #2
 8000bfc:	58cb      	ldr	r3, [r1, r3]
 8000bfe:	685c      	ldr	r4, [r3, #4]
 8000c00:	6825      	ldr	r5, [r4, #0]
 8000c02:	2103      	movs	r1, #3
 8000c04:	2603      	movs	r6, #3
 8000c06:	402e      	ands	r6, r5
 8000c08:	42b2      	cmp	r2, r6
 8000c0a:	db00      	blt.n	8000c0e <PE_ExtRevisionInteroperability+0x1a>
 8000c0c:	0032      	movs	r2, r6
 8000c0e:	438d      	bics	r5, r1
 8000c10:	400a      	ands	r2, r1
 8000c12:	432a      	orrs	r2, r5
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	6814      	ldr	r4, [r2, #0]
 8000c1a:	2503      	movs	r5, #3
 8000c1c:	4025      	ands	r5, r4
 8000c1e:	2d01      	cmp	r5, #1
 8000c20:	d101      	bne.n	8000c26 <PE_ExtRevisionInteroperability+0x32>
 8000c22:	2500      	movs	r5, #0
 8000c24:	e000      	b.n	8000c28 <PE_ExtRevisionInteroperability+0x34>
 8000c26:	2520      	movs	r5, #32
 8000c28:	2620      	movs	r6, #32
 8000c2a:	43b4      	bics	r4, r6
 8000c2c:	4325      	orrs	r5, r4
 8000c2e:	6015      	str	r5, [r2, #0]
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	4011      	ands	r1, r2
 8000c36:	f004 fd76 	bl	8005726 <USBPD_PRL_SetHeaderSpecification>
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}

08000c3c <PE_PRL_FastRoleSwapReception>:
 8000c3c:	4946      	ldr	r1, [pc, #280]	; (8000d58 <.text_63>)
 8000c3e:	0082      	lsls	r2, r0, #2
 8000c40:	5889      	ldr	r1, [r1, r2]
 8000c42:	7f0a      	ldrb	r2, [r1, #28]
 8000c44:	2a09      	cmp	r2, #9
 8000c46:	d100      	bne.n	8000c4a <PE_PRL_FastRoleSwapReception+0xe>
 8000c48:	4770      	bx	lr
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	684a      	ldr	r2, [r1, #4]
 8000c4e:	6813      	ldr	r3, [r2, #0]
 8000c50:	2410      	movs	r4, #16
 8000c52:	431c      	orrs	r4, r3
 8000c54:	6014      	str	r4, [r2, #0]
 8000c56:	694a      	ldr	r2, [r1, #20]
 8000c58:	2380      	movs	r3, #128	; 0x80
 8000c5a:	029b      	lsls	r3, r3, #10
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	614b      	str	r3, [r1, #20]

08000c60 <.text_54>:
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000c64:	4788      	blx	r1
 8000c66:	bd10      	pop	{r4, pc}

08000c68 <PE_PRL_PostReceiveEvent>:
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	4a3b      	ldr	r2, [pc, #236]	; (8000d58 <.text_63>)
 8000c6c:	0080      	lsls	r0, r0, #2
 8000c6e:	5813      	ldr	r3, [r2, r0]
 8000c70:	2400      	movs	r4, #0
 8000c72:	2000      	movs	r0, #0
 8000c74:	191a      	adds	r2, r3, r4
 8000c76:	4d09      	ldr	r5, [pc, #36]	; (8000c9c <.text_56>)
 8000c78:	1952      	adds	r2, r2, r5
 8000c7a:	7815      	ldrb	r5, [r2, #0]
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d004      	beq.n	8000c8a <PE_PRL_PostReceiveEvent+0x22>
 8000c80:	1c64      	adds	r4, r4, #1
 8000c82:	b2e4      	uxtb	r4, r4
 8000c84:	2c01      	cmp	r4, #1
 8000c86:	d9f5      	bls.n	8000c74 <PE_PRL_PostReceiveEvent+0xc>
 8000c88:	bd30      	pop	{r4, r5, pc}
 8000c8a:	2020      	movs	r0, #32
 8000c8c:	7010      	strb	r0, [r2, #0]
 8000c8e:	2001      	movs	r0, #1
 8000c90:	7813      	ldrb	r3, [r2, #0]
 8000c92:	2401      	movs	r4, #1
 8000c94:	408c      	lsls	r4, r1
 8000c96:	431c      	orrs	r4, r3
 8000c98:	7014      	strb	r4, [r2, #0]
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <.text_56>:
 8000c9c:	0000024d 	.word	0x0000024d

08000ca0 <PE_PRL_PostReceiveEventError>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	492d      	ldr	r1, [pc, #180]	; (8000d58 <.text_63>)
 8000ca4:	0080      	lsls	r0, r0, #2
 8000ca6:	5809      	ldr	r1, [r1, r0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	2200      	movs	r2, #0
 8000cac:	b2d3      	uxtb	r3, r2
 8000cae:	18cb      	adds	r3, r1, r3
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <.text_66>)
 8000cb2:	191b      	adds	r3, r3, r4
 8000cb4:	781c      	ldrb	r4, [r3, #0]
 8000cb6:	2560      	movs	r5, #96	; 0x60
 8000cb8:	4025      	ands	r5, r4
 8000cba:	2d20      	cmp	r5, #32
 8000cbc:	d004      	beq.n	8000cc8 <PE_PRL_PostReceiveEventError+0x28>
 8000cbe:	1c52      	adds	r2, r2, #1
 8000cc0:	b2d3      	uxtb	r3, r2
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d3f2      	bcc.n	8000cac <PE_PRL_PostReceiveEventError+0xc>
 8000cc6:	bd30      	pop	{r4, r5, pc}
 8000cc8:	7018      	strb	r0, [r3, #0]
 8000cca:	bd30      	pop	{r4, r5, pc}

08000ccc <.text_58>:
 8000ccc:	0000f01f 	.word	0x0000f01f

08000cd0 <PE_PRL_PostReceiveEventCopy>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <.text_63>)
 8000cd4:	0080      	lsls	r0, r0, #2
 8000cd6:	5813      	ldr	r3, [r2, r0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	b2d0      	uxtb	r0, r2
 8000cdc:	181c      	adds	r4, r3, r0
 8000cde:	4d21      	ldr	r5, [pc, #132]	; (8000d64 <.text_66>)
 8000ce0:	5d64      	ldrb	r4, [r4, r5]
 8000ce2:	2560      	movs	r5, #96	; 0x60
 8000ce4:	4025      	ands	r5, r4
 8000ce6:	2d20      	cmp	r5, #32
 8000ce8:	d004      	beq.n	8000cf4 <PE_PRL_PostReceiveEventCopy+0x24>
 8000cea:	1c52      	adds	r2, r2, #1
 8000cec:	b2d0      	uxtb	r0, r2
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d3f3      	bcc.n	8000cda <PE_PRL_PostReceiveEventCopy+0xa>
 8000cf2:	bd31      	pop	{r0, r4, r5, pc}
 8000cf4:	2284      	movs	r2, #132	; 0x84
 8000cf6:	0052      	lsls	r2, r2, #1
 8000cf8:	4350      	muls	r0, r2
 8000cfa:	1818      	adds	r0, r3, r0
 8000cfc:	303d      	adds	r0, #61	; 0x3d
 8000cfe:	f027 f838 	bl	8027d72 <__aeabi_memcpy>
 8000d02:	bd31      	pop	{r0, r4, r5, pc}

08000d04 <PE_PRL_PostReceiveEventComplete>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4914      	ldr	r1, [pc, #80]	; (8000d58 <.text_63>)
 8000d08:	0082      	lsls	r2, r0, #2
 8000d0a:	5889      	ldr	r1, [r1, r2]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	18cb      	adds	r3, r1, r3
 8000d12:	4c14      	ldr	r4, [pc, #80]	; (8000d64 <.text_66>)
 8000d14:	191b      	adds	r3, r3, r4
 8000d16:	781c      	ldrb	r4, [r3, #0]
 8000d18:	2560      	movs	r5, #96	; 0x60
 8000d1a:	4025      	ands	r5, r4
 8000d1c:	2d20      	cmp	r5, #32
 8000d1e:	d003      	beq.n	8000d28 <PE_PRL_PostReceiveEventComplete+0x24>
 8000d20:	b2d3      	uxtb	r3, r2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d3f3      	bcc.n	8000d0e <PE_PRL_PostReceiveEventComplete+0xa>
 8000d26:	bd31      	pop	{r0, r4, r5, pc}
 8000d28:	781c      	ldrb	r4, [r3, #0]
 8000d2a:	2540      	movs	r5, #64	; 0x40
 8000d2c:	4325      	orrs	r5, r4
 8000d2e:	701d      	strb	r5, [r3, #0]
 8000d30:	233c      	movs	r3, #60	; 0x3c
 8000d32:	5ccb      	ldrb	r3, [r1, r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <PE_PRL_PostReceiveEventComplete+0x38>
 8000d38:	233c      	movs	r3, #60	; 0x3c
 8000d3a:	54ca      	strb	r2, [r1, r3]
 8000d3c:	6889      	ldr	r1, [r1, #8]
 8000d3e:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d40:	4788      	blx	r1
 8000d42:	bd31      	pop	{r0, r4, r5, pc}

08000d44 <PE_Get_UnchunkedSupport>:
 8000d44:	4904      	ldr	r1, [pc, #16]	; (8000d58 <.text_63>)
 8000d46:	0080      	lsls	r0, r0, #2
 8000d48:	5808      	ldr	r0, [r1, r0]
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	6800      	ldr	r0, [r0, #0]
 8000d4e:	0181      	lsls	r1, r0, #6
 8000d50:	0fc8      	lsrs	r0, r1, #31
 8000d52:	4770      	bx	lr

08000d54 <.text_62>:
 8000d54:	00000704 	.word	0x00000704

08000d58 <.text_63>:
 8000d58:	2000053c 	.word	0x2000053c

08000d5c <.text_64>:
 8000d5c:	fffff9ff 	.word	0xfffff9ff

08000d60 <.text_65>:
 8000d60:	f3ffffff 	.word	0xf3ffffff

08000d64 <.text_66>:
 8000d64:	0000024d 	.word	0x0000024d

08000d68 <PE_SubStateMachine_Generic>:
 8000d68:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000d6a:	b08d      	sub	sp, #52	; 0x34
 8000d6c:	0004      	movs	r4, r0
 8000d6e:	2002      	movs	r0, #2
 8000d70:	9004      	str	r0, [sp, #16]
 8000d72:	2500      	movs	r5, #0
 8000d74:	9503      	str	r5, [sp, #12]
 8000d76:	2601      	movs	r6, #1
 8000d78:	2714      	movs	r7, #20
 8000d7a:	7c61      	ldrb	r1, [r4, #17]
 8000d7c:	2901      	cmp	r1, #1
 8000d7e:	d100      	bne.n	8000d82 <PE_SubStateMachine_Generic+0x1a>
 8000d80:	e195      	b.n	80010ae <PE_SubStateMachine_Generic+0x346>
 8000d82:	2918      	cmp	r1, #24
 8000d84:	d03f      	beq.n	8000e06 <PE_SubStateMachine_Generic+0x9e>
 8000d86:	2919      	cmp	r1, #25
 8000d88:	d050      	beq.n	8000e2c <PE_SubStateMachine_Generic+0xc4>
 8000d8a:	291d      	cmp	r1, #29
 8000d8c:	d100      	bne.n	8000d90 <PE_SubStateMachine_Generic+0x28>
 8000d8e:	e092      	b.n	8000eb6 <PE_SubStateMachine_Generic+0x14e>
 8000d90:	2927      	cmp	r1, #39	; 0x27
 8000d92:	d100      	bne.n	8000d96 <PE_SubStateMachine_Generic+0x2e>
 8000d94:	e0b0      	b.n	8000ef8 <PE_SubStateMachine_Generic+0x190>
 8000d96:	2928      	cmp	r1, #40	; 0x28
 8000d98:	d100      	bne.n	8000d9c <PE_SubStateMachine_Generic+0x34>
 8000d9a:	e0b9      	b.n	8000f10 <PE_SubStateMachine_Generic+0x1a8>
 8000d9c:	2929      	cmp	r1, #41	; 0x29
 8000d9e:	d100      	bne.n	8000da2 <PE_SubStateMachine_Generic+0x3a>
 8000da0:	e0c0      	b.n	8000f24 <PE_SubStateMachine_Generic+0x1bc>
 8000da2:	292c      	cmp	r1, #44	; 0x2c
 8000da4:	d100      	bne.n	8000da8 <PE_SubStateMachine_Generic+0x40>
 8000da6:	e2bc      	b.n	8001322 <PE_SubStateMachine_Generic+0x5ba>
 8000da8:	2930      	cmp	r1, #48	; 0x30
 8000daa:	d100      	bne.n	8000dae <PE_SubStateMachine_Generic+0x46>
 8000dac:	e1de      	b.n	800116c <PE_SubStateMachine_Generic+0x404>
 8000dae:	293a      	cmp	r1, #58	; 0x3a
 8000db0:	d100      	bne.n	8000db4 <PE_SubStateMachine_Generic+0x4c>
 8000db2:	e28c      	b.n	80012ce <PE_SubStateMachine_Generic+0x566>
 8000db4:	293b      	cmp	r1, #59	; 0x3b
 8000db6:	d100      	bne.n	8000dba <PE_SubStateMachine_Generic+0x52>
 8000db8:	e270      	b.n	800129c <PE_SubStateMachine_Generic+0x534>
 8000dba:	293c      	cmp	r1, #60	; 0x3c
 8000dbc:	d100      	bne.n	8000dc0 <PE_SubStateMachine_Generic+0x58>
 8000dbe:	e247      	b.n	8001250 <PE_SubStateMachine_Generic+0x4e8>
 8000dc0:	294b      	cmp	r1, #75	; 0x4b
 8000dc2:	d100      	bne.n	8000dc6 <PE_SubStateMachine_Generic+0x5e>
 8000dc4:	e114      	b.n	8000ff0 <PE_SubStateMachine_Generic+0x288>
 8000dc6:	2963      	cmp	r1, #99	; 0x63
 8000dc8:	d100      	bne.n	8000dcc <PE_SubStateMachine_Generic+0x64>
 8000dca:	e178      	b.n	80010be <PE_SubStateMachine_Generic+0x356>
 8000dcc:	2964      	cmp	r1, #100	; 0x64
 8000dce:	d100      	bne.n	8000dd2 <PE_SubStateMachine_Generic+0x6a>
 8000dd0:	e1a0      	b.n	8001114 <PE_SubStateMachine_Generic+0x3ac>
 8000dd2:	2967      	cmp	r1, #103	; 0x67
 8000dd4:	d100      	bne.n	8000dd8 <PE_SubStateMachine_Generic+0x70>
 8000dd6:	e120      	b.n	800101a <PE_SubStateMachine_Generic+0x2b2>
 8000dd8:	2968      	cmp	r1, #104	; 0x68
 8000dda:	d100      	bne.n	8000dde <PE_SubStateMachine_Generic+0x76>
 8000ddc:	e138      	b.n	8001050 <PE_SubStateMachine_Generic+0x2e8>
 8000dde:	2974      	cmp	r1, #116	; 0x74
 8000de0:	d100      	bne.n	8000de4 <PE_SubStateMachine_Generic+0x7c>
 8000de2:	e1f3      	b.n	80011cc <PE_SubStateMachine_Generic+0x464>
 8000de4:	2993      	cmp	r1, #147	; 0x93
 8000de6:	d100      	bne.n	8000dea <PE_SubStateMachine_Generic+0x82>
 8000de8:	e0a6      	b.n	8000f38 <PE_SubStateMachine_Generic+0x1d0>
 8000dea:	2994      	cmp	r1, #148	; 0x94
 8000dec:	d100      	bne.n	8000df0 <PE_SubStateMachine_Generic+0x88>
 8000dee:	e0a7      	b.n	8000f40 <PE_SubStateMachine_Generic+0x1d8>
 8000df0:	2995      	cmp	r1, #149	; 0x95
 8000df2:	d100      	bne.n	8000df6 <PE_SubStateMachine_Generic+0x8e>
 8000df4:	e0bd      	b.n	8000f72 <PE_SubStateMachine_Generic+0x20a>
 8000df6:	2999      	cmp	r1, #153	; 0x99
 8000df8:	d000      	beq.n	8000dfc <PE_SubStateMachine_Generic+0x94>
 8000dfa:	e297      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff fd44 	bl	800088c <PE_Send_RESET>
 8000e04:	e220      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000e06:	6861      	ldr	r1, [r4, #4]
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	0889      	lsrs	r1, r1, #2
 8000e0c:	400e      	ands	r6, r1
 8000e0e:	d002      	beq.n	8000e16 <PE_SubStateMachine_Generic+0xae>
 8000e10:	6960      	ldr	r0, [r4, #20]
 8000e12:	0741      	lsls	r1, r0, #29
 8000e14:	0fc8      	lsrs	r0, r1, #31
 8000e16:	9000      	str	r0, [sp, #0]
 8000e18:	2319      	movs	r3, #25
 8000e1a:	2208      	movs	r2, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f000 fb76 	bl	8001510 <PE_Send_CtrlMessage>
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d156      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000e28:	2007      	movs	r0, #7
 8000e2a:	e107      	b.n	800103c <PE_SubStateMachine_Generic+0x2d4>
 8000e2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e2e:	7800      	ldrb	r0, [r0, #0]
 8000e30:	2811      	cmp	r0, #17
 8000e32:	d13c      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e34:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e36:	0bc1      	lsrs	r1, r0, #15
 8000e38:	d11e      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e3a:	0441      	lsls	r1, r0, #17
 8000e3c:	0f49      	lsrs	r1, r1, #29
 8000e3e:	d01b      	beq.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e40:	06c0      	lsls	r0, r0, #27
 8000e42:	0ec0      	lsrs	r0, r0, #27
 8000e44:	2804      	cmp	r0, #4
 8000e46:	d117      	bne.n	8000e78 <PE_SubStateMachine_Generic+0x110>
 8000e48:	008b      	lsls	r3, r1, #2
 8000e4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e4c:	1c82      	adds	r2, r0, #2
 8000e4e:	2105      	movs	r1, #5
 8000e50:	7c20      	ldrb	r0, [r4, #16]
 8000e52:	68a6      	ldr	r6, [r4, #8]
 8000e54:	69b6      	ldr	r6, [r6, #24]
 8000e56:	47b0      	blx	r6
 8000e58:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e5a:	7800      	ldrb	r0, [r0, #0]
 8000e5c:	2814      	cmp	r0, #20
 8000e5e:	d004      	beq.n	8000e6a <PE_SubStateMachine_Generic+0x102>
 8000e60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8000e62:	700f      	strb	r7, [r1, #0]
 8000e64:	0020      	movs	r0, r4
 8000e66:	f7ff fd76 	bl	8000956 <PE_Clear_RxEvent>
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	7460      	strb	r0, [r4, #17]
 8000e6e:	9504      	str	r5, [sp, #16]
 8000e70:	2107      	movs	r1, #7
 8000e72:	7c20      	ldrb	r0, [r4, #16]
 8000e74:	f7ff fb04 	bl	8000480 <USBPD_PE_Notification>
 8000e78:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000e7a:	21f0      	movs	r1, #240	; 0xf0
 8000e7c:	0209      	lsls	r1, r1, #8
 8000e7e:	4001      	ands	r1, r0
 8000e80:	d115      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e82:	06c0      	lsls	r0, r0, #27
 8000e84:	0ec0      	lsrs	r0, r0, #27
 8000e86:	2804      	cmp	r0, #4
 8000e88:	d001      	beq.n	8000e8e <PE_SubStateMachine_Generic+0x126>
 8000e8a:	2810      	cmp	r0, #16
 8000e8c:	d10f      	bne.n	8000eae <PE_SubStateMachine_Generic+0x146>
 8000e8e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e90:	7800      	ldrb	r0, [r0, #0]
 8000e92:	2814      	cmp	r0, #20
 8000e94:	d004      	beq.n	8000ea0 <PE_SubStateMachine_Generic+0x138>
 8000e96:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000e98:	7007      	strb	r7, [r0, #0]
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f7ff fd5b 	bl	8000956 <PE_Clear_RxEvent>
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	7460      	strb	r0, [r4, #17]
 8000ea4:	9504      	str	r5, [sp, #16]
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	7c20      	ldrb	r0, [r4, #16]
 8000eaa:	f7ff fae9 	bl	8000480 <USBPD_PE_Notification>
 8000eae:	8be0      	ldrh	r0, [r4, #30]
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0209      	lsls	r1, r1, #8
 8000eb4:	e099      	b.n	8000fea <PE_SubStateMachine_Generic+0x282>
 8000eb6:	9505      	str	r5, [sp, #20]
 8000eb8:	ab05      	add	r3, sp, #20
 8000eba:	aa06      	add	r2, sp, #24
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	7c20      	ldrb	r0, [r4, #16]
 8000ec0:	68a5      	ldr	r5, [r4, #8]
 8000ec2:	696d      	ldr	r5, [r5, #20]
 8000ec4:	47a8      	blx	r5
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	9805      	ldr	r0, [sp, #20]
 8000eca:	f000 fabf 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d002      	beq.n	8000ed8 <PE_SubStateMachine_Generic+0x170>
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	7460      	strb	r0, [r4, #17]
 8000ed6:	e22a      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000ed8:	9002      	str	r0, [sp, #8]
 8000eda:	2003      	movs	r0, #3
 8000edc:	9001      	str	r0, [sp, #4]
 8000ede:	9805      	ldr	r0, [sp, #20]
 8000ee0:	0880      	lsrs	r0, r0, #2
 8000ee2:	9000      	str	r0, [sp, #0]
 8000ee4:	ab06      	add	r3, sp, #24
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb3b 	bl	8001566 <PE_Send_DataMessage>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	d1f0      	bne.n	8000ed6 <PE_SubStateMachine_Generic+0x16e>
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	e165      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000ef8:	2012      	movs	r0, #18
 8000efa:	7720      	strb	r0, [r4, #28]
 8000efc:	2105      	movs	r1, #5
 8000efe:	7c20      	ldrb	r0, [r4, #16]
 8000f00:	f004 feab 	bl	8005c5a <USBDPD_PRL_BistCarrierEyeMode>
 8000f04:	2028      	movs	r0, #40	; 0x28
 8000f06:	7460      	strb	r0, [r4, #17]
 8000f08:	484f      	ldr	r0, [pc, #316]	; (8001048 <PE_SubStateMachine_Generic+0x2e0>)
 8000f0a:	83e0      	strh	r0, [r4, #30]
 8000f0c:	202d      	movs	r0, #45	; 0x2d
 8000f0e:	e099      	b.n	8001044 <PE_SubStateMachine_Generic+0x2dc>
 8000f10:	8be0      	ldrh	r0, [r4, #30]
 8000f12:	03f1      	lsls	r1, r6, #15
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d10e      	bne.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f18:	2105      	movs	r1, #5
 8000f1a:	7c20      	ldrb	r0, [r4, #16]
 8000f1c:	f004 fea5 	bl	8005c6a <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f20:	83e5      	strh	r5, [r4, #30]
 8000f22:	e191      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000f24:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f26:	7800      	ldrb	r0, [r0, #0]
 8000f28:	2814      	cmp	r0, #20
 8000f2a:	d004      	beq.n	8000f36 <PE_SubStateMachine_Generic+0x1ce>
 8000f2c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f2e:	7007      	strb	r7, [r0, #0]
 8000f30:	0020      	movs	r0, r4
 8000f32:	f7ff fd10 	bl	8000956 <PE_Clear_RxEvent>
 8000f36:	e1fa      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f38:	0020      	movs	r0, r4
 8000f3a:	f000 f9fb 	bl	8001334 <PE_SubStateMachine_ReceiveDRS>
 8000f3e:	e1f6      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8000f40:	6861      	ldr	r1, [r4, #4]
 8000f42:	6809      	ldr	r1, [r1, #0]
 8000f44:	0889      	lsrs	r1, r1, #2
 8000f46:	400e      	ands	r6, r1
 8000f48:	d002      	beq.n	8000f50 <PE_SubStateMachine_Generic+0x1e8>
 8000f4a:	6960      	ldr	r0, [r4, #20]
 8000f4c:	0741      	lsls	r1, r0, #29
 8000f4e:	0fc8      	lsrs	r0, r1, #31
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	2395      	movs	r3, #149	; 0x95
 8000f54:	2209      	movs	r2, #9
 8000f56:	2100      	movs	r1, #0
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f000 fad9 	bl	8001510 <PE_Send_CtrlMessage>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d1ed      	bne.n	8000f3e <PE_SubStateMachine_Generic+0x1d6>
 8000f62:	2010      	movs	r0, #16
 8000f64:	7720      	strb	r0, [r4, #28]
 8000f66:	4839      	ldr	r0, [pc, #228]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8000f68:	83e0      	strh	r0, [r4, #30]
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	9004      	str	r0, [sp, #16]
 8000f6e:	2122      	movs	r1, #34	; 0x22
 8000f70:	e128      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8000f72:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000f74:	7800      	ldrb	r0, [r0, #0]
 8000f76:	2814      	cmp	r0, #20
 8000f78:	d035      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f7a:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8000f7c:	21f0      	movs	r1, #240	; 0xf0
 8000f7e:	0209      	lsls	r1, r1, #8
 8000f80:	4001      	ands	r1, r0
 8000f82:	d130      	bne.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f84:	211f      	movs	r1, #31
 8000f86:	231f      	movs	r3, #31
 8000f88:	4003      	ands	r3, r0
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d006      	beq.n	8000f9c <PE_SubStateMachine_Generic+0x234>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d008      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d006      	beq.n	8000fa4 <PE_SubStateMachine_Generic+0x23c>
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d015      	beq.n	8000fc6 <PE_SubStateMachine_Generic+0x25e>
 8000f9a:	e024      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000f9c:	0020      	movs	r0, r4
 8000f9e:	f000 fa6d 	bl	800147c <PE_SwitchDataRole>
 8000fa2:	e008      	b.n	8000fb6 <PE_SubStateMachine_Generic+0x24e>
 8000fa4:	4001      	ands	r1, r0
 8000fa6:	290c      	cmp	r1, #12
 8000fa8:	d101      	bne.n	8000fae <PE_SubStateMachine_Generic+0x246>
 8000faa:	2126      	movs	r1, #38	; 0x26
 8000fac:	e000      	b.n	8000fb0 <PE_SubStateMachine_Generic+0x248>
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	7c20      	ldrb	r0, [r4, #16]
 8000fb2:	f7ff fa65 	bl	8000480 <USBPD_PE_Notification>
 8000fb6:	2003      	movs	r0, #3
 8000fb8:	7460      	strb	r0, [r4, #17]
 8000fba:	9504      	str	r5, [sp, #16]
 8000fbc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	2814      	cmp	r0, #20
 8000fc2:	d10b      	bne.n	8000fdc <PE_SubStateMachine_Generic+0x274>
 8000fc4:	e00f      	b.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	7c20      	ldrb	r0, [r4, #16]
 8000fca:	f7ff fa59 	bl	8000480 <USBPD_PE_Notification>
 8000fce:	2003      	movs	r0, #3
 8000fd0:	7460      	strb	r0, [r4, #17]
 8000fd2:	9504      	str	r5, [sp, #16]
 8000fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fd6:	7800      	ldrb	r0, [r0, #0]
 8000fd8:	2814      	cmp	r0, #20
 8000fda:	d004      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x27e>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	7007      	strb	r7, [r0, #0]
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fcb8 	bl	8000956 <PE_Clear_RxEvent>
 8000fe6:	8be0      	ldrh	r0, [r4, #30]
 8000fe8:	03f1      	lsls	r1, r6, #15
 8000fea:	4288      	cmp	r0, r1
 8000fec:	d12b      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 8000fee:	e12b      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 8000ff0:	ab03      	add	r3, sp, #12
 8000ff2:	aa05      	add	r2, sp, #20
 8000ff4:	2114      	movs	r1, #20
 8000ff6:	7c20      	ldrb	r0, [r4, #16]
 8000ff8:	68a5      	ldr	r5, [r4, #8]
 8000ffa:	696d      	ldr	r5, [r5, #20]
 8000ffc:	47a8      	blx	r5
 8000ffe:	9803      	ldr	r0, [sp, #12]
 8001000:	2800      	cmp	r0, #0
 8001002:	d100      	bne.n	8001006 <PE_SubStateMachine_Generic+0x29e>
 8001004:	e192      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001006:	2000      	movs	r0, #0
 8001008:	9002      	str	r0, [sp, #8]
 800100a:	2003      	movs	r0, #3
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	9803      	ldr	r0, [sp, #12]
 8001010:	0880      	lsrs	r0, r0, #2
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	ab05      	add	r3, sp, #20
 8001016:	220c      	movs	r2, #12
 8001018:	e154      	b.n	80012c4 <PE_SubStateMachine_Generic+0x55c>
 800101a:	6861      	ldr	r1, [r4, #4]
 800101c:	6809      	ldr	r1, [r1, #0]
 800101e:	0889      	lsrs	r1, r1, #2
 8001020:	4031      	ands	r1, r6
 8001022:	d000      	beq.n	8001026 <PE_SubStateMachine_Generic+0x2be>
 8001024:	2001      	movs	r0, #1
 8001026:	9000      	str	r0, [sp, #0]
 8001028:	2368      	movs	r3, #104	; 0x68
 800102a:	2218      	movs	r2, #24
 800102c:	2031      	movs	r0, #49	; 0x31
 800102e:	5c21      	ldrb	r1, [r4, r0]
 8001030:	0020      	movs	r0, r4
 8001032:	f000 fa6d 	bl	8001510 <PE_Send_CtrlMessage>
 8001036:	2800      	cmp	r0, #0
 8001038:	d105      	bne.n	8001046 <PE_SubStateMachine_Generic+0x2de>
 800103a:	200f      	movs	r0, #15
 800103c:	7720      	strb	r0, [r4, #28]
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <PE_SubStateMachine_Generic+0x2e4>)
 8001040:	83e0      	strh	r0, [r4, #30]
 8001042:	201b      	movs	r0, #27
 8001044:	9004      	str	r0, [sp, #16]
 8001046:	e172      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001048:	0000802d 	.word	0x0000802d
 800104c:	0000801b 	.word	0x0000801b
 8001050:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001052:	7800      	ldrb	r0, [r0, #0]
 8001054:	2814      	cmp	r0, #20
 8001056:	d023      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001058:	2030      	movs	r0, #48	; 0x30
 800105a:	5c20      	ldrb	r0, [r4, r0]
 800105c:	2131      	movs	r1, #49	; 0x31
 800105e:	5c61      	ldrb	r1, [r4, r1]
 8001060:	4288      	cmp	r0, r1
 8001062:	d11d      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001064:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001066:	0bc1      	lsrs	r1, r0, #15
 8001068:	d11a      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 800106a:	0b01      	lsrs	r1, r0, #12
 800106c:	0749      	lsls	r1, r1, #29
 800106e:	d017      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001070:	06c0      	lsls	r0, r0, #27
 8001072:	0ec0      	lsrs	r0, r0, #27
 8001074:	280c      	cmp	r0, #12
 8001076:	d113      	bne.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001078:	2304      	movs	r3, #4
 800107a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107c:	1c82      	adds	r2, r0, #2
 800107e:	2114      	movs	r1, #20
 8001080:	7c20      	ldrb	r0, [r4, #16]
 8001082:	68a6      	ldr	r6, [r4, #8]
 8001084:	69b6      	ldr	r6, [r6, #24]
 8001086:	47b0      	blx	r6
 8001088:	2003      	movs	r0, #3
 800108a:	7460      	strb	r0, [r4, #17]
 800108c:	9504      	str	r5, [sp, #16]
 800108e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001090:	7800      	ldrb	r0, [r0, #0]
 8001092:	2814      	cmp	r0, #20
 8001094:	d004      	beq.n	80010a0 <PE_SubStateMachine_Generic+0x338>
 8001096:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001098:	7007      	strb	r7, [r0, #0]
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff fc5b 	bl	8000956 <PE_Clear_RxEvent>
 80010a0:	8be0      	ldrh	r0, [r4, #30]
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0209      	lsls	r1, r1, #8
 80010a6:	4288      	cmp	r0, r1
 80010a8:	d108      	bne.n	80010bc <PE_SubStateMachine_Generic+0x354>
 80010aa:	2011      	movs	r0, #17
 80010ac:	e0cd      	b.n	800124a <PE_SubStateMachine_Generic+0x4e2>
 80010ae:	9500      	str	r5, [sp, #0]
 80010b0:	2303      	movs	r3, #3
 80010b2:	2210      	movs	r2, #16
 80010b4:	2100      	movs	r1, #0
 80010b6:	0020      	movs	r0, r4
 80010b8:	f000 fa2a 	bl	8001510 <PE_Send_CtrlMessage>
 80010bc:	e137      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80010be:	ab03      	add	r3, sp, #12
 80010c0:	48c9      	ldr	r0, [pc, #804]	; (80013e8 <.text_73>)
 80010c2:	1822      	adds	r2, r4, r0
 80010c4:	2108      	movs	r1, #8
 80010c6:	7c20      	ldrb	r0, [r4, #16]
 80010c8:	68a7      	ldr	r7, [r4, #8]
 80010ca:	697f      	ldr	r7, [r7, #20]
 80010cc:	47b8      	blx	r7
 80010ce:	2119      	movs	r1, #25
 80010d0:	9803      	ldr	r0, [sp, #12]
 80010d2:	f000 f9bb 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d129      	bne.n	800112e <PE_SubStateMachine_Generic+0x3c6>
 80010da:	48c4      	ldr	r0, [pc, #784]	; (80013ec <.text_74>)
 80010dc:	1826      	adds	r6, r4, r0
 80010de:	7035      	strb	r5, [r6, #0]
 80010e0:	7075      	strb	r5, [r6, #1]
 80010e2:	7c20      	ldrb	r0, [r4, #16]
 80010e4:	f7ff fe2e 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d103      	bne.n	80010f4 <PE_SubStateMachine_Generic+0x38c>
 80010ec:	7870      	ldrb	r0, [r6, #1]
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	4301      	orrs	r1, r0
 80010f2:	7071      	strb	r1, [r6, #1]
 80010f4:	9502      	str	r5, [sp, #8]
 80010f6:	2003      	movs	r0, #3
 80010f8:	9001      	str	r0, [sp, #4]
 80010fa:	9803      	ldr	r0, [sp, #12]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	b280      	uxth	r0, r0
 8001100:	9000      	str	r0, [sp, #0]
 8001102:	48bb      	ldr	r0, [pc, #748]	; (80013f0 <.text_75>)
 8001104:	1823      	adds	r3, r4, r0
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	0020      	movs	r0, r4
 800110c:	f000 fb5e 	bl	80017cc <PE_Send_ExtendedMessage>
 8001110:	2148      	movs	r1, #72	; 0x48
 8001112:	e057      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 8001114:	ab03      	add	r3, sp, #12
 8001116:	48b4      	ldr	r0, [pc, #720]	; (80013e8 <.text_73>)
 8001118:	1822      	adds	r2, r4, r0
 800111a:	2113      	movs	r1, #19
 800111c:	7c20      	ldrb	r0, [r4, #16]
 800111e:	68a7      	ldr	r7, [r4, #8]
 8001120:	697f      	ldr	r7, [r7, #20]
 8001122:	47b8      	blx	r7
 8001124:	2118      	movs	r1, #24
 8001126:	9803      	ldr	r0, [sp, #12]
 8001128:	f000 f990 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800112c:	2800      	cmp	r0, #0
 800112e:	d000      	beq.n	8001132 <PE_SubStateMachine_Generic+0x3ca>
 8001130:	e0fc      	b.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 8001132:	48ae      	ldr	r0, [pc, #696]	; (80013ec <.text_74>)
 8001134:	1826      	adds	r6, r4, r0
 8001136:	7035      	strb	r5, [r6, #0]
 8001138:	7075      	strb	r5, [r6, #1]
 800113a:	7c20      	ldrb	r0, [r4, #16]
 800113c:	f7ff fe02 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001140:	2800      	cmp	r0, #0
 8001142:	d103      	bne.n	800114c <PE_SubStateMachine_Generic+0x3e4>
 8001144:	7870      	ldrb	r0, [r6, #1]
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4301      	orrs	r1, r0
 800114a:	7071      	strb	r1, [r6, #1]
 800114c:	9502      	str	r5, [sp, #8]
 800114e:	2003      	movs	r0, #3
 8001150:	9001      	str	r0, [sp, #4]
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	1d00      	adds	r0, r0, #4
 8001156:	b280      	uxth	r0, r0
 8001158:	9000      	str	r0, [sp, #0]
 800115a:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <.text_75>)
 800115c:	1823      	adds	r3, r4, r0
 800115e:	220f      	movs	r2, #15
 8001160:	2100      	movs	r1, #0
 8001162:	0020      	movs	r0, r4
 8001164:	f000 fb32 	bl	80017cc <PE_Send_ExtendedMessage>
 8001168:	2161      	movs	r1, #97	; 0x61
 800116a:	e02b      	b.n	80011c4 <PE_SubStateMachine_Generic+0x45c>
 800116c:	ab03      	add	r3, sp, #12
 800116e:	489e      	ldr	r0, [pc, #632]	; (80013e8 <.text_73>)
 8001170:	1822      	adds	r2, r4, r0
 8001172:	2109      	movs	r1, #9
 8001174:	7c20      	ldrb	r0, [r4, #16]
 8001176:	68a7      	ldr	r7, [r4, #8]
 8001178:	697f      	ldr	r7, [r7, #20]
 800117a:	47b8      	blx	r7
 800117c:	2107      	movs	r1, #7
 800117e:	9803      	ldr	r0, [sp, #12]
 8001180:	f000 f964 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001184:	2800      	cmp	r0, #0
 8001186:	d170      	bne.n	800126a <PE_SubStateMachine_Generic+0x502>
 8001188:	4998      	ldr	r1, [pc, #608]	; (80013ec <.text_74>)
 800118a:	5465      	strb	r5, [r4, r1]
 800118c:	1860      	adds	r0, r4, r1
 800118e:	7045      	strb	r5, [r0, #1]
 8001190:	7c20      	ldrb	r0, [r4, #16]
 8001192:	f7ff fdd7 	bl	8000d44 <PE_Get_UnchunkedSupport>
 8001196:	2800      	cmp	r0, #0
 8001198:	d105      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x43e>
 800119a:	4894      	ldr	r0, [pc, #592]	; (80013ec <.text_74>)
 800119c:	1820      	adds	r0, r4, r0
 800119e:	7841      	ldrb	r1, [r0, #1]
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	430a      	orrs	r2, r1
 80011a4:	7042      	strb	r2, [r0, #1]
 80011a6:	9502      	str	r5, [sp, #8]
 80011a8:	2003      	movs	r0, #3
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	9803      	ldr	r0, [sp, #12]
 80011ae:	1d00      	adds	r0, r0, #4
 80011b0:	b280      	uxth	r0, r0
 80011b2:	9000      	str	r0, [sp, #0]
 80011b4:	488e      	ldr	r0, [pc, #568]	; (80013f0 <.text_75>)
 80011b6:	1823      	adds	r3, r4, r0
 80011b8:	2202      	movs	r2, #2
 80011ba:	2100      	movs	r1, #0
 80011bc:	0020      	movs	r0, r4
 80011be:	f000 fb05 	bl	80017cc <PE_Send_ExtendedMessage>
 80011c2:	214f      	movs	r1, #79	; 0x4f
 80011c4:	7c20      	ldrb	r0, [r4, #16]
 80011c6:	f7ff f95b 	bl	8000480 <USBPD_PE_Notification>
 80011ca:	e0b0      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80011cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80011ce:	7800      	ldrb	r0, [r0, #0]
 80011d0:	2814      	cmp	r0, #20
 80011d2:	d034      	beq.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 80011d4:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80011d6:	0bc1      	lsrs	r1, r0, #15
 80011d8:	d11a      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011da:	0b01      	lsrs	r1, r0, #12
 80011dc:	0749      	lsls	r1, r1, #29
 80011de:	d017      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e0:	06c0      	lsls	r0, r0, #27
 80011e2:	0ec0      	lsrs	r0, r0, #27
 80011e4:	2805      	cmp	r0, #5
 80011e6:	d113      	bne.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 80011e8:	2304      	movs	r3, #4
 80011ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ec:	1d02      	adds	r2, r0, #4
 80011ee:	210f      	movs	r1, #15
 80011f0:	7c20      	ldrb	r0, [r4, #16]
 80011f2:	68a6      	ldr	r6, [r4, #8]
 80011f4:	69b6      	ldr	r6, [r6, #24]
 80011f6:	47b0      	blx	r6
 80011f8:	2003      	movs	r0, #3
 80011fa:	7460      	strb	r0, [r4, #17]
 80011fc:	9504      	str	r5, [sp, #16]
 80011fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001200:	7800      	ldrb	r0, [r0, #0]
 8001202:	2814      	cmp	r0, #20
 8001204:	d004      	beq.n	8001210 <PE_SubStateMachine_Generic+0x4a8>
 8001206:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001208:	700f      	strb	r7, [r1, #0]
 800120a:	0020      	movs	r0, r4
 800120c:	f7ff fba3 	bl	8000956 <PE_Clear_RxEvent>
 8001210:	2034      	movs	r0, #52	; 0x34
 8001212:	5c20      	ldrb	r0, [r4, r0]
 8001214:	06c0      	lsls	r0, r0, #27
 8001216:	0ec0      	lsrs	r0, r0, #27
 8001218:	2810      	cmp	r0, #16
 800121a:	d110      	bne.n	800123e <PE_SubStateMachine_Generic+0x4d6>
 800121c:	2159      	movs	r1, #89	; 0x59
 800121e:	7c20      	ldrb	r0, [r4, #16]
 8001220:	f7ff f92e 	bl	8000480 <USBPD_PE_Notification>
 8001224:	83e5      	strh	r5, [r4, #30]
 8001226:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001228:	7800      	ldrb	r0, [r0, #0]
 800122a:	2814      	cmp	r0, #20
 800122c:	d004      	beq.n	8001238 <PE_SubStateMachine_Generic+0x4d0>
 800122e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001230:	7007      	strb	r7, [r0, #0]
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff fb8f 	bl	8000956 <PE_Clear_RxEvent>
 8001238:	2003      	movs	r0, #3
 800123a:	7460      	strb	r0, [r4, #17]
 800123c:	9504      	str	r5, [sp, #16]
 800123e:	8be0      	ldrh	r0, [r4, #30]
 8001240:	2180      	movs	r1, #128	; 0x80
 8001242:	0209      	lsls	r1, r1, #8
 8001244:	4288      	cmp	r0, r1
 8001246:	d172      	bne.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001248:	2003      	movs	r0, #3
 800124a:	7460      	strb	r0, [r4, #17]
 800124c:	9504      	str	r5, [sp, #16]
 800124e:	e06e      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001250:	ab03      	add	r3, sp, #12
 8001252:	4865      	ldr	r0, [pc, #404]	; (80013e8 <.text_73>)
 8001254:	1822      	adds	r2, r4, r0
 8001256:	210d      	movs	r1, #13
 8001258:	7c20      	ldrb	r0, [r4, #16]
 800125a:	68a7      	ldr	r7, [r4, #8]
 800125c:	697f      	ldr	r7, [r7, #20]
 800125e:	47b8      	blx	r7
 8001260:	2104      	movs	r1, #4
 8001262:	9803      	ldr	r0, [sp, #12]
 8001264:	f000 f8f2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001268:	2800      	cmp	r0, #0
 800126a:	d15f      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 800126c:	485f      	ldr	r0, [pc, #380]	; (80013ec <.text_74>)
 800126e:	1826      	adds	r6, r4, r0
 8001270:	7035      	strb	r5, [r6, #0]
 8001272:	7075      	strb	r5, [r6, #1]
 8001274:	7c20      	ldrb	r0, [r4, #16]
 8001276:	f7ff fd65 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800127a:	2800      	cmp	r0, #0
 800127c:	d103      	bne.n	8001286 <PE_SubStateMachine_Generic+0x51e>
 800127e:	7870      	ldrb	r0, [r6, #1]
 8001280:	2180      	movs	r1, #128	; 0x80
 8001282:	4301      	orrs	r1, r0
 8001284:	7071      	strb	r1, [r6, #1]
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	2003      	movs	r0, #3
 800128a:	9001      	str	r0, [sp, #4]
 800128c:	9803      	ldr	r0, [sp, #12]
 800128e:	1d00      	adds	r0, r0, #4
 8001290:	b280      	uxth	r0, r0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4856      	ldr	r0, [pc, #344]	; (80013f0 <.text_75>)
 8001296:	1823      	adds	r3, r4, r0
 8001298:	2207      	movs	r2, #7
 800129a:	e03d      	b.n	8001318 <PE_SubStateMachine_Generic+0x5b0>
 800129c:	9505      	str	r5, [sp, #20]
 800129e:	ab03      	add	r3, sp, #12
 80012a0:	aa05      	add	r2, sp, #20
 80012a2:	210f      	movs	r1, #15
 80012a4:	7c20      	ldrb	r0, [r4, #16]
 80012a6:	68a5      	ldr	r5, [r4, #8]
 80012a8:	696d      	ldr	r5, [r5, #20]
 80012aa:	47a8      	blx	r5
 80012ac:	2104      	movs	r1, #4
 80012ae:	9803      	ldr	r0, [sp, #12]
 80012b0:	f000 f8cc 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d139      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012b8:	9002      	str	r0, [sp, #8]
 80012ba:	2003      	movs	r0, #3
 80012bc:	9001      	str	r0, [sp, #4]
 80012be:	9600      	str	r6, [sp, #0]
 80012c0:	ab05      	add	r3, sp, #20
 80012c2:	2205      	movs	r2, #5
 80012c4:	2100      	movs	r1, #0
 80012c6:	0020      	movs	r0, r4
 80012c8:	f000 f94d 	bl	8001566 <PE_Send_DataMessage>
 80012cc:	e02f      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 80012ce:	ab03      	add	r3, sp, #12
 80012d0:	4845      	ldr	r0, [pc, #276]	; (80013e8 <.text_73>)
 80012d2:	1822      	adds	r2, r4, r0
 80012d4:	2111      	movs	r1, #17
 80012d6:	7c20      	ldrb	r0, [r4, #16]
 80012d8:	68a7      	ldr	r7, [r4, #8]
 80012da:	697f      	ldr	r7, [r7, #20]
 80012dc:	47b8      	blx	r7
 80012de:	2109      	movs	r1, #9
 80012e0:	9803      	ldr	r0, [sp, #12]
 80012e2:	f000 f8b3 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d120      	bne.n	800132c <PE_SubStateMachine_Generic+0x5c4>
 80012ea:	4840      	ldr	r0, [pc, #256]	; (80013ec <.text_74>)
 80012ec:	1826      	adds	r6, r4, r0
 80012ee:	7035      	strb	r5, [r6, #0]
 80012f0:	7075      	strb	r5, [r6, #1]
 80012f2:	7c20      	ldrb	r0, [r4, #16]
 80012f4:	f7ff fd26 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d103      	bne.n	8001304 <PE_SubStateMachine_Generic+0x59c>
 80012fc:	7870      	ldrb	r0, [r6, #1]
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4301      	orrs	r1, r0
 8001302:	7071      	strb	r1, [r6, #1]
 8001304:	9502      	str	r5, [sp, #8]
 8001306:	2003      	movs	r0, #3
 8001308:	9001      	str	r0, [sp, #4]
 800130a:	9803      	ldr	r0, [sp, #12]
 800130c:	1d00      	adds	r0, r0, #4
 800130e:	b280      	uxth	r0, r0
 8001310:	9000      	str	r0, [sp, #0]
 8001312:	4837      	ldr	r0, [pc, #220]	; (80013f0 <.text_75>)
 8001314:	1823      	adds	r3, r4, r0
 8001316:	2205      	movs	r2, #5
 8001318:	2100      	movs	r1, #0
 800131a:	0020      	movs	r0, r4
 800131c:	f000 fa56 	bl	80017cc <PE_Send_ExtendedMessage>
 8001320:	e005      	b.n	800132e <PE_SubStateMachine_Generic+0x5c6>
 8001322:	2150      	movs	r1, #80	; 0x50
 8001324:	7c20      	ldrb	r0, [r4, #16]
 8001326:	f7ff f8ab 	bl	8000480 <USBPD_PE_Notification>
 800132a:	e78d      	b.n	8001248 <PE_SubStateMachine_Generic+0x4e0>
 800132c:	7466      	strb	r6, [r4, #17]
 800132e:	9804      	ldr	r0, [sp, #16]
 8001330:	b00f      	add	sp, #60	; 0x3c
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001334 <PE_SubStateMachine_ReceiveDRS>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	0004      	movs	r4, r0
 8001338:	252a      	movs	r5, #42	; 0x2a
 800133a:	7c20      	ldrb	r0, [r4, #16]
 800133c:	68a1      	ldr	r1, [r4, #8]
 800133e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001340:	4788      	blx	r1
 8001342:	280a      	cmp	r0, #10
 8001344:	d002      	beq.n	800134c <PE_SubStateMachine_ReceiveDRS+0x18>
 8001346:	280c      	cmp	r0, #12
 8001348:	d017      	beq.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 800134a:	e00d      	b.n	8001368 <PE_SubStateMachine_ReceiveDRS+0x34>
 800134c:	2000      	movs	r0, #0
 800134e:	9000      	str	r0, [sp, #0]
 8001350:	2303      	movs	r3, #3
 8001352:	2203      	movs	r2, #3
 8001354:	2100      	movs	r1, #0
 8001356:	0020      	movs	r0, r4
 8001358:	f000 f8da 	bl	8001510 <PE_Send_CtrlMessage>
 800135c:	2800      	cmp	r0, #0
 800135e:	d10d      	bne.n	800137c <PE_SubStateMachine_ReceiveDRS+0x48>
 8001360:	0020      	movs	r0, r4
 8001362:	f000 f88b 	bl	800147c <PE_SwitchDataRole>
 8001366:	bd31      	pop	{r0, r4, r5, pc}
 8001368:	6860      	ldr	r0, [r4, #4]
 800136a:	7800      	ldrb	r0, [r0, #0]
 800136c:	0780      	lsls	r0, r0, #30
 800136e:	0f80      	lsrs	r0, r0, #30
 8001370:	2802      	cmp	r0, #2
 8001372:	d102      	bne.n	800137a <PE_SubStateMachine_ReceiveDRS+0x46>
 8001374:	2001      	movs	r0, #1
 8001376:	7460      	strb	r0, [r4, #17]
 8001378:	bd31      	pop	{r0, r4, r5, pc}
 800137a:	7465      	strb	r5, [r4, #17]
 800137c:	bd31      	pop	{r0, r4, r5, pc}

0800137e <PE_UpdateTimer>:
 800137e:	b510      	push	{r4, lr}
 8001380:	0002      	movs	r2, r0
 8001382:	2080      	movs	r0, #128	; 0x80
 8001384:	0200      	lsls	r0, r0, #8
 8001386:	0454      	lsls	r4, r2, #17
 8001388:	0c64      	lsrs	r4, r4, #17
 800138a:	42a1      	cmp	r1, r4
 800138c:	da00      	bge.n	8001390 <PE_UpdateTimer+0x12>
 800138e:	1a50      	subs	r0, r2, r1
 8001390:	b280      	uxth	r0, r0
 8001392:	bd10      	pop	{r4, pc}

08001394 <PE_CallHardResetCallback>:
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <PE_CallHardResetCallback+0xa>
 800139c:	4770      	bx	lr
 800139e:	b580      	push	{r7, lr}
 80013a0:	7c00      	ldrb	r0, [r0, #16]
 80013a2:	4798      	blx	r3
 80013a4:	bd01      	pop	{r0, pc}

080013a6 <PE_SetPowerNegotiation>:
 80013a6:	b510      	push	{r4, lr}
 80013a8:	6842      	ldr	r2, [r0, #4]
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	055c      	lsls	r4, r3, #21
 80013ae:	0f64      	lsrs	r4, r4, #29
 80013b0:	42a1      	cmp	r1, r4
 80013b2:	d00b      	beq.n	80013cc <PE_SetPowerNegotiation+0x26>
 80013b4:	4c2e      	ldr	r4, [pc, #184]	; (8001470 <.text_79>)
 80013b6:	401c      	ands	r4, r3
 80013b8:	0209      	lsls	r1, r1, #8
 80013ba:	23e0      	movs	r3, #224	; 0xe0
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	400b      	ands	r3, r1
 80013c0:	4323      	orrs	r3, r4
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	215a      	movs	r1, #90	; 0x5a
 80013c6:	7c00      	ldrb	r0, [r0, #16]
 80013c8:	f7ff f85a 	bl	8000480 <USBPD_PE_Notification>
 80013cc:	bd10      	pop	{r4, pc}

080013ce <USBPD_PE_ExecFastRoleSwapSignalling>:
 80013ce:	b580      	push	{r7, lr}
 80013d0:	4928      	ldr	r1, [pc, #160]	; (8001474 <.text_80>)
 80013d2:	0082      	lsls	r2, r0, #2
 80013d4:	5889      	ldr	r1, [r1, r2]
 80013d6:	694a      	ldr	r2, [r1, #20]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	029b      	lsls	r3, r3, #10
 80013dc:	4313      	orrs	r3, r2
 80013de:	614b      	str	r3, [r1, #20]
 80013e0:	6889      	ldr	r1, [r1, #8]
 80013e2:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80013e4:	4788      	blx	r1
 80013e6:	bd01      	pop	{r0, pc}

080013e8 <.text_73>:
 80013e8:	00000267 	.word	0x00000267

080013ec <.text_74>:
 80013ec:	00000265 	.word	0x00000265

080013f0 <.text_75>:
 80013f0:	00000263 	.word	0x00000263

080013f4 <PE_CalculateMinTiming>:
 80013f4:	0001      	movs	r1, r0
 80013f6:	2000      	movs	r0, #0
 80013f8:	43c0      	mvns	r0, r0
 80013fa:	0c42      	lsrs	r2, r0, #17
 80013fc:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 80013fe:	4213      	tst	r3, r2
 8001400:	d001      	beq.n	8001406 <PE_CalculateMinTiming+0x12>
 8001402:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8001404:	4010      	ands	r0, r2
 8001406:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 8001408:	4213      	tst	r3, r2
 800140a:	d006      	beq.n	800141a <PE_CalculateMinTiming+0x26>
 800140c:	8c4b      	ldrh	r3, [r1, #34]	; 0x22
 800140e:	4013      	ands	r3, r2
 8001410:	4298      	cmp	r0, r3
 8001412:	d302      	bcc.n	800141a <PE_CalculateMinTiming+0x26>
 8001414:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8001416:	0010      	movs	r0, r2
 8001418:	4008      	ands	r0, r1
 800141a:	4770      	bx	lr

0800141c <PE_SetPowerNegociation>:
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	0005      	movs	r5, r0
 8001420:	000c      	movs	r4, r1
 8001422:	6868      	ldr	r0, [r5, #4]
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	0540      	lsls	r0, r0, #21
 8001428:	0f40      	lsrs	r0, r0, #29
 800142a:	4284      	cmp	r4, r0
 800142c:	d003      	beq.n	8001436 <PE_SetPowerNegociation+0x1a>
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	7c28      	ldrb	r0, [r5, #16]
 8001432:	f7ff f825 	bl	8000480 <USBPD_PE_Notification>
 8001436:	6868      	ldr	r0, [r5, #4]
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <.text_79>)
 800143c:	400a      	ands	r2, r1
 800143e:	0221      	lsls	r1, r4, #8
 8001440:	23e0      	movs	r3, #224	; 0xe0
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	400b      	ands	r3, r1
 8001446:	4313      	orrs	r3, r2
 8001448:	6003      	str	r3, [r0, #0]
 800144a:	bd31      	pop	{r0, r4, r5, pc}

0800144c <PE_CheckDataSizeFromGetDataInfo>:
 800144c:	b51c      	push	{r2, r3, r4, lr}
 800144e:	0002      	movs	r2, r0
 8001450:	2000      	movs	r0, #0
 8001452:	428a      	cmp	r2, r1
 8001454:	d20a      	bcs.n	800146c <PE_CheckDataSizeFromGetDataInfo+0x20>
 8001456:	2018      	movs	r0, #24
 8001458:	9000      	str	r0, [sp, #0]
 800145a:	bf00      	nop
 800145c:	a315      	add	r3, pc, #84	; (adr r3, 80014b4 <.text_83>)
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2006      	movs	r0, #6
 8001464:	4c04      	ldr	r4, [pc, #16]	; (8001478 <.text_81>)
 8001466:	6824      	ldr	r4, [r4, #0]
 8001468:	47a0      	blx	r4
 800146a:	2002      	movs	r0, #2
 800146c:	bd16      	pop	{r1, r2, r4, pc}
	...

08001470 <.text_79>:
 8001470:	fffff8ff 	.word	0xfffff8ff

08001474 <.text_80>:
 8001474:	2000053c 	.word	0x2000053c

08001478 <.text_81>:
 8001478:	20000000 	.word	0x20000000

0800147c <PE_SwitchDataRole>:
 800147c:	b510      	push	{r4, lr}
 800147e:	0004      	movs	r4, r0
 8001480:	6860      	ldr	r0, [r4, #4]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	08d3      	lsrs	r3, r2, #3
 8001488:	400b      	ands	r3, r1
 800148a:	d107      	bne.n	800149c <PE_SwitchDataRole+0x20>
 800148c:	2308      	movs	r3, #8
 800148e:	4313      	orrs	r3, r2
 8001490:	6003      	str	r3, [r0, #0]
 8001492:	7c20      	ldrb	r0, [r4, #16]
 8001494:	f004 f93b 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 8001498:	2125      	movs	r1, #37	; 0x25
 800149a:	e007      	b.n	80014ac <PE_SwitchDataRole+0x30>
 800149c:	2108      	movs	r1, #8
 800149e:	438a      	bics	r2, r1
 80014a0:	6002      	str	r2, [r0, #0]
 80014a2:	2100      	movs	r1, #0
 80014a4:	7c20      	ldrb	r0, [r4, #16]
 80014a6:	f004 f932 	bl	800570e <USBPD_PRL_SetHeaderDataRole>
 80014aa:	2124      	movs	r1, #36	; 0x24
 80014ac:	7c20      	ldrb	r0, [r4, #16]
 80014ae:	f7fe ffe7 	bl	8000480 <USBPD_PE_Notification>
 80014b2:	bd10      	pop	{r4, pc}

080014b4 <.text_83>:
 80014b4:	61746144 	.word	0x61746144
 80014b8:	7a695320 	.word	0x7a695320
 80014bc:	73692065 	.word	0x73692065
 80014c0:	746f6e20 	.word	0x746f6e20
 80014c4:	726f6320 	.word	0x726f6320
 80014c8:	74636572 	.word	0x74636572
 80014cc:	00          	.byte	0x00
 80014cd:	00          	.byte	0x00
	...

080014d0 <USBPD_PE_SetTrace>:
 80014d0:	0001      	movs	r1, r0
 80014d2:	d100      	bne.n	80014d6 <USBPD_PE_SetTrace+0x6>
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <.text_5>)
 80014d6:	4906      	ldr	r1, [pc, #24]	; (80014f0 <.text_6>)
 80014d8:	6008      	str	r0, [r1, #0]
 80014da:	4770      	bx	lr

080014dc <USBPD_PE_CheckLIB>:
 80014dc:	0001      	movs	r1, r0
 80014de:	2000      	movs	r0, #0
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <.text_7>)
 80014e2:	4291      	cmp	r1, r2
 80014e4:	d100      	bne.n	80014e8 <USBPD_PE_CheckLIB+0xc>
 80014e6:	2001      	movs	r0, #1
 80014e8:	4770      	bx	lr
	...

080014ec <.text_5>:
 80014ec:	0800150f 	.word	0x0800150f

080014f0 <.text_6>:
 80014f0:	20000000 	.word	0x20000000

080014f4 <.text_7>:
 80014f4:	30410000 	.word	0x30410000

080014f8 <USBPD_PE_GetMemoryConsumption>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	f004 f8df 	bl	80056bc <USBPD_PRL_GetMemoryConsumption>
 80014fe:	0004      	movs	r4, r0
 8001500:	f7fe fedd 	bl	80002be <USBPD_CAD_GetMemoryConsumption>
 8001504:	1820      	adds	r0, r4, r0
 8001506:	21e1      	movs	r1, #225	; 0xe1
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	1840      	adds	r0, r0, r1
 800150c:	bd10      	pop	{r4, pc}

0800150e <PE_Trace_Empty>:
 800150e:	4770      	bx	lr

08001510 <PE_Send_CtrlMessage>:
 8001510:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001512:	2501      	movs	r5, #1
 8001514:	0004      	movs	r4, r0
 8001516:	000f      	movs	r7, r1
 8001518:	0016      	movs	r6, r2
 800151a:	6860      	ldr	r0, [r4, #4]
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	0b00      	lsrs	r0, r0, #12
 8001520:	4028      	ands	r0, r5
 8001522:	d014      	beq.n	800154e <PE_Send_CtrlMessage+0x3e>
 8001524:	a808      	add	r0, sp, #32
 8001526:	7800      	ldrb	r0, [r0, #0]
 8001528:	9001      	str	r0, [sp, #4]
 800152a:	2002      	movs	r0, #2
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	48a2      	ldr	r0, [pc, #648]	; (80017b8 <.text_5>)
 8001530:	1823      	adds	r3, r4, r0
 8001532:	0032      	movs	r2, r6
 8001534:	0039      	movs	r1, r7
 8001536:	7c20      	ldrb	r0, [r4, #16]
 8001538:	f004 f938 	bl	80057ac <USBPD_PRL_SendMessage>
 800153c:	2803      	cmp	r0, #3
 800153e:	d0ec      	beq.n	800151a <PE_Send_CtrlMessage+0xa>
 8001540:	0039      	movs	r1, r7
 8001542:	2810      	cmp	r0, #16
 8001544:	d00e      	beq.n	8001564 <PE_Send_CtrlMessage+0x54>
 8001546:	2e0d      	cmp	r6, #13
 8001548:	d104      	bne.n	8001554 <PE_Send_CtrlMessage+0x44>
 800154a:	2201      	movs	r2, #1
 800154c:	e003      	b.n	8001556 <PE_Send_CtrlMessage+0x46>
 800154e:	7460      	strb	r0, [r4, #17]
 8001550:	2010      	movs	r0, #16
 8001552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001554:	2200      	movs	r2, #0
 8001556:	466b      	mov	r3, sp
 8001558:	7a1b      	ldrb	r3, [r3, #8]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	0003      	movs	r3, r0
 800155e:	0020      	movs	r0, r4
 8001560:	f000 fc24 	bl	8001dac <PE_CheckSendMessageStatus>
 8001564:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08001566 <PE_Send_DataMessage>:
 8001566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	0004      	movs	r4, r0
 800156c:	2000      	movs	r0, #0
 800156e:	4e93      	ldr	r6, [pc, #588]	; (80017bc <.text_6>)
 8001570:	e00c      	b.n	800158c <PE_Send_DataMessage+0x26>
 8001572:	2100      	movs	r1, #0
 8001574:	0082      	lsls	r2, r0, #2
 8001576:	18a2      	adds	r2, r4, r2
 8001578:	1855      	adds	r5, r2, r1
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	00cf      	lsls	r7, r1, #3
 800157e:	40fa      	lsrs	r2, r7
 8001580:	55aa      	strb	r2, [r5, r6]
 8001582:	1c49      	adds	r1, r1, #1
 8001584:	2904      	cmp	r1, #4
 8001586:	d3f5      	bcc.n	8001574 <PE_Send_DataMessage+0xe>
 8001588:	1d1b      	adds	r3, r3, #4
 800158a:	1c40      	adds	r0, r0, #1
 800158c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800158e:	4288      	cmp	r0, r1
 8001590:	d3ef      	bcc.n	8001572 <PE_Send_DataMessage+0xc>
 8001592:	6860      	ldr	r0, [r4, #4]
 8001594:	6800      	ldr	r0, [r0, #0]
 8001596:	04c1      	lsls	r1, r0, #19
 8001598:	0fc9      	lsrs	r1, r1, #31
 800159a:	d01f      	beq.n	80015dc <PE_Send_DataMessage+0x76>
 800159c:	a80c      	add	r0, sp, #48	; 0x30
 800159e:	7800      	ldrb	r0, [r0, #0]
 80015a0:	9001      	str	r0, [sp, #4]
 80015a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80015a4:	0080      	lsls	r0, r0, #2
 80015a6:	1c80      	adds	r0, r0, #2
 80015a8:	b280      	uxth	r0, r0
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	1eb0      	subs	r0, r6, #2
 80015ae:	1823      	adds	r3, r4, r0
 80015b0:	4668      	mov	r0, sp
 80015b2:	7c02      	ldrb	r2, [r0, #16]
 80015b4:	7b01      	ldrb	r1, [r0, #12]
 80015b6:	7c20      	ldrb	r0, [r4, #16]
 80015b8:	f004 f8f8 	bl	80057ac <USBPD_PRL_SendMessage>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d0e8      	beq.n	8001592 <PE_Send_DataMessage+0x2c>
 80015c0:	4669      	mov	r1, sp
 80015c2:	7b09      	ldrb	r1, [r1, #12]
 80015c4:	2810      	cmp	r0, #16
 80015c6:	d007      	beq.n	80015d8 <PE_Send_DataMessage+0x72>
 80015c8:	aa0b      	add	r2, sp, #44	; 0x2c
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	9200      	str	r2, [sp, #0]
 80015ce:	0003      	movs	r3, r0
 80015d0:	2200      	movs	r2, #0
 80015d2:	0020      	movs	r0, r4
 80015d4:	f000 fbea 	bl	8001dac <PE_CheckSendMessageStatus>
 80015d8:	b005      	add	sp, #20
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015dc:	2010      	movs	r0, #16
 80015de:	e7fb      	b.n	80015d8 <PE_Send_DataMessage+0x72>

080015e0 <PE_Check_ExtendedMessage>:
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	0004      	movs	r4, r0
 80015e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015e6:	7881      	ldrb	r1, [r0, #2]
 80015e8:	78c0      	ldrb	r0, [r0, #3]
 80015ea:	0200      	lsls	r0, r0, #8
 80015ec:	1808      	adds	r0, r1, r0
 80015ee:	4974      	ldr	r1, [pc, #464]	; (80017c0 <.text_7>)
 80015f0:	1861      	adds	r1, r4, r1
 80015f2:	8008      	strh	r0, [r1, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	5ca2      	ldrb	r2, [r4, r2]
 80015f8:	06d2      	lsls	r2, r2, #27
 80015fa:	0ed2      	lsrs	r2, r2, #27
 80015fc:	708a      	strb	r2, [r1, #2]
 80015fe:	2501      	movs	r5, #1
 8001600:	0403      	lsls	r3, r0, #16
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	2201      	movs	r2, #1
 8001606:	401a      	ands	r2, r3
 8001608:	0403      	lsls	r3, r0, #16
 800160a:	0edb      	lsrs	r3, r3, #27
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d003      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001610:	0013      	movs	r3, r2
 8001612:	d001      	beq.n	8001618 <PE_Check_ExtendedMessage+0x38>
 8001614:	2034      	movs	r0, #52	; 0x34
 8001616:	e09e      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001618:	05c6      	lsls	r6, r0, #23
 800161a:	0df6      	lsrs	r6, r6, #23
 800161c:	2300      	movs	r3, #0
 800161e:	0407      	lsls	r7, r0, #16
 8001620:	0fff      	lsrs	r7, r7, #31
 8001622:	d10d      	bne.n	8001640 <PE_Check_ExtendedMessage+0x60>
 8001624:	4867      	ldr	r0, [pc, #412]	; (80017c4 <.text_8>)
 8001626:	5226      	strh	r6, [r4, r0]
 8001628:	4866      	ldr	r0, [pc, #408]	; (80017c4 <.text_8>)
 800162a:	5a20      	ldrh	r0, [r4, r0]
 800162c:	4283      	cmp	r3, r0
 800162e:	d21b      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001632:	1d00      	adds	r0, r0, #4
 8001634:	5cc0      	ldrb	r0, [r0, r3]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <.text_9>)
 8001638:	18a2      	adds	r2, r4, r2
 800163a:	54d0      	strb	r0, [r2, r3]
 800163c:	1c5b      	adds	r3, r3, #1
 800163e:	e7f3      	b.n	8001628 <PE_Check_ExtendedMessage+0x48>
 8001640:	27f8      	movs	r7, #248	; 0xf8
 8001642:	01ff      	lsls	r7, r7, #7
 8001644:	4007      	ands	r7, r0
 8001646:	d106      	bne.n	8001656 <PE_Check_ExtendedMessage+0x76>
 8001648:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800164a:	0440      	lsls	r0, r0, #17
 800164c:	0f40      	lsrs	r0, r0, #29
 800164e:	2807      	cmp	r0, #7
 8001650:	d30a      	bcc.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001652:	2e1a      	cmp	r6, #26
 8001654:	d908      	bls.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001656:	2a00      	cmp	r2, #0
 8001658:	d106      	bne.n	8001668 <PE_Check_ExtendedMessage+0x88>
 800165a:	485a      	ldr	r0, [pc, #360]	; (80017c4 <.text_8>)
 800165c:	5a20      	ldrh	r0, [r4, r0]
 800165e:	42b0      	cmp	r0, r6
 8001660:	d202      	bcs.n	8001668 <PE_Check_ExtendedMessage+0x88>
 8001662:	83e3      	strh	r3, [r4, #30]
 8001664:	2037      	movs	r0, #55	; 0x37
 8001666:	e076      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 8001668:	7889      	ldrb	r1, [r1, #2]
 800166a:	2603      	movs	r6, #3
 800166c:	7f22      	ldrb	r2, [r4, #28]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d039      	beq.n	80016e6 <PE_Check_ExtendedMessage+0x106>
 8001672:	2901      	cmp	r1, #1
 8001674:	d008      	beq.n	8001688 <PE_Check_ExtendedMessage+0xa8>
 8001676:	2902      	cmp	r1, #2
 8001678:	d01c      	beq.n	80016b4 <PE_Check_ExtendedMessage+0xd4>
 800167a:	2905      	cmp	r1, #5
 800167c:	d02a      	beq.n	80016d4 <PE_Check_ExtendedMessage+0xf4>
 800167e:	2907      	cmp	r1, #7
 8001680:	d023      	beq.n	80016ca <PE_Check_ExtendedMessage+0xea>
 8001682:	290f      	cmp	r1, #15
 8001684:	d00b      	beq.n	800169e <PE_Check_ExtendedMessage+0xbe>
 8001686:	e094      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001688:	2319      	movs	r3, #25
 800168a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800168c:	1d02      	adds	r2, r0, #4
 800168e:	2108      	movs	r1, #8
 8001690:	7c20      	ldrb	r0, [r4, #16]
 8001692:	68a7      	ldr	r7, [r4, #8]
 8001694:	69bf      	ldr	r7, [r7, #24]
 8001696:	47b8      	blx	r7
 8001698:	7466      	strb	r6, [r4, #17]
 800169a:	2147      	movs	r1, #71	; 0x47
 800169c:	e014      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 800169e:	2318      	movs	r3, #24
 80016a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016a2:	1d02      	adds	r2, r0, #4
 80016a4:	2113      	movs	r1, #19
 80016a6:	7c20      	ldrb	r0, [r4, #16]
 80016a8:	68a7      	ldr	r7, [r4, #8]
 80016aa:	69bf      	ldr	r7, [r7, #24]
 80016ac:	47b8      	blx	r7
 80016ae:	7466      	strb	r6, [r4, #17]
 80016b0:	2162      	movs	r1, #98	; 0x62
 80016b2:	e009      	b.n	80016c8 <PE_Check_ExtendedMessage+0xe8>
 80016b4:	2307      	movs	r3, #7
 80016b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016b8:	1d02      	adds	r2, r0, #4
 80016ba:	2109      	movs	r1, #9
 80016bc:	7c20      	ldrb	r0, [r4, #16]
 80016be:	68a7      	ldr	r7, [r4, #8]
 80016c0:	69bf      	ldr	r7, [r7, #24]
 80016c2:	47b8      	blx	r7
 80016c4:	7466      	strb	r6, [r4, #17]
 80016c6:	214e      	movs	r1, #78	; 0x4e
 80016c8:	e2c7      	b.n	8001c5a <.text_21>
 80016ca:	231a      	movs	r3, #26
 80016cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016ce:	1d02      	adds	r2, r0, #4
 80016d0:	210d      	movs	r1, #13
 80016d2:	e003      	b.n	80016dc <PE_Check_ExtendedMessage+0xfc>
 80016d4:	2309      	movs	r3, #9
 80016d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80016d8:	1d02      	adds	r2, r0, #4
 80016da:	2111      	movs	r1, #17
 80016dc:	7c20      	ldrb	r0, [r4, #16]
 80016de:	68a7      	ldr	r7, [r4, #8]
 80016e0:	69bf      	ldr	r7, [r7, #24]
 80016e2:	47b8      	blx	r7
 80016e4:	e063      	b.n	80017ae <PE_Check_ExtendedMessage+0x1ce>
 80016e6:	1ec8      	subs	r0, r1, #3
 80016e8:	2808      	cmp	r0, #8
 80016ea:	d862      	bhi.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 80016ec:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <PE_Check_ExtendedMessage+0x114>)
 80016ee:	5c12      	ldrb	r2, [r2, r0]
 80016f0:	4497      	add	pc, r2
 80016f2:	bf00      	nop
 80016f4:	46be280a 	.word	0x46be280a
 80016f8:	669884be 	.word	0x669884be
 80016fc:	006e      	.short	0x006e
 80016fe:	6820      	ldr	r0, [r4, #0]
 8001700:	8900      	ldrh	r0, [r0, #8]
 8001702:	0b00      	lsrs	r0, r0, #12
 8001704:	4228      	tst	r0, r5
 8001706:	d054      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001708:	2301      	movs	r3, #1
 800170a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800170c:	1d02      	adds	r2, r0, #4
 800170e:	2110      	movs	r1, #16
 8001710:	7c20      	ldrb	r0, [r4, #16]
 8001712:	68a5      	ldr	r5, [r4, #8]
 8001714:	69ad      	ldr	r5, [r5, #24]
 8001716:	47a8      	blx	r5
 8001718:	203a      	movs	r0, #58	; 0x3a
 800171a:	e01c      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800171c:	6820      	ldr	r0, [r4, #0]
 800171e:	8900      	ldrh	r0, [r0, #8]
 8001720:	0b00      	lsrs	r0, r0, #12
 8001722:	4228      	tst	r0, r5
 8001724:	d045      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001726:	2301      	movs	r3, #1
 8001728:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800172a:	1d02      	adds	r2, r0, #4
 800172c:	210e      	movs	r1, #14
 800172e:	7c20      	ldrb	r0, [r4, #16]
 8001730:	68a5      	ldr	r5, [r4, #8]
 8001732:	69ad      	ldr	r5, [r5, #24]
 8001734:	47a8      	blx	r5
 8001736:	203b      	movs	r0, #59	; 0x3b
 8001738:	e00d      	b.n	8001756 <PE_Check_ExtendedMessage+0x176>
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	8900      	ldrh	r0, [r0, #8]
 800173e:	0980      	lsrs	r0, r0, #6
 8001740:	4228      	tst	r0, r5
 8001742:	d036      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001744:	2302      	movs	r3, #2
 8001746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001748:	1d02      	adds	r2, r0, #4
 800174a:	210c      	movs	r1, #12
 800174c:	7c20      	ldrb	r0, [r4, #16]
 800174e:	68a5      	ldr	r5, [r4, #8]
 8001750:	69ad      	ldr	r5, [r5, #24]
 8001752:	47a8      	blx	r5
 8001754:	203c      	movs	r0, #60	; 0x3c
 8001756:	7460      	strb	r0, [r4, #17]
 8001758:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800175a:	6820      	ldr	r0, [r4, #0]
 800175c:	8900      	ldrh	r0, [r0, #8]
 800175e:	0a80      	lsrs	r0, r0, #10
 8001760:	e00d      	b.n	800177e <PE_Check_ExtendedMessage+0x19e>
 8001762:	68a0      	ldr	r0, [r4, #8]
 8001764:	6905      	ldr	r5, [r0, #16]
 8001766:	2d00      	cmp	r5, #0
 8001768:	d024      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <.text_8>)
 800176c:	5a23      	ldrh	r3, [r4, r0]
 800176e:	4816      	ldr	r0, [pc, #88]	; (80017c8 <.text_9>)
 8001770:	1822      	adds	r2, r4, r0
 8001772:	7c20      	ldrb	r0, [r4, #16]
 8001774:	47a8      	blx	r5
 8001776:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	8900      	ldrh	r0, [r0, #8]
 800177c:	0a40      	lsrs	r0, r0, #9
 800177e:	4228      	tst	r0, r5
 8001780:	d017      	beq.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 8001782:	68a0      	ldr	r0, [r4, #8]
 8001784:	6900      	ldr	r0, [r0, #16]
 8001786:	2800      	cmp	r0, #0
 8001788:	d109      	bne.n	800179e <PE_Check_ExtendedMessage+0x1be>
 800178a:	e012      	b.n	80017b2 <PE_Check_ExtendedMessage+0x1d2>
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	8900      	ldrh	r0, [r0, #8]
 8001790:	0a40      	lsrs	r0, r0, #9
 8001792:	4228      	tst	r0, r5
 8001794:	d00e      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 8001796:	68a0      	ldr	r0, [r4, #8]
 8001798:	6900      	ldr	r0, [r0, #16]
 800179a:	2800      	cmp	r0, #0
 800179c:	d00a      	beq.n	80017b4 <PE_Check_ExtendedMessage+0x1d4>
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <.text_8>)
 80017a0:	5a23      	ldrh	r3, [r4, r0]
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <.text_9>)
 80017a4:	1822      	adds	r2, r4, r0
 80017a6:	7c20      	ldrb	r0, [r4, #16]
 80017a8:	68a5      	ldr	r5, [r4, #8]
 80017aa:	692d      	ldr	r5, [r5, #16]
 80017ac:	47a8      	blx	r5
 80017ae:	7466      	strb	r6, [r4, #17]
 80017b0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80017b2:	7465      	strb	r5, [r4, #17]
 80017b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080017b8 <.text_5>:
 80017b8:	00000263 	.word	0x00000263

080017bc <.text_6>:
 80017bc:	00000265 	.word	0x00000265

080017c0 <.text_7>:
 80017c0:	0000025a 	.word	0x0000025a

080017c4 <.text_8>:
 80017c4:	0000048e 	.word	0x0000048e

080017c8 <.text_9>:
 80017c8:	00000281 	.word	0x00000281

080017cc <PE_Send_ExtendedMessage>:
 80017cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80017d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80017d4:	0004      	movs	r4, r0
 80017d6:	000d      	movs	r5, r1
 80017d8:	4668      	mov	r0, sp
 80017da:	7202      	strb	r2, [r0, #8]
 80017dc:	9303      	str	r3, [sp, #12]
 80017de:	6860      	ldr	r0, [r4, #4]
 80017e0:	6800      	ldr	r0, [r0, #0]
 80017e2:	04c1      	lsls	r1, r0, #19
 80017e4:	0fc9      	lsrs	r1, r1, #31
 80017e6:	d019      	beq.n	800181c <PE_Send_ExtendedMessage+0x50>
 80017e8:	9601      	str	r6, [sp, #4]
 80017ea:	9700      	str	r7, [sp, #0]
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	4668      	mov	r0, sp
 80017f0:	7a00      	ldrb	r0, [r0, #8]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4302      	orrs	r2, r0
 80017f6:	0029      	movs	r1, r5
 80017f8:	7c20      	ldrb	r0, [r4, #16]
 80017fa:	f003 ffd7 	bl	80057ac <USBPD_PRL_SendMessage>
 80017fe:	2803      	cmp	r0, #3
 8001800:	d0ed      	beq.n	80017de <PE_Send_ExtendedMessage+0x12>
 8001802:	0029      	movs	r1, r5
 8001804:	2810      	cmp	r0, #16
 8001806:	d007      	beq.n	8001818 <PE_Send_ExtendedMessage+0x4c>
 8001808:	aa0b      	add	r2, sp, #44	; 0x2c
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	9200      	str	r2, [sp, #0]
 800180e:	0003      	movs	r3, r0
 8001810:	2200      	movs	r2, #0
 8001812:	0020      	movs	r0, r4
 8001814:	f000 faca 	bl	8001dac <PE_CheckSendMessageStatus>
 8001818:	b005      	add	sp, #20
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181c:	2011      	movs	r0, #17
 800181e:	7460      	strb	r0, [r4, #17]
 8001820:	2010      	movs	r0, #16
 8001822:	e7f9      	b.n	8001818 <PE_Send_ExtendedMessage+0x4c>

08001824 <PE_SubStateMachine_ExtendedMessages>:
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	0004      	movs	r4, r0
 800182a:	2702      	movs	r7, #2
 800182c:	4889      	ldr	r0, [pc, #548]	; (8001a54 <.text_12>)
 800182e:	1820      	adds	r0, r4, r0
 8001830:	9000      	str	r0, [sp, #0]
 8001832:	2039      	movs	r0, #57	; 0x39
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	466a      	mov	r2, sp
 8001838:	7211      	strb	r1, [r2, #8]
 800183a:	4a87      	ldr	r2, [pc, #540]	; (8001a58 <.text_13>)
 800183c:	2500      	movs	r5, #0
 800183e:	2603      	movs	r6, #3
 8001840:	7c63      	ldrb	r3, [r4, #17]
 8001842:	2b31      	cmp	r3, #49	; 0x31
 8001844:	d010      	beq.n	8001868 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001846:	2b33      	cmp	r3, #51	; 0x33
 8001848:	d075      	beq.n	8001936 <PE_SubStateMachine_ExtendedMessages+0x112>
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d07c      	beq.n	8001948 <PE_SubStateMachine_ExtendedMessages+0x124>
 800184e:	2b35      	cmp	r3, #53	; 0x35
 8001850:	d100      	bne.n	8001854 <PE_SubStateMachine_ExtendedMessages+0x30>
 8001852:	e0a8      	b.n	80019a6 <PE_SubStateMachine_ExtendedMessages+0x182>
 8001854:	2b36      	cmp	r3, #54	; 0x36
 8001856:	d100      	bne.n	800185a <PE_SubStateMachine_ExtendedMessages+0x36>
 8001858:	e0be      	b.n	80019d8 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 800185a:	2b37      	cmp	r3, #55	; 0x37
 800185c:	d100      	bne.n	8001860 <PE_SubStateMachine_ExtendedMessages+0x3c>
 800185e:	e0be      	b.n	80019de <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001860:	2b38      	cmp	r3, #56	; 0x38
 8001862:	d100      	bne.n	8001866 <PE_SubStateMachine_ExtendedMessages+0x42>
 8001864:	e0ef      	b.n	8001a46 <PE_SubStateMachine_ExtendedMessages+0x222>
 8001866:	e0f2      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001868:	487c      	ldr	r0, [pc, #496]	; (8001a5c <.text_14>)
 800186a:	1820      	adds	r0, r4, r0
 800186c:	9004      	str	r0, [sp, #16]
 800186e:	4669      	mov	r1, sp
 8001870:	730d      	strb	r5, [r1, #12]
 8001872:	497b      	ldr	r1, [pc, #492]	; (8001a60 <.text_15>)
 8001874:	5265      	strh	r5, [r4, r1]
 8001876:	7c20      	ldrb	r0, [r4, #16]
 8001878:	f7ff fa64 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800187c:	2801      	cmp	r0, #1
 800187e:	d107      	bne.n	8001890 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001880:	4878      	ldr	r0, [pc, #480]	; (8001a64 <.text_16>)
 8001882:	1820      	adds	r0, r4, r0
 8001884:	7005      	strb	r5, [r0, #0]
 8001886:	7045      	strb	r5, [r0, #1]
 8001888:	4877      	ldr	r0, [pc, #476]	; (8001a68 <.text_17>)
 800188a:	1820      	adds	r0, r4, r0
 800188c:	9004      	str	r0, [sp, #16]
 800188e:	e028      	b.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001890:	4976      	ldr	r1, [pc, #472]	; (8001a6c <.text_18>)
 8001892:	1861      	adds	r1, r4, r1
 8001894:	72cd      	strb	r5, [r1, #11]
 8001896:	4975      	ldr	r1, [pc, #468]	; (8001a6c <.text_18>)
 8001898:	1861      	adds	r1, r4, r1
 800189a:	730d      	strb	r5, [r1, #12]
 800189c:	7c20      	ldrb	r0, [r4, #16]
 800189e:	f7ff fa51 	bl	8000d44 <PE_Get_UnchunkedSupport>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d106      	bne.n	80018b4 <PE_SubStateMachine_ExtendedMessages+0x90>
 80018a6:	4871      	ldr	r0, [pc, #452]	; (8001a6c <.text_18>)
 80018a8:	1820      	adds	r0, r4, r0
 80018aa:	7b01      	ldrb	r1, [r0, #12]
 80018ac:	466a      	mov	r2, sp
 80018ae:	7a12      	ldrb	r2, [r2, #8]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	7302      	strb	r2, [r0, #12]
 80018b4:	486a      	ldr	r0, [pc, #424]	; (8001a60 <.text_15>)
 80018b6:	1820      	adds	r0, r4, r0
 80018b8:	8841      	ldrh	r1, [r0, #2]
 80018ba:	291b      	cmp	r1, #27
 80018bc:	d30e      	bcc.n	80018dc <PE_SubStateMachine_ExtendedMessages+0xb8>
 80018be:	486a      	ldr	r0, [pc, #424]	; (8001a68 <.text_17>)
 80018c0:	1820      	adds	r0, r4, r0
 80018c2:	5d40      	ldrb	r0, [r0, r5]
 80018c4:	9900      	ldr	r1, [sp, #0]
 80018c6:	5548      	strb	r0, [r1, r5]
 80018c8:	1c6d      	adds	r5, r5, #1
 80018ca:	2d1a      	cmp	r5, #26
 80018cc:	d209      	bcs.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0xbe>
 80018ce:	e7f6      	b.n	80018be <PE_SubStateMachine_ExtendedMessages+0x9a>
 80018d0:	4965      	ldr	r1, [pc, #404]	; (8001a68 <.text_17>)
 80018d2:	1861      	adds	r1, r4, r1
 80018d4:	5d49      	ldrb	r1, [r1, r5]
 80018d6:	9a00      	ldr	r2, [sp, #0]
 80018d8:	5551      	strb	r1, [r2, r5]
 80018da:	1c6d      	adds	r5, r5, #1
 80018dc:	8841      	ldrh	r1, [r0, #2]
 80018de:	428d      	cmp	r5, r1
 80018e0:	d3f6      	bcc.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0xac>
 80018e2:	2001      	movs	r0, #1
 80018e4:	6961      	ldr	r1, [r4, #20]
 80018e6:	0949      	lsrs	r1, r1, #5
 80018e8:	4001      	ands	r1, r0
 80018ea:	d00a      	beq.n	8001902 <PE_SubStateMachine_ExtendedMessages+0xde>
 80018ec:	6861      	ldr	r1, [r4, #4]
 80018ee:	6809      	ldr	r1, [r1, #0]
 80018f0:	0889      	lsrs	r1, r1, #2
 80018f2:	4001      	ands	r1, r0
 80018f4:	d002      	beq.n	80018fc <PE_SubStateMachine_ExtendedMessages+0xd8>
 80018f6:	4669      	mov	r1, sp
 80018f8:	7308      	strb	r0, [r1, #12]
 80018fa:	e001      	b.n	8001900 <PE_SubStateMachine_ExtendedMessages+0xdc>
 80018fc:	4669      	mov	r1, sp
 80018fe:	730f      	strb	r7, [r1, #12]
 8001900:	2633      	movs	r6, #51	; 0x33
 8001902:	4668      	mov	r0, sp
 8001904:	7b00      	ldrb	r0, [r0, #12]
 8001906:	9002      	str	r0, [sp, #8]
 8001908:	9601      	str	r6, [sp, #4]
 800190a:	4855      	ldr	r0, [pc, #340]	; (8001a60 <.text_15>)
 800190c:	1820      	adds	r0, r4, r0
 800190e:	8840      	ldrh	r0, [r0, #2]
 8001910:	1d00      	adds	r0, r0, #4
 8001912:	b280      	uxth	r0, r0
 8001914:	9000      	str	r0, [sp, #0]
 8001916:	9b04      	ldr	r3, [sp, #16]
 8001918:	4854      	ldr	r0, [pc, #336]	; (8001a6c <.text_18>)
 800191a:	1820      	adds	r0, r4, r0
 800191c:	78c2      	ldrb	r2, [r0, #3]
 800191e:	2033      	movs	r0, #51	; 0x33
 8001920:	5c21      	ldrb	r1, [r4, r0]
 8001922:	0020      	movs	r0, r4
 8001924:	f7ff ff52 	bl	80017cc <PE_Send_ExtendedMessage>
 8001928:	2800      	cmp	r0, #0
 800192a:	d103      	bne.n	8001934 <PE_SubStateMachine_ExtendedMessages+0x110>
 800192c:	484f      	ldr	r0, [pc, #316]	; (8001a6c <.text_18>)
 800192e:	1820      	adds	r0, r4, r0
 8001930:	7940      	ldrb	r0, [r0, #5]
 8001932:	7720      	strb	r0, [r4, #28]
 8001934:	e08b      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001936:	83e2      	strh	r2, [r4, #30]
 8001938:	271b      	movs	r7, #27
 800193a:	494c      	ldr	r1, [pc, #304]	; (8001a6c <.text_18>)
 800193c:	1861      	adds	r1, r4, r1
 800193e:	78c9      	ldrb	r1, [r1, #3]
 8001940:	2904      	cmp	r1, #4
 8001942:	d151      	bne.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001944:	2074      	movs	r0, #116	; 0x74
 8001946:	e04f      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001948:	4848      	ldr	r0, [pc, #288]	; (8001a6c <.text_18>)
 800194a:	5a20      	ldrh	r0, [r4, r0]
 800194c:	0440      	lsls	r0, r0, #17
 800194e:	0f02      	lsrs	r2, r0, #28
 8001950:	211a      	movs	r1, #26
 8001952:	4351      	muls	r1, r2
 8001954:	4842      	ldr	r0, [pc, #264]	; (8001a60 <.text_15>)
 8001956:	1820      	adds	r0, r4, r0
 8001958:	8843      	ldrh	r3, [r0, #2]
 800195a:	4299      	cmp	r1, r3
 800195c:	da01      	bge.n	8001962 <PE_SubStateMachine_ExtendedMessages+0x13e>
 800195e:	2a0a      	cmp	r2, #10
 8001960:	d301      	bcc.n	8001966 <PE_SubStateMachine_ExtendedMessages+0x142>
 8001962:	7466      	strb	r6, [r4, #17]
 8001964:	e01d      	b.n	80019a2 <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001966:	1a5a      	subs	r2, r3, r1
 8001968:	2a1a      	cmp	r2, #26
 800196a:	d202      	bcs.n	8001972 <PE_SubStateMachine_ExtendedMessages+0x14e>
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e000      	b.n	8001974 <PE_SubStateMachine_ExtendedMessages+0x150>
 8001972:	231a      	movs	r3, #26
 8001974:	2200      	movs	r2, #0
 8001976:	e006      	b.n	8001986 <PE_SubStateMachine_ExtendedMessages+0x162>
 8001978:	4e3b      	ldr	r6, [pc, #236]	; (8001a68 <.text_17>)
 800197a:	19a6      	adds	r6, r4, r6
 800197c:	188f      	adds	r7, r1, r2
 800197e:	5df6      	ldrb	r6, [r6, r7]
 8001980:	9f00      	ldr	r7, [sp, #0]
 8001982:	54be      	strb	r6, [r7, r2]
 8001984:	1c52      	adds	r2, r2, #1
 8001986:	429a      	cmp	r2, r3
 8001988:	d3f6      	bcc.n	8001978 <PE_SubStateMachine_ExtendedMessages+0x154>
 800198a:	4934      	ldr	r1, [pc, #208]	; (8001a5c <.text_14>)
 800198c:	1863      	adds	r3, r4, r1
 800198e:	8842      	ldrh	r2, [r0, #2]
 8001990:	4836      	ldr	r0, [pc, #216]	; (8001a6c <.text_18>)
 8001992:	5a20      	ldrh	r0, [r4, r0]
 8001994:	0440      	lsls	r0, r0, #17
 8001996:	0f01      	lsrs	r1, r0, #28
 8001998:	7c20      	ldrb	r0, [r4, #16]
 800199a:	f004 fba8 	bl	80060ee <USBPD_PRL_PrepareExtendedTxChunkSending>
 800199e:	2035      	movs	r0, #53	; 0x35
 80019a0:	7460      	strb	r0, [r4, #17]
 80019a2:	2700      	movs	r7, #0
 80019a4:	e053      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019a6:	6960      	ldr	r0, [r4, #20]
 80019a8:	0681      	lsls	r1, r0, #26
 80019aa:	0fc9      	lsrs	r1, r1, #31
 80019ac:	d001      	beq.n	80019b2 <PE_SubStateMachine_ExtendedMessages+0x18e>
 80019ae:	2036      	movs	r0, #54	; 0x36
 80019b0:	e000      	b.n	80019b4 <PE_SubStateMachine_ExtendedMessages+0x190>
 80019b2:	2003      	movs	r0, #3
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <.text_15>)
 80019b6:	1866      	adds	r6, r4, r1
 80019b8:	9502      	str	r5, [sp, #8]
 80019ba:	9001      	str	r0, [sp, #4]
 80019bc:	8870      	ldrh	r0, [r6, #2]
 80019be:	9000      	str	r0, [sp, #0]
 80019c0:	4826      	ldr	r0, [pc, #152]	; (8001a5c <.text_14>)
 80019c2:	1823      	adds	r3, r4, r0
 80019c4:	3809      	subs	r0, #9
 80019c6:	1820      	adds	r0, r4, r0
 80019c8:	78c2      	ldrb	r2, [r0, #3]
 80019ca:	2030      	movs	r0, #48	; 0x30
 80019cc:	5c21      	ldrb	r1, [r4, r0]
 80019ce:	0020      	movs	r0, r4
 80019d0:	f7ff fefc 	bl	80017cc <PE_Send_ExtendedMessage>
 80019d4:	8035      	strh	r5, [r6, #0]
 80019d6:	e03a      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019d8:	83e2      	strh	r2, [r4, #30]
 80019da:	271b      	movs	r7, #27
 80019dc:	e004      	b.n	80019e8 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 80019de:	8be0      	ldrh	r0, [r4, #30]
 80019e0:	020b      	lsls	r3, r1, #8
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d102      	bne.n	80019ec <PE_SubStateMachine_ExtendedMessages+0x1c8>
 80019e6:	200f      	movs	r0, #15
 80019e8:	7460      	strb	r0, [r4, #17]
 80019ea:	e030      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 80019ec:	83e2      	strh	r2, [r4, #30]
 80019ee:	271b      	movs	r7, #27
 80019f0:	481a      	ldr	r0, [pc, #104]	; (8001a5c <.text_14>)
 80019f2:	1825      	adds	r5, r4, r0
 80019f4:	0029      	movs	r1, r5
 80019f6:	7c20      	ldrb	r0, [r4, #16]
 80019f8:	f004 fba1 	bl	800613e <USBPD_PRL_PrepareChunkRequest>
 80019fc:	6860      	ldr	r0, [r4, #4]
 80019fe:	6800      	ldr	r0, [r0, #0]
 8001a00:	04c1      	lsls	r1, r0, #19
 8001a02:	0fc9      	lsrs	r1, r1, #31
 8001a04:	d012      	beq.n	8001a2c <PE_SubStateMachine_ExtendedMessages+0x208>
 8001a06:	2000      	movs	r0, #0
 8001a08:	9001      	str	r0, [sp, #4]
 8001a0a:	2006      	movs	r0, #6
 8001a0c:	9000      	str	r0, [sp, #0]
 8001a0e:	002b      	movs	r3, r5
 8001a10:	4816      	ldr	r0, [pc, #88]	; (8001a6c <.text_18>)
 8001a12:	1820      	adds	r0, r4, r0
 8001a14:	7880      	ldrb	r0, [r0, #2]
 8001a16:	4669      	mov	r1, sp
 8001a18:	7a0a      	ldrb	r2, [r1, #8]
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	2030      	movs	r0, #48	; 0x30
 8001a1e:	5c21      	ldrb	r1, [r4, r0]
 8001a20:	7c20      	ldrb	r0, [r4, #16]
 8001a22:	f003 fec3 	bl	80057ac <USBPD_PRL_SendMessage>
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d0e8      	beq.n	80019fc <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001a2a:	e002      	b.n	8001a32 <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001a2c:	2011      	movs	r0, #17
 8001a2e:	7460      	strb	r0, [r4, #17]
 8001a30:	2010      	movs	r0, #16
 8001a32:	2139      	movs	r1, #57	; 0x39
 8001a34:	9100      	str	r1, [sp, #0]
 8001a36:	0003      	movs	r3, r0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	5c21      	ldrb	r1, [r4, r0]
 8001a3e:	0020      	movs	r0, r4
 8001a40:	f000 f9b4 	bl	8001dac <PE_CheckSendMessageStatus>
 8001a44:	e003      	b.n	8001a4e <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001a46:	7466      	strb	r6, [r4, #17]
 8001a48:	2700      	movs	r7, #0
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <.text_15>)
 8001a4c:	5225      	strh	r5, [r4, r0]
 8001a4e:	0038      	movs	r0, r7
 8001a50:	b005      	add	sp, #20
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a54 <.text_12>:
 8001a54:	00000267 	.word	0x00000267

08001a58 <.text_13>:
 8001a58:	0000801b 	.word	0x0000801b

08001a5c <.text_14>:
 8001a5c:	00000263 	.word	0x00000263

08001a60 <.text_15>:
 8001a60:	0000048e 	.word	0x0000048e

08001a64 <.text_16>:
 8001a64:	00000387 	.word	0x00000387

08001a68 <.text_17>:
 8001a68:	00000385 	.word	0x00000385

08001a6c <.text_18>:
 8001a6c:	0000025a 	.word	0x0000025a

08001a70 <PE_ManageRXEvent>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	2130      	movs	r1, #48	; 0x30
 8001a74:	5c41      	ldrb	r1, [r0, r1]
 8001a76:	2231      	movs	r2, #49	; 0x31
 8001a78:	5481      	strb	r1, [r0, r2]
 8001a7a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8001a7c:	0bca      	lsrs	r2, r1, #15
 8001a7e:	d002      	beq.n	8001a86 <PE_ManageRXEvent+0x16>
 8001a80:	f7ff fdae 	bl	80015e0 <PE_Check_ExtendedMessage>
 8001a84:	bd01      	pop	{r0, pc}
 8001a86:	22f0      	movs	r2, #240	; 0xf0
 8001a88:	0212      	lsls	r2, r2, #8
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	d102      	bne.n	8001a94 <PE_ManageRXEvent+0x24>
 8001a8e:	f000 f805 	bl	8001a9c <PE_Check_ControlMessage>
 8001a92:	bd01      	pop	{r0, pc}
 8001a94:	f000 f8e5 	bl	8001c62 <PE_Check_DataMessage>
 8001a98:	bd01      	pop	{r0, pc}
	...

08001a9c <PE_Check_ControlMessage>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	0004      	movs	r4, r0
 8001aa0:	272a      	movs	r7, #42	; 0x2a
 8001aa2:	2603      	movs	r6, #3
 8001aa4:	2501      	movs	r5, #1
 8001aa6:	200b      	movs	r0, #11
 8001aa8:	2134      	movs	r1, #52	; 0x34
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	06c9      	lsls	r1, r1, #27
 8001aae:	0ec9      	lsrs	r1, r1, #27
 8001ab0:	1e49      	subs	r1, r1, #1
 8001ab2:	2917      	cmp	r1, #23
 8001ab4:	d900      	bls.n	8001ab8 <PE_Check_ControlMessage+0x1c>
 8001ab6:	e0c7      	b.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <PE_Check_ControlMessage+0x24>)
 8001aba:	5c52      	ldrb	r2, [r2, r1]
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	4497      	add	pc, r2
 8001ac0:	c0c00bcb 	.word	0xc0c00bcb
 8001ac4:	5b22c020 	.word	0x5b22c020
 8001ac8:	c0413449 	.word	0xc0413449
 8001acc:	bec3c319 	.word	0xbec3c319
 8001ad0:	9fb7936f 	.word	0x9fb7936f
 8001ad4:	bac383b0 	.word	0xbac383b0
 8001ad8:	6860      	ldr	r0, [r4, #4]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	0880      	lsrs	r0, r0, #2
 8001ade:	4005      	ands	r5, r0
 8001ae0:	d000      	beq.n	8001ae4 <PE_Check_ControlMessage+0x48>
 8001ae2:	e0b9      	b.n	8001c58 <PE_Check_ControlMessage+0x1bc>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	7720      	strb	r0, [r4, #28]
 8001ae8:	212b      	movs	r1, #43	; 0x2b
 8001aea:	7c20      	ldrb	r0, [r4, #16]
 8001aec:	f7fe fcc8 	bl	8000480 <USBPD_PE_Notification>
 8001af0:	2098      	movs	r0, #152	; 0x98
 8001af2:	e0a7      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001af4:	7726      	strb	r6, [r4, #28]
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	7c20      	ldrb	r0, [r4, #16]
 8001afa:	f7fe fcc1 	bl	8000480 <USBPD_PE_Notification>
 8001afe:	2010      	movs	r0, #16
 8001b00:	e0a0      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b02:	2133      	movs	r1, #51	; 0x33
 8001b04:	e09c      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001b06:	2006      	movs	r0, #6
 8001b08:	7720      	strb	r0, [r4, #28]
 8001b0a:	6860      	ldr	r0, [r4, #4]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	0881      	lsrs	r1, r0, #2
 8001b10:	4029      	ands	r1, r5
 8001b12:	d104      	bne.n	8001b1e <PE_Check_ControlMessage+0x82>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	6849      	ldr	r1, [r1, #4]
 8001b18:	08c9      	lsrs	r1, r1, #3
 8001b1a:	4029      	ands	r1, r5
 8001b1c:	d039      	beq.n	8001b92 <PE_Check_ControlMessage+0xf6>
 8001b1e:	210c      	movs	r1, #12
 8001b20:	7c20      	ldrb	r0, [r4, #16]
 8001b22:	f7fe fcad 	bl	8000480 <USBPD_PE_Notification>
 8001b26:	204c      	movs	r0, #76	; 0x4c
 8001b28:	e08c      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	6840      	ldr	r0, [r0, #4]
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	4028      	ands	r0, r5
 8001b32:	d00a      	beq.n	8001b4a <PE_Check_ControlMessage+0xae>
 8001b34:	2008      	movs	r0, #8
 8001b36:	7720      	strb	r0, [r4, #28]
 8001b38:	213c      	movs	r1, #60	; 0x3c
 8001b3a:	7c20      	ldrb	r0, [r4, #16]
 8001b3c:	f7fe fca0 	bl	8000480 <USBPD_PE_Notification>
 8001b40:	2022      	movs	r0, #34	; 0x22
 8001b42:	e07f      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b44:	68a0      	ldr	r0, [r4, #8]
 8001b46:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d07d      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	7720      	strb	r0, [r4, #28]
 8001b50:	209d      	movs	r0, #157	; 0x9d
 8001b52:	e077      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	7c20      	ldrb	r0, [r4, #16]
 8001b58:	f7fe fc92 	bl	8000480 <USBPD_PE_Notification>
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	05c0      	lsls	r0, r0, #23
 8001b60:	0f40      	lsrs	r0, r0, #29
 8001b62:	d001      	beq.n	8001b68 <PE_Check_ControlMessage+0xcc>
 8001b64:	200f      	movs	r0, #15
 8001b66:	e06d      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b68:	68a0      	ldr	r0, [r4, #8]
 8001b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d06b      	beq.n	8001c48 <PE_Check_ControlMessage+0x1ac>
 8001b70:	2010      	movs	r0, #16
 8001b72:	7720      	strb	r0, [r4, #28]
 8001b74:	2093      	movs	r0, #147	; 0x93
 8001b76:	e065      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001b78:	6860      	ldr	r0, [r4, #4]
 8001b7a:	6800      	ldr	r0, [r0, #0]
 8001b7c:	0541      	lsls	r1, r0, #21
 8001b7e:	0f49      	lsrs	r1, r1, #29
 8001b80:	2903      	cmp	r1, #3
 8001b82:	d163      	bne.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b84:	0881      	lsrs	r1, r0, #2
 8001b86:	4029      	ands	r1, r5
 8001b88:	d004      	beq.n	8001b94 <PE_Check_ControlMessage+0xf8>
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	08c9      	lsrs	r1, r1, #3
 8001b90:	4029      	ands	r1, r5
 8001b92:	d05b      	beq.n	8001c4c <PE_Check_ControlMessage+0x1b0>
 8001b94:	2007      	movs	r0, #7
 8001b96:	7720      	strb	r0, [r4, #28]
 8001b98:	201d      	movs	r0, #29
 8001b9a:	7460      	strb	r0, [r4, #17]
 8001b9c:	2106      	movs	r1, #6
 8001b9e:	e04f      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	8901      	ldrh	r1, [r0, #8]
 8001ba4:	08c9      	lsrs	r1, r1, #3
 8001ba6:	4229      	tst	r1, r5
 8001ba8:	d053      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001baa:	6861      	ldr	r1, [r4, #4]
 8001bac:	6809      	ldr	r1, [r1, #0]
 8001bae:	0889      	lsrs	r1, r1, #2
 8001bb0:	4029      	ands	r1, r5
 8001bb2:	d103      	bne.n	8001bbc <PE_Check_ControlMessage+0x120>
 8001bb4:	6840      	ldr	r0, [r0, #4]
 8001bb6:	08c0      	lsrs	r0, r0, #3
 8001bb8:	4028      	ands	r0, r5
 8001bba:	d04a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	7720      	strb	r0, [r4, #28]
 8001bc0:	2063      	movs	r0, #99	; 0x63
 8001bc2:	7460      	strb	r0, [r4, #17]
 8001bc4:	2146      	movs	r1, #70	; 0x46
 8001bc6:	e03b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001bc8:	6860      	ldr	r0, [r4, #4]
 8001bca:	6800      	ldr	r0, [r0, #0]
 8001bcc:	0880      	lsrs	r0, r0, #2
 8001bce:	4028      	ands	r0, r5
 8001bd0:	d004      	beq.n	8001bdc <PE_Check_ControlMessage+0x140>
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	6840      	ldr	r0, [r0, #4]
 8001bd6:	08c0      	lsrs	r0, r0, #3
 8001bd8:	4028      	ands	r0, r5
 8001bda:	d03a      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bdc:	205f      	movs	r0, #95	; 0x5f
 8001bde:	7720      	strb	r0, [r4, #28]
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	7460      	strb	r0, [r4, #17]
 8001be4:	2160      	movs	r1, #96	; 0x60
 8001be6:	e02b      	b.n	8001c40 <PE_Check_ControlMessage+0x1a4>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	8909      	ldrh	r1, [r1, #8]
 8001bec:	0949      	lsrs	r1, r1, #5
 8001bee:	4229      	tst	r1, r5
 8001bf0:	d02f      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001bf2:	7720      	strb	r0, [r4, #28]
 8001bf4:	214d      	movs	r1, #77	; 0x4d
 8001bf6:	7c20      	ldrb	r0, [r4, #16]
 8001bf8:	f7fe fc42 	bl	8000480 <USBPD_PE_Notification>
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	e021      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c00:	6821      	ldr	r1, [r4, #0]
 8001c02:	8909      	ldrh	r1, [r1, #8]
 8001c04:	0889      	lsrs	r1, r1, #2
 8001c06:	4229      	tst	r1, r5
 8001c08:	d023      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c0a:	7720      	strb	r0, [r4, #28]
 8001c0c:	2149      	movs	r1, #73	; 0x49
 8001c0e:	7c20      	ldrb	r0, [r4, #16]
 8001c10:	f7fe fc36 	bl	8000480 <USBPD_PE_Notification>
 8001c14:	6860      	ldr	r0, [r4, #4]
 8001c16:	6800      	ldr	r0, [r0, #0]
 8001c18:	0880      	lsrs	r0, r0, #2
 8001c1a:	4005      	ands	r5, r0
 8001c1c:	d011      	beq.n	8001c42 <PE_Check_ControlMessage+0x1a6>
 8001c1e:	202d      	movs	r0, #45	; 0x2d
 8001c20:	e010      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	8900      	ldrh	r0, [r0, #8]
 8001c26:	09c0      	lsrs	r0, r0, #7
 8001c28:	4228      	tst	r0, r5
 8001c2a:	d012      	beq.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c2c:	202f      	movs	r0, #47	; 0x2f
 8001c2e:	e009      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c30:	2009      	movs	r0, #9
 8001c32:	7720      	strb	r0, [r4, #28]
 8001c34:	e00d      	b.n	8001c52 <PE_Check_ControlMessage+0x1b6>
 8001c36:	200f      	movs	r0, #15
 8001c38:	7720      	strb	r0, [r4, #28]
 8001c3a:	204b      	movs	r0, #75	; 0x4b
 8001c3c:	e002      	b.n	8001c44 <PE_Check_ControlMessage+0x1a8>
 8001c3e:	2159      	movs	r1, #89	; 0x59
 8001c40:	e00b      	b.n	8001c5a <.text_21>
 8001c42:	2011      	movs	r0, #17
 8001c44:	7460      	strb	r0, [r4, #17]
 8001c46:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c48:	6860      	ldr	r0, [r4, #4]
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	4006      	ands	r6, r0
 8001c4e:	2e02      	cmp	r6, #2
 8001c50:	d101      	bne.n	8001c56 <PE_Check_ControlMessage+0x1ba>
 8001c52:	7465      	strb	r5, [r4, #17]
 8001c54:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001c56:	7467      	strb	r7, [r4, #17]
 8001c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c5a <.text_21>:
 8001c5a:	7c20      	ldrb	r0, [r4, #16]
 8001c5c:	f7fe fc10 	bl	8000480 <USBPD_PE_Notification>
 8001c60:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001c62 <PE_Check_DataMessage>:
 8001c62:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001c64:	0004      	movs	r4, r0
 8001c66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001c68:	2501      	movs	r5, #1
 8001c6a:	2603      	movs	r6, #3
 8001c6c:	2700      	movs	r7, #0
 8001c6e:	06c1      	lsls	r1, r0, #27
 8001c70:	0ec9      	lsrs	r1, r1, #27
 8001c72:	2901      	cmp	r1, #1
 8001c74:	d029      	beq.n	8001cca <PE_Check_DataMessage+0x68>
 8001c76:	2902      	cmp	r1, #2
 8001c78:	d00b      	beq.n	8001c92 <PE_Check_DataMessage+0x30>
 8001c7a:	2903      	cmp	r1, #3
 8001c7c:	d03d      	beq.n	8001cfa <PE_Check_DataMessage+0x98>
 8001c7e:	2906      	cmp	r1, #6
 8001c80:	d079      	beq.n	8001d76 <PE_Check_DataMessage+0x114>
 8001c82:	2907      	cmp	r1, #7
 8001c84:	d100      	bne.n	8001c88 <PE_Check_DataMessage+0x26>
 8001c86:	e085      	b.n	8001d94 <PE_Check_DataMessage+0x132>
 8001c88:	290a      	cmp	r1, #10
 8001c8a:	d078      	beq.n	8001d7e <PE_Check_DataMessage+0x11c>
 8001c8c:	290f      	cmp	r1, #15
 8001c8e:	d06e      	beq.n	8001d6e <PE_Check_DataMessage+0x10c>
 8001c90:	e089      	b.n	8001da6 <PE_Check_DataMessage+0x144>
 8001c92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c94:	7881      	ldrb	r1, [r0, #2]
 8001c96:	78c2      	ldrb	r2, [r0, #3]
 8001c98:	0212      	lsls	r2, r2, #8
 8001c9a:	1889      	adds	r1, r1, r2
 8001c9c:	7902      	ldrb	r2, [r0, #4]
 8001c9e:	0412      	lsls	r2, r2, #16
 8001ca0:	1889      	adds	r1, r1, r2
 8001ca2:	7940      	ldrb	r0, [r0, #5]
 8001ca4:	0600      	lsls	r0, r0, #24
 8001ca6:	1808      	adds	r0, r1, r0
 8001ca8:	9000      	str	r0, [sp, #0]
 8001caa:	6860      	ldr	r0, [r4, #4]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	0880      	lsrs	r0, r0, #2
 8001cb0:	4028      	ands	r0, r5
 8001cb2:	d07a      	beq.n	8001daa <PE_Check_DataMessage+0x148>
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	466a      	mov	r2, sp
 8001cb8:	2106      	movs	r1, #6
 8001cba:	7c20      	ldrb	r0, [r4, #16]
 8001cbc:	68a6      	ldr	r6, [r4, #8]
 8001cbe:	69b6      	ldr	r6, [r6, #24]
 8001cc0:	47b0      	blx	r6
 8001cc2:	7725      	strb	r5, [r4, #28]
 8001cc4:	84a7      	strh	r7, [r4, #36]	; 0x24
 8001cc6:	2009      	movs	r0, #9
 8001cc8:	e06e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cca:	6861      	ldr	r1, [r4, #4]
 8001ccc:	6809      	ldr	r1, [r1, #0]
 8001cce:	0889      	lsrs	r1, r1, #2
 8001cd0:	400d      	ands	r5, r1
 8001cd2:	d16a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001cd4:	0980      	lsrs	r0, r0, #6
 8001cd6:	4006      	ands	r6, r0
 8001cd8:	0031      	movs	r1, r6
 8001cda:	7c20      	ldrb	r0, [r4, #16]
 8001cdc:	f7fe ff8a 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8001ce0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001ce2:	0440      	lsls	r0, r0, #17
 8001ce4:	0f40      	lsrs	r0, r0, #29
 8001ce6:	0083      	lsls	r3, r0, #2
 8001ce8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cea:	1c82      	adds	r2, r0, #2
 8001cec:	2104      	movs	r1, #4
 8001cee:	7c20      	ldrb	r0, [r4, #16]
 8001cf0:	68a5      	ldr	r5, [r4, #8]
 8001cf2:	69ad      	ldr	r5, [r5, #24]
 8001cf4:	47a8      	blx	r5
 8001cf6:	2044      	movs	r0, #68	; 0x44
 8001cf8:	e056      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001cfa:	9701      	str	r7, [sp, #4]
 8001cfc:	9700      	str	r7, [sp, #0]
 8001cfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d00:	7881      	ldrb	r1, [r0, #2]
 8001d02:	78c2      	ldrb	r2, [r0, #3]
 8001d04:	0212      	lsls	r2, r2, #8
 8001d06:	1889      	adds	r1, r1, r2
 8001d08:	7902      	ldrb	r2, [r0, #4]
 8001d0a:	0412      	lsls	r2, r2, #16
 8001d0c:	1889      	adds	r1, r1, r2
 8001d0e:	7940      	ldrb	r0, [r0, #5]
 8001d10:	0600      	lsls	r0, r0, #24
 8001d12:	180d      	adds	r5, r1, r0
 8001d14:	466b      	mov	r3, sp
 8001d16:	aa01      	add	r2, sp, #4
 8001d18:	2103      	movs	r1, #3
 8001d1a:	7c20      	ldrb	r0, [r4, #16]
 8001d1c:	68a7      	ldr	r7, [r4, #8]
 8001d1e:	697f      	ldr	r7, [r7, #20]
 8001d20:	47b8      	blx	r7
 8001d22:	2104      	movs	r1, #4
 8001d24:	9800      	ldr	r0, [sp, #0]
 8001d26:	f7ff fb91 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d11d      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d2e:	6860      	ldr	r0, [r4, #4]
 8001d30:	6800      	ldr	r0, [r0, #0]
 8001d32:	0540      	lsls	r0, r0, #21
 8001d34:	0f40      	lsrs	r0, r0, #29
 8001d36:	2803      	cmp	r0, #3
 8001d38:	d117      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d3a:	9801      	ldr	r0, [sp, #4]
 8001d3c:	4938      	ldr	r1, [pc, #224]	; (8001e20 <.text_24>)
 8001d3e:	4288      	cmp	r0, r1
 8001d40:	d113      	bne.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d42:	0f28      	lsrs	r0, r5, #28
 8001d44:	2805      	cmp	r0, #5
 8001d46:	d00e      	beq.n	8001d66 <PE_Check_DataMessage+0x104>
 8001d48:	2808      	cmp	r0, #8
 8001d4a:	d00a      	beq.n	8001d62 <PE_Check_DataMessage+0x100>
 8001d4c:	2809      	cmp	r0, #9
 8001d4e:	d003      	beq.n	8001d58 <PE_Check_DataMessage+0xf6>
 8001d50:	280a      	cmp	r0, #10
 8001d52:	d12a      	bne.n	8001daa <PE_Check_DataMessage+0x148>
 8001d54:	2166      	movs	r1, #102	; 0x66
 8001d56:	e000      	b.n	8001d5a <PE_Check_DataMessage+0xf8>
 8001d58:	2165      	movs	r1, #101	; 0x65
 8001d5a:	7c20      	ldrb	r0, [r4, #16]
 8001d5c:	f7fe fb90 	bl	8000480 <USBPD_PE_Notification>
 8001d60:	e003      	b.n	8001d6a <PE_Check_DataMessage+0x108>
 8001d62:	2029      	movs	r0, #41	; 0x29
 8001d64:	e020      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	e01e      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d6a:	7466      	strb	r6, [r4, #17]
 8001d6c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d6e:	0020      	movs	r0, r4
 8001d70:	f003 fabe 	bl	80052f0 <PE_Check_DataMessageVDM>
 8001d74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001d76:	6820      	ldr	r0, [r4, #0]
 8001d78:	8900      	ldrh	r0, [r0, #8]
 8001d7a:	0900      	lsrs	r0, r0, #4
 8001d7c:	4228      	tst	r0, r5
 8001d7e:	d010      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d80:	2304      	movs	r3, #4
 8001d82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d84:	1c82      	adds	r2, r0, #2
 8001d86:	210b      	movs	r1, #11
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	68a5      	ldr	r5, [r4, #8]
 8001d8c:	69ad      	ldr	r5, [r5, #24]
 8001d8e:	47a8      	blx	r5
 8001d90:	202c      	movs	r0, #44	; 0x2c
 8001d92:	e009      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	8900      	ldrh	r0, [r0, #8]
 8001d98:	0a00      	lsrs	r0, r0, #8
 8001d9a:	4228      	tst	r0, r5
 8001d9c:	d001      	beq.n	8001da2 <PE_Check_DataMessage+0x140>
 8001d9e:	203d      	movs	r0, #61	; 0x3d
 8001da0:	e002      	b.n	8001da8 <PE_Check_DataMessage+0x146>
 8001da2:	7465      	strb	r5, [r4, #17]
 8001da4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001da6:	2011      	movs	r0, #17
 8001da8:	7460      	strb	r0, [r4, #17]
 8001daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001dac <PE_CheckSendMessageStatus>:
 8001dac:	b510      	push	{r4, lr}
 8001dae:	000c      	movs	r4, r1
 8001db0:	2110      	movs	r1, #16
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d006      	beq.n	8001dc4 <PE_CheckSendMessageStatus+0x18>
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d00e      	beq.n	8001dd8 <PE_CheckSendMessageStatus+0x2c>
 8001dba:	2b07      	cmp	r3, #7
 8001dbc:	d011      	beq.n	8001de2 <PE_CheckSendMessageStatus+0x36>
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d008      	beq.n	8001dd4 <PE_CheckSendMessageStatus+0x28>
 8001dc2:	e02a      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dc4:	9902      	ldr	r1, [sp, #8]
 8001dc6:	7441      	strb	r1, [r0, #17]
 8001dc8:	6941      	ldr	r1, [r0, #20]
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <.text_25>)
 8001dcc:	400a      	ands	r2, r1
 8001dce:	6142      	str	r2, [r0, #20]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	e022      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd4:	2109      	movs	r1, #9
 8001dd6:	e020      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001dd8:	6942      	ldr	r2, [r0, #20]
 8001dda:	024b      	lsls	r3, r1, #9
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	e01b      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001de2:	2c00      	cmp	r4, #0
 8001de4:	d005      	beq.n	8001df2 <PE_CheckSendMessageStatus+0x46>
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <PE_CheckSendMessageStatus+0x42>
 8001dea:	2299      	movs	r2, #153	; 0x99
 8001dec:	e014      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001dee:	2107      	movs	r1, #7
 8001df0:	e013      	b.n	8001e1a <PE_CheckSendMessageStatus+0x6e>
 8001df2:	6844      	ldr	r4, [r0, #4]
 8001df4:	6824      	ldr	r4, [r4, #0]
 8001df6:	0a24      	lsrs	r4, r4, #8
 8001df8:	4023      	ands	r3, r4
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d003      	beq.n	8001e06 <PE_CheckSendMessageStatus+0x5a>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d109      	bne.n	8001e16 <PE_CheckSendMessageStatus+0x6a>
 8001e02:	220f      	movs	r2, #15
 8001e04:	e008      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	d1fb      	bne.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e0a:	6882      	ldr	r2, [r0, #8]
 8001e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d0f7      	beq.n	8001e02 <PE_CheckSendMessageStatus+0x56>
 8001e12:	2292      	movs	r2, #146	; 0x92
 8001e14:	e000      	b.n	8001e18 <PE_CheckSendMessageStatus+0x6c>
 8001e16:	2211      	movs	r2, #17
 8001e18:	7442      	strb	r2, [r0, #17]
 8001e1a:	0008      	movs	r0, r1
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <.text_24>:
 8001e20:	00001388 	.word	0x00001388

08001e24 <.text_25>:
 8001e24:	ffffbfff 	.word	0xffffbfff

08001e28 <USBPD_PE_StateMachine_SNK>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	0004      	movs	r4, r0
 8001e2e:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <USBPD_PE_StateMachine_SNK+0xa8>)
 8001e30:	00a1      	lsls	r1, r4, #2
 8001e32:	5845      	ldr	r5, [r0, r1]
 8001e34:	7c68      	ldrb	r0, [r5, #17]
 8001e36:	2848      	cmp	r0, #72	; 0x48
 8001e38:	d133      	bne.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e3a:	0028      	movs	r0, r5
 8001e3c:	f7fe fe72 	bl	8000b24 <PE_Reset_ZI>
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fea5 	bl	8000b90 <PE_Reset_Counter>
 8001e46:	6828      	ldr	r0, [r5, #0]
 8001e48:	7900      	ldrb	r0, [r0, #4]
 8001e4a:	0783      	lsls	r3, r0, #30
 8001e4c:	0f9b      	lsrs	r3, r3, #30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	7c28      	ldrb	r0, [r5, #16]
 8001e54:	f003 fc35 	bl	80056c2 <USBPD_PRL_SetHeader>
 8001e58:	6868      	ldr	r0, [r5, #4]
 8001e5a:	6801      	ldr	r1, [r0, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4391      	bics	r1, r2
 8001e60:	6001      	str	r1, [r0, #0]
 8001e62:	6868      	ldr	r0, [r5, #4]
 8001e64:	6801      	ldr	r1, [r0, #0]
 8001e66:	2203      	movs	r2, #3
 8001e68:	4391      	bics	r1, r2
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	7912      	ldrb	r2, [r2, #4]
 8001e6e:	0792      	lsls	r2, r2, #30
 8001e70:	0f92      	lsrs	r2, r2, #30
 8001e72:	430a      	orrs	r2, r1
 8001e74:	6002      	str	r2, [r0, #0]
 8001e76:	2101      	movs	r1, #1
 8001e78:	7c28      	ldrb	r0, [r5, #16]
 8001e7a:	f003 fc93 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8001e7e:	7c28      	ldrb	r0, [r5, #16]
 8001e80:	f003 fefc 	bl	8005c7c <USBPD_PRL_Reset>
 8001e84:	203e      	movs	r0, #62	; 0x3e
 8001e86:	7468      	strb	r0, [r5, #17]
 8001e88:	7ca9      	ldrb	r1, [r5, #18]
 8001e8a:	293e      	cmp	r1, #62	; 0x3e
 8001e8c:	d009      	beq.n	8001ea2 <USBPD_PE_StateMachine_SNK+0x7a>
 8001e8e:	74a8      	strb	r0, [r5, #18]
 8001e90:	2000      	movs	r0, #0
 8001e92:	9000      	str	r0, [sp, #0]
 8001e94:	2300      	movs	r3, #0
 8001e96:	223e      	movs	r2, #62	; 0x3e
 8001e98:	7c29      	ldrb	r1, [r5, #16]
 8001e9a:	2004      	movs	r0, #4
 8001e9c:	4eb1      	ldr	r6, [pc, #708]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001e9e:	6836      	ldr	r6, [r6, #0]
 8001ea0:	47b0      	blx	r6
 8001ea2:	6968      	ldr	r0, [r5, #20]
 8001ea4:	0341      	lsls	r1, r0, #13
 8001ea6:	0fc9      	lsrs	r1, r1, #31
 8001ea8:	d006      	beq.n	8001eb8 <USBPD_PE_StateMachine_SNK+0x90>
 8001eaa:	49af      	ldr	r1, [pc, #700]	; (8002168 <__iar_annotation$$branch+0x8>)
 8001eac:	4001      	ands	r1, r0
 8001eae:	6169      	str	r1, [r5, #20]
 8001eb0:	2164      	movs	r1, #100	; 0x64
 8001eb2:	7c28      	ldrb	r0, [r5, #16]
 8001eb4:	f7fe fae4 	bl	8000480 <USBPD_PE_Notification>
 8001eb8:	0028      	movs	r0, r5
 8001eba:	f7fe fd15 	bl	80008e8 <PE_Get_RxEvent>
 8001ebe:	4669      	mov	r1, sp
 8001ec0:	7308      	strb	r0, [r1, #12]
 8001ec2:	4668      	mov	r0, sp
 8001ec4:	7b00      	ldrb	r0, [r0, #12]
 8001ec6:	2803      	cmp	r0, #3
 8001ec8:	d104      	bne.n	8001ed4 <USBPD_PE_StateMachine_SNK+0xac>
 8001eca:	2001      	movs	r0, #1
 8001ecc:	b00d      	add	sp, #52	; 0x34
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed0:	2000053c 	.word	0x2000053c
 8001ed4:	4668      	mov	r0, sp
 8001ed6:	7344      	strb	r4, [r0, #13]
 8001ed8:	2402      	movs	r4, #2
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	04c1      	lsls	r1, r0, #19
 8001ee0:	0fc9      	lsrs	r1, r1, #31
 8001ee2:	d100      	bne.n	8001ee6 <USBPD_PE_StateMachine_SNK+0xbe>
 8001ee4:	e148      	b.n	8002178 <__iar_annotation$$branch+0x18>
 8001ee6:	6968      	ldr	r0, [r5, #20]
 8001ee8:	0381      	lsls	r1, r0, #14
 8001eea:	0fc9      	lsrs	r1, r1, #31
 8001eec:	d014      	beq.n	8001f18 <USBPD_PE_StateMachine_SNK+0xf0>
 8001eee:	21a7      	movs	r1, #167	; 0xa7
 8001ef0:	7469      	strb	r1, [r5, #17]
 8001ef2:	4a9e      	ldr	r2, [pc, #632]	; (800216c <__iar_annotation$$branch+0xc>)
 8001ef4:	4002      	ands	r2, r0
 8001ef6:	616a      	str	r2, [r5, #20]
 8001ef8:	2000      	movs	r0, #0
 8001efa:	2232      	movs	r2, #50	; 0x32
 8001efc:	54a8      	strb	r0, [r5, r2]
 8001efe:	7ca8      	ldrb	r0, [r5, #18]
 8001f00:	28a7      	cmp	r0, #167	; 0xa7
 8001f02:	d02b      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f04:	74a9      	strb	r1, [r5, #18]
 8001f06:	2000      	movs	r0, #0
 8001f08:	9000      	str	r0, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	22a7      	movs	r2, #167	; 0xa7
 8001f0e:	7c29      	ldrb	r1, [r5, #16]
 8001f10:	2004      	movs	r0, #4
 8001f12:	4e94      	ldr	r6, [pc, #592]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	47b0      	blx	r6
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	5c28      	ldrb	r0, [r5, r0]
 8001f1c:	280f      	cmp	r0, #15
 8001f1e:	d001      	beq.n	8001f24 <USBPD_PE_StateMachine_SNK+0xfc>
 8001f20:	2814      	cmp	r0, #20
 8001f22:	d11b      	bne.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f24:	4668      	mov	r0, sp
 8001f26:	7b00      	ldrb	r0, [r0, #12]
 8001f28:	2814      	cmp	r0, #20
 8001f2a:	d005      	beq.n	8001f38 <USBPD_PE_StateMachine_SNK+0x110>
 8001f2c:	2014      	movs	r0, #20
 8001f2e:	4669      	mov	r1, sp
 8001f30:	7308      	strb	r0, [r1, #12]
 8001f32:	0028      	movs	r0, r5
 8001f34:	f7fe fd0f 	bl	8000956 <PE_Clear_RxEvent>
 8001f38:	2032      	movs	r0, #50	; 0x32
 8001f3a:	5c2a      	ldrb	r2, [r5, r0]
 8001f3c:	746a      	strb	r2, [r5, #17]
 8001f3e:	2000      	movs	r0, #0
 8001f40:	2132      	movs	r1, #50	; 0x32
 8001f42:	5468      	strb	r0, [r5, r1]
 8001f44:	7ca8      	ldrb	r0, [r5, #18]
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d008      	beq.n	8001f5c <USBPD_PE_StateMachine_SNK+0x134>
 8001f4a:	74aa      	strb	r2, [r5, #18]
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	9000      	str	r0, [sp, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	7c29      	ldrb	r1, [r5, #16]
 8001f54:	2004      	movs	r0, #4
 8001f56:	4e83      	ldr	r6, [pc, #524]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001f58:	6836      	ldr	r6, [r6, #0]
 8001f5a:	47b0      	blx	r6
 8001f5c:	4668      	mov	r0, sp
 8001f5e:	7b00      	ldrb	r0, [r0, #12]
 8001f60:	2811      	cmp	r0, #17
 8001f62:	d11f      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f64:	6868      	ldr	r0, [r5, #4]
 8001f66:	6800      	ldr	r0, [r0, #0]
 8001f68:	0701      	lsls	r1, r0, #28
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8001f6e:	0680      	lsls	r0, r0, #26
 8001f70:	0fc2      	lsrs	r2, r0, #31
 8001f72:	4291      	cmp	r1, r2
 8001f74:	d116      	bne.n	8001fa4 <USBPD_PE_StateMachine_SNK+0x17c>
 8001f76:	2014      	movs	r0, #20
 8001f78:	4669      	mov	r1, sp
 8001f7a:	7308      	strb	r0, [r1, #12]
 8001f7c:	0028      	movs	r0, r5
 8001f7e:	f7fe fcea 	bl	8000956 <PE_Clear_RxEvent>
 8001f82:	2092      	movs	r0, #146	; 0x92
 8001f84:	7468      	strb	r0, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	2892      	cmp	r0, #146	; 0x92
 8001f8a:	d100      	bne.n	8001f8e <USBPD_PE_StateMachine_SNK+0x166>
 8001f8c:	e104      	b.n	8002198 <__iar_annotation$$branch+0x38>
 8001f8e:	2092      	movs	r0, #146	; 0x92
 8001f90:	74a8      	strb	r0, [r5, #18]
 8001f92:	2000      	movs	r0, #0
 8001f94:	9000      	str	r0, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	2292      	movs	r2, #146	; 0x92
 8001f9a:	7c29      	ldrb	r1, [r5, #16]
 8001f9c:	2004      	movs	r0, #4
 8001f9e:	4e71      	ldr	r6, [pc, #452]	; (8002164 <__iar_annotation$$branch+0x4>)
 8001fa0:	6836      	ldr	r6, [r6, #0]
 8001fa2:	47b0      	blx	r6
 8001fa4:	7c68      	ldrb	r0, [r5, #17]
 8001fa6:	4669      	mov	r1, sp
 8001fa8:	7008      	strb	r0, [r1, #0]
 8001faa:	4f71      	ldr	r7, [pc, #452]	; (8002170 <__iar_annotation$$branch+0x10>)
 8001fac:	20f0      	movs	r0, #240	; 0xf0
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	4e70      	ldr	r6, [pc, #448]	; (8002174 <__iar_annotation$$branch+0x14>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	466a      	mov	r2, sp
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	2a00      	cmp	r2, #0
 8001fba:	d100      	bne.n	8001fbe <USBPD_PE_StateMachine_SNK+0x196>
 8001fbc:	e0e0      	b.n	8002180 <__iar_annotation$$branch+0x20>
 8001fbe:	1e52      	subs	r2, r2, #1
 8001fc0:	d040      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001fc2:	1e92      	subs	r2, r2, #2
 8001fc4:	2a01      	cmp	r2, #1
 8001fc6:	d800      	bhi.n	8001fca <USBPD_PE_StateMachine_SNK+0x1a2>
 8001fc8:	e323      	b.n	8002612 <__iar_annotation$$branch+0x4b2>
 8001fca:	1e92      	subs	r2, r2, #2
 8001fcc:	d100      	bne.n	8001fd0 <USBPD_PE_StateMachine_SNK+0x1a8>
 8001fce:	e1fb      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 8001fd0:	3a0a      	subs	r2, #10
 8001fd2:	d100      	bne.n	8001fd6 <USBPD_PE_StateMachine_SNK+0x1ae>
 8001fd4:	e1fd      	b.n	80023d2 <__iar_annotation$$branch+0x272>
 8001fd6:	1e52      	subs	r2, r2, #1
 8001fd8:	d100      	bne.n	8001fdc <USBPD_PE_StateMachine_SNK+0x1b4>
 8001fda:	e299      	b.n	8002510 <__iar_annotation$$branch+0x3b0>
 8001fdc:	1e52      	subs	r2, r2, #1
 8001fde:	d100      	bne.n	8001fe2 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001fe0:	e2a3      	b.n	800252a <__iar_annotation$$branch+0x3ca>
 8001fe2:	1ed2      	subs	r2, r2, #3
 8001fe4:	d100      	bne.n	8001fe8 <USBPD_PE_StateMachine_SNK+0x1c0>
 8001fe6:	e228      	b.n	800243a <__iar_annotation$$branch+0x2da>
 8001fe8:	1f12      	subs	r2, r2, #4
 8001fea:	2a01      	cmp	r2, #1
 8001fec:	d92a      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 8001fee:	1e92      	subs	r2, r2, #2
 8001ff0:	d100      	bne.n	8001ff4 <USBPD_PE_StateMachine_SNK+0x1cc>
 8001ff2:	e2d2      	b.n	800259a <__iar_annotation$$branch+0x43a>
 8001ff4:	1ed2      	subs	r2, r2, #3
 8001ff6:	d025      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 8001ff8:	1e52      	subs	r2, r2, #1
 8001ffa:	d100      	bne.n	8001ffe <USBPD_PE_StateMachine_SNK+0x1d6>
 8001ffc:	e3c3      	b.n	8002786 <__iar_annotation$$branch+0x626>
 8001ffe:	1f12      	subs	r2, r2, #4
 8002000:	d100      	bne.n	8002004 <USBPD_PE_StateMachine_SNK+0x1dc>
 8002002:	e316      	b.n	8002632 <__iar_annotation$$branch+0x4d2>
 8002004:	1f52      	subs	r2, r2, #5
 8002006:	2a02      	cmp	r2, #2
 8002008:	d91c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800200a:	1ed2      	subs	r2, r2, #3
 800200c:	d100      	bne.n	8002010 <USBPD_PE_StateMachine_SNK+0x1e8>
 800200e:	e2f7      	b.n	8002600 <__iar_annotation$$branch+0x4a0>
 8002010:	1e52      	subs	r2, r2, #1
 8002012:	d101      	bne.n	8002018 <__iar_annotation$$branch+0x4>

08002014 <__iar_annotation$$branch>:
 8002014:	f000 fc39 	bl	800288a <__iar_annotation$$branch+0x72a>
 8002018:	1e52      	subs	r2, r2, #1
 800201a:	d013      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800201c:	1e92      	subs	r2, r2, #2
 800201e:	d101      	bne.n	8002024 <__iar_annotation$$branch+0x4>

08002020 <__iar_annotation$$branch>:
 8002020:	f000 fc80 	bl	8002924 <__iar_annotation$$branch+0x7c4>
 8002024:	1e52      	subs	r2, r2, #1
 8002026:	2a01      	cmp	r2, #1
 8002028:	d90c      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 800202a:	1e92      	subs	r2, r2, #2
 800202c:	d001      	beq.n	8002032 <__iar_annotation$$branch+0x12>
 800202e:	1e92      	subs	r2, r2, #2
 8002030:	2a05      	cmp	r2, #5
 8002032:	d801      	bhi.n	8002038 <__iar_annotation$$branch+0x4>

08002034 <__iar_annotation$$branch>:
 8002034:	f000 fcbc 	bl	80029b0 <__iar_annotation$$branch+0x850>
 8002038:	1f92      	subs	r2, r2, #6
 800203a:	d101      	bne.n	8002040 <__iar_annotation$$branch+0x4>

0800203c <__iar_annotation$$branch>:
 800203c:	f000 fc86 	bl	800294c <__iar_annotation$$branch+0x7ec>
 8002040:	1e52      	subs	r2, r2, #1
 8002042:	2a03      	cmp	r2, #3
 8002044:	d801      	bhi.n	800204a <__iar_annotation$$branch+0x4>

08002046 <__iar_annotation$$branch>:
 8002046:	f000 fcb7 	bl	80029b8 <__iar_annotation$$branch+0x858>
 800204a:	1f12      	subs	r2, r2, #4
 800204c:	d100      	bne.n	8002050 <__iar_annotation$$branch+0xa>
 800204e:	e0af      	b.n	80021b0 <__iar_annotation$$branch+0x50>
 8002050:	1e92      	subs	r2, r2, #2
 8002052:	d100      	bne.n	8002056 <__iar_annotation$$branch+0x10>
 8002054:	e221      	b.n	800249a <__iar_annotation$$branch+0x33a>
 8002056:	1ed2      	subs	r2, r2, #3
 8002058:	d100      	bne.n	800205c <__iar_annotation$$branch+0x16>
 800205a:	e0c1      	b.n	80021e0 <__iar_annotation$$branch+0x80>
 800205c:	1e52      	subs	r2, r2, #1
 800205e:	d100      	bne.n	8002062 <__iar_annotation$$branch+0x1c>
 8002060:	e100      	b.n	8002264 <__iar_annotation$$branch+0x104>
 8002062:	1e52      	subs	r2, r2, #1
 8002064:	d100      	bne.n	8002068 <__iar_annotation$$branch+0x22>
 8002066:	e10f      	b.n	8002288 <__iar_annotation$$branch+0x128>
 8002068:	1e52      	subs	r2, r2, #1
 800206a:	d100      	bne.n	800206e <__iar_annotation$$branch+0x28>
 800206c:	e128      	b.n	80022c0 <__iar_annotation$$branch+0x160>
 800206e:	1e52      	subs	r2, r2, #1
 8002070:	d100      	bne.n	8002074 <__iar_annotation$$branch+0x2e>
 8002072:	e178      	b.n	8002366 <__iar_annotation$$branch+0x206>
 8002074:	1e92      	subs	r2, r2, #2
 8002076:	d0a6      	beq.n	8001fc6 <USBPD_PE_StateMachine_SNK+0x19e>
 8002078:	1e92      	subs	r2, r2, #2
 800207a:	d0e3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 800207c:	1e52      	subs	r2, r2, #1
 800207e:	d101      	bne.n	8002084 <__iar_annotation$$branch+0x4>

08002080 <__iar_annotation$$branch>:
 8002080:	f000 fbe5 	bl	800284e <__iar_annotation$$branch+0x6ee>
 8002084:	1f12      	subs	r2, r2, #4
 8002086:	d100      	bne.n	800208a <__iar_annotation$$branch+0xa>
 8002088:	e26a      	b.n	8002560 <__iar_annotation$$branch+0x400>
 800208a:	1ed2      	subs	r2, r2, #3
 800208c:	d100      	bne.n	8002090 <__iar_annotation$$branch+0x10>
 800208e:	e334      	b.n	80026fa <__iar_annotation$$branch+0x59a>
 8002090:	1f52      	subs	r2, r2, #5
 8002092:	d100      	bne.n	8002096 <__iar_annotation$$branch+0x16>
 8002094:	e388      	b.n	80027a8 <__iar_annotation$$branch+0x648>
 8002096:	1e52      	subs	r2, r2, #1
 8002098:	d100      	bne.n	800209c <__iar_annotation$$branch+0x1c>
 800209a:	e2ff      	b.n	800269c <__iar_annotation$$branch+0x53c>
 800209c:	3a09      	subs	r2, #9
 800209e:	2a02      	cmp	r2, #2
 80020a0:	d9d0      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020a2:	1ed2      	subs	r2, r2, #3
 80020a4:	d101      	bne.n	80020aa <__iar_annotation$$branch+0x4>

080020a6 <__iar_annotation$$branch>:
 80020a6:	f000 fc01 	bl	80028ac <__iar_annotation$$branch+0x74c>
 80020aa:	1e52      	subs	r2, r2, #1
 80020ac:	d101      	bne.n	80020b2 <__iar_annotation$$branch+0x4>

080020ae <__iar_annotation$$branch>:
 80020ae:	f000 fc0f 	bl	80028d0 <__iar_annotation$$branch+0x770>
 80020b2:	1e52      	subs	r2, r2, #1
 80020b4:	2a01      	cmp	r2, #1
 80020b6:	d9c5      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020b8:	3a0d      	subs	r2, #13
 80020ba:	d0c3      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020bc:	3a12      	subs	r2, #18
 80020be:	d101      	bne.n	80020c4 <__iar_annotation$$branch+0x4>

080020c0 <__iar_annotation$$branch>:
 80020c0:	f000 fc92 	bl	80029e8 <__iar_annotation$$branch+0x888>
 80020c4:	3a0c      	subs	r2, #12
 80020c6:	d067      	beq.n	8002198 <__iar_annotation$$branch+0x38>
 80020c8:	1e52      	subs	r2, r2, #1
 80020ca:	2a02      	cmp	r2, #2
 80020cc:	d9ba      	bls.n	8002044 <__iar_annotation$$branch+0x8>
 80020ce:	1f52      	subs	r2, r2, #5
 80020d0:	d100      	bne.n	80020d4 <__iar_annotation$$branch+0x14>
 80020d2:	e271      	b.n	80025b8 <__iar_annotation$$branch+0x458>
 80020d4:	1e52      	subs	r2, r2, #1
 80020d6:	d0b5      	beq.n	8002044 <__iar_annotation$$branch+0x8>
 80020d8:	1e52      	subs	r2, r2, #1
 80020da:	d100      	bne.n	80020de <__iar_annotation$$branch+0x1e>
 80020dc:	e174      	b.n	80023c8 <__iar_annotation$$branch+0x268>
 80020de:	1e52      	subs	r2, r2, #1
 80020e0:	d100      	bne.n	80020e4 <__iar_annotation$$branch+0x24>
 80020e2:	e1be      	b.n	8002462 <__iar_annotation$$branch+0x302>
 80020e4:	1e52      	subs	r2, r2, #1
 80020e6:	2a08      	cmp	r2, #8
 80020e8:	d801      	bhi.n	80020ee <__iar_annotation$$branch+0x4>

080020ea <__iar_annotation$$branch>:
 80020ea:	f000 fc6a 	bl	80029c2 <__iar_annotation$$branch+0x862>
 80020ee:	3a0b      	subs	r2, #11
 80020f0:	d101      	bne.n	80020f6 <__iar_annotation$$branch+0x4>

080020f2 <__iar_annotation$$branch>:
 80020f2:	f000 fc7f 	bl	80029f4 <__iar_annotation$$branch+0x894>
 80020f6:	a903      	add	r1, sp, #12
 80020f8:	0028      	movs	r0, r5
 80020fa:	f002 f9e3 	bl	80044c4 <PE_StateMachine_VDM>
 80020fe:	0004      	movs	r4, r0
 8002100:	7c6a      	ldrb	r2, [r5, #17]
 8002102:	7ca8      	ldrb	r0, [r5, #18]
 8002104:	4290      	cmp	r0, r2
 8002106:	d008      	beq.n	800211a <__iar_annotation$$branch+0x28>
 8002108:	74aa      	strb	r2, [r5, #18]
 800210a:	2000      	movs	r0, #0
 800210c:	9000      	str	r0, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	7c29      	ldrb	r1, [r5, #16]
 8002112:	2004      	movs	r0, #4
 8002114:	4e13      	ldr	r6, [pc, #76]	; (8002164 <__iar_annotation$$branch+0x4>)
 8002116:	6836      	ldr	r6, [r6, #0]
 8002118:	47b0      	blx	r6
 800211a:	4e12      	ldr	r6, [pc, #72]	; (8002164 <__iar_annotation$$branch+0x4>)
 800211c:	4668      	mov	r0, sp
 800211e:	7b00      	ldrb	r0, [r0, #12]
 8002120:	2814      	cmp	r0, #20
 8002122:	d101      	bne.n	8002128 <__iar_annotation$$branch+0x4>

08002124 <__iar_annotation$$branch>:
 8002124:	f000 fc73 	bl	8002a0e <__iar_annotation$$branch+0x8ae>
 8002128:	0028      	movs	r0, r5
 800212a:	f7fe fc5b 	bl	80009e4 <PE_Check_AMSConflict>
 800212e:	2815      	cmp	r0, #21
 8002130:	d109      	bne.n	8002146 <__iar_annotation$$branch+0x22>
 8002132:	4668      	mov	r0, sp
 8002134:	7b00      	ldrb	r0, [r0, #12]
 8002136:	2814      	cmp	r0, #20
 8002138:	d005      	beq.n	8002146 <__iar_annotation$$branch+0x22>
 800213a:	2014      	movs	r0, #20
 800213c:	4669      	mov	r1, sp
 800213e:	7308      	strb	r0, [r1, #12]
 8002140:	0028      	movs	r0, r5
 8002142:	f7fe fc08 	bl	8000956 <PE_Clear_RxEvent>
 8002146:	7c6a      	ldrb	r2, [r5, #17]
 8002148:	7ca8      	ldrb	r0, [r5, #18]
 800214a:	4290      	cmp	r0, r2
 800214c:	d007      	beq.n	800215e <__iar_annotation$$branch+0x3a>
 800214e:	74aa      	strb	r2, [r5, #18]
 8002150:	2000      	movs	r0, #0
 8002152:	9000      	str	r0, [sp, #0]
 8002154:	2300      	movs	r3, #0
 8002156:	7c29      	ldrb	r1, [r5, #16]
 8002158:	2004      	movs	r0, #4
 800215a:	6834      	ldr	r4, [r6, #0]
 800215c:	47a0      	blx	r4
 800215e:	2400      	movs	r4, #0

08002160 <__iar_annotation$$branch>:
 8002160:	f000 fc74 	bl	8002a4c <__iar_annotation$$branch+0x8ec>
 8002164:	20000000 	.word	0x20000000
 8002168:	fffbffff 	.word	0xfffbffff
 800216c:	fffdffff 	.word	0xfffdffff
 8002170:	000081f4 	.word	0x000081f4
 8002174:	0000801b 	.word	0x0000801b
 8002178:	2400      	movs	r4, #0
 800217a:	43e4      	mvns	r4, r4
 800217c:	0020      	movs	r0, r4
 800217e:	e6a5      	b.n	8001ecc <USBPD_PE_StateMachine_SNK+0xa4>
 8002180:	6868      	ldr	r0, [r5, #4]
 8002182:	6801      	ldr	r1, [r0, #0]
 8002184:	2210      	movs	r2, #16
 8002186:	4391      	bics	r1, r2
 8002188:	6001      	str	r1, [r0, #0]
 800218a:	215f      	movs	r1, #95	; 0x5f
 800218c:	7c28      	ldrb	r0, [r5, #16]
 800218e:	f7fe f977 	bl	8000480 <USBPD_PE_Notification>
 8002192:	2400      	movs	r4, #0
 8002194:	43e4      	mvns	r4, r4
 8002196:	e7b3      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002198:	6868      	ldr	r0, [r5, #4]
 800219a:	6801      	ldr	r1, [r0, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4391      	bics	r1, r2
 80021a0:	6001      	str	r1, [r0, #0]
 80021a2:	68a8      	ldr	r0, [r5, #8]
 80021a4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021a6:	2900      	cmp	r1, #0
 80021a8:	d0f3      	beq.n	8002192 <__iar_annotation$$branch+0x32>
 80021aa:	7c28      	ldrb	r0, [r5, #16]
 80021ac:	4788      	blx	r1
 80021ae:	e7f0      	b.n	8002192 <__iar_annotation$$branch+0x32>
 80021b0:	6868      	ldr	r0, [r5, #4]
 80021b2:	6801      	ldr	r1, [r0, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	0b0b      	lsrs	r3, r1, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0a1      	beq.n	8002100 <__iar_annotation$$branch+0xe>
 80021bc:	078b      	lsls	r3, r1, #30
 80021be:	0f9b      	lsrs	r3, r3, #30
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <__iar_annotation$$branch+0x68>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <__iar_annotation$$branch+0x6a>
 80021c8:	2320      	movs	r3, #32
 80021ca:	2420      	movs	r4, #32
 80021cc:	43a1      	bics	r1, r4
 80021ce:	430b      	orrs	r3, r1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	772a      	strb	r2, [r5, #28]
 80021d4:	83ef      	strh	r7, [r5, #30]
 80021d6:	24fa      	movs	r4, #250	; 0xfa
 80021d8:	0064      	lsls	r4, r4, #1
 80021da:	2043      	movs	r0, #67	; 0x43
 80021dc:	7468      	strb	r0, [r5, #17]
 80021de:	e78f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80021e0:	4668      	mov	r0, sp
 80021e2:	7b00      	ldrb	r0, [r0, #12]
 80021e4:	2811      	cmp	r0, #17
 80021e6:	d135      	bne.n	8002254 <__iar_annotation$$branch+0xf4>
 80021e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80021ea:	0bc2      	lsrs	r2, r0, #15
 80021ec:	d12c      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021ee:	2607      	movs	r6, #7
 80021f0:	0b02      	lsrs	r2, r0, #12
 80021f2:	4232      	tst	r2, r6
 80021f4:	d028      	beq.n	8002248 <__iar_annotation$$branch+0xe8>
 80021f6:	06c2      	lsls	r2, r0, #27
 80021f8:	0ed2      	lsrs	r2, r2, #27
 80021fa:	2a01      	cmp	r2, #1
 80021fc:	d124      	bne.n	8002248 <__iar_annotation$$branch+0xe8>
 80021fe:	2200      	movs	r2, #0
 8002200:	4bc1      	ldr	r3, [pc, #772]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002202:	18eb      	adds	r3, r5, r3
 8002204:	709a      	strb	r2, [r3, #2]
 8002206:	696a      	ldr	r2, [r5, #20]
 8002208:	4311      	orrs	r1, r2
 800220a:	6169      	str	r1, [r5, #20]
 800220c:	0600      	lsls	r0, r0, #24
 800220e:	0f81      	lsrs	r1, r0, #30
 8002210:	4668      	mov	r0, sp
 8002212:	7b40      	ldrb	r0, [r0, #13]
 8002214:	f7fe fcee 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 8002218:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800221a:	0b00      	lsrs	r0, r0, #12
 800221c:	4006      	ands	r6, r0
 800221e:	00b3      	lsls	r3, r6, #2
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002222:	1c82      	adds	r2, r0, #2
 8002224:	2104      	movs	r1, #4
 8002226:	7c28      	ldrb	r0, [r5, #16]
 8002228:	68ae      	ldr	r6, [r5, #8]
 800222a:	69b6      	ldr	r6, [r6, #24]
 800222c:	47b0      	blx	r6
 800222e:	2001      	movs	r0, #1
 8002230:	7728      	strb	r0, [r5, #28]
 8002232:	6868      	ldr	r0, [r5, #4]
 8002234:	6801      	ldr	r1, [r0, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	4391      	bics	r1, r2
 800223a:	6001      	str	r1, [r0, #0]
 800223c:	2044      	movs	r0, #68	; 0x44
 800223e:	7468      	strb	r0, [r5, #17]
 8002240:	4668      	mov	r0, sp
 8002242:	7b00      	ldrb	r0, [r0, #12]
 8002244:	2814      	cmp	r0, #20
 8002246:	d005      	beq.n	8002254 <__iar_annotation$$branch+0xf4>
 8002248:	2014      	movs	r0, #20
 800224a:	4669      	mov	r1, sp
 800224c:	7308      	strb	r0, [r1, #12]
 800224e:	0028      	movs	r0, r5
 8002250:	f7fe fb81 	bl	8000956 <PE_Clear_RxEvent>
 8002254:	8be8      	ldrh	r0, [r5, #30]
 8002256:	03a1      	lsls	r1, r4, #14
 8002258:	4288      	cmp	r0, r1
 800225a:	d102      	bne.n	8002262 <__iar_annotation$$branch+0x102>
 800225c:	200f      	movs	r0, #15
 800225e:	7468      	strb	r0, [r5, #17]
 8002260:	2400      	movs	r4, #0
 8002262:	e74d      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002264:	466a      	mov	r2, sp
 8002266:	0029      	movs	r1, r5
 8002268:	3118      	adds	r1, #24
 800226a:	7c28      	ldrb	r0, [r5, #16]
 800226c:	68ab      	ldr	r3, [r5, #8]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4798      	blx	r3
 8002272:	6968      	ldr	r0, [r5, #20]
 8002274:	2118      	movs	r1, #24
 8002276:	4388      	bics	r0, r1
 8002278:	9900      	ldr	r1, [sp, #0]
 800227a:	00c9      	lsls	r1, r1, #3
 800227c:	2218      	movs	r2, #24
 800227e:	400a      	ands	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	616a      	str	r2, [r5, #20]
 8002284:	2045      	movs	r0, #69	; 0x45
 8002286:	e7ea      	b.n	800225e <__iar_annotation$$branch+0xfe>
 8002288:	6968      	ldr	r0, [r5, #20]
 800228a:	0401      	lsls	r1, r0, #16
 800228c:	0fc9      	lsrs	r1, r1, #31
 800228e:	d001      	beq.n	8002294 <__iar_annotation$$branch+0x134>
 8002290:	2002      	movs	r0, #2
 8002292:	e000      	b.n	8002296 <__iar_annotation$$branch+0x136>
 8002294:	2000      	movs	r0, #0
 8002296:	9002      	str	r0, [sp, #8]
 8002298:	2046      	movs	r0, #70	; 0x46
 800229a:	9001      	str	r0, [sp, #4]
 800229c:	2001      	movs	r0, #1
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	002b      	movs	r3, r5
 80022a2:	3318      	adds	r3, #24
 80022a4:	2202      	movs	r2, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	f7ff f95c 	bl	8001566 <PE_Send_DataMessage>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d105      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 80022b2:	6968      	ldr	r0, [r5, #20]
 80022b4:	4995      	ldr	r1, [pc, #596]	; (800250c <__iar_annotation$$branch+0x3ac>)
 80022b6:	4001      	ands	r1, r0
 80022b8:	6169      	str	r1, [r5, #20]
 80022ba:	83ee      	strh	r6, [r5, #30]
 80022bc:	241b      	movs	r4, #27
 80022be:	e71f      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80022c0:	4669      	mov	r1, sp
 80022c2:	7b09      	ldrb	r1, [r1, #12]
 80022c4:	2911      	cmp	r1, #17
 80022c6:	d148      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022c8:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80022ca:	4201      	tst	r1, r0
 80022cc:	d145      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 80022ce:	20fa      	movs	r0, #250	; 0xfa
 80022d0:	0040      	lsls	r0, r0, #1
 80022d2:	261f      	movs	r6, #31
 80022d4:	221f      	movs	r2, #31
 80022d6:	400a      	ands	r2, r1
 80022d8:	1e92      	subs	r2, r2, #2
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d917      	bls.n	800230e <__iar_annotation$$branch+0x1ae>
 80022de:	1e92      	subs	r2, r2, #2
 80022e0:	d001      	beq.n	80022e6 <__iar_annotation$$branch+0x186>
 80022e2:	3a08      	subs	r2, #8
 80022e4:	d125      	bne.n	8002332 <__iar_annotation$$branch+0x1d2>
 80022e6:	686a      	ldr	r2, [r5, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	0f52      	lsrs	r2, r2, #29
 80022ee:	2a03      	cmp	r2, #3
 80022f0:	d004      	beq.n	80022fc <__iar_annotation$$branch+0x19c>
 80022f2:	2143      	movs	r1, #67	; 0x43
 80022f4:	7469      	strb	r1, [r5, #17]
 80022f6:	83ef      	strh	r7, [r5, #30]
 80022f8:	0004      	movs	r4, r0
 80022fa:	e014      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 80022fc:	4031      	ands	r1, r6
 80022fe:	290c      	cmp	r1, #12
 8002300:	d101      	bne.n	8002306 <__iar_annotation$$branch+0x1a6>
 8002302:	2049      	movs	r0, #73	; 0x49
 8002304:	e000      	b.n	8002308 <__iar_annotation$$branch+0x1a8>
 8002306:	2003      	movs	r0, #3
 8002308:	7468      	strb	r0, [r5, #17]
 800230a:	2400      	movs	r4, #0
 800230c:	e00b      	b.n	8002326 <__iar_annotation$$branch+0x1c6>
 800230e:	83ef      	strh	r7, [r5, #30]
 8002310:	0004      	movs	r4, r0
 8002312:	2104      	movs	r1, #4
 8002314:	0028      	movs	r0, r5
 8002316:	f7ff f846 	bl	80013a6 <PE_SetPowerNegotiation>
 800231a:	2047      	movs	r0, #71	; 0x47
 800231c:	7468      	strb	r0, [r5, #17]
 800231e:	4668      	mov	r0, sp
 8002320:	7b00      	ldrb	r0, [r0, #12]
 8002322:	2814      	cmp	r0, #20
 8002324:	d005      	beq.n	8002332 <__iar_annotation$$branch+0x1d2>
 8002326:	2014      	movs	r0, #20
 8002328:	4669      	mov	r1, sp
 800232a:	7308      	strb	r0, [r1, #12]
 800232c:	0028      	movs	r0, r5
 800232e:	f7fe fb12 	bl	8000956 <PE_Clear_RxEvent>
 8002332:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002334:	4006      	ands	r6, r0
 8002336:	2e02      	cmp	r6, #2
 8002338:	d009      	beq.n	800234e <__iar_annotation$$branch+0x1ee>
 800233a:	2e03      	cmp	r6, #3
 800233c:	d009      	beq.n	8002352 <__iar_annotation$$branch+0x1f2>
 800233e:	2e04      	cmp	r6, #4
 8002340:	d003      	beq.n	800234a <__iar_annotation$$branch+0x1ea>
 8002342:	2e0c      	cmp	r6, #12
 8002344:	d109      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002346:	2103      	movs	r1, #3
 8002348:	e004      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234a:	2102      	movs	r1, #2
 800234c:	e002      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 800234e:	2104      	movs	r1, #4
 8002350:	e000      	b.n	8002354 <__iar_annotation$$branch+0x1f4>
 8002352:	2101      	movs	r1, #1
 8002354:	7c28      	ldrb	r0, [r5, #16]
 8002356:	f7fe f893 	bl	8000480 <USBPD_PE_Notification>
 800235a:	8be8      	ldrh	r0, [r5, #30]
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	0209      	lsls	r1, r1, #8
 8002360:	4288      	cmp	r0, r1
 8002362:	d1ac      	bne.n	80022be <__iar_annotation$$branch+0x15e>
 8002364:	e77a      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002366:	4668      	mov	r0, sp
 8002368:	7b00      	ldrb	r0, [r0, #12]
 800236a:	2811      	cmp	r0, #17
 800236c:	d1f5      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 800236e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002370:	499f      	ldr	r1, [pc, #636]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002372:	4001      	ands	r1, r0
 8002374:	2906      	cmp	r1, #6
 8002376:	d1f0      	bne.n	800235a <__iar_annotation$$branch+0x1fa>
 8002378:	2014      	movs	r0, #20
 800237a:	4669      	mov	r1, sp
 800237c:	7308      	strb	r0, [r1, #12]
 800237e:	0028      	movs	r0, r5
 8002380:	f7fe fae9 	bl	8000956 <PE_Clear_RxEvent>
 8002384:	2103      	movs	r1, #3
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff f80d 	bl	80013a6 <PE_SetPowerNegotiation>
 800238c:	2110      	movs	r1, #16
 800238e:	7c28      	ldrb	r0, [r5, #16]
 8002390:	f7fe f876 	bl	8000480 <USBPD_PE_Notification>
 8002394:	6868      	ldr	r0, [r5, #4]
 8002396:	6800      	ldr	r0, [r0, #0]
 8002398:	0401      	lsls	r1, r0, #16
 800239a:	0fc9      	lsrs	r1, r1, #31
 800239c:	d002      	beq.n	80023a4 <__iar_annotation$$branch+0x244>
 800239e:	6828      	ldr	r0, [r5, #0]
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	e000      	b.n	80023a6 <__iar_annotation$$branch+0x246>
 80023a4:	2101      	movs	r1, #1
 80023a6:	4668      	mov	r0, sp
 80023a8:	7b40      	ldrb	r0, [r0, #13]
 80023aa:	f003 f9fb 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80023ae:	2000      	movs	r0, #0
 80023b0:	84a8      	strh	r0, [r5, #36]	; 0x24
 80023b2:	2003      	movs	r0, #3
 80023b4:	6969      	ldr	r1, [r5, #20]
 80023b6:	08c9      	lsrs	r1, r1, #3
 80023b8:	4001      	ands	r1, r0
 80023ba:	2903      	cmp	r1, #3
 80023bc:	d101      	bne.n	80023c2 <__iar_annotation$$branch+0x262>
 80023be:	498d      	ldr	r1, [pc, #564]	; (80025f4 <__iar_annotation$$branch+0x494>)
 80023c0:	84a9      	strh	r1, [r5, #36]	; 0x24
 80023c2:	7468      	strb	r0, [r5, #17]
 80023c4:	2400      	movs	r4, #0
 80023c6:	e7c8      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 80023c8:	a903      	add	r1, sp, #12
 80023ca:	0028      	movs	r0, r5
 80023cc:	f001 fbac 	bl	8003b28 <PE_StateMachine_VDMCable>
 80023d0:	e695      	b.n	80020fe <__iar_annotation$$branch+0xc>
 80023d2:	2601      	movs	r6, #1
 80023d4:	6868      	ldr	r0, [r5, #4]
 80023d6:	6800      	ldr	r0, [r0, #0]
 80023d8:	0bc0      	lsrs	r0, r0, #15
 80023da:	4030      	ands	r0, r6
 80023dc:	d006      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023de:	68a8      	ldr	r0, [r5, #8]
 80023e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d002      	beq.n	80023ec <__iar_annotation$$branch+0x28c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	7c28      	ldrb	r0, [r5, #16]
 80023ea:	4790      	blx	r2
 80023ec:	6868      	ldr	r0, [r5, #4]
 80023ee:	6801      	ldr	r1, [r0, #0]
 80023f0:	2210      	movs	r2, #16
 80023f2:	4391      	bics	r1, r2
 80023f4:	6001      	str	r1, [r0, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	0028      	movs	r0, r5
 80023fa:	f7fe ffd4 	bl	80013a6 <PE_SetPowerNegotiation>
 80023fe:	4842      	ldr	r0, [pc, #264]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 8002400:	1829      	adds	r1, r5, r0
 8002402:	7888      	ldrb	r0, [r1, #2]
 8002404:	2803      	cmp	r0, #3
 8002406:	d309      	bcc.n	800241c <__iar_annotation$$branch+0x2bc>
 8002408:	6968      	ldr	r0, [r5, #20]
 800240a:	0880      	lsrs	r0, r0, #2
 800240c:	4006      	ands	r6, r0
 800240e:	d003      	beq.n	8002418 <__iar_annotation$$branch+0x2b8>
 8002410:	68a8      	ldr	r0, [r5, #8]
 8002412:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002414:	2800      	cmp	r0, #0
 8002416:	d171      	bne.n	80024fc <__iar_annotation$$branch+0x39c>
 8002418:	2000      	movs	r0, #0
 800241a:	e6df      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 800241c:	1c40      	adds	r0, r0, #1
 800241e:	7088      	strb	r0, [r1, #2]
 8002420:	2105      	movs	r1, #5
 8002422:	0028      	movs	r0, r5
 8002424:	f7fe fa32 	bl	800088c <PE_Send_RESET>
 8002428:	4873      	ldr	r0, [pc, #460]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800242a:	83e8      	strh	r0, [r5, #30]
 800242c:	2201      	movs	r2, #1
 800242e:	2101      	movs	r1, #1
 8002430:	0028      	movs	r0, r5
 8002432:	f7fe ffaf 	bl	8001394 <PE_CallHardResetCallback>
 8002436:	209b      	movs	r0, #155	; 0x9b
 8002438:	e711      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800243a:	6868      	ldr	r0, [r5, #4]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	0401      	lsls	r1, r0, #16
 8002440:	0fc9      	lsrs	r1, r1, #31
 8002442:	d006      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 8002444:	68a8      	ldr	r0, [r5, #8]
 8002446:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002448:	2a00      	cmp	r2, #0
 800244a:	d002      	beq.n	8002452 <__iar_annotation$$branch+0x2f2>
 800244c:	2100      	movs	r1, #0
 800244e:	7c28      	ldrb	r0, [r5, #16]
 8002450:	4790      	blx	r2
 8002452:	2200      	movs	r2, #0
 8002454:	2101      	movs	r1, #1
 8002456:	0028      	movs	r0, r5
 8002458:	f7fe ff9c 	bl	8001394 <PE_CallHardResetCallback>
 800245c:	4866      	ldr	r0, [pc, #408]	; (80025f8 <__iar_annotation$$branch+0x498>)
 800245e:	83e8      	strh	r0, [r5, #30]
 8002460:	e7e9      	b.n	8002436 <__iar_annotation$$branch+0x2d6>
 8002462:	2100      	movs	r1, #0
 8002464:	4668      	mov	r0, sp
 8002466:	7b40      	ldrb	r0, [r0, #13]
 8002468:	68aa      	ldr	r2, [r5, #8]
 800246a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246c:	4790      	blx	r2
 800246e:	2801      	cmp	r0, #1
 8002470:	d10d      	bne.n	800248e <__iar_annotation$$branch+0x32e>
 8002472:	4862      	ldr	r0, [pc, #392]	; (80025fc <__iar_annotation$$branch+0x49c>)
 8002474:	83e8      	strh	r0, [r5, #30]
 8002476:	2169      	movs	r1, #105	; 0x69
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe f800 	bl	8000480 <USBPD_PE_Notification>
 8002480:	2040      	movs	r0, #64	; 0x40
 8002482:	7468      	strb	r0, [r5, #17]
 8002484:	2400      	movs	r4, #0
 8002486:	2113      	movs	r1, #19
 8002488:	7c28      	ldrb	r0, [r5, #16]
 800248a:	f7fd fff9 	bl	8000480 <USBPD_PE_Notification>
 800248e:	8be8      	ldrh	r0, [r5, #30]
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	0209      	lsls	r1, r1, #8
 8002494:	4288      	cmp	r0, r1
 8002496:	d135      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002498:	e01e      	b.n	80024d8 <__iar_annotation$$branch+0x378>
 800249a:	2101      	movs	r1, #1
 800249c:	4668      	mov	r0, sp
 800249e:	7b40      	ldrb	r0, [r0, #13]
 80024a0:	68aa      	ldr	r2, [r5, #8]
 80024a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a4:	4790      	blx	r2
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d111      	bne.n	80024ce <__iar_annotation$$branch+0x36e>
 80024aa:	0028      	movs	r0, r5
 80024ac:	f7fe fb01 	bl	8000ab2 <PE_Reset_HardReset>
 80024b0:	2205      	movs	r2, #5
 80024b2:	2100      	movs	r1, #0
 80024b4:	0028      	movs	r0, r5
 80024b6:	f7fe ff6d 	bl	8001394 <PE_CallHardResetCallback>
 80024ba:	2168      	movs	r1, #104	; 0x68
 80024bc:	4668      	mov	r0, sp
 80024be:	7b40      	ldrb	r0, [r0, #13]
 80024c0:	f7fd ffde 	bl	8000480 <USBPD_PE_Notification>
 80024c4:	83ef      	strh	r7, [r5, #30]
 80024c6:	24fa      	movs	r4, #250	; 0xfa
 80024c8:	0064      	lsls	r4, r4, #1
 80024ca:	2043      	movs	r0, #67	; 0x43
 80024cc:	7468      	strb	r0, [r5, #17]
 80024ce:	8be8      	ldrh	r0, [r5, #30]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	4288      	cmp	r0, r1
 80024d6:	d115      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 80024d8:	2206      	movs	r2, #6
 80024da:	2100      	movs	r1, #0
 80024dc:	0028      	movs	r0, r5
 80024de:	f7fe ff59 	bl	8001394 <PE_CallHardResetCallback>
 80024e2:	4809      	ldr	r0, [pc, #36]	; (8002508 <__iar_annotation$$branch+0x3a8>)
 80024e4:	1828      	adds	r0, r5, r0
 80024e6:	7880      	ldrb	r0, [r0, #2]
 80024e8:	2803      	cmp	r0, #3
 80024ea:	d200      	bcs.n	80024ee <__iar_annotation$$branch+0x38e>
 80024ec:	e6b6      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80024ee:	6968      	ldr	r0, [r5, #20]
 80024f0:	0741      	lsls	r1, r0, #29
 80024f2:	0fc9      	lsrs	r1, r1, #31
 80024f4:	d004      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024f6:	68a8      	ldr	r0, [r5, #8]
 80024f8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80024fa:	2800      	cmp	r0, #0
 80024fc:	d000      	beq.n	8002500 <__iar_annotation$$branch+0x3a0>
 80024fe:	e0fa      	b.n	80026f6 <__iar_annotation$$branch+0x596>
 8002500:	2400      	movs	r4, #0
 8002502:	746c      	strb	r4, [r5, #17]
 8002504:	e5fc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002506:	bf00      	nop
 8002508:	0000025e 	.word	0x0000025e
 800250c:	ffff7fff 	.word	0xffff7fff
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	2303      	movs	r3, #3
 8002516:	2203      	movs	r2, #3
 8002518:	2100      	movs	r1, #0
 800251a:	0028      	movs	r0, r5
 800251c:	f7fe fff8 	bl	8001510 <PE_Send_CtrlMessage>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ef      	bne.n	8002504 <__iar_annotation$$branch+0x3a4>
 8002524:	2001      	movs	r0, #1
 8002526:	7728      	strb	r0, [r5, #28]
 8002528:	e654      	b.n	80021d4 <__iar_annotation$$branch+0x74>
 800252a:	6868      	ldr	r0, [r5, #4]
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	0540      	lsls	r0, r0, #21
 8002530:	0f40      	lsrs	r0, r0, #29
 8002532:	2804      	cmp	r0, #4
 8002534:	d100      	bne.n	8002538 <__iar_annotation$$branch+0x3d8>
 8002536:	e691      	b.n	800225c <__iar_annotation$$branch+0xfc>
 8002538:	2000      	movs	r0, #0
 800253a:	9000      	str	r0, [sp, #0]
 800253c:	2350      	movs	r3, #80	; 0x50
 800253e:	220d      	movs	r2, #13
 8002540:	2031      	movs	r0, #49	; 0x31
 8002542:	5c29      	ldrb	r1, [r5, r0]
 8002544:	0028      	movs	r0, r5
 8002546:	f7fe ffe3 	bl	8001510 <PE_Send_CtrlMessage>
 800254a:	2800      	cmp	r0, #0
 800254c:	d107      	bne.n	800255e <__iar_annotation$$branch+0x3fe>
 800254e:	2003      	movs	r0, #3
 8002550:	7728      	strb	r0, [r5, #28]
 8002552:	83ee      	strh	r6, [r5, #30]
 8002554:	241b      	movs	r4, #27
 8002556:	2130      	movs	r1, #48	; 0x30
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	f7fd ff91 	bl	8000480 <USBPD_PE_Notification>
 800255e:	e5cf      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002560:	4668      	mov	r0, sp
 8002562:	7b00      	ldrb	r0, [r0, #12]
 8002564:	2814      	cmp	r0, #20
 8002566:	d017      	beq.n	8002598 <__iar_annotation$$branch+0x438>
 8002568:	2030      	movs	r0, #48	; 0x30
 800256a:	5c28      	ldrb	r0, [r5, r0]
 800256c:	2131      	movs	r1, #49	; 0x31
 800256e:	5c69      	ldrb	r1, [r5, r1]
 8002570:	4288      	cmp	r0, r1
 8002572:	d111      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 8002574:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002576:	491e      	ldr	r1, [pc, #120]	; (80025f0 <__iar_annotation$$branch+0x490>)
 8002578:	4001      	ands	r1, r0
 800257a:	2903      	cmp	r1, #3
 800257c:	d10c      	bne.n	8002598 <__iar_annotation$$branch+0x438>
 800257e:	2001      	movs	r0, #1
 8002580:	7728      	strb	r0, [r5, #28]
 8002582:	83ef      	strh	r7, [r5, #30]
 8002584:	24fa      	movs	r4, #250	; 0xfa
 8002586:	0064      	lsls	r4, r4, #1
 8002588:	2043      	movs	r0, #67	; 0x43
 800258a:	7468      	strb	r0, [r5, #17]
 800258c:	2014      	movs	r0, #20
 800258e:	4669      	mov	r1, sp
 8002590:	7308      	strb	r0, [r1, #12]
 8002592:	0028      	movs	r0, r5
 8002594:	f7fe f9df 	bl	8000956 <PE_Clear_RxEvent>
 8002598:	e6df      	b.n	800235a <__iar_annotation$$branch+0x1fa>
 800259a:	9400      	str	r4, [sp, #0]
 800259c:	2343      	movs	r3, #67	; 0x43
 800259e:	2207      	movs	r2, #7
 80025a0:	2100      	movs	r1, #0
 80025a2:	0028      	movs	r0, r5
 80025a4:	f7fe ffb4 	bl	8001510 <PE_Send_CtrlMessage>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d11f      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ac:	2006      	movs	r0, #6
 80025ae:	7728      	strb	r0, [r5, #28]
 80025b0:	83ee      	strh	r6, [r5, #30]
 80025b2:	241b      	movs	r4, #27
 80025b4:	210b      	movs	r1, #11
 80025b6:	e7cf      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80025b8:	4668      	mov	r0, sp
 80025ba:	7b00      	ldrb	r0, [r0, #12]
 80025bc:	2811      	cmp	r0, #17
 80025be:	d115      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025c0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80025c2:	490b      	ldr	r1, [pc, #44]	; (80025f0 <__iar_annotation$$branch+0x490>)
 80025c4:	4001      	ands	r1, r0
 80025c6:	2906      	cmp	r1, #6
 80025c8:	d110      	bne.n	80025ec <__iar_annotation$$branch+0x48c>
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	7c28      	ldrb	r0, [r5, #16]
 80025ce:	f7fd ff57 	bl	8000480 <USBPD_PE_Notification>
 80025d2:	2003      	movs	r0, #3
 80025d4:	7468      	strb	r0, [r5, #17]
 80025d6:	2400      	movs	r4, #0
 80025d8:	4668      	mov	r0, sp
 80025da:	7b00      	ldrb	r0, [r0, #12]
 80025dc:	2814      	cmp	r0, #20
 80025de:	d005      	beq.n	80025ec <__iar_annotation$$branch+0x48c>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe f9b5 	bl	8000956 <PE_Clear_RxEvent>
 80025ec:	e588      	b.n	8002100 <__iar_annotation$$branch+0xe>
 80025ee:	bf00      	nop
 80025f0:	0000f01f 	.word	0x0000f01f
 80025f4:	0000a328 	.word	0x0000a328
 80025f8:	000083e8 	.word	0x000083e8
 80025fc:	000088e3 	.word	0x000088e3
 8002600:	2000      	movs	r0, #0
 8002602:	9000      	str	r0, [sp, #0]
 8002604:	2303      	movs	r3, #3
 8002606:	2204      	movs	r2, #4
 8002608:	2100      	movs	r1, #0
 800260a:	0028      	movs	r0, r5
 800260c:	f7fe ff80 	bl	8001510 <PE_Send_CtrlMessage>
 8002610:	e576      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002612:	4668      	mov	r0, sp
 8002614:	7800      	ldrb	r0, [r0, #0]
 8002616:	2804      	cmp	r0, #4
 8002618:	d006      	beq.n	8002628 <__iar_annotation$$branch+0x4c8>
 800261a:	2000      	movs	r0, #0
 800261c:	7728      	strb	r0, [r5, #28]
 800261e:	7469      	strb	r1, [r5, #17]
 8002620:	2120      	movs	r1, #32
 8002622:	7c28      	ldrb	r0, [r5, #16]
 8002624:	f7fd ff2c 	bl	8000480 <USBPD_PE_Notification>
 8002628:	a903      	add	r1, sp, #12
 800262a:	0028      	movs	r0, r5
 800262c:	f000 fa1a 	bl	8002a64 <PE_StateMachine_SNK_ReadyWait>
 8002630:	e565      	b.n	80020fe <__iar_annotation$$branch+0xc>
 8002632:	68a8      	ldr	r0, [r5, #8]
 8002634:	6881      	ldr	r1, [r0, #8]
 8002636:	2900      	cmp	r1, #0
 8002638:	d02e      	beq.n	8002698 <__iar_annotation$$branch+0x538>
 800263a:	4668      	mov	r0, sp
 800263c:	7b40      	ldrb	r0, [r0, #13]
 800263e:	4788      	blx	r1
 8002640:	280a      	cmp	r0, #10
 8002642:	d002      	beq.n	800264a <__iar_annotation$$branch+0x4ea>
 8002644:	280d      	cmp	r0, #13
 8002646:	d022      	beq.n	800268e <__iar_annotation$$branch+0x52e>
 8002648:	e026      	b.n	8002698 <__iar_annotation$$branch+0x538>
 800264a:	2201      	movs	r2, #1
 800264c:	2100      	movs	r1, #0
 800264e:	7c28      	ldrb	r0, [r5, #16]
 8002650:	68ab      	ldr	r3, [r5, #8]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	4798      	blx	r3
 8002656:	2000      	movs	r0, #0
 8002658:	9000      	str	r0, [sp, #0]
 800265a:	2359      	movs	r3, #89	; 0x59
 800265c:	2203      	movs	r2, #3
 800265e:	2100      	movs	r1, #0
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ff55 	bl	8001510 <PE_Send_CtrlMessage>
 8002666:	2800      	cmp	r0, #0
 8002668:	d110      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 800266a:	2008      	movs	r0, #8
 800266c:	7728      	strb	r0, [r5, #28]
 800266e:	6868      	ldr	r0, [r5, #4]
 8002670:	6801      	ldr	r1, [r0, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	430a      	orrs	r2, r1
 8002676:	6002      	str	r2, [r0, #0]
 8002678:	2206      	movs	r2, #6
 800267a:	2100      	movs	r1, #0
 800267c:	7c28      	ldrb	r0, [r5, #16]
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	4798      	blx	r3
 8002684:	48b0      	ldr	r0, [pc, #704]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 8002686:	83e8      	strh	r0, [r5, #30]
 8002688:	24e1      	movs	r4, #225	; 0xe1
 800268a:	00a4      	lsls	r4, r4, #2
 800268c:	e538      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800268e:	2000      	movs	r0, #0
 8002690:	9000      	str	r0, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	220c      	movs	r2, #12
 8002696:	e7b7      	b.n	8002608 <__iar_annotation$$branch+0x4a8>
 8002698:	202a      	movs	r0, #42	; 0x2a
 800269a:	e5e0      	b.n	800225e <__iar_annotation$$branch+0xfe>
 800269c:	4668      	mov	r0, sp
 800269e:	7b00      	ldrb	r0, [r0, #12]
 80026a0:	2811      	cmp	r0, #17
 80026a2:	d119      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026a4:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80026a6:	49c1      	ldr	r1, [pc, #772]	; (80029ac <__iar_annotation$$branch+0x84c>)
 80026a8:	4001      	ands	r1, r0
 80026aa:	2906      	cmp	r1, #6
 80026ac:	d114      	bne.n	80026d8 <__iar_annotation$$branch+0x578>
 80026ae:	7f28      	ldrb	r0, [r5, #28]
 80026b0:	2809      	cmp	r0, #9
 80026b2:	d005      	beq.n	80026c0 <__iar_annotation$$branch+0x560>
 80026b4:	2209      	movs	r2, #9
 80026b6:	2100      	movs	r1, #0
 80026b8:	7c28      	ldrb	r0, [r5, #16]
 80026ba:	68ab      	ldr	r3, [r5, #8]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	4798      	blx	r3
 80026c0:	2053      	movs	r0, #83	; 0x53
 80026c2:	7468      	strb	r0, [r5, #17]
 80026c4:	4668      	mov	r0, sp
 80026c6:	7b00      	ldrb	r0, [r0, #12]
 80026c8:	2814      	cmp	r0, #20
 80026ca:	d005      	beq.n	80026d8 <__iar_annotation$$branch+0x578>
 80026cc:	2014      	movs	r0, #20
 80026ce:	4669      	mov	r1, sp
 80026d0:	7308      	strb	r0, [r1, #12]
 80026d2:	0028      	movs	r0, r5
 80026d4:	f7fe f93f 	bl	8000956 <PE_Clear_RxEvent>
 80026d8:	8be8      	ldrh	r0, [r5, #30]
 80026da:	03a1      	lsls	r1, r4, #14
 80026dc:	4288      	cmp	r0, r1
 80026de:	d1d5      	bne.n	800268c <__iar_annotation$$branch+0x52c>
 80026e0:	220f      	movs	r2, #15
 80026e2:	2100      	movs	r1, #0
 80026e4:	7c28      	ldrb	r0, [r5, #16]
 80026e6:	68ab      	ldr	r3, [r5, #8]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	4798      	blx	r3
 80026ec:	68a8      	ldr	r0, [r5, #8]
 80026ee:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d100      	bne.n	80026f6 <__iar_annotation$$branch+0x596>
 80026f4:	e5b2      	b.n	800225c <__iar_annotation$$branch+0xfc>
 80026f6:	2092      	movs	r0, #146	; 0x92
 80026f8:	e5b1      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80026fa:	0028      	movs	r0, r5
 80026fc:	f7fe fe53 	bl	80013a6 <PE_SetPowerNegotiation>
 8002700:	220a      	movs	r2, #10
 8002702:	2100      	movs	r1, #0
 8002704:	7c28      	ldrb	r0, [r5, #16]
 8002706:	68ab      	ldr	r3, [r5, #8]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	4798      	blx	r3
 800270c:	6868      	ldr	r0, [r5, #4]
 800270e:	7800      	ldrb	r0, [r0, #0]
 8002710:	0780      	lsls	r0, r0, #30
 8002712:	0f80      	lsrs	r0, r0, #30
 8002714:	2802      	cmp	r0, #2
 8002716:	d102      	bne.n	800271e <__iar_annotation$$branch+0x5be>
 8002718:	7c28      	ldrb	r0, [r5, #16]
 800271a:	f003 f820 	bl	800575e <USBPD_PRL_SRCSetSinkNG>
 800271e:	2101      	movs	r1, #1
 8002720:	0028      	movs	r0, r5
 8002722:	f7fe f8d3 	bl	80008cc <PE_ChangePowerRole>
 8002726:	7f28      	ldrb	r0, [r5, #28]
 8002728:	2809      	cmp	r0, #9
 800272a:	d005      	beq.n	8002738 <__iar_annotation$$branch+0x5d8>
 800272c:	220b      	movs	r2, #11
 800272e:	2101      	movs	r1, #1
 8002730:	7c28      	ldrb	r0, [r5, #16]
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	2000      	movs	r0, #0
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	235b      	movs	r3, #91	; 0x5b
 800273e:	2206      	movs	r2, #6
 8002740:	2100      	movs	r1, #0
 8002742:	0028      	movs	r0, r5
 8002744:	f7fe fee4 	bl	8001510 <PE_Send_CtrlMessage>
 8002748:	2800      	cmp	r0, #0
 800274a:	d108      	bne.n	800275e <__iar_annotation$$branch+0x5fe>
 800274c:	220c      	movs	r2, #12
 800274e:	2100      	movs	r1, #0
 8002750:	7c28      	ldrb	r0, [r5, #16]
 8002752:	68ab      	ldr	r3, [r5, #8]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	4798      	blx	r3
 8002758:	48c1      	ldr	r0, [pc, #772]	; (8002a60 <.text_3>)
 800275a:	83e8      	strh	r0, [r5, #30]
 800275c:	2414      	movs	r4, #20
 800275e:	7c68      	ldrb	r0, [r5, #17]
 8002760:	285b      	cmp	r0, #91	; 0x5b
 8002762:	d00f      	beq.n	8002784 <__iar_annotation$$branch+0x624>
 8002764:	2100      	movs	r1, #0
 8002766:	0028      	movs	r0, r5
 8002768:	f7fe f8b0 	bl	80008cc <PE_ChangePowerRole>
 800276c:	2206      	movs	r2, #6
 800276e:	2101      	movs	r1, #1
 8002770:	7c28      	ldrb	r0, [r5, #16]
 8002772:	68ab      	ldr	r3, [r5, #8]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	4798      	blx	r3
 8002778:	2207      	movs	r2, #7
 800277a:	2100      	movs	r1, #0
 800277c:	7c28      	ldrb	r0, [r5, #16]
 800277e:	68ab      	ldr	r3, [r5, #8]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	4798      	blx	r3
 8002784:	e4bc      	b.n	8002100 <__iar_annotation$$branch+0xe>
 8002786:	9400      	str	r4, [sp, #0]
 8002788:	2358      	movs	r3, #88	; 0x58
 800278a:	220a      	movs	r2, #10
 800278c:	2100      	movs	r1, #0
 800278e:	0028      	movs	r0, r5
 8002790:	f7fe febe 	bl	8001510 <PE_Send_CtrlMessage>
 8002794:	2800      	cmp	r0, #0
 8002796:	d105      	bne.n	80027a4 <__iar_annotation$$branch+0x644>
 8002798:	2008      	movs	r0, #8
 800279a:	7728      	strb	r0, [r5, #28]
 800279c:	83ee      	strh	r6, [r5, #30]
 800279e:	241b      	movs	r4, #27
 80027a0:	2202      	movs	r2, #2
 80027a2:	e7ea      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a4:	220f      	movs	r2, #15
 80027a6:	e7e8      	b.n	800277a <__iar_annotation$$branch+0x61a>
 80027a8:	4669      	mov	r1, sp
 80027aa:	7b09      	ldrb	r1, [r1, #12]
 80027ac:	2911      	cmp	r1, #17
 80027ae:	d10c      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b0:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80027b2:	4201      	tst	r1, r0
 80027b4:	d109      	bne.n	80027ca <__iar_annotation$$branch+0x66a>
 80027b6:	06c8      	lsls	r0, r1, #27
 80027b8:	0ec0      	lsrs	r0, r0, #27
 80027ba:	2803      	cmp	r0, #3
 80027bc:	d006      	beq.n	80027cc <__iar_annotation$$branch+0x66c>
 80027be:	2804      	cmp	r0, #4
 80027c0:	d02d      	beq.n	800281e <__iar_annotation$$branch+0x6be>
 80027c2:	280c      	cmp	r0, #12
 80027c4:	d029      	beq.n	800281a <__iar_annotation$$branch+0x6ba>
 80027c6:	2810      	cmp	r0, #16
 80027c8:	d032      	beq.n	8002830 <__iar_annotation$$branch+0x6d0>
 80027ca:	e0a5      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 80027cc:	6868      	ldr	r0, [r5, #4]
 80027ce:	6801      	ldr	r1, [r0, #0]
 80027d0:	2210      	movs	r2, #16
 80027d2:	430a      	orrs	r2, r1
 80027d4:	6002      	str	r2, [r0, #0]
 80027d6:	485c      	ldr	r0, [pc, #368]	; (8002948 <__iar_annotation$$branch+0x7e8>)
 80027d8:	83e8      	strh	r0, [r5, #30]
 80027da:	24e1      	movs	r4, #225	; 0xe1
 80027dc:	00a4      	lsls	r4, r4, #2
 80027de:	7f28      	ldrb	r0, [r5, #28]
 80027e0:	2809      	cmp	r0, #9
 80027e2:	d005      	beq.n	80027f0 <__iar_annotation$$branch+0x690>
 80027e4:	2206      	movs	r2, #6
 80027e6:	2100      	movs	r1, #0
 80027e8:	7c28      	ldrb	r0, [r5, #16]
 80027ea:	68ab      	ldr	r3, [r5, #8]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	4798      	blx	r3
 80027f0:	2104      	movs	r1, #4
 80027f2:	0028      	movs	r0, r5
 80027f4:	f7fe fdd7 	bl	80013a6 <PE_SetPowerNegotiation>
 80027f8:	213a      	movs	r1, #58	; 0x3a
 80027fa:	7c28      	ldrb	r0, [r5, #16]
 80027fc:	f7fd fe40 	bl	8000480 <USBPD_PE_Notification>
 8002800:	4668      	mov	r0, sp
 8002802:	7b00      	ldrb	r0, [r0, #12]
 8002804:	2814      	cmp	r0, #20
 8002806:	d005      	beq.n	8002814 <__iar_annotation$$branch+0x6b4>
 8002808:	2014      	movs	r0, #20
 800280a:	4669      	mov	r1, sp
 800280c:	7308      	strb	r0, [r1, #12]
 800280e:	0028      	movs	r0, r5
 8002810:	f7fe f8a1 	bl	8000956 <PE_Clear_RxEvent>
 8002814:	2059      	movs	r0, #89	; 0x59
 8002816:	7468      	strb	r0, [r5, #17]
 8002818:	e07e      	b.n	8002918 <__iar_annotation$$branch+0x7b8>
 800281a:	213b      	movs	r1, #59	; 0x3b
 800281c:	e000      	b.n	8002820 <__iar_annotation$$branch+0x6c0>
 800281e:	2116      	movs	r1, #22
 8002820:	7c28      	ldrb	r0, [r5, #16]
 8002822:	f7fd fe2d 	bl	8000480 <USBPD_PE_Notification>
 8002826:	4668      	mov	r0, sp
 8002828:	7b00      	ldrb	r0, [r0, #12]
 800282a:	2814      	cmp	r0, #20
 800282c:	d108      	bne.n	8002840 <__iar_annotation$$branch+0x6e0>
 800282e:	e070      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002830:	2117      	movs	r1, #23
 8002832:	7c28      	ldrb	r0, [r5, #16]
 8002834:	f7fd fe24 	bl	8000480 <USBPD_PE_Notification>
 8002838:	4668      	mov	r0, sp
 800283a:	7b00      	ldrb	r0, [r0, #12]
 800283c:	2814      	cmp	r0, #20
 800283e:	d068      	beq.n	8002912 <__iar_annotation$$branch+0x7b2>
 8002840:	2014      	movs	r0, #20
 8002842:	4669      	mov	r1, sp
 8002844:	7308      	strb	r0, [r1, #12]
 8002846:	0028      	movs	r0, r5
 8002848:	f7fe f885 	bl	8000956 <PE_Clear_RxEvent>
 800284c:	e061      	b.n	8002912 <__iar_annotation$$branch+0x7b2>
 800284e:	2000      	movs	r0, #0
 8002850:	9004      	str	r0, [sp, #16]
 8002852:	ab04      	add	r3, sp, #16
 8002854:	aa05      	add	r2, sp, #20
 8002856:	2100      	movs	r1, #0
 8002858:	7c28      	ldrb	r0, [r5, #16]
 800285a:	68ae      	ldr	r6, [r5, #8]
 800285c:	6976      	ldr	r6, [r6, #20]
 800285e:	47b0      	blx	r6
 8002860:	2104      	movs	r1, #4
 8002862:	9804      	ldr	r0, [sp, #16]
 8002864:	f7fe fdf2 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8002868:	2800      	cmp	r0, #0
 800286a:	d001      	beq.n	8002870 <__iar_annotation$$branch+0x710>
 800286c:	2003      	movs	r0, #3
 800286e:	e4b5      	b.n	80021dc <__iar_annotation$$branch+0x7c>
 8002870:	9002      	str	r0, [sp, #8]
 8002872:	2003      	movs	r0, #3
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	9804      	ldr	r0, [sp, #16]
 8002878:	0880      	lsrs	r0, r0, #2
 800287a:	9000      	str	r0, [sp, #0]
 800287c:	ab05      	add	r3, sp, #20
 800287e:	2201      	movs	r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	0028      	movs	r0, r5
 8002884:	f7fe fe6f 	bl	8001566 <PE_Send_DataMessage>
 8002888:	e43a      	b.n	8002100 <__iar_annotation$$branch+0xe>
 800288a:	2000      	movs	r0, #0
 800288c:	9002      	str	r0, [sp, #8]
 800288e:	2003      	movs	r0, #3
 8002890:	9001      	str	r0, [sp, #4]
 8002892:	2001      	movs	r0, #1
 8002894:	9000      	str	r0, [sp, #0]
 8002896:	002b      	movs	r3, r5
 8002898:	332c      	adds	r3, #44	; 0x2c
 800289a:	2206      	movs	r2, #6
 800289c:	2100      	movs	r1, #0
 800289e:	0028      	movs	r0, r5
 80028a0:	f7fe fe61 	bl	8001566 <PE_Send_DataMessage>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d1ef      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028a8:	215d      	movs	r1, #93	; 0x5d
 80028aa:	e655      	b.n	8002558 <__iar_annotation$$branch+0x3f8>
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	2366      	movs	r3, #102	; 0x66
 80028b0:	2214      	movs	r2, #20
 80028b2:	2100      	movs	r1, #0
 80028b4:	0028      	movs	r0, r5
 80028b6:	f7fe fe2b 	bl	8001510 <PE_Send_CtrlMessage>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1e4      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 80028be:	83ee      	strh	r6, [r5, #30]
 80028c0:	241b      	movs	r4, #27
 80028c2:	214a      	movs	r1, #74	; 0x4a
 80028c4:	7c28      	ldrb	r0, [r5, #16]
 80028c6:	f7fd fddb 	bl	8000480 <USBPD_PE_Notification>
 80028ca:	200b      	movs	r0, #11
 80028cc:	7728      	strb	r0, [r5, #28]
 80028ce:	e7db      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80028d0:	4668      	mov	r0, sp
 80028d2:	7b00      	ldrb	r0, [r0, #12]
 80028d4:	2811      	cmp	r0, #17
 80028d6:	d11f      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028d8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80028da:	0bc1      	lsrs	r1, r0, #15
 80028dc:	d01c      	beq.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028de:	06c0      	lsls	r0, r0, #27
 80028e0:	0ec0      	lsrs	r0, r0, #27
 80028e2:	280c      	cmp	r0, #12
 80028e4:	d118      	bne.n	8002918 <__iar_annotation$$branch+0x7b8>
 80028e6:	2304      	movs	r3, #4
 80028e8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80028ea:	1d02      	adds	r2, r0, #4
 80028ec:	210a      	movs	r1, #10
 80028ee:	7c28      	ldrb	r0, [r5, #16]
 80028f0:	68ac      	ldr	r4, [r5, #8]
 80028f2:	69a4      	ldr	r4, [r4, #24]
 80028f4:	47a0      	blx	r4
 80028f6:	4668      	mov	r0, sp
 80028f8:	7b00      	ldrb	r0, [r0, #12]
 80028fa:	2814      	cmp	r0, #20
 80028fc:	d005      	beq.n	800290a <__iar_annotation$$branch+0x7aa>
 80028fe:	2014      	movs	r0, #20
 8002900:	4669      	mov	r1, sp
 8002902:	7308      	strb	r0, [r1, #12]
 8002904:	0028      	movs	r0, r5
 8002906:	f7fe f826 	bl	8000956 <PE_Clear_RxEvent>
 800290a:	214b      	movs	r1, #75	; 0x4b
 800290c:	7c28      	ldrb	r0, [r5, #16]
 800290e:	f7fd fdb7 	bl	8000480 <USBPD_PE_Notification>
 8002912:	2003      	movs	r0, #3
 8002914:	7468      	strb	r0, [r5, #17]
 8002916:	2400      	movs	r4, #0
 8002918:	8be8      	ldrh	r0, [r5, #30]
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	0209      	lsls	r1, r1, #8
 800291e:	4288      	cmp	r0, r1
 8002920:	d1b2      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 8002922:	e041      	b.n	80029a8 <__iar_annotation$$branch+0x848>
 8002924:	4895      	ldr	r0, [pc, #596]	; (8002b7c <.text_5>)
 8002926:	182f      	adds	r7, r5, r0
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	2339      	movs	r3, #57	; 0x39
 800292c:	783a      	ldrb	r2, [r7, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	0028      	movs	r0, r5
 8002932:	f7fe fded 	bl	8001510 <PE_Send_CtrlMessage>
 8002936:	2800      	cmp	r0, #0
 8002938:	d1a6      	bne.n	8002888 <__iar_annotation$$branch+0x728>
 800293a:	7878      	ldrb	r0, [r7, #1]
 800293c:	7728      	strb	r0, [r5, #28]
 800293e:	2144      	movs	r1, #68	; 0x44
 8002940:	7c28      	ldrb	r0, [r5, #16]
 8002942:	f7fd fd9d 	bl	8000480 <USBPD_PE_Notification>
 8002946:	e4b8      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002948:	00008384 	.word	0x00008384
 800294c:	4668      	mov	r0, sp
 800294e:	7b00      	ldrb	r0, [r0, #12]
 8002950:	2814      	cmp	r0, #20
 8002952:	d024      	beq.n	800299e <__iar_annotation$$branch+0x83e>
 8002954:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8002956:	0bc0      	lsrs	r0, r0, #15
 8002958:	d00e      	beq.n	8002978 <__iar_annotation$$branch+0x818>
 800295a:	0028      	movs	r0, r5
 800295c:	f7fe fe40 	bl	80015e0 <PE_Check_ExtendedMessage>
 8002960:	4668      	mov	r0, sp
 8002962:	7b00      	ldrb	r0, [r0, #12]
 8002964:	2814      	cmp	r0, #20
 8002966:	d005      	beq.n	8002974 <__iar_annotation$$branch+0x814>
 8002968:	2014      	movs	r0, #20
 800296a:	4669      	mov	r1, sp
 800296c:	7308      	strb	r0, [r1, #12]
 800296e:	0028      	movs	r0, r5
 8002970:	f7fd fff1 	bl	8000956 <PE_Clear_RxEvent>
 8002974:	2000      	movs	r0, #0
 8002976:	83e8      	strh	r0, [r5, #30]
 8002978:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <__iar_annotation$$branch+0x84c>)
 800297c:	4001      	ands	r1, r0
 800297e:	2910      	cmp	r1, #16
 8002980:	d10d      	bne.n	800299e <__iar_annotation$$branch+0x83e>
 8002982:	2003      	movs	r0, #3
 8002984:	7468      	strb	r0, [r5, #17]
 8002986:	2400      	movs	r4, #0
 8002988:	4668      	mov	r0, sp
 800298a:	7b00      	ldrb	r0, [r0, #12]
 800298c:	2814      	cmp	r0, #20
 800298e:	d005      	beq.n	800299c <__iar_annotation$$branch+0x83c>
 8002990:	2014      	movs	r0, #20
 8002992:	4669      	mov	r1, sp
 8002994:	7308      	strb	r0, [r1, #12]
 8002996:	0028      	movs	r0, r5
 8002998:	f7fd ffdd 	bl	8000956 <PE_Clear_RxEvent>
 800299c:	83ec      	strh	r4, [r5, #30]
 800299e:	8be8      	ldrh	r0, [r5, #30]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0209      	lsls	r1, r1, #8
 80029a4:	4288      	cmp	r0, r1
 80029a6:	d11c      	bne.n	80029e2 <__iar_annotation$$branch+0x882>
 80029a8:	2003      	movs	r0, #3
 80029aa:	e458      	b.n	800225e <__iar_annotation$$branch+0xfe>
 80029ac:	0000f01f 	.word	0x0000f01f
 80029b0:	0028      	movs	r0, r5
 80029b2:	f7fe ff37 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80029b6:	e63b      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029b8:	a903      	add	r1, sp, #12
 80029ba:	0028      	movs	r0, r5
 80029bc:	f7fe f9d4 	bl	8000d68 <PE_SubStateMachine_Generic>
 80029c0:	e636      	b.n	8002630 <__iar_annotation$$branch+0x4d0>
 80029c2:	a903      	add	r1, sp, #12
 80029c4:	0028      	movs	r0, r5
 80029c6:	f001 f9ef 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80029ca:	0004      	movs	r4, r0
 80029cc:	6868      	ldr	r0, [r5, #4]
 80029ce:	6800      	ldr	r0, [r0, #0]
 80029d0:	0401      	lsls	r1, r0, #16
 80029d2:	0fc9      	lsrs	r1, r1, #31
 80029d4:	d006      	beq.n	80029e4 <__iar_annotation$$branch+0x884>
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	4668      	mov	r0, sp
 80029dc:	7b40      	ldrb	r0, [r0, #13]
 80029de:	f002 fee1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 80029e2:	e751      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029e4:	2101      	movs	r1, #1
 80029e6:	e7f8      	b.n	80029da <__iar_annotation$$branch+0x87a>
 80029e8:	4668      	mov	r0, sp
 80029ea:	7b01      	ldrb	r1, [r0, #12]
 80029ec:	0028      	movs	r0, r5
 80029ee:	f002 fc3b 	bl	8005268 <PE_StateMachine_UVDM>
 80029f2:	e749      	b.n	8002888 <__iar_annotation$$branch+0x728>
 80029f4:	2000      	movs	r0, #0
 80029f6:	9000      	str	r0, [sp, #0]
 80029f8:	2358      	movs	r3, #88	; 0x58
 80029fa:	2213      	movs	r2, #19
 80029fc:	2100      	movs	r1, #0
 80029fe:	0028      	movs	r0, r5
 8002a00:	f7fe fd86 	bl	8001510 <PE_Send_CtrlMessage>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d1f4      	bne.n	80029f2 <__iar_annotation$$branch+0x892>
 8002a08:	2009      	movs	r0, #9
 8002a0a:	7728      	strb	r0, [r5, #28]
 8002a0c:	e455      	b.n	80022ba <__iar_annotation$$branch+0x15a>
 8002a0e:	6968      	ldr	r0, [r5, #20]
 8002a10:	2701      	movs	r7, #1
 8002a12:	0b41      	lsrs	r1, r0, #13
 8002a14:	4039      	ands	r1, r7
 8002a16:	d019      	beq.n	8002a4c <__iar_annotation$$branch+0x8ec>
 8002a18:	0b80      	lsrs	r0, r0, #14
 8002a1a:	4038      	ands	r0, r7
 8002a1c:	d007      	beq.n	8002a2e <__iar_annotation$$branch+0x8ce>
 8002a1e:	215b      	movs	r1, #91	; 0x5b
 8002a20:	7c28      	ldrb	r0, [r5, #16]
 8002a22:	f7fd fd2d 	bl	8000480 <USBPD_PE_Notification>
 8002a26:	6968      	ldr	r0, [r5, #20]
 8002a28:	4955      	ldr	r1, [pc, #340]	; (8002b80 <.text_6>)
 8002a2a:	4001      	ands	r1, r0
 8002a2c:	6169      	str	r1, [r5, #20]
 8002a2e:	2003      	movs	r0, #3
 8002a30:	7468      	strb	r0, [r5, #17]
 8002a32:	7ca9      	ldrb	r1, [r5, #18]
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d008      	beq.n	8002a4a <__iar_annotation$$branch+0x8ea>
 8002a38:	74a8      	strb	r0, [r5, #18]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	9000      	str	r0, [sp, #0]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2203      	movs	r2, #3
 8002a42:	7c29      	ldrb	r1, [r5, #16]
 8002a44:	2004      	movs	r0, #4
 8002a46:	6834      	ldr	r4, [r6, #0]
 8002a48:	47a0      	blx	r4
 8002a4a:	2401      	movs	r4, #1
 8002a4c:	6968      	ldr	r0, [r5, #20]
 8002a4e:	494d      	ldr	r1, [pc, #308]	; (8002b84 <.text_7>)
 8002a50:	4001      	ands	r1, r0
 8002a52:	6169      	str	r1, [r5, #20]
 8002a54:	2c00      	cmp	r4, #0
 8002a56:	d101      	bne.n	8002a5c <__iar_annotation$$branch>

08002a58 <__iar_annotation$$branch>:
 8002a58:	f7ff fa3e 	bl	8001ed8 <USBPD_PE_StateMachine_SNK+0xb0>

08002a5c <__iar_annotation$$branch>:
 8002a5c:	f7ff fb8e 	bl	800217c <__iar_annotation$$branch+0x1c>

08002a60 <.text_3>:
 8002a60:	00008014 	.word	0x00008014

08002a64 <PE_StateMachine_SNK_ReadyWait>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	0004      	movs	r4, r0
 8002a68:	000e      	movs	r6, r1
 8002a6a:	2702      	movs	r7, #2
 8002a6c:	7830      	ldrb	r0, [r6, #0]
 8002a6e:	2814      	cmp	r0, #20
 8002a70:	d00b      	beq.n	8002a8a <PE_StateMachine_SNK_ReadyWait+0x26>
 8002a72:	0020      	movs	r0, r4
 8002a74:	f7fe fffc 	bl	8001a70 <PE_ManageRXEvent>
 8002a78:	7830      	ldrb	r0, [r6, #0]
 8002a7a:	2814      	cmp	r0, #20
 8002a7c:	d07b      	beq.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a7e:	2014      	movs	r0, #20
 8002a80:	7030      	strb	r0, [r6, #0]
 8002a82:	0020      	movs	r0, r4
 8002a84:	f7fd ff67 	bl	8000956 <PE_Clear_RxEvent>
 8002a88:	e075      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002a8a:	6961      	ldr	r1, [r4, #20]
 8002a8c:	0cc8      	lsrs	r0, r1, #19
 8002a8e:	03be      	lsls	r6, r7, #14
 8002a90:	2700      	movs	r7, #0
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d021      	beq.n	8002ada <PE_StateMachine_SNK_ReadyWait+0x76>
 8002a96:	8c21      	ldrh	r1, [r4, #32]
 8002a98:	42b1      	cmp	r1, r6
 8002a9a:	d111      	bne.n	8002ac0 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002a9c:	200f      	movs	r0, #15
 8002a9e:	7460      	strb	r0, [r4, #17]
 8002aa0:	9700      	str	r7, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2270      	movs	r2, #112	; 0x70
 8002aa6:	7c21      	ldrb	r1, [r4, #16]
 8002aa8:	2009      	movs	r0, #9
 8002aaa:	4d37      	ldr	r5, [pc, #220]	; (8002b88 <.text_8>)
 8002aac:	682d      	ldr	r5, [r5, #0]
 8002aae:	47a8      	blx	r5
 8002ab0:	2098      	movs	r0, #152	; 0x98
 8002ab2:	0080      	lsls	r0, r0, #2
 8002ab4:	5c20      	ldrb	r0, [r4, r0]
 8002ab6:	1c40      	adds	r0, r0, #1
 8002ab8:	2198      	movs	r1, #152	; 0x98
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	5460      	strb	r0, [r4, r1]
 8002abe:	e05a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ac0:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8002ac2:	0509      	lsls	r1, r1, #20
 8002ac4:	0f49      	lsrs	r1, r1, #29
 8002ac6:	180a      	adds	r2, r1, r0
 8002ac8:	2333      	movs	r3, #51	; 0x33
 8002aca:	435a      	muls	r2, r3
 8002acc:	4316      	orrs	r6, r2
 8002ace:	8426      	strh	r6, [r4, #32]
 8002ad0:	180f      	adds	r7, r1, r0
 8002ad2:	2033      	movs	r0, #51	; 0x33
 8002ad4:	4347      	muls	r7, r0
 8002ad6:	b2bf      	uxth	r7, r7
 8002ad8:	e04d      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ada:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8002adc:	42b0      	cmp	r0, r6
 8002ade:	d104      	bne.n	8002aea <PE_StateMachine_SNK_ReadyWait+0x86>
 8002ae0:	2045      	movs	r0, #69	; 0x45
 8002ae2:	7460      	strb	r0, [r4, #17]
 8002ae4:	430e      	orrs	r6, r1
 8002ae6:	6166      	str	r6, [r4, #20]
 8002ae8:	e045      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002aea:	7c20      	ldrb	r0, [r4, #16]
 8002aec:	f7fd ff58 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d128      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002af4:	2032      	movs	r0, #50	; 0x32
 8002af6:	5c20      	ldrb	r0, [r4, r0]
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d024      	beq.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002afc:	6860      	ldr	r0, [r4, #4]
 8002afe:	6800      	ldr	r0, [r0, #0]
 8002b00:	2103      	movs	r1, #3
 8002b02:	2203      	movs	r2, #3
 8002b04:	4002      	ands	r2, r0
 8002b06:	2a01      	cmp	r2, #1
 8002b08:	d007      	beq.n	8002b1a <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002b0a:	4001      	ands	r1, r0
 8002b0c:	2902      	cmp	r1, #2
 8002b0e:	d11a      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b10:	7c20      	ldrb	r0, [r4, #16]
 8002b12:	f002 fe3b 	bl	800578c <USBPD_PRL_IsResistor_SinkTxOK>
 8002b16:	2801      	cmp	r0, #1
 8002b18:	d115      	bne.n	8002b46 <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002b1a:	2033      	movs	r0, #51	; 0x33
 8002b1c:	5c20      	ldrb	r0, [r4, r0]
 8002b1e:	2131      	movs	r1, #49	; 0x31
 8002b20:	5460      	strb	r0, [r4, r1]
 8002b22:	2032      	movs	r0, #50	; 0x32
 8002b24:	5c20      	ldrb	r0, [r4, r0]
 8002b26:	7460      	strb	r0, [r4, #17]
 8002b28:	2845      	cmp	r0, #69	; 0x45
 8002b2a:	d102      	bne.n	8002b32 <PE_StateMachine_SNK_ReadyWait+0xce>
 8002b2c:	6960      	ldr	r0, [r4, #20]
 8002b2e:	4306      	orrs	r6, r0
 8002b30:	6166      	str	r6, [r4, #20]
 8002b32:	2132      	movs	r1, #50	; 0x32
 8002b34:	5467      	strb	r7, [r4, r1]
 8002b36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002b38:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002b3a:	6960      	ldr	r0, [r4, #20]
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	01c9      	lsls	r1, r1, #7
 8002b40:	4301      	orrs	r1, r0
 8002b42:	6161      	str	r1, [r4, #20]
 8002b44:	e017      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b46:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 8002b48:	42b0      	cmp	r0, r6
 8002b4a:	d109      	bne.n	8002b60 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002b4c:	8467      	strh	r7, [r4, #34]	; 0x22
 8002b4e:	2098      	movs	r0, #152	; 0x98
 8002b50:	0080      	lsls	r0, r0, #2
 8002b52:	1820      	adds	r0, r4, r0
 8002b54:	7881      	ldrb	r1, [r0, #2]
 8002b56:	1c49      	adds	r1, r1, #1
 8002b58:	7081      	strb	r1, [r0, #2]
 8002b5a:	2005      	movs	r0, #5
 8002b5c:	7460      	strb	r0, [r4, #17]
 8002b5e:	e00a      	b.n	8002b76 <PE_StateMachine_SNK_ReadyWait+0x112>
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fe fc47 	bl	80013f4 <PE_CalculateMinTiming>
 8002b66:	2132      	movs	r1, #50	; 0x32
 8002b68:	5c61      	ldrb	r1, [r4, r1]
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d002      	beq.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b6e:	2802      	cmp	r0, #2
 8002b70:	d300      	bcc.n	8002b74 <PE_StateMachine_SNK_ReadyWait+0x110>
 8002b72:	2002      	movs	r0, #2
 8002b74:	0007      	movs	r7, r0
 8002b76:	0038      	movs	r0, r7
 8002b78:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002b7c <.text_5>:
 8002b7c:	0000025e 	.word	0x0000025e

08002b80 <.text_6>:
 8002b80:	ffffbfff 	.word	0xffffbfff

08002b84 <.text_7>:
 8002b84:	ffffdfff 	.word	0xffffdfff

08002b88 <.text_8>:
 8002b88:	20000000 	.word	0x20000000

08002b8c <USBPD_PE_StateMachine_SRC>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	0005      	movs	r5, r0
 8002b92:	4829      	ldr	r0, [pc, #164]	; (8002c38 <USBPD_PE_StateMachine_SRC+0xac>)
 8002b94:	00a9      	lsls	r1, r5, #2
 8002b96:	5844      	ldr	r4, [r0, r1]
 8002b98:	7c60      	ldrb	r0, [r4, #17]
 8002b9a:	2848      	cmp	r0, #72	; 0x48
 8002b9c:	d134      	bne.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f7fd ffc0 	bl	8000b24 <PE_Reset_ZI>
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f7fd fff3 	bl	8000b90 <PE_Reset_Counter>
 8002baa:	6820      	ldr	r0, [r4, #0]
 8002bac:	7900      	ldrb	r0, [r0, #4]
 8002bae:	0783      	lsls	r3, r0, #30
 8002bb0:	0f9b      	lsrs	r3, r3, #30
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	7c20      	ldrb	r0, [r4, #16]
 8002bb8:	f002 fd83 	bl	80056c2 <USBPD_PRL_SetHeader>
 8002bbc:	6860      	ldr	r0, [r4, #4]
 8002bbe:	6801      	ldr	r1, [r0, #0]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	6002      	str	r2, [r0, #0]
 8002bc6:	6860      	ldr	r0, [r4, #4]
 8002bc8:	6801      	ldr	r1, [r0, #0]
 8002bca:	2203      	movs	r2, #3
 8002bcc:	4391      	bics	r1, r2
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	7912      	ldrb	r2, [r2, #4]
 8002bd2:	0792      	lsls	r2, r2, #30
 8002bd4:	0f92      	lsrs	r2, r2, #30
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	6002      	str	r2, [r0, #0]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	7c20      	ldrb	r0, [r4, #16]
 8002bde:	f002 fde1 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002be2:	7c20      	ldrb	r0, [r4, #16]
 8002be4:	f003 f84a 	bl	8005c7c <USBPD_PRL_Reset>
 8002be8:	2002      	movs	r0, #2
 8002bea:	7460      	strb	r0, [r4, #17]
 8002bec:	7ca0      	ldrb	r0, [r4, #18]
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d00a      	beq.n	8002c08 <USBPD_PE_StateMachine_SRC+0x7c>
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	74a0      	strb	r0, [r4, #18]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	9000      	str	r0, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	7c21      	ldrb	r1, [r4, #16]
 8002c00:	2004      	movs	r0, #4
 8002c02:	4eca      	ldr	r6, [pc, #808]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002c04:	6836      	ldr	r6, [r6, #0]
 8002c06:	47b0      	blx	r6
 8002c08:	6960      	ldr	r0, [r4, #20]
 8002c0a:	0341      	lsls	r1, r0, #13
 8002c0c:	0fc9      	lsrs	r1, r1, #31
 8002c0e:	d006      	beq.n	8002c1e <USBPD_PE_StateMachine_SRC+0x92>
 8002c10:	49c7      	ldr	r1, [pc, #796]	; (8002f30 <__iar_annotation$$branch+0x70>)
 8002c12:	4001      	ands	r1, r0
 8002c14:	6161      	str	r1, [r4, #20]
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	7c20      	ldrb	r0, [r4, #16]
 8002c1a:	f7fd fc31 	bl	8000480 <USBPD_PE_Notification>
 8002c1e:	0020      	movs	r0, r4
 8002c20:	f7fd fe62 	bl	80008e8 <PE_Get_RxEvent>
 8002c24:	4669      	mov	r1, sp
 8002c26:	7308      	strb	r0, [r1, #12]
 8002c28:	4668      	mov	r0, sp
 8002c2a:	7b00      	ldrb	r0, [r0, #12]
 8002c2c:	2803      	cmp	r0, #3
 8002c2e:	d105      	bne.n	8002c3c <USBPD_PE_StateMachine_SRC+0xb0>
 8002c30:	2001      	movs	r0, #1
 8002c32:	b007      	add	sp, #28
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000053c 	.word	0x2000053c
 8002c3c:	4668      	mov	r0, sp
 8002c3e:	7345      	strb	r5, [r0, #13]
 8002c40:	6860      	ldr	r0, [r4, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	04c1      	lsls	r1, r0, #19
 8002c46:	0fc9      	lsrs	r1, r1, #31
 8002c48:	d100      	bne.n	8002c4c <USBPD_PE_StateMachine_SRC+0xc0>
 8002c4a:	e13b      	b.n	8002ec4 <__iar_annotation$$branch+0x4>
 8002c4c:	6960      	ldr	r0, [r4, #20]
 8002c4e:	0381      	lsls	r1, r0, #14
 8002c50:	0fc9      	lsrs	r1, r1, #31
 8002c52:	d100      	bne.n	8002c56 <USBPD_PE_StateMachine_SRC+0xca>
 8002c54:	e144      	b.n	8002ee0 <__iar_annotation$$branch+0x20>
 8002c56:	4668      	mov	r0, sp
 8002c58:	7b40      	ldrb	r0, [r0, #13]
 8002c5a:	f002 fd9b 	bl	8005794 <USBPD_PRL_FastRoleSwapSignalling>
 8002c5e:	20a6      	movs	r0, #166	; 0xa6
 8002c60:	7460      	strb	r0, [r4, #17]
 8002c62:	2109      	movs	r1, #9
 8002c64:	7721      	strb	r1, [r4, #28]
 8002c66:	2100      	movs	r1, #0
 8002c68:	2232      	movs	r2, #50	; 0x32
 8002c6a:	54a1      	strb	r1, [r4, r2]
 8002c6c:	6961      	ldr	r1, [r4, #20]
 8002c6e:	4ab1      	ldr	r2, [pc, #708]	; (8002f34 <__iar_annotation$$branch+0x74>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	6162      	str	r2, [r4, #20]
 8002c74:	49b0      	ldr	r1, [pc, #704]	; (8002f38 <__iar_annotation$$branch+0x78>)
 8002c76:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002c78:	7ca1      	ldrb	r1, [r4, #18]
 8002c7a:	29a6      	cmp	r1, #166	; 0xa6
 8002c7c:	d000      	beq.n	8002c80 <USBPD_PE_StateMachine_SRC+0xf4>
 8002c7e:	e125      	b.n	8002ecc <__iar_annotation$$branch+0xc>
 8002c80:	2502      	movs	r5, #2
 8002c82:	4668      	mov	r0, sp
 8002c84:	7b00      	ldrb	r0, [r0, #12]
 8002c86:	2811      	cmp	r0, #17
 8002c88:	d11f      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c8a:	6860      	ldr	r0, [r4, #4]
 8002c8c:	6800      	ldr	r0, [r0, #0]
 8002c8e:	0701      	lsls	r1, r0, #28
 8002c90:	0fc9      	lsrs	r1, r1, #31
 8002c92:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8002c94:	0680      	lsls	r0, r0, #26
 8002c96:	0fc2      	lsrs	r2, r0, #31
 8002c98:	4291      	cmp	r1, r2
 8002c9a:	d116      	bne.n	8002cca <USBPD_PE_StateMachine_SRC+0x13e>
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	4669      	mov	r1, sp
 8002ca0:	7308      	strb	r0, [r1, #12]
 8002ca2:	0020      	movs	r0, r4
 8002ca4:	f7fd fe57 	bl	8000956 <PE_Clear_RxEvent>
 8002ca8:	2092      	movs	r0, #146	; 0x92
 8002caa:	7460      	strb	r0, [r4, #17]
 8002cac:	7ca0      	ldrb	r0, [r4, #18]
 8002cae:	2892      	cmp	r0, #146	; 0x92
 8002cb0:	d100      	bne.n	8002cb4 <USBPD_PE_StateMachine_SRC+0x128>
 8002cb2:	e155      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002cb4:	2092      	movs	r0, #146	; 0x92
 8002cb6:	74a0      	strb	r0, [r4, #18]
 8002cb8:	2000      	movs	r0, #0
 8002cba:	9000      	str	r0, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2292      	movs	r2, #146	; 0x92
 8002cc0:	7c21      	ldrb	r1, [r4, #16]
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	4e99      	ldr	r6, [pc, #612]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002cc6:	6836      	ldr	r6, [r6, #0]
 8002cc8:	47b0      	blx	r6
 8002cca:	7c60      	ldrb	r0, [r4, #17]
 8002ccc:	499b      	ldr	r1, [pc, #620]	; (8002f3c <__iar_annotation$$branch+0x7c>)
 8002cce:	1866      	adds	r6, r4, r1
 8002cd0:	4f9b      	ldr	r7, [pc, #620]	; (8002f40 <__iar_annotation$$branch+0x80>)
 8002cd2:	499c      	ldr	r1, [pc, #624]	; (8002f44 <__iar_annotation$$branch+0x84>)
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <USBPD_PE_StateMachine_SRC+0x14e>
 8002cd8:	e136      	b.n	8002f48 <__iar_annotation$$branch+0x88>
 8002cda:	1e42      	subs	r2, r0, #1
 8002cdc:	d067      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002cde:	1e52      	subs	r2, r2, #1
 8002ce0:	d100      	bne.n	8002ce4 <USBPD_PE_StateMachine_SRC+0x158>
 8002ce2:	e149      	b.n	8002f78 <__iar_annotation$$branch+0xb8>
 8002ce4:	1e52      	subs	r2, r2, #1
 8002ce6:	2a01      	cmp	r2, #1
 8002ce8:	d801      	bhi.n	8002cee <__iar_annotation$$branch+0x4>

08002cea <__iar_annotation$$branch>:
 8002cea:	f000 fd90 	bl	800380e <__iar_annotation$$branch+0x94e>
 8002cee:	1e92      	subs	r2, r2, #2
 8002cf0:	d100      	bne.n	8002cf4 <__iar_annotation$$branch+0xa>
 8002cf2:	e189      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002cf4:	1e52      	subs	r2, r2, #1
 8002cf6:	d100      	bne.n	8002cfa <__iar_annotation$$branch+0x10>
 8002cf8:	e18b      	b.n	8003012 <__iar_annotation$$branch+0x152>
 8002cfa:	1e52      	subs	r2, r2, #1
 8002cfc:	d100      	bne.n	8002d00 <__iar_annotation$$branch+0x16>
 8002cfe:	e190      	b.n	8003022 <__iar_annotation$$branch+0x162>
 8002d00:	1e52      	subs	r2, r2, #1
 8002d02:	d100      	bne.n	8002d06 <__iar_annotation$$branch+0x1c>
 8002d04:	e1e1      	b.n	80030ca <__iar_annotation$$branch+0x20a>
 8002d06:	1e52      	subs	r2, r2, #1
 8002d08:	d100      	bne.n	8002d0c <__iar_annotation$$branch+0x22>
 8002d0a:	e223      	b.n	8003154 <__iar_annotation$$branch+0x294>
 8002d0c:	1ed2      	subs	r2, r2, #3
 8002d0e:	d100      	bne.n	8002d12 <__iar_annotation$$branch+0x28>
 8002d10:	e276      	b.n	8003200 <__iar_annotation$$branch+0x340>
 8002d12:	1e52      	subs	r2, r2, #1
 8002d14:	d100      	bne.n	8002d18 <__iar_annotation$$branch+0x2e>
 8002d16:	e286      	b.n	8003226 <__iar_annotation$$branch+0x366>
 8002d18:	1e52      	subs	r2, r2, #1
 8002d1a:	d100      	bne.n	8002d1e <__iar_annotation$$branch+0x34>
 8002d1c:	e11d      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002d1e:	1e52      	subs	r2, r2, #1
 8002d20:	d100      	bne.n	8002d24 <__iar_annotation$$branch+0x3a>
 8002d22:	e30d      	b.n	8003340 <__iar_annotation$$branch+0x480>
 8002d24:	1e52      	subs	r2, r2, #1
 8002d26:	d100      	bne.n	8002d2a <__iar_annotation$$branch+0x40>
 8002d28:	e2c6      	b.n	80032b8 <__iar_annotation$$branch+0x3f8>
 8002d2a:	1e52      	subs	r2, r2, #1
 8002d2c:	d100      	bne.n	8002d30 <__iar_annotation$$branch+0x46>
 8002d2e:	e2cc      	b.n	80032ca <__iar_annotation$$branch+0x40a>
 8002d30:	1e52      	subs	r2, r2, #1
 8002d32:	d100      	bne.n	8002d36 <__iar_annotation$$branch+0x4c>
 8002d34:	e2d8      	b.n	80032e8 <__iar_annotation$$branch+0x428>
 8002d36:	1e52      	subs	r2, r2, #1
 8002d38:	d100      	bne.n	8002d3c <__iar_annotation$$branch+0x52>
 8002d3a:	e389      	b.n	8003450 <__iar_annotation$$branch+0x590>
 8002d3c:	1e52      	subs	r2, r2, #1
 8002d3e:	d100      	bne.n	8002d42 <__iar_annotation$$branch+0x58>
 8002d40:	e32b      	b.n	800339a <__iar_annotation$$branch+0x4da>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	d100      	bne.n	8002d48 <__iar_annotation$$branch+0x5e>
 8002d46:	e332      	b.n	80033ae <__iar_annotation$$branch+0x4ee>
 8002d48:	1e52      	subs	r2, r2, #1
 8002d4a:	d100      	bne.n	8002d4e <__iar_annotation$$branch+0x64>
 8002d4c:	e1d5      	b.n	80030fa <__iar_annotation$$branch+0x23a>
 8002d4e:	1e52      	subs	r2, r2, #1
 8002d50:	d100      	bne.n	8002d54 <__iar_annotation$$branch+0x6a>
 8002d52:	e34c      	b.n	80033ee <__iar_annotation$$branch+0x52e>
 8002d54:	1e52      	subs	r2, r2, #1
 8002d56:	2a01      	cmp	r2, #1
 8002d58:	d929      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002d5a:	1e92      	subs	r2, r2, #2
 8002d5c:	d100      	bne.n	8002d60 <__iar_annotation$$branch+0x76>
 8002d5e:	e3a3      	b.n	80034a8 <__iar_annotation$$branch+0x5e8>
 8002d60:	1e52      	subs	r2, r2, #1
 8002d62:	d100      	bne.n	8002d66 <__iar_annotation$$branch+0x7c>
 8002d64:	e3b0      	b.n	80034c8 <__iar_annotation$$branch+0x608>
 8002d66:	1e92      	subs	r2, r2, #2
 8002d68:	d021      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002d6a:	1e52      	subs	r2, r2, #1
 8002d6c:	d101      	bne.n	8002d72 <__iar_annotation$$branch+0x4>

08002d6e <__iar_annotation$$branch>:
 8002d6e:	f000 fc88 	bl	8003682 <__iar_annotation$$branch+0x7c2>
 8002d72:	1e52      	subs	r2, r2, #1
 8002d74:	d101      	bne.n	8002d7a <__iar_annotation$$branch+0x4>

08002d76 <__iar_annotation$$branch>:
 8002d76:	f000 fc9a 	bl	80036ae <__iar_annotation$$branch+0x7ee>
 8002d7a:	1e52      	subs	r2, r2, #1
 8002d7c:	d101      	bne.n	8002d82 <__iar_annotation$$branch+0x4>

08002d7e <__iar_annotation$$branch>:
 8002d7e:	f000 fce6 	bl	800374e <__iar_annotation$$branch+0x88e>
 8002d82:	1e52      	subs	r2, r2, #1
 8002d84:	d101      	bne.n	8002d8a <__iar_annotation$$branch+0x4>

08002d86 <__iar_annotation$$branch>:
 8002d86:	f000 fd0f 	bl	80037a8 <__iar_annotation$$branch+0x8e8>
 8002d8a:	1e52      	subs	r2, r2, #1
 8002d8c:	d101      	bne.n	8002d92 <__iar_annotation$$branch+0x4>

08002d8e <__iar_annotation$$branch>:
 8002d8e:	f000 fbe5 	bl	800355c <__iar_annotation$$branch+0x69c>
 8002d92:	1e92      	subs	r2, r2, #2
 8002d94:	d101      	bne.n	8002d9a <__iar_annotation$$branch+0x4>

08002d96 <__iar_annotation$$branch>:
 8002d96:	f000 fc0a 	bl	80035ae <__iar_annotation$$branch+0x6ee>
 8002d9a:	1e52      	subs	r2, r2, #1
 8002d9c:	d101      	bne.n	8002da2 <__iar_annotation$$branch+0x4>

08002d9e <__iar_annotation$$branch>:
 8002d9e:	f000 fc2e 	bl	80035fe <__iar_annotation$$branch+0x73e>
 8002da2:	1e52      	subs	r2, r2, #1
 8002da4:	d101      	bne.n	8002daa <__iar_annotation$$branch+0x4>

08002da6 <__iar_annotation$$branch>:
 8002da6:	f000 fc49 	bl	800363c <__iar_annotation$$branch+0x77c>
 8002daa:	1e52      	subs	r2, r2, #1
 8002dac:	2a02      	cmp	r2, #2
 8002dae:	d801      	bhi.n	8002db4 <__iar_annotation$$branch+0x4>

08002db0 <__iar_annotation$$branch>:
 8002db0:	f000 fe1b 	bl	80039ea <__iar_annotation$$branch+0x106>
 8002db4:	1ed2      	subs	r2, r2, #3
 8002db6:	d101      	bne.n	8002dbc <__iar_annotation$$branch+0x4>

08002db8 <__iar_annotation$$branch>:
 8002db8:	f000 fbf4 	bl	80035a4 <__iar_annotation$$branch+0x6e4>
 8002dbc:	1e52      	subs	r2, r2, #1
 8002dbe:	d101      	bne.n	8002dc4 <__iar_annotation$$branch+0x4>

08002dc0 <__iar_annotation$$branch>:
 8002dc0:	f000 fd96 	bl	80038f0 <__iar_annotation$$branch+0xc>
 8002dc4:	1e52      	subs	r2, r2, #1
 8002dc6:	d0f2      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dc8:	1e52      	subs	r2, r2, #1
 8002dca:	d101      	bne.n	8002dd0 <__iar_annotation$$branch+0x4>

08002dcc <__iar_annotation$$branch>:
 8002dcc:	f000 fda1 	bl	8003912 <__iar_annotation$$branch+0x2e>
 8002dd0:	1e52      	subs	r2, r2, #1
 8002dd2:	d101      	bne.n	8002dd8 <__iar_annotation$$branch+0x4>

08002dd4 <__iar_annotation$$branch>:
 8002dd4:	f000 fdcf 	bl	8003976 <__iar_annotation$$branch+0x92>
 8002dd8:	1e52      	subs	r2, r2, #1
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d9e7      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dde:	1e92      	subs	r2, r2, #2
 8002de0:	d001      	beq.n	8002de6 <__iar_annotation$$branch+0x12>
 8002de2:	1e92      	subs	r2, r2, #2
 8002de4:	2a05      	cmp	r2, #5
 8002de6:	d801      	bhi.n	8002dec <__iar_annotation$$branch+0x4>

08002de8 <__iar_annotation$$branch>:
 8002de8:	f000 fdfb 	bl	80039e2 <__iar_annotation$$branch+0xfe>
 8002dec:	1f92      	subs	r2, r2, #6
 8002dee:	d101      	bne.n	8002df4 <__iar_annotation$$branch+0x4>

08002df0 <__iar_annotation$$branch>:
 8002df0:	f000 fdd2 	bl	8003998 <__iar_annotation$$branch+0xb4>
 8002df4:	1e52      	subs	r2, r2, #1
 8002df6:	2a03      	cmp	r2, #3
 8002df8:	d9d9      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfa:	3a11      	subs	r2, #17
 8002dfc:	d0d7      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	d100      	bne.n	8002e04 <__iar_annotation$$branch+0x14>
 8002e02:	e150      	b.n	80030a6 <__iar_annotation$$branch+0x1e6>
 8002e04:	3a0f      	subs	r2, #15
 8002e06:	d101      	bne.n	8002e0c <__iar_annotation$$branch+0x4>

08002e08 <__iar_annotation$$branch>:
 8002e08:	f000 fce9 	bl	80037de <__iar_annotation$$branch+0x91e>
 8002e0c:	1fd2      	subs	r2, r2, #7
 8002e0e:	2a01      	cmp	r2, #1
 8002e10:	d9cd      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e12:	1f52      	subs	r2, r2, #5
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d9ca      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e18:	3a0d      	subs	r2, #13
 8002e1a:	d0c8      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e1c:	3a12      	subs	r2, #18
 8002e1e:	d101      	bne.n	8002e24 <__iar_annotation$$branch+0x4>

08002e20 <__iar_annotation$$branch>:
 8002e20:	f000 fe18 	bl	8003a54 <__iar_annotation$$branch+0x62>
 8002e24:	3a0c      	subs	r2, #12
 8002e26:	d100      	bne.n	8002e2a <__iar_annotation$$branch+0xa>
 8002e28:	e09a      	b.n	8002f60 <__iar_annotation$$branch+0xa0>
 8002e2a:	1e52      	subs	r2, r2, #1
 8002e2c:	2a02      	cmp	r2, #2
 8002e2e:	d9be      	bls.n	8002dae <__iar_annotation$$branch+0x8>
 8002e30:	1ed2      	subs	r2, r2, #3
 8002e32:	d100      	bne.n	8002e36 <__iar_annotation$$branch+0x16>
 8002e34:	e213      	b.n	800325e <__iar_annotation$$branch+0x39e>
 8002e36:	1e52      	subs	r2, r2, #1
 8002e38:	d100      	bne.n	8002e3c <__iar_annotation$$branch+0x1c>
 8002e3a:	e229      	b.n	8003290 <__iar_annotation$$branch+0x3d0>
 8002e3c:	1e92      	subs	r2, r2, #2
 8002e3e:	d0b6      	beq.n	8002dae <__iar_annotation$$branch+0x8>
 8002e40:	1e52      	subs	r2, r2, #1
 8002e42:	d100      	bne.n	8002e46 <__iar_annotation$$branch+0x26>
 8002e44:	e0e0      	b.n	8003008 <__iar_annotation$$branch+0x148>
 8002e46:	1e92      	subs	r2, r2, #2
 8002e48:	2a08      	cmp	r2, #8
 8002e4a:	d801      	bhi.n	8002e50 <__iar_annotation$$branch+0x4>

08002e4c <__iar_annotation$$branch>:
 8002e4c:	f000 fdd3 	bl	80039f6 <__iar_annotation$$branch+0x4>
 8002e50:	3a0a      	subs	r2, #10
 8002e52:	d101      	bne.n	8002e58 <__iar_annotation$$branch+0x4>

08002e54 <__iar_annotation$$branch>:
 8002e54:	f000 fde2 	bl	8003a1c <__iar_annotation$$branch+0x2a>
 8002e58:	a903      	add	r1, sp, #12
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	f001 fb32 	bl	80044c4 <PE_StateMachine_VDM>
 8002e60:	0005      	movs	r5, r0
 8002e62:	7c62      	ldrb	r2, [r4, #17]
 8002e64:	4e31      	ldr	r6, [pc, #196]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002e66:	7ca0      	ldrb	r0, [r4, #18]
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d007      	beq.n	8002e7c <__iar_annotation$$branch+0x28>
 8002e6c:	74a2      	strb	r2, [r4, #18]
 8002e6e:	2000      	movs	r0, #0
 8002e70:	9000      	str	r0, [sp, #0]
 8002e72:	2300      	movs	r3, #0
 8002e74:	7c21      	ldrb	r1, [r4, #16]
 8002e76:	2004      	movs	r0, #4
 8002e78:	6837      	ldr	r7, [r6, #0]
 8002e7a:	47b8      	blx	r7
 8002e7c:	4668      	mov	r0, sp
 8002e7e:	7b00      	ldrb	r0, [r0, #12]
 8002e80:	2814      	cmp	r0, #20
 8002e82:	d101      	bne.n	8002e88 <__iar_annotation$$branch+0x4>

08002e84 <__iar_annotation$$branch>:
 8002e84:	f000 fdec 	bl	8003a60 <__iar_annotation$$branch+0x6e>
 8002e88:	0020      	movs	r0, r4
 8002e8a:	f7fd fdab 	bl	80009e4 <PE_Check_AMSConflict>
 8002e8e:	2815      	cmp	r0, #21
 8002e90:	d109      	bne.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e92:	4668      	mov	r0, sp
 8002e94:	7b00      	ldrb	r0, [r0, #12]
 8002e96:	2814      	cmp	r0, #20
 8002e98:	d005      	beq.n	8002ea6 <__iar_annotation$$branch+0x22>
 8002e9a:	2014      	movs	r0, #20
 8002e9c:	4669      	mov	r1, sp
 8002e9e:	7308      	strb	r0, [r1, #12]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f7fd fd58 	bl	8000956 <PE_Clear_RxEvent>
 8002ea6:	7c62      	ldrb	r2, [r4, #17]
 8002ea8:	7ca0      	ldrb	r0, [r4, #18]
 8002eaa:	4290      	cmp	r0, r2
 8002eac:	d007      	beq.n	8002ebe <__iar_annotation$$branch+0x3a>
 8002eae:	74a2      	strb	r2, [r4, #18]
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	9000      	str	r0, [sp, #0]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	7c21      	ldrb	r1, [r4, #16]
 8002eb8:	2004      	movs	r0, #4
 8002eba:	6835      	ldr	r5, [r6, #0]
 8002ebc:	47a8      	blx	r5
 8002ebe:	2500      	movs	r5, #0

08002ec0 <__iar_annotation$$branch>:
 8002ec0:	f000 fded 	bl	8003a9e <__iar_annotation$$branch+0xac>
 8002ec4:	2500      	movs	r5, #0
 8002ec6:	43ed      	mvns	r5, r5
 8002ec8:	0028      	movs	r0, r5
 8002eca:	e6b2      	b.n	8002c32 <USBPD_PE_StateMachine_SRC+0xa6>
 8002ecc:	74a0      	strb	r0, [r4, #18]
 8002ece:	2000      	movs	r0, #0
 8002ed0:	9000      	str	r0, [sp, #0]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	22a6      	movs	r2, #166	; 0xa6
 8002ed6:	7c21      	ldrb	r1, [r4, #16]
 8002ed8:	2004      	movs	r0, #4
 8002eda:	4d14      	ldr	r5, [pc, #80]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002edc:	682d      	ldr	r5, [r5, #0]
 8002ede:	47a8      	blx	r5
 8002ee0:	2502      	movs	r5, #2
 8002ee2:	2032      	movs	r0, #50	; 0x32
 8002ee4:	5c20      	ldrb	r0, [r4, r0]
 8002ee6:	280f      	cmp	r0, #15
 8002ee8:	d001      	beq.n	8002eee <__iar_annotation$$branch+0x2e>
 8002eea:	2814      	cmp	r0, #20
 8002eec:	d11c      	bne.n	8002f28 <__iar_annotation$$branch+0x68>
 8002eee:	4668      	mov	r0, sp
 8002ef0:	7b00      	ldrb	r0, [r0, #12]
 8002ef2:	2814      	cmp	r0, #20
 8002ef4:	d005      	beq.n	8002f02 <__iar_annotation$$branch+0x42>
 8002ef6:	2014      	movs	r0, #20
 8002ef8:	4669      	mov	r1, sp
 8002efa:	7308      	strb	r0, [r1, #12]
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7fd fd2a 	bl	8000956 <PE_Clear_RxEvent>
 8002f02:	2032      	movs	r0, #50	; 0x32
 8002f04:	5c22      	ldrb	r2, [r4, r0]
 8002f06:	7462      	strb	r2, [r4, #17]
 8002f08:	2000      	movs	r0, #0
 8002f0a:	2332      	movs	r3, #50	; 0x32
 8002f0c:	54e0      	strb	r0, [r4, r3]
 8002f0e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002f10:	7ca0      	ldrb	r0, [r4, #18]
 8002f12:	4290      	cmp	r0, r2
 8002f14:	d008      	beq.n	8002f28 <__iar_annotation$$branch+0x68>
 8002f16:	74a2      	strb	r2, [r4, #18]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	9000      	str	r0, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	7c21      	ldrb	r1, [r4, #16]
 8002f20:	2004      	movs	r0, #4
 8002f22:	4e02      	ldr	r6, [pc, #8]	; (8002f2c <__iar_annotation$$branch+0x6c>)
 8002f24:	6836      	ldr	r6, [r6, #0]
 8002f26:	47b0      	blx	r6
 8002f28:	e6ab      	b.n	8002c82 <USBPD_PE_StateMachine_SRC+0xf6>
 8002f2a:	bf00      	nop
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	00008011 	.word	0x00008011
 8002f3c:	0000025e 	.word	0x0000025e
 8002f40:	0000801b 	.word	0x0000801b
 8002f44:	0000f01f 	.word	0x0000f01f
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	4391      	bics	r1, r2
 8002f50:	6001      	str	r1, [r0, #0]
 8002f52:	215f      	movs	r1, #95	; 0x5f
 8002f54:	7c20      	ldrb	r0, [r4, #16]
 8002f56:	f7fd fa93 	bl	8000480 <USBPD_PE_Notification>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	43ed      	mvns	r5, r5
 8002f5e:	e780      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002f60:	6860      	ldr	r0, [r4, #4]
 8002f62:	6801      	ldr	r1, [r0, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	4391      	bics	r1, r2
 8002f68:	6001      	str	r1, [r0, #0]
 8002f6a:	68a0      	ldr	r0, [r4, #8]
 8002f6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002f6e:	2900      	cmp	r1, #0
 8002f70:	d0f3      	beq.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f72:	7c20      	ldrb	r0, [r4, #16]
 8002f74:	4788      	blx	r1
 8002f76:	e7f0      	b.n	8002f5a <__iar_annotation$$branch+0x9a>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	6860      	ldr	r0, [r4, #4]
 8002f7c:	6800      	ldr	r0, [r0, #0]
 8002f7e:	0bc0      	lsrs	r0, r0, #15
 8002f80:	4038      	ands	r0, r7
 8002f82:	d002      	beq.n	8002f8a <__iar_annotation$$branch+0xca>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	e000      	b.n	8002f8c <__iar_annotation$$branch+0xcc>
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4668      	mov	r0, sp
 8002f8e:	7b40      	ldrb	r0, [r0, #13]
 8002f90:	f002 fc08 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8002f94:	6860      	ldr	r0, [r4, #4]
 8002f96:	6801      	ldr	r1, [r0, #0]
 8002f98:	0b0a      	lsrs	r2, r1, #12
 8002f9a:	403a      	ands	r2, r7
 8002f9c:	d02f      	beq.n	8002ffe <__iar_annotation$$branch+0x13e>
 8002f9e:	078a      	lsls	r2, r1, #30
 8002fa0:	0f92      	lsrs	r2, r2, #30
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d101      	bne.n	8002faa <__iar_annotation$$branch+0xea>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	e000      	b.n	8002fac <__iar_annotation$$branch+0xec>
 8002faa:	2220      	movs	r2, #32
 8002fac:	2320      	movs	r3, #32
 8002fae:	4399      	bics	r1, r3
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	6002      	str	r2, [r0, #0]
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	70f0      	strb	r0, [r6, #3]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	0020      	movs	r0, r4
 8002fbc:	f7fe f9f3 	bl	80013a6 <PE_SetPowerNegotiation>
 8002fc0:	6860      	ldr	r0, [r4, #4]
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	0901      	lsrs	r1, r0, #4
 8002fc6:	4039      	ands	r1, r7
 8002fc8:	d005      	beq.n	8002fd6 <__iar_annotation$$branch+0x116>
 8002fca:	48ae      	ldr	r0, [pc, #696]	; (8003284 <__iar_annotation$$branch+0x3c4>)
 8002fcc:	83e0      	strh	r0, [r4, #30]
 8002fce:	2514      	movs	r5, #20
 8002fd0:	2006      	movs	r0, #6
 8002fd2:	7460      	strb	r0, [r4, #17]
 8002fd4:	e745      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8002fd6:	0bc0      	lsrs	r0, r0, #15
 8002fd8:	4007      	ands	r7, r0
 8002fda:	d00a      	beq.n	8002ff2 <__iar_annotation$$branch+0x132>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	7800      	ldrb	r0, [r0, #0]
 8002fe0:	0780      	lsls	r0, r0, #30
 8002fe2:	d400      	bmi.n	8002fe6 <__iar_annotation$$branch+0x126>
 8002fe4:	e087      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fe6:	7930      	ldrb	r0, [r6, #4]
 8002fe8:	2814      	cmp	r0, #20
 8002fea:	d300      	bcc.n	8002fee <__iar_annotation$$branch+0x12e>
 8002fec:	e083      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002fee:	68e1      	ldr	r1, [r4, #12]
 8002ff0:	2900      	cmp	r1, #0
 8002ff2:	d100      	bne.n	8002ff6 <__iar_annotation$$branch+0x136>
 8002ff4:	e07f      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 8002ff6:	1c40      	adds	r0, r0, #1
 8002ff8:	7130      	strb	r0, [r6, #4]
 8002ffa:	2005      	movs	r0, #5
 8002ffc:	e7e9      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8002ffe:	2121      	movs	r1, #33	; 0x21
 8003000:	7c20      	ldrb	r0, [r4, #16]
 8003002:	f7fd fa3d 	bl	8000480 <USBPD_PE_Notification>
 8003006:	e04c      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003008:	a903      	add	r1, sp, #12
 800300a:	0020      	movs	r0, r4
 800300c:	f000 fd8c 	bl	8003b28 <PE_StateMachine_VDMCable>
 8003010:	e726      	b.n	8002e60 <__iar_annotation$$branch+0xc>
 8003012:	8be0      	ldrh	r0, [r4, #30]
 8003014:	03a9      	lsls	r1, r5, #14
 8003016:	4288      	cmp	r0, r1
 8003018:	d102      	bne.n	8003020 <__iar_annotation$$branch+0x160>
 800301a:	2007      	movs	r0, #7
 800301c:	7460      	strb	r0, [r4, #17]
 800301e:	2500      	movs	r5, #0
 8003020:	e71f      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003022:	6960      	ldr	r0, [r4, #20]
 8003024:	0740      	lsls	r0, r0, #29
 8003026:	0fc1      	lsrs	r1, r0, #31
 8003028:	0020      	movs	r0, r4
 800302a:	f000 fd45 	bl	8003ab8 <PE_Send_SRCCapabilities>
 800302e:	2805      	cmp	r0, #5
 8003030:	d002      	beq.n	8003038 <__iar_annotation$$branch+0x178>
 8003032:	2809      	cmp	r0, #9
 8003034:	d0f4      	beq.n	8003020 <__iar_annotation$$branch+0x160>
 8003036:	e011      	b.n	800305c <__iar_annotation$$branch+0x19c>
 8003038:	2001      	movs	r0, #1
 800303a:	7720      	strb	r0, [r4, #28]
 800303c:	6960      	ldr	r0, [r4, #20]
 800303e:	2104      	movs	r1, #4
 8003040:	4301      	orrs	r1, r0
 8003042:	6161      	str	r1, [r4, #20]
 8003044:	2000      	movs	r0, #0
 8003046:	70f0      	strb	r0, [r6, #3]
 8003048:	70b0      	strb	r0, [r6, #2]
 800304a:	83e7      	strh	r7, [r4, #30]
 800304c:	251b      	movs	r5, #27
 800304e:	2016      	movs	r0, #22
 8003050:	7460      	strb	r0, [r4, #17]
 8003052:	210f      	movs	r1, #15
 8003054:	7c20      	ldrb	r0, [r4, #16]
 8003056:	f7fd fa13 	bl	8000480 <USBPD_PE_Notification>
 800305a:	e702      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800305c:	6960      	ldr	r0, [r4, #20]
 800305e:	0741      	lsls	r1, r0, #29
 8003060:	0fc9      	lsrs	r1, r1, #31
 8003062:	d10f      	bne.n	8003084 <__iar_annotation$$branch+0x1c4>
 8003064:	78f0      	ldrb	r0, [r6, #3]
 8003066:	2833      	cmp	r0, #51	; 0x33
 8003068:	d217      	bcs.n	800309a <__iar_annotation$$branch+0x1da>
 800306a:	4887      	ldr	r0, [pc, #540]	; (8003288 <__iar_annotation$$branch+0x3c8>)
 800306c:	83e0      	strh	r0, [r4, #30]
 800306e:	2596      	movs	r5, #150	; 0x96
 8003070:	2008      	movs	r0, #8
 8003072:	7460      	strb	r0, [r4, #17]
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <__iar_annotation$$branch+0x3cc>)
 8003076:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003078:	4201      	tst	r1, r0
 800307a:	d002      	beq.n	8003082 <__iar_annotation$$branch+0x1c2>
 800307c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800307e:	0005      	movs	r5, r0
 8003080:	400d      	ands	r5, r1
 8003082:	e6ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003084:	6860      	ldr	r0, [r4, #4]
 8003086:	7800      	ldrb	r0, [r0, #0]
 8003088:	0780      	lsls	r0, r0, #30
 800308a:	0f80      	lsrs	r0, r0, #30
 800308c:	2802      	cmp	r0, #2
 800308e:	d102      	bne.n	8003096 <__iar_annotation$$branch+0x1d6>
 8003090:	7c20      	ldrb	r0, [r4, #16]
 8003092:	f002 fb68 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003096:	2011      	movs	r0, #17
 8003098:	e7c0      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800309a:	2121      	movs	r1, #33	; 0x21
 800309c:	7c20      	ldrb	r0, [r4, #16]
 800309e:	f7fd f9ef 	bl	8000480 <USBPD_PE_Notification>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e795      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030a6:	2100      	movs	r1, #0
 80030a8:	0020      	movs	r0, r4
 80030aa:	f000 fd05 	bl	8003ab8 <PE_Send_SRCCapabilities>
 80030ae:	2805      	cmp	r0, #5
 80030b0:	d107      	bne.n	80030c2 <__iar_annotation$$branch+0x202>
 80030b2:	2104      	movs	r1, #4
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7fe f976 	bl	80013a6 <PE_SetPowerNegotiation>
 80030ba:	2001      	movs	r0, #1
 80030bc:	7720      	strb	r0, [r4, #28]
 80030be:	83e7      	strh	r7, [r4, #30]
 80030c0:	e7c5      	b.n	800304e <__iar_annotation$$branch+0x18e>
 80030c2:	2000      	movs	r0, #0
 80030c4:	7720      	strb	r0, [r4, #28]
 80030c6:	2011      	movs	r0, #17
 80030c8:	e783      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030ca:	03a8      	lsls	r0, r5, #14
 80030cc:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80030ce:	4281      	cmp	r1, r0
 80030d0:	d106      	bne.n	80030e0 <__iar_annotation$$branch+0x220>
 80030d2:	2100      	movs	r1, #0
 80030d4:	8461      	strh	r1, [r4, #34]	; 0x22
 80030d6:	7931      	ldrb	r1, [r6, #4]
 80030d8:	1c49      	adds	r1, r1, #1
 80030da:	7131      	strb	r1, [r6, #4]
 80030dc:	2105      	movs	r1, #5
 80030de:	7461      	strb	r1, [r4, #17]
 80030e0:	8be1      	ldrh	r1, [r4, #30]
 80030e2:	4281      	cmp	r1, r0
 80030e4:	d1cd      	bne.n	8003082 <__iar_annotation$$branch+0x1c2>
 80030e6:	6820      	ldr	r0, [r4, #0]
 80030e8:	6840      	ldr	r0, [r0, #4]
 80030ea:	0601      	lsls	r1, r0, #24
 80030ec:	0fc9      	lsrs	r1, r1, #31
 80030ee:	d002      	beq.n	80030f6 <__iar_annotation$$branch+0x236>
 80030f0:	78f0      	ldrb	r0, [r6, #3]
 80030f2:	1c40      	adds	r0, r0, #1
 80030f4:	70f0      	strb	r0, [r6, #3]
 80030f6:	2007      	movs	r0, #7
 80030f8:	e76b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2811      	cmp	r0, #17
 8003100:	d109      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003102:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003104:	0bc1      	lsrs	r1, r0, #15
 8003106:	d106      	bne.n	8003116 <__iar_annotation$$branch+0x256>
 8003108:	0b01      	lsrs	r1, r0, #12
 800310a:	0749      	lsls	r1, r1, #29
 800310c:	d100      	bne.n	8003110 <__iar_annotation$$branch+0x250>
 800310e:	e111      	b.n	8003334 <__iar_annotation$$branch+0x474>
 8003110:	06c0      	lsls	r0, r0, #27
 8003112:	0ec0      	lsrs	r0, r0, #27
 8003114:	2802      	cmp	r0, #2
 8003116:	d000      	beq.n	800311a <__iar_annotation$$branch+0x25a>
 8003118:	e10c      	b.n	8003334 <__iar_annotation$$branch+0x474>
 800311a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800311c:	7881      	ldrb	r1, [r0, #2]
 800311e:	78c2      	ldrb	r2, [r0, #3]
 8003120:	0212      	lsls	r2, r2, #8
 8003122:	1889      	adds	r1, r1, r2
 8003124:	7902      	ldrb	r2, [r0, #4]
 8003126:	0412      	lsls	r2, r2, #16
 8003128:	1889      	adds	r1, r1, r2
 800312a:	7940      	ldrb	r0, [r0, #5]
 800312c:	0600      	lsls	r0, r0, #24
 800312e:	1808      	adds	r0, r1, r0
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003134:	0600      	lsls	r0, r0, #24
 8003136:	0f81      	lsrs	r1, r0, #30
 8003138:	7c20      	ldrb	r0, [r4, #16]
 800313a:	f7fd fd5b 	bl	8000bf4 <PE_ExtRevisionInteroperability>
 800313e:	2304      	movs	r3, #4
 8003140:	466a      	mov	r2, sp
 8003142:	2106      	movs	r1, #6
 8003144:	7c20      	ldrb	r0, [r4, #16]
 8003146:	68a5      	ldr	r5, [r4, #8]
 8003148:	69ad      	ldr	r5, [r5, #24]
 800314a:	47a8      	blx	r5
 800314c:	2009      	movs	r0, #9
 800314e:	7460      	strb	r0, [r4, #17]
 8003150:	2500      	movs	r5, #0
 8003152:	e0e5      	b.n	8003320 <__iar_annotation$$branch+0x460>
 8003154:	2702      	movs	r7, #2
 8003156:	2507      	movs	r5, #7
 8003158:	a901      	add	r1, sp, #4
 800315a:	7c20      	ldrb	r0, [r4, #16]
 800315c:	68a2      	ldr	r2, [r4, #8]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	4790      	blx	r2
 8003162:	280a      	cmp	r0, #10
 8003164:	d010      	beq.n	8003188 <__iar_annotation$$branch+0x2c8>
 8003166:	280b      	cmp	r0, #11
 8003168:	d035      	beq.n	80031d6 <__iar_annotation$$branch+0x316>
 800316a:	280d      	cmp	r0, #13
 800316c:	6860      	ldr	r0, [r4, #4]
 800316e:	6800      	ldr	r0, [r0, #0]
 8003170:	d136      	bne.n	80031e0 <__iar_annotation$$branch+0x320>
 8003172:	0a00      	lsrs	r0, r0, #8
 8003174:	4005      	ands	r5, r0
 8003176:	2d03      	cmp	r5, #3
 8003178:	d101      	bne.n	800317e <__iar_annotation$$branch+0x2be>
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <__iar_annotation$$branch+0x2c0>
 800317e:	230e      	movs	r3, #14
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	220c      	movs	r2, #12
 8003186:	e035      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 8003188:	48a9      	ldr	r0, [pc, #676]	; (8003430 <__iar_annotation$$branch+0x570>)
 800318a:	83e0      	strh	r0, [r4, #30]
 800318c:	271e      	movs	r7, #30
 800318e:	6860      	ldr	r0, [r4, #4]
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	0a00      	lsrs	r0, r0, #8
 8003194:	4005      	ands	r5, r0
 8003196:	2d01      	cmp	r5, #1
 8003198:	d00b      	beq.n	80031b2 <__iar_annotation$$branch+0x2f2>
 800319a:	9801      	ldr	r0, [sp, #4]
 800319c:	2803      	cmp	r0, #3
 800319e:	d108      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	06c0      	lsls	r0, r0, #27
 80031a4:	0f80      	lsrs	r0, r0, #30
 80031a6:	2803      	cmp	r0, #3
 80031a8:	d103      	bne.n	80031b2 <__iar_annotation$$branch+0x2f2>
 80031aa:	2080      	movs	r0, #128	; 0x80
 80031ac:	0200      	lsls	r0, r0, #8
 80031ae:	83e0      	strh	r0, [r4, #30]
 80031b0:	2700      	movs	r7, #0
 80031b2:	2000      	movs	r0, #0
 80031b4:	9000      	str	r0, [sp, #0]
 80031b6:	230c      	movs	r3, #12
 80031b8:	2203      	movs	r2, #3
 80031ba:	2100      	movs	r1, #0
 80031bc:	0020      	movs	r0, r4
 80031be:	f7fe f9a7 	bl	8001510 <PE_Send_CtrlMessage>
 80031c2:	6960      	ldr	r0, [r4, #20]
 80031c4:	2118      	movs	r1, #24
 80031c6:	4388      	bics	r0, r1
 80031c8:	9901      	ldr	r1, [sp, #4]
 80031ca:	00c9      	lsls	r1, r1, #3
 80031cc:	2218      	movs	r2, #24
 80031ce:	400a      	ands	r2, r1
 80031d0:	4302      	orrs	r2, r0
 80031d2:	6162      	str	r2, [r4, #20]
 80031d4:	e012      	b.n	80031fc <__iar_annotation$$branch+0x33c>
 80031d6:	2000      	movs	r0, #0
 80031d8:	9000      	str	r0, [sp, #0]
 80031da:	230c      	movs	r3, #12
 80031dc:	2202      	movs	r2, #2
 80031de:	e009      	b.n	80031f4 <__iar_annotation$$branch+0x334>
 80031e0:	0a00      	lsrs	r0, r0, #8
 80031e2:	4005      	ands	r5, r0
 80031e4:	2d03      	cmp	r5, #3
 80031e6:	d101      	bne.n	80031ec <__iar_annotation$$branch+0x32c>
 80031e8:	2303      	movs	r3, #3
 80031ea:	e000      	b.n	80031ee <__iar_annotation$$branch+0x32e>
 80031ec:	230e      	movs	r3, #14
 80031ee:	2000      	movs	r0, #0
 80031f0:	9000      	str	r0, [sp, #0]
 80031f2:	2204      	movs	r2, #4
 80031f4:	2100      	movs	r1, #0
 80031f6:	0020      	movs	r0, r4
 80031f8:	f7fe f98a 	bl	8001510 <PE_Send_CtrlMessage>
 80031fc:	003d      	movs	r5, r7
 80031fe:	e630      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003200:	8be0      	ldrh	r0, [r4, #30]
 8003202:	03a9      	lsls	r1, r5, #14
 8003204:	4288      	cmp	r0, r1
 8003206:	d1fa      	bne.n	80031fe <__iar_annotation$$branch+0x33e>
 8003208:	2104      	movs	r1, #4
 800320a:	0020      	movs	r0, r4
 800320c:	f7fe f8cb 	bl	80013a6 <PE_SetPowerNegotiation>
 8003210:	68a0      	ldr	r0, [r4, #8]
 8003212:	6801      	ldr	r1, [r0, #0]
 8003214:	2900      	cmp	r1, #0
 8003216:	d0f2      	beq.n	80031fe <__iar_annotation$$branch+0x33e>
 8003218:	7c20      	ldrb	r0, [r4, #16]
 800321a:	4788      	blx	r1
 800321c:	2800      	cmp	r0, #0
 800321e:	d000      	beq.n	8003222 <__iar_annotation$$branch+0x362>
 8003220:	e2db      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003222:	200d      	movs	r0, #13
 8003224:	e6d5      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 8003226:	2000      	movs	r0, #0
 8003228:	9000      	str	r0, [sp, #0]
 800322a:	2303      	movs	r3, #3
 800322c:	2206      	movs	r2, #6
 800322e:	2100      	movs	r1, #0
 8003230:	0020      	movs	r0, r4
 8003232:	f7fe f96d 	bl	8001510 <PE_Send_CtrlMessage>
 8003236:	2800      	cmp	r0, #0
 8003238:	d110      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 800323a:	2103      	movs	r1, #3
 800323c:	0020      	movs	r0, r4
 800323e:	f7fe f8b2 	bl	80013a6 <PE_SetPowerNegotiation>
 8003242:	2110      	movs	r1, #16
 8003244:	7c20      	ldrb	r0, [r4, #16]
 8003246:	f7fd f91b 	bl	8000480 <USBPD_PE_Notification>
 800324a:	2000      	movs	r0, #0
 800324c:	84a0      	strh	r0, [r4, #36]	; 0x24
 800324e:	6960      	ldr	r0, [r4, #20]
 8003250:	06c0      	lsls	r0, r0, #27
 8003252:	0f80      	lsrs	r0, r0, #30
 8003254:	2803      	cmp	r0, #3
 8003256:	d101      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003258:	4876      	ldr	r0, [pc, #472]	; (8003434 <__iar_annotation$$branch+0x574>)
 800325a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800325c:	e601      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800325e:	2001      	movs	r0, #1
 8003260:	9000      	str	r0, [sp, #0]
 8003262:	2397      	movs	r3, #151	; 0x97
 8003264:	2202      	movs	r2, #2
 8003266:	2100      	movs	r1, #0
 8003268:	0020      	movs	r0, r4
 800326a:	f7fe f951 	bl	8001510 <PE_Send_CtrlMessage>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1f4      	bne.n	800325c <__iar_annotation$$branch+0x39c>
 8003272:	7725      	strb	r5, [r4, #28]
 8003274:	2129      	movs	r1, #41	; 0x29
 8003276:	7c20      	ldrb	r0, [r4, #16]
 8003278:	f7fd f902 	bl	8000480 <USBPD_PE_Notification>
 800327c:	486e      	ldr	r0, [pc, #440]	; (8003438 <__iar_annotation$$branch+0x578>)
 800327e:	83e0      	strh	r0, [r4, #30]
 8003280:	4d6e      	ldr	r5, [pc, #440]	; (800343c <__iar_annotation$$branch+0x57c>)
 8003282:	e5ee      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 8003284:	00008014 	.word	0x00008014
 8003288:	00008096 	.word	0x00008096
 800328c:	00007fff 	.word	0x00007fff
 8003290:	8be0      	ldrh	r0, [r4, #30]
 8003292:	03a9      	lsls	r1, r5, #14
 8003294:	4288      	cmp	r0, r1
 8003296:	d1f4      	bne.n	8003282 <__iar_annotation$$branch+0x3c2>
 8003298:	212a      	movs	r1, #42	; 0x2a
 800329a:	7c20      	ldrb	r0, [r4, #16]
 800329c:	f7fd f8f0 	bl	8000480 <USBPD_PE_Notification>
 80032a0:	2000      	movs	r0, #0
 80032a2:	9000      	str	r0, [sp, #0]
 80032a4:	2303      	movs	r3, #3
 80032a6:	2206      	movs	r2, #6
 80032a8:	2100      	movs	r1, #0
 80032aa:	0020      	movs	r0, r4
 80032ac:	f7fe f930 	bl	8001510 <PE_Send_CtrlMessage>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d109      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032b4:	212e      	movs	r1, #46	; 0x2e
 80032b6:	e6cd      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032b8:	2000      	movs	r0, #0
 80032ba:	9000      	str	r0, [sp, #0]
 80032bc:	2307      	movs	r3, #7
 80032be:	2203      	movs	r2, #3
 80032c0:	2100      	movs	r1, #0
 80032c2:	0020      	movs	r0, r4
 80032c4:	f7fe f924 	bl	8001510 <PE_Send_CtrlMessage>
 80032c8:	e5cb      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80032ca:	2000      	movs	r0, #0
 80032cc:	9000      	str	r0, [sp, #0]
 80032ce:	2312      	movs	r3, #18
 80032d0:	220d      	movs	r2, #13
 80032d2:	2031      	movs	r0, #49	; 0x31
 80032d4:	5c21      	ldrb	r1, [r4, r0]
 80032d6:	0020      	movs	r0, r4
 80032d8:	f7fe f91a 	bl	8001510 <PE_Send_CtrlMessage>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d1f3      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 80032e0:	83e7      	strh	r7, [r4, #30]
 80032e2:	251b      	movs	r5, #27
 80032e4:	2130      	movs	r1, #48	; 0x30
 80032e6:	e6b5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80032e8:	4668      	mov	r0, sp
 80032ea:	7b00      	ldrb	r0, [r0, #12]
 80032ec:	2814      	cmp	r0, #20
 80032ee:	d021      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 80032f0:	2030      	movs	r0, #48	; 0x30
 80032f2:	5c20      	ldrb	r0, [r4, r0]
 80032f4:	2231      	movs	r2, #49	; 0x31
 80032f6:	5ca2      	ldrb	r2, [r4, r2]
 80032f8:	4290      	cmp	r0, r2
 80032fa:	d11b      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 80032fc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80032fe:	4001      	ands	r1, r0
 8003300:	2903      	cmp	r1, #3
 8003302:	d117      	bne.n	8003334 <__iar_annotation$$branch+0x474>
 8003304:	2131      	movs	r1, #49	; 0x31
 8003306:	7c20      	ldrb	r0, [r4, #16]
 8003308:	f7fd f8ba 	bl	8000480 <USBPD_PE_Notification>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	5c20      	ldrb	r0, [r4, r0]
 8003310:	2800      	cmp	r0, #0
 8003312:	d102      	bne.n	800331a <__iar_annotation$$branch+0x45a>
 8003314:	2007      	movs	r0, #7
 8003316:	7460      	strb	r0, [r4, #17]
 8003318:	e002      	b.n	8003320 <__iar_annotation$$branch+0x460>
 800331a:	2003      	movs	r0, #3
 800331c:	7460      	strb	r0, [r4, #17]
 800331e:	2500      	movs	r5, #0
 8003320:	4668      	mov	r0, sp
 8003322:	7b00      	ldrb	r0, [r0, #12]
 8003324:	2814      	cmp	r0, #20
 8003326:	d005      	beq.n	8003334 <__iar_annotation$$branch+0x474>
 8003328:	2014      	movs	r0, #20
 800332a:	4669      	mov	r1, sp
 800332c:	7308      	strb	r0, [r1, #12]
 800332e:	0020      	movs	r0, r4
 8003330:	f7fd fb11 	bl	8000956 <PE_Clear_RxEvent>
 8003334:	8be0      	ldrh	r0, [r4, #30]
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	0209      	lsls	r1, r1, #8
 800333a:	4288      	cmp	r0, r1
 800333c:	d1c4      	bne.n	80032c8 <__iar_annotation$$branch+0x408>
 800333e:	e24c      	b.n	80037da <__iar_annotation$$branch+0x91a>
 8003340:	6860      	ldr	r0, [r4, #4]
 8003342:	7800      	ldrb	r0, [r0, #0]
 8003344:	0780      	lsls	r0, r0, #30
 8003346:	0f80      	lsrs	r0, r0, #30
 8003348:	2802      	cmp	r0, #2
 800334a:	d102      	bne.n	8003352 <__iar_annotation$$branch+0x492>
 800334c:	7c20      	ldrb	r0, [r4, #16]
 800334e:	f002 fa0a 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003352:	2105      	movs	r1, #5
 8003354:	0020      	movs	r0, r4
 8003356:	f7fd fa99 	bl	800088c <PE_Send_RESET>
 800335a:	6860      	ldr	r0, [r4, #4]
 800335c:	6801      	ldr	r1, [r0, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4391      	bics	r1, r2
 8003362:	6001      	str	r1, [r0, #0]
 8003364:	78b0      	ldrb	r0, [r6, #2]
 8003366:	1c40      	adds	r0, r0, #1
 8003368:	70b0      	strb	r0, [r6, #2]
 800336a:	6961      	ldr	r1, [r4, #20]
 800336c:	4834      	ldr	r0, [pc, #208]	; (8003440 <__iar_annotation$$branch+0x580>)
 800336e:	4008      	ands	r0, r1
 8003370:	6160      	str	r0, [r4, #20]
 8003372:	2100      	movs	r1, #0
 8003374:	2232      	movs	r2, #50	; 0x32
 8003376:	54a1      	strb	r1, [r4, r2]
 8003378:	4932      	ldr	r1, [pc, #200]	; (8003444 <__iar_annotation$$branch+0x584>)
 800337a:	4001      	ands	r1, r0
 800337c:	6161      	str	r1, [r4, #20]
 800337e:	2202      	movs	r2, #2
 8003380:	2101      	movs	r1, #1
 8003382:	0020      	movs	r0, r4
 8003384:	f7fe f806 	bl	8001394 <PE_CallHardResetCallback>
 8003388:	2169      	movs	r1, #105	; 0x69
 800338a:	4668      	mov	r0, sp
 800338c:	7b40      	ldrb	r0, [r0, #13]
 800338e:	f7fd f877 	bl	8000480 <USBPD_PE_Notification>
 8003392:	83e7      	strh	r7, [r4, #30]
 8003394:	251b      	movs	r5, #27
 8003396:	2015      	movs	r0, #21
 8003398:	e61b      	b.n	8002fd2 <__iar_annotation$$branch+0x112>
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	7800      	ldrb	r0, [r0, #0]
 800339e:	0780      	lsls	r0, r0, #30
 80033a0:	0f80      	lsrs	r0, r0, #30
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d1f0      	bne.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033a6:	7c20      	ldrb	r0, [r4, #16]
 80033a8:	f002 f9dd 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 80033ac:	e7ec      	b.n	8003388 <__iar_annotation$$branch+0x4c8>
 80033ae:	8be0      	ldrh	r0, [r4, #30]
 80033b0:	03a9      	lsls	r1, r5, #14
 80033b2:	4288      	cmp	r0, r1
 80033b4:	d11a      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 80033b6:	6960      	ldr	r0, [r4, #20]
 80033b8:	78b1      	ldrb	r1, [r6, #2]
 80033ba:	2903      	cmp	r1, #3
 80033bc:	d303      	bcc.n	80033c6 <__iar_annotation$$branch+0x506>
 80033be:	0741      	lsls	r1, r0, #29
 80033c0:	0fc9      	lsrs	r1, r1, #31
 80033c2:	d130      	bne.n	8003426 <__iar_annotation$$branch+0x566>
 80033c4:	e66d      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 80033c6:	4920      	ldr	r1, [pc, #128]	; (8003448 <__iar_annotation$$branch+0x588>)
 80033c8:	83e1      	strh	r1, [r4, #30]
 80033ca:	2117      	movs	r1, #23
 80033cc:	7461      	strb	r1, [r4, #17]
 80033ce:	2500      	movs	r5, #0
 80033d0:	0540      	lsls	r0, r0, #21
 80033d2:	0f80      	lsrs	r0, r0, #30
 80033d4:	1e42      	subs	r2, r0, #1
 80033d6:	4192      	sbcs	r2, r2
 80033d8:	0fd2      	lsrs	r2, r2, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	0020      	movs	r0, r4
 80033de:	f7fd ffd9 	bl	8001394 <PE_CallHardResetCallback>
 80033e2:	2203      	movs	r2, #3
 80033e4:	2101      	movs	r1, #1
 80033e6:	0020      	movs	r0, r4
 80033e8:	f7fd ffd4 	bl	8001394 <PE_CallHardResetCallback>
 80033ec:	e539      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80033ee:	2100      	movs	r1, #0
 80033f0:	4668      	mov	r0, sp
 80033f2:	7b40      	ldrb	r0, [r0, #13]
 80033f4:	68a2      	ldr	r2, [r4, #8]
 80033f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033f8:	4790      	blx	r2
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d105      	bne.n	800340a <__iar_annotation$$branch+0x54a>
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <__iar_annotation$$branch+0x58c>)
 8003400:	83e0      	strh	r0, [r4, #30]
 8003402:	25c8      	movs	r5, #200	; 0xc8
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	2013      	movs	r0, #19
 8003408:	7460      	strb	r0, [r4, #17]
 800340a:	8be0      	ldrh	r0, [r4, #30]
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	4288      	cmp	r0, r1
 8003412:	d1eb      	bne.n	80033ec <__iar_annotation$$branch+0x52c>
 8003414:	2206      	movs	r2, #6
 8003416:	2101      	movs	r1, #1
 8003418:	0020      	movs	r0, r4
 800341a:	f7fd ffbb 	bl	8001394 <PE_CallHardResetCallback>
 800341e:	6960      	ldr	r0, [r4, #20]
 8003420:	0741      	lsls	r1, r0, #29
 8003422:	0fc9      	lsrs	r1, r1, #31
 8003424:	d003      	beq.n	800342e <__iar_annotation$$branch+0x56e>
 8003426:	68a0      	ldr	r0, [r4, #8]
 8003428:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800342a:	2800      	cmp	r0, #0
 800342c:	d137      	bne.n	800349e <__iar_annotation$$branch+0x5de>
 800342e:	e638      	b.n	80030a2 <__iar_annotation$$branch+0x1e2>
 8003430:	0000801e 	.word	0x0000801e
 8003434:	0000b6b0 	.word	0x0000b6b0
 8003438:	00008226 	.word	0x00008226
 800343c:	00000226 	.word	0x00000226
 8003440:	fffff9ff 	.word	0xfffff9ff
 8003444:	fffffe3f 	.word	0xfffffe3f
 8003448:	0000828a 	.word	0x0000828a
 800344c:	00008320 	.word	0x00008320
 8003450:	8be0      	ldrh	r0, [r4, #30]
 8003452:	03a9      	lsls	r1, r5, #14
 8003454:	4288      	cmp	r0, r1
 8003456:	d126      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 8003458:	2204      	movs	r2, #4
 800345a:	2101      	movs	r1, #1
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff99 	bl	8001394 <PE_CallHardResetCallback>
 8003462:	2101      	movs	r1, #1
 8003464:	4668      	mov	r0, sp
 8003466:	7b40      	ldrb	r0, [r0, #13]
 8003468:	68a2      	ldr	r2, [r4, #8]
 800346a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800346c:	4790      	blx	r2
 800346e:	2801      	cmp	r0, #1
 8003470:	d10d      	bne.n	800348e <__iar_annotation$$branch+0x5ce>
 8003472:	0020      	movs	r0, r4
 8003474:	f7fd fb1d 	bl	8000ab2 <PE_Reset_HardReset>
 8003478:	2168      	movs	r1, #104	; 0x68
 800347a:	4668      	mov	r0, sp
 800347c:	7b40      	ldrb	r0, [r0, #13]
 800347e:	f7fc ffff 	bl	8000480 <USBPD_PE_Notification>
 8003482:	2205      	movs	r2, #5
 8003484:	2101      	movs	r1, #1
 8003486:	0020      	movs	r0, r4
 8003488:	f7fd ff84 	bl	8001394 <PE_CallHardResetCallback>
 800348c:	e633      	b.n	80030f6 <__iar_annotation$$branch+0x236>
 800348e:	2206      	movs	r2, #6
 8003490:	2101      	movs	r1, #1
 8003492:	0020      	movs	r0, r4
 8003494:	f7fd ff7e 	bl	8001394 <PE_CallHardResetCallback>
 8003498:	68a0      	ldr	r0, [r4, #8]
 800349a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <__iar_annotation$$branch+0x5e2>
 80034a0:	e2d6      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80034a2:	2500      	movs	r5, #0
 80034a4:	7465      	strb	r5, [r4, #17]
 80034a6:	e4dc      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 80034a8:	2001      	movs	r0, #1
 80034aa:	9000      	str	r0, [sp, #0]
 80034ac:	231b      	movs	r3, #27
 80034ae:	2207      	movs	r2, #7
 80034b0:	2100      	movs	r1, #0
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7fe f82c 	bl	8001510 <PE_Send_CtrlMessage>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f4      	bne.n	80034a6 <__iar_annotation$$branch+0x5e6>
 80034bc:	2006      	movs	r0, #6
 80034be:	7720      	strb	r0, [r4, #28]
 80034c0:	83e7      	strh	r7, [r4, #30]
 80034c2:	251b      	movs	r5, #27
 80034c4:	210b      	movs	r1, #11
 80034c6:	e5c5      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80034c8:	4668      	mov	r0, sp
 80034ca:	7b00      	ldrb	r0, [r0, #12]
 80034cc:	2811      	cmp	r0, #17
 80034ce:	d13e      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 80034d0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80034d2:	0bc1      	lsrs	r1, r0, #15
 80034d4:	d11f      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034d6:	0441      	lsls	r1, r0, #17
 80034d8:	0f49      	lsrs	r1, r1, #29
 80034da:	d01c      	beq.n	8003516 <__iar_annotation$$branch+0x656>
 80034dc:	06c0      	lsls	r0, r0, #27
 80034de:	0ec0      	lsrs	r0, r0, #27
 80034e0:	2801      	cmp	r0, #1
 80034e2:	d118      	bne.n	8003516 <__iar_annotation$$branch+0x656>
 80034e4:	008b      	lsls	r3, r1, #2
 80034e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80034e8:	1c82      	adds	r2, r0, #2
 80034ea:	2104      	movs	r1, #4
 80034ec:	7c20      	ldrb	r0, [r4, #16]
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	69ad      	ldr	r5, [r5, #24]
 80034f2:	47a8      	blx	r5
 80034f4:	2003      	movs	r0, #3
 80034f6:	7460      	strb	r0, [r4, #17]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4668      	mov	r0, sp
 80034fc:	7b00      	ldrb	r0, [r0, #12]
 80034fe:	2814      	cmp	r0, #20
 8003500:	d005      	beq.n	800350e <__iar_annotation$$branch+0x64e>
 8003502:	2014      	movs	r0, #20
 8003504:	4669      	mov	r1, sp
 8003506:	7308      	strb	r0, [r1, #12]
 8003508:	0020      	movs	r0, r4
 800350a:	f7fd fa24 	bl	8000956 <PE_Clear_RxEvent>
 800350e:	210d      	movs	r1, #13
 8003510:	7c20      	ldrb	r0, [r4, #16]
 8003512:	f7fc ffb5 	bl	8000480 <USBPD_PE_Notification>
 8003516:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003518:	21f0      	movs	r1, #240	; 0xf0
 800351a:	0209      	lsls	r1, r1, #8
 800351c:	4001      	ands	r1, r0
 800351e:	d116      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 8003520:	06c0      	lsls	r0, r0, #27
 8003522:	0ec0      	lsrs	r0, r0, #27
 8003524:	2804      	cmp	r0, #4
 8003526:	d001      	beq.n	800352c <__iar_annotation$$branch+0x66c>
 8003528:	2810      	cmp	r0, #16
 800352a:	d110      	bne.n	800354e <__iar_annotation$$branch+0x68e>
 800352c:	2003      	movs	r0, #3
 800352e:	7460      	strb	r0, [r4, #17]
 8003530:	2500      	movs	r5, #0
 8003532:	4668      	mov	r0, sp
 8003534:	7b00      	ldrb	r0, [r0, #12]
 8003536:	2814      	cmp	r0, #20
 8003538:	d005      	beq.n	8003546 <__iar_annotation$$branch+0x686>
 800353a:	2014      	movs	r0, #20
 800353c:	4669      	mov	r1, sp
 800353e:	7308      	strb	r0, [r1, #12]
 8003540:	0020      	movs	r0, r4
 8003542:	f7fd fa08 	bl	8000956 <PE_Clear_RxEvent>
 8003546:	210e      	movs	r1, #14
 8003548:	7c20      	ldrb	r0, [r4, #16]
 800354a:	f7fc ff99 	bl	8000480 <USBPD_PE_Notification>
 800354e:	8be0      	ldrh	r0, [r4, #30]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	0209      	lsls	r1, r1, #8
 8003554:	4288      	cmp	r0, r1
 8003556:	d11f      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003558:	2003      	movs	r0, #3
 800355a:	e55f      	b.n	800301c <__iar_annotation$$branch+0x15c>
 800355c:	68a0      	ldr	r0, [r4, #8]
 800355e:	6881      	ldr	r1, [r0, #8]
 8003560:	2900      	cmp	r1, #0
 8003562:	d01f      	beq.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003564:	7c20      	ldrb	r0, [r4, #16]
 8003566:	4788      	blx	r1
 8003568:	280a      	cmp	r0, #10
 800356a:	d002      	beq.n	8003572 <__iar_annotation$$branch+0x6b2>
 800356c:	280d      	cmp	r0, #13
 800356e:	d014      	beq.n	800359a <__iar_annotation$$branch+0x6da>
 8003570:	e018      	b.n	80035a4 <__iar_annotation$$branch+0x6e4>
 8003572:	1cf8      	adds	r0, r7, #3
 8003574:	83e0      	strh	r0, [r4, #30]
 8003576:	251e      	movs	r5, #30
 8003578:	2000      	movs	r0, #0
 800357a:	9000      	str	r0, [sp, #0]
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	2203      	movs	r2, #3
 8003580:	2100      	movs	r1, #0
 8003582:	0020      	movs	r0, r4
 8003584:	f7fd ffc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003588:	2800      	cmp	r0, #0
 800358a:	d105      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 800358c:	2201      	movs	r2, #1
 800358e:	2101      	movs	r1, #1
 8003590:	7c20      	ldrb	r0, [r4, #16]
 8003592:	68a3      	ldr	r3, [r4, #8]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	4798      	blx	r3
 8003598:	e463      	b.n	8002e62 <__iar_annotation$$branch+0xe>
 800359a:	2000      	movs	r0, #0
 800359c:	9000      	str	r0, [sp, #0]
 800359e:	2303      	movs	r3, #3
 80035a0:	220c      	movs	r2, #12
 80035a2:	e68d      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035a4:	2000      	movs	r0, #0
 80035a6:	9000      	str	r0, [sp, #0]
 80035a8:	2303      	movs	r3, #3
 80035aa:	2204      	movs	r2, #4
 80035ac:	e688      	b.n	80032c0 <__iar_annotation$$branch+0x400>
 80035ae:	8be0      	ldrh	r0, [r4, #30]
 80035b0:	03a9      	lsls	r1, r5, #14
 80035b2:	4288      	cmp	r0, r1
 80035b4:	d1f0      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035b6:	2104      	movs	r1, #4
 80035b8:	0020      	movs	r0, r4
 80035ba:	f7fd fef4 	bl	80013a6 <PE_SetPowerNegotiation>
 80035be:	6860      	ldr	r0, [r4, #4]
 80035c0:	6801      	ldr	r1, [r0, #0]
 80035c2:	2210      	movs	r2, #16
 80035c4:	430a      	orrs	r2, r1
 80035c6:	6002      	str	r2, [r0, #0]
 80035c8:	2206      	movs	r2, #6
 80035ca:	2101      	movs	r1, #1
 80035cc:	7c20      	ldrb	r0, [r4, #16]
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	4798      	blx	r3
 80035d4:	2207      	movs	r2, #7
 80035d6:	2101      	movs	r1, #1
 80035d8:	7c20      	ldrb	r0, [r4, #16]
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	4798      	blx	r3
 80035e0:	2100      	movs	r1, #0
 80035e2:	7c20      	ldrb	r0, [r4, #16]
 80035e4:	f002 f889 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 80035e8:	2000      	movs	r0, #0
 80035ea:	9000      	str	r0, [sp, #0]
 80035ec:	2325      	movs	r3, #37	; 0x25
 80035ee:	2206      	movs	r2, #6
 80035f0:	2100      	movs	r1, #0
 80035f2:	0020      	movs	r0, r4
 80035f4:	f7fd ff8c 	bl	8001510 <PE_Send_CtrlMessage>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1cd      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 80035fc:	e0c9      	b.n	8003792 <__iar_annotation$$branch+0x8d2>
 80035fe:	4668      	mov	r0, sp
 8003600:	7b00      	ldrb	r0, [r0, #12]
 8003602:	2811      	cmp	r0, #17
 8003604:	d10b      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 8003606:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003608:	4001      	ands	r1, r0
 800360a:	2906      	cmp	r1, #6
 800360c:	d107      	bne.n	800361e <__iar_annotation$$branch+0x75e>
 800360e:	2014      	movs	r0, #20
 8003610:	4669      	mov	r1, sp
 8003612:	7308      	strb	r0, [r1, #12]
 8003614:	0020      	movs	r0, r4
 8003616:	f7fd f99e 	bl	8000956 <PE_Clear_RxEvent>
 800361a:	2026      	movs	r0, #38	; 0x26
 800361c:	7460      	strb	r0, [r4, #17]
 800361e:	8be0      	ldrh	r0, [r4, #30]
 8003620:	03a9      	lsls	r1, r5, #14
 8003622:	4288      	cmp	r0, r1
 8003624:	d1b8      	bne.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003626:	68a3      	ldr	r3, [r4, #8]
 8003628:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800362a:	2800      	cmp	r0, #0
 800362c:	d000      	beq.n	8003630 <__iar_annotation$$branch+0x770>
 800362e:	e20f      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 8003630:	220a      	movs	r2, #10
 8003632:	2101      	movs	r1, #1
 8003634:	7c20      	ldrb	r0, [r4, #16]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	4798      	blx	r3
 800363a:	e0ce      	b.n	80037da <__iar_annotation$$branch+0x91a>
 800363c:	2100      	movs	r1, #0
 800363e:	0020      	movs	r0, r4
 8003640:	f7fd f944 	bl	80008cc <PE_ChangePowerRole>
 8003644:	220d      	movs	r2, #13
 8003646:	2100      	movs	r1, #0
 8003648:	7c20      	ldrb	r0, [r4, #16]
 800364a:	68a3      	ldr	r3, [r4, #8]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	4798      	blx	r3
 8003650:	2114      	movs	r1, #20
 8003652:	7c20      	ldrb	r0, [r4, #16]
 8003654:	f7fc ff14 	bl	8000480 <USBPD_PE_Notification>
 8003658:	220e      	movs	r2, #14
 800365a:	2100      	movs	r1, #0
 800365c:	7c20      	ldrb	r0, [r4, #16]
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	4798      	blx	r3
 8003664:	6860      	ldr	r0, [r4, #4]
 8003666:	7800      	ldrb	r0, [r0, #0]
 8003668:	0780      	lsls	r0, r0, #30
 800366a:	0f80      	lsrs	r0, r0, #30
 800366c:	2801      	cmp	r0, #1
 800366e:	d104      	bne.n	800367a <__iar_annotation$$branch+0x7ba>
 8003670:	2101      	movs	r1, #1
 8003672:	4668      	mov	r0, sp
 8003674:	7b40      	ldrb	r0, [r0, #13]
 8003676:	f002 f895 	bl	80057a4 <USBPD_PRL_SOPCapability>
 800367a:	0020      	movs	r0, r4
 800367c:	f7fd fa90 	bl	8000ba0 <PE_Reset_StateMachine>
 8003680:	e4cd      	b.n	800301e <__iar_annotation$$branch+0x15e>
 8003682:	2001      	movs	r0, #1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	231f      	movs	r3, #31
 8003688:	220a      	movs	r2, #10
 800368a:	2100      	movs	r1, #0
 800368c:	0020      	movs	r0, r4
 800368e:	f7fd ff3f 	bl	8001510 <PE_Send_CtrlMessage>
 8003692:	2800      	cmp	r0, #0
 8003694:	d1c6      	bne.n	8003624 <__iar_annotation$$branch+0x764>
 8003696:	2008      	movs	r0, #8
 8003698:	7720      	strb	r0, [r4, #28]
 800369a:	83e7      	strh	r7, [r4, #30]
 800369c:	251b      	movs	r5, #27
 800369e:	2202      	movs	r2, #2
 80036a0:	2101      	movs	r1, #1
 80036a2:	7c20      	ldrb	r0, [r4, #16]
 80036a4:	68a3      	ldr	r3, [r4, #8]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a8:	4798      	blx	r3
 80036aa:	2139      	movs	r1, #57	; 0x39
 80036ac:	e4d2      	b.n	8003054 <__iar_annotation$$branch+0x194>
 80036ae:	4668      	mov	r0, sp
 80036b0:	7b00      	ldrb	r0, [r0, #12]
 80036b2:	2811      	cmp	r0, #17
 80036b4:	d145      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036b6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80036b8:	391f      	subs	r1, #31
 80036ba:	4001      	ands	r1, r0
 80036bc:	d141      	bne.n	8003742 <__iar_annotation$$branch+0x882>
 80036be:	06c0      	lsls	r0, r0, #27
 80036c0:	0ec0      	lsrs	r0, r0, #27
 80036c2:	2803      	cmp	r0, #3
 80036c4:	d006      	beq.n	80036d4 <__iar_annotation$$branch+0x814>
 80036c6:	2804      	cmp	r0, #4
 80036c8:	d012      	beq.n	80036f0 <__iar_annotation$$branch+0x830>
 80036ca:	280c      	cmp	r0, #12
 80036cc:	d008      	beq.n	80036e0 <__iar_annotation$$branch+0x820>
 80036ce:	2810      	cmp	r0, #16
 80036d0:	d020      	beq.n	8003714 <__iar_annotation$$branch+0x854>
 80036d2:	e036      	b.n	8003742 <__iar_annotation$$branch+0x882>
 80036d4:	213a      	movs	r1, #58	; 0x3a
 80036d6:	7c20      	ldrb	r0, [r4, #16]
 80036d8:	f7fc fed2 	bl	8000480 <USBPD_PE_Notification>
 80036dc:	2020      	movs	r0, #32
 80036de:	e012      	b.n	8003706 <__iar_annotation$$branch+0x846>
 80036e0:	2205      	movs	r2, #5
 80036e2:	2101      	movs	r1, #1
 80036e4:	7c20      	ldrb	r0, [r4, #16]
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	4798      	blx	r3
 80036ec:	213b      	movs	r1, #59	; 0x3b
 80036ee:	e006      	b.n	80036fe <__iar_annotation$$branch+0x83e>
 80036f0:	2204      	movs	r2, #4
 80036f2:	2101      	movs	r1, #1
 80036f4:	7c20      	ldrb	r0, [r4, #16]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	4798      	blx	r3
 80036fc:	2116      	movs	r1, #22
 80036fe:	7c20      	ldrb	r0, [r4, #16]
 8003700:	f7fc febe 	bl	8000480 <USBPD_PE_Notification>
 8003704:	2003      	movs	r0, #3
 8003706:	7460      	strb	r0, [r4, #17]
 8003708:	2500      	movs	r5, #0
 800370a:	4668      	mov	r0, sp
 800370c:	7b00      	ldrb	r0, [r0, #12]
 800370e:	2814      	cmp	r0, #20
 8003710:	d111      	bne.n	8003736 <__iar_annotation$$branch+0x876>
 8003712:	e016      	b.n	8003742 <__iar_annotation$$branch+0x882>
 8003714:	2204      	movs	r2, #4
 8003716:	2101      	movs	r1, #1
 8003718:	7c20      	ldrb	r0, [r4, #16]
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4798      	blx	r3
 8003720:	2117      	movs	r1, #23
 8003722:	7c20      	ldrb	r0, [r4, #16]
 8003724:	f7fc feac 	bl	8000480 <USBPD_PE_Notification>
 8003728:	2003      	movs	r0, #3
 800372a:	7460      	strb	r0, [r4, #17]
 800372c:	2500      	movs	r5, #0
 800372e:	4668      	mov	r0, sp
 8003730:	7b00      	ldrb	r0, [r0, #12]
 8003732:	2814      	cmp	r0, #20
 8003734:	d005      	beq.n	8003742 <__iar_annotation$$branch+0x882>
 8003736:	2014      	movs	r0, #20
 8003738:	4669      	mov	r1, sp
 800373a:	7308      	strb	r0, [r1, #12]
 800373c:	0020      	movs	r0, r4
 800373e:	f7fd f90a 	bl	8000956 <PE_Clear_RxEvent>
 8003742:	8be0      	ldrh	r0, [r4, #30]
 8003744:	2180      	movs	r1, #128	; 0x80
 8003746:	0209      	lsls	r1, r1, #8
 8003748:	4288      	cmp	r0, r1
 800374a:	d12c      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 800374c:	e704      	b.n	8003558 <__iar_annotation$$branch+0x698>
 800374e:	6860      	ldr	r0, [r4, #4]
 8003750:	6801      	ldr	r1, [r0, #0]
 8003752:	2210      	movs	r2, #16
 8003754:	430a      	orrs	r2, r1
 8003756:	6002      	str	r2, [r0, #0]
 8003758:	7f20      	ldrb	r0, [r4, #28]
 800375a:	2809      	cmp	r0, #9
 800375c:	d005      	beq.n	800376a <__iar_annotation$$branch+0x8aa>
 800375e:	2206      	movs	r2, #6
 8003760:	2101      	movs	r1, #1
 8003762:	7c20      	ldrb	r0, [r4, #16]
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4798      	blx	r3
 800376a:	2207      	movs	r2, #7
 800376c:	2101      	movs	r1, #1
 800376e:	7c20      	ldrb	r0, [r4, #16]
 8003770:	68a3      	ldr	r3, [r4, #8]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4798      	blx	r3
 8003776:	2100      	movs	r1, #0
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f001 ffbe 	bl	80056fa <USBPD_PRL_SetHeaderPowerRole>
 800377e:	2000      	movs	r0, #0
 8003780:	9000      	str	r0, [sp, #0]
 8003782:	2321      	movs	r3, #33	; 0x21
 8003784:	2206      	movs	r2, #6
 8003786:	2100      	movs	r1, #0
 8003788:	0020      	movs	r0, r4
 800378a:	f7fd fec1 	bl	8001510 <PE_Send_CtrlMessage>
 800378e:	2800      	cmp	r0, #0
 8003790:	d109      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 8003792:	2208      	movs	r2, #8
 8003794:	2101      	movs	r1, #1
 8003796:	7c20      	ldrb	r0, [r4, #16]
 8003798:	68a3      	ldr	r3, [r4, #8]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	4798      	blx	r3
 800379e:	48c5      	ldr	r0, [pc, #788]	; (8003ab4 <.text_3>)
 80037a0:	83e0      	strh	r0, [r4, #30]
 80037a2:	25eb      	movs	r5, #235	; 0xeb
 80037a4:	006d      	lsls	r5, r5, #1
 80037a6:	e6f7      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80037a8:	4668      	mov	r0, sp
 80037aa:	7b00      	ldrb	r0, [r0, #12]
 80037ac:	2811      	cmp	r0, #17
 80037ae:	d10b      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b0:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80037b2:	4001      	ands	r1, r0
 80037b4:	2906      	cmp	r1, #6
 80037b6:	d107      	bne.n	80037c8 <__iar_annotation$$branch+0x908>
 80037b8:	2026      	movs	r0, #38	; 0x26
 80037ba:	7460      	strb	r0, [r4, #17]
 80037bc:	2014      	movs	r0, #20
 80037be:	4669      	mov	r1, sp
 80037c0:	7308      	strb	r0, [r1, #12]
 80037c2:	0020      	movs	r0, r4
 80037c4:	f7fd f8c7 	bl	8000956 <PE_Clear_RxEvent>
 80037c8:	8be0      	ldrh	r0, [r4, #30]
 80037ca:	03a9      	lsls	r1, r5, #14
 80037cc:	4288      	cmp	r0, r1
 80037ce:	d1ea      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037d0:	68a0      	ldr	r0, [r4, #8]
 80037d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d000      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80037d8:	e13a      	b.n	8003a50 <__iar_annotation$$branch+0x5e>
 80037da:	200f      	movs	r0, #15
 80037dc:	e6bd      	b.n	800355a <__iar_annotation$$branch+0x69a>
 80037de:	8be0      	ldrh	r0, [r4, #30]
 80037e0:	03a9      	lsls	r1, r5, #14
 80037e2:	4288      	cmp	r0, r1
 80037e4:	d1df      	bne.n	80037a6 <__iar_annotation$$branch+0x8e6>
 80037e6:	220e      	movs	r2, #14
 80037e8:	2101      	movs	r1, #1
 80037ea:	7c20      	ldrb	r0, [r4, #16]
 80037ec:	68a3      	ldr	r3, [r4, #8]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	4798      	blx	r3
 80037f2:	6860      	ldr	r0, [r4, #4]
 80037f4:	7800      	ldrb	r0, [r0, #0]
 80037f6:	0780      	lsls	r0, r0, #30
 80037f8:	0f80      	lsrs	r0, r0, #30
 80037fa:	2802      	cmp	r0, #2
 80037fc:	d102      	bne.n	8003804 <__iar_annotation$$branch+0x944>
 80037fe:	7c20      	ldrb	r0, [r4, #16]
 8003800:	f001 ffb1 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003804:	0020      	movs	r0, r4
 8003806:	f7fd f9cb 	bl	8000ba0 <PE_Reset_StateMachine>
 800380a:	2115      	movs	r1, #21
 800380c:	e74e      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 800380e:	2803      	cmp	r0, #3
 8003810:	d110      	bne.n	8003834 <__iar_annotation$$branch+0x974>
 8003812:	2000      	movs	r0, #0
 8003814:	7720      	strb	r0, [r4, #28]
 8003816:	6860      	ldr	r0, [r4, #4]
 8003818:	7800      	ldrb	r0, [r0, #0]
 800381a:	0780      	lsls	r0, r0, #30
 800381c:	0f80      	lsrs	r0, r0, #30
 800381e:	2802      	cmp	r0, #2
 8003820:	d102      	bne.n	8003828 <__iar_annotation$$branch+0x968>
 8003822:	7c20      	ldrb	r0, [r4, #16]
 8003824:	f001 ff9f 	bl	8005766 <USBPD_PRL_SRCReleaseSinkNG>
 8003828:	2004      	movs	r0, #4
 800382a:	7460      	strb	r0, [r4, #17]
 800382c:	2167      	movs	r1, #103	; 0x67
 800382e:	7c20      	ldrb	r0, [r4, #16]
 8003830:	f7fc fe26 	bl	8000480 <USBPD_PE_Notification>
 8003834:	4668      	mov	r0, sp
 8003836:	7b00      	ldrb	r0, [r0, #12]
 8003838:	2814      	cmp	r0, #20
 800383a:	d00d      	beq.n	8003858 <__iar_annotation$$branch+0x998>
 800383c:	0020      	movs	r0, r4
 800383e:	f7fe f917 	bl	8001a70 <PE_ManageRXEvent>
 8003842:	4668      	mov	r0, sp
 8003844:	7b00      	ldrb	r0, [r0, #12]
 8003846:	2814      	cmp	r0, #20
 8003848:	d005      	beq.n	8003856 <__iar_annotation$$branch+0x996>
 800384a:	2014      	movs	r0, #20
 800384c:	4669      	mov	r1, sp
 800384e:	7308      	strb	r0, [r1, #12]
 8003850:	0020      	movs	r0, r4
 8003852:	f7fd f880 	bl	8000956 <PE_Clear_RxEvent>
 8003856:	e69f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003858:	6960      	ldr	r0, [r4, #20]
 800385a:	0cc0      	lsrs	r0, r0, #19
 800385c:	03ad      	lsls	r5, r5, #14
 800385e:	2800      	cmp	r0, #0
 8003860:	d01e      	beq.n	80038a0 <__iar_annotation$$branch+0x9e0>
 8003862:	8c21      	ldrh	r1, [r4, #32]
 8003864:	42a9      	cmp	r1, r5
 8003866:	d10e      	bne.n	8003886 <__iar_annotation$$branch+0x9c6>
 8003868:	200f      	movs	r0, #15
 800386a:	7460      	strb	r0, [r4, #17]
 800386c:	2000      	movs	r0, #0
 800386e:	9000      	str	r0, [sp, #0]
 8003870:	2300      	movs	r3, #0
 8003872:	2270      	movs	r2, #112	; 0x70
 8003874:	7c21      	ldrb	r1, [r4, #16]
 8003876:	2009      	movs	r0, #9
 8003878:	4da5      	ldr	r5, [pc, #660]	; (8003b10 <.text_5>)
 800387a:	682d      	ldr	r5, [r5, #0]
 800387c:	47a8      	blx	r5
 800387e:	78b0      	ldrb	r0, [r6, #2]
 8003880:	1c40      	adds	r0, r0, #1
 8003882:	70b0      	strb	r0, [r6, #2]
 8003884:	e6fc      	b.n	8003680 <__iar_annotation$$branch+0x7c0>
 8003886:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003888:	0509      	lsls	r1, r1, #20
 800388a:	0f49      	lsrs	r1, r1, #29
 800388c:	180a      	adds	r2, r1, r0
 800388e:	2333      	movs	r3, #51	; 0x33
 8003890:	435a      	muls	r2, r3
 8003892:	4315      	orrs	r5, r2
 8003894:	8425      	strh	r5, [r4, #32]
 8003896:	180d      	adds	r5, r1, r0
 8003898:	2033      	movs	r0, #51	; 0x33
 800389a:	4345      	muls	r5, r0
 800389c:	b2ad      	uxth	r5, r5
 800389e:	e67b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038a0:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80038a2:	42a8      	cmp	r0, r5
 80038a4:	d099      	beq.n	80037da <__iar_annotation$$branch+0x91a>
 80038a6:	7c20      	ldrb	r0, [r4, #16]
 80038a8:	f7fd f87a 	bl	80009a0 <PE_PRL_Control_RxEvent>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d113      	bne.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b0:	2032      	movs	r0, #50	; 0x32
 80038b2:	5c20      	ldrb	r0, [r4, r0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d00f      	beq.n	80038d8 <__iar_annotation$$branch+0xa18>
 80038b8:	2133      	movs	r1, #51	; 0x33
 80038ba:	5c61      	ldrb	r1, [r4, r1]
 80038bc:	2231      	movs	r2, #49	; 0x31
 80038be:	54a1      	strb	r1, [r4, r2]
 80038c0:	7460      	strb	r0, [r4, #17]
 80038c2:	2500      	movs	r5, #0
 80038c4:	2132      	movs	r1, #50	; 0x32
 80038c6:	5465      	strb	r5, [r4, r1]
 80038c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038ca:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038cc:	6960      	ldr	r0, [r4, #20]
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4301      	orrs	r1, r0
 80038d4:	6161      	str	r1, [r4, #20]
 80038d6:	e65f      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 80038d8:	8c60      	ldrh	r0, [r4, #34]	; 0x22
 80038da:	42a8      	cmp	r0, r5
 80038dc:	d104      	bne.n	80038e8 <__iar_annotation$$branch+0x4>
 80038de:	2500      	movs	r5, #0
 80038e0:	8465      	strh	r5, [r4, #34]	; 0x22
 80038e2:	7930      	ldrb	r0, [r6, #4]

080038e4 <__iar_annotation$$branch>:
 80038e4:	f7ff fb87 	bl	8002ff6 <__iar_annotation$$branch+0x136>
 80038e8:	0020      	movs	r0, r4
 80038ea:	f7fd fd83 	bl	80013f4 <PE_CalculateMinTiming>
 80038ee:	e080      	b.n	80039f2 <__iar_annotation$$branch>
 80038f0:	2000      	movs	r0, #0
 80038f2:	9002      	str	r0, [sp, #8]
 80038f4:	2003      	movs	r0, #3
 80038f6:	9001      	str	r0, [sp, #4]
 80038f8:	2001      	movs	r0, #1
 80038fa:	9000      	str	r0, [sp, #0]
 80038fc:	0023      	movs	r3, r4
 80038fe:	332c      	adds	r3, #44	; 0x2c
 8003900:	2206      	movs	r2, #6
 8003902:	2100      	movs	r1, #0
 8003904:	0020      	movs	r0, r4
 8003906:	f7fd fe2e 	bl	8001566 <PE_Send_DataMessage>
 800390a:	2800      	cmp	r0, #0
 800390c:	d1e3      	bne.n	80038d6 <__iar_annotation$$branch+0xa16>
 800390e:	215d      	movs	r1, #93	; 0x5d
 8003910:	e6cc      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003912:	2000      	movs	r0, #0
 8003914:	9004      	str	r0, [sp, #16]
 8003916:	ab04      	add	r3, sp, #16
 8003918:	aa05      	add	r2, sp, #20
 800391a:	210a      	movs	r1, #10
 800391c:	4668      	mov	r0, sp
 800391e:	7b40      	ldrb	r0, [r0, #13]
 8003920:	68a7      	ldr	r7, [r4, #8]
 8003922:	697f      	ldr	r7, [r7, #20]
 8003924:	47b8      	blx	r7
 8003926:	2104      	movs	r1, #4
 8003928:	9804      	ldr	r0, [sp, #16]
 800392a:	f7fd fd8f 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 800392e:	2800      	cmp	r0, #0
 8003930:	d11f      	bne.n	8003972 <__iar_annotation$$branch+0x8e>
 8003932:	71f0      	strb	r0, [r6, #7]
 8003934:	7230      	strb	r0, [r6, #8]
 8003936:	7c20      	ldrb	r0, [r4, #16]
 8003938:	f7fd fa04 	bl	8000d44 <PE_Get_UnchunkedSupport>
 800393c:	2800      	cmp	r0, #0
 800393e:	d103      	bne.n	8003948 <__iar_annotation$$branch+0x64>
 8003940:	7a30      	ldrb	r0, [r6, #8]
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	4301      	orrs	r1, r0
 8003946:	7231      	strb	r1, [r6, #8]
 8003948:	9a04      	ldr	r2, [sp, #16]
 800394a:	a905      	add	r1, sp, #20
 800394c:	4871      	ldr	r0, [pc, #452]	; (8003b14 <.text_6>)
 800394e:	1820      	adds	r0, r4, r0
 8003950:	f024 fa0f 	bl	8027d72 <__aeabi_memcpy>
 8003954:	2000      	movs	r0, #0
 8003956:	9002      	str	r0, [sp, #8]
 8003958:	2003      	movs	r0, #3
 800395a:	9001      	str	r0, [sp, #4]
 800395c:	2008      	movs	r0, #8
 800395e:	9000      	str	r0, [sp, #0]
 8003960:	486d      	ldr	r0, [pc, #436]	; (8003b18 <.text_7>)
 8003962:	1823      	adds	r3, r4, r0
 8003964:	220c      	movs	r2, #12
 8003966:	2100      	movs	r1, #0
 8003968:	0020      	movs	r0, r4
 800396a:	f7fd ff2f 	bl	80017cc <PE_Send_ExtendedMessage>
 800396e:	214c      	movs	r1, #76	; 0x4c
 8003970:	e69c      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003972:	2001      	movs	r0, #1
 8003974:	e510      	b.n	8003398 <__iar_annotation$$branch+0x4d8>
 8003976:	2001      	movs	r0, #1
 8003978:	9000      	str	r0, [sp, #0]
 800397a:	2339      	movs	r3, #57	; 0x39
 800397c:	7832      	ldrb	r2, [r6, #0]
 800397e:	2033      	movs	r0, #51	; 0x33
 8003980:	5c21      	ldrb	r1, [r4, r0]
 8003982:	0020      	movs	r0, r4
 8003984:	f7fd fdc4 	bl	8001510 <PE_Send_CtrlMessage>
 8003988:	2800      	cmp	r0, #0
 800398a:	d144      	bne.n	8003a16 <__iar_annotation$$branch+0x24>
 800398c:	7870      	ldrb	r0, [r6, #1]
 800398e:	7720      	strb	r0, [r4, #28]
 8003990:	83e7      	strh	r7, [r4, #30]
 8003992:	251b      	movs	r5, #27
 8003994:	2144      	movs	r1, #68	; 0x44
 8003996:	e689      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 8003998:	8be0      	ldrh	r0, [r4, #30]
 800399a:	03a9      	lsls	r1, r5, #14
 800399c:	4288      	cmp	r0, r1
 800399e:	d104      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a0:	4668      	mov	r0, sp
 80039a2:	7b00      	ldrb	r0, [r0, #12]
 80039a4:	2814      	cmp	r0, #20
 80039a6:	d100      	bne.n	80039aa <__iar_annotation$$branch+0xc6>
 80039a8:	e5d6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039aa:	4668      	mov	r0, sp
 80039ac:	7b00      	ldrb	r0, [r0, #12]
 80039ae:	2814      	cmp	r0, #20
 80039b0:	d031      	beq.n	8003a16 <__iar_annotation$$branch+0x24>
 80039b2:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80039b4:	0bc1      	lsrs	r1, r0, #15
 80039b6:	d003      	beq.n	80039c0 <__iar_annotation$$branch+0xdc>
 80039b8:	0020      	movs	r0, r4
 80039ba:	f7fd fe11 	bl	80015e0 <PE_Check_ExtendedMessage>
 80039be:	e740      	b.n	8003842 <__iar_annotation$$branch+0x982>
 80039c0:	06c0      	lsls	r0, r0, #27
 80039c2:	0ec0      	lsrs	r0, r0, #27
 80039c4:	2810      	cmp	r0, #16
 80039c6:	d000      	beq.n	80039ca <__iar_annotation$$branch+0xe6>
 80039c8:	e5c6      	b.n	8003558 <__iar_annotation$$branch+0x698>
 80039ca:	2014      	movs	r0, #20
 80039cc:	4669      	mov	r1, sp
 80039ce:	7308      	strb	r0, [r1, #12]
 80039d0:	0020      	movs	r0, r4
 80039d2:	f7fc ffc0 	bl	8000956 <PE_Clear_RxEvent>
 80039d6:	2500      	movs	r5, #0
 80039d8:	83e5      	strh	r5, [r4, #30]
 80039da:	2003      	movs	r0, #3
 80039dc:	7460      	strb	r0, [r4, #17]
 80039de:	2159      	movs	r1, #89	; 0x59
 80039e0:	e664      	b.n	80036ac <__iar_annotation$$branch+0x7ec>
 80039e2:	0020      	movs	r0, r4
 80039e4:	f7fd ff1e 	bl	8001824 <PE_SubStateMachine_ExtendedMessages>
 80039e8:	e003      	b.n	80039f2 <__iar_annotation$$branch>
 80039ea:	a903      	add	r1, sp, #12
 80039ec:	0020      	movs	r0, r4
 80039ee:	f7fd f9bb 	bl	8000d68 <PE_SubStateMachine_Generic>

080039f2 <__iar_annotation$$branch>:
 80039f2:	f7ff fa35 	bl	8002e60 <__iar_annotation$$branch+0xc>
 80039f6:	a903      	add	r1, sp, #12
 80039f8:	0020      	movs	r0, r4
 80039fa:	f000 f9d5 	bl	8003da8 <PE_SubStateMachine_VconnSwap>
 80039fe:	0005      	movs	r5, r0
 8003a00:	6860      	ldr	r0, [r4, #4]
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	0401      	lsls	r1, r0, #16
 8003a06:	0fc9      	lsrs	r1, r1, #31
 8003a08:	d006      	beq.n	8003a18 <__iar_annotation$$branch+0x26>
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	6801      	ldr	r1, [r0, #0]
 8003a0e:	4668      	mov	r0, sp
 8003a10:	7b40      	ldrb	r0, [r0, #13]
 8003a12:	f001 fec7 	bl	80057a4 <USBPD_PRL_SOPCapability>
 8003a16:	e5bf      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a18:	2101      	movs	r1, #1
 8003a1a:	e7f8      	b.n	8003a0e <__iar_annotation$$branch+0x1c>
 8003a1c:	4668      	mov	r0, sp
 8003a1e:	7b00      	ldrb	r0, [r0, #12]
 8003a20:	2811      	cmp	r0, #17
 8003a22:	d111      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a24:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8003a26:	4001      	ands	r1, r0
 8003a28:	2913      	cmp	r1, #19
 8003a2a:	d10d      	bne.n	8003a48 <__iar_annotation$$branch+0x56>
 8003a2c:	2014      	movs	r0, #20
 8003a2e:	4669      	mov	r1, sp
 8003a30:	7308      	strb	r0, [r1, #12]
 8003a32:	0020      	movs	r0, r4
 8003a34:	f7fc ff8f 	bl	8000956 <PE_Clear_RxEvent>
 8003a38:	2000      	movs	r0, #0
 8003a3a:	9000      	str	r0, [sp, #0]
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	2203      	movs	r2, #3
 8003a40:	2100      	movs	r1, #0
 8003a42:	0020      	movs	r0, r4
 8003a44:	f7fd fd64 	bl	8001510 <PE_Send_CtrlMessage>
 8003a48:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
 8003a4a:	03a9      	lsls	r1, r5, #14
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	d106      	bne.n	8003a5e <__iar_annotation$$branch+0x6c>
 8003a50:	2092      	movs	r0, #146	; 0x92
 8003a52:	e582      	b.n	800355a <__iar_annotation$$branch+0x69a>
 8003a54:	4668      	mov	r0, sp
 8003a56:	7b01      	ldrb	r1, [r0, #12]
 8003a58:	0020      	movs	r0, r4
 8003a5a:	f001 fc05 	bl	8005268 <PE_StateMachine_UVDM>
 8003a5e:	e59b      	b.n	8003598 <__iar_annotation$$branch+0x6d8>
 8003a60:	6960      	ldr	r0, [r4, #20]
 8003a62:	2701      	movs	r7, #1
 8003a64:	0b41      	lsrs	r1, r0, #13
 8003a66:	4039      	ands	r1, r7
 8003a68:	d019      	beq.n	8003a9e <__iar_annotation$$branch+0xac>
 8003a6a:	0b80      	lsrs	r0, r0, #14
 8003a6c:	4038      	ands	r0, r7
 8003a6e:	d007      	beq.n	8003a80 <__iar_annotation$$branch+0x8e>
 8003a70:	215b      	movs	r1, #91	; 0x5b
 8003a72:	7c20      	ldrb	r0, [r4, #16]
 8003a74:	f7fc fd04 	bl	8000480 <USBPD_PE_Notification>
 8003a78:	6960      	ldr	r0, [r4, #20]
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <.text_8>)
 8003a7c:	4001      	ands	r1, r0
 8003a7e:	6161      	str	r1, [r4, #20]
 8003a80:	2003      	movs	r0, #3
 8003a82:	7460      	strb	r0, [r4, #17]
 8003a84:	7ca1      	ldrb	r1, [r4, #18]
 8003a86:	2903      	cmp	r1, #3
 8003a88:	d008      	beq.n	8003a9c <__iar_annotation$$branch+0xaa>
 8003a8a:	74a0      	strb	r0, [r4, #18]
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2203      	movs	r2, #3
 8003a94:	7c21      	ldrb	r1, [r4, #16]
 8003a96:	2004      	movs	r0, #4
 8003a98:	6835      	ldr	r5, [r6, #0]
 8003a9a:	47a8      	blx	r5
 8003a9c:	2501      	movs	r5, #1
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	491f      	ldr	r1, [pc, #124]	; (8003b20 <.text_9>)
 8003aa2:	4001      	ands	r1, r0
 8003aa4:	6161      	str	r1, [r4, #20]
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d101      	bne.n	8003aae <__iar_annotation$$branch>

08003aaa <__iar_annotation$$branch>:
 8003aaa:	f7ff f8c9 	bl	8002c40 <USBPD_PE_StateMachine_SRC+0xb4>

08003aae <__iar_annotation$$branch>:
 8003aae:	f7ff fa0b 	bl	8002ec8 <__iar_annotation$$branch+0x8>
	...

08003ab4 <.text_3>:
 8003ab4:	000081d6 	.word	0x000081d6

08003ab8 <PE_Send_SRCCapabilities>:
 8003ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003aba:	0004      	movs	r4, r0
 8003abc:	000d      	movs	r5, r1
 8003abe:	2000      	movs	r0, #0
 8003ac0:	9002      	str	r0, [sp, #8]
 8003ac2:	ab02      	add	r3, sp, #8
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <.text_10>)
 8003ac6:	1822      	adds	r2, r4, r0
 8003ac8:	2100      	movs	r1, #0
 8003aca:	7c20      	ldrb	r0, [r4, #16]
 8003acc:	68a6      	ldr	r6, [r4, #8]
 8003ace:	6976      	ldr	r6, [r6, #20]
 8003ad0:	47b0      	blx	r6
 8003ad2:	9802      	ldr	r0, [sp, #8]
 8003ad4:	1c80      	adds	r0, r0, #2
 8003ad6:	9002      	str	r0, [sp, #8]
 8003ad8:	2104      	movs	r1, #4
 8003ada:	9802      	ldr	r0, [sp, #8]
 8003adc:	f7fd fcb6 	bl	800144c <PE_CheckDataSizeFromGetDataInfo>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d113      	bne.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003ae4:	6860      	ldr	r0, [r4, #4]
 8003ae6:	6800      	ldr	r0, [r0, #0]
 8003ae8:	04c1      	lsls	r1, r0, #19
 8003aea:	0fc9      	lsrs	r1, r1, #31
 8003aec:	d00e      	beq.n	8003b0c <PE_Send_SRCCapabilities+0x54>
 8003aee:	9501      	str	r5, [sp, #4]
 8003af0:	9802      	ldr	r0, [sp, #8]
 8003af2:	b280      	uxth	r0, r0
 8003af4:	9000      	str	r0, [sp, #0]
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <.text_7>)
 8003af8:	1823      	adds	r3, r4, r0
 8003afa:	2201      	movs	r2, #1
 8003afc:	2100      	movs	r1, #0
 8003afe:	7c20      	ldrb	r0, [r4, #16]
 8003b00:	f001 fe54 	bl	80057ac <USBPD_PRL_SendMessage>
 8003b04:	2803      	cmp	r0, #3
 8003b06:	d0e7      	beq.n	8003ad8 <PE_Send_SRCCapabilities+0x20>
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	2010      	movs	r0, #16
 8003b0e:	e7fb      	b.n	8003b08 <PE_Send_SRCCapabilities+0x50>

08003b10 <.text_5>:
 8003b10:	20000000 	.word	0x20000000

08003b14 <.text_6>:
 8003b14:	00000267 	.word	0x00000267

08003b18 <.text_7>:
 8003b18:	00000263 	.word	0x00000263

08003b1c <.text_8>:
 8003b1c:	ffffbfff 	.word	0xffffbfff

08003b20 <.text_9>:
 8003b20:	ffffdfff 	.word	0xffffdfff

08003b24 <.text_10>:
 8003b24:	00000265 	.word	0x00000265

08003b28 <PE_StateMachine_VDMCable>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	0004      	movs	r4, r0
 8003b2e:	2502      	movs	r5, #2
 8003b30:	2607      	movs	r6, #7
 8003b32:	7c60      	ldrb	r0, [r4, #17]
 8003b34:	2805      	cmp	r0, #5
 8003b36:	d002      	beq.n	8003b3e <PE_StateMachine_VDMCable+0x16>
 8003b38:	289a      	cmp	r0, #154	; 0x9a
 8003b3a:	d072      	beq.n	8003c22 <PE_StateMachine_VDMCable+0xfa>
 8003b3c:	e127      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003b3e:	6860      	ldr	r0, [r4, #4]
 8003b40:	7800      	ldrb	r0, [r0, #0]
 8003b42:	0781      	lsls	r1, r0, #30
 8003b44:	0f89      	lsrs	r1, r1, #30
 8003b46:	0020      	movs	r0, r4
 8003b48:	f000 fa5e 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003b4c:	2094      	movs	r0, #148	; 0x94
 8003b4e:	0080      	lsls	r0, r0, #2
 8003b50:	5821      	ldr	r1, [r4, r0]
 8003b52:	201f      	movs	r0, #31
 8003b54:	4381      	bics	r1, r0
 8003b56:	488f      	ldr	r0, [pc, #572]	; (8003d94 <.text_3>)
 8003b58:	4308      	orrs	r0, r1
 8003b5a:	2194      	movs	r1, #148	; 0x94
 8003b5c:	0089      	lsls	r1, r1, #2
 8003b5e:	5060      	str	r0, [r4, r1]
 8003b60:	6861      	ldr	r1, [r4, #4]
 8003b62:	9100      	str	r1, [sp, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	9a00      	ldr	r2, [sp, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	0953      	lsrs	r3, r2, #5
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	4a8a      	ldr	r2, [pc, #552]	; (8003d98 <.text_4>)
 8003b70:	4002      	ands	r2, r0
 8003b72:	0358      	lsls	r0, r3, #13
 8003b74:	4310      	orrs	r0, r2
 8003b76:	22ff      	movs	r2, #255	; 0xff
 8003b78:	0612      	lsls	r2, r2, #24
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	2094      	movs	r0, #148	; 0x94
 8003b7e:	0080      	lsls	r0, r0, #2
 8003b80:	5022      	str	r2, [r4, r0]
 8003b82:	9800      	ldr	r0, [sp, #0]
 8003b84:	6800      	ldr	r0, [r0, #0]
 8003b86:	0880      	lsrs	r0, r0, #2
 8003b88:	4001      	ands	r1, r0
 8003b8a:	d003      	beq.n	8003b94 <PE_StateMachine_VDMCable+0x6c>
 8003b8c:	6960      	ldr	r0, [r4, #20]
 8003b8e:	0741      	lsls	r1, r0, #29
 8003b90:	0fc8      	lsrs	r0, r1, #31
 8003b92:	e000      	b.n	8003b96 <PE_StateMachine_VDMCable+0x6e>
 8003b94:	2002      	movs	r0, #2
 8003b96:	2194      	movs	r1, #148	; 0x94
 8003b98:	0089      	lsls	r1, r1, #2
 8003b9a:	1867      	adds	r7, r4, r1
 8003b9c:	9002      	str	r0, [sp, #8]
 8003b9e:	209a      	movs	r0, #154	; 0x9a
 8003ba0:	9001      	str	r0, [sp, #4]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	9000      	str	r0, [sp, #0]
 8003ba6:	003b      	movs	r3, r7
 8003ba8:	220f      	movs	r2, #15
 8003baa:	2101      	movs	r1, #1
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fd fcda 	bl	8001566 <PE_Send_DataMessage>
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	d109      	bne.n	8003bca <PE_StateMachine_VDMCable+0xa2>
 8003bb6:	6960      	ldr	r0, [r4, #20]
 8003bb8:	03e9      	lsls	r1, r5, #15
 8003bba:	4301      	orrs	r1, r0
 8003bbc:	6161      	str	r1, [r4, #20]
 8003bbe:	2051      	movs	r0, #81	; 0x51
 8003bc0:	7720      	strb	r0, [r4, #28]
 8003bc2:	4876      	ldr	r0, [pc, #472]	; (8003d9c <.text_5>)
 8003bc4:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bc6:	251e      	movs	r5, #30
 8003bc8:	e0e1      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003bca:	2809      	cmp	r0, #9
 8003bcc:	d0fc      	beq.n	8003bc8 <PE_StateMachine_VDMCable+0xa0>
 8003bce:	7cb8      	ldrb	r0, [r7, #18]
 8003bd0:	2815      	cmp	r0, #21
 8003bd2:	d202      	bcs.n	8003bda <PE_StateMachine_VDMCable+0xb2>
 8003bd4:	4872      	ldr	r0, [pc, #456]	; (8003da0 <.text_6>)
 8003bd6:	8460      	strh	r0, [r4, #34]	; 0x22
 8003bd8:	e00a      	b.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003bda:	68e0      	ldr	r0, [r4, #12]
 8003bdc:	6940      	ldr	r0, [r0, #20]
 8003bde:	9000      	str	r0, [sp, #0]
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d005      	beq.n	8003bf0 <PE_StateMachine_VDMCable+0xc8>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2205      	movs	r2, #5
 8003be8:	2101      	movs	r1, #1
 8003bea:	7c20      	ldrb	r0, [r4, #16]
 8003bec:	9f00      	ldr	r7, [sp, #0]
 8003bee:	47b8      	blx	r7
 8003bf0:	6860      	ldr	r0, [r4, #4]
 8003bf2:	6800      	ldr	r0, [r0, #0]
 8003bf4:	0a00      	lsrs	r0, r0, #8
 8003bf6:	4030      	ands	r0, r6
 8003bf8:	2803      	cmp	r0, #3
 8003bfa:	d100      	bne.n	8003bfe <PE_StateMachine_VDMCable+0xd6>
 8003bfc:	e0a4      	b.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003bfe:	4869      	ldr	r0, [pc, #420]	; (8003da4 <.text_7>)
 8003c00:	8be1      	ldrh	r1, [r4, #30]
 8003c02:	4201      	tst	r1, r0
 8003c04:	d00b      	beq.n	8003c1e <PE_StateMachine_VDMCable+0xf6>
 8003c06:	2108      	movs	r1, #8
 8003c08:	7461      	strb	r1, [r4, #17]
 8003c0a:	8be1      	ldrh	r1, [r4, #30]
 8003c0c:	4001      	ands	r1, r0
 8003c0e:	292d      	cmp	r1, #45	; 0x2d
 8003c10:	d203      	bcs.n	8003c1a <PE_StateMachine_VDMCable+0xf2>
 8003c12:	8be1      	ldrh	r1, [r4, #30]
 8003c14:	0005      	movs	r5, r0
 8003c16:	400d      	ands	r5, r1
 8003c18:	e0b9      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1a:	252d      	movs	r5, #45	; 0x2d
 8003c1c:	e0b7      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c1e:	7466      	strb	r6, [r4, #17]
 8003c20:	e0b5      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003c22:	9101      	str	r1, [sp, #4]
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7fc fecf 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8003c2a:	4669      	mov	r1, sp
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8003c30:	2700      	movs	r7, #0
 8003c32:	221f      	movs	r2, #31
 8003c34:	9801      	ldr	r0, [sp, #4]
 8003c36:	7800      	ldrb	r0, [r0, #0]
 8003c38:	466b      	mov	r3, sp
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	d14f      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c40:	0bc8      	lsrs	r0, r1, #15
 8003c42:	d14d      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c44:	0b08      	lsrs	r0, r1, #12
 8003c46:	4230      	tst	r0, r6
 8003c48:	d04a      	beq.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	4008      	ands	r0, r1
 8003c4e:	280f      	cmp	r0, #15
 8003c50:	d146      	bne.n	8003ce0 <PE_StateMachine_VDMCable+0x1b8>
 8003c52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c54:	7880      	ldrb	r0, [r0, #2]
 8003c56:	9000      	str	r0, [sp, #0]
 8003c58:	4002      	ands	r2, r0
 8003c5a:	2a01      	cmp	r2, #1
 8003c5c:	d13b      	bne.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c5e:	0980      	lsrs	r0, r0, #6
 8003c60:	d039      	beq.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003c62:	0608      	lsls	r0, r1, #24
 8003c64:	0f81      	lsrs	r1, r0, #30
 8003c66:	0020      	movs	r0, r4
 8003c68:	f000 f9ce 	bl	8004008 <PE_ExtRevisionInteroperability_Cable>
 8003c6c:	68e0      	ldr	r0, [r4, #12]
 8003c6e:	6940      	ldr	r0, [r0, #20]
 8003c70:	2800      	cmp	r0, #0
 8003c72:	d023      	beq.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c74:	9800      	ldr	r0, [sp, #0]
 8003c76:	0985      	lsrs	r5, r0, #6
 8003c78:	07a8      	lsls	r0, r5, #30
 8003c7a:	0f80      	lsrs	r0, r0, #30
 8003c7c:	2801      	cmp	r0, #1
 8003c7e:	d11d      	bne.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003c80:	aa03      	add	r2, sp, #12
 8003c82:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003c84:	1d81      	adds	r1, r0, #6
 8003c86:	7c20      	ldrb	r0, [r4, #16]
 8003c88:	f001 fb9a 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d111      	bne.n	8003cb4 <PE_StateMachine_VDMCable+0x18c>
 8003c90:	ab03      	add	r3, sp, #12
 8003c92:	07aa      	lsls	r2, r5, #30
 8003c94:	0f92      	lsrs	r2, r2, #30
 8003c96:	2101      	movs	r1, #1
 8003c98:	7c20      	ldrb	r0, [r4, #16]
 8003c9a:	68e5      	ldr	r5, [r4, #12]
 8003c9c:	696d      	ldr	r5, [r5, #20]
 8003c9e:	47a8      	blx	r5
 8003ca0:	2152      	movs	r1, #82	; 0x52
 8003ca2:	7c20      	ldrb	r0, [r4, #16]
 8003ca4:	f7fc fbec 	bl	8000480 <USBPD_PE_Notification>
 8003ca8:	2014      	movs	r0, #20
 8003caa:	2194      	movs	r1, #148	; 0x94
 8003cac:	0089      	lsls	r1, r1, #2
 8003cae:	1861      	adds	r1, r4, r1
 8003cb0:	7488      	strb	r0, [r1, #18]
 8003cb2:	e003      	b.n	8003cbc <PE_StateMachine_VDMCable+0x194>
 8003cb4:	211b      	movs	r1, #27
 8003cb6:	7c20      	ldrb	r0, [r4, #16]
 8003cb8:	f7fc fbe2 	bl	8000480 <USBPD_PE_Notification>
 8003cbc:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cbe:	6860      	ldr	r0, [r4, #4]
 8003cc0:	6800      	ldr	r0, [r0, #0]
 8003cc2:	0a00      	lsrs	r0, r0, #8
 8003cc4:	4030      	ands	r0, r6
 8003cc6:	2803      	cmp	r0, #3
 8003cc8:	d102      	bne.n	8003cd0 <PE_StateMachine_VDMCable+0x1a8>
 8003cca:	7460      	strb	r0, [r4, #17]
 8003ccc:	2500      	movs	r5, #0
 8003cce:	e002      	b.n	8003cd6 <PE_StateMachine_VDMCable+0x1ae>
 8003cd0:	7466      	strb	r6, [r4, #17]
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	7727      	strb	r7, [r4, #28]
 8003cd6:	9801      	ldr	r0, [sp, #4]
 8003cd8:	7800      	ldrb	r0, [r0, #0]
 8003cda:	2814      	cmp	r0, #20
 8003cdc:	d119      	bne.n	8003d12 <PE_StateMachine_VDMCable+0x1ea>
 8003cde:	e056      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	2a10      	cmp	r2, #16
 8003ce6:	d11b      	bne.n	8003d20 <PE_StateMachine_VDMCable+0x1f8>
 8003ce8:	8467      	strh	r7, [r4, #34]	; 0x22
 8003cea:	6861      	ldr	r1, [r4, #4]
 8003cec:	6809      	ldr	r1, [r1, #0]
 8003cee:	0a09      	lsrs	r1, r1, #8
 8003cf0:	4031      	ands	r1, r6
 8003cf2:	2903      	cmp	r1, #3
 8003cf4:	d102      	bne.n	8003cfc <PE_StateMachine_VDMCable+0x1d4>
 8003cf6:	7460      	strb	r0, [r4, #17]
 8003cf8:	2500      	movs	r5, #0
 8003cfa:	e002      	b.n	8003d02 <PE_StateMachine_VDMCable+0x1da>
 8003cfc:	7466      	strb	r6, [r4, #17]
 8003cfe:	2500      	movs	r5, #0
 8003d00:	7727      	strb	r7, [r4, #28]
 8003d02:	2159      	movs	r1, #89	; 0x59
 8003d04:	7c20      	ldrb	r0, [r4, #16]
 8003d06:	f7fc fbbb 	bl	8000480 <USBPD_PE_Notification>
 8003d0a:	9801      	ldr	r0, [sp, #4]
 8003d0c:	7800      	ldrb	r0, [r0, #0]
 8003d0e:	2814      	cmp	r0, #20
 8003d10:	d03d      	beq.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d12:	2014      	movs	r0, #20
 8003d14:	9901      	ldr	r1, [sp, #4]
 8003d16:	7008      	strb	r0, [r1, #0]
 8003d18:	0020      	movs	r0, r4
 8003d1a:	f7fc fe1c 	bl	8000956 <PE_Clear_RxEvent>
 8003d1e:	e036      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d20:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8003d22:	03aa      	lsls	r2, r5, #14
 8003d24:	4291      	cmp	r1, r2
 8003d26:	d132      	bne.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d28:	8467      	strh	r7, [r4, #34]	; 0x22
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	680a      	ldr	r2, [r1, #0]
 8003d2e:	0a13      	lsrs	r3, r2, #8
 8003d30:	4033      	ands	r3, r6
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d10c      	bne.n	8003d50 <PE_StateMachine_VDMCable+0x228>
 8003d36:	68e0      	ldr	r0, [r4, #12]
 8003d38:	6945      	ldr	r5, [r0, #20]
 8003d3a:	2d00      	cmp	r5, #0
 8003d3c:	d004      	beq.n	8003d48 <PE_StateMachine_VDMCable+0x220>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2204      	movs	r2, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	7c20      	ldrb	r0, [r4, #16]
 8003d46:	47a8      	blx	r5
 8003d48:	2003      	movs	r0, #3
 8003d4a:	7460      	strb	r0, [r4, #17]
 8003d4c:	2500      	movs	r5, #0
 8003d4e:	e01e      	b.n	8003d8e <PE_StateMachine_VDMCable+0x266>
 8003d50:	0e93      	lsrs	r3, r2, #26
 8003d52:	4018      	ands	r0, r3
 8003d54:	2802      	cmp	r0, #2
 8003d56:	d10e      	bne.n	8003d76 <PE_StateMachine_VDMCable+0x24e>
 8003d58:	48b7      	ldr	r0, [pc, #732]	; (8004038 <.text_10>)
 8003d5a:	4010      	ands	r0, r2
 8003d5c:	066a      	lsls	r2, r5, #25
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	600a      	str	r2, [r1, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	7c20      	ldrb	r0, [r4, #16]
 8003d66:	f001 fcea 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8003d6a:	480d      	ldr	r0, [pc, #52]	; (8003da0 <.text_6>)
 8003d6c:	8460      	strh	r0, [r4, #34]	; 0x22
 8003d6e:	252d      	movs	r5, #45	; 0x2d
 8003d70:	2008      	movs	r0, #8
 8003d72:	7460      	strb	r0, [r4, #17]
 8003d74:	e00a      	b.n	8003d8c <PE_StateMachine_VDMCable+0x264>
 8003d76:	68e0      	ldr	r0, [r4, #12]
 8003d78:	6945      	ldr	r5, [r0, #20]
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	d004      	beq.n	8003d88 <PE_StateMachine_VDMCable+0x260>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2204      	movs	r2, #4
 8003d82:	2101      	movs	r1, #1
 8003d84:	7c20      	ldrb	r0, [r4, #16]
 8003d86:	47a8      	blx	r5
 8003d88:	7466      	strb	r6, [r4, #17]
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	7727      	strb	r7, [r4, #28]
 8003d8e:	0028      	movs	r0, r5
 8003d90:	b00d      	add	sp, #52	; 0x34
 8003d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d94 <.text_3>:
 8003d94:	00008001 	.word	0x00008001

08003d98 <.text_4>:
 8003d98:	0000983f 	.word	0x0000983f

08003d9c <.text_5>:
 8003d9c:	0000801e 	.word	0x0000801e

08003da0 <.text_6>:
 8003da0:	0000802d 	.word	0x0000802d

08003da4 <.text_7>:
 8003da4:	00007fff 	.word	0x00007fff

08003da8 <PE_SubStateMachine_VconnSwap>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	0004      	movs	r4, r0
 8003dac:	2502      	movs	r5, #2
 8003dae:	2703      	movs	r7, #3
 8003db0:	4ea2      	ldr	r6, [pc, #648]	; (800403c <.text_11>)
 8003db2:	2014      	movs	r0, #20
 8003db4:	7c62      	ldrb	r2, [r4, #17]
 8003db6:	2a9d      	cmp	r2, #157	; 0x9d
 8003db8:	d010      	beq.n	8003ddc <PE_SubStateMachine_VconnSwap+0x34>
 8003dba:	d30e      	bcc.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dbc:	2a9f      	cmp	r2, #159	; 0x9f
 8003dbe:	d057      	beq.n	8003e70 <PE_SubStateMachine_VconnSwap+0xc8>
 8003dc0:	d33d      	bcc.n	8003e3e <PE_SubStateMachine_VconnSwap+0x96>
 8003dc2:	2aa1      	cmp	r2, #161	; 0xa1
 8003dc4:	d100      	bne.n	8003dc8 <PE_SubStateMachine_VconnSwap+0x20>
 8003dc6:	e085      	b.n	8003ed4 <PE_SubStateMachine_VconnSwap+0x12c>
 8003dc8:	d377      	bcc.n	8003eba <PE_SubStateMachine_VconnSwap+0x112>
 8003dca:	2aa3      	cmp	r2, #163	; 0xa3
 8003dcc:	d100      	bne.n	8003dd0 <PE_SubStateMachine_VconnSwap+0x28>
 8003dce:	e0a3      	b.n	8003f18 <PE_SubStateMachine_VconnSwap+0x170>
 8003dd0:	d200      	bcs.n	8003dd4 <PE_SubStateMachine_VconnSwap+0x2c>
 8003dd2:	e08e      	b.n	8003ef2 <PE_SubStateMachine_VconnSwap+0x14a>
 8003dd4:	2aa4      	cmp	r2, #164	; 0xa4
 8003dd6:	d100      	bne.n	8003dda <PE_SubStateMachine_VconnSwap+0x32>
 8003dd8:	e106      	b.n	8003fe8 <PE_SubStateMachine_VconnSwap+0x240>
 8003dda:	e113      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ddc:	6860      	ldr	r0, [r4, #4]
 8003dde:	6800      	ldr	r0, [r0, #0]
 8003de0:	21b8      	movs	r1, #184	; 0xb8
 8003de2:	0149      	lsls	r1, r1, #5
 8003de4:	4001      	ands	r1, r0
 8003de6:	2098      	movs	r0, #152	; 0x98
 8003de8:	0140      	lsls	r0, r0, #5
 8003dea:	4281      	cmp	r1, r0
 8003dec:	d121      	bne.n	8003e32 <PE_SubStateMachine_VconnSwap+0x8a>
 8003dee:	7c20      	ldrb	r0, [r4, #16]
 8003df0:	68a1      	ldr	r1, [r4, #8]
 8003df2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003df4:	4788      	blx	r1
 8003df6:	280a      	cmp	r0, #10
 8003df8:	d002      	beq.n	8003e00 <PE_SubStateMachine_VconnSwap+0x58>
 8003dfa:	280d      	cmp	r0, #13
 8003dfc:	d007      	beq.n	8003e0e <PE_SubStateMachine_VconnSwap+0x66>
 8003dfe:	e00f      	b.n	8003e20 <PE_SubStateMachine_VconnSwap+0x78>
 8003e00:	209e      	movs	r0, #158	; 0x9e
 8003e02:	7460      	strb	r0, [r4, #17]
 8003e04:	6960      	ldr	r0, [r4, #20]
 8003e06:	02e9      	lsls	r1, r5, #11
 8003e08:	4301      	orrs	r1, r0
 8003e0a:	6161      	str	r1, [r4, #20]
 8003e0c:	e0fa      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	9000      	str	r0, [sp, #0]
 8003e12:	2303      	movs	r3, #3
 8003e14:	220c      	movs	r2, #12
 8003e16:	2100      	movs	r1, #0
 8003e18:	0020      	movs	r0, r4
 8003e1a:	f7fd fb79 	bl	8001510 <PE_Send_CtrlMessage>
 8003e1e:	e0f1      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e20:	2000      	movs	r0, #0
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	2303      	movs	r3, #3
 8003e26:	2204      	movs	r2, #4
 8003e28:	2100      	movs	r1, #0
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	f7fd fb70 	bl	8001510 <PE_Send_CtrlMessage>
 8003e30:	e002      	b.n	8003e38 <PE_SubStateMachine_VconnSwap+0x90>
 8003e32:	6960      	ldr	r0, [r4, #20]
 8003e34:	4006      	ands	r6, r0
 8003e36:	6166      	str	r6, [r4, #20]
 8003e38:	7467      	strb	r7, [r4, #17]
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	e0e2      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003e3e:	2000      	movs	r0, #0
 8003e40:	9000      	str	r0, [sp, #0]
 8003e42:	239e      	movs	r3, #158	; 0x9e
 8003e44:	2203      	movs	r2, #3
 8003e46:	2100      	movs	r1, #0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f7fd fb61 	bl	8001510 <PE_Send_CtrlMessage>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d1f4      	bne.n	8003e3c <PE_SubStateMachine_VconnSwap+0x94>
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	0401      	lsls	r1, r0, #16
 8003e58:	0fc9      	lsrs	r1, r1, #31
 8003e5a:	d005      	beq.n	8003e68 <PE_SubStateMachine_VconnSwap+0xc0>
 8003e5c:	209f      	movs	r0, #159	; 0x9f
 8003e5e:	7460      	strb	r0, [r4, #17]
 8003e60:	4877      	ldr	r0, [pc, #476]	; (8004040 <.text_12>)
 8003e62:	83e0      	strh	r0, [r4, #30]
 8003e64:	2596      	movs	r5, #150	; 0x96
 8003e66:	e001      	b.n	8003e6c <PE_SubStateMachine_VconnSwap+0xc4>
 8003e68:	20a0      	movs	r0, #160	; 0xa0
 8003e6a:	7460      	strb	r0, [r4, #17]
 8003e6c:	213f      	movs	r1, #63	; 0x3f
 8003e6e:	e0b7      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003e70:	8be2      	ldrh	r2, [r4, #30]
 8003e72:	03ab      	lsls	r3, r5, #14
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d100      	bne.n	8003e7a <PE_SubStateMachine_VconnSwap+0xd2>
 8003e78:	e0ac      	b.n	8003fd4 <PE_SubStateMachine_VconnSwap+0x22c>
 8003e7a:	780a      	ldrb	r2, [r1, #0]
 8003e7c:	2a11      	cmp	r2, #17
 8003e7e:	d11b      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e80:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003e82:	4b70      	ldr	r3, [pc, #448]	; (8004044 <.text_13>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d116      	bne.n	8003eb8 <PE_SubStateMachine_VconnSwap+0x110>
 8003e8a:	7008      	strb	r0, [r1, #0]
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	f7fc fd62 	bl	8000956 <PE_Clear_RxEvent>
 8003e92:	68a0      	ldr	r0, [r4, #8]
 8003e94:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d002      	beq.n	8003ea0 <PE_SubStateMachine_VconnSwap+0xf8>
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	7c20      	ldrb	r0, [r4, #16]
 8003e9e:	4790      	blx	r2
 8003ea0:	6960      	ldr	r0, [r4, #20]
 8003ea2:	4006      	ands	r6, r0
 8003ea4:	6166      	str	r6, [r4, #20]
 8003ea6:	7467      	strb	r7, [r4, #17]
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	2142      	movs	r1, #66	; 0x42
 8003eac:	7c20      	ldrb	r0, [r4, #16]
 8003eae:	f7fc fae7 	bl	8000480 <USBPD_PE_Notification>
 8003eb2:	8465      	strh	r5, [r4, #34]	; 0x22
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <.text_14>)
 8003eb6:	5465      	strb	r5, [r4, r1]
 8003eb8:	e0a4      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003eba:	68a0      	ldr	r0, [r4, #8]
 8003ebc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d002      	beq.n	8003ec8 <PE_SubStateMachine_VconnSwap+0x120>
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	7c20      	ldrb	r0, [r4, #16]
 8003ec6:	4790      	blx	r2
 8003ec8:	20a1      	movs	r0, #161	; 0xa1
 8003eca:	7460      	strb	r0, [r4, #17]
 8003ecc:	2000      	movs	r0, #0
 8003ece:	495e      	ldr	r1, [pc, #376]	; (8004048 <.text_14>)
 8003ed0:	5460      	strb	r0, [r4, r1]
 8003ed2:	e097      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	2206      	movs	r2, #6
 8003edc:	2100      	movs	r1, #0
 8003ede:	0020      	movs	r0, r4
 8003ee0:	f7fd fb16 	bl	8001510 <PE_Send_CtrlMessage>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d1f4      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003ee8:	6960      	ldr	r0, [r4, #20]
 8003eea:	4006      	ands	r6, r0
 8003eec:	6166      	str	r6, [r4, #20]
 8003eee:	2142      	movs	r1, #66	; 0x42
 8003ef0:	e076      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	9000      	str	r0, [sp, #0]
 8003ef6:	23a3      	movs	r3, #163	; 0xa3
 8003ef8:	220b      	movs	r2, #11
 8003efa:	2100      	movs	r1, #0
 8003efc:	0020      	movs	r0, r4
 8003efe:	f7fd fb07 	bl	8001510 <PE_Send_CtrlMessage>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1e5      	bne.n	8003ed2 <PE_SubStateMachine_VconnSwap+0x12a>
 8003f06:	6960      	ldr	r0, [r4, #20]
 8003f08:	02e9      	lsls	r1, r5, #11
 8003f0a:	4301      	orrs	r1, r0
 8003f0c:	6161      	str	r1, [r4, #20]
 8003f0e:	484f      	ldr	r0, [pc, #316]	; (800404c <.text_15>)
 8003f10:	83e0      	strh	r0, [r4, #30]
 8003f12:	251b      	movs	r5, #27
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	e063      	b.n	8003fe0 <PE_SubStateMachine_VconnSwap+0x238>
 8003f18:	780a      	ldrb	r2, [r1, #0]
 8003f1a:	2a11      	cmp	r2, #17
 8003f1c:	d155      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f1e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8003f20:	23f0      	movs	r3, #240	; 0xf0
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	4013      	ands	r3, r2
 8003f26:	d150      	bne.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f28:	06d2      	lsls	r2, r2, #27
 8003f2a:	0ed2      	lsrs	r2, r2, #27
 8003f2c:	2a03      	cmp	r2, #3
 8003f2e:	d006      	beq.n	8003f3e <PE_SubStateMachine_VconnSwap+0x196>
 8003f30:	2a04      	cmp	r2, #4
 8003f32:	d024      	beq.n	8003f7e <PE_SubStateMachine_VconnSwap+0x1d6>
 8003f34:	2a0c      	cmp	r2, #12
 8003f36:	d014      	beq.n	8003f62 <PE_SubStateMachine_VconnSwap+0x1ba>
 8003f38:	2a10      	cmp	r2, #16
 8003f3a:	d02e      	beq.n	8003f9a <PE_SubStateMachine_VconnSwap+0x1f2>
 8003f3c:	e045      	b.n	8003fca <PE_SubStateMachine_VconnSwap+0x222>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	0413      	lsls	r3, r2, #16
 8003f44:	0fdb      	lsrs	r3, r3, #31
 8003f46:	d001      	beq.n	8003f4c <PE_SubStateMachine_VconnSwap+0x1a4>
 8003f48:	229f      	movs	r2, #159	; 0x9f
 8003f4a:	e000      	b.n	8003f4e <PE_SubStateMachine_VconnSwap+0x1a6>
 8003f4c:	22a0      	movs	r2, #160	; 0xa0
 8003f4e:	7462      	strb	r2, [r4, #17]
 8003f50:	780a      	ldrb	r2, [r1, #0]
 8003f52:	2a14      	cmp	r2, #20
 8003f54:	d003      	beq.n	8003f5e <PE_SubStateMachine_VconnSwap+0x1b6>
 8003f56:	7008      	strb	r0, [r1, #0]
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f7fc fcfc 	bl	8000956 <PE_Clear_RxEvent>
 8003f5e:	213f      	movs	r1, #63	; 0x3f
 8003f60:	e030      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f62:	6962      	ldr	r2, [r4, #20]
 8003f64:	4032      	ands	r2, r6
 8003f66:	6162      	str	r2, [r4, #20]
 8003f68:	7467      	strb	r7, [r4, #17]
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	780a      	ldrb	r2, [r1, #0]
 8003f6e:	2a14      	cmp	r2, #20
 8003f70:	d003      	beq.n	8003f7a <PE_SubStateMachine_VconnSwap+0x1d2>
 8003f72:	7008      	strb	r0, [r1, #0]
 8003f74:	0020      	movs	r0, r4
 8003f76:	f7fc fcee 	bl	8000956 <PE_Clear_RxEvent>
 8003f7a:	2140      	movs	r1, #64	; 0x40
 8003f7c:	e022      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f7e:	6962      	ldr	r2, [r4, #20]
 8003f80:	4032      	ands	r2, r6
 8003f82:	6162      	str	r2, [r4, #20]
 8003f84:	7467      	strb	r7, [r4, #17]
 8003f86:	2500      	movs	r5, #0
 8003f88:	780a      	ldrb	r2, [r1, #0]
 8003f8a:	2a14      	cmp	r2, #20
 8003f8c:	d003      	beq.n	8003f96 <PE_SubStateMachine_VconnSwap+0x1ee>
 8003f8e:	7008      	strb	r0, [r1, #0]
 8003f90:	0020      	movs	r0, r4
 8003f92:	f7fc fce0 	bl	8000956 <PE_Clear_RxEvent>
 8003f96:	2141      	movs	r1, #65	; 0x41
 8003f98:	e014      	b.n	8003fc4 <PE_SubStateMachine_VconnSwap+0x21c>
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	0413      	lsls	r3, r2, #16
 8003fa0:	0fdb      	lsrs	r3, r3, #31
 8003fa2:	d102      	bne.n	8003faa <PE_SubStateMachine_VconnSwap+0x202>
 8003fa4:	22a4      	movs	r2, #164	; 0xa4
 8003fa6:	7462      	strb	r2, [r4, #17]
 8003fa8:	e004      	b.n	8003fb4 <PE_SubStateMachine_VconnSwap+0x20c>
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4032      	ands	r2, r6
 8003fae:	6162      	str	r2, [r4, #20]
 8003fb0:	7467      	strb	r7, [r4, #17]
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	780a      	ldrb	r2, [r1, #0]
 8003fb6:	2a14      	cmp	r2, #20
 8003fb8:	d003      	beq.n	8003fc2 <PE_SubStateMachine_VconnSwap+0x21a>
 8003fba:	7008      	strb	r0, [r1, #0]
 8003fbc:	0020      	movs	r0, r4
 8003fbe:	f7fc fcca 	bl	8000956 <PE_Clear_RxEvent>
 8003fc2:	2143      	movs	r1, #67	; 0x43
 8003fc4:	7c20      	ldrb	r0, [r4, #16]
 8003fc6:	f7fc fa5b 	bl	8000480 <USBPD_PE_Notification>
 8003fca:	8be0      	ldrh	r0, [r4, #30]
 8003fcc:	2180      	movs	r1, #128	; 0x80
 8003fce:	0209      	lsls	r1, r1, #8
 8003fd0:	4288      	cmp	r0, r1
 8003fd2:	d117      	bne.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fd4:	6960      	ldr	r0, [r4, #20]
 8003fd6:	4006      	ands	r6, r0
 8003fd8:	6166      	str	r6, [r4, #20]
 8003fda:	7467      	strb	r7, [r4, #17]
 8003fdc:	2500      	movs	r5, #0
 8003fde:	211c      	movs	r1, #28
 8003fe0:	7c20      	ldrb	r0, [r4, #16]
 8003fe2:	f7fc fa4d 	bl	8000480 <USBPD_PE_Notification>
 8003fe6:	e00d      	b.n	8004004 <PE_SubStateMachine_VconnSwap+0x25c>
 8003fe8:	68a0      	ldr	r0, [r4, #8]
 8003fea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003fec:	2a00      	cmp	r2, #0
 8003fee:	d002      	beq.n	8003ff6 <PE_SubStateMachine_VconnSwap+0x24e>
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	7c20      	ldrb	r0, [r4, #16]
 8003ff4:	4790      	blx	r2
 8003ff6:	6960      	ldr	r0, [r4, #20]
 8003ff8:	4006      	ands	r6, r0
 8003ffa:	6166      	str	r6, [r4, #20]
 8003ffc:	7467      	strb	r7, [r4, #17]
 8003ffe:	2500      	movs	r5, #0
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <.text_16>)
 8004002:	8460      	strh	r0, [r4, #34]	; 0x22
 8004004:	0028      	movs	r0, r5
 8004006:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004008 <PE_ExtRevisionInteroperability_Cable>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	000a      	movs	r2, r1
 800400c:	6843      	ldr	r3, [r0, #4]
 800400e:	681c      	ldr	r4, [r3, #0]
 8004010:	2103      	movs	r1, #3
 8004012:	2503      	movs	r5, #3
 8004014:	4025      	ands	r5, r4
 8004016:	42aa      	cmp	r2, r5
 8004018:	d300      	bcc.n	800401c <PE_ExtRevisionInteroperability_Cable+0x14>
 800401a:	002a      	movs	r2, r5
 800401c:	4d06      	ldr	r5, [pc, #24]	; (8004038 <.text_10>)
 800401e:	4025      	ands	r5, r4
 8004020:	0694      	lsls	r4, r2, #26
 8004022:	068a      	lsls	r2, r1, #26
 8004024:	4022      	ands	r2, r4
 8004026:	432a      	orrs	r2, r5
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	0e92      	lsrs	r2, r2, #26
 800402c:	4011      	ands	r1, r2
 800402e:	7c00      	ldrb	r0, [r0, #16]
 8004030:	f001 fb85 	bl	800573e <USBPD_PRL_CBL_SetHeaderSpecification>
 8004034:	bd31      	pop	{r0, r4, r5, pc}
	...

08004038 <.text_10>:
 8004038:	f3ffffff 	.word	0xf3ffffff

0800403c <.text_11>:
 800403c:	ffffefff 	.word	0xffffefff

08004040 <.text_12>:
 8004040:	00008096 	.word	0x00008096

08004044 <.text_13>:
 8004044:	0000f01f 	.word	0x0000f01f

08004048 <.text_14>:
 8004048:	00000262 	.word	0x00000262

0800404c <.text_15>:
 800404c:	0000801b 	.word	0x0000801b

08004050 <.text_16>:
 8004050:	0000802d 	.word	0x0000802d

08004054 <USBPD_PE_SVDM_RequestIdentity>:
 8004054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004056:	000a      	movs	r2, r1
 8004058:	49aa      	ldr	r1, [pc, #680]	; (8004304 <.text_8>)
 800405a:	0083      	lsls	r3, r0, #2
 800405c:	58cb      	ldr	r3, [r1, r3]
 800405e:	2110      	movs	r1, #16
 8004060:	2401      	movs	r4, #1
 8004062:	681d      	ldr	r5, [r3, #0]
 8004064:	686d      	ldr	r5, [r5, #4]
 8004066:	0a6d      	lsrs	r5, r5, #9
 8004068:	4025      	ands	r5, r4
 800406a:	d004      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 800406c:	68dd      	ldr	r5, [r3, #12]
 800406e:	2d00      	cmp	r5, #0
 8004070:	d001      	beq.n	8004076 <USBPD_PE_SVDM_RequestIdentity+0x22>
 8004072:	2a02      	cmp	r2, #2
 8004074:	d101      	bne.n	800407a <USBPD_PE_SVDM_RequestIdentity+0x26>
 8004076:	2102      	movs	r1, #2
 8004078:	e02d      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 800407a:	2532      	movs	r5, #50	; 0x32
 800407c:	5d5d      	ldrb	r5, [r3, r5]
 800407e:	2d00      	cmp	r5, #0
 8004080:	d104      	bne.n	800408c <USBPD_PE_SVDM_RequestIdentity+0x38>
 8004082:	685d      	ldr	r5, [r3, #4]
 8004084:	682d      	ldr	r5, [r5, #0]
 8004086:	0b2d      	lsrs	r5, r5, #12
 8004088:	402c      	ands	r4, r5
 800408a:	d101      	bne.n	8004090 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 800408c:	2103      	movs	r1, #3
 800408e:	e022      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004090:	2433      	movs	r4, #51	; 0x33
 8004092:	551a      	strb	r2, [r3, r4]
 8004094:	2507      	movs	r5, #7
 8004096:	2a00      	cmp	r2, #0
 8004098:	d002      	beq.n	80040a0 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 800409a:	2a01      	cmp	r2, #1
 800409c:	d008      	beq.n	80040b0 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 800409e:	e01a      	b.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0a12      	lsrs	r2, r2, #8
 80040a6:	4015      	ands	r5, r2
 80040a8:	2d03      	cmp	r5, #3
 80040aa:	d114      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040ac:	217d      	movs	r1, #125	; 0x7d
 80040ae:	e00c      	b.n	80040ca <USBPD_PE_SVDM_RequestIdentity+0x76>
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4eab      	ldr	r6, [pc, #684]	; (8004364 <.text_10>)
 80040b6:	4016      	ands	r6, r2
 80040b8:	2782      	movs	r7, #130	; 0x82
 80040ba:	007f      	lsls	r7, r7, #1
 80040bc:	42be      	cmp	r6, r7
 80040be:	d003      	beq.n	80040c8 <USBPD_PE_SVDM_RequestIdentity+0x74>
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	4015      	ands	r5, r2
 80040c4:	2d03      	cmp	r5, #3
 80040c6:	d106      	bne.n	80040d6 <USBPD_PE_SVDM_RequestIdentity+0x82>
 80040c8:	2105      	movs	r1, #5
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	5499      	strb	r1, [r3, r2]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d2:	4788      	blx	r1
 80040d4:	2100      	movs	r1, #0
 80040d6:	0008      	movs	r0, r1
 80040d8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080040da <USBPD_PE_SVDM_RequestSVID>:
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	000a      	movs	r2, r1
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <.text_8>)
 80040e0:	0083      	lsls	r3, r0, #2
 80040e2:	58cb      	ldr	r3, [r1, r3]
 80040e4:	2110      	movs	r1, #16
 80040e6:	68dc      	ldr	r4, [r3, #12]
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d001      	beq.n	80040f0 <USBPD_PE_SVDM_RequestSVID+0x16>
 80040ec:	2a02      	cmp	r2, #2
 80040ee:	d101      	bne.n	80040f4 <USBPD_PE_SVDM_RequestSVID+0x1a>
 80040f0:	2102      	movs	r1, #2
 80040f2:	e020      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 80040f4:	2432      	movs	r4, #50	; 0x32
 80040f6:	5d1c      	ldrb	r4, [r3, r4]
 80040f8:	2c00      	cmp	r4, #0
 80040fa:	d105      	bne.n	8004108 <USBPD_PE_SVDM_RequestSVID+0x2e>
 80040fc:	685c      	ldr	r4, [r3, #4]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	2401      	movs	r4, #1
 8004102:	0b2e      	lsrs	r6, r5, #12
 8004104:	4026      	ands	r6, r4
 8004106:	d101      	bne.n	800410c <USBPD_PE_SVDM_RequestSVID+0x32>
 8004108:	2103      	movs	r1, #3
 800410a:	e014      	b.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800410c:	056d      	lsls	r5, r5, #21
 800410e:	0f6d      	lsrs	r5, r5, #29
 8004110:	2d03      	cmp	r5, #3
 8004112:	d110      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004114:	2533      	movs	r5, #51	; 0x33
 8004116:	555a      	strb	r2, [r3, r5]
 8004118:	257f      	movs	r5, #127	; 0x7f
 800411a:	2632      	movs	r6, #50	; 0x32
 800411c:	559d      	strb	r5, [r3, r6]
 800411e:	2a00      	cmp	r2, #0
 8004120:	d005      	beq.n	800412e <USBPD_PE_SVDM_RequestSVID+0x54>
 8004122:	2a01      	cmp	r2, #1
 8004124:	d107      	bne.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	0c12      	lsrs	r2, r2, #16
 800412a:	4014      	ands	r4, r2
 800412c:	d003      	beq.n	8004136 <USBPD_PE_SVDM_RequestSVID+0x5c>
 800412e:	6899      	ldr	r1, [r3, #8]
 8004130:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004132:	4788      	blx	r1
 8004134:	2100      	movs	r1, #0
 8004136:	0008      	movs	r0, r1
 8004138:	bd70      	pop	{r4, r5, r6, pc}

0800413a <USBPD_PE_SVDM_RequestMode>:
 800413a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413c:	000b      	movs	r3, r1
 800413e:	4971      	ldr	r1, [pc, #452]	; (8004304 <.text_8>)
 8004140:	0084      	lsls	r4, r0, #2
 8004142:	590c      	ldr	r4, [r1, r4]
 8004144:	2110      	movs	r1, #16
 8004146:	68e5      	ldr	r5, [r4, #12]
 8004148:	2d00      	cmp	r5, #0
 800414a:	d001      	beq.n	8004150 <USBPD_PE_SVDM_RequestMode+0x16>
 800414c:	2b02      	cmp	r3, #2
 800414e:	d101      	bne.n	8004154 <USBPD_PE_SVDM_RequestMode+0x1a>
 8004150:	2102      	movs	r1, #2
 8004152:	e023      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004154:	2532      	movs	r5, #50	; 0x32
 8004156:	5d65      	ldrb	r5, [r4, r5]
 8004158:	2d00      	cmp	r5, #0
 800415a:	d105      	bne.n	8004168 <USBPD_PE_SVDM_RequestMode+0x2e>
 800415c:	6865      	ldr	r5, [r4, #4]
 800415e:	682e      	ldr	r6, [r5, #0]
 8004160:	2501      	movs	r5, #1
 8004162:	0b37      	lsrs	r7, r6, #12
 8004164:	402f      	ands	r7, r5
 8004166:	d101      	bne.n	800416c <USBPD_PE_SVDM_RequestMode+0x32>
 8004168:	2103      	movs	r1, #3
 800416a:	e017      	b.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800416c:	0576      	lsls	r6, r6, #21
 800416e:	0f76      	lsrs	r6, r6, #29
 8004170:	2e03      	cmp	r6, #3
 8004172:	d113      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004174:	2633      	movs	r6, #51	; 0x33
 8004176:	55a3      	strb	r3, [r4, r6]
 8004178:	2681      	movs	r6, #129	; 0x81
 800417a:	2732      	movs	r7, #50	; 0x32
 800417c:	55e6      	strb	r6, [r4, r7]
 800417e:	2696      	movs	r6, #150	; 0x96
 8004180:	00b6      	lsls	r6, r6, #2
 8004182:	53a2      	strh	r2, [r4, r6]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <USBPD_PE_SVDM_RequestMode+0x5a>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 800418c:	6962      	ldr	r2, [r4, #20]
 800418e:	0c12      	lsrs	r2, r2, #16
 8004190:	4015      	ands	r5, r2
 8004192:	d003      	beq.n	800419c <USBPD_PE_SVDM_RequestMode+0x62>
 8004194:	68a1      	ldr	r1, [r4, #8]
 8004196:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004198:	4788      	blx	r1
 800419a:	2100      	movs	r1, #0
 800419c:	0008      	movs	r0, r1
 800419e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080041a0 <USBPD_PE_SVDM_RequestModeEnter>:
 80041a0:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80041a2:	4858      	ldr	r0, [pc, #352]	; (8004304 <.text_8>)
 80041a4:	466c      	mov	r4, sp
 80041a6:	7824      	ldrb	r4, [r4, #0]
 80041a8:	00a4      	lsls	r4, r4, #2
 80041aa:	5904      	ldr	r4, [r0, r4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	68e5      	ldr	r5, [r4, #12]
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d101      	bne.n	80041b8 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 80041b4:	2002      	movs	r0, #2
 80041b6:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041b8:	2532      	movs	r5, #50	; 0x32
 80041ba:	5d65      	ldrb	r5, [r4, r5]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d105      	bne.n	80041cc <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 80041c0:	6865      	ldr	r5, [r4, #4]
 80041c2:	682e      	ldr	r6, [r5, #0]
 80041c4:	2501      	movs	r5, #1
 80041c6:	0b37      	lsrs	r7, r6, #12
 80041c8:	402f      	ands	r7, r5
 80041ca:	d101      	bne.n	80041d0 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 80041cc:	2003      	movs	r0, #3
 80041ce:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80041d0:	27e1      	movs	r7, #225	; 0xe1
 80041d2:	00ff      	lsls	r7, r7, #3
 80041d4:	4037      	ands	r7, r6
 80041d6:	26c2      	movs	r6, #194	; 0xc2
 80041d8:	00b6      	lsls	r6, r6, #2
 80041da:	42b7      	cmp	r7, r6
 80041dc:	d11e      	bne.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 80041de:	2633      	movs	r6, #51	; 0x33
 80041e0:	55a1      	strb	r1, [r4, r6]
 80041e2:	2682      	movs	r6, #130	; 0x82
 80041e4:	2732      	movs	r7, #50	; 0x32
 80041e6:	55e6      	strb	r6, [r4, r7]
 80041e8:	2696      	movs	r6, #150	; 0x96
 80041ea:	00b6      	lsls	r6, r6, #2
 80041ec:	53a2      	strh	r2, [r4, r6]
 80041ee:	6966      	ldr	r6, [r4, #20]
 80041f0:	4aaf      	ldr	r2, [pc, #700]	; (80044b0 <.text_13>)
 80041f2:	4032      	ands	r2, r6
 80041f4:	019e      	lsls	r6, r3, #6
 80041f6:	23e0      	movs	r3, #224	; 0xe0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4033      	ands	r3, r6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	6163      	str	r3, [r4, #20]
 8004200:	2900      	cmp	r1, #0
 8004202:	d005      	beq.n	8004210 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 8004204:	2902      	cmp	r1, #2
 8004206:	d000      	beq.n	800420a <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004208:	d208      	bcs.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 800420a:	0c19      	lsrs	r1, r3, #16
 800420c:	400d      	ands	r5, r1
 800420e:	d005      	beq.n	800421c <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004210:	4668      	mov	r0, sp
 8004212:	7800      	ldrb	r0, [r0, #0]
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004218:	4788      	blx	r1
 800421a:	2000      	movs	r0, #0
 800421c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800421e <USBPD_PE_SVDM_RequestModeExit>:
 800421e:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004220:	4838      	ldr	r0, [pc, #224]	; (8004304 <.text_8>)
 8004222:	466c      	mov	r4, sp
 8004224:	7824      	ldrb	r4, [r4, #0]
 8004226:	00a4      	lsls	r4, r4, #2
 8004228:	5904      	ldr	r4, [r0, r4]
 800422a:	2010      	movs	r0, #16
 800422c:	68e5      	ldr	r5, [r4, #12]
 800422e:	2d00      	cmp	r5, #0
 8004230:	d101      	bne.n	8004236 <USBPD_PE_SVDM_RequestModeExit+0x18>
 8004232:	2002      	movs	r0, #2
 8004234:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004236:	2532      	movs	r5, #50	; 0x32
 8004238:	5d65      	ldrb	r5, [r4, r5]
 800423a:	2d00      	cmp	r5, #0
 800423c:	d105      	bne.n	800424a <USBPD_PE_SVDM_RequestModeExit+0x2c>
 800423e:	6865      	ldr	r5, [r4, #4]
 8004240:	682e      	ldr	r6, [r5, #0]
 8004242:	2501      	movs	r5, #1
 8004244:	0b37      	lsrs	r7, r6, #12
 8004246:	402f      	ands	r7, r5
 8004248:	d101      	bne.n	800424e <USBPD_PE_SVDM_RequestModeExit+0x30>
 800424a:	2003      	movs	r0, #3
 800424c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800424e:	27e1      	movs	r7, #225	; 0xe1
 8004250:	00ff      	lsls	r7, r7, #3
 8004252:	4037      	ands	r7, r6
 8004254:	26c2      	movs	r6, #194	; 0xc2
 8004256:	00b6      	lsls	r6, r6, #2
 8004258:	42b7      	cmp	r7, r6
 800425a:	d11e      	bne.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800425c:	2633      	movs	r6, #51	; 0x33
 800425e:	55a1      	strb	r1, [r4, r6]
 8004260:	2683      	movs	r6, #131	; 0x83
 8004262:	2732      	movs	r7, #50	; 0x32
 8004264:	55e6      	strb	r6, [r4, r7]
 8004266:	2696      	movs	r6, #150	; 0x96
 8004268:	00b6      	lsls	r6, r6, #2
 800426a:	53a2      	strh	r2, [r4, r6]
 800426c:	6966      	ldr	r6, [r4, #20]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <.text_13>)
 8004270:	4032      	ands	r2, r6
 8004272:	019e      	lsls	r6, r3, #6
 8004274:	23e0      	movs	r3, #224	; 0xe0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4033      	ands	r3, r6
 800427a:	4313      	orrs	r3, r2
 800427c:	6163      	str	r3, [r4, #20]
 800427e:	2900      	cmp	r1, #0
 8004280:	d005      	beq.n	800428e <USBPD_PE_SVDM_RequestModeExit+0x70>
 8004282:	2902      	cmp	r1, #2
 8004284:	d000      	beq.n	8004288 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 8004286:	d208      	bcs.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 8004288:	0c19      	lsrs	r1, r3, #16
 800428a:	400d      	ands	r5, r1
 800428c:	d005      	beq.n	800429a <USBPD_PE_SVDM_RequestModeExit+0x7c>
 800428e:	4668      	mov	r0, sp
 8004290:	7800      	ldrb	r0, [r0, #0]
 8004292:	68a1      	ldr	r1, [r4, #8]
 8004294:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8004296:	4788      	blx	r1
 8004298:	2000      	movs	r0, #0
 800429a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800429c <USBPD_PE_SVDM_RequestSpecific>:
 800429c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800429e:	4819      	ldr	r0, [pc, #100]	; (8004304 <.text_8>)
 80042a0:	466c      	mov	r4, sp
 80042a2:	7824      	ldrb	r4, [r4, #0]
 80042a4:	00a4      	lsls	r4, r4, #2
 80042a6:	5904      	ldr	r4, [r0, r4]
 80042a8:	2010      	movs	r0, #16
 80042aa:	68e5      	ldr	r5, [r4, #12]
 80042ac:	2d00      	cmp	r5, #0
 80042ae:	d101      	bne.n	80042b4 <USBPD_PE_SVDM_RequestSpecific+0x18>
 80042b0:	2002      	movs	r0, #2
 80042b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042b4:	2532      	movs	r5, #50	; 0x32
 80042b6:	5d65      	ldrb	r5, [r4, r5]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d105      	bne.n	80042c8 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 80042bc:	6865      	ldr	r5, [r4, #4]
 80042be:	682d      	ldr	r5, [r5, #0]
 80042c0:	2601      	movs	r6, #1
 80042c2:	0b2f      	lsrs	r7, r5, #12
 80042c4:	4037      	ands	r7, r6
 80042c6:	d101      	bne.n	80042cc <USBPD_PE_SVDM_RequestSpecific+0x30>
 80042c8:	2003      	movs	r0, #3
 80042ca:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80042cc:	6967      	ldr	r7, [r4, #20]
 80042ce:	0c3f      	lsrs	r7, r7, #16
 80042d0:	403e      	ands	r6, r7
 80042d2:	d101      	bne.n	80042d8 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 80042d4:	000e      	movs	r6, r1
 80042d6:	d113      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042d8:	056d      	lsls	r5, r5, #21
 80042da:	0f6d      	lsrs	r5, r5, #29
 80042dc:	2d03      	cmp	r5, #3
 80042de:	d10f      	bne.n	8004300 <USBPD_PE_SVDM_RequestSpecific+0x64>
 80042e0:	2033      	movs	r0, #51	; 0x33
 80042e2:	5421      	strb	r1, [r4, r0]
 80042e4:	2085      	movs	r0, #133	; 0x85
 80042e6:	2132      	movs	r1, #50	; 0x32
 80042e8:	5460      	strb	r0, [r4, r1]
 80042ea:	2095      	movs	r0, #149	; 0x95
 80042ec:	0080      	lsls	r0, r0, #2
 80042ee:	1820      	adds	r0, r4, r0
 80042f0:	6002      	str	r2, [r0, #0]
 80042f2:	8083      	strh	r3, [r0, #4]
 80042f4:	4668      	mov	r0, sp
 80042f6:	7800      	ldrb	r0, [r0, #0]
 80042f8:	68a1      	ldr	r1, [r4, #8]
 80042fa:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80042fc:	4788      	blx	r1
 80042fe:	2000      	movs	r0, #0
 8004300:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08004304 <.text_8>:
 8004304:	2000053c 	.word	0x2000053c

08004308 <USBPD_PE_SVDM_RequestAttention>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	000b      	movs	r3, r1
 800430c:	4969      	ldr	r1, [pc, #420]	; (80044b4 <.text_14>)
 800430e:	0084      	lsls	r4, r0, #2
 8004310:	590d      	ldr	r5, [r1, r4]
 8004312:	2110      	movs	r1, #16
 8004314:	68ec      	ldr	r4, [r5, #12]
 8004316:	2c00      	cmp	r4, #0
 8004318:	d001      	beq.n	800431e <USBPD_PE_SVDM_RequestAttention+0x16>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <USBPD_PE_SVDM_RequestAttention+0x1a>
 800431e:	2102      	movs	r1, #2
 8004320:	e01e      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004322:	2332      	movs	r3, #50	; 0x32
 8004324:	5ceb      	ldrb	r3, [r5, r3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USBPD_PE_SVDM_RequestAttention+0x2c>
 800432a:	686b      	ldr	r3, [r5, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	04dc      	lsls	r4, r3, #19
 8004330:	0fe4      	lsrs	r4, r4, #31
 8004332:	d101      	bne.n	8004338 <USBPD_PE_SVDM_RequestAttention+0x30>
 8004334:	2103      	movs	r1, #3
 8004336:	e013      	b.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004338:	055b      	lsls	r3, r3, #21
 800433a:	0f5b      	lsrs	r3, r3, #29
 800433c:	2b03      	cmp	r3, #3
 800433e:	d10f      	bne.n	8004360 <USBPD_PE_SVDM_RequestAttention+0x58>
 8004340:	2400      	movs	r4, #0
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	54ec      	strb	r4, [r5, r3]
 8004346:	2184      	movs	r1, #132	; 0x84
 8004348:	2332      	movs	r3, #50	; 0x32
 800434a:	54e9      	strb	r1, [r5, r3]
 800434c:	2195      	movs	r1, #149	; 0x95
 800434e:	0089      	lsls	r1, r1, #2
 8004350:	1869      	adds	r1, r5, r1
 8004352:	2306      	movs	r3, #6
 8004354:	600b      	str	r3, [r1, #0]
 8004356:	808a      	strh	r2, [r1, #4]
 8004358:	68a9      	ldr	r1, [r5, #8]
 800435a:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800435c:	4788      	blx	r1
 800435e:	2100      	movs	r1, #0
 8004360:	0008      	movs	r0, r1
 8004362:	bd32      	pop	{r1, r4, r5, pc}

08004364 <.text_10>:
 8004364:	00000704 	.word	0x00000704

08004368 <USBPD_PE_UVDM_RequestMessage>:
 8004368:	b570      	push	{r4, r5, r6, lr}
 800436a:	000a      	movs	r2, r1
 800436c:	4951      	ldr	r1, [pc, #324]	; (80044b4 <.text_14>)
 800436e:	0083      	lsls	r3, r0, #2
 8004370:	58cb      	ldr	r3, [r1, r3]
 8004372:	2110      	movs	r1, #16
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	2c00      	cmp	r4, #0
 8004378:	d101      	bne.n	800437e <USBPD_PE_UVDM_RequestMessage+0x16>
 800437a:	2102      	movs	r1, #2
 800437c:	e01d      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 800437e:	2432      	movs	r4, #50	; 0x32
 8004380:	5d1c      	ldrb	r4, [r3, r4]
 8004382:	2c00      	cmp	r4, #0
 8004384:	d105      	bne.n	8004392 <USBPD_PE_UVDM_RequestMessage+0x2a>
 8004386:	685c      	ldr	r4, [r3, #4]
 8004388:	6824      	ldr	r4, [r4, #0]
 800438a:	2501      	movs	r5, #1
 800438c:	0b26      	lsrs	r6, r4, #12
 800438e:	402e      	ands	r6, r5
 8004390:	d101      	bne.n	8004396 <USBPD_PE_UVDM_RequestMessage+0x2e>
 8004392:	2103      	movs	r1, #3
 8004394:	e011      	b.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 8004396:	0be6      	lsrs	r6, r4, #15
 8004398:	4035      	ands	r5, r6
 800439a:	d101      	bne.n	80043a0 <USBPD_PE_UVDM_RequestMessage+0x38>
 800439c:	0015      	movs	r5, r2
 800439e:	d10c      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a0:	0564      	lsls	r4, r4, #21
 80043a2:	0f64      	lsrs	r4, r4, #29
 80043a4:	2c03      	cmp	r4, #3
 80043a6:	d108      	bne.n	80043ba <USBPD_PE_UVDM_RequestMessage+0x52>
 80043a8:	2133      	movs	r1, #51	; 0x33
 80043aa:	545a      	strb	r2, [r3, r1]
 80043ac:	2186      	movs	r1, #134	; 0x86
 80043ae:	2232      	movs	r2, #50	; 0x32
 80043b0:	5499      	strb	r1, [r3, r2]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80043b6:	4788      	blx	r1
 80043b8:	2100      	movs	r1, #0
 80043ba:	0008      	movs	r0, r1
 80043bc:	bd70      	pop	{r4, r5, r6, pc}

080043be <PE_Receive_SVDM>:
 80043be:	493e      	ldr	r1, [pc, #248]	; (80044b8 <.text_15>)
 80043c0:	1842      	adds	r2, r0, r1
 80043c2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	0f49      	lsrs	r1, r1, #29
 80043c8:	1e49      	subs	r1, r1, #1
 80043ca:	7611      	strb	r1, [r2, #24]
 80043cc:	2131      	movs	r1, #49	; 0x31
 80043ce:	5c41      	ldrb	r1, [r0, r1]
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d000      	beq.n	80043d6 <PE_Receive_SVDM+0x18>
 80043d4:	4770      	bx	lr
 80043d6:	b570      	push	{r4, r5, r6, lr}
 80043d8:	2300      	movs	r3, #0
 80043da:	e010      	b.n	80043fe <PE_Receive_SVDM+0x40>
 80043dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80043de:	009c      	lsls	r4, r3, #2
 80043e0:	1909      	adds	r1, r1, r4
 80043e2:	798c      	ldrb	r4, [r1, #6]
 80043e4:	79cd      	ldrb	r5, [r1, #7]
 80043e6:	022d      	lsls	r5, r5, #8
 80043e8:	1964      	adds	r4, r4, r5
 80043ea:	7a0d      	ldrb	r5, [r1, #8]
 80043ec:	042d      	lsls	r5, r5, #16
 80043ee:	1964      	adds	r4, r4, r5
 80043f0:	7a49      	ldrb	r1, [r1, #9]
 80043f2:	0609      	lsls	r1, r1, #24
 80043f4:	1861      	adds	r1, r4, r1
 80043f6:	009c      	lsls	r4, r3, #2
 80043f8:	5111      	str	r1, [r2, r4]
 80043fa:	1c5b      	adds	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	7e11      	ldrb	r1, [r2, #24]
 8004400:	428b      	cmp	r3, r1
 8004402:	dbeb      	blt.n	80043dc <PE_Receive_SVDM+0x1e>
 8004404:	0004      	movs	r4, r0
 8004406:	2503      	movs	r5, #3
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <.text_16>)
 800440a:	482d      	ldr	r0, [pc, #180]	; (80044c0 <.text_17>)
 800440c:	2694      	movs	r6, #148	; 0x94
 800440e:	00b6      	lsls	r6, r6, #2
 8004410:	5da6      	ldrb	r6, [r4, r6]
 8004412:	06f6      	lsls	r6, r6, #27
 8004414:	0ef6      	lsrs	r6, r6, #27
 8004416:	1e76      	subs	r6, r6, #1
 8004418:	d00d      	beq.n	8004436 <PE_Receive_SVDM+0x78>
 800441a:	1e76      	subs	r6, r6, #1
 800441c:	d022      	beq.n	8004464 <PE_Receive_SVDM+0xa6>
 800441e:	1e76      	subs	r6, r6, #1
 8004420:	d025      	beq.n	800446e <PE_Receive_SVDM+0xb0>
 8004422:	1e76      	subs	r6, r6, #1
 8004424:	d028      	beq.n	8004478 <PE_Receive_SVDM+0xba>
 8004426:	1e76      	subs	r6, r6, #1
 8004428:	d02b      	beq.n	8004482 <PE_Receive_SVDM+0xc4>
 800442a:	1e76      	subs	r6, r6, #1
 800442c:	d02e      	beq.n	800448c <PE_Receive_SVDM+0xce>
 800442e:	3e0a      	subs	r6, #10
 8004430:	2e0f      	cmp	r6, #15
 8004432:	d937      	bls.n	80044a4 <PE_Receive_SVDM+0xe6>
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	2150      	movs	r1, #80	; 0x50
 8004438:	7721      	strb	r1, [r4, #28]
 800443a:	6861      	ldr	r1, [r4, #4]
 800443c:	680a      	ldr	r2, [r1, #0]
 800443e:	0693      	lsls	r3, r2, #26
 8004440:	0fdb      	lsrs	r3, r3, #31
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	00b6      	lsls	r6, r6, #2
 8004446:	59a6      	ldr	r6, [r4, r6]
 8004448:	0b76      	lsrs	r6, r6, #13
 800444a:	4035      	ands	r5, r6
 800444c:	429d      	cmp	r5, r3
 800444e:	da00      	bge.n	8004452 <PE_Receive_SVDM+0x94>
 8004450:	002b      	movs	r3, r5
 8004452:	2520      	movs	r5, #32
 8004454:	43aa      	bics	r2, r5
 8004456:	015b      	lsls	r3, r3, #5
 8004458:	402b      	ands	r3, r5
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
 800445e:	83e0      	strh	r0, [r4, #30]
 8004460:	2075      	movs	r0, #117	; 0x75
 8004462:	e023      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004464:	2152      	movs	r1, #82	; 0x52
 8004466:	7721      	strb	r1, [r4, #28]
 8004468:	83e0      	strh	r0, [r4, #30]
 800446a:	2076      	movs	r0, #118	; 0x76
 800446c:	e01e      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800446e:	2153      	movs	r1, #83	; 0x53
 8004470:	7721      	strb	r1, [r4, #28]
 8004472:	83e0      	strh	r0, [r4, #30]
 8004474:	2078      	movs	r0, #120	; 0x78
 8004476:	e019      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004478:	2054      	movs	r0, #84	; 0x54
 800447a:	7720      	strb	r0, [r4, #28]
 800447c:	83e3      	strh	r3, [r4, #30]
 800447e:	2079      	movs	r0, #121	; 0x79
 8004480:	e014      	b.n	80044ac <PE_Receive_SVDM+0xee>
 8004482:	2055      	movs	r0, #85	; 0x55
 8004484:	7720      	strb	r0, [r4, #28]
 8004486:	83e3      	strh	r3, [r4, #30]
 8004488:	207a      	movs	r0, #122	; 0x7a
 800448a:	e00f      	b.n	80044ac <PE_Receive_SVDM+0xee>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <PE_Receive_SVDM+0xe2>
 8004494:	2900      	cmp	r1, #0
 8004496:	d000      	beq.n	800449a <PE_Receive_SVDM+0xdc>
 8004498:	2101      	movs	r1, #1
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	7c20      	ldrb	r0, [r4, #16]
 800449e:	4798      	blx	r3
 80044a0:	7465      	strb	r5, [r4, #17]
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	215a      	movs	r1, #90	; 0x5a
 80044a6:	7721      	strb	r1, [r4, #28]
 80044a8:	83e0      	strh	r0, [r4, #30]
 80044aa:	207b      	movs	r0, #123	; 0x7b
 80044ac:	7460      	strb	r0, [r4, #17]
 80044ae:	bd70      	pop	{r4, r5, r6, pc}

080044b0 <.text_13>:
 80044b0:	fffffe3f 	.word	0xfffffe3f

080044b4 <.text_14>:
 80044b4:	2000053c 	.word	0x2000053c

080044b8 <.text_15>:
 80044b8:	00000494 	.word	0x00000494

080044bc <.text_16>:
 80044bc:	00008019 	.word	0x00008019

080044c0 <.text_17>:
 80044c0:	0000800f 	.word	0x0000800f

080044c4 <PE_StateMachine_VDM>:
 80044c4:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	0005      	movs	r5, r0
 80044ca:	2002      	movs	r0, #2
 80044cc:	9004      	str	r0, [sp, #16]
 80044ce:	7c6a      	ldrb	r2, [r5, #17]
 80044d0:	0010      	movs	r0, r2
 80044d2:	3875      	subs	r0, #117	; 0x75
 80044d4:	2807      	cmp	r0, #7
 80044d6:	d206      	bcs.n	80044e6 <__iar_annotation$$branch+0x4>
 80044d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80044da:	7800      	ldrb	r0, [r0, #0]
 80044dc:	2814      	cmp	r0, #20
 80044de:	d002      	beq.n	80044e6 <__iar_annotation$$branch+0x4>
 80044e0:	2002      	movs	r0, #2

080044e2 <__iar_annotation$$branch>:
 80044e2:	f000 febc 	bl	800525e <__iar_annotation$$branch+0xce4>
 80044e6:	2094      	movs	r0, #148	; 0x94
 80044e8:	0080      	lsls	r0, r0, #2
 80044ea:	182c      	adds	r4, r5, r0
 80044ec:	210b      	movs	r1, #11
 80044ee:	271e      	movs	r7, #30
 80044f0:	201f      	movs	r0, #31
 80044f2:	43c0      	mvns	r0, r0
 80044f4:	26c0      	movs	r6, #192	; 0xc0
 80044f6:	43f6      	mvns	r6, r6
 80044f8:	2a75      	cmp	r2, #117	; 0x75
 80044fa:	d041      	beq.n	8004580 <__iar_annotation$$branch+0x6>
 80044fc:	2a76      	cmp	r2, #118	; 0x76
 80044fe:	d100      	bne.n	8004502 <__iar_annotation$$branch+0x20>
 8004500:	e0bb      	b.n	800467a <__iar_annotation$$branch+0x100>
 8004502:	2a77      	cmp	r2, #119	; 0x77
 8004504:	d100      	bne.n	8004508 <__iar_annotation$$branch+0x26>
 8004506:	e144      	b.n	8004792 <__iar_annotation$$branch+0x218>
 8004508:	2a78      	cmp	r2, #120	; 0x78
 800450a:	d100      	bne.n	800450e <__iar_annotation$$branch+0x2c>
 800450c:	e1b4      	b.n	8004878 <__iar_annotation$$branch+0x2fe>
 800450e:	2a79      	cmp	r2, #121	; 0x79
 8004510:	d100      	bne.n	8004514 <__iar_annotation$$branch+0x32>
 8004512:	e216      	b.n	8004942 <__iar_annotation$$branch+0x3c8>
 8004514:	2a7a      	cmp	r2, #122	; 0x7a
 8004516:	d100      	bne.n	800451a <__iar_annotation$$branch+0x38>
 8004518:	e24b      	b.n	80049b2 <__iar_annotation$$branch+0x438>
 800451a:	2a7b      	cmp	r2, #123	; 0x7b
 800451c:	d100      	bne.n	8004520 <__iar_annotation$$branch+0x3e>
 800451e:	e292      	b.n	8004a46 <__iar_annotation$$branch+0x4cc>
 8004520:	2a7d      	cmp	r2, #125	; 0x7d
 8004522:	d100      	bne.n	8004526 <__iar_annotation$$branch+0x44>
 8004524:	e2e0      	b.n	8004ae8 <__iar_annotation$$branch+0x56e>
 8004526:	2a7f      	cmp	r2, #127	; 0x7f
 8004528:	d100      	bne.n	800452c <__iar_annotation$$branch+0x4a>
 800452a:	e352      	b.n	8004bd2 <__iar_annotation$$branch+0x658>
 800452c:	2a81      	cmp	r2, #129	; 0x81
 800452e:	d100      	bne.n	8004532 <__iar_annotation$$branch+0x50>
 8004530:	e3c2      	b.n	8004cb8 <__iar_annotation$$branch+0x73e>
 8004532:	2a82      	cmp	r2, #130	; 0x82
 8004534:	d101      	bne.n	800453a <__iar_annotation$$branch+0x4>

08004536 <__iar_annotation$$branch>:
 8004536:	f000 fc3b 	bl	8004db0 <__iar_annotation$$branch+0x836>
 800453a:	2a83      	cmp	r2, #131	; 0x83
 800453c:	d101      	bne.n	8004542 <__iar_annotation$$branch+0x4>

0800453e <__iar_annotation$$branch>:
 800453e:	f000 fcc9 	bl	8004ed4 <__iar_annotation$$branch+0x95a>
 8004542:	2a84      	cmp	r2, #132	; 0x84
 8004544:	d101      	bne.n	800454a <__iar_annotation$$branch+0x4>

08004546 <__iar_annotation$$branch>:
 8004546:	f000 fe38 	bl	80051ba <__iar_annotation$$branch+0xc40>
 800454a:	2a85      	cmp	r2, #133	; 0x85
 800454c:	d101      	bne.n	8004552 <__iar_annotation$$branch+0x4>

0800454e <__iar_annotation$$branch>:
 800454e:	f000 fd5d 	bl	800500c <__iar_annotation$$branch+0xa92>
 8004552:	2a87      	cmp	r2, #135	; 0x87
 8004554:	d100      	bne.n	8004558 <__iar_annotation$$branch+0xa>
 8004556:	e2fc      	b.n	8004b52 <__iar_annotation$$branch+0x5d8>
 8004558:	2a89      	cmp	r2, #137	; 0x89
 800455a:	d100      	bne.n	800455e <__iar_annotation$$branch+0x10>
 800455c:	e375      	b.n	8004c4a <__iar_annotation$$branch+0x6d0>
 800455e:	2a8b      	cmp	r2, #139	; 0x8b
 8004560:	d101      	bne.n	8004566 <__iar_annotation$$branch+0x4>

08004562 <__iar_annotation$$branch>:
 8004562:	f000 fbe4 	bl	8004d2e <__iar_annotation$$branch+0x7b4>
 8004566:	2a8c      	cmp	r2, #140	; 0x8c
 8004568:	d101      	bne.n	800456e <__iar_annotation$$branch+0x4>

0800456a <__iar_annotation$$branch>:
 800456a:	f000 fc63 	bl	8004e34 <__iar_annotation$$branch+0x8ba>
 800456e:	2a8d      	cmp	r2, #141	; 0x8d
 8004570:	d101      	bne.n	8004576 <__iar_annotation$$branch+0x4>

08004572 <__iar_annotation$$branch>:
 8004572:	f000 fcf7 	bl	8004f64 <__iar_annotation$$branch+0x9ea>
 8004576:	2a8f      	cmp	r2, #143	; 0x8f
 8004578:	d101      	bne.n	800457e <__iar_annotation$$branch+0x4>

0800457a <__iar_annotation$$branch>:
 800457a:	f000 fda5 	bl	80050c8 <__iar_annotation$$branch+0xb4e>
 800457e:	e2b2      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004580:	2201      	movs	r2, #1
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	03d3      	lsls	r3, r2, #15
 8004586:	8bea      	ldrh	r2, [r5, #30]
 8004588:	429a      	cmp	r2, r3
 800458a:	d100      	bne.n	800458e <__iar_annotation$$branch+0x14>
 800458c:	e262      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800458e:	2701      	movs	r7, #1
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	4010      	ands	r0, r2
 8004594:	4338      	orrs	r0, r7
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	4303      	orrs	r3, r0
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	6868      	ldr	r0, [r5, #4]
 800459e:	6800      	ldr	r0, [r0, #0]
 80045a0:	0942      	lsrs	r2, r0, #5
 80045a2:	403a      	ands	r2, r7
 80045a4:	48c9      	ldr	r0, [pc, #804]	; (80048cc <__iar_annotation$$branch+0x352>)
 80045a6:	4018      	ands	r0, r3
 80045a8:	0352      	lsls	r2, r2, #13
 80045aa:	4302      	orrs	r2, r0
 80045ac:	6022      	str	r2, [r4, #0]
 80045ae:	6868      	ldr	r0, [r5, #4]
 80045b0:	6800      	ldr	r0, [r0, #0]
 80045b2:	4001      	ands	r1, r0
 80045b4:	2909      	cmp	r1, #9
 80045b6:	d051      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045b8:	68e8      	ldr	r0, [r5, #12]
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d04e      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045be:	6803      	ldr	r3, [r0, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d04b      	beq.n	800465c <__iar_annotation$$branch+0xe2>
 80045c4:	0c10      	lsrs	r0, r2, #16
 80045c6:	21ff      	movs	r1, #255	; 0xff
 80045c8:	0209      	lsls	r1, r1, #8
 80045ca:	4288      	cmp	r0, r1
 80045cc:	d146      	bne.n	800465c <__iar_annotation$$branch+0xe2>
 80045ce:	a90b      	add	r1, sp, #44	; 0x2c
 80045d0:	7c28      	ldrb	r0, [r5, #16]
 80045d2:	4798      	blx	r3
 80045d4:	2803      	cmp	r0, #3
 80045d6:	d002      	beq.n	80045de <__iar_annotation$$branch+0x64>
 80045d8:	280f      	cmp	r0, #15
 80045da:	d005      	beq.n	80045e8 <__iar_annotation$$branch+0x6e>
 80045dc:	e03e      	b.n	800465c <__iar_annotation$$branch+0xe2>
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	4301      	orrs	r1, r0
 80045e4:	6021      	str	r1, [r4, #0]
 80045e6:	e03e      	b.n	8004666 <__iar_annotation$$branch+0xec>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	4006      	ands	r6, r0
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	4330      	orrs	r0, r6
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80045f4:	9015      	str	r0, [sp, #84]	; 0x54
 80045f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80045f8:	9016      	str	r0, [sp, #88]	; 0x58
 80045fa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045fc:	9017      	str	r0, [sp, #92]	; 0x5c
 80045fe:	2004      	movs	r0, #4
 8004600:	9003      	str	r0, [sp, #12]
 8004602:	a80b      	add	r0, sp, #44	; 0x2c
 8004604:	2120      	movs	r1, #32
 8004606:	5c40      	ldrb	r0, [r0, r1]
 8004608:	0841      	lsrs	r1, r0, #1
 800460a:	4239      	tst	r1, r7
 800460c:	d003      	beq.n	8004616 <__iar_annotation$$branch+0x9c>
 800460e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004610:	9118      	str	r1, [sp, #96]	; 0x60
 8004612:	2105      	movs	r1, #5
 8004614:	9103      	str	r1, [sp, #12]
 8004616:	08c2      	lsrs	r2, r0, #3
 8004618:	2101      	movs	r1, #1
 800461a:	4011      	ands	r1, r2
 800461c:	d008      	beq.n	8004630 <__iar_annotation$$branch+0xb6>
 800461e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004620:	aa14      	add	r2, sp, #80	; 0x50
 8004622:	9b03      	ldr	r3, [sp, #12]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	50d6      	str	r6, [r2, r3]
 8004628:	9a03      	ldr	r2, [sp, #12]
 800462a:	1c52      	adds	r2, r2, #1
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	9203      	str	r2, [sp, #12]
 8004630:	0900      	lsrs	r0, r0, #4
 8004632:	4238      	tst	r0, r7
 8004634:	d017      	beq.n	8004666 <__iar_annotation$$branch+0xec>
 8004636:	2900      	cmp	r1, #0
 8004638:	d007      	beq.n	800464a <__iar_annotation$$branch+0xd0>
 800463a:	2000      	movs	r0, #0
 800463c:	a914      	add	r1, sp, #80	; 0x50
 800463e:	9a03      	ldr	r2, [sp, #12]
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	5088      	str	r0, [r1, r2]
 8004644:	9803      	ldr	r0, [sp, #12]
 8004646:	1c40      	adds	r0, r0, #1
 8004648:	9003      	str	r0, [sp, #12]
 800464a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800464c:	a914      	add	r1, sp, #80	; 0x50
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	5088      	str	r0, [r1, r2]
 8004654:	9803      	ldr	r0, [sp, #12]
 8004656:	1c40      	adds	r0, r0, #1
 8004658:	9003      	str	r0, [sp, #12]
 800465a:	e004      	b.n	8004666 <__iar_annotation$$branch+0xec>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	4006      	ands	r6, r0
 8004660:	2080      	movs	r0, #128	; 0x80
 8004662:	4330      	orrs	r0, r6
 8004664:	6020      	str	r0, [r4, #0]
 8004666:	6820      	ldr	r0, [r4, #0]
 8004668:	9014      	str	r0, [sp, #80]	; 0x50
 800466a:	2000      	movs	r0, #0
 800466c:	9002      	str	r0, [sp, #8]
 800466e:	2003      	movs	r0, #3
 8004670:	9001      	str	r0, [sp, #4]
 8004672:	9803      	ldr	r0, [sp, #12]
 8004674:	9000      	str	r0, [sp, #0]
 8004676:	ab14      	add	r3, sp, #80	; 0x50
 8004678:	e22f      	b.n	8004ada <__iar_annotation$$branch+0x560>
 800467a:	2201      	movs	r2, #1
 800467c:	466b      	mov	r3, sp
 800467e:	731a      	strb	r2, [r3, #12]
 8004680:	03d2      	lsls	r2, r2, #15
 8004682:	8beb      	ldrh	r3, [r5, #30]
 8004684:	4293      	cmp	r3, r2
 8004686:	d100      	bne.n	800468a <__iar_annotation$$branch+0x110>
 8004688:	e1e4      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	4018      	ands	r0, r3
 800468e:	2302      	movs	r3, #2
 8004690:	4303      	orrs	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	431a      	orrs	r2, r3
 8004696:	6022      	str	r2, [r4, #0]
 8004698:	6868      	ldr	r0, [r5, #4]
 800469a:	6803      	ldr	r3, [r0, #0]
 800469c:	0698      	lsls	r0, r3, #26
 800469e:	0fc0      	lsrs	r0, r0, #31
 80046a0:	4b8a      	ldr	r3, [pc, #552]	; (80048cc <__iar_annotation$$branch+0x352>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0340      	lsls	r0, r0, #13
 80046a6:	4318      	orrs	r0, r3
 80046a8:	6020      	str	r0, [r4, #0]
 80046aa:	686a      	ldr	r2, [r5, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4011      	ands	r1, r2
 80046b0:	2909      	cmp	r1, #9
 80046b2:	d05f      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046b4:	68e9      	ldr	r1, [r5, #12]
 80046b6:	684b      	ldr	r3, [r1, #4]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05b      	beq.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046bc:	0c00      	lsrs	r0, r0, #16
 80046be:	21ff      	movs	r1, #255	; 0xff
 80046c0:	0209      	lsls	r1, r1, #8
 80046c2:	4288      	cmp	r0, r1
 80046c4:	d156      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046c6:	4882      	ldr	r0, [pc, #520]	; (80048d0 <__iar_annotation$$branch+0x356>)
 80046c8:	182a      	adds	r2, r5, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	7c28      	ldrb	r0, [r5, #16]
 80046ce:	4798      	blx	r3
 80046d0:	2803      	cmp	r0, #3
 80046d2:	d04b      	beq.n	800476c <__iar_annotation$$branch+0x1f2>
 80046d4:	280f      	cmp	r0, #15
 80046d6:	d14d      	bne.n	8004774 <__iar_annotation$$branch+0x1fa>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	4006      	ands	r6, r0
 80046dc:	2040      	movs	r0, #64	; 0x40
 80046de:	4330      	orrs	r0, r6
 80046e0:	6020      	str	r0, [r4, #0]
 80046e2:	211c      	movs	r1, #28
 80046e4:	a806      	add	r0, sp, #24
 80046e6:	f023 fb4f 	bl	8027d88 <__aeabi_memclr>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2200      	movs	r2, #0
 80046ee:	a806      	add	r0, sp, #24
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	e014      	b.n	800471e <__iar_annotation$$branch+0x1a4>
 80046f4:	005f      	lsls	r7, r3, #1
 80046f6:	5bf6      	ldrh	r6, [r6, r7]
 80046f8:	0436      	lsls	r6, r6, #16
 80046fa:	430e      	orrs	r6, r1
 80046fc:	6006      	str	r6, [r0, #0]
 80046fe:	e00d      	b.n	800471c <__iar_annotation$$branch+0x1a2>
 8004700:	1c52      	adds	r2, r2, #1
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	1d00      	adds	r0, r0, #4
 8004706:	0859      	lsrs	r1, r3, #1
 8004708:	0089      	lsls	r1, r1, #2
 800470a:	1840      	adds	r0, r0, r1
 800470c:	07d9      	lsls	r1, r3, #31
 800470e:	6801      	ldr	r1, [r0, #0]
 8004710:	9e05      	ldr	r6, [sp, #20]
 8004712:	d5ef      	bpl.n	80046f4 <__iar_annotation$$branch+0x17a>
 8004714:	005f      	lsls	r7, r3, #1
 8004716:	5bf6      	ldrh	r6, [r6, r7]
 8004718:	4331      	orrs	r1, r6
 800471a:	6001      	str	r1, [r0, #0]
 800471c:	1c5b      	adds	r3, r3, #1
 800471e:	486d      	ldr	r0, [pc, #436]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004720:	1828      	adds	r0, r5, r0
 8004722:	7840      	ldrb	r0, [r0, #1]
 8004724:	4283      	cmp	r3, r0
 8004726:	d201      	bcs.n	800472c <__iar_annotation$$branch+0x1b2>
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d3e9      	bcc.n	8004700 <__iar_annotation$$branch+0x186>
 800472c:	1a80      	subs	r0, r0, r2
 800472e:	4969      	ldr	r1, [pc, #420]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004730:	1869      	adds	r1, r5, r1
 8004732:	7048      	strb	r0, [r1, #1]
 8004734:	b2d0      	uxtb	r0, r2
 8004736:	280c      	cmp	r0, #12
 8004738:	d111      	bne.n	800475e <__iar_annotation$$branch+0x1e4>
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	9006      	str	r0, [sp, #24]
 800473e:	2000      	movs	r0, #0
 8004740:	9002      	str	r0, [sp, #8]
 8004742:	2077      	movs	r0, #119	; 0x77
 8004744:	9001      	str	r0, [sp, #4]
 8004746:	2007      	movs	r0, #7
 8004748:	9000      	str	r0, [sp, #0]
 800474a:	ab06      	add	r3, sp, #24
 800474c:	220f      	movs	r2, #15
 800474e:	2031      	movs	r0, #49	; 0x31
 8004750:	5c29      	ldrb	r1, [r5, r0]
 8004752:	0028      	movs	r0, r5
 8004754:	f7fc ff07 	bl	8001566 <PE_Send_DataMessage>
 8004758:	485f      	ldr	r0, [pc, #380]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 800475a:	83e8      	strh	r0, [r5, #30]
 800475c:	e1c3      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800475e:	0612      	lsls	r2, r2, #24
 8004760:	0e50      	lsrs	r0, r2, #25
 8004762:	1c80      	adds	r0, r0, #2
 8004764:	4669      	mov	r1, sp
 8004766:	7308      	strb	r0, [r1, #12]
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	e008      	b.n	800477e <__iar_annotation$$branch+0x204>
 800476c:	6821      	ldr	r1, [r4, #0]
 800476e:	20c0      	movs	r0, #192	; 0xc0
 8004770:	4308      	orrs	r0, r1
 8004772:	e003      	b.n	800477c <__iar_annotation$$branch+0x202>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	4006      	ands	r6, r0
 8004778:	2080      	movs	r0, #128	; 0x80
 800477a:	4330      	orrs	r0, r6
 800477c:	6020      	str	r0, [r4, #0]
 800477e:	9006      	str	r0, [sp, #24]
 8004780:	2000      	movs	r0, #0
 8004782:	9002      	str	r0, [sp, #8]
 8004784:	2003      	movs	r0, #3
 8004786:	9001      	str	r0, [sp, #4]
 8004788:	4668      	mov	r0, sp
 800478a:	7b00      	ldrb	r0, [r0, #12]
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	ab06      	add	r3, sp, #24
 8004790:	e1a3      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004792:	2180      	movs	r1, #128	; 0x80
 8004794:	0209      	lsls	r1, r1, #8
 8004796:	8bea      	ldrh	r2, [r5, #30]
 8004798:	428a      	cmp	r2, r1
 800479a:	d100      	bne.n	800479e <__iar_annotation$$branch+0x224>
 800479c:	e15a      	b.n	8004a54 <__iar_annotation$$branch+0x4da>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	4010      	ands	r0, r2
 80047a2:	2202      	movs	r2, #2
 80047a4:	4302      	orrs	r2, r0
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	20ff      	movs	r0, #255	; 0xff
 80047ac:	0600      	lsls	r0, r0, #24
 80047ae:	4310      	orrs	r0, r2
 80047b0:	6020      	str	r0, [r4, #0]
 80047b2:	4301      	orrs	r1, r0
 80047b4:	6021      	str	r1, [r4, #0]
 80047b6:	2701      	movs	r7, #1
 80047b8:	6868      	ldr	r0, [r5, #4]
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	0940      	lsrs	r0, r0, #5
 80047be:	4038      	ands	r0, r7
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <__iar_annotation$$branch+0x352>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	0340      	lsls	r0, r0, #13
 80047c6:	4310      	orrs	r0, r2
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	4006      	ands	r6, r0
 80047cc:	2040      	movs	r0, #64	; 0x40
 80047ce:	4330      	orrs	r0, r6
 80047d0:	6020      	str	r0, [r4, #0]
 80047d2:	aa03      	add	r2, sp, #12
 80047d4:	a905      	add	r1, sp, #20
 80047d6:	7c28      	ldrb	r0, [r5, #16]
 80047d8:	68eb      	ldr	r3, [r5, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4798      	blx	r3
 80047de:	211c      	movs	r1, #28
 80047e0:	a806      	add	r0, sp, #24
 80047e2:	f023 fad1 	bl	8027d88 <__aeabi_memclr>
 80047e6:	2100      	movs	r1, #0
 80047e8:	2200      	movs	r2, #0
 80047ea:	a806      	add	r0, sp, #24
 80047ec:	002c      	movs	r4, r5
 80047ee:	e016      	b.n	800481e <__iar_annotation$$branch+0x2a4>
 80047f0:	004d      	lsls	r5, r1, #1
 80047f2:	5b75      	ldrh	r5, [r6, r5]
 80047f4:	042d      	lsls	r5, r5, #16
 80047f6:	4666      	mov	r6, ip
 80047f8:	4335      	orrs	r5, r6
 80047fa:	601d      	str	r5, [r3, #0]
 80047fc:	e00e      	b.n	800481c <__iar_annotation$$branch+0x2a2>
 80047fe:	1c52      	adds	r2, r2, #1
 8004800:	1d03      	adds	r3, r0, #4
 8004802:	084d      	lsrs	r5, r1, #1
 8004804:	00ad      	lsls	r5, r5, #2
 8004806:	195b      	adds	r3, r3, r5
 8004808:	4239      	tst	r1, r7
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	46b4      	mov	ip, r6
 800480e:	9e05      	ldr	r6, [sp, #20]
 8004810:	d0ee      	beq.n	80047f0 <__iar_annotation$$branch+0x276>
 8004812:	004d      	lsls	r5, r1, #1
 8004814:	5b75      	ldrh	r5, [r6, r5]
 8004816:	4666      	mov	r6, ip
 8004818:	432e      	orrs	r6, r5
 800481a:	601e      	str	r6, [r3, #0]
 800481c:	1c49      	adds	r1, r1, #1
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004820:	18e3      	adds	r3, r4, r3
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	4299      	cmp	r1, r3
 8004826:	d201      	bcs.n	800482c <__iar_annotation$$branch+0x2b2>
 8004828:	290c      	cmp	r1, #12
 800482a:	d3e8      	bcc.n	80047fe <__iar_annotation$$branch+0x284>
 800482c:	1a98      	subs	r0, r3, r2
 800482e:	4929      	ldr	r1, [pc, #164]	; (80048d4 <__iar_annotation$$branch+0x35a>)
 8004830:	1861      	adds	r1, r4, r1
 8004832:	7048      	strb	r0, [r1, #1]
 8004834:	b2d0      	uxtb	r0, r2
 8004836:	280c      	cmp	r0, #12
 8004838:	d10f      	bne.n	800485a <__iar_annotation$$branch+0x2e0>
 800483a:	2000      	movs	r0, #0
 800483c:	9002      	str	r0, [sp, #8]
 800483e:	2077      	movs	r0, #119	; 0x77
 8004840:	9001      	str	r0, [sp, #4]
 8004842:	2007      	movs	r0, #7
 8004844:	9000      	str	r0, [sp, #0]
 8004846:	ab06      	add	r3, sp, #24
 8004848:	220f      	movs	r2, #15
 800484a:	2031      	movs	r0, #49	; 0x31
 800484c:	5c21      	ldrb	r1, [r4, r0]
 800484e:	0020      	movs	r0, r4
 8004850:	f7fc fe89 	bl	8001566 <PE_Send_DataMessage>
 8004854:	4820      	ldr	r0, [pc, #128]	; (80048d8 <__iar_annotation$$branch+0x35e>)
 8004856:	83e0      	strh	r0, [r4, #30]
 8004858:	e145      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 800485a:	2000      	movs	r0, #0
 800485c:	9002      	str	r0, [sp, #8]
 800485e:	2003      	movs	r0, #3
 8004860:	9001      	str	r0, [sp, #4]
 8004862:	0610      	lsls	r0, r2, #24
 8004864:	0e40      	lsrs	r0, r0, #25
 8004866:	1c80      	adds	r0, r0, #2
 8004868:	b2c0      	uxtb	r0, r0
 800486a:	9000      	str	r0, [sp, #0]
 800486c:	ab06      	add	r3, sp, #24
 800486e:	220f      	movs	r2, #15
 8004870:	2031      	movs	r0, #49	; 0x31
 8004872:	5c21      	ldrb	r1, [r4, r0]
 8004874:	0020      	movs	r0, r4
 8004876:	e134      	b.n	8004ae2 <__iar_annotation$$branch+0x568>
 8004878:	2201      	movs	r2, #1
 800487a:	9206      	str	r2, [sp, #24]
 800487c:	03d2      	lsls	r2, r2, #15
 800487e:	8beb      	ldrh	r3, [r5, #30]
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <__iar_annotation$$branch+0x30c>
 8004884:	e3c1      	b.n	800500a <__iar_annotation$$branch+0xa90>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4018      	ands	r0, r3
 800488a:	2303      	movs	r3, #3
 800488c:	4303      	orrs	r3, r0
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	431a      	orrs	r2, r3
 8004892:	6022      	str	r2, [r4, #0]
 8004894:	6868      	ldr	r0, [r5, #4]
 8004896:	6803      	ldr	r3, [r0, #0]
 8004898:	0698      	lsls	r0, r3, #26
 800489a:	0fc0      	lsrs	r0, r0, #31
 800489c:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <__iar_annotation$$branch+0x352>)
 800489e:	4013      	ands	r3, r2
 80048a0:	0340      	lsls	r0, r0, #13
 80048a2:	4318      	orrs	r0, r3
 80048a4:	6020      	str	r0, [r4, #0]
 80048a6:	686a      	ldr	r2, [r5, #4]
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4011      	ands	r1, r2
 80048ac:	2909      	cmp	r1, #9
 80048ae:	d037      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b0:	68e9      	ldr	r1, [r5, #12]
 80048b2:	688f      	ldr	r7, [r1, #8]
 80048b4:	2f00      	cmp	r7, #0
 80048b6:	d033      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048b8:	ab03      	add	r3, sp, #12
 80048ba:	aa05      	add	r2, sp, #20
 80048bc:	0c01      	lsrs	r1, r0, #16
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	47b8      	blx	r7
 80048c2:	2803      	cmp	r0, #3
 80048c4:	d00a      	beq.n	80048dc <__iar_annotation$$branch+0x362>
 80048c6:	280f      	cmp	r0, #15
 80048c8:	d00d      	beq.n	80048e6 <__iar_annotation$$branch+0x36c>
 80048ca:	e029      	b.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048cc:	ffff9fff 	.word	0xffff9fff
 80048d0:	000004ad 	.word	0x000004ad
 80048d4:	000004ac 	.word	0x000004ac
 80048d8:	0000800f 	.word	0x0000800f
 80048dc:	6820      	ldr	r0, [r4, #0]
 80048de:	21c0      	movs	r1, #192	; 0xc0
 80048e0:	4301      	orrs	r1, r0
 80048e2:	6021      	str	r1, [r4, #0]
 80048e4:	e023      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 80048e6:	4668      	mov	r0, sp
 80048e8:	7b00      	ldrb	r0, [r0, #12]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d018      	beq.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048ee:	4668      	mov	r0, sp
 80048f0:	7b02      	ldrb	r2, [r0, #12]
 80048f2:	2a07      	cmp	r2, #7
 80048f4:	d214      	bcs.n	8004920 <__iar_annotation$$branch+0x3a6>
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	4006      	ands	r6, r0
 80048fa:	2040      	movs	r0, #64	; 0x40
 80048fc:	4330      	orrs	r0, r6
 80048fe:	6020      	str	r0, [r4, #0]
 8004900:	2300      	movs	r3, #0
 8004902:	9806      	ldr	r0, [sp, #24]
 8004904:	4293      	cmp	r3, r2
 8004906:	d211      	bcs.n	800492c <__iar_annotation$$branch+0x3b2>
 8004908:	9905      	ldr	r1, [sp, #20]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	ae07      	add	r6, sp, #28
 800490e:	1d36      	adds	r6, r6, #4
 8004910:	009f      	lsls	r7, r3, #2
 8004912:	51f1      	str	r1, [r6, r7]
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	1d09      	adds	r1, r1, #4
 8004918:	9105      	str	r1, [sp, #20]
 800491a:	1c40      	adds	r0, r0, #1
 800491c:	1c5b      	adds	r3, r3, #1
 800491e:	e7f1      	b.n	8004904 <__iar_annotation$$branch+0x38a>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	4006      	ands	r6, r0
 8004924:	2080      	movs	r0, #128	; 0x80
 8004926:	4330      	orrs	r0, r6
 8004928:	6020      	str	r0, [r4, #0]
 800492a:	e000      	b.n	800492e <__iar_annotation$$branch+0x3b4>
 800492c:	9006      	str	r0, [sp, #24]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	9007      	str	r0, [sp, #28]
 8004932:	2000      	movs	r0, #0
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	2003      	movs	r0, #3
 8004938:	9001      	str	r0, [sp, #4]
 800493a:	9806      	ldr	r0, [sp, #24]
 800493c:	9000      	str	r0, [sp, #0]
 800493e:	ab07      	add	r3, sp, #28
 8004940:	e0cb      	b.n	8004ada <__iar_annotation$$branch+0x560>
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	0209      	lsls	r1, r1, #8
 8004946:	8bea      	ldrh	r2, [r5, #30]
 8004948:	428a      	cmp	r2, r1
 800494a:	d100      	bne.n	800494e <__iar_annotation$$branch+0x3d4>
 800494c:	e35d      	b.n	800500a <__iar_annotation$$branch+0xa90>
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	4010      	ands	r0, r2
 8004952:	2204      	movs	r2, #4
 8004954:	4302      	orrs	r2, r0
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	4311      	orrs	r1, r2
 800495a:	6021      	str	r1, [r4, #0]
 800495c:	2001      	movs	r0, #1
 800495e:	686a      	ldr	r2, [r5, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	0952      	lsrs	r2, r2, #5
 8004964:	4002      	ands	r2, r0
 8004966:	4ba6      	ldr	r3, [pc, #664]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004968:	400b      	ands	r3, r1
 800496a:	0351      	lsls	r1, r2, #13
 800496c:	4319      	orrs	r1, r3
 800496e:	6021      	str	r1, [r4, #0]
 8004970:	686a      	ldr	r2, [r5, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	08d2      	lsrs	r2, r2, #3
 8004976:	4010      	ands	r0, r2
 8004978:	d152      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 800497a:	68e8      	ldr	r0, [r5, #12]
 800497c:	68c3      	ldr	r3, [r0, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04e      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004982:	2707      	movs	r7, #7
 8004984:	0a0a      	lsrs	r2, r1, #8
 8004986:	403a      	ands	r2, r7
 8004988:	0c09      	lsrs	r1, r1, #16
 800498a:	7c28      	ldrb	r0, [r5, #16]
 800498c:	4798      	blx	r3
 800498e:	2803      	cmp	r0, #3
 8004990:	d041      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 8004992:	280f      	cmp	r0, #15
 8004994:	d144      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	4006      	ands	r6, r0
 800499a:	2040      	movs	r0, #64	; 0x40
 800499c:	4330      	orrs	r0, r6
 800499e:	6020      	str	r0, [r4, #0]
 80049a0:	0a00      	lsrs	r0, r0, #8
 80049a2:	4007      	ands	r7, r0
 80049a4:	6968      	ldr	r0, [r5, #20]
 80049a6:	4940      	ldr	r1, [pc, #256]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 80049a8:	4001      	ands	r1, r0
 80049aa:	01b8      	lsls	r0, r7, #6
 80049ac:	4308      	orrs	r0, r1
 80049ae:	6168      	str	r0, [r5, #20]
 80049b0:	e03b      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 80049b2:	2180      	movs	r1, #128	; 0x80
 80049b4:	0209      	lsls	r1, r1, #8
 80049b6:	8bea      	ldrh	r2, [r5, #30]
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d04b      	beq.n	8004a54 <__iar_annotation$$branch+0x4da>
 80049bc:	6822      	ldr	r2, [r4, #0]
 80049be:	4010      	ands	r0, r2
 80049c0:	2205      	movs	r2, #5
 80049c2:	4302      	orrs	r2, r0
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	4311      	orrs	r1, r2
 80049c8:	6021      	str	r1, [r4, #0]
 80049ca:	2001      	movs	r0, #1
 80049cc:	686a      	ldr	r2, [r5, #4]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	0952      	lsrs	r2, r2, #5
 80049d2:	4002      	ands	r2, r0
 80049d4:	4b8a      	ldr	r3, [pc, #552]	; (8004c00 <__iar_annotation$$branch+0x686>)
 80049d6:	400b      	ands	r3, r1
 80049d8:	0351      	lsls	r1, r2, #13
 80049da:	4319      	orrs	r1, r3
 80049dc:	6021      	str	r1, [r4, #0]
 80049de:	686a      	ldr	r2, [r5, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	08d2      	lsrs	r2, r2, #3
 80049e4:	4010      	ands	r0, r2
 80049e6:	d11b      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049e8:	68e8      	ldr	r0, [r5, #12]
 80049ea:	6903      	ldr	r3, [r0, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <__iar_annotation$$branch+0x4a6>
 80049f0:	0548      	lsls	r0, r1, #21
 80049f2:	0f42      	lsrs	r2, r0, #29
 80049f4:	0c09      	lsrs	r1, r1, #16
 80049f6:	7c28      	ldrb	r0, [r5, #16]
 80049f8:	4798      	blx	r3
 80049fa:	2803      	cmp	r0, #3
 80049fc:	d00b      	beq.n	8004a16 <__iar_annotation$$branch+0x49c>
 80049fe:	280f      	cmp	r0, #15
 8004a00:	d10e      	bne.n	8004a20 <__iar_annotation$$branch+0x4a6>
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4006      	ands	r6, r0
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	4330      	orrs	r0, r6
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6968      	ldr	r0, [r5, #20]
 8004a0e:	4926      	ldr	r1, [pc, #152]	; (8004aa8 <__iar_annotation$$branch+0x52e>)
 8004a10:	4001      	ands	r1, r0
 8004a12:	6169      	str	r1, [r5, #20]
 8004a14:	e009      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	21c0      	movs	r1, #192	; 0xc0
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	e004      	b.n	8004a2a <__iar_annotation$$branch+0x4b0>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	4006      	ands	r6, r0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	4330      	orrs	r0, r6
 8004a28:	6020      	str	r0, [r4, #0]
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	2003      	movs	r0, #3
 8004a30:	9001      	str	r0, [sp, #4]
 8004a32:	2001      	movs	r0, #1
 8004a34:	9000      	str	r0, [sp, #0]
 8004a36:	0023      	movs	r3, r4
 8004a38:	220f      	movs	r2, #15
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	5c29      	ldrb	r1, [r5, r0]
 8004a3e:	0028      	movs	r0, r5
 8004a40:	f7fc fd91 	bl	8001566 <PE_Send_DataMessage>
 8004a44:	e04f      	b.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004a46:	2001      	movs	r0, #1
 8004a48:	4669      	mov	r1, sp
 8004a4a:	7308      	strb	r0, [r1, #12]
 8004a4c:	8be8      	ldrh	r0, [r5, #30]
 8004a4e:	2180      	movs	r1, #128	; 0x80
 8004a50:	0209      	lsls	r1, r1, #8
 8004a52:	4288      	cmp	r0, r1
 8004a54:	d100      	bne.n	8004a58 <__iar_annotation$$branch+0x4de>
 8004a56:	e3ab      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8004a58:	68e8      	ldr	r0, [r5, #12]
 8004a5a:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8004a5c:	2f00      	cmp	r7, #0
 8004a5e:	d02a      	beq.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a60:	4868      	ldr	r0, [pc, #416]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a62:	182b      	adds	r3, r5, r0
 8004a64:	3018      	adds	r0, #24
 8004a66:	182a      	adds	r2, r5, r0
 8004a68:	7820      	ldrb	r0, [r4, #0]
 8004a6a:	06c1      	lsls	r1, r0, #27
 8004a6c:	0ec9      	lsrs	r1, r1, #27
 8004a6e:	7c28      	ldrb	r0, [r5, #16]
 8004a70:	47b8      	blx	r7
 8004a72:	2803      	cmp	r0, #3
 8004a74:	d01a      	beq.n	8004aac <__iar_annotation$$branch+0x532>
 8004a76:	280f      	cmp	r0, #15
 8004a78:	d11d      	bne.n	8004ab6 <__iar_annotation$$branch+0x53c>
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	4006      	ands	r6, r0
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	4330      	orrs	r0, r6
 8004a82:	6020      	str	r0, [r4, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	4668      	mov	r0, sp
 8004a88:	7b00      	ldrb	r0, [r0, #12]
 8004a8a:	495f      	ldr	r1, [pc, #380]	; (8004c08 <__iar_annotation$$branch+0x68e>)
 8004a8c:	5c69      	ldrb	r1, [r5, r1]
 8004a8e:	428a      	cmp	r2, r1
 8004a90:	d217      	bcs.n	8004ac2 <__iar_annotation$$branch+0x548>
 8004a92:	0091      	lsls	r1, r2, #2
 8004a94:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <__iar_annotation$$branch+0x68a>)
 8004a96:	18eb      	adds	r3, r5, r3
 8004a98:	585b      	ldr	r3, [r3, r1]
 8004a9a:	ae05      	add	r6, sp, #20
 8004a9c:	1d36      	adds	r6, r6, #4
 8004a9e:	5073      	str	r3, [r6, r1]
 8004aa0:	1c40      	adds	r0, r0, #1
 8004aa2:	1c52      	adds	r2, r2, #1
 8004aa4:	e7f1      	b.n	8004a8a <__iar_annotation$$branch+0x510>
 8004aa6:	bf00      	nop
 8004aa8:	fffffe3f 	.word	0xfffffe3f
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	21c0      	movs	r1, #192	; 0xc0
 8004ab0:	4301      	orrs	r1, r0
 8004ab2:	6021      	str	r1, [r4, #0]
 8004ab4:	e007      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	4006      	ands	r6, r0
 8004aba:	2080      	movs	r0, #128	; 0x80
 8004abc:	4330      	orrs	r0, r6
 8004abe:	6020      	str	r0, [r4, #0]
 8004ac0:	e001      	b.n	8004ac6 <__iar_annotation$$branch+0x54c>
 8004ac2:	4669      	mov	r1, sp
 8004ac4:	7308      	strb	r0, [r1, #12]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	9005      	str	r0, [sp, #20]
 8004aca:	2000      	movs	r0, #0
 8004acc:	9002      	str	r0, [sp, #8]
 8004ace:	2003      	movs	r0, #3
 8004ad0:	9001      	str	r0, [sp, #4]
 8004ad2:	4668      	mov	r0, sp
 8004ad4:	7b00      	ldrb	r0, [r0, #12]
 8004ad6:	9000      	str	r0, [sp, #0]
 8004ad8:	ab05      	add	r3, sp, #20
 8004ada:	220f      	movs	r2, #15
 8004adc:	2031      	movs	r0, #49	; 0x31
 8004ade:	5c29      	ldrb	r1, [r5, r0]
 8004ae0:	0028      	movs	r0, r5
 8004ae2:	f7fc fd40 	bl	8001566 <PE_Send_DataMessage>
 8004ae6:	e3b9      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004ae8:	2101      	movs	r1, #1
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	4010      	ands	r0, r2
 8004aee:	4308      	orrs	r0, r1
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	03ca      	lsls	r2, r1, #15
 8004af4:	4302      	orrs	r2, r0
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	6868      	ldr	r0, [r5, #4]
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	0943      	lsrs	r3, r0, #5
 8004afe:	400b      	ands	r3, r1
 8004b00:	483f      	ldr	r0, [pc, #252]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004b02:	4010      	ands	r0, r2
 8004b04:	035a      	lsls	r2, r3, #13
 8004b06:	4302      	orrs	r2, r0
 8004b08:	6022      	str	r2, [r4, #0]
 8004b0a:	48bf      	ldr	r0, [pc, #764]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004b0c:	4010      	ands	r0, r2
 8004b0e:	6020      	str	r0, [r4, #0]
 8004b10:	4006      	ands	r6, r0
 8004b12:	6026      	str	r6, [r4, #0]
 8004b14:	b2b0      	uxth	r0, r6
 8004b16:	22ff      	movs	r2, #255	; 0xff
 8004b18:	0612      	lsls	r2, r2, #24
 8004b1a:	4302      	orrs	r2, r0
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	6868      	ldr	r0, [r5, #4]
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	0880      	lsrs	r0, r0, #2
 8004b24:	4001      	ands	r1, r0
 8004b26:	d003      	beq.n	8004b30 <__iar_annotation$$branch+0x5b6>
 8004b28:	6968      	ldr	r0, [r5, #20]
 8004b2a:	0741      	lsls	r1, r0, #29
 8004b2c:	0fc8      	lsrs	r0, r1, #31
 8004b2e:	e000      	b.n	8004b32 <__iar_annotation$$branch+0x5b8>
 8004b30:	2002      	movs	r0, #2
 8004b32:	9002      	str	r0, [sp, #8]
 8004b34:	2087      	movs	r0, #135	; 0x87
 8004b36:	9001      	str	r0, [sp, #4]
 8004b38:	2001      	movs	r0, #1
 8004b3a:	9000      	str	r0, [sp, #0]
 8004b3c:	0023      	movs	r3, r4
 8004b3e:	220f      	movs	r2, #15
 8004b40:	2031      	movs	r0, #49	; 0x31
 8004b42:	5c29      	ldrb	r1, [r5, r0]
 8004b44:	0028      	movs	r0, r5
 8004b46:	f7fc fd0e 	bl	8001566 <PE_Send_DataMessage>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d1cb      	bne.n	8004ae6 <__iar_annotation$$branch+0x56c>
 8004b4e:	2050      	movs	r0, #80	; 0x50
 8004b50:	e0e8      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004b52:	2031      	movs	r0, #49	; 0x31
 8004b54:	5c28      	ldrb	r0, [r5, r0]
 8004b56:	f7fb ff37 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004b5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b5c:	7809      	ldrb	r1, [r1, #0]
 8004b5e:	4281      	cmp	r1, r0
 8004b60:	d000      	beq.n	8004b64 <__iar_annotation$$branch+0x5ea>
 8004b62:	e245      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b64:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004b66:	0bc2      	lsrs	r2, r0, #15
 8004b68:	d176      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b6a:	0b02      	lsrs	r2, r0, #12
 8004b6c:	0752      	lsls	r2, r2, #29
 8004b6e:	d012      	beq.n	8004b96 <__iar_annotation$$branch+0x61c>
 8004b70:	06c0      	lsls	r0, r0, #27
 8004b72:	0ec0      	lsrs	r0, r0, #27
 8004b74:	280f      	cmp	r0, #15
 8004b76:	d16f      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b78:	2914      	cmp	r1, #20
 8004b7a:	d005      	beq.n	8004b88 <__iar_annotation$$branch+0x60e>
 8004b7c:	2014      	movs	r0, #20
 8004b7e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b80:	7008      	strb	r0, [r1, #0]
 8004b82:	0028      	movs	r0, r5
 8004b84:	f7fb fee7 	bl	8000956 <PE_Clear_RxEvent>
 8004b88:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004b8a:	7881      	ldrb	r1, [r0, #2]
 8004b8c:	06ca      	lsls	r2, r1, #27
 8004b8e:	0ed2      	lsrs	r2, r2, #27
 8004b90:	2a01      	cmp	r2, #1
 8004b92:	d161      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004b94:	098c      	lsrs	r4, r1, #6
 8004b96:	d100      	bne.n	8004b9a <__iar_annotation$$branch+0x620>
 8004b98:	e22a      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004b9a:	68e9      	ldr	r1, [r5, #12]
 8004b9c:	6949      	ldr	r1, [r1, #20]
 8004b9e:	2900      	cmp	r1, #0
 8004ba0:	d100      	bne.n	8004ba4 <__iar_annotation$$branch+0x62a>
 8004ba2:	e2e3      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ba4:	2103      	movs	r1, #3
 8004ba6:	4021      	ands	r1, r4
 8004ba8:	2901      	cmp	r1, #1
 8004baa:	d000      	beq.n	8004bae <__iar_annotation$$branch+0x634>
 8004bac:	e2de      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bb0:	1d81      	adds	r1, r0, #6
 8004bb2:	7c28      	ldrb	r0, [r5, #16]
 8004bb4:	f000 fc04 	bl	80053c0 <PE_SVDM_CheckIdentity>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d108      	bne.n	8004bce <__iar_annotation$$branch+0x654>
 8004bbc:	ab0b      	add	r3, sp, #44	; 0x2c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	7c28      	ldrb	r0, [r5, #16]
 8004bc4:	68ec      	ldr	r4, [r5, #12]
 8004bc6:	6964      	ldr	r4, [r4, #20]
 8004bc8:	47a0      	blx	r4
 8004bca:	2151      	movs	r1, #81	; 0x51
 8004bcc:	e0ec      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bce:	211b      	movs	r1, #27
 8004bd0:	e0ea      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004bd2:	6821      	ldr	r1, [r4, #0]
 8004bd4:	400e      	ands	r6, r1
 8004bd6:	6026      	str	r6, [r4, #0]
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4030      	ands	r0, r6
 8004bdc:	4308      	orrs	r0, r1
 8004bde:	6020      	str	r0, [r4, #0]
 8004be0:	b280      	uxth	r0, r0
 8004be2:	22ff      	movs	r2, #255	; 0xff
 8004be4:	0612      	lsls	r2, r2, #24
 8004be6:	4302      	orrs	r2, r0
 8004be8:	6022      	str	r2, [r4, #0]
 8004bea:	0388      	lsls	r0, r1, #14
 8004bec:	4310      	orrs	r0, r2
 8004bee:	6020      	str	r0, [r4, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	686b      	ldr	r3, [r5, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	095e      	lsrs	r6, r3, #5
 8004bf8:	4016      	ands	r6, r2
 8004bfa:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <__iar_annotation$$branch+0x686>)
 8004bfc:	e006      	b.n	8004c0c <__iar_annotation$$branch+0x692>
 8004bfe:	bf00      	nop
 8004c00:	ffff9fff 	.word	0xffff9fff
 8004c04:	00000494 	.word	0x00000494
 8004c08:	000004ac 	.word	0x000004ac
 8004c0c:	4003      	ands	r3, r0
 8004c0e:	0370      	lsls	r0, r6, #13
 8004c10:	4318      	orrs	r0, r3
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	4b7c      	ldr	r3, [pc, #496]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004c16:	4003      	ands	r3, r0
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6868      	ldr	r0, [r5, #4]
 8004c1c:	6800      	ldr	r0, [r0, #0]
 8004c1e:	0880      	lsrs	r0, r0, #2
 8004c20:	4002      	ands	r2, r0
 8004c22:	d002      	beq.n	8004c2a <__iar_annotation$$branch+0x6b0>
 8004c24:	6968      	ldr	r0, [r5, #20]
 8004c26:	0740      	lsls	r0, r0, #29
 8004c28:	0fc1      	lsrs	r1, r0, #31
 8004c2a:	9102      	str	r1, [sp, #8]
 8004c2c:	2089      	movs	r0, #137	; 0x89
 8004c2e:	9001      	str	r0, [sp, #4]
 8004c30:	2001      	movs	r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	0023      	movs	r3, r4
 8004c36:	220f      	movs	r2, #15
 8004c38:	2031      	movs	r0, #49	; 0x31
 8004c3a:	5c29      	ldrb	r1, [r5, r0]
 8004c3c:	0028      	movs	r0, r5
 8004c3e:	f7fc fc92 	bl	8001566 <PE_Send_DataMessage>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d172      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004c46:	2052      	movs	r0, #82	; 0x52
 8004c48:	e06c      	b.n	8004d24 <__iar_annotation$$branch+0x7aa>
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	5c28      	ldrb	r0, [r5, r0]
 8004c4e:	f7fb febb 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004c52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c54:	7809      	ldrb	r1, [r1, #0]
 8004c56:	4281      	cmp	r1, r0
 8004c58:	d000      	beq.n	8004c5c <__iar_annotation$$branch+0x6e2>
 8004c5a:	e1c9      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004c5c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004c5e:	0bc2      	lsrs	r2, r0, #15
 8004c60:	d1fa      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c62:	0b02      	lsrs	r2, r0, #12
 8004c64:	0752      	lsls	r2, r2, #29
 8004c66:	d06f      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c68:	06c0      	lsls	r0, r0, #27
 8004c6a:	0ec0      	lsrs	r0, r0, #27
 8004c6c:	280f      	cmp	r0, #15
 8004c6e:	d1f3      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c70:	2914      	cmp	r1, #20
 8004c72:	d005      	beq.n	8004c80 <__iar_annotation$$branch+0x706>
 8004c74:	2014      	movs	r0, #20
 8004c76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c78:	7008      	strb	r0, [r1, #0]
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7fb fe6b 	bl	8000956 <PE_Clear_RxEvent>
 8004c80:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004c82:	7881      	ldrb	r1, [r0, #2]
 8004c84:	06ca      	lsls	r2, r1, #27
 8004c86:	0ed2      	lsrs	r2, r2, #27
 8004c88:	2a02      	cmp	r2, #2
 8004c8a:	d1e5      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004c8c:	060c      	lsls	r4, r1, #24
 8004c8e:	d05b      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004c90:	68e9      	ldr	r1, [r5, #12]
 8004c92:	6989      	ldr	r1, [r1, #24]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d100      	bne.n	8004c9a <__iar_annotation$$branch+0x720>
 8004c98:	e268      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c9c:	1d81      	adds	r1, r0, #6
 8004c9e:	7c28      	ldrb	r0, [r5, #16]
 8004ca0:	f000 fc55 	bl	800554e <PE_SVDM_CheckSVIDs>
 8004ca4:	ab0b      	add	r3, sp, #44	; 0x2c
 8004ca6:	0fa2      	lsrs	r2, r4, #30
 8004ca8:	2031      	movs	r0, #49	; 0x31
 8004caa:	5c29      	ldrb	r1, [r5, r0]
 8004cac:	7c28      	ldrb	r0, [r5, #16]
 8004cae:	68ec      	ldr	r4, [r5, #12]
 8004cb0:	69a4      	ldr	r4, [r4, #24]
 8004cb2:	47a0      	blx	r4
 8004cb4:	2153      	movs	r1, #83	; 0x53
 8004cb6:	e077      	b.n	8004da8 <__iar_annotation$$branch+0x82e>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	400e      	ands	r6, r1
 8004cbc:	6026      	str	r6, [r4, #0]
 8004cbe:	4030      	ands	r0, r6
 8004cc0:	2103      	movs	r1, #3
 8004cc2:	4301      	orrs	r1, r0
 8004cc4:	6021      	str	r1, [r4, #0]
 8004cc6:	8920      	ldrh	r0, [r4, #8]
 8004cc8:	b28a      	uxth	r2, r1
 8004cca:	0401      	lsls	r1, r0, #16
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	6021      	str	r1, [r4, #0]
 8004cd0:	2080      	movs	r0, #128	; 0x80
 8004cd2:	0200      	lsls	r0, r0, #8
 8004cd4:	4308      	orrs	r0, r1
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	686a      	ldr	r2, [r5, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	0952      	lsrs	r2, r2, #5
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	0350      	lsls	r0, r2, #13
 8004ce8:	4318      	orrs	r0, r3
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004cee:	4002      	ands	r2, r0
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	6868      	ldr	r0, [r5, #4]
 8004cf4:	6800      	ldr	r0, [r0, #0]
 8004cf6:	0880      	lsrs	r0, r0, #2
 8004cf8:	4001      	ands	r1, r0
 8004cfa:	d003      	beq.n	8004d04 <__iar_annotation$$branch+0x78a>
 8004cfc:	6968      	ldr	r0, [r5, #20]
 8004cfe:	0741      	lsls	r1, r0, #29
 8004d00:	0fc8      	lsrs	r0, r1, #31
 8004d02:	e000      	b.n	8004d06 <__iar_annotation$$branch+0x78c>
 8004d04:	2002      	movs	r0, #2
 8004d06:	9002      	str	r0, [sp, #8]
 8004d08:	208b      	movs	r0, #139	; 0x8b
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	9000      	str	r0, [sp, #0]
 8004d10:	0023      	movs	r3, r4
 8004d12:	220f      	movs	r2, #15
 8004d14:	2031      	movs	r0, #49	; 0x31
 8004d16:	5c29      	ldrb	r1, [r5, r0]
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7fc fc24 	bl	8001566 <PE_Send_DataMessage>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d104      	bne.n	8004d2c <__iar_annotation$$branch+0x7b2>
 8004d22:	2053      	movs	r0, #83	; 0x53
 8004d24:	7728      	strb	r0, [r5, #28]
 8004d26:	488e      	ldr	r0, [pc, #568]	; (8004f60 <__iar_annotation$$branch+0x9e6>)
 8004d28:	83e8      	strh	r0, [r5, #30]
 8004d2a:	9704      	str	r7, [sp, #16]
 8004d2c:	e296      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004d2e:	2031      	movs	r0, #49	; 0x31
 8004d30:	5c28      	ldrb	r0, [r5, r0]
 8004d32:	f7fb fe49 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004d36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d38:	7809      	ldrb	r1, [r1, #0]
 8004d3a:	4281      	cmp	r1, r0
 8004d3c:	d18c      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d3e:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004d40:	0bc2      	lsrs	r2, r0, #15
 8004d42:	d189      	bne.n	8004c58 <__iar_annotation$$branch+0x6de>
 8004d44:	0b02      	lsrs	r2, r0, #12
 8004d46:	0752      	lsls	r2, r2, #29
 8004d48:	d100      	bne.n	8004d4c <__iar_annotation$$branch+0x7d2>
 8004d4a:	e151      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d4c:	06c0      	lsls	r0, r0, #27
 8004d4e:	0ec0      	lsrs	r0, r0, #27
 8004d50:	280f      	cmp	r0, #15
 8004d52:	d000      	beq.n	8004d56 <__iar_annotation$$branch+0x7dc>
 8004d54:	e14c      	b.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004d56:	2914      	cmp	r1, #20
 8004d58:	d005      	beq.n	8004d66 <__iar_annotation$$branch+0x7ec>
 8004d5a:	2014      	movs	r0, #20
 8004d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d5e:	7008      	strb	r0, [r1, #0]
 8004d60:	0028      	movs	r0, r5
 8004d62:	f7fb fdf8 	bl	8000956 <PE_Clear_RxEvent>
 8004d66:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004d68:	7881      	ldrb	r1, [r0, #2]
 8004d6a:	06ca      	lsls	r2, r1, #27
 8004d6c:	0ed2      	lsrs	r2, r2, #27
 8004d6e:	2a03      	cmp	r2, #3
 8004d70:	d1ef      	bne.n	8004d52 <__iar_annotation$$branch+0x7d8>
 8004d72:	098e      	lsrs	r6, r1, #6
 8004d74:	d0e8      	beq.n	8004d48 <__iar_annotation$$branch+0x7ce>
 8004d76:	68e9      	ldr	r1, [r5, #12]
 8004d78:	69c9      	ldr	r1, [r1, #28]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d017      	beq.n	8004dae <__iar_annotation$$branch+0x834>
 8004d7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d80:	1d82      	adds	r2, r0, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	0c01      	lsrs	r1, r0, #16
 8004d86:	7c28      	ldrb	r0, [r5, #16]
 8004d88:	f000 fc22 	bl	80055d0 <PE_SVDM_CheckModes>
 8004d8c:	2403      	movs	r4, #3
 8004d8e:	ab0b      	add	r3, sp, #44	; 0x2c
 8004d90:	2203      	movs	r2, #3
 8004d92:	4032      	ands	r2, r6
 8004d94:	2031      	movs	r0, #49	; 0x31
 8004d96:	5c29      	ldrb	r1, [r5, r0]
 8004d98:	7c28      	ldrb	r0, [r5, #16]
 8004d9a:	68ef      	ldr	r7, [r5, #12]
 8004d9c:	69ff      	ldr	r7, [r7, #28]
 8004d9e:	47b8      	blx	r7
 8004da0:	4034      	ands	r4, r6
 8004da2:	2c01      	cmp	r4, #1
 8004da4:	d103      	bne.n	8004dae <__iar_annotation$$branch+0x834>
 8004da6:	2154      	movs	r1, #84	; 0x54
 8004da8:	7c28      	ldrb	r0, [r5, #16]
 8004daa:	f7fb fb69 	bl	8000480 <USBPD_PE_Notification>
 8004dae:	e1dd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	400e      	ands	r6, r1
 8004db4:	6026      	str	r6, [r4, #0]
 8004db6:	4030      	ands	r0, r6
 8004db8:	2104      	movs	r1, #4
 8004dba:	4301      	orrs	r1, r0
 8004dbc:	6021      	str	r1, [r4, #0]
 8004dbe:	8920      	ldrh	r0, [r4, #8]
 8004dc0:	b289      	uxth	r1, r1
 8004dc2:	0400      	lsls	r0, r0, #16
 8004dc4:	4308      	orrs	r0, r1
 8004dc6:	6020      	str	r0, [r4, #0]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	4301      	orrs	r1, r0
 8004dce:	6021      	str	r1, [r4, #0]
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	686a      	ldr	r2, [r5, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	0952      	lsrs	r2, r2, #5
 8004dd8:	4002      	ands	r2, r0
 8004dda:	4b60      	ldr	r3, [pc, #384]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004ddc:	400b      	ands	r3, r1
 8004dde:	0351      	lsls	r1, r2, #13
 8004de0:	4319      	orrs	r1, r3
 8004de2:	6021      	str	r1, [r4, #0]
 8004de4:	696a      	ldr	r2, [r5, #20]
 8004de6:	05d2      	lsls	r2, r2, #23
 8004de8:	0f52      	lsrs	r2, r2, #29
 8004dea:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <__iar_annotation$$branch+0x88e>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	0211      	lsls	r1, r2, #8
 8004df0:	4319      	orrs	r1, r3
 8004df2:	6021      	str	r1, [r4, #0]
 8004df4:	6869      	ldr	r1, [r5, #4]
 8004df6:	6809      	ldr	r1, [r1, #0]
 8004df8:	0889      	lsrs	r1, r1, #2
 8004dfa:	4008      	ands	r0, r1
 8004dfc:	d006      	beq.n	8004e0c <__iar_annotation$$branch+0x892>
 8004dfe:	6968      	ldr	r0, [r5, #20]
 8004e00:	0741      	lsls	r1, r0, #29
 8004e02:	0fc8      	lsrs	r0, r1, #31
 8004e04:	e003      	b.n	8004e0e <__iar_annotation$$branch+0x894>
 8004e06:	bf00      	nop
 8004e08:	fffff8ff 	.word	0xfffff8ff
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	9002      	str	r0, [sp, #8]
 8004e10:	208c      	movs	r0, #140	; 0x8c
 8004e12:	9001      	str	r0, [sp, #4]
 8004e14:	2001      	movs	r0, #1
 8004e16:	9000      	str	r0, [sp, #0]
 8004e18:	0023      	movs	r3, r4
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	2031      	movs	r0, #49	; 0x31
 8004e1e:	5c29      	ldrb	r1, [r5, r0]
 8004e20:	0028      	movs	r0, r5
 8004e22:	f7fc fba0 	bl	8001566 <PE_Send_DataMessage>
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d000      	beq.n	8004e2c <__iar_annotation$$branch+0x8b2>
 8004e2a:	e217      	b.n	800525c <__iar_annotation$$branch+0xce2>
 8004e2c:	2054      	movs	r0, #84	; 0x54
 8004e2e:	7728      	strb	r0, [r5, #28]
 8004e30:	2134      	movs	r1, #52	; 0x34
 8004e32:	e08c      	b.n	8004f4e <__iar_annotation$$branch+0x9d4>
 8004e34:	2634      	movs	r6, #52	; 0x34
 8004e36:	2031      	movs	r0, #49	; 0x31
 8004e38:	5c28      	ldrb	r0, [r5, r0]
 8004e3a:	f7fb fdc5 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004e3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e40:	7809      	ldrb	r1, [r1, #0]
 8004e42:	4281      	cmp	r1, r0
 8004e44:	d144      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e46:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004e48:	0bc2      	lsrs	r2, r0, #15
 8004e4a:	d141      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e4c:	2707      	movs	r7, #7
 8004e4e:	0b02      	lsrs	r2, r0, #12
 8004e50:	423a      	tst	r2, r7
 8004e52:	d03d      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e54:	06c0      	lsls	r0, r0, #27
 8004e56:	0ec0      	lsrs	r0, r0, #27
 8004e58:	280f      	cmp	r0, #15
 8004e5a:	d139      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e5c:	2914      	cmp	r1, #20
 8004e5e:	d005      	beq.n	8004e6c <__iar_annotation$$branch+0x8f2>
 8004e60:	2014      	movs	r0, #20
 8004e62:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e64:	7008      	strb	r0, [r1, #0]
 8004e66:	0028      	movs	r0, r5
 8004e68:	f7fb fd75 	bl	8000956 <PE_Clear_RxEvent>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	7728      	strb	r0, [r5, #28]
 8004e70:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004e72:	7880      	ldrb	r0, [r0, #2]
 8004e74:	06c1      	lsls	r1, r0, #27
 8004e76:	0ec9      	lsrs	r1, r1, #27
 8004e78:	2904      	cmp	r1, #4
 8004e7a:	d129      	bne.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e7c:	0980      	lsrs	r0, r0, #6
 8004e7e:	d027      	beq.n	8004ed0 <__iar_annotation$$branch+0x956>
 8004e80:	9001      	str	r0, [sp, #4]
 8004e82:	488f      	ldr	r0, [pc, #572]	; (80050c0 <__iar_annotation$$branch+0xb46>)
 8004e84:	9901      	ldr	r1, [sp, #4]
 8004e86:	2901      	cmp	r1, #1
 8004e88:	d004      	beq.n	8004e94 <__iar_annotation$$branch+0x91a>
 8004e8a:	d30e      	bcc.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e8c:	2903      	cmp	r1, #3
 8004e8e:	d008      	beq.n	8004ea2 <__iar_annotation$$branch+0x928>
 8004e90:	d302      	bcc.n	8004e98 <__iar_annotation$$branch+0x91e>
 8004e92:	e00a      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e94:	2635      	movs	r6, #53	; 0x35
 8004e96:	e008      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004e98:	6969      	ldr	r1, [r5, #20]
 8004e9a:	4008      	ands	r0, r1
 8004e9c:	6168      	str	r0, [r5, #20]
 8004e9e:	2636      	movs	r6, #54	; 0x36
 8004ea0:	e003      	b.n	8004eaa <__iar_annotation$$branch+0x930>
 8004ea2:	6969      	ldr	r1, [r5, #20]
 8004ea4:	4008      	ands	r0, r1
 8004ea6:	6168      	str	r0, [r5, #20]
 8004ea8:	2637      	movs	r6, #55	; 0x37
 8004eaa:	0031      	movs	r1, r6
 8004eac:	7c28      	ldrb	r0, [r5, #16]
 8004eae:	f7fb fae7 	bl	8000480 <USBPD_PE_Notification>
 8004eb2:	68e8      	ldr	r0, [r5, #12]
 8004eb4:	6a06      	ldr	r6, [r0, #32]
 8004eb6:	2e00      	cmp	r6, #0
 8004eb8:	d009      	beq.n	8004ece <__iar_annotation$$branch+0x954>
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	0a01      	lsrs	r1, r0, #8
 8004ebe:	400f      	ands	r7, r1
 8004ec0:	9700      	str	r7, [sp, #0]
 8004ec2:	0c03      	lsrs	r3, r0, #16
 8004ec4:	9a01      	ldr	r2, [sp, #4]
 8004ec6:	2031      	movs	r0, #49	; 0x31
 8004ec8:	5c29      	ldrb	r1, [r5, r0]
 8004eca:	7c28      	ldrb	r0, [r5, #16]
 8004ecc:	47b0      	blx	r6
 8004ece:	e14d      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ed0:	5da8      	ldrb	r0, [r5, r6]
 8004ed2:	e08f      	b.n	8004ff4 <__iar_annotation$$branch+0xa7a>
 8004ed4:	6821      	ldr	r1, [r4, #0]
 8004ed6:	400e      	ands	r6, r1
 8004ed8:	6026      	str	r6, [r4, #0]
 8004eda:	4030      	ands	r0, r6
 8004edc:	2105      	movs	r1, #5
 8004ede:	4301      	orrs	r1, r0
 8004ee0:	6021      	str	r1, [r4, #0]
 8004ee2:	8920      	ldrh	r0, [r4, #8]
 8004ee4:	b289      	uxth	r1, r1
 8004ee6:	0400      	lsls	r0, r0, #16
 8004ee8:	4308      	orrs	r0, r1
 8004eea:	6020      	str	r0, [r4, #0]
 8004eec:	2180      	movs	r1, #128	; 0x80
 8004eee:	0209      	lsls	r1, r1, #8
 8004ef0:	4301      	orrs	r1, r0
 8004ef2:	6021      	str	r1, [r4, #0]
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	686a      	ldr	r2, [r5, #4]
 8004ef8:	6812      	ldr	r2, [r2, #0]
 8004efa:	0952      	lsrs	r2, r2, #5
 8004efc:	4002      	ands	r2, r0
 8004efe:	4b17      	ldr	r3, [pc, #92]	; (8004f5c <__iar_annotation$$branch+0x9e2>)
 8004f00:	400b      	ands	r3, r1
 8004f02:	0351      	lsls	r1, r2, #13
 8004f04:	4319      	orrs	r1, r3
 8004f06:	6021      	str	r1, [r4, #0]
 8004f08:	696a      	ldr	r2, [r5, #20]
 8004f0a:	05d2      	lsls	r2, r2, #23
 8004f0c:	0f52      	lsrs	r2, r2, #29
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 8004f10:	400b      	ands	r3, r1
 8004f12:	0211      	lsls	r1, r2, #8
 8004f14:	4319      	orrs	r1, r3
 8004f16:	6021      	str	r1, [r4, #0]
 8004f18:	6869      	ldr	r1, [r5, #4]
 8004f1a:	6809      	ldr	r1, [r1, #0]
 8004f1c:	0889      	lsrs	r1, r1, #2
 8004f1e:	4008      	ands	r0, r1
 8004f20:	d003      	beq.n	8004f2a <__iar_annotation$$branch+0x9b0>
 8004f22:	6968      	ldr	r0, [r5, #20]
 8004f24:	0741      	lsls	r1, r0, #29
 8004f26:	0fc8      	lsrs	r0, r1, #31
 8004f28:	e000      	b.n	8004f2c <__iar_annotation$$branch+0x9b2>
 8004f2a:	2002      	movs	r0, #2
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	208d      	movs	r0, #141	; 0x8d
 8004f30:	9001      	str	r0, [sp, #4]
 8004f32:	2001      	movs	r0, #1
 8004f34:	9000      	str	r0, [sp, #0]
 8004f36:	0023      	movs	r3, r4
 8004f38:	220f      	movs	r2, #15
 8004f3a:	2031      	movs	r0, #49	; 0x31
 8004f3c:	5c29      	ldrb	r1, [r5, r0]
 8004f3e:	0028      	movs	r0, r5
 8004f40:	f7fc fb11 	bl	8001566 <PE_Send_DataMessage>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d15e      	bne.n	8005006 <__iar_annotation$$branch+0xa8c>
 8004f48:	2055      	movs	r0, #85	; 0x55
 8004f4a:	7728      	strb	r0, [r5, #28]
 8004f4c:	2155      	movs	r1, #85	; 0x55
 8004f4e:	7c28      	ldrb	r0, [r5, #16]
 8004f50:	f7fb fa96 	bl	8000480 <USBPD_PE_Notification>
 8004f54:	48c3      	ldr	r0, [pc, #780]	; (8005264 <.text_19>)
 8004f56:	83e8      	strh	r0, [r5, #30]
 8004f58:	2032      	movs	r0, #50	; 0x32
 8004f5a:	e12c      	b.n	80051b6 <__iar_annotation$$branch+0xc3c>
 8004f5c:	ffff9fff 	.word	0xffff9fff
 8004f60:	0000801e 	.word	0x0000801e
 8004f64:	2031      	movs	r0, #49	; 0x31
 8004f66:	5c28      	ldrb	r0, [r5, r0]
 8004f68:	f7fb fd2e 	bl	80009c8 <PE_Convert_SOPRxEvent>
 8004f6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f6e:	7809      	ldrb	r1, [r1, #0]
 8004f70:	4281      	cmp	r1, r0
 8004f72:	d13d      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f74:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 8004f76:	0bc2      	lsrs	r2, r0, #15
 8004f78:	d13a      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f7a:	2607      	movs	r6, #7
 8004f7c:	0b02      	lsrs	r2, r0, #12
 8004f7e:	4232      	tst	r2, r6
 8004f80:	d036      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f82:	06c0      	lsls	r0, r0, #27
 8004f84:	0ec0      	lsrs	r0, r0, #27
 8004f86:	280f      	cmp	r0, #15
 8004f88:	d132      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004f8a:	2914      	cmp	r1, #20
 8004f8c:	d005      	beq.n	8004f9a <__iar_annotation$$branch+0xa20>
 8004f8e:	2014      	movs	r0, #20
 8004f90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f92:	7008      	strb	r0, [r1, #0]
 8004f94:	0028      	movs	r0, r5
 8004f96:	f7fb fcde 	bl	8000956 <PE_Clear_RxEvent>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	7728      	strb	r0, [r5, #28]
 8004f9e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8004fa0:	7880      	ldrb	r0, [r0, #2]
 8004fa2:	06c1      	lsls	r1, r0, #27
 8004fa4:	0ec9      	lsrs	r1, r1, #27
 8004fa6:	2905      	cmp	r1, #5
 8004fa8:	d122      	bne.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004faa:	0980      	lsrs	r0, r0, #6
 8004fac:	d020      	beq.n	8004ff0 <__iar_annotation$$branch+0xa76>
 8004fae:	9001      	str	r0, [sp, #4]
 8004fb0:	2801      	cmp	r0, #1
 8004fb2:	d004      	beq.n	8004fbe <__iar_annotation$$branch+0xa44>
 8004fb4:	d309      	bcc.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fb6:	2803      	cmp	r0, #3
 8004fb8:	d005      	beq.n	8004fc6 <__iar_annotation$$branch+0xa4c>
 8004fba:	d302      	bcc.n	8004fc2 <__iar_annotation$$branch+0xa48>
 8004fbc:	e005      	b.n	8004fca <__iar_annotation$$branch+0xa50>
 8004fbe:	2156      	movs	r1, #86	; 0x56
 8004fc0:	e004      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc2:	2157      	movs	r1, #87	; 0x57
 8004fc4:	e002      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fc6:	2158      	movs	r1, #88	; 0x58
 8004fc8:	e000      	b.n	8004fcc <__iar_annotation$$branch+0xa52>
 8004fca:	2155      	movs	r1, #85	; 0x55
 8004fcc:	7c28      	ldrb	r0, [r5, #16]
 8004fce:	f7fb fa57 	bl	8000480 <USBPD_PE_Notification>
 8004fd2:	68e8      	ldr	r0, [r5, #12]
 8004fd4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d009      	beq.n	8004fee <__iar_annotation$$branch+0xa74>
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	0a01      	lsrs	r1, r0, #8
 8004fde:	400e      	ands	r6, r1
 8004fe0:	9600      	str	r6, [sp, #0]
 8004fe2:	0c03      	lsrs	r3, r0, #16
 8004fe4:	9a01      	ldr	r2, [sp, #4]
 8004fe6:	2031      	movs	r0, #49	; 0x31
 8004fe8:	5c29      	ldrb	r1, [r5, r0]
 8004fea:	7c28      	ldrb	r0, [r5, #16]
 8004fec:	47b8      	blx	r7
 8004fee:	e0bd      	b.n	800516c <__iar_annotation$$branch+0xbf2>
 8004ff0:	2034      	movs	r0, #52	; 0x34
 8004ff2:	5c28      	ldrb	r0, [r5, r0]
 8004ff4:	06c0      	lsls	r0, r0, #27
 8004ff6:	0ec0      	lsrs	r0, r0, #27
 8004ff8:	2810      	cmp	r0, #16
 8004ffa:	d100      	bne.n	8004ffe <__iar_annotation$$branch+0xa84>
 8004ffc:	e0bf      	b.n	800517e <__iar_annotation$$branch+0xc04>
 8004ffe:	8be8      	ldrh	r0, [r5, #30]
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	0209      	lsls	r1, r1, #8
 8005004:	4288      	cmp	r0, r1
 8005006:	d000      	beq.n	800500a <__iar_annotation$$branch+0xa90>
 8005008:	e128      	b.n	800525c <__iar_annotation$$branch+0xce2>
 800500a:	e0d1      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 800500c:	2100      	movs	r1, #0
 800500e:	466a      	mov	r2, sp
 8005010:	7311      	strb	r1, [r2, #12]
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	400e      	ands	r6, r1
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	6861      	ldr	r1, [r4, #4]
 800501a:	4030      	ands	r0, r6
 800501c:	06c9      	lsls	r1, r1, #27
 800501e:	0ec9      	lsrs	r1, r1, #27
 8005020:	4301      	orrs	r1, r0
 8005022:	6021      	str	r1, [r4, #0]
 8005024:	8920      	ldrh	r0, [r4, #8]
 8005026:	b28a      	uxth	r2, r1
 8005028:	0401      	lsls	r1, r0, #16
 800502a:	4311      	orrs	r1, r2
 800502c:	6021      	str	r1, [r4, #0]
 800502e:	2080      	movs	r0, #128	; 0x80
 8005030:	0200      	lsls	r0, r0, #8
 8005032:	4308      	orrs	r0, r1
 8005034:	6020      	str	r0, [r4, #0]
 8005036:	2601      	movs	r6, #1
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	6809      	ldr	r1, [r1, #0]
 800503c:	0949      	lsrs	r1, r1, #5
 800503e:	4031      	ands	r1, r6
 8005040:	4aaa      	ldr	r2, [pc, #680]	; (80052ec <.text_21>)
 8005042:	4002      	ands	r2, r0
 8005044:	0348      	lsls	r0, r1, #13
 8005046:	4310      	orrs	r0, r2
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	491e      	ldr	r1, [pc, #120]	; (80050c4 <__iar_annotation$$branch+0xb4a>)
 800504c:	4001      	ands	r1, r0
 800504e:	0230      	lsls	r0, r6, #8
 8005050:	4308      	orrs	r0, r1
 8005052:	6020      	str	r0, [r4, #0]
 8005054:	9005      	str	r0, [sp, #20]
 8005056:	68e8      	ldr	r0, [r5, #12]
 8005058:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2800      	cmp	r0, #0
 800505e:	d00b      	beq.n	8005078 <__iar_annotation$$branch+0xafe>
 8005060:	a805      	add	r0, sp, #20
 8005062:	1d00      	adds	r0, r0, #4
 8005064:	9000      	str	r0, [sp, #0]
 8005066:	ab03      	add	r3, sp, #12
 8005068:	7820      	ldrb	r0, [r4, #0]
 800506a:	06c2      	lsls	r2, r0, #27
 800506c:	0ed2      	lsrs	r2, r2, #27
 800506e:	2031      	movs	r0, #49	; 0x31
 8005070:	5c29      	ldrb	r1, [r5, r0]
 8005072:	7c28      	ldrb	r0, [r5, #16]
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	47a0      	blx	r4
 8005078:	4668      	mov	r0, sp
 800507a:	7b00      	ldrb	r0, [r0, #12]
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	4669      	mov	r1, sp
 8005080:	7308      	strb	r0, [r1, #12]
 8005082:	6868      	ldr	r0, [r5, #4]
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	0880      	lsrs	r0, r0, #2
 8005088:	4006      	ands	r6, r0
 800508a:	d003      	beq.n	8005094 <__iar_annotation$$branch+0xb1a>
 800508c:	6968      	ldr	r0, [r5, #20]
 800508e:	0741      	lsls	r1, r0, #29
 8005090:	0fc8      	lsrs	r0, r1, #31
 8005092:	e000      	b.n	8005096 <__iar_annotation$$branch+0xb1c>
 8005094:	2002      	movs	r0, #2
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	208f      	movs	r0, #143	; 0x8f
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	4668      	mov	r0, sp
 800509e:	7b00      	ldrb	r0, [r0, #12]
 80050a0:	9000      	str	r0, [sp, #0]
 80050a2:	ab05      	add	r3, sp, #20
 80050a4:	220f      	movs	r2, #15
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	5c29      	ldrb	r1, [r5, r0]
 80050aa:	0028      	movs	r0, r5
 80050ac:	f7fc fa5b 	bl	8001566 <PE_Send_DataMessage>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d104      	bne.n	80050be <__iar_annotation$$branch+0xb44>
 80050b4:	205a      	movs	r0, #90	; 0x5a
 80050b6:	7728      	strb	r0, [r5, #28]
 80050b8:	48bf      	ldr	r0, [pc, #764]	; (80053b8 <.text_23>)
 80050ba:	83e8      	strh	r0, [r5, #30]
 80050bc:	9704      	str	r7, [sp, #16]
 80050be:	e0ca      	b.n	8005256 <__iar_annotation$$branch+0xcdc>
 80050c0:	fffffe3f 	.word	0xfffffe3f
 80050c4:	fffff8ff 	.word	0xfffff8ff
 80050c8:	2607      	movs	r6, #7
 80050ca:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050cc:	0b00      	lsrs	r0, r0, #12
 80050ce:	2107      	movs	r1, #7
 80050d0:	4001      	ands	r1, r0
 80050d2:	1e48      	subs	r0, r1, #1
 80050d4:	4669      	mov	r1, sp
 80050d6:	7108      	strb	r0, [r1, #4]
 80050d8:	2031      	movs	r0, #49	; 0x31
 80050da:	5c28      	ldrb	r0, [r5, r0]
 80050dc:	f7fb fc74 	bl	80009c8 <PE_Convert_SOPRxEvent>
 80050e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050e2:	7809      	ldrb	r1, [r1, #0]
 80050e4:	4281      	cmp	r1, r0
 80050e6:	d144      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050e8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
 80050ea:	0bc2      	lsrs	r2, r0, #15
 80050ec:	d141      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050ee:	0b02      	lsrs	r2, r0, #12
 80050f0:	4232      	tst	r2, r6
 80050f2:	d03e      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050f4:	06c0      	lsls	r0, r0, #27
 80050f6:	0ec0      	lsrs	r0, r0, #27
 80050f8:	280f      	cmp	r0, #15
 80050fa:	d13a      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 80050fc:	2914      	cmp	r1, #20
 80050fe:	d005      	beq.n	800510c <__iar_annotation$$branch+0xb92>
 8005100:	2014      	movs	r0, #20
 8005102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005104:	7008      	strb	r0, [r1, #0]
 8005106:	0028      	movs	r0, r5
 8005108:	f7fb fc25 	bl	8000956 <PE_Clear_RxEvent>
 800510c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800510e:	7880      	ldrb	r0, [r0, #2]
 8005110:	06c1      	lsls	r1, r0, #27
 8005112:	0ec9      	lsrs	r1, r1, #27
 8005114:	6862      	ldr	r2, [r4, #4]
 8005116:	4291      	cmp	r1, r2
 8005118:	d12b      	bne.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511a:	0981      	lsrs	r1, r0, #6
 800511c:	d029      	beq.n	8005172 <__iar_annotation$$branch+0xbf8>
 800511e:	68e9      	ldr	r1, [r5, #12]
 8005120:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005122:	2900      	cmp	r1, #0
 8005124:	d022      	beq.n	800516c <__iar_annotation$$branch+0xbf2>
 8005126:	2600      	movs	r6, #0
 8005128:	e011      	b.n	800514e <__iar_annotation$$branch+0xbd4>
 800512a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800512c:	00b2      	lsls	r2, r6, #2
 800512e:	188b      	adds	r3, r1, r2
 8005130:	799c      	ldrb	r4, [r3, #6]
 8005132:	79df      	ldrb	r7, [r3, #7]
 8005134:	023f      	lsls	r7, r7, #8
 8005136:	19e4      	adds	r4, r4, r7
 8005138:	3108      	adds	r1, #8
 800513a:	5c89      	ldrb	r1, [r1, r2]
 800513c:	0409      	lsls	r1, r1, #16
 800513e:	1861      	adds	r1, r4, r1
 8005140:	7a5a      	ldrb	r2, [r3, #9]
 8005142:	0612      	lsls	r2, r2, #24
 8005144:	1889      	adds	r1, r1, r2
 8005146:	aa05      	add	r2, sp, #20
 8005148:	00b3      	lsls	r3, r6, #2
 800514a:	50d1      	str	r1, [r2, r3]
 800514c:	1c76      	adds	r6, r6, #1
 800514e:	4669      	mov	r1, sp
 8005150:	7909      	ldrb	r1, [r1, #4]
 8005152:	428e      	cmp	r6, r1
 8005154:	d3e9      	bcc.n	800512a <__iar_annotation$$branch+0xbb0>
 8005156:	a905      	add	r1, sp, #20
 8005158:	9100      	str	r1, [sp, #0]
 800515a:	ab01      	add	r3, sp, #4
 800515c:	06c2      	lsls	r2, r0, #27
 800515e:	0ed2      	lsrs	r2, r2, #27
 8005160:	2031      	movs	r0, #49	; 0x31
 8005162:	5c29      	ldrb	r1, [r5, r0]
 8005164:	7c28      	ldrb	r0, [r5, #16]
 8005166:	68ec      	ldr	r4, [r5, #12]
 8005168:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800516a:	47a0      	blx	r4
 800516c:	2000      	movs	r0, #0
 800516e:	83e8      	strh	r0, [r5, #30]
 8005170:	e01e      	b.n	80051b0 <__iar_annotation$$branch+0xc36>
 8005172:	2034      	movs	r0, #52	; 0x34
 8005174:	5c28      	ldrb	r0, [r5, r0]
 8005176:	06c0      	lsls	r0, r0, #27
 8005178:	0ec0      	lsrs	r0, r0, #27
 800517a:	2810      	cmp	r0, #16
 800517c:	d113      	bne.n	80051a6 <__iar_annotation$$branch+0xc2c>
 800517e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005180:	7800      	ldrb	r0, [r0, #0]
 8005182:	2814      	cmp	r0, #20
 8005184:	d005      	beq.n	8005192 <__iar_annotation$$branch+0xc18>
 8005186:	2014      	movs	r0, #20
 8005188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800518a:	7008      	strb	r0, [r1, #0]
 800518c:	0028      	movs	r0, r5
 800518e:	f7fb fbe2 	bl	8000956 <PE_Clear_RxEvent>
 8005192:	2000      	movs	r0, #0
 8005194:	83e8      	strh	r0, [r5, #30]
 8005196:	2103      	movs	r1, #3
 8005198:	7469      	strb	r1, [r5, #17]
 800519a:	9004      	str	r0, [sp, #16]
 800519c:	2159      	movs	r1, #89	; 0x59
 800519e:	7c28      	ldrb	r0, [r5, #16]
 80051a0:	f7fb f96e 	bl	8000480 <USBPD_PE_Notification>
 80051a4:	e05a      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051a6:	8be8      	ldrh	r0, [r5, #30]
 80051a8:	2180      	movs	r1, #128	; 0x80
 80051aa:	0209      	lsls	r1, r1, #8
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d155      	bne.n	800525c <__iar_annotation$$branch+0xce2>
 80051b0:	2003      	movs	r0, #3
 80051b2:	7468      	strb	r0, [r5, #17]
 80051b4:	2000      	movs	r0, #0
 80051b6:	9004      	str	r0, [sp, #16]
 80051b8:	e050      	b.n	800525c <__iar_annotation$$branch+0xce2>
 80051ba:	2100      	movs	r1, #0
 80051bc:	466a      	mov	r2, sp
 80051be:	7311      	strb	r1, [r2, #12]
 80051c0:	6821      	ldr	r1, [r4, #0]
 80051c2:	400e      	ands	r6, r1
 80051c4:	6026      	str	r6, [r4, #0]
 80051c6:	6861      	ldr	r1, [r4, #4]
 80051c8:	4030      	ands	r0, r6
 80051ca:	06c9      	lsls	r1, r1, #27
 80051cc:	0ec9      	lsrs	r1, r1, #27
 80051ce:	4301      	orrs	r1, r0
 80051d0:	6021      	str	r1, [r4, #0]
 80051d2:	8920      	ldrh	r0, [r4, #8]
 80051d4:	b28a      	uxth	r2, r1
 80051d6:	0401      	lsls	r1, r0, #16
 80051d8:	4311      	orrs	r1, r2
 80051da:	6021      	str	r1, [r4, #0]
 80051dc:	2080      	movs	r0, #128	; 0x80
 80051de:	0200      	lsls	r0, r0, #8
 80051e0:	4308      	orrs	r0, r1
 80051e2:	6020      	str	r0, [r4, #0]
 80051e4:	2601      	movs	r6, #1
 80051e6:	6869      	ldr	r1, [r5, #4]
 80051e8:	6809      	ldr	r1, [r1, #0]
 80051ea:	0949      	lsrs	r1, r1, #5
 80051ec:	4031      	ands	r1, r6
 80051ee:	4a3f      	ldr	r2, [pc, #252]	; (80052ec <.text_21>)
 80051f0:	4002      	ands	r2, r0
 80051f2:	0348      	lsls	r0, r1, #13
 80051f4:	4310      	orrs	r0, r2
 80051f6:	6020      	str	r0, [r4, #0]
 80051f8:	4970      	ldr	r1, [pc, #448]	; (80053bc <.text_24>)
 80051fa:	4001      	ands	r1, r0
 80051fc:	0230      	lsls	r0, r6, #8
 80051fe:	4308      	orrs	r0, r1
 8005200:	6020      	str	r0, [r4, #0]
 8005202:	9005      	str	r0, [sp, #20]
 8005204:	68e8      	ldr	r0, [r5, #12]
 8005206:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <__iar_annotation$$branch+0xc9c>
 800520c:	a805      	add	r0, sp, #20
 800520e:	1d02      	adds	r2, r0, #4
 8005210:	a903      	add	r1, sp, #12
 8005212:	7c28      	ldrb	r0, [r5, #16]
 8005214:	4798      	blx	r3
 8005216:	4668      	mov	r0, sp
 8005218:	7b00      	ldrb	r0, [r0, #12]
 800521a:	1c40      	adds	r0, r0, #1
 800521c:	4669      	mov	r1, sp
 800521e:	7308      	strb	r0, [r1, #12]
 8005220:	6868      	ldr	r0, [r5, #4]
 8005222:	6800      	ldr	r0, [r0, #0]
 8005224:	0880      	lsrs	r0, r0, #2
 8005226:	4006      	ands	r6, r0
 8005228:	d003      	beq.n	8005232 <__iar_annotation$$branch+0xcb8>
 800522a:	6968      	ldr	r0, [r5, #20]
 800522c:	0741      	lsls	r1, r0, #29
 800522e:	0fc8      	lsrs	r0, r1, #31
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xcba>
 8005232:	2002      	movs	r0, #2
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	2003      	movs	r0, #3
 8005238:	9001      	str	r0, [sp, #4]
 800523a:	4668      	mov	r0, sp
 800523c:	7b00      	ldrb	r0, [r0, #12]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	ab05      	add	r3, sp, #20
 8005242:	220f      	movs	r2, #15
 8005244:	2031      	movs	r0, #49	; 0x31
 8005246:	5c29      	ldrb	r1, [r5, r0]
 8005248:	0028      	movs	r0, r5
 800524a:	f7fc f98c 	bl	8001566 <PE_Send_DataMessage>
 800524e:	2800      	cmp	r0, #0
 8005250:	d101      	bne.n	8005256 <__iar_annotation$$branch+0xcdc>
 8005252:	205a      	movs	r0, #90	; 0x5a
 8005254:	7728      	strb	r0, [r5, #28]
 8005256:	2000      	movs	r0, #0
 8005258:	2132      	movs	r1, #50	; 0x32
 800525a:	5468      	strb	r0, [r5, r1]
 800525c:	9804      	ldr	r0, [sp, #16]
 800525e:	b01d      	add	sp, #116	; 0x74
 8005260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005264 <.text_19>:
 8005264:	00008032 	.word	0x00008032

08005268 <PE_StateMachine_UVDM>:
 8005268:	2914      	cmp	r1, #20
 800526a:	d000      	beq.n	800526e <PE_StateMachine_UVDM+0x6>
 800526c:	4770      	bx	lr
 800526e:	b570      	push	{r4, r5, r6, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	0004      	movs	r4, r0
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	2800      	cmp	r0, #0
 8005278:	d035      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 800527a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800527c:	2800      	cmp	r0, #0
 800527e:	d032      	beq.n	80052e6 <PE_StateMachine_UVDM+0x7e>
 8005280:	2500      	movs	r5, #0
 8005282:	4669      	mov	r1, sp
 8005284:	730d      	strb	r5, [r1, #12]
 8005286:	a805      	add	r0, sp, #20
 8005288:	1d03      	adds	r3, r0, #4
 800528a:	aa03      	add	r2, sp, #12
 800528c:	a904      	add	r1, sp, #16
 800528e:	7c20      	ldrb	r0, [r4, #16]
 8005290:	68e6      	ldr	r6, [r4, #12]
 8005292:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8005294:	47b0      	blx	r6
 8005296:	9804      	ldr	r0, [sp, #16]
 8005298:	49cc      	ldr	r1, [pc, #816]	; (80055cc <.text_27>)
 800529a:	4001      	ands	r1, r0
 800529c:	9104      	str	r1, [sp, #16]
 800529e:	4668      	mov	r0, sp
 80052a0:	7b00      	ldrb	r0, [r0, #12]
 80052a2:	1c40      	adds	r0, r0, #1
 80052a4:	4669      	mov	r1, sp
 80052a6:	7308      	strb	r0, [r1, #12]
 80052a8:	9804      	ldr	r0, [sp, #16]
 80052aa:	9005      	str	r0, [sp, #20]
 80052ac:	6860      	ldr	r0, [r4, #4]
 80052ae:	6800      	ldr	r0, [r0, #0]
 80052b0:	0741      	lsls	r1, r0, #29
 80052b2:	0fc9      	lsrs	r1, r1, #31
 80052b4:	d003      	beq.n	80052be <PE_StateMachine_UVDM+0x56>
 80052b6:	6960      	ldr	r0, [r4, #20]
 80052b8:	0741      	lsls	r1, r0, #29
 80052ba:	0fc8      	lsrs	r0, r1, #31
 80052bc:	e000      	b.n	80052c0 <PE_StateMachine_UVDM+0x58>
 80052be:	2002      	movs	r0, #2
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	2003      	movs	r0, #3
 80052c4:	9001      	str	r0, [sp, #4]
 80052c6:	4668      	mov	r0, sp
 80052c8:	7b00      	ldrb	r0, [r0, #12]
 80052ca:	9000      	str	r0, [sp, #0]
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	220f      	movs	r2, #15
 80052d0:	2031      	movs	r0, #49	; 0x31
 80052d2:	5c21      	ldrb	r1, [r4, r0]
 80052d4:	0020      	movs	r0, r4
 80052d6:	f7fc f946 	bl	8001566 <PE_Send_DataMessage>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d101      	bne.n	80052e2 <PE_StateMachine_UVDM+0x7a>
 80052de:	2059      	movs	r0, #89	; 0x59
 80052e0:	7720      	strb	r0, [r4, #28]
 80052e2:	2032      	movs	r0, #50	; 0x32
 80052e4:	5425      	strb	r5, [r4, r0]
 80052e6:	b00c      	add	sp, #48	; 0x30
 80052e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080052ec <.text_21>:
 80052ec:	ffff9fff 	.word	0xffff9fff

080052f0 <PE_Check_DataMessageVDM>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	2403      	movs	r4, #3
 80052f4:	2501      	movs	r5, #1
 80052f6:	6801      	ldr	r1, [r0, #0]
 80052f8:	6849      	ldr	r1, [r1, #4]
 80052fa:	0949      	lsrs	r1, r1, #5
 80052fc:	4029      	ands	r1, r5
 80052fe:	d01f      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005300:	68c1      	ldr	r1, [r0, #12]
 8005302:	2900      	cmp	r1, #0
 8005304:	d01c      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005306:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005308:	788a      	ldrb	r2, [r1, #2]
 800530a:	78cb      	ldrb	r3, [r1, #3]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	18d2      	adds	r2, r2, r3
 8005310:	790b      	ldrb	r3, [r1, #4]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	18d2      	adds	r2, r2, r3
 8005316:	7949      	ldrb	r1, [r1, #5]
 8005318:	0609      	lsls	r1, r1, #24
 800531a:	1851      	adds	r1, r2, r1
 800531c:	9100      	str	r1, [sp, #0]
 800531e:	0bca      	lsrs	r2, r1, #15
 8005320:	402a      	ands	r2, r5
 8005322:	d014      	beq.n	800534e <PE_Check_DataMessageVDM+0x5e>
 8005324:	2394      	movs	r3, #148	; 0x94
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	50c1      	str	r1, [r0, r3]
 800532a:	0989      	lsrs	r1, r1, #6
 800532c:	4021      	ands	r1, r4
 800532e:	d107      	bne.n	8005340 <PE_Check_DataMessageVDM+0x50>
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	6849      	ldr	r1, [r1, #4]
 8005334:	0a09      	lsrs	r1, r1, #8
 8005336:	4029      	ands	r1, r5
 8005338:	d002      	beq.n	8005340 <PE_Check_DataMessageVDM+0x50>
 800533a:	f7ff f840 	bl	80043be <PE_Receive_SVDM>
 800533e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005340:	6841      	ldr	r1, [r0, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	400c      	ands	r4, r1
 8005346:	2c02      	cmp	r4, #2
 8005348:	d134      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 800534a:	7445      	strb	r5, [r0, #17]
 800534c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800534e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 8005350:	0449      	lsls	r1, r1, #17
 8005352:	0f49      	lsrs	r1, r1, #29
 8005354:	1e49      	subs	r1, r1, #1
 8005356:	4ab1      	ldr	r2, [pc, #708]	; (800561c <.text_29>)
 8005358:	5481      	strb	r1, [r0, r2]
 800535a:	0006      	movs	r6, r0
 800535c:	2000      	movs	r0, #0
 800535e:	e00f      	b.n	8005380 <PE_Check_DataMessageVDM+0x90>
 8005360:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8005362:	0082      	lsls	r2, r0, #2
 8005364:	1889      	adds	r1, r1, r2
 8005366:	798a      	ldrb	r2, [r1, #6]
 8005368:	79cf      	ldrb	r7, [r1, #7]
 800536a:	023f      	lsls	r7, r7, #8
 800536c:	19d2      	adds	r2, r2, r7
 800536e:	7a0f      	ldrb	r7, [r1, #8]
 8005370:	043f      	lsls	r7, r7, #16
 8005372:	19d2      	adds	r2, r2, r7
 8005374:	7a49      	ldrb	r1, [r1, #9]
 8005376:	0609      	lsls	r1, r1, #24
 8005378:	1851      	adds	r1, r2, r1
 800537a:	0082      	lsls	r2, r0, #2
 800537c:	5099      	str	r1, [r3, r2]
 800537e:	1c40      	adds	r0, r0, #1
 8005380:	49a7      	ldr	r1, [pc, #668]	; (8005620 <.text_30>)
 8005382:	1873      	adds	r3, r6, r1
 8005384:	3118      	adds	r1, #24
 8005386:	1872      	adds	r2, r6, r1
 8005388:	7811      	ldrb	r1, [r2, #0]
 800538a:	4288      	cmp	r0, r1
 800538c:	d3e8      	bcc.n	8005360 <PE_Check_DataMessageVDM+0x70>
 800538e:	9900      	ldr	r1, [sp, #0]
 8005390:	68f0      	ldr	r0, [r6, #12]
 8005392:	2800      	cmp	r0, #0
 8005394:	d008      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 8005396:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8005398:	2f00      	cmp	r7, #0
 800539a:	d005      	beq.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 800539c:	7c30      	ldrb	r0, [r6, #16]
 800539e:	47b8      	blx	r7
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d101      	bne.n	80053a8 <PE_Check_DataMessageVDM+0xb8>
 80053a4:	7474      	strb	r4, [r6, #17]
 80053a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80053a8:	6870      	ldr	r0, [r6, #4]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	4004      	ands	r4, r0
 80053ae:	2c02      	cmp	r4, #2
 80053b0:	d100      	bne.n	80053b4 <PE_Check_DataMessageVDM+0xc4>
 80053b2:	7475      	strb	r5, [r6, #17]
 80053b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080053b8 <.text_23>:
 80053b8:	0000801e 	.word	0x0000801e

080053bc <.text_24>:
 80053bc:	fffff8ff 	.word	0xfffff8ff

080053c0 <PE_SVDM_CheckIdentity>:
 80053c0:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 80053c2:	0003      	movs	r3, r0
 80053c4:	2000      	movs	r0, #0
 80053c6:	4c97      	ldr	r4, [pc, #604]	; (8005624 <.text_31>)
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	58e3      	ldr	r3, [r4, r3]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80053d0:	045b      	lsls	r3, r3, #17
 80053d2:	0f5b      	lsrs	r3, r3, #29
 80053d4:	1e5c      	subs	r4, r3, #1
 80053d6:	b2e3      	uxtb	r3, r4
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d200      	bcs.n	80053de <PE_SVDM_CheckIdentity+0x1e>
 80053dc:	e0b5      	b.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 80053de:	000b      	movs	r3, r1
 80053e0:	7819      	ldrb	r1, [r3, #0]
 80053e2:	785d      	ldrb	r5, [r3, #1]
 80053e4:	022d      	lsls	r5, r5, #8
 80053e6:	1949      	adds	r1, r1, r5
 80053e8:	789d      	ldrb	r5, [r3, #2]
 80053ea:	042d      	lsls	r5, r5, #16
 80053ec:	1949      	adds	r1, r1, r5
 80053ee:	78dd      	ldrb	r5, [r3, #3]
 80053f0:	062d      	lsls	r5, r5, #24
 80053f2:	194d      	adds	r5, r1, r5
 80053f4:	6015      	str	r5, [r2, #0]
 80053f6:	7919      	ldrb	r1, [r3, #4]
 80053f8:	795e      	ldrb	r6, [r3, #5]
 80053fa:	0236      	lsls	r6, r6, #8
 80053fc:	1989      	adds	r1, r1, r6
 80053fe:	799e      	ldrb	r6, [r3, #6]
 8005400:	0436      	lsls	r6, r6, #16
 8005402:	1989      	adds	r1, r1, r6
 8005404:	79de      	ldrb	r6, [r3, #7]
 8005406:	0636      	lsls	r6, r6, #24
 8005408:	1989      	adds	r1, r1, r6
 800540a:	6051      	str	r1, [r2, #4]
 800540c:	2108      	movs	r1, #8
 800540e:	7a1e      	ldrb	r6, [r3, #8]
 8005410:	7a5f      	ldrb	r7, [r3, #9]
 8005412:	023f      	lsls	r7, r7, #8
 8005414:	19f6      	adds	r6, r6, r7
 8005416:	7a9f      	ldrb	r7, [r3, #10]
 8005418:	043f      	lsls	r7, r7, #16
 800541a:	19f6      	adds	r6, r6, r7
 800541c:	7adf      	ldrb	r7, [r3, #11]
 800541e:	063f      	lsls	r7, r7, #24
 8005420:	19f6      	adds	r6, r6, r7
 8005422:	6096      	str	r6, [r2, #8]
 8005424:	1ee4      	subs	r4, r4, #3
 8005426:	2620      	movs	r6, #32
 8005428:	5d97      	ldrb	r7, [r2, r6]
 800542a:	26e0      	movs	r6, #224	; 0xe0
 800542c:	403e      	ands	r6, r7
 800542e:	466f      	mov	r7, sp
 8005430:	703e      	strb	r6, [r7, #0]
 8005432:	466e      	mov	r6, sp
 8005434:	7836      	ldrb	r6, [r6, #0]
 8005436:	2720      	movs	r7, #32
 8005438:	55d6      	strb	r6, [r2, r7]
 800543a:	0626      	lsls	r6, r4, #24
 800543c:	d022      	beq.n	8005484 <PE_SVDM_CheckIdentity+0xc4>
 800543e:	1e66      	subs	r6, r4, #1
 8005440:	466f      	mov	r7, sp
 8005442:	707e      	strb	r6, [r7, #1]
 8005444:	00ae      	lsls	r6, r5, #2
 8005446:	0f76      	lsrs	r6, r6, #29
 8005448:	2e05      	cmp	r6, #5
 800544a:	d827      	bhi.n	800549c <PE_SVDM_CheckIdentity+0xdc>
 800544c:	a701      	add	r7, pc, #4	; (adr r7, 8005454 <PE_SVDM_CheckIdentity+0x94>)
 800544e:	5dbf      	ldrb	r7, [r7, r6]
 8005450:	44bf      	add	pc, r7
 8005452:	bf00      	nop
 8005454:	5a060632 	.word	0x5a060632
 8005458:	a680      	.short	0xa680
 800545a:	210c      	movs	r1, #12
 800545c:	466c      	mov	r4, sp
 800545e:	7824      	ldrb	r4, [r4, #0]
 8005460:	2608      	movs	r6, #8
 8005462:	4326      	orrs	r6, r4
 8005464:	2420      	movs	r4, #32
 8005466:	5516      	strb	r6, [r2, r4]
 8005468:	7b1c      	ldrb	r4, [r3, #12]
 800546a:	7b5e      	ldrb	r6, [r3, #13]
 800546c:	0236      	lsls	r6, r6, #8
 800546e:	19a4      	adds	r4, r4, r6
 8005470:	7b9e      	ldrb	r6, [r3, #14]
 8005472:	0436      	lsls	r6, r6, #16
 8005474:	19a4      	adds	r4, r4, r6
 8005476:	7bde      	ldrb	r6, [r3, #15]
 8005478:	0636      	lsls	r6, r6, #24
 800547a:	19a4      	adds	r4, r4, r6
 800547c:	6194      	str	r4, [r2, #24]
 800547e:	466c      	mov	r4, sp
 8005480:	7864      	ldrb	r4, [r4, #1]
 8005482:	0026      	movs	r6, r4
 8005484:	d062      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005486:	9e01      	ldr	r6, [sp, #4]
 8005488:	8eb6      	ldrh	r6, [r6, #52]	; 0x34
 800548a:	0636      	lsls	r6, r6, #24
 800548c:	0fb6      	lsrs	r6, r6, #30
 800548e:	2e02      	cmp	r6, #2
 8005490:	d35c      	bcc.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005492:	01ad      	lsls	r5, r5, #6
 8005494:	0f6d      	lsrs	r5, r5, #29
 8005496:	d059      	beq.n	800554c <PE_SVDM_CheckIdentity+0x18c>
 8005498:	1e6d      	subs	r5, r5, #1
 800549a:	2d02      	cmp	r5, #2
 800549c:	d855      	bhi.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 800549e:	2520      	movs	r5, #32
 80054a0:	5d55      	ldrb	r5, [r2, r5]
 80054a2:	08ef      	lsrs	r7, r5, #3
 80054a4:	07ff      	lsls	r7, r7, #31
 80054a6:	d53b      	bpl.n	8005520 <PE_SVDM_CheckIdentity+0x160>
 80054a8:	3108      	adds	r1, #8
 80054aa:	1e64      	subs	r4, r4, #1
 80054ac:	e039      	b.n	8005522 <PE_SVDM_CheckIdentity+0x162>
 80054ae:	210c      	movs	r1, #12
 80054b0:	466c      	mov	r4, sp
 80054b2:	7824      	ldrb	r4, [r4, #0]
 80054b4:	2601      	movs	r6, #1
 80054b6:	4326      	orrs	r6, r4
 80054b8:	2420      	movs	r4, #32
 80054ba:	5516      	strb	r6, [r2, r4]
 80054bc:	7b1c      	ldrb	r4, [r3, #12]
 80054be:	7b5e      	ldrb	r6, [r3, #13]
 80054c0:	0236      	lsls	r6, r6, #8
 80054c2:	19a4      	adds	r4, r4, r6
 80054c4:	7b9e      	ldrb	r6, [r3, #14]
 80054c6:	0436      	lsls	r6, r6, #16
 80054c8:	19a4      	adds	r4, r4, r6
 80054ca:	7bde      	ldrb	r6, [r3, #15]
 80054cc:	0636      	lsls	r6, r6, #24
 80054ce:	19a4      	adds	r4, r4, r6
 80054d0:	60d4      	str	r4, [r2, #12]
 80054d2:	e7d4      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054d4:	210c      	movs	r1, #12
 80054d6:	466c      	mov	r4, sp
 80054d8:	7824      	ldrb	r4, [r4, #0]
 80054da:	2604      	movs	r6, #4
 80054dc:	4326      	orrs	r6, r4
 80054de:	2420      	movs	r4, #32
 80054e0:	5516      	strb	r6, [r2, r4]
 80054e2:	7b1c      	ldrb	r4, [r3, #12]
 80054e4:	7b5e      	ldrb	r6, [r3, #13]
 80054e6:	0236      	lsls	r6, r6, #8
 80054e8:	19a4      	adds	r4, r4, r6
 80054ea:	7b9e      	ldrb	r6, [r3, #14]
 80054ec:	0436      	lsls	r6, r6, #16
 80054ee:	19a4      	adds	r4, r4, r6
 80054f0:	7bde      	ldrb	r6, [r3, #15]
 80054f2:	0636      	lsls	r6, r6, #24
 80054f4:	19a4      	adds	r4, r4, r6
 80054f6:	6154      	str	r4, [r2, #20]
 80054f8:	e7c1      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 80054fa:	210c      	movs	r1, #12
 80054fc:	466c      	mov	r4, sp
 80054fe:	7824      	ldrb	r4, [r4, #0]
 8005500:	2602      	movs	r6, #2
 8005502:	4326      	orrs	r6, r4
 8005504:	2420      	movs	r4, #32
 8005506:	5516      	strb	r6, [r2, r4]
 8005508:	7b1c      	ldrb	r4, [r3, #12]
 800550a:	7b5e      	ldrb	r6, [r3, #13]
 800550c:	0236      	lsls	r6, r6, #8
 800550e:	19a4      	adds	r4, r4, r6
 8005510:	7b9e      	ldrb	r6, [r3, #14]
 8005512:	0436      	lsls	r6, r6, #16
 8005514:	19a4      	adds	r4, r4, r6
 8005516:	7bde      	ldrb	r6, [r3, #15]
 8005518:	0636      	lsls	r6, r6, #24
 800551a:	19a4      	adds	r4, r4, r6
 800551c:	6114      	str	r4, [r2, #16]
 800551e:	e7ae      	b.n	800547e <PE_SVDM_CheckIdentity+0xbe>
 8005520:	1d09      	adds	r1, r1, #4
 8005522:	b2e4      	uxtb	r4, r4
 8005524:	2c01      	cmp	r4, #1
 8005526:	d110      	bne.n	800554a <PE_SVDM_CheckIdentity+0x18a>
 8005528:	2410      	movs	r4, #16
 800552a:	432c      	orrs	r4, r5
 800552c:	2520      	movs	r5, #32
 800552e:	5554      	strb	r4, [r2, r5]
 8005530:	1859      	adds	r1, r3, r1
 8005532:	780b      	ldrb	r3, [r1, #0]
 8005534:	784c      	ldrb	r4, [r1, #1]
 8005536:	0224      	lsls	r4, r4, #8
 8005538:	191b      	adds	r3, r3, r4
 800553a:	788c      	ldrb	r4, [r1, #2]
 800553c:	0424      	lsls	r4, r4, #16
 800553e:	191b      	adds	r3, r3, r4
 8005540:	78c9      	ldrb	r1, [r1, #3]
 8005542:	0609      	lsls	r1, r1, #24
 8005544:	1859      	adds	r1, r3, r1
 8005546:	61d1      	str	r1, [r2, #28]
 8005548:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 800554a:	2002      	movs	r0, #2
 800554c:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

0800554e <PE_SVDM_CheckSVIDs>:
 800554e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005550:	4b34      	ldr	r3, [pc, #208]	; (8005624 <.text_31>)
 8005552:	0080      	lsls	r0, r0, #2
 8005554:	5818      	ldr	r0, [r3, r0]
 8005556:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8005558:	0440      	lsls	r0, r0, #17
 800555a:	0f40      	lsrs	r0, r0, #29
 800555c:	1e46      	subs	r6, r0, #1
 800555e:	b2f6      	uxtb	r6, r6
 8005560:	2000      	movs	r0, #0
 8005562:	2500      	movs	r5, #0
 8005564:	7610      	strb	r0, [r2, #24]
 8005566:	7650      	strb	r0, [r2, #25]
 8005568:	000b      	movs	r3, r1
 800556a:	0014      	movs	r4, r2
 800556c:	0031      	movs	r1, r6
 800556e:	5c1a      	ldrb	r2, [r3, r0]
 8005570:	1c5e      	adds	r6, r3, #1
 8005572:	5c36      	ldrb	r6, [r6, r0]
 8005574:	0236      	lsls	r6, r6, #8
 8005576:	1992      	adds	r2, r2, r6
 8005578:	7e26      	ldrb	r6, [r4, #24]
 800557a:	0076      	lsls	r6, r6, #1
 800557c:	53a2      	strh	r2, [r4, r6]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	2201      	movs	r2, #1
 8005582:	0077      	lsls	r7, r6, #1
 8005584:	5be7      	ldrh	r7, [r4, r7]
 8005586:	2f00      	cmp	r7, #0
 8005588:	d002      	beq.n	8005590 <PE_SVDM_CheckSVIDs+0x42>
 800558a:	1c76      	adds	r6, r6, #1
 800558c:	7626      	strb	r6, [r4, #24]
 800558e:	e001      	b.n	8005594 <PE_SVDM_CheckSVIDs+0x46>
 8005590:	2501      	movs	r5, #1
 8005592:	7662      	strb	r2, [r4, #25]
 8005594:	1c80      	adds	r0, r0, #2
 8005596:	b2c0      	uxtb	r0, r0
 8005598:	5c1e      	ldrb	r6, [r3, r0]
 800559a:	1c5f      	adds	r7, r3, #1
 800559c:	5c3f      	ldrb	r7, [r7, r0]
 800559e:	023f      	lsls	r7, r7, #8
 80055a0:	19f6      	adds	r6, r6, r7
 80055a2:	7e27      	ldrb	r7, [r4, #24]
 80055a4:	007f      	lsls	r7, r7, #1
 80055a6:	53e6      	strh	r6, [r4, r7]
 80055a8:	7e26      	ldrb	r6, [r4, #24]
 80055aa:	0077      	lsls	r7, r6, #1
 80055ac:	5be7      	ldrh	r7, [r4, r7]
 80055ae:	2f00      	cmp	r7, #0
 80055b0:	d002      	beq.n	80055b8 <PE_SVDM_CheckSVIDs+0x6a>
 80055b2:	1c76      	adds	r6, r6, #1
 80055b4:	7626      	strb	r6, [r4, #24]
 80055b6:	e001      	b.n	80055bc <PE_SVDM_CheckSVIDs+0x6e>
 80055b8:	2501      	movs	r5, #1
 80055ba:	7662      	strb	r2, [r4, #25]
 80055bc:	1c80      	adds	r0, r0, #2
 80055be:	b2c0      	uxtb	r0, r0
 80055c0:	008a      	lsls	r2, r1, #2
 80055c2:	4290      	cmp	r0, r2
 80055c4:	d201      	bcs.n	80055ca <PE_SVDM_CheckSVIDs+0x7c>
 80055c6:	002a      	movs	r2, r5
 80055c8:	d0d1      	beq.n	800556e <PE_SVDM_CheckSVIDs+0x20>
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055cc <.text_27>:
 80055cc:	ffff7fff 	.word	0xffff7fff

080055d0 <PE_SVDM_CheckModes>:
 80055d0:	b530      	push	{r4, r5, lr}
 80055d2:	4c14      	ldr	r4, [pc, #80]	; (8005624 <.text_31>)
 80055d4:	0080      	lsls	r0, r0, #2
 80055d6:	5820      	ldr	r0, [r4, r0]
 80055d8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 80055da:	0440      	lsls	r0, r0, #17
 80055dc:	0f40      	lsrs	r0, r0, #29
 80055de:	1e40      	subs	r0, r0, #1
 80055e0:	b2c0      	uxtb	r0, r0
 80055e2:	2400      	movs	r4, #0
 80055e4:	8399      	strh	r1, [r3, #28]
 80055e6:	601c      	str	r4, [r3, #0]
 80055e8:	5d11      	ldrb	r1, [r2, r4]
 80055ea:	1915      	adds	r5, r2, r4
 80055ec:	786d      	ldrb	r5, [r5, #1]
 80055ee:	022d      	lsls	r5, r5, #8
 80055f0:	1949      	adds	r1, r1, r5
 80055f2:	1915      	adds	r5, r2, r4
 80055f4:	78ad      	ldrb	r5, [r5, #2]
 80055f6:	042d      	lsls	r5, r5, #16
 80055f8:	1949      	adds	r1, r1, r5
 80055fa:	1915      	adds	r5, r2, r4
 80055fc:	78ed      	ldrb	r5, [r5, #3]
 80055fe:	062d      	lsls	r5, r5, #24
 8005600:	1949      	adds	r1, r1, r5
 8005602:	681d      	ldr	r5, [r3, #0]
 8005604:	00ad      	lsls	r5, r5, #2
 8005606:	195d      	adds	r5, r3, r5
 8005608:	6069      	str	r1, [r5, #4]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	1c49      	adds	r1, r1, #1
 800560e:	6019      	str	r1, [r3, #0]
 8005610:	1d24      	adds	r4, r4, #4
 8005612:	b2e4      	uxtb	r4, r4
 8005614:	0081      	lsls	r1, r0, #2
 8005616:	428c      	cmp	r4, r1
 8005618:	d3e6      	bcc.n	80055e8 <PE_SVDM_CheckModes+0x18>
 800561a:	bd30      	pop	{r4, r5, pc}

0800561c <.text_29>:
 800561c:	000004ac 	.word	0x000004ac

08005620 <.text_30>:
 8005620:	00000494 	.word	0x00000494

08005624 <.text_31>:
 8005624:	2000053c 	.word	0x2000053c

08005628 <USBPD_PRL_TimerCounter>:
 8005628:	4954      	ldr	r1, [pc, #336]	; (800577c <.text_15>)
 800562a:	0080      	lsls	r0, r0, #2
 800562c:	1808      	adds	r0, r1, r0
 800562e:	6801      	ldr	r1, [r0, #0]
 8005630:	790a      	ldrb	r2, [r1, #4]
 8005632:	2a00      	cmp	r2, #0
 8005634:	d002      	beq.n	800563c <USBPD_PRL_TimerCounter+0x14>
 8005636:	790a      	ldrb	r2, [r1, #4]
 8005638:	1e52      	subs	r2, r2, #1
 800563a:	710a      	strb	r2, [r1, #4]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	7841      	ldrb	r1, [r0, #1]
 8005640:	2900      	cmp	r1, #0
 8005642:	d001      	beq.n	8005648 <USBPD_PRL_TimerCounter+0x20>
 8005644:	1e49      	subs	r1, r1, #1
 8005646:	7041      	strb	r1, [r0, #1]
 8005648:	4770      	bx	lr
	...

0800564c <USBPD_PRL_Init>:
 800564c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 800564e:	b081      	sub	sp, #4
 8005650:	0014      	movs	r4, r2
 8005652:	001d      	movs	r5, r3
 8005654:	2616      	movs	r6, #22
 8005656:	209c      	movs	r0, #156	; 0x9c
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	f021 f9af 	bl	80269bc <malloc>
 800565e:	0007      	movs	r7, r0
 8005660:	d01e      	beq.n	80056a0 <USBPD_PRL_Init+0x54>
 8005662:	9e02      	ldr	r6, [sp, #8]
 8005664:	219c      	movs	r1, #156	; 0x9c
 8005666:	0049      	lsls	r1, r1, #1
 8005668:	f022 fb8e 	bl	8027d88 <__aeabi_memclr>
 800566c:	220f      	movs	r2, #15
 800566e:	2103      	movs	r1, #3
 8005670:	1db8      	adds	r0, r7, #6
 8005672:	f022 fb82 	bl	8027d7a <__aeabi_memset>
 8005676:	4841      	ldr	r0, [pc, #260]	; (800577c <.text_15>)
 8005678:	4669      	mov	r1, sp
 800567a:	7909      	ldrb	r1, [r1, #4]
 800567c:	0089      	lsls	r1, r1, #2
 800567e:	5047      	str	r7, [r0, r1]
 8005680:	62bc      	str	r4, [r7, #40]	; 0x28
 8005682:	62fd      	str	r5, [r7, #44]	; 0x2c
 8005684:	2001      	movs	r0, #1
 8005686:	9000      	str	r0, [sp, #0]
 8005688:	6870      	ldr	r0, [r6, #4]
 800568a:	0743      	lsls	r3, r0, #29
 800568c:	0fdb      	lsrs	r3, r3, #31
 800568e:	003a      	movs	r2, r7
 8005690:	3230      	adds	r2, #48	; 0x30
 8005692:	bf00      	nop
 8005694:	a103      	add	r1, pc, #12	; (adr r1, 80056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>)
 8005696:	4668      	mov	r0, sp
 8005698:	7900      	ldrb	r0, [r0, #4]
 800569a:	f011 fdc5 	bl	8017228 <USBPD_PHY_Init>
 800569e:	0006      	movs	r6, r0
 80056a0:	0030      	movs	r0, r6
 80056a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080056a4 <USBPD_PRL_Init::PRL_PhyCallbacks>:
 80056a4:	5cdd 0800 6035 0800 608f 0800 60a9 0800     .\..5`...`...`..
 80056b4:	60b1 0800 579d 0800                         .`...W..

080056bc <USBPD_PRL_GetMemoryConsumption>:
 80056bc:	20ea      	movs	r0, #234	; 0xea
 80056be:	0080      	lsls	r0, r0, #2
 80056c0:	4770      	bx	lr

080056c2 <USBPD_PRL_SetHeader>:
 80056c2:	b530      	push	{r4, r5, lr}
 80056c4:	4c2d      	ldr	r4, [pc, #180]	; (800577c <.text_15>)
 80056c6:	0080      	lsls	r0, r0, #2
 80056c8:	5820      	ldr	r0, [r4, r0]
 80056ca:	8a44      	ldrh	r4, [r0, #18]
 80056cc:	4d2c      	ldr	r5, [pc, #176]	; (8005780 <.text_16>)
 80056ce:	4025      	ands	r5, r4
 80056d0:	0209      	lsls	r1, r1, #8
 80056d2:	2480      	movs	r4, #128	; 0x80
 80056d4:	0064      	lsls	r4, r4, #1
 80056d6:	4021      	ands	r1, r4
 80056d8:	4329      	orrs	r1, r5
 80056da:	8241      	strh	r1, [r0, #18]
 80056dc:	4c29      	ldr	r4, [pc, #164]	; (8005784 <.text_17>)
 80056de:	400c      	ands	r4, r1
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	2220      	movs	r2, #32
 80056e4:	4011      	ands	r1, r2
 80056e6:	4321      	orrs	r1, r4
 80056e8:	8241      	strh	r1, [r0, #18]
 80056ea:	4a27      	ldr	r2, [pc, #156]	; (8005788 <.text_18>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	0199      	lsls	r1, r3, #6
 80056f0:	23c0      	movs	r3, #192	; 0xc0
 80056f2:	400b      	ands	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	8243      	strh	r3, [r0, #18]
 80056f8:	bd30      	pop	{r4, r5, pc}

080056fa <USBPD_PRL_SetHeaderPowerRole>:
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <.text_15>)
 80056fc:	0080      	lsls	r0, r0, #2
 80056fe:	5810      	ldr	r0, [r2, r0]
 8005700:	8a42      	ldrh	r2, [r0, #18]
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <.text_16>)
 8005704:	4013      	ands	r3, r2
 8005706:	0209      	lsls	r1, r1, #8
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	0052      	lsls	r2, r2, #1
 800570c:	e007      	b.n	800571e <.text_10>

0800570e <USBPD_PRL_SetHeaderDataRole>:
 800570e:	4a1b      	ldr	r2, [pc, #108]	; (800577c <.text_15>)
 8005710:	0080      	lsls	r0, r0, #2
 8005712:	5810      	ldr	r0, [r2, r0]
 8005714:	8a42      	ldrh	r2, [r0, #18]
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <.text_17>)
 8005718:	4013      	ands	r3, r2
 800571a:	0149      	lsls	r1, r1, #5
 800571c:	2220      	movs	r2, #32

0800571e <.text_10>:
 800571e:	4011      	ands	r1, r2
 8005720:	4319      	orrs	r1, r3
 8005722:	8241      	strh	r1, [r0, #18]
 8005724:	4770      	bx	lr

08005726 <USBPD_PRL_SetHeaderSpecification>:
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <.text_15>)
 8005728:	0080      	lsls	r0, r0, #2
 800572a:	5810      	ldr	r0, [r2, r0]
 800572c:	8a42      	ldrh	r2, [r0, #18]
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <.text_18>)
 8005730:	4013      	ands	r3, r2
 8005732:	0189      	lsls	r1, r1, #6
 8005734:	22c0      	movs	r2, #192	; 0xc0
 8005736:	400a      	ands	r2, r1
 8005738:	431a      	orrs	r2, r3
 800573a:	8242      	strh	r2, [r0, #18]
 800573c:	4770      	bx	lr

0800573e <USBPD_PRL_CBL_SetHeaderSpecification>:
 800573e:	4a0f      	ldr	r2, [pc, #60]	; (800577c <.text_15>)
 8005740:	0080      	lsls	r0, r0, #2
 8005742:	5810      	ldr	r0, [r2, r0]
 8005744:	018a      	lsls	r2, r1, #6
 8005746:	21c0      	movs	r1, #192	; 0xc0
 8005748:	4011      	ands	r1, r2
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <.text_18>)
 800574c:	8a83      	ldrh	r3, [r0, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	430b      	orrs	r3, r1
 8005752:	8283      	strh	r3, [r0, #20]
 8005754:	8ac3      	ldrh	r3, [r0, #22]
 8005756:	401a      	ands	r2, r3
 8005758:	4311      	orrs	r1, r2
 800575a:	82c1      	strh	r1, [r0, #22]
 800575c:	4770      	bx	lr

0800575e <USBPD_PRL_SRCSetSinkNG>:
 800575e:	b580      	push	{r7, lr}
 8005760:	f011 fe57 	bl	8017412 <USBPD_PHY_SetResistor_SinkTxNG>
 8005764:	bd01      	pop	{r0, pc}

08005766 <USBPD_PRL_SRCReleaseSinkNG>:
 8005766:	b510      	push	{r4, lr}
 8005768:	0004      	movs	r4, r0
 800576a:	f011 fe61 	bl	8017430 <USBPD_PHY_SetResistor_SinkTxOK>
 800576e:	2000      	movs	r0, #0
 8005770:	4902      	ldr	r1, [pc, #8]	; (800577c <.text_15>)
 8005772:	00a2      	lsls	r2, r4, #2
 8005774:	5889      	ldr	r1, [r1, r2]
 8005776:	7148      	strb	r0, [r1, #5]
 8005778:	bd10      	pop	{r4, pc}
	...

0800577c <.text_15>:
 800577c:	20000548 	.word	0x20000548

08005780 <.text_16>:
 8005780:	0000feff 	.word	0x0000feff

08005784 <.text_17>:
 8005784:	0000ffdf 	.word	0x0000ffdf

08005788 <.text_18>:
 8005788:	0000ff3f 	.word	0x0000ff3f

0800578c <USBPD_PRL_IsResistor_SinkTxOK>:
 800578c:	b580      	push	{r7, lr}
 800578e:	f011 fe75 	bl	801747c <USBPD_PHY_IsResistor_SinkTxOk>
 8005792:	bd02      	pop	{r1, pc}

08005794 <USBPD_PRL_FastRoleSwapSignalling>:
 8005794:	b580      	push	{r7, lr}
 8005796:	f011 fe81 	bl	801749c <USBPD_PHY_FastRoleSwapSignalling>
 800579a:	bd01      	pop	{r0, pc}

0800579c <PRL_FastRoleSwapReception>:
 800579c:	b580      	push	{r7, lr}
 800579e:	f7fb fa4d 	bl	8000c3c <PE_PRL_FastRoleSwapReception>
 80057a2:	bd01      	pop	{r0, pc}

080057a4 <USBPD_PRL_SOPCapability>:
 80057a4:	b580      	push	{r7, lr}
 80057a6:	f011 fe53 	bl	8017450 <USBPD_PHY_SOPSupported>
 80057aa:	bd01      	pop	{r0, pc}

080057ac <USBPD_PRL_SendMessage>:
 80057ac:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 80057ae:	b087      	sub	sp, #28
 80057b0:	2503      	movs	r5, #3
 80057b2:	4668      	mov	r0, sp
 80057b4:	7f00      	ldrb	r0, [r0, #28]
 80057b6:	9005      	str	r0, [sp, #20]
 80057b8:	48ca      	ldr	r0, [pc, #808]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80057ba:	9a05      	ldr	r2, [sp, #20]
 80057bc:	0092      	lsls	r2, r2, #2
 80057be:	1880      	adds	r0, r0, r2
 80057c0:	9000      	str	r0, [sp, #0]
 80057c2:	6800      	ldr	r0, [r0, #0]
 80057c4:	0004      	movs	r4, r0
 80057c6:	7962      	ldrb	r2, [r4, #5]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d004      	beq.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057cc:	7a62      	ldrb	r2, [r4, #9]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d101      	bne.n	80057d6 <USBPD_PRL_SendMessage+0x2a>
 80057d2:	220f      	movs	r2, #15
 80057d4:	7142      	strb	r2, [r0, #5]
 80057d6:	466a      	mov	r2, sp
 80057d8:	7111      	strb	r1, [r2, #4]
 80057da:	4669      	mov	r1, sp
 80057dc:	7909      	ldrb	r1, [r1, #4]
 80057de:	9104      	str	r1, [sp, #16]
 80057e0:	1861      	adds	r1, r4, r1
 80057e2:	9a05      	ldr	r2, [sp, #20]
 80057e4:	0052      	lsls	r2, r2, #1
 80057e6:	1c52      	adds	r2, r2, #1
 80057e8:	466e      	mov	r6, sp
 80057ea:	7172      	strb	r2, [r6, #5]
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	9203      	str	r2, [sp, #12]
 80057f2:	2600      	movs	r6, #0
 80057f4:	9302      	str	r3, [sp, #8]
 80057f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f8:	7963      	ldrb	r3, [r4, #5]
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d900      	bls.n	8005800 <USBPD_PRL_SendMessage+0x54>
 80057fe:	e1f6      	b.n	8005bee <USBPD_PRL_SendMessage+0x442>
 8005800:	a701      	add	r7, pc, #4	; (adr r7, 8005808 <USBPD_PRL_SendMessage+0x5c>)
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	5aff      	ldrh	r7, [r7, r3]
 8005806:	44bf      	add	pc, r7
 8005808:	00480020 	.word	0x00480020
 800580c:	03e4005e 	.word	0x03e4005e
 8005810:	00a8006a 	.word	0x00a8006a
 8005814:	015a0086 	.word	0x015a0086
 8005818:	03e403e4 	.word	0x03e403e4
 800581c:	030802de 	.word	0x030802de
 8005820:	03560334 	.word	0x03560334
 8005824:	03de03e4 	.word	0x03de03e4
 8005828:	03a6      	.short	0x03a6
 800582a:	f3ef 8710 	mrs	r7, PRIMASK
 800582e:	b672      	cpsid	i
 8005830:	4668      	mov	r0, sp
 8005832:	7f00      	ldrb	r0, [r0, #28]
 8005834:	f7fb f8b4 	bl	80009a0 <PE_PRL_Control_RxEvent>
 8005838:	2800      	cmp	r0, #0
 800583a:	d105      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 800583c:	7aa0      	ldrb	r0, [r4, #10]
 800583e:	2800      	cmp	r0, #0
 8005840:	d102      	bne.n	8005848 <USBPD_PRL_SendMessage+0x9c>
 8005842:	20ff      	movs	r0, #255	; 0xff
 8005844:	7260      	strb	r0, [r4, #9]
 8005846:	e000      	b.n	800584a <USBPD_PRL_SendMessage+0x9e>
 8005848:	7266      	strb	r6, [r4, #9]
 800584a:	f387 8810 	msr	PRIMASK, r7
 800584e:	2006      	movs	r0, #6
 8005850:	e1a0      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005852:	4668      	mov	r0, sp
 8005854:	7f00      	ldrb	r0, [r0, #28]
 8005856:	f011 fddc 	bl	8017412 <USBPD_PHY_SetResistor_SinkTxNG>
 800585a:	2002      	movs	r0, #2
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	7148      	strb	r0, [r1, #5]
 8005862:	2013      	movs	r0, #19
 8005864:	7060      	strb	r0, [r4, #1]
 8005866:	e1c4      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005868:	2a01      	cmp	r2, #1
 800586a:	d10f      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 800586c:	7861      	ldrb	r1, [r4, #1]
 800586e:	2900      	cmp	r1, #0
 8005870:	d10a      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005872:	e01c      	b.n	80058ae <USBPD_PRL_SendMessage+0x102>
 8005874:	2a02      	cmp	r2, #2
 8005876:	d109      	bne.n	800588c <USBPD_PRL_SendMessage+0xe0>
 8005878:	4668      	mov	r0, sp
 800587a:	7f00      	ldrb	r0, [r0, #28]
 800587c:	f011 fdfe 	bl	801747c <USBPD_PHY_IsResistor_SinkTxOk>
 8005880:	2801      	cmp	r0, #1
 8005882:	d101      	bne.n	8005888 <USBPD_PRL_SendMessage+0xdc>
 8005884:	2005      	movs	r0, #5
 8005886:	e185      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005888:	2509      	movs	r5, #9
 800588a:	e1b2      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 800588c:	2106      	movs	r1, #6
 800588e:	e154      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 8005890:	9903      	ldr	r1, [sp, #12]
 8005892:	1861      	adds	r1, r4, r1
 8005894:	8a49      	ldrh	r1, [r1, #18]
 8005896:	0609      	lsls	r1, r1, #24
 8005898:	0f89      	lsrs	r1, r1, #30
 800589a:	2902      	cmp	r1, #2
 800589c:	d107      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 800589e:	2a01      	cmp	r2, #1
 80058a0:	d101      	bne.n	80058a6 <USBPD_PRL_SendMessage+0xfa>
 80058a2:	7142      	strb	r2, [r0, #5]
 80058a4:	e1a5      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 80058a6:	2a02      	cmp	r2, #2
 80058a8:	d101      	bne.n	80058ae <USBPD_PRL_SendMessage+0x102>
 80058aa:	2104      	movs	r1, #4
 80058ac:	e145      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058ae:	2105      	movs	r1, #5
 80058b0:	e143      	b.n	8005b3a <USBPD_PRL_SendMessage+0x38e>
 80058b2:	9803      	ldr	r0, [sp, #12]
 80058b4:	1820      	adds	r0, r4, r0
 80058b6:	8a43      	ldrh	r3, [r0, #18]
 80058b8:	4acf      	ldr	r2, [pc, #828]	; (8005bf8 <.text_24>)
 80058ba:	401a      	ands	r2, r3
 80058bc:	ab08      	add	r3, sp, #32
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	06db      	lsls	r3, r3, #27
 80058c2:	0edb      	lsrs	r3, r3, #27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	8243      	strh	r3, [r0, #18]
 80058c8:	045a      	lsls	r2, r3, #17
 80058ca:	0c52      	lsrs	r2, r2, #17
 80058cc:	ab08      	add	r3, sp, #32
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	09db      	lsrs	r3, r3, #7
 80058d2:	03db      	lsls	r3, r3, #15
 80058d4:	4313      	orrs	r3, r2
 80058d6:	8243      	strh	r3, [r0, #18]
 80058d8:	70a6      	strb	r6, [r4, #2]
 80058da:	8a43      	ldrh	r3, [r0, #18]
 80058dc:	0bda      	lsrs	r2, r3, #15
 80058de:	d023      	beq.n	8005928 <USBPD_PRL_SendMessage+0x17c>
 80058e0:	9a02      	ldr	r2, [sp, #8]
 80058e2:	7892      	ldrb	r2, [r2, #2]
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	78db      	ldrb	r3, [r3, #3]
 80058e8:	021b      	lsls	r3, r3, #8
 80058ea:	18d2      	adds	r2, r2, r3
 80058ec:	83a2      	strh	r2, [r4, #28]
 80058ee:	8ba2      	ldrh	r2, [r4, #28]
 80058f0:	0a93      	lsrs	r3, r2, #10
 80058f2:	07db      	lsls	r3, r3, #31
 80058f4:	d40f      	bmi.n	8005916 <USBPD_PRL_SendMessage+0x16a>
 80058f6:	0ad2      	lsrs	r2, r2, #11
 80058f8:	0712      	lsls	r2, r2, #28
 80058fa:	d122      	bne.n	8005942 <USBPD_PRL_SendMessage+0x196>
 80058fc:	466a      	mov	r2, sp
 80058fe:	8f12      	ldrh	r2, [r2, #56]	; 0x38
 8005900:	1f12      	subs	r2, r2, #4
 8005902:	8462      	strh	r2, [r4, #34]	; 0x22
 8005904:	05d2      	lsls	r2, r2, #23
 8005906:	0dd2      	lsrs	r2, r2, #23
 8005908:	8ba3      	ldrh	r3, [r4, #28]
 800590a:	27fe      	movs	r7, #254	; 0xfe
 800590c:	023f      	lsls	r7, r7, #8
 800590e:	401f      	ands	r7, r3
 8005910:	433a      	orrs	r2, r7
 8005912:	83a2      	strh	r2, [r4, #28]
 8005914:	e015      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005916:	8466      	strh	r6, [r4, #34]	; 0x22
 8005918:	8a42      	ldrh	r2, [r0, #18]
 800591a:	4bb8      	ldr	r3, [pc, #736]	; (8005bfc <.text_25>)
 800591c:	4013      	ands	r3, r2
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	0152      	lsls	r2, r2, #5
 8005922:	431a      	orrs	r2, r3
 8005924:	8242      	strh	r2, [r0, #18]
 8005926:	e00c      	b.n	8005942 <USBPD_PRL_SendMessage+0x196>
 8005928:	4ab4      	ldr	r2, [pc, #720]	; (8005bfc <.text_25>)
 800592a:	401a      	ands	r2, r3
 800592c:	466b      	mov	r3, sp
 800592e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005930:	1e9b      	subs	r3, r3, #2
 8005932:	089b      	lsrs	r3, r3, #2
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	27e0      	movs	r7, #224	; 0xe0
 8005938:	01ff      	lsls	r7, r7, #7
 800593a:	401f      	ands	r7, r3
 800593c:	4317      	orrs	r7, r2
 800593e:	8247      	strh	r7, [r0, #18]
 8005940:	8466      	strh	r6, [r4, #34]	; 0x22
 8005942:	aa08      	add	r2, sp, #32
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	2a0d      	cmp	r2, #13
 8005948:	d10a      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 800594a:	8a40      	ldrh	r0, [r0, #18]
 800594c:	22f0      	movs	r2, #240	; 0xf0
 800594e:	0212      	lsls	r2, r2, #8
 8005950:	4002      	ands	r2, r0
 8005952:	d105      	bne.n	8005960 <USBPD_PRL_SendMessage+0x1b4>
 8005954:	72ce      	strb	r6, [r1, #11]
 8005956:	220f      	movs	r2, #15
 8005958:	2103      	movs	r1, #3
 800595a:	1da0      	adds	r0, r4, #6
 800595c:	f022 fa0d 	bl	8027d7a <__aeabi_memset>
 8005960:	2007      	movs	r0, #7
 8005962:	e117      	b.n	8005b94 <USBPD_PRL_SendMessage+0x3e8>
 8005964:	4669      	mov	r1, sp
 8005966:	8f0c      	ldrh	r4, [r1, #56]	; 0x38
 8005968:	9903      	ldr	r1, [sp, #12]
 800596a:	1841      	adds	r1, r0, r1
 800596c:	4a5d      	ldr	r2, [pc, #372]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800596e:	466b      	mov	r3, sp
 8005970:	7f1b      	ldrb	r3, [r3, #28]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	58d2      	ldr	r2, [r2, r3]
 8005976:	466b      	mov	r3, sp
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	18d2      	adds	r2, r2, r3
 800597e:	8a52      	ldrh	r2, [r2, #18]
 8005980:	0bd3      	lsrs	r3, r2, #15
 8005982:	d074      	beq.n	8005a6e <USBPD_PRL_SendMessage+0x2c2>
 8005984:	8b83      	ldrh	r3, [r0, #28]
 8005986:	0a9b      	lsrs	r3, r3, #10
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d465      	bmi.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 800598c:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 800598e:	466f      	mov	r7, sp
 8005990:	7f3f      	ldrb	r7, [r7, #28]
 8005992:	00bf      	lsls	r7, r7, #2
 8005994:	59db      	ldr	r3, [r3, r7]
 8005996:	8b9b      	ldrh	r3, [r3, #28]
 8005998:	8c47      	ldrh	r7, [r0, #34]	; 0x22
 800599a:	2f1b      	cmp	r7, #27
 800599c:	d30a      	bcc.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 800599e:	0bdf      	lsrs	r7, r3, #15
 80059a0:	d008      	beq.n	80059b4 <USBPD_PRL_SendMessage+0x208>
 80059a2:	23e0      	movs	r3, #224	; 0xe0
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4313      	orrs	r3, r2
 80059a8:	824b      	strh	r3, [r1, #18]
 80059aa:	8c41      	ldrh	r1, [r0, #34]	; 0x22
 80059ac:	391a      	subs	r1, #26
 80059ae:	8441      	strh	r1, [r0, #34]	; 0x22
 80059b0:	241e      	movs	r4, #30
 80059b2:	e051      	b.n	8005a58 <USBPD_PRL_SendMessage+0x2ac>
 80059b4:	0ada      	lsrs	r2, r3, #11
 80059b6:	0712      	lsls	r2, r2, #28
 80059b8:	d107      	bne.n	80059ca <USBPD_PRL_SendMessage+0x21e>
 80059ba:	22fe      	movs	r2, #254	; 0xfe
 80059bc:	0212      	lsls	r2, r2, #8
 80059be:	401a      	ands	r2, r3
 80059c0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	0ddb      	lsrs	r3, r3, #23
 80059c6:	4313      	orrs	r3, r2
 80059c8:	8383      	strh	r3, [r0, #28]
 80059ca:	8a4b      	ldrh	r3, [r1, #18]
 80059cc:	4a8b      	ldr	r2, [pc, #556]	; (8005bfc <.text_25>)
 80059ce:	401a      	ands	r2, r3
 80059d0:	824a      	strh	r2, [r1, #18]
 80059d2:	8b83      	ldrh	r3, [r0, #28]
 80059d4:	0bdb      	lsrs	r3, r3, #15
 80059d6:	d03c      	beq.n	8005a52 <USBPD_PRL_SendMessage+0x2a6>
 80059d8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80059da:	1c9b      	adds	r3, r3, #2
 80059dc:	089b      	lsrs	r3, r3, #2
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	24e0      	movs	r4, #224	; 0xe0
 80059e2:	01e4      	lsls	r4, r4, #7
 80059e4:	401c      	ands	r4, r3
 80059e6:	4314      	orrs	r4, r2
 80059e8:	824c      	strh	r4, [r1, #18]
 80059ea:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80059ec:	1c80      	adds	r0, r0, #2
 80059ee:	0781      	lsls	r1, r0, #30
 80059f0:	0f89      	lsrs	r1, r1, #30
 80059f2:	d025      	beq.n	8005a40 <USBPD_PRL_SendMessage+0x294>
 80059f4:	2200      	movs	r2, #0
 80059f6:	483b      	ldr	r0, [pc, #236]	; (8005ae4 <USBPD_PRL_SendMessage+0x338>)
 80059f8:	9b05      	ldr	r3, [sp, #20]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	9000      	str	r0, [sp, #0]
 8005a00:	9802      	ldr	r0, [sp, #8]
 8005a02:	9102      	str	r1, [sp, #8]
 8005a04:	e004      	b.n	8005a10 <USBPD_PRL_SendMessage+0x264>
 8005a06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a08:	1859      	adds	r1, r3, r1
 8005a0a:	1841      	adds	r1, r0, r1
 8005a0c:	710e      	strb	r6, [r1, #4]
 8005a0e:	1c52      	adds	r2, r2, #1
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	680b      	ldr	r3, [r1, #0]
 8005a14:	b2d1      	uxtb	r1, r2
 8005a16:	2404      	movs	r4, #4
 8005a18:	9f02      	ldr	r7, [sp, #8]
 8005a1a:	1be4      	subs	r4, r4, r7
 8005a1c:	42a1      	cmp	r1, r4
 8005a1e:	d3f2      	bcc.n	8005a06 <USBPD_PRL_SendMessage+0x25a>
 8005a20:	9002      	str	r0, [sp, #8]
 8005a22:	0018      	movs	r0, r3
 8005a24:	3012      	adds	r0, #18
 8005a26:	9903      	ldr	r1, [sp, #12]
 8005a28:	1840      	adds	r0, r0, r1
 8005a2a:	8801      	ldrh	r1, [r0, #0]
 8005a2c:	4a73      	ldr	r2, [pc, #460]	; (8005bfc <.text_25>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	0b09      	lsrs	r1, r1, #12
 8005a32:	1c49      	adds	r1, r1, #1
 8005a34:	0309      	lsls	r1, r1, #12
 8005a36:	23e0      	movs	r3, #224	; 0xe0
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	400b      	ands	r3, r1
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	8003      	strh	r3, [r0, #0]
 8005a40:	9800      	ldr	r0, [sp, #0]
 8005a42:	6800      	ldr	r0, [r0, #0]
 8005a44:	3012      	adds	r0, #18
 8005a46:	9903      	ldr	r1, [sp, #12]
 8005a48:	5a40      	ldrh	r0, [r0, r1]
 8005a4a:	0440      	lsls	r0, r0, #17
 8005a4c:	0f40      	lsrs	r0, r0, #29
 8005a4e:	0084      	lsls	r4, r0, #2
 8005a50:	1ca4      	adds	r4, r4, #2
 8005a52:	9800      	ldr	r0, [sp, #0]
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	8446      	strh	r6, [r0, #34]	; 0x22
 8005a58:	9800      	ldr	r0, [sp, #0]
 8005a5a:	6800      	ldr	r0, [r0, #0]
 8005a5c:	8b80      	ldrh	r0, [r0, #28]
 8005a5e:	9902      	ldr	r1, [sp, #8]
 8005a60:	7088      	strb	r0, [r1, #2]
 8005a62:	9800      	ldr	r0, [sp, #0]
 8005a64:	6800      	ldr	r0, [r0, #0]
 8005a66:	8b80      	ldrh	r0, [r0, #28]
 8005a68:	0a00      	lsrs	r0, r0, #8
 8005a6a:	9902      	ldr	r1, [sp, #8]
 8005a6c:	70c8      	strb	r0, [r1, #3]
 8005a6e:	9800      	ldr	r0, [sp, #0]
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	0010      	movs	r0, r2
 8005a74:	3012      	adds	r0, #18
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	1840      	adds	r0, r0, r1
 8005a7a:	8803      	ldrh	r3, [r0, #0]
 8005a7c:	498c      	ldr	r1, [pc, #560]	; (8005cb0 <.text_30>)
 8005a7e:	4019      	ands	r1, r3
 8005a80:	320b      	adds	r2, #11
 8005a82:	9b04      	ldr	r3, [sp, #16]
 8005a84:	5cd2      	ldrb	r2, [r2, r3]
 8005a86:	0253      	lsls	r3, r2, #9
 8005a88:	22e0      	movs	r2, #224	; 0xe0
 8005a8a:	0112      	lsls	r2, r2, #4
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	8002      	strh	r2, [r0, #0]
 8005a92:	9802      	ldr	r0, [sp, #8]
 8005a94:	7002      	strb	r2, [r0, #0]
 8005a96:	9800      	ldr	r0, [sp, #0]
 8005a98:	6800      	ldr	r0, [r0, #0]
 8005a9a:	3012      	adds	r0, #18
 8005a9c:	9903      	ldr	r1, [sp, #12]
 8005a9e:	5a40      	ldrh	r0, [r0, r1]
 8005aa0:	0a00      	lsrs	r0, r0, #8
 8005aa2:	9902      	ldr	r1, [sp, #8]
 8005aa4:	7048      	strb	r0, [r1, #1]
 8005aa6:	9800      	ldr	r0, [sp, #0]
 8005aa8:	6800      	ldr	r0, [r0, #0]
 8005aaa:	81c4      	strh	r4, [r0, #14]
 8005aac:	210a      	movs	r1, #10
 8005aae:	7141      	strb	r1, [r0, #5]
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	7401      	strb	r1, [r0, #16]
 8005ab4:	b2a0      	uxth	r0, r4
 8005ab6:	9000      	str	r0, [sp, #0]
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	4668      	mov	r0, sp
 8005abc:	7902      	ldrb	r2, [r0, #4]
 8005abe:	7f01      	ldrb	r1, [r0, #28]
 8005ac0:	2002      	movs	r0, #2
 8005ac2:	4e7c      	ldr	r6, [pc, #496]	; (8005cb4 <.text_31>)
 8005ac4:	6836      	ldr	r6, [r6, #0]
 8005ac6:	47b0      	blx	r6
 8005ac8:	497b      	ldr	r1, [pc, #492]	; (8005cb8 <.text_32>)
 8005aca:	4668      	mov	r0, sp
 8005acc:	7940      	ldrb	r0, [r0, #5]
 8005ace:	f013 f861 	bl	8018b94 <USBPD_TIM_Start>
 8005ad2:	b2a3      	uxth	r3, r4
 8005ad4:	9a02      	ldr	r2, [sp, #8]
 8005ad6:	4668      	mov	r0, sp
 8005ad8:	7901      	ldrb	r1, [r0, #4]
 8005ada:	7f00      	ldrb	r0, [r0, #28]
 8005adc:	f011 fc53 	bl	8017386 <USBPD_PHY_SendMessage>
 8005ae0:	e087      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005ae2:	bf00      	nop
 8005ae4:	20000548 	.word	0x20000548
 8005ae8:	f3ef 8410 	mrs	r4, PRIMASK
 8005aec:	b672      	cpsid	i
 8005aee:	9800      	ldr	r0, [sp, #0]
 8005af0:	6800      	ldr	r0, [r0, #0]
 8005af2:	7940      	ldrb	r0, [r0, #5]
 8005af4:	280a      	cmp	r0, #10
 8005af6:	d109      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005af8:	4668      	mov	r0, sp
 8005afa:	7940      	ldrb	r0, [r0, #5]
 8005afc:	f013 f8b8 	bl	8018c70 <USBPD_TIM_IsExpired>
 8005b00:	2801      	cmp	r0, #1
 8005b02:	d103      	bne.n	8005b0c <USBPD_PRL_SendMessage+0x360>
 8005b04:	200d      	movs	r0, #13
 8005b06:	9900      	ldr	r1, [sp, #0]
 8005b08:	6809      	ldr	r1, [r1, #0]
 8005b0a:	7148      	strb	r0, [r1, #5]
 8005b0c:	f384 8810 	msr	PRIMASK, r4
 8005b10:	e06f      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b12:	7aca      	ldrb	r2, [r1, #11]
 8005b14:	8b67      	ldrh	r7, [r4, #26]
 8005b16:	053f      	lsls	r7, r7, #20
 8005b18:	0f7f      	lsrs	r7, r7, #29
 8005b1a:	42ba      	cmp	r2, r7
 8005b1c:	d10c      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b1e:	7ea3      	ldrb	r3, [r4, #26]
 8005b20:	06db      	lsls	r3, r3, #27
 8005b22:	0edb      	lsrs	r3, r3, #27
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <USBPD_PRL_SendMessage+0x38c>
 8005b28:	1c52      	adds	r2, r2, #1
 8005b2a:	0750      	lsls	r0, r2, #29
 8005b2c:	0f40      	lsrs	r0, r0, #29
 8005b2e:	72c8      	strb	r0, [r1, #11]
 8005b30:	9800      	ldr	r0, [sp, #0]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	7146      	strb	r6, [r0, #5]
 8005b36:	e011      	b.n	8005b5c <USBPD_PRL_SendMessage+0x3b0>
 8005b38:	210d      	movs	r1, #13
 8005b3a:	7141      	strb	r1, [r0, #5]
 8005b3c:	e059      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b3e:	7ac8      	ldrb	r0, [r1, #11]
 8005b40:	1c40      	adds	r0, r0, #1
 8005b42:	0740      	lsls	r0, r0, #29
 8005b44:	0f40      	lsrs	r0, r0, #29
 8005b46:	72c8      	strb	r0, [r1, #11]
 8005b48:	9800      	ldr	r0, [sp, #0]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	7146      	strb	r6, [r0, #5]
 8005b4e:	8ba1      	ldrh	r1, [r4, #28]
 8005b50:	485a      	ldr	r0, [pc, #360]	; (8005cbc <.text_33>)
 8005b52:	4008      	ands	r0, r1
 8005b54:	83a0      	strh	r0, [r4, #28]
 8005b56:	495a      	ldr	r1, [pc, #360]	; (8005cc0 <.text_34>)
 8005b58:	4001      	ands	r1, r0
 8005b5a:	83a1      	strh	r1, [r4, #28]
 8005b5c:	2505      	movs	r5, #5
 8005b5e:	e048      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b60:	78a0      	ldrb	r0, [r4, #2]
 8005b62:	1c40      	adds	r0, r0, #1
 8005b64:	70a0      	strb	r0, [r4, #2]
 8005b66:	9a03      	ldr	r2, [sp, #12]
 8005b68:	18a2      	adds	r2, r4, r2
 8005b6a:	8a52      	ldrh	r2, [r2, #18]
 8005b6c:	0613      	lsls	r3, r2, #24
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <USBPD_PRL_SendMessage+0x3cc>
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <USBPD_PRL_SendMessage+0x3ce>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	0bd2      	lsrs	r2, r2, #15
 8005b7c:	d006      	beq.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b7e:	8ba2      	ldrh	r2, [r4, #28]
 8005b80:	0bd4      	lsrs	r4, r2, #15
 8005b82:	d103      	bne.n	8005b8c <USBPD_PRL_SendMessage+0x3e0>
 8005b84:	05d2      	lsls	r2, r2, #23
 8005b86:	0dd2      	lsrs	r2, r2, #23
 8005b88:	2a1b      	cmp	r2, #27
 8005b8a:	d207      	bcs.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b8c:	b2c0      	uxtb	r0, r0
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d304      	bcc.n	8005b9c <USBPD_PRL_SendMessage+0x3f0>
 8005b92:	2010      	movs	r0, #16
 8005b94:	9900      	ldr	r1, [sp, #0]
 8005b96:	6809      	ldr	r1, [r1, #0]
 8005b98:	7148      	strb	r0, [r1, #5]
 8005b9a:	e02a      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005b9c:	9800      	ldr	r0, [sp, #0]
 8005b9e:	6800      	ldr	r0, [r0, #0]
 8005ba0:	7146      	strb	r6, [r0, #5]
 8005ba2:	2507      	movs	r5, #7
 8005ba4:	7ac8      	ldrb	r0, [r1, #11]
 8005ba6:	1c40      	adds	r0, r0, #1
 8005ba8:	2207      	movs	r2, #7
 8005baa:	4002      	ands	r2, r0
 8005bac:	72ca      	strb	r2, [r1, #11]
 8005bae:	e020      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bb0:	210a      	movs	r1, #10
 8005bb2:	7141      	strb	r1, [r0, #5]
 8005bb4:	2002      	movs	r0, #2
 8005bb6:	7420      	strb	r0, [r4, #16]
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <.text_32>)
 8005bba:	4668      	mov	r0, sp
 8005bbc:	7940      	ldrb	r0, [r0, #5]
 8005bbe:	f012 ffe9 	bl	8018b94 <USBPD_TIM_Start>
 8005bc2:	89e3      	ldrh	r3, [r4, #14]
 8005bc4:	9a02      	ldr	r2, [sp, #8]
 8005bc6:	4668      	mov	r0, sp
 8005bc8:	7901      	ldrb	r1, [r0, #4]
 8005bca:	7f00      	ldrb	r0, [r0, #28]
 8005bcc:	f011 fbdb 	bl	8017386 <USBPD_PHY_SendMessage>
 8005bd0:	4668      	mov	r0, sp
 8005bd2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8005bd4:	9000      	str	r0, [sp, #0]
 8005bd6:	9b02      	ldr	r3, [sp, #8]
 8005bd8:	4668      	mov	r0, sp
 8005bda:	7902      	ldrb	r2, [r0, #4]
 8005bdc:	7f01      	ldrb	r1, [r0, #28]
 8005bde:	2002      	movs	r0, #2
 8005be0:	4c34      	ldr	r4, [pc, #208]	; (8005cb4 <.text_31>)
 8005be2:	6824      	ldr	r4, [r4, #0]
 8005be4:	47a0      	blx	r4
 8005be6:	e004      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005be8:	7146      	strb	r6, [r0, #5]
 8005bea:	2506      	movs	r5, #6
 8005bec:	e001      	b.n	8005bf2 <USBPD_PRL_SendMessage+0x446>
 8005bee:	7146      	strb	r6, [r0, #5]
 8005bf0:	2510      	movs	r5, #16
 8005bf2:	0028      	movs	r0, r5
 8005bf4:	b009      	add	sp, #36	; 0x24
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf8 <.text_24>:
 8005bf8:	0000ffe0 	.word	0x0000ffe0

08005bfc <.text_25>:
 8005bfc:	00008fff 	.word	0x00008fff

08005c00 <USBPD_PRL_ResetRequestProcess>:
 8005c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c02:	0005      	movs	r5, r0
 8005c04:	000e      	movs	r6, r1
 8005c06:	482f      	ldr	r0, [pc, #188]	; (8005cc4 <.text_35>)
 8005c08:	00a9      	lsls	r1, r5, #2
 8005c0a:	1840      	adds	r0, r0, r1
 8005c0c:	9000      	str	r0, [sp, #0]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	2700      	movs	r7, #0
 8005c12:	70e7      	strb	r7, [r4, #3]
 8005c14:	72e7      	strb	r7, [r4, #11]
 8005c16:	7327      	strb	r7, [r4, #12]
 8005c18:	7367      	strb	r7, [r4, #13]
 8005c1a:	220f      	movs	r2, #15
 8005c1c:	2103      	movs	r1, #3
 8005c1e:	1da0      	adds	r0, r4, #6
 8005c20:	f022 f8ab 	bl	8027d7a <__aeabi_memset>
 8005c24:	9800      	ldr	r0, [sp, #0]
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	7147      	strb	r7, [r0, #5]
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	0032      	movs	r2, r6
 8005c30:	0029      	movs	r1, r5
 8005c32:	2002      	movs	r0, #2
 8005c34:	4f1f      	ldr	r7, [pc, #124]	; (8005cb4 <.text_31>)
 8005c36:	683f      	ldr	r7, [r7, #0]
 8005c38:	47b8      	blx	r7
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	f000 f849 	bl	8005cd2 <PRL_DisableRX>
 8005c40:	0031      	movs	r1, r6
 8005c42:	0028      	movs	r0, r5
 8005c44:	f011 fb89 	bl	801735a <USBPD_PHY_ResetRequest>
 8005c48:	2005      	movs	r0, #5
 8005c4a:	7120      	strb	r0, [r4, #4]
 8005c4c:	78e0      	ldrb	r0, [r4, #3]
 8005c4e:	2801      	cmp	r0, #1
 8005c50:	d002      	beq.n	8005c58 <USBPD_PRL_ResetRequestProcess+0x58>
 8005c52:	7920      	ldrb	r0, [r4, #4]
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f9      	bne.n	8005c4c <USBPD_PRL_ResetRequestProcess+0x4c>
 8005c58:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005c5a <USBDPD_PRL_BistCarrierEyeMode>:
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	2905      	cmp	r1, #5
 8005c5e:	d102      	bne.n	8005c66 <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005c60:	f011 fbb0 	bl	80173c4 <USBPD_PHY_Send_BIST_Pattern>
 8005c64:	bd02      	pop	{r1, pc}
 8005c66:	2010      	movs	r0, #16
 8005c68:	bd02      	pop	{r1, pc}

08005c6a <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	2905      	cmp	r1, #5
 8005c6e:	d103      	bne.n	8005c78 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005c70:	2107      	movs	r1, #7
 8005c72:	f011 fbb7 	bl	80173e4 <USBPD_PHY_ExitTransmit>
 8005c76:	bd02      	pop	{r1, pc}
 8005c78:	2010      	movs	r0, #16
 8005c7a:	bd02      	pop	{r1, pc}

08005c7c <USBPD_PRL_Reset>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	0004      	movs	r4, r0
 8005c80:	4810      	ldr	r0, [pc, #64]	; (8005cc4 <.text_35>)
 8005c82:	00a1      	lsls	r1, r4, #2
 8005c84:	5845      	ldr	r5, [r0, r1]
 8005c86:	2600      	movs	r6, #0
 8005c88:	716e      	strb	r6, [r5, #5]
 8005c8a:	702e      	strb	r6, [r5, #0]
 8005c8c:	712e      	strb	r6, [r5, #4]
 8005c8e:	72ee      	strb	r6, [r5, #11]
 8005c90:	732e      	strb	r6, [r5, #12]
 8005c92:	736e      	strb	r6, [r5, #13]
 8005c94:	220f      	movs	r2, #15
 8005c96:	2103      	movs	r1, #3
 8005c98:	1da8      	adds	r0, r5, #6
 8005c9a:	f022 f86e 	bl	8027d7a <__aeabi_memset>
 8005c9e:	2025      	movs	r0, #37	; 0x25
 8005ca0:	542e      	strb	r6, [r5, r0]
 8005ca2:	0020      	movs	r0, r4
 8005ca4:	f011 fb4f 	bl	8017346 <USBPD_PHY_Reset>
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f011 fc06 	bl	80174ba <USBPD_PHY_EnableRX>
 8005cae:	bd70      	pop	{r4, r5, r6, pc}

08005cb0 <.text_30>:
 8005cb0:	0000f1ff 	.word	0x0000f1ff

08005cb4 <.text_31>:
 8005cb4:	20000000 	.word	0x20000000

08005cb8 <.text_32>:
 8005cb8:	00002710 	.word	0x00002710

08005cbc <.text_33>:
 8005cbc:	000087ff 	.word	0x000087ff

08005cc0 <.text_34>:
 8005cc0:	0000fbff 	.word	0x0000fbff

08005cc4 <.text_35>:
 8005cc4:	20000548 	.word	0x20000548

08005cc8 <USBPD_PRL_Stop>:
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	f011 fc05 	bl	80174d8 <USBPD_PHY_DisableRX>
 8005cce:	bd01      	pop	{r0, pc}

08005cd0 <USBPD_PRL_DeInit>:
 8005cd0:	4770      	bx	lr

08005cd2 <PRL_DisableRX>:
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	f011 fc00 	bl	80174d8 <USBPD_PHY_DisableRX>
 8005cd8:	bd01      	pop	{r0, pc}
	...

08005cdc <PRL_Received>:
 8005cdc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	a809      	add	r0, sp, #36	; 0x24
 8005ce2:	7805      	ldrb	r5, [r0, #0]
 8005ce4:	48d0      	ldr	r0, [pc, #832]	; (8006028 <PRL_Received+0x34c>)
 8005ce6:	00a9      	lsls	r1, r5, #2
 8005ce8:	1846      	adds	r6, r0, r1
 8005cea:	6834      	ldr	r4, [r6, #0]
 8005cec:	4628      	mov	r0, r5
 8005cee:	f011 fb1f 	bl	8017330 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005cf2:	a909      	add	r1, sp, #36	; 0x24
 8005cf4:	7809      	ldrb	r1, [r1, #0]
 8005cf6:	0049      	lsls	r1, r1, #1
 8005cf8:	466a      	mov	r2, sp
 8005cfa:	7011      	strb	r1, [r2, #0]
 8005cfc:	0001      	movs	r1, r0
 8005cfe:	4668      	mov	r0, sp
 8005d00:	7800      	ldrb	r0, [r0, #0]
 8005d02:	f012 ff47 	bl	8018b94 <USBPD_TIM_Start>
 8005d06:	2030      	movs	r0, #48	; 0x30
 8005d08:	5c20      	ldrb	r0, [r4, r0]
 8005d0a:	2131      	movs	r1, #49	; 0x31
 8005d0c:	5c61      	ldrb	r1, [r4, r1]
 8005d0e:	0209      	lsls	r1, r1, #8
 8005d10:	1840      	adds	r0, r0, r1
 8005d12:	4669      	mov	r1, sp
 8005d14:	8088      	strh	r0, [r1, #4]
 8005d16:	4668      	mov	r0, sp
 8005d18:	8880      	ldrh	r0, [r0, #4]
 8005d1a:	0440      	lsls	r0, r0, #17
 8005d1c:	0f40      	lsrs	r0, r0, #29
 8005d1e:	0080      	lsls	r0, r0, #2
 8005d20:	9005      	str	r0, [sp, #20]
 8005d22:	1c80      	adds	r0, r0, #2
 8005d24:	9007      	str	r0, [sp, #28]
 8005d26:	48c1      	ldr	r0, [pc, #772]	; (800602c <.text_40>)
 8005d28:	8889      	ldrh	r1, [r1, #4]
 8005d2a:	4001      	ands	r1, r0
 8005d2c:	2901      	cmp	r1, #1
 8005d2e:	d116      	bne.n	8005d5e <PRL_Received+0x82>
 8005d30:	0068      	lsls	r0, r5, #1
 8005d32:	1c40      	adds	r0, r0, #1
 8005d34:	b2c0      	uxtb	r0, r0
 8005d36:	f012 ff9b 	bl	8018c70 <USBPD_TIM_IsExpired>
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d04c      	beq.n	8005dd8 <PRL_Received+0xfc>
 8005d3e:	200b      	movs	r0, #11
 8005d40:	6831      	ldr	r1, [r6, #0]
 8005d42:	7148      	strb	r0, [r1, #5]
 8005d44:	4668      	mov	r0, sp
 8005d46:	8880      	ldrh	r0, [r0, #4]
 8005d48:	8360      	strh	r0, [r4, #26]
 8005d4a:	9807      	ldr	r0, [sp, #28]
 8005d4c:	9000      	str	r0, [sp, #0]
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3330      	adds	r3, #48	; 0x30
 8005d52:	a80a      	add	r0, sp, #40	; 0x28
 8005d54:	7802      	ldrb	r2, [r0, #0]
 8005d56:	a809      	add	r0, sp, #36	; 0x24
 8005d58:	7801      	ldrb	r1, [r0, #0]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e15f      	b.n	800601e <PRL_Received+0x342>
 8005d5e:	49b4      	ldr	r1, [pc, #720]	; (8006030 <.text_41>)
 8005d60:	880f      	ldrh	r7, [r1, #0]
 8005d62:	2601      	movs	r6, #1
 8005d64:	72a6      	strb	r6, [r4, #10]
 8005d66:	a90a      	add	r1, sp, #40	; 0x28
 8005d68:	7809      	ldrb	r1, [r1, #0]
 8005d6a:	1861      	adds	r1, r4, r1
 8005d6c:	9104      	str	r1, [sp, #16]
 8005d6e:	2500      	movs	r5, #0
 8005d70:	4669      	mov	r1, sp
 8005d72:	8889      	ldrh	r1, [r1, #4]
 8005d74:	4008      	ands	r0, r1
 8005d76:	280d      	cmp	r0, #13
 8005d78:	d106      	bne.n	8005d88 <PRL_Received+0xac>
 8005d7a:	9904      	ldr	r1, [sp, #16]
 8005d7c:	72cd      	strb	r5, [r1, #11]
 8005d7e:	220f      	movs	r2, #15
 8005d80:	2103      	movs	r1, #3
 8005d82:	1da0      	adds	r0, r4, #6
 8005d84:	f021 fff9 	bl	8027d7a <__aeabi_memset>
 8005d88:	a80a      	add	r0, sp, #40	; 0x28
 8005d8a:	7800      	ldrb	r0, [r0, #0]
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d10d      	bne.n	8005dac <PRL_Received+0xd0>
 8005d90:	8a61      	ldrh	r1, [r4, #18]
 8005d92:	094a      	lsrs	r2, r1, #5
 8005d94:	2001      	movs	r0, #1
 8005d96:	4010      	ands	r0, r2
 8005d98:	0a0a      	lsrs	r2, r1, #8
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	4abf      	ldr	r2, [pc, #764]	; (800609c <.text_44>)
 8005da0:	403a      	ands	r2, r7
 8005da2:	0143      	lsls	r3, r0, #5
 8005da4:	4313      	orrs	r3, r2
 8005da6:	0208      	lsls	r0, r1, #8
 8005da8:	4318      	orrs	r0, r3
 8005daa:	e001      	b.n	8005db0 <PRL_Received+0xd4>
 8005dac:	48bc      	ldr	r0, [pc, #752]	; (80060a0 <.text_45>)
 8005dae:	4038      	ands	r0, r7
 8005db0:	49bc      	ldr	r1, [pc, #752]	; (80060a4 <.text_46>)
 8005db2:	4001      	ands	r1, r0
 8005db4:	4668      	mov	r0, sp
 8005db6:	8880      	ldrh	r0, [r0, #4]
 8005db8:	22e0      	movs	r2, #224	; 0xe0
 8005dba:	0112      	lsls	r2, r2, #4
 8005dbc:	4002      	ands	r2, r0
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	2040      	movs	r0, #64	; 0x40
 8005dc2:	4310      	orrs	r0, r2
 8005dc4:	7620      	strb	r0, [r4, #24]
 8005dc6:	0a00      	lsrs	r0, r0, #8
 8005dc8:	7660      	strb	r0, [r4, #25]
 8005dca:	a80a      	add	r0, sp, #40	; 0x28
 8005dcc:	7801      	ldrb	r1, [r0, #0]
 8005dce:	a809      	add	r0, sp, #36	; 0x24
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	f7fa ff49 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d100      	bne.n	8005ddc <PRL_Received+0x100>
 8005dda:	e123      	b.n	8006024 <PRL_Received+0x348>
 8005ddc:	7426      	strb	r6, [r4, #16]
 8005dde:	4668      	mov	r0, sp
 8005de0:	7800      	ldrb	r0, [r0, #0]
 8005de2:	f012 ff45 	bl	8018c70 <USBPD_TIM_IsExpired>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f9      	beq.n	8005dde <PRL_Received+0x102>
 8005dea:	2302      	movs	r3, #2
 8005dec:	0022      	movs	r2, r4
 8005dee:	3218      	adds	r2, #24
 8005df0:	a80a      	add	r0, sp, #40	; 0x28
 8005df2:	7801      	ldrb	r1, [r0, #0]
 8005df4:	a809      	add	r0, sp, #36	; 0x24
 8005df6:	7800      	ldrb	r0, [r0, #0]
 8005df8:	f011 fac5 	bl	8017386 <USBPD_PHY_SendMessage>
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	a80a      	add	r0, sp, #40	; 0x28
 8005e00:	7800      	ldrb	r0, [r0, #0]
 8005e02:	7260      	strb	r0, [r4, #9]
 8005e04:	0021      	movs	r1, r4
 8005e06:	3130      	adds	r1, #48	; 0x30
 8005e08:	a809      	add	r0, sp, #36	; 0x24
 8005e0a:	7800      	ldrb	r0, [r0, #0]
 8005e0c:	f7fa ff60 	bl	8000cd0 <PE_PRL_PostReceiveEventCopy>
 8005e10:	2033      	movs	r0, #51	; 0x33
 8005e12:	5c20      	ldrb	r0, [r4, r0]
 8005e14:	2132      	movs	r1, #50	; 0x32
 8005e16:	5c61      	ldrb	r1, [r4, r1]
 8005e18:	0203      	lsls	r3, r0, #8
 8005e1a:	18ca      	adds	r2, r1, r3
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	80da      	strh	r2, [r3, #6]
 8005e20:	466a      	mov	r2, sp
 8005e22:	8892      	ldrh	r2, [r2, #4]
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	0f52      	lsrs	r2, r2, #29
 8005e28:	81da      	strh	r2, [r3, #14]
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	88d2      	ldrh	r2, [r2, #6]
 8005e2e:	05d2      	lsls	r2, r2, #23
 8005e30:	0dd2      	lsrs	r2, r2, #23
 8005e32:	811a      	strh	r2, [r3, #8]
 8005e34:	466a      	mov	r2, sp
 8005e36:	88d2      	ldrh	r2, [r2, #6]
 8005e38:	0bd2      	lsrs	r2, r2, #15
 8005e3a:	819a      	strh	r2, [r3, #12]
 8005e3c:	466a      	mov	r2, sp
 8005e3e:	8892      	ldrh	r2, [r2, #4]
 8005e40:	0bd2      	lsrs	r2, r2, #15
 8005e42:	815a      	strh	r2, [r3, #10]
 8005e44:	d007      	beq.n	8005e56 <PRL_Received+0x17a>
 8005e46:	466a      	mov	r2, sp
 8005e48:	8992      	ldrh	r2, [r2, #12]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d103      	bne.n	8005e56 <PRL_Received+0x17a>
 8005e4e:	4668      	mov	r0, sp
 8005e50:	8900      	ldrh	r0, [r0, #8]
 8005e52:	1d00      	adds	r0, r0, #4
 8005e54:	e01b      	b.n	8005e8e <PRL_Received+0x1b2>
 8005e56:	7822      	ldrb	r2, [r4, #0]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d117      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e5c:	466a      	mov	r2, sp
 8005e5e:	89d2      	ldrh	r2, [r2, #14]
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d013      	beq.n	8005e8c <PRL_Received+0x1b0>
 8005e64:	466a      	mov	r2, sp
 8005e66:	8892      	ldrh	r2, [r2, #4]
 8005e68:	06d2      	lsls	r2, r2, #27
 8005e6a:	0ed2      	lsrs	r2, r2, #27
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d10d      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e70:	0200      	lsls	r0, r0, #8
 8005e72:	1808      	adds	r0, r1, r0
 8005e74:	2134      	movs	r1, #52	; 0x34
 8005e76:	5c61      	ldrb	r1, [r4, r1]
 8005e78:	0409      	lsls	r1, r1, #16
 8005e7a:	1840      	adds	r0, r0, r1
 8005e7c:	2135      	movs	r1, #53	; 0x35
 8005e7e:	5c61      	ldrb	r1, [r4, r1]
 8005e80:	0609      	lsls	r1, r1, #24
 8005e82:	1840      	adds	r0, r0, r1
 8005e84:	0f00      	lsrs	r0, r0, #28
 8005e86:	2808      	cmp	r0, #8
 8005e88:	d100      	bne.n	8005e8c <PRL_Received+0x1b0>
 8005e8a:	7026      	strb	r6, [r4, #0]
 8005e8c:	9807      	ldr	r0, [sp, #28]
 8005e8e:	9000      	str	r0, [sp, #0]
 8005e90:	0023      	movs	r3, r4
 8005e92:	3330      	adds	r3, #48	; 0x30
 8005e94:	a80a      	add	r0, sp, #40	; 0x28
 8005e96:	7802      	ldrb	r2, [r0, #0]
 8005e98:	a809      	add	r0, sp, #36	; 0x24
 8005e9a:	7801      	ldrb	r1, [r0, #0]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	4fc1      	ldr	r7, [pc, #772]	; (80061a4 <.text_51>)
 8005ea0:	683f      	ldr	r7, [r7, #0]
 8005ea2:	47b8      	blx	r7
 8005ea4:	9806      	ldr	r0, [sp, #24]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d10b      	bne.n	8005ec2 <PRL_Received+0x1e6>
 8005eaa:	2002      	movs	r0, #2
 8005eac:	9000      	str	r0, [sp, #0]
 8005eae:	0023      	movs	r3, r4
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	a80a      	add	r0, sp, #40	; 0x28
 8005eb4:	7802      	ldrb	r2, [r0, #0]
 8005eb6:	a809      	add	r0, sp, #36	; 0x24
 8005eb8:	7801      	ldrb	r1, [r0, #0]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4fb9      	ldr	r7, [pc, #740]	; (80061a4 <.text_51>)
 8005ebe:	683f      	ldr	r7, [r7, #0]
 8005ec0:	47b8      	blx	r7
 8005ec2:	4668      	mov	r0, sp
 8005ec4:	8880      	ldrh	r0, [r0, #4]
 8005ec6:	0a40      	lsrs	r0, r0, #9
 8005ec8:	2107      	movs	r1, #7
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	7992      	ldrb	r2, [r2, #6]
 8005ece:	2307      	movs	r3, #7
 8005ed0:	4003      	ands	r3, r0
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d103      	bne.n	8005ede <PRL_Received+0x202>
 8005ed6:	9a06      	ldr	r2, [sp, #24]
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	d100      	bne.n	8005ede <PRL_Received+0x202>
 8005edc:	e08f      	b.n	8005ffe <PRL_Received+0x322>
 8005ede:	4001      	ands	r1, r0
 8005ee0:	9804      	ldr	r0, [sp, #16]
 8005ee2:	7181      	strb	r1, [r0, #6]
 8005ee4:	4668      	mov	r0, sp
 8005ee6:	8880      	ldrh	r0, [r0, #4]
 8005ee8:	8420      	strh	r0, [r4, #32]
 8005eea:	4668      	mov	r0, sp
 8005eec:	8940      	ldrh	r0, [r0, #10]
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d043      	beq.n	8005f7a <PRL_Received+0x29e>
 8005ef2:	4668      	mov	r0, sp
 8005ef4:	8980      	ldrh	r0, [r0, #12]
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d03f      	beq.n	8005f7a <PRL_Received+0x29e>
 8005efa:	4668      	mov	r0, sp
 8005efc:	88c0      	ldrh	r0, [r0, #6]
 8005efe:	83e0      	strh	r0, [r4, #30]
 8005f00:	4668      	mov	r0, sp
 8005f02:	88c0      	ldrh	r0, [r0, #6]
 8005f04:	0440      	lsls	r0, r0, #17
 8005f06:	0f01      	lsrs	r1, r0, #28
 8005f08:	201a      	movs	r0, #26
 8005f0a:	4348      	muls	r0, r1
 8005f0c:	9905      	ldr	r1, [sp, #20]
 8005f0e:	1e89      	subs	r1, r1, #2
 8005f10:	466a      	mov	r2, sp
 8005f12:	88d2      	ldrh	r2, [r2, #6]
 8005f14:	23f8      	movs	r3, #248	; 0xf8
 8005f16:	01db      	lsls	r3, r3, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d12f      	bne.n	8005f7c <PRL_Received+0x2a0>
 8005f1c:	466a      	mov	r2, sp
 8005f1e:	88d2      	ldrh	r2, [r2, #6]
 8005f20:	05d2      	lsls	r2, r2, #23
 8005f22:	0dd2      	lsrs	r2, r2, #23
 8005f24:	466b      	mov	r3, sp
 8005f26:	89db      	ldrh	r3, [r3, #14]
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d30a      	bcc.n	8005f42 <PRL_Received+0x266>
 8005f2c:	2a1a      	cmp	r2, #26
 8005f2e:	d811      	bhi.n	8005f54 <PRL_Received+0x278>
 8005f30:	e007      	b.n	8005f42 <PRL_Received+0x266>
 8005f32:	0023      	movs	r3, r4
 8005f34:	3334      	adds	r3, #52	; 0x34
 8005f36:	5d5b      	ldrb	r3, [r3, r5]
 8005f38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f3a:	182f      	adds	r7, r5, r0
 8005f3c:	55f3      	strb	r3, [r6, r7]
 8005f3e:	1c6d      	adds	r5, r5, #1
 8005f40:	b2ad      	uxth	r5, r5
 8005f42:	428d      	cmp	r5, r1
 8005f44:	d3f5      	bcc.n	8005f32 <PRL_Received+0x256>
 8005f46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005f48:	4291      	cmp	r1, r2
 8005f4a:	d301      	bcc.n	8005f50 <PRL_Received+0x274>
 8005f4c:	4669      	mov	r1, sp
 8005f4e:	8909      	ldrh	r1, [r1, #8]
 8005f50:	8001      	strh	r1, [r0, #0]
 8005f52:	e00c      	b.n	8005f6e <PRL_Received+0x292>
 8005f54:	2025      	movs	r0, #37	; 0x25
 8005f56:	5426      	strb	r6, [r4, r0]
 8005f58:	0020      	movs	r0, r4
 8005f5a:	3034      	adds	r0, #52	; 0x34
 8005f5c:	5d40      	ldrb	r0, [r0, r5]
 8005f5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005f60:	5548      	strb	r0, [r1, r5]
 8005f62:	1c6d      	adds	r5, r5, #1
 8005f64:	2d1a      	cmp	r5, #26
 8005f66:	d3f7      	bcc.n	8005f58 <PRL_Received+0x27c>
 8005f68:	201a      	movs	r0, #26
 8005f6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005f6c:	8008      	strh	r0, [r1, #0]
 8005f6e:	a80a      	add	r0, sp, #40	; 0x28
 8005f70:	7801      	ldrb	r1, [r0, #0]
 8005f72:	a809      	add	r0, sp, #36	; 0x24
 8005f74:	7800      	ldrb	r0, [r0, #0]
 8005f76:	f7fa fe77 	bl	8000c68 <PE_PRL_PostReceiveEvent>
 8005f7a:	e053      	b.n	8006024 <PRL_Received+0x348>
 8005f7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f7e:	8812      	ldrh	r2, [r2, #0]
 8005f80:	9b05      	ldr	r3, [sp, #20]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	1e9b      	subs	r3, r3, #2
 8005f86:	27ff      	movs	r7, #255	; 0xff
 8005f88:	1dbf      	adds	r7, r7, #6
 8005f8a:	321a      	adds	r2, #26
 8005f8c:	42ba      	cmp	r2, r7
 8005f8e:	d21b      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f90:	466a      	mov	r2, sp
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d217      	bcs.n	8005fc8 <PRL_Received+0x2ec>
 8005f98:	2225      	movs	r2, #37	; 0x25
 8005f9a:	54a6      	strb	r6, [r4, r2]
 8005f9c:	e007      	b.n	8005fae <PRL_Received+0x2d2>
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	3234      	adds	r2, #52	; 0x34
 8005fa2:	5d52      	ldrb	r2, [r2, r5]
 8005fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fa6:	182e      	adds	r6, r5, r0
 8005fa8:	559a      	strb	r2, [r3, r6]
 8005faa:	1c6d      	adds	r5, r5, #1
 8005fac:	b2ad      	uxth	r5, r5
 8005fae:	428d      	cmp	r5, r1
 8005fb0:	d3f5      	bcc.n	8005f9e <PRL_Received+0x2c2>
 8005fb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005fb4:	8801      	ldrh	r1, [r0, #0]
 8005fb6:	466a      	mov	r2, sp
 8005fb8:	8892      	ldrh	r2, [r2, #4]
 8005fba:	0a92      	lsrs	r2, r2, #10
 8005fbc:	231c      	movs	r3, #28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	1e9a      	subs	r2, r3, #2
 8005fc2:	1889      	adds	r1, r1, r2
 8005fc4:	8001      	strh	r1, [r0, #0]
 8005fc6:	e02d      	b.n	8006024 <PRL_Received+0x348>
 8005fc8:	42bb      	cmp	r3, r7
 8005fca:	d215      	bcs.n	8005ff8 <PRL_Received+0x31c>
 8005fcc:	466a      	mov	r2, sp
 8005fce:	8912      	ldrh	r2, [r2, #8]
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d311      	bcc.n	8005ff8 <PRL_Received+0x31c>
 8005fd4:	2225      	movs	r2, #37	; 0x25
 8005fd6:	54a6      	strb	r6, [r4, r2]
 8005fd8:	e007      	b.n	8005fea <PRL_Received+0x30e>
 8005fda:	0022      	movs	r2, r4
 8005fdc:	3234      	adds	r2, #52	; 0x34
 8005fde:	5d52      	ldrb	r2, [r2, r5]
 8005fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fe2:	182e      	adds	r6, r5, r0
 8005fe4:	559a      	strb	r2, [r3, r6]
 8005fe6:	1c6d      	adds	r5, r5, #1
 8005fe8:	b2ad      	uxth	r5, r5
 8005fea:	428d      	cmp	r5, r1
 8005fec:	d3f5      	bcc.n	8005fda <PRL_Received+0x2fe>
 8005fee:	4668      	mov	r0, sp
 8005ff0:	8900      	ldrh	r0, [r0, #8]
 8005ff2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005ff4:	8008      	strh	r0, [r1, #0]
 8005ff6:	e015      	b.n	8006024 <PRL_Received+0x348>
 8005ff8:	2025      	movs	r0, #37	; 0x25
 8005ffa:	5425      	strb	r5, [r4, r0]
 8005ffc:	e012      	b.n	8006024 <PRL_Received+0x348>
 8005ffe:	20ff      	movs	r0, #255	; 0xff
 8006000:	7260      	strb	r0, [r4, #9]
 8006002:	7425      	strb	r5, [r4, #16]
 8006004:	a809      	add	r0, sp, #36	; 0x24
 8006006:	7800      	ldrb	r0, [r0, #0]
 8006008:	f7fa fe4a 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 800600c:	72a5      	strb	r5, [r4, #10]
 800600e:	2017      	movs	r0, #23
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	bf00      	nop
 8006014:	a367      	add	r3, pc, #412	; (adr r3, 80061b4 <.text_55>)
 8006016:	2200      	movs	r2, #0
 8006018:	a809      	add	r0, sp, #36	; 0x24
 800601a:	7801      	ldrb	r1, [r0, #0]
 800601c:	2006      	movs	r0, #6
 800601e:	4c61      	ldr	r4, [pc, #388]	; (80061a4 <.text_51>)
 8006020:	6824      	ldr	r4, [r4, #0]
 8006022:	47a0      	blx	r4
 8006024:	b00b      	add	sp, #44	; 0x2c
 8006026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006028:	20000548 	.word	0x20000548

0800602c <.text_40>:
 800602c:	0000f01f 	.word	0x0000f01f

08006030 <.text_41>:
 8006030:	0802af38 	.word	0x0802af38

08006034 <PRL_ResetIndicate>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	0004      	movs	r4, r0
 8006038:	000d      	movs	r5, r1
 800603a:	2d05      	cmp	r5, #5
 800603c:	d119      	bne.n	8006072 <PRL_ResetIndicate+0x3e>
 800603e:	485a      	ldr	r0, [pc, #360]	; (80061a8 <.text_52>)
 8006040:	00a1      	lsls	r1, r4, #2
 8006042:	1840      	adds	r0, r0, r1
 8006044:	9000      	str	r0, [sp, #0]
 8006046:	6807      	ldr	r7, [r0, #0]
 8006048:	2600      	movs	r6, #0
 800604a:	2000      	movs	r0, #0
 800604c:	b2c2      	uxtb	r2, r0
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	72d6      	strb	r6, [r2, #11]
 8006052:	1c40      	adds	r0, r0, #1
 8006054:	b2c1      	uxtb	r1, r0
 8006056:	2903      	cmp	r1, #3
 8006058:	d3f8      	bcc.n	800604c <PRL_ResetIndicate+0x18>
 800605a:	220f      	movs	r2, #15
 800605c:	2103      	movs	r1, #3
 800605e:	1db8      	adds	r0, r7, #6
 8006060:	f021 fe8b 	bl	8027d7a <__aeabi_memset>
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	714e      	strb	r6, [r1, #5]
 800606a:	703e      	strb	r6, [r7, #0]
 800606c:	0020      	movs	r0, r4
 800606e:	f7ff fe30 	bl	8005cd2 <PRL_DisableRX>
 8006072:	2000      	movs	r0, #0
 8006074:	9000      	str	r0, [sp, #0]
 8006076:	2300      	movs	r3, #0
 8006078:	002a      	movs	r2, r5
 800607a:	0021      	movs	r1, r4
 800607c:	2001      	movs	r0, #1
 800607e:	4e49      	ldr	r6, [pc, #292]	; (80061a4 <.text_51>)
 8006080:	6836      	ldr	r6, [r6, #0]
 8006082:	47b0      	blx	r6
 8006084:	0029      	movs	r1, r5
 8006086:	0020      	movs	r0, r4
 8006088:	f7fa fce6 	bl	8000a58 <PE_PRL_ResetReceived>
 800608c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800608e <PRL_ResetCompleted>:
 800608e:	2101      	movs	r1, #1
 8006090:	4a45      	ldr	r2, [pc, #276]	; (80061a8 <.text_52>)
 8006092:	0080      	lsls	r0, r0, #2
 8006094:	5810      	ldr	r0, [r2, r0]
 8006096:	70c1      	strb	r1, [r0, #3]
 8006098:	4770      	bx	lr
	...

0800609c <.text_44>:
 800609c:	0000fedf 	.word	0x0000fedf

080060a0 <.text_45>:
 80060a0:	0000feff 	.word	0x0000feff

080060a4 <.text_46>:
 80060a4:	0000f13f 	.word	0x0000f13f

080060a8 <PRL_BistCompleted>:
 80060a8:	b580      	push	{r7, lr}
 80060aa:	f7fa fd01 	bl	8000ab0 <PE_PRL_BistCompleted>
 80060ae:	bd01      	pop	{r0, pc}

080060b0 <PRL_TxCompleted>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	0004      	movs	r4, r0
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <.text_52>)
 80060b6:	00a3      	lsls	r3, r4, #2
 80060b8:	58d6      	ldr	r6, [r2, r3]
 80060ba:	2500      	movs	r5, #0
 80060bc:	7c32      	ldrb	r2, [r6, #16]
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d002      	beq.n	80060c8 <PRL_TxCompleted+0x18>
 80060c2:	2a02      	cmp	r2, #2
 80060c4:	d009      	beq.n	80060da <PRL_TxCompleted+0x2a>
 80060c6:	e010      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d102      	bne.n	80060d2 <PRL_TxCompleted+0x22>
 80060cc:	f7fa fe1a 	bl	8000d04 <PE_PRL_PostReceiveEventComplete>
 80060d0:	e001      	b.n	80060d6 <PRL_TxCompleted+0x26>
 80060d2:	f7fa fde5 	bl	8000ca0 <PE_PRL_PostReceiveEventError>
 80060d6:	72b5      	strb	r5, [r6, #10]
 80060d8:	e007      	b.n	80060ea <PRL_TxCompleted+0x3a>
 80060da:	f011 f91b 	bl	8017314 <USBPD_PHY_GetRetryTimerValue>
 80060de:	0001      	movs	r1, r0
 80060e0:	0060      	lsls	r0, r4, #1
 80060e2:	1c40      	adds	r0, r0, #1
 80060e4:	b2c0      	uxtb	r0, r0
 80060e6:	f012 fd55 	bl	8018b94 <USBPD_TIM_Start>
 80060ea:	7435      	strb	r5, [r6, #16]
 80060ec:	bd70      	pop	{r4, r5, r6, pc}

080060ee <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	4c2d      	ldr	r4, [pc, #180]	; (80061a8 <.text_52>)
 80060f2:	0080      	lsls	r0, r0, #2
 80060f4:	5820      	ldr	r0, [r4, r0]
 80060f6:	2480      	movs	r4, #128	; 0x80
 80060f8:	0224      	lsls	r4, r4, #8
 80060fa:	8b85      	ldrh	r5, [r0, #28]
 80060fc:	4e2b      	ldr	r6, [pc, #172]	; (80061ac <.text_53>)
 80060fe:	402e      	ands	r6, r5
 8006100:	02c9      	lsls	r1, r1, #11
 8006102:	4331      	orrs	r1, r6
 8006104:	25fe      	movs	r5, #254	; 0xfe
 8006106:	022d      	lsls	r5, r5, #8
 8006108:	400d      	ands	r5, r1
 800610a:	05d1      	lsls	r1, r2, #23
 800610c:	0dc9      	lsrs	r1, r1, #23
 800610e:	4329      	orrs	r1, r5
 8006110:	4321      	orrs	r1, r4
 8006112:	8381      	strh	r1, [r0, #28]
 8006114:	8a41      	ldrh	r1, [r0, #18]
 8006116:	430c      	orrs	r4, r1
 8006118:	8244      	strh	r4, [r0, #18]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <.text_54>)
 800611c:	4022      	ands	r2, r4
 800611e:	2120      	movs	r1, #32
 8006120:	5c41      	ldrb	r1, [r0, r1]
 8006122:	06c9      	lsls	r1, r1, #27
 8006124:	0ec9      	lsrs	r1, r1, #27
 8006126:	4311      	orrs	r1, r2
 8006128:	8241      	strh	r1, [r0, #18]
 800612a:	7019      	strb	r1, [r3, #0]
 800612c:	8a41      	ldrh	r1, [r0, #18]
 800612e:	0a09      	lsrs	r1, r1, #8
 8006130:	7059      	strb	r1, [r3, #1]
 8006132:	8b81      	ldrh	r1, [r0, #28]
 8006134:	7099      	strb	r1, [r3, #2]
 8006136:	8b80      	ldrh	r0, [r0, #28]
 8006138:	0a00      	lsrs	r0, r0, #8
 800613a:	70d8      	strb	r0, [r3, #3]
 800613c:	bd70      	pop	{r4, r5, r6, pc}

0800613e <USBPD_PRL_PrepareChunkRequest>:
 800613e:	b510      	push	{r4, lr}
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <.text_52>)
 8006142:	0080      	lsls	r0, r0, #2
 8006144:	5810      	ldr	r0, [r2, r0]
 8006146:	8b83      	ldrh	r3, [r0, #28]
 8006148:	2284      	movs	r2, #132	; 0x84
 800614a:	0212      	lsls	r2, r2, #8
 800614c:	431a      	orrs	r2, r3
 800614e:	8382      	strh	r2, [r0, #28]
 8006150:	2386      	movs	r3, #134	; 0x86
 8006152:	021b      	lsls	r3, r3, #8
 8006154:	4013      	ands	r3, r2
 8006156:	8bc2      	ldrh	r2, [r0, #30]
 8006158:	0ad2      	lsrs	r2, r2, #11
 800615a:	1c52      	adds	r2, r2, #1
 800615c:	02d2      	lsls	r2, r2, #11
 800615e:	24f0      	movs	r4, #240	; 0xf0
 8006160:	01e4      	lsls	r4, r4, #7
 8006162:	4014      	ands	r4, r2
 8006164:	431c      	orrs	r4, r3
 8006166:	8384      	strh	r4, [r0, #28]
 8006168:	8a43      	ldrh	r3, [r0, #18]
 800616a:	2280      	movs	r2, #128	; 0x80
 800616c:	0212      	lsls	r2, r2, #8
 800616e:	431a      	orrs	r2, r3
 8006170:	0003      	movs	r3, r0
 8006172:	3312      	adds	r3, #18
 8006174:	801a      	strh	r2, [r3, #0]
 8006176:	4c0e      	ldr	r4, [pc, #56]	; (80061b0 <.text_54>)
 8006178:	4014      	ands	r4, r2
 800617a:	2220      	movs	r2, #32
 800617c:	5c82      	ldrb	r2, [r0, r2]
 800617e:	06d2      	lsls	r2, r2, #27
 8006180:	0ed2      	lsrs	r2, r2, #27
 8006182:	4322      	orrs	r2, r4
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2200      	movs	r2, #0
 8006188:	7142      	strb	r2, [r0, #5]
 800618a:	8a43      	ldrh	r3, [r0, #18]
 800618c:	700b      	strb	r3, [r1, #0]
 800618e:	8a43      	ldrh	r3, [r0, #18]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	704b      	strb	r3, [r1, #1]
 8006194:	8b83      	ldrh	r3, [r0, #28]
 8006196:	708b      	strb	r3, [r1, #2]
 8006198:	8b80      	ldrh	r0, [r0, #28]
 800619a:	0a00      	lsrs	r0, r0, #8
 800619c:	70c8      	strb	r0, [r1, #3]
 800619e:	710a      	strb	r2, [r1, #4]
 80061a0:	714a      	strb	r2, [r1, #5]
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <.text_51>:
 80061a4:	20000000 	.word	0x20000000

080061a8 <.text_52>:
 80061a8:	20000548 	.word	0x20000548

080061ac <.text_53>:
 80061ac:	000083ff 	.word	0x000083ff

080061b0 <.text_54>:
 80061b0:	0000ffe0 	.word	0x0000ffe0

080061b4 <.text_55>:
 80061b4:	5f4c5250 	.word	0x5f4c5250
 80061b8:	4e455645 	.word	0x4e455645
 80061bc:	58525f54 	.word	0x58525f54
 80061c0:	5349445f 	.word	0x5349445f
 80061c4:	44524143 	.word	0x44524143
 80061c8:	00004445 	.word	0x00004445

080061cc <strcmp>:
 80061cc:	7802      	ldrb	r2, [r0, #0]
 80061ce:	780b      	ldrb	r3, [r1, #0]
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d003      	beq.n	80061dc <strcmp+0x10>
 80061d4:	3001      	adds	r0, #1
 80061d6:	3101      	adds	r1, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	d0f7      	beq.n	80061cc <strcmp>
 80061dc:	1ad0      	subs	r0, r2, r3
 80061de:	4770      	bx	lr

080061e0 <strlen>:
 80061e0:	2300      	movs	r3, #0
 80061e2:	5cc2      	ldrb	r2, [r0, r3]
 80061e4:	3301      	adds	r3, #1
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d1fb      	bne.n	80061e2 <strlen+0x2>
 80061ea:	1e58      	subs	r0, r3, #1
 80061ec:	4770      	bx	lr
	...

080061f0 <__gnu_thumb1_case_uqi>:
 80061f0:	b402      	push	{r1}
 80061f2:	4671      	mov	r1, lr
 80061f4:	0849      	lsrs	r1, r1, #1
 80061f6:	0049      	lsls	r1, r1, #1
 80061f8:	5c09      	ldrb	r1, [r1, r0]
 80061fa:	0049      	lsls	r1, r1, #1
 80061fc:	448e      	add	lr, r1
 80061fe:	bc02      	pop	{r1}
 8006200:	4770      	bx	lr
 8006202:	46c0      	nop			; (mov r8, r8)

08006204 <__gnu_thumb1_case_shi>:
 8006204:	b403      	push	{r0, r1}
 8006206:	4671      	mov	r1, lr
 8006208:	0849      	lsrs	r1, r1, #1
 800620a:	0040      	lsls	r0, r0, #1
 800620c:	0049      	lsls	r1, r1, #1
 800620e:	5e09      	ldrsh	r1, [r1, r0]
 8006210:	0049      	lsls	r1, r1, #1
 8006212:	448e      	add	lr, r1
 8006214:	bc03      	pop	{r0, r1}
 8006216:	4770      	bx	lr

08006218 <__udivsi3>:
 8006218:	2200      	movs	r2, #0
 800621a:	0843      	lsrs	r3, r0, #1
 800621c:	428b      	cmp	r3, r1
 800621e:	d374      	bcc.n	800630a <__udivsi3+0xf2>
 8006220:	0903      	lsrs	r3, r0, #4
 8006222:	428b      	cmp	r3, r1
 8006224:	d35f      	bcc.n	80062e6 <__udivsi3+0xce>
 8006226:	0a03      	lsrs	r3, r0, #8
 8006228:	428b      	cmp	r3, r1
 800622a:	d344      	bcc.n	80062b6 <__udivsi3+0x9e>
 800622c:	0b03      	lsrs	r3, r0, #12
 800622e:	428b      	cmp	r3, r1
 8006230:	d328      	bcc.n	8006284 <__udivsi3+0x6c>
 8006232:	0c03      	lsrs	r3, r0, #16
 8006234:	428b      	cmp	r3, r1
 8006236:	d30d      	bcc.n	8006254 <__udivsi3+0x3c>
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	0209      	lsls	r1, r1, #8
 800623c:	ba12      	rev	r2, r2
 800623e:	0c03      	lsrs	r3, r0, #16
 8006240:	428b      	cmp	r3, r1
 8006242:	d302      	bcc.n	800624a <__udivsi3+0x32>
 8006244:	1212      	asrs	r2, r2, #8
 8006246:	0209      	lsls	r1, r1, #8
 8006248:	d065      	beq.n	8006316 <__udivsi3+0xfe>
 800624a:	0b03      	lsrs	r3, r0, #12
 800624c:	428b      	cmp	r3, r1
 800624e:	d319      	bcc.n	8006284 <__udivsi3+0x6c>
 8006250:	e000      	b.n	8006254 <__udivsi3+0x3c>
 8006252:	0a09      	lsrs	r1, r1, #8
 8006254:	0bc3      	lsrs	r3, r0, #15
 8006256:	428b      	cmp	r3, r1
 8006258:	d301      	bcc.n	800625e <__udivsi3+0x46>
 800625a:	03cb      	lsls	r3, r1, #15
 800625c:	1ac0      	subs	r0, r0, r3
 800625e:	4152      	adcs	r2, r2
 8006260:	0b83      	lsrs	r3, r0, #14
 8006262:	428b      	cmp	r3, r1
 8006264:	d301      	bcc.n	800626a <__udivsi3+0x52>
 8006266:	038b      	lsls	r3, r1, #14
 8006268:	1ac0      	subs	r0, r0, r3
 800626a:	4152      	adcs	r2, r2
 800626c:	0b43      	lsrs	r3, r0, #13
 800626e:	428b      	cmp	r3, r1
 8006270:	d301      	bcc.n	8006276 <__udivsi3+0x5e>
 8006272:	034b      	lsls	r3, r1, #13
 8006274:	1ac0      	subs	r0, r0, r3
 8006276:	4152      	adcs	r2, r2
 8006278:	0b03      	lsrs	r3, r0, #12
 800627a:	428b      	cmp	r3, r1
 800627c:	d301      	bcc.n	8006282 <__udivsi3+0x6a>
 800627e:	030b      	lsls	r3, r1, #12
 8006280:	1ac0      	subs	r0, r0, r3
 8006282:	4152      	adcs	r2, r2
 8006284:	0ac3      	lsrs	r3, r0, #11
 8006286:	428b      	cmp	r3, r1
 8006288:	d301      	bcc.n	800628e <__udivsi3+0x76>
 800628a:	02cb      	lsls	r3, r1, #11
 800628c:	1ac0      	subs	r0, r0, r3
 800628e:	4152      	adcs	r2, r2
 8006290:	0a83      	lsrs	r3, r0, #10
 8006292:	428b      	cmp	r3, r1
 8006294:	d301      	bcc.n	800629a <__udivsi3+0x82>
 8006296:	028b      	lsls	r3, r1, #10
 8006298:	1ac0      	subs	r0, r0, r3
 800629a:	4152      	adcs	r2, r2
 800629c:	0a43      	lsrs	r3, r0, #9
 800629e:	428b      	cmp	r3, r1
 80062a0:	d301      	bcc.n	80062a6 <__udivsi3+0x8e>
 80062a2:	024b      	lsls	r3, r1, #9
 80062a4:	1ac0      	subs	r0, r0, r3
 80062a6:	4152      	adcs	r2, r2
 80062a8:	0a03      	lsrs	r3, r0, #8
 80062aa:	428b      	cmp	r3, r1
 80062ac:	d301      	bcc.n	80062b2 <__udivsi3+0x9a>
 80062ae:	020b      	lsls	r3, r1, #8
 80062b0:	1ac0      	subs	r0, r0, r3
 80062b2:	4152      	adcs	r2, r2
 80062b4:	d2cd      	bcs.n	8006252 <__udivsi3+0x3a>
 80062b6:	09c3      	lsrs	r3, r0, #7
 80062b8:	428b      	cmp	r3, r1
 80062ba:	d301      	bcc.n	80062c0 <__udivsi3+0xa8>
 80062bc:	01cb      	lsls	r3, r1, #7
 80062be:	1ac0      	subs	r0, r0, r3
 80062c0:	4152      	adcs	r2, r2
 80062c2:	0983      	lsrs	r3, r0, #6
 80062c4:	428b      	cmp	r3, r1
 80062c6:	d301      	bcc.n	80062cc <__udivsi3+0xb4>
 80062c8:	018b      	lsls	r3, r1, #6
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	4152      	adcs	r2, r2
 80062ce:	0943      	lsrs	r3, r0, #5
 80062d0:	428b      	cmp	r3, r1
 80062d2:	d301      	bcc.n	80062d8 <__udivsi3+0xc0>
 80062d4:	014b      	lsls	r3, r1, #5
 80062d6:	1ac0      	subs	r0, r0, r3
 80062d8:	4152      	adcs	r2, r2
 80062da:	0903      	lsrs	r3, r0, #4
 80062dc:	428b      	cmp	r3, r1
 80062de:	d301      	bcc.n	80062e4 <__udivsi3+0xcc>
 80062e0:	010b      	lsls	r3, r1, #4
 80062e2:	1ac0      	subs	r0, r0, r3
 80062e4:	4152      	adcs	r2, r2
 80062e6:	08c3      	lsrs	r3, r0, #3
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d301      	bcc.n	80062f0 <__udivsi3+0xd8>
 80062ec:	00cb      	lsls	r3, r1, #3
 80062ee:	1ac0      	subs	r0, r0, r3
 80062f0:	4152      	adcs	r2, r2
 80062f2:	0883      	lsrs	r3, r0, #2
 80062f4:	428b      	cmp	r3, r1
 80062f6:	d301      	bcc.n	80062fc <__udivsi3+0xe4>
 80062f8:	008b      	lsls	r3, r1, #2
 80062fa:	1ac0      	subs	r0, r0, r3
 80062fc:	4152      	adcs	r2, r2
 80062fe:	0843      	lsrs	r3, r0, #1
 8006300:	428b      	cmp	r3, r1
 8006302:	d301      	bcc.n	8006308 <__udivsi3+0xf0>
 8006304:	004b      	lsls	r3, r1, #1
 8006306:	1ac0      	subs	r0, r0, r3
 8006308:	4152      	adcs	r2, r2
 800630a:	1a41      	subs	r1, r0, r1
 800630c:	d200      	bcs.n	8006310 <__udivsi3+0xf8>
 800630e:	4601      	mov	r1, r0
 8006310:	4152      	adcs	r2, r2
 8006312:	4610      	mov	r0, r2
 8006314:	4770      	bx	lr
 8006316:	e7ff      	b.n	8006318 <__udivsi3+0x100>
 8006318:	b501      	push	{r0, lr}
 800631a:	2000      	movs	r0, #0
 800631c:	f000 f8f0 	bl	8006500 <__aeabi_idiv0>
 8006320:	bd02      	pop	{r1, pc}
 8006322:	46c0      	nop			; (mov r8, r8)

08006324 <__aeabi_uidivmod>:
 8006324:	2900      	cmp	r1, #0
 8006326:	d0f7      	beq.n	8006318 <__udivsi3+0x100>
 8006328:	e776      	b.n	8006218 <__udivsi3>
 800632a:	4770      	bx	lr

0800632c <__divsi3>:
 800632c:	4603      	mov	r3, r0
 800632e:	430b      	orrs	r3, r1
 8006330:	d47f      	bmi.n	8006432 <__divsi3+0x106>
 8006332:	2200      	movs	r2, #0
 8006334:	0843      	lsrs	r3, r0, #1
 8006336:	428b      	cmp	r3, r1
 8006338:	d374      	bcc.n	8006424 <__divsi3+0xf8>
 800633a:	0903      	lsrs	r3, r0, #4
 800633c:	428b      	cmp	r3, r1
 800633e:	d35f      	bcc.n	8006400 <__divsi3+0xd4>
 8006340:	0a03      	lsrs	r3, r0, #8
 8006342:	428b      	cmp	r3, r1
 8006344:	d344      	bcc.n	80063d0 <__divsi3+0xa4>
 8006346:	0b03      	lsrs	r3, r0, #12
 8006348:	428b      	cmp	r3, r1
 800634a:	d328      	bcc.n	800639e <__divsi3+0x72>
 800634c:	0c03      	lsrs	r3, r0, #16
 800634e:	428b      	cmp	r3, r1
 8006350:	d30d      	bcc.n	800636e <__divsi3+0x42>
 8006352:	22ff      	movs	r2, #255	; 0xff
 8006354:	0209      	lsls	r1, r1, #8
 8006356:	ba12      	rev	r2, r2
 8006358:	0c03      	lsrs	r3, r0, #16
 800635a:	428b      	cmp	r3, r1
 800635c:	d302      	bcc.n	8006364 <__divsi3+0x38>
 800635e:	1212      	asrs	r2, r2, #8
 8006360:	0209      	lsls	r1, r1, #8
 8006362:	d065      	beq.n	8006430 <__divsi3+0x104>
 8006364:	0b03      	lsrs	r3, r0, #12
 8006366:	428b      	cmp	r3, r1
 8006368:	d319      	bcc.n	800639e <__divsi3+0x72>
 800636a:	e000      	b.n	800636e <__divsi3+0x42>
 800636c:	0a09      	lsrs	r1, r1, #8
 800636e:	0bc3      	lsrs	r3, r0, #15
 8006370:	428b      	cmp	r3, r1
 8006372:	d301      	bcc.n	8006378 <__divsi3+0x4c>
 8006374:	03cb      	lsls	r3, r1, #15
 8006376:	1ac0      	subs	r0, r0, r3
 8006378:	4152      	adcs	r2, r2
 800637a:	0b83      	lsrs	r3, r0, #14
 800637c:	428b      	cmp	r3, r1
 800637e:	d301      	bcc.n	8006384 <__divsi3+0x58>
 8006380:	038b      	lsls	r3, r1, #14
 8006382:	1ac0      	subs	r0, r0, r3
 8006384:	4152      	adcs	r2, r2
 8006386:	0b43      	lsrs	r3, r0, #13
 8006388:	428b      	cmp	r3, r1
 800638a:	d301      	bcc.n	8006390 <__divsi3+0x64>
 800638c:	034b      	lsls	r3, r1, #13
 800638e:	1ac0      	subs	r0, r0, r3
 8006390:	4152      	adcs	r2, r2
 8006392:	0b03      	lsrs	r3, r0, #12
 8006394:	428b      	cmp	r3, r1
 8006396:	d301      	bcc.n	800639c <__divsi3+0x70>
 8006398:	030b      	lsls	r3, r1, #12
 800639a:	1ac0      	subs	r0, r0, r3
 800639c:	4152      	adcs	r2, r2
 800639e:	0ac3      	lsrs	r3, r0, #11
 80063a0:	428b      	cmp	r3, r1
 80063a2:	d301      	bcc.n	80063a8 <__divsi3+0x7c>
 80063a4:	02cb      	lsls	r3, r1, #11
 80063a6:	1ac0      	subs	r0, r0, r3
 80063a8:	4152      	adcs	r2, r2
 80063aa:	0a83      	lsrs	r3, r0, #10
 80063ac:	428b      	cmp	r3, r1
 80063ae:	d301      	bcc.n	80063b4 <__divsi3+0x88>
 80063b0:	028b      	lsls	r3, r1, #10
 80063b2:	1ac0      	subs	r0, r0, r3
 80063b4:	4152      	adcs	r2, r2
 80063b6:	0a43      	lsrs	r3, r0, #9
 80063b8:	428b      	cmp	r3, r1
 80063ba:	d301      	bcc.n	80063c0 <__divsi3+0x94>
 80063bc:	024b      	lsls	r3, r1, #9
 80063be:	1ac0      	subs	r0, r0, r3
 80063c0:	4152      	adcs	r2, r2
 80063c2:	0a03      	lsrs	r3, r0, #8
 80063c4:	428b      	cmp	r3, r1
 80063c6:	d301      	bcc.n	80063cc <__divsi3+0xa0>
 80063c8:	020b      	lsls	r3, r1, #8
 80063ca:	1ac0      	subs	r0, r0, r3
 80063cc:	4152      	adcs	r2, r2
 80063ce:	d2cd      	bcs.n	800636c <__divsi3+0x40>
 80063d0:	09c3      	lsrs	r3, r0, #7
 80063d2:	428b      	cmp	r3, r1
 80063d4:	d301      	bcc.n	80063da <__divsi3+0xae>
 80063d6:	01cb      	lsls	r3, r1, #7
 80063d8:	1ac0      	subs	r0, r0, r3
 80063da:	4152      	adcs	r2, r2
 80063dc:	0983      	lsrs	r3, r0, #6
 80063de:	428b      	cmp	r3, r1
 80063e0:	d301      	bcc.n	80063e6 <__divsi3+0xba>
 80063e2:	018b      	lsls	r3, r1, #6
 80063e4:	1ac0      	subs	r0, r0, r3
 80063e6:	4152      	adcs	r2, r2
 80063e8:	0943      	lsrs	r3, r0, #5
 80063ea:	428b      	cmp	r3, r1
 80063ec:	d301      	bcc.n	80063f2 <__divsi3+0xc6>
 80063ee:	014b      	lsls	r3, r1, #5
 80063f0:	1ac0      	subs	r0, r0, r3
 80063f2:	4152      	adcs	r2, r2
 80063f4:	0903      	lsrs	r3, r0, #4
 80063f6:	428b      	cmp	r3, r1
 80063f8:	d301      	bcc.n	80063fe <__divsi3+0xd2>
 80063fa:	010b      	lsls	r3, r1, #4
 80063fc:	1ac0      	subs	r0, r0, r3
 80063fe:	4152      	adcs	r2, r2
 8006400:	08c3      	lsrs	r3, r0, #3
 8006402:	428b      	cmp	r3, r1
 8006404:	d301      	bcc.n	800640a <__divsi3+0xde>
 8006406:	00cb      	lsls	r3, r1, #3
 8006408:	1ac0      	subs	r0, r0, r3
 800640a:	4152      	adcs	r2, r2
 800640c:	0883      	lsrs	r3, r0, #2
 800640e:	428b      	cmp	r3, r1
 8006410:	d301      	bcc.n	8006416 <__divsi3+0xea>
 8006412:	008b      	lsls	r3, r1, #2
 8006414:	1ac0      	subs	r0, r0, r3
 8006416:	4152      	adcs	r2, r2
 8006418:	0843      	lsrs	r3, r0, #1
 800641a:	428b      	cmp	r3, r1
 800641c:	d301      	bcc.n	8006422 <__divsi3+0xf6>
 800641e:	004b      	lsls	r3, r1, #1
 8006420:	1ac0      	subs	r0, r0, r3
 8006422:	4152      	adcs	r2, r2
 8006424:	1a41      	subs	r1, r0, r1
 8006426:	d200      	bcs.n	800642a <__divsi3+0xfe>
 8006428:	4601      	mov	r1, r0
 800642a:	4152      	adcs	r2, r2
 800642c:	4610      	mov	r0, r2
 800642e:	4770      	bx	lr
 8006430:	e05d      	b.n	80064ee <__divsi3+0x1c2>
 8006432:	0fca      	lsrs	r2, r1, #31
 8006434:	d000      	beq.n	8006438 <__divsi3+0x10c>
 8006436:	4249      	negs	r1, r1
 8006438:	1003      	asrs	r3, r0, #32
 800643a:	d300      	bcc.n	800643e <__divsi3+0x112>
 800643c:	4240      	negs	r0, r0
 800643e:	4053      	eors	r3, r2
 8006440:	2200      	movs	r2, #0
 8006442:	469c      	mov	ip, r3
 8006444:	0903      	lsrs	r3, r0, #4
 8006446:	428b      	cmp	r3, r1
 8006448:	d32d      	bcc.n	80064a6 <__divsi3+0x17a>
 800644a:	0a03      	lsrs	r3, r0, #8
 800644c:	428b      	cmp	r3, r1
 800644e:	d312      	bcc.n	8006476 <__divsi3+0x14a>
 8006450:	22fc      	movs	r2, #252	; 0xfc
 8006452:	0189      	lsls	r1, r1, #6
 8006454:	ba12      	rev	r2, r2
 8006456:	0a03      	lsrs	r3, r0, #8
 8006458:	428b      	cmp	r3, r1
 800645a:	d30c      	bcc.n	8006476 <__divsi3+0x14a>
 800645c:	0189      	lsls	r1, r1, #6
 800645e:	1192      	asrs	r2, r2, #6
 8006460:	428b      	cmp	r3, r1
 8006462:	d308      	bcc.n	8006476 <__divsi3+0x14a>
 8006464:	0189      	lsls	r1, r1, #6
 8006466:	1192      	asrs	r2, r2, #6
 8006468:	428b      	cmp	r3, r1
 800646a:	d304      	bcc.n	8006476 <__divsi3+0x14a>
 800646c:	0189      	lsls	r1, r1, #6
 800646e:	d03a      	beq.n	80064e6 <__divsi3+0x1ba>
 8006470:	1192      	asrs	r2, r2, #6
 8006472:	e000      	b.n	8006476 <__divsi3+0x14a>
 8006474:	0989      	lsrs	r1, r1, #6
 8006476:	09c3      	lsrs	r3, r0, #7
 8006478:	428b      	cmp	r3, r1
 800647a:	d301      	bcc.n	8006480 <__divsi3+0x154>
 800647c:	01cb      	lsls	r3, r1, #7
 800647e:	1ac0      	subs	r0, r0, r3
 8006480:	4152      	adcs	r2, r2
 8006482:	0983      	lsrs	r3, r0, #6
 8006484:	428b      	cmp	r3, r1
 8006486:	d301      	bcc.n	800648c <__divsi3+0x160>
 8006488:	018b      	lsls	r3, r1, #6
 800648a:	1ac0      	subs	r0, r0, r3
 800648c:	4152      	adcs	r2, r2
 800648e:	0943      	lsrs	r3, r0, #5
 8006490:	428b      	cmp	r3, r1
 8006492:	d301      	bcc.n	8006498 <__divsi3+0x16c>
 8006494:	014b      	lsls	r3, r1, #5
 8006496:	1ac0      	subs	r0, r0, r3
 8006498:	4152      	adcs	r2, r2
 800649a:	0903      	lsrs	r3, r0, #4
 800649c:	428b      	cmp	r3, r1
 800649e:	d301      	bcc.n	80064a4 <__divsi3+0x178>
 80064a0:	010b      	lsls	r3, r1, #4
 80064a2:	1ac0      	subs	r0, r0, r3
 80064a4:	4152      	adcs	r2, r2
 80064a6:	08c3      	lsrs	r3, r0, #3
 80064a8:	428b      	cmp	r3, r1
 80064aa:	d301      	bcc.n	80064b0 <__divsi3+0x184>
 80064ac:	00cb      	lsls	r3, r1, #3
 80064ae:	1ac0      	subs	r0, r0, r3
 80064b0:	4152      	adcs	r2, r2
 80064b2:	0883      	lsrs	r3, r0, #2
 80064b4:	428b      	cmp	r3, r1
 80064b6:	d301      	bcc.n	80064bc <__divsi3+0x190>
 80064b8:	008b      	lsls	r3, r1, #2
 80064ba:	1ac0      	subs	r0, r0, r3
 80064bc:	4152      	adcs	r2, r2
 80064be:	d2d9      	bcs.n	8006474 <__divsi3+0x148>
 80064c0:	0843      	lsrs	r3, r0, #1
 80064c2:	428b      	cmp	r3, r1
 80064c4:	d301      	bcc.n	80064ca <__divsi3+0x19e>
 80064c6:	004b      	lsls	r3, r1, #1
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	4152      	adcs	r2, r2
 80064cc:	1a41      	subs	r1, r0, r1
 80064ce:	d200      	bcs.n	80064d2 <__divsi3+0x1a6>
 80064d0:	4601      	mov	r1, r0
 80064d2:	4663      	mov	r3, ip
 80064d4:	4152      	adcs	r2, r2
 80064d6:	105b      	asrs	r3, r3, #1
 80064d8:	4610      	mov	r0, r2
 80064da:	d301      	bcc.n	80064e0 <__divsi3+0x1b4>
 80064dc:	4240      	negs	r0, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d500      	bpl.n	80064e4 <__divsi3+0x1b8>
 80064e2:	4249      	negs	r1, r1
 80064e4:	4770      	bx	lr
 80064e6:	4663      	mov	r3, ip
 80064e8:	105b      	asrs	r3, r3, #1
 80064ea:	d300      	bcc.n	80064ee <__divsi3+0x1c2>
 80064ec:	4240      	negs	r0, r0
 80064ee:	b501      	push	{r0, lr}
 80064f0:	2000      	movs	r0, #0
 80064f2:	f000 f805 	bl	8006500 <__aeabi_idiv0>
 80064f6:	bd02      	pop	{r1, pc}

080064f8 <__aeabi_idivmod>:
 80064f8:	2900      	cmp	r1, #0
 80064fa:	d0f8      	beq.n	80064ee <__divsi3+0x1c2>
 80064fc:	e716      	b.n	800632c <__divsi3>
 80064fe:	4770      	bx	lr

08006500 <__aeabi_idiv0>:
 8006500:	4770      	bx	lr
 8006502:	46c0      	nop			; (mov r8, r8)

08006504 <__aeabi_cdrcmple>:
 8006504:	4684      	mov	ip, r0
 8006506:	0010      	movs	r0, r2
 8006508:	4662      	mov	r2, ip
 800650a:	468c      	mov	ip, r1
 800650c:	0019      	movs	r1, r3
 800650e:	4663      	mov	r3, ip
 8006510:	e000      	b.n	8006514 <__aeabi_cdcmpeq>
 8006512:	46c0      	nop			; (mov r8, r8)

08006514 <__aeabi_cdcmpeq>:
 8006514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006516:	f001 f885 	bl	8007624 <__ledf2>
 800651a:	2800      	cmp	r0, #0
 800651c:	d401      	bmi.n	8006522 <__aeabi_cdcmpeq+0xe>
 800651e:	2100      	movs	r1, #0
 8006520:	42c8      	cmn	r0, r1
 8006522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08006524 <__aeabi_dcmpeq>:
 8006524:	b510      	push	{r4, lr}
 8006526:	f000 ffd5 	bl	80074d4 <__eqdf2>
 800652a:	4240      	negs	r0, r0
 800652c:	3001      	adds	r0, #1
 800652e:	bd10      	pop	{r4, pc}

08006530 <__aeabi_dcmplt>:
 8006530:	b510      	push	{r4, lr}
 8006532:	f001 f877 	bl	8007624 <__ledf2>
 8006536:	2800      	cmp	r0, #0
 8006538:	db01      	blt.n	800653e <__aeabi_dcmplt+0xe>
 800653a:	2000      	movs	r0, #0
 800653c:	bd10      	pop	{r4, pc}
 800653e:	2001      	movs	r0, #1
 8006540:	bd10      	pop	{r4, pc}
 8006542:	46c0      	nop			; (mov r8, r8)

08006544 <__aeabi_dcmple>:
 8006544:	b510      	push	{r4, lr}
 8006546:	f001 f86d 	bl	8007624 <__ledf2>
 800654a:	2800      	cmp	r0, #0
 800654c:	dd01      	ble.n	8006552 <__aeabi_dcmple+0xe>
 800654e:	2000      	movs	r0, #0
 8006550:	bd10      	pop	{r4, pc}
 8006552:	2001      	movs	r0, #1
 8006554:	bd10      	pop	{r4, pc}
 8006556:	46c0      	nop			; (mov r8, r8)

08006558 <__aeabi_dcmpgt>:
 8006558:	b510      	push	{r4, lr}
 800655a:	f000 fffd 	bl	8007558 <__gedf2>
 800655e:	2800      	cmp	r0, #0
 8006560:	dc01      	bgt.n	8006566 <__aeabi_dcmpgt+0xe>
 8006562:	2000      	movs	r0, #0
 8006564:	bd10      	pop	{r4, pc}
 8006566:	2001      	movs	r0, #1
 8006568:	bd10      	pop	{r4, pc}
 800656a:	46c0      	nop			; (mov r8, r8)

0800656c <__aeabi_dcmpge>:
 800656c:	b510      	push	{r4, lr}
 800656e:	f000 fff3 	bl	8007558 <__gedf2>
 8006572:	2800      	cmp	r0, #0
 8006574:	da01      	bge.n	800657a <__aeabi_dcmpge+0xe>
 8006576:	2000      	movs	r0, #0
 8006578:	bd10      	pop	{r4, pc}
 800657a:	2001      	movs	r0, #1
 800657c:	bd10      	pop	{r4, pc}
 800657e:	46c0      	nop			; (mov r8, r8)

08006580 <__aeabi_uldivmod>:
 8006580:	2b00      	cmp	r3, #0
 8006582:	d111      	bne.n	80065a8 <__aeabi_uldivmod+0x28>
 8006584:	2a00      	cmp	r2, #0
 8006586:	d10f      	bne.n	80065a8 <__aeabi_uldivmod+0x28>
 8006588:	2900      	cmp	r1, #0
 800658a:	d100      	bne.n	800658e <__aeabi_uldivmod+0xe>
 800658c:	2800      	cmp	r0, #0
 800658e:	d002      	beq.n	8006596 <__aeabi_uldivmod+0x16>
 8006590:	2100      	movs	r1, #0
 8006592:	43c9      	mvns	r1, r1
 8006594:	0008      	movs	r0, r1
 8006596:	b407      	push	{r0, r1, r2}
 8006598:	4802      	ldr	r0, [pc, #8]	; (80065a4 <__aeabi_uldivmod+0x24>)
 800659a:	a102      	add	r1, pc, #8	; (adr r1, 80065a4 <__aeabi_uldivmod+0x24>)
 800659c:	1840      	adds	r0, r0, r1
 800659e:	9002      	str	r0, [sp, #8]
 80065a0:	bd03      	pop	{r0, r1, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	ffffff5d 	.word	0xffffff5d
 80065a8:	b403      	push	{r0, r1}
 80065aa:	4668      	mov	r0, sp
 80065ac:	b501      	push	{r0, lr}
 80065ae:	9802      	ldr	r0, [sp, #8]
 80065b0:	f000 f876 	bl	80066a0 <__udivmoddi4>
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	469e      	mov	lr, r3
 80065b8:	b002      	add	sp, #8
 80065ba:	bc0c      	pop	{r2, r3}
 80065bc:	4770      	bx	lr
 80065be:	46c0      	nop			; (mov r8, r8)

080065c0 <__aeabi_d2uiz>:
 80065c0:	b570      	push	{r4, r5, r6, lr}
 80065c2:	2200      	movs	r2, #0
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <__aeabi_d2uiz+0x38>)
 80065c6:	0004      	movs	r4, r0
 80065c8:	000d      	movs	r5, r1
 80065ca:	f7ff ffcf 	bl	800656c <__aeabi_dcmpge>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d104      	bne.n	80065dc <__aeabi_d2uiz+0x1c>
 80065d2:	0020      	movs	r0, r4
 80065d4:	0029      	movs	r1, r5
 80065d6:	f001 fecd 	bl	8008374 <__aeabi_d2iz>
 80065da:	bd70      	pop	{r4, r5, r6, pc}
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <__aeabi_d2uiz+0x38>)
 80065de:	2200      	movs	r2, #0
 80065e0:	0020      	movs	r0, r4
 80065e2:	0029      	movs	r1, r5
 80065e4:	f001 fb44 	bl	8007c70 <__aeabi_dsub>
 80065e8:	f001 fec4 	bl	8008374 <__aeabi_d2iz>
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	061b      	lsls	r3, r3, #24
 80065f0:	469c      	mov	ip, r3
 80065f2:	4460      	add	r0, ip
 80065f4:	e7f1      	b.n	80065da <__aeabi_d2uiz+0x1a>
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	41e00000 	.word	0x41e00000

080065fc <__aeabi_d2lz>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	0005      	movs	r5, r0
 8006600:	000c      	movs	r4, r1
 8006602:	2200      	movs	r2, #0
 8006604:	2300      	movs	r3, #0
 8006606:	0028      	movs	r0, r5
 8006608:	0021      	movs	r1, r4
 800660a:	f7ff ff91 	bl	8006530 <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d108      	bne.n	8006624 <__aeabi_d2lz+0x28>
 8006612:	0028      	movs	r0, r5
 8006614:	0021      	movs	r1, r4
 8006616:	f000 f80f 	bl	8006638 <__aeabi_d2ulz>
 800661a:	0002      	movs	r2, r0
 800661c:	000b      	movs	r3, r1
 800661e:	0010      	movs	r0, r2
 8006620:	0019      	movs	r1, r3
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	2380      	movs	r3, #128	; 0x80
 8006626:	061b      	lsls	r3, r3, #24
 8006628:	18e1      	adds	r1, r4, r3
 800662a:	0028      	movs	r0, r5
 800662c:	f000 f804 	bl	8006638 <__aeabi_d2ulz>
 8006630:	2300      	movs	r3, #0
 8006632:	4242      	negs	r2, r0
 8006634:	418b      	sbcs	r3, r1
 8006636:	e7f2      	b.n	800661e <__aeabi_d2lz+0x22>

08006638 <__aeabi_d2ulz>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	2200      	movs	r2, #0
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <__aeabi_d2ulz+0x34>)
 800663e:	000d      	movs	r5, r1
 8006640:	0004      	movs	r4, r0
 8006642:	f001 f853 	bl	80076ec <__aeabi_dmul>
 8006646:	f7ff ffbb 	bl	80065c0 <__aeabi_d2uiz>
 800664a:	0006      	movs	r6, r0
 800664c:	f001 fef8 	bl	8008440 <__aeabi_ui2d>
 8006650:	2200      	movs	r2, #0
 8006652:	4b07      	ldr	r3, [pc, #28]	; (8006670 <__aeabi_d2ulz+0x38>)
 8006654:	f001 f84a 	bl	80076ec <__aeabi_dmul>
 8006658:	0002      	movs	r2, r0
 800665a:	000b      	movs	r3, r1
 800665c:	0020      	movs	r0, r4
 800665e:	0029      	movs	r1, r5
 8006660:	f001 fb06 	bl	8007c70 <__aeabi_dsub>
 8006664:	f7ff ffac 	bl	80065c0 <__aeabi_d2uiz>
 8006668:	0031      	movs	r1, r6
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	3df00000 	.word	0x3df00000
 8006670:	41f00000 	.word	0x41f00000

08006674 <__aeabi_l2d>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	0006      	movs	r6, r0
 8006678:	0008      	movs	r0, r1
 800667a:	f001 feb1 	bl	80083e0 <__aeabi_i2d>
 800667e:	2200      	movs	r2, #0
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <__aeabi_l2d+0x28>)
 8006682:	f001 f833 	bl	80076ec <__aeabi_dmul>
 8006686:	000d      	movs	r5, r1
 8006688:	0004      	movs	r4, r0
 800668a:	0030      	movs	r0, r6
 800668c:	f001 fed8 	bl	8008440 <__aeabi_ui2d>
 8006690:	002b      	movs	r3, r5
 8006692:	0022      	movs	r2, r4
 8006694:	f000 f8d0 	bl	8006838 <__aeabi_dadd>
 8006698:	bd70      	pop	{r4, r5, r6, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	41f00000 	.word	0x41f00000

080066a0 <__udivmoddi4>:
 80066a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a2:	4657      	mov	r7, sl
 80066a4:	464e      	mov	r6, r9
 80066a6:	4645      	mov	r5, r8
 80066a8:	46de      	mov	lr, fp
 80066aa:	b5e0      	push	{r5, r6, r7, lr}
 80066ac:	0004      	movs	r4, r0
 80066ae:	000d      	movs	r5, r1
 80066b0:	4692      	mov	sl, r2
 80066b2:	4699      	mov	r9, r3
 80066b4:	b083      	sub	sp, #12
 80066b6:	428b      	cmp	r3, r1
 80066b8:	d830      	bhi.n	800671c <__udivmoddi4+0x7c>
 80066ba:	d02d      	beq.n	8006718 <__udivmoddi4+0x78>
 80066bc:	4649      	mov	r1, r9
 80066be:	4650      	mov	r0, sl
 80066c0:	f001 ff02 	bl	80084c8 <__clzdi2>
 80066c4:	0029      	movs	r1, r5
 80066c6:	0006      	movs	r6, r0
 80066c8:	0020      	movs	r0, r4
 80066ca:	f001 fefd 	bl	80084c8 <__clzdi2>
 80066ce:	1a33      	subs	r3, r6, r0
 80066d0:	4698      	mov	r8, r3
 80066d2:	3b20      	subs	r3, #32
 80066d4:	d434      	bmi.n	8006740 <__udivmoddi4+0xa0>
 80066d6:	469b      	mov	fp, r3
 80066d8:	4653      	mov	r3, sl
 80066da:	465a      	mov	r2, fp
 80066dc:	4093      	lsls	r3, r2
 80066de:	4642      	mov	r2, r8
 80066e0:	001f      	movs	r7, r3
 80066e2:	4653      	mov	r3, sl
 80066e4:	4093      	lsls	r3, r2
 80066e6:	001e      	movs	r6, r3
 80066e8:	42af      	cmp	r7, r5
 80066ea:	d83b      	bhi.n	8006764 <__udivmoddi4+0xc4>
 80066ec:	42af      	cmp	r7, r5
 80066ee:	d100      	bne.n	80066f2 <__udivmoddi4+0x52>
 80066f0:	e079      	b.n	80067e6 <__udivmoddi4+0x146>
 80066f2:	465b      	mov	r3, fp
 80066f4:	1ba4      	subs	r4, r4, r6
 80066f6:	41bd      	sbcs	r5, r7
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da00      	bge.n	80066fe <__udivmoddi4+0x5e>
 80066fc:	e076      	b.n	80067ec <__udivmoddi4+0x14c>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	9200      	str	r2, [sp, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	2301      	movs	r3, #1
 8006708:	465a      	mov	r2, fp
 800670a:	4093      	lsls	r3, r2
 800670c:	9301      	str	r3, [sp, #4]
 800670e:	2301      	movs	r3, #1
 8006710:	4642      	mov	r2, r8
 8006712:	4093      	lsls	r3, r2
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	e029      	b.n	800676c <__udivmoddi4+0xcc>
 8006718:	4282      	cmp	r2, r0
 800671a:	d9cf      	bls.n	80066bc <__udivmoddi4+0x1c>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	9200      	str	r2, [sp, #0]
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <__udivmoddi4+0x8e>
 800672a:	601c      	str	r4, [r3, #0]
 800672c:	605d      	str	r5, [r3, #4]
 800672e:	9800      	ldr	r0, [sp, #0]
 8006730:	9901      	ldr	r1, [sp, #4]
 8006732:	b003      	add	sp, #12
 8006734:	bcf0      	pop	{r4, r5, r6, r7}
 8006736:	46bb      	mov	fp, r7
 8006738:	46b2      	mov	sl, r6
 800673a:	46a9      	mov	r9, r5
 800673c:	46a0      	mov	r8, r4
 800673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006740:	4642      	mov	r2, r8
 8006742:	469b      	mov	fp, r3
 8006744:	2320      	movs	r3, #32
 8006746:	1a9b      	subs	r3, r3, r2
 8006748:	4652      	mov	r2, sl
 800674a:	40da      	lsrs	r2, r3
 800674c:	4641      	mov	r1, r8
 800674e:	0013      	movs	r3, r2
 8006750:	464a      	mov	r2, r9
 8006752:	408a      	lsls	r2, r1
 8006754:	0017      	movs	r7, r2
 8006756:	4642      	mov	r2, r8
 8006758:	431f      	orrs	r7, r3
 800675a:	4653      	mov	r3, sl
 800675c:	4093      	lsls	r3, r2
 800675e:	001e      	movs	r6, r3
 8006760:	42af      	cmp	r7, r5
 8006762:	d9c3      	bls.n	80066ec <__udivmoddi4+0x4c>
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	9200      	str	r2, [sp, #0]
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	4643      	mov	r3, r8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0d8      	beq.n	8006724 <__udivmoddi4+0x84>
 8006772:	07fb      	lsls	r3, r7, #31
 8006774:	0872      	lsrs	r2, r6, #1
 8006776:	431a      	orrs	r2, r3
 8006778:	4646      	mov	r6, r8
 800677a:	087b      	lsrs	r3, r7, #1
 800677c:	e00e      	b.n	800679c <__udivmoddi4+0xfc>
 800677e:	42ab      	cmp	r3, r5
 8006780:	d101      	bne.n	8006786 <__udivmoddi4+0xe6>
 8006782:	42a2      	cmp	r2, r4
 8006784:	d80c      	bhi.n	80067a0 <__udivmoddi4+0x100>
 8006786:	1aa4      	subs	r4, r4, r2
 8006788:	419d      	sbcs	r5, r3
 800678a:	2001      	movs	r0, #1
 800678c:	1924      	adds	r4, r4, r4
 800678e:	416d      	adcs	r5, r5
 8006790:	2100      	movs	r1, #0
 8006792:	3e01      	subs	r6, #1
 8006794:	1824      	adds	r4, r4, r0
 8006796:	414d      	adcs	r5, r1
 8006798:	2e00      	cmp	r6, #0
 800679a:	d006      	beq.n	80067aa <__udivmoddi4+0x10a>
 800679c:	42ab      	cmp	r3, r5
 800679e:	d9ee      	bls.n	800677e <__udivmoddi4+0xde>
 80067a0:	3e01      	subs	r6, #1
 80067a2:	1924      	adds	r4, r4, r4
 80067a4:	416d      	adcs	r5, r5
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d1f8      	bne.n	800679c <__udivmoddi4+0xfc>
 80067aa:	9800      	ldr	r0, [sp, #0]
 80067ac:	9901      	ldr	r1, [sp, #4]
 80067ae:	465b      	mov	r3, fp
 80067b0:	1900      	adds	r0, r0, r4
 80067b2:	4169      	adcs	r1, r5
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db24      	blt.n	8006802 <__udivmoddi4+0x162>
 80067b8:	002b      	movs	r3, r5
 80067ba:	465a      	mov	r2, fp
 80067bc:	4644      	mov	r4, r8
 80067be:	40d3      	lsrs	r3, r2
 80067c0:	002a      	movs	r2, r5
 80067c2:	40e2      	lsrs	r2, r4
 80067c4:	001c      	movs	r4, r3
 80067c6:	465b      	mov	r3, fp
 80067c8:	0015      	movs	r5, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	db2a      	blt.n	8006824 <__udivmoddi4+0x184>
 80067ce:	0026      	movs	r6, r4
 80067d0:	409e      	lsls	r6, r3
 80067d2:	0033      	movs	r3, r6
 80067d4:	0026      	movs	r6, r4
 80067d6:	4647      	mov	r7, r8
 80067d8:	40be      	lsls	r6, r7
 80067da:	0032      	movs	r2, r6
 80067dc:	1a80      	subs	r0, r0, r2
 80067de:	4199      	sbcs	r1, r3
 80067e0:	9000      	str	r0, [sp, #0]
 80067e2:	9101      	str	r1, [sp, #4]
 80067e4:	e79e      	b.n	8006724 <__udivmoddi4+0x84>
 80067e6:	42a3      	cmp	r3, r4
 80067e8:	d8bc      	bhi.n	8006764 <__udivmoddi4+0xc4>
 80067ea:	e782      	b.n	80066f2 <__udivmoddi4+0x52>
 80067ec:	4642      	mov	r2, r8
 80067ee:	2320      	movs	r3, #32
 80067f0:	2100      	movs	r1, #0
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	2200      	movs	r2, #0
 80067f6:	9100      	str	r1, [sp, #0]
 80067f8:	9201      	str	r2, [sp, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	40da      	lsrs	r2, r3
 80067fe:	9201      	str	r2, [sp, #4]
 8006800:	e785      	b.n	800670e <__udivmoddi4+0x6e>
 8006802:	4642      	mov	r2, r8
 8006804:	2320      	movs	r3, #32
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	002a      	movs	r2, r5
 800680a:	4646      	mov	r6, r8
 800680c:	409a      	lsls	r2, r3
 800680e:	0023      	movs	r3, r4
 8006810:	40f3      	lsrs	r3, r6
 8006812:	4644      	mov	r4, r8
 8006814:	4313      	orrs	r3, r2
 8006816:	002a      	movs	r2, r5
 8006818:	40e2      	lsrs	r2, r4
 800681a:	001c      	movs	r4, r3
 800681c:	465b      	mov	r3, fp
 800681e:	0015      	movs	r5, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	dad4      	bge.n	80067ce <__udivmoddi4+0x12e>
 8006824:	4642      	mov	r2, r8
 8006826:	002f      	movs	r7, r5
 8006828:	2320      	movs	r3, #32
 800682a:	0026      	movs	r6, r4
 800682c:	4097      	lsls	r7, r2
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	40de      	lsrs	r6, r3
 8006832:	003b      	movs	r3, r7
 8006834:	4333      	orrs	r3, r6
 8006836:	e7cd      	b.n	80067d4 <__udivmoddi4+0x134>

08006838 <__aeabi_dadd>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	464f      	mov	r7, r9
 800683c:	4646      	mov	r6, r8
 800683e:	46d6      	mov	lr, sl
 8006840:	0004      	movs	r4, r0
 8006842:	b5c0      	push	{r6, r7, lr}
 8006844:	001f      	movs	r7, r3
 8006846:	030b      	lsls	r3, r1, #12
 8006848:	0010      	movs	r0, r2
 800684a:	004e      	lsls	r6, r1, #1
 800684c:	0a5b      	lsrs	r3, r3, #9
 800684e:	0fcd      	lsrs	r5, r1, #31
 8006850:	0f61      	lsrs	r1, r4, #29
 8006852:	007a      	lsls	r2, r7, #1
 8006854:	4319      	orrs	r1, r3
 8006856:	00e3      	lsls	r3, r4, #3
 8006858:	033c      	lsls	r4, r7, #12
 800685a:	0fff      	lsrs	r7, r7, #31
 800685c:	46bc      	mov	ip, r7
 800685e:	0a64      	lsrs	r4, r4, #9
 8006860:	0f47      	lsrs	r7, r0, #29
 8006862:	4327      	orrs	r7, r4
 8006864:	0d76      	lsrs	r6, r6, #21
 8006866:	0d52      	lsrs	r2, r2, #21
 8006868:	00c0      	lsls	r0, r0, #3
 800686a:	46b9      	mov	r9, r7
 800686c:	4680      	mov	r8, r0
 800686e:	1ab7      	subs	r7, r6, r2
 8006870:	4565      	cmp	r5, ip
 8006872:	d100      	bne.n	8006876 <__aeabi_dadd+0x3e>
 8006874:	e09b      	b.n	80069ae <__aeabi_dadd+0x176>
 8006876:	2f00      	cmp	r7, #0
 8006878:	dc00      	bgt.n	800687c <__aeabi_dadd+0x44>
 800687a:	e084      	b.n	8006986 <__aeabi_dadd+0x14e>
 800687c:	2a00      	cmp	r2, #0
 800687e:	d100      	bne.n	8006882 <__aeabi_dadd+0x4a>
 8006880:	e0be      	b.n	8006a00 <__aeabi_dadd+0x1c8>
 8006882:	4ac8      	ldr	r2, [pc, #800]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006884:	4296      	cmp	r6, r2
 8006886:	d100      	bne.n	800688a <__aeabi_dadd+0x52>
 8006888:	e124      	b.n	8006ad4 <__aeabi_dadd+0x29c>
 800688a:	2280      	movs	r2, #128	; 0x80
 800688c:	464c      	mov	r4, r9
 800688e:	0412      	lsls	r2, r2, #16
 8006890:	4314      	orrs	r4, r2
 8006892:	46a1      	mov	r9, r4
 8006894:	2f38      	cmp	r7, #56	; 0x38
 8006896:	dd00      	ble.n	800689a <__aeabi_dadd+0x62>
 8006898:	e167      	b.n	8006b6a <__aeabi_dadd+0x332>
 800689a:	2f1f      	cmp	r7, #31
 800689c:	dd00      	ble.n	80068a0 <__aeabi_dadd+0x68>
 800689e:	e1d6      	b.n	8006c4e <__aeabi_dadd+0x416>
 80068a0:	2220      	movs	r2, #32
 80068a2:	464c      	mov	r4, r9
 80068a4:	1bd2      	subs	r2, r2, r7
 80068a6:	4094      	lsls	r4, r2
 80068a8:	46a2      	mov	sl, r4
 80068aa:	4644      	mov	r4, r8
 80068ac:	40fc      	lsrs	r4, r7
 80068ae:	0020      	movs	r0, r4
 80068b0:	4654      	mov	r4, sl
 80068b2:	4304      	orrs	r4, r0
 80068b4:	4640      	mov	r0, r8
 80068b6:	4090      	lsls	r0, r2
 80068b8:	1e42      	subs	r2, r0, #1
 80068ba:	4190      	sbcs	r0, r2
 80068bc:	464a      	mov	r2, r9
 80068be:	40fa      	lsrs	r2, r7
 80068c0:	4304      	orrs	r4, r0
 80068c2:	1a89      	subs	r1, r1, r2
 80068c4:	1b1c      	subs	r4, r3, r4
 80068c6:	42a3      	cmp	r3, r4
 80068c8:	4192      	sbcs	r2, r2
 80068ca:	4252      	negs	r2, r2
 80068cc:	1a8b      	subs	r3, r1, r2
 80068ce:	469a      	mov	sl, r3
 80068d0:	4653      	mov	r3, sl
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	d400      	bmi.n	80068d8 <__aeabi_dadd+0xa0>
 80068d6:	e0d4      	b.n	8006a82 <__aeabi_dadd+0x24a>
 80068d8:	4653      	mov	r3, sl
 80068da:	025a      	lsls	r2, r3, #9
 80068dc:	0a53      	lsrs	r3, r2, #9
 80068de:	469a      	mov	sl, r3
 80068e0:	4653      	mov	r3, sl
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d100      	bne.n	80068e8 <__aeabi_dadd+0xb0>
 80068e6:	e104      	b.n	8006af2 <__aeabi_dadd+0x2ba>
 80068e8:	4650      	mov	r0, sl
 80068ea:	f001 fdcf 	bl	800848c <__clzsi2>
 80068ee:	0003      	movs	r3, r0
 80068f0:	3b08      	subs	r3, #8
 80068f2:	2220      	movs	r2, #32
 80068f4:	0020      	movs	r0, r4
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	4651      	mov	r1, sl
 80068fa:	40d0      	lsrs	r0, r2
 80068fc:	4099      	lsls	r1, r3
 80068fe:	0002      	movs	r2, r0
 8006900:	409c      	lsls	r4, r3
 8006902:	430a      	orrs	r2, r1
 8006904:	42b3      	cmp	r3, r6
 8006906:	da00      	bge.n	800690a <__aeabi_dadd+0xd2>
 8006908:	e102      	b.n	8006b10 <__aeabi_dadd+0x2d8>
 800690a:	1b9b      	subs	r3, r3, r6
 800690c:	1c59      	adds	r1, r3, #1
 800690e:	291f      	cmp	r1, #31
 8006910:	dd00      	ble.n	8006914 <__aeabi_dadd+0xdc>
 8006912:	e0a7      	b.n	8006a64 <__aeabi_dadd+0x22c>
 8006914:	2320      	movs	r3, #32
 8006916:	0010      	movs	r0, r2
 8006918:	0026      	movs	r6, r4
 800691a:	1a5b      	subs	r3, r3, r1
 800691c:	409c      	lsls	r4, r3
 800691e:	4098      	lsls	r0, r3
 8006920:	40ce      	lsrs	r6, r1
 8006922:	40ca      	lsrs	r2, r1
 8006924:	1e63      	subs	r3, r4, #1
 8006926:	419c      	sbcs	r4, r3
 8006928:	4330      	orrs	r0, r6
 800692a:	4692      	mov	sl, r2
 800692c:	2600      	movs	r6, #0
 800692e:	4304      	orrs	r4, r0
 8006930:	0763      	lsls	r3, r4, #29
 8006932:	d009      	beq.n	8006948 <__aeabi_dadd+0x110>
 8006934:	230f      	movs	r3, #15
 8006936:	4023      	ands	r3, r4
 8006938:	2b04      	cmp	r3, #4
 800693a:	d005      	beq.n	8006948 <__aeabi_dadd+0x110>
 800693c:	1d23      	adds	r3, r4, #4
 800693e:	42a3      	cmp	r3, r4
 8006940:	41a4      	sbcs	r4, r4
 8006942:	4264      	negs	r4, r4
 8006944:	44a2      	add	sl, r4
 8006946:	001c      	movs	r4, r3
 8006948:	4653      	mov	r3, sl
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	d400      	bmi.n	8006950 <__aeabi_dadd+0x118>
 800694e:	e09b      	b.n	8006a88 <__aeabi_dadd+0x250>
 8006950:	4b94      	ldr	r3, [pc, #592]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006952:	3601      	adds	r6, #1
 8006954:	429e      	cmp	r6, r3
 8006956:	d100      	bne.n	800695a <__aeabi_dadd+0x122>
 8006958:	e0b8      	b.n	8006acc <__aeabi_dadd+0x294>
 800695a:	4653      	mov	r3, sl
 800695c:	4992      	ldr	r1, [pc, #584]	; (8006ba8 <__aeabi_dadd+0x370>)
 800695e:	08e4      	lsrs	r4, r4, #3
 8006960:	400b      	ands	r3, r1
 8006962:	0019      	movs	r1, r3
 8006964:	075b      	lsls	r3, r3, #29
 8006966:	4323      	orrs	r3, r4
 8006968:	0572      	lsls	r2, r6, #21
 800696a:	024c      	lsls	r4, r1, #9
 800696c:	0b24      	lsrs	r4, r4, #12
 800696e:	0d52      	lsrs	r2, r2, #21
 8006970:	0512      	lsls	r2, r2, #20
 8006972:	07ed      	lsls	r5, r5, #31
 8006974:	4322      	orrs	r2, r4
 8006976:	432a      	orrs	r2, r5
 8006978:	0018      	movs	r0, r3
 800697a:	0011      	movs	r1, r2
 800697c:	bce0      	pop	{r5, r6, r7}
 800697e:	46ba      	mov	sl, r7
 8006980:	46b1      	mov	r9, r6
 8006982:	46a8      	mov	r8, r5
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	2f00      	cmp	r7, #0
 8006988:	d048      	beq.n	8006a1c <__aeabi_dadd+0x1e4>
 800698a:	1b97      	subs	r7, r2, r6
 800698c:	2e00      	cmp	r6, #0
 800698e:	d000      	beq.n	8006992 <__aeabi_dadd+0x15a>
 8006990:	e10e      	b.n	8006bb0 <__aeabi_dadd+0x378>
 8006992:	000c      	movs	r4, r1
 8006994:	431c      	orrs	r4, r3
 8006996:	d100      	bne.n	800699a <__aeabi_dadd+0x162>
 8006998:	e1b7      	b.n	8006d0a <__aeabi_dadd+0x4d2>
 800699a:	1e7c      	subs	r4, r7, #1
 800699c:	2f01      	cmp	r7, #1
 800699e:	d100      	bne.n	80069a2 <__aeabi_dadd+0x16a>
 80069a0:	e226      	b.n	8006df0 <__aeabi_dadd+0x5b8>
 80069a2:	4d80      	ldr	r5, [pc, #512]	; (8006ba4 <__aeabi_dadd+0x36c>)
 80069a4:	42af      	cmp	r7, r5
 80069a6:	d100      	bne.n	80069aa <__aeabi_dadd+0x172>
 80069a8:	e1d5      	b.n	8006d56 <__aeabi_dadd+0x51e>
 80069aa:	0027      	movs	r7, r4
 80069ac:	e107      	b.n	8006bbe <__aeabi_dadd+0x386>
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	dc00      	bgt.n	80069b4 <__aeabi_dadd+0x17c>
 80069b2:	e0b2      	b.n	8006b1a <__aeabi_dadd+0x2e2>
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	d047      	beq.n	8006a48 <__aeabi_dadd+0x210>
 80069b8:	4a7a      	ldr	r2, [pc, #488]	; (8006ba4 <__aeabi_dadd+0x36c>)
 80069ba:	4296      	cmp	r6, r2
 80069bc:	d100      	bne.n	80069c0 <__aeabi_dadd+0x188>
 80069be:	e089      	b.n	8006ad4 <__aeabi_dadd+0x29c>
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	464c      	mov	r4, r9
 80069c4:	0412      	lsls	r2, r2, #16
 80069c6:	4314      	orrs	r4, r2
 80069c8:	46a1      	mov	r9, r4
 80069ca:	2f38      	cmp	r7, #56	; 0x38
 80069cc:	dc6b      	bgt.n	8006aa6 <__aeabi_dadd+0x26e>
 80069ce:	2f1f      	cmp	r7, #31
 80069d0:	dc00      	bgt.n	80069d4 <__aeabi_dadd+0x19c>
 80069d2:	e16e      	b.n	8006cb2 <__aeabi_dadd+0x47a>
 80069d4:	003a      	movs	r2, r7
 80069d6:	4648      	mov	r0, r9
 80069d8:	3a20      	subs	r2, #32
 80069da:	40d0      	lsrs	r0, r2
 80069dc:	4684      	mov	ip, r0
 80069de:	2f20      	cmp	r7, #32
 80069e0:	d007      	beq.n	80069f2 <__aeabi_dadd+0x1ba>
 80069e2:	2240      	movs	r2, #64	; 0x40
 80069e4:	4648      	mov	r0, r9
 80069e6:	1bd2      	subs	r2, r2, r7
 80069e8:	4090      	lsls	r0, r2
 80069ea:	0002      	movs	r2, r0
 80069ec:	4640      	mov	r0, r8
 80069ee:	4310      	orrs	r0, r2
 80069f0:	4680      	mov	r8, r0
 80069f2:	4640      	mov	r0, r8
 80069f4:	1e42      	subs	r2, r0, #1
 80069f6:	4190      	sbcs	r0, r2
 80069f8:	4662      	mov	r2, ip
 80069fa:	0004      	movs	r4, r0
 80069fc:	4314      	orrs	r4, r2
 80069fe:	e057      	b.n	8006ab0 <__aeabi_dadd+0x278>
 8006a00:	464a      	mov	r2, r9
 8006a02:	4302      	orrs	r2, r0
 8006a04:	d100      	bne.n	8006a08 <__aeabi_dadd+0x1d0>
 8006a06:	e103      	b.n	8006c10 <__aeabi_dadd+0x3d8>
 8006a08:	1e7a      	subs	r2, r7, #1
 8006a0a:	2f01      	cmp	r7, #1
 8006a0c:	d100      	bne.n	8006a10 <__aeabi_dadd+0x1d8>
 8006a0e:	e193      	b.n	8006d38 <__aeabi_dadd+0x500>
 8006a10:	4c64      	ldr	r4, [pc, #400]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006a12:	42a7      	cmp	r7, r4
 8006a14:	d100      	bne.n	8006a18 <__aeabi_dadd+0x1e0>
 8006a16:	e18a      	b.n	8006d2e <__aeabi_dadd+0x4f6>
 8006a18:	0017      	movs	r7, r2
 8006a1a:	e73b      	b.n	8006894 <__aeabi_dadd+0x5c>
 8006a1c:	4c63      	ldr	r4, [pc, #396]	; (8006bac <__aeabi_dadd+0x374>)
 8006a1e:	1c72      	adds	r2, r6, #1
 8006a20:	4222      	tst	r2, r4
 8006a22:	d000      	beq.n	8006a26 <__aeabi_dadd+0x1ee>
 8006a24:	e0e0      	b.n	8006be8 <__aeabi_dadd+0x3b0>
 8006a26:	000a      	movs	r2, r1
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	d000      	beq.n	8006a30 <__aeabi_dadd+0x1f8>
 8006a2e:	e174      	b.n	8006d1a <__aeabi_dadd+0x4e2>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d100      	bne.n	8006a36 <__aeabi_dadd+0x1fe>
 8006a34:	e1d0      	b.n	8006dd8 <__aeabi_dadd+0x5a0>
 8006a36:	464a      	mov	r2, r9
 8006a38:	4302      	orrs	r2, r0
 8006a3a:	d000      	beq.n	8006a3e <__aeabi_dadd+0x206>
 8006a3c:	e1e3      	b.n	8006e06 <__aeabi_dadd+0x5ce>
 8006a3e:	074a      	lsls	r2, r1, #29
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	08c9      	lsrs	r1, r1, #3
 8006a46:	e029      	b.n	8006a9c <__aeabi_dadd+0x264>
 8006a48:	464a      	mov	r2, r9
 8006a4a:	4302      	orrs	r2, r0
 8006a4c:	d100      	bne.n	8006a50 <__aeabi_dadd+0x218>
 8006a4e:	e17d      	b.n	8006d4c <__aeabi_dadd+0x514>
 8006a50:	1e7a      	subs	r2, r7, #1
 8006a52:	2f01      	cmp	r7, #1
 8006a54:	d100      	bne.n	8006a58 <__aeabi_dadd+0x220>
 8006a56:	e0e0      	b.n	8006c1a <__aeabi_dadd+0x3e2>
 8006a58:	4c52      	ldr	r4, [pc, #328]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006a5a:	42a7      	cmp	r7, r4
 8006a5c:	d100      	bne.n	8006a60 <__aeabi_dadd+0x228>
 8006a5e:	e166      	b.n	8006d2e <__aeabi_dadd+0x4f6>
 8006a60:	0017      	movs	r7, r2
 8006a62:	e7b2      	b.n	80069ca <__aeabi_dadd+0x192>
 8006a64:	0010      	movs	r0, r2
 8006a66:	3b1f      	subs	r3, #31
 8006a68:	40d8      	lsrs	r0, r3
 8006a6a:	2920      	cmp	r1, #32
 8006a6c:	d003      	beq.n	8006a76 <__aeabi_dadd+0x23e>
 8006a6e:	2340      	movs	r3, #64	; 0x40
 8006a70:	1a5b      	subs	r3, r3, r1
 8006a72:	409a      	lsls	r2, r3
 8006a74:	4314      	orrs	r4, r2
 8006a76:	1e63      	subs	r3, r4, #1
 8006a78:	419c      	sbcs	r4, r3
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	469a      	mov	sl, r3
 8006a80:	4304      	orrs	r4, r0
 8006a82:	0763      	lsls	r3, r4, #29
 8006a84:	d000      	beq.n	8006a88 <__aeabi_dadd+0x250>
 8006a86:	e755      	b.n	8006934 <__aeabi_dadd+0xfc>
 8006a88:	4652      	mov	r2, sl
 8006a8a:	08e3      	lsrs	r3, r4, #3
 8006a8c:	0752      	lsls	r2, r2, #29
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	4652      	mov	r2, sl
 8006a92:	0037      	movs	r7, r6
 8006a94:	08d1      	lsrs	r1, r2, #3
 8006a96:	4a43      	ldr	r2, [pc, #268]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006a98:	4297      	cmp	r7, r2
 8006a9a:	d01f      	beq.n	8006adc <__aeabi_dadd+0x2a4>
 8006a9c:	0309      	lsls	r1, r1, #12
 8006a9e:	057a      	lsls	r2, r7, #21
 8006aa0:	0b0c      	lsrs	r4, r1, #12
 8006aa2:	0d52      	lsrs	r2, r2, #21
 8006aa4:	e764      	b.n	8006970 <__aeabi_dadd+0x138>
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	464c      	mov	r4, r9
 8006aaa:	4314      	orrs	r4, r2
 8006aac:	1e62      	subs	r2, r4, #1
 8006aae:	4194      	sbcs	r4, r2
 8006ab0:	18e4      	adds	r4, r4, r3
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	4192      	sbcs	r2, r2
 8006ab6:	4252      	negs	r2, r2
 8006ab8:	4692      	mov	sl, r2
 8006aba:	448a      	add	sl, r1
 8006abc:	4653      	mov	r3, sl
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	d5df      	bpl.n	8006a82 <__aeabi_dadd+0x24a>
 8006ac2:	4b38      	ldr	r3, [pc, #224]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	429e      	cmp	r6, r3
 8006ac8:	d000      	beq.n	8006acc <__aeabi_dadd+0x294>
 8006aca:	e0b3      	b.n	8006c34 <__aeabi_dadd+0x3fc>
 8006acc:	0032      	movs	r2, r6
 8006ace:	2400      	movs	r4, #0
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e74d      	b.n	8006970 <__aeabi_dadd+0x138>
 8006ad4:	074a      	lsls	r2, r1, #29
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	08c9      	lsrs	r1, r1, #3
 8006adc:	001a      	movs	r2, r3
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	d100      	bne.n	8006ae4 <__aeabi_dadd+0x2ac>
 8006ae2:	e200      	b.n	8006ee6 <__aeabi_dadd+0x6ae>
 8006ae4:	2480      	movs	r4, #128	; 0x80
 8006ae6:	0324      	lsls	r4, r4, #12
 8006ae8:	430c      	orrs	r4, r1
 8006aea:	0324      	lsls	r4, r4, #12
 8006aec:	4a2d      	ldr	r2, [pc, #180]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006aee:	0b24      	lsrs	r4, r4, #12
 8006af0:	e73e      	b.n	8006970 <__aeabi_dadd+0x138>
 8006af2:	0020      	movs	r0, r4
 8006af4:	f001 fcca 	bl	800848c <__clzsi2>
 8006af8:	0003      	movs	r3, r0
 8006afa:	3318      	adds	r3, #24
 8006afc:	2b1f      	cmp	r3, #31
 8006afe:	dc00      	bgt.n	8006b02 <__aeabi_dadd+0x2ca>
 8006b00:	e6f7      	b.n	80068f2 <__aeabi_dadd+0xba>
 8006b02:	0022      	movs	r2, r4
 8006b04:	3808      	subs	r0, #8
 8006b06:	4082      	lsls	r2, r0
 8006b08:	2400      	movs	r4, #0
 8006b0a:	42b3      	cmp	r3, r6
 8006b0c:	db00      	blt.n	8006b10 <__aeabi_dadd+0x2d8>
 8006b0e:	e6fc      	b.n	800690a <__aeabi_dadd+0xd2>
 8006b10:	1af6      	subs	r6, r6, r3
 8006b12:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <__aeabi_dadd+0x370>)
 8006b14:	401a      	ands	r2, r3
 8006b16:	4692      	mov	sl, r2
 8006b18:	e70a      	b.n	8006930 <__aeabi_dadd+0xf8>
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	d02b      	beq.n	8006b76 <__aeabi_dadd+0x33e>
 8006b1e:	1b97      	subs	r7, r2, r6
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	d100      	bne.n	8006b26 <__aeabi_dadd+0x2ee>
 8006b24:	e0b8      	b.n	8006c98 <__aeabi_dadd+0x460>
 8006b26:	4c1f      	ldr	r4, [pc, #124]	; (8006ba4 <__aeabi_dadd+0x36c>)
 8006b28:	42a2      	cmp	r2, r4
 8006b2a:	d100      	bne.n	8006b2e <__aeabi_dadd+0x2f6>
 8006b2c:	e11c      	b.n	8006d68 <__aeabi_dadd+0x530>
 8006b2e:	2480      	movs	r4, #128	; 0x80
 8006b30:	0424      	lsls	r4, r4, #16
 8006b32:	4321      	orrs	r1, r4
 8006b34:	2f38      	cmp	r7, #56	; 0x38
 8006b36:	dd00      	ble.n	8006b3a <__aeabi_dadd+0x302>
 8006b38:	e11e      	b.n	8006d78 <__aeabi_dadd+0x540>
 8006b3a:	2f1f      	cmp	r7, #31
 8006b3c:	dd00      	ble.n	8006b40 <__aeabi_dadd+0x308>
 8006b3e:	e19e      	b.n	8006e7e <__aeabi_dadd+0x646>
 8006b40:	2620      	movs	r6, #32
 8006b42:	000c      	movs	r4, r1
 8006b44:	1bf6      	subs	r6, r6, r7
 8006b46:	0018      	movs	r0, r3
 8006b48:	40b3      	lsls	r3, r6
 8006b4a:	40b4      	lsls	r4, r6
 8006b4c:	40f8      	lsrs	r0, r7
 8006b4e:	1e5e      	subs	r6, r3, #1
 8006b50:	41b3      	sbcs	r3, r6
 8006b52:	40f9      	lsrs	r1, r7
 8006b54:	4304      	orrs	r4, r0
 8006b56:	431c      	orrs	r4, r3
 8006b58:	4489      	add	r9, r1
 8006b5a:	4444      	add	r4, r8
 8006b5c:	4544      	cmp	r4, r8
 8006b5e:	419b      	sbcs	r3, r3
 8006b60:	425b      	negs	r3, r3
 8006b62:	444b      	add	r3, r9
 8006b64:	469a      	mov	sl, r3
 8006b66:	0016      	movs	r6, r2
 8006b68:	e7a8      	b.n	8006abc <__aeabi_dadd+0x284>
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	464c      	mov	r4, r9
 8006b6e:	4314      	orrs	r4, r2
 8006b70:	1e62      	subs	r2, r4, #1
 8006b72:	4194      	sbcs	r4, r2
 8006b74:	e6a6      	b.n	80068c4 <__aeabi_dadd+0x8c>
 8006b76:	4c0d      	ldr	r4, [pc, #52]	; (8006bac <__aeabi_dadd+0x374>)
 8006b78:	1c72      	adds	r2, r6, #1
 8006b7a:	4222      	tst	r2, r4
 8006b7c:	d000      	beq.n	8006b80 <__aeabi_dadd+0x348>
 8006b7e:	e0a8      	b.n	8006cd2 <__aeabi_dadd+0x49a>
 8006b80:	000a      	movs	r2, r1
 8006b82:	431a      	orrs	r2, r3
 8006b84:	2e00      	cmp	r6, #0
 8006b86:	d000      	beq.n	8006b8a <__aeabi_dadd+0x352>
 8006b88:	e10a      	b.n	8006da0 <__aeabi_dadd+0x568>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	d100      	bne.n	8006b90 <__aeabi_dadd+0x358>
 8006b8e:	e15e      	b.n	8006e4e <__aeabi_dadd+0x616>
 8006b90:	464a      	mov	r2, r9
 8006b92:	4302      	orrs	r2, r0
 8006b94:	d000      	beq.n	8006b98 <__aeabi_dadd+0x360>
 8006b96:	e161      	b.n	8006e5c <__aeabi_dadd+0x624>
 8006b98:	074a      	lsls	r2, r1, #29
 8006b9a:	08db      	lsrs	r3, r3, #3
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	08c9      	lsrs	r1, r1, #3
 8006ba0:	e77c      	b.n	8006a9c <__aeabi_dadd+0x264>
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	000007ff 	.word	0x000007ff
 8006ba8:	ff7fffff 	.word	0xff7fffff
 8006bac:	000007fe 	.word	0x000007fe
 8006bb0:	4ccf      	ldr	r4, [pc, #828]	; (8006ef0 <__aeabi_dadd+0x6b8>)
 8006bb2:	42a2      	cmp	r2, r4
 8006bb4:	d100      	bne.n	8006bb8 <__aeabi_dadd+0x380>
 8006bb6:	e0ce      	b.n	8006d56 <__aeabi_dadd+0x51e>
 8006bb8:	2480      	movs	r4, #128	; 0x80
 8006bba:	0424      	lsls	r4, r4, #16
 8006bbc:	4321      	orrs	r1, r4
 8006bbe:	2f38      	cmp	r7, #56	; 0x38
 8006bc0:	dc5b      	bgt.n	8006c7a <__aeabi_dadd+0x442>
 8006bc2:	2f1f      	cmp	r7, #31
 8006bc4:	dd00      	ble.n	8006bc8 <__aeabi_dadd+0x390>
 8006bc6:	e0dc      	b.n	8006d82 <__aeabi_dadd+0x54a>
 8006bc8:	2520      	movs	r5, #32
 8006bca:	000c      	movs	r4, r1
 8006bcc:	1bed      	subs	r5, r5, r7
 8006bce:	001e      	movs	r6, r3
 8006bd0:	40ab      	lsls	r3, r5
 8006bd2:	40ac      	lsls	r4, r5
 8006bd4:	40fe      	lsrs	r6, r7
 8006bd6:	1e5d      	subs	r5, r3, #1
 8006bd8:	41ab      	sbcs	r3, r5
 8006bda:	4334      	orrs	r4, r6
 8006bdc:	40f9      	lsrs	r1, r7
 8006bde:	431c      	orrs	r4, r3
 8006be0:	464b      	mov	r3, r9
 8006be2:	1a5b      	subs	r3, r3, r1
 8006be4:	4699      	mov	r9, r3
 8006be6:	e04c      	b.n	8006c82 <__aeabi_dadd+0x44a>
 8006be8:	464a      	mov	r2, r9
 8006bea:	1a1c      	subs	r4, r3, r0
 8006bec:	1a88      	subs	r0, r1, r2
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	4192      	sbcs	r2, r2
 8006bf2:	4252      	negs	r2, r2
 8006bf4:	4692      	mov	sl, r2
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	4650      	mov	r0, sl
 8006bfa:	1a12      	subs	r2, r2, r0
 8006bfc:	4692      	mov	sl, r2
 8006bfe:	0212      	lsls	r2, r2, #8
 8006c00:	d478      	bmi.n	8006cf4 <__aeabi_dadd+0x4bc>
 8006c02:	4653      	mov	r3, sl
 8006c04:	4323      	orrs	r3, r4
 8006c06:	d000      	beq.n	8006c0a <__aeabi_dadd+0x3d2>
 8006c08:	e66a      	b.n	80068e0 <__aeabi_dadd+0xa8>
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	e745      	b.n	8006a9c <__aeabi_dadd+0x264>
 8006c10:	074a      	lsls	r2, r1, #29
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	08c9      	lsrs	r1, r1, #3
 8006c18:	e73d      	b.n	8006a96 <__aeabi_dadd+0x25e>
 8006c1a:	181c      	adds	r4, r3, r0
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	419b      	sbcs	r3, r3
 8006c20:	4449      	add	r1, r9
 8006c22:	468a      	mov	sl, r1
 8006c24:	425b      	negs	r3, r3
 8006c26:	449a      	add	sl, r3
 8006c28:	4653      	mov	r3, sl
 8006c2a:	2601      	movs	r6, #1
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	d400      	bmi.n	8006c32 <__aeabi_dadd+0x3fa>
 8006c30:	e727      	b.n	8006a82 <__aeabi_dadd+0x24a>
 8006c32:	2602      	movs	r6, #2
 8006c34:	4652      	mov	r2, sl
 8006c36:	4baf      	ldr	r3, [pc, #700]	; (8006ef4 <__aeabi_dadd+0x6bc>)
 8006c38:	2101      	movs	r1, #1
 8006c3a:	401a      	ands	r2, r3
 8006c3c:	0013      	movs	r3, r2
 8006c3e:	4021      	ands	r1, r4
 8006c40:	0862      	lsrs	r2, r4, #1
 8006c42:	430a      	orrs	r2, r1
 8006c44:	07dc      	lsls	r4, r3, #31
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	469a      	mov	sl, r3
 8006c4a:	4314      	orrs	r4, r2
 8006c4c:	e670      	b.n	8006930 <__aeabi_dadd+0xf8>
 8006c4e:	003a      	movs	r2, r7
 8006c50:	464c      	mov	r4, r9
 8006c52:	3a20      	subs	r2, #32
 8006c54:	40d4      	lsrs	r4, r2
 8006c56:	46a4      	mov	ip, r4
 8006c58:	2f20      	cmp	r7, #32
 8006c5a:	d007      	beq.n	8006c6c <__aeabi_dadd+0x434>
 8006c5c:	2240      	movs	r2, #64	; 0x40
 8006c5e:	4648      	mov	r0, r9
 8006c60:	1bd2      	subs	r2, r2, r7
 8006c62:	4090      	lsls	r0, r2
 8006c64:	0002      	movs	r2, r0
 8006c66:	4640      	mov	r0, r8
 8006c68:	4310      	orrs	r0, r2
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	1e42      	subs	r2, r0, #1
 8006c70:	4190      	sbcs	r0, r2
 8006c72:	4662      	mov	r2, ip
 8006c74:	0004      	movs	r4, r0
 8006c76:	4314      	orrs	r4, r2
 8006c78:	e624      	b.n	80068c4 <__aeabi_dadd+0x8c>
 8006c7a:	4319      	orrs	r1, r3
 8006c7c:	000c      	movs	r4, r1
 8006c7e:	1e63      	subs	r3, r4, #1
 8006c80:	419c      	sbcs	r4, r3
 8006c82:	4643      	mov	r3, r8
 8006c84:	1b1c      	subs	r4, r3, r4
 8006c86:	45a0      	cmp	r8, r4
 8006c88:	419b      	sbcs	r3, r3
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	425b      	negs	r3, r3
 8006c8e:	1acb      	subs	r3, r1, r3
 8006c90:	469a      	mov	sl, r3
 8006c92:	4665      	mov	r5, ip
 8006c94:	0016      	movs	r6, r2
 8006c96:	e61b      	b.n	80068d0 <__aeabi_dadd+0x98>
 8006c98:	000c      	movs	r4, r1
 8006c9a:	431c      	orrs	r4, r3
 8006c9c:	d100      	bne.n	8006ca0 <__aeabi_dadd+0x468>
 8006c9e:	e0c7      	b.n	8006e30 <__aeabi_dadd+0x5f8>
 8006ca0:	1e7c      	subs	r4, r7, #1
 8006ca2:	2f01      	cmp	r7, #1
 8006ca4:	d100      	bne.n	8006ca8 <__aeabi_dadd+0x470>
 8006ca6:	e0f9      	b.n	8006e9c <__aeabi_dadd+0x664>
 8006ca8:	4e91      	ldr	r6, [pc, #580]	; (8006ef0 <__aeabi_dadd+0x6b8>)
 8006caa:	42b7      	cmp	r7, r6
 8006cac:	d05c      	beq.n	8006d68 <__aeabi_dadd+0x530>
 8006cae:	0027      	movs	r7, r4
 8006cb0:	e740      	b.n	8006b34 <__aeabi_dadd+0x2fc>
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	464c      	mov	r4, r9
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	1bd2      	subs	r2, r2, r7
 8006cba:	4094      	lsls	r4, r2
 8006cbc:	40f8      	lsrs	r0, r7
 8006cbe:	4304      	orrs	r4, r0
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	4090      	lsls	r0, r2
 8006cc4:	1e42      	subs	r2, r0, #1
 8006cc6:	4190      	sbcs	r0, r2
 8006cc8:	464a      	mov	r2, r9
 8006cca:	40fa      	lsrs	r2, r7
 8006ccc:	4304      	orrs	r4, r0
 8006cce:	1889      	adds	r1, r1, r2
 8006cd0:	e6ee      	b.n	8006ab0 <__aeabi_dadd+0x278>
 8006cd2:	4c87      	ldr	r4, [pc, #540]	; (8006ef0 <__aeabi_dadd+0x6b8>)
 8006cd4:	42a2      	cmp	r2, r4
 8006cd6:	d100      	bne.n	8006cda <__aeabi_dadd+0x4a2>
 8006cd8:	e6f9      	b.n	8006ace <__aeabi_dadd+0x296>
 8006cda:	1818      	adds	r0, r3, r0
 8006cdc:	4298      	cmp	r0, r3
 8006cde:	419b      	sbcs	r3, r3
 8006ce0:	4449      	add	r1, r9
 8006ce2:	425b      	negs	r3, r3
 8006ce4:	18cb      	adds	r3, r1, r3
 8006ce6:	07dc      	lsls	r4, r3, #31
 8006ce8:	0840      	lsrs	r0, r0, #1
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	469a      	mov	sl, r3
 8006cee:	0016      	movs	r6, r2
 8006cf0:	4304      	orrs	r4, r0
 8006cf2:	e6c6      	b.n	8006a82 <__aeabi_dadd+0x24a>
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	1ad4      	subs	r4, r2, r3
 8006cf8:	45a0      	cmp	r8, r4
 8006cfa:	4180      	sbcs	r0, r0
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	4240      	negs	r0, r0
 8006d00:	1a59      	subs	r1, r3, r1
 8006d02:	1a0b      	subs	r3, r1, r0
 8006d04:	469a      	mov	sl, r3
 8006d06:	4665      	mov	r5, ip
 8006d08:	e5ea      	b.n	80068e0 <__aeabi_dadd+0xa8>
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	464a      	mov	r2, r9
 8006d0e:	08c0      	lsrs	r0, r0, #3
 8006d10:	075b      	lsls	r3, r3, #29
 8006d12:	4665      	mov	r5, ip
 8006d14:	4303      	orrs	r3, r0
 8006d16:	08d1      	lsrs	r1, r2, #3
 8006d18:	e6bd      	b.n	8006a96 <__aeabi_dadd+0x25e>
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d000      	beq.n	8006d20 <__aeabi_dadd+0x4e8>
 8006d1e:	e08e      	b.n	8006e3e <__aeabi_dadd+0x606>
 8006d20:	464b      	mov	r3, r9
 8006d22:	4303      	orrs	r3, r0
 8006d24:	d117      	bne.n	8006d56 <__aeabi_dadd+0x51e>
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	2500      	movs	r5, #0
 8006d2a:	0309      	lsls	r1, r1, #12
 8006d2c:	e6da      	b.n	8006ae4 <__aeabi_dadd+0x2ac>
 8006d2e:	074a      	lsls	r2, r1, #29
 8006d30:	08db      	lsrs	r3, r3, #3
 8006d32:	4313      	orrs	r3, r2
 8006d34:	08c9      	lsrs	r1, r1, #3
 8006d36:	e6d1      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006d38:	1a1c      	subs	r4, r3, r0
 8006d3a:	464a      	mov	r2, r9
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	419b      	sbcs	r3, r3
 8006d40:	1a89      	subs	r1, r1, r2
 8006d42:	425b      	negs	r3, r3
 8006d44:	1acb      	subs	r3, r1, r3
 8006d46:	469a      	mov	sl, r3
 8006d48:	2601      	movs	r6, #1
 8006d4a:	e5c1      	b.n	80068d0 <__aeabi_dadd+0x98>
 8006d4c:	074a      	lsls	r2, r1, #29
 8006d4e:	08db      	lsrs	r3, r3, #3
 8006d50:	4313      	orrs	r3, r2
 8006d52:	08c9      	lsrs	r1, r1, #3
 8006d54:	e69f      	b.n	8006a96 <__aeabi_dadd+0x25e>
 8006d56:	4643      	mov	r3, r8
 8006d58:	08d8      	lsrs	r0, r3, #3
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	464a      	mov	r2, r9
 8006d5e:	075b      	lsls	r3, r3, #29
 8006d60:	4665      	mov	r5, ip
 8006d62:	4303      	orrs	r3, r0
 8006d64:	08d1      	lsrs	r1, r2, #3
 8006d66:	e6b9      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006d68:	4643      	mov	r3, r8
 8006d6a:	08d8      	lsrs	r0, r3, #3
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	464a      	mov	r2, r9
 8006d70:	075b      	lsls	r3, r3, #29
 8006d72:	4303      	orrs	r3, r0
 8006d74:	08d1      	lsrs	r1, r2, #3
 8006d76:	e6b1      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006d78:	4319      	orrs	r1, r3
 8006d7a:	000c      	movs	r4, r1
 8006d7c:	1e63      	subs	r3, r4, #1
 8006d7e:	419c      	sbcs	r4, r3
 8006d80:	e6eb      	b.n	8006b5a <__aeabi_dadd+0x322>
 8006d82:	003c      	movs	r4, r7
 8006d84:	000d      	movs	r5, r1
 8006d86:	3c20      	subs	r4, #32
 8006d88:	40e5      	lsrs	r5, r4
 8006d8a:	2f20      	cmp	r7, #32
 8006d8c:	d003      	beq.n	8006d96 <__aeabi_dadd+0x55e>
 8006d8e:	2440      	movs	r4, #64	; 0x40
 8006d90:	1be4      	subs	r4, r4, r7
 8006d92:	40a1      	lsls	r1, r4
 8006d94:	430b      	orrs	r3, r1
 8006d96:	001c      	movs	r4, r3
 8006d98:	1e63      	subs	r3, r4, #1
 8006d9a:	419c      	sbcs	r4, r3
 8006d9c:	432c      	orrs	r4, r5
 8006d9e:	e770      	b.n	8006c82 <__aeabi_dadd+0x44a>
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d0e1      	beq.n	8006d68 <__aeabi_dadd+0x530>
 8006da4:	464a      	mov	r2, r9
 8006da6:	4302      	orrs	r2, r0
 8006da8:	d0c1      	beq.n	8006d2e <__aeabi_dadd+0x4f6>
 8006daa:	074a      	lsls	r2, r1, #29
 8006dac:	08db      	lsrs	r3, r3, #3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	2280      	movs	r2, #128	; 0x80
 8006db2:	08c9      	lsrs	r1, r1, #3
 8006db4:	0312      	lsls	r2, r2, #12
 8006db6:	4211      	tst	r1, r2
 8006db8:	d008      	beq.n	8006dcc <__aeabi_dadd+0x594>
 8006dba:	4648      	mov	r0, r9
 8006dbc:	08c4      	lsrs	r4, r0, #3
 8006dbe:	4214      	tst	r4, r2
 8006dc0:	d104      	bne.n	8006dcc <__aeabi_dadd+0x594>
 8006dc2:	4643      	mov	r3, r8
 8006dc4:	0021      	movs	r1, r4
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	0742      	lsls	r2, r0, #29
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	0f5a      	lsrs	r2, r3, #29
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	0752      	lsls	r2, r2, #29
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	e681      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006dd8:	464b      	mov	r3, r9
 8006dda:	4303      	orrs	r3, r0
 8006ddc:	d100      	bne.n	8006de0 <__aeabi_dadd+0x5a8>
 8006dde:	e714      	b.n	8006c0a <__aeabi_dadd+0x3d2>
 8006de0:	464b      	mov	r3, r9
 8006de2:	464a      	mov	r2, r9
 8006de4:	08c0      	lsrs	r0, r0, #3
 8006de6:	075b      	lsls	r3, r3, #29
 8006de8:	4665      	mov	r5, ip
 8006dea:	4303      	orrs	r3, r0
 8006dec:	08d1      	lsrs	r1, r2, #3
 8006dee:	e655      	b.n	8006a9c <__aeabi_dadd+0x264>
 8006df0:	1ac4      	subs	r4, r0, r3
 8006df2:	45a0      	cmp	r8, r4
 8006df4:	4180      	sbcs	r0, r0
 8006df6:	464b      	mov	r3, r9
 8006df8:	4240      	negs	r0, r0
 8006dfa:	1a59      	subs	r1, r3, r1
 8006dfc:	1a0b      	subs	r3, r1, r0
 8006dfe:	469a      	mov	sl, r3
 8006e00:	4665      	mov	r5, ip
 8006e02:	2601      	movs	r6, #1
 8006e04:	e564      	b.n	80068d0 <__aeabi_dadd+0x98>
 8006e06:	1a1c      	subs	r4, r3, r0
 8006e08:	464a      	mov	r2, r9
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	4180      	sbcs	r0, r0
 8006e0e:	1a8a      	subs	r2, r1, r2
 8006e10:	4240      	negs	r0, r0
 8006e12:	1a12      	subs	r2, r2, r0
 8006e14:	4692      	mov	sl, r2
 8006e16:	0212      	lsls	r2, r2, #8
 8006e18:	d549      	bpl.n	8006eae <__aeabi_dadd+0x676>
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	1ad4      	subs	r4, r2, r3
 8006e1e:	45a0      	cmp	r8, r4
 8006e20:	4180      	sbcs	r0, r0
 8006e22:	464b      	mov	r3, r9
 8006e24:	4240      	negs	r0, r0
 8006e26:	1a59      	subs	r1, r3, r1
 8006e28:	1a0b      	subs	r3, r1, r0
 8006e2a:	469a      	mov	sl, r3
 8006e2c:	4665      	mov	r5, ip
 8006e2e:	e57f      	b.n	8006930 <__aeabi_dadd+0xf8>
 8006e30:	464b      	mov	r3, r9
 8006e32:	464a      	mov	r2, r9
 8006e34:	08c0      	lsrs	r0, r0, #3
 8006e36:	075b      	lsls	r3, r3, #29
 8006e38:	4303      	orrs	r3, r0
 8006e3a:	08d1      	lsrs	r1, r2, #3
 8006e3c:	e62b      	b.n	8006a96 <__aeabi_dadd+0x25e>
 8006e3e:	464a      	mov	r2, r9
 8006e40:	08db      	lsrs	r3, r3, #3
 8006e42:	4302      	orrs	r2, r0
 8006e44:	d138      	bne.n	8006eb8 <__aeabi_dadd+0x680>
 8006e46:	074a      	lsls	r2, r1, #29
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	08c9      	lsrs	r1, r1, #3
 8006e4c:	e646      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006e4e:	464b      	mov	r3, r9
 8006e50:	464a      	mov	r2, r9
 8006e52:	08c0      	lsrs	r0, r0, #3
 8006e54:	075b      	lsls	r3, r3, #29
 8006e56:	4303      	orrs	r3, r0
 8006e58:	08d1      	lsrs	r1, r2, #3
 8006e5a:	e61f      	b.n	8006a9c <__aeabi_dadd+0x264>
 8006e5c:	181c      	adds	r4, r3, r0
 8006e5e:	429c      	cmp	r4, r3
 8006e60:	419b      	sbcs	r3, r3
 8006e62:	4449      	add	r1, r9
 8006e64:	468a      	mov	sl, r1
 8006e66:	425b      	negs	r3, r3
 8006e68:	449a      	add	sl, r3
 8006e6a:	4653      	mov	r3, sl
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	d400      	bmi.n	8006e72 <__aeabi_dadd+0x63a>
 8006e70:	e607      	b.n	8006a82 <__aeabi_dadd+0x24a>
 8006e72:	4652      	mov	r2, sl
 8006e74:	4b1f      	ldr	r3, [pc, #124]	; (8006ef4 <__aeabi_dadd+0x6bc>)
 8006e76:	2601      	movs	r6, #1
 8006e78:	401a      	ands	r2, r3
 8006e7a:	4692      	mov	sl, r2
 8006e7c:	e601      	b.n	8006a82 <__aeabi_dadd+0x24a>
 8006e7e:	003c      	movs	r4, r7
 8006e80:	000e      	movs	r6, r1
 8006e82:	3c20      	subs	r4, #32
 8006e84:	40e6      	lsrs	r6, r4
 8006e86:	2f20      	cmp	r7, #32
 8006e88:	d003      	beq.n	8006e92 <__aeabi_dadd+0x65a>
 8006e8a:	2440      	movs	r4, #64	; 0x40
 8006e8c:	1be4      	subs	r4, r4, r7
 8006e8e:	40a1      	lsls	r1, r4
 8006e90:	430b      	orrs	r3, r1
 8006e92:	001c      	movs	r4, r3
 8006e94:	1e63      	subs	r3, r4, #1
 8006e96:	419c      	sbcs	r4, r3
 8006e98:	4334      	orrs	r4, r6
 8006e9a:	e65e      	b.n	8006b5a <__aeabi_dadd+0x322>
 8006e9c:	4443      	add	r3, r8
 8006e9e:	4283      	cmp	r3, r0
 8006ea0:	4180      	sbcs	r0, r0
 8006ea2:	4449      	add	r1, r9
 8006ea4:	468a      	mov	sl, r1
 8006ea6:	4240      	negs	r0, r0
 8006ea8:	001c      	movs	r4, r3
 8006eaa:	4482      	add	sl, r0
 8006eac:	e6bc      	b.n	8006c28 <__aeabi_dadd+0x3f0>
 8006eae:	4653      	mov	r3, sl
 8006eb0:	4323      	orrs	r3, r4
 8006eb2:	d100      	bne.n	8006eb6 <__aeabi_dadd+0x67e>
 8006eb4:	e6a9      	b.n	8006c0a <__aeabi_dadd+0x3d2>
 8006eb6:	e5e4      	b.n	8006a82 <__aeabi_dadd+0x24a>
 8006eb8:	074a      	lsls	r2, r1, #29
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	2280      	movs	r2, #128	; 0x80
 8006ebe:	08c9      	lsrs	r1, r1, #3
 8006ec0:	0312      	lsls	r2, r2, #12
 8006ec2:	4211      	tst	r1, r2
 8006ec4:	d009      	beq.n	8006eda <__aeabi_dadd+0x6a2>
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	08c4      	lsrs	r4, r0, #3
 8006eca:	4214      	tst	r4, r2
 8006ecc:	d105      	bne.n	8006eda <__aeabi_dadd+0x6a2>
 8006ece:	4643      	mov	r3, r8
 8006ed0:	4665      	mov	r5, ip
 8006ed2:	0021      	movs	r1, r4
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	0742      	lsls	r2, r0, #29
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	0f5a      	lsrs	r2, r3, #29
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	08db      	lsrs	r3, r3, #3
 8006ee0:	0752      	lsls	r2, r2, #29
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	e5fa      	b.n	8006adc <__aeabi_dadd+0x2a4>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4a01      	ldr	r2, [pc, #4]	; (8006ef0 <__aeabi_dadd+0x6b8>)
 8006eea:	001c      	movs	r4, r3
 8006eec:	e540      	b.n	8006970 <__aeabi_dadd+0x138>
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	000007ff 	.word	0x000007ff
 8006ef4:	ff7fffff 	.word	0xff7fffff

08006ef8 <__aeabi_ddiv>:
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efa:	4657      	mov	r7, sl
 8006efc:	464e      	mov	r6, r9
 8006efe:	4645      	mov	r5, r8
 8006f00:	46de      	mov	lr, fp
 8006f02:	b5e0      	push	{r5, r6, r7, lr}
 8006f04:	030c      	lsls	r4, r1, #12
 8006f06:	001f      	movs	r7, r3
 8006f08:	004b      	lsls	r3, r1, #1
 8006f0a:	4681      	mov	r9, r0
 8006f0c:	4692      	mov	sl, r2
 8006f0e:	0005      	movs	r5, r0
 8006f10:	b085      	sub	sp, #20
 8006f12:	0b24      	lsrs	r4, r4, #12
 8006f14:	0d5b      	lsrs	r3, r3, #21
 8006f16:	0fce      	lsrs	r6, r1, #31
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d100      	bne.n	8006f1e <__aeabi_ddiv+0x26>
 8006f1c:	e152      	b.n	80071c4 <__aeabi_ddiv+0x2cc>
 8006f1e:	4ad2      	ldr	r2, [pc, #840]	; (8007268 <__aeabi_ddiv+0x370>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <__aeabi_ddiv+0x2e>
 8006f24:	e16e      	b.n	8007204 <__aeabi_ddiv+0x30c>
 8006f26:	0f42      	lsrs	r2, r0, #29
 8006f28:	00e4      	lsls	r4, r4, #3
 8006f2a:	4314      	orrs	r4, r2
 8006f2c:	2280      	movs	r2, #128	; 0x80
 8006f2e:	0412      	lsls	r2, r2, #16
 8006f30:	4322      	orrs	r2, r4
 8006f32:	4690      	mov	r8, r2
 8006f34:	4acd      	ldr	r2, [pc, #820]	; (800726c <__aeabi_ddiv+0x374>)
 8006f36:	00c5      	lsls	r5, r0, #3
 8006f38:	4693      	mov	fp, r2
 8006f3a:	449b      	add	fp, r3
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4699      	mov	r9, r3
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	033c      	lsls	r4, r7, #12
 8006f44:	007b      	lsls	r3, r7, #1
 8006f46:	4650      	mov	r0, sl
 8006f48:	0b24      	lsrs	r4, r4, #12
 8006f4a:	0d5b      	lsrs	r3, r3, #21
 8006f4c:	0fff      	lsrs	r7, r7, #31
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d100      	bne.n	8006f54 <__aeabi_ddiv+0x5c>
 8006f52:	e11a      	b.n	800718a <__aeabi_ddiv+0x292>
 8006f54:	4ac4      	ldr	r2, [pc, #784]	; (8007268 <__aeabi_ddiv+0x370>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d100      	bne.n	8006f5c <__aeabi_ddiv+0x64>
 8006f5a:	e15e      	b.n	800721a <__aeabi_ddiv+0x322>
 8006f5c:	0f42      	lsrs	r2, r0, #29
 8006f5e:	00e4      	lsls	r4, r4, #3
 8006f60:	4322      	orrs	r2, r4
 8006f62:	2480      	movs	r4, #128	; 0x80
 8006f64:	0424      	lsls	r4, r4, #16
 8006f66:	4314      	orrs	r4, r2
 8006f68:	4ac0      	ldr	r2, [pc, #768]	; (800726c <__aeabi_ddiv+0x374>)
 8006f6a:	00c1      	lsls	r1, r0, #3
 8006f6c:	4694      	mov	ip, r2
 8006f6e:	465a      	mov	r2, fp
 8006f70:	4463      	add	r3, ip
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	469b      	mov	fp, r3
 8006f76:	2000      	movs	r0, #0
 8006f78:	0033      	movs	r3, r6
 8006f7a:	407b      	eors	r3, r7
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	464b      	mov	r3, r9
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d827      	bhi.n	8006fd4 <__aeabi_ddiv+0xdc>
 8006f84:	4aba      	ldr	r2, [pc, #744]	; (8007270 <__aeabi_ddiv+0x378>)
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	58d3      	ldr	r3, [r2, r3]
 8006f8a:	469f      	mov	pc, r3
 8006f8c:	46b2      	mov	sl, r6
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d016      	beq.n	8006fc2 <__aeabi_ddiv+0xca>
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d100      	bne.n	8006f9a <__aeabi_ddiv+0xa2>
 8006f98:	e287      	b.n	80074aa <__aeabi_ddiv+0x5b2>
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d000      	beq.n	8006fa0 <__aeabi_ddiv+0xa8>
 8006f9e:	e0d5      	b.n	800714c <__aeabi_ddiv+0x254>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	051b      	lsls	r3, r3, #20
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	4652      	mov	r2, sl
 8006fac:	07d2      	lsls	r2, r2, #31
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	0028      	movs	r0, r5
 8006fb2:	0019      	movs	r1, r3
 8006fb4:	b005      	add	sp, #20
 8006fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8006fb8:	46bb      	mov	fp, r7
 8006fba:	46b2      	mov	sl, r6
 8006fbc:	46a9      	mov	r9, r5
 8006fbe:	46a0      	mov	r8, r4
 8006fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2500      	movs	r5, #0
 8006fc6:	4ba8      	ldr	r3, [pc, #672]	; (8007268 <__aeabi_ddiv+0x370>)
 8006fc8:	e7ed      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 8006fca:	46ba      	mov	sl, r7
 8006fcc:	46a0      	mov	r8, r4
 8006fce:	000d      	movs	r5, r1
 8006fd0:	9000      	str	r0, [sp, #0]
 8006fd2:	e7dc      	b.n	8006f8e <__aeabi_ddiv+0x96>
 8006fd4:	4544      	cmp	r4, r8
 8006fd6:	d200      	bcs.n	8006fda <__aeabi_ddiv+0xe2>
 8006fd8:	e1c4      	b.n	8007364 <__aeabi_ddiv+0x46c>
 8006fda:	d100      	bne.n	8006fde <__aeabi_ddiv+0xe6>
 8006fdc:	e1bf      	b.n	800735e <__aeabi_ddiv+0x466>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	425b      	negs	r3, r3
 8006fe2:	469c      	mov	ip, r3
 8006fe4:	002e      	movs	r6, r5
 8006fe6:	4640      	mov	r0, r8
 8006fe8:	2500      	movs	r5, #0
 8006fea:	44e3      	add	fp, ip
 8006fec:	0223      	lsls	r3, r4, #8
 8006fee:	0e0c      	lsrs	r4, r1, #24
 8006ff0:	431c      	orrs	r4, r3
 8006ff2:	0c1b      	lsrs	r3, r3, #16
 8006ff4:	4699      	mov	r9, r3
 8006ff6:	0423      	lsls	r3, r4, #16
 8006ff8:	020a      	lsls	r2, r1, #8
 8006ffa:	0c1f      	lsrs	r7, r3, #16
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	9200      	str	r2, [sp, #0]
 8007000:	9701      	str	r7, [sp, #4]
 8007002:	f7ff f98f 	bl	8006324 <__aeabi_uidivmod>
 8007006:	0002      	movs	r2, r0
 8007008:	437a      	muls	r2, r7
 800700a:	040b      	lsls	r3, r1, #16
 800700c:	0c31      	lsrs	r1, r6, #16
 800700e:	4680      	mov	r8, r0
 8007010:	4319      	orrs	r1, r3
 8007012:	428a      	cmp	r2, r1
 8007014:	d907      	bls.n	8007026 <__aeabi_ddiv+0x12e>
 8007016:	2301      	movs	r3, #1
 8007018:	425b      	negs	r3, r3
 800701a:	469c      	mov	ip, r3
 800701c:	1909      	adds	r1, r1, r4
 800701e:	44e0      	add	r8, ip
 8007020:	428c      	cmp	r4, r1
 8007022:	d800      	bhi.n	8007026 <__aeabi_ddiv+0x12e>
 8007024:	e201      	b.n	800742a <__aeabi_ddiv+0x532>
 8007026:	1a88      	subs	r0, r1, r2
 8007028:	4649      	mov	r1, r9
 800702a:	f7ff f97b 	bl	8006324 <__aeabi_uidivmod>
 800702e:	9a01      	ldr	r2, [sp, #4]
 8007030:	0436      	lsls	r6, r6, #16
 8007032:	4342      	muls	r2, r0
 8007034:	0409      	lsls	r1, r1, #16
 8007036:	0c36      	lsrs	r6, r6, #16
 8007038:	0003      	movs	r3, r0
 800703a:	430e      	orrs	r6, r1
 800703c:	42b2      	cmp	r2, r6
 800703e:	d904      	bls.n	800704a <__aeabi_ddiv+0x152>
 8007040:	1936      	adds	r6, r6, r4
 8007042:	3b01      	subs	r3, #1
 8007044:	42b4      	cmp	r4, r6
 8007046:	d800      	bhi.n	800704a <__aeabi_ddiv+0x152>
 8007048:	e1e9      	b.n	800741e <__aeabi_ddiv+0x526>
 800704a:	1ab0      	subs	r0, r6, r2
 800704c:	4642      	mov	r2, r8
 800704e:	9e00      	ldr	r6, [sp, #0]
 8007050:	0412      	lsls	r2, r2, #16
 8007052:	431a      	orrs	r2, r3
 8007054:	0c33      	lsrs	r3, r6, #16
 8007056:	001f      	movs	r7, r3
 8007058:	0c11      	lsrs	r1, r2, #16
 800705a:	4690      	mov	r8, r2
 800705c:	9302      	str	r3, [sp, #8]
 800705e:	0413      	lsls	r3, r2, #16
 8007060:	0432      	lsls	r2, r6, #16
 8007062:	0c16      	lsrs	r6, r2, #16
 8007064:	0032      	movs	r2, r6
 8007066:	0c1b      	lsrs	r3, r3, #16
 8007068:	435a      	muls	r2, r3
 800706a:	9603      	str	r6, [sp, #12]
 800706c:	437b      	muls	r3, r7
 800706e:	434e      	muls	r6, r1
 8007070:	4379      	muls	r1, r7
 8007072:	0c17      	lsrs	r7, r2, #16
 8007074:	46bc      	mov	ip, r7
 8007076:	199b      	adds	r3, r3, r6
 8007078:	4463      	add	r3, ip
 800707a:	429e      	cmp	r6, r3
 800707c:	d903      	bls.n	8007086 <__aeabi_ddiv+0x18e>
 800707e:	2680      	movs	r6, #128	; 0x80
 8007080:	0276      	lsls	r6, r6, #9
 8007082:	46b4      	mov	ip, r6
 8007084:	4461      	add	r1, ip
 8007086:	0c1e      	lsrs	r6, r3, #16
 8007088:	1871      	adds	r1, r6, r1
 800708a:	0416      	lsls	r6, r2, #16
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	0c36      	lsrs	r6, r6, #16
 8007090:	199e      	adds	r6, r3, r6
 8007092:	4288      	cmp	r0, r1
 8007094:	d302      	bcc.n	800709c <__aeabi_ddiv+0x1a4>
 8007096:	d112      	bne.n	80070be <__aeabi_ddiv+0x1c6>
 8007098:	42b5      	cmp	r5, r6
 800709a:	d210      	bcs.n	80070be <__aeabi_ddiv+0x1c6>
 800709c:	4643      	mov	r3, r8
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	9b00      	ldr	r3, [sp, #0]
 80070a2:	469c      	mov	ip, r3
 80070a4:	4465      	add	r5, ip
 80070a6:	001f      	movs	r7, r3
 80070a8:	429d      	cmp	r5, r3
 80070aa:	419b      	sbcs	r3, r3
 80070ac:	425b      	negs	r3, r3
 80070ae:	191b      	adds	r3, r3, r4
 80070b0:	18c0      	adds	r0, r0, r3
 80070b2:	4284      	cmp	r4, r0
 80070b4:	d200      	bcs.n	80070b8 <__aeabi_ddiv+0x1c0>
 80070b6:	e19e      	b.n	80073f6 <__aeabi_ddiv+0x4fe>
 80070b8:	d100      	bne.n	80070bc <__aeabi_ddiv+0x1c4>
 80070ba:	e199      	b.n	80073f0 <__aeabi_ddiv+0x4f8>
 80070bc:	4690      	mov	r8, r2
 80070be:	1bae      	subs	r6, r5, r6
 80070c0:	42b5      	cmp	r5, r6
 80070c2:	41ad      	sbcs	r5, r5
 80070c4:	1a40      	subs	r0, r0, r1
 80070c6:	426d      	negs	r5, r5
 80070c8:	1b40      	subs	r0, r0, r5
 80070ca:	4284      	cmp	r4, r0
 80070cc:	d100      	bne.n	80070d0 <__aeabi_ddiv+0x1d8>
 80070ce:	e1d2      	b.n	8007476 <__aeabi_ddiv+0x57e>
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7ff f927 	bl	8006324 <__aeabi_uidivmod>
 80070d6:	9a01      	ldr	r2, [sp, #4]
 80070d8:	040b      	lsls	r3, r1, #16
 80070da:	4342      	muls	r2, r0
 80070dc:	0c31      	lsrs	r1, r6, #16
 80070de:	0005      	movs	r5, r0
 80070e0:	4319      	orrs	r1, r3
 80070e2:	428a      	cmp	r2, r1
 80070e4:	d900      	bls.n	80070e8 <__aeabi_ddiv+0x1f0>
 80070e6:	e16c      	b.n	80073c2 <__aeabi_ddiv+0x4ca>
 80070e8:	1a88      	subs	r0, r1, r2
 80070ea:	4649      	mov	r1, r9
 80070ec:	f7ff f91a 	bl	8006324 <__aeabi_uidivmod>
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	0436      	lsls	r6, r6, #16
 80070f4:	4342      	muls	r2, r0
 80070f6:	0409      	lsls	r1, r1, #16
 80070f8:	0c36      	lsrs	r6, r6, #16
 80070fa:	0003      	movs	r3, r0
 80070fc:	430e      	orrs	r6, r1
 80070fe:	42b2      	cmp	r2, r6
 8007100:	d900      	bls.n	8007104 <__aeabi_ddiv+0x20c>
 8007102:	e153      	b.n	80073ac <__aeabi_ddiv+0x4b4>
 8007104:	9803      	ldr	r0, [sp, #12]
 8007106:	1ab6      	subs	r6, r6, r2
 8007108:	0002      	movs	r2, r0
 800710a:	042d      	lsls	r5, r5, #16
 800710c:	431d      	orrs	r5, r3
 800710e:	9f02      	ldr	r7, [sp, #8]
 8007110:	042b      	lsls	r3, r5, #16
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	435a      	muls	r2, r3
 8007116:	437b      	muls	r3, r7
 8007118:	469c      	mov	ip, r3
 800711a:	0c29      	lsrs	r1, r5, #16
 800711c:	4348      	muls	r0, r1
 800711e:	0c13      	lsrs	r3, r2, #16
 8007120:	4484      	add	ip, r0
 8007122:	4463      	add	r3, ip
 8007124:	4379      	muls	r1, r7
 8007126:	4298      	cmp	r0, r3
 8007128:	d903      	bls.n	8007132 <__aeabi_ddiv+0x23a>
 800712a:	2080      	movs	r0, #128	; 0x80
 800712c:	0240      	lsls	r0, r0, #9
 800712e:	4684      	mov	ip, r0
 8007130:	4461      	add	r1, ip
 8007132:	0c18      	lsrs	r0, r3, #16
 8007134:	0412      	lsls	r2, r2, #16
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	0c12      	lsrs	r2, r2, #16
 800713a:	1840      	adds	r0, r0, r1
 800713c:	189b      	adds	r3, r3, r2
 800713e:	4286      	cmp	r6, r0
 8007140:	d200      	bcs.n	8007144 <__aeabi_ddiv+0x24c>
 8007142:	e100      	b.n	8007346 <__aeabi_ddiv+0x44e>
 8007144:	d100      	bne.n	8007148 <__aeabi_ddiv+0x250>
 8007146:	e0fb      	b.n	8007340 <__aeabi_ddiv+0x448>
 8007148:	2301      	movs	r3, #1
 800714a:	431d      	orrs	r5, r3
 800714c:	4b49      	ldr	r3, [pc, #292]	; (8007274 <__aeabi_ddiv+0x37c>)
 800714e:	445b      	add	r3, fp
 8007150:	2b00      	cmp	r3, #0
 8007152:	dc00      	bgt.n	8007156 <__aeabi_ddiv+0x25e>
 8007154:	e0aa      	b.n	80072ac <__aeabi_ddiv+0x3b4>
 8007156:	076a      	lsls	r2, r5, #29
 8007158:	d000      	beq.n	800715c <__aeabi_ddiv+0x264>
 800715a:	e13d      	b.n	80073d8 <__aeabi_ddiv+0x4e0>
 800715c:	08e9      	lsrs	r1, r5, #3
 800715e:	4642      	mov	r2, r8
 8007160:	01d2      	lsls	r2, r2, #7
 8007162:	d506      	bpl.n	8007172 <__aeabi_ddiv+0x27a>
 8007164:	4642      	mov	r2, r8
 8007166:	4b44      	ldr	r3, [pc, #272]	; (8007278 <__aeabi_ddiv+0x380>)
 8007168:	401a      	ands	r2, r3
 800716a:	2380      	movs	r3, #128	; 0x80
 800716c:	4690      	mov	r8, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	445b      	add	r3, fp
 8007172:	4a42      	ldr	r2, [pc, #264]	; (800727c <__aeabi_ddiv+0x384>)
 8007174:	4293      	cmp	r3, r2
 8007176:	dd00      	ble.n	800717a <__aeabi_ddiv+0x282>
 8007178:	e723      	b.n	8006fc2 <__aeabi_ddiv+0xca>
 800717a:	4642      	mov	r2, r8
 800717c:	055b      	lsls	r3, r3, #21
 800717e:	0755      	lsls	r5, r2, #29
 8007180:	0252      	lsls	r2, r2, #9
 8007182:	430d      	orrs	r5, r1
 8007184:	0b12      	lsrs	r2, r2, #12
 8007186:	0d5b      	lsrs	r3, r3, #21
 8007188:	e70d      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 800718a:	4651      	mov	r1, sl
 800718c:	4321      	orrs	r1, r4
 800718e:	d100      	bne.n	8007192 <__aeabi_ddiv+0x29a>
 8007190:	e07c      	b.n	800728c <__aeabi_ddiv+0x394>
 8007192:	2c00      	cmp	r4, #0
 8007194:	d100      	bne.n	8007198 <__aeabi_ddiv+0x2a0>
 8007196:	e0fb      	b.n	8007390 <__aeabi_ddiv+0x498>
 8007198:	0020      	movs	r0, r4
 800719a:	f001 f977 	bl	800848c <__clzsi2>
 800719e:	0002      	movs	r2, r0
 80071a0:	3a0b      	subs	r2, #11
 80071a2:	231d      	movs	r3, #29
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	4652      	mov	r2, sl
 80071a8:	0001      	movs	r1, r0
 80071aa:	40da      	lsrs	r2, r3
 80071ac:	4653      	mov	r3, sl
 80071ae:	3908      	subs	r1, #8
 80071b0:	408b      	lsls	r3, r1
 80071b2:	408c      	lsls	r4, r1
 80071b4:	0019      	movs	r1, r3
 80071b6:	4314      	orrs	r4, r2
 80071b8:	4b31      	ldr	r3, [pc, #196]	; (8007280 <__aeabi_ddiv+0x388>)
 80071ba:	4458      	add	r0, fp
 80071bc:	469b      	mov	fp, r3
 80071be:	4483      	add	fp, r0
 80071c0:	2000      	movs	r0, #0
 80071c2:	e6d9      	b.n	8006f78 <__aeabi_ddiv+0x80>
 80071c4:	0003      	movs	r3, r0
 80071c6:	4323      	orrs	r3, r4
 80071c8:	4698      	mov	r8, r3
 80071ca:	d044      	beq.n	8007256 <__aeabi_ddiv+0x35e>
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d100      	bne.n	80071d2 <__aeabi_ddiv+0x2da>
 80071d0:	e0cf      	b.n	8007372 <__aeabi_ddiv+0x47a>
 80071d2:	0020      	movs	r0, r4
 80071d4:	f001 f95a 	bl	800848c <__clzsi2>
 80071d8:	0001      	movs	r1, r0
 80071da:	0002      	movs	r2, r0
 80071dc:	390b      	subs	r1, #11
 80071de:	231d      	movs	r3, #29
 80071e0:	1a5b      	subs	r3, r3, r1
 80071e2:	4649      	mov	r1, r9
 80071e4:	0010      	movs	r0, r2
 80071e6:	40d9      	lsrs	r1, r3
 80071e8:	3808      	subs	r0, #8
 80071ea:	4084      	lsls	r4, r0
 80071ec:	000b      	movs	r3, r1
 80071ee:	464d      	mov	r5, r9
 80071f0:	4323      	orrs	r3, r4
 80071f2:	4698      	mov	r8, r3
 80071f4:	4085      	lsls	r5, r0
 80071f6:	4b23      	ldr	r3, [pc, #140]	; (8007284 <__aeabi_ddiv+0x38c>)
 80071f8:	1a9b      	subs	r3, r3, r2
 80071fa:	469b      	mov	fp, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	4699      	mov	r9, r3
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	e69e      	b.n	8006f42 <__aeabi_ddiv+0x4a>
 8007204:	0002      	movs	r2, r0
 8007206:	4322      	orrs	r2, r4
 8007208:	4690      	mov	r8, r2
 800720a:	d11d      	bne.n	8007248 <__aeabi_ddiv+0x350>
 800720c:	2208      	movs	r2, #8
 800720e:	469b      	mov	fp, r3
 8007210:	2302      	movs	r3, #2
 8007212:	2500      	movs	r5, #0
 8007214:	4691      	mov	r9, r2
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	e693      	b.n	8006f42 <__aeabi_ddiv+0x4a>
 800721a:	4651      	mov	r1, sl
 800721c:	4321      	orrs	r1, r4
 800721e:	d109      	bne.n	8007234 <__aeabi_ddiv+0x33c>
 8007220:	2302      	movs	r3, #2
 8007222:	464a      	mov	r2, r9
 8007224:	431a      	orrs	r2, r3
 8007226:	4b18      	ldr	r3, [pc, #96]	; (8007288 <__aeabi_ddiv+0x390>)
 8007228:	4691      	mov	r9, r2
 800722a:	469c      	mov	ip, r3
 800722c:	2400      	movs	r4, #0
 800722e:	2002      	movs	r0, #2
 8007230:	44e3      	add	fp, ip
 8007232:	e6a1      	b.n	8006f78 <__aeabi_ddiv+0x80>
 8007234:	2303      	movs	r3, #3
 8007236:	464a      	mov	r2, r9
 8007238:	431a      	orrs	r2, r3
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <__aeabi_ddiv+0x390>)
 800723c:	4691      	mov	r9, r2
 800723e:	469c      	mov	ip, r3
 8007240:	4651      	mov	r1, sl
 8007242:	2003      	movs	r0, #3
 8007244:	44e3      	add	fp, ip
 8007246:	e697      	b.n	8006f78 <__aeabi_ddiv+0x80>
 8007248:	220c      	movs	r2, #12
 800724a:	469b      	mov	fp, r3
 800724c:	2303      	movs	r3, #3
 800724e:	46a0      	mov	r8, r4
 8007250:	4691      	mov	r9, r2
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	e675      	b.n	8006f42 <__aeabi_ddiv+0x4a>
 8007256:	2304      	movs	r3, #4
 8007258:	4699      	mov	r9, r3
 800725a:	2300      	movs	r3, #0
 800725c:	469b      	mov	fp, r3
 800725e:	3301      	adds	r3, #1
 8007260:	2500      	movs	r5, #0
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	e66d      	b.n	8006f42 <__aeabi_ddiv+0x4a>
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	000007ff 	.word	0x000007ff
 800726c:	fffffc01 	.word	0xfffffc01
 8007270:	0802af3c 	.word	0x0802af3c
 8007274:	000003ff 	.word	0x000003ff
 8007278:	feffffff 	.word	0xfeffffff
 800727c:	000007fe 	.word	0x000007fe
 8007280:	000003f3 	.word	0x000003f3
 8007284:	fffffc0d 	.word	0xfffffc0d
 8007288:	fffff801 	.word	0xfffff801
 800728c:	464a      	mov	r2, r9
 800728e:	2301      	movs	r3, #1
 8007290:	431a      	orrs	r2, r3
 8007292:	4691      	mov	r9, r2
 8007294:	2400      	movs	r4, #0
 8007296:	2001      	movs	r0, #1
 8007298:	e66e      	b.n	8006f78 <__aeabi_ddiv+0x80>
 800729a:	2300      	movs	r3, #0
 800729c:	2280      	movs	r2, #128	; 0x80
 800729e:	469a      	mov	sl, r3
 80072a0:	2500      	movs	r5, #0
 80072a2:	4b88      	ldr	r3, [pc, #544]	; (80074c4 <__aeabi_ddiv+0x5cc>)
 80072a4:	0312      	lsls	r2, r2, #12
 80072a6:	e67e      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 80072a8:	2501      	movs	r5, #1
 80072aa:	426d      	negs	r5, r5
 80072ac:	2201      	movs	r2, #1
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	2a38      	cmp	r2, #56	; 0x38
 80072b2:	dd00      	ble.n	80072b6 <__aeabi_ddiv+0x3be>
 80072b4:	e674      	b.n	8006fa0 <__aeabi_ddiv+0xa8>
 80072b6:	2a1f      	cmp	r2, #31
 80072b8:	dc00      	bgt.n	80072bc <__aeabi_ddiv+0x3c4>
 80072ba:	e0bd      	b.n	8007438 <__aeabi_ddiv+0x540>
 80072bc:	211f      	movs	r1, #31
 80072be:	4249      	negs	r1, r1
 80072c0:	1acb      	subs	r3, r1, r3
 80072c2:	4641      	mov	r1, r8
 80072c4:	40d9      	lsrs	r1, r3
 80072c6:	000b      	movs	r3, r1
 80072c8:	2a20      	cmp	r2, #32
 80072ca:	d004      	beq.n	80072d6 <__aeabi_ddiv+0x3de>
 80072cc:	4641      	mov	r1, r8
 80072ce:	4a7e      	ldr	r2, [pc, #504]	; (80074c8 <__aeabi_ddiv+0x5d0>)
 80072d0:	445a      	add	r2, fp
 80072d2:	4091      	lsls	r1, r2
 80072d4:	430d      	orrs	r5, r1
 80072d6:	0029      	movs	r1, r5
 80072d8:	1e4a      	subs	r2, r1, #1
 80072da:	4191      	sbcs	r1, r2
 80072dc:	4319      	orrs	r1, r3
 80072de:	2307      	movs	r3, #7
 80072e0:	001d      	movs	r5, r3
 80072e2:	2200      	movs	r2, #0
 80072e4:	400d      	ands	r5, r1
 80072e6:	420b      	tst	r3, r1
 80072e8:	d100      	bne.n	80072ec <__aeabi_ddiv+0x3f4>
 80072ea:	e0d0      	b.n	800748e <__aeabi_ddiv+0x596>
 80072ec:	220f      	movs	r2, #15
 80072ee:	2300      	movs	r3, #0
 80072f0:	400a      	ands	r2, r1
 80072f2:	2a04      	cmp	r2, #4
 80072f4:	d100      	bne.n	80072f8 <__aeabi_ddiv+0x400>
 80072f6:	e0c7      	b.n	8007488 <__aeabi_ddiv+0x590>
 80072f8:	1d0a      	adds	r2, r1, #4
 80072fa:	428a      	cmp	r2, r1
 80072fc:	4189      	sbcs	r1, r1
 80072fe:	4249      	negs	r1, r1
 8007300:	185b      	adds	r3, r3, r1
 8007302:	0011      	movs	r1, r2
 8007304:	021a      	lsls	r2, r3, #8
 8007306:	d400      	bmi.n	800730a <__aeabi_ddiv+0x412>
 8007308:	e0be      	b.n	8007488 <__aeabi_ddiv+0x590>
 800730a:	2301      	movs	r3, #1
 800730c:	2200      	movs	r2, #0
 800730e:	2500      	movs	r5, #0
 8007310:	e649      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 8007312:	2280      	movs	r2, #128	; 0x80
 8007314:	4643      	mov	r3, r8
 8007316:	0312      	lsls	r2, r2, #12
 8007318:	4213      	tst	r3, r2
 800731a:	d008      	beq.n	800732e <__aeabi_ddiv+0x436>
 800731c:	4214      	tst	r4, r2
 800731e:	d106      	bne.n	800732e <__aeabi_ddiv+0x436>
 8007320:	4322      	orrs	r2, r4
 8007322:	0312      	lsls	r2, r2, #12
 8007324:	46ba      	mov	sl, r7
 8007326:	000d      	movs	r5, r1
 8007328:	4b66      	ldr	r3, [pc, #408]	; (80074c4 <__aeabi_ddiv+0x5cc>)
 800732a:	0b12      	lsrs	r2, r2, #12
 800732c:	e63b      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 800732e:	2280      	movs	r2, #128	; 0x80
 8007330:	4643      	mov	r3, r8
 8007332:	0312      	lsls	r2, r2, #12
 8007334:	431a      	orrs	r2, r3
 8007336:	0312      	lsls	r2, r2, #12
 8007338:	46b2      	mov	sl, r6
 800733a:	4b62      	ldr	r3, [pc, #392]	; (80074c4 <__aeabi_ddiv+0x5cc>)
 800733c:	0b12      	lsrs	r2, r2, #12
 800733e:	e632      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 8007340:	2b00      	cmp	r3, #0
 8007342:	d100      	bne.n	8007346 <__aeabi_ddiv+0x44e>
 8007344:	e702      	b.n	800714c <__aeabi_ddiv+0x254>
 8007346:	19a6      	adds	r6, r4, r6
 8007348:	1e6a      	subs	r2, r5, #1
 800734a:	42a6      	cmp	r6, r4
 800734c:	d200      	bcs.n	8007350 <__aeabi_ddiv+0x458>
 800734e:	e089      	b.n	8007464 <__aeabi_ddiv+0x56c>
 8007350:	4286      	cmp	r6, r0
 8007352:	d200      	bcs.n	8007356 <__aeabi_ddiv+0x45e>
 8007354:	e09f      	b.n	8007496 <__aeabi_ddiv+0x59e>
 8007356:	d100      	bne.n	800735a <__aeabi_ddiv+0x462>
 8007358:	e0af      	b.n	80074ba <__aeabi_ddiv+0x5c2>
 800735a:	0015      	movs	r5, r2
 800735c:	e6f4      	b.n	8007148 <__aeabi_ddiv+0x250>
 800735e:	42a9      	cmp	r1, r5
 8007360:	d900      	bls.n	8007364 <__aeabi_ddiv+0x46c>
 8007362:	e63c      	b.n	8006fde <__aeabi_ddiv+0xe6>
 8007364:	4643      	mov	r3, r8
 8007366:	07de      	lsls	r6, r3, #31
 8007368:	0858      	lsrs	r0, r3, #1
 800736a:	086b      	lsrs	r3, r5, #1
 800736c:	431e      	orrs	r6, r3
 800736e:	07ed      	lsls	r5, r5, #31
 8007370:	e63c      	b.n	8006fec <__aeabi_ddiv+0xf4>
 8007372:	f001 f88b 	bl	800848c <__clzsi2>
 8007376:	0001      	movs	r1, r0
 8007378:	0002      	movs	r2, r0
 800737a:	3115      	adds	r1, #21
 800737c:	3220      	adds	r2, #32
 800737e:	291c      	cmp	r1, #28
 8007380:	dc00      	bgt.n	8007384 <__aeabi_ddiv+0x48c>
 8007382:	e72c      	b.n	80071de <__aeabi_ddiv+0x2e6>
 8007384:	464b      	mov	r3, r9
 8007386:	3808      	subs	r0, #8
 8007388:	4083      	lsls	r3, r0
 800738a:	2500      	movs	r5, #0
 800738c:	4698      	mov	r8, r3
 800738e:	e732      	b.n	80071f6 <__aeabi_ddiv+0x2fe>
 8007390:	f001 f87c 	bl	800848c <__clzsi2>
 8007394:	0003      	movs	r3, r0
 8007396:	001a      	movs	r2, r3
 8007398:	3215      	adds	r2, #21
 800739a:	3020      	adds	r0, #32
 800739c:	2a1c      	cmp	r2, #28
 800739e:	dc00      	bgt.n	80073a2 <__aeabi_ddiv+0x4aa>
 80073a0:	e6ff      	b.n	80071a2 <__aeabi_ddiv+0x2aa>
 80073a2:	4654      	mov	r4, sl
 80073a4:	3b08      	subs	r3, #8
 80073a6:	2100      	movs	r1, #0
 80073a8:	409c      	lsls	r4, r3
 80073aa:	e705      	b.n	80071b8 <__aeabi_ddiv+0x2c0>
 80073ac:	1936      	adds	r6, r6, r4
 80073ae:	3b01      	subs	r3, #1
 80073b0:	42b4      	cmp	r4, r6
 80073b2:	d900      	bls.n	80073b6 <__aeabi_ddiv+0x4be>
 80073b4:	e6a6      	b.n	8007104 <__aeabi_ddiv+0x20c>
 80073b6:	42b2      	cmp	r2, r6
 80073b8:	d800      	bhi.n	80073bc <__aeabi_ddiv+0x4c4>
 80073ba:	e6a3      	b.n	8007104 <__aeabi_ddiv+0x20c>
 80073bc:	1e83      	subs	r3, r0, #2
 80073be:	1936      	adds	r6, r6, r4
 80073c0:	e6a0      	b.n	8007104 <__aeabi_ddiv+0x20c>
 80073c2:	1909      	adds	r1, r1, r4
 80073c4:	3d01      	subs	r5, #1
 80073c6:	428c      	cmp	r4, r1
 80073c8:	d900      	bls.n	80073cc <__aeabi_ddiv+0x4d4>
 80073ca:	e68d      	b.n	80070e8 <__aeabi_ddiv+0x1f0>
 80073cc:	428a      	cmp	r2, r1
 80073ce:	d800      	bhi.n	80073d2 <__aeabi_ddiv+0x4da>
 80073d0:	e68a      	b.n	80070e8 <__aeabi_ddiv+0x1f0>
 80073d2:	1e85      	subs	r5, r0, #2
 80073d4:	1909      	adds	r1, r1, r4
 80073d6:	e687      	b.n	80070e8 <__aeabi_ddiv+0x1f0>
 80073d8:	220f      	movs	r2, #15
 80073da:	402a      	ands	r2, r5
 80073dc:	2a04      	cmp	r2, #4
 80073de:	d100      	bne.n	80073e2 <__aeabi_ddiv+0x4ea>
 80073e0:	e6bc      	b.n	800715c <__aeabi_ddiv+0x264>
 80073e2:	1d29      	adds	r1, r5, #4
 80073e4:	42a9      	cmp	r1, r5
 80073e6:	41ad      	sbcs	r5, r5
 80073e8:	426d      	negs	r5, r5
 80073ea:	08c9      	lsrs	r1, r1, #3
 80073ec:	44a8      	add	r8, r5
 80073ee:	e6b6      	b.n	800715e <__aeabi_ddiv+0x266>
 80073f0:	42af      	cmp	r7, r5
 80073f2:	d900      	bls.n	80073f6 <__aeabi_ddiv+0x4fe>
 80073f4:	e662      	b.n	80070bc <__aeabi_ddiv+0x1c4>
 80073f6:	4281      	cmp	r1, r0
 80073f8:	d804      	bhi.n	8007404 <__aeabi_ddiv+0x50c>
 80073fa:	d000      	beq.n	80073fe <__aeabi_ddiv+0x506>
 80073fc:	e65e      	b.n	80070bc <__aeabi_ddiv+0x1c4>
 80073fe:	42ae      	cmp	r6, r5
 8007400:	d800      	bhi.n	8007404 <__aeabi_ddiv+0x50c>
 8007402:	e65b      	b.n	80070bc <__aeabi_ddiv+0x1c4>
 8007404:	2302      	movs	r3, #2
 8007406:	425b      	negs	r3, r3
 8007408:	469c      	mov	ip, r3
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	44e0      	add	r8, ip
 800740e:	469c      	mov	ip, r3
 8007410:	4465      	add	r5, ip
 8007412:	429d      	cmp	r5, r3
 8007414:	419b      	sbcs	r3, r3
 8007416:	425b      	negs	r3, r3
 8007418:	191b      	adds	r3, r3, r4
 800741a:	18c0      	adds	r0, r0, r3
 800741c:	e64f      	b.n	80070be <__aeabi_ddiv+0x1c6>
 800741e:	42b2      	cmp	r2, r6
 8007420:	d800      	bhi.n	8007424 <__aeabi_ddiv+0x52c>
 8007422:	e612      	b.n	800704a <__aeabi_ddiv+0x152>
 8007424:	1e83      	subs	r3, r0, #2
 8007426:	1936      	adds	r6, r6, r4
 8007428:	e60f      	b.n	800704a <__aeabi_ddiv+0x152>
 800742a:	428a      	cmp	r2, r1
 800742c:	d800      	bhi.n	8007430 <__aeabi_ddiv+0x538>
 800742e:	e5fa      	b.n	8007026 <__aeabi_ddiv+0x12e>
 8007430:	1e83      	subs	r3, r0, #2
 8007432:	4698      	mov	r8, r3
 8007434:	1909      	adds	r1, r1, r4
 8007436:	e5f6      	b.n	8007026 <__aeabi_ddiv+0x12e>
 8007438:	4b24      	ldr	r3, [pc, #144]	; (80074cc <__aeabi_ddiv+0x5d4>)
 800743a:	0028      	movs	r0, r5
 800743c:	445b      	add	r3, fp
 800743e:	4641      	mov	r1, r8
 8007440:	409d      	lsls	r5, r3
 8007442:	4099      	lsls	r1, r3
 8007444:	40d0      	lsrs	r0, r2
 8007446:	1e6b      	subs	r3, r5, #1
 8007448:	419d      	sbcs	r5, r3
 800744a:	4643      	mov	r3, r8
 800744c:	4301      	orrs	r1, r0
 800744e:	4329      	orrs	r1, r5
 8007450:	40d3      	lsrs	r3, r2
 8007452:	074a      	lsls	r2, r1, #29
 8007454:	d100      	bne.n	8007458 <__aeabi_ddiv+0x560>
 8007456:	e755      	b.n	8007304 <__aeabi_ddiv+0x40c>
 8007458:	220f      	movs	r2, #15
 800745a:	400a      	ands	r2, r1
 800745c:	2a04      	cmp	r2, #4
 800745e:	d000      	beq.n	8007462 <__aeabi_ddiv+0x56a>
 8007460:	e74a      	b.n	80072f8 <__aeabi_ddiv+0x400>
 8007462:	e74f      	b.n	8007304 <__aeabi_ddiv+0x40c>
 8007464:	0015      	movs	r5, r2
 8007466:	4286      	cmp	r6, r0
 8007468:	d000      	beq.n	800746c <__aeabi_ddiv+0x574>
 800746a:	e66d      	b.n	8007148 <__aeabi_ddiv+0x250>
 800746c:	9a00      	ldr	r2, [sp, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d000      	beq.n	8007474 <__aeabi_ddiv+0x57c>
 8007472:	e669      	b.n	8007148 <__aeabi_ddiv+0x250>
 8007474:	e66a      	b.n	800714c <__aeabi_ddiv+0x254>
 8007476:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <__aeabi_ddiv+0x5d8>)
 8007478:	445b      	add	r3, fp
 800747a:	2b00      	cmp	r3, #0
 800747c:	dc00      	bgt.n	8007480 <__aeabi_ddiv+0x588>
 800747e:	e713      	b.n	80072a8 <__aeabi_ddiv+0x3b0>
 8007480:	2501      	movs	r5, #1
 8007482:	2100      	movs	r1, #0
 8007484:	44a8      	add	r8, r5
 8007486:	e66a      	b.n	800715e <__aeabi_ddiv+0x266>
 8007488:	075d      	lsls	r5, r3, #29
 800748a:	025b      	lsls	r3, r3, #9
 800748c:	0b1a      	lsrs	r2, r3, #12
 800748e:	08c9      	lsrs	r1, r1, #3
 8007490:	2300      	movs	r3, #0
 8007492:	430d      	orrs	r5, r1
 8007494:	e587      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 8007496:	9900      	ldr	r1, [sp, #0]
 8007498:	3d02      	subs	r5, #2
 800749a:	004a      	lsls	r2, r1, #1
 800749c:	428a      	cmp	r2, r1
 800749e:	41bf      	sbcs	r7, r7
 80074a0:	427f      	negs	r7, r7
 80074a2:	193f      	adds	r7, r7, r4
 80074a4:	19f6      	adds	r6, r6, r7
 80074a6:	9200      	str	r2, [sp, #0]
 80074a8:	e7dd      	b.n	8007466 <__aeabi_ddiv+0x56e>
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	4643      	mov	r3, r8
 80074ae:	0312      	lsls	r2, r2, #12
 80074b0:	431a      	orrs	r2, r3
 80074b2:	0312      	lsls	r2, r2, #12
 80074b4:	4b03      	ldr	r3, [pc, #12]	; (80074c4 <__aeabi_ddiv+0x5cc>)
 80074b6:	0b12      	lsrs	r2, r2, #12
 80074b8:	e575      	b.n	8006fa6 <__aeabi_ddiv+0xae>
 80074ba:	9900      	ldr	r1, [sp, #0]
 80074bc:	4299      	cmp	r1, r3
 80074be:	d3ea      	bcc.n	8007496 <__aeabi_ddiv+0x59e>
 80074c0:	0015      	movs	r5, r2
 80074c2:	e7d3      	b.n	800746c <__aeabi_ddiv+0x574>
 80074c4:	000007ff 	.word	0x000007ff
 80074c8:	0000043e 	.word	0x0000043e
 80074cc:	0000041e 	.word	0x0000041e
 80074d0:	000003ff 	.word	0x000003ff

080074d4 <__eqdf2>:
 80074d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074d6:	464e      	mov	r6, r9
 80074d8:	4645      	mov	r5, r8
 80074da:	46de      	mov	lr, fp
 80074dc:	4657      	mov	r7, sl
 80074de:	4690      	mov	r8, r2
 80074e0:	b5e0      	push	{r5, r6, r7, lr}
 80074e2:	0017      	movs	r7, r2
 80074e4:	031a      	lsls	r2, r3, #12
 80074e6:	0b12      	lsrs	r2, r2, #12
 80074e8:	0005      	movs	r5, r0
 80074ea:	4684      	mov	ip, r0
 80074ec:	4819      	ldr	r0, [pc, #100]	; (8007554 <__eqdf2+0x80>)
 80074ee:	030e      	lsls	r6, r1, #12
 80074f0:	004c      	lsls	r4, r1, #1
 80074f2:	4691      	mov	r9, r2
 80074f4:	005a      	lsls	r2, r3, #1
 80074f6:	0fdb      	lsrs	r3, r3, #31
 80074f8:	469b      	mov	fp, r3
 80074fa:	0b36      	lsrs	r6, r6, #12
 80074fc:	0d64      	lsrs	r4, r4, #21
 80074fe:	0fc9      	lsrs	r1, r1, #31
 8007500:	0d52      	lsrs	r2, r2, #21
 8007502:	4284      	cmp	r4, r0
 8007504:	d019      	beq.n	800753a <__eqdf2+0x66>
 8007506:	4282      	cmp	r2, r0
 8007508:	d010      	beq.n	800752c <__eqdf2+0x58>
 800750a:	2001      	movs	r0, #1
 800750c:	4294      	cmp	r4, r2
 800750e:	d10e      	bne.n	800752e <__eqdf2+0x5a>
 8007510:	454e      	cmp	r6, r9
 8007512:	d10c      	bne.n	800752e <__eqdf2+0x5a>
 8007514:	2001      	movs	r0, #1
 8007516:	45c4      	cmp	ip, r8
 8007518:	d109      	bne.n	800752e <__eqdf2+0x5a>
 800751a:	4559      	cmp	r1, fp
 800751c:	d017      	beq.n	800754e <__eqdf2+0x7a>
 800751e:	2c00      	cmp	r4, #0
 8007520:	d105      	bne.n	800752e <__eqdf2+0x5a>
 8007522:	0030      	movs	r0, r6
 8007524:	4328      	orrs	r0, r5
 8007526:	1e43      	subs	r3, r0, #1
 8007528:	4198      	sbcs	r0, r3
 800752a:	e000      	b.n	800752e <__eqdf2+0x5a>
 800752c:	2001      	movs	r0, #1
 800752e:	bcf0      	pop	{r4, r5, r6, r7}
 8007530:	46bb      	mov	fp, r7
 8007532:	46b2      	mov	sl, r6
 8007534:	46a9      	mov	r9, r5
 8007536:	46a0      	mov	r8, r4
 8007538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800753a:	0033      	movs	r3, r6
 800753c:	2001      	movs	r0, #1
 800753e:	432b      	orrs	r3, r5
 8007540:	d1f5      	bne.n	800752e <__eqdf2+0x5a>
 8007542:	42a2      	cmp	r2, r4
 8007544:	d1f3      	bne.n	800752e <__eqdf2+0x5a>
 8007546:	464b      	mov	r3, r9
 8007548:	433b      	orrs	r3, r7
 800754a:	d1f0      	bne.n	800752e <__eqdf2+0x5a>
 800754c:	e7e2      	b.n	8007514 <__eqdf2+0x40>
 800754e:	2000      	movs	r0, #0
 8007550:	e7ed      	b.n	800752e <__eqdf2+0x5a>
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	000007ff 	.word	0x000007ff

08007558 <__gedf2>:
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	4647      	mov	r7, r8
 800755c:	46ce      	mov	lr, r9
 800755e:	0004      	movs	r4, r0
 8007560:	0018      	movs	r0, r3
 8007562:	0016      	movs	r6, r2
 8007564:	031b      	lsls	r3, r3, #12
 8007566:	0b1b      	lsrs	r3, r3, #12
 8007568:	4d2d      	ldr	r5, [pc, #180]	; (8007620 <__gedf2+0xc8>)
 800756a:	004a      	lsls	r2, r1, #1
 800756c:	4699      	mov	r9, r3
 800756e:	b580      	push	{r7, lr}
 8007570:	0043      	lsls	r3, r0, #1
 8007572:	030f      	lsls	r7, r1, #12
 8007574:	46a4      	mov	ip, r4
 8007576:	46b0      	mov	r8, r6
 8007578:	0b3f      	lsrs	r7, r7, #12
 800757a:	0d52      	lsrs	r2, r2, #21
 800757c:	0fc9      	lsrs	r1, r1, #31
 800757e:	0d5b      	lsrs	r3, r3, #21
 8007580:	0fc0      	lsrs	r0, r0, #31
 8007582:	42aa      	cmp	r2, r5
 8007584:	d021      	beq.n	80075ca <__gedf2+0x72>
 8007586:	42ab      	cmp	r3, r5
 8007588:	d013      	beq.n	80075b2 <__gedf2+0x5a>
 800758a:	2a00      	cmp	r2, #0
 800758c:	d122      	bne.n	80075d4 <__gedf2+0x7c>
 800758e:	433c      	orrs	r4, r7
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <__gedf2+0x42>
 8007594:	464d      	mov	r5, r9
 8007596:	432e      	orrs	r6, r5
 8007598:	d022      	beq.n	80075e0 <__gedf2+0x88>
 800759a:	2c00      	cmp	r4, #0
 800759c:	d010      	beq.n	80075c0 <__gedf2+0x68>
 800759e:	4281      	cmp	r1, r0
 80075a0:	d022      	beq.n	80075e8 <__gedf2+0x90>
 80075a2:	2002      	movs	r0, #2
 80075a4:	3901      	subs	r1, #1
 80075a6:	4008      	ands	r0, r1
 80075a8:	3801      	subs	r0, #1
 80075aa:	bcc0      	pop	{r6, r7}
 80075ac:	46b9      	mov	r9, r7
 80075ae:	46b0      	mov	r8, r6
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b2:	464d      	mov	r5, r9
 80075b4:	432e      	orrs	r6, r5
 80075b6:	d129      	bne.n	800760c <__gedf2+0xb4>
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	d1f0      	bne.n	800759e <__gedf2+0x46>
 80075bc:	433c      	orrs	r4, r7
 80075be:	d1ee      	bne.n	800759e <__gedf2+0x46>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1f2      	bne.n	80075aa <__gedf2+0x52>
 80075c4:	2001      	movs	r0, #1
 80075c6:	4240      	negs	r0, r0
 80075c8:	e7ef      	b.n	80075aa <__gedf2+0x52>
 80075ca:	003d      	movs	r5, r7
 80075cc:	4325      	orrs	r5, r4
 80075ce:	d11d      	bne.n	800760c <__gedf2+0xb4>
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d0ee      	beq.n	80075b2 <__gedf2+0x5a>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e2      	bne.n	800759e <__gedf2+0x46>
 80075d8:	464c      	mov	r4, r9
 80075da:	4326      	orrs	r6, r4
 80075dc:	d1df      	bne.n	800759e <__gedf2+0x46>
 80075de:	e7e0      	b.n	80075a2 <__gedf2+0x4a>
 80075e0:	2000      	movs	r0, #0
 80075e2:	2c00      	cmp	r4, #0
 80075e4:	d0e1      	beq.n	80075aa <__gedf2+0x52>
 80075e6:	e7dc      	b.n	80075a2 <__gedf2+0x4a>
 80075e8:	429a      	cmp	r2, r3
 80075ea:	dc0a      	bgt.n	8007602 <__gedf2+0xaa>
 80075ec:	dbe8      	blt.n	80075c0 <__gedf2+0x68>
 80075ee:	454f      	cmp	r7, r9
 80075f0:	d8d7      	bhi.n	80075a2 <__gedf2+0x4a>
 80075f2:	d00e      	beq.n	8007612 <__gedf2+0xba>
 80075f4:	2000      	movs	r0, #0
 80075f6:	454f      	cmp	r7, r9
 80075f8:	d2d7      	bcs.n	80075aa <__gedf2+0x52>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	d0e2      	beq.n	80075c4 <__gedf2+0x6c>
 80075fe:	0008      	movs	r0, r1
 8007600:	e7d3      	b.n	80075aa <__gedf2+0x52>
 8007602:	4243      	negs	r3, r0
 8007604:	4158      	adcs	r0, r3
 8007606:	0040      	lsls	r0, r0, #1
 8007608:	3801      	subs	r0, #1
 800760a:	e7ce      	b.n	80075aa <__gedf2+0x52>
 800760c:	2002      	movs	r0, #2
 800760e:	4240      	negs	r0, r0
 8007610:	e7cb      	b.n	80075aa <__gedf2+0x52>
 8007612:	45c4      	cmp	ip, r8
 8007614:	d8c5      	bhi.n	80075a2 <__gedf2+0x4a>
 8007616:	2000      	movs	r0, #0
 8007618:	45c4      	cmp	ip, r8
 800761a:	d2c6      	bcs.n	80075aa <__gedf2+0x52>
 800761c:	e7ed      	b.n	80075fa <__gedf2+0xa2>
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	000007ff 	.word	0x000007ff

08007624 <__ledf2>:
 8007624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007626:	4647      	mov	r7, r8
 8007628:	46ce      	mov	lr, r9
 800762a:	0004      	movs	r4, r0
 800762c:	0018      	movs	r0, r3
 800762e:	0016      	movs	r6, r2
 8007630:	031b      	lsls	r3, r3, #12
 8007632:	0b1b      	lsrs	r3, r3, #12
 8007634:	4d2c      	ldr	r5, [pc, #176]	; (80076e8 <__ledf2+0xc4>)
 8007636:	004a      	lsls	r2, r1, #1
 8007638:	4699      	mov	r9, r3
 800763a:	b580      	push	{r7, lr}
 800763c:	0043      	lsls	r3, r0, #1
 800763e:	030f      	lsls	r7, r1, #12
 8007640:	46a4      	mov	ip, r4
 8007642:	46b0      	mov	r8, r6
 8007644:	0b3f      	lsrs	r7, r7, #12
 8007646:	0d52      	lsrs	r2, r2, #21
 8007648:	0fc9      	lsrs	r1, r1, #31
 800764a:	0d5b      	lsrs	r3, r3, #21
 800764c:	0fc0      	lsrs	r0, r0, #31
 800764e:	42aa      	cmp	r2, r5
 8007650:	d00d      	beq.n	800766e <__ledf2+0x4a>
 8007652:	42ab      	cmp	r3, r5
 8007654:	d010      	beq.n	8007678 <__ledf2+0x54>
 8007656:	2a00      	cmp	r2, #0
 8007658:	d127      	bne.n	80076aa <__ledf2+0x86>
 800765a:	433c      	orrs	r4, r7
 800765c:	2b00      	cmp	r3, #0
 800765e:	d111      	bne.n	8007684 <__ledf2+0x60>
 8007660:	464d      	mov	r5, r9
 8007662:	432e      	orrs	r6, r5
 8007664:	d10e      	bne.n	8007684 <__ledf2+0x60>
 8007666:	2000      	movs	r0, #0
 8007668:	2c00      	cmp	r4, #0
 800766a:	d015      	beq.n	8007698 <__ledf2+0x74>
 800766c:	e00e      	b.n	800768c <__ledf2+0x68>
 800766e:	003d      	movs	r5, r7
 8007670:	4325      	orrs	r5, r4
 8007672:	d110      	bne.n	8007696 <__ledf2+0x72>
 8007674:	4293      	cmp	r3, r2
 8007676:	d118      	bne.n	80076aa <__ledf2+0x86>
 8007678:	464d      	mov	r5, r9
 800767a:	432e      	orrs	r6, r5
 800767c:	d10b      	bne.n	8007696 <__ledf2+0x72>
 800767e:	2a00      	cmp	r2, #0
 8007680:	d102      	bne.n	8007688 <__ledf2+0x64>
 8007682:	433c      	orrs	r4, r7
 8007684:	2c00      	cmp	r4, #0
 8007686:	d00b      	beq.n	80076a0 <__ledf2+0x7c>
 8007688:	4281      	cmp	r1, r0
 800768a:	d014      	beq.n	80076b6 <__ledf2+0x92>
 800768c:	2002      	movs	r0, #2
 800768e:	3901      	subs	r1, #1
 8007690:	4008      	ands	r0, r1
 8007692:	3801      	subs	r0, #1
 8007694:	e000      	b.n	8007698 <__ledf2+0x74>
 8007696:	2002      	movs	r0, #2
 8007698:	bcc0      	pop	{r6, r7}
 800769a:	46b9      	mov	r9, r7
 800769c:	46b0      	mov	r8, r6
 800769e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1f9      	bne.n	8007698 <__ledf2+0x74>
 80076a4:	2001      	movs	r0, #1
 80076a6:	4240      	negs	r0, r0
 80076a8:	e7f6      	b.n	8007698 <__ledf2+0x74>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ec      	bne.n	8007688 <__ledf2+0x64>
 80076ae:	464c      	mov	r4, r9
 80076b0:	4326      	orrs	r6, r4
 80076b2:	d1e9      	bne.n	8007688 <__ledf2+0x64>
 80076b4:	e7ea      	b.n	800768c <__ledf2+0x68>
 80076b6:	429a      	cmp	r2, r3
 80076b8:	dd04      	ble.n	80076c4 <__ledf2+0xa0>
 80076ba:	4243      	negs	r3, r0
 80076bc:	4158      	adcs	r0, r3
 80076be:	0040      	lsls	r0, r0, #1
 80076c0:	3801      	subs	r0, #1
 80076c2:	e7e9      	b.n	8007698 <__ledf2+0x74>
 80076c4:	429a      	cmp	r2, r3
 80076c6:	dbeb      	blt.n	80076a0 <__ledf2+0x7c>
 80076c8:	454f      	cmp	r7, r9
 80076ca:	d8df      	bhi.n	800768c <__ledf2+0x68>
 80076cc:	d006      	beq.n	80076dc <__ledf2+0xb8>
 80076ce:	2000      	movs	r0, #0
 80076d0:	454f      	cmp	r7, r9
 80076d2:	d2e1      	bcs.n	8007698 <__ledf2+0x74>
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d0e5      	beq.n	80076a4 <__ledf2+0x80>
 80076d8:	0008      	movs	r0, r1
 80076da:	e7dd      	b.n	8007698 <__ledf2+0x74>
 80076dc:	45c4      	cmp	ip, r8
 80076de:	d8d5      	bhi.n	800768c <__ledf2+0x68>
 80076e0:	2000      	movs	r0, #0
 80076e2:	45c4      	cmp	ip, r8
 80076e4:	d2d8      	bcs.n	8007698 <__ledf2+0x74>
 80076e6:	e7f5      	b.n	80076d4 <__ledf2+0xb0>
 80076e8:	000007ff 	.word	0x000007ff

080076ec <__aeabi_dmul>:
 80076ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ee:	4645      	mov	r5, r8
 80076f0:	46de      	mov	lr, fp
 80076f2:	4657      	mov	r7, sl
 80076f4:	464e      	mov	r6, r9
 80076f6:	b5e0      	push	{r5, r6, r7, lr}
 80076f8:	001f      	movs	r7, r3
 80076fa:	030b      	lsls	r3, r1, #12
 80076fc:	0b1b      	lsrs	r3, r3, #12
 80076fe:	469b      	mov	fp, r3
 8007700:	004d      	lsls	r5, r1, #1
 8007702:	0fcb      	lsrs	r3, r1, #31
 8007704:	0004      	movs	r4, r0
 8007706:	4691      	mov	r9, r2
 8007708:	4698      	mov	r8, r3
 800770a:	b087      	sub	sp, #28
 800770c:	0d6d      	lsrs	r5, r5, #21
 800770e:	d100      	bne.n	8007712 <__aeabi_dmul+0x26>
 8007710:	e1cd      	b.n	8007aae <__aeabi_dmul+0x3c2>
 8007712:	4bce      	ldr	r3, [pc, #824]	; (8007a4c <__aeabi_dmul+0x360>)
 8007714:	429d      	cmp	r5, r3
 8007716:	d100      	bne.n	800771a <__aeabi_dmul+0x2e>
 8007718:	e1e9      	b.n	8007aee <__aeabi_dmul+0x402>
 800771a:	465a      	mov	r2, fp
 800771c:	0f43      	lsrs	r3, r0, #29
 800771e:	00d2      	lsls	r2, r2, #3
 8007720:	4313      	orrs	r3, r2
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	0412      	lsls	r2, r2, #16
 8007726:	431a      	orrs	r2, r3
 8007728:	00c3      	lsls	r3, r0, #3
 800772a:	469a      	mov	sl, r3
 800772c:	4bc8      	ldr	r3, [pc, #800]	; (8007a50 <__aeabi_dmul+0x364>)
 800772e:	4693      	mov	fp, r2
 8007730:	469c      	mov	ip, r3
 8007732:	2300      	movs	r3, #0
 8007734:	2600      	movs	r6, #0
 8007736:	4465      	add	r5, ip
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	033c      	lsls	r4, r7, #12
 800773c:	007b      	lsls	r3, r7, #1
 800773e:	4648      	mov	r0, r9
 8007740:	0b24      	lsrs	r4, r4, #12
 8007742:	0d5b      	lsrs	r3, r3, #21
 8007744:	0fff      	lsrs	r7, r7, #31
 8007746:	2b00      	cmp	r3, #0
 8007748:	d100      	bne.n	800774c <__aeabi_dmul+0x60>
 800774a:	e189      	b.n	8007a60 <__aeabi_dmul+0x374>
 800774c:	4abf      	ldr	r2, [pc, #764]	; (8007a4c <__aeabi_dmul+0x360>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d019      	beq.n	8007786 <__aeabi_dmul+0x9a>
 8007752:	0f42      	lsrs	r2, r0, #29
 8007754:	00e4      	lsls	r4, r4, #3
 8007756:	4322      	orrs	r2, r4
 8007758:	2480      	movs	r4, #128	; 0x80
 800775a:	0424      	lsls	r4, r4, #16
 800775c:	4314      	orrs	r4, r2
 800775e:	4abc      	ldr	r2, [pc, #752]	; (8007a50 <__aeabi_dmul+0x364>)
 8007760:	2100      	movs	r1, #0
 8007762:	4694      	mov	ip, r2
 8007764:	4642      	mov	r2, r8
 8007766:	4463      	add	r3, ip
 8007768:	195b      	adds	r3, r3, r5
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	9b01      	ldr	r3, [sp, #4]
 800776e:	407a      	eors	r2, r7
 8007770:	3301      	adds	r3, #1
 8007772:	00c0      	lsls	r0, r0, #3
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	9302      	str	r3, [sp, #8]
 8007778:	2e0a      	cmp	r6, #10
 800777a:	dd1c      	ble.n	80077b6 <__aeabi_dmul+0xca>
 800777c:	003a      	movs	r2, r7
 800777e:	2e0b      	cmp	r6, #11
 8007780:	d05e      	beq.n	8007840 <__aeabi_dmul+0x154>
 8007782:	4647      	mov	r7, r8
 8007784:	e056      	b.n	8007834 <__aeabi_dmul+0x148>
 8007786:	4649      	mov	r1, r9
 8007788:	4bb0      	ldr	r3, [pc, #704]	; (8007a4c <__aeabi_dmul+0x360>)
 800778a:	4321      	orrs	r1, r4
 800778c:	18eb      	adds	r3, r5, r3
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	2900      	cmp	r1, #0
 8007792:	d12a      	bne.n	80077ea <__aeabi_dmul+0xfe>
 8007794:	2080      	movs	r0, #128	; 0x80
 8007796:	2202      	movs	r2, #2
 8007798:	0100      	lsls	r0, r0, #4
 800779a:	002b      	movs	r3, r5
 800779c:	4684      	mov	ip, r0
 800779e:	4316      	orrs	r6, r2
 80077a0:	4642      	mov	r2, r8
 80077a2:	4463      	add	r3, ip
 80077a4:	407a      	eors	r2, r7
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	9302      	str	r3, [sp, #8]
 80077aa:	2e0a      	cmp	r6, #10
 80077ac:	dd00      	ble.n	80077b0 <__aeabi_dmul+0xc4>
 80077ae:	e231      	b.n	8007c14 <__aeabi_dmul+0x528>
 80077b0:	2000      	movs	r0, #0
 80077b2:	2400      	movs	r4, #0
 80077b4:	2102      	movs	r1, #2
 80077b6:	2e02      	cmp	r6, #2
 80077b8:	dc26      	bgt.n	8007808 <__aeabi_dmul+0x11c>
 80077ba:	3e01      	subs	r6, #1
 80077bc:	2e01      	cmp	r6, #1
 80077be:	d852      	bhi.n	8007866 <__aeabi_dmul+0x17a>
 80077c0:	2902      	cmp	r1, #2
 80077c2:	d04c      	beq.n	800785e <__aeabi_dmul+0x172>
 80077c4:	2901      	cmp	r1, #1
 80077c6:	d000      	beq.n	80077ca <__aeabi_dmul+0xde>
 80077c8:	e118      	b.n	80079fc <__aeabi_dmul+0x310>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2400      	movs	r4, #0
 80077ce:	2500      	movs	r5, #0
 80077d0:	051b      	lsls	r3, r3, #20
 80077d2:	4323      	orrs	r3, r4
 80077d4:	07d2      	lsls	r2, r2, #31
 80077d6:	4313      	orrs	r3, r2
 80077d8:	0028      	movs	r0, r5
 80077da:	0019      	movs	r1, r3
 80077dc:	b007      	add	sp, #28
 80077de:	bcf0      	pop	{r4, r5, r6, r7}
 80077e0:	46bb      	mov	fp, r7
 80077e2:	46b2      	mov	sl, r6
 80077e4:	46a9      	mov	r9, r5
 80077e6:	46a0      	mov	r8, r4
 80077e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ea:	2180      	movs	r1, #128	; 0x80
 80077ec:	2203      	movs	r2, #3
 80077ee:	0109      	lsls	r1, r1, #4
 80077f0:	002b      	movs	r3, r5
 80077f2:	468c      	mov	ip, r1
 80077f4:	4316      	orrs	r6, r2
 80077f6:	4642      	mov	r2, r8
 80077f8:	4463      	add	r3, ip
 80077fa:	407a      	eors	r2, r7
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	9302      	str	r3, [sp, #8]
 8007800:	2e0a      	cmp	r6, #10
 8007802:	dd00      	ble.n	8007806 <__aeabi_dmul+0x11a>
 8007804:	e228      	b.n	8007c58 <__aeabi_dmul+0x56c>
 8007806:	2103      	movs	r1, #3
 8007808:	2501      	movs	r5, #1
 800780a:	40b5      	lsls	r5, r6
 800780c:	46ac      	mov	ip, r5
 800780e:	26a6      	movs	r6, #166	; 0xa6
 8007810:	4663      	mov	r3, ip
 8007812:	00f6      	lsls	r6, r6, #3
 8007814:	4035      	ands	r5, r6
 8007816:	4233      	tst	r3, r6
 8007818:	d10b      	bne.n	8007832 <__aeabi_dmul+0x146>
 800781a:	2690      	movs	r6, #144	; 0x90
 800781c:	00b6      	lsls	r6, r6, #2
 800781e:	4233      	tst	r3, r6
 8007820:	d118      	bne.n	8007854 <__aeabi_dmul+0x168>
 8007822:	3eb9      	subs	r6, #185	; 0xb9
 8007824:	3eff      	subs	r6, #255	; 0xff
 8007826:	421e      	tst	r6, r3
 8007828:	d01d      	beq.n	8007866 <__aeabi_dmul+0x17a>
 800782a:	46a3      	mov	fp, r4
 800782c:	4682      	mov	sl, r0
 800782e:	9100      	str	r1, [sp, #0]
 8007830:	e000      	b.n	8007834 <__aeabi_dmul+0x148>
 8007832:	0017      	movs	r7, r2
 8007834:	9900      	ldr	r1, [sp, #0]
 8007836:	003a      	movs	r2, r7
 8007838:	2902      	cmp	r1, #2
 800783a:	d010      	beq.n	800785e <__aeabi_dmul+0x172>
 800783c:	465c      	mov	r4, fp
 800783e:	4650      	mov	r0, sl
 8007840:	2903      	cmp	r1, #3
 8007842:	d1bf      	bne.n	80077c4 <__aeabi_dmul+0xd8>
 8007844:	2380      	movs	r3, #128	; 0x80
 8007846:	031b      	lsls	r3, r3, #12
 8007848:	431c      	orrs	r4, r3
 800784a:	0324      	lsls	r4, r4, #12
 800784c:	0005      	movs	r5, r0
 800784e:	4b7f      	ldr	r3, [pc, #508]	; (8007a4c <__aeabi_dmul+0x360>)
 8007850:	0b24      	lsrs	r4, r4, #12
 8007852:	e7bd      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007854:	2480      	movs	r4, #128	; 0x80
 8007856:	2200      	movs	r2, #0
 8007858:	4b7c      	ldr	r3, [pc, #496]	; (8007a4c <__aeabi_dmul+0x360>)
 800785a:	0324      	lsls	r4, r4, #12
 800785c:	e7b8      	b.n	80077d0 <__aeabi_dmul+0xe4>
 800785e:	2400      	movs	r4, #0
 8007860:	2500      	movs	r5, #0
 8007862:	4b7a      	ldr	r3, [pc, #488]	; (8007a4c <__aeabi_dmul+0x360>)
 8007864:	e7b4      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007866:	4653      	mov	r3, sl
 8007868:	041e      	lsls	r6, r3, #16
 800786a:	0c36      	lsrs	r6, r6, #16
 800786c:	0c1f      	lsrs	r7, r3, #16
 800786e:	0033      	movs	r3, r6
 8007870:	0c01      	lsrs	r1, r0, #16
 8007872:	0400      	lsls	r0, r0, #16
 8007874:	0c00      	lsrs	r0, r0, #16
 8007876:	4343      	muls	r3, r0
 8007878:	4698      	mov	r8, r3
 800787a:	0003      	movs	r3, r0
 800787c:	437b      	muls	r3, r7
 800787e:	4699      	mov	r9, r3
 8007880:	0033      	movs	r3, r6
 8007882:	434b      	muls	r3, r1
 8007884:	469c      	mov	ip, r3
 8007886:	4643      	mov	r3, r8
 8007888:	000d      	movs	r5, r1
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	469a      	mov	sl, r3
 800788e:	437d      	muls	r5, r7
 8007890:	44cc      	add	ip, r9
 8007892:	44d4      	add	ip, sl
 8007894:	9500      	str	r5, [sp, #0]
 8007896:	45e1      	cmp	r9, ip
 8007898:	d904      	bls.n	80078a4 <__aeabi_dmul+0x1b8>
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	025b      	lsls	r3, r3, #9
 800789e:	4699      	mov	r9, r3
 80078a0:	444d      	add	r5, r9
 80078a2:	9500      	str	r5, [sp, #0]
 80078a4:	4663      	mov	r3, ip
 80078a6:	0c1b      	lsrs	r3, r3, #16
 80078a8:	001d      	movs	r5, r3
 80078aa:	4663      	mov	r3, ip
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	469c      	mov	ip, r3
 80078b0:	4643      	mov	r3, r8
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	4698      	mov	r8, r3
 80078b8:	4663      	mov	r3, ip
 80078ba:	4443      	add	r3, r8
 80078bc:	9303      	str	r3, [sp, #12]
 80078be:	0c23      	lsrs	r3, r4, #16
 80078c0:	4698      	mov	r8, r3
 80078c2:	0033      	movs	r3, r6
 80078c4:	0424      	lsls	r4, r4, #16
 80078c6:	0c24      	lsrs	r4, r4, #16
 80078c8:	4363      	muls	r3, r4
 80078ca:	469c      	mov	ip, r3
 80078cc:	0023      	movs	r3, r4
 80078ce:	437b      	muls	r3, r7
 80078d0:	4699      	mov	r9, r3
 80078d2:	4643      	mov	r3, r8
 80078d4:	435e      	muls	r6, r3
 80078d6:	435f      	muls	r7, r3
 80078d8:	444e      	add	r6, r9
 80078da:	4663      	mov	r3, ip
 80078dc:	46b2      	mov	sl, r6
 80078de:	0c1e      	lsrs	r6, r3, #16
 80078e0:	4456      	add	r6, sl
 80078e2:	45b1      	cmp	r9, r6
 80078e4:	d903      	bls.n	80078ee <__aeabi_dmul+0x202>
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	025b      	lsls	r3, r3, #9
 80078ea:	4699      	mov	r9, r3
 80078ec:	444f      	add	r7, r9
 80078ee:	0c33      	lsrs	r3, r6, #16
 80078f0:	4699      	mov	r9, r3
 80078f2:	003b      	movs	r3, r7
 80078f4:	444b      	add	r3, r9
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	4663      	mov	r3, ip
 80078fa:	46ac      	mov	ip, r5
 80078fc:	041f      	lsls	r7, r3, #16
 80078fe:	0c3f      	lsrs	r7, r7, #16
 8007900:	0436      	lsls	r6, r6, #16
 8007902:	19f6      	adds	r6, r6, r7
 8007904:	44b4      	add	ip, r6
 8007906:	4663      	mov	r3, ip
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	465b      	mov	r3, fp
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	469c      	mov	ip, r3
 8007910:	465b      	mov	r3, fp
 8007912:	041f      	lsls	r7, r3, #16
 8007914:	0c3f      	lsrs	r7, r7, #16
 8007916:	003b      	movs	r3, r7
 8007918:	4343      	muls	r3, r0
 800791a:	4699      	mov	r9, r3
 800791c:	4663      	mov	r3, ip
 800791e:	4343      	muls	r3, r0
 8007920:	469a      	mov	sl, r3
 8007922:	464b      	mov	r3, r9
 8007924:	4660      	mov	r0, ip
 8007926:	0c1b      	lsrs	r3, r3, #16
 8007928:	469b      	mov	fp, r3
 800792a:	4348      	muls	r0, r1
 800792c:	4379      	muls	r1, r7
 800792e:	4451      	add	r1, sl
 8007930:	4459      	add	r1, fp
 8007932:	458a      	cmp	sl, r1
 8007934:	d903      	bls.n	800793e <__aeabi_dmul+0x252>
 8007936:	2380      	movs	r3, #128	; 0x80
 8007938:	025b      	lsls	r3, r3, #9
 800793a:	469a      	mov	sl, r3
 800793c:	4450      	add	r0, sl
 800793e:	0c0b      	lsrs	r3, r1, #16
 8007940:	469a      	mov	sl, r3
 8007942:	464b      	mov	r3, r9
 8007944:	041b      	lsls	r3, r3, #16
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	4699      	mov	r9, r3
 800794a:	003b      	movs	r3, r7
 800794c:	4363      	muls	r3, r4
 800794e:	0409      	lsls	r1, r1, #16
 8007950:	4645      	mov	r5, r8
 8007952:	4449      	add	r1, r9
 8007954:	4699      	mov	r9, r3
 8007956:	4663      	mov	r3, ip
 8007958:	435c      	muls	r4, r3
 800795a:	436b      	muls	r3, r5
 800795c:	469c      	mov	ip, r3
 800795e:	464b      	mov	r3, r9
 8007960:	0c1b      	lsrs	r3, r3, #16
 8007962:	4698      	mov	r8, r3
 8007964:	436f      	muls	r7, r5
 8007966:	193f      	adds	r7, r7, r4
 8007968:	4447      	add	r7, r8
 800796a:	4450      	add	r0, sl
 800796c:	42bc      	cmp	r4, r7
 800796e:	d903      	bls.n	8007978 <__aeabi_dmul+0x28c>
 8007970:	2380      	movs	r3, #128	; 0x80
 8007972:	025b      	lsls	r3, r3, #9
 8007974:	4698      	mov	r8, r3
 8007976:	44c4      	add	ip, r8
 8007978:	9b04      	ldr	r3, [sp, #16]
 800797a:	9d00      	ldr	r5, [sp, #0]
 800797c:	4698      	mov	r8, r3
 800797e:	4445      	add	r5, r8
 8007980:	42b5      	cmp	r5, r6
 8007982:	41b6      	sbcs	r6, r6
 8007984:	4273      	negs	r3, r6
 8007986:	4698      	mov	r8, r3
 8007988:	464b      	mov	r3, r9
 800798a:	041e      	lsls	r6, r3, #16
 800798c:	9b05      	ldr	r3, [sp, #20]
 800798e:	043c      	lsls	r4, r7, #16
 8007990:	4699      	mov	r9, r3
 8007992:	0c36      	lsrs	r6, r6, #16
 8007994:	19a4      	adds	r4, r4, r6
 8007996:	444c      	add	r4, r9
 8007998:	46a1      	mov	r9, r4
 800799a:	4683      	mov	fp, r0
 800799c:	186e      	adds	r6, r5, r1
 800799e:	44c1      	add	r9, r8
 80079a0:	428e      	cmp	r6, r1
 80079a2:	4189      	sbcs	r1, r1
 80079a4:	44cb      	add	fp, r9
 80079a6:	465d      	mov	r5, fp
 80079a8:	4249      	negs	r1, r1
 80079aa:	186d      	adds	r5, r5, r1
 80079ac:	429c      	cmp	r4, r3
 80079ae:	41a4      	sbcs	r4, r4
 80079b0:	45c1      	cmp	r9, r8
 80079b2:	419b      	sbcs	r3, r3
 80079b4:	4583      	cmp	fp, r0
 80079b6:	4180      	sbcs	r0, r0
 80079b8:	428d      	cmp	r5, r1
 80079ba:	4189      	sbcs	r1, r1
 80079bc:	425b      	negs	r3, r3
 80079be:	4264      	negs	r4, r4
 80079c0:	431c      	orrs	r4, r3
 80079c2:	4240      	negs	r0, r0
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	4249      	negs	r1, r1
 80079c8:	4301      	orrs	r1, r0
 80079ca:	0270      	lsls	r0, r6, #9
 80079cc:	0c3f      	lsrs	r7, r7, #16
 80079ce:	4318      	orrs	r0, r3
 80079d0:	19e4      	adds	r4, r4, r7
 80079d2:	1e47      	subs	r7, r0, #1
 80079d4:	41b8      	sbcs	r0, r7
 80079d6:	1864      	adds	r4, r4, r1
 80079d8:	4464      	add	r4, ip
 80079da:	0df6      	lsrs	r6, r6, #23
 80079dc:	0261      	lsls	r1, r4, #9
 80079de:	4330      	orrs	r0, r6
 80079e0:	0dec      	lsrs	r4, r5, #23
 80079e2:	026e      	lsls	r6, r5, #9
 80079e4:	430c      	orrs	r4, r1
 80079e6:	4330      	orrs	r0, r6
 80079e8:	01c9      	lsls	r1, r1, #7
 80079ea:	d400      	bmi.n	80079ee <__aeabi_dmul+0x302>
 80079ec:	e0f1      	b.n	8007bd2 <__aeabi_dmul+0x4e6>
 80079ee:	2101      	movs	r1, #1
 80079f0:	0843      	lsrs	r3, r0, #1
 80079f2:	4001      	ands	r1, r0
 80079f4:	430b      	orrs	r3, r1
 80079f6:	07e0      	lsls	r0, r4, #31
 80079f8:	4318      	orrs	r0, r3
 80079fa:	0864      	lsrs	r4, r4, #1
 80079fc:	4915      	ldr	r1, [pc, #84]	; (8007a54 <__aeabi_dmul+0x368>)
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	468c      	mov	ip, r1
 8007a02:	4463      	add	r3, ip
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc00      	bgt.n	8007a0a <__aeabi_dmul+0x31e>
 8007a08:	e097      	b.n	8007b3a <__aeabi_dmul+0x44e>
 8007a0a:	0741      	lsls	r1, r0, #29
 8007a0c:	d009      	beq.n	8007a22 <__aeabi_dmul+0x336>
 8007a0e:	210f      	movs	r1, #15
 8007a10:	4001      	ands	r1, r0
 8007a12:	2904      	cmp	r1, #4
 8007a14:	d005      	beq.n	8007a22 <__aeabi_dmul+0x336>
 8007a16:	1d01      	adds	r1, r0, #4
 8007a18:	4281      	cmp	r1, r0
 8007a1a:	4180      	sbcs	r0, r0
 8007a1c:	4240      	negs	r0, r0
 8007a1e:	1824      	adds	r4, r4, r0
 8007a20:	0008      	movs	r0, r1
 8007a22:	01e1      	lsls	r1, r4, #7
 8007a24:	d506      	bpl.n	8007a34 <__aeabi_dmul+0x348>
 8007a26:	2180      	movs	r1, #128	; 0x80
 8007a28:	00c9      	lsls	r1, r1, #3
 8007a2a:	468c      	mov	ip, r1
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <__aeabi_dmul+0x36c>)
 8007a2e:	401c      	ands	r4, r3
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	4463      	add	r3, ip
 8007a34:	4909      	ldr	r1, [pc, #36]	; (8007a5c <__aeabi_dmul+0x370>)
 8007a36:	428b      	cmp	r3, r1
 8007a38:	dd00      	ble.n	8007a3c <__aeabi_dmul+0x350>
 8007a3a:	e710      	b.n	800785e <__aeabi_dmul+0x172>
 8007a3c:	0761      	lsls	r1, r4, #29
 8007a3e:	08c5      	lsrs	r5, r0, #3
 8007a40:	0264      	lsls	r4, r4, #9
 8007a42:	055b      	lsls	r3, r3, #21
 8007a44:	430d      	orrs	r5, r1
 8007a46:	0b24      	lsrs	r4, r4, #12
 8007a48:	0d5b      	lsrs	r3, r3, #21
 8007a4a:	e6c1      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007a4c:	000007ff 	.word	0x000007ff
 8007a50:	fffffc01 	.word	0xfffffc01
 8007a54:	000003ff 	.word	0x000003ff
 8007a58:	feffffff 	.word	0xfeffffff
 8007a5c:	000007fe 	.word	0x000007fe
 8007a60:	464b      	mov	r3, r9
 8007a62:	4323      	orrs	r3, r4
 8007a64:	d059      	beq.n	8007b1a <__aeabi_dmul+0x42e>
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d100      	bne.n	8007a6c <__aeabi_dmul+0x380>
 8007a6a:	e0a3      	b.n	8007bb4 <__aeabi_dmul+0x4c8>
 8007a6c:	0020      	movs	r0, r4
 8007a6e:	f000 fd0d 	bl	800848c <__clzsi2>
 8007a72:	0001      	movs	r1, r0
 8007a74:	0003      	movs	r3, r0
 8007a76:	390b      	subs	r1, #11
 8007a78:	221d      	movs	r2, #29
 8007a7a:	1a52      	subs	r2, r2, r1
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	0018      	movs	r0, r3
 8007a80:	40d1      	lsrs	r1, r2
 8007a82:	464a      	mov	r2, r9
 8007a84:	3808      	subs	r0, #8
 8007a86:	4082      	lsls	r2, r0
 8007a88:	4084      	lsls	r4, r0
 8007a8a:	0010      	movs	r0, r2
 8007a8c:	430c      	orrs	r4, r1
 8007a8e:	4a74      	ldr	r2, [pc, #464]	; (8007c60 <__aeabi_dmul+0x574>)
 8007a90:	1aeb      	subs	r3, r5, r3
 8007a92:	4694      	mov	ip, r2
 8007a94:	4642      	mov	r2, r8
 8007a96:	4463      	add	r3, ip
 8007a98:	9301      	str	r3, [sp, #4]
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	407a      	eors	r2, r7
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	9302      	str	r3, [sp, #8]
 8007aa6:	2e0a      	cmp	r6, #10
 8007aa8:	dd00      	ble.n	8007aac <__aeabi_dmul+0x3c0>
 8007aaa:	e667      	b.n	800777c <__aeabi_dmul+0x90>
 8007aac:	e683      	b.n	80077b6 <__aeabi_dmul+0xca>
 8007aae:	465b      	mov	r3, fp
 8007ab0:	4303      	orrs	r3, r0
 8007ab2:	469a      	mov	sl, r3
 8007ab4:	d02a      	beq.n	8007b0c <__aeabi_dmul+0x420>
 8007ab6:	465b      	mov	r3, fp
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d06d      	beq.n	8007b98 <__aeabi_dmul+0x4ac>
 8007abc:	4658      	mov	r0, fp
 8007abe:	f000 fce5 	bl	800848c <__clzsi2>
 8007ac2:	0001      	movs	r1, r0
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	390b      	subs	r1, #11
 8007ac8:	221d      	movs	r2, #29
 8007aca:	1a52      	subs	r2, r2, r1
 8007acc:	0021      	movs	r1, r4
 8007ace:	0018      	movs	r0, r3
 8007ad0:	465d      	mov	r5, fp
 8007ad2:	40d1      	lsrs	r1, r2
 8007ad4:	3808      	subs	r0, #8
 8007ad6:	4085      	lsls	r5, r0
 8007ad8:	000a      	movs	r2, r1
 8007ada:	4084      	lsls	r4, r0
 8007adc:	432a      	orrs	r2, r5
 8007ade:	4693      	mov	fp, r2
 8007ae0:	46a2      	mov	sl, r4
 8007ae2:	4d5f      	ldr	r5, [pc, #380]	; (8007c60 <__aeabi_dmul+0x574>)
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	1aed      	subs	r5, r5, r3
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	e625      	b.n	800773a <__aeabi_dmul+0x4e>
 8007aee:	465b      	mov	r3, fp
 8007af0:	4303      	orrs	r3, r0
 8007af2:	469a      	mov	sl, r3
 8007af4:	d105      	bne.n	8007b02 <__aeabi_dmul+0x416>
 8007af6:	2300      	movs	r3, #0
 8007af8:	469b      	mov	fp, r3
 8007afa:	3302      	adds	r3, #2
 8007afc:	2608      	movs	r6, #8
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	e61b      	b.n	800773a <__aeabi_dmul+0x4e>
 8007b02:	2303      	movs	r3, #3
 8007b04:	4682      	mov	sl, r0
 8007b06:	260c      	movs	r6, #12
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	e616      	b.n	800773a <__aeabi_dmul+0x4e>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	469b      	mov	fp, r3
 8007b10:	3301      	adds	r3, #1
 8007b12:	2604      	movs	r6, #4
 8007b14:	2500      	movs	r5, #0
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	e60f      	b.n	800773a <__aeabi_dmul+0x4e>
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	9501      	str	r5, [sp, #4]
 8007b20:	431e      	orrs	r6, r3
 8007b22:	9b01      	ldr	r3, [sp, #4]
 8007b24:	407a      	eors	r2, r7
 8007b26:	3301      	adds	r3, #1
 8007b28:	2400      	movs	r4, #0
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	9302      	str	r3, [sp, #8]
 8007b32:	2e0a      	cmp	r6, #10
 8007b34:	dd00      	ble.n	8007b38 <__aeabi_dmul+0x44c>
 8007b36:	e621      	b.n	800777c <__aeabi_dmul+0x90>
 8007b38:	e63d      	b.n	80077b6 <__aeabi_dmul+0xca>
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	1ac9      	subs	r1, r1, r3
 8007b3e:	2938      	cmp	r1, #56	; 0x38
 8007b40:	dd00      	ble.n	8007b44 <__aeabi_dmul+0x458>
 8007b42:	e642      	b.n	80077ca <__aeabi_dmul+0xde>
 8007b44:	291f      	cmp	r1, #31
 8007b46:	dd47      	ble.n	8007bd8 <__aeabi_dmul+0x4ec>
 8007b48:	261f      	movs	r6, #31
 8007b4a:	0025      	movs	r5, r4
 8007b4c:	4276      	negs	r6, r6
 8007b4e:	1af3      	subs	r3, r6, r3
 8007b50:	40dd      	lsrs	r5, r3
 8007b52:	002b      	movs	r3, r5
 8007b54:	2920      	cmp	r1, #32
 8007b56:	d005      	beq.n	8007b64 <__aeabi_dmul+0x478>
 8007b58:	4942      	ldr	r1, [pc, #264]	; (8007c64 <__aeabi_dmul+0x578>)
 8007b5a:	9d02      	ldr	r5, [sp, #8]
 8007b5c:	468c      	mov	ip, r1
 8007b5e:	4465      	add	r5, ip
 8007b60:	40ac      	lsls	r4, r5
 8007b62:	4320      	orrs	r0, r4
 8007b64:	1e41      	subs	r1, r0, #1
 8007b66:	4188      	sbcs	r0, r1
 8007b68:	4318      	orrs	r0, r3
 8007b6a:	2307      	movs	r3, #7
 8007b6c:	001d      	movs	r5, r3
 8007b6e:	2400      	movs	r4, #0
 8007b70:	4005      	ands	r5, r0
 8007b72:	4203      	tst	r3, r0
 8007b74:	d04a      	beq.n	8007c0c <__aeabi_dmul+0x520>
 8007b76:	230f      	movs	r3, #15
 8007b78:	2400      	movs	r4, #0
 8007b7a:	4003      	ands	r3, r0
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d042      	beq.n	8007c06 <__aeabi_dmul+0x51a>
 8007b80:	1d03      	adds	r3, r0, #4
 8007b82:	4283      	cmp	r3, r0
 8007b84:	4180      	sbcs	r0, r0
 8007b86:	4240      	negs	r0, r0
 8007b88:	1824      	adds	r4, r4, r0
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	0223      	lsls	r3, r4, #8
 8007b8e:	d53a      	bpl.n	8007c06 <__aeabi_dmul+0x51a>
 8007b90:	2301      	movs	r3, #1
 8007b92:	2400      	movs	r4, #0
 8007b94:	2500      	movs	r5, #0
 8007b96:	e61b      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007b98:	f000 fc78 	bl	800848c <__clzsi2>
 8007b9c:	0001      	movs	r1, r0
 8007b9e:	0003      	movs	r3, r0
 8007ba0:	3115      	adds	r1, #21
 8007ba2:	3320      	adds	r3, #32
 8007ba4:	291c      	cmp	r1, #28
 8007ba6:	dd8f      	ble.n	8007ac8 <__aeabi_dmul+0x3dc>
 8007ba8:	3808      	subs	r0, #8
 8007baa:	2200      	movs	r2, #0
 8007bac:	4084      	lsls	r4, r0
 8007bae:	4692      	mov	sl, r2
 8007bb0:	46a3      	mov	fp, r4
 8007bb2:	e796      	b.n	8007ae2 <__aeabi_dmul+0x3f6>
 8007bb4:	f000 fc6a 	bl	800848c <__clzsi2>
 8007bb8:	0001      	movs	r1, r0
 8007bba:	0003      	movs	r3, r0
 8007bbc:	3115      	adds	r1, #21
 8007bbe:	3320      	adds	r3, #32
 8007bc0:	291c      	cmp	r1, #28
 8007bc2:	dc00      	bgt.n	8007bc6 <__aeabi_dmul+0x4da>
 8007bc4:	e758      	b.n	8007a78 <__aeabi_dmul+0x38c>
 8007bc6:	0002      	movs	r2, r0
 8007bc8:	464c      	mov	r4, r9
 8007bca:	3a08      	subs	r2, #8
 8007bcc:	2000      	movs	r0, #0
 8007bce:	4094      	lsls	r4, r2
 8007bd0:	e75d      	b.n	8007a8e <__aeabi_dmul+0x3a2>
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	e711      	b.n	80079fc <__aeabi_dmul+0x310>
 8007bd8:	4b23      	ldr	r3, [pc, #140]	; (8007c68 <__aeabi_dmul+0x57c>)
 8007bda:	0026      	movs	r6, r4
 8007bdc:	469c      	mov	ip, r3
 8007bde:	0003      	movs	r3, r0
 8007be0:	9d02      	ldr	r5, [sp, #8]
 8007be2:	40cb      	lsrs	r3, r1
 8007be4:	4465      	add	r5, ip
 8007be6:	40ae      	lsls	r6, r5
 8007be8:	431e      	orrs	r6, r3
 8007bea:	0003      	movs	r3, r0
 8007bec:	40ab      	lsls	r3, r5
 8007bee:	1e58      	subs	r0, r3, #1
 8007bf0:	4183      	sbcs	r3, r0
 8007bf2:	0030      	movs	r0, r6
 8007bf4:	4318      	orrs	r0, r3
 8007bf6:	40cc      	lsrs	r4, r1
 8007bf8:	0743      	lsls	r3, r0, #29
 8007bfa:	d0c7      	beq.n	8007b8c <__aeabi_dmul+0x4a0>
 8007bfc:	230f      	movs	r3, #15
 8007bfe:	4003      	ands	r3, r0
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	d1bd      	bne.n	8007b80 <__aeabi_dmul+0x494>
 8007c04:	e7c2      	b.n	8007b8c <__aeabi_dmul+0x4a0>
 8007c06:	0765      	lsls	r5, r4, #29
 8007c08:	0264      	lsls	r4, r4, #9
 8007c0a:	0b24      	lsrs	r4, r4, #12
 8007c0c:	08c0      	lsrs	r0, r0, #3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4305      	orrs	r5, r0
 8007c12:	e5dd      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007c14:	2500      	movs	r5, #0
 8007c16:	2302      	movs	r3, #2
 8007c18:	2e0f      	cmp	r6, #15
 8007c1a:	d10c      	bne.n	8007c36 <__aeabi_dmul+0x54a>
 8007c1c:	2480      	movs	r4, #128	; 0x80
 8007c1e:	465b      	mov	r3, fp
 8007c20:	0324      	lsls	r4, r4, #12
 8007c22:	4223      	tst	r3, r4
 8007c24:	d00e      	beq.n	8007c44 <__aeabi_dmul+0x558>
 8007c26:	4221      	tst	r1, r4
 8007c28:	d10c      	bne.n	8007c44 <__aeabi_dmul+0x558>
 8007c2a:	430c      	orrs	r4, r1
 8007c2c:	0324      	lsls	r4, r4, #12
 8007c2e:	003a      	movs	r2, r7
 8007c30:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <__aeabi_dmul+0x580>)
 8007c32:	0b24      	lsrs	r4, r4, #12
 8007c34:	e5cc      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007c36:	2e0b      	cmp	r6, #11
 8007c38:	d000      	beq.n	8007c3c <__aeabi_dmul+0x550>
 8007c3a:	e5a2      	b.n	8007782 <__aeabi_dmul+0x96>
 8007c3c:	468b      	mov	fp, r1
 8007c3e:	46aa      	mov	sl, r5
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	e5f7      	b.n	8007834 <__aeabi_dmul+0x148>
 8007c44:	2480      	movs	r4, #128	; 0x80
 8007c46:	465b      	mov	r3, fp
 8007c48:	0324      	lsls	r4, r4, #12
 8007c4a:	431c      	orrs	r4, r3
 8007c4c:	0324      	lsls	r4, r4, #12
 8007c4e:	4642      	mov	r2, r8
 8007c50:	4655      	mov	r5, sl
 8007c52:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <__aeabi_dmul+0x580>)
 8007c54:	0b24      	lsrs	r4, r4, #12
 8007c56:	e5bb      	b.n	80077d0 <__aeabi_dmul+0xe4>
 8007c58:	464d      	mov	r5, r9
 8007c5a:	0021      	movs	r1, r4
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e7db      	b.n	8007c18 <__aeabi_dmul+0x52c>
 8007c60:	fffffc0d 	.word	0xfffffc0d
 8007c64:	0000043e 	.word	0x0000043e
 8007c68:	0000041e 	.word	0x0000041e
 8007c6c:	000007ff 	.word	0x000007ff

08007c70 <__aeabi_dsub>:
 8007c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c72:	4657      	mov	r7, sl
 8007c74:	464e      	mov	r6, r9
 8007c76:	4645      	mov	r5, r8
 8007c78:	46de      	mov	lr, fp
 8007c7a:	b5e0      	push	{r5, r6, r7, lr}
 8007c7c:	000d      	movs	r5, r1
 8007c7e:	0004      	movs	r4, r0
 8007c80:	0019      	movs	r1, r3
 8007c82:	0010      	movs	r0, r2
 8007c84:	032b      	lsls	r3, r5, #12
 8007c86:	0a5b      	lsrs	r3, r3, #9
 8007c88:	0f62      	lsrs	r2, r4, #29
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	00e3      	lsls	r3, r4, #3
 8007c8e:	030c      	lsls	r4, r1, #12
 8007c90:	0a64      	lsrs	r4, r4, #9
 8007c92:	0f47      	lsrs	r7, r0, #29
 8007c94:	4327      	orrs	r7, r4
 8007c96:	4cd0      	ldr	r4, [pc, #832]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007c98:	006e      	lsls	r6, r5, #1
 8007c9a:	4691      	mov	r9, r2
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	004a      	lsls	r2, r1, #1
 8007ca0:	00c0      	lsls	r0, r0, #3
 8007ca2:	4698      	mov	r8, r3
 8007ca4:	46a2      	mov	sl, r4
 8007ca6:	0d76      	lsrs	r6, r6, #21
 8007ca8:	0fed      	lsrs	r5, r5, #31
 8007caa:	0d52      	lsrs	r2, r2, #21
 8007cac:	0fc9      	lsrs	r1, r1, #31
 8007cae:	9001      	str	r0, [sp, #4]
 8007cb0:	42a2      	cmp	r2, r4
 8007cb2:	d100      	bne.n	8007cb6 <__aeabi_dsub+0x46>
 8007cb4:	e0b9      	b.n	8007e2a <__aeabi_dsub+0x1ba>
 8007cb6:	2401      	movs	r4, #1
 8007cb8:	4061      	eors	r1, r4
 8007cba:	468b      	mov	fp, r1
 8007cbc:	428d      	cmp	r5, r1
 8007cbe:	d100      	bne.n	8007cc2 <__aeabi_dsub+0x52>
 8007cc0:	e08d      	b.n	8007dde <__aeabi_dsub+0x16e>
 8007cc2:	1ab4      	subs	r4, r6, r2
 8007cc4:	46a4      	mov	ip, r4
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	dc00      	bgt.n	8007ccc <__aeabi_dsub+0x5c>
 8007cca:	e0b7      	b.n	8007e3c <__aeabi_dsub+0x1cc>
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	d100      	bne.n	8007cd2 <__aeabi_dsub+0x62>
 8007cd0:	e0cb      	b.n	8007e6a <__aeabi_dsub+0x1fa>
 8007cd2:	4ac1      	ldr	r2, [pc, #772]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007cd4:	4296      	cmp	r6, r2
 8007cd6:	d100      	bne.n	8007cda <__aeabi_dsub+0x6a>
 8007cd8:	e186      	b.n	8007fe8 <__aeabi_dsub+0x378>
 8007cda:	2280      	movs	r2, #128	; 0x80
 8007cdc:	0412      	lsls	r2, r2, #16
 8007cde:	4317      	orrs	r7, r2
 8007ce0:	4662      	mov	r2, ip
 8007ce2:	2a38      	cmp	r2, #56	; 0x38
 8007ce4:	dd00      	ble.n	8007ce8 <__aeabi_dsub+0x78>
 8007ce6:	e1a4      	b.n	8008032 <__aeabi_dsub+0x3c2>
 8007ce8:	2a1f      	cmp	r2, #31
 8007cea:	dd00      	ble.n	8007cee <__aeabi_dsub+0x7e>
 8007cec:	e21d      	b.n	800812a <__aeabi_dsub+0x4ba>
 8007cee:	4661      	mov	r1, ip
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	003c      	movs	r4, r7
 8007cf4:	1a52      	subs	r2, r2, r1
 8007cf6:	0001      	movs	r1, r0
 8007cf8:	4090      	lsls	r0, r2
 8007cfa:	4094      	lsls	r4, r2
 8007cfc:	1e42      	subs	r2, r0, #1
 8007cfe:	4190      	sbcs	r0, r2
 8007d00:	4662      	mov	r2, ip
 8007d02:	46a0      	mov	r8, r4
 8007d04:	4664      	mov	r4, ip
 8007d06:	40d7      	lsrs	r7, r2
 8007d08:	464a      	mov	r2, r9
 8007d0a:	40e1      	lsrs	r1, r4
 8007d0c:	4644      	mov	r4, r8
 8007d0e:	1bd2      	subs	r2, r2, r7
 8007d10:	4691      	mov	r9, r2
 8007d12:	430c      	orrs	r4, r1
 8007d14:	4304      	orrs	r4, r0
 8007d16:	1b1c      	subs	r4, r3, r4
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	4192      	sbcs	r2, r2
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	4252      	negs	r2, r2
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	469a      	mov	sl, r3
 8007d24:	4653      	mov	r3, sl
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	d400      	bmi.n	8007d2c <__aeabi_dsub+0xbc>
 8007d2a:	e12b      	b.n	8007f84 <__aeabi_dsub+0x314>
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	025a      	lsls	r2, r3, #9
 8007d30:	0a53      	lsrs	r3, r2, #9
 8007d32:	469a      	mov	sl, r3
 8007d34:	4653      	mov	r3, sl
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d100      	bne.n	8007d3c <__aeabi_dsub+0xcc>
 8007d3a:	e166      	b.n	800800a <__aeabi_dsub+0x39a>
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	f000 fba5 	bl	800848c <__clzsi2>
 8007d42:	0003      	movs	r3, r0
 8007d44:	3b08      	subs	r3, #8
 8007d46:	2220      	movs	r2, #32
 8007d48:	0020      	movs	r0, r4
 8007d4a:	1ad2      	subs	r2, r2, r3
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	40d0      	lsrs	r0, r2
 8007d50:	4099      	lsls	r1, r3
 8007d52:	0002      	movs	r2, r0
 8007d54:	409c      	lsls	r4, r3
 8007d56:	430a      	orrs	r2, r1
 8007d58:	429e      	cmp	r6, r3
 8007d5a:	dd00      	ble.n	8007d5e <__aeabi_dsub+0xee>
 8007d5c:	e164      	b.n	8008028 <__aeabi_dsub+0x3b8>
 8007d5e:	1b9b      	subs	r3, r3, r6
 8007d60:	1c59      	adds	r1, r3, #1
 8007d62:	291f      	cmp	r1, #31
 8007d64:	dd00      	ble.n	8007d68 <__aeabi_dsub+0xf8>
 8007d66:	e0fe      	b.n	8007f66 <__aeabi_dsub+0x2f6>
 8007d68:	2320      	movs	r3, #32
 8007d6a:	0010      	movs	r0, r2
 8007d6c:	0026      	movs	r6, r4
 8007d6e:	1a5b      	subs	r3, r3, r1
 8007d70:	409c      	lsls	r4, r3
 8007d72:	4098      	lsls	r0, r3
 8007d74:	40ce      	lsrs	r6, r1
 8007d76:	40ca      	lsrs	r2, r1
 8007d78:	1e63      	subs	r3, r4, #1
 8007d7a:	419c      	sbcs	r4, r3
 8007d7c:	4330      	orrs	r0, r6
 8007d7e:	4692      	mov	sl, r2
 8007d80:	2600      	movs	r6, #0
 8007d82:	4304      	orrs	r4, r0
 8007d84:	0763      	lsls	r3, r4, #29
 8007d86:	d009      	beq.n	8007d9c <__aeabi_dsub+0x12c>
 8007d88:	230f      	movs	r3, #15
 8007d8a:	4023      	ands	r3, r4
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d005      	beq.n	8007d9c <__aeabi_dsub+0x12c>
 8007d90:	1d23      	adds	r3, r4, #4
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	41a4      	sbcs	r4, r4
 8007d96:	4264      	negs	r4, r4
 8007d98:	44a2      	add	sl, r4
 8007d9a:	001c      	movs	r4, r3
 8007d9c:	4653      	mov	r3, sl
 8007d9e:	021b      	lsls	r3, r3, #8
 8007da0:	d400      	bmi.n	8007da4 <__aeabi_dsub+0x134>
 8007da2:	e0f2      	b.n	8007f8a <__aeabi_dsub+0x31a>
 8007da4:	4b8c      	ldr	r3, [pc, #560]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007da6:	3601      	adds	r6, #1
 8007da8:	429e      	cmp	r6, r3
 8007daa:	d100      	bne.n	8007dae <__aeabi_dsub+0x13e>
 8007dac:	e10f      	b.n	8007fce <__aeabi_dsub+0x35e>
 8007dae:	4653      	mov	r3, sl
 8007db0:	498a      	ldr	r1, [pc, #552]	; (8007fdc <__aeabi_dsub+0x36c>)
 8007db2:	08e4      	lsrs	r4, r4, #3
 8007db4:	400b      	ands	r3, r1
 8007db6:	0019      	movs	r1, r3
 8007db8:	075b      	lsls	r3, r3, #29
 8007dba:	4323      	orrs	r3, r4
 8007dbc:	0572      	lsls	r2, r6, #21
 8007dbe:	024c      	lsls	r4, r1, #9
 8007dc0:	0b24      	lsrs	r4, r4, #12
 8007dc2:	0d52      	lsrs	r2, r2, #21
 8007dc4:	0512      	lsls	r2, r2, #20
 8007dc6:	4322      	orrs	r2, r4
 8007dc8:	07ed      	lsls	r5, r5, #31
 8007dca:	432a      	orrs	r2, r5
 8007dcc:	0018      	movs	r0, r3
 8007dce:	0011      	movs	r1, r2
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bcf0      	pop	{r4, r5, r6, r7}
 8007dd4:	46bb      	mov	fp, r7
 8007dd6:	46b2      	mov	sl, r6
 8007dd8:	46a9      	mov	r9, r5
 8007dda:	46a0      	mov	r8, r4
 8007ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dde:	1ab4      	subs	r4, r6, r2
 8007de0:	46a4      	mov	ip, r4
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	dd59      	ble.n	8007e9a <__aeabi_dsub+0x22a>
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	d100      	bne.n	8007dec <__aeabi_dsub+0x17c>
 8007dea:	e0b0      	b.n	8007f4e <__aeabi_dsub+0x2de>
 8007dec:	4556      	cmp	r6, sl
 8007dee:	d100      	bne.n	8007df2 <__aeabi_dsub+0x182>
 8007df0:	e0fa      	b.n	8007fe8 <__aeabi_dsub+0x378>
 8007df2:	2280      	movs	r2, #128	; 0x80
 8007df4:	0412      	lsls	r2, r2, #16
 8007df6:	4317      	orrs	r7, r2
 8007df8:	4662      	mov	r2, ip
 8007dfa:	2a38      	cmp	r2, #56	; 0x38
 8007dfc:	dd00      	ble.n	8007e00 <__aeabi_dsub+0x190>
 8007dfe:	e0d4      	b.n	8007faa <__aeabi_dsub+0x33a>
 8007e00:	2a1f      	cmp	r2, #31
 8007e02:	dc00      	bgt.n	8007e06 <__aeabi_dsub+0x196>
 8007e04:	e1c0      	b.n	8008188 <__aeabi_dsub+0x518>
 8007e06:	0039      	movs	r1, r7
 8007e08:	3a20      	subs	r2, #32
 8007e0a:	40d1      	lsrs	r1, r2
 8007e0c:	4662      	mov	r2, ip
 8007e0e:	2a20      	cmp	r2, #32
 8007e10:	d006      	beq.n	8007e20 <__aeabi_dsub+0x1b0>
 8007e12:	4664      	mov	r4, ip
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	1b12      	subs	r2, r2, r4
 8007e18:	003c      	movs	r4, r7
 8007e1a:	4094      	lsls	r4, r2
 8007e1c:	4304      	orrs	r4, r0
 8007e1e:	9401      	str	r4, [sp, #4]
 8007e20:	9c01      	ldr	r4, [sp, #4]
 8007e22:	1e62      	subs	r2, r4, #1
 8007e24:	4194      	sbcs	r4, r2
 8007e26:	430c      	orrs	r4, r1
 8007e28:	e0c3      	b.n	8007fb2 <__aeabi_dsub+0x342>
 8007e2a:	003c      	movs	r4, r7
 8007e2c:	4304      	orrs	r4, r0
 8007e2e:	d02b      	beq.n	8007e88 <__aeabi_dsub+0x218>
 8007e30:	468b      	mov	fp, r1
 8007e32:	428d      	cmp	r5, r1
 8007e34:	d02e      	beq.n	8007e94 <__aeabi_dsub+0x224>
 8007e36:	4c6a      	ldr	r4, [pc, #424]	; (8007fe0 <__aeabi_dsub+0x370>)
 8007e38:	46a4      	mov	ip, r4
 8007e3a:	44b4      	add	ip, r6
 8007e3c:	4664      	mov	r4, ip
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	d05f      	beq.n	8007f02 <__aeabi_dsub+0x292>
 8007e42:	1b94      	subs	r4, r2, r6
 8007e44:	46a4      	mov	ip, r4
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	d000      	beq.n	8007e4c <__aeabi_dsub+0x1dc>
 8007e4a:	e120      	b.n	800808e <__aeabi_dsub+0x41e>
 8007e4c:	464c      	mov	r4, r9
 8007e4e:	431c      	orrs	r4, r3
 8007e50:	d100      	bne.n	8007e54 <__aeabi_dsub+0x1e4>
 8007e52:	e1c7      	b.n	80081e4 <__aeabi_dsub+0x574>
 8007e54:	4661      	mov	r1, ip
 8007e56:	1e4c      	subs	r4, r1, #1
 8007e58:	2901      	cmp	r1, #1
 8007e5a:	d100      	bne.n	8007e5e <__aeabi_dsub+0x1ee>
 8007e5c:	e223      	b.n	80082a6 <__aeabi_dsub+0x636>
 8007e5e:	4d5e      	ldr	r5, [pc, #376]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007e60:	45ac      	cmp	ip, r5
 8007e62:	d100      	bne.n	8007e66 <__aeabi_dsub+0x1f6>
 8007e64:	e1d8      	b.n	8008218 <__aeabi_dsub+0x5a8>
 8007e66:	46a4      	mov	ip, r4
 8007e68:	e11a      	b.n	80080a0 <__aeabi_dsub+0x430>
 8007e6a:	003a      	movs	r2, r7
 8007e6c:	4302      	orrs	r2, r0
 8007e6e:	d100      	bne.n	8007e72 <__aeabi_dsub+0x202>
 8007e70:	e0e4      	b.n	800803c <__aeabi_dsub+0x3cc>
 8007e72:	0022      	movs	r2, r4
 8007e74:	3a01      	subs	r2, #1
 8007e76:	2c01      	cmp	r4, #1
 8007e78:	d100      	bne.n	8007e7c <__aeabi_dsub+0x20c>
 8007e7a:	e1c3      	b.n	8008204 <__aeabi_dsub+0x594>
 8007e7c:	4956      	ldr	r1, [pc, #344]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007e7e:	428c      	cmp	r4, r1
 8007e80:	d100      	bne.n	8007e84 <__aeabi_dsub+0x214>
 8007e82:	e0b1      	b.n	8007fe8 <__aeabi_dsub+0x378>
 8007e84:	4694      	mov	ip, r2
 8007e86:	e72b      	b.n	8007ce0 <__aeabi_dsub+0x70>
 8007e88:	2401      	movs	r4, #1
 8007e8a:	4061      	eors	r1, r4
 8007e8c:	468b      	mov	fp, r1
 8007e8e:	428d      	cmp	r5, r1
 8007e90:	d000      	beq.n	8007e94 <__aeabi_dsub+0x224>
 8007e92:	e716      	b.n	8007cc2 <__aeabi_dsub+0x52>
 8007e94:	4952      	ldr	r1, [pc, #328]	; (8007fe0 <__aeabi_dsub+0x370>)
 8007e96:	468c      	mov	ip, r1
 8007e98:	44b4      	add	ip, r6
 8007e9a:	4664      	mov	r4, ip
 8007e9c:	2c00      	cmp	r4, #0
 8007e9e:	d100      	bne.n	8007ea2 <__aeabi_dsub+0x232>
 8007ea0:	e0d3      	b.n	800804a <__aeabi_dsub+0x3da>
 8007ea2:	1b91      	subs	r1, r2, r6
 8007ea4:	468c      	mov	ip, r1
 8007ea6:	2e00      	cmp	r6, #0
 8007ea8:	d100      	bne.n	8007eac <__aeabi_dsub+0x23c>
 8007eaa:	e15e      	b.n	800816a <__aeabi_dsub+0x4fa>
 8007eac:	494a      	ldr	r1, [pc, #296]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007eae:	428a      	cmp	r2, r1
 8007eb0:	d100      	bne.n	8007eb4 <__aeabi_dsub+0x244>
 8007eb2:	e1be      	b.n	8008232 <__aeabi_dsub+0x5c2>
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	464c      	mov	r4, r9
 8007eb8:	0409      	lsls	r1, r1, #16
 8007eba:	430c      	orrs	r4, r1
 8007ebc:	46a1      	mov	r9, r4
 8007ebe:	4661      	mov	r1, ip
 8007ec0:	2938      	cmp	r1, #56	; 0x38
 8007ec2:	dd00      	ble.n	8007ec6 <__aeabi_dsub+0x256>
 8007ec4:	e1ba      	b.n	800823c <__aeabi_dsub+0x5cc>
 8007ec6:	291f      	cmp	r1, #31
 8007ec8:	dd00      	ble.n	8007ecc <__aeabi_dsub+0x25c>
 8007eca:	e227      	b.n	800831c <__aeabi_dsub+0x6ac>
 8007ecc:	2420      	movs	r4, #32
 8007ece:	1a64      	subs	r4, r4, r1
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	40a1      	lsls	r1, r4
 8007ed4:	001e      	movs	r6, r3
 8007ed6:	4688      	mov	r8, r1
 8007ed8:	4661      	mov	r1, ip
 8007eda:	40a3      	lsls	r3, r4
 8007edc:	40ce      	lsrs	r6, r1
 8007ede:	4641      	mov	r1, r8
 8007ee0:	1e5c      	subs	r4, r3, #1
 8007ee2:	41a3      	sbcs	r3, r4
 8007ee4:	4331      	orrs	r1, r6
 8007ee6:	4319      	orrs	r1, r3
 8007ee8:	000c      	movs	r4, r1
 8007eea:	4663      	mov	r3, ip
 8007eec:	4649      	mov	r1, r9
 8007eee:	40d9      	lsrs	r1, r3
 8007ef0:	187f      	adds	r7, r7, r1
 8007ef2:	1824      	adds	r4, r4, r0
 8007ef4:	4284      	cmp	r4, r0
 8007ef6:	419b      	sbcs	r3, r3
 8007ef8:	425b      	negs	r3, r3
 8007efa:	469a      	mov	sl, r3
 8007efc:	0016      	movs	r6, r2
 8007efe:	44ba      	add	sl, r7
 8007f00:	e05d      	b.n	8007fbe <__aeabi_dsub+0x34e>
 8007f02:	4c38      	ldr	r4, [pc, #224]	; (8007fe4 <__aeabi_dsub+0x374>)
 8007f04:	1c72      	adds	r2, r6, #1
 8007f06:	4222      	tst	r2, r4
 8007f08:	d000      	beq.n	8007f0c <__aeabi_dsub+0x29c>
 8007f0a:	e0df      	b.n	80080cc <__aeabi_dsub+0x45c>
 8007f0c:	464a      	mov	r2, r9
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	2e00      	cmp	r6, #0
 8007f12:	d000      	beq.n	8007f16 <__aeabi_dsub+0x2a6>
 8007f14:	e15c      	b.n	80081d0 <__aeabi_dsub+0x560>
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	d100      	bne.n	8007f1c <__aeabi_dsub+0x2ac>
 8007f1a:	e1cf      	b.n	80082bc <__aeabi_dsub+0x64c>
 8007f1c:	003a      	movs	r2, r7
 8007f1e:	4302      	orrs	r2, r0
 8007f20:	d100      	bne.n	8007f24 <__aeabi_dsub+0x2b4>
 8007f22:	e17f      	b.n	8008224 <__aeabi_dsub+0x5b4>
 8007f24:	1a1c      	subs	r4, r3, r0
 8007f26:	464a      	mov	r2, r9
 8007f28:	42a3      	cmp	r3, r4
 8007f2a:	4189      	sbcs	r1, r1
 8007f2c:	1bd2      	subs	r2, r2, r7
 8007f2e:	4249      	negs	r1, r1
 8007f30:	1a52      	subs	r2, r2, r1
 8007f32:	4692      	mov	sl, r2
 8007f34:	0212      	lsls	r2, r2, #8
 8007f36:	d400      	bmi.n	8007f3a <__aeabi_dsub+0x2ca>
 8007f38:	e20a      	b.n	8008350 <__aeabi_dsub+0x6e0>
 8007f3a:	1ac4      	subs	r4, r0, r3
 8007f3c:	42a0      	cmp	r0, r4
 8007f3e:	4180      	sbcs	r0, r0
 8007f40:	464b      	mov	r3, r9
 8007f42:	4240      	negs	r0, r0
 8007f44:	1aff      	subs	r7, r7, r3
 8007f46:	1a3b      	subs	r3, r7, r0
 8007f48:	469a      	mov	sl, r3
 8007f4a:	465d      	mov	r5, fp
 8007f4c:	e71a      	b.n	8007d84 <__aeabi_dsub+0x114>
 8007f4e:	003a      	movs	r2, r7
 8007f50:	4302      	orrs	r2, r0
 8007f52:	d073      	beq.n	800803c <__aeabi_dsub+0x3cc>
 8007f54:	0022      	movs	r2, r4
 8007f56:	3a01      	subs	r2, #1
 8007f58:	2c01      	cmp	r4, #1
 8007f5a:	d100      	bne.n	8007f5e <__aeabi_dsub+0x2ee>
 8007f5c:	e0cb      	b.n	80080f6 <__aeabi_dsub+0x486>
 8007f5e:	4554      	cmp	r4, sl
 8007f60:	d042      	beq.n	8007fe8 <__aeabi_dsub+0x378>
 8007f62:	4694      	mov	ip, r2
 8007f64:	e748      	b.n	8007df8 <__aeabi_dsub+0x188>
 8007f66:	0010      	movs	r0, r2
 8007f68:	3b1f      	subs	r3, #31
 8007f6a:	40d8      	lsrs	r0, r3
 8007f6c:	2920      	cmp	r1, #32
 8007f6e:	d003      	beq.n	8007f78 <__aeabi_dsub+0x308>
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	409a      	lsls	r2, r3
 8007f76:	4314      	orrs	r4, r2
 8007f78:	1e63      	subs	r3, r4, #1
 8007f7a:	419c      	sbcs	r4, r3
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2600      	movs	r6, #0
 8007f80:	469a      	mov	sl, r3
 8007f82:	4304      	orrs	r4, r0
 8007f84:	0763      	lsls	r3, r4, #29
 8007f86:	d000      	beq.n	8007f8a <__aeabi_dsub+0x31a>
 8007f88:	e6fe      	b.n	8007d88 <__aeabi_dsub+0x118>
 8007f8a:	4652      	mov	r2, sl
 8007f8c:	08e3      	lsrs	r3, r4, #3
 8007f8e:	0752      	lsls	r2, r2, #29
 8007f90:	4313      	orrs	r3, r2
 8007f92:	4652      	mov	r2, sl
 8007f94:	46b4      	mov	ip, r6
 8007f96:	08d2      	lsrs	r2, r2, #3
 8007f98:	490f      	ldr	r1, [pc, #60]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007f9a:	458c      	cmp	ip, r1
 8007f9c:	d02a      	beq.n	8007ff4 <__aeabi_dsub+0x384>
 8007f9e:	0312      	lsls	r2, r2, #12
 8007fa0:	0b14      	lsrs	r4, r2, #12
 8007fa2:	4662      	mov	r2, ip
 8007fa4:	0552      	lsls	r2, r2, #21
 8007fa6:	0d52      	lsrs	r2, r2, #21
 8007fa8:	e70c      	b.n	8007dc4 <__aeabi_dsub+0x154>
 8007faa:	003c      	movs	r4, r7
 8007fac:	4304      	orrs	r4, r0
 8007fae:	1e62      	subs	r2, r4, #1
 8007fb0:	4194      	sbcs	r4, r2
 8007fb2:	18e4      	adds	r4, r4, r3
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	4192      	sbcs	r2, r2
 8007fb8:	4252      	negs	r2, r2
 8007fba:	444a      	add	r2, r9
 8007fbc:	4692      	mov	sl, r2
 8007fbe:	4653      	mov	r3, sl
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	d5df      	bpl.n	8007f84 <__aeabi_dsub+0x314>
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <__aeabi_dsub+0x368>)
 8007fc6:	3601      	adds	r6, #1
 8007fc8:	429e      	cmp	r6, r3
 8007fca:	d000      	beq.n	8007fce <__aeabi_dsub+0x35e>
 8007fcc:	e0a0      	b.n	8008110 <__aeabi_dsub+0x4a0>
 8007fce:	0032      	movs	r2, r6
 8007fd0:	2400      	movs	r4, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e6f6      	b.n	8007dc4 <__aeabi_dsub+0x154>
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	000007ff 	.word	0x000007ff
 8007fdc:	ff7fffff 	.word	0xff7fffff
 8007fe0:	fffff801 	.word	0xfffff801
 8007fe4:	000007fe 	.word	0x000007fe
 8007fe8:	08db      	lsrs	r3, r3, #3
 8007fea:	464a      	mov	r2, r9
 8007fec:	0752      	lsls	r2, r2, #29
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	464a      	mov	r2, r9
 8007ff2:	08d2      	lsrs	r2, r2, #3
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	4311      	orrs	r1, r2
 8007ff8:	d100      	bne.n	8007ffc <__aeabi_dsub+0x38c>
 8007ffa:	e1b5      	b.n	8008368 <__aeabi_dsub+0x6f8>
 8007ffc:	2480      	movs	r4, #128	; 0x80
 8007ffe:	0324      	lsls	r4, r4, #12
 8008000:	4314      	orrs	r4, r2
 8008002:	0324      	lsls	r4, r4, #12
 8008004:	4ad5      	ldr	r2, [pc, #852]	; (800835c <__aeabi_dsub+0x6ec>)
 8008006:	0b24      	lsrs	r4, r4, #12
 8008008:	e6dc      	b.n	8007dc4 <__aeabi_dsub+0x154>
 800800a:	0020      	movs	r0, r4
 800800c:	f000 fa3e 	bl	800848c <__clzsi2>
 8008010:	0003      	movs	r3, r0
 8008012:	3318      	adds	r3, #24
 8008014:	2b1f      	cmp	r3, #31
 8008016:	dc00      	bgt.n	800801a <__aeabi_dsub+0x3aa>
 8008018:	e695      	b.n	8007d46 <__aeabi_dsub+0xd6>
 800801a:	0022      	movs	r2, r4
 800801c:	3808      	subs	r0, #8
 800801e:	4082      	lsls	r2, r0
 8008020:	2400      	movs	r4, #0
 8008022:	429e      	cmp	r6, r3
 8008024:	dc00      	bgt.n	8008028 <__aeabi_dsub+0x3b8>
 8008026:	e69a      	b.n	8007d5e <__aeabi_dsub+0xee>
 8008028:	1af6      	subs	r6, r6, r3
 800802a:	4bcd      	ldr	r3, [pc, #820]	; (8008360 <__aeabi_dsub+0x6f0>)
 800802c:	401a      	ands	r2, r3
 800802e:	4692      	mov	sl, r2
 8008030:	e6a8      	b.n	8007d84 <__aeabi_dsub+0x114>
 8008032:	003c      	movs	r4, r7
 8008034:	4304      	orrs	r4, r0
 8008036:	1e62      	subs	r2, r4, #1
 8008038:	4194      	sbcs	r4, r2
 800803a:	e66c      	b.n	8007d16 <__aeabi_dsub+0xa6>
 800803c:	464a      	mov	r2, r9
 800803e:	08db      	lsrs	r3, r3, #3
 8008040:	0752      	lsls	r2, r2, #29
 8008042:	4313      	orrs	r3, r2
 8008044:	464a      	mov	r2, r9
 8008046:	08d2      	lsrs	r2, r2, #3
 8008048:	e7a6      	b.n	8007f98 <__aeabi_dsub+0x328>
 800804a:	4cc6      	ldr	r4, [pc, #792]	; (8008364 <__aeabi_dsub+0x6f4>)
 800804c:	1c72      	adds	r2, r6, #1
 800804e:	4222      	tst	r2, r4
 8008050:	d000      	beq.n	8008054 <__aeabi_dsub+0x3e4>
 8008052:	e0ac      	b.n	80081ae <__aeabi_dsub+0x53e>
 8008054:	464a      	mov	r2, r9
 8008056:	431a      	orrs	r2, r3
 8008058:	2e00      	cmp	r6, #0
 800805a:	d000      	beq.n	800805e <__aeabi_dsub+0x3ee>
 800805c:	e105      	b.n	800826a <__aeabi_dsub+0x5fa>
 800805e:	2a00      	cmp	r2, #0
 8008060:	d100      	bne.n	8008064 <__aeabi_dsub+0x3f4>
 8008062:	e156      	b.n	8008312 <__aeabi_dsub+0x6a2>
 8008064:	003a      	movs	r2, r7
 8008066:	4302      	orrs	r2, r0
 8008068:	d100      	bne.n	800806c <__aeabi_dsub+0x3fc>
 800806a:	e0db      	b.n	8008224 <__aeabi_dsub+0x5b4>
 800806c:	181c      	adds	r4, r3, r0
 800806e:	429c      	cmp	r4, r3
 8008070:	419b      	sbcs	r3, r3
 8008072:	444f      	add	r7, r9
 8008074:	46ba      	mov	sl, r7
 8008076:	425b      	negs	r3, r3
 8008078:	449a      	add	sl, r3
 800807a:	4653      	mov	r3, sl
 800807c:	021b      	lsls	r3, r3, #8
 800807e:	d400      	bmi.n	8008082 <__aeabi_dsub+0x412>
 8008080:	e780      	b.n	8007f84 <__aeabi_dsub+0x314>
 8008082:	4652      	mov	r2, sl
 8008084:	4bb6      	ldr	r3, [pc, #728]	; (8008360 <__aeabi_dsub+0x6f0>)
 8008086:	2601      	movs	r6, #1
 8008088:	401a      	ands	r2, r3
 800808a:	4692      	mov	sl, r2
 800808c:	e77a      	b.n	8007f84 <__aeabi_dsub+0x314>
 800808e:	4cb3      	ldr	r4, [pc, #716]	; (800835c <__aeabi_dsub+0x6ec>)
 8008090:	42a2      	cmp	r2, r4
 8008092:	d100      	bne.n	8008096 <__aeabi_dsub+0x426>
 8008094:	e0c0      	b.n	8008218 <__aeabi_dsub+0x5a8>
 8008096:	2480      	movs	r4, #128	; 0x80
 8008098:	464d      	mov	r5, r9
 800809a:	0424      	lsls	r4, r4, #16
 800809c:	4325      	orrs	r5, r4
 800809e:	46a9      	mov	r9, r5
 80080a0:	4664      	mov	r4, ip
 80080a2:	2c38      	cmp	r4, #56	; 0x38
 80080a4:	dc53      	bgt.n	800814e <__aeabi_dsub+0x4de>
 80080a6:	4661      	mov	r1, ip
 80080a8:	2c1f      	cmp	r4, #31
 80080aa:	dd00      	ble.n	80080ae <__aeabi_dsub+0x43e>
 80080ac:	e0cd      	b.n	800824a <__aeabi_dsub+0x5da>
 80080ae:	2520      	movs	r5, #32
 80080b0:	001e      	movs	r6, r3
 80080b2:	1b2d      	subs	r5, r5, r4
 80080b4:	464c      	mov	r4, r9
 80080b6:	40ab      	lsls	r3, r5
 80080b8:	40ac      	lsls	r4, r5
 80080ba:	40ce      	lsrs	r6, r1
 80080bc:	1e5d      	subs	r5, r3, #1
 80080be:	41ab      	sbcs	r3, r5
 80080c0:	4334      	orrs	r4, r6
 80080c2:	4323      	orrs	r3, r4
 80080c4:	464c      	mov	r4, r9
 80080c6:	40cc      	lsrs	r4, r1
 80080c8:	1b3f      	subs	r7, r7, r4
 80080ca:	e045      	b.n	8008158 <__aeabi_dsub+0x4e8>
 80080cc:	464a      	mov	r2, r9
 80080ce:	1a1c      	subs	r4, r3, r0
 80080d0:	1bd1      	subs	r1, r2, r7
 80080d2:	42a3      	cmp	r3, r4
 80080d4:	4192      	sbcs	r2, r2
 80080d6:	4252      	negs	r2, r2
 80080d8:	4692      	mov	sl, r2
 80080da:	000a      	movs	r2, r1
 80080dc:	4651      	mov	r1, sl
 80080de:	1a52      	subs	r2, r2, r1
 80080e0:	4692      	mov	sl, r2
 80080e2:	0212      	lsls	r2, r2, #8
 80080e4:	d500      	bpl.n	80080e8 <__aeabi_dsub+0x478>
 80080e6:	e083      	b.n	80081f0 <__aeabi_dsub+0x580>
 80080e8:	4653      	mov	r3, sl
 80080ea:	4323      	orrs	r3, r4
 80080ec:	d000      	beq.n	80080f0 <__aeabi_dsub+0x480>
 80080ee:	e621      	b.n	8007d34 <__aeabi_dsub+0xc4>
 80080f0:	2200      	movs	r2, #0
 80080f2:	2500      	movs	r5, #0
 80080f4:	e753      	b.n	8007f9e <__aeabi_dsub+0x32e>
 80080f6:	181c      	adds	r4, r3, r0
 80080f8:	429c      	cmp	r4, r3
 80080fa:	419b      	sbcs	r3, r3
 80080fc:	444f      	add	r7, r9
 80080fe:	46ba      	mov	sl, r7
 8008100:	425b      	negs	r3, r3
 8008102:	449a      	add	sl, r3
 8008104:	4653      	mov	r3, sl
 8008106:	2601      	movs	r6, #1
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	d400      	bmi.n	800810e <__aeabi_dsub+0x49e>
 800810c:	e73a      	b.n	8007f84 <__aeabi_dsub+0x314>
 800810e:	2602      	movs	r6, #2
 8008110:	4652      	mov	r2, sl
 8008112:	4b93      	ldr	r3, [pc, #588]	; (8008360 <__aeabi_dsub+0x6f0>)
 8008114:	2101      	movs	r1, #1
 8008116:	401a      	ands	r2, r3
 8008118:	0013      	movs	r3, r2
 800811a:	4021      	ands	r1, r4
 800811c:	0862      	lsrs	r2, r4, #1
 800811e:	430a      	orrs	r2, r1
 8008120:	07dc      	lsls	r4, r3, #31
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	469a      	mov	sl, r3
 8008126:	4314      	orrs	r4, r2
 8008128:	e62c      	b.n	8007d84 <__aeabi_dsub+0x114>
 800812a:	0039      	movs	r1, r7
 800812c:	3a20      	subs	r2, #32
 800812e:	40d1      	lsrs	r1, r2
 8008130:	4662      	mov	r2, ip
 8008132:	2a20      	cmp	r2, #32
 8008134:	d006      	beq.n	8008144 <__aeabi_dsub+0x4d4>
 8008136:	4664      	mov	r4, ip
 8008138:	2240      	movs	r2, #64	; 0x40
 800813a:	1b12      	subs	r2, r2, r4
 800813c:	003c      	movs	r4, r7
 800813e:	4094      	lsls	r4, r2
 8008140:	4304      	orrs	r4, r0
 8008142:	9401      	str	r4, [sp, #4]
 8008144:	9c01      	ldr	r4, [sp, #4]
 8008146:	1e62      	subs	r2, r4, #1
 8008148:	4194      	sbcs	r4, r2
 800814a:	430c      	orrs	r4, r1
 800814c:	e5e3      	b.n	8007d16 <__aeabi_dsub+0xa6>
 800814e:	4649      	mov	r1, r9
 8008150:	4319      	orrs	r1, r3
 8008152:	000b      	movs	r3, r1
 8008154:	1e5c      	subs	r4, r3, #1
 8008156:	41a3      	sbcs	r3, r4
 8008158:	1ac4      	subs	r4, r0, r3
 800815a:	42a0      	cmp	r0, r4
 800815c:	419b      	sbcs	r3, r3
 800815e:	425b      	negs	r3, r3
 8008160:	1afb      	subs	r3, r7, r3
 8008162:	469a      	mov	sl, r3
 8008164:	465d      	mov	r5, fp
 8008166:	0016      	movs	r6, r2
 8008168:	e5dc      	b.n	8007d24 <__aeabi_dsub+0xb4>
 800816a:	4649      	mov	r1, r9
 800816c:	4319      	orrs	r1, r3
 800816e:	d100      	bne.n	8008172 <__aeabi_dsub+0x502>
 8008170:	e0ae      	b.n	80082d0 <__aeabi_dsub+0x660>
 8008172:	4661      	mov	r1, ip
 8008174:	4664      	mov	r4, ip
 8008176:	3901      	subs	r1, #1
 8008178:	2c01      	cmp	r4, #1
 800817a:	d100      	bne.n	800817e <__aeabi_dsub+0x50e>
 800817c:	e0e0      	b.n	8008340 <__aeabi_dsub+0x6d0>
 800817e:	4c77      	ldr	r4, [pc, #476]	; (800835c <__aeabi_dsub+0x6ec>)
 8008180:	45a4      	cmp	ip, r4
 8008182:	d056      	beq.n	8008232 <__aeabi_dsub+0x5c2>
 8008184:	468c      	mov	ip, r1
 8008186:	e69a      	b.n	8007ebe <__aeabi_dsub+0x24e>
 8008188:	4661      	mov	r1, ip
 800818a:	2220      	movs	r2, #32
 800818c:	003c      	movs	r4, r7
 800818e:	1a52      	subs	r2, r2, r1
 8008190:	4094      	lsls	r4, r2
 8008192:	0001      	movs	r1, r0
 8008194:	4090      	lsls	r0, r2
 8008196:	46a0      	mov	r8, r4
 8008198:	4664      	mov	r4, ip
 800819a:	1e42      	subs	r2, r0, #1
 800819c:	4190      	sbcs	r0, r2
 800819e:	4662      	mov	r2, ip
 80081a0:	40e1      	lsrs	r1, r4
 80081a2:	4644      	mov	r4, r8
 80081a4:	40d7      	lsrs	r7, r2
 80081a6:	430c      	orrs	r4, r1
 80081a8:	4304      	orrs	r4, r0
 80081aa:	44b9      	add	r9, r7
 80081ac:	e701      	b.n	8007fb2 <__aeabi_dsub+0x342>
 80081ae:	496b      	ldr	r1, [pc, #428]	; (800835c <__aeabi_dsub+0x6ec>)
 80081b0:	428a      	cmp	r2, r1
 80081b2:	d100      	bne.n	80081b6 <__aeabi_dsub+0x546>
 80081b4:	e70c      	b.n	8007fd0 <__aeabi_dsub+0x360>
 80081b6:	1818      	adds	r0, r3, r0
 80081b8:	4298      	cmp	r0, r3
 80081ba:	419b      	sbcs	r3, r3
 80081bc:	444f      	add	r7, r9
 80081be:	425b      	negs	r3, r3
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	07dc      	lsls	r4, r3, #31
 80081c4:	0840      	lsrs	r0, r0, #1
 80081c6:	085b      	lsrs	r3, r3, #1
 80081c8:	469a      	mov	sl, r3
 80081ca:	0016      	movs	r6, r2
 80081cc:	4304      	orrs	r4, r0
 80081ce:	e6d9      	b.n	8007f84 <__aeabi_dsub+0x314>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d000      	beq.n	80081d6 <__aeabi_dsub+0x566>
 80081d4:	e081      	b.n	80082da <__aeabi_dsub+0x66a>
 80081d6:	003b      	movs	r3, r7
 80081d8:	4303      	orrs	r3, r0
 80081da:	d11d      	bne.n	8008218 <__aeabi_dsub+0x5a8>
 80081dc:	2280      	movs	r2, #128	; 0x80
 80081de:	2500      	movs	r5, #0
 80081e0:	0312      	lsls	r2, r2, #12
 80081e2:	e70b      	b.n	8007ffc <__aeabi_dsub+0x38c>
 80081e4:	08c0      	lsrs	r0, r0, #3
 80081e6:	077b      	lsls	r3, r7, #29
 80081e8:	465d      	mov	r5, fp
 80081ea:	4303      	orrs	r3, r0
 80081ec:	08fa      	lsrs	r2, r7, #3
 80081ee:	e6d3      	b.n	8007f98 <__aeabi_dsub+0x328>
 80081f0:	1ac4      	subs	r4, r0, r3
 80081f2:	42a0      	cmp	r0, r4
 80081f4:	4180      	sbcs	r0, r0
 80081f6:	464b      	mov	r3, r9
 80081f8:	4240      	negs	r0, r0
 80081fa:	1aff      	subs	r7, r7, r3
 80081fc:	1a3b      	subs	r3, r7, r0
 80081fe:	469a      	mov	sl, r3
 8008200:	465d      	mov	r5, fp
 8008202:	e597      	b.n	8007d34 <__aeabi_dsub+0xc4>
 8008204:	1a1c      	subs	r4, r3, r0
 8008206:	464a      	mov	r2, r9
 8008208:	42a3      	cmp	r3, r4
 800820a:	419b      	sbcs	r3, r3
 800820c:	1bd7      	subs	r7, r2, r7
 800820e:	425b      	negs	r3, r3
 8008210:	1afb      	subs	r3, r7, r3
 8008212:	469a      	mov	sl, r3
 8008214:	2601      	movs	r6, #1
 8008216:	e585      	b.n	8007d24 <__aeabi_dsub+0xb4>
 8008218:	08c0      	lsrs	r0, r0, #3
 800821a:	077b      	lsls	r3, r7, #29
 800821c:	465d      	mov	r5, fp
 800821e:	4303      	orrs	r3, r0
 8008220:	08fa      	lsrs	r2, r7, #3
 8008222:	e6e7      	b.n	8007ff4 <__aeabi_dsub+0x384>
 8008224:	464a      	mov	r2, r9
 8008226:	08db      	lsrs	r3, r3, #3
 8008228:	0752      	lsls	r2, r2, #29
 800822a:	4313      	orrs	r3, r2
 800822c:	464a      	mov	r2, r9
 800822e:	08d2      	lsrs	r2, r2, #3
 8008230:	e6b5      	b.n	8007f9e <__aeabi_dsub+0x32e>
 8008232:	08c0      	lsrs	r0, r0, #3
 8008234:	077b      	lsls	r3, r7, #29
 8008236:	4303      	orrs	r3, r0
 8008238:	08fa      	lsrs	r2, r7, #3
 800823a:	e6db      	b.n	8007ff4 <__aeabi_dsub+0x384>
 800823c:	4649      	mov	r1, r9
 800823e:	4319      	orrs	r1, r3
 8008240:	000b      	movs	r3, r1
 8008242:	1e59      	subs	r1, r3, #1
 8008244:	418b      	sbcs	r3, r1
 8008246:	001c      	movs	r4, r3
 8008248:	e653      	b.n	8007ef2 <__aeabi_dsub+0x282>
 800824a:	464d      	mov	r5, r9
 800824c:	3c20      	subs	r4, #32
 800824e:	40e5      	lsrs	r5, r4
 8008250:	2920      	cmp	r1, #32
 8008252:	d005      	beq.n	8008260 <__aeabi_dsub+0x5f0>
 8008254:	2440      	movs	r4, #64	; 0x40
 8008256:	1a64      	subs	r4, r4, r1
 8008258:	4649      	mov	r1, r9
 800825a:	40a1      	lsls	r1, r4
 800825c:	430b      	orrs	r3, r1
 800825e:	4698      	mov	r8, r3
 8008260:	4643      	mov	r3, r8
 8008262:	1e5c      	subs	r4, r3, #1
 8008264:	41a3      	sbcs	r3, r4
 8008266:	432b      	orrs	r3, r5
 8008268:	e776      	b.n	8008158 <__aeabi_dsub+0x4e8>
 800826a:	2a00      	cmp	r2, #0
 800826c:	d0e1      	beq.n	8008232 <__aeabi_dsub+0x5c2>
 800826e:	003a      	movs	r2, r7
 8008270:	08db      	lsrs	r3, r3, #3
 8008272:	4302      	orrs	r2, r0
 8008274:	d100      	bne.n	8008278 <__aeabi_dsub+0x608>
 8008276:	e6b8      	b.n	8007fea <__aeabi_dsub+0x37a>
 8008278:	464a      	mov	r2, r9
 800827a:	0752      	lsls	r2, r2, #29
 800827c:	2480      	movs	r4, #128	; 0x80
 800827e:	4313      	orrs	r3, r2
 8008280:	464a      	mov	r2, r9
 8008282:	0324      	lsls	r4, r4, #12
 8008284:	08d2      	lsrs	r2, r2, #3
 8008286:	4222      	tst	r2, r4
 8008288:	d007      	beq.n	800829a <__aeabi_dsub+0x62a>
 800828a:	08fe      	lsrs	r6, r7, #3
 800828c:	4226      	tst	r6, r4
 800828e:	d104      	bne.n	800829a <__aeabi_dsub+0x62a>
 8008290:	465d      	mov	r5, fp
 8008292:	0032      	movs	r2, r6
 8008294:	08c3      	lsrs	r3, r0, #3
 8008296:	077f      	lsls	r7, r7, #29
 8008298:	433b      	orrs	r3, r7
 800829a:	0f59      	lsrs	r1, r3, #29
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	0749      	lsls	r1, r1, #29
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	430b      	orrs	r3, r1
 80082a4:	e6a6      	b.n	8007ff4 <__aeabi_dsub+0x384>
 80082a6:	1ac4      	subs	r4, r0, r3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	4180      	sbcs	r0, r0
 80082ac:	464b      	mov	r3, r9
 80082ae:	4240      	negs	r0, r0
 80082b0:	1aff      	subs	r7, r7, r3
 80082b2:	1a3b      	subs	r3, r7, r0
 80082b4:	469a      	mov	sl, r3
 80082b6:	465d      	mov	r5, fp
 80082b8:	2601      	movs	r6, #1
 80082ba:	e533      	b.n	8007d24 <__aeabi_dsub+0xb4>
 80082bc:	003b      	movs	r3, r7
 80082be:	4303      	orrs	r3, r0
 80082c0:	d100      	bne.n	80082c4 <__aeabi_dsub+0x654>
 80082c2:	e715      	b.n	80080f0 <__aeabi_dsub+0x480>
 80082c4:	08c0      	lsrs	r0, r0, #3
 80082c6:	077b      	lsls	r3, r7, #29
 80082c8:	465d      	mov	r5, fp
 80082ca:	4303      	orrs	r3, r0
 80082cc:	08fa      	lsrs	r2, r7, #3
 80082ce:	e666      	b.n	8007f9e <__aeabi_dsub+0x32e>
 80082d0:	08c0      	lsrs	r0, r0, #3
 80082d2:	077b      	lsls	r3, r7, #29
 80082d4:	4303      	orrs	r3, r0
 80082d6:	08fa      	lsrs	r2, r7, #3
 80082d8:	e65e      	b.n	8007f98 <__aeabi_dsub+0x328>
 80082da:	003a      	movs	r2, r7
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	4302      	orrs	r2, r0
 80082e0:	d100      	bne.n	80082e4 <__aeabi_dsub+0x674>
 80082e2:	e682      	b.n	8007fea <__aeabi_dsub+0x37a>
 80082e4:	464a      	mov	r2, r9
 80082e6:	0752      	lsls	r2, r2, #29
 80082e8:	2480      	movs	r4, #128	; 0x80
 80082ea:	4313      	orrs	r3, r2
 80082ec:	464a      	mov	r2, r9
 80082ee:	0324      	lsls	r4, r4, #12
 80082f0:	08d2      	lsrs	r2, r2, #3
 80082f2:	4222      	tst	r2, r4
 80082f4:	d007      	beq.n	8008306 <__aeabi_dsub+0x696>
 80082f6:	08fe      	lsrs	r6, r7, #3
 80082f8:	4226      	tst	r6, r4
 80082fa:	d104      	bne.n	8008306 <__aeabi_dsub+0x696>
 80082fc:	465d      	mov	r5, fp
 80082fe:	0032      	movs	r2, r6
 8008300:	08c3      	lsrs	r3, r0, #3
 8008302:	077f      	lsls	r7, r7, #29
 8008304:	433b      	orrs	r3, r7
 8008306:	0f59      	lsrs	r1, r3, #29
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	08db      	lsrs	r3, r3, #3
 800830c:	0749      	lsls	r1, r1, #29
 800830e:	430b      	orrs	r3, r1
 8008310:	e670      	b.n	8007ff4 <__aeabi_dsub+0x384>
 8008312:	08c0      	lsrs	r0, r0, #3
 8008314:	077b      	lsls	r3, r7, #29
 8008316:	4303      	orrs	r3, r0
 8008318:	08fa      	lsrs	r2, r7, #3
 800831a:	e640      	b.n	8007f9e <__aeabi_dsub+0x32e>
 800831c:	464c      	mov	r4, r9
 800831e:	3920      	subs	r1, #32
 8008320:	40cc      	lsrs	r4, r1
 8008322:	4661      	mov	r1, ip
 8008324:	2920      	cmp	r1, #32
 8008326:	d006      	beq.n	8008336 <__aeabi_dsub+0x6c6>
 8008328:	4666      	mov	r6, ip
 800832a:	2140      	movs	r1, #64	; 0x40
 800832c:	1b89      	subs	r1, r1, r6
 800832e:	464e      	mov	r6, r9
 8008330:	408e      	lsls	r6, r1
 8008332:	4333      	orrs	r3, r6
 8008334:	4698      	mov	r8, r3
 8008336:	4643      	mov	r3, r8
 8008338:	1e59      	subs	r1, r3, #1
 800833a:	418b      	sbcs	r3, r1
 800833c:	431c      	orrs	r4, r3
 800833e:	e5d8      	b.n	8007ef2 <__aeabi_dsub+0x282>
 8008340:	181c      	adds	r4, r3, r0
 8008342:	4284      	cmp	r4, r0
 8008344:	4180      	sbcs	r0, r0
 8008346:	444f      	add	r7, r9
 8008348:	46ba      	mov	sl, r7
 800834a:	4240      	negs	r0, r0
 800834c:	4482      	add	sl, r0
 800834e:	e6d9      	b.n	8008104 <__aeabi_dsub+0x494>
 8008350:	4653      	mov	r3, sl
 8008352:	4323      	orrs	r3, r4
 8008354:	d100      	bne.n	8008358 <__aeabi_dsub+0x6e8>
 8008356:	e6cb      	b.n	80080f0 <__aeabi_dsub+0x480>
 8008358:	e614      	b.n	8007f84 <__aeabi_dsub+0x314>
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	000007ff 	.word	0x000007ff
 8008360:	ff7fffff 	.word	0xff7fffff
 8008364:	000007fe 	.word	0x000007fe
 8008368:	2300      	movs	r3, #0
 800836a:	4a01      	ldr	r2, [pc, #4]	; (8008370 <__aeabi_dsub+0x700>)
 800836c:	001c      	movs	r4, r3
 800836e:	e529      	b.n	8007dc4 <__aeabi_dsub+0x154>
 8008370:	000007ff 	.word	0x000007ff

08008374 <__aeabi_d2iz>:
 8008374:	000a      	movs	r2, r1
 8008376:	b530      	push	{r4, r5, lr}
 8008378:	4c13      	ldr	r4, [pc, #76]	; (80083c8 <__aeabi_d2iz+0x54>)
 800837a:	0053      	lsls	r3, r2, #1
 800837c:	0309      	lsls	r1, r1, #12
 800837e:	0005      	movs	r5, r0
 8008380:	0b09      	lsrs	r1, r1, #12
 8008382:	2000      	movs	r0, #0
 8008384:	0d5b      	lsrs	r3, r3, #21
 8008386:	0fd2      	lsrs	r2, r2, #31
 8008388:	42a3      	cmp	r3, r4
 800838a:	dd04      	ble.n	8008396 <__aeabi_d2iz+0x22>
 800838c:	480f      	ldr	r0, [pc, #60]	; (80083cc <__aeabi_d2iz+0x58>)
 800838e:	4283      	cmp	r3, r0
 8008390:	dd02      	ble.n	8008398 <__aeabi_d2iz+0x24>
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <__aeabi_d2iz+0x5c>)
 8008394:	18d0      	adds	r0, r2, r3
 8008396:	bd30      	pop	{r4, r5, pc}
 8008398:	2080      	movs	r0, #128	; 0x80
 800839a:	0340      	lsls	r0, r0, #13
 800839c:	4301      	orrs	r1, r0
 800839e:	480d      	ldr	r0, [pc, #52]	; (80083d4 <__aeabi_d2iz+0x60>)
 80083a0:	1ac0      	subs	r0, r0, r3
 80083a2:	281f      	cmp	r0, #31
 80083a4:	dd08      	ble.n	80083b8 <__aeabi_d2iz+0x44>
 80083a6:	480c      	ldr	r0, [pc, #48]	; (80083d8 <__aeabi_d2iz+0x64>)
 80083a8:	1ac3      	subs	r3, r0, r3
 80083aa:	40d9      	lsrs	r1, r3
 80083ac:	000b      	movs	r3, r1
 80083ae:	4258      	negs	r0, r3
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	d1f0      	bne.n	8008396 <__aeabi_d2iz+0x22>
 80083b4:	0018      	movs	r0, r3
 80083b6:	e7ee      	b.n	8008396 <__aeabi_d2iz+0x22>
 80083b8:	4c08      	ldr	r4, [pc, #32]	; (80083dc <__aeabi_d2iz+0x68>)
 80083ba:	40c5      	lsrs	r5, r0
 80083bc:	46a4      	mov	ip, r4
 80083be:	4463      	add	r3, ip
 80083c0:	4099      	lsls	r1, r3
 80083c2:	000b      	movs	r3, r1
 80083c4:	432b      	orrs	r3, r5
 80083c6:	e7f2      	b.n	80083ae <__aeabi_d2iz+0x3a>
 80083c8:	000003fe 	.word	0x000003fe
 80083cc:	0000041d 	.word	0x0000041d
 80083d0:	7fffffff 	.word	0x7fffffff
 80083d4:	00000433 	.word	0x00000433
 80083d8:	00000413 	.word	0x00000413
 80083dc:	fffffbed 	.word	0xfffffbed

080083e0 <__aeabi_i2d>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d016      	beq.n	8008414 <__aeabi_i2d+0x34>
 80083e6:	17c3      	asrs	r3, r0, #31
 80083e8:	18c5      	adds	r5, r0, r3
 80083ea:	405d      	eors	r5, r3
 80083ec:	0fc4      	lsrs	r4, r0, #31
 80083ee:	0028      	movs	r0, r5
 80083f0:	f000 f84c 	bl	800848c <__clzsi2>
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <__aeabi_i2d+0x5c>)
 80083f6:	1a1b      	subs	r3, r3, r0
 80083f8:	280a      	cmp	r0, #10
 80083fa:	dc16      	bgt.n	800842a <__aeabi_i2d+0x4a>
 80083fc:	0002      	movs	r2, r0
 80083fe:	002e      	movs	r6, r5
 8008400:	3215      	adds	r2, #21
 8008402:	4096      	lsls	r6, r2
 8008404:	220b      	movs	r2, #11
 8008406:	1a12      	subs	r2, r2, r0
 8008408:	40d5      	lsrs	r5, r2
 800840a:	055b      	lsls	r3, r3, #21
 800840c:	032d      	lsls	r5, r5, #12
 800840e:	0b2d      	lsrs	r5, r5, #12
 8008410:	0d5b      	lsrs	r3, r3, #21
 8008412:	e003      	b.n	800841c <__aeabi_i2d+0x3c>
 8008414:	2400      	movs	r4, #0
 8008416:	2300      	movs	r3, #0
 8008418:	2500      	movs	r5, #0
 800841a:	2600      	movs	r6, #0
 800841c:	051b      	lsls	r3, r3, #20
 800841e:	432b      	orrs	r3, r5
 8008420:	07e4      	lsls	r4, r4, #31
 8008422:	4323      	orrs	r3, r4
 8008424:	0030      	movs	r0, r6
 8008426:	0019      	movs	r1, r3
 8008428:	bd70      	pop	{r4, r5, r6, pc}
 800842a:	380b      	subs	r0, #11
 800842c:	4085      	lsls	r5, r0
 800842e:	055b      	lsls	r3, r3, #21
 8008430:	032d      	lsls	r5, r5, #12
 8008432:	2600      	movs	r6, #0
 8008434:	0b2d      	lsrs	r5, r5, #12
 8008436:	0d5b      	lsrs	r3, r3, #21
 8008438:	e7f0      	b.n	800841c <__aeabi_i2d+0x3c>
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	0000041e 	.word	0x0000041e

08008440 <__aeabi_ui2d>:
 8008440:	b510      	push	{r4, lr}
 8008442:	1e04      	subs	r4, r0, #0
 8008444:	d010      	beq.n	8008468 <__aeabi_ui2d+0x28>
 8008446:	f000 f821 	bl	800848c <__clzsi2>
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <__aeabi_ui2d+0x48>)
 800844c:	1a1b      	subs	r3, r3, r0
 800844e:	280a      	cmp	r0, #10
 8008450:	dc11      	bgt.n	8008476 <__aeabi_ui2d+0x36>
 8008452:	220b      	movs	r2, #11
 8008454:	0021      	movs	r1, r4
 8008456:	1a12      	subs	r2, r2, r0
 8008458:	40d1      	lsrs	r1, r2
 800845a:	3015      	adds	r0, #21
 800845c:	030a      	lsls	r2, r1, #12
 800845e:	055b      	lsls	r3, r3, #21
 8008460:	4084      	lsls	r4, r0
 8008462:	0b12      	lsrs	r2, r2, #12
 8008464:	0d5b      	lsrs	r3, r3, #21
 8008466:	e001      	b.n	800846c <__aeabi_ui2d+0x2c>
 8008468:	2300      	movs	r3, #0
 800846a:	2200      	movs	r2, #0
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	4313      	orrs	r3, r2
 8008470:	0020      	movs	r0, r4
 8008472:	0019      	movs	r1, r3
 8008474:	bd10      	pop	{r4, pc}
 8008476:	0022      	movs	r2, r4
 8008478:	380b      	subs	r0, #11
 800847a:	4082      	lsls	r2, r0
 800847c:	055b      	lsls	r3, r3, #21
 800847e:	0312      	lsls	r2, r2, #12
 8008480:	2400      	movs	r4, #0
 8008482:	0b12      	lsrs	r2, r2, #12
 8008484:	0d5b      	lsrs	r3, r3, #21
 8008486:	e7f1      	b.n	800846c <__aeabi_ui2d+0x2c>
 8008488:	0000041e 	.word	0x0000041e

0800848c <__clzsi2>:
 800848c:	211c      	movs	r1, #28
 800848e:	2301      	movs	r3, #1
 8008490:	041b      	lsls	r3, r3, #16
 8008492:	4298      	cmp	r0, r3
 8008494:	d301      	bcc.n	800849a <__clzsi2+0xe>
 8008496:	0c00      	lsrs	r0, r0, #16
 8008498:	3910      	subs	r1, #16
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	4298      	cmp	r0, r3
 800849e:	d301      	bcc.n	80084a4 <__clzsi2+0x18>
 80084a0:	0a00      	lsrs	r0, r0, #8
 80084a2:	3908      	subs	r1, #8
 80084a4:	091b      	lsrs	r3, r3, #4
 80084a6:	4298      	cmp	r0, r3
 80084a8:	d301      	bcc.n	80084ae <__clzsi2+0x22>
 80084aa:	0900      	lsrs	r0, r0, #4
 80084ac:	3904      	subs	r1, #4
 80084ae:	a202      	add	r2, pc, #8	; (adr r2, 80084b8 <__clzsi2+0x2c>)
 80084b0:	5c10      	ldrb	r0, [r2, r0]
 80084b2:	1840      	adds	r0, r0, r1
 80084b4:	4770      	bx	lr
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	02020304 	.word	0x02020304
 80084bc:	01010101 	.word	0x01010101
	...

080084c8 <__clzdi2>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d103      	bne.n	80084d6 <__clzdi2+0xe>
 80084ce:	f7ff ffdd 	bl	800848c <__clzsi2>
 80084d2:	3020      	adds	r0, #32
 80084d4:	e002      	b.n	80084dc <__clzdi2+0x14>
 80084d6:	0008      	movs	r0, r1
 80084d8:	f7ff ffd8 	bl	800848c <__clzsi2>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	46c0      	nop			; (mov r8, r8)

080084e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2201      	movs	r2, #1
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	46c0      	nop			; (mov r8, r8)
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b002      	add	sp, #8
 80084fa:	bd80      	pop	{r7, pc}

080084fc <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2201      	movs	r2, #1
 800850a:	4393      	bics	r3, r2
 800850c:	001a      	movs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	601a      	str	r2, [r3, #0]
}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	46bd      	mov	sp, r7
 8008516:	b002      	add	sp, #8
 8008518:	bd80      	pop	{r7, pc}

0800851a <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b082      	sub	sp, #8
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	625a      	str	r2, [r3, #36]	; 0x24
}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b002      	add	sp, #8
 8008530:	bd80      	pop	{r7, pc}

08008532 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2202      	movs	r2, #2
 800853e:	4252      	negs	r2, r2
 8008540:	611a      	str	r2, [r3, #16]
}
 8008542:	46c0      	nop			; (mov r8, r8)
 8008544:	46bd      	mov	sp, r7
 8008546:	b002      	add	sp, #8
 8008548:	bd80      	pop	{r7, pc}

0800854a <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2201      	movs	r2, #1
 8008558:	4013      	ands	r3, r2
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8008562:	2300      	movs	r3, #0
}
 8008564:	0018      	movs	r0, r3
 8008566:	46bd      	mov	sp, r7
 8008568:	b002      	add	sp, #8
 800856a:	bd80      	pop	{r7, pc}

0800856c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	60da      	str	r2, [r3, #12]
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	4393      	bics	r3, r2
 8008598:	001a      	movs	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	60da      	str	r2, [r3, #12]
}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	46bd      	mov	sp, r7
 80085a2:	b002      	add	sp, #8
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <getUSBbuffer>:
__IO uint16_t aADCxConvertedValues[ADC_NUM_OF_SAMPLES] = {0};

//USB communication
uint8_t usb_buffer[64]; //in C, array automaticaly decays to pointer to first element uint8_t*

uint8_t *getUSBbuffer(void) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
	return usb_buffer;
 80085ac:	4b01      	ldr	r3, [pc, #4]	; (80085b4 <getUSBbuffer+0xc>)
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000570 	.word	0x20000570

080085b8 <runStateMachine>:
SINKData_HandleTypeDef *dhandle = &SNK_data;
StateMachine_TypeDef *sm = &stateMachine;
SystemEvents_TypeDef *events = &systemEvents;


void runStateMachine(void) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
	// Process events and transitions
	switch (sm->currentState) {
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <runStateMachine+0x44>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	d810      	bhi.n	80085e8 <runStateMachine+0x30>
 80085c6:	009a      	lsls	r2, r3, #2
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <runStateMachine+0x48>)
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	469f      	mov	pc, r3
		case STATE_OFF:
			//handleOffState(sm, dhandle);
			break;
		case STATE_INIT:
			handleInitState();
 80085d0:	f000 ff72 	bl	80094b8 <handleInitState>
			break;
 80085d4:	e00e      	b.n	80085f4 <runStateMachine+0x3c>
		case STATE_IDLE:
			handleIdleState();
 80085d6:	f000 ffdb 	bl	8009590 <handleIdleState>
			break;
 80085da:	e00b      	b.n	80085f4 <runStateMachine+0x3c>
		case STATE_ACTIVE:
			handleActiveState();
 80085dc:	f001 f83e 	bl	800965c <handleActiveState>
			break;
 80085e0:	e008      	b.n	80085f4 <runStateMachine+0x3c>
		case STATE_ERROR:
			//handleErrorState(sm, dhandle);
			break;
		case STATE_SET_VALUES:
			handleSetValuesState();
 80085e2:	f001 f8e7 	bl	80097b4 <handleSetValuesState>
			break;
 80085e6:	e005      	b.n	80085f4 <runStateMachine+0x3c>
		default:
			// Error handling
			sm->currentState = STATE_ERROR;
 80085e8:	4b04      	ldr	r3, [pc, #16]	; (80085fc <runStateMachine+0x44>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2204      	movs	r2, #4
 80085ee:	701a      	strb	r2, [r3, #0]
			//sm->errorCode = ERROR_INVALID_STATE;
			break;
 80085f0:	e000      	b.n	80085f4 <runStateMachine+0x3c>
			break;
 80085f2:	46c0      	nop			; (mov r8, r8)
	}

}
 80085f4:	46c0      	nop			; (mov r8, r8)
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	200000fc 	.word	0x200000fc
 8008600:	0802af7c 	.word	0x0802af7c

08008604 <HAL_ADC_ConvCpltCallback>:

// Callback when ADC conversion is complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 800860c:	4b04      	ldr	r3, [pc, #16]	; (8008620 <HAL_ADC_ConvCpltCallback+0x1c>)
 800860e:	2120      	movs	r1, #32
 8008610:	0018      	movs	r0, r3
 8008612:	f006 fe9e 	bl	800f352 <HAL_GPIO_TogglePin>
}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	46bd      	mov	sp, r7
 800861a:	b002      	add	sp, #8
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	50000400 	.word	0x50000400

08008624 <HAL_ADCEx_LevelOutOfWindow2Callback>:

// Callback when ADWG2 (CH7 ISENSE) goes out of range
void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc) {
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
	systemEvents.awdgEvent = true;
 800862c:	4b06      	ldr	r3, [pc, #24]	; (8008648 <HAL_ADCEx_LevelOutOfWindow2Callback+0x24>)
 800862e:	2201      	movs	r2, #1
 8008630:	729a      	strb	r2, [r3, #10]
	//Disable output
	HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 8008632:	2380      	movs	r3, #128	; 0x80
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	4805      	ldr	r0, [pc, #20]	; (800864c <HAL_ADCEx_LevelOutOfWindow2Callback+0x28>)
 8008638:	2200      	movs	r2, #0
 800863a:	0019      	movs	r1, r3
 800863c:	f006 fe6c 	bl	800f318 <HAL_GPIO_WritePin>
}
 8008640:	46c0      	nop			; (mov r8, r8)
 8008642:	46bd      	mov	sp, r7
 8008644:	b002      	add	sp, #8
 8008646:	bd80      	pop	{r7, pc}
 8008648:	200005b0 	.word	0x200005b0
 800864c:	50000800 	.word	0x50000800

08008650 <Update_AWD_Thresholds>:
/**
 * Update ADC CH3 AWD Treshold
 * Possibility to update parameters on the fly (read more in HAL_ADC_AnalogWDGConfig declaration)
 * Full config and AWD init in main.c
 */
void Update_AWD_Thresholds(uint32_t low, uint32_t high, uint32_t adc_watchdog) {
 8008650:	b590      	push	{r4, r7, lr}
 8008652:	b08b      	sub	sp, #44	; 0x2c
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
		// Just update the thresholds for an already configured AWD
		ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800865c:	2410      	movs	r4, #16
 800865e:	193b      	adds	r3, r7, r4
 8008660:	0018      	movs	r0, r3
 8008662:	2318      	movs	r3, #24
 8008664:	001a      	movs	r2, r3
 8008666:	2100      	movs	r1, #0
 8008668:	f01f f9fa 	bl	8027a60 <memset>
		AnalogWDGConfig.WatchdogNumber = adc_watchdog; // Specify which AWD you're updating
 800866c:	193b      	adds	r3, r7, r4
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	601a      	str	r2, [r3, #0]
		AnalogWDGConfig.HighThreshold = high;
 8008672:	193b      	adds	r3, r7, r4
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	611a      	str	r2, [r3, #16]
		AnalogWDGConfig.LowThreshold = low;
 8008678:	193b      	adds	r3, r7, r4
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	615a      	str	r2, [r3, #20]
		if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800867e:	193a      	adds	r2, r7, r4
 8008680:	4b06      	ldr	r3, [pc, #24]	; (800869c <Update_AWD_Thresholds+0x4c>)
 8008682:	0011      	movs	r1, r2
 8008684:	0018      	movs	r0, r3
 8008686:	f004 ffc1 	bl	800d60c <HAL_ADC_AnalogWDGConfig>
 800868a:	1e03      	subs	r3, r0, #0
 800868c:	d001      	beq.n	8008692 <Update_AWD_Thresholds+0x42>
		{
		    Error_Handler();
 800868e:	f003 fb63 	bl	800bd58 <Error_Handler>
		}
}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	46bd      	mov	sp, r7
 8008696:	b00b      	add	sp, #44	; 0x2c
 8008698:	bd90      	pop	{r4, r7, pc}
 800869a:	46c0      	nop			; (mov r8, r8)
 800869c:	200007c8 	.word	0x200007c8

080086a0 <app_init>:
/*
 * Initialization function
 */
void app_init(void){
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0

	//TIM7 initialization
	LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7
 80086a6:	4b2f      	ldr	r3, [pc, #188]	; (8008764 <app_init+0xc4>)
 80086a8:	0018      	movs	r0, r3
 80086aa:	f7ff ff42 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_EnableIT_UPDATE(TIM7); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80086ae:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <app_init+0xc4>)
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7ff ff5b 	bl	800856c <LL_TIM_EnableIT_UPDATE>
	//LL_TIM_ClearFlag_UPDATE(TIM7); //Clear update flag on TIMER7

	//TIM14 initialization
	LL_TIM_DisableIT_UPDATE(TIM14); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80086b6:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <app_init+0xc8>)
 80086b8:	0018      	movs	r0, r3
 80086ba:	f7ff ff65 	bl	8008588 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM14); //Clear update flag on TIMER14
 80086be:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <app_init+0xc8>)
 80086c0:	0018      	movs	r0, r3
 80086c2:	f7ff ff36 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>

	//TIM14 initialization
	LL_TIM_DisableIT_UPDATE(TIM15); //Enable interrupt generation when timer goes to max value and UPDATE event flag is set
 80086c6:	4b29      	ldr	r3, [pc, #164]	; (800876c <app_init+0xcc>)
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7ff ff5d 	bl	8008588 <LL_TIM_DisableIT_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM15); //Clear update flag on TIMER14
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <app_init+0xcc>)
 80086d0:	0018      	movs	r0, r3
 80086d2:	f7ff ff2e 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>

	//TIM3 initialization of encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <app_init+0xd0>)
 80086d8:	213c      	movs	r1, #60	; 0x3c
 80086da:	0018      	movs	r0, r3
 80086dc:	f00a f958 	bl	8012990 <HAL_TIM_Encoder_Start_IT>
	uint32_t maxCounterValue = __HAL_TIM_GET_AUTORELOAD(&htim3); // Get the max value
 80086e0:	4b23      	ldr	r3, [pc, #140]	; (8008770 <app_init+0xd0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, maxCounterValue / 2); // Set the counter to half of the max value to avoid shift from 0 -> max value
 80086e8:	4b21      	ldr	r3, [pc, #132]	; (8008770 <app_init+0xd0>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	0852      	lsrs	r2, r2, #1
 80086f0:	625a      	str	r2, [r3, #36]	; 0x24
	sm->encoder.curValue = __HAL_TIM_GET_COUNTER(&htim3)/4;
 80086f2:	4b1f      	ldr	r3, [pc, #124]	; (8008770 <app_init+0xd0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	089a      	lsrs	r2, r3, #2
 80086fa:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <app_init+0xd4>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	619a      	str	r2, [r3, #24]
	sm->encoder.prevValue = sm->encoder.curValue;
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <app_init+0xd4>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <app_init+0xd4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6992      	ldr	r2, [r2, #24]
 800870a:	61da      	str	r2, [r3, #28]

	//Init DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800870c:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <app_init+0xd8>)
 800870e:	2100      	movs	r1, #0
 8008710:	0018      	movs	r0, r3
 8008712:	f005 fe29 	bl	800e368 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8008716:	4b19      	ldr	r3, [pc, #100]	; (800877c <app_init+0xdc>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4817      	ldr	r0, [pc, #92]	; (8008778 <app_init+0xd8>)
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	f005 fed4 	bl	800e4cc <HAL_DAC_SetValue>

	//Wait for hardware initialization and then turn DB to HIGH (according to TCPP01-M12 datasheet 6.5)
	HAL_Delay(200);
 8008724:	20c8      	movs	r0, #200	; 0xc8
 8008726:	f003 ffc1 	bl	800c6ac <HAL_Delay>
	//osDelay(200);
	HAL_GPIO_WritePin(DB_OUT_GPIO_Port, DB_OUT_Pin, GPIO_PIN_SET);
 800872a:	4b15      	ldr	r3, [pc, #84]	; (8008780 <app_init+0xe0>)
 800872c:	2201      	movs	r2, #1
 800872e:	2101      	movs	r1, #1
 8008730:	0018      	movs	r0, r3
 8008732:	f006 fdf1 	bl	800f318 <HAL_GPIO_WritePin>

	//Calibrate and start ADC sensing with DMA
	HAL_ADCEx_Calibration_Start(&hadc1);
 8008736:	4b13      	ldr	r3, [pc, #76]	; (8008784 <app_init+0xe4>)
 8008738:	0018      	movs	r0, r3
 800873a:	f005 fc1b 	bl	800df74 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&aADCxConvertedValues, ADC_NUM_OF_SAMPLES);
 800873e:	4912      	ldr	r1, [pc, #72]	; (8008788 <app_init+0xe8>)
 8008740:	4b10      	ldr	r3, [pc, #64]	; (8008784 <app_init+0xe4>)
 8008742:	2203      	movs	r2, #3
 8008744:	0018      	movs	r0, r3
 8008746:	f004 fbcb 	bl	800cee0 <HAL_ADC_Start_DMA>

	//TIM4 initialization
	HAL_TIM_Base_Start(&htim4);
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <app_init+0xec>)
 800874c:	0018      	movs	r0, r3
 800874e:	f009 ff69 	bl	8012624 <HAL_TIM_Base_Start>

	//Init 7 segment display
	max7219_Init( SEGMENT_DISP_INTENSIVITY );
 8008752:	2007      	movs	r0, #7
 8008754:	f001 ff7c 	bl	800a650 <max7219_Init>
	max7219_Decode_On();
 8008758:	f002 f806 	bl	800a768 <max7219_Decode_On>

	//HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
}
 800875c:	46c0      	nop			; (mov r8, r8)
 800875e:	46bd      	mov	sp, r7
 8008760:	b002      	add	sp, #8
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40001400 	.word	0x40001400
 8008768:	40002000 	.word	0x40002000
 800876c:	40014000 	.word	0x40014000
 8008770:	20000904 	.word	0x20000904
 8008774:	200000fc 	.word	0x200000fc
 8008778:	2000088c 	.word	0x2000088c
 800877c:	20000004 	.word	0x20000004
 8008780:	50000400 	.word	0x50000400
 8008784:	200007c8 	.word	0x200007c8
 8008788:	20000568 	.word	0x20000568
 800878c:	20000950 	.word	0x20000950

08008790 <app_loop>:


/*
 * Loop function
 */
void app_loop(void) {
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
	// Process button events
	processSystemEvents();
 8008794:	f000 fa60 	bl	8008c58 <processSystemEvents>

	// Run the state machine
	runStateMachine();
 8008798:	f7ff ff0e 	bl	80085b8 <runStateMachine>

	// Reset button states after processing
	stateMachine.outputBtnPressed = false;
 800879c:	4b11      	ldr	r3, [pc, #68]	; (80087e4 <app_loop+0x54>)
 800879e:	2200      	movs	r2, #0
 80087a0:	731a      	strb	r2, [r3, #12]
	stateMachine.lockBtnPressed = false;
 80087a2:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <app_loop+0x54>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	735a      	strb	r2, [r3, #13]
	stateMachine.lockBtnLongPressed = false;
 80087a8:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <app_loop+0x54>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	739a      	strb	r2, [r3, #14]
	stateMachine.voltageCurrentBtnPressed = false;
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <app_loop+0x54>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	73da      	strb	r2, [r3, #15]
	stateMachine.voltageCurrentBtnLongPressed = false;
 80087b4:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <app_loop+0x54>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	741a      	strb	r2, [r3, #16]
	stateMachine.rotaryBtnPressed = false;
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <app_loop+0x54>)
 80087bc:	2200      	movs	r2, #0
 80087be:	745a      	strb	r2, [r3, #17]
	stateMachine.encoderTurnedFlag = false;
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <app_loop+0x54>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	749a      	strb	r2, [r3, #18]
	stateMachine.stateTimeoutFlag = false;
 80087c6:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <app_loop+0x54>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	74da      	strb	r2, [r3, #19]
	stateMachine.periodicCheckFlag = false;
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <app_loop+0x54>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	751a      	strb	r2, [r3, #20]
	stateMachine.encoderTurnedFlag = false;
 80087d2:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <app_loop+0x54>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	749a      	strb	r2, [r3, #18]
	stateMachine.awdgTriggeredFlag = false;
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <app_loop+0x54>)
 80087da:	2200      	movs	r2, #0
 80087dc:	755a      	strb	r2, [r3, #21]
}
 80087de:	46c0      	nop			; (mov r8, r8)
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	20000008 	.word	0x20000008

080087e8 <HAL_GPIO_EXTI_Falling_Callback>:

/*
 * Define Callbacks and ISR
 */
//BTN ISR to set event flags
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	0002      	movs	r2, r0
 80087f0:	1dbb      	adds	r3, r7, #6
 80087f2:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == SW1_TOGGLE_I_V_Pin) {
 80087f4:	1dbb      	adds	r3, r7, #6
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d108      	bne.n	800880e <HAL_GPIO_EXTI_Falling_Callback+0x26>
        btnPressTimes.voltageCurrentBtn = HAL_GetTick();
 80087fc:	f003 ff4c 	bl	800c698 <HAL_GetTick>
 8008800:	0002      	movs	r2, r0
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 8008804:	601a      	str	r2, [r3, #0]
        systemEvents.btnPressEvent = true;
 8008806:	4b22      	ldr	r3, [pc, #136]	; (8008890 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8008808:	2201      	movs	r2, #1
 800880a:	719a      	strb	r2, [r3, #6]
 800880c:	e01d      	b.n	800884a <HAL_GPIO_EXTI_Falling_Callback+0x62>
        //EXTI->IMR1 &= ~(EXTI_IMR1_IM2);
    } else if (GPIO_Pin == SW2_DEBUG_BTN_Pin) {
 800880e:	1dbb      	adds	r3, r7, #6
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	2b10      	cmp	r3, #16
 8008814:	d108      	bne.n	8008828 <HAL_GPIO_EXTI_Falling_Callback+0x40>
        btnPressTimes.lockBtn = HAL_GetTick();
 8008816:	f003 ff3f 	bl	800c698 <HAL_GetTick>
 800881a:	0002      	movs	r2, r0
 800881c:	4b1b      	ldr	r3, [pc, #108]	; (800888c <HAL_GPIO_EXTI_Falling_Callback+0xa4>)
 800881e:	605a      	str	r2, [r3, #4]
        systemEvents.btnPressEvent = true;
 8008820:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8008822:	2201      	movs	r2, #1
 8008824:	719a      	strb	r2, [r3, #6]
 8008826:	e010      	b.n	800884a <HAL_GPIO_EXTI_Falling_Callback+0x62>
        //EXTI->IMR1 &= ~(EXTI_IMR1_IM4);
        //lockButtonPressTime = HAL_GetTick();
    } else if (GPIO_Pin == SW3_OFF_ON_Pin) {
 8008828:	1dbb      	adds	r3, r7, #6
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d103      	bne.n	8008838 <HAL_GPIO_EXTI_Falling_Callback+0x50>
        systemEvents.outputBtnEvent = true;
 8008830:	4b17      	ldr	r3, [pc, #92]	; (8008890 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e008      	b.n	800884a <HAL_GPIO_EXTI_Falling_Callback+0x62>
        //EXTI->IMR1 &= ~(EXTI_IMR1_IM1);
    } else if (GPIO_Pin == ENC_TOGGLE_UNITS_Pin) {
 8008838:	1dbb      	adds	r3, r7, #6
 800883a:	881a      	ldrh	r2, [r3, #0]
 800883c:	2380      	movs	r3, #128	; 0x80
 800883e:	005b      	lsls	r3, r3, #1
 8008840:	429a      	cmp	r2, r3
 8008842:	d102      	bne.n	800884a <HAL_GPIO_EXTI_Falling_Callback+0x62>
        systemEvents.rotaryBtnEvent = true;
 8008844:	4b12      	ldr	r3, [pc, #72]	; (8008890 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8008846:	2201      	movs	r2, #1
 8008848:	715a      	strb	r2, [r3, #5]
        //EXTI->IMR1 &= ~(EXTI_IMR1_IM8);
    }

    // Store the pressed button in bitmask for tracking debounce
    debouncedPins |= GPIO_Pin;
 800884a:	1dbb      	adds	r3, r7, #6
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	4b11      	ldr	r3, [pc, #68]	; (8008894 <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	431a      	orrs	r2, r3
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 8008856:	601a      	str	r2, [r3, #0]
    // Mask the interrupt for this button
    EXTI->IMR1 &= ~GPIO_Pin;
 8008858:	4a0f      	ldr	r2, [pc, #60]	; (8008898 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 800885a:	2380      	movs	r3, #128	; 0x80
 800885c:	58d3      	ldr	r3, [r2, r3]
 800885e:	1dba      	adds	r2, r7, #6
 8008860:	8812      	ldrh	r2, [r2, #0]
 8008862:	43d2      	mvns	r2, r2
 8008864:	490c      	ldr	r1, [pc, #48]	; (8008898 <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 8008866:	4013      	ands	r3, r2
 8008868:	2280      	movs	r2, #128	; 0x80
 800886a:	508b      	str	r3, [r1, r2]

    // Start debounce timer
    TIM7->ARR = DEBOUNCE_TIME_MS;
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800886e:	2232      	movs	r2, #50	; 0x32
 8008870:	62da      	str	r2, [r3, #44]	; 0x2c
    LL_TIM_SetCounter(TIM7, 0);
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 8008874:	2100      	movs	r1, #0
 8008876:	0018      	movs	r0, r3
 8008878:	f7ff fe4f 	bl	800851a <LL_TIM_SetCounter>
    LL_TIM_EnableCounter(TIM7);
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff fe2e 	bl	80084e0 <LL_TIM_EnableCounter>
}
 8008884:	46c0      	nop			; (mov r8, r8)
 8008886:	46bd      	mov	sp, r7
 8008888:	b002      	add	sp, #8
 800888a:	bd80      	pop	{r7, pc}
 800888c:	200005bc 	.word	0x200005bc
 8008890:	200005b0 	.word	0x200005b0
 8008894:	200005c4 	.word	0x200005c4
 8008898:	40021800 	.word	0x40021800
 800889c:	40001400 	.word	0x40001400

080088a0 <HAL_GPIO_EXTI_Rising_Callback>:

/*
 * Define Callbacks and ISR
 */
//BTN ISR to set event flags
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	0002      	movs	r2, r0
 80088a8:	1dbb      	adds	r3, r7, #6
 80088aa:	801a      	strh	r2, [r3, #0]

	if (systemEvents.btnPressEvent == true) {
 80088ac:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 80088ae:	799b      	ldrb	r3, [r3, #6]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d04c      	beq.n	8008950 <HAL_GPIO_EXTI_Rising_Callback+0xb0>
		uint32_t releaseTime = HAL_GetTick();
 80088b6:	f003 feef 	bl	800c698 <HAL_GetTick>
 80088ba:	0003      	movs	r3, r0
 80088bc:	60fb      	str	r3, [r7, #12]

		if (GPIO_Pin == SW1_TOGGLE_I_V_Pin) {
 80088be:	1dbb      	adds	r3, r7, #6
 80088c0:	881b      	ldrh	r3, [r3, #0]
 80088c2:	2b04      	cmp	r3, #4
 80088c4:	d10f      	bne.n	80088e6 <HAL_GPIO_EXTI_Rising_Callback+0x46>
			if ((releaseTime - btnPressTimes.voltageCurrentBtn) > 1000) {
 80088c6:	4b25      	ldr	r3, [pc, #148]	; (800895c <HAL_GPIO_EXTI_Rising_Callback+0xbc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	23fa      	movs	r3, #250	; 0xfa
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d903      	bls.n	80088de <HAL_GPIO_EXTI_Rising_Callback+0x3e>
				systemEvents.voltageCurrentBtnLongEvent = true;
 80088d6:	4b20      	ldr	r3, [pc, #128]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 80088d8:	2201      	movs	r2, #1
 80088da:	711a      	strb	r2, [r3, #4]
 80088dc:	e016      	b.n	800890c <HAL_GPIO_EXTI_Rising_Callback+0x6c>
			} else {
				systemEvents.voltageCurrentBtnEvent = true;
 80088de:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	70da      	strb	r2, [r3, #3]
 80088e4:	e012      	b.n	800890c <HAL_GPIO_EXTI_Rising_Callback+0x6c>
			}

		} else if (GPIO_Pin == SW2_DEBUG_BTN_Pin) {
 80088e6:	1dbb      	adds	r3, r7, #6
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d12f      	bne.n	800894e <HAL_GPIO_EXTI_Rising_Callback+0xae>

			if ((releaseTime - btnPressTimes.lockBtn) > 1000) {
 80088ee:	4b1b      	ldr	r3, [pc, #108]	; (800895c <HAL_GPIO_EXTI_Rising_Callback+0xbc>)
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	1ad2      	subs	r2, r2, r3
 80088f6:	23fa      	movs	r3, #250	; 0xfa
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d903      	bls.n	8008906 <HAL_GPIO_EXTI_Rising_Callback+0x66>
				systemEvents.lockBtnLongEvent = true;
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 8008900:	2201      	movs	r2, #1
 8008902:	709a      	strb	r2, [r3, #2]
 8008904:	e002      	b.n	800890c <HAL_GPIO_EXTI_Rising_Callback+0x6c>
			} else {
				systemEvents.lockBtnEvent = true;
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 8008908:	2201      	movs	r2, #1
 800890a:	705a      	strb	r2, [r3, #1]
		} else {
			return;
		}

		// Start debounce timer
		TIM7->ARR = DEBOUNCE_TIME_MS;
 800890c:	4b14      	ldr	r3, [pc, #80]	; (8008960 <HAL_GPIO_EXTI_Rising_Callback+0xc0>)
 800890e:	2232      	movs	r2, #50	; 0x32
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c
		LL_TIM_SetCounter(TIM7, 0);
 8008912:	4b13      	ldr	r3, [pc, #76]	; (8008960 <HAL_GPIO_EXTI_Rising_Callback+0xc0>)
 8008914:	2100      	movs	r1, #0
 8008916:	0018      	movs	r0, r3
 8008918:	f7ff fdff 	bl	800851a <LL_TIM_SetCounter>
		LL_TIM_EnableCounter(TIM7);
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <HAL_GPIO_EXTI_Rising_Callback+0xc0>)
 800891e:	0018      	movs	r0, r3
 8008920:	f7ff fdde 	bl	80084e0 <LL_TIM_EnableCounter>

		//Reset btnPressEvent
		systemEvents.btnPressEvent = false;
 8008924:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <HAL_GPIO_EXTI_Rising_Callback+0xb8>)
 8008926:	2200      	movs	r2, #0
 8008928:	719a      	strb	r2, [r3, #6]

		 // Store the pressed button in bitmask for tracking debounce
		debouncedPins |= GPIO_Pin;
 800892a:	1dbb      	adds	r3, r7, #6
 800892c:	881a      	ldrh	r2, [r3, #0]
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	431a      	orrs	r2, r3
 8008934:	4b0b      	ldr	r3, [pc, #44]	; (8008964 <HAL_GPIO_EXTI_Rising_Callback+0xc4>)
 8008936:	601a      	str	r2, [r3, #0]
		// Mask the interrupt for this button
		EXTI->IMR1 &= ~GPIO_Pin;
 8008938:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	58d3      	ldr	r3, [r2, r3]
 800893e:	1dba      	adds	r2, r7, #6
 8008940:	8812      	ldrh	r2, [r2, #0]
 8008942:	43d2      	mvns	r2, r2
 8008944:	4908      	ldr	r1, [pc, #32]	; (8008968 <HAL_GPIO_EXTI_Rising_Callback+0xc8>)
 8008946:	4013      	ands	r3, r2
 8008948:	2280      	movs	r2, #128	; 0x80
 800894a:	508b      	str	r3, [r1, r2]
 800894c:	e000      	b.n	8008950 <HAL_GPIO_EXTI_Rising_Callback+0xb0>
			return;
 800894e:	46c0      	nop			; (mov r8, r8)
	}
}
 8008950:	46bd      	mov	sp, r7
 8008952:	b004      	add	sp, #16
 8008954:	bd80      	pop	{r7, pc}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	200005b0 	.word	0x200005b0
 800895c:	200005bc 	.word	0x200005bc
 8008960:	40001400 	.word	0x40001400
 8008964:	200005c4 	.word	0x200005c4
 8008968:	40021800 	.word	0x40021800

0800896c <HAL_TIM_IC_CaptureCallback>:

//TIM capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a04      	ldr	r2, [pc, #16]	; (800898c <HAL_TIM_IC_CaptureCallback+0x20>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d102      	bne.n	8008984 <HAL_TIM_IC_CaptureCallback+0x18>
    	systemEvents.encoderTurnEvent = true;
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <HAL_TIM_IC_CaptureCallback+0x24>)
 8008980:	2201      	movs	r2, #1
 8008982:	71da      	strb	r2, [r3, #7]
    }
}
 8008984:	46c0      	nop			; (mov r8, r8)
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}
 800898c:	40000400 	.word	0x40000400
 8008990:	200005b0 	.word	0x200005b0

08008994 <TIM7_ISR>:

/*
 * Timer7 interrupt routine for button debouncing
 */
void TIM7_ISR(void){
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
	//Unmask exti line 1, 2 and 4,8

	LL_TIM_ClearFlag_UPDATE(TIM7);
 8008998:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <TIM7_ISR+0x44>)
 800899a:	0018      	movs	r0, r3
 800899c:	f7ff fdc9 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_DisableCounter(TIM7);
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <TIM7_ISR+0x44>)
 80089a2:	0018      	movs	r0, r3
 80089a4:	f7ff fdaa 	bl	80084fc <LL_TIM_DisableCounter>

	EXTI->IMR1 |= debouncedPins; // Unmask debounced pins
 80089a8:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <TIM7_ISR+0x48>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	490c      	ldr	r1, [pc, #48]	; (80089e0 <TIM7_ISR+0x4c>)
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	58cb      	ldr	r3, [r1, r3]
 80089b2:	490b      	ldr	r1, [pc, #44]	; (80089e0 <TIM7_ISR+0x4c>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	2280      	movs	r2, #128	; 0x80
 80089b8:	508b      	str	r3, [r1, r2]
	EXTI->FPR1 = debouncedPins; // clear falling edge interrupt
 80089ba:	4a09      	ldr	r2, [pc, #36]	; (80089e0 <TIM7_ISR+0x4c>)
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <TIM7_ISR+0x48>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6113      	str	r3, [r2, #16]
	EXTI->RPR1 = debouncedPins; // clear rising edge interrupt
 80089c2:	4a07      	ldr	r2, [pc, #28]	; (80089e0 <TIM7_ISR+0x4c>)
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <TIM7_ISR+0x48>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60d3      	str	r3, [r2, #12]

	// Reset the bitmask after unmasking
	debouncedPins = 0;
 80089ca:	4b04      	ldr	r3, [pc, #16]	; (80089dc <TIM7_ISR+0x48>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]

}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	40001400 	.word	0x40001400
 80089dc:	200005c4 	.word	0x200005c4
 80089e0:	40021800 	.word	0x40021800

080089e4 <TIM14_ISR>:

void TIM14_ISR(void) {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM14)) {
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <TIM14_ISR+0x38>)
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7ff fdad 	bl	800854a <LL_TIM_IsActiveFlag_UPDATE>
 80089f0:	1e03      	subs	r3, r0, #0
 80089f2:	d00f      	beq.n	8008a14 <TIM14_ISR+0x30>
		// Clear the update interrupt flag
		LL_TIM_ClearFlag_UPDATE(TIM14);
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <TIM14_ISR+0x38>)
 80089f6:	0018      	movs	r0, r3
 80089f8:	f7ff fd9b 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>

		// Handle periodic check for ACTIVE state
		systemEvents.periodicCheckEvent = true;
 80089fc:	4b08      	ldr	r3, [pc, #32]	; (8008a20 <TIM14_ISR+0x3c>)
 80089fe:	2201      	movs	r2, #1
 8008a00:	721a      	strb	r2, [r3, #8]
		//Reset CNT value
		LL_TIM_SetCounter(TIM14, 0);
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <TIM14_ISR+0x38>)
 8008a04:	2100      	movs	r1, #0
 8008a06:	0018      	movs	r0, r3
 8008a08:	f7ff fd87 	bl	800851a <LL_TIM_SetCounter>

		//Start timer again
		LL_TIM_EnableCounter(TIM14);
 8008a0c:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <TIM14_ISR+0x38>)
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f7ff fd66 	bl	80084e0 <LL_TIM_EnableCounter>
	}
}
 8008a14:	46c0      	nop			; (mov r8, r8)
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	40002000 	.word	0x40002000
 8008a20:	200005b0 	.word	0x200005b0

08008a24 <TIM15_ISR>:


void TIM15_ISR(void) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
	if (LL_TIM_IsActiveFlag_UPDATE(TIM15)) {
 8008a28:	4b07      	ldr	r3, [pc, #28]	; (8008a48 <TIM15_ISR+0x24>)
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f7ff fd8d 	bl	800854a <LL_TIM_IsActiveFlag_UPDATE>
 8008a30:	1e03      	subs	r3, r0, #0
 8008a32:	d006      	beq.n	8008a42 <TIM15_ISR+0x1e>
		// Clear the update interrupt flag
		LL_TIM_ClearFlag_UPDATE(TIM15);
 8008a34:	4b04      	ldr	r3, [pc, #16]	; (8008a48 <TIM15_ISR+0x24>)
 8008a36:	0018      	movs	r0, r3
 8008a38:	f7ff fd7b 	bl	8008532 <LL_TIM_ClearFlag_UPDATE>

		// Handle periodic check for ACTIVE state
		systemEvents.stateTimeoutEvent = true;
 8008a3c:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <TIM15_ISR+0x28>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	725a      	strb	r2, [r3, #9]
		//Reset CNT value
		//LL_TIM_DisableCounter(TIM15);  // Stop the timer after timeout

	}
}
 8008a42:	46c0      	nop			; (mov r8, r8)
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40014000 	.word	0x40014000
 8008a4c:	200005b0 	.word	0x200005b0

08008a50 <processButtonEvents>:

/*
 * Define Process functions
 */
// Process button events in the main loop (Convert hardware events into logical events)
void processButtonEvents(void) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
    if (events->outputBtnEvent) {
 8008a56:	4b77      	ldr	r3, [pc, #476]	; (8008c34 <processButtonEvents+0x1e4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <processButtonEvents+0x24>
    	//Reset btn event flag
        events->outputBtnEvent = false;
 8008a62:	4b74      	ldr	r3, [pc, #464]	; (8008c34 <processButtonEvents+0x1e4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
        sm->outputBtnPressed = true;
 8008a6a:	4b73      	ldr	r3, [pc, #460]	; (8008c38 <processButtonEvents+0x1e8>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	731a      	strb	r2, [r3, #12]
    	//Reset btn event flag
    	events->rotaryBtnEvent = false;
		sm->rotaryBtnPressed = true;

    }
}
 8008a72:	e0db      	b.n	8008c2c <processButtonEvents+0x1dc>
    } else if (events->voltageCurrentBtnEvent) {
 8008a74:	4b6f      	ldr	r3, [pc, #444]	; (8008c34 <processButtonEvents+0x1e4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	78db      	ldrb	r3, [r3, #3]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <processButtonEvents+0x42>
    	events->voltageCurrentBtnEvent = false;
 8008a80:	4b6c      	ldr	r3, [pc, #432]	; (8008c34 <processButtonEvents+0x1e4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2200      	movs	r2, #0
 8008a86:	70da      	strb	r2, [r3, #3]
    	sm->voltageCurrentBtnPressed = true;
 8008a88:	4b6b      	ldr	r3, [pc, #428]	; (8008c38 <processButtonEvents+0x1e8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	73da      	strb	r2, [r3, #15]
}
 8008a90:	e0cc      	b.n	8008c2c <processButtonEvents+0x1dc>
    } else if (events->voltageCurrentBtnLongEvent) {
 8008a92:	4b68      	ldr	r3, [pc, #416]	; (8008c34 <processButtonEvents+0x1e4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	791b      	ldrb	r3, [r3, #4]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d019      	beq.n	8008ad2 <processButtonEvents+0x82>
       	events->voltageCurrentBtnLongEvent = false;
 8008a9e:	4b65      	ldr	r3, [pc, #404]	; (8008c34 <processButtonEvents+0x1e4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	711a      	strb	r2, [r3, #4]
       	sm->voltageCurrentBtnLongPressed = true;
 8008aa6:	4b64      	ldr	r3, [pc, #400]	; (8008c38 <processButtonEvents+0x1e8>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	741a      	strb	r2, [r3, #16]
       	if (sm->pwrMode == MODE_FIXED) {
 8008aae:	4b62      	ldr	r3, [pc, #392]	; (8008c38 <processButtonEvents+0x1e8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2232      	movs	r2, #50	; 0x32
 8008ab4:	5c9b      	ldrb	r3, [r3, r2]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <processButtonEvents+0x76>
       		sm->pwrMode = MODE_APDO;
 8008aba:	4b5f      	ldr	r3, [pc, #380]	; (8008c38 <processButtonEvents+0x1e8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2232      	movs	r2, #50	; 0x32
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	5499      	strb	r1, [r3, r2]
}
 8008ac4:	e0b2      	b.n	8008c2c <processButtonEvents+0x1dc>
       		sm->pwrMode = MODE_FIXED;
 8008ac6:	4b5c      	ldr	r3, [pc, #368]	; (8008c38 <processButtonEvents+0x1e8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2232      	movs	r2, #50	; 0x32
 8008acc:	2100      	movs	r1, #0
 8008ace:	5499      	strb	r1, [r3, r2]
}
 8008ad0:	e0ac      	b.n	8008c2c <processButtonEvents+0x1dc>
    } else if (events->lockBtnEvent) {
 8008ad2:	4b58      	ldr	r3, [pc, #352]	; (8008c34 <processButtonEvents+0x1e4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d04a      	beq.n	8008b74 <processButtonEvents+0x124>
    	events->lockBtnEvent = false;
 8008ade:	4b55      	ldr	r3, [pc, #340]	; (8008c34 <processButtonEvents+0x1e4>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	705a      	strb	r2, [r3, #1]
    	if (sm->lockMode == UNLOCKED) {
 8008ae6:	4b54      	ldr	r3, [pc, #336]	; (8008c38 <processButtonEvents+0x1e8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2231      	movs	r2, #49	; 0x31
 8008aec:	5c9b      	ldrb	r3, [r3, r2]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d000      	beq.n	8008af4 <processButtonEvents+0xa4>
 8008af2:	e09b      	b.n	8008c2c <processButtonEvents+0x1dc>
    		sm->lockBtnPressed = true;
 8008af4:	4b50      	ldr	r3, [pc, #320]	; (8008c38 <processButtonEvents+0x1e8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2201      	movs	r2, #1
 8008afa:	735a      	strb	r2, [r3, #13]
			switch(sm->OCPMode) {
 8008afc:	4b4e      	ldr	r3, [pc, #312]	; (8008c38 <processButtonEvents+0x1e8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2230      	movs	r2, #48	; 0x30
 8008b02:	5c9b      	ldrb	r3, [r3, r2]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <processButtonEvents+0xbe>
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d027      	beq.n	8008b5c <processButtonEvents+0x10c>
}
 8008b0c:	e08e      	b.n	8008c2c <processButtonEvents+0x1dc>
					sm->OCPMode = OCP_ENABLED;
 8008b0e:	4b4a      	ldr	r3, [pc, #296]	; (8008c38 <processButtonEvents+0x1e8>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2230      	movs	r2, #48	; 0x30
 8008b14:	2101      	movs	r1, #1
 8008b16:	5499      	strb	r1, [r3, r2]
					int isense_Vtrip_mV = (dhandle->currentSet *G_SENSE*R_SENSE_MOHMS)/1000; // mV  (mA * mOhms * Gain)
 8008b18:	4b48      	ldr	r3, [pc, #288]	; (8008c3c <processButtonEvents+0x1ec>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	0013      	movs	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	189b      	adds	r3, r3, r2
 8008b24:	011a      	lsls	r2, r3, #4
 8008b26:	1ad2      	subs	r2, r2, r3
 8008b28:	00d3      	lsls	r3, r2, #3
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	23fa      	movs	r3, #250	; 0xfa
 8008b2e:	0099      	lsls	r1, r3, #2
 8008b30:	0010      	movs	r0, r2
 8008b32:	f7fd fb71 	bl	8006218 <__udivsi3>
 8008b36:	0003      	movs	r3, r0
 8008b38:	607b      	str	r3, [r7, #4]
					int isense_rawADCtrip= (isense_Vtrip_mV *4095) / VDDA_APPLI; //value for AWD treshold
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	0013      	movs	r3, r2
 8008b3e:	031b      	lsls	r3, r3, #12
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	493f      	ldr	r1, [pc, #252]	; (8008c40 <processButtonEvents+0x1f0>)
 8008b44:	0018      	movs	r0, r3
 8008b46:	f7fd fbf1 	bl	800632c <__divsi3>
 8008b4a:	0003      	movs	r3, r0
 8008b4c:	603b      	str	r3, [r7, #0]
					Update_AWD_Thresholds(0, isense_rawADCtrip, ADC_ANALOGWATCHDOG_2);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	4a3c      	ldr	r2, [pc, #240]	; (8008c44 <processButtonEvents+0x1f4>)
 8008b52:	0019      	movs	r1, r3
 8008b54:	2000      	movs	r0, #0
 8008b56:	f7ff fd7b 	bl	8008650 <Update_AWD_Thresholds>
					break;
 8008b5a:	e067      	b.n	8008c2c <processButtonEvents+0x1dc>
					sm->OCPMode = OCP_DISABLED;
 8008b5c:	4b36      	ldr	r3, [pc, #216]	; (8008c38 <processButtonEvents+0x1e8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2230      	movs	r2, #48	; 0x30
 8008b62:	2100      	movs	r1, #0
 8008b64:	5499      	strb	r1, [r3, r2]
					Update_AWD_Thresholds(0, OCP_DISABLED_HT, ADC_ANALOGWATCHDOG_2);
 8008b66:	4a37      	ldr	r2, [pc, #220]	; (8008c44 <processButtonEvents+0x1f4>)
 8008b68:	4b37      	ldr	r3, [pc, #220]	; (8008c48 <processButtonEvents+0x1f8>)
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7ff fd6f 	bl	8008650 <Update_AWD_Thresholds>
					break;
 8008b72:	e05b      	b.n	8008c2c <processButtonEvents+0x1dc>
    } else if (events->lockBtnLongEvent) {
 8008b74:	4b2f      	ldr	r3, [pc, #188]	; (8008c34 <processButtonEvents+0x1e4>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	789b      	ldrb	r3, [r3, #2]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d046      	beq.n	8008c0e <processButtonEvents+0x1be>
    	events->lockBtnLongEvent = false;
 8008b80:	4b2c      	ldr	r3, [pc, #176]	; (8008c34 <processButtonEvents+0x1e4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2200      	movs	r2, #0
 8008b86:	709a      	strb	r2, [r3, #2]
    	sm->lockBtnLongPressed = true;
 8008b88:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <processButtonEvents+0x1e8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	739a      	strb	r2, [r3, #14]
    	if (sm->lockMode == LOCKED) {
 8008b90:	4b29      	ldr	r3, [pc, #164]	; (8008c38 <processButtonEvents+0x1e8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2231      	movs	r2, #49	; 0x31
 8008b96:	5c9b      	ldrb	r3, [r3, r2]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11c      	bne.n	8008bd6 <processButtonEvents+0x186>
    		sm->lockMode = UNLOCKED;
 8008b9c:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <processButtonEvents+0x1e8>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2231      	movs	r2, #49	; 0x31
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	5499      	strb	r1, [r3, r2]
    		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8008ba6:	4b29      	ldr	r3, [pc, #164]	; (8008c4c <processButtonEvents+0x1fc>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2120      	movs	r1, #32
 8008bac:	0018      	movs	r0, r3
 8008bae:	f006 fbb3 	bl	800f318 <HAL_GPIO_WritePin>
    		EXTI->IMR1 |= EXTI_IMR1_IM8; //unmask ENCbtn
 8008bb2:	4a27      	ldr	r2, [pc, #156]	; (8008c50 <processButtonEvents+0x200>)
 8008bb4:	2380      	movs	r3, #128	; 0x80
 8008bb6:	58d3      	ldr	r3, [r2, r3]
 8008bb8:	4925      	ldr	r1, [pc, #148]	; (8008c50 <processButtonEvents+0x200>)
 8008bba:	2280      	movs	r2, #128	; 0x80
 8008bbc:	0052      	lsls	r2, r2, #1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	2280      	movs	r2, #128	; 0x80
 8008bc2:	508b      	str	r3, [r1, r2]
    		EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask SW1 I/V
 8008bc4:	4a22      	ldr	r2, [pc, #136]	; (8008c50 <processButtonEvents+0x200>)
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	58d3      	ldr	r3, [r2, r3]
 8008bca:	4921      	ldr	r1, [pc, #132]	; (8008c50 <processButtonEvents+0x200>)
 8008bcc:	2204      	movs	r2, #4
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	2280      	movs	r2, #128	; 0x80
 8008bd2:	508b      	str	r3, [r1, r2]
}
 8008bd4:	e02a      	b.n	8008c2c <processButtonEvents+0x1dc>
    		sm->lockMode = LOCKED;
 8008bd6:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <processButtonEvents+0x1e8>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2231      	movs	r2, #49	; 0x31
 8008bdc:	2100      	movs	r1, #0
 8008bde:	5499      	strb	r1, [r3, r2]
    		HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
 8008be0:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <processButtonEvents+0x1fc>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	2120      	movs	r1, #32
 8008be6:	0018      	movs	r0, r3
 8008be8:	f006 fb96 	bl	800f318 <HAL_GPIO_WritePin>
    		EXTI->IMR1 &= ~(EXTI_IMR1_IM2); // mask SW1 I/V
 8008bec:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <processButtonEvents+0x200>)
 8008bee:	2380      	movs	r3, #128	; 0x80
 8008bf0:	58d3      	ldr	r3, [r2, r3]
 8008bf2:	4917      	ldr	r1, [pc, #92]	; (8008c50 <processButtonEvents+0x200>)
 8008bf4:	2204      	movs	r2, #4
 8008bf6:	4393      	bics	r3, r2
 8008bf8:	2280      	movs	r2, #128	; 0x80
 8008bfa:	508b      	str	r3, [r1, r2]
    		EXTI->IMR1 &= ~(EXTI_IMR1_IM8); // mask ENCbtnt
 8008bfc:	4a14      	ldr	r2, [pc, #80]	; (8008c50 <processButtonEvents+0x200>)
 8008bfe:	2380      	movs	r3, #128	; 0x80
 8008c00:	58d3      	ldr	r3, [r2, r3]
 8008c02:	4913      	ldr	r1, [pc, #76]	; (8008c50 <processButtonEvents+0x200>)
 8008c04:	4a13      	ldr	r2, [pc, #76]	; (8008c54 <processButtonEvents+0x204>)
 8008c06:	4013      	ands	r3, r2
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	508b      	str	r3, [r1, r2]
}
 8008c0c:	e00e      	b.n	8008c2c <processButtonEvents+0x1dc>
    } else if (events->rotaryBtnEvent) {
 8008c0e:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <processButtonEvents+0x1e4>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	795b      	ldrb	r3, [r3, #5]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <processButtonEvents+0x1dc>
    	events->rotaryBtnEvent = false;
 8008c1a:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <processButtonEvents+0x1e4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	715a      	strb	r2, [r3, #5]
		sm->rotaryBtnPressed = true;
 8008c22:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <processButtonEvents+0x1e8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	745a      	strb	r2, [r3, #17]
}
 8008c2a:	e7ff      	b.n	8008c2c <processButtonEvents+0x1dc>
 8008c2c:	46c0      	nop			; (mov r8, r8)
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b002      	add	sp, #8
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000100 	.word	0x20000100
 8008c38:	200000fc 	.word	0x200000fc
 8008c3c:	200000f8 	.word	0x200000f8
 8008c40:	00000ce4 	.word	0x00000ce4
 8008c44:	0017ffff 	.word	0x0017ffff
 8008c48:	00001770 	.word	0x00001770
 8008c4c:	50000800 	.word	0x50000800
 8008c50:	40021800 	.word	0x40021800
 8008c54:	fffffeff 	.word	0xfffffeff

08008c58 <processSystemEvents>:

// Main system event processor that calls specialized handlers
void processSystemEvents(void) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
    // Process different event types using specialized functions
    processButtonEvents();
 8008c5c:	f7ff fef8 	bl	8008a50 <processButtonEvents>

    if (events->encoderTurnEvent) {
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <processSystemEvents+0x80>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	79db      	ldrb	r3, [r3, #7]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <processSystemEvents+0x24>
    	sm->encoderTurnedFlag = true;
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <processSystemEvents+0x84>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2201      	movs	r2, #1
 8008c72:	749a      	strb	r2, [r3, #18]
    	events->encoderTurnEvent = false;
 8008c74:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <processSystemEvents+0x80>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	71da      	strb	r2, [r3, #7]
    }
    if (events->stateTimeoutEvent) {
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <processSystemEvents+0x80>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	7a5b      	ldrb	r3, [r3, #9]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <processSystemEvents+0x40>
		sm->stateTimeoutFlag= true;
 8008c88:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <processSystemEvents+0x84>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	74da      	strb	r2, [r3, #19]
		events->stateTimeoutEvent = false;
 8008c90:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <processSystemEvents+0x80>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	725a      	strb	r2, [r3, #9]
	}
	if (events->periodicCheckEvent) {
 8008c98:	4b0f      	ldr	r3, [pc, #60]	; (8008cd8 <processSystemEvents+0x80>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	7a1b      	ldrb	r3, [r3, #8]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <processSystemEvents+0x5c>
		sm->periodicCheckFlag= true;
 8008ca4:	4b0d      	ldr	r3, [pc, #52]	; (8008cdc <processSystemEvents+0x84>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	751a      	strb	r2, [r3, #20]
		events->periodicCheckEvent = false;
 8008cac:	4b0a      	ldr	r3, [pc, #40]	; (8008cd8 <processSystemEvents+0x80>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	721a      	strb	r2, [r3, #8]
	}
    // Process AWDG events
    if (events->awdgEvent) {
 8008cb4:	4b08      	ldr	r3, [pc, #32]	; (8008cd8 <processSystemEvents+0x80>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	7a9b      	ldrb	r3, [r3, #10]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <processSystemEvents+0x78>
        events->awdgEvent = false;
 8008cc0:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <processSystemEvents+0x80>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	729a      	strb	r2, [r3, #10]
        sm->awdgTriggeredFlag = true;
 8008cc8:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <processSystemEvents+0x84>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	755a      	strb	r2, [r3, #21]
    }
}
 8008cd0:	46c0      	nop			; (mov r8, r8)
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	20000100 	.word	0x20000100
 8008cdc:	200000fc 	.word	0x200000fc

08008ce0 <handleCOMportstatus>:

void handleCOMportstatus(uint8_t host_com_port_open){
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	0002      	movs	r2, r0
 8008ce8:	1dfb      	adds	r3, r7, #7
 8008cea:	701a      	strb	r2, [r3, #0]
	 static bool entryDone = false;
	 if (host_com_port_open == 1 && !entryDone) {
 8008cec:	1dfb      	adds	r3, r7, #7
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d139      	bne.n	8008d68 <handleCOMportstatus+0x88>
 8008cf4:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <handleCOMportstatus+0xfc>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4053      	eors	r3, r2
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d032      	beq.n	8008d68 <handleCOMportstatus+0x88>
		 //Set COM state to OPEN
		 sm->comState = STATE_OPEN;
 8008d02:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <handleCOMportstatus+0x100>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	709a      	strb	r2, [r3, #2]
		 //Set default state timeout to 4000;
		 sm->timeoutCounter = 4000;
 8008d0a:	4b35      	ldr	r3, [pc, #212]	; (8008de0 <handleCOMportstatus+0x100>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	22fa      	movs	r2, #250	; 0xfa
 8008d10:	0112      	lsls	r2, r2, #4
 8008d12:	609a      	str	r2, [r3, #8]

		 //Drive lock LED
		 HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_SET);
 8008d14:	4b33      	ldr	r3, [pc, #204]	; (8008de4 <handleCOMportstatus+0x104>)
 8008d16:	2201      	movs	r2, #1
 8008d18:	2120      	movs	r1, #32
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f006 fafc 	bl	800f318 <HAL_GPIO_WritePin>

		 //Disable BTN interrupts
		 EXTI->IMR1 &= ~(EXTI_IMR1_IM2); //SW1
 8008d20:	4a31      	ldr	r2, [pc, #196]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d22:	2380      	movs	r3, #128	; 0x80
 8008d24:	58d3      	ldr	r3, [r2, r3]
 8008d26:	4930      	ldr	r1, [pc, #192]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d28:	2204      	movs	r2, #4
 8008d2a:	4393      	bics	r3, r2
 8008d2c:	2280      	movs	r2, #128	; 0x80
 8008d2e:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 &= ~(EXTI_IMR1_IM4); //SW2
 8008d30:	4a2d      	ldr	r2, [pc, #180]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	58d3      	ldr	r3, [r2, r3]
 8008d36:	492c      	ldr	r1, [pc, #176]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d38:	2210      	movs	r2, #16
 8008d3a:	4393      	bics	r3, r2
 8008d3c:	2280      	movs	r2, #128	; 0x80
 8008d3e:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 &= ~(EXTI_IMR1_IM1); //SW3
 8008d40:	4a29      	ldr	r2, [pc, #164]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d42:	2380      	movs	r3, #128	; 0x80
 8008d44:	58d3      	ldr	r3, [r2, r3]
 8008d46:	4928      	ldr	r1, [pc, #160]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d48:	2202      	movs	r2, #2
 8008d4a:	4393      	bics	r3, r2
 8008d4c:	2280      	movs	r2, #128	; 0x80
 8008d4e:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 &= ~(EXTI_IMR1_IM8); //ENC btn
 8008d50:	4a25      	ldr	r2, [pc, #148]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d52:	2380      	movs	r3, #128	; 0x80
 8008d54:	58d3      	ldr	r3, [r2, r3]
 8008d56:	4924      	ldr	r1, [pc, #144]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d58:	4a24      	ldr	r2, [pc, #144]	; (8008dec <handleCOMportstatus+0x10c>)
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2280      	movs	r2, #128	; 0x80
 8008d5e:	508b      	str	r3, [r1, r2]

		 entryDone = true;
 8008d60:	4b1e      	ldr	r3, [pc, #120]	; (8008ddc <handleCOMportstatus+0xfc>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	701a      	strb	r2, [r3, #0]
		 //If COM closed return savely to IDLE
		 sm->currentState = STATE_IDLE;

		 entryDone = false;
	 }
}
 8008d66:	e035      	b.n	8008dd4 <handleCOMportstatus+0xf4>
	 } else if (host_com_port_open == 0) {
 8008d68:	1dfb      	adds	r3, r7, #7
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d131      	bne.n	8008dd4 <handleCOMportstatus+0xf4>
		 sm->comState = STATE_CLOSED;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	; (8008de0 <handleCOMportstatus+0x100>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2201      	movs	r2, #1
 8008d76:	709a      	strb	r2, [r3, #2]
		 HAL_GPIO_WritePin(LED_LOCK_GPIO_Port, LED_LOCK_Pin, GPIO_PIN_RESET);
 8008d78:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <handleCOMportstatus+0x104>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2120      	movs	r1, #32
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f006 faca 	bl	800f318 <HAL_GPIO_WritePin>
		 EXTI->IMR1 |= EXTI_IMR1_IM8; //unmask exti line 8
 8008d84:	4a18      	ldr	r2, [pc, #96]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d86:	2380      	movs	r3, #128	; 0x80
 8008d88:	58d3      	ldr	r3, [r2, r3]
 8008d8a:	4917      	ldr	r1, [pc, #92]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d8c:	2280      	movs	r2, #128	; 0x80
 8008d8e:	0052      	lsls	r2, r2, #1
 8008d90:	4313      	orrs	r3, r2
 8008d92:	2280      	movs	r2, #128	; 0x80
 8008d94:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 |= EXTI_IMR1_IM4; //unmask exti line 4
 8008d96:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	58d3      	ldr	r3, [r2, r3]
 8008d9c:	4912      	ldr	r1, [pc, #72]	; (8008de8 <handleCOMportstatus+0x108>)
 8008d9e:	2210      	movs	r2, #16
 8008da0:	4313      	orrs	r3, r2
 8008da2:	2280      	movs	r2, #128	; 0x80
 8008da4:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 |= EXTI_IMR1_IM2; //unmask exti line 2
 8008da6:	4a10      	ldr	r2, [pc, #64]	; (8008de8 <handleCOMportstatus+0x108>)
 8008da8:	2380      	movs	r3, #128	; 0x80
 8008daa:	58d3      	ldr	r3, [r2, r3]
 8008dac:	490e      	ldr	r1, [pc, #56]	; (8008de8 <handleCOMportstatus+0x108>)
 8008dae:	2204      	movs	r2, #4
 8008db0:	4313      	orrs	r3, r2
 8008db2:	2280      	movs	r2, #128	; 0x80
 8008db4:	508b      	str	r3, [r1, r2]
		 EXTI->IMR1 |= EXTI_IMR1_IM1; //unmask exti line 1
 8008db6:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <handleCOMportstatus+0x108>)
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	58d3      	ldr	r3, [r2, r3]
 8008dbc:	490a      	ldr	r1, [pc, #40]	; (8008de8 <handleCOMportstatus+0x108>)
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	2280      	movs	r2, #128	; 0x80
 8008dc4:	508b      	str	r3, [r1, r2]
		 sm->currentState = STATE_IDLE;
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <handleCOMportstatus+0x100>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	701a      	strb	r2, [r3, #0]
		 entryDone = false;
 8008dce:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <handleCOMportstatus+0xfc>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	701a      	strb	r2, [r3, #0]
}
 8008dd4:	46c0      	nop			; (mov r8, r8)
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b002      	add	sp, #8
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	200005c8 	.word	0x200005c8
 8008de0:	200000fc 	.word	0x200000fc
 8008de4:	50000800 	.word	0x50000800
 8008de8:	40021800 	.word	0x40021800
 8008dec:	fffffeff 	.word	0xfffffeff

08008df0 <cleanString>:
void cleanString(const char* input, char* output, const char* delimiter) {
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b0a7      	sub	sp, #156	; 0x9c
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
    char temp[128];  // Temporary buffer for safe modification
    strncpy(temp, input, sizeof(temp) - 1);
 8008dfc:	68f9      	ldr	r1, [r7, #12]
 8008dfe:	2414      	movs	r4, #20
 8008e00:	193b      	adds	r3, r7, r4
 8008e02:	227f      	movs	r2, #127	; 0x7f
 8008e04:	0018      	movs	r0, r3
 8008e06:	f01e fe51 	bl	8027aac <strncpy>
    temp[sizeof(temp) - 1] = '\0';  // Ensure null-termination
 8008e0a:	0020      	movs	r0, r4
 8008e0c:	183b      	adds	r3, r7, r0
 8008e0e:	227f      	movs	r2, #127	; 0x7f
 8008e10:	2100      	movs	r1, #0
 8008e12:	5499      	strb	r1, [r3, r2]

    char* token = strtok(temp, delimiter);
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	183b      	adds	r3, r7, r0
 8008e18:	0011      	movs	r1, r2
 8008e1a:	0018      	movs	r0, r3
 8008e1c:	f01e fe5a 	bl	8027ad4 <strtok>
 8008e20:	0003      	movs	r3, r0
 8008e22:	2294      	movs	r2, #148	; 0x94
 8008e24:	18ba      	adds	r2, r7, r2
 8008e26:	6013      	str	r3, [r2, #0]
    output[0] = '\0';  // Start with an empty output string
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]

    while (token != NULL) {
 8008e2e:	e00f      	b.n	8008e50 <cleanString+0x60>
        strcat(output, token);  // Append token to output
 8008e30:	2494      	movs	r4, #148	; 0x94
 8008e32:	193b      	adds	r3, r7, r4
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	0011      	movs	r1, r2
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f01e fe18 	bl	8027a70 <strcat>
        token = strtok(NULL, delimiter);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	0019      	movs	r1, r3
 8008e44:	2000      	movs	r0, #0
 8008e46:	f01e fe45 	bl	8027ad4 <strtok>
 8008e4a:	0003      	movs	r3, r0
 8008e4c:	193a      	adds	r2, r7, r4
 8008e4e:	6013      	str	r3, [r2, #0]
    while (token != NULL) {
 8008e50:	2394      	movs	r3, #148	; 0x94
 8008e52:	18fb      	adds	r3, r7, r3
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1ea      	bne.n	8008e30 <cleanString+0x40>
    }
}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	46c0      	nop			; (mov r8, r8)
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	b027      	add	sp, #156	; 0x9c
 8008e62:	bd90      	pop	{r4, r7, pc}

08008e64 <processUSBCommand>:

void processUSBCommand(uint8_t* command, uint32_t length)
{
 8008e64:	b5b0      	push	{r4, r5, r7, lr}
 8008e66:	b0bc      	sub	sp, #240	; 0xf0
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	// If only fixed profiles, abort communication
	if (dhandle->hasAPDO == true) {
 8008e6e:	4bbf      	ldr	r3, [pc, #764]	; (800916c <processUSBCommand+0x308>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	22aa      	movs	r2, #170	; 0xaa
 8008e74:	5c9b      	ldrb	r3, [r3, r2]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d100      	bne.n	8008e7c <processUSBCommand+0x18>
 8008e7a:	e2ee      	b.n	800945a <processUSBCommand+0x5f6>
		sm->pwrMode = MODE_APDO;
 8008e7c:	4bbc      	ldr	r3, [pc, #752]	; (8009170 <processUSBCommand+0x30c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2232      	movs	r2, #50	; 0x32
 8008e82:	2101      	movs	r1, #1
 8008e84:	5499      	strb	r1, [r3, r2]
	else {
		return;
	}

	// Null-terminate the command to ensure string functions work properly
	command[length] = '\0';
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	18d3      	adds	r3, r2, r3
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	701a      	strb	r2, [r3, #0]

	// Make a copy for tokenization
	char cmd_copy[64] = {0};
 8008e90:	2488      	movs	r4, #136	; 0x88
 8008e92:	193b      	adds	r3, r7, r4
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	3304      	adds	r3, #4
 8008e9a:	223c      	movs	r2, #60	; 0x3c
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f01e fdde 	bl	8027a60 <memset>
	strncpy(cmd_copy, (char*)command, sizeof(cmd_copy)-1);
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	193b      	adds	r3, r7, r4
 8008ea8:	223f      	movs	r2, #63	; 0x3f
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f01e fdfe 	bl	8027aac <strncpy>

	// Clear white spaces..
	char cmd_trimmed[64];
	cleanString(cmd_copy, cmd_trimmed, " ");
 8008eb0:	4ab0      	ldr	r2, [pc, #704]	; (8009174 <processUSBCommand+0x310>)
 8008eb2:	2548      	movs	r5, #72	; 0x48
 8008eb4:	1979      	adds	r1, r7, r5
 8008eb6:	193b      	adds	r3, r7, r4
 8008eb8:	0018      	movs	r0, r3
 8008eba:	f7ff ff99 	bl	8008df0 <cleanString>

	// Extract command part (everything up to : )
	char* cmd_part = strtok(cmd_trimmed, ":");
 8008ebe:	4aae      	ldr	r2, [pc, #696]	; (8009178 <processUSBCommand+0x314>)
 8008ec0:	197b      	adds	r3, r7, r5
 8008ec2:	0011      	movs	r1, r2
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f01e fe05 	bl	8027ad4 <strtok>
 8008eca:	0003      	movs	r3, r0
 8008ecc:	22e0      	movs	r2, #224	; 0xe0
 8008ece:	18b9      	adds	r1, r7, r2
 8008ed0:	600b      	str	r3, [r1, #0]
	char* params = NULL; // extracts the part after "numbers"
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	24e4      	movs	r4, #228	; 0xe4
 8008ed6:	1939      	adds	r1, r7, r4
 8008ed8:	600b      	str	r3, [r1, #0]

	// Parameters start after the delimiter
	if (cmd_part != NULL && strlen(cmd_part) < length) {
 8008eda:	18bb      	adds	r3, r7, r2
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d010      	beq.n	8008f04 <processUSBCommand+0xa0>
 8008ee2:	18bb      	adds	r3, r7, r2
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f7fd f97a 	bl	80061e0 <strlen>
 8008eec:	0002      	movs	r2, r0
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d907      	bls.n	8008f04 <processUSBCommand+0xa0>
		params = strtok(NULL, ":");  // Get remaining part after ':'
 8008ef4:	4ba0      	ldr	r3, [pc, #640]	; (8009178 <processUSBCommand+0x314>)
 8008ef6:	0019      	movs	r1, r3
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f01e fdeb 	bl	8027ad4 <strtok>
 8008efe:	0003      	movs	r3, r0
 8008f00:	193a      	adds	r2, r7, r4
 8008f02:	6013      	str	r3, [r2, #0]

	//Create buffer for response
	char response[64];

	//Process commands
    if (strcmp(cmd_part, "OCP1") == 0)
 8008f04:	4a9d      	ldr	r2, [pc, #628]	; (800917c <processUSBCommand+0x318>)
 8008f06:	23e0      	movs	r3, #224	; 0xe0
 8008f08:	18fb      	adds	r3, r7, r3
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	0011      	movs	r1, r2
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f7fd f95c 	bl	80061cc <strcmp>
 8008f14:	1e03      	subs	r3, r0, #0
 8008f16:	d133      	bne.n	8008f80 <processUSBCommand+0x11c>
    {
    	snprintf(response, sizeof(response), "OCP enabled\r\n");
 8008f18:	4a99      	ldr	r2, [pc, #612]	; (8009180 <processUSBCommand+0x31c>)
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	18fb      	adds	r3, r7, r3
 8008f1e:	2140      	movs	r1, #64	; 0x40
 8008f20:	0018      	movs	r0, r3
 8008f22:	f01e fcfd 	bl	8027920 <sniprintf>

        sm->OCPMode = OCP_ENABLED;
 8008f26:	4b92      	ldr	r3, [pc, #584]	; (8009170 <processUSBCommand+0x30c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2230      	movs	r2, #48	; 0x30
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	5499      	strb	r1, [r3, r2]

		//Update AWD limits
		int isense_Vtrip_mV = (dhandle->currentSet *G_SENSE*R_SENSE_MOHMS)/1000; // mV  (mA * mOhms * Gain)
 8008f30:	4b8e      	ldr	r3, [pc, #568]	; (800916c <processUSBCommand+0x308>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	0013      	movs	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	189b      	adds	r3, r3, r2
 8008f3c:	011a      	lsls	r2, r3, #4
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	00d3      	lsls	r3, r2, #3
 8008f42:	001a      	movs	r2, r3
 8008f44:	23fa      	movs	r3, #250	; 0xfa
 8008f46:	0099      	lsls	r1, r3, #2
 8008f48:	0010      	movs	r0, r2
 8008f4a:	f7fd f965 	bl	8006218 <__udivsi3>
 8008f4e:	0003      	movs	r3, r0
 8008f50:	22cc      	movs	r2, #204	; 0xcc
 8008f52:	18b9      	adds	r1, r7, r2
 8008f54:	600b      	str	r3, [r1, #0]
		int isense_rawADCtrip= (isense_Vtrip_mV *4095) / VDDA_APPLI; //value for AWD treshold
 8008f56:	18bb      	adds	r3, r7, r2
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	0013      	movs	r3, r2
 8008f5c:	031b      	lsls	r3, r3, #12
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	4988      	ldr	r1, [pc, #544]	; (8009184 <processUSBCommand+0x320>)
 8008f62:	0018      	movs	r0, r3
 8008f64:	f7fd f9e2 	bl	800632c <__divsi3>
 8008f68:	0003      	movs	r3, r0
 8008f6a:	22c8      	movs	r2, #200	; 0xc8
 8008f6c:	18b9      	adds	r1, r7, r2
 8008f6e:	600b      	str	r3, [r1, #0]
		Update_AWD_Thresholds(0, isense_rawADCtrip, ADC_ANALOGWATCHDOG_2);
 8008f70:	18bb      	adds	r3, r7, r2
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a84      	ldr	r2, [pc, #528]	; (8009188 <processUSBCommand+0x324>)
 8008f76:	0019      	movs	r1, r3
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f7ff fb69 	bl	8008650 <Update_AWD_Thresholds>
 8008f7e:	e25f      	b.n	8009440 <processUSBCommand+0x5dc>
    }
    else if (strcmp(cmd_part, "OCP0") == 0)
 8008f80:	4a82      	ldr	r2, [pc, #520]	; (800918c <processUSBCommand+0x328>)
 8008f82:	23e0      	movs	r3, #224	; 0xe0
 8008f84:	18fb      	adds	r3, r7, r3
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7fd f91e 	bl	80061cc <strcmp>
 8008f90:	1e03      	subs	r3, r0, #0
 8008f92:	d112      	bne.n	8008fba <processUSBCommand+0x156>
    {
    	snprintf(response, sizeof(response), "OCP disabled\r\n");
 8008f94:	4a7e      	ldr	r2, [pc, #504]	; (8009190 <processUSBCommand+0x32c>)
 8008f96:	2308      	movs	r3, #8
 8008f98:	18fb      	adds	r3, r7, r3
 8008f9a:	2140      	movs	r1, #64	; 0x40
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f01e fcbf 	bl	8027920 <sniprintf>

        sm->OCPMode = OCP_DISABLED;
 8008fa2:	4b73      	ldr	r3, [pc, #460]	; (8009170 <processUSBCommand+0x30c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2230      	movs	r2, #48	; 0x30
 8008fa8:	2100      	movs	r1, #0
 8008faa:	5499      	strb	r1, [r3, r2]
		//Update AWD limits
		Update_AWD_Thresholds(0, OCP_DISABLED_HT, ADC_ANALOGWATCHDOG_2);
 8008fac:	4a76      	ldr	r2, [pc, #472]	; (8009188 <processUSBCommand+0x324>)
 8008fae:	4b79      	ldr	r3, [pc, #484]	; (8009194 <processUSBCommand+0x330>)
 8008fb0:	0019      	movs	r1, r3
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	f7ff fb4c 	bl	8008650 <Update_AWD_Thresholds>
 8008fb8:	e242      	b.n	8009440 <processUSBCommand+0x5dc>
    }
    else if (strcmp(cmd_part, "VSET1") == 0)
 8008fba:	4a77      	ldr	r2, [pc, #476]	; (8009198 <processUSBCommand+0x334>)
 8008fbc:	23e0      	movs	r3, #224	; 0xe0
 8008fbe:	18fb      	adds	r3, r7, r3
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	0011      	movs	r1, r2
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f7fd f901 	bl	80061cc <strcmp>
 8008fca:	1e03      	subs	r3, r0, #0
 8008fcc:	d151      	bne.n	8009072 <processUSBCommand+0x20e>
    {
    	sm->rotaryBtnPressed = true;
 8008fce:	4b68      	ldr	r3, [pc, #416]	; (8009170 <processUSBCommand+0x30c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	745a      	strb	r2, [r3, #17]
    	sm->setValueMode = SET_VOLTAGE;
 8008fd6:	4b66      	ldr	r3, [pc, #408]	; (8009170 <processUSBCommand+0x30c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2234      	movs	r2, #52	; 0x34
 8008fdc:	2100      	movs	r1, #0
 8008fde:	5499      	strb	r1, [r3, r2]

    	uint32_t voltage = atof(params)*100; // Convert float to uint (also V to centivolts)
 8008fe0:	23e4      	movs	r3, #228	; 0xe4
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f01d fce2 	bl	80269b0 <atof>
 8008fec:	2200      	movs	r2, #0
 8008fee:	4b6b      	ldr	r3, [pc, #428]	; (800919c <processUSBCommand+0x338>)
 8008ff0:	f7fe fb7c 	bl	80076ec <__aeabi_dmul>
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	000b      	movs	r3, r1
 8008ff8:	0010      	movs	r0, r2
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	f7fd fae0 	bl	80065c0 <__aeabi_d2uiz>
 8009000:	0003      	movs	r3, r0
 8009002:	21d0      	movs	r1, #208	; 0xd0
 8009004:	187a      	adds	r2, r7, r1
 8009006:	6013      	str	r3, [r2, #0]

    	if (dhandle->voltageMin < voltage && voltage < dhandle->voltageMax) {
 8009008:	4b58      	ldr	r3, [pc, #352]	; (800916c <processUSBCommand+0x308>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	187a      	adds	r2, r7, r1
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d925      	bls.n	8009062 <processUSBCommand+0x1fe>
 8009016:	4b55      	ldr	r3, [pc, #340]	; (800916c <processUSBCommand+0x308>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	187a      	adds	r2, r7, r1
 800901e:	6812      	ldr	r2, [r2, #0]
 8009020:	429a      	cmp	r2, r3
 8009022:	d21e      	bcs.n	8009062 <processUSBCommand+0x1fe>
    	   	dhandle->voltageSet = voltage; //save in centivolts
 8009024:	4b51      	ldr	r3, [pc, #324]	; (800916c <processUSBCommand+0x308>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	187a      	adds	r2, r7, r1
 800902a:	6812      	ldr	r2, [r2, #0]
 800902c:	601a      	str	r2, [r3, #0]
    		snprintf(response, sizeof(response), "Voltage set to new value: %lu.%02lu V\r\n", dhandle->voltageSet / 100, dhandle->voltageSet % 100);
 800902e:	4b4f      	ldr	r3, [pc, #316]	; (800916c <processUSBCommand+0x308>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2164      	movs	r1, #100	; 0x64
 8009036:	0018      	movs	r0, r3
 8009038:	f7fd f8ee 	bl	8006218 <__udivsi3>
 800903c:	0003      	movs	r3, r0
 800903e:	001c      	movs	r4, r3
 8009040:	4b4a      	ldr	r3, [pc, #296]	; (800916c <processUSBCommand+0x308>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2164      	movs	r1, #100	; 0x64
 8009048:	0018      	movs	r0, r3
 800904a:	f7fd f96b 	bl	8006324 <__aeabi_uidivmod>
 800904e:	000b      	movs	r3, r1
 8009050:	4a53      	ldr	r2, [pc, #332]	; (80091a0 <processUSBCommand+0x33c>)
 8009052:	2108      	movs	r1, #8
 8009054:	1878      	adds	r0, r7, r1
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	0023      	movs	r3, r4
 800905a:	2140      	movs	r1, #64	; 0x40
 800905c:	f01e fc60 	bl	8027920 <sniprintf>
 8009060:	e1ee      	b.n	8009440 <processUSBCommand+0x5dc>
    	} else {
    		snprintf(response, sizeof(response), "ERROR: Voltage out of bounds\r\n");
 8009062:	4a50      	ldr	r2, [pc, #320]	; (80091a4 <processUSBCommand+0x340>)
 8009064:	2308      	movs	r3, #8
 8009066:	18fb      	adds	r3, r7, r3
 8009068:	2140      	movs	r1, #64	; 0x40
 800906a:	0018      	movs	r0, r3
 800906c:	f01e fc58 	bl	8027920 <sniprintf>
 8009070:	e1e6      	b.n	8009440 <processUSBCommand+0x5dc>
    	}
    }
    else if (strcmp(cmd_part, "TIMEOUT1") == 0)
 8009072:	4a4d      	ldr	r2, [pc, #308]	; (80091a8 <processUSBCommand+0x344>)
 8009074:	23e0      	movs	r3, #224	; 0xe0
 8009076:	18fb      	adds	r3, r7, r3
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	0011      	movs	r1, r2
 800907c:	0018      	movs	r0, r3
 800907e:	f7fd f8a5 	bl	80061cc <strcmp>
 8009082:	1e03      	subs	r3, r0, #0
 8009084:	d143      	bne.n	800910e <processUSBCommand+0x2aa>
	{
		uint32_t ms = atof(params)*1000; // Convert float to uint milliseconds
 8009086:	23e4      	movs	r3, #228	; 0xe4
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	0018      	movs	r0, r3
 800908e:	f01d fc8f 	bl	80269b0 <atof>
 8009092:	2200      	movs	r2, #0
 8009094:	4b45      	ldr	r3, [pc, #276]	; (80091ac <processUSBCommand+0x348>)
 8009096:	f7fe fb29 	bl	80076ec <__aeabi_dmul>
 800909a:	0002      	movs	r2, r0
 800909c:	000b      	movs	r3, r1
 800909e:	0010      	movs	r0, r2
 80090a0:	0019      	movs	r1, r3
 80090a2:	f7fd fa8d 	bl	80065c0 <__aeabi_d2uiz>
 80090a6:	0003      	movs	r3, r0
 80090a8:	25d4      	movs	r5, #212	; 0xd4
 80090aa:	197a      	adds	r2, r7, r5
 80090ac:	6013      	str	r3, [r2, #0]

		if (0 < ms && ms < 10000) {
 80090ae:	197b      	adds	r3, r7, r5
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d023      	beq.n	80090fe <processUSBCommand+0x29a>
 80090b6:	197b      	adds	r3, r7, r5
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a3d      	ldr	r2, [pc, #244]	; (80091b0 <processUSBCommand+0x34c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d81e      	bhi.n	80090fe <processUSBCommand+0x29a>
			sm->timeoutCounter = ms;
 80090c0:	4b2b      	ldr	r3, [pc, #172]	; (8009170 <processUSBCommand+0x30c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	197a      	adds	r2, r7, r5
 80090c6:	6812      	ldr	r2, [r2, #0]
 80090c8:	609a      	str	r2, [r3, #8]
			snprintf(response, sizeof(response), "Timeout set to new value: %lu.%03lu s\r\n", ms / 1000, ms % 1000);
 80090ca:	197b      	adds	r3, r7, r5
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	22fa      	movs	r2, #250	; 0xfa
 80090d0:	0091      	lsls	r1, r2, #2
 80090d2:	0018      	movs	r0, r3
 80090d4:	f7fd f8a0 	bl	8006218 <__udivsi3>
 80090d8:	0003      	movs	r3, r0
 80090da:	001c      	movs	r4, r3
 80090dc:	197b      	adds	r3, r7, r5
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	22fa      	movs	r2, #250	; 0xfa
 80090e2:	0091      	lsls	r1, r2, #2
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7fd f91d 	bl	8006324 <__aeabi_uidivmod>
 80090ea:	000b      	movs	r3, r1
 80090ec:	4a31      	ldr	r2, [pc, #196]	; (80091b4 <processUSBCommand+0x350>)
 80090ee:	2108      	movs	r1, #8
 80090f0:	1878      	adds	r0, r7, r1
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	0023      	movs	r3, r4
 80090f6:	2140      	movs	r1, #64	; 0x40
 80090f8:	f01e fc12 	bl	8027920 <sniprintf>
 80090fc:	e1a0      	b.n	8009440 <processUSBCommand+0x5dc>
		} else {
			snprintf(response, sizeof(response), "ERROR: Timeout out of bounds (0-10s)\r\n");
 80090fe:	4a2e      	ldr	r2, [pc, #184]	; (80091b8 <processUSBCommand+0x354>)
 8009100:	2308      	movs	r3, #8
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	2140      	movs	r1, #64	; 0x40
 8009106:	0018      	movs	r0, r3
 8009108:	f01e fc0a 	bl	8027920 <sniprintf>
 800910c:	e198      	b.n	8009440 <processUSBCommand+0x5dc>
		}
	}
    else if (strcmp(cmd_part, "VSET1?") == 0)
 800910e:	4a2b      	ldr	r2, [pc, #172]	; (80091bc <processUSBCommand+0x358>)
 8009110:	23e0      	movs	r3, #224	; 0xe0
 8009112:	18fb      	adds	r3, r7, r3
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	0011      	movs	r1, r2
 8009118:	0018      	movs	r0, r3
 800911a:	f7fd f857 	bl	80061cc <strcmp>
 800911e:	1e03      	subs	r3, r0, #0
 8009120:	d150      	bne.n	80091c4 <processUSBCommand+0x360>
	{
		// Convert to volts and format as "XX.XX V"
		snprintf(response, sizeof(response), "Voltage is set to: %lu.%02lu V\r\n", dhandle->voltageSet / 100, dhandle->voltageSet % 100);
 8009122:	4b12      	ldr	r3, [pc, #72]	; (800916c <processUSBCommand+0x308>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2164      	movs	r1, #100	; 0x64
 800912a:	0018      	movs	r0, r3
 800912c:	f7fd f874 	bl	8006218 <__udivsi3>
 8009130:	0003      	movs	r3, r0
 8009132:	001c      	movs	r4, r3
 8009134:	4b0d      	ldr	r3, [pc, #52]	; (800916c <processUSBCommand+0x308>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2164      	movs	r1, #100	; 0x64
 800913c:	0018      	movs	r0, r3
 800913e:	f7fd f8f1 	bl	8006324 <__aeabi_uidivmod>
 8009142:	000b      	movs	r3, r1
 8009144:	4a1e      	ldr	r2, [pc, #120]	; (80091c0 <processUSBCommand+0x35c>)
 8009146:	2108      	movs	r1, #8
 8009148:	1878      	adds	r0, r7, r1
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	0023      	movs	r3, r4
 800914e:	2140      	movs	r1, #64	; 0x40
 8009150:	f01e fbe6 	bl	8027920 <sniprintf>

		sm->OCPMode = OCP_DISABLED;
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <processUSBCommand+0x30c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2230      	movs	r2, #48	; 0x30
 800915a:	2100      	movs	r1, #0
 800915c:	5499      	strb	r1, [r3, r2]
		//Update AWD limits
		Update_AWD_Thresholds(0, OCP_DISABLED_HT, ADC_ANALOGWATCHDOG_2);
 800915e:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <processUSBCommand+0x324>)
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <processUSBCommand+0x330>)
 8009162:	0019      	movs	r1, r3
 8009164:	2000      	movs	r0, #0
 8009166:	f7ff fa73 	bl	8008650 <Update_AWD_Thresholds>
 800916a:	e169      	b.n	8009440 <processUSBCommand+0x5dc>
 800916c:	200000f8 	.word	0x200000f8
 8009170:	200000fc 	.word	0x200000fc
 8009174:	08029cf0 	.word	0x08029cf0
 8009178:	08029cf4 	.word	0x08029cf4
 800917c:	08029cf8 	.word	0x08029cf8
 8009180:	08029d00 	.word	0x08029d00
 8009184:	00000ce4 	.word	0x00000ce4
 8009188:	0017ffff 	.word	0x0017ffff
 800918c:	08029d10 	.word	0x08029d10
 8009190:	08029d18 	.word	0x08029d18
 8009194:	00001770 	.word	0x00001770
 8009198:	08029d28 	.word	0x08029d28
 800919c:	40590000 	.word	0x40590000
 80091a0:	08029d30 	.word	0x08029d30
 80091a4:	08029d58 	.word	0x08029d58
 80091a8:	08029d78 	.word	0x08029d78
 80091ac:	408f4000 	.word	0x408f4000
 80091b0:	0000270f 	.word	0x0000270f
 80091b4:	08029d84 	.word	0x08029d84
 80091b8:	08029dac 	.word	0x08029dac
 80091bc:	08029dd4 	.word	0x08029dd4
 80091c0:	08029ddc 	.word	0x08029ddc
	}
    else if (strcmp(cmd_part, "ISET1") == 0)
 80091c4:	4aa7      	ldr	r2, [pc, #668]	; (8009464 <processUSBCommand+0x600>)
 80091c6:	23e0      	movs	r3, #224	; 0xe0
 80091c8:	18fb      	adds	r3, r7, r3
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	0011      	movs	r1, r2
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7fc fffc 	bl	80061cc <strcmp>
 80091d4:	1e03      	subs	r3, r0, #0
 80091d6:	d153      	bne.n	8009280 <processUSBCommand+0x41c>
	{
    	sm->rotaryBtnPressed = true;
 80091d8:	4ba3      	ldr	r3, [pc, #652]	; (8009468 <processUSBCommand+0x604>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2201      	movs	r2, #1
 80091de:	745a      	strb	r2, [r3, #17]
    	sm->setValueMode = SET_CURRENT;
 80091e0:	4ba1      	ldr	r3, [pc, #644]	; (8009468 <processUSBCommand+0x604>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2234      	movs	r2, #52	; 0x34
 80091e6:	2101      	movs	r1, #1
 80091e8:	5499      	strb	r1, [r3, r2]

		uint32_t current = atof(params)*1000; // Convert float parameter to integer
 80091ea:	23e4      	movs	r3, #228	; 0xe4
 80091ec:	18fb      	adds	r3, r7, r3
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	0018      	movs	r0, r3
 80091f2:	f01d fbdd 	bl	80269b0 <atof>
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b9c      	ldr	r3, [pc, #624]	; (800946c <processUSBCommand+0x608>)
 80091fa:	f7fe fa77 	bl	80076ec <__aeabi_dmul>
 80091fe:	0002      	movs	r2, r0
 8009200:	000b      	movs	r3, r1
 8009202:	0010      	movs	r0, r2
 8009204:	0019      	movs	r1, r3
 8009206:	f7fd f9db 	bl	80065c0 <__aeabi_d2uiz>
 800920a:	0003      	movs	r3, r0
 800920c:	21d8      	movs	r1, #216	; 0xd8
 800920e:	187a      	adds	r2, r7, r1
 8009210:	6013      	str	r3, [r2, #0]

		if (dhandle->currentMin < current && current < dhandle->currentMax) {
 8009212:	4b97      	ldr	r3, [pc, #604]	; (8009470 <processUSBCommand+0x60c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	187a      	adds	r2, r7, r1
 800921a:	6812      	ldr	r2, [r2, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d927      	bls.n	8009270 <processUSBCommand+0x40c>
 8009220:	4b93      	ldr	r3, [pc, #588]	; (8009470 <processUSBCommand+0x60c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	187a      	adds	r2, r7, r1
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d220      	bcs.n	8009270 <processUSBCommand+0x40c>
			dhandle->currentSet = current; //save in mA
 800922e:	4b90      	ldr	r3, [pc, #576]	; (8009470 <processUSBCommand+0x60c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	187a      	adds	r2, r7, r1
 8009234:	6812      	ldr	r2, [r2, #0]
 8009236:	605a      	str	r2, [r3, #4]
			snprintf(response, sizeof(response), "Current set to new value: %lu.%03lu A\r\n", dhandle->currentSet / 1000, dhandle->currentSet % 1000);
 8009238:	4b8d      	ldr	r3, [pc, #564]	; (8009470 <processUSBCommand+0x60c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	22fa      	movs	r2, #250	; 0xfa
 8009240:	0091      	lsls	r1, r2, #2
 8009242:	0018      	movs	r0, r3
 8009244:	f7fc ffe8 	bl	8006218 <__udivsi3>
 8009248:	0003      	movs	r3, r0
 800924a:	001c      	movs	r4, r3
 800924c:	4b88      	ldr	r3, [pc, #544]	; (8009470 <processUSBCommand+0x60c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	22fa      	movs	r2, #250	; 0xfa
 8009254:	0091      	lsls	r1, r2, #2
 8009256:	0018      	movs	r0, r3
 8009258:	f7fd f864 	bl	8006324 <__aeabi_uidivmod>
 800925c:	000b      	movs	r3, r1
 800925e:	4a85      	ldr	r2, [pc, #532]	; (8009474 <processUSBCommand+0x610>)
 8009260:	2108      	movs	r1, #8
 8009262:	1878      	adds	r0, r7, r1
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	0023      	movs	r3, r4
 8009268:	2140      	movs	r1, #64	; 0x40
 800926a:	f01e fb59 	bl	8027920 <sniprintf>
 800926e:	e0e7      	b.n	8009440 <processUSBCommand+0x5dc>
		} else {
			snprintf(response, sizeof(response), "ERROR: Current out of bounds\r\n");
 8009270:	4a81      	ldr	r2, [pc, #516]	; (8009478 <processUSBCommand+0x614>)
 8009272:	2308      	movs	r3, #8
 8009274:	18fb      	adds	r3, r7, r3
 8009276:	2140      	movs	r1, #64	; 0x40
 8009278:	0018      	movs	r0, r3
 800927a:	f01e fb51 	bl	8027920 <sniprintf>
 800927e:	e0df      	b.n	8009440 <processUSBCommand+0x5dc>
		}

	}
    else if (strcmp(cmd_part, "ISET1?") == 0)
 8009280:	4a7e      	ldr	r2, [pc, #504]	; (800947c <processUSBCommand+0x618>)
 8009282:	23e0      	movs	r3, #224	; 0xe0
 8009284:	18fb      	adds	r3, r7, r3
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	0011      	movs	r1, r2
 800928a:	0018      	movs	r0, r3
 800928c:	f7fc ff9e 	bl	80061cc <strcmp>
 8009290:	1e03      	subs	r3, r0, #0
 8009292:	d126      	bne.n	80092e2 <processUSBCommand+0x47e>
  	{
  		snprintf(response, sizeof(response), "Current is set to: %lu.%03lu A\r\n", dhandle->currentSet / 1000, dhandle->currentSet % 1000);
 8009294:	4b76      	ldr	r3, [pc, #472]	; (8009470 <processUSBCommand+0x60c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	22fa      	movs	r2, #250	; 0xfa
 800929c:	0091      	lsls	r1, r2, #2
 800929e:	0018      	movs	r0, r3
 80092a0:	f7fc ffba 	bl	8006218 <__udivsi3>
 80092a4:	0003      	movs	r3, r0
 80092a6:	001c      	movs	r4, r3
 80092a8:	4b71      	ldr	r3, [pc, #452]	; (8009470 <processUSBCommand+0x60c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	22fa      	movs	r2, #250	; 0xfa
 80092b0:	0091      	lsls	r1, r2, #2
 80092b2:	0018      	movs	r0, r3
 80092b4:	f7fd f836 	bl	8006324 <__aeabi_uidivmod>
 80092b8:	000b      	movs	r3, r1
 80092ba:	4a71      	ldr	r2, [pc, #452]	; (8009480 <processUSBCommand+0x61c>)
 80092bc:	2108      	movs	r1, #8
 80092be:	1878      	adds	r0, r7, r1
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	0023      	movs	r3, r4
 80092c4:	2140      	movs	r1, #64	; 0x40
 80092c6:	f01e fb2b 	bl	8027920 <sniprintf>

  		sm->OCPMode = OCP_DISABLED;
 80092ca:	4b67      	ldr	r3, [pc, #412]	; (8009468 <processUSBCommand+0x604>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2230      	movs	r2, #48	; 0x30
 80092d0:	2100      	movs	r1, #0
 80092d2:	5499      	strb	r1, [r3, r2]
  		//Update AWD limits
  		Update_AWD_Thresholds(0, OCP_DISABLED_HT, ADC_ANALOGWATCHDOG_2);
 80092d4:	4a6b      	ldr	r2, [pc, #428]	; (8009484 <processUSBCommand+0x620>)
 80092d6:	4b6c      	ldr	r3, [pc, #432]	; (8009488 <processUSBCommand+0x624>)
 80092d8:	0019      	movs	r1, r3
 80092da:	2000      	movs	r0, #0
 80092dc:	f7ff f9b8 	bl	8008650 <Update_AWD_Thresholds>
 80092e0:	e0ae      	b.n	8009440 <processUSBCommand+0x5dc>
  	}
    else if (strcmp(cmd_part, "OUT0") == 0)
 80092e2:	4a6a      	ldr	r2, [pc, #424]	; (800948c <processUSBCommand+0x628>)
 80092e4:	23e0      	movs	r3, #224	; 0xe0
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	0011      	movs	r1, r2
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7fc ff6d 	bl	80061cc <strcmp>
 80092f2:	1e03      	subs	r3, r0, #0
 80092f4:	d111      	bne.n	800931a <processUSBCommand+0x4b6>
   	{
   		snprintf(response, sizeof(response), "Output disabled\r\n");
 80092f6:	4a66      	ldr	r2, [pc, #408]	; (8009490 <processUSBCommand+0x62c>)
 80092f8:	2308      	movs	r3, #8
 80092fa:	18fb      	adds	r3, r7, r3
 80092fc:	2140      	movs	r1, #64	; 0x40
 80092fe:	0018      	movs	r0, r3
 8009300:	f01e fb0e 	bl	8027920 <sniprintf>
   		//Simulate button press
   		if (sm->currentState == STATE_ACTIVE) {
 8009304:	4b58      	ldr	r3, [pc, #352]	; (8009468 <processUSBCommand+0x604>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d000      	beq.n	8009310 <processUSBCommand+0x4ac>
 800930e:	e097      	b.n	8009440 <processUSBCommand+0x5dc>
   	   		sm->outputBtnPressed = true;
 8009310:	4b55      	ldr	r3, [pc, #340]	; (8009468 <processUSBCommand+0x604>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2201      	movs	r2, #1
 8009316:	731a      	strb	r2, [r3, #12]
 8009318:	e092      	b.n	8009440 <processUSBCommand+0x5dc>
   		}
   	}
    else if (strcmp(cmd_part, "OUT1") == 0)
 800931a:	4a5e      	ldr	r2, [pc, #376]	; (8009494 <processUSBCommand+0x630>)
 800931c:	23e0      	movs	r3, #224	; 0xe0
 800931e:	18fb      	adds	r3, r7, r3
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	0011      	movs	r1, r2
 8009324:	0018      	movs	r0, r3
 8009326:	f7fc ff51 	bl	80061cc <strcmp>
 800932a:	1e03      	subs	r3, r0, #0
 800932c:	d111      	bne.n	8009352 <processUSBCommand+0x4ee>
	{
		snprintf(response, sizeof(response), "Output enabled\r\n");
 800932e:	4a5a      	ldr	r2, [pc, #360]	; (8009498 <processUSBCommand+0x634>)
 8009330:	2308      	movs	r3, #8
 8009332:	18fb      	adds	r3, r7, r3
 8009334:	2140      	movs	r1, #64	; 0x40
 8009336:	0018      	movs	r0, r3
 8009338:	f01e faf2 	bl	8027920 <sniprintf>

		//Simulate button press
		if (sm->currentState == STATE_IDLE) {
 800933c:	4b4a      	ldr	r3, [pc, #296]	; (8009468 <processUSBCommand+0x604>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d000      	beq.n	8009348 <processUSBCommand+0x4e4>
 8009346:	e07b      	b.n	8009440 <processUSBCommand+0x5dc>
			sm->outputBtnPressed = true;
 8009348:	4b47      	ldr	r3, [pc, #284]	; (8009468 <processUSBCommand+0x604>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2201      	movs	r2, #1
 800934e:	731a      	strb	r2, [r3, #12]
 8009350:	e076      	b.n	8009440 <processUSBCommand+0x5dc>
		}
	}
    else if (strcmp(cmd_part, "VOUT1?") == 0)
 8009352:	4a52      	ldr	r2, [pc, #328]	; (800949c <processUSBCommand+0x638>)
 8009354:	23e0      	movs	r3, #224	; 0xe0
 8009356:	18fb      	adds	r3, r7, r3
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	0011      	movs	r1, r2
 800935c:	0018      	movs	r0, r3
 800935e:	f7fc ff35 	bl	80061cc <strcmp>
 8009362:	1e03      	subs	r3, r0, #0
 8009364:	d119      	bne.n	800939a <processUSBCommand+0x536>
   	{
   		snprintf(response, sizeof(response), "Measured output voltage: %lu.%02lu V\r\n", dhandle->voltageMeas / 100, dhandle->voltageMeas % 100);
 8009366:	4b42      	ldr	r3, [pc, #264]	; (8009470 <processUSBCommand+0x60c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	2164      	movs	r1, #100	; 0x64
 800936e:	0018      	movs	r0, r3
 8009370:	f7fc ff52 	bl	8006218 <__udivsi3>
 8009374:	0003      	movs	r3, r0
 8009376:	001c      	movs	r4, r3
 8009378:	4b3d      	ldr	r3, [pc, #244]	; (8009470 <processUSBCommand+0x60c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	0018      	movs	r0, r3
 8009382:	f7fc ffcf 	bl	8006324 <__aeabi_uidivmod>
 8009386:	000b      	movs	r3, r1
 8009388:	4a45      	ldr	r2, [pc, #276]	; (80094a0 <processUSBCommand+0x63c>)
 800938a:	2108      	movs	r1, #8
 800938c:	1878      	adds	r0, r7, r1
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	0023      	movs	r3, r4
 8009392:	2140      	movs	r1, #64	; 0x40
 8009394:	f01e fac4 	bl	8027920 <sniprintf>
 8009398:	e052      	b.n	8009440 <processUSBCommand+0x5dc>
   	}
    else if (strcmp(cmd_part, "IOUT1?") == 0)
 800939a:	4a42      	ldr	r2, [pc, #264]	; (80094a4 <processUSBCommand+0x640>)
 800939c:	23e0      	movs	r3, #224	; 0xe0
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	0011      	movs	r1, r2
 80093a4:	0018      	movs	r0, r3
 80093a6:	f7fc ff11 	bl	80061cc <strcmp>
 80093aa:	1e03      	subs	r3, r0, #0
 80093ac:	d11b      	bne.n	80093e6 <processUSBCommand+0x582>
   	{
  		snprintf(response, sizeof(response), "Current is set to: %lu.%03lu A\r\n", dhandle->currentMeas / 1000, dhandle->currentMeas % 1000);
 80093ae:	4b30      	ldr	r3, [pc, #192]	; (8009470 <processUSBCommand+0x60c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	22fa      	movs	r2, #250	; 0xfa
 80093b6:	0091      	lsls	r1, r2, #2
 80093b8:	0018      	movs	r0, r3
 80093ba:	f7fc ff2d 	bl	8006218 <__udivsi3>
 80093be:	0003      	movs	r3, r0
 80093c0:	001c      	movs	r4, r3
 80093c2:	4b2b      	ldr	r3, [pc, #172]	; (8009470 <processUSBCommand+0x60c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	22fa      	movs	r2, #250	; 0xfa
 80093ca:	0091      	lsls	r1, r2, #2
 80093cc:	0018      	movs	r0, r3
 80093ce:	f7fc ffa9 	bl	8006324 <__aeabi_uidivmod>
 80093d2:	000b      	movs	r3, r1
 80093d4:	4a2a      	ldr	r2, [pc, #168]	; (8009480 <processUSBCommand+0x61c>)
 80093d6:	2108      	movs	r1, #8
 80093d8:	1878      	adds	r0, r7, r1
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	0023      	movs	r3, r4
 80093de:	2140      	movs	r1, #64	; 0x40
 80093e0:	f01e fa9e 	bl	8027920 <sniprintf>
 80093e4:	e02c      	b.n	8009440 <processUSBCommand+0x5dc>
   	}
    else if (strcmp(cmd_part, "*IDN?") == 0)
 80093e6:	4a30      	ldr	r2, [pc, #192]	; (80094a8 <processUSBCommand+0x644>)
 80093e8:	23e0      	movs	r3, #224	; 0xe0
 80093ea:	18fb      	adds	r3, r7, r3
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	0011      	movs	r1, r2
 80093f0:	0018      	movs	r0, r3
 80093f2:	f7fc feeb 	bl	80061cc <strcmp>
 80093f6:	1e03      	subs	r3, r0, #0
 80093f8:	d107      	bne.n	800940a <processUSBCommand+0x5a6>
	{
		snprintf(response, sizeof(response), "USB-PD PPS Sink v0.2 (100W,22V,5A)\r\n");
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <processUSBCommand+0x648>)
 80093fc:	2308      	movs	r3, #8
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	2140      	movs	r1, #64	; 0x40
 8009402:	0018      	movs	r0, r3
 8009404:	f01e fa8c 	bl	8027920 <sniprintf>
 8009408:	e01a      	b.n	8009440 <processUSBCommand+0x5dc>
	}
    else if (strcmp(cmd_part, "PROFILES?") == 0)
 800940a:	4a29      	ldr	r2, [pc, #164]	; (80094b0 <processUSBCommand+0x64c>)
 800940c:	23e0      	movs	r3, #224	; 0xe0
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	0011      	movs	r1, r2
 8009414:	0018      	movs	r0, r3
 8009416:	f7fc fed9 	bl	80061cc <strcmp>
 800941a:	1e03      	subs	r3, r0, #0
 800941c:	d109      	bne.n	8009432 <processUSBCommand+0x5ce>
   	{
    	bool printToCOM = true;
 800941e:	21df      	movs	r1, #223	; 0xdf
 8009420:	187b      	adds	r3, r7, r1
 8009422:	2201      	movs	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
    	sourcecapa_limits(printToCOM);
 8009426:	187b      	adds	r3, r7, r1
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	0018      	movs	r0, r3
 800942c:	f000 fc44 	bl	8009cb8 <sourcecapa_limits>
 8009430:	e006      	b.n	8009440 <processUSBCommand+0x5dc>
   	}
    else
    {
        snprintf(response, sizeof(response), "Unknown command\r\n");
 8009432:	4a20      	ldr	r2, [pc, #128]	; (80094b4 <processUSBCommand+0x650>)
 8009434:	2308      	movs	r3, #8
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	2140      	movs	r1, #64	; 0x40
 800943a:	0018      	movs	r0, r3
 800943c:	f01e fa70 	bl	8027920 <sniprintf>
    }

    // Send response
    CDC_Transmit_FS((uint8_t*)response, strlen(response));
 8009440:	2408      	movs	r4, #8
 8009442:	193b      	adds	r3, r7, r4
 8009444:	0018      	movs	r0, r3
 8009446:	f7fc fecb 	bl	80061e0 <strlen>
 800944a:	0003      	movs	r3, r0
 800944c:	b29a      	uxth	r2, r3
 800944e:	193b      	adds	r3, r7, r4
 8009450:	0011      	movs	r1, r2
 8009452:	0018      	movs	r0, r3
 8009454:	f017 fc98 	bl	8020d88 <CDC_Transmit_FS>
 8009458:	e000      	b.n	800945c <processUSBCommand+0x5f8>
		return;
 800945a:	46c0      	nop			; (mov r8, r8)
}
 800945c:	46bd      	mov	sp, r7
 800945e:	b03a      	add	sp, #232	; 0xe8
 8009460:	bdb0      	pop	{r4, r5, r7, pc}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	08029e00 	.word	0x08029e00
 8009468:	200000fc 	.word	0x200000fc
 800946c:	408f4000 	.word	0x408f4000
 8009470:	200000f8 	.word	0x200000f8
 8009474:	08029e08 	.word	0x08029e08
 8009478:	08029e30 	.word	0x08029e30
 800947c:	08029e50 	.word	0x08029e50
 8009480:	08029e58 	.word	0x08029e58
 8009484:	0017ffff 	.word	0x0017ffff
 8009488:	00001770 	.word	0x00001770
 800948c:	08029e7c 	.word	0x08029e7c
 8009490:	08029e84 	.word	0x08029e84
 8009494:	08029e98 	.word	0x08029e98
 8009498:	08029ea0 	.word	0x08029ea0
 800949c:	08029eb4 	.word	0x08029eb4
 80094a0:	08029ebc 	.word	0x08029ebc
 80094a4:	08029ee4 	.word	0x08029ee4
 80094a8:	08029eec 	.word	0x08029eec
 80094ac:	08029ef4 	.word	0x08029ef4
 80094b0:	08029f1c 	.word	0x08029f1c
 80094b4:	08029f28 	.word	0x08029f28

080094b8 <handleInitState>:

/*
 * Define state Handle functions
 */
void handleInitState(void) {
 80094b8:	b5b0      	push	{r4, r5, r7, lr}
 80094ba:	af00      	add	r7, sp, #0
    static bool entryDone = false;

    //=======================================================
	// ENTRY ACTIONS - Executed once when entering the state
	//=======================================================
    if (!entryDone) {
 80094bc:	4b2f      	ldr	r3, [pc, #188]	; (800957c <handleInitState+0xc4>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2201      	movs	r2, #1
 80094c2:	4053      	eors	r3, r2
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01b      	beq.n	8009502 <handleInitState+0x4a>
    	// Set the state entry time and timeout duration
		sm->stateEntryTime = HAL_GetTick();
 80094ca:	4b2d      	ldr	r3, [pc, #180]	; (8009580 <handleInitState+0xc8>)
 80094cc:	681c      	ldr	r4, [r3, #0]
 80094ce:	f003 f8e3 	bl	800c698 <HAL_GetTick>
 80094d2:	0003      	movs	r3, r0
 80094d4:	6063      	str	r3, [r4, #4]
		sm->timeoutCounter = 5000;  // 2 seconds timeout
 80094d6:	4b2a      	ldr	r3, [pc, #168]	; (8009580 <handleInitState+0xc8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <handleInitState+0xcc>)
 80094dc:	609a      	str	r2, [r3, #8]

        // Save state for return from temporary states
        strcpy(sm->lastStateStr, "INIT");
 80094de:	4b28      	ldr	r3, [pc, #160]	; (8009580 <handleInitState+0xc8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3338      	adds	r3, #56	; 0x38
 80094e4:	001a      	movs	r2, r3
 80094e6:	4b28      	ldr	r3, [pc, #160]	; (8009588 <handleInitState+0xd0>)
 80094e8:	0010      	movs	r0, r2
 80094ea:	0019      	movs	r1, r3
 80094ec:	2305      	movs	r3, #5
 80094ee:	001a      	movs	r2, r3
 80094f0:	f01e fc4f 	bl	8027d92 <memcpy>
        sm->lastState = STATE_INIT;
 80094f4:	4b22      	ldr	r3, [pc, #136]	; (8009580 <handleInitState+0xc8>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2201      	movs	r2, #1
 80094fa:	705a      	strb	r2, [r3, #1]

        entryDone = true;
 80094fc:	4b1f      	ldr	r3, [pc, #124]	; (800957c <handleInitState+0xc4>)
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]


    //=================================================
	// TRANSITION CHECKS - Check for state transitions
	//=================================================
    if (dhandle->srcProfiles[0].profileType != UNKNOWN) {
 8009502:	4b22      	ldr	r3, [pc, #136]	; (800958c <handleInitState+0xd4>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2234      	movs	r2, #52	; 0x34
 8009508:	5c9b      	ldrb	r3, [r3, r2]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d033      	beq.n	8009576 <handleInitState+0xbe>
    	// Display maximal values
    	max7219_PrintIspecial(SEGMENT_2, dhandle->currentMax, 4);
 800950e:	4b1f      	ldr	r3, [pc, #124]	; (800958c <handleInitState+0xd4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	2204      	movs	r2, #4
 8009516:	0019      	movs	r1, r3
 8009518:	2002      	movs	r0, #2
 800951a:	f001 f9d1 	bl	800a8c0 <max7219_PrintIspecial>
    	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageMax, 3);
 800951e:	4b1b      	ldr	r3, [pc, #108]	; (800958c <handleInitState+0xd4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	2203      	movs	r2, #3
 8009526:	0019      	movs	r1, r3
 8009528:	2001      	movs	r0, #1
 800952a:	f001 f9c9 	bl	800a8c0 <max7219_PrintIspecial>

    	// If APDO available set APDO mode
    	if (dhandle->hasAPDO == true) {
 800952e:	4b17      	ldr	r3, [pc, #92]	; (800958c <handleInitState+0xd4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	22aa      	movs	r2, #170	; 0xaa
 8009534:	5c9b      	ldrb	r3, [r3, r2]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <handleInitState+0x8e>
    		sm->pwrMode = MODE_APDO;
 800953a:	4b11      	ldr	r3, [pc, #68]	; (8009580 <handleInitState+0xc8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2232      	movs	r2, #50	; 0x32
 8009540:	2101      	movs	r1, #1
 8009542:	5499      	strb	r1, [r3, r2]
 8009544:	e004      	b.n	8009550 <handleInitState+0x98>
    	} else {
    		sm->pwrMode = MODE_FIXED;
 8009546:	4b0e      	ldr	r3, [pc, #56]	; (8009580 <handleInitState+0xc8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2232      	movs	r2, #50	; 0x32
 800954c:	2100      	movs	r1, #0
 800954e:	5499      	strb	r1, [r3, r2]
    	}

    	// Check if the timeout has elapsed
		if (HAL_GetTick() - sm->stateEntryTime > sm->timeoutCounter) {
 8009550:	f003 f8a2 	bl	800c698 <HAL_GetTick>
 8009554:	0002      	movs	r2, r0
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <handleInitState+0xc8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	1ad2      	subs	r2, r2, r3
 800955e:	4b08      	ldr	r3, [pc, #32]	; (8009580 <handleInitState+0xc8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	429a      	cmp	r2, r3
 8009566:	d906      	bls.n	8009576 <handleInitState+0xbe>
			//After initialization transition to IDLE state
			sm->currentState = STATE_IDLE;
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <handleInitState+0xc8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2202      	movs	r2, #2
 800956e:	701a      	strb	r2, [r3, #0]
			entryDone = false;
 8009570:	4b02      	ldr	r3, [pc, #8]	; (800957c <handleInitState+0xc4>)
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
		}
    }
}
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	46bd      	mov	sp, r7
 800957a:	bdb0      	pop	{r4, r5, r7, pc}
 800957c:	200005c9 	.word	0x200005c9
 8009580:	200000fc 	.word	0x200000fc
 8009584:	00001388 	.word	0x00001388
 8009588:	08029f3c 	.word	0x08029f3c
 800958c:	200000f8 	.word	0x200000f8

08009590 <handleIdleState>:

void handleIdleState(void) {
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
    static bool entryDone = false;

    //=======================================================
	// ENTRY ACTIONS - Executed once when entering the state
	//=======================================================
    if (!entryDone) {
 8009594:	4b2c      	ldr	r3, [pc, #176]	; (8009648 <handleIdleState+0xb8>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2201      	movs	r2, #1
 800959a:	4053      	eors	r3, r2
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d028      	beq.n	80095f4 <handleIdleState+0x64>
        // Display set values
        max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80095a2:	4b2a      	ldr	r3, [pc, #168]	; (800964c <handleIdleState+0xbc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2204      	movs	r2, #4
 80095aa:	0019      	movs	r1, r3
 80095ac:	2002      	movs	r0, #2
 80095ae:	f001 f987 	bl	800a8c0 <max7219_PrintIspecial>
        max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80095b2:	4b26      	ldr	r3, [pc, #152]	; (800964c <handleIdleState+0xbc>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2203      	movs	r2, #3
 80095ba:	0019      	movs	r1, r3
 80095bc:	2001      	movs	r0, #1
 80095be:	f001 f97f 	bl	800a8c0 <max7219_PrintIspecial>

        // Ensure output is off
        HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 80095c2:	2380      	movs	r3, #128	; 0x80
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	4822      	ldr	r0, [pc, #136]	; (8009650 <handleIdleState+0xc0>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	0019      	movs	r1, r3
 80095cc:	f005 fea4 	bl	800f318 <HAL_GPIO_WritePin>

        // Check temperature and control fan (not shown in your code)

        // Save state for return from temporary states
        strcpy(sm->lastStateStr, "IDLE");
 80095d0:	4b20      	ldr	r3, [pc, #128]	; (8009654 <handleIdleState+0xc4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3338      	adds	r3, #56	; 0x38
 80095d6:	001a      	movs	r2, r3
 80095d8:	4b1f      	ldr	r3, [pc, #124]	; (8009658 <handleIdleState+0xc8>)
 80095da:	0010      	movs	r0, r2
 80095dc:	0019      	movs	r1, r3
 80095de:	2305      	movs	r3, #5
 80095e0:	001a      	movs	r2, r3
 80095e2:	f01e fbd6 	bl	8027d92 <memcpy>
        sm->lastState = STATE_IDLE;
 80095e6:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <handleIdleState+0xc4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2202      	movs	r2, #2
 80095ec:	705a      	strb	r2, [r3, #1]

        entryDone = true;
 80095ee:	4b16      	ldr	r3, [pc, #88]	; (8009648 <handleIdleState+0xb8>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]
    //=================================================
	// TRANSITION CHECKS - Check for state transitions
	//=================================================

    // Process events and transitions
    if (sm->outputBtnPressed) {
 80095f4:	4b17      	ldr	r3, [pc, #92]	; (8009654 <handleIdleState+0xc4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	7b1b      	ldrb	r3, [r3, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <handleIdleState+0x7e>
        sm->currentState = STATE_ACTIVE;
 80095fe:	4b15      	ldr	r3, [pc, #84]	; (8009654 <handleIdleState+0xc4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2203      	movs	r2, #3
 8009604:	701a      	strb	r2, [r3, #0]
        entryDone = false;
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <handleIdleState+0xb8>)
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
        	sm->timeoutCounter = 4000;  // 4 seconds timeout
        }
        sm->rotaryBtnPressed = false;
        entryDone = false;
    }
}
 800960c:	e019      	b.n	8009642 <handleIdleState+0xb2>
    } else if (sm->rotaryBtnPressed) {
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <handleIdleState+0xc4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	7c5b      	ldrb	r3, [r3, #17]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d014      	beq.n	8009642 <handleIdleState+0xb2>
        sm->currentState = STATE_SET_VALUES;
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <handleIdleState+0xc4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2205      	movs	r2, #5
 800961e:	701a      	strb	r2, [r3, #0]
        if (sm->comState == STATE_CLOSED) {
 8009620:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <handleIdleState+0xc4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	789b      	ldrb	r3, [r3, #2]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d104      	bne.n	8009634 <handleIdleState+0xa4>
        	sm->timeoutCounter = 4000;  // 4 seconds timeout
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <handleIdleState+0xc4>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	22fa      	movs	r2, #250	; 0xfa
 8009630:	0112      	lsls	r2, r2, #4
 8009632:	609a      	str	r2, [r3, #8]
        sm->rotaryBtnPressed = false;
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <handleIdleState+0xc4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2200      	movs	r2, #0
 800963a:	745a      	strb	r2, [r3, #17]
        entryDone = false;
 800963c:	4b02      	ldr	r3, [pc, #8]	; (8009648 <handleIdleState+0xb8>)
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
}
 8009642:	46c0      	nop			; (mov r8, r8)
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	200005ca 	.word	0x200005ca
 800964c:	200000f8 	.word	0x200000f8
 8009650:	50000800 	.word	0x50000800
 8009654:	200000fc 	.word	0x200000fc
 8009658:	08029f44 	.word	0x08029f44

0800965c <handleActiveState>:

void handleActiveState(void) {
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0

	//=======================================================
	// ENTRY ACTIONS - Executed once when entering the state
	//=======================================================

    if (!entryDone) {
 8009662:	4b4e      	ldr	r3, [pc, #312]	; (800979c <handleActiveState+0x140>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	2201      	movs	r2, #1
 8009668:	4053      	eors	r3, r2
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	d029      	beq.n	80096c4 <handleActiveState+0x68>
        // Ensure output is off
        HAL_GPIO_WritePin(RELAY_ON_OFF_GPIO_Port, RELAY_ON_OFF_Pin, GPIO_PIN_SET);
 8009670:	2380      	movs	r3, #128	; 0x80
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	484a      	ldr	r0, [pc, #296]	; (80097a0 <handleActiveState+0x144>)
 8009676:	2201      	movs	r2, #1
 8009678:	0019      	movs	r1, r3
 800967a:	f005 fe4d 	bl	800f318 <HAL_GPIO_WritePin>

        // Save state for return from temporary states
        strcpy(sm->lastStateStr, "ACTIVE");
 800967e:	4b49      	ldr	r3, [pc, #292]	; (80097a4 <handleActiveState+0x148>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	3338      	adds	r3, #56	; 0x38
 8009684:	001a      	movs	r2, r3
 8009686:	4b48      	ldr	r3, [pc, #288]	; (80097a8 <handleActiveState+0x14c>)
 8009688:	0010      	movs	r0, r2
 800968a:	0019      	movs	r1, r3
 800968c:	2307      	movs	r3, #7
 800968e:	001a      	movs	r2, r3
 8009690:	f01e fb7f 	bl	8027d92 <memcpy>
        sm->lastState = STATE_ACTIVE;
 8009694:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <handleActiveState+0x148>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2203      	movs	r2, #3
 800969a:	705a      	strb	r2, [r3, #1]

        // Initialize the periodic check timer
        TIM14->ARR = 500;
 800969c:	4b43      	ldr	r3, [pc, #268]	; (80097ac <handleActiveState+0x150>)
 800969e:	22fa      	movs	r2, #250	; 0xfa
 80096a0:	0052      	lsls	r2, r2, #1
 80096a2:	62da      	str	r2, [r3, #44]	; 0x2c
		LL_TIM_SetCounter(TIM14, 0); //set counter register value of timer 7 to 0
 80096a4:	4b41      	ldr	r3, [pc, #260]	; (80097ac <handleActiveState+0x150>)
 80096a6:	2100      	movs	r1, #0
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7fe ff36 	bl	800851a <LL_TIM_SetCounter>
		LL_TIM_EnableIT_UPDATE(TIM14); // Enable update interrupt
 80096ae:	4b3f      	ldr	r3, [pc, #252]	; (80097ac <handleActiveState+0x150>)
 80096b0:	0018      	movs	r0, r3
 80096b2:	f7fe ff5b 	bl	800856c <LL_TIM_EnableIT_UPDATE>
		LL_TIM_EnableCounter(TIM14);
 80096b6:	4b3d      	ldr	r3, [pc, #244]	; (80097ac <handleActiveState+0x150>)
 80096b8:	0018      	movs	r0, r3
 80096ba:	f7fe ff11 	bl	80084e0 <LL_TIM_EnableCounter>

        entryDone = true;
 80096be:	4b37      	ldr	r3, [pc, #220]	; (800979c <handleActiveState+0x140>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
    //==========================================================
	// DO ACTIONS - Executed every time the state is processed
	//==========================================================

    //Periodic check to display measured values
    if (sm->periodicCheckFlag) {
 80096c4:	4b37      	ldr	r3, [pc, #220]	; (80097a4 <handleActiveState+0x148>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	7d1b      	ldrb	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d022      	beq.n	8009714 <handleActiveState+0xb8>
		uint32_t vol = BSP_PWR_VBUSGetVoltage(0)/10; //divide by 10 to get centivolts since only 4 digit display..
 80096ce:	2000      	movs	r0, #0
 80096d0:	f016 f95a 	bl	801f988 <BSP_PWR_VBUSGetVoltage>
 80096d4:	0003      	movs	r3, r0
 80096d6:	210a      	movs	r1, #10
 80096d8:	0018      	movs	r0, r3
 80096da:	f7fc fd9d 	bl	8006218 <__udivsi3>
 80096de:	0003      	movs	r3, r0
 80096e0:	607b      	str	r3, [r7, #4]
		uint32_t cur = BSP_PWR_VBUSGetCurrent(0);
 80096e2:	2000      	movs	r0, #0
 80096e4:	f016 f96e 	bl	801f9c4 <BSP_PWR_VBUSGetCurrent>
 80096e8:	0003      	movs	r3, r0
 80096ea:	603b      	str	r3, [r7, #0]

		dhandle ->currentMeas = cur;
 80096ec:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <handleActiveState+0x154>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	611a      	str	r2, [r3, #16]
		dhandle ->voltageMeas = vol;
 80096f4:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <handleActiveState+0x154>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
		//Display output voltage
		max7219_PrintIspecial(SEGMENT_1, vol, 3);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2203      	movs	r2, #3
 8009700:	0019      	movs	r1, r3
 8009702:	2001      	movs	r0, #1
 8009704:	f001 f8dc 	bl	800a8c0 <max7219_PrintIspecial>
		//Display output current
		max7219_PrintIspecial(SEGMENT_2, cur, 4);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2204      	movs	r2, #4
 800970c:	0019      	movs	r1, r3
 800970e:	2002      	movs	r0, #2
 8009710:	f001 f8d6 	bl	800a8c0 <max7219_PrintIspecial>
    }

    //=================================================
	// TRANSITION CHECKS - Check for state transitions
	//=================================================
    if (sm->outputBtnPressed) {
 8009714:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <handleActiveState+0x148>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	7b1b      	ldrb	r3, [r3, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d007      	beq.n	800972e <handleActiveState+0xd2>
        sm->currentState = STATE_IDLE;
 800971e:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <handleActiveState+0x148>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2202      	movs	r2, #2
 8009724:	701a      	strb	r2, [r3, #0]
        entryDone = false;
 8009726:	4b1d      	ldr	r3, [pc, #116]	; (800979c <handleActiveState+0x140>)
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e026      	b.n	800977c <handleActiveState+0x120>
    } else if (sm->awdgTriggeredFlag) {
 800972e:	4b1d      	ldr	r3, [pc, #116]	; (80097a4 <handleActiveState+0x148>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	7d5b      	ldrb	r3, [r3, #21]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d007      	beq.n	8009748 <handleActiveState+0xec>
        sm->currentState = STATE_IDLE;
 8009738:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <handleActiveState+0x148>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2202      	movs	r2, #2
 800973e:	701a      	strb	r2, [r3, #0]
        entryDone = false;
 8009740:	4b16      	ldr	r3, [pc, #88]	; (800979c <handleActiveState+0x140>)
 8009742:	2200      	movs	r2, #0
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e019      	b.n	800977c <handleActiveState+0x120>
    } else if (sm->rotaryBtnPressed) {
 8009748:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <handleActiveState+0x148>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	7c5b      	ldrb	r3, [r3, #17]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d014      	beq.n	800977c <handleActiveState+0x120>
        sm->currentState = STATE_SET_VALUES;
 8009752:	4b14      	ldr	r3, [pc, #80]	; (80097a4 <handleActiveState+0x148>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2205      	movs	r2, #5
 8009758:	701a      	strb	r2, [r3, #0]
        if (sm->comState == STATE_CLOSED) {
 800975a:	4b12      	ldr	r3, [pc, #72]	; (80097a4 <handleActiveState+0x148>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	789b      	ldrb	r3, [r3, #2]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d104      	bne.n	800976e <handleActiveState+0x112>
			sm->timeoutCounter = 4000;  // 4 seconds timeout
 8009764:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <handleActiveState+0x148>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	22fa      	movs	r2, #250	; 0xfa
 800976a:	0112      	lsls	r2, r2, #4
 800976c:	609a      	str	r2, [r3, #8]
		}
        sm->rotaryBtnPressed = false;
 800976e:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <handleActiveState+0x148>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2200      	movs	r2, #0
 8009774:	745a      	strb	r2, [r3, #17]
        entryDone = false;
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <handleActiveState+0x140>)
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
    }

    //EXIT ACTION
    if (!entryDone) {
 800977c:	4b07      	ldr	r3, [pc, #28]	; (800979c <handleActiveState+0x140>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	2201      	movs	r2, #1
 8009782:	4053      	eors	r3, r2
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <handleActiveState+0x136>
    	LL_TIM_DisableCounter(TIM14);
 800978a:	4b08      	ldr	r3, [pc, #32]	; (80097ac <handleActiveState+0x150>)
 800978c:	0018      	movs	r0, r3
 800978e:	f7fe feb5 	bl	80084fc <LL_TIM_DisableCounter>
    }
}
 8009792:	46c0      	nop			; (mov r8, r8)
 8009794:	46bd      	mov	sp, r7
 8009796:	b002      	add	sp, #8
 8009798:	bd80      	pop	{r7, pc}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	200005cb 	.word	0x200005cb
 80097a0:	50000800 	.word	0x50000800
 80097a4:	200000fc 	.word	0x200000fc
 80097a8:	08029f4c 	.word	0x08029f4c
 80097ac:	40002000 	.word	0x40002000
 80097b0:	200000f8 	.word	0x200000f8

080097b4 <handleSetValuesState>:

void handleSetValuesState(void) {
 80097b4:	b590      	push	{r4, r7, lr}
 80097b6:	b09f      	sub	sp, #124	; 0x7c
 80097b8:	af02      	add	r7, sp, #8

    //=======================================================
   	// ENTRY ACTIONS - Executed once when entering the state
   	//=======================================================

    if (!entryDone) {
 80097ba:	4bd4      	ldr	r3, [pc, #848]	; (8009b0c <handleSetValuesState+0x358>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	4053      	eors	r3, r2
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d039      	beq.n	800983c <handleSetValuesState+0x88>

    	// Display set values
        max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 80097c8:	4bd1      	ldr	r3, [pc, #836]	; (8009b10 <handleSetValuesState+0x35c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	2204      	movs	r2, #4
 80097d0:	0019      	movs	r1, r3
 80097d2:	2002      	movs	r0, #2
 80097d4:	f001 f874 	bl	800a8c0 <max7219_PrintIspecial>
        max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 80097d8:	4bcd      	ldr	r3, [pc, #820]	; (8009b10 <handleSetValuesState+0x35c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2203      	movs	r2, #3
 80097e0:	0019      	movs	r1, r3
 80097e2:	2001      	movs	r0, #1
 80097e4:	f001 f86c 	bl	800a8c0 <max7219_PrintIspecial>

        // Initialize the periodic timer
		TIM14->ARR = 500;
 80097e8:	4bca      	ldr	r3, [pc, #808]	; (8009b14 <handleSetValuesState+0x360>)
 80097ea:	22fa      	movs	r2, #250	; 0xfa
 80097ec:	0052      	lsls	r2, r2, #1
 80097ee:	62da      	str	r2, [r3, #44]	; 0x2c
		LL_TIM_SetCounter(TIM14, 0); //set counter register value of timer 14 to 0
 80097f0:	4bc8      	ldr	r3, [pc, #800]	; (8009b14 <handleSetValuesState+0x360>)
 80097f2:	2100      	movs	r1, #0
 80097f4:	0018      	movs	r0, r3
 80097f6:	f7fe fe90 	bl	800851a <LL_TIM_SetCounter>
		LL_TIM_EnableIT_UPDATE(TIM14); // Enable update interrupt
 80097fa:	4bc6      	ldr	r3, [pc, #792]	; (8009b14 <handleSetValuesState+0x360>)
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7fe feb5 	bl	800856c <LL_TIM_EnableIT_UPDATE>
		LL_TIM_EnableCounter(TIM14);
 8009802:	4bc4      	ldr	r3, [pc, #784]	; (8009b14 <handleSetValuesState+0x360>)
 8009804:	0018      	movs	r0, r3
 8009806:	f7fe fe6b 	bl	80084e0 <LL_TIM_EnableCounter>

		// Initialize the timeout timer
		LL_TIM_DisableCounter(TIM15);
 800980a:	4bc3      	ldr	r3, [pc, #780]	; (8009b18 <handleSetValuesState+0x364>)
 800980c:	0018      	movs	r0, r3
 800980e:	f7fe fe75 	bl	80084fc <LL_TIM_DisableCounter>
		TIM15->ARR = sm->timeoutCounter;
 8009812:	4bc2      	ldr	r3, [pc, #776]	; (8009b1c <handleSetValuesState+0x368>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4ac0      	ldr	r2, [pc, #768]	; (8009b18 <handleSetValuesState+0x364>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	62d3      	str	r3, [r2, #44]	; 0x2c
		LL_TIM_SetCounter(TIM15, 0); //set counter register value of timer 14 to 0
 800981c:	4bbe      	ldr	r3, [pc, #760]	; (8009b18 <handleSetValuesState+0x364>)
 800981e:	2100      	movs	r1, #0
 8009820:	0018      	movs	r0, r3
 8009822:	f7fe fe7a 	bl	800851a <LL_TIM_SetCounter>
		LL_TIM_EnableIT_UPDATE(TIM15); // Enable update interrupt
 8009826:	4bbc      	ldr	r3, [pc, #752]	; (8009b18 <handleSetValuesState+0x364>)
 8009828:	0018      	movs	r0, r3
 800982a:	f7fe fe9f 	bl	800856c <LL_TIM_EnableIT_UPDATE>
		LL_TIM_EnableCounter(TIM15);
 800982e:	4bba      	ldr	r3, [pc, #744]	; (8009b18 <handleSetValuesState+0x364>)
 8009830:	0018      	movs	r0, r3
 8009832:	f7fe fe55 	bl	80084e0 <LL_TIM_EnableCounter>

        entryDone = true;
 8009836:	4bb5      	ldr	r3, [pc, #724]	; (8009b0c <handleSetValuesState+0x358>)
 8009838:	2201      	movs	r2, #1
 800983a:	701a      	strb	r2, [r3, #0]
    //==========================================================
	// DO ACTIONS - Executed every time the state is processed
	//==========================================================

    // User interaction - reset the timeout
	if (sm->rotaryBtnPressed || sm->encoderTurnedFlag || sm->voltageCurrentBtnPressed) {
 800983c:	4bb7      	ldr	r3, [pc, #732]	; (8009b1c <handleSetValuesState+0x368>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	7c5b      	ldrb	r3, [r3, #17]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <handleSetValuesState+0xa6>
 8009846:	4bb5      	ldr	r3, [pc, #724]	; (8009b1c <handleSetValuesState+0x368>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	7c9b      	ldrb	r3, [r3, #18]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d104      	bne.n	800985a <handleSetValuesState+0xa6>
 8009850:	4bb2      	ldr	r3, [pc, #712]	; (8009b1c <handleSetValuesState+0x368>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	7bdb      	ldrb	r3, [r3, #15]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d010      	beq.n	800987c <handleSetValuesState+0xc8>
		// Reset the timeout timer whenever there's user interaction
		LL_TIM_DisableCounter(TIM15);
 800985a:	4baf      	ldr	r3, [pc, #700]	; (8009b18 <handleSetValuesState+0x364>)
 800985c:	0018      	movs	r0, r3
 800985e:	f7fe fe4d 	bl	80084fc <LL_TIM_DisableCounter>
		LL_TIM_SetCounter(TIM15, 0); //set counter register value of timer 14 to 0
 8009862:	4bad      	ldr	r3, [pc, #692]	; (8009b18 <handleSetValuesState+0x364>)
 8009864:	2100      	movs	r1, #0
 8009866:	0018      	movs	r0, r3
 8009868:	f7fe fe57 	bl	800851a <LL_TIM_SetCounter>
		LL_TIM_EnableIT_UPDATE(TIM15); // Enable update interrupt
 800986c:	4baa      	ldr	r3, [pc, #680]	; (8009b18 <handleSetValuesState+0x364>)
 800986e:	0018      	movs	r0, r3
 8009870:	f7fe fe7c 	bl	800856c <LL_TIM_EnableIT_UPDATE>
		LL_TIM_EnableCounter(TIM15);
 8009874:	4ba8      	ldr	r3, [pc, #672]	; (8009b18 <handleSetValuesState+0x364>)
 8009876:	0018      	movs	r0, r3
 8009878:	f7fe fe32 	bl	80084e0 <LL_TIM_EnableCounter>
	}

	//Process voltageCurrentBtn press
	if (sm->voltageCurrentBtnPressed) {
 800987c:	4ba7      	ldr	r3, [pc, #668]	; (8009b1c <handleSetValuesState+0x368>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	7bdb      	ldrb	r3, [r3, #15]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d042      	beq.n	800990c <handleSetValuesState+0x158>
		//Reset flag
		sm->voltageCurrentBtnPressed = false;
 8009886:	4ba5      	ldr	r3, [pc, #660]	; (8009b1c <handleSetValuesState+0x368>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	73da      	strb	r2, [r3, #15]
		//Process
		if (sm->setValueMode == SET_VOLTAGE) {
 800988e:	4ba3      	ldr	r3, [pc, #652]	; (8009b1c <handleSetValuesState+0x368>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2234      	movs	r2, #52	; 0x34
 8009894:	5c9b      	ldrb	r3, [r3, r2]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d105      	bne.n	80098a6 <handleSetValuesState+0xf2>
			sm->setValueMode = SET_CURRENT;
 800989a:	4ba0      	ldr	r3, [pc, #640]	; (8009b1c <handleSetValuesState+0x368>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2234      	movs	r2, #52	; 0x34
 80098a0:	2101      	movs	r1, #1
 80098a2:	5499      	strb	r1, [r3, r2]
 80098a4:	e00a      	b.n	80098bc <handleSetValuesState+0x108>
		} else if (sm->setValueMode == SET_CURRENT) {
 80098a6:	4b9d      	ldr	r3, [pc, #628]	; (8009b1c <handleSetValuesState+0x368>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2234      	movs	r2, #52	; 0x34
 80098ac:	5c9b      	ldrb	r3, [r3, r2]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d104      	bne.n	80098bc <handleSetValuesState+0x108>
			sm->setValueMode = SET_VOLTAGE;
 80098b2:	4b9a      	ldr	r3, [pc, #616]	; (8009b1c <handleSetValuesState+0x368>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2234      	movs	r2, #52	; 0x34
 80098b8:	2100      	movs	r1, #0
 80098ba:	5499      	strb	r1, [r3, r2]
		}

		//Get values into debug trace
		char _str[60];
		uint32_t voltageADC = BSP_PWR_VBUSGetVoltage(0);
 80098bc:	2000      	movs	r0, #0
 80098be:	f016 f863 	bl	801f988 <BSP_PWR_VBUSGetVoltage>
 80098c2:	0003      	movs	r3, r0
 80098c4:	66bb      	str	r3, [r7, #104]	; 0x68
		uint32_t currentADC= BSP_PWR_VBUSGetCurrent(0);
 80098c6:	2000      	movs	r0, #0
 80098c8:	f016 f87c 	bl	801f9c4 <BSP_PWR_VBUSGetCurrent>
 80098cc:	0003      	movs	r3, r0
 80098ce:	667b      	str	r3, [r7, #100]	; 0x64
		uint32_t currentOCP_ADC= BSP_PWR_VBUSGetCurrentOCP(0);
 80098d0:	2000      	movs	r0, #0
 80098d2:	f016 f99b 	bl	801fc0c <BSP_PWR_VBUSGetCurrentOCP>
 80098d6:	0003      	movs	r3, r0
 80098d8:	663b      	str	r3, [r7, #96]	; 0x60

		// Use snprintf to limit the number of characters written
		int len = snprintf(_str, sizeof(_str), "VBUS:%lu mV, IBUS:%lu mA, IOCP:%lu mA", voltageADC, currentADC, currentOCP_ADC);
 80098da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098dc:	4a90      	ldr	r2, [pc, #576]	; (8009b20 <handleSetValuesState+0x36c>)
 80098de:	0038      	movs	r0, r7
 80098e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	000b      	movs	r3, r1
 80098ea:	213c      	movs	r1, #60	; 0x3c
 80098ec:	f01e f818 	bl	8027920 <sniprintf>
 80098f0:	0003      	movs	r3, r0
 80098f2:	65fb      	str	r3, [r7, #92]	; 0x5c

		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 80098f4:	003b      	movs	r3, r7
 80098f6:	0018      	movs	r0, r3
 80098f8:	f7fc fc72 	bl	80061e0 <strlen>
 80098fc:	0002      	movs	r2, r0
 80098fe:	003b      	movs	r3, r7
 8009900:	9200      	str	r2, [sp, #0]
 8009902:	2200      	movs	r2, #0
 8009904:	2100      	movs	r1, #0
 8009906:	2006      	movs	r0, #6
 8009908:	f00c fa26 	bl	8015d58 <USBPD_TRACE_Add>
	}

    //Process encoder press
    if (sm->rotaryBtnPressed) {
 800990c:	4b83      	ldr	r3, [pc, #524]	; (8009b1c <handleSetValuesState+0x368>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	7c5b      	ldrb	r3, [r3, #17]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d100      	bne.n	8009918 <handleSetValuesState+0x164>
 8009916:	e056      	b.n	80099c6 <handleSetValuesState+0x212>
		//Decrement encoderPress value if higher than 4
		if (sm->encoder.selDigit > 1){
 8009918:	4b80      	ldr	r3, [pc, #512]	; (8009b1c <handleSetValuesState+0x368>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	2b01      	cmp	r3, #1
 8009920:	dd05      	ble.n	800992e <handleSetValuesState+0x17a>
			sm->encoder.selDigit--;
 8009922:	4b7e      	ldr	r3, [pc, #504]	; (8009b1c <handleSetValuesState+0x368>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1a      	ldr	r2, [r3, #32]
 8009928:	3a01      	subs	r2, #1
 800992a:	621a      	str	r2, [r3, #32]
 800992c:	e003      	b.n	8009936 <handleSetValuesState+0x182>
		}
		else {
			sm->encoder.selDigit = 4;
 800992e:	4b7b      	ldr	r3, [pc, #492]	; (8009b1c <handleSetValuesState+0x368>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2204      	movs	r2, #4
 8009934:	621a      	str	r2, [r3, #32]
		}

		//Choose addition value based on setValueMode
		int val;
		switch (sm->setValueMode){
 8009936:	4b79      	ldr	r3, [pc, #484]	; (8009b1c <handleSetValuesState+0x368>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2234      	movs	r2, #52	; 0x34
 800993c:	5c9b      	ldrb	r3, [r3, r2]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d002      	beq.n	8009948 <handleSetValuesState+0x194>
 8009942:	2b01      	cmp	r3, #1
 8009944:	d01c      	beq.n	8009980 <handleSetValuesState+0x1cc>
 8009946:	e03a      	b.n	80099be <handleSetValuesState+0x20a>
			case SET_VOLTAGE:
				switch (sm->encoder.selDigit) {
 8009948:	4b74      	ldr	r3, [pc, #464]	; (8009b1c <handleSetValuesState+0x368>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	2b04      	cmp	r3, #4
 8009950:	d011      	beq.n	8009976 <handleSetValuesState+0x1c2>
 8009952:	dc31      	bgt.n	80099b8 <handleSetValuesState+0x204>
 8009954:	2b03      	cmp	r3, #3
 8009956:	d00b      	beq.n	8009970 <handleSetValuesState+0x1bc>
 8009958:	dc2e      	bgt.n	80099b8 <handleSetValuesState+0x204>
 800995a:	2b01      	cmp	r3, #1
 800995c:	d002      	beq.n	8009964 <handleSetValuesState+0x1b0>
 800995e:	2b02      	cmp	r3, #2
 8009960:	d003      	beq.n	800996a <handleSetValuesState+0x1b6>
				case 1: val = 2; break;
				case 2: val = 10; break;
				case 3: val = 100; break;
				case 4: val = 1000; break;
				}
			 break;
 8009962:	e029      	b.n	80099b8 <handleSetValuesState+0x204>
				case 1: val = 2; break;
 8009964:	2302      	movs	r3, #2
 8009966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009968:	e009      	b.n	800997e <handleSetValuesState+0x1ca>
				case 2: val = 10; break;
 800996a:	230a      	movs	r3, #10
 800996c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800996e:	e006      	b.n	800997e <handleSetValuesState+0x1ca>
				case 3: val = 100; break;
 8009970:	2364      	movs	r3, #100	; 0x64
 8009972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009974:	e003      	b.n	800997e <handleSetValuesState+0x1ca>
				case 4: val = 1000; break;
 8009976:	23fa      	movs	r3, #250	; 0xfa
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800997c:	46c0      	nop			; (mov r8, r8)
			 break;
 800997e:	e01b      	b.n	80099b8 <handleSetValuesState+0x204>
			//case SET_CURRENT:
			case SET_CURRENT:
				switch (sm->encoder.selDigit) {
 8009980:	4b66      	ldr	r3, [pc, #408]	; (8009b1c <handleSetValuesState+0x368>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	2b04      	cmp	r3, #4
 8009988:	d011      	beq.n	80099ae <handleSetValuesState+0x1fa>
 800998a:	dc17      	bgt.n	80099bc <handleSetValuesState+0x208>
 800998c:	2b03      	cmp	r3, #3
 800998e:	d00b      	beq.n	80099a8 <handleSetValuesState+0x1f4>
 8009990:	dc14      	bgt.n	80099bc <handleSetValuesState+0x208>
 8009992:	2b01      	cmp	r3, #1
 8009994:	d002      	beq.n	800999c <handleSetValuesState+0x1e8>
 8009996:	2b02      	cmp	r3, #2
 8009998:	d003      	beq.n	80099a2 <handleSetValuesState+0x1ee>
				case 1: val = 5; break;
				case 2: val = 10; break;
				case 3: val = 100; break;
				case 4: val = 1000; break;
				}
			 break;
 800999a:	e00f      	b.n	80099bc <handleSetValuesState+0x208>
				case 1: val = 5; break;
 800999c:	2305      	movs	r3, #5
 800999e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099a0:	e009      	b.n	80099b6 <handleSetValuesState+0x202>
				case 2: val = 10; break;
 80099a2:	230a      	movs	r3, #10
 80099a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099a6:	e006      	b.n	80099b6 <handleSetValuesState+0x202>
				case 3: val = 100; break;
 80099a8:	2364      	movs	r3, #100	; 0x64
 80099aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099ac:	e003      	b.n	80099b6 <handleSetValuesState+0x202>
				case 4: val = 1000; break;
 80099ae:	23fa      	movs	r3, #250	; 0xfa
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b4:	46c0      	nop			; (mov r8, r8)
			 break;
 80099b6:	e001      	b.n	80099bc <handleSetValuesState+0x208>
			 break;
 80099b8:	46c0      	nop			; (mov r8, r8)
 80099ba:	e000      	b.n	80099be <handleSetValuesState+0x20a>
			 break;
 80099bc:	46c0      	nop			; (mov r8, r8)
		}

		sm->encoder.increment = val;
 80099be:	4b57      	ldr	r3, [pc, #348]	; (8009b1c <handleSetValuesState+0x368>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099c4:	625a      	str	r2, [r3, #36]	; 0x24
    }


    //Process encoder turn
    if (sm->encoderTurnedFlag) {
 80099c6:	4b55      	ldr	r3, [pc, #340]	; (8009b1c <handleSetValuesState+0x368>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	7c9b      	ldrb	r3, [r3, #18]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d023      	beq.n	8009a18 <handleSetValuesState+0x264>
		// Handle encoder pulse event
		int encoderVal = (TIM3 -> CNT) >> 2;
 80099d0:	4b54      	ldr	r3, [pc, #336]	; (8009b24 <handleSetValuesState+0x370>)
 80099d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d4:	089b      	lsrs	r3, r3, #2
 80099d6:	65bb      	str	r3, [r7, #88]	; 0x58

		//
		//Erase FLAG!!
		//
		sm->encoder.curValue= encoderVal;
 80099d8:	4b50      	ldr	r3, [pc, #320]	; (8009b1c <handleSetValuesState+0x368>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099de:	619a      	str	r2, [r3, #24]

		if (encoderVal != sm->encoder.prevValue){
 80099e0:	4b4e      	ldr	r3, [pc, #312]	; (8009b1c <handleSetValuesState+0x368>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d015      	beq.n	8009a18 <handleSetValuesState+0x264>
			//Get the turn direction and save it
			sm->encoder.direction = (encoderVal < sm->encoder.prevValue) ? 1 : -1;
 80099ec:	4b4b      	ldr	r3, [pc, #300]	; (8009b1c <handleSetValuesState+0x368>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099f4:	429a      	cmp	r2, r3
 80099f6:	da01      	bge.n	80099fc <handleSetValuesState+0x248>
 80099f8:	2201      	movs	r2, #1
 80099fa:	e001      	b.n	8009a00 <handleSetValuesState+0x24c>
 80099fc:	2301      	movs	r3, #1
 80099fe:	425a      	negs	r2, r3
 8009a00:	4b46      	ldr	r3, [pc, #280]	; (8009b1c <handleSetValuesState+0x368>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	629a      	str	r2, [r3, #40]	; 0x28

			//Save TIM3 CNT value to ValPrev
			sm->encoder.prevValue = encoderVal;
 8009a06:	4b45      	ldr	r3, [pc, #276]	; (8009b1c <handleSetValuesState+0x368>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a0c:	61da      	str	r2, [r3, #28]

			//Set encoder Turn event flag
			sm->encoder.turnEvent = true;
 8009a0e:	4b43      	ldr	r3, [pc, #268]	; (8009b1c <handleSetValuesState+0x368>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	222c      	movs	r2, #44	; 0x2c
 8009a14:	2101      	movs	r1, #1
 8009a16:	5499      	strb	r1, [r3, r2]
		}
    }

    // Handle digit blinking based on current set mode
    if (sm->periodicCheckFlag) {
 8009a18:	4b40      	ldr	r3, [pc, #256]	; (8009b1c <handleSetValuesState+0x368>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	7d1b      	ldrb	r3, [r3, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d042      	beq.n	8009aa8 <handleSetValuesState+0x2f4>
    	if (sm->setValueMode == SET_VOLTAGE) {
 8009a22:	4b3e      	ldr	r3, [pc, #248]	; (8009b1c <handleSetValuesState+0x368>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2234      	movs	r2, #52	; 0x34
 8009a28:	5c9b      	ldrb	r3, [r3, r2]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d117      	bne.n	8009a5e <handleSetValuesState+0x2aa>
			max7219_BlinkDigit2(SEGMENT_1, dhandle->voltageSet, sm->encoder.selDigit, 3, showDigit);
 8009a2e:	4b38      	ldr	r3, [pc, #224]	; (8009b10 <handleSetValuesState+0x35c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	0019      	movs	r1, r3
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <handleSetValuesState+0x368>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	4b3a      	ldr	r3, [pc, #232]	; (8009b28 <handleSetValuesState+0x374>)
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	2303      	movs	r3, #3
 8009a46:	2001      	movs	r0, #1
 8009a48:	f001 f806 	bl	800aa58 <max7219_BlinkDigit2>
			max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet,4);
 8009a4c:	4b30      	ldr	r3, [pc, #192]	; (8009b10 <handleSetValuesState+0x35c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	2204      	movs	r2, #4
 8009a54:	0019      	movs	r1, r3
 8009a56:	2002      	movs	r0, #2
 8009a58:	f000 ff32 	bl	800a8c0 <max7219_PrintIspecial>
 8009a5c:	e016      	b.n	8009a8c <handleSetValuesState+0x2d8>
		} else { // SET_CURRENT
			max7219_BlinkDigit2(SEGMENT_2, dhandle->currentSet, sm->encoder.selDigit, 4, showDigit);
 8009a5e:	4b2c      	ldr	r3, [pc, #176]	; (8009b10 <handleSetValuesState+0x35c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	0019      	movs	r1, r3
 8009a66:	4b2d      	ldr	r3, [pc, #180]	; (8009b1c <handleSetValuesState+0x368>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	b2da      	uxtb	r2, r3
 8009a6e:	4b2e      	ldr	r3, [pc, #184]	; (8009b28 <handleSetValuesState+0x374>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	2304      	movs	r3, #4
 8009a76:	2002      	movs	r0, #2
 8009a78:	f000 ffee 	bl	800aa58 <max7219_BlinkDigit2>
			max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet,3);
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <handleSetValuesState+0x35c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2203      	movs	r2, #3
 8009a84:	0019      	movs	r1, r3
 8009a86:	2001      	movs	r0, #1
 8009a88:	f000 ff1a 	bl	800a8c0 <max7219_PrintIspecial>
		}
    	//Toggle showDigit
    	showDigit = !showDigit;
 8009a8c:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <handleSetValuesState+0x374>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	1e5a      	subs	r2, r3, #1
 8009a92:	4193      	sbcs	r3, r2
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2201      	movs	r2, #1
 8009a98:	4053      	eors	r3, r2
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	1c1a      	adds	r2, r3, #0
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	4b20      	ldr	r3, [pc, #128]	; (8009b28 <handleSetValuesState+0x374>)
 8009aa6:	701a      	strb	r2, [r3, #0]
    }

    // On turnEvent update voltage/current
	if (sm->encoder.turnEvent) {
 8009aa8:	4b1c      	ldr	r3, [pc, #112]	; (8009b1c <handleSetValuesState+0x368>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	222c      	movs	r2, #44	; 0x2c
 8009aae:	5c9b      	ldrb	r3, [r3, r2]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d100      	bne.n	8009ab6 <handleSetValuesState+0x302>
 8009ab4:	e07a      	b.n	8009bac <handleSetValuesState+0x3f8>
		//Reset event flag
		sm->encoder.turnEvent = false;
 8009ab6:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <handleSetValuesState+0x368>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	222c      	movs	r2, #44	; 0x2c
 8009abc:	2100      	movs	r1, #0
 8009abe:	5499      	strb	r1, [r3, r2]
		char _str[40];
		//Update displays
		switch (sm->setValueMode) {
 8009ac0:	4b16      	ldr	r3, [pc, #88]	; (8009b1c <handleSetValuesState+0x368>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2234      	movs	r2, #52	; 0x34
 8009ac6:	5c9b      	ldrb	r3, [r3, r2]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <handleSetValuesState+0x31e>
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d02f      	beq.n	8009b30 <handleSetValuesState+0x37c>
 8009ad0:	e06c      	b.n	8009bac <handleSetValuesState+0x3f8>
			case SET_VOLTAGE:
				updateVoltage();
 8009ad2:	f000 fbc3 	bl	800a25c <updateVoltage>
				//Print to debug !!calling it from inside updateVoltage() results in hardFault error!!
				sprintf(_str,"VBUS selected: %lu mV", dhandle->voltageSet * 10);
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <handleSetValuesState+0x35c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	0013      	movs	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	189b      	adds	r3, r3, r2
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	001a      	movs	r2, r3
 8009ae6:	4911      	ldr	r1, [pc, #68]	; (8009b2c <handleSetValuesState+0x378>)
 8009ae8:	003b      	movs	r3, r7
 8009aea:	0018      	movs	r0, r3
 8009aec:	f01d ff4c 	bl	8027988 <siprintf>
				USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8009af0:	003b      	movs	r3, r7
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7fc fb74 	bl	80061e0 <strlen>
 8009af8:	0002      	movs	r2, r0
 8009afa:	003b      	movs	r3, r7
 8009afc:	9200      	str	r2, [sp, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	2100      	movs	r1, #0
 8009b02:	2006      	movs	r0, #6
 8009b04:	f00c f928 	bl	8015d58 <USBPD_TRACE_Add>

				break;
 8009b08:	e050      	b.n	8009bac <handleSetValuesState+0x3f8>
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	200005cc 	.word	0x200005cc
 8009b10:	200000f8 	.word	0x200000f8
 8009b14:	40002000 	.word	0x40002000
 8009b18:	40014000 	.word	0x40014000
 8009b1c:	200000fc 	.word	0x200000fc
 8009b20:	08029f54 	.word	0x08029f54
 8009b24:	40000400 	.word	0x40000400
 8009b28:	200005cd 	.word	0x200005cd
 8009b2c:	08029f7c 	.word	0x08029f7c
			case SET_CURRENT:
				updateCurrent();
 8009b30:	f000 fd36 	bl	800a5a0 <updateCurrent>
				//Print to debug !!calling it from inside updateVoltage() results in hardFault error!!
				sprintf(_str,"IBUS selected: %lu mA", dhandle->currentSet);
 8009b34:	4b57      	ldr	r3, [pc, #348]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	4957      	ldr	r1, [pc, #348]	; (8009c98 <handleSetValuesState+0x4e4>)
 8009b3c:	003b      	movs	r3, r7
 8009b3e:	0018      	movs	r0, r3
 8009b40:	f01d ff22 	bl	8027988 <siprintf>
				USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8009b44:	003b      	movs	r3, r7
 8009b46:	0018      	movs	r0, r3
 8009b48:	f7fc fb4a 	bl	80061e0 <strlen>
 8009b4c:	0002      	movs	r2, r0
 8009b4e:	003b      	movs	r3, r7
 8009b50:	9200      	str	r2, [sp, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	2006      	movs	r0, #6
 8009b58:	f00c f8fe 	bl	8015d58 <USBPD_TRACE_Add>

				//IF OCP enabled update the tresholds
				if (sm->OCPMode == OCP_ENABLED) {
 8009b5c:	4b4f      	ldr	r3, [pc, #316]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2230      	movs	r2, #48	; 0x30
 8009b62:	5c9b      	ldrb	r3, [r3, r2]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d120      	bne.n	8009baa <handleSetValuesState+0x3f6>
					//Update AWD limits
					int isense_Vtrip_mV = (dhandle->currentSet *G_SENSE*R_SENSE_MOHMS)/1000; // mV  (mA * mOhms * Gain)
 8009b68:	4b4a      	ldr	r3, [pc, #296]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685a      	ldr	r2, [r3, #4]
 8009b6e:	0013      	movs	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	011a      	lsls	r2, r3, #4
 8009b76:	1ad2      	subs	r2, r2, r3
 8009b78:	00d3      	lsls	r3, r2, #3
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	23fa      	movs	r3, #250	; 0xfa
 8009b7e:	0099      	lsls	r1, r3, #2
 8009b80:	0010      	movs	r0, r2
 8009b82:	f7fc fb49 	bl	8006218 <__udivsi3>
 8009b86:	0003      	movs	r3, r0
 8009b88:	657b      	str	r3, [r7, #84]	; 0x54
					int isense_rawADCtrip= (isense_Vtrip_mV *4095) / VDDA_APPLI; //value for AWD treshold
 8009b8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b8c:	0013      	movs	r3, r2
 8009b8e:	031b      	lsls	r3, r3, #12
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	4943      	ldr	r1, [pc, #268]	; (8009ca0 <handleSetValuesState+0x4ec>)
 8009b94:	0018      	movs	r0, r3
 8009b96:	f7fc fbc9 	bl	800632c <__divsi3>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	653b      	str	r3, [r7, #80]	; 0x50
					Update_AWD_Thresholds(0, isense_rawADCtrip, ADC_ANALOGWATCHDOG_2);
 8009b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba0:	4a40      	ldr	r2, [pc, #256]	; (8009ca4 <handleSetValuesState+0x4f0>)
 8009ba2:	0019      	movs	r1, r3
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f7fe fd53 	bl	8008650 <Update_AWD_Thresholds>
				}
				break;
 8009baa:	46c0      	nop			; (mov r8, r8)
	//=================================================
	// TRANSITION CHECKS - Check for state transitions
	//=================================================

    // If timeout from setValues make USB PD request with new values
    if (sm->stateTimeoutFlag) {
 8009bac:	4b3b      	ldr	r3, [pc, #236]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	7cdb      	ldrb	r3, [r3, #19]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d05e      	beq.n	8009c74 <handleSetValuesState+0x4c0>

    	uint32_t compVoltage = compensateVoltage();
 8009bb6:	f000 fd25 	bl	800a604 <compensateVoltage>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
    	//Make a USBPD request
		int indexSRCAPDO = USER_SERV_FindSRCIndex(0, &powerRequestDetails, compVoltage*10, dhandle->currentSet, dhandle ->selMethod);
 8009bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	1c1a      	adds	r2, r3, #0
 8009bc4:	0092      	lsls	r2, r2, #2
 8009bc6:	18d3      	adds	r3, r2, r3
 8009bc8:	18db      	adds	r3, r3, r3
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	4b31      	ldr	r3, [pc, #196]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	b298      	uxth	r0, r3
 8009bd4:	4b2f      	ldr	r3, [pc, #188]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2124      	movs	r1, #36	; 0x24
 8009bda:	5c5b      	ldrb	r3, [r3, r1]
 8009bdc:	4932      	ldr	r1, [pc, #200]	; (8009ca8 <handleSetValuesState+0x4f4>)
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	0003      	movs	r3, r0
 8009be2:	2000      	movs	r0, #0
 8009be4:	f016 fee8 	bl	80209b8 <USER_SERV_FindSRCIndex>
 8009be8:	0003      	movs	r3, r0
 8009bea:	64bb      	str	r3, [r7, #72]	; 0x48
		//Print to debug
		char _str[70];
		sprintf(_str,"APDO request: indexSRCPDO= %int, VBUS= %lu mV, Ibus= %lu mA", indexSRCAPDO, 10*dhandle->voltageSet, dhandle->currentSet);
 8009bec:	4b29      	ldr	r3, [pc, #164]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	0013      	movs	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	189b      	adds	r3, r3, r2
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	001c      	movs	r4, r3
 8009bfc:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c04:	4929      	ldr	r1, [pc, #164]	; (8009cac <handleSetValuesState+0x4f8>)
 8009c06:	0038      	movs	r0, r7
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	0023      	movs	r3, r4
 8009c0c:	f01d febc 	bl	8027988 <siprintf>
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str, strlen(_str));
 8009c10:	003b      	movs	r3, r7
 8009c12:	0018      	movs	r0, r3
 8009c14:	f7fc fae4 	bl	80061e0 <strlen>
 8009c18:	0002      	movs	r2, r0
 8009c1a:	003b      	movs	r3, r7
 8009c1c:	9200      	str	r2, [sp, #0]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	2100      	movs	r1, #0
 8009c22:	2006      	movs	r0, #6
 8009c24:	f00c f898 	bl	8015d58 <USBPD_TRACE_Add>
		USBPD_DPM_RequestSRCPDO(0, indexSRCAPDO, compVoltage*10, dhandle->currentSet);
 8009c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c2a:	b2d9      	uxtb	r1, r3
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	1c1a      	adds	r2, r3, #0
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	18d3      	adds	r3, r2, r3
 8009c36:	18db      	adds	r3, r3, r3
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	4b16      	ldr	r3, [pc, #88]	; (8009c94 <handleSetValuesState+0x4e0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	2000      	movs	r0, #0
 8009c44:	f015 fe36 	bl	801f8b4 <USBPD_DPM_RequestSRCPDO>

    	//Return to last state
	    if (sm->lastState == STATE_IDLE) {
 8009c48:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d104      	bne.n	8009c5c <handleSetValuesState+0x4a8>
	        sm->currentState = STATE_IDLE;
 8009c52:	4b12      	ldr	r3, [pc, #72]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2202      	movs	r2, #2
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	e008      	b.n	8009c6e <handleSetValuesState+0x4ba>
	    } else if (sm->lastState == STATE_ACTIVE) {
 8009c5c:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d103      	bne.n	8009c6e <handleSetValuesState+0x4ba>
	        sm->currentState = STATE_ACTIVE;
 8009c66:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <handleSetValuesState+0x4e8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	701a      	strb	r2, [r3, #0]
	    }
	    entryDone = false;
 8009c6e:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <handleSetValuesState+0x4fc>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
    }

    //EXIT ACTION
	if (!entryDone) {
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <handleSetValuesState+0x4fc>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	4053      	eors	r3, r2
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <handleSetValuesState+0x4d6>
		LL_TIM_DisableCounter(TIM14);
 8009c82:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <handleSetValuesState+0x500>)
 8009c84:	0018      	movs	r0, r3
 8009c86:	f7fe fc39 	bl	80084fc <LL_TIM_DisableCounter>
	}

}
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	b01d      	add	sp, #116	; 0x74
 8009c90:	bd90      	pop	{r4, r7, pc}
 8009c92:	46c0      	nop			; (mov r8, r8)
 8009c94:	200000f8 	.word	0x200000f8
 8009c98:	08029f94 	.word	0x08029f94
 8009c9c:	200000fc 	.word	0x200000fc
 8009ca0:	00000ce4 	.word	0x00000ce4
 8009ca4:	0017ffff 	.word	0x0017ffff
 8009ca8:	20000554 	.word	0x20000554
 8009cac:	08029fac 	.word	0x08029fac
 8009cb0:	200005cc 	.word	0x200005cc
 8009cb4:	40002000 	.word	0x40002000

08009cb8 <sourcecapa_limits>:
  * @param  Nav
  * @retval None
  * source: demo_disco.c Display_sourcecapa_menu_nav
  */
void sourcecapa_limits(bool printToCOM)
{
 8009cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cba:	46ce      	mov	lr, r9
 8009cbc:	4647      	mov	r7, r8
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b0a7      	sub	sp, #156	; 0x9c
 8009cc2:	af04      	add	r7, sp, #16
 8009cc4:	0002      	movs	r2, r0
 8009cc6:	1dfb      	adds	r3, r7, #7
 8009cc8:	701a      	strb	r2, [r3, #0]
	// Entry actions (if just entered this state)
	static bool firstEntry = true;

	uint8_t _max = DPM_Ports[0].DPM_NumberOfRcvSRCPDO;
 8009cca:	4bae      	ldr	r3, [pc, #696]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009ccc:	69da      	ldr	r2, [r3, #28]
 8009cce:	2184      	movs	r1, #132	; 0x84
 8009cd0:	187b      	adds	r3, r7, r1
 8009cd2:	701a      	strb	r2, [r3, #0]
	uint8_t _start = 0;
 8009cd4:	2483      	movs	r4, #131	; 0x83
 8009cd6:	193b      	adds	r3, r7, r4
 8009cd8:	2200      	movs	r2, #0
 8009cda:	701a      	strb	r2, [r3, #0]
	//SINKData_HandleTypeDef *dhandle = &SNK_data;
	dhandle->numProfiles = _max;
 8009cdc:	4baa      	ldr	r3, [pc, #680]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	187a      	adds	r2, r7, r1
 8009ce2:	21a8      	movs	r1, #168	; 0xa8
 8009ce4:	7812      	ldrb	r2, [r2, #0]
 8009ce6:	545a      	strb	r2, [r3, r1]
	static char all_profiles[500] = {0}; // Buffer for all profiles
	uint16_t offset = 0; // Position tracker in the all_profiles buffer
 8009ce8:	2386      	movs	r3, #134	; 0x86
 8009cea:	18fb      	adds	r3, r7, r3
 8009cec:	2200      	movs	r2, #0
 8009cee:	801a      	strh	r2, [r3, #0]
	char str_info[32] = {0};
 8009cf0:	233c      	movs	r3, #60	; 0x3c
 8009cf2:	18fb      	adds	r3, r7, r3
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	221c      	movs	r2, #28
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	0018      	movs	r0, r3
 8009d00:	f01d feae 	bl	8027a60 <memset>

	// Clear the buffer at the start
	memset(all_profiles, 0, sizeof(all_profiles));
 8009d04:	23fa      	movs	r3, #250	; 0xfa
 8009d06:	005a      	lsls	r2, r3, #1
 8009d08:	4ba0      	ldr	r3, [pc, #640]	; (8009f8c <sourcecapa_limits+0x2d4>)
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f01d fea7 	bl	8027a60 <memset>

	for(int8_t index=_start; index < _max; index++)
 8009d12:	2385      	movs	r3, #133	; 0x85
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	193a      	adds	r2, r7, r4
 8009d18:	7812      	ldrb	r2, [r2, #0]
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	e267      	b.n	800a1ee <sourcecapa_limits+0x536>
	{
		char _str[50] = {0};
 8009d1e:	2308      	movs	r3, #8
 8009d20:	18fb      	adds	r3, r7, r3
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	3304      	adds	r3, #4
 8009d28:	222e      	movs	r2, #46	; 0x2e
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	f01d fe97 	bl	8027a60 <memset>

		switch(DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_TYPE_Msk)
 8009d32:	2385      	movs	r3, #133	; 0x85
 8009d34:	18fb      	adds	r3, r7, r3
 8009d36:	2200      	movs	r2, #0
 8009d38:	569a      	ldrsb	r2, [r3, r2]
 8009d3a:	4b92      	ldr	r3, [pc, #584]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009d3c:	0092      	lsls	r2, r2, #2
 8009d3e:	58d3      	ldr	r3, [r2, r3]
 8009d40:	0f9b      	lsrs	r3, r3, #30
 8009d42:	079b      	lsls	r3, r3, #30
 8009d44:	22c0      	movs	r2, #192	; 0xc0
 8009d46:	0612      	lsls	r2, r2, #24
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d100      	bne.n	8009d4e <sourcecapa_limits+0x96>
 8009d4c:	e128      	b.n	8009fa0 <sourcecapa_limits+0x2e8>
 8009d4e:	22c0      	movs	r2, #192	; 0xc0
 8009d50:	0612      	lsls	r2, r2, #24
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d900      	bls.n	8009d58 <sourcecapa_limits+0xa0>
 8009d56:	e20e      	b.n	800a176 <sourcecapa_limits+0x4be>
 8009d58:	2280      	movs	r2, #128	; 0x80
 8009d5a:	0612      	lsls	r2, r2, #24
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d100      	bne.n	8009d62 <sourcecapa_limits+0xaa>
 8009d60:	e0a2      	b.n	8009ea8 <sourcecapa_limits+0x1f0>
 8009d62:	2280      	movs	r2, #128	; 0x80
 8009d64:	0612      	lsls	r2, r2, #24
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d900      	bls.n	8009d6c <sourcecapa_limits+0xb4>
 8009d6a:	e204      	b.n	800a176 <sourcecapa_limits+0x4be>
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d005      	beq.n	8009d7c <sourcecapa_limits+0xc4>
 8009d70:	2280      	movs	r2, #128	; 0x80
 8009d72:	05d2      	lsls	r2, r2, #23
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d100      	bne.n	8009d7a <sourcecapa_limits+0xc2>
 8009d78:	e205      	b.n	800a186 <sourcecapa_limits+0x4ce>
 8009d7a:	e1fc      	b.n	800a176 <sourcecapa_limits+0x4be>
		{
			case USBPD_PDO_TYPE_FIXED :
			{
				uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_FIXED_MAX_CURRENT_Pos)*10;
 8009d7c:	2185      	movs	r1, #133	; 0x85
 8009d7e:	187b      	adds	r3, r7, r1
 8009d80:	2200      	movs	r2, #0
 8009d82:	569a      	ldrsb	r2, [r3, r2]
 8009d84:	4b7f      	ldr	r3, [pc, #508]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009d86:	0092      	lsls	r2, r2, #2
 8009d88:	58d3      	ldr	r3, [r2, r3]
 8009d8a:	059b      	lsls	r3, r3, #22
 8009d8c:	0d9a      	lsrs	r2, r3, #22
 8009d8e:	0013      	movs	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	189b      	adds	r3, r3, r2
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	667b      	str	r3, [r7, #100]	; 0x64
				uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_FIXED_VOLTAGE_Msk) >> USBPD_PDO_SRC_FIXED_VOLTAGE_Pos)*50;
 8009d98:	187b      	adds	r3, r7, r1
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	569a      	ldrsb	r2, [r3, r2]
 8009d9e:	4b79      	ldr	r3, [pc, #484]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009da0:	0092      	lsls	r2, r2, #2
 8009da2:	58d3      	ldr	r3, [r2, r3]
 8009da4:	0a9b      	lsrs	r3, r3, #10
 8009da6:	059b      	lsls	r3, r3, #22
 8009da8:	0d9b      	lsrs	r3, r3, #22
 8009daa:	2232      	movs	r2, #50	; 0x32
 8009dac:	4353      	muls	r3, r2
 8009dae:	663b      	str	r3, [r7, #96]	; 0x60
				sprintf((char*)_str, "FIXED:%2dV %2d.%dA \r\n", (int)(maxvoltage/1000), (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
 8009db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009db2:	22fa      	movs	r2, #250	; 0xfa
 8009db4:	0091      	lsls	r1, r2, #2
 8009db6:	0018      	movs	r0, r3
 8009db8:	f7fc fa2e 	bl	8006218 <__udivsi3>
 8009dbc:	0003      	movs	r3, r0
 8009dbe:	001c      	movs	r4, r3
 8009dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc2:	22fa      	movs	r2, #250	; 0xfa
 8009dc4:	0091      	lsls	r1, r2, #2
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7fc fa26 	bl	8006218 <__udivsi3>
 8009dcc:	0003      	movs	r3, r0
 8009dce:	001d      	movs	r5, r3
 8009dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd2:	22fa      	movs	r2, #250	; 0xfa
 8009dd4:	0091      	lsls	r1, r2, #2
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7fc faa4 	bl	8006324 <__aeabi_uidivmod>
 8009ddc:	000b      	movs	r3, r1
 8009dde:	2164      	movs	r1, #100	; 0x64
 8009de0:	0018      	movs	r0, r3
 8009de2:	f7fc fa19 	bl	8006218 <__udivsi3>
 8009de6:	0003      	movs	r3, r0
 8009de8:	4969      	ldr	r1, [pc, #420]	; (8009f90 <sourcecapa_limits+0x2d8>)
 8009dea:	2208      	movs	r2, #8
 8009dec:	18b8      	adds	r0, r7, r2
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	002b      	movs	r3, r5
 8009df2:	0022      	movs	r2, r4
 8009df4:	f01d fdc8 	bl	8027988 <siprintf>

				// Extract min and max values
				if (maxvoltage > dhandle->voltageMax*10) {
 8009df8:	4b63      	ldr	r3, [pc, #396]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	0013      	movs	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	189b      	adds	r3, r3, r2
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	001a      	movs	r2, r3
 8009e08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d909      	bls.n	8009e22 <sourcecapa_limits+0x16a>
					dhandle -> voltageMax = (int)maxvoltage/10;
 8009e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e10:	210a      	movs	r1, #10
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7fc fa8a 	bl	800632c <__divsi3>
 8009e18:	0003      	movs	r3, r0
 8009e1a:	001a      	movs	r2, r3
 8009e1c:	4b5a      	ldr	r3, [pc, #360]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	619a      	str	r2, [r3, #24]
				}
				if (maxcurrent > dhandle->currentMax) {
 8009e22:	4b59      	ldr	r3, [pc, #356]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d903      	bls.n	8009e36 <sourcecapa_limits+0x17e>
					dhandle -> currentMax = (int)maxcurrent;
 8009e2e:	4b56      	ldr	r3, [pc, #344]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e34:	61da      	str	r2, [r3, #28]
				}

				// Copy profiles to SNK data
				if (firstEntry) {
 8009e36:	4b57      	ldr	r3, [pc, #348]	; (8009f94 <sourcecapa_limits+0x2dc>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d100      	bne.n	8009e40 <sourcecapa_limits+0x188>
 8009e3e:	e1a4      	b.n	800a18a <sourcecapa_limits+0x4d2>
					if ((maxvoltage/1000 * maxcurrent/1000) <= 100) {
 8009e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e42:	22fa      	movs	r2, #250	; 0xfa
 8009e44:	0091      	lsls	r1, r2, #2
 8009e46:	0018      	movs	r0, r3
 8009e48:	f7fc f9e6 	bl	8006218 <__udivsi3>
 8009e4c:	0003      	movs	r3, r0
 8009e4e:	001a      	movs	r2, r3
 8009e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e52:	4353      	muls	r3, r2
 8009e54:	4a50      	ldr	r2, [pc, #320]	; (8009f98 <sourcecapa_limits+0x2e0>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d900      	bls.n	8009e5c <sourcecapa_limits+0x1a4>
 8009e5a:	e196      	b.n	800a18a <sourcecapa_limits+0x4d2>
						dhandle->srcProfiles[index].voltageMax = maxvoltage/10; //save in centivolts
 8009e5c:	4b4a      	ldr	r3, [pc, #296]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e5e:	681c      	ldr	r4, [r3, #0]
 8009e60:	2685      	movs	r6, #133	; 0x85
 8009e62:	19bb      	adds	r3, r7, r6
 8009e64:	2500      	movs	r5, #0
 8009e66:	575d      	ldrsb	r5, [r3, r5]
 8009e68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e6a:	210a      	movs	r1, #10
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f7fc f9d3 	bl	8006218 <__udivsi3>
 8009e72:	0003      	movs	r3, r0
 8009e74:	001a      	movs	r2, r3
 8009e76:	012b      	lsls	r3, r5, #4
 8009e78:	18e3      	adds	r3, r4, r3
 8009e7a:	332c      	adds	r3, #44	; 0x2c
 8009e7c:	601a      	str	r2, [r3, #0]
						dhandle->srcProfiles[index].currentMax = maxcurrent; //save in mA
 8009e7e:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	19ba      	adds	r2, r7, r6
 8009e84:	7812      	ldrb	r2, [r2, #0]
 8009e86:	b252      	sxtb	r2, r2
 8009e88:	3203      	adds	r2, #3
 8009e8a:	0112      	lsls	r2, r2, #4
 8009e8c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009e8e:	50d1      	str	r1, [r2, r3]
						dhandle->srcProfiles[index].profileType = FIXED;
 8009e90:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <sourcecapa_limits+0x2d0>)
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	19bb      	adds	r3, r7, r6
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	b25b      	sxtb	r3, r3
 8009e9a:	3303      	adds	r3, #3
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	18d3      	adds	r3, r2, r3
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	701a      	strb	r2, [r3, #0]
					}
				}

				break;
 8009ea6:	e170      	b.n	800a18a <sourcecapa_limits+0x4d2>
			{
			}
			break;
			case USBPD_PDO_TYPE_VARIABLE :
			{
				uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_VOLTAGE_Pos) * 50;
 8009ea8:	2185      	movs	r1, #133	; 0x85
 8009eaa:	187b      	adds	r3, r7, r1
 8009eac:	2200      	movs	r2, #0
 8009eae:	569a      	ldrsb	r2, [r3, r2]
 8009eb0:	4b34      	ldr	r3, [pc, #208]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009eb2:	0092      	lsls	r2, r2, #2
 8009eb4:	58d3      	ldr	r3, [r2, r3]
 8009eb6:	0d1b      	lsrs	r3, r3, #20
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	0d9b      	lsrs	r3, r3, #22
 8009ebc:	2232      	movs	r2, #50	; 0x32
 8009ebe:	4353      	muls	r3, r2
 8009ec0:	673b      	str	r3, [r7, #112]	; 0x70
				uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_VARIABLE_MIN_VOLTAGE_Pos) * 50;
 8009ec2:	187b      	adds	r3, r7, r1
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	569a      	ldrsb	r2, [r3, r2]
 8009ec8:	4b2e      	ldr	r3, [pc, #184]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009eca:	0092      	lsls	r2, r2, #2
 8009ecc:	58d3      	ldr	r3, [r2, r3]
 8009ece:	0a9b      	lsrs	r3, r3, #10
 8009ed0:	059b      	lsls	r3, r3, #22
 8009ed2:	0d9b      	lsrs	r3, r3, #22
 8009ed4:	2232      	movs	r2, #50	; 0x32
 8009ed6:	4353      	muls	r3, r2
 8009ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
				uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_VARIABLE_MAX_CURRENT_Pos) * 10;
 8009eda:	187b      	adds	r3, r7, r1
 8009edc:	2200      	movs	r2, #0
 8009ede:	569a      	ldrsb	r2, [r3, r2]
 8009ee0:	4b28      	ldr	r3, [pc, #160]	; (8009f84 <sourcecapa_limits+0x2cc>)
 8009ee2:	0092      	lsls	r2, r2, #2
 8009ee4:	58d3      	ldr	r3, [r2, r3]
 8009ee6:	059b      	lsls	r3, r3, #22
 8009ee8:	0d9a      	lsrs	r2, r3, #22
 8009eea:	0013      	movs	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	189b      	adds	r3, r3, r2
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	66bb      	str	r3, [r7, #104]	; 0x68
				sprintf((char*)_str, "V:%2d.%1d-%2d.%1dV %d.%dA \r\n", (int)(minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
 8009ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ef6:	22fa      	movs	r2, #250	; 0xfa
 8009ef8:	0091      	lsls	r1, r2, #2
 8009efa:	0018      	movs	r0, r3
 8009efc:	f7fc f98c 	bl	8006218 <__udivsi3>
 8009f00:	0003      	movs	r3, r0
 8009f02:	4698      	mov	r8, r3
 8009f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f06:	2164      	movs	r1, #100	; 0x64
 8009f08:	0018      	movs	r0, r3
 8009f0a:	f7fc f985 	bl	8006218 <__udivsi3>
 8009f0e:	0003      	movs	r3, r0
 8009f10:	210a      	movs	r1, #10
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fc faf0 	bl	80064f8 <__aeabi_idivmod>
 8009f18:	000b      	movs	r3, r1
 8009f1a:	4699      	mov	r9, r3
 8009f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f1e:	22fa      	movs	r2, #250	; 0xfa
 8009f20:	0091      	lsls	r1, r2, #2
 8009f22:	0018      	movs	r0, r3
 8009f24:	f7fc f978 	bl	8006218 <__udivsi3>
 8009f28:	0003      	movs	r3, r0
 8009f2a:	001c      	movs	r4, r3
 8009f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2e:	2164      	movs	r1, #100	; 0x64
 8009f30:	0018      	movs	r0, r3
 8009f32:	f7fc f971 	bl	8006218 <__udivsi3>
 8009f36:	0003      	movs	r3, r0
 8009f38:	210a      	movs	r1, #10
 8009f3a:	0018      	movs	r0, r3
 8009f3c:	f7fc fadc 	bl	80064f8 <__aeabi_idivmod>
 8009f40:	000b      	movs	r3, r1
 8009f42:	001d      	movs	r5, r3
 8009f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f46:	22fa      	movs	r2, #250	; 0xfa
 8009f48:	0091      	lsls	r1, r2, #2
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f7fc f964 	bl	8006218 <__udivsi3>
 8009f50:	0003      	movs	r3, r0
 8009f52:	001e      	movs	r6, r3
 8009f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f56:	22fa      	movs	r2, #250	; 0xfa
 8009f58:	0091      	lsls	r1, r2, #2
 8009f5a:	0018      	movs	r0, r3
 8009f5c:	f7fc f9e2 	bl	8006324 <__aeabi_uidivmod>
 8009f60:	000b      	movs	r3, r1
 8009f62:	2164      	movs	r1, #100	; 0x64
 8009f64:	0018      	movs	r0, r3
 8009f66:	f7fc f957 	bl	8006218 <__udivsi3>
 8009f6a:	0003      	movs	r3, r0
 8009f6c:	490b      	ldr	r1, [pc, #44]	; (8009f9c <sourcecapa_limits+0x2e4>)
 8009f6e:	2208      	movs	r2, #8
 8009f70:	18b8      	adds	r0, r7, r2
 8009f72:	9303      	str	r3, [sp, #12]
 8009f74:	9602      	str	r6, [sp, #8]
 8009f76:	9501      	str	r5, [sp, #4]
 8009f78:	9400      	str	r4, [sp, #0]
 8009f7a:	464b      	mov	r3, r9
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	f01d fd03 	bl	8027988 <siprintf>
			}
			break;
 8009f82:	e105      	b.n	800a190 <sourcecapa_limits+0x4d8>
 8009f84:	20003410 	.word	0x20003410
 8009f88:	200000f8 	.word	0x200000f8
 8009f8c:	200005d0 	.word	0x200005d0
 8009f90:	08029fe8 	.word	0x08029fe8
 8009f94:	20000104 	.word	0x20000104
 8009f98:	00018a87 	.word	0x00018a87
 8009f9c:	0802a000 	.word	0x0802a000
			case USBPD_PDO_TYPE_APDO :
			{
				uint32_t minvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MIN_VOLTAGE_Pos) * 100;
 8009fa0:	2185      	movs	r1, #133	; 0x85
 8009fa2:	187b      	adds	r3, r7, r1
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	569a      	ldrsb	r2, [r3, r2]
 8009fa8:	4ba5      	ldr	r3, [pc, #660]	; (800a240 <sourcecapa_limits+0x588>)
 8009faa:	0092      	lsls	r2, r2, #2
 8009fac:	58d3      	ldr	r3, [r2, r3]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	22ff      	movs	r2, #255	; 0xff
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	2264      	movs	r2, #100	; 0x64
 8009fb6:	4353      	muls	r3, r2
 8009fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
				uint32_t maxvoltage = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Msk) >> USBPD_PDO_SRC_APDO_MAX_VOLTAGE_Pos) * 100;
 8009fba:	187b      	adds	r3, r7, r1
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	569a      	ldrsb	r2, [r3, r2]
 8009fc0:	4b9f      	ldr	r3, [pc, #636]	; (800a240 <sourcecapa_limits+0x588>)
 8009fc2:	0092      	lsls	r2, r2, #2
 8009fc4:	58d3      	ldr	r3, [r2, r3]
 8009fc6:	0c5b      	lsrs	r3, r3, #17
 8009fc8:	22ff      	movs	r2, #255	; 0xff
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2264      	movs	r2, #100	; 0x64
 8009fce:	4353      	muls	r3, r2
 8009fd0:	67bb      	str	r3, [r7, #120]	; 0x78
				uint32_t maxcurrent = ((DPM_Ports[0].DPM_ListOfRcvSRCPDO[index] & USBPD_PDO_SRC_APDO_MAX_CURRENT_Msk) >> USBPD_PDO_SRC_APDO_MAX_CURRENT_Pos) * 50;
 8009fd2:	187b      	adds	r3, r7, r1
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	569a      	ldrsb	r2, [r3, r2]
 8009fd8:	4b99      	ldr	r3, [pc, #612]	; (800a240 <sourcecapa_limits+0x588>)
 8009fda:	0092      	lsls	r2, r2, #2
 8009fdc:	58d3      	ldr	r3, [r2, r3]
 8009fde:	227f      	movs	r2, #127	; 0x7f
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2232      	movs	r2, #50	; 0x32
 8009fe4:	4353      	muls	r3, r2
 8009fe6:	677b      	str	r3, [r7, #116]	; 0x74
				sprintf((char*)_str, "APDO:%2d.%1d-%2d.%1dV %d.%dA \r\n",(int) (minvoltage/1000),(int)(minvoltage/100)%10, (int)(maxvoltage/1000),(int)(maxvoltage/100)%10, (int)(maxcurrent/1000), (int)((maxcurrent % 1000) /100));
 8009fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fea:	22fa      	movs	r2, #250	; 0xfa
 8009fec:	0091      	lsls	r1, r2, #2
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f7fc f912 	bl	8006218 <__udivsi3>
 8009ff4:	0003      	movs	r3, r0
 8009ff6:	4698      	mov	r8, r3
 8009ff8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ffa:	2164      	movs	r1, #100	; 0x64
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7fc f90b 	bl	8006218 <__udivsi3>
 800a002:	0003      	movs	r3, r0
 800a004:	210a      	movs	r1, #10
 800a006:	0018      	movs	r0, r3
 800a008:	f7fc fa76 	bl	80064f8 <__aeabi_idivmod>
 800a00c:	000b      	movs	r3, r1
 800a00e:	4699      	mov	r9, r3
 800a010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a012:	22fa      	movs	r2, #250	; 0xfa
 800a014:	0091      	lsls	r1, r2, #2
 800a016:	0018      	movs	r0, r3
 800a018:	f7fc f8fe 	bl	8006218 <__udivsi3>
 800a01c:	0003      	movs	r3, r0
 800a01e:	001c      	movs	r4, r3
 800a020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a022:	2164      	movs	r1, #100	; 0x64
 800a024:	0018      	movs	r0, r3
 800a026:	f7fc f8f7 	bl	8006218 <__udivsi3>
 800a02a:	0003      	movs	r3, r0
 800a02c:	210a      	movs	r1, #10
 800a02e:	0018      	movs	r0, r3
 800a030:	f7fc fa62 	bl	80064f8 <__aeabi_idivmod>
 800a034:	000b      	movs	r3, r1
 800a036:	001d      	movs	r5, r3
 800a038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a03a:	22fa      	movs	r2, #250	; 0xfa
 800a03c:	0091      	lsls	r1, r2, #2
 800a03e:	0018      	movs	r0, r3
 800a040:	f7fc f8ea 	bl	8006218 <__udivsi3>
 800a044:	0003      	movs	r3, r0
 800a046:	001e      	movs	r6, r3
 800a048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a04a:	22fa      	movs	r2, #250	; 0xfa
 800a04c:	0091      	lsls	r1, r2, #2
 800a04e:	0018      	movs	r0, r3
 800a050:	f7fc f968 	bl	8006324 <__aeabi_uidivmod>
 800a054:	000b      	movs	r3, r1
 800a056:	2164      	movs	r1, #100	; 0x64
 800a058:	0018      	movs	r0, r3
 800a05a:	f7fc f8dd 	bl	8006218 <__udivsi3>
 800a05e:	0003      	movs	r3, r0
 800a060:	4978      	ldr	r1, [pc, #480]	; (800a244 <sourcecapa_limits+0x58c>)
 800a062:	2208      	movs	r2, #8
 800a064:	18b8      	adds	r0, r7, r2
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	9602      	str	r6, [sp, #8]
 800a06a:	9501      	str	r5, [sp, #4]
 800a06c:	9400      	str	r4, [sp, #0]
 800a06e:	464b      	mov	r3, r9
 800a070:	4642      	mov	r2, r8
 800a072:	f01d fc89 	bl	8027988 <siprintf>

				// Set flag
				dhandle->hasAPDO = true;
 800a076:	4b74      	ldr	r3, [pc, #464]	; (800a248 <sourcecapa_limits+0x590>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	22aa      	movs	r2, #170	; 0xaa
 800a07c:	2101      	movs	r1, #1
 800a07e:	5499      	strb	r1, [r3, r2]

				// Extract min and max values (since APDOs are last it will rewrite FIXED values,
				// this is what we want since if APDO is present the sink will default to APDO mode
				if (minvoltage < dhandle->voltageMin*10) {
 800a080:	4b71      	ldr	r3, [pc, #452]	; (800a248 <sourcecapa_limits+0x590>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	0013      	movs	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	189b      	adds	r3, r3, r2
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	001a      	movs	r2, r3
 800a090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a092:	4293      	cmp	r3, r2
 800a094:	d209      	bcs.n	800a0aa <sourcecapa_limits+0x3f2>
					dhandle -> voltageMin = (int)minvoltage/10;
 800a096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a098:	210a      	movs	r1, #10
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7fc f946 	bl	800632c <__divsi3>
 800a0a0:	0003      	movs	r3, r0
 800a0a2:	001a      	movs	r2, r3
 800a0a4:	4b68      	ldr	r3, [pc, #416]	; (800a248 <sourcecapa_limits+0x590>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	615a      	str	r2, [r3, #20]
				}
				if (maxvoltage > dhandle->voltageMax*10) {
 800a0aa:	4b67      	ldr	r3, [pc, #412]	; (800a248 <sourcecapa_limits+0x590>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	699a      	ldr	r2, [r3, #24]
 800a0b0:	0013      	movs	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	189b      	adds	r3, r3, r2
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	001a      	movs	r2, r3
 800a0ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d909      	bls.n	800a0d4 <sourcecapa_limits+0x41c>
					dhandle -> voltageMax = (int)maxvoltage/10;
 800a0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0c2:	210a      	movs	r1, #10
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7fc f931 	bl	800632c <__divsi3>
 800a0ca:	0003      	movs	r3, r0
 800a0cc:	001a      	movs	r2, r3
 800a0ce:	4b5e      	ldr	r3, [pc, #376]	; (800a248 <sourcecapa_limits+0x590>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	619a      	str	r2, [r3, #24]
				}
				if (maxcurrent > dhandle->currentMax) {
 800a0d4:	4b5c      	ldr	r3, [pc, #368]	; (800a248 <sourcecapa_limits+0x590>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d903      	bls.n	800a0e8 <sourcecapa_limits+0x430>
					dhandle -> currentMax = (int)maxcurrent;
 800a0e0:	4b59      	ldr	r3, [pc, #356]	; (800a248 <sourcecapa_limits+0x590>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a0e6:	61da      	str	r2, [r3, #28]
				}

				// Copy profiles to SNK data
				if (firstEntry) {
 800a0e8:	4b58      	ldr	r3, [pc, #352]	; (800a24c <sourcecapa_limits+0x594>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d04e      	beq.n	800a18e <sourcecapa_limits+0x4d6>
					if ((maxvoltage/1000 * maxcurrent/1000) <= 100) {
 800a0f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f2:	22fa      	movs	r2, #250	; 0xfa
 800a0f4:	0091      	lsls	r1, r2, #2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7fc f88e 	bl	8006218 <__udivsi3>
 800a0fc:	0003      	movs	r3, r0
 800a0fe:	001a      	movs	r2, r3
 800a100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a102:	4353      	muls	r3, r2
 800a104:	4a52      	ldr	r2, [pc, #328]	; (800a250 <sourcecapa_limits+0x598>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d841      	bhi.n	800a18e <sourcecapa_limits+0x4d6>
						dhandle->srcProfiles[index].voltageMin = minvoltage/10; //save in centivolts
 800a10a:	4b4f      	ldr	r3, [pc, #316]	; (800a248 <sourcecapa_limits+0x590>)
 800a10c:	681c      	ldr	r4, [r3, #0]
 800a10e:	2685      	movs	r6, #133	; 0x85
 800a110:	19bb      	adds	r3, r7, r6
 800a112:	2500      	movs	r5, #0
 800a114:	575d      	ldrsb	r5, [r3, r5]
 800a116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a118:	210a      	movs	r1, #10
 800a11a:	0018      	movs	r0, r3
 800a11c:	f7fc f87c 	bl	8006218 <__udivsi3>
 800a120:	0003      	movs	r3, r0
 800a122:	001a      	movs	r2, r3
 800a124:	012b      	lsls	r3, r5, #4
 800a126:	18e3      	adds	r3, r4, r3
 800a128:	3328      	adds	r3, #40	; 0x28
 800a12a:	601a      	str	r2, [r3, #0]
						dhandle->srcProfiles[index].voltageMax = maxvoltage/10; //save in centivolts
 800a12c:	4b46      	ldr	r3, [pc, #280]	; (800a248 <sourcecapa_limits+0x590>)
 800a12e:	681c      	ldr	r4, [r3, #0]
 800a130:	19bb      	adds	r3, r7, r6
 800a132:	2500      	movs	r5, #0
 800a134:	575d      	ldrsb	r5, [r3, r5]
 800a136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a138:	210a      	movs	r1, #10
 800a13a:	0018      	movs	r0, r3
 800a13c:	f7fc f86c 	bl	8006218 <__udivsi3>
 800a140:	0003      	movs	r3, r0
 800a142:	001a      	movs	r2, r3
 800a144:	012b      	lsls	r3, r5, #4
 800a146:	18e3      	adds	r3, r4, r3
 800a148:	332c      	adds	r3, #44	; 0x2c
 800a14a:	601a      	str	r2, [r3, #0]
						dhandle->srcProfiles[index].currentMax = maxcurrent; //save in mA
 800a14c:	4b3e      	ldr	r3, [pc, #248]	; (800a248 <sourcecapa_limits+0x590>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	19ba      	adds	r2, r7, r6
 800a152:	7812      	ldrb	r2, [r2, #0]
 800a154:	b252      	sxtb	r2, r2
 800a156:	3203      	adds	r2, #3
 800a158:	0112      	lsls	r2, r2, #4
 800a15a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a15c:	50d1      	str	r1, [r2, r3]
						dhandle->srcProfiles[index].profileType = APDO;
 800a15e:	4b3a      	ldr	r3, [pc, #232]	; (800a248 <sourcecapa_limits+0x590>)
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	19bb      	adds	r3, r7, r6
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	b25b      	sxtb	r3, r3
 800a168:	3303      	adds	r3, #3
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	18d3      	adds	r3, r2, r3
 800a16e:	3304      	adds	r3, #4
 800a170:	2202      	movs	r2, #2
 800a172:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 800a174:	e00b      	b.n	800a18e <sourcecapa_limits+0x4d6>
			default :
			{
				sprintf((char*)_str,"Unknown Source PDO \r\n");
 800a176:	4a37      	ldr	r2, [pc, #220]	; (800a254 <sourcecapa_limits+0x59c>)
 800a178:	2308      	movs	r3, #8
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	0011      	movs	r1, r2
 800a17e:	0018      	movs	r0, r3
 800a180:	f01d fc02 	bl	8027988 <siprintf>
				break;
 800a184:	e004      	b.n	800a190 <sourcecapa_limits+0x4d8>
			break;
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	e002      	b.n	800a190 <sourcecapa_limits+0x4d8>
				break;
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	e000      	b.n	800a190 <sourcecapa_limits+0x4d8>
			break;
 800a18e:	46c0      	nop			; (mov r8, r8)
			}

			}
			// Add current profile to the buffer with bounds checking
			uint16_t len = strlen(_str);
 800a190:	2608      	movs	r6, #8
 800a192:	19bb      	adds	r3, r7, r6
 800a194:	0018      	movs	r0, r3
 800a196:	f7fc f823 	bl	80061e0 <strlen>
 800a19a:	0002      	movs	r2, r0
 800a19c:	215e      	movs	r1, #94	; 0x5e
 800a19e:	187b      	adds	r3, r7, r1
 800a1a0:	801a      	strh	r2, [r3, #0]
			if (offset + len < sizeof(all_profiles) - 1) {
 800a1a2:	2586      	movs	r5, #134	; 0x86
 800a1a4:	197b      	adds	r3, r7, r5
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	187b      	adds	r3, r7, r1
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	18d3      	adds	r3, r2, r3
 800a1ae:	001a      	movs	r2, r3
 800a1b0:	23f9      	movs	r3, #249	; 0xf9
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d811      	bhi.n	800a1dc <sourcecapa_limits+0x524>
				memcpy(all_profiles + offset, _str, len);
 800a1b8:	197b      	adds	r3, r7, r5
 800a1ba:	881a      	ldrh	r2, [r3, #0]
 800a1bc:	4b26      	ldr	r3, [pc, #152]	; (800a258 <sourcecapa_limits+0x5a0>)
 800a1be:	18d0      	adds	r0, r2, r3
 800a1c0:	000c      	movs	r4, r1
 800a1c2:	187b      	adds	r3, r7, r1
 800a1c4:	881a      	ldrh	r2, [r3, #0]
 800a1c6:	19bb      	adds	r3, r7, r6
 800a1c8:	0019      	movs	r1, r3
 800a1ca:	f01d fde2 	bl	8027d92 <memcpy>
				offset += len;
 800a1ce:	197b      	adds	r3, r7, r5
 800a1d0:	1979      	adds	r1, r7, r5
 800a1d2:	193a      	adds	r2, r7, r4
 800a1d4:	8809      	ldrh	r1, [r1, #0]
 800a1d6:	8812      	ldrh	r2, [r2, #0]
 800a1d8:	188a      	adds	r2, r1, r2
 800a1da:	801a      	strh	r2, [r3, #0]
	for(int8_t index=_start; index < _max; index++)
 800a1dc:	2185      	movs	r1, #133	; 0x85
 800a1de:	187b      	adds	r3, r7, r1
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	b25b      	sxtb	r3, r3
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	187b      	adds	r3, r7, r1
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	2385      	movs	r3, #133	; 0x85
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	569a      	ldrsb	r2, [r3, r2]
 800a1f6:	2384      	movs	r3, #132	; 0x84
 800a1f8:	18fb      	adds	r3, r7, r3
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	da00      	bge.n	800a202 <sourcecapa_limits+0x54a>
 800a200:	e58d      	b.n	8009d1e <sourcecapa_limits+0x66>
		} //switch end

	} //for end

	// Ensure null termination
	all_profiles[offset] = '\0';
 800a202:	2086      	movs	r0, #134	; 0x86
 800a204:	183b      	adds	r3, r7, r0
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	4a13      	ldr	r2, [pc, #76]	; (800a258 <sourcecapa_limits+0x5a0>)
 800a20a:	2100      	movs	r1, #0
 800a20c:	54d1      	strb	r1, [r2, r3]

	// Send all profiles at once
	if (printToCOM && offset > 0) {
 800a20e:	1dfb      	adds	r3, r7, #7
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <sourcecapa_limits+0x574>
 800a216:	183b      	adds	r3, r7, r0
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d006      	beq.n	800a22c <sourcecapa_limits+0x574>
		CDC_Transmit_FS((uint8_t*)all_profiles, offset);
 800a21e:	183b      	adds	r3, r7, r0
 800a220:	881a      	ldrh	r2, [r3, #0]
 800a222:	4b0d      	ldr	r3, [pc, #52]	; (800a258 <sourcecapa_limits+0x5a0>)
 800a224:	0011      	movs	r1, r2
 800a226:	0018      	movs	r0, r3
 800a228:	f016 fdae 	bl	8020d88 <CDC_Transmit_FS>
	}

	// Clear first entry flag
	firstEntry = false;
 800a22c:	4b07      	ldr	r3, [pc, #28]	; (800a24c <sourcecapa_limits+0x594>)
 800a22e:	2200      	movs	r2, #0
 800a230:	701a      	strb	r2, [r3, #0]
}
 800a232:	46c0      	nop			; (mov r8, r8)
 800a234:	46bd      	mov	sp, r7
 800a236:	b023      	add	sp, #140	; 0x8c
 800a238:	bcc0      	pop	{r6, r7}
 800a23a:	46b9      	mov	r9, r7
 800a23c:	46b0      	mov	r8, r6
 800a23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a240:	20003410 	.word	0x20003410
 800a244:	0802a020 	.word	0x0802a020
 800a248:	200000f8 	.word	0x200000f8
 800a24c:	20000104 	.word	0x20000104
 800a250:	00018a87 	.word	0x00018a87
 800a254:	0802a040 	.word	0x0802a040
 800a258:	200005d0 	.word	0x200005d0

0800a25c <updateVoltage>:


// Helper function to update voltage
void updateVoltage(void) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0

	switch (sm -> pwrMode) {
 800a262:	4bcd      	ldr	r3, [pc, #820]	; (800a598 <updateVoltage+0x33c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2232      	movs	r2, #50	; 0x32
 800a268:	5c9b      	ldrb	r3, [r3, r2]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <updateVoltage+0x1a>
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d100      	bne.n	800a274 <updateVoltage+0x18>
 800a272:	e097      	b.n	800a3a4 <updateVoltage+0x148>
		}
			break;
		default:
		{
		}
			break;
 800a274:	e183      	b.n	800a57e <updateVoltage+0x322>
				int8_t index = dhandle->selectedProfile + sm->encoder.direction;
 800a276:	4bc9      	ldr	r3, [pc, #804]	; (800a59c <updateVoltage+0x340>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	22a9      	movs	r2, #169	; 0xa9
 800a27c:	5c9a      	ldrb	r2, [r3, r2]
 800a27e:	4bc6      	ldr	r3, [pc, #792]	; (800a598 <updateVoltage+0x33c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a284:	b2db      	uxtb	r3, r3
 800a286:	18d3      	adds	r3, r2, r3
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	1dfb      	adds	r3, r7, #7
 800a28c:	701a      	strb	r2, [r3, #0]
				if ((0 <= index) && (index <= dhandle->numProfiles -1)) {
 800a28e:	1dfb      	adds	r3, r7, #7
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	2b7f      	cmp	r3, #127	; 0x7f
 800a294:	d819      	bhi.n	800a2ca <updateVoltage+0x6e>
 800a296:	4bc1      	ldr	r3, [pc, #772]	; (800a59c <updateVoltage+0x340>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	22a8      	movs	r2, #168	; 0xa8
 800a29c:	5c9b      	ldrb	r3, [r3, r2]
 800a29e:	001a      	movs	r2, r3
 800a2a0:	1dfb      	adds	r3, r7, #7
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	dd0f      	ble.n	800a2ca <updateVoltage+0x6e>
					if (dhandle->srcProfiles[index].profileType != FIXED) {
 800a2aa:	4bbc      	ldr	r3, [pc, #752]	; (800a59c <updateVoltage+0x340>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	1dfb      	adds	r3, r7, #7
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	b25b      	sxtb	r3, r3
 800a2b4:	3303      	adds	r3, #3
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	18d3      	adds	r3, r2, r3
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d037      	beq.n	800a332 <updateVoltage+0xd6>
						index = 0; //we are out of fixed profiles that are defined at beginning, return to 0
 800a2c2:	1dfb      	adds	r3, r7, #7
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
					if (dhandle->srcProfiles[index].profileType != FIXED) {
 800a2c8:	e033      	b.n	800a332 <updateVoltage+0xd6>
				} else if (index < 0) {
 800a2ca:	1dfb      	adds	r3, r7, #7
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a2d0:	d921      	bls.n	800a316 <updateVoltage+0xba>
					for (index = dhandle->numProfiles -1; index >= 0; index--) {
 800a2d2:	4bb2      	ldr	r3, [pc, #712]	; (800a59c <updateVoltage+0x340>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	22a8      	movs	r2, #168	; 0xa8
 800a2d8:	5c9b      	ldrb	r3, [r3, r2]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	1dfb      	adds	r3, r7, #7
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e013      	b.n	800a30c <updateVoltage+0xb0>
						if (dhandle->srcProfiles[index].profileType == FIXED) {
 800a2e4:	4bad      	ldr	r3, [pc, #692]	; (800a59c <updateVoltage+0x340>)
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	1dfb      	adds	r3, r7, #7
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	18d3      	adds	r3, r2, r3
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d019      	beq.n	800a330 <updateVoltage+0xd4>
					for (index = dhandle->numProfiles -1; index >= 0; index--) {
 800a2fc:	1dfb      	adds	r3, r7, #7
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	b25b      	sxtb	r3, r3
 800a302:	b2db      	uxtb	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	1dfb      	adds	r3, r7, #7
 800a30a:	701a      	strb	r2, [r3, #0]
 800a30c:	1dfb      	adds	r3, r7, #7
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b7f      	cmp	r3, #127	; 0x7f
 800a312:	d9e7      	bls.n	800a2e4 <updateVoltage+0x88>
 800a314:	e00d      	b.n	800a332 <updateVoltage+0xd6>
				} else if (index >= dhandle->numProfiles) {
 800a316:	1dfb      	adds	r3, r7, #7
 800a318:	2200      	movs	r2, #0
 800a31a:	569a      	ldrsb	r2, [r3, r2]
 800a31c:	4b9f      	ldr	r3, [pc, #636]	; (800a59c <updateVoltage+0x340>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	21a8      	movs	r1, #168	; 0xa8
 800a322:	5c5b      	ldrb	r3, [r3, r1]
 800a324:	429a      	cmp	r2, r3
 800a326:	db04      	blt.n	800a332 <updateVoltage+0xd6>
					index = 0;
 800a328:	1dfb      	adds	r3, r7, #7
 800a32a:	2200      	movs	r2, #0
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	e000      	b.n	800a332 <updateVoltage+0xd6>
							break;
 800a330:	46c0      	nop			; (mov r8, r8)
				dhandle->selectedProfile = index;
 800a332:	4b9a      	ldr	r3, [pc, #616]	; (800a59c <updateVoltage+0x340>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	1dfa      	adds	r2, r7, #7
 800a338:	7811      	ldrb	r1, [r2, #0]
 800a33a:	22a9      	movs	r2, #169	; 0xa9
 800a33c:	5499      	strb	r1, [r3, r2]
				dhandle->voltageMax = dhandle->srcProfiles[index].voltageMax;
 800a33e:	4b97      	ldr	r3, [pc, #604]	; (800a59c <updateVoltage+0x340>)
 800a340:	6819      	ldr	r1, [r3, #0]
 800a342:	1dfb      	adds	r3, r7, #7
 800a344:	2200      	movs	r2, #0
 800a346:	569a      	ldrsb	r2, [r3, r2]
 800a348:	4b94      	ldr	r3, [pc, #592]	; (800a59c <updateVoltage+0x340>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	0112      	lsls	r2, r2, #4
 800a34e:	188a      	adds	r2, r1, r2
 800a350:	322c      	adds	r2, #44	; 0x2c
 800a352:	6812      	ldr	r2, [r2, #0]
 800a354:	619a      	str	r2, [r3, #24]
				dhandle->voltageMin = dhandle->voltageMax;
 800a356:	4b91      	ldr	r3, [pc, #580]	; (800a59c <updateVoltage+0x340>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	4b90      	ldr	r3, [pc, #576]	; (800a59c <updateVoltage+0x340>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	6992      	ldr	r2, [r2, #24]
 800a360:	615a      	str	r2, [r3, #20]
				dhandle->voltageSet = dhandle->voltageMax;
 800a362:	4b8e      	ldr	r3, [pc, #568]	; (800a59c <updateVoltage+0x340>)
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4b8d      	ldr	r3, [pc, #564]	; (800a59c <updateVoltage+0x340>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6992      	ldr	r2, [r2, #24]
 800a36c:	601a      	str	r2, [r3, #0]
				dhandle->currentMax = dhandle->srcProfiles[index].currentMax;
 800a36e:	4b8b      	ldr	r3, [pc, #556]	; (800a59c <updateVoltage+0x340>)
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	1dfb      	adds	r3, r7, #7
 800a374:	2100      	movs	r1, #0
 800a376:	5659      	ldrsb	r1, [r3, r1]
 800a378:	4b88      	ldr	r3, [pc, #544]	; (800a59c <updateVoltage+0x340>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3103      	adds	r1, #3
 800a37e:	0109      	lsls	r1, r1, #4
 800a380:	588a      	ldr	r2, [r1, r2]
 800a382:	61da      	str	r2, [r3, #28]
				if (dhandle->currentSet > dhandle->currentMax) {
 800a384:	4b85      	ldr	r3, [pc, #532]	; (800a59c <updateVoltage+0x340>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	4b84      	ldr	r3, [pc, #528]	; (800a59c <updateVoltage+0x340>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69db      	ldr	r3, [r3, #28]
 800a390:	429a      	cmp	r2, r3
 800a392:	d800      	bhi.n	800a396 <updateVoltage+0x13a>
 800a394:	e0f0      	b.n	800a578 <updateVoltage+0x31c>
					dhandle->currentSet = dhandle->currentMax;
 800a396:	4b81      	ldr	r3, [pc, #516]	; (800a59c <updateVoltage+0x340>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	4b80      	ldr	r3, [pc, #512]	; (800a59c <updateVoltage+0x340>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	69d2      	ldr	r2, [r2, #28]
 800a3a0:	605a      	str	r2, [r3, #4]
			break;
 800a3a2:	e0e9      	b.n	800a578 <updateVoltage+0x31c>
			int voltageTemp = dhandle->voltageSet;
 800a3a4:	4b7d      	ldr	r3, [pc, #500]	; (800a59c <updateVoltage+0x340>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	603b      	str	r3, [r7, #0]
			voltageTemp += sm->encoder.direction * sm->encoder.increment;
 800a3ac:	4b7a      	ldr	r3, [pc, #488]	; (800a598 <updateVoltage+0x33c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3b2:	4b79      	ldr	r3, [pc, #484]	; (800a598 <updateVoltage+0x33c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	4353      	muls	r3, r2
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	18d3      	adds	r3, r2, r3
 800a3be:	603b      	str	r3, [r7, #0]
			for (int8_t i = 0; i <= dhandle->numProfiles-1; i++) {
 800a3c0:	1dbb      	adds	r3, r7, #6
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	e05f      	b.n	800a488 <updateVoltage+0x22c>
				if (dhandle->srcProfiles[i].profileType == APDO) {
 800a3c8:	4b74      	ldr	r3, [pc, #464]	; (800a59c <updateVoltage+0x340>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	1dbb      	adds	r3, r7, #6
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	3303      	adds	r3, #3
 800a3d4:	011b      	lsls	r3, r3, #4
 800a3d6:	18d3      	adds	r3, r2, r3
 800a3d8:	3304      	adds	r3, #4
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b02      	cmp	r3, #2
 800a3de:	d14b      	bne.n	800a478 <updateVoltage+0x21c>
					if (dhandle->srcProfiles[i].voltageMin < dhandle->voltageMin) {
 800a3e0:	4b6e      	ldr	r3, [pc, #440]	; (800a59c <updateVoltage+0x340>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	1dbb      	adds	r3, r7, #6
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	011b      	lsls	r3, r3, #4
 800a3ec:	18d3      	adds	r3, r2, r3
 800a3ee:	3328      	adds	r3, #40	; 0x28
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	4b6a      	ldr	r3, [pc, #424]	; (800a59c <updateVoltage+0x340>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d20b      	bcs.n	800a414 <updateVoltage+0x1b8>
						dhandle->voltageMin = dhandle->srcProfiles[i].voltageMin;
 800a3fc:	4b67      	ldr	r3, [pc, #412]	; (800a59c <updateVoltage+0x340>)
 800a3fe:	6819      	ldr	r1, [r3, #0]
 800a400:	1dbb      	adds	r3, r7, #6
 800a402:	2200      	movs	r2, #0
 800a404:	569a      	ldrsb	r2, [r3, r2]
 800a406:	4b65      	ldr	r3, [pc, #404]	; (800a59c <updateVoltage+0x340>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	0112      	lsls	r2, r2, #4
 800a40c:	188a      	adds	r2, r1, r2
 800a40e:	3228      	adds	r2, #40	; 0x28
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	615a      	str	r2, [r3, #20]
					if (dhandle->srcProfiles[i].voltageMax > dhandle->voltageMax) {
 800a414:	4b61      	ldr	r3, [pc, #388]	; (800a59c <updateVoltage+0x340>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	1dbb      	adds	r3, r7, #6
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	18d3      	adds	r3, r2, r3
 800a422:	332c      	adds	r3, #44	; 0x2c
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b5d      	ldr	r3, [pc, #372]	; (800a59c <updateVoltage+0x340>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d90b      	bls.n	800a448 <updateVoltage+0x1ec>
						dhandle->voltageMax = dhandle->srcProfiles[i].voltageMax;
 800a430:	4b5a      	ldr	r3, [pc, #360]	; (800a59c <updateVoltage+0x340>)
 800a432:	6819      	ldr	r1, [r3, #0]
 800a434:	1dbb      	adds	r3, r7, #6
 800a436:	2200      	movs	r2, #0
 800a438:	569a      	ldrsb	r2, [r3, r2]
 800a43a:	4b58      	ldr	r3, [pc, #352]	; (800a59c <updateVoltage+0x340>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	0112      	lsls	r2, r2, #4
 800a440:	188a      	adds	r2, r1, r2
 800a442:	322c      	adds	r2, #44	; 0x2c
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	619a      	str	r2, [r3, #24]
					if (dhandle->srcProfiles[i].currentMax > dhandle->currentMax) {
 800a448:	4b54      	ldr	r3, [pc, #336]	; (800a59c <updateVoltage+0x340>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	1dba      	adds	r2, r7, #6
 800a44e:	7812      	ldrb	r2, [r2, #0]
 800a450:	b252      	sxtb	r2, r2
 800a452:	3203      	adds	r2, #3
 800a454:	0112      	lsls	r2, r2, #4
 800a456:	58d2      	ldr	r2, [r2, r3]
 800a458:	4b50      	ldr	r3, [pc, #320]	; (800a59c <updateVoltage+0x340>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d90a      	bls.n	800a478 <updateVoltage+0x21c>
						dhandle->currentMax = dhandle->srcProfiles[i].currentMax;
 800a462:	4b4e      	ldr	r3, [pc, #312]	; (800a59c <updateVoltage+0x340>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	1dbb      	adds	r3, r7, #6
 800a468:	2100      	movs	r1, #0
 800a46a:	5659      	ldrsb	r1, [r3, r1]
 800a46c:	4b4b      	ldr	r3, [pc, #300]	; (800a59c <updateVoltage+0x340>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3103      	adds	r1, #3
 800a472:	0109      	lsls	r1, r1, #4
 800a474:	588a      	ldr	r2, [r1, r2]
 800a476:	61da      	str	r2, [r3, #28]
			for (int8_t i = 0; i <= dhandle->numProfiles-1; i++) {
 800a478:	1dbb      	adds	r3, r7, #6
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	3301      	adds	r3, #1
 800a482:	b2da      	uxtb	r2, r3
 800a484:	1dbb      	adds	r3, r7, #6
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	4b44      	ldr	r3, [pc, #272]	; (800a59c <updateVoltage+0x340>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	22a8      	movs	r2, #168	; 0xa8
 800a48e:	5c9b      	ldrb	r3, [r3, r2]
 800a490:	001a      	movs	r2, r3
 800a492:	1dbb      	adds	r3, r7, #6
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	b25b      	sxtb	r3, r3
 800a498:	429a      	cmp	r2, r3
 800a49a:	dc95      	bgt.n	800a3c8 <updateVoltage+0x16c>
			if (dhandle->voltageMin <= voltageTemp && voltageTemp <= dhandle->voltageMax) {
 800a49c:	4b3f      	ldr	r3, [pc, #252]	; (800a59c <updateVoltage+0x340>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	695a      	ldr	r2, [r3, #20]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d900      	bls.n	800a4aa <updateVoltage+0x24e>
 800a4a8:	e072      	b.n	800a590 <updateVoltage+0x334>
 800a4aa:	4b3c      	ldr	r3, [pc, #240]	; (800a59c <updateVoltage+0x340>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699a      	ldr	r2, [r3, #24]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d36c      	bcc.n	800a590 <updateVoltage+0x334>
				dhandle->voltageSet = voltageTemp; //asign new voltage
 800a4b6:	4b39      	ldr	r3, [pc, #228]	; (800a59c <updateVoltage+0x340>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	601a      	str	r2, [r3, #0]
			int8_t index = dhandle->selectedProfile;
 800a4be:	4b37      	ldr	r3, [pc, #220]	; (800a59c <updateVoltage+0x340>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	22a9      	movs	r2, #169	; 0xa9
 800a4c4:	5c9a      	ldrb	r2, [r3, r2]
 800a4c6:	1d7b      	adds	r3, r7, #5
 800a4c8:	701a      	strb	r2, [r3, #0]
			for (int8_t i = dhandle->numProfiles-1; i >= 0; i--) {
 800a4ca:	4b34      	ldr	r3, [pc, #208]	; (800a59c <updateVoltage+0x340>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	22a8      	movs	r2, #168	; 0xa8
 800a4d0:	5c9b      	ldrb	r3, [r3, r2]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	1d3b      	adds	r3, r7, #4
 800a4d8:	701a      	strb	r2, [r3, #0]
 800a4da:	e030      	b.n	800a53e <updateVoltage+0x2e2>
				if (dhandle->srcProfiles[i].profileType == APDO) {
 800a4dc:	4b2f      	ldr	r3, [pc, #188]	; (800a59c <updateVoltage+0x340>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b25b      	sxtb	r3, r3
 800a4e6:	3303      	adds	r3, #3
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	18d3      	adds	r3, r2, r3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d129      	bne.n	800a548 <updateVoltage+0x2ec>
					if (dhandle->voltageSet < dhandle->srcProfiles[i].voltageMax) {
 800a4f4:	4b29      	ldr	r3, [pc, #164]	; (800a59c <updateVoltage+0x340>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	4b28      	ldr	r3, [pc, #160]	; (800a59c <updateVoltage+0x340>)
 800a4fc:	6819      	ldr	r1, [r3, #0]
 800a4fe:	1d3b      	adds	r3, r7, #4
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	b25b      	sxtb	r3, r3
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	18cb      	adds	r3, r1, r3
 800a508:	332c      	adds	r3, #44	; 0x2c
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d21d      	bcs.n	800a54c <updateVoltage+0x2f0>
						dhandle->currentMax = dhandle->srcProfiles[i].currentMax;
 800a510:	4b22      	ldr	r3, [pc, #136]	; (800a59c <updateVoltage+0x340>)
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	1d3b      	adds	r3, r7, #4
 800a516:	2100      	movs	r1, #0
 800a518:	5659      	ldrsb	r1, [r3, r1]
 800a51a:	4b20      	ldr	r3, [pc, #128]	; (800a59c <updateVoltage+0x340>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3103      	adds	r1, #3
 800a520:	0109      	lsls	r1, r1, #4
 800a522:	588a      	ldr	r2, [r1, r2]
 800a524:	61da      	str	r2, [r3, #28]
						index = i;
 800a526:	1d7b      	adds	r3, r7, #5
 800a528:	1d3a      	adds	r2, r7, #4
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	701a      	strb	r2, [r3, #0]
			for (int8_t i = dhandle->numProfiles-1; i >= 0; i--) {
 800a52e:	1d3b      	adds	r3, r7, #4
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	b25b      	sxtb	r3, r3
 800a534:	b2db      	uxtb	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	1d3b      	adds	r3, r7, #4
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	1d3b      	adds	r3, r7, #4
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	2b7f      	cmp	r3, #127	; 0x7f
 800a544:	d9ca      	bls.n	800a4dc <updateVoltage+0x280>
 800a546:	e002      	b.n	800a54e <updateVoltage+0x2f2>
					break;
 800a548:	46c0      	nop			; (mov r8, r8)
 800a54a:	e000      	b.n	800a54e <updateVoltage+0x2f2>
						break;
 800a54c:	46c0      	nop			; (mov r8, r8)
			dhandle->selectedProfile = index;
 800a54e:	4b13      	ldr	r3, [pc, #76]	; (800a59c <updateVoltage+0x340>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	1d7a      	adds	r2, r7, #5
 800a554:	7811      	ldrb	r1, [r2, #0]
 800a556:	22a9      	movs	r2, #169	; 0xa9
 800a558:	5499      	strb	r1, [r3, r2]
			if (dhandle->currentSet > dhandle->currentMax) {
 800a55a:	4b10      	ldr	r3, [pc, #64]	; (800a59c <updateVoltage+0x340>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	4b0e      	ldr	r3, [pc, #56]	; (800a59c <updateVoltage+0x340>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	429a      	cmp	r2, r3
 800a568:	d908      	bls.n	800a57c <updateVoltage+0x320>
				dhandle->currentSet = dhandle->currentMax;
 800a56a:	4b0c      	ldr	r3, [pc, #48]	; (800a59c <updateVoltage+0x340>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4b0b      	ldr	r3, [pc, #44]	; (800a59c <updateVoltage+0x340>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69d2      	ldr	r2, [r2, #28]
 800a574:	605a      	str	r2, [r3, #4]
			break;
 800a576:	e001      	b.n	800a57c <updateVoltage+0x320>
			break;
 800a578:	46c0      	nop			; (mov r8, r8)
 800a57a:	e000      	b.n	800a57e <updateVoltage+0x322>
			break;
 800a57c:	46c0      	nop			; (mov r8, r8)
	}


	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_1, dhandle->voltageSet, 3);
 800a57e:	4b07      	ldr	r3, [pc, #28]	; (800a59c <updateVoltage+0x340>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2203      	movs	r2, #3
 800a586:	0019      	movs	r1, r3
 800a588:	2001      	movs	r0, #1
 800a58a:	f000 f999 	bl	800a8c0 <max7219_PrintIspecial>
 800a58e:	e000      	b.n	800a592 <updateVoltage+0x336>
				return;
 800a590:	46c0      	nop			; (mov r8, r8)
}
 800a592:	46bd      	mov	sp, r7
 800a594:	b002      	add	sp, #8
 800a596:	bd80      	pop	{r7, pc}
 800a598:	200000fc 	.word	0x200000fc
 800a59c:	200000f8 	.word	0x200000f8

0800a5a0 <updateCurrent>:

// Helper function to update voltage and update AWD limit
void updateCurrent(void) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
	//Get direction of encoder turning
	int currentTemp = dhandle->currentSet;
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <updateCurrent+0x5c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	607b      	str	r3, [r7, #4]
	currentTemp += sm->encoder.direction * sm->encoder.increment;
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <updateCurrent+0x60>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5b4:	4b12      	ldr	r3, [pc, #72]	; (800a600 <updateCurrent+0x60>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	4353      	muls	r3, r2
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	18d3      	adds	r3, r2, r3
 800a5c0:	607b      	str	r3, [r7, #4]

	//If required temp value is within limits, assign it to voltage else assign limits
	if (dhandle->currentMin <= currentTemp && currentTemp <= dhandle->currentMax) {
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	; (800a5fc <updateCurrent+0x5c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a1a      	ldr	r2, [r3, #32]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d812      	bhi.n	800a5f4 <updateCurrent+0x54>
 800a5ce:	4b0b      	ldr	r3, [pc, #44]	; (800a5fc <updateCurrent+0x5c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69da      	ldr	r2, [r3, #28]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d30c      	bcc.n	800a5f4 <updateCurrent+0x54>
		dhandle->currentSet = currentTemp; //asign new voltage
 800a5da:	4b08      	ldr	r3, [pc, #32]	; (800a5fc <updateCurrent+0x5c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	605a      	str	r2, [r3, #4]
	} else {
		return;
	}

	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentSet, 4);
 800a5e2:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <updateCurrent+0x5c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	2204      	movs	r2, #4
 800a5ea:	0019      	movs	r1, r3
 800a5ec:	2002      	movs	r0, #2
 800a5ee:	f000 f967 	bl	800a8c0 <max7219_PrintIspecial>
 800a5f2:	e000      	b.n	800a5f6 <updateCurrent+0x56>
		return;
 800a5f4:	46c0      	nop			; (mov r8, r8)
}
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	200000f8 	.word	0x200000f8
 800a600:	200000fc 	.word	0x200000fc

0800a604 <compensateVoltage>:
	//Print selected voltage to disp, decimal at digit 3
	max7219_PrintIspecial(SEGMENT_2, dhandle->currentOCPSet, 4);
}

//Make voltage correction for the voltage drops on rshunts
uint32_t compensateVoltage(void) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
	uint32_t correction = (dhandle->currentMeas * (R_OCP_MOHMS + R_SENSE_MOHMS) ) / 1000;
 800a60a:	4b10      	ldr	r3, [pc, #64]	; (800a64c <compensateVoltage+0x48>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	0013      	movs	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	189b      	adds	r3, r3, r2
 800a616:	00da      	lsls	r2, r3, #3
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	22fa      	movs	r2, #250	; 0xfa
 800a61c:	0091      	lsls	r1, r2, #2
 800a61e:	0018      	movs	r0, r3
 800a620:	f7fb fdfa 	bl	8006218 <__udivsi3>
 800a624:	0003      	movs	r3, r0
 800a626:	607b      	str	r3, [r7, #4]
	uint32_t compVoltage = dhandle->voltageSet + correction;
 800a628:	4b08      	ldr	r3, [pc, #32]	; (800a64c <compensateVoltage+0x48>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	18d3      	adds	r3, r2, r3
 800a632:	603b      	str	r3, [r7, #0]

	return (compVoltage > dhandle->voltageMax) ? dhandle->voltageMax : compVoltage;
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <compensateVoltage+0x48>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d900      	bls.n	800a642 <compensateVoltage+0x3e>
 800a640:	0013      	movs	r3, r2
}
 800a642:	0018      	movs	r0, r3
 800a644:	46bd      	mov	sp, r7
 800a646:	b002      	add	sp, #8
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	46c0      	nop			; (mov r8, r8)
 800a64c:	200000f8 	.word	0x200000f8

0800a650 <max7219_Init>:
static uint16_t getSymbol(uint8_t number);
static uint32_t lcdPow10(uint8_t n);
static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment);

void max7219_Init(uint8_t intensivity)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	0002      	movs	r2, r0
 800a658:	1dfb      	adds	r3, r7, #7
 800a65a:	701a      	strb	r2, [r3, #0]
	max7219_Turn_On();
 800a65c:	f000 f87a 	bl	800a754 <max7219_Turn_On>
	max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 800a660:	2107      	movs	r1, #7
 800a662:	200b      	movs	r0, #11
 800a664:	f000 f848 	bl	800a6f8 <max7219_SendData>
	max7219_SetIntensivity(intensivity);
 800a668:	1dfb      	adds	r3, r7, #7
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	0018      	movs	r0, r3
 800a66e:	f000 f806 	bl	800a67e <max7219_SetIntensivity>
	max7219_Clean();
 800a672:	f000 f819 	bl	800a6a8 <max7219_Clean>
}
 800a676:	46c0      	nop			; (mov r8, r8)
 800a678:	46bd      	mov	sp, r7
 800a67a:	b002      	add	sp, #8
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	0002      	movs	r2, r0
 800a686:	1dfb      	adds	r3, r7, #7
 800a688:	701a      	strb	r2, [r3, #0]
	if (intensivity > 0x0F)
 800a68a:	1dfb      	adds	r3, r7, #7
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b0f      	cmp	r3, #15
 800a690:	d806      	bhi.n	800a6a0 <max7219_SetIntensivity+0x22>
	{
		return;
	}

	max7219_SendData(REG_INTENSITY, intensivity);
 800a692:	1dfb      	adds	r3, r7, #7
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	0019      	movs	r1, r3
 800a698:	200a      	movs	r0, #10
 800a69a:	f000 f82d 	bl	800a6f8 <max7219_SendData>
 800a69e:	e000      	b.n	800a6a2 <max7219_SetIntensivity+0x24>
		return;
 800a6a0:	46c0      	nop			; (mov r8, r8)
}
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	b002      	add	sp, #8
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <max7219_Clean>:

void max7219_Clean()
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
	uint8_t clear = 0x00;
 800a6ae:	1dfb      	adds	r3, r7, #7
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	701a      	strb	r2, [r3, #0]

	if(decodeMode == 0xFF)
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <max7219_Clean+0x4c>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	2bff      	cmp	r3, #255	; 0xff
 800a6ba:	d102      	bne.n	800a6c2 <max7219_Clean+0x1a>
	{
		clear = BLANK;
 800a6bc:	1dfb      	adds	r3, r7, #7
 800a6be:	220f      	movs	r2, #15
 800a6c0:	701a      	strb	r2, [r3, #0]
	}

	for (int i = 0; i < 8; ++i)
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	e00c      	b.n	800a6e2 <max7219_Clean+0x3a>
	{
		max7219_SendData(i + 1, clear);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	1dfb      	adds	r3, r7, #7
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	0019      	movs	r1, r3
 800a6d6:	0010      	movs	r0, r2
 800a6d8:	f000 f80e 	bl	800a6f8 <max7219_SendData>
	for (int i = 0; i < 8; ++i)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	603b      	str	r3, [r7, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b07      	cmp	r3, #7
 800a6e6:	ddef      	ble.n	800a6c8 <max7219_Clean+0x20>
	}
}
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	b002      	add	sp, #8
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	200007c4 	.word	0x200007c4

0800a6f8 <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	0002      	movs	r2, r0
 800a700:	1dfb      	adds	r3, r7, #7
 800a702:	701a      	strb	r2, [r3, #0]
 800a704:	1dbb      	adds	r3, r7, #6
 800a706:	1c0a      	adds	r2, r1, #0
 800a708:	701a      	strb	r2, [r3, #0]
	CS_SET();
 800a70a:	2380      	movs	r3, #128	; 0x80
 800a70c:	015b      	lsls	r3, r3, #5
 800a70e:	480f      	ldr	r0, [pc, #60]	; (800a74c <max7219_SendData+0x54>)
 800a710:	2200      	movs	r2, #0
 800a712:	0019      	movs	r1, r3
 800a714:	f004 fe00 	bl	800f318 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPI_PORT, &addr, 1, HAL_MAX_DELAY);
 800a718:	2301      	movs	r3, #1
 800a71a:	425b      	negs	r3, r3
 800a71c:	1df9      	adds	r1, r7, #7
 800a71e:	480c      	ldr	r0, [pc, #48]	; (800a750 <max7219_SendData+0x58>)
 800a720:	2201      	movs	r2, #1
 800a722:	f007 fc51 	bl	8011fc8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPI_PORT, &data, 1, HAL_MAX_DELAY);
 800a726:	2301      	movs	r3, #1
 800a728:	425b      	negs	r3, r3
 800a72a:	1db9      	adds	r1, r7, #6
 800a72c:	4808      	ldr	r0, [pc, #32]	; (800a750 <max7219_SendData+0x58>)
 800a72e:	2201      	movs	r2, #1
 800a730:	f007 fc4a 	bl	8011fc8 <HAL_SPI_Transmit>
	CS_RESET();
 800a734:	2380      	movs	r3, #128	; 0x80
 800a736:	015b      	lsls	r3, r3, #5
 800a738:	4804      	ldr	r0, [pc, #16]	; (800a74c <max7219_SendData+0x54>)
 800a73a:	2201      	movs	r2, #1
 800a73c:	0019      	movs	r1, r3
 800a73e:	f004 fdeb 	bl	800f318 <HAL_GPIO_WritePin>
}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	46bd      	mov	sp, r7
 800a746:	b002      	add	sp, #8
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	46c0      	nop			; (mov r8, r8)
 800a74c:	50000400 	.word	0x50000400
 800a750:	200008a0 	.word	0x200008a0

0800a754 <max7219_Turn_On>:

void max7219_Turn_On(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
	max7219_SendData(REG_SHUTDOWN, 0x01);
 800a758:	2101      	movs	r1, #1
 800a75a:	200c      	movs	r0, #12
 800a75c:	f7ff ffcc 	bl	800a6f8 <max7219_SendData>
}
 800a760:	46c0      	nop			; (mov r8, r8)
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
	...

0800a768 <max7219_Decode_On>:
{
	max7219_SendData(REG_SHUTDOWN, 0x00);
}

void max7219_Decode_On(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
	decodeMode = 0xFF;
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <max7219_Decode_On+0x1c>)
 800a76e:	22ff      	movs	r2, #255	; 0xff
 800a770:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800a772:	4b04      	ldr	r3, [pc, #16]	; (800a784 <max7219_Decode_On+0x1c>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	0019      	movs	r1, r3
 800a778:	2009      	movs	r0, #9
 800a77a:	f7ff ffbd 	bl	800a6f8 <max7219_SendData>
}
 800a77e:	46c0      	nop			; (mov r8, r8)
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	200007c4 	.word	0x200007c4

0800a788 <mapPosition>:
  * @param  newPosition: Starting position of printing
  * @retval MAX7219_Digits: return new mapped Position
  */

static MAX7219_Digits mapPosition(MAX7219_Digits newPosition, MAX7219_Segments segment)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	0002      	movs	r2, r0
 800a790:	1dfb      	adds	r3, r7, #7
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	1dbb      	adds	r3, r7, #6
 800a796:	1c0a      	adds	r2, r1, #0
 800a798:	701a      	strb	r2, [r3, #0]
	if (segment == 1)
 800a79a:	1dbb      	adds	r3, r7, #6
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d102      	bne.n	800a7a8 <mapPosition+0x20>
	{
		return newPosition;
 800a7a2:	1dfb      	adds	r3, r7, #7
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	e009      	b.n	800a7bc <mapPosition+0x34>
	}
	else if (segment == 2)
 800a7a8:	1dbb      	adds	r3, r7, #6
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d104      	bne.n	800a7ba <mapPosition+0x32>
	{
		return newPosition +4;
 800a7b0:	1dfb      	adds	r3, r7, #7
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	e000      	b.n	800a7bc <mapPosition+0x34>
	}
	return 0; // In case of invalid position
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	0018      	movs	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b002      	add	sp, #8
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <max7219_PrintDigit>:
  * @param  point: Specify if decimal point should be displayed or not
  * @retval None
  */

void max7219_PrintDigit(MAX7219_Segments segment, MAX7219_Digits position, MAX7219_Numeric numeric, bool point)
{
 800a7c4:	b5b0      	push	{r4, r5, r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	0005      	movs	r5, r0
 800a7cc:	000c      	movs	r4, r1
 800a7ce:	0010      	movs	r0, r2
 800a7d0:	0019      	movs	r1, r3
 800a7d2:	1dfb      	adds	r3, r7, #7
 800a7d4:	1c2a      	adds	r2, r5, #0
 800a7d6:	701a      	strb	r2, [r3, #0]
 800a7d8:	1dbb      	adds	r3, r7, #6
 800a7da:	1c22      	adds	r2, r4, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	1d7b      	adds	r3, r7, #5
 800a7e0:	1c02      	adds	r2, r0, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	1d3b      	adds	r3, r7, #4
 800a7e6:	1c0a      	adds	r2, r1, #0
 800a7e8:	701a      	strb	r2, [r3, #0]
	MAX7219_Digits mappedPosition = mapPosition(position, segment);
 800a7ea:	250f      	movs	r5, #15
 800a7ec:	197c      	adds	r4, r7, r5
 800a7ee:	1dfb      	adds	r3, r7, #7
 800a7f0:	781a      	ldrb	r2, [r3, #0]
 800a7f2:	1dbb      	adds	r3, r7, #6
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	0011      	movs	r1, r2
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f7ff ffc5 	bl	800a788 <mapPosition>
 800a7fe:	0003      	movs	r3, r0
 800a800:	7023      	strb	r3, [r4, #0]
	if(mappedPosition > NUMBER_OF_DIGITS)
 800a802:	002c      	movs	r4, r5
 800a804:	193b      	adds	r3, r7, r4
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b08      	cmp	r3, #8
 800a80a:	d852      	bhi.n	800a8b2 <max7219_PrintDigit+0xee>
	{
		return;
	}

	if(point)
 800a80c:	1d3b      	adds	r3, r7, #4
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d027      	beq.n	800a864 <max7219_PrintDigit+0xa0>
	{
		if(decodeMode == 0x00)
 800a814:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <max7219_PrintDigit+0xf8>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d111      	bne.n	800a840 <max7219_PrintDigit+0x7c>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) | (1 << 7));
 800a81c:	1d7b      	adds	r3, r7, #5
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	0018      	movs	r0, r3
 800a822:	f000 f959 	bl	800aad8 <getSymbol>
 800a826:	0003      	movs	r3, r0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	2280      	movs	r2, #128	; 0x80
 800a82c:	4252      	negs	r2, r2
 800a82e:	4313      	orrs	r3, r2
 800a830:	b2da      	uxtb	r2, r3
 800a832:	193b      	adds	r3, r7, r4
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	0011      	movs	r1, r2
 800a838:	0018      	movs	r0, r3
 800a83a:	f7ff ff5d 	bl	800a6f8 <max7219_SendData>
 800a83e:	e039      	b.n	800a8b4 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 800a840:	4b1e      	ldr	r3, [pc, #120]	; (800a8bc <max7219_PrintDigit+0xf8>)
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2bff      	cmp	r3, #255	; 0xff
 800a846:	d135      	bne.n	800a8b4 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric | (1 << 7));
 800a848:	1d7b      	adds	r3, r7, #5
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2280      	movs	r2, #128	; 0x80
 800a84e:	4252      	negs	r2, r2
 800a850:	4313      	orrs	r3, r2
 800a852:	b2da      	uxtb	r2, r3
 800a854:	230f      	movs	r3, #15
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	0011      	movs	r1, r2
 800a85c:	0018      	movs	r0, r3
 800a85e:	f7ff ff4b 	bl	800a6f8 <max7219_SendData>
 800a862:	e027      	b.n	800a8b4 <max7219_PrintDigit+0xf0>
		}
	}
	else
	{
		if(decodeMode == 0x00)
 800a864:	4b15      	ldr	r3, [pc, #84]	; (800a8bc <max7219_PrintDigit+0xf8>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d111      	bne.n	800a890 <max7219_PrintDigit+0xcc>
		{
			max7219_SendData(mappedPosition, getSymbol(numeric) & (~(1 << 7)));
 800a86c:	1d7b      	adds	r3, r7, #5
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	0018      	movs	r0, r3
 800a872:	f000 f931 	bl	800aad8 <getSymbol>
 800a876:	0003      	movs	r3, r0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	227f      	movs	r2, #127	; 0x7f
 800a87c:	4013      	ands	r3, r2
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	230f      	movs	r3, #15
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	0011      	movs	r1, r2
 800a888:	0018      	movs	r0, r3
 800a88a:	f7ff ff35 	bl	800a6f8 <max7219_SendData>
 800a88e:	e011      	b.n	800a8b4 <max7219_PrintDigit+0xf0>
		}
		else if(decodeMode == 0xFF)
 800a890:	4b0a      	ldr	r3, [pc, #40]	; (800a8bc <max7219_PrintDigit+0xf8>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	2bff      	cmp	r3, #255	; 0xff
 800a896:	d10d      	bne.n	800a8b4 <max7219_PrintDigit+0xf0>
		{
			max7219_SendData(mappedPosition, numeric & (~(1 << 7)));
 800a898:	1d7b      	adds	r3, r7, #5
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	227f      	movs	r2, #127	; 0x7f
 800a89e:	4013      	ands	r3, r2
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	230f      	movs	r3, #15
 800a8a4:	18fb      	adds	r3, r7, r3
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	0011      	movs	r1, r2
 800a8aa:	0018      	movs	r0, r3
 800a8ac:	f7ff ff24 	bl	800a6f8 <max7219_SendData>
 800a8b0:	e000      	b.n	800a8b4 <max7219_PrintDigit+0xf0>
		return;
 800a8b2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	b004      	add	sp, #16
 800a8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ba:	46c0      	nop			; (mov r8, r8)
 800a8bc:	200007c4 	.word	0x200007c4

0800a8c0 <max7219_PrintIspecial>:
  * @param  decimal_position: Place of decimal point
  * @retval MAX7219_Digits: current cursor position
  */

MAX7219_Digits max7219_PrintIspecial(MAX7219_Segments segment, int value, uint8_t decimal_position)
{
 800a8c0:	b590      	push	{r4, r7, lr}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6039      	str	r1, [r7, #0]
 800a8c8:	0011      	movs	r1, r2
 800a8ca:	1dfb      	adds	r3, r7, #7
 800a8cc:	1c02      	adds	r2, r0, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	1dbb      	adds	r3, r7, #6
 800a8d2:	1c0a      	adds	r2, r1, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
	max7219_SendData(REG_DECODE_MODE, 0xFF);
 800a8d6:	21ff      	movs	r1, #255	; 0xff
 800a8d8:	2009      	movs	r0, #9
 800a8da:	f7ff ff0d 	bl	800a6f8 <max7219_SendData>

	int32_t i;
    int8_t num_digits = 0;
 800a8de:	2313      	movs	r3, #19
 800a8e0:	18fb      	adds	r3, r7, r3
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]


	//Get number of non-zero digits
	i = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	617b      	str	r3, [r7, #20]
	while ((abs(value) / i) > 9)
 800a8ea:	e00e      	b.n	800a90a <max7219_PrintIspecial+0x4a>
	{
		i *= 10;
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	0013      	movs	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	189b      	adds	r3, r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	617b      	str	r3, [r7, #20]
		num_digits++;
 800a8f8:	2113      	movs	r1, #19
 800a8fa:	187b      	adds	r3, r7, r1
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	b25b      	sxtb	r3, r3
 800a900:	b2db      	uxtb	r3, r3
 800a902:	3301      	adds	r3, #1
 800a904:	b2da      	uxtb	r2, r3
 800a906:	187b      	adds	r3, r7, r1
 800a908:	701a      	strb	r2, [r3, #0]
	while ((abs(value) / i) > 9)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	17da      	asrs	r2, r3, #31
 800a90e:	189b      	adds	r3, r3, r2
 800a910:	4053      	eors	r3, r2
 800a912:	6979      	ldr	r1, [r7, #20]
 800a914:	0018      	movs	r0, r3
 800a916:	f7fb fd09 	bl	800632c <__divsi3>
 800a91a:	0003      	movs	r3, r0
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	dce5      	bgt.n	800a8ec <max7219_PrintIspecial+0x2c>
	}
	num_digits++;
 800a920:	2113      	movs	r1, #19
 800a922:	187b      	adds	r3, r7, r1
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	b25b      	sxtb	r3, r3
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	3301      	adds	r3, #1
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	701a      	strb	r2, [r3, #0]

	int position = num_digits;
 800a932:	187b      	adds	r3, r7, r1
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	b25b      	sxtb	r3, r3
 800a938:	60fb      	str	r3, [r7, #12]

	//Handle negative numbers
	if (value < 0)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da0e      	bge.n	800a95e <max7219_PrintIspecial+0x9e>
	{
		if(position > 0)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	dd08      	ble.n	800a958 <max7219_PrintIspecial+0x98>
		{
			max7219_SendData(position, MINUS);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	210a      	movs	r1, #10
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7ff fed3 	bl	800a6f8 <max7219_SendData>
			position--;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b01      	subs	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
		}
		value = -value;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	425b      	negs	r3, r3
 800a95c:	603b      	str	r3, [r7, #0]
	}


	//Print leading zeros and check for decimal point
	for (int j= 4; j > num_digits; j--) {
 800a95e:	2304      	movs	r3, #4
 800a960:	60bb      	str	r3, [r7, #8]
 800a962:	e018      	b.n	800a996 <max7219_PrintIspecial+0xd6>
		if(j == decimal_position) {
 800a964:	1dbb      	adds	r3, r7, #6
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d108      	bne.n	800a980 <max7219_PrintIspecial+0xc0>
			max7219_PrintDigit(segment, j, 0, true);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	b2d9      	uxtb	r1, r3
 800a972:	1dfb      	adds	r3, r7, #7
 800a974:	7818      	ldrb	r0, [r3, #0]
 800a976:	2301      	movs	r3, #1
 800a978:	2200      	movs	r2, #0
 800a97a:	f7ff ff23 	bl	800a7c4 <max7219_PrintDigit>
 800a97e:	e007      	b.n	800a990 <max7219_PrintIspecial+0xd0>
		}
		else {
			max7219_PrintDigit(segment, j, 0, false);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	b2d9      	uxtb	r1, r3
 800a984:	1dfb      	adds	r3, r7, #7
 800a986:	7818      	ldrb	r0, [r3, #0]
 800a988:	2300      	movs	r3, #0
 800a98a:	2200      	movs	r2, #0
 800a98c:	f7ff ff1a 	bl	800a7c4 <max7219_PrintDigit>
	for (int j= 4; j > num_digits; j--) {
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	3b01      	subs	r3, #1
 800a994:	60bb      	str	r3, [r7, #8]
 800a996:	2313      	movs	r3, #19
 800a998:	18fb      	adds	r3, r7, r3
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	dcdf      	bgt.n	800a964 <max7219_PrintIspecial+0xa4>
		}
	}


	//Print each number and decimal point
	while (i > 0)
 800a9a4:	e046      	b.n	800aa34 <max7219_PrintIspecial+0x174>
	{
		if(position > 0)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dd3c      	ble.n	800aa26 <max7219_PrintIspecial+0x166>
		{	//If current number position is decimal point, print also decimal point
			if(position == decimal_position) {
 800a9ac:	1dbb      	adds	r3, r7, #6
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d11a      	bne.n	800a9ec <max7219_PrintIspecial+0x12c>
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, true);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	b2dc      	uxtb	r4, r3
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	0013      	movs	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	189b      	adds	r3, r3, r2
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	001a      	movs	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	0011      	movs	r1, r2
 800a9ca:	0018      	movs	r0, r3
 800a9cc:	f7fb fd94 	bl	80064f8 <__aeabi_idivmod>
 800a9d0:	000b      	movs	r3, r1
 800a9d2:	6979      	ldr	r1, [r7, #20]
 800a9d4:	0018      	movs	r0, r3
 800a9d6:	f7fb fca9 	bl	800632c <__divsi3>
 800a9da:	0003      	movs	r3, r0
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	1dfb      	adds	r3, r7, #7
 800a9e0:	7818      	ldrb	r0, [r3, #0]
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	0021      	movs	r1, r4
 800a9e6:	f7ff feed 	bl	800a7c4 <max7219_PrintDigit>
 800a9ea:	e019      	b.n	800aa20 <max7219_PrintIspecial+0x160>
			}
			else {
				max7219_PrintDigit(segment, position, (value % (i * 10)) / i, false);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	b2dc      	uxtb	r4, r3
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	0013      	movs	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	189b      	adds	r3, r3, r2
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	001a      	movs	r2, r3
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	0011      	movs	r1, r2
 800aa00:	0018      	movs	r0, r3
 800aa02:	f7fb fd79 	bl	80064f8 <__aeabi_idivmod>
 800aa06:	000b      	movs	r3, r1
 800aa08:	6979      	ldr	r1, [r7, #20]
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f7fb fc8e 	bl	800632c <__divsi3>
 800aa10:	0003      	movs	r3, r0
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	1dfb      	adds	r3, r7, #7
 800aa16:	7818      	ldrb	r0, [r3, #0]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	0021      	movs	r1, r4
 800aa1c:	f7ff fed2 	bl	800a7c4 <max7219_PrintDigit>
			}
			position--;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
		}

		i /= 10;
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	210a      	movs	r1, #10
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f7fb fc7e 	bl	800632c <__divsi3>
 800aa30:	0003      	movs	r3, r0
 800aa32:	617b      	str	r3, [r7, #20]
	while (i > 0)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dcb5      	bgt.n	800a9a6 <max7219_PrintIspecial+0xe6>

	}

	max7219_SendData(REG_DECODE_MODE, decodeMode);
 800aa3a:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <max7219_PrintIspecial+0x194>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	0019      	movs	r1, r3
 800aa40:	2009      	movs	r0, #9
 800aa42:	f7ff fe59 	bl	800a6f8 <max7219_SendData>

	return position;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	b2db      	uxtb	r3, r3
}
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	b007      	add	sp, #28
 800aa50:	bd90      	pop	{r4, r7, pc}
 800aa52:	46c0      	nop			; (mov r8, r8)
 800aa54:	200007c4 	.word	0x200007c4

0800aa58 <max7219_BlinkDigit2>:
  * @param  decimal_position: place of decimal point
  * @param  show_digit: specifies if digit has to be blanked or printed
  * @retval None
  */

void max7219_BlinkDigit2(MAX7219_Segments segment, int value, uint8_t n, uint8_t decimal_position, bool show_digit) {
 800aa58:	b590      	push	{r4, r7, lr}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	0004      	movs	r4, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	0010      	movs	r0, r2
 800aa64:	0019      	movs	r1, r3
 800aa66:	1dfb      	adds	r3, r7, #7
 800aa68:	1c22      	adds	r2, r4, #0
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	1dbb      	adds	r3, r7, #6
 800aa6e:	1c02      	adds	r2, r0, #0
 800aa70:	701a      	strb	r2, [r3, #0]
 800aa72:	1d7b      	adds	r3, r7, #5
 800aa74:	1c0a      	adds	r2, r1, #0
 800aa76:	701a      	strb	r2, [r3, #0]
	uint16_t blinkDigit = n; // Digit to blink (0-3)
 800aa78:	200e      	movs	r0, #14
 800aa7a:	183b      	adds	r3, r7, r0
 800aa7c:	1dba      	adds	r2, r7, #6
 800aa7e:	7812      	ldrb	r2, [r2, #0]
 800aa80:	801a      	strh	r2, [r3, #0]
	uint8_t digit;
	bool showDecimal = blinkDigit == decimal_position;
 800aa82:	1d7b      	adds	r3, r7, #5
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	240d      	movs	r4, #13
 800aa8a:	193b      	adds	r3, r7, r4
 800aa8c:	1839      	adds	r1, r7, r0
 800aa8e:	8809      	ldrh	r1, [r1, #0]
 800aa90:	1a8a      	subs	r2, r1, r2
 800aa92:	4251      	negs	r1, r2
 800aa94:	414a      	adcs	r2, r1
 800aa96:	701a      	strb	r2, [r3, #0]
	//Erase digit
	if (!show_digit) {
 800aa98:	2320      	movs	r3, #32
 800aa9a:	18fb      	adds	r3, r7, r3
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4053      	eors	r3, r2
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <max7219_BlinkDigit2+0x68>
		//Print the BLANK and also decimal point
		max7219_PrintDigit(segment, blinkDigit, BLANK, showDecimal);
 800aaa8:	183b      	adds	r3, r7, r0
 800aaaa:	881b      	ldrh	r3, [r3, #0]
 800aaac:	b2d9      	uxtb	r1, r3
 800aaae:	193b      	adds	r3, r7, r4
 800aab0:	781a      	ldrb	r2, [r3, #0]
 800aab2:	1dfb      	adds	r3, r7, #7
 800aab4:	7818      	ldrb	r0, [r3, #0]
 800aab6:	0013      	movs	r3, r2
 800aab8:	220f      	movs	r2, #15
 800aaba:	f7ff fe83 	bl	800a7c4 <max7219_PrintDigit>

	} else {
		// Reprint whole number
		max7219_PrintIspecial(segment, value, decimal_position);
	}
}
 800aabe:	e007      	b.n	800aad0 <max7219_BlinkDigit2+0x78>
		max7219_PrintIspecial(segment, value, decimal_position);
 800aac0:	1d7b      	adds	r3, r7, #5
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	1dfb      	adds	r3, r7, #7
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	0018      	movs	r0, r3
 800aacc:	f7ff fef8 	bl	800a8c0 <max7219_PrintIspecial>
}
 800aad0:	46c0      	nop			; (mov r8, r8)
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b005      	add	sp, #20
 800aad6:	bd90      	pop	{r4, r7, pc}

0800aad8 <getSymbol>:

static uint16_t getSymbol(uint8_t number)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	0002      	movs	r2, r0
 800aae0:	1dfb      	adds	r3, r7, #7
 800aae2:	701a      	strb	r2, [r3, #0]
	return SYMBOLS[number];
 800aae4:	1dfb      	adds	r3, r7, #7
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	4a03      	ldr	r2, [pc, #12]	; (800aaf8 <getSymbol+0x20>)
 800aaea:	5cd3      	ldrb	r3, [r2, r3]
 800aaec:	b29b      	uxth	r3, r3
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b002      	add	sp, #8
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	20000108 	.word	0x20000108

0800aafc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	0002      	movs	r2, r0
 800ab04:	1dfb      	adds	r3, r7, #7
 800ab06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab08:	1dfb      	adds	r3, r7, #7
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b7f      	cmp	r3, #127	; 0x7f
 800ab0e:	d809      	bhi.n	800ab24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ab10:	1dfb      	adds	r3, r7, #7
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	001a      	movs	r2, r3
 800ab16:	231f      	movs	r3, #31
 800ab18:	401a      	ands	r2, r3
 800ab1a:	4b04      	ldr	r3, [pc, #16]	; (800ab2c <__NVIC_EnableIRQ+0x30>)
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4091      	lsls	r1, r2
 800ab20:	000a      	movs	r2, r1
 800ab22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800ab24:	46c0      	nop			; (mov r8, r8)
 800ab26:	46bd      	mov	sp, r7
 800ab28:	b002      	add	sp, #8
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	e000e100 	.word	0xe000e100

0800ab30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ab30:	b590      	push	{r4, r7, lr}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	0002      	movs	r2, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	1dfb      	adds	r3, r7, #7
 800ab3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ab3e:	1dfb      	adds	r3, r7, #7
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b7f      	cmp	r3, #127	; 0x7f
 800ab44:	d828      	bhi.n	800ab98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab46:	4a2f      	ldr	r2, [pc, #188]	; (800ac04 <__NVIC_SetPriority+0xd4>)
 800ab48:	1dfb      	adds	r3, r7, #7
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	b25b      	sxtb	r3, r3
 800ab4e:	089b      	lsrs	r3, r3, #2
 800ab50:	33c0      	adds	r3, #192	; 0xc0
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	589b      	ldr	r3, [r3, r2]
 800ab56:	1dfa      	adds	r2, r7, #7
 800ab58:	7812      	ldrb	r2, [r2, #0]
 800ab5a:	0011      	movs	r1, r2
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	400a      	ands	r2, r1
 800ab60:	00d2      	lsls	r2, r2, #3
 800ab62:	21ff      	movs	r1, #255	; 0xff
 800ab64:	4091      	lsls	r1, r2
 800ab66:	000a      	movs	r2, r1
 800ab68:	43d2      	mvns	r2, r2
 800ab6a:	401a      	ands	r2, r3
 800ab6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	019b      	lsls	r3, r3, #6
 800ab72:	22ff      	movs	r2, #255	; 0xff
 800ab74:	401a      	ands	r2, r3
 800ab76:	1dfb      	adds	r3, r7, #7
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	4003      	ands	r3, r0
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab84:	481f      	ldr	r0, [pc, #124]	; (800ac04 <__NVIC_SetPriority+0xd4>)
 800ab86:	1dfb      	adds	r3, r7, #7
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	b25b      	sxtb	r3, r3
 800ab8c:	089b      	lsrs	r3, r3, #2
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	33c0      	adds	r3, #192	; 0xc0
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800ab96:	e031      	b.n	800abfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ab98:	4a1b      	ldr	r2, [pc, #108]	; (800ac08 <__NVIC_SetPriority+0xd8>)
 800ab9a:	1dfb      	adds	r3, r7, #7
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	0019      	movs	r1, r3
 800aba0:	230f      	movs	r3, #15
 800aba2:	400b      	ands	r3, r1
 800aba4:	3b08      	subs	r3, #8
 800aba6:	089b      	lsrs	r3, r3, #2
 800aba8:	3306      	adds	r3, #6
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	18d3      	adds	r3, r2, r3
 800abae:	3304      	adds	r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	1dfa      	adds	r2, r7, #7
 800abb4:	7812      	ldrb	r2, [r2, #0]
 800abb6:	0011      	movs	r1, r2
 800abb8:	2203      	movs	r2, #3
 800abba:	400a      	ands	r2, r1
 800abbc:	00d2      	lsls	r2, r2, #3
 800abbe:	21ff      	movs	r1, #255	; 0xff
 800abc0:	4091      	lsls	r1, r2
 800abc2:	000a      	movs	r2, r1
 800abc4:	43d2      	mvns	r2, r2
 800abc6:	401a      	ands	r2, r3
 800abc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	019b      	lsls	r3, r3, #6
 800abce:	22ff      	movs	r2, #255	; 0xff
 800abd0:	401a      	ands	r2, r3
 800abd2:	1dfb      	adds	r3, r7, #7
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	0018      	movs	r0, r3
 800abd8:	2303      	movs	r3, #3
 800abda:	4003      	ands	r3, r0
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800abe0:	4809      	ldr	r0, [pc, #36]	; (800ac08 <__NVIC_SetPriority+0xd8>)
 800abe2:	1dfb      	adds	r3, r7, #7
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	001c      	movs	r4, r3
 800abe8:	230f      	movs	r3, #15
 800abea:	4023      	ands	r3, r4
 800abec:	3b08      	subs	r3, #8
 800abee:	089b      	lsrs	r3, r3, #2
 800abf0:	430a      	orrs	r2, r1
 800abf2:	3306      	adds	r3, #6
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	18c3      	adds	r3, r0, r3
 800abf8:	3304      	adds	r3, #4
 800abfa:	601a      	str	r2, [r3, #0]
}
 800abfc:	46c0      	nop			; (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b003      	add	sp, #12
 800ac02:	bd90      	pop	{r4, r7, pc}
 800ac04:	e000e100 	.word	0xe000e100
 800ac08:	e000ed00 	.word	0xe000ed00

0800ac0c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <LL_DMA_SetDataTransferDirection+0x44>)
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	18d3      	adds	r3, r2, r3
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	001a      	movs	r2, r3
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	18d3      	adds	r3, r2, r3
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a09      	ldr	r2, [pc, #36]	; (800ac54 <LL_DMA_SetDataTransferDirection+0x48>)
 800ac2e:	4013      	ands	r3, r2
 800ac30:	0019      	movs	r1, r3
 800ac32:	4a07      	ldr	r2, [pc, #28]	; (800ac50 <LL_DMA_SetDataTransferDirection+0x44>)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	18d3      	adds	r3, r2, r3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	001a      	movs	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	18d3      	adds	r3, r2, r3
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800ac46:	46c0      	nop			; (mov r8, r8)
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	b006      	add	sp, #24
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	0802af94 	.word	0x0802af94
 800ac54:	ffffbfef 	.word	0xffffbfef

0800ac58 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 800ac68:	4a0c      	ldr	r2, [pc, #48]	; (800ac9c <LL_DMA_SetMode+0x44>)
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	18d3      	adds	r3, r2, r3
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	001a      	movs	r2, r3
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	18d3      	adds	r3, r2, r3
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	4393      	bics	r3, r2
 800ac7c:	0019      	movs	r1, r3
 800ac7e:	4a07      	ldr	r2, [pc, #28]	; (800ac9c <LL_DMA_SetMode+0x44>)
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	18d3      	adds	r3, r2, r3
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	001a      	movs	r2, r3
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	18d3      	adds	r3, r2, r3
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	601a      	str	r2, [r3, #0]
             Mode);
}
 800ac92:	46c0      	nop			; (mov r8, r8)
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b006      	add	sp, #24
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	0802af94 	.word	0x0802af94

0800aca0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800acb0:	4a0c      	ldr	r2, [pc, #48]	; (800ace4 <LL_DMA_SetPeriphIncMode+0x44>)
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	18d3      	adds	r3, r2, r3
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	001a      	movs	r2, r3
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	18d3      	adds	r3, r2, r3
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2240      	movs	r2, #64	; 0x40
 800acc2:	4393      	bics	r3, r2
 800acc4:	0019      	movs	r1, r3
 800acc6:	4a07      	ldr	r2, [pc, #28]	; (800ace4 <LL_DMA_SetPeriphIncMode+0x44>)
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	18d3      	adds	r3, r2, r3
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	001a      	movs	r2, r3
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	18d3      	adds	r3, r2, r3
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800acda:	46c0      	nop			; (mov r8, r8)
 800acdc:	46bd      	mov	sp, r7
 800acde:	b006      	add	sp, #24
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	46c0      	nop			; (mov r8, r8)
 800ace4:	0802af94 	.word	0x0802af94

0800ace8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800acf8:	4a0c      	ldr	r2, [pc, #48]	; (800ad2c <LL_DMA_SetMemoryIncMode+0x44>)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	18d3      	adds	r3, r2, r3
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	001a      	movs	r2, r3
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	18d3      	adds	r3, r2, r3
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2280      	movs	r2, #128	; 0x80
 800ad0a:	4393      	bics	r3, r2
 800ad0c:	0019      	movs	r1, r3
 800ad0e:	4a07      	ldr	r2, [pc, #28]	; (800ad2c <LL_DMA_SetMemoryIncMode+0x44>)
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	18d3      	adds	r3, r2, r3
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	001a      	movs	r2, r3
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	18d3      	adds	r3, r2, r3
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	46bd      	mov	sp, r7
 800ad26:	b006      	add	sp, #24
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	0802af94 	.word	0x0802af94

0800ad30 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800ad40:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <LL_DMA_SetPeriphSize+0x44>)
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	18d3      	adds	r3, r2, r3
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	001a      	movs	r2, r3
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	18d3      	adds	r3, r2, r3
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a09      	ldr	r2, [pc, #36]	; (800ad78 <LL_DMA_SetPeriphSize+0x48>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	0019      	movs	r1, r3
 800ad56:	4a07      	ldr	r2, [pc, #28]	; (800ad74 <LL_DMA_SetPeriphSize+0x44>)
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	18d3      	adds	r3, r2, r3
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	001a      	movs	r2, r3
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	18d3      	adds	r3, r2, r3
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	b006      	add	sp, #24
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	46c0      	nop			; (mov r8, r8)
 800ad74:	0802af94 	.word	0x0802af94
 800ad78:	fffffcff 	.word	0xfffffcff

0800ad7c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 800ad8c:	4a0c      	ldr	r2, [pc, #48]	; (800adc0 <LL_DMA_SetMemorySize+0x44>)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	18d3      	adds	r3, r2, r3
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	001a      	movs	r2, r3
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	18d3      	adds	r3, r2, r3
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <LL_DMA_SetMemorySize+0x48>)
 800ad9e:	4013      	ands	r3, r2
 800ada0:	0019      	movs	r1, r3
 800ada2:	4a07      	ldr	r2, [pc, #28]	; (800adc0 <LL_DMA_SetMemorySize+0x44>)
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	18d3      	adds	r3, r2, r3
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	001a      	movs	r2, r3
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	18d3      	adds	r3, r2, r3
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800adb6:	46c0      	nop			; (mov r8, r8)
 800adb8:	46bd      	mov	sp, r7
 800adba:	b006      	add	sp, #24
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	0802af94 	.word	0x0802af94
 800adc4:	fffff3ff 	.word	0xfffff3ff

0800adc8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800add8:	4a0c      	ldr	r2, [pc, #48]	; (800ae0c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	18d3      	adds	r3, r2, r3
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	001a      	movs	r2, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	18d3      	adds	r3, r2, r3
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800adea:	4013      	ands	r3, r2
 800adec:	0019      	movs	r1, r3
 800adee:	4a07      	ldr	r2, [pc, #28]	; (800ae0c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	18d3      	adds	r3, r2, r3
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	001a      	movs	r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	18d3      	adds	r3, r2, r3
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	601a      	str	r2, [r3, #0]
             Priority);
}
 800ae02:	46c0      	nop			; (mov r8, r8)
 800ae04:	46bd      	mov	sp, r7
 800ae06:	b006      	add	sp, #24
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	0802af94 	.word	0x0802af94
 800ae10:	ffffcfff 	.word	0xffffcfff

0800ae14 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	0a9b      	lsrs	r3, r3, #10
 800ae24:	4a0f      	ldr	r2, [pc, #60]	; (800ae64 <LL_DMA_SetPeriphRequest+0x50>)
 800ae26:	405a      	eors	r2, r3
 800ae28:	0013      	movs	r3, r2
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	18d3      	adds	r3, r2, r3
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4a0b      	ldr	r2, [pc, #44]	; (800ae68 <LL_DMA_SetPeriphRequest+0x54>)
 800ae3a:	4694      	mov	ip, r2
 800ae3c:	4463      	add	r3, ip
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	227f      	movs	r2, #127	; 0x7f
 800ae42:	4393      	bics	r3, r2
 800ae44:	0019      	movs	r1, r3
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	18d3      	adds	r3, r2, r3
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4a06      	ldr	r2, [pc, #24]	; (800ae68 <LL_DMA_SetPeriphRequest+0x54>)
 800ae50:	4694      	mov	ip, r2
 800ae52:	4463      	add	r3, ip
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	601a      	str	r2, [r3, #0]
}
 800ae5a:	46c0      	nop			; (mov r8, r8)
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b006      	add	sp, #24
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	46c0      	nop			; (mov r8, r8)
 800ae64:	00100080 	.word	0x00100080
 800ae68:	40020800 	.word	0x40020800

0800ae6c <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	431a      	orrs	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	601a      	str	r2, [r3, #0]
}
 800ae80:	46c0      	nop			; (mov r8, r8)
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b002      	add	sp, #8
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <LL_LPUART_DisableFIFO+0x1c>)
 800ae96:	401a      	ands	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	601a      	str	r2, [r3, #0]
}
 800ae9c:	46c0      	nop			; (mov r8, r8)
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	b002      	add	sp, #8
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	dfffffff 	.word	0xdfffffff

0800aea8 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeb2:	f3ef 8310 	mrs	r3, PRIMASK
 800aeb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	2301      	movs	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f383 8810 	msr	PRIMASK, r3
}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	08da      	lsrs	r2, r3, #3
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	075b      	lsls	r3, r3, #29
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	609a      	str	r2, [r3, #8]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f383 8810 	msr	PRIMASK, r3
}
 800aee4:	46c0      	nop			; (mov r8, r8)
}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	46bd      	mov	sp, r7
 800aeea:	b006      	add	sp, #24
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aefa:	f3ef 8310 	mrs	r3, PRIMASK
 800aefe:	60bb      	str	r3, [r7, #8]
  return(result);
 800af00:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800af02:	617b      	str	r3, [r7, #20]
 800af04:	2301      	movs	r3, #1
 800af06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f383 8810 	msr	PRIMASK, r3
}
 800af0e:	46c0      	nop			; (mov r8, r8)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	4a08      	ldr	r2, [pc, #32]	; (800af38 <LL_LPUART_SetRXFIFOThreshold+0x48>)
 800af16:	401a      	ands	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	065b      	lsls	r3, r3, #25
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	609a      	str	r2, [r3, #8]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f383 8810 	msr	PRIMASK, r3
}
 800af2c:	46c0      	nop			; (mov r8, r8)
}
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	46bd      	mov	sp, r7
 800af32:	b006      	add	sp, #24
 800af34:	bd80      	pop	{r7, pc}
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	f1ffffff 	.word	0xf1ffffff

0800af3c <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69da      	ldr	r2, [r3, #28]
 800af48:	2380      	movs	r3, #128	; 0x80
 800af4a:	039b      	lsls	r3, r3, #14
 800af4c:	401a      	ands	r2, r3
 800af4e:	2380      	movs	r3, #128	; 0x80
 800af50:	039b      	lsls	r3, r3, #14
 800af52:	429a      	cmp	r2, r3
 800af54:	d101      	bne.n	800af5a <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <LL_LPUART_IsActiveFlag_TEACK+0x20>
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	0018      	movs	r0, r3
 800af5e:	46bd      	mov	sp, r7
 800af60:	b002      	add	sp, #8
 800af62:	bd80      	pop	{r7, pc}

0800af64 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	69da      	ldr	r2, [r3, #28]
 800af70:	2380      	movs	r3, #128	; 0x80
 800af72:	03db      	lsls	r3, r3, #15
 800af74:	401a      	ands	r2, r3
 800af76:	2380      	movs	r3, #128	; 0x80
 800af78:	03db      	lsls	r3, r3, #15
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d101      	bne.n	800af82 <LL_LPUART_IsActiveFlag_REACK+0x1e>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <LL_LPUART_IsActiveFlag_REACK+0x20>
 800af82:	2300      	movs	r3, #0
}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b002      	add	sp, #8
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af94:	f3ef 8310 	mrs	r3, PRIMASK
 800af98:	60bb      	str	r3, [r7, #8]
  return(result);
 800af9a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	2301      	movs	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f383 8810 	msr	PRIMASK, r3
}
 800afa8:	46c0      	nop			; (mov r8, r8)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2220      	movs	r2, #32
 800afb0:	431a      	orrs	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f383 8810 	msr	PRIMASK, r3
}
 800afc0:	46c0      	nop			; (mov r8, r8)
}
 800afc2:	46c0      	nop			; (mov r8, r8)
 800afc4:	46bd      	mov	sp, r7
 800afc6:	b006      	add	sp, #24
 800afc8:	bd80      	pop	{r7, pc}

0800afca <LL_TIM_SetOnePulseMode>:
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b082      	sub	sp, #8
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, TIM_CR1_OPM, OnePulseMode);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2208      	movs	r2, #8
 800afda:	4393      	bics	r3, r2
 800afdc:	001a      	movs	r2, r3
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	601a      	str	r2, [r3, #0]
}
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	46bd      	mov	sp, r7
 800afea:	b002      	add	sp, #8
 800afec:	bd80      	pop	{r7, pc}

0800afee <LL_TIM_DisableARRPreload>:
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b082      	sub	sp, #8
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2280      	movs	r2, #128	; 0x80
 800affc:	4393      	bics	r3, r2
 800affe:	001a      	movs	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	601a      	str	r2, [r3, #0]
}
 800b004:	46c0      	nop			; (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b002      	add	sp, #8
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <LL_TIM_SetTriggerOutput>:
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2270      	movs	r2, #112	; 0x70
 800b01c:	4393      	bics	r3, r2
 800b01e:	001a      	movs	r2, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	431a      	orrs	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	605a      	str	r2, [r3, #4]
}
 800b028:	46c0      	nop			; (mov r8, r8)
 800b02a:	46bd      	mov	sp, r7
 800b02c:	b002      	add	sp, #8
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <LL_TIM_DisableMasterSlaveMode>:
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	2280      	movs	r2, #128	; 0x80
 800b03e:	4393      	bics	r3, r2
 800b040:	001a      	movs	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	609a      	str	r2, [r3, #8]
}
 800b046:	46c0      	nop			; (mov r8, r8)
 800b048:	46bd      	mov	sp, r7
 800b04a:	b002      	add	sp, #8
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <LL_APB1_GRP1_EnableClock+0x28>)
 800b05a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b05c:	4b06      	ldr	r3, [pc, #24]	; (800b078 <LL_APB1_GRP1_EnableClock+0x28>)
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	430a      	orrs	r2, r1
 800b062:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <LL_APB1_GRP1_EnableClock+0x28>)
 800b066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4013      	ands	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b06e:	68fb      	ldr	r3, [r7, #12]
}
 800b070:	46c0      	nop			; (mov r8, r8)
 800b072:	46bd      	mov	sp, r7
 800b074:	b004      	add	sp, #16
 800b076:	bd80      	pop	{r7, pc}
 800b078:	40021000 	.word	0x40021000

0800b07c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_ADC
  * @note (*) peripheral not available on all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <LL_APB2_GRP1_EnableClock+0x28>)
 800b086:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b088:	4b06      	ldr	r3, [pc, #24]	; (800b0a4 <LL_APB2_GRP1_EnableClock+0x28>)
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <LL_APB2_GRP1_EnableClock+0x28>)
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4013      	ands	r3, r2
 800b098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	46c0      	nop			; (mov r8, r8)
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	b004      	add	sp, #16
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	40021000 	.word	0x40021000

0800b0a8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800b0b0:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <LL_IOP_GRP1_EnableClock+0x28>)
 800b0b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b0b4:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <LL_IOP_GRP1_EnableClock+0x28>)
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <LL_IOP_GRP1_EnableClock+0x28>)
 800b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
}
 800b0c8:	46c0      	nop			; (mov r8, r8)
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	b004      	add	sp, #16
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	40021000 	.word	0x40021000

0800b0d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b0d8:	f001 faac 	bl	800c634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b0dc:	f000 f832 	bl	800b144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b0e0:	f000 fcf0 	bl	800bac4 <MX_GPIO_Init>
  MX_DMA_Init();
 800b0e4:	f000 fcc2 	bl	800ba6c <MX_DMA_Init>
  MX_UCPD1_Init();
 800b0e8:	f000 fc1a 	bl	800b920 <MX_UCPD1_Init>
  MX_ADC1_Init();
 800b0ec:	f000 f88c 	bl	800b208 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800b0f0:	f000 f980 	bl	800b3f4 <MX_LPUART1_UART_Init>
  MX_TIM7_Init();
 800b0f4:	f000 fb58 	bl	800b7a8 <MX_TIM7_Init>
  MX_SPI2_Init();
 800b0f8:	f000 fa60 	bl	800b5bc <MX_SPI2_Init>
  MX_TIM3_Init();
 800b0fc:	f000 fa9c 	bl	800b638 <MX_TIM3_Init>
  MX_USB_Device_Init();
 800b100:	f015 fd8a 	bl	8020c18 <MX_USB_Device_Init>
  MX_DAC1_Init();
 800b104:	f000 f940 	bl	800b388 <MX_DAC1_Init>
  MX_TIM4_Init();
 800b108:	f000 fafa 	bl	800b700 <MX_TIM4_Init>
  MX_TIM14_Init();
 800b10c:	f000 fb8a 	bl	800b824 <MX_TIM14_Init>
  MX_TIM15_Init();
 800b110:	f000 fbc2 	bl	800b898 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 800b114:	f7fd fac4 	bl	80086a0 <app_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800b118:	f010 f872 	bl	801b200 <osKernelInitialize>
  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 800b11c:	f012 fe4a 	bl	801ddb4 <MX_USBPD_Init>
  //app_freertos_create();
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800b120:	4a05      	ldr	r2, [pc, #20]	; (800b138 <main+0x64>)
 800b122:	4b06      	ldr	r3, [pc, #24]	; (800b13c <main+0x68>)
 800b124:	2100      	movs	r1, #0
 800b126:	0018      	movs	r0, r3
 800b128:	f010 f8b2 	bl	801b290 <osThreadNew>
 800b12c:	0002      	movs	r2, r0
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <main+0x6c>)
 800b130:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800b132:	f010 f887 	bl	801b244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800b136:	e7fe      	b.n	800b136 <main+0x62>
 800b138:	0802af9c 	.word	0x0802af9c
 800b13c:	0800bd19 	.word	0x0800bd19
 800b140:	200009e8 	.word	0x200009e8

0800b144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b144:	b590      	push	{r4, r7, lr}
 800b146:	b095      	sub	sp, #84	; 0x54
 800b148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b14a:	2414      	movs	r4, #20
 800b14c:	193b      	adds	r3, r7, r4
 800b14e:	0018      	movs	r0, r3
 800b150:	233c      	movs	r3, #60	; 0x3c
 800b152:	001a      	movs	r2, r3
 800b154:	2100      	movs	r1, #0
 800b156:	f01c fc83 	bl	8027a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b15a:	1d3b      	adds	r3, r7, #4
 800b15c:	0018      	movs	r0, r3
 800b15e:	2310      	movs	r3, #16
 800b160:	001a      	movs	r2, r3
 800b162:	2100      	movs	r1, #0
 800b164:	f01c fc7c 	bl	8027a60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b168:	2380      	movs	r3, #128	; 0x80
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	0018      	movs	r0, r3
 800b16e:	f005 feb9 	bl	8010ee4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800b172:	193b      	adds	r3, r7, r4
 800b174:	2222      	movs	r2, #34	; 0x22
 800b176:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b178:	193b      	adds	r3, r7, r4
 800b17a:	2280      	movs	r2, #128	; 0x80
 800b17c:	0052      	lsls	r2, r2, #1
 800b17e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800b180:	193b      	adds	r3, r7, r4
 800b182:	2280      	movs	r2, #128	; 0x80
 800b184:	03d2      	lsls	r2, r2, #15
 800b186:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800b188:	0021      	movs	r1, r4
 800b18a:	187b      	adds	r3, r7, r1
 800b18c:	2200      	movs	r2, #0
 800b18e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b190:	187b      	adds	r3, r7, r1
 800b192:	2240      	movs	r2, #64	; 0x40
 800b194:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b196:	187b      	adds	r3, r7, r1
 800b198:	2202      	movs	r2, #2
 800b19a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b19c:	187b      	adds	r3, r7, r1
 800b19e:	2202      	movs	r2, #2
 800b1a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800b1a2:	187b      	adds	r3, r7, r1
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800b1a8:	187b      	adds	r3, r7, r1
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b1ae:	187b      	adds	r3, r7, r1
 800b1b0:	2280      	movs	r2, #128	; 0x80
 800b1b2:	0292      	lsls	r2, r2, #10
 800b1b4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800b1b6:	187b      	adds	r3, r7, r1
 800b1b8:	2280      	movs	r2, #128	; 0x80
 800b1ba:	0492      	lsls	r2, r2, #18
 800b1bc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800b1be:	187b      	adds	r3, r7, r1
 800b1c0:	2280      	movs	r2, #128	; 0x80
 800b1c2:	0592      	lsls	r2, r2, #22
 800b1c4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b1c6:	187b      	adds	r3, r7, r1
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f005 fed7 	bl	8010f7c <HAL_RCC_OscConfig>
 800b1ce:	1e03      	subs	r3, r0, #0
 800b1d0:	d001      	beq.n	800b1d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800b1d2:	f000 fdc1 	bl	800bd58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b1d6:	1d3b      	adds	r3, r7, #4
 800b1d8:	2207      	movs	r2, #7
 800b1da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b1dc:	1d3b      	adds	r3, r7, #4
 800b1de:	2202      	movs	r2, #2
 800b1e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b1e2:	1d3b      	adds	r3, r7, #4
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b1e8:	1d3b      	adds	r3, r7, #4
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b1ee:	1d3b      	adds	r3, r7, #4
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f006 fa22 	bl	801163c <HAL_RCC_ClockConfig>
 800b1f8:	1e03      	subs	r3, r0, #0
 800b1fa:	d001      	beq.n	800b200 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800b1fc:	f000 fdac 	bl	800bd58 <Error_Handler>
  }
}
 800b200:	46c0      	nop			; (mov r8, r8)
 800b202:	46bd      	mov	sp, r7
 800b204:	b015      	add	sp, #84	; 0x54
 800b206:	bd90      	pop	{r4, r7, pc}

0800b208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08a      	sub	sp, #40	; 0x28
 800b20c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b20e:	231c      	movs	r3, #28
 800b210:	18fb      	adds	r3, r7, r3
 800b212:	0018      	movs	r0, r3
 800b214:	230c      	movs	r3, #12
 800b216:	001a      	movs	r2, r3
 800b218:	2100      	movs	r1, #0
 800b21a:	f01c fc21 	bl	8027a60 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800b21e:	1d3b      	adds	r3, r7, #4
 800b220:	0018      	movs	r0, r3
 800b222:	2318      	movs	r3, #24
 800b224:	001a      	movs	r2, r3
 800b226:	2100      	movs	r1, #0
 800b228:	f01c fc1a 	bl	8027a60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800b22c:	4b50      	ldr	r3, [pc, #320]	; (800b370 <MX_ADC1_Init+0x168>)
 800b22e:	4a51      	ldr	r2, [pc, #324]	; (800b374 <MX_ADC1_Init+0x16c>)
 800b230:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800b232:	4b4f      	ldr	r3, [pc, #316]	; (800b370 <MX_ADC1_Init+0x168>)
 800b234:	2280      	movs	r2, #128	; 0x80
 800b236:	05d2      	lsls	r2, r2, #23
 800b238:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800b23a:	4b4d      	ldr	r3, [pc, #308]	; (800b370 <MX_ADC1_Init+0x168>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b240:	4b4b      	ldr	r3, [pc, #300]	; (800b370 <MX_ADC1_Init+0x168>)
 800b242:	2200      	movs	r2, #0
 800b244:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800b246:	4b4a      	ldr	r3, [pc, #296]	; (800b370 <MX_ADC1_Init+0x168>)
 800b248:	2280      	movs	r2, #128	; 0x80
 800b24a:	0392      	lsls	r2, r2, #14
 800b24c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800b24e:	4b48      	ldr	r3, [pc, #288]	; (800b370 <MX_ADC1_Init+0x168>)
 800b250:	2208      	movs	r2, #8
 800b252:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800b254:	4b46      	ldr	r3, [pc, #280]	; (800b370 <MX_ADC1_Init+0x168>)
 800b256:	2200      	movs	r2, #0
 800b258:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800b25a:	4b45      	ldr	r3, [pc, #276]	; (800b370 <MX_ADC1_Init+0x168>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800b260:	4b43      	ldr	r3, [pc, #268]	; (800b370 <MX_ADC1_Init+0x168>)
 800b262:	2200      	movs	r2, #0
 800b264:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800b266:	4b42      	ldr	r3, [pc, #264]	; (800b370 <MX_ADC1_Init+0x168>)
 800b268:	2203      	movs	r2, #3
 800b26a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800b26c:	4b40      	ldr	r3, [pc, #256]	; (800b370 <MX_ADC1_Init+0x168>)
 800b26e:	2220      	movs	r2, #32
 800b270:	2100      	movs	r1, #0
 800b272:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800b274:	4b3e      	ldr	r3, [pc, #248]	; (800b370 <MX_ADC1_Init+0x168>)
 800b276:	22b0      	movs	r2, #176	; 0xb0
 800b278:	00d2      	lsls	r2, r2, #3
 800b27a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800b27c:	4b3c      	ldr	r3, [pc, #240]	; (800b370 <MX_ADC1_Init+0x168>)
 800b27e:	2280      	movs	r2, #128	; 0x80
 800b280:	00d2      	lsls	r2, r2, #3
 800b282:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800b284:	4b3a      	ldr	r3, [pc, #232]	; (800b370 <MX_ADC1_Init+0x168>)
 800b286:	222c      	movs	r2, #44	; 0x2c
 800b288:	2101      	movs	r1, #1
 800b28a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800b28c:	4b38      	ldr	r3, [pc, #224]	; (800b370 <MX_ADC1_Init+0x168>)
 800b28e:	2280      	movs	r2, #128	; 0x80
 800b290:	0152      	lsls	r2, r2, #5
 800b292:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800b294:	4b36      	ldr	r3, [pc, #216]	; (800b370 <MX_ADC1_Init+0x168>)
 800b296:	2207      	movs	r2, #7
 800b298:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 800b29a:	4b35      	ldr	r3, [pc, #212]	; (800b370 <MX_ADC1_Init+0x168>)
 800b29c:	2207      	movs	r2, #7
 800b29e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800b2a0:	4b33      	ldr	r3, [pc, #204]	; (800b370 <MX_ADC1_Init+0x168>)
 800b2a2:	223c      	movs	r2, #60	; 0x3c
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800b2a8:	4b31      	ldr	r3, [pc, #196]	; (800b370 <MX_ADC1_Init+0x168>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800b2ae:	4b30      	ldr	r3, [pc, #192]	; (800b370 <MX_ADC1_Init+0x168>)
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f001 fc6d 	bl	800cb90 <HAL_ADC_Init>
 800b2b6:	1e03      	subs	r3, r0, #0
 800b2b8:	d001      	beq.n	800b2be <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800b2ba:	f000 fd4d 	bl	800bd58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800b2be:	211c      	movs	r1, #28
 800b2c0:	187b      	adds	r3, r7, r1
 800b2c2:	4a2d      	ldr	r2, [pc, #180]	; (800b378 <MX_ADC1_Init+0x170>)
 800b2c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800b2c6:	187b      	adds	r3, r7, r1
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800b2cc:	187b      	adds	r3, r7, r1
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b2d2:	187a      	adds	r2, r7, r1
 800b2d4:	4b26      	ldr	r3, [pc, #152]	; (800b370 <MX_ADC1_Init+0x168>)
 800b2d6:	0011      	movs	r1, r2
 800b2d8:	0018      	movs	r0, r3
 800b2da:	f001 ffbf 	bl	800d25c <HAL_ADC_ConfigChannel>
 800b2de:	1e03      	subs	r3, r0, #0
 800b2e0:	d001      	beq.n	800b2e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800b2e2:	f000 fd39 	bl	800bd58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800b2e6:	211c      	movs	r1, #28
 800b2e8:	187b      	adds	r3, r7, r1
 800b2ea:	4a24      	ldr	r2, [pc, #144]	; (800b37c <MX_ADC1_Init+0x174>)
 800b2ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b2f4:	187a      	adds	r2, r7, r1
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <MX_ADC1_Init+0x168>)
 800b2f8:	0011      	movs	r1, r2
 800b2fa:	0018      	movs	r0, r3
 800b2fc:	f001 ffae 	bl	800d25c <HAL_ADC_ConfigChannel>
 800b300:	1e03      	subs	r3, r0, #0
 800b302:	d001      	beq.n	800b308 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800b304:	f000 fd28 	bl	800bd58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800b308:	211c      	movs	r1, #28
 800b30a:	187b      	adds	r3, r7, r1
 800b30c:	4a1c      	ldr	r2, [pc, #112]	; (800b380 <MX_ADC1_Init+0x178>)
 800b30e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800b310:	187b      	adds	r3, r7, r1
 800b312:	2208      	movs	r2, #8
 800b314:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800b316:	187a      	adds	r2, r7, r1
 800b318:	4b15      	ldr	r3, [pc, #84]	; (800b370 <MX_ADC1_Init+0x168>)
 800b31a:	0011      	movs	r1, r2
 800b31c:	0018      	movs	r0, r3
 800b31e:	f001 ff9d 	bl	800d25c <HAL_ADC_ConfigChannel>
 800b322:	1e03      	subs	r3, r0, #0
 800b324:	d001      	beq.n	800b32a <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800b326:	f000 fd17 	bl	800bd58 <Error_Handler>
  }

  /** Configure the regular channel to be monitored by WatchDog 2 or 3
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_2;
 800b32a:	1d3b      	adds	r3, r7, #4
 800b32c:	4a15      	ldr	r2, [pc, #84]	; (800b384 <MX_ADC1_Init+0x17c>)
 800b32e:	601a      	str	r2, [r3, #0]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800b330:	1d3b      	adds	r3, r7, #4
 800b332:	22c0      	movs	r2, #192	; 0xc0
 800b334:	0412      	lsls	r2, r2, #16
 800b336:	605a      	str	r2, [r3, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_7;
 800b338:	1d3b      	adds	r3, r7, #4
 800b33a:	4a11      	ldr	r2, [pc, #68]	; (800b380 <MX_ADC1_Init+0x178>)
 800b33c:	609a      	str	r2, [r3, #8]
  AnalogWDGConfig.ITMode = ENABLE;
 800b33e:	1d3b      	adds	r3, r7, #4
 800b340:	2201      	movs	r2, #1
 800b342:	731a      	strb	r2, [r3, #12]
  AnalogWDGConfig.HighThreshold = 1000;
 800b344:	1d3b      	adds	r3, r7, #4
 800b346:	22fa      	movs	r2, #250	; 0xfa
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	611a      	str	r2, [r3, #16]
  AnalogWDGConfig.LowThreshold = 0;
 800b34c:	1d3b      	adds	r3, r7, #4
 800b34e:	2200      	movs	r2, #0
 800b350:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800b352:	1d3a      	adds	r2, r7, #4
 800b354:	4b06      	ldr	r3, [pc, #24]	; (800b370 <MX_ADC1_Init+0x168>)
 800b356:	0011      	movs	r1, r2
 800b358:	0018      	movs	r0, r3
 800b35a:	f002 f957 	bl	800d60c <HAL_ADC_AnalogWDGConfig>
 800b35e:	1e03      	subs	r3, r0, #0
 800b360:	d001      	beq.n	800b366 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800b362:	f000 fcf9 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	46bd      	mov	sp, r7
 800b36a:	b00a      	add	sp, #40	; 0x28
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	46c0      	nop			; (mov r8, r8)
 800b370:	200007c8 	.word	0x200007c8
 800b374:	40012400 	.word	0x40012400
 800b378:	14000020 	.word	0x14000020
 800b37c:	18000040 	.word	0x18000040
 800b380:	1c000080 	.word	0x1c000080
 800b384:	0017ffff 	.word	0x0017ffff

0800b388 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	; 0x28
 800b38c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800b38e:	1d3b      	adds	r3, r7, #4
 800b390:	0018      	movs	r0, r3
 800b392:	2324      	movs	r3, #36	; 0x24
 800b394:	001a      	movs	r2, r3
 800b396:	2100      	movs	r1, #0
 800b398:	f01c fb62 	bl	8027a60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800b39c:	4b13      	ldr	r3, [pc, #76]	; (800b3ec <MX_DAC1_Init+0x64>)
 800b39e:	4a14      	ldr	r2, [pc, #80]	; (800b3f0 <MX_DAC1_Init+0x68>)
 800b3a0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800b3a2:	4b12      	ldr	r3, [pc, #72]	; (800b3ec <MX_DAC1_Init+0x64>)
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f002 ffbc 	bl	800e322 <HAL_DAC_Init>
 800b3aa:	1e03      	subs	r3, r0, #0
 800b3ac:	d001      	beq.n	800b3b2 <MX_DAC1_Init+0x2a>
  {
    Error_Handler();
 800b3ae:	f000 fcd3 	bl	800bd58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800b3b2:	1d3b      	adds	r3, r7, #4
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800b3b8:	1d3b      	adds	r3, r7, #4
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	605a      	str	r2, [r3, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800b3be:	1d3b      	adds	r3, r7, #4
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	609a      	str	r2, [r3, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800b3c4:	1d3b      	adds	r3, r7, #4
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	60da      	str	r2, [r3, #12]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800b3ca:	1d3b      	adds	r3, r7, #4
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	611a      	str	r2, [r3, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800b3d0:	1d39      	adds	r1, r7, #4
 800b3d2:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <MX_DAC1_Init+0x64>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f003 f8a8 	bl	800e52c <HAL_DAC_ConfigChannel>
 800b3dc:	1e03      	subs	r3, r0, #0
 800b3de:	d001      	beq.n	800b3e4 <MX_DAC1_Init+0x5c>
  {
    Error_Handler();
 800b3e0:	f000 fcba 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800b3e4:	46c0      	nop			; (mov r8, r8)
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	b00a      	add	sp, #40	; 0x28
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	2000088c 	.word	0x2000088c
 800b3f0:	40007400 	.word	0x40007400

0800b3f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b0a1      	sub	sp, #132	; 0x84
 800b3f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800b3fa:	2364      	movs	r3, #100	; 0x64
 800b3fc:	18fb      	adds	r3, r7, r3
 800b3fe:	0018      	movs	r0, r3
 800b400:	231c      	movs	r3, #28
 800b402:	001a      	movs	r2, r3
 800b404:	2100      	movs	r1, #0
 800b406:	f01c fb2b 	bl	8027a60 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b40a:	234c      	movs	r3, #76	; 0x4c
 800b40c:	18fb      	adds	r3, r7, r3
 800b40e:	0018      	movs	r0, r3
 800b410:	2318      	movs	r3, #24
 800b412:	001a      	movs	r2, r3
 800b414:	2100      	movs	r1, #0
 800b416:	f01c fb23 	bl	8027a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b41a:	003b      	movs	r3, r7
 800b41c:	0018      	movs	r0, r3
 800b41e:	234c      	movs	r3, #76	; 0x4c
 800b420:	001a      	movs	r2, r3
 800b422:	2100      	movs	r1, #0
 800b424:	f01c fb1c 	bl	8027a60 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800b428:	003b      	movs	r3, r7
 800b42a:	2210      	movs	r2, #16
 800b42c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800b42e:	003b      	movs	r3, r7
 800b430:	2200      	movs	r2, #0
 800b432:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b434:	003b      	movs	r3, r7
 800b436:	0018      	movs	r0, r3
 800b438:	f006 fad2 	bl	80119e0 <HAL_RCCEx_PeriphCLKConfig>
 800b43c:	1e03      	subs	r3, r0, #0
 800b43e:	d001      	beq.n	800b444 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800b440:	f000 fc8a 	bl	800bd58 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_LPUART1);
 800b444:	2380      	movs	r3, #128	; 0x80
 800b446:	035b      	lsls	r3, r3, #13
 800b448:	0018      	movs	r0, r3
 800b44a:	f7ff fe01 	bl	800b050 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800b44e:	2001      	movs	r0, #1
 800b450:	f7ff fe2a 	bl	800b0a8 <LL_IOP_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800b454:	244c      	movs	r4, #76	; 0x4c
 800b456:	193b      	adds	r3, r7, r4
 800b458:	2204      	movs	r2, #4
 800b45a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b45c:	193b      	adds	r3, r7, r4
 800b45e:	2202      	movs	r2, #2
 800b460:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800b462:	193b      	adds	r3, r7, r4
 800b464:	2200      	movs	r2, #0
 800b466:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b468:	193b      	adds	r3, r7, r4
 800b46a:	2200      	movs	r2, #0
 800b46c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b46e:	193b      	adds	r3, r7, r4
 800b470:	2200      	movs	r2, #0
 800b472:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b474:	193b      	adds	r3, r7, r4
 800b476:	2206      	movs	r2, #6
 800b478:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b47a:	193a      	adds	r2, r7, r4
 800b47c:	23a0      	movs	r3, #160	; 0xa0
 800b47e:	05db      	lsls	r3, r3, #23
 800b480:	0011      	movs	r1, r2
 800b482:	0018      	movs	r0, r3
 800b484:	f008 f8ea 	bl	801365c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800b488:	0021      	movs	r1, r4
 800b48a:	187b      	adds	r3, r7, r1
 800b48c:	2208      	movs	r2, #8
 800b48e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800b490:	187b      	adds	r3, r7, r1
 800b492:	2202      	movs	r2, #2
 800b494:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800b496:	187b      	adds	r3, r7, r1
 800b498:	2200      	movs	r2, #0
 800b49a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800b49c:	187b      	adds	r3, r7, r1
 800b49e:	2200      	movs	r2, #0
 800b4a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b4a2:	187b      	adds	r3, r7, r1
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800b4a8:	187b      	adds	r3, r7, r1
 800b4aa:	2206      	movs	r2, #6
 800b4ac:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4ae:	187a      	adds	r2, r7, r1
 800b4b0:	23a0      	movs	r3, #160	; 0xa0
 800b4b2:	05db      	lsls	r3, r3, #23
 800b4b4:	0011      	movs	r1, r2
 800b4b6:	0018      	movs	r0, r3
 800b4b8:	f008 f8d0 	bl	801365c <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_LPUART1_TX);
 800b4bc:	4b3d      	ldr	r3, [pc, #244]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4be:	220f      	movs	r2, #15
 800b4c0:	2102      	movs	r1, #2
 800b4c2:	0018      	movs	r0, r3
 800b4c4:	f7ff fca6 	bl	800ae14 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800b4c8:	4b3a      	ldr	r3, [pc, #232]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4ca:	2210      	movs	r2, #16
 800b4cc:	2102      	movs	r1, #2
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f7ff fb9c 	bl	800ac0c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800b4d4:	4b37      	ldr	r3, [pc, #220]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2102      	movs	r1, #2
 800b4da:	0018      	movs	r0, r3
 800b4dc:	f7ff fc74 	bl	800adc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800b4e0:	4b34      	ldr	r3, [pc, #208]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2102      	movs	r1, #2
 800b4e6:	0018      	movs	r0, r3
 800b4e8:	f7ff fbb6 	bl	800ac58 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800b4ec:	4b31      	ldr	r3, [pc, #196]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2102      	movs	r1, #2
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	f7ff fbd4 	bl	800aca0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800b4f8:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b4fa:	2280      	movs	r2, #128	; 0x80
 800b4fc:	2102      	movs	r1, #2
 800b4fe:	0018      	movs	r0, r3
 800b500:	f7ff fbf2 	bl	800ace8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800b504:	4b2b      	ldr	r3, [pc, #172]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b506:	2200      	movs	r2, #0
 800b508:	2102      	movs	r1, #2
 800b50a:	0018      	movs	r0, r3
 800b50c:	f7ff fc10 	bl	800ad30 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 800b510:	4b28      	ldr	r3, [pc, #160]	; (800b5b4 <MX_LPUART1_UART_Init+0x1c0>)
 800b512:	2200      	movs	r2, #0
 800b514:	2102      	movs	r1, #2
 800b516:	0018      	movs	r0, r3
 800b518:	f7ff fc30 	bl	800ad7c <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 3);
 800b51c:	2103      	movs	r1, #3
 800b51e:	201d      	movs	r0, #29
 800b520:	f7ff fb06 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 800b524:	201d      	movs	r0, #29
 800b526:	f7ff fae9 	bl	800aafc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 800b52a:	2164      	movs	r1, #100	; 0x64
 800b52c:	187b      	adds	r3, r7, r1
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
  LPUART_InitStruct.BaudRate = 921600;
 800b532:	187b      	adds	r3, r7, r1
 800b534:	22e1      	movs	r2, #225	; 0xe1
 800b536:	0312      	lsls	r2, r2, #12
 800b538:	605a      	str	r2, [r3, #4]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 800b53a:	187b      	adds	r3, r7, r1
 800b53c:	2280      	movs	r2, #128	; 0x80
 800b53e:	0552      	lsls	r2, r2, #21
 800b540:	609a      	str	r2, [r3, #8]
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800b542:	187b      	adds	r3, r7, r1
 800b544:	2200      	movs	r2, #0
 800b546:	60da      	str	r2, [r3, #12]
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800b548:	187b      	adds	r3, r7, r1
 800b54a:	2200      	movs	r2, #0
 800b54c:	611a      	str	r2, [r3, #16]
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 800b54e:	187b      	adds	r3, r7, r1
 800b550:	220c      	movs	r2, #12
 800b552:	615a      	str	r2, [r3, #20]
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800b554:	187b      	adds	r3, r7, r1
 800b556:	2200      	movs	r2, #0
 800b558:	619a      	str	r2, [r3, #24]
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800b55a:	187b      	adds	r3, r7, r1
 800b55c:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b55e:	0019      	movs	r1, r3
 800b560:	0010      	movs	r0, r2
 800b562:	f008 f963 	bl	801382c <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 800b566:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b568:	2100      	movs	r1, #0
 800b56a:	0018      	movs	r0, r3
 800b56c:	f7ff fc9c 	bl	800aea8 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 800b570:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b572:	2100      	movs	r1, #0
 800b574:	0018      	movs	r0, r3
 800b576:	f7ff fcbb 	bl	800aef0 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 800b57a:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b57c:	0018      	movs	r0, r3
 800b57e:	f7ff fc83 	bl	800ae88 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800b582:	4b0d      	ldr	r3, [pc, #52]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b584:	0018      	movs	r0, r3
 800b586:	f7ff fc71 	bl	800ae6c <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 800b58a:	46c0      	nop			; (mov r8, r8)
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b58e:	0018      	movs	r0, r3
 800b590:	f7ff fcd4 	bl	800af3c <LL_LPUART_IsActiveFlag_TEACK>
 800b594:	1e03      	subs	r3, r0, #0
 800b596:	d0f9      	beq.n	800b58c <MX_LPUART1_UART_Init+0x198>
 800b598:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b59a:	0018      	movs	r0, r3
 800b59c:	f7ff fce2 	bl	800af64 <LL_LPUART_IsActiveFlag_REACK>
 800b5a0:	1e03      	subs	r3, r0, #0
 800b5a2:	d0f3      	beq.n	800b58c <MX_LPUART1_UART_Init+0x198>
  {
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE_RXFNE(LPUART1);
 800b5a4:	4b04      	ldr	r3, [pc, #16]	; (800b5b8 <MX_LPUART1_UART_Init+0x1c4>)
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	f7ff fcf0 	bl	800af8c <LL_LPUART_EnableIT_RXNE_RXFNE>
  /* USER CODE END LPUART1_Init 2 */

}
 800b5ac:	46c0      	nop			; (mov r8, r8)
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	b021      	add	sp, #132	; 0x84
 800b5b2:	bd90      	pop	{r4, r7, pc}
 800b5b4:	40020000 	.word	0x40020000
 800b5b8:	40008000 	.word	0x40008000

0800b5bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800b5c0:	4b1b      	ldr	r3, [pc, #108]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5c2:	4a1c      	ldr	r2, [pc, #112]	; (800b634 <MX_SPI2_Init+0x78>)
 800b5c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b5c6:	4b1a      	ldr	r3, [pc, #104]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5c8:	2282      	movs	r2, #130	; 0x82
 800b5ca:	0052      	lsls	r2, r2, #1
 800b5cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b5ce:	4b18      	ldr	r3, [pc, #96]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b5d4:	4b16      	ldr	r3, [pc, #88]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5d6:	22e0      	movs	r2, #224	; 0xe0
 800b5d8:	00d2      	lsls	r2, r2, #3
 800b5da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b5dc:	4b14      	ldr	r3, [pc, #80]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b5e2:	4b13      	ldr	r3, [pc, #76]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b5e8:	4b11      	ldr	r3, [pc, #68]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5ea:	2280      	movs	r2, #128	; 0x80
 800b5ec:	0092      	lsls	r2, r2, #2
 800b5ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800b5f0:	4b0f      	ldr	r3, [pc, #60]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b5f6:	4b0e      	ldr	r3, [pc, #56]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b5fc:	4b0c      	ldr	r3, [pc, #48]	; (800b630 <MX_SPI2_Init+0x74>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b602:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <MX_SPI2_Init+0x74>)
 800b604:	2200      	movs	r2, #0
 800b606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800b608:	4b09      	ldr	r3, [pc, #36]	; (800b630 <MX_SPI2_Init+0x74>)
 800b60a:	2207      	movs	r2, #7
 800b60c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b60e:	4b08      	ldr	r3, [pc, #32]	; (800b630 <MX_SPI2_Init+0x74>)
 800b610:	2200      	movs	r2, #0
 800b612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b614:	4b06      	ldr	r3, [pc, #24]	; (800b630 <MX_SPI2_Init+0x74>)
 800b616:	2208      	movs	r2, #8
 800b618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b61a:	4b05      	ldr	r3, [pc, #20]	; (800b630 <MX_SPI2_Init+0x74>)
 800b61c:	0018      	movs	r0, r3
 800b61e:	f006 fc1b 	bl	8011e58 <HAL_SPI_Init>
 800b622:	1e03      	subs	r3, r0, #0
 800b624:	d001      	beq.n	800b62a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800b626:	f000 fb97 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	200008a0 	.word	0x200008a0
 800b634:	40003800 	.word	0x40003800

0800b638 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b08d      	sub	sp, #52	; 0x34
 800b63c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b63e:	240c      	movs	r4, #12
 800b640:	193b      	adds	r3, r7, r4
 800b642:	0018      	movs	r0, r3
 800b644:	2324      	movs	r3, #36	; 0x24
 800b646:	001a      	movs	r2, r3
 800b648:	2100      	movs	r1, #0
 800b64a:	f01c fa09 	bl	8027a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b64e:	003b      	movs	r3, r7
 800b650:	0018      	movs	r0, r3
 800b652:	230c      	movs	r3, #12
 800b654:	001a      	movs	r2, r3
 800b656:	2100      	movs	r1, #0
 800b658:	f01c fa02 	bl	8027a60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b65c:	4b25      	ldr	r3, [pc, #148]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b65e:	4a26      	ldr	r2, [pc, #152]	; (800b6f8 <MX_TIM3_Init+0xc0>)
 800b660:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b662:	4b24      	ldr	r3, [pc, #144]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b664:	2200      	movs	r2, #0
 800b666:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b668:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b66e:	4b21      	ldr	r3, [pc, #132]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b670:	4a22      	ldr	r2, [pc, #136]	; (800b6fc <MX_TIM3_Init+0xc4>)
 800b672:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b674:	4b1f      	ldr	r3, [pc, #124]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b676:	2200      	movs	r2, #0
 800b678:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800b67a:	4b1e      	ldr	r3, [pc, #120]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b67c:	2280      	movs	r2, #128	; 0x80
 800b67e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800b680:	0021      	movs	r1, r4
 800b682:	187b      	adds	r3, r7, r1
 800b684:	2203      	movs	r2, #3
 800b686:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b688:	187b      	adds	r3, r7, r1
 800b68a:	2200      	movs	r2, #0
 800b68c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b68e:	187b      	adds	r3, r7, r1
 800b690:	2201      	movs	r2, #1
 800b692:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b694:	187b      	adds	r3, r7, r1
 800b696:	2200      	movs	r2, #0
 800b698:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 12;
 800b69a:	187b      	adds	r3, r7, r1
 800b69c:	220c      	movs	r2, #12
 800b69e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b6a0:	187b      	adds	r3, r7, r1
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b6a6:	187b      	adds	r3, r7, r1
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b6ac:	187b      	adds	r3, r7, r1
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 12;
 800b6b2:	187b      	adds	r3, r7, r1
 800b6b4:	220c      	movs	r2, #12
 800b6b6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800b6b8:	187a      	adds	r2, r7, r1
 800b6ba:	4b0e      	ldr	r3, [pc, #56]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b6bc:	0011      	movs	r1, r2
 800b6be:	0018      	movs	r0, r3
 800b6c0:	f007 f8be 	bl	8012840 <HAL_TIM_Encoder_Init>
 800b6c4:	1e03      	subs	r3, r0, #0
 800b6c6:	d001      	beq.n	800b6cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800b6c8:	f000 fb46 	bl	800bd58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b6cc:	003b      	movs	r3, r7
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b6d2:	003b      	movs	r3, r7
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b6d8:	003a      	movs	r2, r7
 800b6da:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <MX_TIM3_Init+0xbc>)
 800b6dc:	0011      	movs	r1, r2
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f007 fd68 	bl	80131b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b6e4:	1e03      	subs	r3, r0, #0
 800b6e6:	d001      	beq.n	800b6ec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800b6e8:	f000 fb36 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800b6ec:	46c0      	nop			; (mov r8, r8)
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	b00d      	add	sp, #52	; 0x34
 800b6f2:	bd90      	pop	{r4, r7, pc}
 800b6f4:	20000904 	.word	0x20000904
 800b6f8:	40000400 	.word	0x40000400
 800b6fc:	0000ffff 	.word	0x0000ffff

0800b700 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b706:	2310      	movs	r3, #16
 800b708:	18fb      	adds	r3, r7, r3
 800b70a:	0018      	movs	r0, r3
 800b70c:	2310      	movs	r3, #16
 800b70e:	001a      	movs	r2, r3
 800b710:	2100      	movs	r1, #0
 800b712:	f01c f9a5 	bl	8027a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b716:	1d3b      	adds	r3, r7, #4
 800b718:	0018      	movs	r0, r3
 800b71a:	230c      	movs	r3, #12
 800b71c:	001a      	movs	r2, r3
 800b71e:	2100      	movs	r1, #0
 800b720:	f01c f99e 	bl	8027a60 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b724:	4b1e      	ldr	r3, [pc, #120]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b726:	4a1f      	ldr	r2, [pc, #124]	; (800b7a4 <MX_TIM4_Init+0xa4>)
 800b728:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 800b72a:	4b1d      	ldr	r3, [pc, #116]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b72c:	223f      	movs	r2, #63	; 0x3f
 800b72e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b730:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b732:	2200      	movs	r2, #0
 800b734:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800b736:	4b1a      	ldr	r3, [pc, #104]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b738:	2263      	movs	r2, #99	; 0x63
 800b73a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b73c:	4b18      	ldr	r3, [pc, #96]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b73e:	2200      	movs	r2, #0
 800b740:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b742:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b744:	2200      	movs	r2, #0
 800b746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b748:	4b15      	ldr	r3, [pc, #84]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b74a:	0018      	movs	r0, r3
 800b74c:	f006 ff12 	bl	8012574 <HAL_TIM_Base_Init>
 800b750:	1e03      	subs	r3, r0, #0
 800b752:	d001      	beq.n	800b758 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800b754:	f000 fb00 	bl	800bd58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b758:	2110      	movs	r1, #16
 800b75a:	187b      	adds	r3, r7, r1
 800b75c:	2280      	movs	r2, #128	; 0x80
 800b75e:	0152      	lsls	r2, r2, #5
 800b760:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b762:	187a      	adds	r2, r7, r1
 800b764:	4b0e      	ldr	r3, [pc, #56]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b766:	0011      	movs	r1, r2
 800b768:	0018      	movs	r0, r3
 800b76a:	f007 fadd 	bl	8012d28 <HAL_TIM_ConfigClockSource>
 800b76e:	1e03      	subs	r3, r0, #0
 800b770:	d001      	beq.n	800b776 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800b772:	f000 faf1 	bl	800bd58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b776:	1d3b      	adds	r3, r7, #4
 800b778:	2220      	movs	r2, #32
 800b77a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b77c:	1d3b      	adds	r3, r7, #4
 800b77e:	2200      	movs	r2, #0
 800b780:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b782:	1d3a      	adds	r2, r7, #4
 800b784:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <MX_TIM4_Init+0xa0>)
 800b786:	0011      	movs	r1, r2
 800b788:	0018      	movs	r0, r3
 800b78a:	f007 fd13 	bl	80131b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b78e:	1e03      	subs	r3, r0, #0
 800b790:	d001      	beq.n	800b796 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800b792:	f000 fae1 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b796:	46c0      	nop			; (mov r8, r8)
 800b798:	46bd      	mov	sp, r7
 800b79a:	b008      	add	sp, #32
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	20000950 	.word	0x20000950
 800b7a4:	40000800 	.word	0x40000800

0800b7a8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800b7ae:	1d3b      	adds	r3, r7, #4
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	2314      	movs	r3, #20
 800b7b4:	001a      	movs	r2, r3
 800b7b6:	2100      	movs	r1, #0
 800b7b8:	f01c f952 	bl	8027a60 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800b7bc:	2020      	movs	r0, #32
 800b7be:	f7ff fc47 	bl	800b050 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_LPTIM2_IRQn, 3);
 800b7c2:	2103      	movs	r1, #3
 800b7c4:	2012      	movs	r0, #18
 800b7c6:	f7ff f9b3 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 800b7ca:	2012      	movs	r0, #18
 800b7cc:	f7ff f996 	bl	800aafc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 800b7d0:	1d3b      	adds	r3, r7, #4
 800b7d2:	4a12      	ldr	r2, [pc, #72]	; (800b81c <MX_TIM7_Init+0x74>)
 800b7d4:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800b7d6:	1d3b      	adds	r3, r7, #4
 800b7d8:	2200      	movs	r2, #0
 800b7da:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 200;
 800b7dc:	1d3b      	adds	r3, r7, #4
 800b7de:	22c8      	movs	r2, #200	; 0xc8
 800b7e0:	609a      	str	r2, [r3, #8]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800b7e2:	1d3b      	adds	r3, r7, #4
 800b7e4:	4a0e      	ldr	r2, [pc, #56]	; (800b820 <MX_TIM7_Init+0x78>)
 800b7e6:	0019      	movs	r1, r3
 800b7e8:	0010      	movs	r0, r2
 800b7ea:	f008 fa6d 	bl	8013cc8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 800b7ee:	4b0c      	ldr	r3, [pc, #48]	; (800b820 <MX_TIM7_Init+0x78>)
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	f7ff fbfc 	bl	800afee <LL_TIM_DisableARRPreload>
  LL_TIM_SetOnePulseMode(TIM7, LL_TIM_ONEPULSEMODE_SINGLE);
 800b7f6:	4b0a      	ldr	r3, [pc, #40]	; (800b820 <MX_TIM7_Init+0x78>)
 800b7f8:	2108      	movs	r1, #8
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f7ff fbe5 	bl	800afca <LL_TIM_SetOnePulseMode>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800b800:	4b07      	ldr	r3, [pc, #28]	; (800b820 <MX_TIM7_Init+0x78>)
 800b802:	2100      	movs	r1, #0
 800b804:	0018      	movs	r0, r3
 800b806:	f7ff fc01 	bl	800b00c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 800b80a:	4b05      	ldr	r3, [pc, #20]	; (800b820 <MX_TIM7_Init+0x78>)
 800b80c:	0018      	movs	r0, r3
 800b80e:	f7ff fc0f 	bl	800b030 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b812:	46c0      	nop			; (mov r8, r8)
 800b814:	46bd      	mov	sp, r7
 800b816:	b006      	add	sp, #24
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	46c0      	nop			; (mov r8, r8)
 800b81c:	fffff9ff 	.word	0xfffff9ff
 800b820:	40001400 	.word	0x40001400

0800b824 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b086      	sub	sp, #24
 800b828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800b82a:	1d3b      	adds	r3, r7, #4
 800b82c:	0018      	movs	r0, r3
 800b82e:	2314      	movs	r3, #20
 800b830:	001a      	movs	r2, r3
 800b832:	2100      	movs	r1, #0
 800b834:	f01c f914 	bl	8027a60 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM14);
 800b838:	2380      	movs	r3, #128	; 0x80
 800b83a:	021b      	lsls	r3, r3, #8
 800b83c:	0018      	movs	r0, r3
 800b83e:	f7ff fc1d 	bl	800b07c <LL_APB2_GRP1_EnableClock>

  /* TIM14 interrupt Init */
  NVIC_SetPriority(TIM14_IRQn, 3);
 800b842:	2103      	movs	r1, #3
 800b844:	2013      	movs	r0, #19
 800b846:	f7ff f973 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM14_IRQn);
 800b84a:	2013      	movs	r0, #19
 800b84c:	f7ff f956 	bl	800aafc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  TIM_InitStruct.Prescaler = 63999;
 800b850:	1d3b      	adds	r3, r7, #4
 800b852:	4a0f      	ldr	r2, [pc, #60]	; (800b890 <MX_TIM14_Init+0x6c>)
 800b854:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800b856:	1d3b      	adds	r3, r7, #4
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 5;
 800b85c:	1d3b      	adds	r3, r7, #4
 800b85e:	2205      	movs	r2, #5
 800b860:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800b862:	1d3b      	adds	r3, r7, #4
 800b864:	2200      	movs	r2, #0
 800b866:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 800b868:	1d3b      	adds	r3, r7, #4
 800b86a:	4a0a      	ldr	r2, [pc, #40]	; (800b894 <MX_TIM14_Init+0x70>)
 800b86c:	0019      	movs	r1, r3
 800b86e:	0010      	movs	r0, r2
 800b870:	f008 fa2a 	bl	8013cc8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM14);
 800b874:	4b07      	ldr	r3, [pc, #28]	; (800b894 <MX_TIM14_Init+0x70>)
 800b876:	0018      	movs	r0, r3
 800b878:	f7ff fbb9 	bl	800afee <LL_TIM_DisableARRPreload>
  LL_TIM_SetOnePulseMode(TIM14, LL_TIM_ONEPULSEMODE_SINGLE);
 800b87c:	4b05      	ldr	r3, [pc, #20]	; (800b894 <MX_TIM14_Init+0x70>)
 800b87e:	2108      	movs	r1, #8
 800b880:	0018      	movs	r0, r3
 800b882:	f7ff fba2 	bl	800afca <LL_TIM_SetOnePulseMode>
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800b886:	46c0      	nop			; (mov r8, r8)
 800b888:	46bd      	mov	sp, r7
 800b88a:	b006      	add	sp, #24
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	fffff9ff 	.word	0xfffff9ff
 800b894:	40002000 	.word	0x40002000

0800b898 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b89e:	1d3b      	adds	r3, r7, #4
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	230c      	movs	r3, #12
 800b8a4:	001a      	movs	r2, r3
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	f01c f8da 	bl	8027a60 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800b8ac:	4b19      	ldr	r3, [pc, #100]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8ae:	4a1a      	ldr	r2, [pc, #104]	; (800b918 <MX_TIM15_Init+0x80>)
 800b8b0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64000-1;
 800b8b2:	4b18      	ldr	r3, [pc, #96]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8b4:	4a19      	ldr	r2, [pc, #100]	; (800b91c <MX_TIM15_Init+0x84>)
 800b8b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b8b8:	4b16      	ldr	r3, [pc, #88]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 800b8be:	4b15      	ldr	r3, [pc, #84]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8c0:	22fa      	movs	r2, #250	; 0xfa
 800b8c2:	0092      	lsls	r2, r2, #2
 800b8c4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b8c6:	4b13      	ldr	r3, [pc, #76]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800b8cc:	4b11      	ldr	r3, [pc, #68]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b8d2:	4b10      	ldr	r3, [pc, #64]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 800b8d8:	4b0e      	ldr	r3, [pc, #56]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8da:	2108      	movs	r1, #8
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f006 ff5d 	bl	801279c <HAL_TIM_OnePulse_Init>
 800b8e2:	1e03      	subs	r3, r0, #0
 800b8e4:	d001      	beq.n	800b8ea <MX_TIM15_Init+0x52>
  {
    Error_Handler();
 800b8e6:	f000 fa37 	bl	800bd58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8ea:	1d3b      	adds	r3, r7, #4
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8f0:	1d3b      	adds	r3, r7, #4
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800b8f6:	1d3a      	adds	r2, r7, #4
 800b8f8:	4b06      	ldr	r3, [pc, #24]	; (800b914 <MX_TIM15_Init+0x7c>)
 800b8fa:	0011      	movs	r1, r2
 800b8fc:	0018      	movs	r0, r3
 800b8fe:	f007 fc59 	bl	80131b4 <HAL_TIMEx_MasterConfigSynchronization>
 800b902:	1e03      	subs	r3, r0, #0
 800b904:	d001      	beq.n	800b90a <MX_TIM15_Init+0x72>
  {
    Error_Handler();
 800b906:	f000 fa27 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800b90a:	46c0      	nop			; (mov r8, r8)
 800b90c:	46bd      	mov	sp, r7
 800b90e:	b004      	add	sp, #16
 800b910:	bd80      	pop	{r7, pc}
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	2000099c 	.word	0x2000099c
 800b918:	40014000 	.word	0x40014000
 800b91c:	0000f9ff 	.word	0x0000f9ff

0800b920 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b086      	sub	sp, #24
 800b924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b926:	003b      	movs	r3, r7
 800b928:	0018      	movs	r0, r3
 800b92a:	2318      	movs	r3, #24
 800b92c:	001a      	movs	r2, r3
 800b92e:	2100      	movs	r1, #0
 800b930:	f01c f896 	bl	8027a60 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800b934:	2380      	movs	r3, #128	; 0x80
 800b936:	049b      	lsls	r3, r3, #18
 800b938:	0018      	movs	r0, r3
 800b93a:	f7ff fb89 	bl	800b050 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800b93e:	2002      	movs	r0, #2
 800b940:	f7ff fbb2 	bl	800b0a8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800b944:	2001      	movs	r0, #1
 800b946:	f7ff fbaf 	bl	800b0a8 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800b94a:	003b      	movs	r3, r7
 800b94c:	2280      	movs	r2, #128	; 0x80
 800b94e:	0212      	lsls	r2, r2, #8
 800b950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800b952:	003b      	movs	r3, r7
 800b954:	2203      	movs	r2, #3
 800b956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b958:	003b      	movs	r3, r7
 800b95a:	2200      	movs	r2, #0
 800b95c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b95e:	003b      	movs	r3, r7
 800b960:	4a40      	ldr	r2, [pc, #256]	; (800ba64 <MX_UCPD1_Init+0x144>)
 800b962:	0019      	movs	r1, r3
 800b964:	0010      	movs	r0, r2
 800b966:	f007 fe79 	bl	801365c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800b96a:	003b      	movs	r3, r7
 800b96c:	2280      	movs	r2, #128	; 0x80
 800b96e:	0052      	lsls	r2, r2, #1
 800b970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800b972:	003b      	movs	r3, r7
 800b974:	2203      	movs	r2, #3
 800b976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800b978:	003b      	movs	r3, r7
 800b97a:	2200      	movs	r2, #0
 800b97c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b97e:	003a      	movs	r2, r7
 800b980:	23a0      	movs	r3, #160	; 0xa0
 800b982:	05db      	lsls	r3, r3, #23
 800b984:	0011      	movs	r1, r2
 800b986:	0018      	movs	r0, r3
 800b988:	f007 fe68 	bl	801365c <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 800b98c:	4b36      	ldr	r3, [pc, #216]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b98e:	223a      	movs	r2, #58	; 0x3a
 800b990:	2100      	movs	r1, #0
 800b992:	0018      	movs	r0, r3
 800b994:	f7ff fa3e 	bl	800ae14 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800b998:	4b33      	ldr	r3, [pc, #204]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	2100      	movs	r1, #0
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7ff f934 	bl	800ac0c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800b9a4:	4b30      	ldr	r3, [pc, #192]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f7ff fa0c 	bl	800adc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800b9b0:	4b2d      	ldr	r3, [pc, #180]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	f7ff f94e 	bl	800ac58 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800b9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	f7ff f96c 	bl	800aca0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800b9c8:	4b27      	ldr	r3, [pc, #156]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9ca:	2280      	movs	r2, #128	; 0x80
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	0018      	movs	r0, r3
 800b9d0:	f7ff f98a 	bl	800ace8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 800b9d4:	4b24      	ldr	r3, [pc, #144]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2100      	movs	r1, #0
 800b9da:	0018      	movs	r0, r3
 800b9dc:	f7ff f9a8 	bl	800ad30 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800b9e0:	4b21      	ldr	r3, [pc, #132]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	0018      	movs	r0, r3
 800b9e8:	f7ff f9c8 	bl	800ad7c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 800b9ec:	4b1e      	ldr	r3, [pc, #120]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9ee:	223b      	movs	r2, #59	; 0x3b
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	0018      	movs	r0, r3
 800b9f4:	f7ff fa0e 	bl	800ae14 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800b9f8:	4b1b      	ldr	r3, [pc, #108]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800b9fa:	2210      	movs	r2, #16
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f7ff f904 	bl	800ac0c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800ba04:	4b18      	ldr	r3, [pc, #96]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	2101      	movs	r1, #1
 800ba0a:	0018      	movs	r0, r3
 800ba0c:	f7ff f9dc 	bl	800adc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 800ba10:	4b15      	ldr	r3, [pc, #84]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	2101      	movs	r1, #1
 800ba16:	0018      	movs	r0, r3
 800ba18:	f7ff f91e 	bl	800ac58 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800ba1c:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2101      	movs	r1, #1
 800ba22:	0018      	movs	r0, r3
 800ba24:	f7ff f93c 	bl	800aca0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800ba28:	4b0f      	ldr	r3, [pc, #60]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba2a:	2280      	movs	r2, #128	; 0x80
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	0018      	movs	r0, r3
 800ba30:	f7ff f95a 	bl	800ace8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800ba34:	4b0c      	ldr	r3, [pc, #48]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	2101      	movs	r1, #1
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f7ff f978 	bl	800ad30 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800ba40:	4b09      	ldr	r3, [pc, #36]	; (800ba68 <MX_UCPD1_Init+0x148>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	2101      	movs	r1, #1
 800ba46:	0018      	movs	r0, r3
 800ba48:	f7ff f998 	bl	800ad7c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 3);
 800ba4c:	2103      	movs	r1, #3
 800ba4e:	2008      	movs	r0, #8
 800ba50:	f7ff f86e 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800ba54:	2008      	movs	r0, #8
 800ba56:	f7ff f851 	bl	800aafc <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800ba5a:	46c0      	nop			; (mov r8, r8)
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	b006      	add	sp, #24
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	46c0      	nop			; (mov r8, r8)
 800ba64:	50000400 	.word	0x50000400
 800ba68:	40020000 	.word	0x40020000

0800ba6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ba72:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <MX_DMA_Init+0x54>)
 800ba74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <MX_DMA_Init+0x54>)
 800ba78:	2101      	movs	r1, #1
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	639a      	str	r2, [r3, #56]	; 0x38
 800ba7e:	4b10      	ldr	r3, [pc, #64]	; (800bac0 <MX_DMA_Init+0x54>)
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	2201      	movs	r2, #1
 800ba84:	4013      	ands	r3, r2
 800ba86:	607b      	str	r3, [r7, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 3);
 800ba8a:	2103      	movs	r1, #3
 800ba8c:	2009      	movs	r0, #9
 800ba8e:	f7ff f84f 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800ba92:	2009      	movs	r0, #9
 800ba94:	f7ff f832 	bl	800aafc <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3);
 800ba98:	2103      	movs	r1, #3
 800ba9a:	200a      	movs	r0, #10
 800ba9c:	f7ff f848 	bl	800ab30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800baa0:	200a      	movs	r0, #10
 800baa2:	f7ff f82b 	bl	800aafc <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 3, 0);
 800baa6:	2200      	movs	r2, #0
 800baa8:	2103      	movs	r1, #3
 800baaa:	200b      	movs	r0, #11
 800baac:	f002 fc10 	bl	800e2d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 800bab0:	200b      	movs	r0, #11
 800bab2:	f002 fc22 	bl	800e2fa <HAL_NVIC_EnableIRQ>

}
 800bab6:	46c0      	nop			; (mov r8, r8)
 800bab8:	46bd      	mov	sp, r7
 800baba:	b002      	add	sp, #8
 800babc:	bd80      	pop	{r7, pc}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	40021000 	.word	0x40021000

0800bac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800bac4:	b590      	push	{r4, r7, lr}
 800bac6:	b08b      	sub	sp, #44	; 0x2c
 800bac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baca:	2414      	movs	r4, #20
 800bacc:	193b      	adds	r3, r7, r4
 800bace:	0018      	movs	r0, r3
 800bad0:	2314      	movs	r3, #20
 800bad2:	001a      	movs	r2, r3
 800bad4:	2100      	movs	r1, #0
 800bad6:	f01b ffc3 	bl	8027a60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bada:	4b8a      	ldr	r3, [pc, #552]	; (800bd04 <MX_GPIO_Init+0x240>)
 800badc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bade:	4b89      	ldr	r3, [pc, #548]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bae0:	2101      	movs	r1, #1
 800bae2:	430a      	orrs	r2, r1
 800bae4:	635a      	str	r2, [r3, #52]	; 0x34
 800bae6:	4b87      	ldr	r3, [pc, #540]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baea:	2201      	movs	r2, #1
 800baec:	4013      	ands	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
 800baf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800baf2:	4b84      	ldr	r3, [pc, #528]	; (800bd04 <MX_GPIO_Init+0x240>)
 800baf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baf6:	4b83      	ldr	r3, [pc, #524]	; (800bd04 <MX_GPIO_Init+0x240>)
 800baf8:	2104      	movs	r1, #4
 800bafa:	430a      	orrs	r2, r1
 800bafc:	635a      	str	r2, [r3, #52]	; 0x34
 800bafe:	4b81      	ldr	r3, [pc, #516]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb02:	2204      	movs	r2, #4
 800bb04:	4013      	ands	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb0a:	4b7e      	ldr	r3, [pc, #504]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb0e:	4b7d      	ldr	r3, [pc, #500]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb10:	2102      	movs	r1, #2
 800bb12:	430a      	orrs	r2, r1
 800bb14:	635a      	str	r2, [r3, #52]	; 0x34
 800bb16:	4b7b      	ldr	r3, [pc, #492]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	60bb      	str	r3, [r7, #8]
 800bb20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bb22:	4b78      	ldr	r3, [pc, #480]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb26:	4b77      	ldr	r3, [pc, #476]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb28:	2108      	movs	r1, #8
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	635a      	str	r2, [r3, #52]	; 0x34
 800bb2e:	4b75      	ldr	r3, [pc, #468]	; (800bd04 <MX_GPIO_Init+0x240>)
 800bb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb32:	2208      	movs	r2, #8
 800bb34:	4013      	ands	r3, r2
 800bb36:	607b      	str	r3, [r7, #4]
 800bb38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_LOCK_Pin|RELAY_ON_OFF_Pin, GPIO_PIN_RESET);
 800bb3a:	2384      	movs	r3, #132	; 0x84
 800bb3c:	00db      	lsls	r3, r3, #3
 800bb3e:	4872      	ldr	r0, [pc, #456]	; (800bd08 <MX_GPIO_Init+0x244>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	0019      	movs	r1, r3
 800bb44:	f003 fbe8 	bl	800f318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB_OUT_Pin|CS_MAX7219_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 800bb48:	4970      	ldr	r1, [pc, #448]	; (800bd0c <MX_GPIO_Init+0x248>)
 800bb4a:	4b71      	ldr	r3, [pc, #452]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	0018      	movs	r0, r3
 800bb50:	f003 fbe2 	bl	800f318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OCP_RESET_GPIO_Port, OCP_RESET_Pin, GPIO_PIN_SET);
 800bb54:	2380      	movs	r3, #128	; 0x80
 800bb56:	005b      	lsls	r3, r3, #1
 800bb58:	486d      	ldr	r0, [pc, #436]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	0019      	movs	r1, r3
 800bb5e:	f003 fbdb 	bl	800f318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HighZ_Pin FLT_IN_TCPP_Pin */
  GPIO_InitStruct.Pin = HighZ_Pin|FLT_IN_TCPP_Pin;
 800bb62:	193b      	adds	r3, r7, r4
 800bb64:	2203      	movs	r2, #3
 800bb66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb6e:	193b      	adds	r3, r7, r4
 800bb70:	2200      	movs	r2, #0
 800bb72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb74:	193a      	adds	r2, r7, r4
 800bb76:	23a0      	movs	r3, #160	; 0xa0
 800bb78:	05db      	lsls	r3, r3, #23
 800bb7a:	0011      	movs	r1, r2
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	f003 fa5f 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_DEBUG_BTN_Pin */
  GPIO_InitStruct.Pin = SW2_DEBUG_BTN_Pin;
 800bb82:	0021      	movs	r1, r4
 800bb84:	187b      	adds	r3, r7, r1
 800bb86:	2210      	movs	r2, #16
 800bb88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bb8a:	187b      	adds	r3, r7, r1
 800bb8c:	22c4      	movs	r2, #196	; 0xc4
 800bb8e:	0392      	lsls	r2, r2, #14
 800bb90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb92:	000c      	movs	r4, r1
 800bb94:	193b      	adds	r3, r7, r4
 800bb96:	2201      	movs	r2, #1
 800bb98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW2_DEBUG_BTN_GPIO_Port, &GPIO_InitStruct);
 800bb9a:	193b      	adds	r3, r7, r4
 800bb9c:	4a5a      	ldr	r2, [pc, #360]	; (800bd08 <MX_GPIO_Init+0x244>)
 800bb9e:	0019      	movs	r1, r3
 800bba0:	0010      	movs	r0, r2
 800bba2:	f003 fa4d 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_LOCK_Pin */
  GPIO_InitStruct.Pin = LED_LOCK_Pin;
 800bba6:	193b      	adds	r3, r7, r4
 800bba8:	2220      	movs	r2, #32
 800bbaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbac:	193b      	adds	r3, r7, r4
 800bbae:	2201      	movs	r2, #1
 800bbb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbb2:	193b      	adds	r3, r7, r4
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbb8:	193b      	adds	r3, r7, r4
 800bbba:	2200      	movs	r2, #0
 800bbbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_LOCK_GPIO_Port, &GPIO_InitStruct);
 800bbbe:	193b      	adds	r3, r7, r4
 800bbc0:	4a51      	ldr	r2, [pc, #324]	; (800bd08 <MX_GPIO_Init+0x244>)
 800bbc2:	0019      	movs	r1, r3
 800bbc4:	0010      	movs	r0, r2
 800bbc6:	f003 fa3b 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB_OUT_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = DB_OUT_Pin|LED_USER_Pin;
 800bbca:	193b      	adds	r3, r7, r4
 800bbcc:	2221      	movs	r2, #33	; 0x21
 800bbce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbd0:	193b      	adds	r3, r7, r4
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbd6:	193b      	adds	r3, r7, r4
 800bbd8:	2201      	movs	r2, #1
 800bbda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbdc:	193b      	adds	r3, r7, r4
 800bbde:	2200      	movs	r2, #0
 800bbe0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbe2:	193b      	adds	r3, r7, r4
 800bbe4:	4a4a      	ldr	r2, [pc, #296]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	0010      	movs	r0, r2
 800bbea:	f003 fa29 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW3_OFF_ON_Pin OCP_ALERT_Pin OCP_ALERT2_Pin */
  GPIO_InitStruct.Pin = SW3_OFF_ON_Pin|OCP_ALERT_Pin|OCP_ALERT2_Pin;
 800bbee:	0021      	movs	r1, r4
 800bbf0:	187b      	adds	r3, r7, r1
 800bbf2:	22c2      	movs	r2, #194	; 0xc2
 800bbf4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bbf6:	187b      	adds	r3, r7, r1
 800bbf8:	2284      	movs	r2, #132	; 0x84
 800bbfa:	0392      	lsls	r2, r2, #14
 800bbfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbfe:	187b      	adds	r3, r7, r1
 800bc00:	2200      	movs	r2, #0
 800bc02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc04:	000c      	movs	r4, r1
 800bc06:	187b      	adds	r3, r7, r1
 800bc08:	4a41      	ldr	r2, [pc, #260]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	0010      	movs	r0, r2
 800bc0e:	f003 fa17 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_TOGGLE_I_V_Pin */
  GPIO_InitStruct.Pin = SW1_TOGGLE_I_V_Pin;
 800bc12:	0021      	movs	r1, r4
 800bc14:	187b      	adds	r3, r7, r1
 800bc16:	2204      	movs	r2, #4
 800bc18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bc1a:	187b      	adds	r3, r7, r1
 800bc1c:	22c4      	movs	r2, #196	; 0xc4
 800bc1e:	0392      	lsls	r2, r2, #14
 800bc20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bc22:	187b      	adds	r3, r7, r1
 800bc24:	2201      	movs	r2, #1
 800bc26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_TOGGLE_I_V_GPIO_Port, &GPIO_InitStruct);
 800bc28:	000c      	movs	r4, r1
 800bc2a:	187b      	adds	r3, r7, r1
 800bc2c:	4a38      	ldr	r2, [pc, #224]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bc2e:	0019      	movs	r1, r3
 800bc30:	0010      	movs	r0, r2
 800bc32:	f003 fa05 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_MAX7219_Pin OCP_RESET_Pin */
  GPIO_InitStruct.Pin = CS_MAX7219_Pin|OCP_RESET_Pin;
 800bc36:	0021      	movs	r1, r4
 800bc38:	187b      	adds	r3, r7, r1
 800bc3a:	2288      	movs	r2, #136	; 0x88
 800bc3c:	0152      	lsls	r2, r2, #5
 800bc3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc40:	000c      	movs	r4, r1
 800bc42:	193b      	adds	r3, r7, r4
 800bc44:	2201      	movs	r2, #1
 800bc46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc48:	193b      	adds	r3, r7, r4
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc4e:	193b      	adds	r3, r7, r4
 800bc50:	2200      	movs	r2, #0
 800bc52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bc54:	193b      	adds	r3, r7, r4
 800bc56:	4a2e      	ldr	r2, [pc, #184]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bc58:	0019      	movs	r1, r3
 800bc5a:	0010      	movs	r0, r2
 800bc5c:	f003 f9f0 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_TOGGLE_UNITS_Pin */
  GPIO_InitStruct.Pin = ENC_TOGGLE_UNITS_Pin;
 800bc60:	0021      	movs	r1, r4
 800bc62:	187b      	adds	r3, r7, r1
 800bc64:	2280      	movs	r2, #128	; 0x80
 800bc66:	0052      	lsls	r2, r2, #1
 800bc68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800bc6a:	187b      	adds	r3, r7, r1
 800bc6c:	22c4      	movs	r2, #196	; 0xc4
 800bc6e:	0392      	lsls	r2, r2, #14
 800bc70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bc72:	000c      	movs	r4, r1
 800bc74:	193b      	adds	r3, r7, r4
 800bc76:	2201      	movs	r2, #1
 800bc78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENC_TOGGLE_UNITS_GPIO_Port, &GPIO_InitStruct);
 800bc7a:	193b      	adds	r3, r7, r4
 800bc7c:	4a25      	ldr	r2, [pc, #148]	; (800bd14 <MX_GPIO_Init+0x250>)
 800bc7e:	0019      	movs	r1, r3
 800bc80:	0010      	movs	r0, r2
 800bc82:	f003 f9dd 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2_G4_Pin */
  GPIO_InitStruct.Pin = CC2_G4_Pin;
 800bc86:	193b      	adds	r3, r7, r4
 800bc88:	2210      	movs	r2, #16
 800bc8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bc8c:	193b      	adds	r3, r7, r4
 800bc8e:	2200      	movs	r2, #0
 800bc90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc92:	193b      	adds	r3, r7, r4
 800bc94:	2200      	movs	r2, #0
 800bc96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CC2_G4_GPIO_Port, &GPIO_InitStruct);
 800bc98:	193b      	adds	r3, r7, r4
 800bc9a:	4a1d      	ldr	r2, [pc, #116]	; (800bd10 <MX_GPIO_Init+0x24c>)
 800bc9c:	0019      	movs	r1, r3
 800bc9e:	0010      	movs	r0, r2
 800bca0:	f003 f9ce 	bl	800f040 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_ON_OFF_Pin */
  GPIO_InitStruct.Pin = RELAY_ON_OFF_Pin;
 800bca4:	0021      	movs	r1, r4
 800bca6:	187b      	adds	r3, r7, r1
 800bca8:	2280      	movs	r2, #128	; 0x80
 800bcaa:	00d2      	lsls	r2, r2, #3
 800bcac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bcae:	187b      	adds	r3, r7, r1
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcb4:	187b      	adds	r3, r7, r1
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcba:	187b      	adds	r3, r7, r1
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800bcc0:	187b      	adds	r3, r7, r1
 800bcc2:	4a11      	ldr	r2, [pc, #68]	; (800bd08 <MX_GPIO_Init+0x244>)
 800bcc4:	0019      	movs	r1, r3
 800bcc6:	0010      	movs	r0, r2
 800bcc8:	f003 f9ba 	bl	800f040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800bccc:	2200      	movs	r2, #0
 800bcce:	2103      	movs	r1, #3
 800bcd0:	2005      	movs	r0, #5
 800bcd2:	f002 fafd 	bl	800e2d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800bcd6:	2005      	movs	r0, #5
 800bcd8:	f002 fb0f 	bl	800e2fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 800bcdc:	2200      	movs	r2, #0
 800bcde:	2103      	movs	r1, #3
 800bce0:	2006      	movs	r0, #6
 800bce2:	f002 faf5 	bl	800e2d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800bce6:	2006      	movs	r0, #6
 800bce8:	f002 fb07 	bl	800e2fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800bcec:	2200      	movs	r2, #0
 800bcee:	2103      	movs	r1, #3
 800bcf0:	2007      	movs	r0, #7
 800bcf2:	f002 faed 	bl	800e2d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800bcf6:	2007      	movs	r0, #7
 800bcf8:	f002 faff 	bl	800e2fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800bcfc:	46c0      	nop			; (mov r8, r8)
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	b00b      	add	sp, #44	; 0x2c
 800bd02:	bd90      	pop	{r4, r7, pc}
 800bd04:	40021000 	.word	0x40021000
 800bd08:	50000800 	.word	0x50000800
 800bd0c:	00001021 	.word	0x00001021
 800bd10:	50000400 	.word	0x50000400
 800bd14:	50000c00 	.word	0x50000c00

0800bd18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800bd20:	2001      	movs	r0, #1
 800bd22:	f00f fb9b 	bl	801b45c <osDelay>
    app_loop();
 800bd26:	f7fc fd33 	bl	8008790 <app_loop>
    osDelay(1);
 800bd2a:	e7f9      	b.n	800bd20 <StartDefaultTask+0x8>

0800bd2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a06      	ldr	r2, [pc, #24]	; (800bd54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d101      	bne.n	800bd42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bd3e:	f000 fc99 	bl	800c674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  USBPD_DPM_TimerCounter(); //related to PD device manager
 800bd42:	f012 f9c7 	bl	801e0d4 <USBPD_DPM_TimerCounter>
  GUI_TimerCounter(); //updating a graphical user interface (GUI) based on timer events.
 800bd46:	f016 ffad 	bl	8022ca4 <GUI_TimerCounter>
  /* USER CODE END Callback 1 */
}
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	b002      	add	sp, #8
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	40001000 	.word	0x40001000

0800bd58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800bd5c:	b672      	cpsid	i
}
 800bd5e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800bd60:	e7fe      	b.n	800bd60 <Error_Handler+0x8>
	...

0800bd64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd6a:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd6e:	4b14      	ldr	r3, [pc, #80]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd70:	2101      	movs	r1, #1
 800bd72:	430a      	orrs	r2, r1
 800bd74:	641a      	str	r2, [r3, #64]	; 0x40
 800bd76:	4b12      	ldr	r3, [pc, #72]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	607b      	str	r3, [r7, #4]
 800bd80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd82:	4b0f      	ldr	r3, [pc, #60]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd86:	4b0e      	ldr	r3, [pc, #56]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd88:	2180      	movs	r1, #128	; 0x80
 800bd8a:	0549      	lsls	r1, r1, #21
 800bd8c:	430a      	orrs	r2, r1
 800bd8e:	63da      	str	r2, [r3, #60]	; 0x3c
 800bd90:	4b0b      	ldr	r3, [pc, #44]	; (800bdc0 <HAL_MspInit+0x5c>)
 800bd92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd94:	2380      	movs	r3, #128	; 0x80
 800bd96:	055b      	lsls	r3, r3, #21
 800bd98:	4013      	ands	r3, r2
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800bd9e:	2302      	movs	r3, #2
 800bda0:	425b      	negs	r3, r3
 800bda2:	2200      	movs	r2, #0
 800bda4:	2103      	movs	r1, #3
 800bda6:	0018      	movs	r0, r3
 800bda8:	f002 fa92 	bl	800e2d0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800bdac:	23c0      	movs	r3, #192	; 0xc0
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f000 fc9f 	bl	800c6f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	b002      	add	sp, #8
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	46c0      	nop			; (mov r8, r8)
 800bdc0:	40021000 	.word	0x40021000

0800bdc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bdc4:	b590      	push	{r4, r7, lr}
 800bdc6:	b08b      	sub	sp, #44	; 0x2c
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdcc:	2414      	movs	r4, #20
 800bdce:	193b      	adds	r3, r7, r4
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	2314      	movs	r3, #20
 800bdd4:	001a      	movs	r2, r3
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	f01b fe42 	bl	8027a60 <memset>
  if(hadc->Instance==ADC1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a31      	ldr	r2, [pc, #196]	; (800bea8 <HAL_ADC_MspInit+0xe4>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d15c      	bne.n	800bea0 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800bde6:	4b31      	ldr	r3, [pc, #196]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800bde8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdea:	4b30      	ldr	r3, [pc, #192]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800bdec:	2180      	movs	r1, #128	; 0x80
 800bdee:	0349      	lsls	r1, r1, #13
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	641a      	str	r2, [r3, #64]	; 0x40
 800bdf4:	4b2d      	ldr	r3, [pc, #180]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800bdf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	035b      	lsls	r3, r3, #13
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	613b      	str	r3, [r7, #16]
 800be00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be02:	4b2a      	ldr	r3, [pc, #168]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800be04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be06:	4b29      	ldr	r3, [pc, #164]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800be08:	2101      	movs	r1, #1
 800be0a:	430a      	orrs	r2, r1
 800be0c:	635a      	str	r2, [r3, #52]	; 0x34
 800be0e:	4b27      	ldr	r3, [pc, #156]	; (800beac <HAL_ADC_MspInit+0xe8>)
 800be10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be12:	2201      	movs	r2, #1
 800be14:	4013      	ands	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VSENSE_Pin|OCP_ADC_I_Pin|ISENSE_Pin;
 800be1a:	193b      	adds	r3, r7, r4
 800be1c:	22e0      	movs	r2, #224	; 0xe0
 800be1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be20:	193b      	adds	r3, r7, r4
 800be22:	2203      	movs	r2, #3
 800be24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be26:	193b      	adds	r3, r7, r4
 800be28:	2200      	movs	r2, #0
 800be2a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be2c:	193a      	adds	r2, r7, r4
 800be2e:	23a0      	movs	r3, #160	; 0xa0
 800be30:	05db      	lsls	r3, r3, #23
 800be32:	0011      	movs	r1, r2
 800be34:	0018      	movs	r0, r3
 800be36:	f003 f903 	bl	800f040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel4;
 800be3a:	4b1d      	ldr	r3, [pc, #116]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be3c:	4a1d      	ldr	r2, [pc, #116]	; (800beb4 <HAL_ADC_MspInit+0xf0>)
 800be3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800be40:	4b1b      	ldr	r3, [pc, #108]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be42:	2205      	movs	r2, #5
 800be44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be46:	4b1a      	ldr	r3, [pc, #104]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be48:	2200      	movs	r2, #0
 800be4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800be4c:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be4e:	2200      	movs	r2, #0
 800be50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800be52:	4b17      	ldr	r3, [pc, #92]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be54:	2280      	movs	r2, #128	; 0x80
 800be56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800be58:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be5a:	2280      	movs	r2, #128	; 0x80
 800be5c:	0052      	lsls	r2, r2, #1
 800be5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800be60:	4b13      	ldr	r3, [pc, #76]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be62:	2280      	movs	r2, #128	; 0x80
 800be64:	00d2      	lsls	r2, r2, #3
 800be66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800be68:	4b11      	ldr	r3, [pc, #68]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be6a:	2220      	movs	r2, #32
 800be6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800be6e:	4b10      	ldr	r3, [pc, #64]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be70:	2200      	movs	r2, #0
 800be72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be76:	0018      	movs	r0, r3
 800be78:	f002 fc90 	bl	800e79c <HAL_DMA_Init>
 800be7c:	1e03      	subs	r3, r0, #0
 800be7e:	d001      	beq.n	800be84 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800be80:	f7ff ff6a 	bl	800bd58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a0a      	ldr	r2, [pc, #40]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be88:	651a      	str	r2, [r3, #80]	; 0x50
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <HAL_ADC_MspInit+0xec>)
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 3, 0);
 800be90:	2200      	movs	r2, #0
 800be92:	2103      	movs	r1, #3
 800be94:	200c      	movs	r0, #12
 800be96:	f002 fa1b 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800be9a:	200c      	movs	r0, #12
 800be9c:	f002 fa2d 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800bea0:	46c0      	nop			; (mov r8, r8)
 800bea2:	46bd      	mov	sp, r7
 800bea4:	b00b      	add	sp, #44	; 0x2c
 800bea6:	bd90      	pop	{r4, r7, pc}
 800bea8:	40012400 	.word	0x40012400
 800beac:	40021000 	.word	0x40021000
 800beb0:	2000082c 	.word	0x2000082c
 800beb4:	40020044 	.word	0x40020044

0800beb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800beb8:	b590      	push	{r4, r7, lr}
 800beba:	b08b      	sub	sp, #44	; 0x2c
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bec0:	2414      	movs	r4, #20
 800bec2:	193b      	adds	r3, r7, r4
 800bec4:	0018      	movs	r0, r3
 800bec6:	2314      	movs	r3, #20
 800bec8:	001a      	movs	r2, r3
 800beca:	2100      	movs	r1, #0
 800becc:	f01b fdc8 	bl	8027a60 <memset>
  if(hdac->Instance==DAC1)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a1c      	ldr	r2, [pc, #112]	; (800bf48 <HAL_DAC_MspInit+0x90>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d131      	bne.n	800bf3e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800beda:	4b1c      	ldr	r3, [pc, #112]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800bedc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bede:	4b1b      	ldr	r3, [pc, #108]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800bee0:	2180      	movs	r1, #128	; 0x80
 800bee2:	0589      	lsls	r1, r1, #22
 800bee4:	430a      	orrs	r2, r1
 800bee6:	63da      	str	r2, [r3, #60]	; 0x3c
 800bee8:	4b18      	ldr	r3, [pc, #96]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800beea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800beec:	2380      	movs	r3, #128	; 0x80
 800beee:	059b      	lsls	r3, r3, #22
 800bef0:	4013      	ands	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]
 800bef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bef6:	4b15      	ldr	r3, [pc, #84]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800bef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800befa:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800befc:	2101      	movs	r1, #1
 800befe:	430a      	orrs	r2, r1
 800bf00:	635a      	str	r2, [r3, #52]	; 0x34
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <HAL_DAC_MspInit+0x94>)
 800bf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf06:	2201      	movs	r2, #1
 800bf08:	4013      	ands	r3, r2
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = OCP_DAC_LIMIT_Pin;
 800bf0e:	193b      	adds	r3, r7, r4
 800bf10:	2210      	movs	r2, #16
 800bf12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bf14:	193b      	adds	r3, r7, r4
 800bf16:	2203      	movs	r2, #3
 800bf18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	193b      	adds	r3, r7, r4
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(OCP_DAC_LIMIT_GPIO_Port, &GPIO_InitStruct);
 800bf20:	193a      	adds	r2, r7, r4
 800bf22:	23a0      	movs	r3, #160	; 0xa0
 800bf24:	05db      	lsls	r3, r3, #23
 800bf26:	0011      	movs	r1, r2
 800bf28:	0018      	movs	r0, r3
 800bf2a:	f003 f889 	bl	800f040 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 3, 0);
 800bf2e:	2200      	movs	r2, #0
 800bf30:	2103      	movs	r1, #3
 800bf32:	2011      	movs	r0, #17
 800bf34:	f002 f9cc 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800bf38:	2011      	movs	r0, #17
 800bf3a:	f002 f9de 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800bf3e:	46c0      	nop			; (mov r8, r8)
 800bf40:	46bd      	mov	sp, r7
 800bf42:	b00b      	add	sp, #44	; 0x2c
 800bf44:	bd90      	pop	{r4, r7, pc}
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	40007400 	.word	0x40007400
 800bf4c:	40021000 	.word	0x40021000

0800bf50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b08b      	sub	sp, #44	; 0x2c
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf58:	2414      	movs	r4, #20
 800bf5a:	193b      	adds	r3, r7, r4
 800bf5c:	0018      	movs	r0, r3
 800bf5e:	2314      	movs	r3, #20
 800bf60:	001a      	movs	r2, r3
 800bf62:	2100      	movs	r1, #0
 800bf64:	f01b fd7c 	bl	8027a60 <memset>
  if(hspi->Instance==SPI2)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a1b      	ldr	r2, [pc, #108]	; (800bfdc <HAL_SPI_MspInit+0x8c>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d130      	bne.n	800bfd4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bf72:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf76:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf78:	2180      	movs	r1, #128	; 0x80
 800bf7a:	01c9      	lsls	r1, r1, #7
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	63da      	str	r2, [r3, #60]	; 0x3c
 800bf80:	4b17      	ldr	r3, [pc, #92]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf84:	2380      	movs	r3, #128	; 0x80
 800bf86:	01db      	lsls	r3, r3, #7
 800bf88:	4013      	ands	r3, r2
 800bf8a:	613b      	str	r3, [r7, #16]
 800bf8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf8e:	4b14      	ldr	r3, [pc, #80]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf92:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf94:	2102      	movs	r1, #2
 800bf96:	430a      	orrs	r2, r1
 800bf98:	635a      	str	r2, [r3, #52]	; 0x34
 800bf9a:	4b11      	ldr	r3, [pc, #68]	; (800bfe0 <HAL_SPI_MspInit+0x90>)
 800bf9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB11     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800bfa6:	193b      	adds	r3, r7, r4
 800bfa8:	22a0      	movs	r2, #160	; 0xa0
 800bfaa:	0192      	lsls	r2, r2, #6
 800bfac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfae:	0021      	movs	r1, r4
 800bfb0:	187b      	adds	r3, r7, r1
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfb6:	187b      	adds	r3, r7, r1
 800bfb8:	2200      	movs	r2, #0
 800bfba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfbc:	187b      	adds	r3, r7, r1
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800bfc2:	187b      	adds	r3, r7, r1
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfc8:	187b      	adds	r3, r7, r1
 800bfca:	4a06      	ldr	r2, [pc, #24]	; (800bfe4 <HAL_SPI_MspInit+0x94>)
 800bfcc:	0019      	movs	r1, r3
 800bfce:	0010      	movs	r0, r2
 800bfd0:	f003 f836 	bl	800f040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800bfd4:	46c0      	nop			; (mov r8, r8)
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	b00b      	add	sp, #44	; 0x2c
 800bfda:	bd90      	pop	{r4, r7, pc}
 800bfdc:	40003800 	.word	0x40003800
 800bfe0:	40021000 	.word	0x40021000
 800bfe4:	50000400 	.word	0x50000400

0800bfe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800bfe8:	b590      	push	{r4, r7, lr}
 800bfea:	b08b      	sub	sp, #44	; 0x2c
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bff0:	2414      	movs	r4, #20
 800bff2:	193b      	adds	r3, r7, r4
 800bff4:	0018      	movs	r0, r3
 800bff6:	2314      	movs	r3, #20
 800bff8:	001a      	movs	r2, r3
 800bffa:	2100      	movs	r1, #0
 800bffc:	f01b fd30 	bl	8027a60 <memset>
  if(htim_encoder->Instance==TIM3)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a1e      	ldr	r2, [pc, #120]	; (800c080 <HAL_TIM_Encoder_MspInit+0x98>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d135      	bne.n	800c076 <HAL_TIM_Encoder_MspInit+0x8e>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c00a:	4b1e      	ldr	r3, [pc, #120]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c00c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c00e:	4b1d      	ldr	r3, [pc, #116]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c010:	2102      	movs	r1, #2
 800c012:	430a      	orrs	r2, r1
 800c014:	63da      	str	r2, [r3, #60]	; 0x3c
 800c016:	4b1b      	ldr	r3, [pc, #108]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01a:	2202      	movs	r2, #2
 800c01c:	4013      	ands	r3, r2
 800c01e:	613b      	str	r3, [r7, #16]
 800c020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c022:	4b18      	ldr	r3, [pc, #96]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c026:	4b17      	ldr	r3, [pc, #92]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c028:	2104      	movs	r1, #4
 800c02a:	430a      	orrs	r2, r1
 800c02c:	635a      	str	r2, [r3, #52]	; 0x34
 800c02e:	4b15      	ldr	r3, [pc, #84]	; (800c084 <HAL_TIM_Encoder_MspInit+0x9c>)
 800c030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c032:	2204      	movs	r2, #4
 800c034:	4013      	ands	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_TIM3_CH1_Pin|ENC_TIM3_CH2_Pin;
 800c03a:	0021      	movs	r1, r4
 800c03c:	187b      	adds	r3, r7, r1
 800c03e:	22c0      	movs	r2, #192	; 0xc0
 800c040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c042:	187b      	adds	r3, r7, r1
 800c044:	2202      	movs	r2, #2
 800c046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c048:	187b      	adds	r3, r7, r1
 800c04a:	2200      	movs	r2, #0
 800c04c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c04e:	187b      	adds	r3, r7, r1
 800c050:	2200      	movs	r2, #0
 800c052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800c054:	187b      	adds	r3, r7, r1
 800c056:	2201      	movs	r2, #1
 800c058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c05a:	187b      	adds	r3, r7, r1
 800c05c:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <HAL_TIM_Encoder_MspInit+0xa0>)
 800c05e:	0019      	movs	r1, r3
 800c060:	0010      	movs	r0, r2
 800c062:	f002 ffed 	bl	800f040 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 800c066:	2200      	movs	r2, #0
 800c068:	2103      	movs	r1, #3
 800c06a:	2010      	movs	r0, #16
 800c06c:	f002 f930 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 800c070:	2010      	movs	r0, #16
 800c072:	f002 f942 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800c076:	46c0      	nop			; (mov r8, r8)
 800c078:	46bd      	mov	sp, r7
 800c07a:	b00b      	add	sp, #44	; 0x2c
 800c07c:	bd90      	pop	{r4, r7, pc}
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	40000400 	.word	0x40000400
 800c084:	40021000 	.word	0x40021000
 800c088:	50000800 	.word	0x50000800

0800c08c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a0d      	ldr	r2, [pc, #52]	; (800c0d0 <HAL_TIM_Base_MspInit+0x44>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d113      	bne.n	800c0c6 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c09e:	4b0d      	ldr	r3, [pc, #52]	; (800c0d4 <HAL_TIM_Base_MspInit+0x48>)
 800c0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a2:	4b0c      	ldr	r3, [pc, #48]	; (800c0d4 <HAL_TIM_Base_MspInit+0x48>)
 800c0a4:	2104      	movs	r1, #4
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	63da      	str	r2, [r3, #60]	; 0x3c
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <HAL_TIM_Base_MspInit+0x48>)
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 3, 0);
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	2103      	movs	r1, #3
 800c0ba:	2010      	movs	r0, #16
 800c0bc:	f002 f908 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	f002 f91a 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	b004      	add	sp, #16
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	46c0      	nop			; (mov r8, r8)
 800c0d0:	40000800 	.word	0x40000800
 800c0d4:	40021000 	.word	0x40021000

0800c0d8 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 800c0d8:	b590      	push	{r4, r7, lr}
 800c0da:	b097      	sub	sp, #92	; 0x5c
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c0e0:	240c      	movs	r4, #12
 800c0e2:	193b      	adds	r3, r7, r4
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	234c      	movs	r3, #76	; 0x4c
 800c0e8:	001a      	movs	r2, r3
 800c0ea:	2100      	movs	r1, #0
 800c0ec:	f01b fcb8 	bl	8027a60 <memset>
  if(htim_onepulse->Instance==TIM15)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a15      	ldr	r2, [pc, #84]	; (800c14c <HAL_TIM_OnePulse_MspInit+0x74>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d124      	bne.n	800c144 <HAL_TIM_OnePulse_MspInit+0x6c>

  /* USER CODE END TIM15_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 800c0fa:	193b      	adds	r3, r7, r4
 800c0fc:	2280      	movs	r2, #128	; 0x80
 800c0fe:	03d2      	lsls	r2, r2, #15
 800c100:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 800c102:	193b      	adds	r3, r7, r4
 800c104:	2200      	movs	r2, #0
 800c106:	63da      	str	r2, [r3, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c108:	193b      	adds	r3, r7, r4
 800c10a:	0018      	movs	r0, r3
 800c10c:	f005 fc68 	bl	80119e0 <HAL_RCCEx_PeriphCLKConfig>
 800c110:	1e03      	subs	r3, r0, #0
 800c112:	d001      	beq.n	800c118 <HAL_TIM_OnePulse_MspInit+0x40>
    {
      Error_Handler();
 800c114:	f7ff fe20 	bl	800bd58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800c118:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <HAL_TIM_OnePulse_MspInit+0x78>)
 800c11a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c11c:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <HAL_TIM_OnePulse_MspInit+0x78>)
 800c11e:	2180      	movs	r1, #128	; 0x80
 800c120:	0249      	lsls	r1, r1, #9
 800c122:	430a      	orrs	r2, r1
 800c124:	641a      	str	r2, [r3, #64]	; 0x40
 800c126:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <HAL_TIM_OnePulse_MspInit+0x78>)
 800c128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c12a:	2380      	movs	r3, #128	; 0x80
 800c12c:	025b      	lsls	r3, r3, #9
 800c12e:	4013      	ands	r3, r2
 800c130:	60bb      	str	r3, [r7, #8]
 800c132:	68bb      	ldr	r3, [r7, #8]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 3, 0);
 800c134:	2200      	movs	r2, #0
 800c136:	2103      	movs	r1, #3
 800c138:	2014      	movs	r0, #20
 800c13a:	f002 f8c9 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800c13e:	2014      	movs	r0, #20
 800c140:	f002 f8db 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800c144:	46c0      	nop			; (mov r8, r8)
 800c146:	46bd      	mov	sp, r7
 800c148:	b017      	add	sp, #92	; 0x5c
 800c14a:	bd90      	pop	{r4, r7, pc}
 800c14c:	40014000 	.word	0x40014000
 800c150:	40021000 	.word	0x40021000

0800c154 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c154:	b5b0      	push	{r4, r5, r7, lr}
 800c156:	b08c      	sub	sp, #48	; 0x30
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800c15c:	232b      	movs	r3, #43	; 0x2b
 800c15e:	18fb      	adds	r3, r7, r3
 800c160:	2200      	movs	r2, #0
 800c162:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c164:	4b37      	ldr	r3, [pc, #220]	; (800c244 <HAL_InitTick+0xf0>)
 800c166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c168:	4b36      	ldr	r3, [pc, #216]	; (800c244 <HAL_InitTick+0xf0>)
 800c16a:	2110      	movs	r1, #16
 800c16c:	430a      	orrs	r2, r1
 800c16e:	63da      	str	r2, [r3, #60]	; 0x3c
 800c170:	4b34      	ldr	r3, [pc, #208]	; (800c244 <HAL_InitTick+0xf0>)
 800c172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c174:	2210      	movs	r2, #16
 800c176:	4013      	ands	r3, r2
 800c178:	60bb      	str	r3, [r7, #8]
 800c17a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c17c:	230c      	movs	r3, #12
 800c17e:	18fa      	adds	r2, r7, r3
 800c180:	2410      	movs	r4, #16
 800c182:	193b      	adds	r3, r7, r4
 800c184:	0011      	movs	r1, r2
 800c186:	0018      	movs	r0, r3
 800c188:	f005 fc00 	bl	801198c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800c18c:	193b      	adds	r3, r7, r4
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800c192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c198:	f005 fbe2 	bl	8011960 <HAL_RCC_GetPCLK1Freq>
 800c19c:	0003      	movs	r3, r0
 800c19e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1a0:	e004      	b.n	800c1ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800c1a2:	f005 fbdd 	bl	8011960 <HAL_RCC_GetPCLK1Freq>
 800c1a6:	0003      	movs	r3, r0
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	4926      	ldr	r1, [pc, #152]	; (800c248 <HAL_InitTick+0xf4>)
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7fa f831 	bl	8006218 <__udivsi3>
 800c1b6:	0003      	movs	r3, r0
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c1bc:	4b23      	ldr	r3, [pc, #140]	; (800c24c <HAL_InitTick+0xf8>)
 800c1be:	4a24      	ldr	r2, [pc, #144]	; (800c250 <HAL_InitTick+0xfc>)
 800c1c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800c1c2:	4b22      	ldr	r3, [pc, #136]	; (800c24c <HAL_InitTick+0xf8>)
 800c1c4:	4a23      	ldr	r2, [pc, #140]	; (800c254 <HAL_InitTick+0x100>)
 800c1c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c1c8:	4b20      	ldr	r3, [pc, #128]	; (800c24c <HAL_InitTick+0xf8>)
 800c1ca:	6a3a      	ldr	r2, [r7, #32]
 800c1cc:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800c1ce:	4b1f      	ldr	r3, [pc, #124]	; (800c24c <HAL_InitTick+0xf8>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c1d4:	4b1d      	ldr	r3, [pc, #116]	; (800c24c <HAL_InitTick+0xf8>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c1da:	4b1c      	ldr	r3, [pc, #112]	; (800c24c <HAL_InitTick+0xf8>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800c1e0:	252b      	movs	r5, #43	; 0x2b
 800c1e2:	197c      	adds	r4, r7, r5
 800c1e4:	4b19      	ldr	r3, [pc, #100]	; (800c24c <HAL_InitTick+0xf8>)
 800c1e6:	0018      	movs	r0, r3
 800c1e8:	f006 f9c4 	bl	8012574 <HAL_TIM_Base_Init>
 800c1ec:	0003      	movs	r3, r0
 800c1ee:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800c1f0:	197b      	adds	r3, r7, r5
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d11e      	bne.n	800c236 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800c1f8:	197c      	adds	r4, r7, r5
 800c1fa:	4b14      	ldr	r3, [pc, #80]	; (800c24c <HAL_InitTick+0xf8>)
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f006 fa6b 	bl	80126d8 <HAL_TIM_Base_Start_IT>
 800c202:	0003      	movs	r3, r0
 800c204:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800c206:	197b      	adds	r3, r7, r5
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d113      	bne.n	800c236 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 800c20e:	2011      	movs	r0, #17
 800c210:	f002 f873 	bl	800e2fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b03      	cmp	r3, #3
 800c218:	d809      	bhi.n	800c22e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	0019      	movs	r1, r3
 800c220:	2011      	movs	r0, #17
 800c222:	f002 f855 	bl	800e2d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c226:	4b0c      	ldr	r3, [pc, #48]	; (800c258 <HAL_InitTick+0x104>)
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	e003      	b.n	800c236 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800c22e:	232b      	movs	r3, #43	; 0x2b
 800c230:	18fb      	adds	r3, r7, r3
 800c232:	2201      	movs	r2, #1
 800c234:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800c236:	232b      	movs	r3, #43	; 0x2b
 800c238:	18fb      	adds	r3, r7, r3
 800c23a:	781b      	ldrb	r3, [r3, #0]
}
 800c23c:	0018      	movs	r0, r3
 800c23e:	46bd      	mov	sp, r7
 800c240:	b00c      	add	sp, #48	; 0x30
 800c242:	bdb0      	pop	{r4, r5, r7, pc}
 800c244:	40021000 	.word	0x40021000
 800c248:	000f4240 	.word	0x000f4240
 800c24c:	200009ec 	.word	0x200009ec
 800c250:	40001000 	.word	0x40001000
 800c254:	000003e7 	.word	0x000003e7
 800c258:	2000011c 	.word	0x2000011c

0800c25c <LL_TIM_ClearFlag_UPDATE>:
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	4252      	negs	r2, r2
 800c26a:	611a      	str	r2, [r3, #16]
}
 800c26c:	46c0      	nop			; (mov r8, r8)
 800c26e:	46bd      	mov	sp, r7
 800c270:	b002      	add	sp, #8
 800c272:	bd80      	pop	{r7, pc}

0800c274 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	2201      	movs	r2, #1
 800c282:	4013      	ands	r3, r2
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c288:	2301      	movs	r3, #1
 800c28a:	e000      	b.n	800c28e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	0018      	movs	r0, r3
 800c290:	46bd      	mov	sp, r7
 800c292:	b002      	add	sp, #8
 800c294:	bd80      	pop	{r7, pc}

0800c296 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c29a:	e7fe      	b.n	800c29a <NMI_Handler+0x4>

0800c29c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c2a0:	e7fe      	b.n	800c2a0 <HardFault_Handler+0x4>
	...

0800c2a4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW3_OFF_ON_Pin) != RESET){
 800c2a8:	4b06      	ldr	r3, [pc, #24]	; (800c2c4 <EXTI0_1_IRQHandler+0x20>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	2202      	movs	r2, #2
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	d101      	bne.n	800c2b6 <EXTI0_1_IRQHandler+0x12>
 800c2b2:	4b04      	ldr	r3, [pc, #16]	; (800c2c4 <EXTI0_1_IRQHandler+0x20>)
 800c2b4:	691b      	ldr	r3, [r3, #16]
	  //sw3_on_off_isr();
  }
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_OFF_ON_Pin);
 800c2b6:	2002      	movs	r0, #2
 800c2b8:	f003 f866 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800c2bc:	46c0      	nop			; (mov r8, r8)
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	46c0      	nop			; (mov r8, r8)
 800c2c4:	40021800 	.word	0x40021800

0800c2c8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(SW1_TOGGLE_I_V_Pin) != RESET){
 800c2cc:	4b06      	ldr	r3, [pc, #24]	; (800c2e8 <EXTI2_3_IRQHandler+0x20>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	d101      	bne.n	800c2da <EXTI2_3_IRQHandler+0x12>
 800c2d6:	4b04      	ldr	r3, [pc, #16]	; (800c2e8 <EXTI2_3_IRQHandler+0x20>)
 800c2d8:	691b      	ldr	r3, [r3, #16]
	  //sw1_toggle_i_v_isr();
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_TOGGLE_I_V_Pin);
 800c2da:	2004      	movs	r0, #4
 800c2dc:	f003 f854 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800c2e0:	46c0      	nop			; (mov r8, r8)
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	46c0      	nop			; (mov r8, r8)
 800c2e8:	40021800 	.word	0x40021800

0800c2ec <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(ENC_TOGGLE_UNITS_Pin) != RESET){
 800c2f0:	4b16      	ldr	r3, [pc, #88]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c2f2:	68da      	ldr	r2, [r3, #12]
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	d101      	bne.n	800c300 <EXTI4_15_IRQHandler+0x14>
 800c2fc:	4b13      	ldr	r3, [pc, #76]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c2fe:	691b      	ldr	r3, [r3, #16]
	  //enc_toggle_units_isr();
  }
  if (__HAL_GPIO_EXTI_GET_IT(SW2_DEBUG_BTN_Pin) != RESET){
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c302:	68db      	ldr	r3, [r3, #12]
 800c304:	2210      	movs	r2, #16
 800c306:	4013      	ands	r3, r2
 800c308:	d101      	bne.n	800c30e <EXTI4_15_IRQHandler+0x22>
 800c30a:	4b10      	ldr	r3, [pc, #64]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c30c:	691b      	ldr	r3, [r3, #16]
	  //sw2_lock_isr();
	  //sw3_on_off_isr();
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT_Pin) != RESET){
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c310:	68db      	ldr	r3, [r3, #12]
 800c312:	2240      	movs	r2, #64	; 0x40
 800c314:	4013      	ands	r3, r2
 800c316:	d101      	bne.n	800c31c <EXTI4_15_IRQHandler+0x30>
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c31a:	691b      	ldr	r3, [r3, #16]
	  //ocp_alert_isr();
  }
  if (__HAL_GPIO_EXTI_GET_IT(OCP_ALERT2_Pin) != RESET){
 800c31c:	4b0b      	ldr	r3, [pc, #44]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	2280      	movs	r2, #128	; 0x80
 800c322:	4013      	ands	r3, r2
 800c324:	d101      	bne.n	800c32a <EXTI4_15_IRQHandler+0x3e>
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <EXTI4_15_IRQHandler+0x60>)
 800c328:	691b      	ldr	r3, [r3, #16]
	  //ocp_alert_isr();
  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_DEBUG_BTN_Pin);
 800c32a:	2010      	movs	r0, #16
 800c32c:	f003 f82c 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT_Pin);
 800c330:	2040      	movs	r0, #64	; 0x40
 800c332:	f003 f829 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OCP_ALERT2_Pin);
 800c336:	2080      	movs	r0, #128	; 0x80
 800c338:	f003 f826 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_TOGGLE_UNITS_Pin);
 800c33c:	2380      	movs	r3, #128	; 0x80
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	0018      	movs	r0, r3
 800c342:	f003 f821 	bl	800f388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800c346:	46c0      	nop			; (mov r8, r8)
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40021800 	.word	0x40021800

0800c350 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800c354:	4b04      	ldr	r3, [pc, #16]	; (800c368 <USB_UCPD1_2_IRQHandler+0x18>)
 800c356:	0018      	movs	r0, r3
 800c358:	f003 f9c6 	bl	800f6e8 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 800c35c:	f00a fd40 	bl	8016de0 <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 800c360:	46c0      	nop			; (mov r8, r8)
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	46c0      	nop			; (mov r8, r8)
 800c368:	2000493c 	.word	0x2000493c

0800c36c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800c370:	46c0      	nop			; (mov r8, r8)
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 800c37a:	f019 fb3d 	bl	80259f8 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c37e:	46c0      	nop			; (mov r8, r8)
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800c388:	4b03      	ldr	r3, [pc, #12]	; (800c398 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler+0x14>)
 800c38a:	0018      	movs	r0, r3
 800c38c:	f002 fb38 	bl	800ea00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 800c390:	46c0      	nop			; (mov r8, r8)
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	46c0      	nop			; (mov r8, r8)
 800c398:	2000082c 	.word	0x2000082c

0800c39c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1,COMP2, COMP3 Interrupts (combined with EXTI 17 & 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800c3a0:	4b03      	ldr	r3, [pc, #12]	; (800c3b0 <ADC1_COMP_IRQHandler+0x14>)
 800c3a2:	0018      	movs	r0, r3
 800c3a4:	f000 fe2a 	bl	800cffc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800c3a8:	46c0      	nop			; (mov r8, r8)
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	46c0      	nop			; (mov r8, r8)
 800c3b0:	200007c8 	.word	0x200007c8

0800c3b4 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */
  //encoder_turn_isr();
  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800c3b8:	4b0a      	ldr	r3, [pc, #40]	; (800c3e4 <TIM3_TIM4_IRQHandler+0x30>)
 800c3ba:	0018      	movs	r0, r3
 800c3bc:	f006 fbac 	bl	8012b18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim4);
 800c3c0:	4b09      	ldr	r3, [pc, #36]	; (800c3e8 <TIM3_TIM4_IRQHandler+0x34>)
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	f006 fba8 	bl	8012b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */
  /* Check if TIM4 update interrupt occurred */
  if(LL_TIM_IsActiveFlag_UPDATE(TIM4))
 800c3c8:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <TIM3_TIM4_IRQHandler+0x38>)
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	f7ff ff52 	bl	800c274 <LL_TIM_IsActiveFlag_UPDATE>
 800c3d0:	1e03      	subs	r3, r0, #0
 800c3d2:	d003      	beq.n	800c3dc <TIM3_TIM4_IRQHandler+0x28>
  {
	  LL_TIM_ClearFlag_UPDATE(TIM4);
 800c3d4:	4b05      	ldr	r3, [pc, #20]	; (800c3ec <TIM3_TIM4_IRQHandler+0x38>)
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f7ff ff40 	bl	800c25c <LL_TIM_ClearFlag_UPDATE>
  }
  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 800c3dc:	46c0      	nop			; (mov r8, r8)
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	46c0      	nop			; (mov r8, r8)
 800c3e4:	20000904 	.word	0x20000904
 800c3e8:	20000950 	.word	0x20000950
 800c3ec:	40000800 	.word	0x40000800

0800c3f0 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <TIM6_DAC_LPTIM1_IRQHandler+0x1c>)
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	f006 fb8e 	bl	8012b18 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800c3fc:	4b04      	ldr	r3, [pc, #16]	; (800c410 <TIM6_DAC_LPTIM1_IRQHandler+0x20>)
 800c3fe:	0018      	movs	r0, r3
 800c400:	f002 f808 	bl	800e414 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 800c404:	46c0      	nop			; (mov r8, r8)
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	46c0      	nop			; (mov r8, r8)
 800c40c:	200009ec 	.word	0x200009ec
 800c410:	2000088c 	.word	0x2000088c

0800c414 <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 global Interrupt.
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */
  TIM7_ISR();
 800c418:	f7fc fabc 	bl	8008994 <TIM7_ISR>
  /* USER CODE END TIM7_LPTIM2_IRQn 0 */

  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 800c41c:	46c0      	nop			; (mov r8, r8)
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
  TIM14_ISR();
 800c426:	f7fc fadd 	bl	80089e4 <TIM14_ISR>
  /* USER CODE END TIM14_IRQn 0 */
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800c42a:	46c0      	nop			; (mov r8, r8)
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */
  TIM15_ISR();
 800c434:	f7fc faf6 	bl	8008a24 <TIM15_ISR>
  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800c438:	4b03      	ldr	r3, [pc, #12]	; (800c448 <TIM15_IRQHandler+0x18>)
 800c43a:	0018      	movs	r0, r3
 800c43c:	f006 fb6c 	bl	8012b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800c440:	46c0      	nop			; (mov r8, r8)
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	46c0      	nop			; (mov r8, r8)
 800c448:	2000099c 	.word	0x2000099c

0800c44c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 800c450:	f019 fad9 	bl	8025a06 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 800c454:	46c0      	nop			; (mov r8, r8)
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	af00      	add	r7, sp, #0
  return 1;
 800c45e:	2301      	movs	r3, #1
}
 800c460:	0018      	movs	r0, r3
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <_kill>:

int _kill(int pid, int sig)
{
 800c466:	b580      	push	{r7, lr}
 800c468:	b082      	sub	sp, #8
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
 800c46e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c470:	f01b fc52 	bl	8027d18 <__errno>
 800c474:	0003      	movs	r3, r0
 800c476:	2216      	movs	r2, #22
 800c478:	601a      	str	r2, [r3, #0]
  return -1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	425b      	negs	r3, r3
}
 800c47e:	0018      	movs	r0, r3
 800c480:	46bd      	mov	sp, r7
 800c482:	b002      	add	sp, #8
 800c484:	bd80      	pop	{r7, pc}

0800c486 <_exit>:

void _exit (int status)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c48e:	2301      	movs	r3, #1
 800c490:	425a      	negs	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	0011      	movs	r1, r2
 800c496:	0018      	movs	r0, r3
 800c498:	f7ff ffe5 	bl	800c466 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c49c:	e7fe      	b.n	800c49c <_exit+0x16>

0800c49e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b086      	sub	sp, #24
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	617b      	str	r3, [r7, #20]
 800c4ae:	e00a      	b.n	800c4c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c4b0:	e000      	b.n	800c4b4 <_read+0x16>
 800c4b2:	bf00      	nop
 800c4b4:	0001      	movs	r1, r0
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	60ba      	str	r2, [r7, #8]
 800c4bc:	b2ca      	uxtb	r2, r1
 800c4be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	dbf0      	blt.n	800c4b0 <_read+0x12>
  }

  return len;
 800c4ce:	687b      	ldr	r3, [r7, #4]
}
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	b006      	add	sp, #24
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b086      	sub	sp, #24
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	617b      	str	r3, [r7, #20]
 800c4e8:	e009      	b.n	800c4fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	1c5a      	adds	r2, r3, #1
 800c4ee:	60ba      	str	r2, [r7, #8]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	0018      	movs	r0, r3
 800c4f4:	e000      	b.n	800c4f8 <_write+0x20>
 800c4f6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	617b      	str	r3, [r7, #20]
 800c4fe:	697a      	ldr	r2, [r7, #20]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	429a      	cmp	r2, r3
 800c504:	dbf1      	blt.n	800c4ea <_write+0x12>
  }
  return len;
 800c506:	687b      	ldr	r3, [r7, #4]
}
 800c508:	0018      	movs	r0, r3
 800c50a:	46bd      	mov	sp, r7
 800c50c:	b006      	add	sp, #24
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <_close>:

int _close(int file)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c518:	2301      	movs	r3, #1
 800c51a:	425b      	negs	r3, r3
}
 800c51c:	0018      	movs	r0, r3
 800c51e:	46bd      	mov	sp, r7
 800c520:	b002      	add	sp, #8
 800c522:	bd80      	pop	{r7, pc}

0800c524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2280      	movs	r2, #128	; 0x80
 800c532:	0192      	lsls	r2, r2, #6
 800c534:	605a      	str	r2, [r3, #4]
  return 0;
 800c536:	2300      	movs	r3, #0
}
 800c538:	0018      	movs	r0, r3
 800c53a:	46bd      	mov	sp, r7
 800c53c:	b002      	add	sp, #8
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <_isatty>:

int _isatty(int file)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c548:	2301      	movs	r3, #1
}
 800c54a:	0018      	movs	r0, r3
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b002      	add	sp, #8
 800c550:	bd80      	pop	{r7, pc}

0800c552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	0018      	movs	r0, r3
 800c562:	46bd      	mov	sp, r7
 800c564:	b004      	add	sp, #16
 800c566:	bd80      	pop	{r7, pc}

0800c568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c570:	4a14      	ldr	r2, [pc, #80]	; (800c5c4 <_sbrk+0x5c>)
 800c572:	4b15      	ldr	r3, [pc, #84]	; (800c5c8 <_sbrk+0x60>)
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c57c:	4b13      	ldr	r3, [pc, #76]	; (800c5cc <_sbrk+0x64>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d102      	bne.n	800c58a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c584:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <_sbrk+0x64>)
 800c586:	4a12      	ldr	r2, [pc, #72]	; (800c5d0 <_sbrk+0x68>)
 800c588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c58a:	4b10      	ldr	r3, [pc, #64]	; (800c5cc <_sbrk+0x64>)
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	18d3      	adds	r3, r2, r3
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	429a      	cmp	r2, r3
 800c596:	d207      	bcs.n	800c5a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c598:	f01b fbbe 	bl	8027d18 <__errno>
 800c59c:	0003      	movs	r3, r0
 800c59e:	220c      	movs	r2, #12
 800c5a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	425b      	negs	r3, r3
 800c5a6:	e009      	b.n	800c5bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c5a8:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <_sbrk+0x64>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c5ae:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <_sbrk+0x64>)
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	18d2      	adds	r2, r2, r3
 800c5b6:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <_sbrk+0x64>)
 800c5b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
}
 800c5bc:	0018      	movs	r0, r3
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	b006      	add	sp, #24
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20024000 	.word	0x20024000
 800c5c8:	00000400 	.word	0x00000400
 800c5cc:	20000a38 	.word	0x20000a38
 800c5d0:	20005650 	.word	0x20005650

0800c5d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c5d8:	46c0      	nop			; (mov r8, r8)
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800c5e0:	480d      	ldr	r0, [pc, #52]	; (800c618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800c5e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800c5e4:	f7ff fff6 	bl	800c5d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c5e8:	480c      	ldr	r0, [pc, #48]	; (800c61c <LoopForever+0x6>)
  ldr r1, =_edata
 800c5ea:	490d      	ldr	r1, [pc, #52]	; (800c620 <LoopForever+0xa>)
  ldr r2, =_sidata
 800c5ec:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <LoopForever+0xe>)
  movs r3, #0
 800c5ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c5f0:	e002      	b.n	800c5f8 <LoopCopyDataInit>

0800c5f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c5f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c5f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c5f6:	3304      	adds	r3, #4

0800c5f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c5f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c5fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c5fc:	d3f9      	bcc.n	800c5f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c5fe:	4a0a      	ldr	r2, [pc, #40]	; (800c628 <LoopForever+0x12>)
  ldr r4, =_ebss
 800c600:	4c0a      	ldr	r4, [pc, #40]	; (800c62c <LoopForever+0x16>)
  movs r3, #0
 800c602:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c604:	e001      	b.n	800c60a <LoopFillZerobss>

0800c606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c608:	3204      	adds	r2, #4

0800c60a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c60a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c60c:	d3fb      	bcc.n	800c606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800c60e:	f01b fb89 	bl	8027d24 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800c612:	f7fe fd5f 	bl	800b0d4 <main>

0800c616 <LoopForever>:

LoopForever:
  b LoopForever
 800c616:	e7fe      	b.n	800c616 <LoopForever>
  ldr   r0, =_estack
 800c618:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800c61c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c620:	20000514 	.word	0x20000514
  ldr r2, =_sidata
 800c624:	0802bda0 	.word	0x0802bda0
  ldr r2, =_sbss
 800c628:	20000514 	.word	0x20000514
  ldr r4, =_ebss
 800c62c:	20005650 	.word	0x20005650

0800c630 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c630:	e7fe      	b.n	800c630 <CEC_IRQHandler>
	...

0800c634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c63a:	1dfb      	adds	r3, r7, #7
 800c63c:	2200      	movs	r2, #0
 800c63e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <HAL_Init+0x3c>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <HAL_Init+0x3c>)
 800c646:	2180      	movs	r1, #128	; 0x80
 800c648:	0049      	lsls	r1, r1, #1
 800c64a:	430a      	orrs	r2, r1
 800c64c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c64e:	2003      	movs	r0, #3
 800c650:	f7ff fd80 	bl	800c154 <HAL_InitTick>
 800c654:	1e03      	subs	r3, r0, #0
 800c656:	d003      	beq.n	800c660 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800c658:	1dfb      	adds	r3, r7, #7
 800c65a:	2201      	movs	r2, #1
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	e001      	b.n	800c664 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800c660:	f7ff fb80 	bl	800bd64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c664:	1dfb      	adds	r3, r7, #7
 800c666:	781b      	ldrb	r3, [r3, #0]
}
 800c668:	0018      	movs	r0, r3
 800c66a:	46bd      	mov	sp, r7
 800c66c:	b002      	add	sp, #8
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	40022000 	.word	0x40022000

0800c674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c678:	4b05      	ldr	r3, [pc, #20]	; (800c690 <HAL_IncTick+0x1c>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	001a      	movs	r2, r3
 800c67e:	4b05      	ldr	r3, [pc, #20]	; (800c694 <HAL_IncTick+0x20>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	18d2      	adds	r2, r2, r3
 800c684:	4b03      	ldr	r3, [pc, #12]	; (800c694 <HAL_IncTick+0x20>)
 800c686:	601a      	str	r2, [r3, #0]
}
 800c688:	46c0      	nop			; (mov r8, r8)
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	46c0      	nop			; (mov r8, r8)
 800c690:	20000120 	.word	0x20000120
 800c694:	20000a3c 	.word	0x20000a3c

0800c698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0
  return uwTick;
 800c69c:	4b02      	ldr	r3, [pc, #8]	; (800c6a8 <HAL_GetTick+0x10>)
 800c69e:	681b      	ldr	r3, [r3, #0]
}
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	20000a3c 	.word	0x20000a3c

0800c6ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c6b4:	f7ff fff0 	bl	800c698 <HAL_GetTick>
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	d005      	beq.n	800c6d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c6c6:	4b0a      	ldr	r3, [pc, #40]	; (800c6f0 <HAL_Delay+0x44>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	001a      	movs	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	189b      	adds	r3, r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	f7ff ffe0 	bl	800c698 <HAL_GetTick>
 800c6d8:	0002      	movs	r2, r0
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d8f7      	bhi.n	800c6d4 <HAL_Delay+0x28>
  {
  }
}
 800c6e4:	46c0      	nop			; (mov r8, r8)
 800c6e6:	46c0      	nop			; (mov r8, r8)
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	b004      	add	sp, #16
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	46c0      	nop			; (mov r8, r8)
 800c6f0:	20000120 	.word	0x20000120

0800c6f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800c6fc:	4b06      	ldr	r3, [pc, #24]	; (800c718 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a06      	ldr	r2, [pc, #24]	; (800c71c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800c702:	4013      	ands	r3, r2
 800c704:	0019      	movs	r1, r3
 800c706:	4b04      	ldr	r3, [pc, #16]	; (800c718 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	601a      	str	r2, [r3, #0]
}
 800c70e:	46c0      	nop			; (mov r8, r8)
 800c710:	46bd      	mov	sp, r7
 800c712:	b002      	add	sp, #8
 800c714:	bd80      	pop	{r7, pc}
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	40010000 	.word	0x40010000
 800c71c:	fffff9ff 	.word	0xfffff9ff

0800c720 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a05      	ldr	r2, [pc, #20]	; (800c744 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800c730:	401a      	ands	r2, r3
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	431a      	orrs	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	601a      	str	r2, [r3, #0]
}
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	46bd      	mov	sp, r7
 800c73e:	b002      	add	sp, #8
 800c740:	bd80      	pop	{r7, pc}
 800c742:	46c0      	nop			; (mov r8, r8)
 800c744:	fe3fffff 	.word	0xfe3fffff

0800c748 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	23e0      	movs	r3, #224	; 0xe0
 800c756:	045b      	lsls	r3, r3, #17
 800c758:	4013      	ands	r3, r2
}
 800c75a:	0018      	movs	r0, r3
 800c75c:	46bd      	mov	sp, r7
 800c75e:	b002      	add	sp, #8
 800c760:	bd80      	pop	{r7, pc}

0800c762 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	60f8      	str	r0, [r7, #12]
 800c76a:	60b9      	str	r1, [r7, #8]
 800c76c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	2104      	movs	r1, #4
 800c776:	400a      	ands	r2, r1
 800c778:	2107      	movs	r1, #7
 800c77a:	4091      	lsls	r1, r2
 800c77c:	000a      	movs	r2, r1
 800c77e:	43d2      	mvns	r2, r2
 800c780:	401a      	ands	r2, r3
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2104      	movs	r1, #4
 800c786:	400b      	ands	r3, r1
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	4099      	lsls	r1, r3
 800c78c:	000b      	movs	r3, r1
 800c78e:	431a      	orrs	r2, r3
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800c794:	46c0      	nop			; (mov r8, r8)
 800c796:	46bd      	mov	sp, r7
 800c798:	b004      	add	sp, #16
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	695b      	ldr	r3, [r3, #20]
 800c7aa:	683a      	ldr	r2, [r7, #0]
 800c7ac:	2104      	movs	r1, #4
 800c7ae:	400a      	ands	r2, r1
 800c7b0:	2107      	movs	r1, #7
 800c7b2:	4091      	lsls	r1, r2
 800c7b4:	000a      	movs	r2, r1
 800c7b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2104      	movs	r1, #4
 800c7bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800c7be:	40da      	lsrs	r2, r3
 800c7c0:	0013      	movs	r3, r2
}
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	b002      	add	sp, #8
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800c7ca:	b580      	push	{r7, lr}
 800c7cc:	b082      	sub	sp, #8
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68da      	ldr	r2, [r3, #12]
 800c7d6:	23c0      	movs	r3, #192	; 0xc0
 800c7d8:	011b      	lsls	r3, r3, #4
 800c7da:	4013      	ands	r3, r2
 800c7dc:	d101      	bne.n	800c7e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e000      	b.n	800c7e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	b002      	add	sp, #8
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	211f      	movs	r1, #31
 800c800:	400a      	ands	r2, r1
 800c802:	210f      	movs	r1, #15
 800c804:	4091      	lsls	r1, r2
 800c806:	000a      	movs	r2, r1
 800c808:	43d2      	mvns	r2, r2
 800c80a:	401a      	ands	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	0e9b      	lsrs	r3, r3, #26
 800c810:	210f      	movs	r1, #15
 800c812:	4019      	ands	r1, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	201f      	movs	r0, #31
 800c818:	4003      	ands	r3, r0
 800c81a:	4099      	lsls	r1, r3
 800c81c:	000b      	movs	r3, r1
 800c81e:	431a      	orrs	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c824:	46c0      	nop			; (mov r8, r8)
 800c826:	46bd      	mov	sp, r7
 800c828:	b004      	add	sp, #16
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	035b      	lsls	r3, r3, #13
 800c83e:	0b5b      	lsrs	r3, r3, #13
 800c840:	431a      	orrs	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c846:	46c0      	nop			; (mov r8, r8)
 800c848:	46bd      	mov	sp, r7
 800c84a:	b002      	add	sp, #8
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b082      	sub	sp, #8
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	0352      	lsls	r2, r2, #13
 800c860:	0b52      	lsrs	r2, r2, #13
 800c862:	43d2      	mvns	r2, r2
 800c864:	401a      	ands	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c86a:	46c0      	nop			; (mov r8, r8)
 800c86c:	46bd      	mov	sp, r7
 800c86e:	b002      	add	sp, #8
 800c870:	bd80      	pop	{r7, pc}

0800c872 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	2203      	movs	r2, #3
 800c880:	4013      	ands	r3, r2
}
 800c882:	0018      	movs	r0, r3
 800c884:	46bd      	mov	sp, r7
 800c886:	b002      	add	sp, #8
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	695b      	ldr	r3, [r3, #20]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	0212      	lsls	r2, r2, #8
 800c8a0:	43d2      	mvns	r2, r2
 800c8a2:	401a      	ands	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	6879      	ldr	r1, [r7, #4]
 800c8aa:	400b      	ands	r3, r1
 800c8ac:	4904      	ldr	r1, [pc, #16]	; (800c8c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800c8ae:	400b      	ands	r3, r1
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800c8b6:	46c0      	nop			; (mov r8, r8)
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	b004      	add	sp, #16
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	46c0      	nop			; (mov r8, r8)
 800c8c0:	07ffff00 	.word	0x07ffff00

0800c8c4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
  *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b086      	sub	sp, #24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg;

  if (AWDy == LL_ADC_AWD1)
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	4a11      	ldr	r2, [pc, #68]	; (800c918 <LL_ADC_SetAnalogWDMonitChannels+0x54>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d103      	bne.n	800c8e0 <LL_ADC_SetAnalogWDMonitChannels+0x1c>
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	330c      	adds	r3, #12
 800c8dc:	617b      	str	r3, [r7, #20]
 800c8de:	e009      	b.n	800c8f4 <LL_ADC_SetAnalogWDMonitChannels+0x30>
  }
  else
  {
    preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR,
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	33a0      	adds	r3, #160	; 0xa0
 800c8e4:	0019      	movs	r1, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	0d5b      	lsrs	r3, r3, #21
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	18cb      	adds	r3, r1, r3
 800c8f2:	617b      	str	r3, [r7, #20]
                                ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL));
  }

  MODIFY_REG(*preg,
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	4908      	ldr	r1, [pc, #32]	; (800c91c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 800c8fc:	400a      	ands	r2, r1
 800c8fe:	43d2      	mvns	r2, r2
 800c900:	401a      	ands	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	400b      	ands	r3, r1
 800c908:	431a      	orrs	r2, r3
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	46bd      	mov	sp, r7
 800c912:	b006      	add	sp, #24
 800c914:	bd80      	pop	{r7, pc}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	7cc00000 	.word	0x7cc00000
 800c91c:	7cc7ffff 	.word	0x7cc7ffff

0800c920 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->AWD1TR,
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3320      	adds	r3, #32
 800c932:	0018      	movs	r0, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	0d1b      	lsrs	r3, r3, #20
 800c938:	2203      	movs	r2, #3
 800c93a:	401a      	ands	r2, r3
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	0d5b      	lsrs	r3, r3, #21
 800c940:	2101      	movs	r1, #1
 800c942:	400b      	ands	r3, r1
 800c944:	18d3      	adds	r3, r2, r3
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	18c3      	adds	r3, r0, r3
 800c94a:	617b      	str	r3, [r7, #20]
                                              >> (ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS))
                                             + ((ADC_AWD_CR3_REGOFFSET & AWDy)
                                                >> (ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS + 1UL))
                                            );

  MODIFY_REG(*preg,
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a06      	ldr	r2, [pc, #24]	; (800c96c <LL_ADC_ConfigAnalogWDThresholds+0x4c>)
 800c952:	401a      	ands	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	0419      	lsls	r1, r3, #16
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	430b      	orrs	r3, r1
 800c95c:	431a      	orrs	r2, r3
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	601a      	str	r2, [r3, #0]
             ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	46bd      	mov	sp, r7
 800c966:	b006      	add	sp, #24
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	46c0      	nop			; (mov r8, r8)
 800c96c:	f000f000 	.word	0xf000f000

0800c970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	4a05      	ldr	r2, [pc, #20]	; (800c994 <LL_ADC_EnableInternalRegulator+0x24>)
 800c97e:	4013      	ands	r3, r2
 800c980:	2280      	movs	r2, #128	; 0x80
 800c982:	0552      	lsls	r2, r2, #21
 800c984:	431a      	orrs	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800c98a:	46c0      	nop			; (mov r8, r8)
 800c98c:	46bd      	mov	sp, r7
 800c98e:	b002      	add	sp, #8
 800c990:	bd80      	pop	{r7, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	6fffffe8 	.word	0x6fffffe8

0800c998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	2380      	movs	r3, #128	; 0x80
 800c9a6:	055b      	lsls	r3, r3, #21
 800c9a8:	401a      	ands	r2, r3
 800c9aa:	2380      	movs	r3, #128	; 0x80
 800c9ac:	055b      	lsls	r3, r3, #21
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d101      	bne.n	800c9b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e000      	b.n	800c9b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	0018      	movs	r0, r3
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	b002      	add	sp, #8
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <LL_ADC_Enable+0x20>)
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800c9d8:	46c0      	nop			; (mov r8, r8)
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b002      	add	sp, #8
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	7fffffe8 	.word	0x7fffffe8

0800c9e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <LL_ADC_Disable+0x20>)
 800c9f2:	4013      	ands	r3, r2
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800c9fc:	46c0      	nop			; (mov r8, r8)
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	b002      	add	sp, #8
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	7fffffe8 	.word	0x7fffffe8

0800ca08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2201      	movs	r2, #1
 800ca16:	4013      	ands	r3, r2
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d101      	bne.n	800ca20 <LL_ADC_IsEnabled+0x18>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e000      	b.n	800ca22 <LL_ADC_IsEnabled+0x1a>
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	0018      	movs	r0, r3
 800ca24:	46bd      	mov	sp, r7
 800ca26:	b002      	add	sp, #8
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b082      	sub	sp, #8
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	2202      	movs	r2, #2
 800ca38:	4013      	ands	r3, r2
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	d101      	bne.n	800ca42 <LL_ADC_IsDisableOngoing+0x18>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e000      	b.n	800ca44 <LL_ADC_IsDisableOngoing+0x1a>
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	0018      	movs	r0, r3
 800ca46:	46bd      	mov	sp, r7
 800ca48:	b002      	add	sp, #8
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	4a04      	ldr	r2, [pc, #16]	; (800ca6c <LL_ADC_REG_StartConversion+0x20>)
 800ca5a:	4013      	ands	r3, r2
 800ca5c:	2204      	movs	r2, #4
 800ca5e:	431a      	orrs	r2, r3
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800ca64:	46c0      	nop			; (mov r8, r8)
 800ca66:	46bd      	mov	sp, r7
 800ca68:	b002      	add	sp, #8
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	7fffffe8 	.word	0x7fffffe8

0800ca70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	2204      	movs	r2, #4
 800ca7e:	4013      	ands	r3, r2
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d101      	bne.n	800ca88 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ca84:	2301      	movs	r3, #1
 800ca86:	e000      	b.n	800ca8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	0018      	movs	r0, r3
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	b002      	add	sp, #8
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2280      	movs	r2, #128	; 0x80
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	46c0      	nop			; (mov r8, r8)
 800caa2:	46bd      	mov	sp, r7
 800caa4:	b002      	add	sp, #8
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2280      	movs	r2, #128	; 0x80
 800cab4:	0052      	lsls	r2, r2, #1
 800cab6:	601a      	str	r2, [r3, #0]
}
 800cab8:	46c0      	nop			; (mov r8, r8)
 800caba:	46bd      	mov	sp, r7
 800cabc:	b002      	add	sp, #8
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2280      	movs	r2, #128	; 0x80
 800cacc:	0092      	lsls	r2, r2, #2
 800cace:	601a      	str	r2, [r3, #0]
}
 800cad0:	46c0      	nop			; (mov r8, r8)
 800cad2:	46bd      	mov	sp, r7
 800cad4:	b002      	add	sp, #8
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	2280      	movs	r2, #128	; 0x80
 800cae6:	431a      	orrs	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	605a      	str	r2, [r3, #4]
}
 800caec:	46c0      	nop			; (mov r8, r8)
 800caee:	46bd      	mov	sp, r7
 800caf0:	b002      	add	sp, #8
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2280      	movs	r2, #128	; 0x80
 800cb02:	0052      	lsls	r2, r2, #1
 800cb04:	431a      	orrs	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	605a      	str	r2, [r3, #4]
}
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	b002      	add	sp, #8
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b082      	sub	sp, #8
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	2280      	movs	r2, #128	; 0x80
 800cb20:	0092      	lsls	r2, r2, #2
 800cb22:	431a      	orrs	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	605a      	str	r2, [r3, #4]
}
 800cb28:	46c0      	nop			; (mov r8, r8)
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	b002      	add	sp, #8
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	2280      	movs	r2, #128	; 0x80
 800cb3e:	4393      	bics	r3, r2
 800cb40:	001a      	movs	r2, r3
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	605a      	str	r2, [r3, #4]
}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	b002      	add	sp, #8
 800cb4c:	bd80      	pop	{r7, pc}
	...

0800cb50 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	4a03      	ldr	r2, [pc, #12]	; (800cb6c <LL_ADC_DisableIT_AWD2+0x1c>)
 800cb5e:	401a      	ands	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	605a      	str	r2, [r3, #4]
}
 800cb64:	46c0      	nop			; (mov r8, r8)
 800cb66:	46bd      	mov	sp, r7
 800cb68:	b002      	add	sp, #8
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	fffffeff 	.word	0xfffffeff

0800cb70 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	4a03      	ldr	r2, [pc, #12]	; (800cb8c <LL_ADC_DisableIT_AWD3+0x1c>)
 800cb7e:	401a      	ands	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	605a      	str	r2, [r3, #4]
}
 800cb84:	46c0      	nop			; (mov r8, r8)
 800cb86:	46bd      	mov	sp, r7
 800cb88:	b002      	add	sp, #8
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	fffffdff 	.word	0xfffffdff

0800cb90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cb98:	231f      	movs	r3, #31
 800cb9a:	18fb      	adds	r3, r7, r3
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800cba4:	2300      	movs	r3, #0
 800cba6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e17f      	b.n	800ceb6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10a      	bne.n	800cbd4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f7ff f8ff 	bl	800bdc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2254      	movs	r2, #84	; 0x54
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7ff fedd 	bl	800c998 <LL_ADC_IsInternalRegulatorEnabled>
 800cbde:	1e03      	subs	r3, r0, #0
 800cbe0:	d115      	bne.n	800cc0e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	0018      	movs	r0, r3
 800cbe8:	f7ff fec2 	bl	800c970 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800cbec:	4bb4      	ldr	r3, [pc, #720]	; (800cec0 <HAL_ADC_Init+0x330>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	49b4      	ldr	r1, [pc, #720]	; (800cec4 <HAL_ADC_Init+0x334>)
 800cbf2:	0018      	movs	r0, r3
 800cbf4:	f7f9 fb10 	bl	8006218 <__udivsi3>
 800cbf8:	0003      	movs	r3, r0
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800cc00:	e002      	b.n	800cc08 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f9      	bne.n	800cc02 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	0018      	movs	r0, r3
 800cc14:	f7ff fec0 	bl	800c998 <LL_ADC_IsInternalRegulatorEnabled>
 800cc18:	1e03      	subs	r3, r0, #0
 800cc1a:	d10f      	bne.n	800cc3c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc20:	2210      	movs	r2, #16
 800cc22:	431a      	orrs	r2, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	431a      	orrs	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800cc34:	231f      	movs	r3, #31
 800cc36:	18fb      	adds	r3, r7, r3
 800cc38:	2201      	movs	r2, #1
 800cc3a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	0018      	movs	r0, r3
 800cc42:	f7ff ff15 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800cc46:	0003      	movs	r3, r0
 800cc48:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc4e:	2210      	movs	r2, #16
 800cc50:	4013      	ands	r3, r2
 800cc52:	d000      	beq.n	800cc56 <HAL_ADC_Init+0xc6>
 800cc54:	e122      	b.n	800ce9c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d000      	beq.n	800cc5e <HAL_ADC_Init+0xce>
 800cc5c:	e11e      	b.n	800ce9c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc62:	4a99      	ldr	r2, [pc, #612]	; (800cec8 <HAL_ADC_Init+0x338>)
 800cc64:	4013      	ands	r3, r2
 800cc66:	2202      	movs	r2, #2
 800cc68:	431a      	orrs	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	0018      	movs	r0, r3
 800cc74:	f7ff fec8 	bl	800ca08 <LL_ADC_IsEnabled>
 800cc78:	1e03      	subs	r3, r0, #0
 800cc7a:	d000      	beq.n	800cc7e <HAL_ADC_Init+0xee>
 800cc7c:	e0ad      	b.n	800cdda <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	7e1b      	ldrb	r3, [r3, #24]
 800cc86:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800cc88:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7e5b      	ldrb	r3, [r3, #25]
 800cc8e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800cc90:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	7e9b      	ldrb	r3, [r3, #26]
 800cc96:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800cc98:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d002      	beq.n	800cca8 <HAL_ADC_Init+0x118>
 800cca2:	2380      	movs	r3, #128	; 0x80
 800cca4:	015b      	lsls	r3, r3, #5
 800cca6:	e000      	b.n	800ccaa <HAL_ADC_Init+0x11a>
 800cca8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800ccaa:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800ccb0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da04      	bge.n	800ccc4 <HAL_ADC_Init+0x134>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	005b      	lsls	r3, r3, #1
 800ccc0:	085b      	lsrs	r3, r3, #1
 800ccc2:	e001      	b.n	800ccc8 <HAL_ADC_Init+0x138>
 800ccc4:	2380      	movs	r3, #128	; 0x80
 800ccc6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800ccc8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	212c      	movs	r1, #44	; 0x2c
 800ccce:	5c5b      	ldrb	r3, [r3, r1]
 800ccd0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800ccd2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2220      	movs	r2, #32
 800ccde:	5c9b      	ldrb	r3, [r3, r2]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d115      	bne.n	800cd10 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	7e9b      	ldrb	r3, [r3, #26]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d105      	bne.n	800ccf8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	2280      	movs	r2, #128	; 0x80
 800ccf0:	0252      	lsls	r2, r2, #9
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	e00b      	b.n	800cd10 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccfc:	2220      	movs	r2, #32
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd08:	2201      	movs	r2, #1
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd1c:	23e0      	movs	r3, #224	; 0xe0
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800cd26:	4313      	orrs	r3, r2
 800cd28:	69ba      	ldr	r2, [r7, #24]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	4a65      	ldr	r2, [pc, #404]	; (800cecc <HAL_ADC_Init+0x33c>)
 800cd36:	4013      	ands	r3, r2
 800cd38:	0019      	movs	r1, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	69ba      	ldr	r2, [r7, #24]
 800cd40:	430a      	orrs	r2, r1
 800cd42:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	0f9b      	lsrs	r3, r3, #30
 800cd4a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800cd50:	4313      	orrs	r3, r2
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	223c      	movs	r2, #60	; 0x3c
 800cd5c:	5c9b      	ldrb	r3, [r3, r2]
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d111      	bne.n	800cd86 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	0f9b      	lsrs	r3, r3, #30
 800cd68:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800cd6e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 800cd74:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800cd7a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	2201      	movs	r2, #1
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	4a50      	ldr	r2, [pc, #320]	; (800ced0 <HAL_ADC_Init+0x340>)
 800cd8e:	4013      	ands	r3, r2
 800cd90:	0019      	movs	r1, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685a      	ldr	r2, [r3, #4]
 800cda0:	23c0      	movs	r3, #192	; 0xc0
 800cda2:	061b      	lsls	r3, r3, #24
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d018      	beq.n	800cdda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800cdac:	2380      	movs	r3, #128	; 0x80
 800cdae:	05db      	lsls	r3, r3, #23
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d012      	beq.n	800cdda <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800cdb8:	2380      	movs	r3, #128	; 0x80
 800cdba:	061b      	lsls	r3, r3, #24
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d00c      	beq.n	800cdda <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800cdc0:	4b44      	ldr	r3, [pc, #272]	; (800ced4 <HAL_ADC_Init+0x344>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a44      	ldr	r2, [pc, #272]	; (800ced8 <HAL_ADC_Init+0x348>)
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	0019      	movs	r1, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	23f0      	movs	r3, #240	; 0xf0
 800cdd0:	039b      	lsls	r3, r3, #14
 800cdd2:	401a      	ands	r2, r3
 800cdd4:	4b3f      	ldr	r3, [pc, #252]	; (800ced4 <HAL_ADC_Init+0x344>)
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6818      	ldr	r0, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cde2:	001a      	movs	r2, r3
 800cde4:	2100      	movs	r1, #0
 800cde6:	f7ff fcbc 	bl	800c762 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6818      	ldr	r0, [r3, #0]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	493a      	ldr	r1, [pc, #232]	; (800cedc <HAL_ADC_Init+0x34c>)
 800cdf4:	001a      	movs	r2, r3
 800cdf6:	f7ff fcb4 	bl	800c762 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d109      	bne.n	800ce16 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2110      	movs	r1, #16
 800ce0e:	4249      	negs	r1, r1
 800ce10:	430a      	orrs	r2, r1
 800ce12:	629a      	str	r2, [r3, #40]	; 0x28
 800ce14:	e018      	b.n	800ce48 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691a      	ldr	r2, [r3, #16]
 800ce1a:	2380      	movs	r3, #128	; 0x80
 800ce1c:	039b      	lsls	r3, r3, #14
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d112      	bne.n	800ce48 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	221c      	movs	r2, #28
 800ce32:	4013      	ands	r3, r2
 800ce34:	2210      	movs	r2, #16
 800ce36:	4252      	negs	r2, r2
 800ce38:	409a      	lsls	r2, r3
 800ce3a:	0011      	movs	r1, r2
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	430a      	orrs	r2, r1
 800ce46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	0018      	movs	r0, r3
 800ce50:	f7ff fca4 	bl	800c79c <LL_ADC_GetSamplingTimeCommonChannels>
 800ce54:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d10b      	bne.n	800ce76 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce68:	2203      	movs	r2, #3
 800ce6a:	4393      	bics	r3, r2
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	431a      	orrs	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ce74:	e01c      	b.n	800ceb0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce7a:	2212      	movs	r2, #18
 800ce7c:	4393      	bics	r3, r2
 800ce7e:	2210      	movs	r2, #16
 800ce80:	431a      	orrs	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	431a      	orrs	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800ce92:	231f      	movs	r3, #31
 800ce94:	18fb      	adds	r3, r7, r3
 800ce96:	2201      	movs	r2, #1
 800ce98:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800ce9a:	e009      	b.n	800ceb0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cea0:	2210      	movs	r2, #16
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800cea8:	231f      	movs	r3, #31
 800ceaa:	18fb      	adds	r3, r7, r3
 800ceac:	2201      	movs	r2, #1
 800ceae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800ceb0:	231f      	movs	r3, #31
 800ceb2:	18fb      	adds	r3, r7, r3
 800ceb4:	781b      	ldrb	r3, [r3, #0]
}
 800ceb6:	0018      	movs	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	b008      	add	sp, #32
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	20000118 	.word	0x20000118
 800cec4:	00030d40 	.word	0x00030d40
 800cec8:	fffffefd 	.word	0xfffffefd
 800cecc:	ffde0201 	.word	0xffde0201
 800ced0:	1ffffc02 	.word	0x1ffffc02
 800ced4:	40012708 	.word	0x40012708
 800ced8:	ffc3ffff 	.word	0xffc3ffff
 800cedc:	07ffff04 	.word	0x07ffff04

0800cee0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800cee0:	b5b0      	push	{r4, r5, r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	0018      	movs	r0, r3
 800cef2:	f7ff fdbd 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800cef6:	1e03      	subs	r3, r0, #0
 800cef8:	d16c      	bne.n	800cfd4 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2254      	movs	r2, #84	; 0x54
 800cefe:	5c9b      	ldrb	r3, [r3, r2]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d101      	bne.n	800cf08 <HAL_ADC_Start_DMA+0x28>
 800cf04:	2302      	movs	r3, #2
 800cf06:	e06c      	b.n	800cfe2 <HAL_ADC_Start_DMA+0x102>
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2254      	movs	r2, #84	; 0x54
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	68db      	ldr	r3, [r3, #12]
 800cf16:	2201      	movs	r2, #1
 800cf18:	4013      	ands	r3, r2
 800cf1a:	d113      	bne.n	800cf44 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	0018      	movs	r0, r3
 800cf22:	f7ff fd71 	bl	800ca08 <LL_ADC_IsEnabled>
 800cf26:	1e03      	subs	r3, r0, #0
 800cf28:	d004      	beq.n	800cf34 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	0018      	movs	r0, r3
 800cf30:	f7ff fd58 	bl	800c9e4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2101      	movs	r1, #1
 800cf40:	430a      	orrs	r2, r1
 800cf42:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800cf44:	2517      	movs	r5, #23
 800cf46:	197c      	adds	r4, r7, r5
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f000 fe08 	bl	800db60 <ADC_Enable>
 800cf50:	0003      	movs	r3, r0
 800cf52:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800cf54:	002c      	movs	r4, r5
 800cf56:	193b      	adds	r3, r7, r4
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d13e      	bne.n	800cfdc <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf62:	4a22      	ldr	r2, [pc, #136]	; (800cfec <HAL_ADC_Start_DMA+0x10c>)
 800cf64:	4013      	ands	r3, r2
 800cf66:	2280      	movs	r2, #128	; 0x80
 800cf68:	0052      	lsls	r2, r2, #1
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf7a:	4a1d      	ldr	r2, [pc, #116]	; (800cff0 <HAL_ADC_Start_DMA+0x110>)
 800cf7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf82:	4a1c      	ldr	r2, [pc, #112]	; (800cff4 <HAL_ADC_Start_DMA+0x114>)
 800cf84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf8a:	4a1b      	ldr	r2, [pc, #108]	; (800cff8 <HAL_ADC_Start_DMA+0x118>)
 800cf8c:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	221c      	movs	r2, #28
 800cf94:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2254      	movs	r2, #84	; 0x54
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2110      	movs	r1, #16
 800cfaa:	430a      	orrs	r2, r1
 800cfac:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	3340      	adds	r3, #64	; 0x40
 800cfb8:	0019      	movs	r1, r3
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	193c      	adds	r4, r7, r4
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f001 fc98 	bl	800e8f4 <HAL_DMA_Start_IT>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f7ff fd3d 	bl	800ca4c <LL_ADC_REG_StartConversion>
 800cfd2:	e003      	b.n	800cfdc <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800cfd4:	2317      	movs	r3, #23
 800cfd6:	18fb      	adds	r3, r7, r3
 800cfd8:	2202      	movs	r2, #2
 800cfda:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800cfdc:	2317      	movs	r3, #23
 800cfde:	18fb      	adds	r3, r7, r3
 800cfe0:	781b      	ldrb	r3, [r3, #0]
}
 800cfe2:	0018      	movs	r0, r3
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	b006      	add	sp, #24
 800cfe8:	bdb0      	pop	{r4, r5, r7, pc}
 800cfea:	46c0      	nop			; (mov r8, r8)
 800cfec:	fffff0fe 	.word	0xfffff0fe
 800cff0:	0800dd29 	.word	0x0800dd29
 800cff4:	0800ddf1 	.word	0x0800ddf1
 800cff8:	0800de0f 	.word	0x0800de0f

0800cffc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	2202      	movs	r2, #2
 800d01c:	4013      	ands	r3, r2
 800d01e:	d017      	beq.n	800d050 <HAL_ADC_IRQHandler+0x54>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2202      	movs	r2, #2
 800d024:	4013      	ands	r3, r2
 800d026:	d013      	beq.n	800d050 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d02c:	2210      	movs	r2, #16
 800d02e:	4013      	ands	r3, r2
 800d030:	d106      	bne.n	800d040 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d036:	2280      	movs	r2, #128	; 0x80
 800d038:	0112      	lsls	r2, r2, #4
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	0018      	movs	r0, r3
 800d044:	f001 f89a 	bl	800e17c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	2202      	movs	r2, #2
 800d04e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2204      	movs	r2, #4
 800d054:	4013      	ands	r3, r2
 800d056:	d003      	beq.n	800d060 <HAL_ADC_IRQHandler+0x64>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2204      	movs	r2, #4
 800d05c:	4013      	ands	r3, r2
 800d05e:	d107      	bne.n	800d070 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2208      	movs	r2, #8
 800d064:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800d066:	d04d      	beq.n	800d104 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2208      	movs	r2, #8
 800d06c:	4013      	ands	r3, r2
 800d06e:	d049      	beq.n	800d104 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d074:	2210      	movs	r2, #16
 800d076:	4013      	ands	r3, r2
 800d078:	d106      	bne.n	800d088 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d07e:	2280      	movs	r2, #128	; 0x80
 800d080:	0092      	lsls	r2, r2, #2
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	0018      	movs	r0, r3
 800d08e:	f7ff fb9c 	bl	800c7ca <LL_ADC_REG_IsTriggerSourceSWStart>
 800d092:	1e03      	subs	r3, r0, #0
 800d094:	d02e      	beq.n	800d0f4 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	7e9b      	ldrb	r3, [r3, #26]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d12a      	bne.n	800d0f4 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2208      	movs	r2, #8
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d123      	bne.n	800d0f4 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	f7ff fcdd 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800d0b6:	1e03      	subs	r3, r0, #0
 800d0b8:	d110      	bne.n	800d0dc <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	210c      	movs	r1, #12
 800d0c6:	438a      	bics	r2, r1
 800d0c8:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ce:	4a56      	ldr	r2, [pc, #344]	; (800d228 <HAL_ADC_IRQHandler+0x22c>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	431a      	orrs	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	659a      	str	r2, [r3, #88]	; 0x58
 800d0da:	e00b      	b.n	800d0f4 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e0:	2220      	movs	r2, #32
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	431a      	orrs	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	0018      	movs	r0, r3
 800d0f8:	f7fb fa84 	bl	8008604 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	220c      	movs	r2, #12
 800d102:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	2280      	movs	r2, #128	; 0x80
 800d108:	4013      	ands	r3, r2
 800d10a:	d012      	beq.n	800d132 <HAL_ADC_IRQHandler+0x136>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2280      	movs	r2, #128	; 0x80
 800d110:	4013      	ands	r3, r2
 800d112:	d00e      	beq.n	800d132 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d118:	2280      	movs	r2, #128	; 0x80
 800d11a:	0252      	lsls	r2, r2, #9
 800d11c:	431a      	orrs	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	0018      	movs	r0, r3
 800d126:	f000 f889 	bl	800d23c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2280      	movs	r2, #128	; 0x80
 800d130:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800d132:	693a      	ldr	r2, [r7, #16]
 800d134:	2380      	movs	r3, #128	; 0x80
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	4013      	ands	r3, r2
 800d13a:	d014      	beq.n	800d166 <HAL_ADC_IRQHandler+0x16a>
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	2380      	movs	r3, #128	; 0x80
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	4013      	ands	r3, r2
 800d144:	d00f      	beq.n	800d166 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14a:	2280      	movs	r2, #128	; 0x80
 800d14c:	0292      	lsls	r2, r2, #10
 800d14e:	431a      	orrs	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	0018      	movs	r0, r3
 800d158:	f7fb fa64 	bl	8008624 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2280      	movs	r2, #128	; 0x80
 800d162:	0052      	lsls	r2, r2, #1
 800d164:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800d166:	693a      	ldr	r2, [r7, #16]
 800d168:	2380      	movs	r3, #128	; 0x80
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4013      	ands	r3, r2
 800d16e:	d014      	beq.n	800d19a <HAL_ADC_IRQHandler+0x19e>
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	2380      	movs	r3, #128	; 0x80
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4013      	ands	r3, r2
 800d178:	d00f      	beq.n	800d19a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d17e:	2280      	movs	r2, #128	; 0x80
 800d180:	02d2      	lsls	r2, r2, #11
 800d182:	431a      	orrs	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	0018      	movs	r0, r3
 800d18c:	f000 ffee 	bl	800e16c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2280      	movs	r2, #128	; 0x80
 800d196:	0092      	lsls	r2, r2, #2
 800d198:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2210      	movs	r2, #16
 800d19e:	4013      	ands	r3, r2
 800d1a0:	d02b      	beq.n	800d1fa <HAL_ADC_IRQHandler+0x1fe>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2210      	movs	r2, #16
 800d1a6:	4013      	ands	r3, r2
 800d1a8:	d027      	beq.n	800d1fa <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d102      	bne.n	800d1b8 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	617b      	str	r3, [r7, #20]
 800d1b6:	e008      	b.n	800d1ca <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	0018      	movs	r0, r3
 800d1be:	f7ff fb58 	bl	800c872 <LL_ADC_REG_GetDMATransfer>
 800d1c2:	1e03      	subs	r3, r0, #0
 800d1c4:	d001      	beq.n	800d1ca <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d110      	bne.n	800d1f2 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d4:	2280      	movs	r2, #128	; 0x80
 800d1d6:	00d2      	lsls	r2, r2, #3
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1e2:	2202      	movs	r2, #2
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	0018      	movs	r0, r3
 800d1ee:	f000 f82d 	bl	800d24c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2210      	movs	r2, #16
 800d1f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	2380      	movs	r3, #128	; 0x80
 800d1fe:	019b      	lsls	r3, r3, #6
 800d200:	4013      	ands	r3, r2
 800d202:	d00d      	beq.n	800d220 <HAL_ADC_IRQHandler+0x224>
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	2380      	movs	r3, #128	; 0x80
 800d208:	019b      	lsls	r3, r3, #6
 800d20a:	4013      	ands	r3, r2
 800d20c:	d008      	beq.n	800d220 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	0018      	movs	r0, r3
 800d212:	f000 ffbb 	bl	800e18c <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2280      	movs	r2, #128	; 0x80
 800d21c:	0192      	lsls	r2, r2, #6
 800d21e:	601a      	str	r2, [r3, #0]
  }
}
 800d220:	46c0      	nop			; (mov r8, r8)
 800d222:	46bd      	mov	sp, r7
 800d224:	b006      	add	sp, #24
 800d226:	bd80      	pop	{r7, pc}
 800d228:	fffffefe 	.word	0xfffffefe

0800d22c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800d234:	46c0      	nop			; (mov r8, r8)
 800d236:	46bd      	mov	sp, r7
 800d238:	b002      	add	sp, #8
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800d244:	46c0      	nop			; (mov r8, r8)
 800d246:	46bd      	mov	sp, r7
 800d248:	b002      	add	sp, #8
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800d254:	46c0      	nop			; (mov r8, r8)
 800d256:	46bd      	mov	sp, r7
 800d258:	b002      	add	sp, #8
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d266:	2317      	movs	r3, #23
 800d268:	18fb      	adds	r3, r7, r3
 800d26a:	2200      	movs	r2, #0
 800d26c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800d26e:	2300      	movs	r3, #0
 800d270:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2254      	movs	r2, #84	; 0x54
 800d276:	5c9b      	ldrb	r3, [r3, r2]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d101      	bne.n	800d280 <HAL_ADC_ConfigChannel+0x24>
 800d27c:	2302      	movs	r3, #2
 800d27e:	e1c0      	b.n	800d602 <HAL_ADC_ConfigChannel+0x3a6>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2254      	movs	r2, #84	; 0x54
 800d284:	2101      	movs	r1, #1
 800d286:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	0018      	movs	r0, r3
 800d28e:	f7ff fbef 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800d292:	1e03      	subs	r3, r0, #0
 800d294:	d000      	beq.n	800d298 <HAL_ADC_ConfigChannel+0x3c>
 800d296:	e1a3      	b.n	800d5e0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d100      	bne.n	800d2a2 <HAL_ADC_ConfigChannel+0x46>
 800d2a0:	e143      	b.n	800d52a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	691a      	ldr	r2, [r3, #16]
 800d2a6:	2380      	movs	r3, #128	; 0x80
 800d2a8:	061b      	lsls	r3, r3, #24
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d004      	beq.n	800d2b8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d2b2:	4ac1      	ldr	r2, [pc, #772]	; (800d5b8 <HAL_ADC_ConfigChannel+0x35c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d108      	bne.n	800d2ca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	0019      	movs	r1, r3
 800d2c2:	0010      	movs	r0, r2
 800d2c4:	f7ff fab2 	bl	800c82c <LL_ADC_REG_SetSequencerChAdd>
 800d2c8:	e0c9      	b.n	800d45e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	685b      	ldr	r3, [r3, #4]
 800d2d2:	211f      	movs	r1, #31
 800d2d4:	400b      	ands	r3, r1
 800d2d6:	210f      	movs	r1, #15
 800d2d8:	4099      	lsls	r1, r3
 800d2da:	000b      	movs	r3, r1
 800d2dc:	43db      	mvns	r3, r3
 800d2de:	4013      	ands	r3, r2
 800d2e0:	0019      	movs	r1, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	035b      	lsls	r3, r3, #13
 800d2e8:	0b5b      	lsrs	r3, r3, #13
 800d2ea:	d105      	bne.n	800d2f8 <HAL_ADC_ConfigChannel+0x9c>
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	0e9b      	lsrs	r3, r3, #26
 800d2f2:	221f      	movs	r2, #31
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	e098      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	4013      	ands	r3, r2
 800d300:	d000      	beq.n	800d304 <HAL_ADC_ConfigChannel+0xa8>
 800d302:	e091      	b.n	800d428 <HAL_ADC_ConfigChannel+0x1cc>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2202      	movs	r2, #2
 800d30a:	4013      	ands	r3, r2
 800d30c:	d000      	beq.n	800d310 <HAL_ADC_ConfigChannel+0xb4>
 800d30e:	e089      	b.n	800d424 <HAL_ADC_ConfigChannel+0x1c8>
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2204      	movs	r2, #4
 800d316:	4013      	ands	r3, r2
 800d318:	d000      	beq.n	800d31c <HAL_ADC_ConfigChannel+0xc0>
 800d31a:	e081      	b.n	800d420 <HAL_ADC_ConfigChannel+0x1c4>
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2208      	movs	r2, #8
 800d322:	4013      	ands	r3, r2
 800d324:	d000      	beq.n	800d328 <HAL_ADC_ConfigChannel+0xcc>
 800d326:	e079      	b.n	800d41c <HAL_ADC_ConfigChannel+0x1c0>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2210      	movs	r2, #16
 800d32e:	4013      	ands	r3, r2
 800d330:	d000      	beq.n	800d334 <HAL_ADC_ConfigChannel+0xd8>
 800d332:	e071      	b.n	800d418 <HAL_ADC_ConfigChannel+0x1bc>
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2220      	movs	r2, #32
 800d33a:	4013      	ands	r3, r2
 800d33c:	d000      	beq.n	800d340 <HAL_ADC_ConfigChannel+0xe4>
 800d33e:	e069      	b.n	800d414 <HAL_ADC_ConfigChannel+0x1b8>
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2240      	movs	r2, #64	; 0x40
 800d346:	4013      	ands	r3, r2
 800d348:	d000      	beq.n	800d34c <HAL_ADC_ConfigChannel+0xf0>
 800d34a:	e061      	b.n	800d410 <HAL_ADC_ConfigChannel+0x1b4>
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2280      	movs	r2, #128	; 0x80
 800d352:	4013      	ands	r3, r2
 800d354:	d000      	beq.n	800d358 <HAL_ADC_ConfigChannel+0xfc>
 800d356:	e059      	b.n	800d40c <HAL_ADC_ConfigChannel+0x1b0>
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	2380      	movs	r3, #128	; 0x80
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	4013      	ands	r3, r2
 800d362:	d151      	bne.n	800d408 <HAL_ADC_ConfigChannel+0x1ac>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	2380      	movs	r3, #128	; 0x80
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4013      	ands	r3, r2
 800d36e:	d149      	bne.n	800d404 <HAL_ADC_ConfigChannel+0x1a8>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	2380      	movs	r3, #128	; 0x80
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	4013      	ands	r3, r2
 800d37a:	d141      	bne.n	800d400 <HAL_ADC_ConfigChannel+0x1a4>
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	2380      	movs	r3, #128	; 0x80
 800d382:	011b      	lsls	r3, r3, #4
 800d384:	4013      	ands	r3, r2
 800d386:	d139      	bne.n	800d3fc <HAL_ADC_ConfigChannel+0x1a0>
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	2380      	movs	r3, #128	; 0x80
 800d38e:	015b      	lsls	r3, r3, #5
 800d390:	4013      	ands	r3, r2
 800d392:	d131      	bne.n	800d3f8 <HAL_ADC_ConfigChannel+0x19c>
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	2380      	movs	r3, #128	; 0x80
 800d39a:	019b      	lsls	r3, r3, #6
 800d39c:	4013      	ands	r3, r2
 800d39e:	d129      	bne.n	800d3f4 <HAL_ADC_ConfigChannel+0x198>
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	2380      	movs	r3, #128	; 0x80
 800d3a6:	01db      	lsls	r3, r3, #7
 800d3a8:	4013      	ands	r3, r2
 800d3aa:	d121      	bne.n	800d3f0 <HAL_ADC_ConfigChannel+0x194>
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	2380      	movs	r3, #128	; 0x80
 800d3b2:	021b      	lsls	r3, r3, #8
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	d119      	bne.n	800d3ec <HAL_ADC_ConfigChannel+0x190>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	2380      	movs	r3, #128	; 0x80
 800d3be:	025b      	lsls	r3, r3, #9
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	d111      	bne.n	800d3e8 <HAL_ADC_ConfigChannel+0x18c>
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	2380      	movs	r3, #128	; 0x80
 800d3ca:	029b      	lsls	r3, r3, #10
 800d3cc:	4013      	ands	r3, r2
 800d3ce:	d109      	bne.n	800d3e4 <HAL_ADC_ConfigChannel+0x188>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	2380      	movs	r3, #128	; 0x80
 800d3d6:	02db      	lsls	r3, r3, #11
 800d3d8:	4013      	ands	r3, r2
 800d3da:	d001      	beq.n	800d3e0 <HAL_ADC_ConfigChannel+0x184>
 800d3dc:	2312      	movs	r3, #18
 800d3de:	e024      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e022      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3e4:	2311      	movs	r3, #17
 800d3e6:	e020      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3e8:	2310      	movs	r3, #16
 800d3ea:	e01e      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3ec:	230f      	movs	r3, #15
 800d3ee:	e01c      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3f0:	230e      	movs	r3, #14
 800d3f2:	e01a      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3f4:	230d      	movs	r3, #13
 800d3f6:	e018      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3f8:	230c      	movs	r3, #12
 800d3fa:	e016      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d3fc:	230b      	movs	r3, #11
 800d3fe:	e014      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d400:	230a      	movs	r3, #10
 800d402:	e012      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d404:	2309      	movs	r3, #9
 800d406:	e010      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d408:	2308      	movs	r3, #8
 800d40a:	e00e      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d40c:	2307      	movs	r3, #7
 800d40e:	e00c      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d410:	2306      	movs	r3, #6
 800d412:	e00a      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d414:	2305      	movs	r3, #5
 800d416:	e008      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d418:	2304      	movs	r3, #4
 800d41a:	e006      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d41c:	2303      	movs	r3, #3
 800d41e:	e004      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d420:	2302      	movs	r3, #2
 800d422:	e002      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d424:	2301      	movs	r3, #1
 800d426:	e000      	b.n	800d42a <HAL_ADC_ConfigChannel+0x1ce>
 800d428:	2300      	movs	r3, #0
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	6852      	ldr	r2, [r2, #4]
 800d42e:	201f      	movs	r0, #31
 800d430:	4002      	ands	r2, r0
 800d432:	4093      	lsls	r3, r2
 800d434:	000a      	movs	r2, r1
 800d436:	431a      	orrs	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	089b      	lsrs	r3, r3, #2
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	69db      	ldr	r3, [r3, #28]
 800d448:	429a      	cmp	r2, r3
 800d44a:	d808      	bhi.n	800d45e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	6859      	ldr	r1, [r3, #4]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	001a      	movs	r2, r3
 800d45a:	f7ff f9c7 	bl	800c7ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	6819      	ldr	r1, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	001a      	movs	r2, r3
 800d46c:	f7ff fa0e 	bl	800c88c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	db00      	blt.n	800d47a <HAL_ADC_ConfigChannel+0x21e>
 800d478:	e0bc      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d47a:	4b50      	ldr	r3, [pc, #320]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d47c:	0018      	movs	r0, r3
 800d47e:	f7ff f963 	bl	800c748 <LL_ADC_GetCommonPathInternalCh>
 800d482:	0003      	movs	r3, r0
 800d484:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a4d      	ldr	r2, [pc, #308]	; (800d5c0 <HAL_ADC_ConfigChannel+0x364>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d122      	bne.n	800d4d6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	2380      	movs	r3, #128	; 0x80
 800d494:	041b      	lsls	r3, r3, #16
 800d496:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d498:	d11d      	bne.n	800d4d6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2280      	movs	r2, #128	; 0x80
 800d49e:	0412      	lsls	r2, r2, #16
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	4a46      	ldr	r2, [pc, #280]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d4a4:	0019      	movs	r1, r3
 800d4a6:	0010      	movs	r0, r2
 800d4a8:	f7ff f93a 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800d4ac:	4b45      	ldr	r3, [pc, #276]	; (800d5c4 <HAL_ADC_ConfigChannel+0x368>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4945      	ldr	r1, [pc, #276]	; (800d5c8 <HAL_ADC_ConfigChannel+0x36c>)
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	f7f8 feb0 	bl	8006218 <__udivsi3>
 800d4b8:	0003      	movs	r3, r0
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	0013      	movs	r3, r2
 800d4be:	005b      	lsls	r3, r3, #1
 800d4c0:	189b      	adds	r3, r3, r2
 800d4c2:	009b      	lsls	r3, r3, #2
 800d4c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d4c6:	e002      	b.n	800d4ce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f9      	bne.n	800d4c8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800d4d4:	e08e      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a3c      	ldr	r2, [pc, #240]	; (800d5cc <HAL_ADC_ConfigChannel+0x370>)
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d10e      	bne.n	800d4fe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800d4e0:	693a      	ldr	r2, [r7, #16]
 800d4e2:	2380      	movs	r3, #128	; 0x80
 800d4e4:	045b      	lsls	r3, r3, #17
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	d109      	bne.n	800d4fe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2280      	movs	r2, #128	; 0x80
 800d4ee:	0452      	lsls	r2, r2, #17
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	4a32      	ldr	r2, [pc, #200]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d4f4:	0019      	movs	r1, r3
 800d4f6:	0010      	movs	r0, r2
 800d4f8:	f7ff f912 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
 800d4fc:	e07a      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a33      	ldr	r2, [pc, #204]	; (800d5d0 <HAL_ADC_ConfigChannel+0x374>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d000      	beq.n	800d50a <HAL_ADC_ConfigChannel+0x2ae>
 800d508:	e074      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	2380      	movs	r3, #128	; 0x80
 800d50e:	03db      	lsls	r3, r3, #15
 800d510:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800d512:	d000      	beq.n	800d516 <HAL_ADC_ConfigChannel+0x2ba>
 800d514:	e06e      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	2280      	movs	r2, #128	; 0x80
 800d51a:	03d2      	lsls	r2, r2, #15
 800d51c:	4313      	orrs	r3, r2
 800d51e:	4a27      	ldr	r2, [pc, #156]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d520:	0019      	movs	r1, r3
 800d522:	0010      	movs	r0, r2
 800d524:	f7ff f8fc 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
 800d528:	e064      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	691a      	ldr	r2, [r3, #16]
 800d52e:	2380      	movs	r3, #128	; 0x80
 800d530:	061b      	lsls	r3, r3, #24
 800d532:	429a      	cmp	r2, r3
 800d534:	d004      	beq.n	800d540 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800d53a:	4a1f      	ldr	r2, [pc, #124]	; (800d5b8 <HAL_ADC_ConfigChannel+0x35c>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d107      	bne.n	800d550 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	0019      	movs	r1, r3
 800d54a:	0010      	movs	r0, r2
 800d54c:	f7ff f97f 	bl	800c84e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	da4d      	bge.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800d558:	4b18      	ldr	r3, [pc, #96]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d55a:	0018      	movs	r0, r3
 800d55c:	f7ff f8f4 	bl	800c748 <LL_ADC_GetCommonPathInternalCh>
 800d560:	0003      	movs	r3, r0
 800d562:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a15      	ldr	r2, [pc, #84]	; (800d5c0 <HAL_ADC_ConfigChannel+0x364>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d108      	bne.n	800d580 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	4a18      	ldr	r2, [pc, #96]	; (800d5d4 <HAL_ADC_ConfigChannel+0x378>)
 800d572:	4013      	ands	r3, r2
 800d574:	4a11      	ldr	r2, [pc, #68]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d576:	0019      	movs	r1, r3
 800d578:	0010      	movs	r0, r2
 800d57a:	f7ff f8d1 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
 800d57e:	e039      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a11      	ldr	r2, [pc, #68]	; (800d5cc <HAL_ADC_ConfigChannel+0x370>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d108      	bne.n	800d59c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	4a12      	ldr	r2, [pc, #72]	; (800d5d8 <HAL_ADC_ConfigChannel+0x37c>)
 800d58e:	4013      	ands	r3, r2
 800d590:	4a0a      	ldr	r2, [pc, #40]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d592:	0019      	movs	r1, r3
 800d594:	0010      	movs	r0, r2
 800d596:	f7ff f8c3 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
 800d59a:	e02b      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a0b      	ldr	r2, [pc, #44]	; (800d5d0 <HAL_ADC_ConfigChannel+0x374>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d126      	bne.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	4a0c      	ldr	r2, [pc, #48]	; (800d5dc <HAL_ADC_ConfigChannel+0x380>)
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	4a03      	ldr	r2, [pc, #12]	; (800d5bc <HAL_ADC_ConfigChannel+0x360>)
 800d5ae:	0019      	movs	r1, r3
 800d5b0:	0010      	movs	r0, r2
 800d5b2:	f7ff f8b5 	bl	800c720 <LL_ADC_SetCommonPathInternalCh>
 800d5b6:	e01d      	b.n	800d5f4 <HAL_ADC_ConfigChannel+0x398>
 800d5b8:	80000004 	.word	0x80000004
 800d5bc:	40012708 	.word	0x40012708
 800d5c0:	b0001000 	.word	0xb0001000
 800d5c4:	20000118 	.word	0x20000118
 800d5c8:	00030d40 	.word	0x00030d40
 800d5cc:	b8004000 	.word	0xb8004000
 800d5d0:	b4002000 	.word	0xb4002000
 800d5d4:	ff7fffff 	.word	0xff7fffff
 800d5d8:	feffffff 	.word	0xfeffffff
 800d5dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	431a      	orrs	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d5ec:	2317      	movs	r3, #23
 800d5ee:	18fb      	adds	r3, r7, r3
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2254      	movs	r2, #84	; 0x54
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800d5fc:	2317      	movs	r3, #23
 800d5fe:	18fb      	adds	r3, r7, r3
 800d600:	781b      	ldrb	r3, [r3, #0]
}
 800d602:	0018      	movs	r0, r3
 800d604:	46bd      	mov	sp, r7
 800d606:	b006      	add	sp, #24
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	46c0      	nop			; (mov r8, r8)

0800d60c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 800d60c:	b590      	push	{r4, r7, lr}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d616:	2317      	movs	r3, #23
 800d618:	18fb      	adds	r3, r7, r3
 800d61a:	2200      	movs	r2, #0
 800d61c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_awd_high_threshold_shifted;
  uint32_t tmp_awd_low_threshold_shifted;
  uint32_t backup_setting_adc_enable_state = 0UL;
 800d61e:	2300      	movs	r3, #0
 800d620:	60bb      	str	r3, [r7, #8]
    /* Verify if thresholds are within the selected ADC resolution */
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  __HAL_LOCK(hadc);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2254      	movs	r2, #84	; 0x54
 800d626:	5c9b      	ldrb	r3, [r3, r2]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d101      	bne.n	800d630 <HAL_ADC_AnalogWDGConfig+0x24>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e289      	b.n	800db44 <HAL_ADC_AnalogWDGConfig+0x538>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2254      	movs	r2, #84	; 0x54
 800d634:	2101      	movs	r1, #1
 800d636:	5499      	strb	r1, [r3, r2]

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC group regular:                                */
  /*  - Analog watchdog channels                                              */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	0018      	movs	r0, r3
 800d63e:	f7ff fa17 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800d642:	1e03      	subs	r3, r0, #0
 800d644:	d000      	beq.n	800d648 <HAL_ADC_AnalogWDGConfig+0x3c>
 800d646:	e24a      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4aa3      	ldr	r2, [pc, #652]	; (800d8dc <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d162      	bne.n	800d718 <HAL_ADC_AnalogWDGConfig+0x10c>
    {
      /* Constraint of ADC on this STM32 series: ADC must be disable
         to modify bitfields of register ADC_CFGR1 */
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	0018      	movs	r0, r3
 800d658:	f7ff f9d6 	bl	800ca08 <LL_ADC_IsEnabled>
 800d65c:	1e03      	subs	r3, r0, #0
 800d65e:	d009      	beq.n	800d674 <HAL_ADC_AnalogWDGConfig+0x68>
      {
        backup_setting_adc_enable_state = 1UL;
 800d660:	2301      	movs	r3, #1
 800d662:	60bb      	str	r3, [r7, #8]
        tmp_hal_status = ADC_Disable(hadc);
 800d664:	2317      	movs	r3, #23
 800d666:	18fc      	adds	r4, r7, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	0018      	movs	r0, r3
 800d66c:	f000 fafe 	bl	800dc6c <ADC_Disable>
 800d670:	0003      	movs	r3, r0
 800d672:	7023      	strb	r3, [r4, #0]
      }

      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels.                                                         */
      switch (pAnalogWDGConfig->WatchdogMode)
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	2280      	movs	r2, #128	; 0x80
 800d67a:	0412      	lsls	r2, r2, #16
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d011      	beq.n	800d6a4 <HAL_ADC_AnalogWDGConfig+0x98>
 800d680:	22c0      	movs	r2, #192	; 0xc0
 800d682:	0412      	lsls	r2, r2, #16
 800d684:	4293      	cmp	r3, r2
 800d686:	d115      	bne.n	800d6b4 <HAL_ADC_AnalogWDGConfig+0xa8>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6818      	ldr	r0, [r3, #0]
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	4a93      	ldr	r2, [pc, #588]	; (800d8e0 <HAL_ADC_AnalogWDGConfig+0x2d4>)
 800d692:	4013      	ands	r3, r2
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
 800d694:	22c0      	movs	r2, #192	; 0xc0
 800d696:	0412      	lsls	r2, r2, #16
 800d698:	4313      	orrs	r3, r2
 800d69a:	4990      	ldr	r1, [pc, #576]	; (800d8dc <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800d69c:	001a      	movs	r2, r3
 800d69e:	f7ff f911 	bl	800c8c4 <LL_ADC_SetAnalogWDMonitChannels>
                                                                          LL_ADC_GROUP_REGULAR));
          break;
 800d6a2:	e00f      	b.n	800d6c4 <HAL_ADC_AnalogWDGConfig+0xb8>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a8e      	ldr	r2, [pc, #568]	; (800d8e4 <HAL_ADC_AnalogWDGConfig+0x2d8>)
 800d6aa:	498c      	ldr	r1, [pc, #560]	; (800d8dc <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	f7ff f909 	bl	800c8c4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800d6b2:	e007      	b.n	800d6c4 <HAL_ADC_AnalogWDGConfig+0xb8>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4988      	ldr	r1, [pc, #544]	; (800d8dc <HAL_ADC_AnalogWDGConfig+0x2d0>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	0018      	movs	r0, r3
 800d6be:	f7ff f901 	bl	800c8c4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800d6c2:	46c0      	nop			; (mov r8, r8)
      }

      if (backup_setting_adc_enable_state == 1UL)
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d10b      	bne.n	800d6e2 <HAL_ADC_AnalogWDGConfig+0xd6>
      {
        if (tmp_hal_status == HAL_OK)
 800d6ca:	2217      	movs	r2, #23
 800d6cc:	18bb      	adds	r3, r7, r2
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <HAL_ADC_AnalogWDGConfig+0xd6>
        {
          tmp_hal_status = ADC_Enable(hadc);
 800d6d4:	18bc      	adds	r4, r7, r2
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	0018      	movs	r0, r3
 800d6da:	f000 fa41 	bl	800db60 <ADC_Enable>
 800d6de:	0003      	movs	r3, r0
 800d6e0:	7023      	strb	r3, [r4, #0]
        }
      }

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6e6:	4a80      	ldr	r2, [pc, #512]	; (800d8e8 <HAL_ADC_AnalogWDGConfig+0x2dc>)
 800d6e8:	401a      	ands	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	0018      	movs	r0, r3
 800d6f4:	f7ff f9cd 	bl	800ca92 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	7b1b      	ldrb	r3, [r3, #12]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d105      	bne.n	800d70c <HAL_ADC_AnalogWDGConfig+0x100>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	0018      	movs	r0, r3
 800d706:	f7ff f9e7 	bl	800cad8 <LL_ADC_EnableIT_AWD1>
 800d70a:	e1e8      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	0018      	movs	r0, r3
 800d712:	f7ff fa0d 	bl	800cb30 <LL_ADC_DisableIT_AWD1>
 800d716:	e1e2      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (pAnalogWDGConfig->WatchdogMode)
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	2280      	movs	r2, #128	; 0x80
 800d71e:	0412      	lsls	r2, r2, #16
 800d720:	4293      	cmp	r3, r2
 800d722:	d100      	bne.n	800d726 <HAL_ADC_AnalogWDGConfig+0x11a>
 800d724:	e18f      	b.n	800da46 <HAL_ADC_AnalogWDGConfig+0x43a>
 800d726:	22c0      	movs	r2, #192	; 0xc0
 800d728:	0412      	lsls	r2, r2, #16
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d000      	beq.n	800d730 <HAL_ADC_AnalogWDGConfig+0x124>
 800d72e:	e193      	b.n	800da58 <HAL_ADC_AnalogWDGConfig+0x44c>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a6d      	ldr	r2, [pc, #436]	; (800d8ec <HAL_ADC_AnalogWDGConfig+0x2e0>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d000      	beq.n	800d73c <HAL_ADC_AnalogWDGConfig+0x130>
 800d73a:	e0bc      	b.n	800d8b6 <HAL_ADC_AnalogWDGConfig+0x2aa>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	22a0      	movs	r2, #160	; 0xa0
 800d742:	5899      	ldr	r1, [r3, r2]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	035b      	lsls	r3, r3, #13
 800d74a:	0b5b      	lsrs	r3, r3, #13
 800d74c:	d108      	bne.n	800d760 <HAL_ADC_AnalogWDGConfig+0x154>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	0e9b      	lsrs	r3, r3, #26
 800d754:	221f      	movs	r2, #31
 800d756:	4013      	ands	r3, r2
 800d758:	2201      	movs	r2, #1
 800d75a:	409a      	lsls	r2, r3
 800d75c:	0013      	movs	r3, r2
 800d75e:	e0a4      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	2201      	movs	r2, #1
 800d766:	4013      	ands	r3, r2
 800d768:	d000      	beq.n	800d76c <HAL_ADC_AnalogWDGConfig+0x160>
 800d76a:	e09d      	b.n	800d8a8 <HAL_ADC_AnalogWDGConfig+0x29c>
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	2202      	movs	r2, #2
 800d772:	4013      	ands	r3, r2
 800d774:	d000      	beq.n	800d778 <HAL_ADC_AnalogWDGConfig+0x16c>
 800d776:	e095      	b.n	800d8a4 <HAL_ADC_AnalogWDGConfig+0x298>
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	2204      	movs	r2, #4
 800d77e:	4013      	ands	r3, r2
 800d780:	d000      	beq.n	800d784 <HAL_ADC_AnalogWDGConfig+0x178>
 800d782:	e08d      	b.n	800d8a0 <HAL_ADC_AnalogWDGConfig+0x294>
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	2208      	movs	r2, #8
 800d78a:	4013      	ands	r3, r2
 800d78c:	d000      	beq.n	800d790 <HAL_ADC_AnalogWDGConfig+0x184>
 800d78e:	e085      	b.n	800d89c <HAL_ADC_AnalogWDGConfig+0x290>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	2210      	movs	r2, #16
 800d796:	4013      	ands	r3, r2
 800d798:	d000      	beq.n	800d79c <HAL_ADC_AnalogWDGConfig+0x190>
 800d79a:	e07d      	b.n	800d898 <HAL_ADC_AnalogWDGConfig+0x28c>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	d000      	beq.n	800d7a8 <HAL_ADC_AnalogWDGConfig+0x19c>
 800d7a6:	e075      	b.n	800d894 <HAL_ADC_AnalogWDGConfig+0x288>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	2240      	movs	r2, #64	; 0x40
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	d000      	beq.n	800d7b4 <HAL_ADC_AnalogWDGConfig+0x1a8>
 800d7b2:	e06d      	b.n	800d890 <HAL_ADC_AnalogWDGConfig+0x284>
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	2280      	movs	r2, #128	; 0x80
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	d000      	beq.n	800d7c0 <HAL_ADC_AnalogWDGConfig+0x1b4>
 800d7be:	e065      	b.n	800d88c <HAL_ADC_AnalogWDGConfig+0x280>
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	689a      	ldr	r2, [r3, #8]
 800d7c4:	2380      	movs	r3, #128	; 0x80
 800d7c6:	005b      	lsls	r3, r3, #1
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	d000      	beq.n	800d7ce <HAL_ADC_AnalogWDGConfig+0x1c2>
 800d7cc:	e05b      	b.n	800d886 <HAL_ADC_AnalogWDGConfig+0x27a>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	689a      	ldr	r2, [r3, #8]
 800d7d2:	2380      	movs	r3, #128	; 0x80
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	d152      	bne.n	800d880 <HAL_ADC_AnalogWDGConfig+0x274>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	689a      	ldr	r2, [r3, #8]
 800d7de:	2380      	movs	r3, #128	; 0x80
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	d149      	bne.n	800d87a <HAL_ADC_AnalogWDGConfig+0x26e>
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	689a      	ldr	r2, [r3, #8]
 800d7ea:	2380      	movs	r3, #128	; 0x80
 800d7ec:	011b      	lsls	r3, r3, #4
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	d140      	bne.n	800d874 <HAL_ADC_AnalogWDGConfig+0x268>
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	689a      	ldr	r2, [r3, #8]
 800d7f6:	2380      	movs	r3, #128	; 0x80
 800d7f8:	015b      	lsls	r3, r3, #5
 800d7fa:	4013      	ands	r3, r2
 800d7fc:	d137      	bne.n	800d86e <HAL_ADC_AnalogWDGConfig+0x262>
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	689a      	ldr	r2, [r3, #8]
 800d802:	2380      	movs	r3, #128	; 0x80
 800d804:	019b      	lsls	r3, r3, #6
 800d806:	4013      	ands	r3, r2
 800d808:	d12e      	bne.n	800d868 <HAL_ADC_AnalogWDGConfig+0x25c>
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	689a      	ldr	r2, [r3, #8]
 800d80e:	2380      	movs	r3, #128	; 0x80
 800d810:	01db      	lsls	r3, r3, #7
 800d812:	4013      	ands	r3, r2
 800d814:	d125      	bne.n	800d862 <HAL_ADC_AnalogWDGConfig+0x256>
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	689a      	ldr	r2, [r3, #8]
 800d81a:	2380      	movs	r3, #128	; 0x80
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	4013      	ands	r3, r2
 800d820:	d11c      	bne.n	800d85c <HAL_ADC_AnalogWDGConfig+0x250>
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	689a      	ldr	r2, [r3, #8]
 800d826:	2380      	movs	r3, #128	; 0x80
 800d828:	025b      	lsls	r3, r3, #9
 800d82a:	4013      	ands	r3, r2
 800d82c:	d113      	bne.n	800d856 <HAL_ADC_AnalogWDGConfig+0x24a>
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	689a      	ldr	r2, [r3, #8]
 800d832:	2380      	movs	r3, #128	; 0x80
 800d834:	029b      	lsls	r3, r3, #10
 800d836:	4013      	ands	r3, r2
 800d838:	d10a      	bne.n	800d850 <HAL_ADC_AnalogWDGConfig+0x244>
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	689a      	ldr	r2, [r3, #8]
 800d83e:	2380      	movs	r3, #128	; 0x80
 800d840:	02db      	lsls	r3, r3, #11
 800d842:	4013      	ands	r3, r2
 800d844:	d002      	beq.n	800d84c <HAL_ADC_AnalogWDGConfig+0x240>
 800d846:	2380      	movs	r3, #128	; 0x80
 800d848:	02db      	lsls	r3, r3, #11
 800d84a:	e02e      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d84c:	2301      	movs	r3, #1
 800d84e:	e02c      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d850:	2380      	movs	r3, #128	; 0x80
 800d852:	029b      	lsls	r3, r3, #10
 800d854:	e029      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d856:	2380      	movs	r3, #128	; 0x80
 800d858:	025b      	lsls	r3, r3, #9
 800d85a:	e026      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d85c:	2380      	movs	r3, #128	; 0x80
 800d85e:	021b      	lsls	r3, r3, #8
 800d860:	e023      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d862:	2380      	movs	r3, #128	; 0x80
 800d864:	01db      	lsls	r3, r3, #7
 800d866:	e020      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d868:	2380      	movs	r3, #128	; 0x80
 800d86a:	019b      	lsls	r3, r3, #6
 800d86c:	e01d      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d86e:	2380      	movs	r3, #128	; 0x80
 800d870:	015b      	lsls	r3, r3, #5
 800d872:	e01a      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d874:	2380      	movs	r3, #128	; 0x80
 800d876:	011b      	lsls	r3, r3, #4
 800d878:	e017      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d87a:	2380      	movs	r3, #128	; 0x80
 800d87c:	00db      	lsls	r3, r3, #3
 800d87e:	e014      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d880:	2380      	movs	r3, #128	; 0x80
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	e011      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d886:	2380      	movs	r3, #128	; 0x80
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	e00e      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d88c:	2380      	movs	r3, #128	; 0x80
 800d88e:	e00c      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	e00a      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d894:	2320      	movs	r3, #32
 800d896:	e008      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d898:	2310      	movs	r3, #16
 800d89a:	e006      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d89c:	2308      	movs	r3, #8
 800d89e:	e004      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d8a0:	2304      	movs	r3, #4
 800d8a2:	e002      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e000      	b.n	800d8aa <HAL_ADC_AnalogWDGConfig+0x29e>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	6812      	ldr	r2, [r2, #0]
 800d8ae:	430b      	orrs	r3, r1
 800d8b0:	21a0      	movs	r1, #160	; 0xa0
 800d8b2:	5053      	str	r3, [r2, r1]
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
          }
          break;
 800d8b4:	e0d9      	b.n	800da6a <HAL_ADC_AnalogWDGConfig+0x45e>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig->Channel)));
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	22a4      	movs	r2, #164	; 0xa4
 800d8bc:	5899      	ldr	r1, [r3, r2]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	035b      	lsls	r3, r3, #13
 800d8c4:	0b5b      	lsrs	r3, r3, #13
 800d8c6:	d113      	bne.n	800d8f0 <HAL_ADC_AnalogWDGConfig+0x2e4>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	0e9b      	lsrs	r3, r3, #26
 800d8ce:	221f      	movs	r2, #31
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	409a      	lsls	r2, r3
 800d8d6:	0013      	movs	r3, r2
 800d8d8:	e0af      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d8da:	46c0      	nop			; (mov r8, r8)
 800d8dc:	7cc00000 	.word	0x7cc00000
 800d8e0:	fc07ffff 	.word	0xfc07ffff
 800d8e4:	0087ffff 	.word	0x0087ffff
 800d8e8:	fffeffff 	.word	0xfffeffff
 800d8ec:	0017ffff 	.word	0x0017ffff
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	4013      	ands	r3, r2
 800d8f8:	d000      	beq.n	800d8fc <HAL_ADC_AnalogWDGConfig+0x2f0>
 800d8fa:	e09d      	b.n	800da38 <HAL_ADC_AnalogWDGConfig+0x42c>
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	2202      	movs	r2, #2
 800d902:	4013      	ands	r3, r2
 800d904:	d000      	beq.n	800d908 <HAL_ADC_AnalogWDGConfig+0x2fc>
 800d906:	e095      	b.n	800da34 <HAL_ADC_AnalogWDGConfig+0x428>
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2204      	movs	r2, #4
 800d90e:	4013      	ands	r3, r2
 800d910:	d000      	beq.n	800d914 <HAL_ADC_AnalogWDGConfig+0x308>
 800d912:	e08d      	b.n	800da30 <HAL_ADC_AnalogWDGConfig+0x424>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	2208      	movs	r2, #8
 800d91a:	4013      	ands	r3, r2
 800d91c:	d000      	beq.n	800d920 <HAL_ADC_AnalogWDGConfig+0x314>
 800d91e:	e085      	b.n	800da2c <HAL_ADC_AnalogWDGConfig+0x420>
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	2210      	movs	r2, #16
 800d926:	4013      	ands	r3, r2
 800d928:	d000      	beq.n	800d92c <HAL_ADC_AnalogWDGConfig+0x320>
 800d92a:	e07d      	b.n	800da28 <HAL_ADC_AnalogWDGConfig+0x41c>
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	2220      	movs	r2, #32
 800d932:	4013      	ands	r3, r2
 800d934:	d000      	beq.n	800d938 <HAL_ADC_AnalogWDGConfig+0x32c>
 800d936:	e075      	b.n	800da24 <HAL_ADC_AnalogWDGConfig+0x418>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	2240      	movs	r2, #64	; 0x40
 800d93e:	4013      	ands	r3, r2
 800d940:	d000      	beq.n	800d944 <HAL_ADC_AnalogWDGConfig+0x338>
 800d942:	e06d      	b.n	800da20 <HAL_ADC_AnalogWDGConfig+0x414>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	2280      	movs	r2, #128	; 0x80
 800d94a:	4013      	ands	r3, r2
 800d94c:	d000      	beq.n	800d950 <HAL_ADC_AnalogWDGConfig+0x344>
 800d94e:	e065      	b.n	800da1c <HAL_ADC_AnalogWDGConfig+0x410>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	689a      	ldr	r2, [r3, #8]
 800d954:	2380      	movs	r3, #128	; 0x80
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	4013      	ands	r3, r2
 800d95a:	d000      	beq.n	800d95e <HAL_ADC_AnalogWDGConfig+0x352>
 800d95c:	e05b      	b.n	800da16 <HAL_ADC_AnalogWDGConfig+0x40a>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	2380      	movs	r3, #128	; 0x80
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4013      	ands	r3, r2
 800d968:	d152      	bne.n	800da10 <HAL_ADC_AnalogWDGConfig+0x404>
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	689a      	ldr	r2, [r3, #8]
 800d96e:	2380      	movs	r3, #128	; 0x80
 800d970:	00db      	lsls	r3, r3, #3
 800d972:	4013      	ands	r3, r2
 800d974:	d149      	bne.n	800da0a <HAL_ADC_AnalogWDGConfig+0x3fe>
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	689a      	ldr	r2, [r3, #8]
 800d97a:	2380      	movs	r3, #128	; 0x80
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	4013      	ands	r3, r2
 800d980:	d140      	bne.n	800da04 <HAL_ADC_AnalogWDGConfig+0x3f8>
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	689a      	ldr	r2, [r3, #8]
 800d986:	2380      	movs	r3, #128	; 0x80
 800d988:	015b      	lsls	r3, r3, #5
 800d98a:	4013      	ands	r3, r2
 800d98c:	d137      	bne.n	800d9fe <HAL_ADC_AnalogWDGConfig+0x3f2>
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	689a      	ldr	r2, [r3, #8]
 800d992:	2380      	movs	r3, #128	; 0x80
 800d994:	019b      	lsls	r3, r3, #6
 800d996:	4013      	ands	r3, r2
 800d998:	d12e      	bne.n	800d9f8 <HAL_ADC_AnalogWDGConfig+0x3ec>
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	689a      	ldr	r2, [r3, #8]
 800d99e:	2380      	movs	r3, #128	; 0x80
 800d9a0:	01db      	lsls	r3, r3, #7
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	d125      	bne.n	800d9f2 <HAL_ADC_AnalogWDGConfig+0x3e6>
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	689a      	ldr	r2, [r3, #8]
 800d9aa:	2380      	movs	r3, #128	; 0x80
 800d9ac:	021b      	lsls	r3, r3, #8
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	d11c      	bne.n	800d9ec <HAL_ADC_AnalogWDGConfig+0x3e0>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	2380      	movs	r3, #128	; 0x80
 800d9b8:	025b      	lsls	r3, r3, #9
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	d113      	bne.n	800d9e6 <HAL_ADC_AnalogWDGConfig+0x3da>
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	689a      	ldr	r2, [r3, #8]
 800d9c2:	2380      	movs	r3, #128	; 0x80
 800d9c4:	029b      	lsls	r3, r3, #10
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	d10a      	bne.n	800d9e0 <HAL_ADC_AnalogWDGConfig+0x3d4>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	689a      	ldr	r2, [r3, #8]
 800d9ce:	2380      	movs	r3, #128	; 0x80
 800d9d0:	02db      	lsls	r3, r3, #11
 800d9d2:	4013      	ands	r3, r2
 800d9d4:	d002      	beq.n	800d9dc <HAL_ADC_AnalogWDGConfig+0x3d0>
 800d9d6:	2380      	movs	r3, #128	; 0x80
 800d9d8:	02db      	lsls	r3, r3, #11
 800d9da:	e02e      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	e02c      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9e0:	2380      	movs	r3, #128	; 0x80
 800d9e2:	029b      	lsls	r3, r3, #10
 800d9e4:	e029      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9e6:	2380      	movs	r3, #128	; 0x80
 800d9e8:	025b      	lsls	r3, r3, #9
 800d9ea:	e026      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9ec:	2380      	movs	r3, #128	; 0x80
 800d9ee:	021b      	lsls	r3, r3, #8
 800d9f0:	e023      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9f2:	2380      	movs	r3, #128	; 0x80
 800d9f4:	01db      	lsls	r3, r3, #7
 800d9f6:	e020      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9f8:	2380      	movs	r3, #128	; 0x80
 800d9fa:	019b      	lsls	r3, r3, #6
 800d9fc:	e01d      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800d9fe:	2380      	movs	r3, #128	; 0x80
 800da00:	015b      	lsls	r3, r3, #5
 800da02:	e01a      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da04:	2380      	movs	r3, #128	; 0x80
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	e017      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da0a:	2380      	movs	r3, #128	; 0x80
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	e014      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da10:	2380      	movs	r3, #128	; 0x80
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	e011      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da16:	2380      	movs	r3, #128	; 0x80
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	e00e      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da1c:	2380      	movs	r3, #128	; 0x80
 800da1e:	e00c      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	e00a      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da24:	2320      	movs	r3, #32
 800da26:	e008      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da28:	2310      	movs	r3, #16
 800da2a:	e006      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da2c:	2308      	movs	r3, #8
 800da2e:	e004      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da30:	2304      	movs	r3, #4
 800da32:	e002      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da34:	2302      	movs	r3, #2
 800da36:	e000      	b.n	800da3a <HAL_ADC_AnalogWDGConfig+0x42e>
 800da38:	2301      	movs	r3, #1
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	6812      	ldr	r2, [r2, #0]
 800da3e:	430b      	orrs	r3, r1
 800da40:	21a4      	movs	r1, #164	; 0xa4
 800da42:	5053      	str	r3, [r2, r1]
          break;
 800da44:	e011      	b.n	800da6a <HAL_ADC_AnalogWDGConfig+0x45e>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6818      	ldr	r0, [r3, #0]
                                          pAnalogWDGConfig->WatchdogNumber,
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	681b      	ldr	r3, [r3, #0]
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance,
 800da4e:	4a3f      	ldr	r2, [pc, #252]	; (800db4c <HAL_ADC_AnalogWDGConfig+0x540>)
 800da50:	0019      	movs	r1, r3
 800da52:	f7fe ff37 	bl	800c8c4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_AWD_ALL_CHANNELS_REG);
          break;
 800da56:	e008      	b.n	800da6a <HAL_ADC_AnalogWDGConfig+0x45e>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6818      	ldr	r0, [r3, #0]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2200      	movs	r2, #0
 800da62:	0019      	movs	r1, r3
 800da64:	f7fe ff2e 	bl	800c8c4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800da68:	46c0      	nop			; (mov r8, r8)
      }

      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a38      	ldr	r2, [pc, #224]	; (800db50 <HAL_ADC_AnalogWDGConfig+0x544>)
 800da70:	4293      	cmp	r3, r2
 800da72:	d11a      	bne.n	800daaa <HAL_ADC_AnalogWDGConfig+0x49e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da78:	4a36      	ldr	r2, [pc, #216]	; (800db54 <HAL_ADC_AnalogWDGConfig+0x548>)
 800da7a:	401a      	ands	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	0018      	movs	r0, r3
 800da86:	f7ff f80f 	bl	800caa8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	7b1b      	ldrb	r3, [r3, #12]
 800da8e:	2b01      	cmp	r3, #1
 800da90:	d105      	bne.n	800da9e <HAL_ADC_AnalogWDGConfig+0x492>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	0018      	movs	r0, r3
 800da98:	f7ff f82c 	bl	800caf4 <LL_ADC_EnableIT_AWD2>
 800da9c:	e01f      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	0018      	movs	r0, r3
 800daa4:	f7ff f854 	bl	800cb50 <LL_ADC_DisableIT_AWD2>
 800daa8:	e019      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
      }
      /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800daae:	4a2a      	ldr	r2, [pc, #168]	; (800db58 <HAL_ADC_AnalogWDGConfig+0x54c>)
 800dab0:	401a      	ands	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	0018      	movs	r0, r3
 800dabc:	f7ff f800 	bl	800cac0 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (pAnalogWDGConfig->ITMode == ENABLE)
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	7b1b      	ldrb	r3, [r3, #12]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d105      	bne.n	800dad4 <HAL_ADC_AnalogWDGConfig+0x4c8>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	0018      	movs	r0, r3
 800dace:	f7ff f820 	bl	800cb12 <LL_ADC_EnableIT_AWD3>
 800dad2:	e004      	b.n	800dade <HAL_ADC_AnalogWDGConfig+0x4d2>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	0018      	movs	r0, r3
 800dada:	f7ff f849 	bl	800cb70 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a1e      	ldr	r2, [pc, #120]	; (800db5c <HAL_ADC_AnalogWDGConfig+0x550>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d118      	bne.n	800db1a <HAL_ADC_AnalogWDGConfig+0x50e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	691a      	ldr	r2, [r3, #16]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	08db      	lsrs	r3, r3, #3
 800daf4:	2103      	movs	r1, #3
 800daf6:	400b      	ands	r3, r1
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	409a      	lsls	r2, r3
 800dafc:	0013      	movs	r3, r2
 800dafe:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	695a      	ldr	r2, [r3, #20]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	08db      	lsrs	r3, r3, #3
 800db0c:	2103      	movs	r1, #3
 800db0e:	400b      	ands	r3, r1
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	409a      	lsls	r2, r3
 800db14:	0013      	movs	r3, r2
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e005      	b.n	800db26 <HAL_ADC_AnalogWDGConfig+0x51a>
  else
  {
    /* No need to shift the offset with respect to the selected ADC resolution: */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	613b      	str	r3, [r7, #16]
    tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	60fb      	str	r3, [r7, #12]
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	6819      	ldr	r1, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	f7fe fef5 	bl	800c920 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmp_awd_low_threshold_shifted);

  __HAL_UNLOCK(hadc);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2254      	movs	r2, #84	; 0x54
 800db3a:	2100      	movs	r1, #0
 800db3c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800db3e:	2317      	movs	r3, #23
 800db40:	18fb      	adds	r3, r7, r3
 800db42:	781b      	ldrb	r3, [r3, #0]
}
 800db44:	0018      	movs	r0, r3
 800db46:	46bd      	mov	sp, r7
 800db48:	b007      	add	sp, #28
 800db4a:	bd90      	pop	{r4, r7, pc}
 800db4c:	0087ffff 	.word	0x0087ffff
 800db50:	0017ffff 	.word	0x0017ffff
 800db54:	fffdffff 	.word	0xfffdffff
 800db58:	fffbffff 	.word	0xfffbffff
 800db5c:	7cc00000 	.word	0x7cc00000

0800db60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800db68:	2300      	movs	r3, #0
 800db6a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	0018      	movs	r0, r3
 800db72:	f7fe ff49 	bl	800ca08 <LL_ADC_IsEnabled>
 800db76:	1e03      	subs	r3, r0, #0
 800db78:	d000      	beq.n	800db7c <ADC_Enable+0x1c>
 800db7a:	e069      	b.n	800dc50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	4a36      	ldr	r2, [pc, #216]	; (800dc5c <ADC_Enable+0xfc>)
 800db84:	4013      	ands	r3, r2
 800db86:	d00d      	beq.n	800dba4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db8c:	2210      	movs	r2, #16
 800db8e:	431a      	orrs	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db98:	2201      	movs	r2, #1
 800db9a:	431a      	orrs	r2, r3
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e056      	b.n	800dc52 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f7fe ff09 	bl	800c9c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800dbae:	4b2c      	ldr	r3, [pc, #176]	; (800dc60 <ADC_Enable+0x100>)
 800dbb0:	0018      	movs	r0, r3
 800dbb2:	f7fe fdc9 	bl	800c748 <LL_ADC_GetCommonPathInternalCh>
 800dbb6:	0002      	movs	r2, r0
 800dbb8:	2380      	movs	r3, #128	; 0x80
 800dbba:	041b      	lsls	r3, r3, #16
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	d00f      	beq.n	800dbe0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800dbc0:	4b28      	ldr	r3, [pc, #160]	; (800dc64 <ADC_Enable+0x104>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4928      	ldr	r1, [pc, #160]	; (800dc68 <ADC_Enable+0x108>)
 800dbc6:	0018      	movs	r0, r3
 800dbc8:	f7f8 fb26 	bl	8006218 <__udivsi3>
 800dbcc:	0003      	movs	r3, r0
 800dbce:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800dbd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800dbd2:	e002      	b.n	800dbda <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1f9      	bne.n	800dbd4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	7e5b      	ldrb	r3, [r3, #25]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d033      	beq.n	800dc50 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800dbe8:	f7fe fd56 	bl	800c698 <HAL_GetTick>
 800dbec:	0003      	movs	r3, r0
 800dbee:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dbf0:	e027      	b.n	800dc42 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	f7fe ff06 	bl	800ca08 <LL_ADC_IsEnabled>
 800dbfc:	1e03      	subs	r3, r0, #0
 800dbfe:	d104      	bne.n	800dc0a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	0018      	movs	r0, r3
 800dc06:	f7fe fedb 	bl	800c9c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dc0a:	f7fe fd45 	bl	800c698 <HAL_GetTick>
 800dc0e:	0002      	movs	r2, r0
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d914      	bls.n	800dc42 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	4013      	ands	r3, r2
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d00d      	beq.n	800dc42 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc2a:	2210      	movs	r2, #16
 800dc2c:	431a      	orrs	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc36:	2201      	movs	r2, #1
 800dc38:	431a      	orrs	r2, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e007      	b.n	800dc52 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	4013      	ands	r3, r2
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d1d0      	bne.n	800dbf2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	0018      	movs	r0, r3
 800dc54:	46bd      	mov	sp, r7
 800dc56:	b004      	add	sp, #16
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	46c0      	nop			; (mov r8, r8)
 800dc5c:	80000017 	.word	0x80000017
 800dc60:	40012708 	.word	0x40012708
 800dc64:	20000118 	.word	0x20000118
 800dc68:	00030d40 	.word	0x00030d40

0800dc6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	0018      	movs	r0, r3
 800dc7a:	f7fe fed6 	bl	800ca2a <LL_ADC_IsDisableOngoing>
 800dc7e:	0003      	movs	r3, r0
 800dc80:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	0018      	movs	r0, r3
 800dc88:	f7fe febe 	bl	800ca08 <LL_ADC_IsEnabled>
 800dc8c:	1e03      	subs	r3, r0, #0
 800dc8e:	d046      	beq.n	800dd1e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d143      	bne.n	800dd1e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	2205      	movs	r2, #5
 800dc9e:	4013      	ands	r3, r2
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d10d      	bne.n	800dcc0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	0018      	movs	r0, r3
 800dcaa:	f7fe fe9b 	bl	800c9e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2203      	movs	r2, #3
 800dcb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800dcb6:	f7fe fcef 	bl	800c698 <HAL_GetTick>
 800dcba:	0003      	movs	r3, r0
 800dcbc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dcbe:	e028      	b.n	800dd12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc4:	2210      	movs	r2, #16
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e021      	b.n	800dd20 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800dcdc:	f7fe fcdc 	bl	800c698 <HAL_GetTick>
 800dce0:	0002      	movs	r2, r0
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d913      	bls.n	800dd12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	d00d      	beq.n	800dd12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcfa:	2210      	movs	r2, #16
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd06:	2201      	movs	r2, #1
 800dd08:	431a      	orrs	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e006      	b.n	800dd20 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	d1de      	bne.n	800dcdc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dd1e:	2300      	movs	r3, #0
}
 800dd20:	0018      	movs	r0, r3
 800dd22:	46bd      	mov	sp, r7
 800dd24:	b004      	add	sp, #16
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd3a:	2250      	movs	r2, #80	; 0x50
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	d141      	bne.n	800ddc4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd44:	2280      	movs	r2, #128	; 0x80
 800dd46:	0092      	lsls	r2, r2, #2
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	0018      	movs	r0, r3
 800dd54:	f7fe fd39 	bl	800c7ca <LL_ADC_REG_IsTriggerSourceSWStart>
 800dd58:	1e03      	subs	r3, r0, #0
 800dd5a:	d02e      	beq.n	800ddba <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	7e9b      	ldrb	r3, [r3, #26]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d12a      	bne.n	800ddba <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2208      	movs	r2, #8
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	2b08      	cmp	r3, #8
 800dd70:	d123      	bne.n	800ddba <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	0018      	movs	r0, r3
 800dd78:	f7fe fe7a 	bl	800ca70 <LL_ADC_REG_IsConversionOngoing>
 800dd7c:	1e03      	subs	r3, r0, #0
 800dd7e:	d110      	bne.n	800dda2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	210c      	movs	r1, #12
 800dd8c:	438a      	bics	r2, r1
 800dd8e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd94:	4a15      	ldr	r2, [pc, #84]	; (800ddec <ADC_DMAConvCplt+0xc4>)
 800dd96:	4013      	ands	r3, r2
 800dd98:	2201      	movs	r2, #1
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	659a      	str	r2, [r3, #88]	; 0x58
 800dda0:	e00b      	b.n	800ddba <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dda6:	2220      	movs	r2, #32
 800dda8:	431a      	orrs	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	0018      	movs	r0, r3
 800ddbe:	f7fa fc21 	bl	8008604 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ddc2:	e00f      	b.n	800dde4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddc8:	2210      	movs	r2, #16
 800ddca:	4013      	ands	r3, r2
 800ddcc:	d004      	beq.n	800ddd8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	f7ff fa3b 	bl	800d24c <HAL_ADC_ErrorCallback>
}
 800ddd6:	e005      	b.n	800dde4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	0010      	movs	r0, r2
 800dde2:	4798      	blx	r3
}
 800dde4:	46c0      	nop			; (mov r8, r8)
 800dde6:	46bd      	mov	sp, r7
 800dde8:	b004      	add	sp, #16
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	fffffefe 	.word	0xfffffefe

0800ddf0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	0018      	movs	r0, r3
 800de02:	f7ff fa13 	bl	800d22c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	46bd      	mov	sp, r7
 800de0a:	b004      	add	sp, #16
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b084      	sub	sp, #16
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de20:	2240      	movs	r2, #64	; 0x40
 800de22:	431a      	orrs	r2, r3
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2c:	2204      	movs	r2, #4
 800de2e:	431a      	orrs	r2, r3
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	0018      	movs	r0, r3
 800de38:	f7ff fa08 	bl	800d24c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800de3c:	46c0      	nop			; (mov r8, r8)
 800de3e:	46bd      	mov	sp, r7
 800de40:	b004      	add	sp, #16
 800de42:	bd80      	pop	{r7, pc}

0800de44 <LL_ADC_GetCommonClock>:
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	23f0      	movs	r3, #240	; 0xf0
 800de52:	039b      	lsls	r3, r3, #14
 800de54:	4013      	ands	r3, r2
}
 800de56:	0018      	movs	r0, r3
 800de58:	46bd      	mov	sp, r7
 800de5a:	b002      	add	sp, #8
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <LL_ADC_GetClock>:
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b082      	sub	sp, #8
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	0f9b      	lsrs	r3, r3, #30
 800de6c:	079b      	lsls	r3, r3, #30
}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	b002      	add	sp, #8
 800de74:	bd80      	pop	{r7, pc}

0800de76 <LL_ADC_SetCalibrationFactor>:
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	22b4      	movs	r2, #180	; 0xb4
 800de84:	589b      	ldr	r3, [r3, r2]
 800de86:	227f      	movs	r2, #127	; 0x7f
 800de88:	4393      	bics	r3, r2
 800de8a:	001a      	movs	r2, r3
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	431a      	orrs	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	21b4      	movs	r1, #180	; 0xb4
 800de94:	505a      	str	r2, [r3, r1]
}
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	46bd      	mov	sp, r7
 800de9a:	b002      	add	sp, #8
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <LL_ADC_GetCalibrationFactor>:
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b082      	sub	sp, #8
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	22b4      	movs	r2, #180	; 0xb4
 800deaa:	589b      	ldr	r3, [r3, r2]
 800deac:	227f      	movs	r2, #127	; 0x7f
 800deae:	4013      	ands	r3, r2
}
 800deb0:	0018      	movs	r0, r3
 800deb2:	46bd      	mov	sp, r7
 800deb4:	b002      	add	sp, #8
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <LL_ADC_Enable>:
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	4a04      	ldr	r2, [pc, #16]	; (800ded8 <LL_ADC_Enable+0x20>)
 800dec6:	4013      	ands	r3, r2
 800dec8:	2201      	movs	r2, #1
 800deca:	431a      	orrs	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	609a      	str	r2, [r3, #8]
}
 800ded0:	46c0      	nop			; (mov r8, r8)
 800ded2:	46bd      	mov	sp, r7
 800ded4:	b002      	add	sp, #8
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	7fffffe8 	.word	0x7fffffe8

0800dedc <LL_ADC_Disable>:
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	4a04      	ldr	r2, [pc, #16]	; (800defc <LL_ADC_Disable+0x20>)
 800deea:	4013      	ands	r3, r2
 800deec:	2202      	movs	r2, #2
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	609a      	str	r2, [r3, #8]
}
 800def4:	46c0      	nop			; (mov r8, r8)
 800def6:	46bd      	mov	sp, r7
 800def8:	b002      	add	sp, #8
 800defa:	bd80      	pop	{r7, pc}
 800defc:	7fffffe8 	.word	0x7fffffe8

0800df00 <LL_ADC_IsEnabled>:
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	2201      	movs	r2, #1
 800df0e:	4013      	ands	r3, r2
 800df10:	2b01      	cmp	r3, #1
 800df12:	d101      	bne.n	800df18 <LL_ADC_IsEnabled+0x18>
 800df14:	2301      	movs	r3, #1
 800df16:	e000      	b.n	800df1a <LL_ADC_IsEnabled+0x1a>
 800df18:	2300      	movs	r3, #0
}
 800df1a:	0018      	movs	r0, r3
 800df1c:	46bd      	mov	sp, r7
 800df1e:	b002      	add	sp, #8
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <LL_ADC_StartCalibration>:
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	4a05      	ldr	r2, [pc, #20]	; (800df48 <LL_ADC_StartCalibration+0x24>)
 800df32:	4013      	ands	r3, r2
 800df34:	2280      	movs	r2, #128	; 0x80
 800df36:	0612      	lsls	r2, r2, #24
 800df38:	431a      	orrs	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	609a      	str	r2, [r3, #8]
}
 800df3e:	46c0      	nop			; (mov r8, r8)
 800df40:	46bd      	mov	sp, r7
 800df42:	b002      	add	sp, #8
 800df44:	bd80      	pop	{r7, pc}
 800df46:	46c0      	nop			; (mov r8, r8)
 800df48:	7fffffe8 	.word	0x7fffffe8

0800df4c <LL_ADC_IsCalibrationOnGoing>:
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	0fdb      	lsrs	r3, r3, #31
 800df5a:	07da      	lsls	r2, r3, #31
 800df5c:	2380      	movs	r3, #128	; 0x80
 800df5e:	061b      	lsls	r3, r3, #24
 800df60:	429a      	cmp	r2, r3
 800df62:	d101      	bne.n	800df68 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800df64:	2301      	movs	r3, #1
 800df66:	e000      	b.n	800df6a <LL_ADC_IsCalibrationOnGoing+0x1e>
 800df68:	2300      	movs	r3, #0
}
 800df6a:	0018      	movs	r0, r3
 800df6c:	46bd      	mov	sp, r7
 800df6e:	b002      	add	sp, #8
 800df70:	bd80      	pop	{r7, pc}
	...

0800df74 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800df74:	b590      	push	{r4, r7, lr}
 800df76:	b08b      	sub	sp, #44	; 0x2c
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2254      	movs	r2, #84	; 0x54
 800df88:	5c9b      	ldrb	r3, [r3, r2]
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d101      	bne.n	800df92 <HAL_ADCEx_Calibration_Start+0x1e>
 800df8e:	2302      	movs	r3, #2
 800df90:	e0dd      	b.n	800e14e <HAL_ADCEx_Calibration_Start+0x1da>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2254      	movs	r2, #84	; 0x54
 800df96:	2101      	movs	r1, #1
 800df98:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800df9a:	231f      	movs	r3, #31
 800df9c:	18fc      	adds	r4, r7, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	0018      	movs	r0, r3
 800dfa2:	f7ff fe63 	bl	800dc6c <ADC_Disable>
 800dfa6:	0003      	movs	r3, r0
 800dfa8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	0018      	movs	r0, r3
 800dfb0:	f7ff ffa6 	bl	800df00 <LL_ADC_IsEnabled>
 800dfb4:	1e03      	subs	r3, r0, #0
 800dfb6:	d000      	beq.n	800dfba <HAL_ADCEx_Calibration_Start+0x46>
 800dfb8:	e0bc      	b.n	800e134 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfbe:	4a66      	ldr	r2, [pc, #408]	; (800e158 <HAL_ADCEx_Calibration_Start+0x1e4>)
 800dfc0:	4013      	ands	r3, r2
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68db      	ldr	r3, [r3, #12]
 800dfd0:	4a62      	ldr	r2, [pc, #392]	; (800e15c <HAL_ADCEx_Calibration_Start+0x1e8>)
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	68da      	ldr	r2, [r3, #12]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	495f      	ldr	r1, [pc, #380]	; (800e160 <HAL_ADCEx_Calibration_Start+0x1ec>)
 800dfe2:	400a      	ands	r2, r1
 800dfe4:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	627b      	str	r3, [r7, #36]	; 0x24
 800dfea:	e02d      	b.n	800e048 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	0018      	movs	r0, r3
 800dff2:	f7ff ff97 	bl	800df24 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800dff6:	e014      	b.n	800e022 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	3301      	adds	r3, #1
 800dffc:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	4a58      	ldr	r2, [pc, #352]	; (800e164 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d90d      	bls.n	800e022 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e00a:	2212      	movs	r2, #18
 800e00c:	4393      	bics	r3, r2
 800e00e:	2210      	movs	r2, #16
 800e010:	431a      	orrs	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2254      	movs	r2, #84	; 0x54
 800e01a:	2100      	movs	r1, #0
 800e01c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800e01e:	2301      	movs	r3, #1
 800e020:	e095      	b.n	800e14e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	0018      	movs	r0, r3
 800e028:	f7ff ff90 	bl	800df4c <LL_ADC_IsCalibrationOnGoing>
 800e02c:	1e03      	subs	r3, r0, #0
 800e02e:	d1e3      	bne.n	800dff8 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	0018      	movs	r0, r3
 800e036:	f7ff ff32 	bl	800de9e <LL_ADC_GetCalibrationFactor>
 800e03a:	0002      	movs	r2, r0
 800e03c:	6a3b      	ldr	r3, [r7, #32]
 800e03e:	189b      	adds	r3, r3, r2
 800e040:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	3301      	adds	r3, #1
 800e046:	627b      	str	r3, [r7, #36]	; 0x24
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	2b07      	cmp	r3, #7
 800e04c:	d9ce      	bls.n	800dfec <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800e04e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e050:	6a38      	ldr	r0, [r7, #32]
 800e052:	f7f8 f8e1 	bl	8006218 <__udivsi3>
 800e056:	0003      	movs	r3, r0
 800e058:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	0018      	movs	r0, r3
 800e060:	f7ff ff2a 	bl	800deb8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	0018      	movs	r0, r3
 800e06a:	f7ff fef8 	bl	800de5e <LL_ADC_GetClock>
 800e06e:	1e03      	subs	r3, r0, #0
 800e070:	d11b      	bne.n	800e0aa <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800e072:	4b3d      	ldr	r3, [pc, #244]	; (800e168 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800e074:	0018      	movs	r0, r3
 800e076:	f7ff fee5 	bl	800de44 <LL_ADC_GetCommonClock>
 800e07a:	0003      	movs	r3, r0
 800e07c:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	23e0      	movs	r3, #224	; 0xe0
 800e082:	035b      	lsls	r3, r3, #13
 800e084:	429a      	cmp	r2, r3
 800e086:	d310      	bcc.n	800e0aa <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	0c9b      	lsrs	r3, r3, #18
 800e08c:	3b03      	subs	r3, #3
 800e08e:	2201      	movs	r2, #1
 800e090:	409a      	lsls	r2, r3
 800e092:	0013      	movs	r3, r2
 800e094:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	085b      	lsrs	r3, r3, #1
 800e09a:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 800e09c:	e002      	b.n	800e0a4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1f9      	bne.n	800e09e <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6a3a      	ldr	r2, [r7, #32]
 800e0b0:	0011      	movs	r1, r2
 800e0b2:	0018      	movs	r0, r3
 800e0b4:	f7ff fedf 	bl	800de76 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	0018      	movs	r0, r3
 800e0be:	f7ff ff0d 	bl	800dedc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800e0c2:	f7fe fae9 	bl	800c698 <HAL_GetTick>
 800e0c6:	0003      	movs	r3, r0
 800e0c8:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e0ca:	e01b      	b.n	800e104 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800e0cc:	f7fe fae4 	bl	800c698 <HAL_GetTick>
 800e0d0:	0002      	movs	r2, r0
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	d914      	bls.n	800e104 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	0018      	movs	r0, r3
 800e0e0:	f7ff ff0e 	bl	800df00 <LL_ADC_IsEnabled>
 800e0e4:	1e03      	subs	r3, r0, #0
 800e0e6:	d00d      	beq.n	800e104 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ec:	2210      	movs	r2, #16
 800e0ee:	431a      	orrs	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	e024      	b.n	800e14e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	0018      	movs	r0, r3
 800e10a:	f7ff fef9 	bl	800df00 <LL_ADC_IsEnabled>
 800e10e:	1e03      	subs	r3, r0, #0
 800e110:	d1dc      	bne.n	800e0cc <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68d9      	ldr	r1, [r3, #12]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	69ba      	ldr	r2, [r7, #24]
 800e11e:	430a      	orrs	r2, r1
 800e120:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e126:	2203      	movs	r2, #3
 800e128:	4393      	bics	r3, r2
 800e12a:	2201      	movs	r2, #1
 800e12c:	431a      	orrs	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	659a      	str	r2, [r3, #88]	; 0x58
 800e132:	e005      	b.n	800e140 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e138:	2210      	movs	r2, #16
 800e13a:	431a      	orrs	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2254      	movs	r2, #84	; 0x54
 800e144:	2100      	movs	r1, #0
 800e146:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800e148:	231f      	movs	r3, #31
 800e14a:	18fb      	adds	r3, r7, r3
 800e14c:	781b      	ldrb	r3, [r3, #0]
}
 800e14e:	0018      	movs	r0, r3
 800e150:	46bd      	mov	sp, r7
 800e152:	b00b      	add	sp, #44	; 0x2c
 800e154:	bd90      	pop	{r4, r7, pc}
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	fffffefd 	.word	0xfffffefd
 800e15c:	00008003 	.word	0x00008003
 800e160:	ffff7ffc 	.word	0xffff7ffc
 800e164:	0002f1ff 	.word	0x0002f1ff
 800e168:	40012708 	.word	0x40012708

0800e16c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800e174:	46c0      	nop			; (mov r8, r8)
 800e176:	46bd      	mov	sp, r7
 800e178:	b002      	add	sp, #8
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800e184:	46c0      	nop			; (mov r8, r8)
 800e186:	46bd      	mov	sp, r7
 800e188:	b002      	add	sp, #8
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 800e194:	46c0      	nop			; (mov r8, r8)
 800e196:	46bd      	mov	sp, r7
 800e198:	b002      	add	sp, #8
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <__NVIC_EnableIRQ>:
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	0002      	movs	r2, r0
 800e1a4:	1dfb      	adds	r3, r7, #7
 800e1a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e1a8:	1dfb      	adds	r3, r7, #7
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b7f      	cmp	r3, #127	; 0x7f
 800e1ae:	d809      	bhi.n	800e1c4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e1b0:	1dfb      	adds	r3, r7, #7
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	001a      	movs	r2, r3
 800e1b6:	231f      	movs	r3, #31
 800e1b8:	401a      	ands	r2, r3
 800e1ba:	4b04      	ldr	r3, [pc, #16]	; (800e1cc <__NVIC_EnableIRQ+0x30>)
 800e1bc:	2101      	movs	r1, #1
 800e1be:	4091      	lsls	r1, r2
 800e1c0:	000a      	movs	r2, r1
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	46c0      	nop			; (mov r8, r8)
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	b002      	add	sp, #8
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	e000e100 	.word	0xe000e100

0800e1d0 <__NVIC_SetPriority>:
{
 800e1d0:	b590      	push	{r4, r7, lr}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	0002      	movs	r2, r0
 800e1d8:	6039      	str	r1, [r7, #0]
 800e1da:	1dfb      	adds	r3, r7, #7
 800e1dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e1de:	1dfb      	adds	r3, r7, #7
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b7f      	cmp	r3, #127	; 0x7f
 800e1e4:	d828      	bhi.n	800e238 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e1e6:	4a2f      	ldr	r2, [pc, #188]	; (800e2a4 <__NVIC_SetPriority+0xd4>)
 800e1e8:	1dfb      	adds	r3, r7, #7
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	b25b      	sxtb	r3, r3
 800e1ee:	089b      	lsrs	r3, r3, #2
 800e1f0:	33c0      	adds	r3, #192	; 0xc0
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	589b      	ldr	r3, [r3, r2]
 800e1f6:	1dfa      	adds	r2, r7, #7
 800e1f8:	7812      	ldrb	r2, [r2, #0]
 800e1fa:	0011      	movs	r1, r2
 800e1fc:	2203      	movs	r2, #3
 800e1fe:	400a      	ands	r2, r1
 800e200:	00d2      	lsls	r2, r2, #3
 800e202:	21ff      	movs	r1, #255	; 0xff
 800e204:	4091      	lsls	r1, r2
 800e206:	000a      	movs	r2, r1
 800e208:	43d2      	mvns	r2, r2
 800e20a:	401a      	ands	r2, r3
 800e20c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	019b      	lsls	r3, r3, #6
 800e212:	22ff      	movs	r2, #255	; 0xff
 800e214:	401a      	ands	r2, r3
 800e216:	1dfb      	adds	r3, r7, #7
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	0018      	movs	r0, r3
 800e21c:	2303      	movs	r3, #3
 800e21e:	4003      	ands	r3, r0
 800e220:	00db      	lsls	r3, r3, #3
 800e222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e224:	481f      	ldr	r0, [pc, #124]	; (800e2a4 <__NVIC_SetPriority+0xd4>)
 800e226:	1dfb      	adds	r3, r7, #7
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	b25b      	sxtb	r3, r3
 800e22c:	089b      	lsrs	r3, r3, #2
 800e22e:	430a      	orrs	r2, r1
 800e230:	33c0      	adds	r3, #192	; 0xc0
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	501a      	str	r2, [r3, r0]
}
 800e236:	e031      	b.n	800e29c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e238:	4a1b      	ldr	r2, [pc, #108]	; (800e2a8 <__NVIC_SetPriority+0xd8>)
 800e23a:	1dfb      	adds	r3, r7, #7
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	0019      	movs	r1, r3
 800e240:	230f      	movs	r3, #15
 800e242:	400b      	ands	r3, r1
 800e244:	3b08      	subs	r3, #8
 800e246:	089b      	lsrs	r3, r3, #2
 800e248:	3306      	adds	r3, #6
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	18d3      	adds	r3, r2, r3
 800e24e:	3304      	adds	r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	1dfa      	adds	r2, r7, #7
 800e254:	7812      	ldrb	r2, [r2, #0]
 800e256:	0011      	movs	r1, r2
 800e258:	2203      	movs	r2, #3
 800e25a:	400a      	ands	r2, r1
 800e25c:	00d2      	lsls	r2, r2, #3
 800e25e:	21ff      	movs	r1, #255	; 0xff
 800e260:	4091      	lsls	r1, r2
 800e262:	000a      	movs	r2, r1
 800e264:	43d2      	mvns	r2, r2
 800e266:	401a      	ands	r2, r3
 800e268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	019b      	lsls	r3, r3, #6
 800e26e:	22ff      	movs	r2, #255	; 0xff
 800e270:	401a      	ands	r2, r3
 800e272:	1dfb      	adds	r3, r7, #7
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	0018      	movs	r0, r3
 800e278:	2303      	movs	r3, #3
 800e27a:	4003      	ands	r3, r0
 800e27c:	00db      	lsls	r3, r3, #3
 800e27e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e280:	4809      	ldr	r0, [pc, #36]	; (800e2a8 <__NVIC_SetPriority+0xd8>)
 800e282:	1dfb      	adds	r3, r7, #7
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	001c      	movs	r4, r3
 800e288:	230f      	movs	r3, #15
 800e28a:	4023      	ands	r3, r4
 800e28c:	3b08      	subs	r3, #8
 800e28e:	089b      	lsrs	r3, r3, #2
 800e290:	430a      	orrs	r2, r1
 800e292:	3306      	adds	r3, #6
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	18c3      	adds	r3, r0, r3
 800e298:	3304      	adds	r3, #4
 800e29a:	601a      	str	r2, [r3, #0]
}
 800e29c:	46c0      	nop			; (mov r8, r8)
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	b003      	add	sp, #12
 800e2a2:	bd90      	pop	{r4, r7, pc}
 800e2a4:	e000e100 	.word	0xe000e100
 800e2a8:	e000ed00 	.word	0xe000ed00

0800e2ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800e2b0:	f3bf 8f4f 	dsb	sy
}
 800e2b4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e2b6:	4b04      	ldr	r3, [pc, #16]	; (800e2c8 <__NVIC_SystemReset+0x1c>)
 800e2b8:	4a04      	ldr	r2, [pc, #16]	; (800e2cc <__NVIC_SystemReset+0x20>)
 800e2ba:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e2bc:	f3bf 8f4f 	dsb	sy
}
 800e2c0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800e2c2:	46c0      	nop			; (mov r8, r8)
 800e2c4:	e7fd      	b.n	800e2c2 <__NVIC_SystemReset+0x16>
 800e2c6:	46c0      	nop			; (mov r8, r8)
 800e2c8:	e000ed00 	.word	0xe000ed00
 800e2cc:	05fa0004 	.word	0x05fa0004

0800e2d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60b9      	str	r1, [r7, #8]
 800e2d8:	607a      	str	r2, [r7, #4]
 800e2da:	210f      	movs	r1, #15
 800e2dc:	187b      	adds	r3, r7, r1
 800e2de:	1c02      	adds	r2, r0, #0
 800e2e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	187b      	adds	r3, r7, r1
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	b25b      	sxtb	r3, r3
 800e2ea:	0011      	movs	r1, r2
 800e2ec:	0018      	movs	r0, r3
 800e2ee:	f7ff ff6f 	bl	800e1d0 <__NVIC_SetPriority>
}
 800e2f2:	46c0      	nop			; (mov r8, r8)
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	b004      	add	sp, #16
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b082      	sub	sp, #8
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	0002      	movs	r2, r0
 800e302:	1dfb      	adds	r3, r7, #7
 800e304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e306:	1dfb      	adds	r3, r7, #7
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	b25b      	sxtb	r3, r3
 800e30c:	0018      	movs	r0, r3
 800e30e:	f7ff ff45 	bl	800e19c <__NVIC_EnableIRQ>
}
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	46bd      	mov	sp, r7
 800e316:	b002      	add	sp, #8
 800e318:	bd80      	pop	{r7, pc}

0800e31a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800e31e:	f7ff ffc5 	bl	800e2ac <__NVIC_SystemReset>

0800e322 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800e330:	2301      	movs	r3, #1
 800e332:	e015      	b.n	800e360 <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	791b      	ldrb	r3, [r3, #4]
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d106      	bne.n	800e34c <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	0018      	movs	r0, r3
 800e348:	f7fd fdb6 	bl	800beb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2202      	movs	r2, #2
 800e350:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	0018      	movs	r0, r3
 800e362:	46bd      	mov	sp, r7
 800e364:	b002      	add	sp, #8
 800e366:	bd80      	pop	{r7, pc}

0800e368 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e047      	b.n	800e40c <HAL_DAC_Start+0xa4>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	795b      	ldrb	r3, [r3, #5]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d101      	bne.n	800e388 <HAL_DAC_Start+0x20>
 800e384:	2302      	movs	r3, #2
 800e386:	e041      	b.n	800e40c <HAL_DAC_Start+0xa4>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2202      	movs	r2, #2
 800e392:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	6819      	ldr	r1, [r3, #0]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2210      	movs	r2, #16
 800e39e:	4013      	ands	r3, r2
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	409a      	lsls	r2, r3
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d10f      	bne.n	800e3d2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	223e      	movs	r2, #62	; 0x3e
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d11e      	bne.n	800e3fe <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	685a      	ldr	r2, [r3, #4]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	430a      	orrs	r2, r1
 800e3ce:	605a      	str	r2, [r3, #4]
 800e3d0:	e015      	b.n	800e3fe <HAL_DAC_Start+0x96>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	23f8      	movs	r3, #248	; 0xf8
 800e3da:	039b      	lsls	r3, r3, #14
 800e3dc:	401a      	ands	r2, r3
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2110      	movs	r1, #16
 800e3e2:	400b      	ands	r3, r1
 800e3e4:	2102      	movs	r1, #2
 800e3e6:	4099      	lsls	r1, r3
 800e3e8:	000b      	movs	r3, r1
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d107      	bne.n	800e3fe <HAL_DAC_Start+0x96>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2102      	movs	r1, #2
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2201      	movs	r2, #1
 800e402:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	0018      	movs	r0, r3
 800e40e:	46bd      	mov	sp, r7
 800e410:	b002      	add	sp, #8
 800e412:	bd80      	pop	{r7, pc}

0800e414 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e42a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	2380      	movs	r3, #128	; 0x80
 800e430:	019b      	lsls	r3, r3, #6
 800e432:	4013      	ands	r3, r2
 800e434:	d01e      	beq.n	800e474 <HAL_DAC_IRQHandler+0x60>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	2380      	movs	r3, #128	; 0x80
 800e43a:	019b      	lsls	r3, r3, #6
 800e43c:	4013      	ands	r3, r2
 800e43e:	d019      	beq.n	800e474 <HAL_DAC_IRQHandler+0x60>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2204      	movs	r2, #4
 800e444:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	2201      	movs	r2, #1
 800e44c:	431a      	orrs	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2280      	movs	r2, #128	; 0x80
 800e458:	0192      	lsls	r2, r2, #6
 800e45a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	4917      	ldr	r1, [pc, #92]	; (800e4c4 <HAL_DAC_IRQHandler+0xb0>)
 800e468:	400a      	ands	r2, r1
 800e46a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	0018      	movs	r0, r3
 800e470:	f000 f853 	bl	800e51a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	2380      	movs	r3, #128	; 0x80
 800e478:	059b      	lsls	r3, r3, #22
 800e47a:	4013      	ands	r3, r2
 800e47c:	d01e      	beq.n	800e4bc <HAL_DAC_IRQHandler+0xa8>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	2380      	movs	r3, #128	; 0x80
 800e482:	059b      	lsls	r3, r3, #22
 800e484:	4013      	ands	r3, r2
 800e486:	d019      	beq.n	800e4bc <HAL_DAC_IRQHandler+0xa8>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2204      	movs	r2, #4
 800e48c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	2202      	movs	r2, #2
 800e494:	431a      	orrs	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2280      	movs	r2, #128	; 0x80
 800e4a0:	0592      	lsls	r2, r2, #22
 800e4a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4906      	ldr	r1, [pc, #24]	; (800e4c8 <HAL_DAC_IRQHandler+0xb4>)
 800e4b0:	400a      	ands	r2, r1
 800e4b2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	0018      	movs	r0, r3
 800e4b8:	f000 f968 	bl	800e78c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800e4bc:	46c0      	nop			; (mov r8, r8)
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	b004      	add	sp, #16
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	ffffefff 	.word	0xffffefff
 800e4c8:	efffffff 	.word	0xefffffff

0800e4cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	60b9      	str	r1, [r7, #8]
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e014      	b.n	800e512 <HAL_DAC_SetValue+0x46>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d105      	bne.n	800e500 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	18d3      	adds	r3, r2, r3
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	e004      	b.n	800e50a <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800e500:	697a      	ldr	r2, [r7, #20]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	18d3      	adds	r3, r2, r3
 800e506:	3314      	adds	r3, #20
 800e508:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	683a      	ldr	r2, [r7, #0]
 800e50e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	0018      	movs	r0, r3
 800e514:	46bd      	mov	sp, r7
 800e516:	b006      	add	sp, #24
 800e518:	bd80      	pop	{r7, pc}

0800e51a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	46bd      	mov	sp, r7
 800e526:	b002      	add	sp, #8
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	60f8      	str	r0, [r7, #12]
 800e534:	60b9      	str	r1, [r7, #8]
 800e536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e538:	231f      	movs	r3, #31
 800e53a:	18fb      	adds	r3, r7, r3
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <HAL_DAC_ConfigChannel+0x20>
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d101      	bne.n	800e550 <HAL_DAC_ConfigChannel+0x24>
  {
    return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e115      	b.n	800e77c <HAL_DAC_ConfigChannel+0x250>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	795b      	ldrb	r3, [r3, #5]
 800e554:	2b01      	cmp	r3, #1
 800e556:	d101      	bne.n	800e55c <HAL_DAC_ConfigChannel+0x30>
 800e558:	2302      	movs	r3, #2
 800e55a:	e10f      	b.n	800e77c <HAL_DAC_ConfigChannel+0x250>
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2201      	movs	r2, #1
 800e560:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2202      	movs	r2, #2
 800e566:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	2b04      	cmp	r3, #4
 800e56e:	d000      	beq.n	800e572 <HAL_DAC_ConfigChannel+0x46>
 800e570:	e07a      	b.n	800e668 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800e572:	f7fe f891 	bl	800c698 <HAL_GetTick>
 800e576:	0003      	movs	r3, r0
 800e578:	61bb      	str	r3, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d13d      	bne.n	800e5fc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e580:	e018      	b.n	800e5b4 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800e582:	f7fe f889 	bl	800c698 <HAL_GetTick>
 800e586:	0002      	movs	r2, r0
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d911      	bls.n	800e5b4 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e596:	2380      	movs	r3, #128	; 0x80
 800e598:	021b      	lsls	r3, r3, #8
 800e59a:	4013      	ands	r3, r2
 800e59c:	d00a      	beq.n	800e5b4 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	2208      	movs	r2, #8
 800e5a4:	431a      	orrs	r2, r3
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2203      	movs	r2, #3
 800e5ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e0e3      	b.n	800e77c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ba:	2380      	movs	r3, #128	; 0x80
 800e5bc:	021b      	lsls	r3, r3, #8
 800e5be:	4013      	ands	r3, r2
 800e5c0:	d1df      	bne.n	800e582 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	6992      	ldr	r2, [r2, #24]
 800e5ca:	641a      	str	r2, [r3, #64]	; 0x40
 800e5cc:	e020      	b.n	800e610 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800e5ce:	f7fe f863 	bl	800c698 <HAL_GetTick>
 800e5d2:	0002      	movs	r2, r0
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d90f      	bls.n	800e5fc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	da0a      	bge.n	800e5fc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	691b      	ldr	r3, [r3, #16]
 800e5ea:	2208      	movs	r2, #8
 800e5ec:	431a      	orrs	r2, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2203      	movs	r2, #3
 800e5f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	e0bf      	b.n	800e77c <HAL_DAC_ConfigChannel+0x250>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e602:	2b00      	cmp	r3, #0
 800e604:	dbe3      	blt.n	800e5ce <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	6992      	ldr	r2, [r2, #24]
 800e60e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	2110      	movs	r1, #16
 800e61a:	400a      	ands	r2, r1
 800e61c:	4959      	ldr	r1, [pc, #356]	; (800e784 <HAL_DAC_ConfigChannel+0x258>)
 800e61e:	4091      	lsls	r1, r2
 800e620:	000a      	movs	r2, r1
 800e622:	43d2      	mvns	r2, r2
 800e624:	401a      	ands	r2, r3
 800e626:	0011      	movs	r1, r2
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	69da      	ldr	r2, [r3, #28]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2010      	movs	r0, #16
 800e630:	4003      	ands	r3, r0
 800e632:	409a      	lsls	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	430a      	orrs	r2, r1
 800e63a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	2110      	movs	r1, #16
 800e646:	400a      	ands	r2, r1
 800e648:	21ff      	movs	r1, #255	; 0xff
 800e64a:	4091      	lsls	r1, r2
 800e64c:	000a      	movs	r2, r1
 800e64e:	43d2      	mvns	r2, r2
 800e650:	401a      	ands	r2, r3
 800e652:	0011      	movs	r1, r2
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	6a1a      	ldr	r2, [r3, #32]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2010      	movs	r0, #16
 800e65c:	4003      	ands	r3, r0
 800e65e:	409a      	lsls	r2, r3
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	430a      	orrs	r2, r1
 800e666:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d11d      	bne.n	800e6ac <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e676:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2210      	movs	r2, #16
 800e67c:	4013      	ands	r3, r2
 800e67e:	221f      	movs	r2, #31
 800e680:	409a      	lsls	r2, r3
 800e682:	0013      	movs	r3, r2
 800e684:	43da      	mvns	r2, r3
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	4013      	ands	r3, r2
 800e68a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	695b      	ldr	r3, [r3, #20]
 800e690:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2210      	movs	r2, #16
 800e696:	4013      	ands	r3, r2
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	409a      	lsls	r2, r3
 800e69c:	0013      	movs	r3, r2
 800e69e:	697a      	ldr	r2, [r7, #20]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2210      	movs	r2, #16
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2207      	movs	r2, #7
 800e6bc:	409a      	lsls	r2, r3
 800e6be:	0013      	movs	r3, r2
 800e6c0:	43da      	mvns	r2, r3
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	431a      	orrs	r2, r3
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2210      	movs	r2, #16
 800e6de:	4013      	ands	r3, r2
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	409a      	lsls	r2, r3
 800e6e4:	0013      	movs	r3, r2
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	697a      	ldr	r2, [r7, #20]
 800e6f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2110      	movs	r1, #16
 800e6fe:	400b      	ands	r3, r1
 800e700:	2180      	movs	r1, #128	; 0x80
 800e702:	01c9      	lsls	r1, r1, #7
 800e704:	4099      	lsls	r1, r3
 800e706:	000b      	movs	r3, r1
 800e708:	43d9      	mvns	r1, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	400a      	ands	r2, r1
 800e710:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2210      	movs	r2, #16
 800e71e:	4013      	ands	r3, r2
 800e720:	4a19      	ldr	r2, [pc, #100]	; (800e788 <HAL_DAC_ConfigChannel+0x25c>)
 800e722:	409a      	lsls	r2, r3
 800e724:	0013      	movs	r3, r2
 800e726:	43da      	mvns	r2, r3
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	4013      	ands	r3, r2
 800e72c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2210      	movs	r2, #16
 800e738:	4013      	ands	r3, r2
 800e73a:	693a      	ldr	r2, [r7, #16]
 800e73c:	409a      	lsls	r2, r3
 800e73e:	0013      	movs	r3, r2
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4313      	orrs	r3, r2
 800e744:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	697a      	ldr	r2, [r7, #20]
 800e74c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	681a      	ldr	r2, [r3, #0]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2110      	movs	r1, #16
 800e758:	400b      	ands	r3, r1
 800e75a:	21c0      	movs	r1, #192	; 0xc0
 800e75c:	4099      	lsls	r1, r3
 800e75e:	000b      	movs	r3, r1
 800e760:	43d9      	mvns	r1, r3
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	400a      	ands	r2, r1
 800e768:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2201      	movs	r2, #1
 800e76e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800e776:	231f      	movs	r3, #31
 800e778:	18fb      	adds	r3, r7, r3
 800e77a:	781b      	ldrb	r3, [r3, #0]
}
 800e77c:	0018      	movs	r0, r3
 800e77e:	46bd      	mov	sp, r7
 800e780:	b008      	add	sp, #32
 800e782:	bd80      	pop	{r7, pc}
 800e784:	000003ff 	.word	0x000003ff
 800e788:	00000ffe 	.word	0x00000ffe

0800e78c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800e794:	46c0      	nop			; (mov r8, r8)
 800e796:	46bd      	mov	sp, r7
 800e798:	b002      	add	sp, #8
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e091      	b.n	800e8d2 <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	001a      	movs	r2, r3
 800e7b4:	4b49      	ldr	r3, [pc, #292]	; (800e8dc <HAL_DMA_Init+0x140>)
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d810      	bhi.n	800e7dc <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a48      	ldr	r2, [pc, #288]	; (800e8e0 <HAL_DMA_Init+0x144>)
 800e7c0:	4694      	mov	ip, r2
 800e7c2:	4463      	add	r3, ip
 800e7c4:	2114      	movs	r1, #20
 800e7c6:	0018      	movs	r0, r3
 800e7c8:	f7f7 fd26 	bl	8006218 <__udivsi3>
 800e7cc:	0003      	movs	r3, r0
 800e7ce:	009a      	lsls	r2, r3, #2
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	4a43      	ldr	r2, [pc, #268]	; (800e8e4 <HAL_DMA_Init+0x148>)
 800e7d8:	641a      	str	r2, [r3, #64]	; 0x40
 800e7da:	e00f      	b.n	800e7fc <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a41      	ldr	r2, [pc, #260]	; (800e8e8 <HAL_DMA_Init+0x14c>)
 800e7e2:	4694      	mov	ip, r2
 800e7e4:	4463      	add	r3, ip
 800e7e6:	2114      	movs	r1, #20
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	f7f7 fd15 	bl	8006218 <__udivsi3>
 800e7ee:	0003      	movs	r3, r0
 800e7f0:	009a      	lsls	r2, r3, #2
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a3c      	ldr	r2, [pc, #240]	; (800e8ec <HAL_DMA_Init+0x150>)
 800e7fa:	641a      	str	r2, [r3, #64]	; 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2225      	movs	r2, #37	; 0x25
 800e800:	2102      	movs	r1, #2
 800e802:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4938      	ldr	r1, [pc, #224]	; (800e8f0 <HAL_DMA_Init+0x154>)
 800e810:	400a      	ands	r2, r1
 800e812:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6819      	ldr	r1, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	689a      	ldr	r2, [r3, #8]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	431a      	orrs	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	691b      	ldr	r3, [r3, #16]
 800e828:	431a      	orrs	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	431a      	orrs	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	699b      	ldr	r3, [r3, #24]
 800e834:	431a      	orrs	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	431a      	orrs	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a1b      	ldr	r3, [r3, #32]
 800e840:	431a      	orrs	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	0018      	movs	r0, r3
 800e84e:	f000 f9d7 	bl	800ec00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	689a      	ldr	r2, [r3, #8]
 800e856:	2380      	movs	r3, #128	; 0x80
 800e858:	01db      	lsls	r3, r3, #7
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d102      	bne.n	800e864 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	685a      	ldr	r2, [r3, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e86c:	217f      	movs	r1, #127	; 0x7f
 800e86e:	400a      	ands	r2, r1
 800e870:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e87a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d011      	beq.n	800e8a8 <HAL_DMA_Init+0x10c>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	2b04      	cmp	r3, #4
 800e88a:	d80d      	bhi.n	800e8a8 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	0018      	movs	r0, r3
 800e890:	f000 fa00 	bl	800ec94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e8a4:	605a      	str	r2, [r3, #4]
 800e8a6:	e008      	b.n	800e8ba <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2225      	movs	r2, #37	; 0x25
 800e8c4:	2101      	movs	r1, #1
 800e8c6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2224      	movs	r2, #36	; 0x24
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	b002      	add	sp, #8
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	46c0      	nop			; (mov r8, r8)
 800e8dc:	40020407 	.word	0x40020407
 800e8e0:	bffdfff8 	.word	0xbffdfff8
 800e8e4:	40020000 	.word	0x40020000
 800e8e8:	bffdfbf8 	.word	0xbffdfbf8
 800e8ec:	40020400 	.word	0x40020400
 800e8f0:	ffff800f 	.word	0xffff800f

0800e8f4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
 800e900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e902:	2317      	movs	r3, #23
 800e904:	18fb      	adds	r3, r7, r3
 800e906:	2200      	movs	r2, #0
 800e908:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2224      	movs	r2, #36	; 0x24
 800e90e:	5c9b      	ldrb	r3, [r3, r2]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d101      	bne.n	800e918 <HAL_DMA_Start_IT+0x24>
 800e914:	2302      	movs	r3, #2
 800e916:	e06f      	b.n	800e9f8 <HAL_DMA_Start_IT+0x104>
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2224      	movs	r2, #36	; 0x24
 800e91c:	2101      	movs	r1, #1
 800e91e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2225      	movs	r2, #37	; 0x25
 800e924:	5c9b      	ldrb	r3, [r3, r2]
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d157      	bne.n	800e9dc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2225      	movs	r2, #37	; 0x25
 800e930:	2102      	movs	r1, #2
 800e932:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2101      	movs	r1, #1
 800e946:	438a      	bics	r2, r1
 800e948:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	68b9      	ldr	r1, [r7, #8]
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f919 	bl	800eb88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d008      	beq.n	800e970 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	210e      	movs	r1, #14
 800e96a:	430a      	orrs	r2, r1
 800e96c:	601a      	str	r2, [r3, #0]
 800e96e:	e00f      	b.n	800e990 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2104      	movs	r1, #4
 800e97c:	438a      	bics	r2, r1
 800e97e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	210a      	movs	r1, #10
 800e98c:	430a      	orrs	r2, r1
 800e98e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	2380      	movs	r3, #128	; 0x80
 800e998:	025b      	lsls	r3, r3, #9
 800e99a:	4013      	ands	r3, r2
 800e99c:	d008      	beq.n	800e9b0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a8:	2180      	movs	r1, #128	; 0x80
 800e9aa:	0049      	lsls	r1, r1, #1
 800e9ac:	430a      	orrs	r2, r1
 800e9ae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d008      	beq.n	800e9ca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c2:	2180      	movs	r1, #128	; 0x80
 800e9c4:	0049      	lsls	r1, r1, #1
 800e9c6:	430a      	orrs	r2, r1
 800e9c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681a      	ldr	r2, [r3, #0]
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	601a      	str	r2, [r3, #0]
 800e9da:	e00a      	b.n	800e9f2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2280      	movs	r2, #128	; 0x80
 800e9e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2224      	movs	r2, #36	; 0x24
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800e9ea:	2317      	movs	r3, #23
 800e9ec:	18fb      	adds	r3, r7, r3
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800e9f2:	2317      	movs	r3, #23
 800e9f4:	18fb      	adds	r3, r7, r3
 800e9f6:	781b      	ldrb	r3, [r3, #0]
}
 800e9f8:	0018      	movs	r0, r3
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	b006      	add	sp, #24
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea1c:	221c      	movs	r2, #28
 800ea1e:	4013      	ands	r3, r2
 800ea20:	2204      	movs	r2, #4
 800ea22:	409a      	lsls	r2, r3
 800ea24:	0013      	movs	r3, r2
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	d026      	beq.n	800ea7a <HAL_DMA_IRQHandler+0x7a>
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	2204      	movs	r2, #4
 800ea30:	4013      	ands	r3, r2
 800ea32:	d022      	beq.n	800ea7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2220      	movs	r2, #32
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	d107      	bne.n	800ea50 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2104      	movs	r1, #4
 800ea4c:	438a      	bics	r2, r1
 800ea4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea54:	221c      	movs	r2, #28
 800ea56:	401a      	ands	r2, r3
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea5c:	2104      	movs	r1, #4
 800ea5e:	4091      	lsls	r1, r2
 800ea60:	000a      	movs	r2, r1
 800ea62:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d100      	bne.n	800ea6e <HAL_DMA_IRQHandler+0x6e>
 800ea6c:	e080      	b.n	800eb70 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	0010      	movs	r0, r2
 800ea76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800ea78:	e07a      	b.n	800eb70 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7e:	221c      	movs	r2, #28
 800ea80:	4013      	ands	r3, r2
 800ea82:	2202      	movs	r2, #2
 800ea84:	409a      	lsls	r2, r3
 800ea86:	0013      	movs	r3, r2
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	d03c      	beq.n	800eb08 <HAL_DMA_IRQHandler+0x108>
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2202      	movs	r2, #2
 800ea92:	4013      	ands	r3, r2
 800ea94:	d038      	beq.n	800eb08 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2220      	movs	r2, #32
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	d10b      	bne.n	800eaba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	210a      	movs	r1, #10
 800eaae:	438a      	bics	r2, r1
 800eab0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2225      	movs	r2, #37	; 0x25
 800eab6:	2101      	movs	r1, #1
 800eab8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	001a      	movs	r2, r3
 800eac0:	4b2e      	ldr	r3, [pc, #184]	; (800eb7c <HAL_DMA_IRQHandler+0x17c>)
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d909      	bls.n	800eada <HAL_DMA_IRQHandler+0xda>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaca:	221c      	movs	r2, #28
 800eacc:	401a      	ands	r2, r3
 800eace:	4b2c      	ldr	r3, [pc, #176]	; (800eb80 <HAL_DMA_IRQHandler+0x180>)
 800ead0:	2102      	movs	r1, #2
 800ead2:	4091      	lsls	r1, r2
 800ead4:	000a      	movs	r2, r1
 800ead6:	605a      	str	r2, [r3, #4]
 800ead8:	e008      	b.n	800eaec <HAL_DMA_IRQHandler+0xec>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eade:	221c      	movs	r2, #28
 800eae0:	401a      	ands	r2, r3
 800eae2:	4b28      	ldr	r3, [pc, #160]	; (800eb84 <HAL_DMA_IRQHandler+0x184>)
 800eae4:	2102      	movs	r1, #2
 800eae6:	4091      	lsls	r1, r2
 800eae8:	000a      	movs	r2, r1
 800eaea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2224      	movs	r2, #36	; 0x24
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d039      	beq.n	800eb70 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	0010      	movs	r0, r2
 800eb04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800eb06:	e033      	b.n	800eb70 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0c:	221c      	movs	r2, #28
 800eb0e:	4013      	ands	r3, r2
 800eb10:	2208      	movs	r2, #8
 800eb12:	409a      	lsls	r2, r3
 800eb14:	0013      	movs	r3, r2
 800eb16:	68fa      	ldr	r2, [r7, #12]
 800eb18:	4013      	ands	r3, r2
 800eb1a:	d02a      	beq.n	800eb72 <HAL_DMA_IRQHandler+0x172>
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2208      	movs	r2, #8
 800eb20:	4013      	ands	r3, r2
 800eb22:	d026      	beq.n	800eb72 <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	210e      	movs	r1, #14
 800eb30:	438a      	bics	r2, r1
 800eb32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb38:	221c      	movs	r2, #28
 800eb3a:	401a      	ands	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb40:	2101      	movs	r1, #1
 800eb42:	4091      	lsls	r1, r2
 800eb44:	000a      	movs	r2, r1
 800eb46:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2225      	movs	r2, #37	; 0x25
 800eb52:	2101      	movs	r1, #1
 800eb54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2224      	movs	r2, #36	; 0x24
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d005      	beq.n	800eb72 <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	0010      	movs	r0, r2
 800eb6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800eb70:	46c0      	nop			; (mov r8, r8)
 800eb72:	46c0      	nop			; (mov r8, r8)
}
 800eb74:	46bd      	mov	sp, r7
 800eb76:	b004      	add	sp, #16
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	46c0      	nop			; (mov r8, r8)
 800eb7c:	40020080 	.word	0x40020080
 800eb80:	40020400 	.word	0x40020400
 800eb84:	40020000 	.word	0x40020000

0800eb88 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800eb9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebac:	68fa      	ldr	r2, [r7, #12]
 800ebae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ebb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb6:	221c      	movs	r2, #28
 800ebb8:	401a      	ands	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	4091      	lsls	r1, r2
 800ebc2:	000a      	movs	r2, r1
 800ebc4:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	2b10      	cmp	r3, #16
 800ebd4:	d108      	bne.n	800ebe8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68ba      	ldr	r2, [r7, #8]
 800ebe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ebe6:	e007      	b.n	800ebf8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	60da      	str	r2, [r3, #12]
}
 800ebf8:	46c0      	nop			; (mov r8, r8)
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	b004      	add	sp, #16
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	001a      	movs	r2, r3
 800ec0e:	4b1d      	ldr	r3, [pc, #116]	; (800ec84 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d814      	bhi.n	800ec3e <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec18:	089b      	lsrs	r3, r3, #2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	4a1a      	ldr	r2, [pc, #104]	; (800ec88 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800ec1e:	189a      	adds	r2, r3, r2
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	001a      	movs	r2, r3
 800ec2a:	23ff      	movs	r3, #255	; 0xff
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	3b08      	subs	r3, #8
 800ec30:	2114      	movs	r1, #20
 800ec32:	0018      	movs	r0, r3
 800ec34:	f7f7 faf0 	bl	8006218 <__udivsi3>
 800ec38:	0003      	movs	r3, r0
 800ec3a:	60fb      	str	r3, [r7, #12]
 800ec3c:	e014      	b.n	800ec68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec42:	089b      	lsrs	r3, r3, #2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4a11      	ldr	r2, [pc, #68]	; (800ec8c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800ec48:	189a      	adds	r2, r3, r2
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	649a      	str	r2, [r3, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	001a      	movs	r2, r3
 800ec54:	23ff      	movs	r3, #255	; 0xff
 800ec56:	4013      	ands	r3, r2
 800ec58:	3b08      	subs	r3, #8
 800ec5a:	2114      	movs	r1, #20
 800ec5c:	0018      	movs	r0, r3
 800ec5e:	f7f7 fadb 	bl	8006218 <__udivsi3>
 800ec62:	0003      	movs	r3, r0
 800ec64:	3307      	adds	r3, #7
 800ec66:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a09      	ldr	r2, [pc, #36]	; (800ec90 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 800ec6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	221f      	movs	r2, #31
 800ec72:	4013      	ands	r3, r2
 800ec74:	2201      	movs	r2, #1
 800ec76:	409a      	lsls	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ec7c:	46c0      	nop			; (mov r8, r8)
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	b004      	add	sp, #16
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	40020407 	.word	0x40020407
 800ec88:	40020800 	.word	0x40020800
 800ec8c:	4002081c 	.word	0x4002081c
 800ec90:	40020880 	.word	0x40020880

0800ec94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	227f      	movs	r2, #127	; 0x7f
 800eca2:	4013      	ands	r3, r2
 800eca4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	4a0a      	ldr	r2, [pc, #40]	; (800ecd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ecaa:	4694      	mov	ip, r2
 800ecac:	4463      	add	r3, ip
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	001a      	movs	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a07      	ldr	r2, [pc, #28]	; (800ecd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ecba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	2203      	movs	r2, #3
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	409a      	lsls	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800eccc:	46c0      	nop			; (mov r8, r8)
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	b004      	add	sp, #16
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	1000823f 	.word	0x1000823f
 800ecd8:	40020940 	.word	0x40020940

0800ecdc <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ecdc:	b5b0      	push	{r4, r5, r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	603a      	str	r2, [r7, #0]
 800ece8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ecea:	4b21      	ldr	r3, [pc, #132]	; (800ed70 <HAL_FLASH_Program+0x94>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d101      	bne.n	800ecf6 <HAL_FLASH_Program+0x1a>
 800ecf2:	2302      	movs	r3, #2
 800ecf4:	e038      	b.n	800ed68 <HAL_FLASH_Program+0x8c>
 800ecf6:	4b1e      	ldr	r3, [pc, #120]	; (800ed70 <HAL_FLASH_Program+0x94>)
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ecfc:	4b1c      	ldr	r3, [pc, #112]	; (800ed70 <HAL_FLASH_Program+0x94>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed02:	2517      	movs	r5, #23
 800ed04:	197c      	adds	r4, r7, r5
 800ed06:	23fa      	movs	r3, #250	; 0xfa
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	0018      	movs	r0, r3
 800ed0c:	f000 f87a 	bl	800ee04 <FLASH_WaitForLastOperation>
 800ed10:	0003      	movs	r3, r0
 800ed12:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ed14:	197b      	adds	r3, r7, r5
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d11f      	bne.n	800ed5c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d106      	bne.n	800ed30 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ed22:	683a      	ldr	r2, [r7, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	68b9      	ldr	r1, [r7, #8]
 800ed28:	0008      	movs	r0, r1
 800ed2a:	f000 f8b9 	bl	800eea0 <FLASH_Program_DoubleWord>
 800ed2e:	e005      	b.n	800ed3c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	0011      	movs	r1, r2
 800ed36:	0018      	movs	r0, r3
 800ed38:	f01a ffd2 	bl	8029ce0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed3c:	2317      	movs	r3, #23
 800ed3e:	18fc      	adds	r4, r7, r3
 800ed40:	23fa      	movs	r3, #250	; 0xfa
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	0018      	movs	r0, r3
 800ed46:	f000 f85d 	bl	800ee04 <FLASH_WaitForLastOperation>
 800ed4a:	0003      	movs	r3, r0
 800ed4c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800ed4e:	4b09      	ldr	r3, [pc, #36]	; (800ed74 <HAL_FLASH_Program+0x98>)
 800ed50:	695a      	ldr	r2, [r3, #20]
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	43d9      	mvns	r1, r3
 800ed56:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <HAL_FLASH_Program+0x98>)
 800ed58:	400a      	ands	r2, r1
 800ed5a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ed5c:	4b04      	ldr	r3, [pc, #16]	; (800ed70 <HAL_FLASH_Program+0x94>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800ed62:	2317      	movs	r3, #23
 800ed64:	18fb      	adds	r3, r7, r3
 800ed66:	781b      	ldrb	r3, [r3, #0]
}
 800ed68:	0018      	movs	r0, r3
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	b006      	add	sp, #24
 800ed6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ed70:	20000a40 	.word	0x20000a40
 800ed74:	40022000 	.word	0x40022000

0800ed78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ed7e:	1dfb      	adds	r3, r7, #7
 800ed80:	2200      	movs	r2, #0
 800ed82:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ed84:	4b0b      	ldr	r3, [pc, #44]	; (800edb4 <HAL_FLASH_Unlock+0x3c>)
 800ed86:	695b      	ldr	r3, [r3, #20]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	da0c      	bge.n	800eda6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <HAL_FLASH_Unlock+0x3c>)
 800ed8e:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <HAL_FLASH_Unlock+0x40>)
 800ed90:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ed92:	4b08      	ldr	r3, [pc, #32]	; (800edb4 <HAL_FLASH_Unlock+0x3c>)
 800ed94:	4a09      	ldr	r2, [pc, #36]	; (800edbc <HAL_FLASH_Unlock+0x44>)
 800ed96:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ed98:	4b06      	ldr	r3, [pc, #24]	; (800edb4 <HAL_FLASH_Unlock+0x3c>)
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	da02      	bge.n	800eda6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800eda0:	1dfb      	adds	r3, r7, #7
 800eda2:	2201      	movs	r2, #1
 800eda4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800eda6:	1dfb      	adds	r3, r7, #7
 800eda8:	781b      	ldrb	r3, [r3, #0]
}
 800edaa:	0018      	movs	r0, r3
 800edac:	46bd      	mov	sp, r7
 800edae:	b002      	add	sp, #8
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	40022000 	.word	0x40022000
 800edb8:	45670123 	.word	0x45670123
 800edbc:	cdef89ab 	.word	0xcdef89ab

0800edc0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800edc6:	1dfb      	adds	r3, r7, #7
 800edc8:	2201      	movs	r2, #1
 800edca:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800edcc:	23fa      	movs	r3, #250	; 0xfa
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	0018      	movs	r0, r3
 800edd2:	f000 f817 	bl	800ee04 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800edd6:	4b0a      	ldr	r3, [pc, #40]	; (800ee00 <HAL_FLASH_Lock+0x40>)
 800edd8:	695a      	ldr	r2, [r3, #20]
 800edda:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <HAL_FLASH_Lock+0x40>)
 800eddc:	2180      	movs	r1, #128	; 0x80
 800edde:	0609      	lsls	r1, r1, #24
 800ede0:	430a      	orrs	r2, r1
 800ede2:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800ede4:	4b06      	ldr	r3, [pc, #24]	; (800ee00 <HAL_FLASH_Lock+0x40>)
 800ede6:	695b      	ldr	r3, [r3, #20]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	da02      	bge.n	800edf2 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800edec:	1dfb      	adds	r3, r7, #7
 800edee:	2200      	movs	r2, #0
 800edf0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	781b      	ldrb	r3, [r3, #0]
}
 800edf6:	0018      	movs	r0, r3
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b002      	add	sp, #8
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	46c0      	nop			; (mov r8, r8)
 800ee00:	40022000 	.word	0x40022000

0800ee04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800ee0c:	f7fd fc44 	bl	800c698 <HAL_GetTick>
 800ee10:	0003      	movs	r3, r0
 800ee12:	60fb      	str	r3, [r7, #12]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
 800ee14:	23c0      	movs	r3, #192	; 0xc0
 800ee16:	029b      	lsls	r3, r3, #10
 800ee18:	60bb      	str	r3, [r7, #8]
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800ee1a:	e00c      	b.n	800ee36 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	d009      	beq.n	800ee36 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800ee22:	f7fd fc39 	bl	800c698 <HAL_GetTick>
 800ee26:	0002      	movs	r2, r0
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d801      	bhi.n	800ee36 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ee32:	2303      	movs	r3, #3
 800ee34:	e028      	b.n	800ee88 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 800ee36:	4b16      	ldr	r3, [pc, #88]	; (800ee90 <FLASH_WaitForLastOperation+0x8c>)
 800ee38:	691b      	ldr	r3, [r3, #16]
 800ee3a:	68ba      	ldr	r2, [r7, #8]
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	d1ed      	bne.n	800ee1c <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800ee40:	4b13      	ldr	r3, [pc, #76]	; (800ee90 <FLASH_WaitForLastOperation+0x8c>)
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	4a13      	ldr	r2, [pc, #76]	; (800ee94 <FLASH_WaitForLastOperation+0x90>)
 800ee46:	4013      	ands	r3, r2
 800ee48:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800ee4a:	4b11      	ldr	r3, [pc, #68]	; (800ee90 <FLASH_WaitForLastOperation+0x8c>)
 800ee4c:	4a12      	ldr	r2, [pc, #72]	; (800ee98 <FLASH_WaitForLastOperation+0x94>)
 800ee4e:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d011      	beq.n	800ee7a <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800ee56:	4b11      	ldr	r3, [pc, #68]	; (800ee9c <FLASH_WaitForLastOperation+0x98>)
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e013      	b.n	800ee88 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3301      	adds	r3, #1
 800ee64:	d009      	beq.n	800ee7a <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800ee66:	f7fd fc17 	bl	800c698 <HAL_GetTick>
 800ee6a:	0002      	movs	r2, r0
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d801      	bhi.n	800ee7a <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 800ee76:	2303      	movs	r3, #3
 800ee78:	e006      	b.n	800ee88 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <FLASH_WaitForLastOperation+0x8c>)
 800ee7c:	691a      	ldr	r2, [r3, #16]
 800ee7e:	2380      	movs	r3, #128	; 0x80
 800ee80:	02db      	lsls	r3, r3, #11
 800ee82:	4013      	ands	r3, r2
 800ee84:	d1ec      	bne.n	800ee60 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	0018      	movs	r0, r3
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	b004      	add	sp, #16
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	40022000 	.word	0x40022000
 800ee94:	0000c3fa 	.word	0x0000c3fa
 800ee98:	0008c3fb 	.word	0x0008c3fb
 800ee9c:	20000a40 	.word	0x20000a40

0800eea0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800eea0:	b5b0      	push	{r4, r5, r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	603a      	str	r2, [r7, #0]
 800eeaa:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800eeac:	4b0b      	ldr	r3, [pc, #44]	; (800eedc <FLASH_Program_DoubleWord+0x3c>)
 800eeae:	695a      	ldr	r2, [r3, #20]
 800eeb0:	4b0a      	ldr	r3, [pc, #40]	; (800eedc <FLASH_Program_DoubleWord+0x3c>)
 800eeb2:	2101      	movs	r1, #1
 800eeb4:	430a      	orrs	r2, r1
 800eeb6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800eebe:	f3bf 8f6f 	isb	sy
}
 800eec2:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	001c      	movs	r4, r3
 800eec8:	2300      	movs	r3, #0
 800eeca:	001d      	movs	r5, r3
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	3304      	adds	r3, #4
 800eed0:	0022      	movs	r2, r4
 800eed2:	601a      	str	r2, [r3, #0]
}
 800eed4:	46c0      	nop			; (mov r8, r8)
 800eed6:	46bd      	mov	sp, r7
 800eed8:	b004      	add	sp, #16
 800eeda:	bdb0      	pop	{r4, r5, r7, pc}
 800eedc:	40022000 	.word	0x40022000

0800eee0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800eee0:	b5b0      	push	{r4, r5, r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800eeea:	4b33      	ldr	r3, [pc, #204]	; (800efb8 <HAL_FLASHEx_Erase+0xd8>)
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d101      	bne.n	800eef6 <HAL_FLASHEx_Erase+0x16>
 800eef2:	2302      	movs	r3, #2
 800eef4:	e05c      	b.n	800efb0 <HAL_FLASHEx_Erase+0xd0>
 800eef6:	4b30      	ldr	r3, [pc, #192]	; (800efb8 <HAL_FLASHEx_Erase+0xd8>)
 800eef8:	2201      	movs	r2, #1
 800eefa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800eefc:	4b2e      	ldr	r3, [pc, #184]	; (800efb8 <HAL_FLASHEx_Erase+0xd8>)
 800eefe:	2200      	movs	r2, #0
 800ef00:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef02:	250f      	movs	r5, #15
 800ef04:	197c      	adds	r4, r7, r5
 800ef06:	23fa      	movs	r3, #250	; 0xfa
 800ef08:	009b      	lsls	r3, r3, #2
 800ef0a:	0018      	movs	r0, r3
 800ef0c:	f7ff ff7a 	bl	800ee04 <FLASH_WaitForLastOperation>
 800ef10:	0003      	movs	r3, r0
 800ef12:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800ef14:	002c      	movs	r4, r5
 800ef16:	193b      	adds	r3, r7, r4
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d142      	bne.n	800efa4 <HAL_FLASHEx_Erase+0xc4>
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b04      	cmp	r3, #4
 800ef24:	d10d      	bne.n	800ef42 <HAL_FLASHEx_Erase+0x62>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	0018      	movs	r0, r3
 800ef2c:	f000 f848 	bl	800efc0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef30:	193c      	adds	r4, r7, r4
 800ef32:	23fa      	movs	r3, #250	; 0xfa
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	0018      	movs	r0, r3
 800ef38:	f7ff ff64 	bl	800ee04 <FLASH_WaitForLastOperation>
 800ef3c:	0003      	movs	r3, r0
 800ef3e:	7023      	strb	r3, [r4, #0]
 800ef40:	e030      	b.n	800efa4 <HAL_FLASHEx_Erase+0xc4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2201      	movs	r2, #1
 800ef46:	4252      	negs	r2, r2
 800ef48:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	60bb      	str	r3, [r7, #8]
 800ef50:	e01a      	b.n	800ef88 <HAL_FLASHEx_Erase+0xa8>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	0011      	movs	r1, r2
 800ef5a:	0018      	movs	r0, r3
 800ef5c:	f000 f844 	bl	800efe8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ef60:	250f      	movs	r5, #15
 800ef62:	197c      	adds	r4, r7, r5
 800ef64:	23fa      	movs	r3, #250	; 0xfa
 800ef66:	009b      	lsls	r3, r3, #2
 800ef68:	0018      	movs	r0, r3
 800ef6a:	f7ff ff4b 	bl	800ee04 <FLASH_WaitForLastOperation>
 800ef6e:	0003      	movs	r3, r0
 800ef70:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800ef72:	197b      	adds	r3, r7, r5
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <HAL_FLASHEx_Erase+0xa2>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	601a      	str	r2, [r3, #0]
          break;
 800ef80:	e00a      	b.n	800ef98 <HAL_FLASHEx_Erase+0xb8>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	3301      	adds	r3, #1
 800ef86:	60bb      	str	r3, [r7, #8]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	689a      	ldr	r2, [r3, #8]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	18d3      	adds	r3, r2, r3
 800ef92:	68ba      	ldr	r2, [r7, #8]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d3dc      	bcc.n	800ef52 <HAL_FLASHEx_Erase+0x72>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ef98:	4b08      	ldr	r3, [pc, #32]	; (800efbc <HAL_FLASHEx_Erase+0xdc>)
 800ef9a:	695a      	ldr	r2, [r3, #20]
 800ef9c:	4b07      	ldr	r3, [pc, #28]	; (800efbc <HAL_FLASHEx_Erase+0xdc>)
 800ef9e:	2102      	movs	r1, #2
 800efa0:	438a      	bics	r2, r1
 800efa2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800efa4:	4b04      	ldr	r3, [pc, #16]	; (800efb8 <HAL_FLASHEx_Erase+0xd8>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800efaa:	230f      	movs	r3, #15
 800efac:	18fb      	adds	r3, r7, r3
 800efae:	781b      	ldrb	r3, [r3, #0]
}
 800efb0:	0018      	movs	r0, r3
 800efb2:	46bd      	mov	sp, r7
 800efb4:	b004      	add	sp, #16
 800efb6:	bdb0      	pop	{r4, r5, r7, pc}
 800efb8:	20000a40 	.word	0x20000a40
 800efbc:	40022000 	.word	0x40022000

0800efc0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800efc8:	4b06      	ldr	r3, [pc, #24]	; (800efe4 <FLASH_MassErase+0x24>)
 800efca:	695a      	ldr	r2, [r3, #20]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	431a      	orrs	r2, r3
 800efd0:	4b04      	ldr	r3, [pc, #16]	; (800efe4 <FLASH_MassErase+0x24>)
 800efd2:	2180      	movs	r1, #128	; 0x80
 800efd4:	0249      	lsls	r1, r1, #9
 800efd6:	430a      	orrs	r2, r1
 800efd8:	615a      	str	r2, [r3, #20]
}
 800efda:	46c0      	nop			; (mov r8, r8)
 800efdc:	46bd      	mov	sp, r7
 800efde:	b002      	add	sp, #8
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	46c0      	nop			; (mov r8, r8)
 800efe4:	40022000 	.word	0x40022000

0800efe8 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800eff2:	4b0f      	ldr	r3, [pc, #60]	; (800f030 <FLASH_PageErase+0x48>)
 800eff4:	695b      	ldr	r3, [r3, #20]
 800eff6:	4a0f      	ldr	r2, [pc, #60]	; (800f034 <FLASH_PageErase+0x4c>)
 800eff8:	4013      	ands	r3, r2
 800effa:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_DBANK_SUPPORT)
  /* Check if page has to be erased in bank 1 or 2 */
  if (Banks != FLASH_BANK_1)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b04      	cmp	r3, #4
 800f000:	d005      	beq.n	800f00e <FLASH_PageErase+0x26>
  {
    tmp |= FLASH_CR_BKER;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2280      	movs	r2, #128	; 0x80
 800f006:	0192      	lsls	r2, r2, #6
 800f008:	4313      	orrs	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
 800f00c:	e003      	b.n	800f016 <FLASH_PageErase+0x2e>
  }
  else
  {
    tmp &= ~FLASH_CR_BKER;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	4a09      	ldr	r2, [pc, #36]	; (800f038 <FLASH_PageErase+0x50>)
 800f012:	4013      	ands	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	00da      	lsls	r2, r3, #3
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	431a      	orrs	r2, r3
 800f01e:	4b04      	ldr	r3, [pc, #16]	; (800f030 <FLASH_PageErase+0x48>)
 800f020:	4906      	ldr	r1, [pc, #24]	; (800f03c <FLASH_PageErase+0x54>)
 800f022:	430a      	orrs	r2, r1
 800f024:	615a      	str	r2, [r3, #20]
}
 800f026:	46c0      	nop			; (mov r8, r8)
 800f028:	46bd      	mov	sp, r7
 800f02a:	b004      	add	sp, #16
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	46c0      	nop			; (mov r8, r8)
 800f030:	40022000 	.word	0x40022000
 800f034:	ffffe007 	.word	0xffffe007
 800f038:	ffffdfff 	.word	0xffffdfff
 800f03c:	00010002 	.word	0x00010002

0800f040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b086      	sub	sp, #24
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800f04a:	2300      	movs	r3, #0
 800f04c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f04e:	e14d      	b.n	800f2ec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2101      	movs	r1, #1
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	4091      	lsls	r1, r2
 800f05a:	000a      	movs	r2, r1
 800f05c:	4013      	ands	r3, r2
 800f05e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d100      	bne.n	800f068 <HAL_GPIO_Init+0x28>
 800f066:	e13e      	b.n	800f2e6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	2203      	movs	r2, #3
 800f06e:	4013      	ands	r3, r2
 800f070:	2b01      	cmp	r3, #1
 800f072:	d005      	beq.n	800f080 <HAL_GPIO_Init+0x40>
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	2203      	movs	r2, #3
 800f07a:	4013      	ands	r3, r2
 800f07c:	2b02      	cmp	r3, #2
 800f07e:	d130      	bne.n	800f0e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	005b      	lsls	r3, r3, #1
 800f08a:	2203      	movs	r2, #3
 800f08c:	409a      	lsls	r2, r3
 800f08e:	0013      	movs	r3, r2
 800f090:	43da      	mvns	r2, r3
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	4013      	ands	r3, r2
 800f096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	68da      	ldr	r2, [r3, #12]
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	409a      	lsls	r2, r3
 800f0a2:	0013      	movs	r3, r2
 800f0a4:	693a      	ldr	r2, [r7, #16]
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	409a      	lsls	r2, r3
 800f0bc:	0013      	movs	r3, r2
 800f0be:	43da      	mvns	r2, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	4013      	ands	r3, r2
 800f0c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	091b      	lsrs	r3, r3, #4
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	401a      	ands	r2, r3
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	409a      	lsls	r2, r3
 800f0d4:	0013      	movs	r3, r2
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	2203      	movs	r2, #3
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d017      	beq.n	800f11e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	005b      	lsls	r3, r3, #1
 800f0f8:	2203      	movs	r2, #3
 800f0fa:	409a      	lsls	r2, r3
 800f0fc:	0013      	movs	r3, r2
 800f0fe:	43da      	mvns	r2, r3
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	4013      	ands	r3, r2
 800f104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	689a      	ldr	r2, [r3, #8]
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	005b      	lsls	r3, r3, #1
 800f10e:	409a      	lsls	r2, r3
 800f110:	0013      	movs	r3, r2
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	4313      	orrs	r3, r2
 800f116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	2203      	movs	r2, #3
 800f124:	4013      	ands	r3, r2
 800f126:	2b02      	cmp	r3, #2
 800f128:	d123      	bne.n	800f172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	08da      	lsrs	r2, r3, #3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	3208      	adds	r2, #8
 800f132:	0092      	lsls	r2, r2, #2
 800f134:	58d3      	ldr	r3, [r2, r3]
 800f136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	2207      	movs	r2, #7
 800f13c:	4013      	ands	r3, r2
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	220f      	movs	r2, #15
 800f142:	409a      	lsls	r2, r3
 800f144:	0013      	movs	r3, r2
 800f146:	43da      	mvns	r2, r3
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	4013      	ands	r3, r2
 800f14c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	691a      	ldr	r2, [r3, #16]
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2107      	movs	r1, #7
 800f156:	400b      	ands	r3, r1
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	409a      	lsls	r2, r3
 800f15c:	0013      	movs	r3, r2
 800f15e:	693a      	ldr	r2, [r7, #16]
 800f160:	4313      	orrs	r3, r2
 800f162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	08da      	lsrs	r2, r3, #3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	3208      	adds	r2, #8
 800f16c:	0092      	lsls	r2, r2, #2
 800f16e:	6939      	ldr	r1, [r7, #16]
 800f170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	005b      	lsls	r3, r3, #1
 800f17c:	2203      	movs	r2, #3
 800f17e:	409a      	lsls	r2, r3
 800f180:	0013      	movs	r3, r2
 800f182:	43da      	mvns	r2, r3
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	4013      	ands	r3, r2
 800f188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2203      	movs	r2, #3
 800f190:	401a      	ands	r2, r3
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	409a      	lsls	r2, r3
 800f198:	0013      	movs	r3, r2
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	4313      	orrs	r3, r2
 800f19e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	693a      	ldr	r2, [r7, #16]
 800f1a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	685a      	ldr	r2, [r3, #4]
 800f1aa:	23c0      	movs	r3, #192	; 0xc0
 800f1ac:	029b      	lsls	r3, r3, #10
 800f1ae:	4013      	ands	r3, r2
 800f1b0:	d100      	bne.n	800f1b4 <HAL_GPIO_Init+0x174>
 800f1b2:	e098      	b.n	800f2e6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800f1b4:	4a53      	ldr	r2, [pc, #332]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	089b      	lsrs	r3, r3, #2
 800f1ba:	3318      	adds	r3, #24
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	589b      	ldr	r3, [r3, r2]
 800f1c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2203      	movs	r2, #3
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	00db      	lsls	r3, r3, #3
 800f1ca:	220f      	movs	r2, #15
 800f1cc:	409a      	lsls	r2, r3
 800f1ce:	0013      	movs	r3, r2
 800f1d0:	43da      	mvns	r2, r3
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	4013      	ands	r3, r2
 800f1d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	23a0      	movs	r3, #160	; 0xa0
 800f1dc:	05db      	lsls	r3, r3, #23
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d019      	beq.n	800f216 <HAL_GPIO_Init+0x1d6>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a48      	ldr	r2, [pc, #288]	; (800f308 <HAL_GPIO_Init+0x2c8>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d013      	beq.n	800f212 <HAL_GPIO_Init+0x1d2>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a47      	ldr	r2, [pc, #284]	; (800f30c <HAL_GPIO_Init+0x2cc>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d00d      	beq.n	800f20e <HAL_GPIO_Init+0x1ce>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a46      	ldr	r2, [pc, #280]	; (800f310 <HAL_GPIO_Init+0x2d0>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d007      	beq.n	800f20a <HAL_GPIO_Init+0x1ca>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a45      	ldr	r2, [pc, #276]	; (800f314 <HAL_GPIO_Init+0x2d4>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d101      	bne.n	800f206 <HAL_GPIO_Init+0x1c6>
 800f202:	2304      	movs	r3, #4
 800f204:	e008      	b.n	800f218 <HAL_GPIO_Init+0x1d8>
 800f206:	2305      	movs	r3, #5
 800f208:	e006      	b.n	800f218 <HAL_GPIO_Init+0x1d8>
 800f20a:	2303      	movs	r3, #3
 800f20c:	e004      	b.n	800f218 <HAL_GPIO_Init+0x1d8>
 800f20e:	2302      	movs	r3, #2
 800f210:	e002      	b.n	800f218 <HAL_GPIO_Init+0x1d8>
 800f212:	2301      	movs	r3, #1
 800f214:	e000      	b.n	800f218 <HAL_GPIO_Init+0x1d8>
 800f216:	2300      	movs	r3, #0
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	2103      	movs	r1, #3
 800f21c:	400a      	ands	r2, r1
 800f21e:	00d2      	lsls	r2, r2, #3
 800f220:	4093      	lsls	r3, r2
 800f222:	693a      	ldr	r2, [r7, #16]
 800f224:	4313      	orrs	r3, r2
 800f226:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800f228:	4936      	ldr	r1, [pc, #216]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	089b      	lsrs	r3, r3, #2
 800f22e:	3318      	adds	r3, #24
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800f236:	4b33      	ldr	r3, [pc, #204]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	43da      	mvns	r2, r3
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	4013      	ands	r3, r2
 800f244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	2380      	movs	r3, #128	; 0x80
 800f24c:	035b      	lsls	r3, r3, #13
 800f24e:	4013      	ands	r3, r2
 800f250:	d003      	beq.n	800f25a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800f252:	693a      	ldr	r2, [r7, #16]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	4313      	orrs	r3, r2
 800f258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800f25a:	4b2a      	ldr	r3, [pc, #168]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800f260:	4b28      	ldr	r3, [pc, #160]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	43da      	mvns	r2, r3
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	4013      	ands	r3, r2
 800f26e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	685a      	ldr	r2, [r3, #4]
 800f274:	2380      	movs	r3, #128	; 0x80
 800f276:	039b      	lsls	r3, r3, #14
 800f278:	4013      	ands	r3, r2
 800f27a:	d003      	beq.n	800f284 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4313      	orrs	r3, r2
 800f282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800f284:	4b1f      	ldr	r3, [pc, #124]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f286:	693a      	ldr	r2, [r7, #16]
 800f288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800f28a:	4a1e      	ldr	r2, [pc, #120]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f28c:	2384      	movs	r3, #132	; 0x84
 800f28e:	58d3      	ldr	r3, [r2, r3]
 800f290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	43da      	mvns	r2, r3
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	4013      	ands	r3, r2
 800f29a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	685a      	ldr	r2, [r3, #4]
 800f2a0:	2380      	movs	r3, #128	; 0x80
 800f2a2:	029b      	lsls	r3, r3, #10
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	d003      	beq.n	800f2b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800f2b0:	4914      	ldr	r1, [pc, #80]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f2b2:	2284      	movs	r2, #132	; 0x84
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800f2b8:	4a12      	ldr	r2, [pc, #72]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f2ba:	2380      	movs	r3, #128	; 0x80
 800f2bc:	58d3      	ldr	r3, [r2, r3]
 800f2be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	43da      	mvns	r2, r3
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	685a      	ldr	r2, [r3, #4]
 800f2ce:	2380      	movs	r3, #128	; 0x80
 800f2d0:	025b      	lsls	r3, r3, #9
 800f2d2:	4013      	ands	r3, r2
 800f2d4:	d003      	beq.n	800f2de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	4313      	orrs	r3, r2
 800f2dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800f2de:	4909      	ldr	r1, [pc, #36]	; (800f304 <HAL_GPIO_Init+0x2c4>)
 800f2e0:	2280      	movs	r2, #128	; 0x80
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	40da      	lsrs	r2, r3
 800f2f4:	1e13      	subs	r3, r2, #0
 800f2f6:	d000      	beq.n	800f2fa <HAL_GPIO_Init+0x2ba>
 800f2f8:	e6aa      	b.n	800f050 <HAL_GPIO_Init+0x10>
  }
}
 800f2fa:	46c0      	nop			; (mov r8, r8)
 800f2fc:	46c0      	nop			; (mov r8, r8)
 800f2fe:	46bd      	mov	sp, r7
 800f300:	b006      	add	sp, #24
 800f302:	bd80      	pop	{r7, pc}
 800f304:	40021800 	.word	0x40021800
 800f308:	50000400 	.word	0x50000400
 800f30c:	50000800 	.word	0x50000800
 800f310:	50000c00 	.word	0x50000c00
 800f314:	50001000 	.word	0x50001000

0800f318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	0008      	movs	r0, r1
 800f322:	0011      	movs	r1, r2
 800f324:	1cbb      	adds	r3, r7, #2
 800f326:	1c02      	adds	r2, r0, #0
 800f328:	801a      	strh	r2, [r3, #0]
 800f32a:	1c7b      	adds	r3, r7, #1
 800f32c:	1c0a      	adds	r2, r1, #0
 800f32e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f330:	1c7b      	adds	r3, r7, #1
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d004      	beq.n	800f342 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f338:	1cbb      	adds	r3, r7, #2
 800f33a:	881a      	ldrh	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800f340:	e003      	b.n	800f34a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f342:	1cbb      	adds	r3, r7, #2
 800f344:	881a      	ldrh	r2, [r3, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f34a:	46c0      	nop			; (mov r8, r8)
 800f34c:	46bd      	mov	sp, r7
 800f34e:	b002      	add	sp, #8
 800f350:	bd80      	pop	{r7, pc}

0800f352 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b084      	sub	sp, #16
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	000a      	movs	r2, r1
 800f35c:	1cbb      	adds	r3, r7, #2
 800f35e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	695b      	ldr	r3, [r3, #20]
 800f364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f366:	1cbb      	adds	r3, r7, #2
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	4013      	ands	r3, r2
 800f36e:	041a      	lsls	r2, r3, #16
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	43db      	mvns	r3, r3
 800f374:	1cb9      	adds	r1, r7, #2
 800f376:	8809      	ldrh	r1, [r1, #0]
 800f378:	400b      	ands	r3, r1
 800f37a:	431a      	orrs	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	619a      	str	r2, [r3, #24]
}
 800f380:	46c0      	nop			; (mov r8, r8)
 800f382:	46bd      	mov	sp, r7
 800f384:	b004      	add	sp, #16
 800f386:	bd80      	pop	{r7, pc}

0800f388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	0002      	movs	r2, r0
 800f390:	1dbb      	adds	r3, r7, #6
 800f392:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f394:	4b10      	ldr	r3, [pc, #64]	; (800f3d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	1dba      	adds	r2, r7, #6
 800f39a:	8812      	ldrh	r2, [r2, #0]
 800f39c:	4013      	ands	r3, r2
 800f39e:	d008      	beq.n	800f3b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f3a0:	4b0d      	ldr	r3, [pc, #52]	; (800f3d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800f3a2:	1dba      	adds	r2, r7, #6
 800f3a4:	8812      	ldrh	r2, [r2, #0]
 800f3a6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800f3a8:	1dbb      	adds	r3, r7, #6
 800f3aa:	881b      	ldrh	r3, [r3, #0]
 800f3ac:	0018      	movs	r0, r3
 800f3ae:	f7f9 fa77 	bl	80088a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f3b2:	4b09      	ldr	r3, [pc, #36]	; (800f3d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800f3b4:	691b      	ldr	r3, [r3, #16]
 800f3b6:	1dba      	adds	r2, r7, #6
 800f3b8:	8812      	ldrh	r2, [r2, #0]
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	d008      	beq.n	800f3d0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f3be:	4b06      	ldr	r3, [pc, #24]	; (800f3d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800f3c0:	1dba      	adds	r2, r7, #6
 800f3c2:	8812      	ldrh	r2, [r2, #0]
 800f3c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800f3c6:	1dbb      	adds	r3, r7, #6
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	0018      	movs	r0, r3
 800f3cc:	f7f9 fa0c 	bl	80087e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800f3d0:	46c0      	nop			; (mov r8, r8)
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	b002      	add	sp, #8
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	40021800 	.word	0x40021800

0800f3dc <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	000a      	movs	r2, r1
 800f3e6:	1cbb      	adds	r3, r7, #2
 800f3e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800f3ea:	230a      	movs	r3, #10
 800f3ec:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800f3ee:	e002      	b.n	800f3f6 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1f9      	bne.n	800f3f0 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800f3fc:	1cbb      	adds	r3, r7, #2
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	00db      	lsls	r3, r3, #3
 800f402:	4a06      	ldr	r2, [pc, #24]	; (800f41c <PCD_GET_EP_RX_CNT+0x40>)
 800f404:	4694      	mov	ip, r2
 800f406:	4463      	add	r3, ip
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	0c1b      	lsrs	r3, r3, #16
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	059b      	lsls	r3, r3, #22
 800f410:	0d9b      	lsrs	r3, r3, #22
 800f412:	b29b      	uxth	r3, r3
}
 800f414:	0018      	movs	r0, r3
 800f416:	46bd      	mov	sp, r7
 800f418:	b004      	add	sp, #16
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	40009800 	.word	0x40009800

0800f420 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	000a      	movs	r2, r1
 800f42a:	1cbb      	adds	r3, r7, #2
 800f42c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800f42e:	230a      	movs	r3, #10
 800f430:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800f432:	e002      	b.n	800f43a <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	3b01      	subs	r3, #1
 800f438:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d1f9      	bne.n	800f434 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800f440:	1cbb      	adds	r3, r7, #2
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	00db      	lsls	r3, r3, #3
 800f446:	4a06      	ldr	r2, [pc, #24]	; (800f460 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800f448:	4694      	mov	ip, r2
 800f44a:	4463      	add	r3, ip
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	0c1b      	lsrs	r3, r3, #16
 800f450:	b29b      	uxth	r3, r3
 800f452:	059b      	lsls	r3, r3, #22
 800f454:	0d9b      	lsrs	r3, r3, #22
 800f456:	b29b      	uxth	r3, r3
}
 800f458:	0018      	movs	r0, r3
 800f45a:	46bd      	mov	sp, r7
 800f45c:	b004      	add	sp, #16
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	40009800 	.word	0x40009800

0800f464 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b084      	sub	sp, #16
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	000a      	movs	r2, r1
 800f46e:	1cbb      	adds	r3, r7, #2
 800f470:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800f472:	230a      	movs	r3, #10
 800f474:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800f476:	e002      	b.n	800f47e <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d1f9      	bne.n	800f478 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800f484:	1cbb      	adds	r3, r7, #2
 800f486:	881b      	ldrh	r3, [r3, #0]
 800f488:	00db      	lsls	r3, r3, #3
 800f48a:	4a06      	ldr	r2, [pc, #24]	; (800f4a4 <PCD_GET_EP_DBUF1_CNT+0x40>)
 800f48c:	4694      	mov	ip, r2
 800f48e:	4463      	add	r3, ip
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	0c1b      	lsrs	r3, r3, #16
 800f494:	b29b      	uxth	r3, r3
 800f496:	059b      	lsls	r3, r3, #22
 800f498:	0d9b      	lsrs	r3, r3, #22
 800f49a:	b29b      	uxth	r3, r3
}
 800f49c:	0018      	movs	r0, r3
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	b004      	add	sp, #16
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	40009800 	.word	0x40009800

0800f4a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f4a8:	b590      	push	{r4, r7, lr}
 800f4aa:	b087      	sub	sp, #28
 800f4ac:	af02      	add	r7, sp, #8
 800f4ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e0ea      	b.n	800f690 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a76      	ldr	r2, [pc, #472]	; (800f698 <HAL_PCD_Init+0x1f0>)
 800f4be:	5c9b      	ldrb	r3, [r3, r2]
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	23a5      	movs	r3, #165	; 0xa5
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	f011 fdc8 	bl	8021068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a6f      	ldr	r2, [pc, #444]	; (800f698 <HAL_PCD_Init+0x1f0>)
 800f4dc:	2103      	movs	r1, #3
 800f4de:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	0018      	movs	r0, r3
 800f4e6:	f004 fd03 	bl	8013ef0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f4ea:	230f      	movs	r3, #15
 800f4ec:	18fb      	adds	r3, r7, r3
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	e049      	b.n	800f588 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f4f4:	200f      	movs	r0, #15
 800f4f6:	183b      	adds	r3, r7, r0
 800f4f8:	781a      	ldrb	r2, [r3, #0]
 800f4fa:	6879      	ldr	r1, [r7, #4]
 800f4fc:	0013      	movs	r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	189b      	adds	r3, r3, r2
 800f502:	00db      	lsls	r3, r3, #3
 800f504:	18cb      	adds	r3, r1, r3
 800f506:	3315      	adds	r3, #21
 800f508:	2201      	movs	r2, #1
 800f50a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f50c:	183b      	adds	r3, r7, r0
 800f50e:	781a      	ldrb	r2, [r3, #0]
 800f510:	6879      	ldr	r1, [r7, #4]
 800f512:	0013      	movs	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	189b      	adds	r3, r3, r2
 800f518:	00db      	lsls	r3, r3, #3
 800f51a:	18cb      	adds	r3, r1, r3
 800f51c:	3314      	adds	r3, #20
 800f51e:	183a      	adds	r2, r7, r0
 800f520:	7812      	ldrb	r2, [r2, #0]
 800f522:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f524:	183b      	adds	r3, r7, r0
 800f526:	781a      	ldrb	r2, [r3, #0]
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	0013      	movs	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	189b      	adds	r3, r3, r2
 800f530:	00db      	lsls	r3, r3, #3
 800f532:	18cb      	adds	r3, r1, r3
 800f534:	3317      	adds	r3, #23
 800f536:	2200      	movs	r2, #0
 800f538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f53a:	183b      	adds	r3, r7, r0
 800f53c:	781a      	ldrb	r2, [r3, #0]
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	0013      	movs	r3, r2
 800f542:	009b      	lsls	r3, r3, #2
 800f544:	189b      	adds	r3, r3, r2
 800f546:	00db      	lsls	r3, r3, #3
 800f548:	18cb      	adds	r3, r1, r3
 800f54a:	3324      	adds	r3, #36	; 0x24
 800f54c:	2200      	movs	r2, #0
 800f54e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f550:	183b      	adds	r3, r7, r0
 800f552:	781a      	ldrb	r2, [r3, #0]
 800f554:	6879      	ldr	r1, [r7, #4]
 800f556:	0013      	movs	r3, r2
 800f558:	009b      	lsls	r3, r3, #2
 800f55a:	189b      	adds	r3, r3, r2
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	18cb      	adds	r3, r1, r3
 800f560:	3328      	adds	r3, #40	; 0x28
 800f562:	2200      	movs	r2, #0
 800f564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f566:	183b      	adds	r3, r7, r0
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	1c5a      	adds	r2, r3, #1
 800f56e:	0013      	movs	r3, r2
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	189b      	adds	r3, r3, r2
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	18cb      	adds	r3, r1, r3
 800f578:	3304      	adds	r3, #4
 800f57a:	2200      	movs	r2, #0
 800f57c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f57e:	183b      	adds	r3, r7, r0
 800f580:	781a      	ldrb	r2, [r3, #0]
 800f582:	183b      	adds	r3, r7, r0
 800f584:	3201      	adds	r2, #1
 800f586:	701a      	strb	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	791b      	ldrb	r3, [r3, #4]
 800f58c:	210f      	movs	r1, #15
 800f58e:	187a      	adds	r2, r7, r1
 800f590:	7812      	ldrb	r2, [r2, #0]
 800f592:	429a      	cmp	r2, r3
 800f594:	d3ae      	bcc.n	800f4f4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f596:	187b      	adds	r3, r7, r1
 800f598:	2200      	movs	r2, #0
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e056      	b.n	800f64c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f59e:	240f      	movs	r4, #15
 800f5a0:	193b      	adds	r3, r7, r4
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	2356      	movs	r3, #86	; 0x56
 800f5a8:	33ff      	adds	r3, #255	; 0xff
 800f5aa:	0019      	movs	r1, r3
 800f5ac:	0013      	movs	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	189b      	adds	r3, r3, r2
 800f5b2:	00db      	lsls	r3, r3, #3
 800f5b4:	18c3      	adds	r3, r0, r3
 800f5b6:	185b      	adds	r3, r3, r1
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f5bc:	193b      	adds	r3, r7, r4
 800f5be:	781a      	ldrb	r2, [r3, #0]
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	23aa      	movs	r3, #170	; 0xaa
 800f5c4:	0059      	lsls	r1, r3, #1
 800f5c6:	0013      	movs	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	189b      	adds	r3, r3, r2
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	18c3      	adds	r3, r0, r3
 800f5d0:	185b      	adds	r3, r3, r1
 800f5d2:	193a      	adds	r2, r7, r4
 800f5d4:	7812      	ldrb	r2, [r2, #0]
 800f5d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f5d8:	193b      	adds	r3, r7, r4
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	2358      	movs	r3, #88	; 0x58
 800f5e0:	33ff      	adds	r3, #255	; 0xff
 800f5e2:	0019      	movs	r1, r3
 800f5e4:	0013      	movs	r3, r2
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	189b      	adds	r3, r3, r2
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	18c3      	adds	r3, r0, r3
 800f5ee:	185b      	adds	r3, r3, r1
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f5f4:	193b      	adds	r3, r7, r4
 800f5f6:	781a      	ldrb	r2, [r3, #0]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	23b2      	movs	r3, #178	; 0xb2
 800f5fc:	0059      	lsls	r1, r3, #1
 800f5fe:	0013      	movs	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	189b      	adds	r3, r3, r2
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	18c3      	adds	r3, r0, r3
 800f608:	185b      	adds	r3, r3, r1
 800f60a:	2200      	movs	r2, #0
 800f60c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f60e:	193b      	adds	r3, r7, r4
 800f610:	781a      	ldrb	r2, [r3, #0]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	23b4      	movs	r3, #180	; 0xb4
 800f616:	0059      	lsls	r1, r3, #1
 800f618:	0013      	movs	r3, r2
 800f61a:	009b      	lsls	r3, r3, #2
 800f61c:	189b      	adds	r3, r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	18c3      	adds	r3, r0, r3
 800f622:	185b      	adds	r3, r3, r1
 800f624:	2200      	movs	r2, #0
 800f626:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f628:	193b      	adds	r3, r7, r4
 800f62a:	781a      	ldrb	r2, [r3, #0]
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	23b6      	movs	r3, #182	; 0xb6
 800f630:	0059      	lsls	r1, r3, #1
 800f632:	0013      	movs	r3, r2
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	189b      	adds	r3, r3, r2
 800f638:	00db      	lsls	r3, r3, #3
 800f63a:	18c3      	adds	r3, r0, r3
 800f63c:	185b      	adds	r3, r3, r1
 800f63e:	2200      	movs	r2, #0
 800f640:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f642:	193b      	adds	r3, r7, r4
 800f644:	781a      	ldrb	r2, [r3, #0]
 800f646:	193b      	adds	r3, r7, r4
 800f648:	3201      	adds	r2, #1
 800f64a:	701a      	strb	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	791b      	ldrb	r3, [r3, #4]
 800f650:	220f      	movs	r2, #15
 800f652:	18ba      	adds	r2, r7, r2
 800f654:	7812      	ldrb	r2, [r2, #0]
 800f656:	429a      	cmp	r2, r3
 800f658:	d3a1      	bcc.n	800f59e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6818      	ldr	r0, [r3, #0]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	466a      	mov	r2, sp
 800f662:	7c19      	ldrb	r1, [r3, #16]
 800f664:	7011      	strb	r1, [r2, #0]
 800f666:	6859      	ldr	r1, [r3, #4]
 800f668:	689a      	ldr	r2, [r3, #8]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f004 fc79 	bl	8013f62 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4a07      	ldr	r2, [pc, #28]	; (800f698 <HAL_PCD_Init+0x1f0>)
 800f67a:	2101      	movs	r1, #1
 800f67c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	7b1b      	ldrb	r3, [r3, #12]
 800f682:	2b01      	cmp	r3, #1
 800f684:	d103      	bne.n	800f68e <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	0018      	movs	r0, r3
 800f68a:	f001 fbfb 	bl	8010e84 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800f68e:	2300      	movs	r3, #0
}
 800f690:	0018      	movs	r0, r3
 800f692:	46bd      	mov	sp, r7
 800f694:	b005      	add	sp, #20
 800f696:	bd90      	pop	{r4, r7, pc}
 800f698:	00000295 	.word	0x00000295

0800f69c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	23a5      	movs	r3, #165	; 0xa5
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	5cd3      	ldrb	r3, [r2, r3]
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d101      	bne.n	800f6b4 <HAL_PCD_Start+0x18>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e014      	b.n	800f6de <HAL_PCD_Start+0x42>
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	23a5      	movs	r3, #165	; 0xa5
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	2101      	movs	r1, #1
 800f6bc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	0018      	movs	r0, r3
 800f6c4:	f004 fc00 	bl	8013ec8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f006 fa0a 	bl	8015ae6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	23a5      	movs	r3, #165	; 0xa5
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	2100      	movs	r1, #0
 800f6da:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	0018      	movs	r0, r3
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	b002      	add	sp, #8
 800f6e4:	bd80      	pop	{r7, pc}
	...

0800f6e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b084      	sub	sp, #16
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	0018      	movs	r0, r3
 800f6f6:	f006 fa06 	bl	8015b06 <USB_ReadInterrupts>
 800f6fa:	0003      	movs	r3, r0
 800f6fc:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800f6fe:	4a7c      	ldr	r2, [pc, #496]	; (800f8f0 <HAL_PCD_IRQHandler+0x208>)
 800f700:	23a0      	movs	r3, #160	; 0xa0
 800f702:	58d3      	ldr	r3, [r2, r3]
 800f704:	2204      	movs	r2, #4
 800f706:	4013      	ands	r3, r2
 800f708:	d100      	bne.n	800f70c <HAL_PCD_IRQHandler+0x24>
 800f70a:	e0ed      	b.n	800f8e8 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	2380      	movs	r3, #128	; 0x80
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	4013      	ands	r3, r2
 800f714:	d004      	beq.n	800f720 <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	0018      	movs	r0, r3
 800f71a:	f000 fb35 	bl	800fd88 <PCD_EP_ISR_Handler>

    return;
 800f71e:	e0e4      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	2380      	movs	r3, #128	; 0x80
 800f724:	00db      	lsls	r3, r3, #3
 800f726:	4013      	ands	r3, r2
 800f728:	d011      	beq.n	800f74e <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	496f      	ldr	r1, [pc, #444]	; (800f8f4 <HAL_PCD_IRQHandler+0x20c>)
 800f736:	400a      	ands	r2, r1
 800f738:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	0018      	movs	r0, r3
 800f73e:	f011 fd56 	bl	80211ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2100      	movs	r1, #0
 800f746:	0018      	movs	r0, r3
 800f748:	f000 f8e4 	bl	800f914 <HAL_PCD_SetAddress>

    return;
 800f74c:	e0cd      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	2380      	movs	r3, #128	; 0x80
 800f752:	01db      	lsls	r3, r3, #7
 800f754:	4013      	ands	r3, r2
 800f756:	d008      	beq.n	800f76a <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4965      	ldr	r1, [pc, #404]	; (800f8f8 <HAL_PCD_IRQHandler+0x210>)
 800f764:	400a      	ands	r2, r1
 800f766:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800f768:	e0bf      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	2380      	movs	r3, #128	; 0x80
 800f76e:	019b      	lsls	r3, r3, #6
 800f770:	4013      	ands	r3, r2
 800f772:	d008      	beq.n	800f786 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	495f      	ldr	r1, [pc, #380]	; (800f8fc <HAL_PCD_IRQHandler+0x214>)
 800f780:	400a      	ands	r2, r1
 800f782:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800f784:	e0b1      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	2380      	movs	r3, #128	; 0x80
 800f78a:	015b      	lsls	r3, r3, #5
 800f78c:	4013      	ands	r3, r2
 800f78e:	d02c      	beq.n	800f7ea <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2104      	movs	r1, #4
 800f79c:	438a      	bics	r2, r1
 800f79e:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	2108      	movs	r1, #8
 800f7ac:	438a      	bics	r2, r1
 800f7ae:	641a      	str	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	23b3      	movs	r3, #179	; 0xb3
 800f7b4:	009b      	lsls	r3, r3, #2
 800f7b6:	5cd3      	ldrb	r3, [r2, r3]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d109      	bne.n	800f7d0 <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 800f7bc:	687a      	ldr	r2, [r7, #4]
 800f7be:	23b3      	movs	r3, #179	; 0xb3
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	0018      	movs	r0, r3
 800f7cc:	f011 ff8e 	bl	80216ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	0018      	movs	r0, r3
 800f7d4:	f011 fd4c 	bl	8021270 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4947      	ldr	r1, [pc, #284]	; (800f900 <HAL_PCD_IRQHandler+0x218>)
 800f7e4:	400a      	ands	r2, r1
 800f7e6:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800f7e8:	e07f      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	2380      	movs	r3, #128	; 0x80
 800f7ee:	011b      	lsls	r3, r3, #4
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	d01c      	beq.n	800f82e <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	2108      	movs	r1, #8
 800f800:	430a      	orrs	r2, r1
 800f802:	641a      	str	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	493d      	ldr	r1, [pc, #244]	; (800f904 <HAL_PCD_IRQHandler+0x21c>)
 800f810:	400a      	ands	r2, r1
 800f812:	645a      	str	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2104      	movs	r1, #4
 800f820:	430a      	orrs	r2, r1
 800f822:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	0018      	movs	r0, r3
 800f828:	f011 fd06 	bl	8021238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f82c:	e05d      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2280      	movs	r2, #128	; 0x80
 800f832:	4013      	ands	r3, r2
 800f834:	d038      	beq.n	800f8a8 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	4931      	ldr	r1, [pc, #196]	; (800f908 <HAL_PCD_IRQHandler+0x220>)
 800f842:	400a      	ands	r2, r1
 800f844:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	23b3      	movs	r3, #179	; 0xb3
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	5cd3      	ldrb	r3, [r2, r3]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d125      	bne.n	800f89e <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2104      	movs	r1, #4
 800f85e:	430a      	orrs	r2, r1
 800f860:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	2108      	movs	r1, #8
 800f86e:	430a      	orrs	r2, r1
 800f870:	641a      	str	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	23b3      	movs	r3, #179	; 0xb3
 800f876:	009b      	lsls	r3, r3, #2
 800f878:	2101      	movs	r1, #1
 800f87a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f882:	089b      	lsrs	r3, r3, #2
 800f884:	223c      	movs	r2, #60	; 0x3c
 800f886:	4013      	ands	r3, r2
 800f888:	0019      	movs	r1, r3
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	23b4      	movs	r3, #180	; 0xb4
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2101      	movs	r1, #1
 800f896:	0018      	movs	r0, r3
 800f898:	f011 ff28 	bl	80216ec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800f89c:	e025      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	0018      	movs	r0, r3
 800f8a2:	f011 fcc9 	bl	8021238 <HAL_PCD_SuspendCallback>
    return;
 800f8a6:	e020      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	2380      	movs	r3, #128	; 0x80
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	4013      	ands	r3, r2
 800f8b0:	d00c      	beq.n	800f8cc <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4913      	ldr	r1, [pc, #76]	; (800f90c <HAL_PCD_IRQHandler+0x224>)
 800f8be:	400a      	ands	r2, r1
 800f8c0:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	0018      	movs	r0, r3
 800f8c6:	f011 fc83 	bl	80211d0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800f8ca:	e00e      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	2380      	movs	r3, #128	; 0x80
 800f8d0:	005b      	lsls	r3, r3, #1
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	d009      	beq.n	800f8ea <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	490b      	ldr	r1, [pc, #44]	; (800f910 <HAL_PCD_IRQHandler+0x228>)
 800f8e2:	400a      	ands	r2, r1
 800f8e4:	645a      	str	r2, [r3, #68]	; 0x44

    return;
 800f8e6:	e000      	b.n	800f8ea <HAL_PCD_IRQHandler+0x202>
    return;
 800f8e8:	46c0      	nop			; (mov r8, r8)
  }
}
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	b004      	add	sp, #16
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	40010000 	.word	0x40010000
 800f8f4:	0000fbff 	.word	0x0000fbff
 800f8f8:	0000bfff 	.word	0x0000bfff
 800f8fc:	0000dfff 	.word	0x0000dfff
 800f900:	0000efff 	.word	0x0000efff
 800f904:	0000f7ff 	.word	0x0000f7ff
 800f908:	0000ff7f 	.word	0x0000ff7f
 800f90c:	0000fdff 	.word	0x0000fdff
 800f910:	0000feff 	.word	0x0000feff

0800f914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	000a      	movs	r2, r1
 800f91e:	1cfb      	adds	r3, r7, #3
 800f920:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	23a5      	movs	r3, #165	; 0xa5
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	5cd3      	ldrb	r3, [r2, r3]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d101      	bne.n	800f932 <HAL_PCD_SetAddress+0x1e>
 800f92e:	2302      	movs	r3, #2
 800f930:	e016      	b.n	800f960 <HAL_PCD_SetAddress+0x4c>
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	23a5      	movs	r3, #165	; 0xa5
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	2101      	movs	r1, #1
 800f93a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	1cfa      	adds	r2, r7, #3
 800f940:	7812      	ldrb	r2, [r2, #0]
 800f942:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	1cfb      	adds	r3, r7, #3
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	0019      	movs	r1, r3
 800f94e:	0010      	movs	r0, r2
 800f950:	f006 f8b6 	bl	8015ac0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	23a5      	movs	r3, #165	; 0xa5
 800f958:	009b      	lsls	r3, r3, #2
 800f95a:	2100      	movs	r1, #0
 800f95c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	0018      	movs	r0, r3
 800f962:	46bd      	mov	sp, r7
 800f964:	b002      	add	sp, #8
 800f966:	bd80      	pop	{r7, pc}

0800f968 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f968:	b590      	push	{r4, r7, lr}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	000c      	movs	r4, r1
 800f972:	0010      	movs	r0, r2
 800f974:	0019      	movs	r1, r3
 800f976:	1cfb      	adds	r3, r7, #3
 800f978:	1c22      	adds	r2, r4, #0
 800f97a:	701a      	strb	r2, [r3, #0]
 800f97c:	003b      	movs	r3, r7
 800f97e:	1c02      	adds	r2, r0, #0
 800f980:	801a      	strh	r2, [r3, #0]
 800f982:	1cbb      	adds	r3, r7, #2
 800f984:	1c0a      	adds	r2, r1, #0
 800f986:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f988:	230b      	movs	r3, #11
 800f98a:	18fb      	adds	r3, r7, r3
 800f98c:	2200      	movs	r2, #0
 800f98e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f990:	1cfb      	adds	r3, r7, #3
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	b25b      	sxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	da10      	bge.n	800f9bc <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f99a:	1cfb      	adds	r3, r7, #3
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	2207      	movs	r2, #7
 800f9a0:	401a      	ands	r2, r3
 800f9a2:	0013      	movs	r3, r2
 800f9a4:	009b      	lsls	r3, r3, #2
 800f9a6:	189b      	adds	r3, r3, r2
 800f9a8:	00db      	lsls	r3, r3, #3
 800f9aa:	3310      	adds	r3, #16
 800f9ac:	687a      	ldr	r2, [r7, #4]
 800f9ae:	18d3      	adds	r3, r2, r3
 800f9b0:	3304      	adds	r3, #4
 800f9b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	705a      	strb	r2, [r3, #1]
 800f9ba:	e010      	b.n	800f9de <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f9bc:	1cfb      	adds	r3, r7, #3
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	2207      	movs	r2, #7
 800f9c2:	401a      	ands	r2, r3
 800f9c4:	0013      	movs	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	189b      	adds	r3, r3, r2
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	3351      	adds	r3, #81	; 0x51
 800f9ce:	33ff      	adds	r3, #255	; 0xff
 800f9d0:	687a      	ldr	r2, [r7, #4]
 800f9d2:	18d3      	adds	r3, r2, r3
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f9de:	1cfb      	adds	r3, r7, #3
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	2207      	movs	r2, #7
 800f9e4:	4013      	ands	r3, r2
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f9ec:	003b      	movs	r3, r7
 800f9ee:	881a      	ldrh	r2, [r3, #0]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	1cba      	adds	r2, r7, #2
 800f9f8:	7812      	ldrb	r2, [r2, #0]
 800f9fa:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f9fc:	1cbb      	adds	r3, r7, #2
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	2b02      	cmp	r3, #2
 800fa02:	d102      	bne.n	800fa0a <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2200      	movs	r2, #0
 800fa08:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	23a5      	movs	r3, #165	; 0xa5
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	5cd3      	ldrb	r3, [r2, r3]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d101      	bne.n	800fa1a <HAL_PCD_EP_Open+0xb2>
 800fa16:	2302      	movs	r3, #2
 800fa18:	e013      	b.n	800fa42 <HAL_PCD_EP_Open+0xda>
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	23a5      	movs	r3, #165	; 0xa5
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	2101      	movs	r1, #1
 800fa22:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	0011      	movs	r1, r2
 800fa2c:	0018      	movs	r0, r3
 800fa2e:	f004 fac3 	bl	8013fb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fa32:	687a      	ldr	r2, [r7, #4]
 800fa34:	23a5      	movs	r3, #165	; 0xa5
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	2100      	movs	r1, #0
 800fa3a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800fa3c:	230b      	movs	r3, #11
 800fa3e:	18fb      	adds	r3, r7, r3
 800fa40:	781b      	ldrb	r3, [r3, #0]
}
 800fa42:	0018      	movs	r0, r3
 800fa44:	46bd      	mov	sp, r7
 800fa46:	b005      	add	sp, #20
 800fa48:	bd90      	pop	{r4, r7, pc}

0800fa4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b084      	sub	sp, #16
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	000a      	movs	r2, r1
 800fa54:	1cfb      	adds	r3, r7, #3
 800fa56:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fa58:	1cfb      	adds	r3, r7, #3
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	b25b      	sxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	da10      	bge.n	800fa84 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fa62:	1cfb      	adds	r3, r7, #3
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2207      	movs	r2, #7
 800fa68:	401a      	ands	r2, r3
 800fa6a:	0013      	movs	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	189b      	adds	r3, r3, r2
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	3310      	adds	r3, #16
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	18d3      	adds	r3, r2, r3
 800fa78:	3304      	adds	r3, #4
 800fa7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	705a      	strb	r2, [r3, #1]
 800fa82:	e010      	b.n	800faa6 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fa84:	1cfb      	adds	r3, r7, #3
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	2207      	movs	r2, #7
 800fa8a:	401a      	ands	r2, r3
 800fa8c:	0013      	movs	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	189b      	adds	r3, r3, r2
 800fa92:	00db      	lsls	r3, r3, #3
 800fa94:	3351      	adds	r3, #81	; 0x51
 800fa96:	33ff      	adds	r3, #255	; 0xff
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	18d3      	adds	r3, r2, r3
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800faa6:	1cfb      	adds	r3, r7, #3
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	2207      	movs	r2, #7
 800faac:	4013      	ands	r3, r2
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	23a5      	movs	r3, #165	; 0xa5
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	5cd3      	ldrb	r3, [r2, r3]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d101      	bne.n	800fac4 <HAL_PCD_EP_Close+0x7a>
 800fac0:	2302      	movs	r3, #2
 800fac2:	e011      	b.n	800fae8 <HAL_PCD_EP_Close+0x9e>
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	23a5      	movs	r3, #165	; 0xa5
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	2101      	movs	r1, #1
 800facc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	0011      	movs	r1, r2
 800fad6:	0018      	movs	r0, r3
 800fad8:	f004 fda2 	bl	8014620 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	23a5      	movs	r3, #165	; 0xa5
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	2100      	movs	r1, #0
 800fae4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	0018      	movs	r0, r3
 800faea:	46bd      	mov	sp, r7
 800faec:	b004      	add	sp, #16
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	607a      	str	r2, [r7, #4]
 800fafa:	603b      	str	r3, [r7, #0]
 800fafc:	200b      	movs	r0, #11
 800fafe:	183b      	adds	r3, r7, r0
 800fb00:	1c0a      	adds	r2, r1, #0
 800fb02:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fb04:	0001      	movs	r1, r0
 800fb06:	187b      	adds	r3, r7, r1
 800fb08:	781b      	ldrb	r3, [r3, #0]
 800fb0a:	2207      	movs	r2, #7
 800fb0c:	401a      	ands	r2, r3
 800fb0e:	0013      	movs	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	189b      	adds	r3, r3, r2
 800fb14:	00db      	lsls	r3, r3, #3
 800fb16:	3351      	adds	r3, #81	; 0x51
 800fb18:	33ff      	adds	r3, #255	; 0xff
 800fb1a:	68fa      	ldr	r2, [r7, #12]
 800fb1c:	18d3      	adds	r3, r2, r3
 800fb1e:	3304      	adds	r3, #4
 800fb20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	2200      	movs	r2, #0
 800fb32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	2200      	movs	r2, #0
 800fb38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fb3a:	187b      	adds	r3, r7, r1
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2207      	movs	r2, #7
 800fb40:	4013      	ands	r3, r2
 800fb42:	b2da      	uxtb	r2, r3
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	0011      	movs	r1, r2
 800fb50:	0018      	movs	r0, r3
 800fb52:	f004 fecb 	bl	80148ec <USB_EPStartXfer>

  return HAL_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	0018      	movs	r0, r3
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	b006      	add	sp, #24
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	000a      	movs	r2, r1
 800fb6a:	1cfb      	adds	r3, r7, #3
 800fb6c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fb6e:	1cfb      	adds	r3, r7, #3
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	2207      	movs	r2, #7
 800fb74:	401a      	ands	r2, r3
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	23b8      	movs	r3, #184	; 0xb8
 800fb7a:	0059      	lsls	r1, r3, #1
 800fb7c:	0013      	movs	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	189b      	adds	r3, r3, r2
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	18c3      	adds	r3, r0, r3
 800fb86:	185b      	adds	r3, r3, r1
 800fb88:	681b      	ldr	r3, [r3, #0]
}
 800fb8a:	0018      	movs	r0, r3
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	b002      	add	sp, #8
 800fb90:	bd80      	pop	{r7, pc}

0800fb92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	603b      	str	r3, [r7, #0]
 800fb9e:	200b      	movs	r0, #11
 800fba0:	183b      	adds	r3, r7, r0
 800fba2:	1c0a      	adds	r2, r1, #0
 800fba4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fba6:	183b      	adds	r3, r7, r0
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	2207      	movs	r2, #7
 800fbac:	401a      	ands	r2, r3
 800fbae:	0013      	movs	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	189b      	adds	r3, r3, r2
 800fbb4:	00db      	lsls	r3, r3, #3
 800fbb6:	3310      	adds	r3, #16
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	18d3      	adds	r3, r2, r3
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	683a      	ldr	r2, [r7, #0]
 800fbca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	2224      	movs	r2, #36	; 0x24
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fbe6:	183b      	adds	r3, r7, r0
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2207      	movs	r2, #7
 800fbec:	4013      	ands	r3, r2
 800fbee:	b2da      	uxtb	r2, r3
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	0011      	movs	r1, r2
 800fbfc:	0018      	movs	r0, r3
 800fbfe:	f004 fe75 	bl	80148ec <USB_EPStartXfer>

  return HAL_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	0018      	movs	r0, r3
 800fc06:	46bd      	mov	sp, r7
 800fc08:	b006      	add	sp, #24
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	000a      	movs	r2, r1
 800fc16:	1cfb      	adds	r3, r7, #3
 800fc18:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fc1a:	1cfb      	adds	r3, r7, #3
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	2207      	movs	r2, #7
 800fc20:	4013      	ands	r3, r2
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	7912      	ldrb	r2, [r2, #4]
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d901      	bls.n	800fc2e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	e048      	b.n	800fcc0 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fc2e:	1cfb      	adds	r3, r7, #3
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	b25b      	sxtb	r3, r3
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	da10      	bge.n	800fc5a <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc38:	1cfb      	adds	r3, r7, #3
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	2207      	movs	r2, #7
 800fc3e:	401a      	ands	r2, r3
 800fc40:	0013      	movs	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	189b      	adds	r3, r3, r2
 800fc46:	00db      	lsls	r3, r3, #3
 800fc48:	3310      	adds	r3, #16
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	18d3      	adds	r3, r2, r3
 800fc4e:	3304      	adds	r3, #4
 800fc50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2201      	movs	r2, #1
 800fc56:	705a      	strb	r2, [r3, #1]
 800fc58:	e00e      	b.n	800fc78 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fc5a:	1cfb      	adds	r3, r7, #3
 800fc5c:	781a      	ldrb	r2, [r3, #0]
 800fc5e:	0013      	movs	r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	189b      	adds	r3, r3, r2
 800fc64:	00db      	lsls	r3, r3, #3
 800fc66:	3351      	adds	r3, #81	; 0x51
 800fc68:	33ff      	adds	r3, #255	; 0xff
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	18d3      	adds	r3, r2, r3
 800fc6e:	3304      	adds	r3, #4
 800fc70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2200      	movs	r2, #0
 800fc76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fc7e:	1cfb      	adds	r3, r7, #3
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	2207      	movs	r2, #7
 800fc84:	4013      	ands	r3, r2
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	23a5      	movs	r3, #165	; 0xa5
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	5cd3      	ldrb	r3, [r2, r3]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d101      	bne.n	800fc9c <HAL_PCD_EP_SetStall+0x90>
 800fc98:	2302      	movs	r3, #2
 800fc9a:	e011      	b.n	800fcc0 <HAL_PCD_EP_SetStall+0xb4>
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	23a5      	movs	r3, #165	; 0xa5
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	2101      	movs	r1, #1
 800fca4:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	0011      	movs	r1, r2
 800fcae:	0018      	movs	r0, r3
 800fcb0:	f005 fe32 	bl	8015918 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	23a5      	movs	r3, #165	; 0xa5
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	2100      	movs	r1, #0
 800fcbc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fcbe:	2300      	movs	r3, #0
}
 800fcc0:	0018      	movs	r0, r3
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	b004      	add	sp, #16
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	000a      	movs	r2, r1
 800fcd2:	1cfb      	adds	r3, r7, #3
 800fcd4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fcd6:	1cfb      	adds	r3, r7, #3
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	220f      	movs	r2, #15
 800fcdc:	4013      	ands	r3, r2
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	7912      	ldrb	r2, [r2, #4]
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d901      	bls.n	800fcea <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800fce6:	2301      	movs	r3, #1
 800fce8:	e04a      	b.n	800fd80 <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fcea:	1cfb      	adds	r3, r7, #3
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	b25b      	sxtb	r3, r3
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	da10      	bge.n	800fd16 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fcf4:	1cfb      	adds	r3, r7, #3
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2207      	movs	r2, #7
 800fcfa:	401a      	ands	r2, r3
 800fcfc:	0013      	movs	r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	189b      	adds	r3, r3, r2
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	3310      	adds	r3, #16
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	18d3      	adds	r3, r2, r3
 800fd0a:	3304      	adds	r3, #4
 800fd0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2201      	movs	r2, #1
 800fd12:	705a      	strb	r2, [r3, #1]
 800fd14:	e010      	b.n	800fd38 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fd16:	1cfb      	adds	r3, r7, #3
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	2207      	movs	r2, #7
 800fd1c:	401a      	ands	r2, r3
 800fd1e:	0013      	movs	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	189b      	adds	r3, r3, r2
 800fd24:	00db      	lsls	r3, r3, #3
 800fd26:	3351      	adds	r3, #81	; 0x51
 800fd28:	33ff      	adds	r3, #255	; 0xff
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	18d3      	adds	r3, r2, r3
 800fd2e:	3304      	adds	r3, #4
 800fd30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2200      	movs	r2, #0
 800fd36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd3e:	1cfb      	adds	r3, r7, #3
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	2207      	movs	r2, #7
 800fd44:	4013      	ands	r3, r2
 800fd46:	b2da      	uxtb	r2, r3
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fd4c:	687a      	ldr	r2, [r7, #4]
 800fd4e:	23a5      	movs	r3, #165	; 0xa5
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	5cd3      	ldrb	r3, [r2, r3]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d101      	bne.n	800fd5c <HAL_PCD_EP_ClrStall+0x94>
 800fd58:	2302      	movs	r3, #2
 800fd5a:	e011      	b.n	800fd80 <HAL_PCD_EP_ClrStall+0xb8>
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	23a5      	movs	r3, #165	; 0xa5
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	2101      	movs	r1, #1
 800fd64:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	0011      	movs	r1, r2
 800fd6e:	0018      	movs	r0, r3
 800fd70:	f005 fe14 	bl	801599c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	23a5      	movs	r3, #165	; 0xa5
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	0018      	movs	r0, r3
 800fd82:	46bd      	mov	sp, r7
 800fd84:	b004      	add	sp, #16
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800fd88:	b5b0      	push	{r4, r5, r7, lr}
 800fd8a:	b08e      	sub	sp, #56	; 0x38
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800fd90:	e362      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd98:	2022      	movs	r0, #34	; 0x22
 800fd9a:	183b      	adds	r3, r7, r0
 800fd9c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800fd9e:	183b      	adds	r3, r7, r0
 800fda0:	881b      	ldrh	r3, [r3, #0]
 800fda2:	b2da      	uxtb	r2, r3
 800fda4:	2421      	movs	r4, #33	; 0x21
 800fda6:	193b      	adds	r3, r7, r4
 800fda8:	210f      	movs	r1, #15
 800fdaa:	400a      	ands	r2, r1
 800fdac:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800fdae:	193b      	adds	r3, r7, r4
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d000      	beq.n	800fdb8 <PCD_EP_ISR_Handler+0x30>
 800fdb6:	e12d      	b.n	8010014 <PCD_EP_ISR_Handler+0x28c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800fdb8:	183b      	adds	r3, r7, r0
 800fdba:	881b      	ldrh	r3, [r3, #0]
 800fdbc:	2210      	movs	r2, #16
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	d140      	bne.n	800fe44 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4ac6      	ldr	r2, [pc, #792]	; (80100e4 <PCD_EP_ISR_Handler+0x35c>)
 800fdca:	4013      	ands	r3, r2
 800fdcc:	60bb      	str	r3, [r7, #8]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	2180      	movs	r1, #128	; 0x80
 800fdd6:	0209      	lsls	r1, r1, #8
 800fdd8:	430a      	orrs	r2, r1
 800fdda:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	3314      	adds	r3, #20
 800fde0:	637b      	str	r3, [r7, #52]	; 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800fde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	4abf      	ldr	r2, [pc, #764]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800fdea:	4694      	mov	ip, r2
 800fdec:	4463      	add	r3, ip
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	0c1b      	lsrs	r3, r3, #16
 800fdf2:	059b      	lsls	r3, r3, #22
 800fdf4:	0d9a      	lsrs	r2, r3, #22
 800fdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800fdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfc:	695a      	ldr	r2, [r3, #20]
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe00:	69db      	ldr	r3, [r3, #28]
 800fe02:	18d2      	adds	r2, r2, r3
 800fe04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe06:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f011 f9c1 	bl	8021194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	7c5b      	ldrb	r3, [r3, #17]
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d100      	bne.n	800fe1e <PCD_EP_ISR_Handler+0x96>
 800fe1c:	e31c      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
 800fe1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d000      	beq.n	800fe28 <PCD_EP_ISR_Handler+0xa0>
 800fe26:	e317      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7c5b      	ldrb	r3, [r3, #17]
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2280      	movs	r2, #128	; 0x80
 800fe30:	4252      	negs	r2, r2
 800fe32:	4313      	orrs	r3, r2
 800fe34:	b2da      	uxtb	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	64da      	str	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	745a      	strb	r2, [r3, #17]
 800fe42:	e309      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3355      	adds	r3, #85	; 0x55
 800fe48:	33ff      	adds	r3, #255	; 0xff
 800fe4a:	637b      	str	r3, [r7, #52]	; 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	2132      	movs	r1, #50	; 0x32
 800fe54:	187b      	adds	r3, r7, r1
 800fe56:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800fe58:	187b      	adds	r3, r7, r1
 800fe5a:	881a      	ldrh	r2, [r3, #0]
 800fe5c:	2380      	movs	r3, #128	; 0x80
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	4013      	ands	r3, r2
 800fe62:	d02a      	beq.n	800feba <PCD_EP_ISR_Handler+0x132>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	0019      	movs	r1, r3
 800fe70:	0010      	movs	r0, r2
 800fe72:	f7ff fab3 	bl	800f3dc <PCD_GET_EP_RX_CNT>
 800fe76:	0003      	movs	r3, r0
 800fe78:	001a      	movs	r2, r3
 800fe7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	22a7      	movs	r2, #167	; 0xa7
 800fe86:	0092      	lsls	r2, r2, #2
 800fe88:	1899      	adds	r1, r3, r2
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800fe8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800fe92:	b29b      	uxth	r3, r3
 800fe94:	f005 feba 	bl	8015c0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a93      	ldr	r2, [pc, #588]	; (80100ec <PCD_EP_ISR_Handler+0x364>)
 800fea0:	4013      	ands	r3, r2
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	68fa      	ldr	r2, [r7, #12]
 800feaa:	2180      	movs	r1, #128	; 0x80
 800feac:	430a      	orrs	r2, r1
 800feae:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	0018      	movs	r0, r3
 800feb4:	f011 f938 	bl	8021128 <HAL_PCD_SetupStageCallback>
 800feb8:	e2ce      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800feba:	2332      	movs	r3, #50	; 0x32
 800febc:	18fb      	adds	r3, r7, r3
 800febe:	2200      	movs	r2, #0
 800fec0:	5e9b      	ldrsh	r3, [r3, r2]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	db00      	blt.n	800fec8 <PCD_EP_ISR_Handler+0x140>
 800fec6:	e2c7      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a87      	ldr	r2, [pc, #540]	; (80100ec <PCD_EP_ISR_Handler+0x364>)
 800fed0:	4013      	ands	r3, r2
 800fed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800feda:	2180      	movs	r1, #128	; 0x80
 800fedc:	430a      	orrs	r2, r1
 800fede:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681a      	ldr	r2, [r3, #0]
 800fee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee6:	781b      	ldrb	r3, [r3, #0]
 800fee8:	b29b      	uxth	r3, r3
 800feea:	0019      	movs	r1, r3
 800feec:	0010      	movs	r0, r2
 800feee:	f7ff fa75 	bl	800f3dc <PCD_GET_EP_RX_CNT>
 800fef2:	0003      	movs	r3, r0
 800fef4:	001a      	movs	r2, r3
 800fef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800fefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fefc:	69db      	ldr	r3, [r3, #28]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d01a      	beq.n	800ff38 <PCD_EP_ISR_Handler+0x1b0>
 800ff02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d016      	beq.n	800ff38 <PCD_EP_ISR_Handler+0x1b0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff10:	6959      	ldr	r1, [r3, #20]
 800ff12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff14:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800ff16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff18:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	f005 fe76 	bl	8015c0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800ff20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff22:	695a      	ldr	r2, [r3, #20]
 800ff24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	18d2      	adds	r2, r2, r3
 800ff2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2100      	movs	r1, #0
 800ff32:	0018      	movs	r0, r3
 800ff34:	f011 f90d 	bl	8021152 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	2132      	movs	r1, #50	; 0x32
 800ff40:	187b      	adds	r3, r7, r1
 800ff42:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ff44:	187b      	adds	r3, r7, r1
 800ff46:	881a      	ldrh	r2, [r3, #0]
 800ff48:	2380      	movs	r3, #128	; 0x80
 800ff4a:	011b      	lsls	r3, r3, #4
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	d000      	beq.n	800ff52 <PCD_EP_ISR_Handler+0x1ca>
 800ff50:	e282      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
 800ff52:	187b      	adds	r3, r7, r1
 800ff54:	881a      	ldrh	r2, [r3, #0]
 800ff56:	23c0      	movs	r3, #192	; 0xc0
 800ff58:	019b      	lsls	r3, r3, #6
 800ff5a:	401a      	ands	r2, r3
 800ff5c:	23c0      	movs	r3, #192	; 0xc0
 800ff5e:	019b      	lsls	r3, r3, #6
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d100      	bne.n	800ff66 <PCD_EP_ISR_Handler+0x1de>
 800ff64:	e278      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ff66:	4b60      	ldr	r3, [pc, #384]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ff68:	685a      	ldr	r2, [r3, #4]
 800ff6a:	4b5f      	ldr	r3, [pc, #380]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ff6c:	0192      	lsls	r2, r2, #6
 800ff6e:	0992      	lsrs	r2, r2, #6
 800ff70:	605a      	str	r2, [r3, #4]
 800ff72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	2b3e      	cmp	r3, #62	; 0x3e
 800ff78:	d916      	bls.n	800ffa8 <PCD_EP_ISR_Handler+0x220>
 800ff7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	095b      	lsrs	r3, r3, #5
 800ff80:	617b      	str	r3, [r7, #20]
 800ff82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	221f      	movs	r2, #31
 800ff88:	4013      	ands	r3, r2
 800ff8a:	d102      	bne.n	800ff92 <PCD_EP_ISR_Handler+0x20a>
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	617b      	str	r3, [r7, #20]
 800ff92:	4b55      	ldr	r3, [pc, #340]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ff94:	685a      	ldr	r2, [r3, #4]
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	069b      	lsls	r3, r3, #26
 800ff9a:	431a      	orrs	r2, r3
 800ff9c:	4b52      	ldr	r3, [pc, #328]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ff9e:	2180      	movs	r1, #128	; 0x80
 800ffa0:	0609      	lsls	r1, r1, #24
 800ffa2:	430a      	orrs	r2, r1
 800ffa4:	605a      	str	r2, [r3, #4]
 800ffa6:	e01e      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x25e>
 800ffa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d107      	bne.n	800ffc0 <PCD_EP_ISR_Handler+0x238>
 800ffb0:	4b4d      	ldr	r3, [pc, #308]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ffb2:	685a      	ldr	r2, [r3, #4]
 800ffb4:	4b4c      	ldr	r3, [pc, #304]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ffb6:	2180      	movs	r1, #128	; 0x80
 800ffb8:	0609      	lsls	r1, r1, #24
 800ffba:	430a      	orrs	r2, r1
 800ffbc:	605a      	str	r2, [r3, #4]
 800ffbe:	e012      	b.n	800ffe6 <PCD_EP_ISR_Handler+0x25e>
 800ffc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffc2:	691b      	ldr	r3, [r3, #16]
 800ffc4:	085b      	lsrs	r3, r3, #1
 800ffc6:	617b      	str	r3, [r7, #20]
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffca:	691b      	ldr	r3, [r3, #16]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	4013      	ands	r3, r2
 800ffd0:	d002      	beq.n	800ffd8 <PCD_EP_ISR_Handler+0x250>
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	617b      	str	r3, [r7, #20]
 800ffd8:	4b43      	ldr	r3, [pc, #268]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ffda:	6859      	ldr	r1, [r3, #4]
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	069a      	lsls	r2, r3, #26
 800ffe0:	4b41      	ldr	r3, [pc, #260]	; (80100e8 <PCD_EP_ISR_Handler+0x360>)
 800ffe2:	430a      	orrs	r2, r1
 800ffe4:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4a40      	ldr	r2, [pc, #256]	; (80100f0 <PCD_EP_ISR_Handler+0x368>)
 800ffee:	4013      	ands	r3, r2
 800fff0:	613b      	str	r3, [r7, #16]
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	2280      	movs	r2, #128	; 0x80
 800fff6:	0152      	lsls	r2, r2, #5
 800fff8:	4053      	eors	r3, r2
 800fffa:	613b      	str	r3, [r7, #16]
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	2280      	movs	r2, #128	; 0x80
 8010000:	0192      	lsls	r2, r2, #6
 8010002:	4053      	eors	r3, r2
 8010004:	613b      	str	r3, [r7, #16]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	693a      	ldr	r2, [r7, #16]
 801000c:	4939      	ldr	r1, [pc, #228]	; (80100f4 <PCD_EP_ISR_Handler+0x36c>)
 801000e:	430a      	orrs	r2, r1
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	e221      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	001a      	movs	r2, r3
 801001a:	2121      	movs	r1, #33	; 0x21
 801001c:	187b      	adds	r3, r7, r1
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	18d3      	adds	r3, r2, r3
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	2032      	movs	r0, #50	; 0x32
 8010028:	183b      	adds	r3, r7, r0
 801002a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 801002c:	183b      	adds	r3, r7, r0
 801002e:	2200      	movs	r2, #0
 8010030:	5e9b      	ldrsh	r3, [r3, r2]
 8010032:	2b00      	cmp	r3, #0
 8010034:	db00      	blt.n	8010038 <PCD_EP_ISR_Handler+0x2b0>
 8010036:	e0e2      	b.n	80101fe <PCD_EP_ISR_Handler+0x476>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	001a      	movs	r2, r3
 801003e:	187b      	adds	r3, r7, r1
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	18d3      	adds	r3, r2, r3
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a28      	ldr	r2, [pc, #160]	; (80100ec <PCD_EP_ISR_Handler+0x364>)
 801004a:	4013      	ands	r3, r2
 801004c:	61fb      	str	r3, [r7, #28]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	001a      	movs	r2, r3
 8010054:	0008      	movs	r0, r1
 8010056:	187b      	adds	r3, r7, r1
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	18d3      	adds	r3, r2, r3
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	2180      	movs	r1, #128	; 0x80
 8010062:	430a      	orrs	r2, r1
 8010064:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8010066:	183b      	adds	r3, r7, r0
 8010068:	781a      	ldrb	r2, [r3, #0]
 801006a:	0013      	movs	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	189b      	adds	r3, r3, r2
 8010070:	00db      	lsls	r3, r3, #3
 8010072:	3351      	adds	r3, #81	; 0x51
 8010074:	33ff      	adds	r3, #255	; 0xff
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	18d3      	adds	r3, r2, r3
 801007a:	3304      	adds	r3, #4
 801007c:	637b      	str	r3, [r7, #52]	; 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801007e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010080:	7b1b      	ldrb	r3, [r3, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d11d      	bne.n	80100c2 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	b29b      	uxth	r3, r3
 8010090:	2524      	movs	r5, #36	; 0x24
 8010092:	197c      	adds	r4, r7, r5
 8010094:	0019      	movs	r1, r3
 8010096:	0010      	movs	r0, r2
 8010098:	f7ff f9a0 	bl	800f3dc <PCD_GET_EP_RX_CNT>
 801009c:	0003      	movs	r3, r0
 801009e:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 80100a0:	002c      	movs	r4, r5
 80100a2:	193b      	adds	r3, r7, r4
 80100a4:	881b      	ldrh	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d100      	bne.n	80100ac <PCD_EP_ISR_Handler+0x324>
 80100aa:	e080      	b.n	80101ae <PCD_EP_ISR_Handler+0x426>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6818      	ldr	r0, [r3, #0]
 80100b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b2:	6959      	ldr	r1, [r3, #20]
 80100b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100b6:	88da      	ldrh	r2, [r3, #6]
 80100b8:	193b      	adds	r3, r7, r4
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	f005 fda6 	bl	8015c0c <USB_ReadPMA>
 80100c0:	e075      	b.n	80101ae <PCD_EP_ISR_Handler+0x426>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80100c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c4:	78db      	ldrb	r3, [r3, #3]
 80100c6:	2b02      	cmp	r3, #2
 80100c8:	d116      	bne.n	80100f8 <PCD_EP_ISR_Handler+0x370>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80100ca:	2324      	movs	r3, #36	; 0x24
 80100cc:	18fc      	adds	r4, r7, r3
 80100ce:	2332      	movs	r3, #50	; 0x32
 80100d0:	18fb      	adds	r3, r7, r3
 80100d2:	881a      	ldrh	r2, [r3, #0]
 80100d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	0018      	movs	r0, r3
 80100da:	f000 f9cb 	bl	8010474 <HAL_PCD_EP_DB_Receive>
 80100de:	0003      	movs	r3, r0
 80100e0:	8023      	strh	r3, [r4, #0]
 80100e2:	e064      	b.n	80101ae <PCD_EP_ISR_Handler+0x426>
 80100e4:	07ff8f0f 	.word	0x07ff8f0f
 80100e8:	40009800 	.word	0x40009800
 80100ec:	07ff0f8f 	.word	0x07ff0f8f
 80100f0:	07ffbf8f 	.word	0x07ffbf8f
 80100f4:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	001a      	movs	r2, r3
 80100fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	009b      	lsls	r3, r3, #2
 8010104:	18d3      	adds	r3, r2, r3
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4acb      	ldr	r2, [pc, #812]	; (8010438 <PCD_EP_ISR_Handler+0x6b0>)
 801010a:	4013      	ands	r3, r2
 801010c:	61bb      	str	r3, [r7, #24]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	001a      	movs	r2, r3
 8010114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	18d3      	adds	r3, r2, r3
 801011c:	69ba      	ldr	r2, [r7, #24]
 801011e:	49c7      	ldr	r1, [pc, #796]	; (801043c <PCD_EP_ISR_Handler+0x6b4>)
 8010120:	430a      	orrs	r2, r1
 8010122:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	001a      	movs	r2, r3
 801012a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	18d3      	adds	r3, r2, r3
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	2380      	movs	r3, #128	; 0x80
 8010136:	01db      	lsls	r3, r3, #7
 8010138:	4013      	ands	r3, r2
 801013a:	d01c      	beq.n	8010176 <PCD_EP_ISR_Handler+0x3ee>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	b29b      	uxth	r3, r3
 8010146:	2524      	movs	r5, #36	; 0x24
 8010148:	197c      	adds	r4, r7, r5
 801014a:	0019      	movs	r1, r3
 801014c:	0010      	movs	r0, r2
 801014e:	f7ff f967 	bl	800f420 <PCD_GET_EP_DBUF0_CNT>
 8010152:	0003      	movs	r3, r0
 8010154:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8010156:	002c      	movs	r4, r5
 8010158:	193b      	adds	r3, r7, r4
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d026      	beq.n	80101ae <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6818      	ldr	r0, [r3, #0]
 8010164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010166:	6959      	ldr	r1, [r3, #20]
 8010168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801016a:	891a      	ldrh	r2, [r3, #8]
 801016c:	193b      	adds	r3, r7, r4
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	f005 fd4c 	bl	8015c0c <USB_ReadPMA>
 8010174:	e01b      	b.n	80101ae <PCD_EP_ISR_Handler+0x426>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681a      	ldr	r2, [r3, #0]
 801017a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	b29b      	uxth	r3, r3
 8010180:	2524      	movs	r5, #36	; 0x24
 8010182:	197c      	adds	r4, r7, r5
 8010184:	0019      	movs	r1, r3
 8010186:	0010      	movs	r0, r2
 8010188:	f7ff f96c 	bl	800f464 <PCD_GET_EP_DBUF1_CNT>
 801018c:	0003      	movs	r3, r0
 801018e:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8010190:	002c      	movs	r4, r5
 8010192:	193b      	adds	r3, r7, r4
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d009      	beq.n	80101ae <PCD_EP_ISR_Handler+0x426>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6818      	ldr	r0, [r3, #0]
 801019e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a0:	6959      	ldr	r1, [r3, #20]
 80101a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101a4:	895a      	ldrh	r2, [r3, #10]
 80101a6:	193b      	adds	r3, r7, r4
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	f005 fd2f 	bl	8015c0c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80101ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101b0:	69da      	ldr	r2, [r3, #28]
 80101b2:	2124      	movs	r1, #36	; 0x24
 80101b4:	187b      	adds	r3, r7, r1
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	18d2      	adds	r2, r2, r3
 80101ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80101be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101c0:	695a      	ldr	r2, [r3, #20]
 80101c2:	187b      	adds	r3, r7, r1
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	18d2      	adds	r2, r2, r3
 80101c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80101cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ce:	699b      	ldr	r3, [r3, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <PCD_EP_ISR_Handler+0x458>
 80101d4:	187b      	adds	r3, r7, r1
 80101d6:	881a      	ldrh	r2, [r3, #0]
 80101d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d207      	bcs.n	80101f0 <PCD_EP_ISR_Handler+0x468>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80101e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e2:	781a      	ldrb	r2, [r3, #0]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	0011      	movs	r1, r2
 80101e8:	0018      	movs	r0, r3
 80101ea:	f010 ffb2 	bl	8021152 <HAL_PCD_DataOutStageCallback>
 80101ee:	e006      	b.n	80101fe <PCD_EP_ISR_Handler+0x476>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80101f6:	0011      	movs	r1, r2
 80101f8:	0018      	movs	r0, r3
 80101fa:	f004 fb77 	bl	80148ec <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 80101fe:	2032      	movs	r0, #50	; 0x32
 8010200:	183b      	adds	r3, r7, r0
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	2280      	movs	r2, #128	; 0x80
 8010206:	4013      	ands	r3, r2
 8010208:	d100      	bne.n	801020c <PCD_EP_ISR_Handler+0x484>
 801020a:	e125      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
      {
        ep = &hpcd->IN_ep[epindex];
 801020c:	2121      	movs	r1, #33	; 0x21
 801020e:	187b      	adds	r3, r7, r1
 8010210:	781a      	ldrb	r2, [r3, #0]
 8010212:	0013      	movs	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	189b      	adds	r3, r3, r2
 8010218:	00db      	lsls	r3, r3, #3
 801021a:	3310      	adds	r3, #16
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	18d3      	adds	r3, r2, r3
 8010220:	3304      	adds	r3, #4
 8010222:	637b      	str	r3, [r7, #52]	; 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	001a      	movs	r2, r3
 801022a:	187b      	adds	r3, r7, r1
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	18d3      	adds	r3, r2, r3
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a82      	ldr	r2, [pc, #520]	; (8010440 <PCD_EP_ISR_Handler+0x6b8>)
 8010236:	4013      	ands	r3, r2
 8010238:	62bb      	str	r3, [r7, #40]	; 0x28
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	001a      	movs	r2, r3
 8010240:	187b      	adds	r3, r7, r1
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	18d3      	adds	r3, r2, r3
 8010248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801024a:	2180      	movs	r1, #128	; 0x80
 801024c:	0209      	lsls	r1, r1, #8
 801024e:	430a      	orrs	r2, r1
 8010250:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8010252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010254:	78db      	ldrb	r3, [r3, #3]
 8010256:	2b01      	cmp	r3, #1
 8010258:	d000      	beq.n	801025c <PCD_EP_ISR_Handler+0x4d4>
 801025a:	e0a3      	b.n	80103a4 <PCD_EP_ISR_Handler+0x61c>
        {
          ep->xfer_len = 0U;
 801025c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801025e:	2200      	movs	r2, #0
 8010260:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8010262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010264:	7b1b      	ldrb	r3, [r3, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d100      	bne.n	801026c <PCD_EP_ISR_Handler+0x4e4>
 801026a:	e093      	b.n	8010394 <PCD_EP_ISR_Handler+0x60c>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801026c:	183b      	adds	r3, r7, r0
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	2240      	movs	r2, #64	; 0x40
 8010272:	4013      	ands	r3, r2
 8010274:	d047      	beq.n	8010306 <PCD_EP_ISR_Handler+0x57e>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010278:	785b      	ldrb	r3, [r3, #1]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d121      	bne.n	80102c2 <PCD_EP_ISR_Handler+0x53a>
 801027e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010280:	781b      	ldrb	r3, [r3, #0]
 8010282:	00db      	lsls	r3, r3, #3
 8010284:	4a6f      	ldr	r2, [pc, #444]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010286:	4694      	mov	ip, r2
 8010288:	4463      	add	r3, ip
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	496c      	ldr	r1, [pc, #432]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010294:	468c      	mov	ip, r1
 8010296:	4463      	add	r3, ip
 8010298:	0192      	lsls	r2, r2, #6
 801029a:	0992      	lsrs	r2, r2, #6
 801029c:	601a      	str	r2, [r3, #0]
 801029e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	00db      	lsls	r3, r3, #3
 80102a4:	4a67      	ldr	r2, [pc, #412]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102a6:	4694      	mov	ip, r2
 80102a8:	4463      	add	r3, ip
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	00db      	lsls	r3, r3, #3
 80102b2:	4964      	ldr	r1, [pc, #400]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102b4:	468c      	mov	ip, r1
 80102b6:	4463      	add	r3, ip
 80102b8:	2180      	movs	r1, #128	; 0x80
 80102ba:	0609      	lsls	r1, r1, #24
 80102bc:	430a      	orrs	r2, r1
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	e068      	b.n	8010394 <PCD_EP_ISR_Handler+0x60c>
 80102c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c4:	785b      	ldrb	r3, [r3, #1]
 80102c6:	2b01      	cmp	r3, #1
 80102c8:	d164      	bne.n	8010394 <PCD_EP_ISR_Handler+0x60c>
 80102ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	4a5c      	ldr	r2, [pc, #368]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102d2:	4694      	mov	ip, r2
 80102d4:	4463      	add	r3, ip
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	00db      	lsls	r3, r3, #3
 80102de:	4959      	ldr	r1, [pc, #356]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102e0:	468c      	mov	ip, r1
 80102e2:	4463      	add	r3, ip
 80102e4:	0412      	lsls	r2, r2, #16
 80102e6:	0c12      	lsrs	r2, r2, #16
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	4a54      	ldr	r2, [pc, #336]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102f2:	189a      	adds	r2, r3, r2
 80102f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	00db      	lsls	r3, r3, #3
 80102fa:	4952      	ldr	r1, [pc, #328]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80102fc:	468c      	mov	ip, r1
 80102fe:	4463      	add	r3, ip
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	601a      	str	r2, [r3, #0]
 8010304:	e046      	b.n	8010394 <PCD_EP_ISR_Handler+0x60c>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010308:	785b      	ldrb	r3, [r3, #1]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d121      	bne.n	8010352 <PCD_EP_ISR_Handler+0x5ca>
 801030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	00db      	lsls	r3, r3, #3
 8010314:	4a4b      	ldr	r2, [pc, #300]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010316:	4694      	mov	ip, r2
 8010318:	4463      	add	r3, ip
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	00db      	lsls	r3, r3, #3
 8010322:	4948      	ldr	r1, [pc, #288]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010324:	468c      	mov	ip, r1
 8010326:	4463      	add	r3, ip
 8010328:	0192      	lsls	r2, r2, #6
 801032a:	0992      	lsrs	r2, r2, #6
 801032c:	605a      	str	r2, [r3, #4]
 801032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	4a43      	ldr	r2, [pc, #268]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010336:	4694      	mov	ip, r2
 8010338:	4463      	add	r3, ip
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	00db      	lsls	r3, r3, #3
 8010342:	4940      	ldr	r1, [pc, #256]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010344:	468c      	mov	ip, r1
 8010346:	4463      	add	r3, ip
 8010348:	2180      	movs	r1, #128	; 0x80
 801034a:	0609      	lsls	r1, r1, #24
 801034c:	430a      	orrs	r2, r1
 801034e:	605a      	str	r2, [r3, #4]
 8010350:	e020      	b.n	8010394 <PCD_EP_ISR_Handler+0x60c>
 8010352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010354:	785b      	ldrb	r3, [r3, #1]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d11c      	bne.n	8010394 <PCD_EP_ISR_Handler+0x60c>
 801035a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	00db      	lsls	r3, r3, #3
 8010360:	4a38      	ldr	r2, [pc, #224]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010362:	4694      	mov	ip, r2
 8010364:	4463      	add	r3, ip
 8010366:	685a      	ldr	r2, [r3, #4]
 8010368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	00db      	lsls	r3, r3, #3
 801036e:	4935      	ldr	r1, [pc, #212]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010370:	468c      	mov	ip, r1
 8010372:	4463      	add	r3, ip
 8010374:	0412      	lsls	r2, r2, #16
 8010376:	0c12      	lsrs	r2, r2, #16
 8010378:	605a      	str	r2, [r3, #4]
 801037a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	4a30      	ldr	r2, [pc, #192]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 8010382:	189a      	adds	r2, r3, r2
 8010384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	00db      	lsls	r3, r3, #3
 801038a:	492e      	ldr	r1, [pc, #184]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 801038c:	468c      	mov	ip, r1
 801038e:	4463      	add	r3, ip
 8010390:	6852      	ldr	r2, [r2, #4]
 8010392:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010396:	781a      	ldrb	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	0011      	movs	r1, r2
 801039c:	0018      	movs	r0, r3
 801039e:	f010 fef9 	bl	8021194 <HAL_PCD_DataInStageCallback>
 80103a2:	e059      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80103a4:	2332      	movs	r3, #50	; 0x32
 80103a6:	18fb      	adds	r3, r7, r3
 80103a8:	881a      	ldrh	r2, [r3, #0]
 80103aa:	2380      	movs	r3, #128	; 0x80
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	4013      	ands	r3, r2
 80103b0:	d14a      	bne.n	8010448 <PCD_EP_ISR_Handler+0x6c0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	4a22      	ldr	r2, [pc, #136]	; (8010444 <PCD_EP_ISR_Handler+0x6bc>)
 80103ba:	4694      	mov	ip, r2
 80103bc:	4463      	add	r3, ip
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	0c1b      	lsrs	r3, r3, #16
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	2126      	movs	r1, #38	; 0x26
 80103c6:	187b      	adds	r3, r7, r1
 80103c8:	0592      	lsls	r2, r2, #22
 80103ca:	0d92      	lsrs	r2, r2, #22
 80103cc:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80103ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d0:	699a      	ldr	r2, [r3, #24]
 80103d2:	187b      	adds	r3, r7, r1
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d907      	bls.n	80103ea <PCD_EP_ISR_Handler+0x662>
            {
              ep->xfer_len -= TxPctSize;
 80103da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103dc:	699a      	ldr	r2, [r3, #24]
 80103de:	187b      	adds	r3, r7, r1
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	1ad2      	subs	r2, r2, r3
 80103e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e6:	619a      	str	r2, [r3, #24]
 80103e8:	e002      	b.n	80103f0 <PCD_EP_ISR_Handler+0x668>
            }
            else
            {
              ep->xfer_len = 0U;
 80103ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ec:	2200      	movs	r2, #0
 80103ee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80103f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f2:	699b      	ldr	r3, [r3, #24]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d107      	bne.n	8010408 <PCD_EP_ISR_Handler+0x680>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80103f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103fa:	781a      	ldrb	r2, [r3, #0]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	0011      	movs	r1, r2
 8010400:	0018      	movs	r0, r3
 8010402:	f010 fec7 	bl	8021194 <HAL_PCD_DataInStageCallback>
 8010406:	e027      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8010408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040a:	695a      	ldr	r2, [r3, #20]
 801040c:	2126      	movs	r1, #38	; 0x26
 801040e:	187b      	adds	r3, r7, r1
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	18d2      	adds	r2, r2, r3
 8010414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010416:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8010418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801041a:	69da      	ldr	r2, [r3, #28]
 801041c:	187b      	adds	r3, r7, r1
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	18d2      	adds	r2, r2, r3
 8010422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010424:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801042c:	0011      	movs	r1, r2
 801042e:	0018      	movs	r0, r3
 8010430:	f004 fa5c 	bl	80148ec <USB_EPStartXfer>
 8010434:	e010      	b.n	8010458 <PCD_EP_ISR_Handler+0x6d0>
 8010436:	46c0      	nop			; (mov r8, r8)
 8010438:	07ff8f8f 	.word	0x07ff8f8f
 801043c:	000080c0 	.word	0x000080c0
 8010440:	07ff8f0f 	.word	0x07ff8f0f
 8010444:	40009800 	.word	0x40009800
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8010448:	2332      	movs	r3, #50	; 0x32
 801044a:	18fb      	adds	r3, r7, r3
 801044c:	881a      	ldrh	r2, [r3, #0]
 801044e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	0018      	movs	r0, r3
 8010454:	f000 f8fa 	bl	801064c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801045e:	2380      	movs	r3, #128	; 0x80
 8010460:	021b      	lsls	r3, r3, #8
 8010462:	4013      	ands	r3, r2
 8010464:	d000      	beq.n	8010468 <PCD_EP_ISR_Handler+0x6e0>
 8010466:	e494      	b.n	800fd92 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	0018      	movs	r0, r3
 801046c:	46bd      	mov	sp, r7
 801046e:	b00e      	add	sp, #56	; 0x38
 8010470:	bdb0      	pop	{r4, r5, r7, pc}
 8010472:	46c0      	nop			; (mov r8, r8)

08010474 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010474:	b5b0      	push	{r4, r5, r7, lr}
 8010476:	b08a      	sub	sp, #40	; 0x28
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	1dbb      	adds	r3, r7, #6
 8010480:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010482:	1dbb      	adds	r3, r7, #6
 8010484:	881a      	ldrh	r2, [r3, #0]
 8010486:	2380      	movs	r3, #128	; 0x80
 8010488:	01db      	lsls	r3, r3, #7
 801048a:	4013      	ands	r3, r2
 801048c:	d068      	beq.n	8010560 <HAL_PCD_EP_DB_Receive+0xec>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681a      	ldr	r2, [r3, #0]
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	b29b      	uxth	r3, r3
 8010498:	251e      	movs	r5, #30
 801049a:	197c      	adds	r4, r7, r5
 801049c:	0019      	movs	r1, r3
 801049e:	0010      	movs	r0, r2
 80104a0:	f7fe ffbe 	bl	800f420 <PCD_GET_EP_DBUF0_CNT>
 80104a4:	0003      	movs	r3, r0
 80104a6:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80104a8:	68bb      	ldr	r3, [r7, #8]
 80104aa:	699a      	ldr	r2, [r3, #24]
 80104ac:	197b      	adds	r3, r7, r5
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d307      	bcc.n	80104c4 <HAL_PCD_EP_DB_Receive+0x50>
    {
      ep->xfer_len -= count;
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	699a      	ldr	r2, [r3, #24]
 80104b8:	197b      	adds	r3, r7, r5
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	1ad2      	subs	r2, r2, r3
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	619a      	str	r2, [r3, #24]
 80104c2:	e002      	b.n	80104ca <HAL_PCD_EP_DB_Receive+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	2200      	movs	r2, #0
 80104c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	699b      	ldr	r3, [r3, #24]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d11a      	bne.n	8010508 <HAL_PCD_EP_DB_Receive+0x94>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	001a      	movs	r2, r3
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	18d3      	adds	r3, r2, r3
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a56      	ldr	r2, [pc, #344]	; (801063c <HAL_PCD_EP_DB_Receive+0x1c8>)
 80104e4:	4013      	ands	r3, r2
 80104e6:	61bb      	str	r3, [r7, #24]
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	2280      	movs	r2, #128	; 0x80
 80104ec:	0192      	lsls	r2, r2, #6
 80104ee:	4053      	eors	r3, r2
 80104f0:	61bb      	str	r3, [r7, #24]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	001a      	movs	r2, r3
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	009b      	lsls	r3, r3, #2
 80104fe:	18d3      	adds	r3, r2, r3
 8010500:	69ba      	ldr	r2, [r7, #24]
 8010502:	494f      	ldr	r1, [pc, #316]	; (8010640 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8010504:	430a      	orrs	r2, r1
 8010506:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010508:	1dbb      	adds	r3, r7, #6
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	2240      	movs	r2, #64	; 0x40
 801050e:	4013      	ands	r3, r2
 8010510:	d015      	beq.n	801053e <HAL_PCD_EP_DB_Receive+0xca>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	001a      	movs	r2, r3
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	781b      	ldrb	r3, [r3, #0]
 801051c:	009b      	lsls	r3, r3, #2
 801051e:	18d3      	adds	r3, r2, r3
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a48      	ldr	r2, [pc, #288]	; (8010644 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8010524:	4013      	ands	r3, r2
 8010526:	617b      	str	r3, [r7, #20]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	001a      	movs	r2, r3
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	18d3      	adds	r3, r2, r3
 8010536:	697a      	ldr	r2, [r7, #20]
 8010538:	4943      	ldr	r1, [pc, #268]	; (8010648 <HAL_PCD_EP_DB_Receive+0x1d4>)
 801053a:	430a      	orrs	r2, r1
 801053c:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 801053e:	241e      	movs	r4, #30
 8010540:	193b      	adds	r3, r7, r4
 8010542:	881b      	ldrh	r3, [r3, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d100      	bne.n	801054a <HAL_PCD_EP_DB_Receive+0xd6>
 8010548:	e071      	b.n	801062e <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6818      	ldr	r0, [r3, #0]
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	6959      	ldr	r1, [r3, #20]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	193b      	adds	r3, r7, r4
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	f005 fb57 	bl	8015c0c <USB_ReadPMA>
 801055e:	e066      	b.n	801062e <HAL_PCD_EP_DB_Receive+0x1ba>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	b29b      	uxth	r3, r3
 801056a:	251e      	movs	r5, #30
 801056c:	197c      	adds	r4, r7, r5
 801056e:	0019      	movs	r1, r3
 8010570:	0010      	movs	r0, r2
 8010572:	f7fe ff77 	bl	800f464 <PCD_GET_EP_DBUF1_CNT>
 8010576:	0003      	movs	r3, r0
 8010578:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	699a      	ldr	r2, [r3, #24]
 801057e:	197b      	adds	r3, r7, r5
 8010580:	881b      	ldrh	r3, [r3, #0]
 8010582:	429a      	cmp	r2, r3
 8010584:	d307      	bcc.n	8010596 <HAL_PCD_EP_DB_Receive+0x122>
    {
      ep->xfer_len -= count;
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	699a      	ldr	r2, [r3, #24]
 801058a:	197b      	adds	r3, r7, r5
 801058c:	881b      	ldrh	r3, [r3, #0]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	619a      	str	r2, [r3, #24]
 8010594:	e002      	b.n	801059c <HAL_PCD_EP_DB_Receive+0x128>
    }
    else
    {
      ep->xfer_len = 0U;
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	2200      	movs	r2, #0
 801059a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d11a      	bne.n	80105da <HAL_PCD_EP_DB_Receive+0x166>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	001a      	movs	r2, r3
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	18d3      	adds	r3, r2, r3
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a21      	ldr	r2, [pc, #132]	; (801063c <HAL_PCD_EP_DB_Receive+0x1c8>)
 80105b6:	4013      	ands	r3, r2
 80105b8:	627b      	str	r3, [r7, #36]	; 0x24
 80105ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105bc:	2280      	movs	r2, #128	; 0x80
 80105be:	0192      	lsls	r2, r2, #6
 80105c0:	4053      	eors	r3, r2
 80105c2:	627b      	str	r3, [r7, #36]	; 0x24
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	001a      	movs	r2, r3
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	18d3      	adds	r3, r2, r3
 80105d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105d4:	491a      	ldr	r1, [pc, #104]	; (8010640 <HAL_PCD_EP_DB_Receive+0x1cc>)
 80105d6:	430a      	orrs	r2, r1
 80105d8:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80105da:	1dbb      	adds	r3, r7, #6
 80105dc:	881b      	ldrh	r3, [r3, #0]
 80105de:	2240      	movs	r2, #64	; 0x40
 80105e0:	4013      	ands	r3, r2
 80105e2:	d115      	bne.n	8010610 <HAL_PCD_EP_DB_Receive+0x19c>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	001a      	movs	r2, r3
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	18d3      	adds	r3, r2, r3
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a13      	ldr	r2, [pc, #76]	; (8010644 <HAL_PCD_EP_DB_Receive+0x1d0>)
 80105f6:	4013      	ands	r3, r2
 80105f8:	623b      	str	r3, [r7, #32]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	001a      	movs	r2, r3
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	18d3      	adds	r3, r2, r3
 8010608:	6a3a      	ldr	r2, [r7, #32]
 801060a:	490f      	ldr	r1, [pc, #60]	; (8010648 <HAL_PCD_EP_DB_Receive+0x1d4>)
 801060c:	430a      	orrs	r2, r1
 801060e:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8010610:	241e      	movs	r4, #30
 8010612:	193b      	adds	r3, r7, r4
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d009      	beq.n	801062e <HAL_PCD_EP_DB_Receive+0x1ba>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	6959      	ldr	r1, [r3, #20]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	895a      	ldrh	r2, [r3, #10]
 8010626:	193b      	adds	r3, r7, r4
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	f005 faef 	bl	8015c0c <USB_ReadPMA>
    }
  }

  return count;
 801062e:	231e      	movs	r3, #30
 8010630:	18fb      	adds	r3, r7, r3
 8010632:	881b      	ldrh	r3, [r3, #0]
}
 8010634:	0018      	movs	r0, r3
 8010636:	46bd      	mov	sp, r7
 8010638:	b00a      	add	sp, #40	; 0x28
 801063a:	bdb0      	pop	{r4, r5, r7, pc}
 801063c:	07ffbf8f 	.word	0x07ffbf8f
 8010640:	00008080 	.word	0x00008080
 8010644:	07ff8f8f 	.word	0x07ff8f8f
 8010648:	000080c0 	.word	0x000080c0

0801064c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801064c:	b5b0      	push	{r4, r5, r7, lr}
 801064e:	b08e      	sub	sp, #56	; 0x38
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	1dbb      	adds	r3, r7, #6
 8010658:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801065a:	1dbb      	adds	r3, r7, #6
 801065c:	881b      	ldrh	r3, [r3, #0]
 801065e:	2240      	movs	r2, #64	; 0x40
 8010660:	4013      	ands	r3, r2
 8010662:	d100      	bne.n	8010666 <HAL_PCD_EP_DB_Transmit+0x1a>
 8010664:	e1c4      	b.n	80109f0 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	b29b      	uxth	r3, r3
 8010670:	251e      	movs	r5, #30
 8010672:	197c      	adds	r4, r7, r5
 8010674:	0019      	movs	r1, r3
 8010676:	0010      	movs	r0, r2
 8010678:	f7fe fed2 	bl	800f420 <PCD_GET_EP_DBUF0_CNT>
 801067c:	0003      	movs	r3, r0
 801067e:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	699a      	ldr	r2, [r3, #24]
 8010684:	197b      	adds	r3, r7, r5
 8010686:	881b      	ldrh	r3, [r3, #0]
 8010688:	429a      	cmp	r2, r3
 801068a:	d907      	bls.n	801069c <HAL_PCD_EP_DB_Transmit+0x50>
    {
      ep->xfer_len -= TxPctSize;
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	699a      	ldr	r2, [r3, #24]
 8010690:	197b      	adds	r3, r7, r5
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	1ad2      	subs	r2, r2, r3
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	619a      	str	r2, [r3, #24]
 801069a:	e002      	b.n	80106a2 <HAL_PCD_EP_DB_Transmit+0x56>
    }
    else
    {
      ep->xfer_len = 0U;
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	2200      	movs	r2, #0
 80106a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	699b      	ldr	r3, [r3, #24]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d000      	beq.n	80106ac <HAL_PCD_EP_DB_Transmit+0x60>
 80106aa:	e0b2      	b.n	8010812 <HAL_PCD_EP_DB_Transmit+0x1c6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	785b      	ldrb	r3, [r3, #1]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d121      	bne.n	80106f8 <HAL_PCD_EP_DB_Transmit+0xac>
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	00db      	lsls	r3, r3, #3
 80106ba:	4adb      	ldr	r2, [pc, #876]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80106bc:	4694      	mov	ip, r2
 80106be:	4463      	add	r3, ip
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	49d7      	ldr	r1, [pc, #860]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80106ca:	468c      	mov	ip, r1
 80106cc:	4463      	add	r3, ip
 80106ce:	0192      	lsls	r2, r2, #6
 80106d0:	0992      	lsrs	r2, r2, #6
 80106d2:	601a      	str	r2, [r3, #0]
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	00db      	lsls	r3, r3, #3
 80106da:	4ad3      	ldr	r2, [pc, #844]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80106dc:	4694      	mov	ip, r2
 80106de:	4463      	add	r3, ip
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	00db      	lsls	r3, r3, #3
 80106e8:	49cf      	ldr	r1, [pc, #828]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80106ea:	468c      	mov	ip, r1
 80106ec:	4463      	add	r3, ip
 80106ee:	2180      	movs	r1, #128	; 0x80
 80106f0:	0609      	lsls	r1, r1, #24
 80106f2:	430a      	orrs	r2, r1
 80106f4:	601a      	str	r2, [r3, #0]
 80106f6:	e020      	b.n	801073a <HAL_PCD_EP_DB_Transmit+0xee>
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	785b      	ldrb	r3, [r3, #1]
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d11c      	bne.n	801073a <HAL_PCD_EP_DB_Transmit+0xee>
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	00db      	lsls	r3, r3, #3
 8010706:	4ac8      	ldr	r2, [pc, #800]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010708:	4694      	mov	ip, r2
 801070a:	4463      	add	r3, ip
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	49c4      	ldr	r1, [pc, #784]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010716:	468c      	mov	ip, r1
 8010718:	4463      	add	r3, ip
 801071a:	0412      	lsls	r2, r2, #16
 801071c:	0c12      	lsrs	r2, r2, #16
 801071e:	601a      	str	r2, [r3, #0]
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	4ac0      	ldr	r2, [pc, #768]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010728:	189a      	adds	r2, r3, r2
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	00db      	lsls	r3, r3, #3
 8010730:	49bd      	ldr	r1, [pc, #756]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010732:	468c      	mov	ip, r1
 8010734:	4463      	add	r3, ip
 8010736:	6812      	ldr	r2, [r2, #0]
 8010738:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	785b      	ldrb	r3, [r3, #1]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d121      	bne.n	8010786 <HAL_PCD_EP_DB_Transmit+0x13a>
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	00db      	lsls	r3, r3, #3
 8010748:	4ab7      	ldr	r2, [pc, #732]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 801074a:	4694      	mov	ip, r2
 801074c:	4463      	add	r3, ip
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	49b4      	ldr	r1, [pc, #720]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010758:	468c      	mov	ip, r1
 801075a:	4463      	add	r3, ip
 801075c:	0192      	lsls	r2, r2, #6
 801075e:	0992      	lsrs	r2, r2, #6
 8010760:	605a      	str	r2, [r3, #4]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	4aaf      	ldr	r2, [pc, #700]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 801076a:	4694      	mov	ip, r2
 801076c:	4463      	add	r3, ip
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	49ac      	ldr	r1, [pc, #688]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010778:	468c      	mov	ip, r1
 801077a:	4463      	add	r3, ip
 801077c:	2180      	movs	r1, #128	; 0x80
 801077e:	0609      	lsls	r1, r1, #24
 8010780:	430a      	orrs	r2, r1
 8010782:	605a      	str	r2, [r3, #4]
 8010784:	e020      	b.n	80107c8 <HAL_PCD_EP_DB_Transmit+0x17c>
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	785b      	ldrb	r3, [r3, #1]
 801078a:	2b01      	cmp	r3, #1
 801078c:	d11c      	bne.n	80107c8 <HAL_PCD_EP_DB_Transmit+0x17c>
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	00db      	lsls	r3, r3, #3
 8010794:	4aa4      	ldr	r2, [pc, #656]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010796:	4694      	mov	ip, r2
 8010798:	4463      	add	r3, ip
 801079a:	685a      	ldr	r2, [r3, #4]
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	49a1      	ldr	r1, [pc, #644]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80107a4:	468c      	mov	ip, r1
 80107a6:	4463      	add	r3, ip
 80107a8:	0412      	lsls	r2, r2, #16
 80107aa:	0c12      	lsrs	r2, r2, #16
 80107ac:	605a      	str	r2, [r3, #4]
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	781b      	ldrb	r3, [r3, #0]
 80107b2:	00db      	lsls	r3, r3, #3
 80107b4:	4a9c      	ldr	r2, [pc, #624]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80107b6:	189a      	adds	r2, r3, r2
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	499a      	ldr	r1, [pc, #616]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80107c0:	468c      	mov	ip, r1
 80107c2:	4463      	add	r3, ip
 80107c4:	6852      	ldr	r2, [r2, #4]
 80107c6:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	781a      	ldrb	r2, [r3, #0]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	0011      	movs	r1, r2
 80107d0:	0018      	movs	r0, r3
 80107d2:	f010 fcdf 	bl	8021194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80107d6:	1dbb      	adds	r3, r7, #6
 80107d8:	881a      	ldrh	r2, [r3, #0]
 80107da:	2380      	movs	r3, #128	; 0x80
 80107dc:	01db      	lsls	r3, r3, #7
 80107de:	4013      	ands	r3, r2
 80107e0:	d100      	bne.n	80107e4 <HAL_PCD_EP_DB_Transmit+0x198>
 80107e2:	e2d6      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	001a      	movs	r2, r3
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	18d3      	adds	r3, r2, r3
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	4a8d      	ldr	r2, [pc, #564]	; (8010a2c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80107f6:	4013      	ands	r3, r2
 80107f8:	637b      	str	r3, [r7, #52]	; 0x34
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	001a      	movs	r2, r3
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	18d3      	adds	r3, r2, r3
 8010808:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801080a:	4989      	ldr	r1, [pc, #548]	; (8010a30 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 801080c:	430a      	orrs	r2, r1
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	e2bf      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010812:	1dbb      	adds	r3, r7, #6
 8010814:	881a      	ldrh	r2, [r3, #0]
 8010816:	2380      	movs	r3, #128	; 0x80
 8010818:	01db      	lsls	r3, r3, #7
 801081a:	4013      	ands	r3, r2
 801081c:	d015      	beq.n	801084a <HAL_PCD_EP_DB_Transmit+0x1fe>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	001a      	movs	r2, r3
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	009b      	lsls	r3, r3, #2
 801082a:	18d3      	adds	r3, r2, r3
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	4a7f      	ldr	r2, [pc, #508]	; (8010a2c <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8010830:	4013      	ands	r3, r2
 8010832:	62bb      	str	r3, [r7, #40]	; 0x28
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	001a      	movs	r2, r3
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	18d3      	adds	r3, r2, r3
 8010842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010844:	497a      	ldr	r1, [pc, #488]	; (8010a30 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8010846:	430a      	orrs	r2, r1
 8010848:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	2224      	movs	r2, #36	; 0x24
 801084e:	5c9b      	ldrb	r3, [r3, r2]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d000      	beq.n	8010856 <HAL_PCD_EP_DB_Transmit+0x20a>
 8010854:	e29d      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	695a      	ldr	r2, [r3, #20]
 801085a:	211e      	movs	r1, #30
 801085c:	187b      	adds	r3, r7, r1
 801085e:	881b      	ldrh	r3, [r3, #0]
 8010860:	18d2      	adds	r2, r2, r3
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	69da      	ldr	r2, [r3, #28]
 801086a:	187b      	adds	r3, r7, r1
 801086c:	881b      	ldrh	r3, [r3, #0]
 801086e:	18d2      	adds	r2, r2, r3
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	6a1a      	ldr	r2, [r3, #32]
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	691b      	ldr	r3, [r3, #16]
 801087c:	429a      	cmp	r2, r3
 801087e:	d309      	bcc.n	8010894 <HAL_PCD_EP_DB_Transmit+0x248>
        {
          len = ep->maxpacket;
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	691b      	ldr	r3, [r3, #16]
 8010884:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	6a1a      	ldr	r2, [r3, #32]
 801088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088c:	1ad2      	subs	r2, r2, r3
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	621a      	str	r2, [r3, #32]
 8010892:	e016      	b.n	80108c2 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else if (ep->xfer_len_db == 0U)
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	6a1b      	ldr	r3, [r3, #32]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d108      	bne.n	80108ae <HAL_PCD_EP_DB_Transmit+0x262>
        {
          len = TxPctSize;
 801089c:	231e      	movs	r3, #30
 801089e:	18fb      	adds	r3, r7, r3
 80108a0:	881b      	ldrh	r3, [r3, #0]
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	2224      	movs	r2, #36	; 0x24
 80108a8:	2100      	movs	r1, #0
 80108aa:	5499      	strb	r1, [r3, r2]
 80108ac:	e009      	b.n	80108c2 <HAL_PCD_EP_DB_Transmit+0x276>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	2224      	movs	r2, #36	; 0x24
 80108b2:	2100      	movs	r1, #0
 80108b4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	6a1b      	ldr	r3, [r3, #32]
 80108ba:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2200      	movs	r2, #0
 80108c0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	785b      	ldrb	r3, [r3, #1]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d162      	bne.n	8010990 <HAL_PCD_EP_DB_Transmit+0x344>
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	00db      	lsls	r3, r3, #3
 80108d0:	4a55      	ldr	r2, [pc, #340]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80108d2:	4694      	mov	ip, r2
 80108d4:	4463      	add	r3, ip
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	00db      	lsls	r3, r3, #3
 80108de:	4952      	ldr	r1, [pc, #328]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80108e0:	468c      	mov	ip, r1
 80108e2:	4463      	add	r3, ip
 80108e4:	0192      	lsls	r2, r2, #6
 80108e6:	0992      	lsrs	r2, r2, #6
 80108e8:	601a      	str	r2, [r3, #0]
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	2b3e      	cmp	r3, #62	; 0x3e
 80108ee:	d91e      	bls.n	801092e <HAL_PCD_EP_DB_Transmit+0x2e2>
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	095b      	lsrs	r3, r3, #5
 80108f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80108f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f8:	221f      	movs	r2, #31
 80108fa:	4013      	ands	r3, r2
 80108fc:	d102      	bne.n	8010904 <HAL_PCD_EP_DB_Transmit+0x2b8>
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	3b01      	subs	r3, #1
 8010902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	00db      	lsls	r3, r3, #3
 801090a:	4a47      	ldr	r2, [pc, #284]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 801090c:	4694      	mov	ip, r2
 801090e:	4463      	add	r3, ip
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	069b      	lsls	r3, r3, #26
 8010916:	431a      	orrs	r2, r3
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	00db      	lsls	r3, r3, #3
 801091e:	4942      	ldr	r1, [pc, #264]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010920:	468c      	mov	ip, r1
 8010922:	4463      	add	r3, ip
 8010924:	2180      	movs	r1, #128	; 0x80
 8010926:	0609      	lsls	r1, r1, #24
 8010928:	430a      	orrs	r2, r1
 801092a:	601a      	str	r2, [r3, #0]
 801092c:	e055      	b.n	80109da <HAL_PCD_EP_DB_Transmit+0x38e>
 801092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010930:	2b00      	cmp	r3, #0
 8010932:	d111      	bne.n	8010958 <HAL_PCD_EP_DB_Transmit+0x30c>
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	4a3b      	ldr	r2, [pc, #236]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 801093c:	4694      	mov	ip, r2
 801093e:	4463      	add	r3, ip
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	781b      	ldrb	r3, [r3, #0]
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	4937      	ldr	r1, [pc, #220]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 801094a:	468c      	mov	ip, r1
 801094c:	4463      	add	r3, ip
 801094e:	2180      	movs	r1, #128	; 0x80
 8010950:	0609      	lsls	r1, r1, #24
 8010952:	430a      	orrs	r2, r1
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	e040      	b.n	80109da <HAL_PCD_EP_DB_Transmit+0x38e>
 8010958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095a:	085b      	lsrs	r3, r3, #1
 801095c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010960:	2201      	movs	r2, #1
 8010962:	4013      	ands	r3, r2
 8010964:	d002      	beq.n	801096c <HAL_PCD_EP_DB_Transmit+0x320>
 8010966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010968:	3301      	adds	r3, #1
 801096a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	00db      	lsls	r3, r3, #3
 8010972:	4a2d      	ldr	r2, [pc, #180]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010974:	4694      	mov	ip, r2
 8010976:	4463      	add	r3, ip
 8010978:	6819      	ldr	r1, [r3, #0]
 801097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097c:	069a      	lsls	r2, r3, #26
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	00db      	lsls	r3, r3, #3
 8010984:	4828      	ldr	r0, [pc, #160]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8010986:	4684      	mov	ip, r0
 8010988:	4463      	add	r3, ip
 801098a:	430a      	orrs	r2, r1
 801098c:	601a      	str	r2, [r3, #0]
 801098e:	e024      	b.n	80109da <HAL_PCD_EP_DB_Transmit+0x38e>
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d120      	bne.n	80109da <HAL_PCD_EP_DB_Transmit+0x38e>
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	00db      	lsls	r3, r3, #3
 801099e:	4a22      	ldr	r2, [pc, #136]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80109a0:	4694      	mov	ip, r2
 80109a2:	4463      	add	r3, ip
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	491e      	ldr	r1, [pc, #120]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80109ae:	468c      	mov	ip, r1
 80109b0:	4463      	add	r3, ip
 80109b2:	0412      	lsls	r2, r2, #16
 80109b4:	0c12      	lsrs	r2, r2, #16
 80109b6:	601a      	str	r2, [r3, #0]
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	00db      	lsls	r3, r3, #3
 80109be:	4a1a      	ldr	r2, [pc, #104]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80109c0:	4694      	mov	ip, r2
 80109c2:	4463      	add	r3, ip
 80109c4:	6819      	ldr	r1, [r3, #0]
 80109c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c8:	041a      	lsls	r2, r3, #16
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	00db      	lsls	r3, r3, #3
 80109d0:	4815      	ldr	r0, [pc, #84]	; (8010a28 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80109d2:	4684      	mov	ip, r0
 80109d4:	4463      	add	r3, ip
 80109d6:	430a      	orrs	r2, r1
 80109d8:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6818      	ldr	r0, [r3, #0]
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	6959      	ldr	r1, [r3, #20]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	891a      	ldrh	r2, [r3, #8]
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f005 f899 	bl	8015b20 <USB_WritePMA>
 80109ee:	e1d0      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	251e      	movs	r5, #30
 80109fc:	197c      	adds	r4, r7, r5
 80109fe:	0019      	movs	r1, r3
 8010a00:	0010      	movs	r0, r2
 8010a02:	f7fe fd2f 	bl	800f464 <PCD_GET_EP_DBUF1_CNT>
 8010a06:	0003      	movs	r3, r0
 8010a08:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	699a      	ldr	r2, [r3, #24]
 8010a0e:	197b      	adds	r3, r7, r5
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d30e      	bcc.n	8010a34 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	699a      	ldr	r2, [r3, #24]
 8010a1a:	197b      	adds	r3, r7, r5
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	1ad2      	subs	r2, r2, r3
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	619a      	str	r2, [r3, #24]
 8010a24:	e009      	b.n	8010a3a <HAL_PCD_EP_DB_Transmit+0x3ee>
 8010a26:	46c0      	nop			; (mov r8, r8)
 8010a28:	40009800 	.word	0x40009800
 8010a2c:	07ff8f8f 	.word	0x07ff8f8f
 8010a30:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2200      	movs	r2, #0
 8010a38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	699b      	ldr	r3, [r3, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d000      	beq.n	8010a44 <HAL_PCD_EP_DB_Transmit+0x3f8>
 8010a42:	e0b2      	b.n	8010baa <HAL_PCD_EP_DB_Transmit+0x55e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	785b      	ldrb	r3, [r3, #1]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d121      	bne.n	8010a90 <HAL_PCD_EP_DB_Transmit+0x444>
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	00db      	lsls	r3, r3, #3
 8010a52:	4ab5      	ldr	r2, [pc, #724]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010a54:	4694      	mov	ip, r2
 8010a56:	4463      	add	r3, ip
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	68bb      	ldr	r3, [r7, #8]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	49b1      	ldr	r1, [pc, #708]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010a62:	468c      	mov	ip, r1
 8010a64:	4463      	add	r3, ip
 8010a66:	0192      	lsls	r2, r2, #6
 8010a68:	0992      	lsrs	r2, r2, #6
 8010a6a:	601a      	str	r2, [r3, #0]
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	4aad      	ldr	r2, [pc, #692]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010a74:	4694      	mov	ip, r2
 8010a76:	4463      	add	r3, ip
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	00db      	lsls	r3, r3, #3
 8010a80:	49a9      	ldr	r1, [pc, #676]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010a82:	468c      	mov	ip, r1
 8010a84:	4463      	add	r3, ip
 8010a86:	2180      	movs	r1, #128	; 0x80
 8010a88:	0609      	lsls	r1, r1, #24
 8010a8a:	430a      	orrs	r2, r1
 8010a8c:	601a      	str	r2, [r3, #0]
 8010a8e:	e020      	b.n	8010ad2 <HAL_PCD_EP_DB_Transmit+0x486>
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	785b      	ldrb	r3, [r3, #1]
 8010a94:	2b01      	cmp	r3, #1
 8010a96:	d11c      	bne.n	8010ad2 <HAL_PCD_EP_DB_Transmit+0x486>
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	4aa2      	ldr	r2, [pc, #648]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010aa0:	4694      	mov	ip, r2
 8010aa2:	4463      	add	r3, ip
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	00db      	lsls	r3, r3, #3
 8010aac:	499e      	ldr	r1, [pc, #632]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010aae:	468c      	mov	ip, r1
 8010ab0:	4463      	add	r3, ip
 8010ab2:	0412      	lsls	r2, r2, #16
 8010ab4:	0c12      	lsrs	r2, r2, #16
 8010ab6:	601a      	str	r2, [r3, #0]
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	00db      	lsls	r3, r3, #3
 8010abe:	4a9a      	ldr	r2, [pc, #616]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010ac0:	189a      	adds	r2, r3, r2
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	4997      	ldr	r1, [pc, #604]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010aca:	468c      	mov	ip, r1
 8010acc:	4463      	add	r3, ip
 8010ace:	6812      	ldr	r2, [r2, #0]
 8010ad0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	785b      	ldrb	r3, [r3, #1]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d121      	bne.n	8010b1e <HAL_PCD_EP_DB_Transmit+0x4d2>
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	4a91      	ldr	r2, [pc, #580]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010ae2:	4694      	mov	ip, r2
 8010ae4:	4463      	add	r3, ip
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	498e      	ldr	r1, [pc, #568]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010af0:	468c      	mov	ip, r1
 8010af2:	4463      	add	r3, ip
 8010af4:	0192      	lsls	r2, r2, #6
 8010af6:	0992      	lsrs	r2, r2, #6
 8010af8:	605a      	str	r2, [r3, #4]
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	00db      	lsls	r3, r3, #3
 8010b00:	4a89      	ldr	r2, [pc, #548]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b02:	4694      	mov	ip, r2
 8010b04:	4463      	add	r3, ip
 8010b06:	685a      	ldr	r2, [r3, #4]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	4986      	ldr	r1, [pc, #536]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b10:	468c      	mov	ip, r1
 8010b12:	4463      	add	r3, ip
 8010b14:	2180      	movs	r1, #128	; 0x80
 8010b16:	0609      	lsls	r1, r1, #24
 8010b18:	430a      	orrs	r2, r1
 8010b1a:	605a      	str	r2, [r3, #4]
 8010b1c:	e020      	b.n	8010b60 <HAL_PCD_EP_DB_Transmit+0x514>
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	785b      	ldrb	r3, [r3, #1]
 8010b22:	2b01      	cmp	r3, #1
 8010b24:	d11c      	bne.n	8010b60 <HAL_PCD_EP_DB_Transmit+0x514>
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	4a7e      	ldr	r2, [pc, #504]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b2e:	4694      	mov	ip, r2
 8010b30:	4463      	add	r3, ip
 8010b32:	685a      	ldr	r2, [r3, #4]
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	00db      	lsls	r3, r3, #3
 8010b3a:	497b      	ldr	r1, [pc, #492]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b3c:	468c      	mov	ip, r1
 8010b3e:	4463      	add	r3, ip
 8010b40:	0412      	lsls	r2, r2, #16
 8010b42:	0c12      	lsrs	r2, r2, #16
 8010b44:	605a      	str	r2, [r3, #4]
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	00db      	lsls	r3, r3, #3
 8010b4c:	4a76      	ldr	r2, [pc, #472]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b4e:	189a      	adds	r2, r3, r2
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	00db      	lsls	r3, r3, #3
 8010b56:	4974      	ldr	r1, [pc, #464]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010b58:	468c      	mov	ip, r1
 8010b5a:	4463      	add	r3, ip
 8010b5c:	6852      	ldr	r2, [r2, #4]
 8010b5e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	781a      	ldrb	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	0011      	movs	r1, r2
 8010b68:	0018      	movs	r0, r3
 8010b6a:	f010 fb13 	bl	8021194 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010b6e:	1dbb      	adds	r3, r7, #6
 8010b70:	881a      	ldrh	r2, [r3, #0]
 8010b72:	2380      	movs	r3, #128	; 0x80
 8010b74:	01db      	lsls	r3, r3, #7
 8010b76:	4013      	ands	r3, r2
 8010b78:	d000      	beq.n	8010b7c <HAL_PCD_EP_DB_Transmit+0x530>
 8010b7a:	e10a      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	001a      	movs	r2, r3
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	18d3      	adds	r3, r2, r3
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a67      	ldr	r2, [pc, #412]	; (8010d2c <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8010b8e:	4013      	ands	r3, r2
 8010b90:	623b      	str	r3, [r7, #32]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	001a      	movs	r2, r3
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	781b      	ldrb	r3, [r3, #0]
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	18d3      	adds	r3, r2, r3
 8010ba0:	6a3a      	ldr	r2, [r7, #32]
 8010ba2:	4963      	ldr	r1, [pc, #396]	; (8010d30 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 8010ba4:	430a      	orrs	r2, r1
 8010ba6:	601a      	str	r2, [r3, #0]
 8010ba8:	e0f3      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8010baa:	1dbb      	adds	r3, r7, #6
 8010bac:	881a      	ldrh	r2, [r3, #0]
 8010bae:	2380      	movs	r3, #128	; 0x80
 8010bb0:	01db      	lsls	r3, r3, #7
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	d115      	bne.n	8010be2 <HAL_PCD_EP_DB_Transmit+0x596>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	001a      	movs	r2, r3
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	18d3      	adds	r3, r2, r3
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a59      	ldr	r2, [pc, #356]	; (8010d2c <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8010bc8:	4013      	ands	r3, r2
 8010bca:	617b      	str	r3, [r7, #20]
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	001a      	movs	r2, r3
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	18d3      	adds	r3, r2, r3
 8010bda:	697a      	ldr	r2, [r7, #20]
 8010bdc:	4954      	ldr	r1, [pc, #336]	; (8010d30 <HAL_PCD_EP_DB_Transmit+0x6e4>)
 8010bde:	430a      	orrs	r2, r1
 8010be0:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	2224      	movs	r2, #36	; 0x24
 8010be6:	5c9b      	ldrb	r3, [r3, r2]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d000      	beq.n	8010bee <HAL_PCD_EP_DB_Transmit+0x5a2>
 8010bec:	e0d1      	b.n	8010d92 <HAL_PCD_EP_DB_Transmit+0x746>
      {
        ep->xfer_buff += TxPctSize;
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	695a      	ldr	r2, [r3, #20]
 8010bf2:	211e      	movs	r1, #30
 8010bf4:	187b      	adds	r3, r7, r1
 8010bf6:	881b      	ldrh	r3, [r3, #0]
 8010bf8:	18d2      	adds	r2, r2, r3
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	69da      	ldr	r2, [r3, #28]
 8010c02:	187b      	adds	r3, r7, r1
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	18d2      	adds	r2, r2, r3
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	6a1a      	ldr	r2, [r3, #32]
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d309      	bcc.n	8010c2c <HAL_PCD_EP_DB_Transmit+0x5e0>
        {
          len = ep->maxpacket;
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	691b      	ldr	r3, [r3, #16]
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db -= len;
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	6a1a      	ldr	r2, [r3, #32]
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	1ad2      	subs	r2, r2, r3
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	621a      	str	r2, [r3, #32]
 8010c2a:	e016      	b.n	8010c5a <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else if (ep->xfer_len_db == 0U)
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	6a1b      	ldr	r3, [r3, #32]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d108      	bne.n	8010c46 <HAL_PCD_EP_DB_Transmit+0x5fa>
        {
          len = TxPctSize;
 8010c34:	231e      	movs	r3, #30
 8010c36:	18fb      	adds	r3, r7, r3
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_fill_db = 0U;
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2224      	movs	r2, #36	; 0x24
 8010c40:	2100      	movs	r1, #0
 8010c42:	5499      	strb	r1, [r3, r2]
 8010c44:	e009      	b.n	8010c5a <HAL_PCD_EP_DB_Transmit+0x60e>
        }
        else
        {
          len = ep->xfer_len_db;
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	6a1b      	ldr	r3, [r3, #32]
 8010c4a:	627b      	str	r3, [r7, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2224      	movs	r2, #36	; 0x24
 8010c56:	2100      	movs	r1, #0
 8010c58:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	785b      	ldrb	r3, [r3, #1]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d168      	bne.n	8010d34 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	00db      	lsls	r3, r3, #3
 8010c68:	4a2f      	ldr	r2, [pc, #188]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010c6a:	4694      	mov	ip, r2
 8010c6c:	4463      	add	r3, ip
 8010c6e:	685a      	ldr	r2, [r3, #4]
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	00db      	lsls	r3, r3, #3
 8010c76:	492c      	ldr	r1, [pc, #176]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010c78:	468c      	mov	ip, r1
 8010c7a:	4463      	add	r3, ip
 8010c7c:	0192      	lsls	r2, r2, #6
 8010c7e:	0992      	lsrs	r2, r2, #6
 8010c80:	605a      	str	r2, [r3, #4]
 8010c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c84:	2b3e      	cmp	r3, #62	; 0x3e
 8010c86:	d91e      	bls.n	8010cc6 <HAL_PCD_EP_DB_Transmit+0x67a>
 8010c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c8a:	095b      	lsrs	r3, r3, #5
 8010c8c:	61bb      	str	r3, [r7, #24]
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	221f      	movs	r2, #31
 8010c92:	4013      	ands	r3, r2
 8010c94:	d102      	bne.n	8010c9c <HAL_PCD_EP_DB_Transmit+0x650>
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	61bb      	str	r3, [r7, #24]
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	4a21      	ldr	r2, [pc, #132]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010ca4:	4694      	mov	ip, r2
 8010ca6:	4463      	add	r3, ip
 8010ca8:	685a      	ldr	r2, [r3, #4]
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	069b      	lsls	r3, r3, #26
 8010cae:	431a      	orrs	r2, r3
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	00db      	lsls	r3, r3, #3
 8010cb6:	491c      	ldr	r1, [pc, #112]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010cb8:	468c      	mov	ip, r1
 8010cba:	4463      	add	r3, ip
 8010cbc:	2180      	movs	r1, #128	; 0x80
 8010cbe:	0609      	lsls	r1, r1, #24
 8010cc0:	430a      	orrs	r2, r1
 8010cc2:	605a      	str	r2, [r3, #4]
 8010cc4:	e05b      	b.n	8010d7e <HAL_PCD_EP_DB_Transmit+0x732>
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d111      	bne.n	8010cf0 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	4a15      	ldr	r2, [pc, #84]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010cd4:	4694      	mov	ip, r2
 8010cd6:	4463      	add	r3, ip
 8010cd8:	685a      	ldr	r2, [r3, #4]
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	00db      	lsls	r3, r3, #3
 8010ce0:	4911      	ldr	r1, [pc, #68]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010ce2:	468c      	mov	ip, r1
 8010ce4:	4463      	add	r3, ip
 8010ce6:	2180      	movs	r1, #128	; 0x80
 8010ce8:	0609      	lsls	r1, r1, #24
 8010cea:	430a      	orrs	r2, r1
 8010cec:	605a      	str	r2, [r3, #4]
 8010cee:	e046      	b.n	8010d7e <HAL_PCD_EP_DB_Transmit+0x732>
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf2:	085b      	lsrs	r3, r3, #1
 8010cf4:	61bb      	str	r3, [r7, #24]
 8010cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	4013      	ands	r3, r2
 8010cfc:	d002      	beq.n	8010d04 <HAL_PCD_EP_DB_Transmit+0x6b8>
 8010cfe:	69bb      	ldr	r3, [r7, #24]
 8010d00:	3301      	adds	r3, #1
 8010d02:	61bb      	str	r3, [r7, #24]
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	4a07      	ldr	r2, [pc, #28]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010d0c:	4694      	mov	ip, r2
 8010d0e:	4463      	add	r3, ip
 8010d10:	6859      	ldr	r1, [r3, #4]
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	069a      	lsls	r2, r3, #26
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	00db      	lsls	r3, r3, #3
 8010d1c:	4802      	ldr	r0, [pc, #8]	; (8010d28 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8010d1e:	4684      	mov	ip, r0
 8010d20:	4463      	add	r3, ip
 8010d22:	430a      	orrs	r2, r1
 8010d24:	605a      	str	r2, [r3, #4]
 8010d26:	e02a      	b.n	8010d7e <HAL_PCD_EP_DB_Transmit+0x732>
 8010d28:	40009800 	.word	0x40009800
 8010d2c:	07ff8f8f 	.word	0x07ff8f8f
 8010d30:	0000c080 	.word	0x0000c080
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	785b      	ldrb	r3, [r3, #1]
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d120      	bne.n	8010d7e <HAL_PCD_EP_DB_Transmit+0x732>
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	4a25      	ldr	r2, [pc, #148]	; (8010dd8 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8010d44:	4694      	mov	ip, r2
 8010d46:	4463      	add	r3, ip
 8010d48:	685a      	ldr	r2, [r3, #4]
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	00db      	lsls	r3, r3, #3
 8010d50:	4921      	ldr	r1, [pc, #132]	; (8010dd8 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8010d52:	468c      	mov	ip, r1
 8010d54:	4463      	add	r3, ip
 8010d56:	0412      	lsls	r2, r2, #16
 8010d58:	0c12      	lsrs	r2, r2, #16
 8010d5a:	605a      	str	r2, [r3, #4]
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	00db      	lsls	r3, r3, #3
 8010d62:	4a1d      	ldr	r2, [pc, #116]	; (8010dd8 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8010d64:	4694      	mov	ip, r2
 8010d66:	4463      	add	r3, ip
 8010d68:	6859      	ldr	r1, [r3, #4]
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6c:	041a      	lsls	r2, r3, #16
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	4818      	ldr	r0, [pc, #96]	; (8010dd8 <HAL_PCD_EP_DB_Transmit+0x78c>)
 8010d76:	4684      	mov	ip, r0
 8010d78:	4463      	add	r3, ip
 8010d7a:	430a      	orrs	r2, r1
 8010d7c:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6818      	ldr	r0, [r3, #0]
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	6959      	ldr	r1, [r3, #20]
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	895a      	ldrh	r2, [r3, #10]
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	f004 fec7 	bl	8015b20 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	001a      	movs	r2, r3
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	18d3      	adds	r3, r2, r3
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	4a0e      	ldr	r2, [pc, #56]	; (8010ddc <HAL_PCD_EP_DB_Transmit+0x790>)
 8010da4:	4013      	ands	r3, r2
 8010da6:	633b      	str	r3, [r7, #48]	; 0x30
 8010da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010daa:	2210      	movs	r2, #16
 8010dac:	4053      	eors	r3, r2
 8010dae:	633b      	str	r3, [r7, #48]	; 0x30
 8010db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db2:	2220      	movs	r2, #32
 8010db4:	4053      	eors	r3, r2
 8010db6:	633b      	str	r3, [r7, #48]	; 0x30
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	001a      	movs	r2, r3
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	18d3      	adds	r3, r2, r3
 8010dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc8:	4905      	ldr	r1, [pc, #20]	; (8010de0 <HAL_PCD_EP_DB_Transmit+0x794>)
 8010dca:	430a      	orrs	r2, r1
 8010dcc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010dce:	2300      	movs	r3, #0
}
 8010dd0:	0018      	movs	r0, r3
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	b00e      	add	sp, #56	; 0x38
 8010dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8010dd8:	40009800 	.word	0x40009800
 8010ddc:	07ff8fbf 	.word	0x07ff8fbf
 8010de0:	00008080 	.word	0x00008080

08010de4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b087      	sub	sp, #28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	0008      	movs	r0, r1
 8010dee:	0011      	movs	r1, r2
 8010df0:	607b      	str	r3, [r7, #4]
 8010df2:	240a      	movs	r4, #10
 8010df4:	193b      	adds	r3, r7, r4
 8010df6:	1c02      	adds	r2, r0, #0
 8010df8:	801a      	strh	r2, [r3, #0]
 8010dfa:	2308      	movs	r3, #8
 8010dfc:	18fb      	adds	r3, r7, r3
 8010dfe:	1c0a      	adds	r2, r1, #0
 8010e00:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8010e02:	0021      	movs	r1, r4
 8010e04:	187b      	adds	r3, r7, r1
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	2280      	movs	r2, #128	; 0x80
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00d      	beq.n	8010e2e <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010e12:	187b      	adds	r3, r7, r1
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	2207      	movs	r2, #7
 8010e18:	401a      	ands	r2, r3
 8010e1a:	0013      	movs	r3, r2
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	189b      	adds	r3, r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	3310      	adds	r3, #16
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	18d3      	adds	r3, r2, r3
 8010e28:	3304      	adds	r3, #4
 8010e2a:	617b      	str	r3, [r7, #20]
 8010e2c:	e00c      	b.n	8010e48 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010e2e:	230a      	movs	r3, #10
 8010e30:	18fb      	adds	r3, r7, r3
 8010e32:	881a      	ldrh	r2, [r3, #0]
 8010e34:	0013      	movs	r3, r2
 8010e36:	009b      	lsls	r3, r3, #2
 8010e38:	189b      	adds	r3, r3, r2
 8010e3a:	00db      	lsls	r3, r3, #3
 8010e3c:	3351      	adds	r3, #81	; 0x51
 8010e3e:	33ff      	adds	r3, #255	; 0xff
 8010e40:	68fa      	ldr	r2, [r7, #12]
 8010e42:	18d3      	adds	r3, r2, r3
 8010e44:	3304      	adds	r3, #4
 8010e46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8010e48:	2308      	movs	r3, #8
 8010e4a:	18fb      	adds	r3, r7, r3
 8010e4c:	881b      	ldrh	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d107      	bne.n	8010e62 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2200      	movs	r2, #0
 8010e56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	80da      	strh	r2, [r3, #6]
 8010e60:	e00b      	b.n	8010e7a <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	2201      	movs	r2, #1
 8010e66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	0c1b      	lsrs	r3, r3, #16
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	0018      	movs	r0, r3
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	b007      	add	sp, #28
 8010e82:	bd90      	pop	{r4, r7, pc}

08010e84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	23b5      	movs	r3, #181	; 0xb5
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	2101      	movs	r1, #1
 8010e9a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	23b3      	movs	r3, #179	; 0xb3
 8010ea0:	009b      	lsls	r3, r3, #2
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eaa:	2201      	movs	r2, #1
 8010eac:	431a      	orrs	r2, r3
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eb6:	2202      	movs	r2, #2
 8010eb8:	431a      	orrs	r2, r3
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8010ebe:	2300      	movs	r3, #0
}
 8010ec0:	0018      	movs	r0, r3
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	b004      	add	sp, #16
 8010ec6:	bd80      	pop	{r7, pc}

08010ec8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010ecc:	4b04      	ldr	r3, [pc, #16]	; (8010ee0 <HAL_PWREx_EnableVddUSB+0x18>)
 8010ece:	685a      	ldr	r2, [r3, #4]
 8010ed0:	4b03      	ldr	r3, [pc, #12]	; (8010ee0 <HAL_PWREx_EnableVddUSB+0x18>)
 8010ed2:	2180      	movs	r1, #128	; 0x80
 8010ed4:	00c9      	lsls	r1, r1, #3
 8010ed6:	430a      	orrs	r2, r1
 8010ed8:	605a      	str	r2, [r3, #4]
}
 8010eda:	46c0      	nop			; (mov r8, r8)
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	40007000 	.word	0x40007000

08010ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8010eec:	4b19      	ldr	r3, [pc, #100]	; (8010f54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4a19      	ldr	r2, [pc, #100]	; (8010f58 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8010ef2:	4013      	ands	r3, r2
 8010ef4:	0019      	movs	r1, r3
 8010ef6:	4b17      	ldr	r3, [pc, #92]	; (8010f54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	430a      	orrs	r2, r1
 8010efc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8010efe:	687a      	ldr	r2, [r7, #4]
 8010f00:	2380      	movs	r3, #128	; 0x80
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d11f      	bne.n	8010f48 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8010f08:	4b14      	ldr	r3, [pc, #80]	; (8010f5c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	0013      	movs	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	189b      	adds	r3, r3, r2
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	4912      	ldr	r1, [pc, #72]	; (8010f60 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8010f16:	0018      	movs	r0, r3
 8010f18:	f7f5 f97e 	bl	8006218 <__udivsi3>
 8010f1c:	0003      	movs	r3, r0
 8010f1e:	3301      	adds	r3, #1
 8010f20:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010f22:	e008      	b.n	8010f36 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d003      	beq.n	8010f32 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	e001      	b.n	8010f36 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8010f32:	2303      	movs	r3, #3
 8010f34:	e009      	b.n	8010f4a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010f36:	4b07      	ldr	r3, [pc, #28]	; (8010f54 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8010f38:	695a      	ldr	r2, [r3, #20]
 8010f3a:	2380      	movs	r3, #128	; 0x80
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	401a      	ands	r2, r3
 8010f40:	2380      	movs	r3, #128	; 0x80
 8010f42:	00db      	lsls	r3, r3, #3
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d0ed      	beq.n	8010f24 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	0018      	movs	r0, r3
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	b004      	add	sp, #16
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	46c0      	nop			; (mov r8, r8)
 8010f54:	40007000 	.word	0x40007000
 8010f58:	fffff9ff 	.word	0xfffff9ff
 8010f5c:	20000118 	.word	0x20000118
 8010f60:	000f4240 	.word	0x000f4240

08010f64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8010f68:	4b03      	ldr	r3, [pc, #12]	; (8010f78 <LL_RCC_GetAPB1Prescaler+0x14>)
 8010f6a:	689a      	ldr	r2, [r3, #8]
 8010f6c:	23e0      	movs	r3, #224	; 0xe0
 8010f6e:	01db      	lsls	r3, r3, #7
 8010f70:	4013      	ands	r3, r2
}
 8010f72:	0018      	movs	r0, r3
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	40021000 	.word	0x40021000

08010f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d102      	bne.n	8010f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	f000 fb50 	bl	8011630 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2201      	movs	r2, #1
 8010f96:	4013      	ands	r3, r2
 8010f98:	d100      	bne.n	8010f9c <HAL_RCC_OscConfig+0x20>
 8010f9a:	e07c      	b.n	8011096 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010f9c:	4bc3      	ldr	r3, [pc, #780]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	2238      	movs	r2, #56	; 0x38
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010fa6:	4bc1      	ldr	r3, [pc, #772]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	2203      	movs	r2, #3
 8010fac:	4013      	ands	r3, r2
 8010fae:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	2b10      	cmp	r3, #16
 8010fb4:	d102      	bne.n	8010fbc <HAL_RCC_OscConfig+0x40>
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	2b03      	cmp	r3, #3
 8010fba:	d002      	beq.n	8010fc2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	2b08      	cmp	r3, #8
 8010fc0:	d10b      	bne.n	8010fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010fc2:	4bba      	ldr	r3, [pc, #744]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	2380      	movs	r3, #128	; 0x80
 8010fc8:	029b      	lsls	r3, r3, #10
 8010fca:	4013      	ands	r3, r2
 8010fcc:	d062      	beq.n	8011094 <HAL_RCC_OscConfig+0x118>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d15e      	bne.n	8011094 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e32a      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	685a      	ldr	r2, [r3, #4]
 8010fde:	2380      	movs	r3, #128	; 0x80
 8010fe0:	025b      	lsls	r3, r3, #9
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d107      	bne.n	8010ff6 <HAL_RCC_OscConfig+0x7a>
 8010fe6:	4bb1      	ldr	r3, [pc, #708]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	4bb0      	ldr	r3, [pc, #704]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8010fec:	2180      	movs	r1, #128	; 0x80
 8010fee:	0249      	lsls	r1, r1, #9
 8010ff0:	430a      	orrs	r2, r1
 8010ff2:	601a      	str	r2, [r3, #0]
 8010ff4:	e020      	b.n	8011038 <HAL_RCC_OscConfig+0xbc>
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	685a      	ldr	r2, [r3, #4]
 8010ffa:	23a0      	movs	r3, #160	; 0xa0
 8010ffc:	02db      	lsls	r3, r3, #11
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d10e      	bne.n	8011020 <HAL_RCC_OscConfig+0xa4>
 8011002:	4baa      	ldr	r3, [pc, #680]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	4ba9      	ldr	r3, [pc, #676]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011008:	2180      	movs	r1, #128	; 0x80
 801100a:	02c9      	lsls	r1, r1, #11
 801100c:	430a      	orrs	r2, r1
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	4ba6      	ldr	r3, [pc, #664]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	4ba5      	ldr	r3, [pc, #660]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011016:	2180      	movs	r1, #128	; 0x80
 8011018:	0249      	lsls	r1, r1, #9
 801101a:	430a      	orrs	r2, r1
 801101c:	601a      	str	r2, [r3, #0]
 801101e:	e00b      	b.n	8011038 <HAL_RCC_OscConfig+0xbc>
 8011020:	4ba2      	ldr	r3, [pc, #648]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	4ba1      	ldr	r3, [pc, #644]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011026:	49a2      	ldr	r1, [pc, #648]	; (80112b0 <HAL_RCC_OscConfig+0x334>)
 8011028:	400a      	ands	r2, r1
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	4b9f      	ldr	r3, [pc, #636]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	4b9e      	ldr	r3, [pc, #632]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011032:	49a0      	ldr	r1, [pc, #640]	; (80112b4 <HAL_RCC_OscConfig+0x338>)
 8011034:	400a      	ands	r2, r1
 8011036:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d014      	beq.n	801106a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011040:	f7fb fb2a 	bl	800c698 <HAL_GetTick>
 8011044:	0003      	movs	r3, r0
 8011046:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8011048:	e008      	b.n	801105c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801104a:	f7fb fb25 	bl	800c698 <HAL_GetTick>
 801104e:	0002      	movs	r2, r0
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	2b64      	cmp	r3, #100	; 0x64
 8011056:	d901      	bls.n	801105c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8011058:	2303      	movs	r3, #3
 801105a:	e2e9      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801105c:	4b93      	ldr	r3, [pc, #588]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	2380      	movs	r3, #128	; 0x80
 8011062:	029b      	lsls	r3, r3, #10
 8011064:	4013      	ands	r3, r2
 8011066:	d0f0      	beq.n	801104a <HAL_RCC_OscConfig+0xce>
 8011068:	e015      	b.n	8011096 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801106a:	f7fb fb15 	bl	800c698 <HAL_GetTick>
 801106e:	0003      	movs	r3, r0
 8011070:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011072:	e008      	b.n	8011086 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011074:	f7fb fb10 	bl	800c698 <HAL_GetTick>
 8011078:	0002      	movs	r2, r0
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	1ad3      	subs	r3, r2, r3
 801107e:	2b64      	cmp	r3, #100	; 0x64
 8011080:	d901      	bls.n	8011086 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8011082:	2303      	movs	r3, #3
 8011084:	e2d4      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8011086:	4b89      	ldr	r3, [pc, #548]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	2380      	movs	r3, #128	; 0x80
 801108c:	029b      	lsls	r3, r3, #10
 801108e:	4013      	ands	r3, r2
 8011090:	d1f0      	bne.n	8011074 <HAL_RCC_OscConfig+0xf8>
 8011092:	e000      	b.n	8011096 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011094:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2202      	movs	r2, #2
 801109c:	4013      	ands	r3, r2
 801109e:	d100      	bne.n	80110a2 <HAL_RCC_OscConfig+0x126>
 80110a0:	e099      	b.n	80111d6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80110a2:	4b82      	ldr	r3, [pc, #520]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	2238      	movs	r2, #56	; 0x38
 80110a8:	4013      	ands	r3, r2
 80110aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80110ac:	4b7f      	ldr	r3, [pc, #508]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	2203      	movs	r2, #3
 80110b2:	4013      	ands	r3, r2
 80110b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	2b10      	cmp	r3, #16
 80110ba:	d102      	bne.n	80110c2 <HAL_RCC_OscConfig+0x146>
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	d002      	beq.n	80110c8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d135      	bne.n	8011134 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80110c8:	4b78      	ldr	r3, [pc, #480]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	2380      	movs	r3, #128	; 0x80
 80110ce:	00db      	lsls	r3, r3, #3
 80110d0:	4013      	ands	r3, r2
 80110d2:	d005      	beq.n	80110e0 <HAL_RCC_OscConfig+0x164>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d101      	bne.n	80110e0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80110dc:	2301      	movs	r3, #1
 80110de:	e2a7      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80110e0:	4b72      	ldr	r3, [pc, #456]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	4a74      	ldr	r2, [pc, #464]	; (80112b8 <HAL_RCC_OscConfig+0x33c>)
 80110e6:	4013      	ands	r3, r2
 80110e8:	0019      	movs	r1, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	695b      	ldr	r3, [r3, #20]
 80110ee:	021a      	lsls	r2, r3, #8
 80110f0:	4b6e      	ldr	r3, [pc, #440]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110f2:	430a      	orrs	r2, r1
 80110f4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d112      	bne.n	8011122 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80110fc:	4b6b      	ldr	r3, [pc, #428]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a6e      	ldr	r2, [pc, #440]	; (80112bc <HAL_RCC_OscConfig+0x340>)
 8011102:	4013      	ands	r3, r2
 8011104:	0019      	movs	r1, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	691a      	ldr	r2, [r3, #16]
 801110a:	4b68      	ldr	r3, [pc, #416]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801110c:	430a      	orrs	r2, r1
 801110e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8011110:	4b66      	ldr	r3, [pc, #408]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	0adb      	lsrs	r3, r3, #11
 8011116:	2207      	movs	r2, #7
 8011118:	4013      	ands	r3, r2
 801111a:	4a69      	ldr	r2, [pc, #420]	; (80112c0 <HAL_RCC_OscConfig+0x344>)
 801111c:	40da      	lsrs	r2, r3
 801111e:	4b69      	ldr	r3, [pc, #420]	; (80112c4 <HAL_RCC_OscConfig+0x348>)
 8011120:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8011122:	4b69      	ldr	r3, [pc, #420]	; (80112c8 <HAL_RCC_OscConfig+0x34c>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	0018      	movs	r0, r3
 8011128:	f7fb f814 	bl	800c154 <HAL_InitTick>
 801112c:	1e03      	subs	r3, r0, #0
 801112e:	d051      	beq.n	80111d4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8011130:	2301      	movs	r3, #1
 8011132:	e27d      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d030      	beq.n	801119e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 801113c:	4b5b      	ldr	r3, [pc, #364]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a5e      	ldr	r2, [pc, #376]	; (80112bc <HAL_RCC_OscConfig+0x340>)
 8011142:	4013      	ands	r3, r2
 8011144:	0019      	movs	r1, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	691a      	ldr	r2, [r3, #16]
 801114a:	4b58      	ldr	r3, [pc, #352]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801114c:	430a      	orrs	r2, r1
 801114e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8011150:	4b56      	ldr	r3, [pc, #344]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011152:	681a      	ldr	r2, [r3, #0]
 8011154:	4b55      	ldr	r3, [pc, #340]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011156:	2180      	movs	r1, #128	; 0x80
 8011158:	0049      	lsls	r1, r1, #1
 801115a:	430a      	orrs	r2, r1
 801115c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801115e:	f7fb fa9b 	bl	800c698 <HAL_GetTick>
 8011162:	0003      	movs	r3, r0
 8011164:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011166:	e008      	b.n	801117a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011168:	f7fb fa96 	bl	800c698 <HAL_GetTick>
 801116c:	0002      	movs	r2, r0
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	2b02      	cmp	r3, #2
 8011174:	d901      	bls.n	801117a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8011176:	2303      	movs	r3, #3
 8011178:	e25a      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801117a:	4b4c      	ldr	r3, [pc, #304]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	2380      	movs	r3, #128	; 0x80
 8011180:	00db      	lsls	r3, r3, #3
 8011182:	4013      	ands	r3, r2
 8011184:	d0f0      	beq.n	8011168 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011186:	4b49      	ldr	r3, [pc, #292]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	4a4b      	ldr	r2, [pc, #300]	; (80112b8 <HAL_RCC_OscConfig+0x33c>)
 801118c:	4013      	ands	r3, r2
 801118e:	0019      	movs	r1, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	695b      	ldr	r3, [r3, #20]
 8011194:	021a      	lsls	r2, r3, #8
 8011196:	4b45      	ldr	r3, [pc, #276]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011198:	430a      	orrs	r2, r1
 801119a:	605a      	str	r2, [r3, #4]
 801119c:	e01b      	b.n	80111d6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 801119e:	4b43      	ldr	r3, [pc, #268]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	4b42      	ldr	r3, [pc, #264]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80111a4:	4949      	ldr	r1, [pc, #292]	; (80112cc <HAL_RCC_OscConfig+0x350>)
 80111a6:	400a      	ands	r2, r1
 80111a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80111aa:	f7fb fa75 	bl	800c698 <HAL_GetTick>
 80111ae:	0003      	movs	r3, r0
 80111b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80111b2:	e008      	b.n	80111c6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80111b4:	f7fb fa70 	bl	800c698 <HAL_GetTick>
 80111b8:	0002      	movs	r2, r0
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b02      	cmp	r3, #2
 80111c0:	d901      	bls.n	80111c6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80111c2:	2303      	movs	r3, #3
 80111c4:	e234      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80111c6:	4b39      	ldr	r3, [pc, #228]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80111c8:	681a      	ldr	r2, [r3, #0]
 80111ca:	2380      	movs	r3, #128	; 0x80
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	4013      	ands	r3, r2
 80111d0:	d1f0      	bne.n	80111b4 <HAL_RCC_OscConfig+0x238>
 80111d2:	e000      	b.n	80111d6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80111d4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2208      	movs	r2, #8
 80111dc:	4013      	ands	r3, r2
 80111de:	d047      	beq.n	8011270 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80111e0:	4b32      	ldr	r3, [pc, #200]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	2238      	movs	r2, #56	; 0x38
 80111e6:	4013      	ands	r3, r2
 80111e8:	2b18      	cmp	r3, #24
 80111ea:	d10a      	bne.n	8011202 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80111ec:	4b2f      	ldr	r3, [pc, #188]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 80111ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80111f0:	2202      	movs	r2, #2
 80111f2:	4013      	ands	r3, r2
 80111f4:	d03c      	beq.n	8011270 <HAL_RCC_OscConfig+0x2f4>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	699b      	ldr	r3, [r3, #24]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d138      	bne.n	8011270 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	e216      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	699b      	ldr	r3, [r3, #24]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d019      	beq.n	801123e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 801120a:	4b28      	ldr	r3, [pc, #160]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 801120c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801120e:	4b27      	ldr	r3, [pc, #156]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011210:	2101      	movs	r1, #1
 8011212:	430a      	orrs	r2, r1
 8011214:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011216:	f7fb fa3f 	bl	800c698 <HAL_GetTick>
 801121a:	0003      	movs	r3, r0
 801121c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801121e:	e008      	b.n	8011232 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011220:	f7fb fa3a 	bl	800c698 <HAL_GetTick>
 8011224:	0002      	movs	r2, r0
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	1ad3      	subs	r3, r2, r3
 801122a:	2b02      	cmp	r3, #2
 801122c:	d901      	bls.n	8011232 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 801122e:	2303      	movs	r3, #3
 8011230:	e1fe      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8011232:	4b1e      	ldr	r3, [pc, #120]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011236:	2202      	movs	r2, #2
 8011238:	4013      	ands	r3, r2
 801123a:	d0f1      	beq.n	8011220 <HAL_RCC_OscConfig+0x2a4>
 801123c:	e018      	b.n	8011270 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 801123e:	4b1b      	ldr	r3, [pc, #108]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011240:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8011242:	4b1a      	ldr	r3, [pc, #104]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011244:	2101      	movs	r1, #1
 8011246:	438a      	bics	r2, r1
 8011248:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801124a:	f7fb fa25 	bl	800c698 <HAL_GetTick>
 801124e:	0003      	movs	r3, r0
 8011250:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011252:	e008      	b.n	8011266 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011254:	f7fb fa20 	bl	800c698 <HAL_GetTick>
 8011258:	0002      	movs	r2, r0
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	1ad3      	subs	r3, r2, r3
 801125e:	2b02      	cmp	r3, #2
 8011260:	d901      	bls.n	8011266 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8011262:	2303      	movs	r3, #3
 8011264:	e1e4      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8011266:	4b11      	ldr	r3, [pc, #68]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801126a:	2202      	movs	r2, #2
 801126c:	4013      	ands	r3, r2
 801126e:	d1f1      	bne.n	8011254 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2204      	movs	r2, #4
 8011276:	4013      	ands	r3, r2
 8011278:	d100      	bne.n	801127c <HAL_RCC_OscConfig+0x300>
 801127a:	e0c7      	b.n	801140c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 801127c:	231f      	movs	r3, #31
 801127e:	18fb      	adds	r3, r7, r3
 8011280:	2200      	movs	r2, #0
 8011282:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8011284:	4b09      	ldr	r3, [pc, #36]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011286:	689b      	ldr	r3, [r3, #8]
 8011288:	2238      	movs	r2, #56	; 0x38
 801128a:	4013      	ands	r3, r2
 801128c:	2b20      	cmp	r3, #32
 801128e:	d11f      	bne.n	80112d0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8011290:	4b06      	ldr	r3, [pc, #24]	; (80112ac <HAL_RCC_OscConfig+0x330>)
 8011292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011294:	2202      	movs	r2, #2
 8011296:	4013      	ands	r3, r2
 8011298:	d100      	bne.n	801129c <HAL_RCC_OscConfig+0x320>
 801129a:	e0b7      	b.n	801140c <HAL_RCC_OscConfig+0x490>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d000      	beq.n	80112a6 <HAL_RCC_OscConfig+0x32a>
 80112a4:	e0b2      	b.n	801140c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	e1c2      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
 80112aa:	46c0      	nop			; (mov r8, r8)
 80112ac:	40021000 	.word	0x40021000
 80112b0:	fffeffff 	.word	0xfffeffff
 80112b4:	fffbffff 	.word	0xfffbffff
 80112b8:	ffff80ff 	.word	0xffff80ff
 80112bc:	ffffc7ff 	.word	0xffffc7ff
 80112c0:	00f42400 	.word	0x00f42400
 80112c4:	20000118 	.word	0x20000118
 80112c8:	2000011c 	.word	0x2000011c
 80112cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80112d0:	4bb5      	ldr	r3, [pc, #724]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80112d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112d4:	2380      	movs	r3, #128	; 0x80
 80112d6:	055b      	lsls	r3, r3, #21
 80112d8:	4013      	ands	r3, r2
 80112da:	d101      	bne.n	80112e0 <HAL_RCC_OscConfig+0x364>
 80112dc:	2301      	movs	r3, #1
 80112de:	e000      	b.n	80112e2 <HAL_RCC_OscConfig+0x366>
 80112e0:	2300      	movs	r3, #0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d011      	beq.n	801130a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80112e6:	4bb0      	ldr	r3, [pc, #704]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80112e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112ea:	4baf      	ldr	r3, [pc, #700]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80112ec:	2180      	movs	r1, #128	; 0x80
 80112ee:	0549      	lsls	r1, r1, #21
 80112f0:	430a      	orrs	r2, r1
 80112f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80112f4:	4bac      	ldr	r3, [pc, #688]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80112f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112f8:	2380      	movs	r3, #128	; 0x80
 80112fa:	055b      	lsls	r3, r3, #21
 80112fc:	4013      	ands	r3, r2
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8011302:	231f      	movs	r3, #31
 8011304:	18fb      	adds	r3, r7, r3
 8011306:	2201      	movs	r2, #1
 8011308:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801130a:	4ba8      	ldr	r3, [pc, #672]	; (80115ac <HAL_RCC_OscConfig+0x630>)
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	2380      	movs	r3, #128	; 0x80
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	4013      	ands	r3, r2
 8011314:	d11a      	bne.n	801134c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011316:	4ba5      	ldr	r3, [pc, #660]	; (80115ac <HAL_RCC_OscConfig+0x630>)
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	4ba4      	ldr	r3, [pc, #656]	; (80115ac <HAL_RCC_OscConfig+0x630>)
 801131c:	2180      	movs	r1, #128	; 0x80
 801131e:	0049      	lsls	r1, r1, #1
 8011320:	430a      	orrs	r2, r1
 8011322:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8011324:	f7fb f9b8 	bl	800c698 <HAL_GetTick>
 8011328:	0003      	movs	r3, r0
 801132a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801132c:	e008      	b.n	8011340 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801132e:	f7fb f9b3 	bl	800c698 <HAL_GetTick>
 8011332:	0002      	movs	r2, r0
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	2b02      	cmp	r3, #2
 801133a:	d901      	bls.n	8011340 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 801133c:	2303      	movs	r3, #3
 801133e:	e177      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8011340:	4b9a      	ldr	r3, [pc, #616]	; (80115ac <HAL_RCC_OscConfig+0x630>)
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	2380      	movs	r3, #128	; 0x80
 8011346:	005b      	lsls	r3, r3, #1
 8011348:	4013      	ands	r3, r2
 801134a:	d0f0      	beq.n	801132e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	689b      	ldr	r3, [r3, #8]
 8011350:	2b01      	cmp	r3, #1
 8011352:	d106      	bne.n	8011362 <HAL_RCC_OscConfig+0x3e6>
 8011354:	4b94      	ldr	r3, [pc, #592]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011356:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011358:	4b93      	ldr	r3, [pc, #588]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801135a:	2101      	movs	r1, #1
 801135c:	430a      	orrs	r2, r1
 801135e:	65da      	str	r2, [r3, #92]	; 0x5c
 8011360:	e01c      	b.n	801139c <HAL_RCC_OscConfig+0x420>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	689b      	ldr	r3, [r3, #8]
 8011366:	2b05      	cmp	r3, #5
 8011368:	d10c      	bne.n	8011384 <HAL_RCC_OscConfig+0x408>
 801136a:	4b8f      	ldr	r3, [pc, #572]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801136c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801136e:	4b8e      	ldr	r3, [pc, #568]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011370:	2104      	movs	r1, #4
 8011372:	430a      	orrs	r2, r1
 8011374:	65da      	str	r2, [r3, #92]	; 0x5c
 8011376:	4b8c      	ldr	r3, [pc, #560]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801137a:	4b8b      	ldr	r3, [pc, #556]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801137c:	2101      	movs	r1, #1
 801137e:	430a      	orrs	r2, r1
 8011380:	65da      	str	r2, [r3, #92]	; 0x5c
 8011382:	e00b      	b.n	801139c <HAL_RCC_OscConfig+0x420>
 8011384:	4b88      	ldr	r3, [pc, #544]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011386:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011388:	4b87      	ldr	r3, [pc, #540]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801138a:	2101      	movs	r1, #1
 801138c:	438a      	bics	r2, r1
 801138e:	65da      	str	r2, [r3, #92]	; 0x5c
 8011390:	4b85      	ldr	r3, [pc, #532]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011394:	4b84      	ldr	r3, [pc, #528]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011396:	2104      	movs	r1, #4
 8011398:	438a      	bics	r2, r1
 801139a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d014      	beq.n	80113ce <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113a4:	f7fb f978 	bl	800c698 <HAL_GetTick>
 80113a8:	0003      	movs	r3, r0
 80113aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80113ac:	e009      	b.n	80113c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80113ae:	f7fb f973 	bl	800c698 <HAL_GetTick>
 80113b2:	0002      	movs	r2, r0
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	4a7d      	ldr	r2, [pc, #500]	; (80115b0 <HAL_RCC_OscConfig+0x634>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d901      	bls.n	80113c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80113be:	2303      	movs	r3, #3
 80113c0:	e136      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80113c2:	4b79      	ldr	r3, [pc, #484]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80113c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113c6:	2202      	movs	r2, #2
 80113c8:	4013      	ands	r3, r2
 80113ca:	d0f0      	beq.n	80113ae <HAL_RCC_OscConfig+0x432>
 80113cc:	e013      	b.n	80113f6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113ce:	f7fb f963 	bl	800c698 <HAL_GetTick>
 80113d2:	0003      	movs	r3, r0
 80113d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80113d6:	e009      	b.n	80113ec <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80113d8:	f7fb f95e 	bl	800c698 <HAL_GetTick>
 80113dc:	0002      	movs	r2, r0
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	1ad3      	subs	r3, r2, r3
 80113e2:	4a73      	ldr	r2, [pc, #460]	; (80115b0 <HAL_RCC_OscConfig+0x634>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d901      	bls.n	80113ec <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80113e8:	2303      	movs	r3, #3
 80113ea:	e121      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80113ec:	4b6e      	ldr	r3, [pc, #440]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80113ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113f0:	2202      	movs	r2, #2
 80113f2:	4013      	ands	r3, r2
 80113f4:	d1f0      	bne.n	80113d8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80113f6:	231f      	movs	r3, #31
 80113f8:	18fb      	adds	r3, r7, r3
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d105      	bne.n	801140c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8011400:	4b69      	ldr	r3, [pc, #420]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011404:	4b68      	ldr	r3, [pc, #416]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011406:	496b      	ldr	r1, [pc, #428]	; (80115b4 <HAL_RCC_OscConfig+0x638>)
 8011408:	400a      	ands	r2, r1
 801140a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2220      	movs	r2, #32
 8011412:	4013      	ands	r3, r2
 8011414:	d039      	beq.n	801148a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	69db      	ldr	r3, [r3, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d01b      	beq.n	8011456 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801141e:	4b62      	ldr	r3, [pc, #392]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011420:	681a      	ldr	r2, [r3, #0]
 8011422:	4b61      	ldr	r3, [pc, #388]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011424:	2180      	movs	r1, #128	; 0x80
 8011426:	03c9      	lsls	r1, r1, #15
 8011428:	430a      	orrs	r2, r1
 801142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801142c:	f7fb f934 	bl	800c698 <HAL_GetTick>
 8011430:	0003      	movs	r3, r0
 8011432:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8011434:	e008      	b.n	8011448 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011436:	f7fb f92f 	bl	800c698 <HAL_GetTick>
 801143a:	0002      	movs	r2, r0
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	1ad3      	subs	r3, r2, r3
 8011440:	2b02      	cmp	r3, #2
 8011442:	d901      	bls.n	8011448 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8011444:	2303      	movs	r3, #3
 8011446:	e0f3      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8011448:	4b57      	ldr	r3, [pc, #348]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	041b      	lsls	r3, r3, #16
 8011450:	4013      	ands	r3, r2
 8011452:	d0f0      	beq.n	8011436 <HAL_RCC_OscConfig+0x4ba>
 8011454:	e019      	b.n	801148a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011456:	4b54      	ldr	r3, [pc, #336]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	4b53      	ldr	r3, [pc, #332]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801145c:	4956      	ldr	r1, [pc, #344]	; (80115b8 <HAL_RCC_OscConfig+0x63c>)
 801145e:	400a      	ands	r2, r1
 8011460:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011462:	f7fb f919 	bl	800c698 <HAL_GetTick>
 8011466:	0003      	movs	r3, r0
 8011468:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801146a:	e008      	b.n	801147e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801146c:	f7fb f914 	bl	800c698 <HAL_GetTick>
 8011470:	0002      	movs	r2, r0
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	1ad3      	subs	r3, r2, r3
 8011476:	2b02      	cmp	r3, #2
 8011478:	d901      	bls.n	801147e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 801147a:	2303      	movs	r3, #3
 801147c:	e0d8      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801147e:	4b4a      	ldr	r3, [pc, #296]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	2380      	movs	r3, #128	; 0x80
 8011484:	041b      	lsls	r3, r3, #16
 8011486:	4013      	ands	r3, r2
 8011488:	d1f0      	bne.n	801146c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a1b      	ldr	r3, [r3, #32]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d100      	bne.n	8011494 <HAL_RCC_OscConfig+0x518>
 8011492:	e0cc      	b.n	801162e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011494:	4b44      	ldr	r3, [pc, #272]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011496:	689b      	ldr	r3, [r3, #8]
 8011498:	2238      	movs	r2, #56	; 0x38
 801149a:	4013      	ands	r3, r2
 801149c:	2b10      	cmp	r3, #16
 801149e:	d100      	bne.n	80114a2 <HAL_RCC_OscConfig+0x526>
 80114a0:	e07b      	b.n	801159a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a1b      	ldr	r3, [r3, #32]
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	d156      	bne.n	8011558 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114aa:	4b3f      	ldr	r3, [pc, #252]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	4b3e      	ldr	r3, [pc, #248]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80114b0:	4942      	ldr	r1, [pc, #264]	; (80115bc <HAL_RCC_OscConfig+0x640>)
 80114b2:	400a      	ands	r2, r1
 80114b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114b6:	f7fb f8ef 	bl	800c698 <HAL_GetTick>
 80114ba:	0003      	movs	r3, r0
 80114bc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80114be:	e008      	b.n	80114d2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80114c0:	f7fb f8ea 	bl	800c698 <HAL_GetTick>
 80114c4:	0002      	movs	r2, r0
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d901      	bls.n	80114d2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80114ce:	2303      	movs	r3, #3
 80114d0:	e0ae      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80114d2:	4b35      	ldr	r3, [pc, #212]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	2380      	movs	r3, #128	; 0x80
 80114d8:	049b      	lsls	r3, r3, #18
 80114da:	4013      	ands	r3, r2
 80114dc:	d1f0      	bne.n	80114c0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80114de:	4b32      	ldr	r3, [pc, #200]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	4a37      	ldr	r2, [pc, #220]	; (80115c0 <HAL_RCC_OscConfig+0x644>)
 80114e4:	4013      	ands	r3, r2
 80114e6:	0019      	movs	r1, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f0:	431a      	orrs	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f6:	021b      	lsls	r3, r3, #8
 80114f8:	431a      	orrs	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114fe:	431a      	orrs	r2, r3
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011504:	431a      	orrs	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801150a:	431a      	orrs	r2, r3
 801150c:	4b26      	ldr	r3, [pc, #152]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801150e:	430a      	orrs	r2, r1
 8011510:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011512:	4b25      	ldr	r3, [pc, #148]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011518:	2180      	movs	r1, #128	; 0x80
 801151a:	0449      	lsls	r1, r1, #17
 801151c:	430a      	orrs	r2, r1
 801151e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8011520:	4b21      	ldr	r3, [pc, #132]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011522:	68da      	ldr	r2, [r3, #12]
 8011524:	4b20      	ldr	r3, [pc, #128]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011526:	2180      	movs	r1, #128	; 0x80
 8011528:	0549      	lsls	r1, r1, #21
 801152a:	430a      	orrs	r2, r1
 801152c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801152e:	f7fb f8b3 	bl	800c698 <HAL_GetTick>
 8011532:	0003      	movs	r3, r0
 8011534:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8011536:	e008      	b.n	801154a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011538:	f7fb f8ae 	bl	800c698 <HAL_GetTick>
 801153c:	0002      	movs	r2, r0
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	1ad3      	subs	r3, r2, r3
 8011542:	2b02      	cmp	r3, #2
 8011544:	d901      	bls.n	801154a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8011546:	2303      	movs	r3, #3
 8011548:	e072      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801154a:	4b17      	ldr	r3, [pc, #92]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	2380      	movs	r3, #128	; 0x80
 8011550:	049b      	lsls	r3, r3, #18
 8011552:	4013      	ands	r3, r2
 8011554:	d0f0      	beq.n	8011538 <HAL_RCC_OscConfig+0x5bc>
 8011556:	e06a      	b.n	801162e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011558:	4b13      	ldr	r3, [pc, #76]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801155e:	4917      	ldr	r1, [pc, #92]	; (80115bc <HAL_RCC_OscConfig+0x640>)
 8011560:	400a      	ands	r2, r1
 8011562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011564:	f7fb f898 	bl	800c698 <HAL_GetTick>
 8011568:	0003      	movs	r3, r0
 801156a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801156c:	e008      	b.n	8011580 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801156e:	f7fb f893 	bl	800c698 <HAL_GetTick>
 8011572:	0002      	movs	r2, r0
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	2b02      	cmp	r3, #2
 801157a:	d901      	bls.n	8011580 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 801157c:	2303      	movs	r3, #3
 801157e:	e057      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8011580:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	2380      	movs	r3, #128	; 0x80
 8011586:	049b      	lsls	r3, r3, #18
 8011588:	4013      	ands	r3, r2
 801158a:	d1f0      	bne.n	801156e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 801158c:	4b06      	ldr	r3, [pc, #24]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 801158e:	68da      	ldr	r2, [r3, #12]
 8011590:	4b05      	ldr	r3, [pc, #20]	; (80115a8 <HAL_RCC_OscConfig+0x62c>)
 8011592:	490c      	ldr	r1, [pc, #48]	; (80115c4 <HAL_RCC_OscConfig+0x648>)
 8011594:	400a      	ands	r2, r1
 8011596:	60da      	str	r2, [r3, #12]
 8011598:	e049      	b.n	801162e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6a1b      	ldr	r3, [r3, #32]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	d112      	bne.n	80115c8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80115a2:	2301      	movs	r3, #1
 80115a4:	e044      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
 80115a6:	46c0      	nop			; (mov r8, r8)
 80115a8:	40021000 	.word	0x40021000
 80115ac:	40007000 	.word	0x40007000
 80115b0:	00001388 	.word	0x00001388
 80115b4:	efffffff 	.word	0xefffffff
 80115b8:	ffbfffff 	.word	0xffbfffff
 80115bc:	feffffff 	.word	0xfeffffff
 80115c0:	11c1808c 	.word	0x11c1808c
 80115c4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80115c8:	4b1b      	ldr	r3, [pc, #108]	; (8011638 <HAL_RCC_OscConfig+0x6bc>)
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2203      	movs	r2, #3
 80115d2:	401a      	ands	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d8:	429a      	cmp	r2, r3
 80115da:	d126      	bne.n	801162a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2270      	movs	r2, #112	; 0x70
 80115e0:	401a      	ands	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d11f      	bne.n	801162a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80115ea:	697a      	ldr	r2, [r7, #20]
 80115ec:	23fe      	movs	r3, #254	; 0xfe
 80115ee:	01db      	lsls	r3, r3, #7
 80115f0:	401a      	ands	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d116      	bne.n	801162a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80115fc:	697a      	ldr	r2, [r7, #20]
 80115fe:	23f8      	movs	r3, #248	; 0xf8
 8011600:	039b      	lsls	r3, r3, #14
 8011602:	401a      	ands	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8011608:	429a      	cmp	r2, r3
 801160a:	d10e      	bne.n	801162a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801160c:	697a      	ldr	r2, [r7, #20]
 801160e:	23e0      	movs	r3, #224	; 0xe0
 8011610:	051b      	lsls	r3, r3, #20
 8011612:	401a      	ands	r2, r3
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011618:	429a      	cmp	r2, r3
 801161a:	d106      	bne.n	801162a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	0f5b      	lsrs	r3, r3, #29
 8011620:	075a      	lsls	r2, r3, #29
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8011626:	429a      	cmp	r2, r3
 8011628:	d001      	beq.n	801162e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 801162e:	2300      	movs	r3, #0
}
 8011630:	0018      	movs	r0, r3
 8011632:	46bd      	mov	sp, r7
 8011634:	b008      	add	sp, #32
 8011636:	bd80      	pop	{r7, pc}
 8011638:	40021000 	.word	0x40021000

0801163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801164c:	2301      	movs	r3, #1
 801164e:	e0e9      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011650:	4b76      	ldr	r3, [pc, #472]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2207      	movs	r2, #7
 8011656:	4013      	ands	r3, r2
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	429a      	cmp	r2, r3
 801165c:	d91e      	bls.n	801169c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801165e:	4b73      	ldr	r3, [pc, #460]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2207      	movs	r2, #7
 8011664:	4393      	bics	r3, r2
 8011666:	0019      	movs	r1, r3
 8011668:	4b70      	ldr	r3, [pc, #448]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 801166a:	683a      	ldr	r2, [r7, #0]
 801166c:	430a      	orrs	r2, r1
 801166e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011670:	f7fb f812 	bl	800c698 <HAL_GetTick>
 8011674:	0003      	movs	r3, r0
 8011676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011678:	e009      	b.n	801168e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801167a:	f7fb f80d 	bl	800c698 <HAL_GetTick>
 801167e:	0002      	movs	r2, r0
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	4a6a      	ldr	r2, [pc, #424]	; (8011830 <HAL_RCC_ClockConfig+0x1f4>)
 8011686:	4293      	cmp	r3, r2
 8011688:	d901      	bls.n	801168e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801168a:	2303      	movs	r3, #3
 801168c:	e0ca      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801168e:	4b67      	ldr	r3, [pc, #412]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	2207      	movs	r2, #7
 8011694:	4013      	ands	r3, r2
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	429a      	cmp	r2, r3
 801169a:	d1ee      	bne.n	801167a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2202      	movs	r2, #2
 80116a2:	4013      	ands	r3, r2
 80116a4:	d015      	beq.n	80116d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2204      	movs	r2, #4
 80116ac:	4013      	ands	r3, r2
 80116ae:	d006      	beq.n	80116be <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80116b0:	4b60      	ldr	r3, [pc, #384]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116b2:	689a      	ldr	r2, [r3, #8]
 80116b4:	4b5f      	ldr	r3, [pc, #380]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116b6:	21e0      	movs	r1, #224	; 0xe0
 80116b8:	01c9      	lsls	r1, r1, #7
 80116ba:	430a      	orrs	r2, r1
 80116bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80116be:	4b5d      	ldr	r3, [pc, #372]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	4a5d      	ldr	r2, [pc, #372]	; (8011838 <HAL_RCC_ClockConfig+0x1fc>)
 80116c4:	4013      	ands	r3, r2
 80116c6:	0019      	movs	r1, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	689a      	ldr	r2, [r3, #8]
 80116cc:	4b59      	ldr	r3, [pc, #356]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116ce:	430a      	orrs	r2, r1
 80116d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	2201      	movs	r2, #1
 80116d8:	4013      	ands	r3, r2
 80116da:	d057      	beq.n	801178c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	2b01      	cmp	r3, #1
 80116e2:	d107      	bne.n	80116f4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80116e4:	4b53      	ldr	r3, [pc, #332]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116e6:	681a      	ldr	r2, [r3, #0]
 80116e8:	2380      	movs	r3, #128	; 0x80
 80116ea:	029b      	lsls	r3, r3, #10
 80116ec:	4013      	ands	r3, r2
 80116ee:	d12b      	bne.n	8011748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80116f0:	2301      	movs	r3, #1
 80116f2:	e097      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	2b02      	cmp	r3, #2
 80116fa:	d107      	bne.n	801170c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80116fc:	4b4d      	ldr	r3, [pc, #308]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80116fe:	681a      	ldr	r2, [r3, #0]
 8011700:	2380      	movs	r3, #128	; 0x80
 8011702:	049b      	lsls	r3, r3, #18
 8011704:	4013      	ands	r3, r2
 8011706:	d11f      	bne.n	8011748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011708:	2301      	movs	r3, #1
 801170a:	e08b      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d107      	bne.n	8011724 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8011714:	4b47      	ldr	r3, [pc, #284]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	2380      	movs	r3, #128	; 0x80
 801171a:	00db      	lsls	r3, r3, #3
 801171c:	4013      	ands	r3, r2
 801171e:	d113      	bne.n	8011748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011720:	2301      	movs	r3, #1
 8011722:	e07f      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	2b03      	cmp	r3, #3
 801172a:	d106      	bne.n	801173a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801172c:	4b41      	ldr	r3, [pc, #260]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 801172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011730:	2202      	movs	r2, #2
 8011732:	4013      	ands	r3, r2
 8011734:	d108      	bne.n	8011748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011736:	2301      	movs	r3, #1
 8011738:	e074      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801173a:	4b3e      	ldr	r3, [pc, #248]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 801173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801173e:	2202      	movs	r2, #2
 8011740:	4013      	ands	r3, r2
 8011742:	d101      	bne.n	8011748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8011744:	2301      	movs	r3, #1
 8011746:	e06d      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011748:	4b3a      	ldr	r3, [pc, #232]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	2207      	movs	r2, #7
 801174e:	4393      	bics	r3, r2
 8011750:	0019      	movs	r1, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	685a      	ldr	r2, [r3, #4]
 8011756:	4b37      	ldr	r3, [pc, #220]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 8011758:	430a      	orrs	r2, r1
 801175a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801175c:	f7fa ff9c 	bl	800c698 <HAL_GetTick>
 8011760:	0003      	movs	r3, r0
 8011762:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011764:	e009      	b.n	801177a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011766:	f7fa ff97 	bl	800c698 <HAL_GetTick>
 801176a:	0002      	movs	r2, r0
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	4a2f      	ldr	r2, [pc, #188]	; (8011830 <HAL_RCC_ClockConfig+0x1f4>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d901      	bls.n	801177a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8011776:	2303      	movs	r3, #3
 8011778:	e054      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801177a:	4b2e      	ldr	r3, [pc, #184]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	2238      	movs	r2, #56	; 0x38
 8011780:	401a      	ands	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	00db      	lsls	r3, r3, #3
 8011788:	429a      	cmp	r2, r3
 801178a:	d1ec      	bne.n	8011766 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801178c:	4b27      	ldr	r3, [pc, #156]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	2207      	movs	r2, #7
 8011792:	4013      	ands	r3, r2
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	429a      	cmp	r2, r3
 8011798:	d21e      	bcs.n	80117d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801179a:	4b24      	ldr	r3, [pc, #144]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2207      	movs	r2, #7
 80117a0:	4393      	bics	r3, r2
 80117a2:	0019      	movs	r1, r3
 80117a4:	4b21      	ldr	r3, [pc, #132]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 80117a6:	683a      	ldr	r2, [r7, #0]
 80117a8:	430a      	orrs	r2, r1
 80117aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80117ac:	f7fa ff74 	bl	800c698 <HAL_GetTick>
 80117b0:	0003      	movs	r3, r0
 80117b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80117b4:	e009      	b.n	80117ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117b6:	f7fa ff6f 	bl	800c698 <HAL_GetTick>
 80117ba:	0002      	movs	r2, r0
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	1ad3      	subs	r3, r2, r3
 80117c0:	4a1b      	ldr	r2, [pc, #108]	; (8011830 <HAL_RCC_ClockConfig+0x1f4>)
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d901      	bls.n	80117ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80117c6:	2303      	movs	r3, #3
 80117c8:	e02c      	b.n	8011824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80117ca:	4b18      	ldr	r3, [pc, #96]	; (801182c <HAL_RCC_ClockConfig+0x1f0>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2207      	movs	r2, #7
 80117d0:	4013      	ands	r3, r2
 80117d2:	683a      	ldr	r2, [r7, #0]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d1ee      	bne.n	80117b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2204      	movs	r2, #4
 80117de:	4013      	ands	r3, r2
 80117e0:	d009      	beq.n	80117f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80117e2:	4b14      	ldr	r3, [pc, #80]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	4a15      	ldr	r2, [pc, #84]	; (801183c <HAL_RCC_ClockConfig+0x200>)
 80117e8:	4013      	ands	r3, r2
 80117ea:	0019      	movs	r1, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	68da      	ldr	r2, [r3, #12]
 80117f0:	4b10      	ldr	r3, [pc, #64]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80117f2:	430a      	orrs	r2, r1
 80117f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80117f6:	f000 f829 	bl	801184c <HAL_RCC_GetSysClockFreq>
 80117fa:	0001      	movs	r1, r0
 80117fc:	4b0d      	ldr	r3, [pc, #52]	; (8011834 <HAL_RCC_ClockConfig+0x1f8>)
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	0a1b      	lsrs	r3, r3, #8
 8011802:	220f      	movs	r2, #15
 8011804:	401a      	ands	r2, r3
 8011806:	4b0e      	ldr	r3, [pc, #56]	; (8011840 <HAL_RCC_ClockConfig+0x204>)
 8011808:	0092      	lsls	r2, r2, #2
 801180a:	58d3      	ldr	r3, [r2, r3]
 801180c:	221f      	movs	r2, #31
 801180e:	4013      	ands	r3, r2
 8011810:	000a      	movs	r2, r1
 8011812:	40da      	lsrs	r2, r3
 8011814:	4b0b      	ldr	r3, [pc, #44]	; (8011844 <HAL_RCC_ClockConfig+0x208>)
 8011816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8011818:	4b0b      	ldr	r3, [pc, #44]	; (8011848 <HAL_RCC_ClockConfig+0x20c>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	0018      	movs	r0, r3
 801181e:	f7fa fc99 	bl	800c154 <HAL_InitTick>
 8011822:	0003      	movs	r3, r0
}
 8011824:	0018      	movs	r0, r3
 8011826:	46bd      	mov	sp, r7
 8011828:	b004      	add	sp, #16
 801182a:	bd80      	pop	{r7, pc}
 801182c:	40022000 	.word	0x40022000
 8011830:	00001388 	.word	0x00001388
 8011834:	40021000 	.word	0x40021000
 8011838:	fffff0ff 	.word	0xfffff0ff
 801183c:	ffff8fff 	.word	0xffff8fff
 8011840:	0802afc0 	.word	0x0802afc0
 8011844:	20000118 	.word	0x20000118
 8011848:	2000011c 	.word	0x2000011c

0801184c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011852:	4b3c      	ldr	r3, [pc, #240]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	2238      	movs	r2, #56	; 0x38
 8011858:	4013      	ands	r3, r2
 801185a:	d10f      	bne.n	801187c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 801185c:	4b39      	ldr	r3, [pc, #228]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	0adb      	lsrs	r3, r3, #11
 8011862:	2207      	movs	r2, #7
 8011864:	4013      	ands	r3, r2
 8011866:	2201      	movs	r2, #1
 8011868:	409a      	lsls	r2, r3
 801186a:	0013      	movs	r3, r2
 801186c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 801186e:	6839      	ldr	r1, [r7, #0]
 8011870:	4835      	ldr	r0, [pc, #212]	; (8011948 <HAL_RCC_GetSysClockFreq+0xfc>)
 8011872:	f7f4 fcd1 	bl	8006218 <__udivsi3>
 8011876:	0003      	movs	r3, r0
 8011878:	613b      	str	r3, [r7, #16]
 801187a:	e05d      	b.n	8011938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801187c:	4b31      	ldr	r3, [pc, #196]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	2238      	movs	r2, #56	; 0x38
 8011882:	4013      	ands	r3, r2
 8011884:	2b08      	cmp	r3, #8
 8011886:	d102      	bne.n	801188e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8011888:	4b2f      	ldr	r3, [pc, #188]	; (8011948 <HAL_RCC_GetSysClockFreq+0xfc>)
 801188a:	613b      	str	r3, [r7, #16]
 801188c:	e054      	b.n	8011938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801188e:	4b2d      	ldr	r3, [pc, #180]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8011890:	689b      	ldr	r3, [r3, #8]
 8011892:	2238      	movs	r2, #56	; 0x38
 8011894:	4013      	ands	r3, r2
 8011896:	2b10      	cmp	r3, #16
 8011898:	d138      	bne.n	801190c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 801189a:	4b2a      	ldr	r3, [pc, #168]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	2203      	movs	r2, #3
 80118a0:	4013      	ands	r3, r2
 80118a2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80118a4:	4b27      	ldr	r3, [pc, #156]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	091b      	lsrs	r3, r3, #4
 80118aa:	2207      	movs	r2, #7
 80118ac:	4013      	ands	r3, r2
 80118ae:	3301      	adds	r3, #1
 80118b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2b03      	cmp	r3, #3
 80118b6:	d10d      	bne.n	80118d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	4823      	ldr	r0, [pc, #140]	; (8011948 <HAL_RCC_GetSysClockFreq+0xfc>)
 80118bc:	f7f4 fcac 	bl	8006218 <__udivsi3>
 80118c0:	0003      	movs	r3, r0
 80118c2:	0019      	movs	r1, r3
 80118c4:	4b1f      	ldr	r3, [pc, #124]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	0a1b      	lsrs	r3, r3, #8
 80118ca:	227f      	movs	r2, #127	; 0x7f
 80118cc:	4013      	ands	r3, r2
 80118ce:	434b      	muls	r3, r1
 80118d0:	617b      	str	r3, [r7, #20]
        break;
 80118d2:	e00d      	b.n	80118f0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80118d4:	68b9      	ldr	r1, [r7, #8]
 80118d6:	481c      	ldr	r0, [pc, #112]	; (8011948 <HAL_RCC_GetSysClockFreq+0xfc>)
 80118d8:	f7f4 fc9e 	bl	8006218 <__udivsi3>
 80118dc:	0003      	movs	r3, r0
 80118de:	0019      	movs	r1, r3
 80118e0:	4b18      	ldr	r3, [pc, #96]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	0a1b      	lsrs	r3, r3, #8
 80118e6:	227f      	movs	r2, #127	; 0x7f
 80118e8:	4013      	ands	r3, r2
 80118ea:	434b      	muls	r3, r1
 80118ec:	617b      	str	r3, [r7, #20]
        break;
 80118ee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80118f0:	4b14      	ldr	r3, [pc, #80]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	0f5b      	lsrs	r3, r3, #29
 80118f6:	2207      	movs	r2, #7
 80118f8:	4013      	ands	r3, r2
 80118fa:	3301      	adds	r3, #1
 80118fc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80118fe:	6879      	ldr	r1, [r7, #4]
 8011900:	6978      	ldr	r0, [r7, #20]
 8011902:	f7f4 fc89 	bl	8006218 <__udivsi3>
 8011906:	0003      	movs	r3, r0
 8011908:	613b      	str	r3, [r7, #16]
 801190a:	e015      	b.n	8011938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 801190c:	4b0d      	ldr	r3, [pc, #52]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 801190e:	689b      	ldr	r3, [r3, #8]
 8011910:	2238      	movs	r2, #56	; 0x38
 8011912:	4013      	ands	r3, r2
 8011914:	2b20      	cmp	r3, #32
 8011916:	d103      	bne.n	8011920 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8011918:	2380      	movs	r3, #128	; 0x80
 801191a:	021b      	lsls	r3, r3, #8
 801191c:	613b      	str	r3, [r7, #16]
 801191e:	e00b      	b.n	8011938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8011920:	4b08      	ldr	r3, [pc, #32]	; (8011944 <HAL_RCC_GetSysClockFreq+0xf8>)
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	2238      	movs	r2, #56	; 0x38
 8011926:	4013      	ands	r3, r2
 8011928:	2b18      	cmp	r3, #24
 801192a:	d103      	bne.n	8011934 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 801192c:	23fa      	movs	r3, #250	; 0xfa
 801192e:	01db      	lsls	r3, r3, #7
 8011930:	613b      	str	r3, [r7, #16]
 8011932:	e001      	b.n	8011938 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8011934:	2300      	movs	r3, #0
 8011936:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8011938:	693b      	ldr	r3, [r7, #16]
}
 801193a:	0018      	movs	r0, r3
 801193c:	46bd      	mov	sp, r7
 801193e:	b006      	add	sp, #24
 8011940:	bd80      	pop	{r7, pc}
 8011942:	46c0      	nop			; (mov r8, r8)
 8011944:	40021000 	.word	0x40021000
 8011948:	00f42400 	.word	0x00f42400

0801194c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011950:	4b02      	ldr	r3, [pc, #8]	; (801195c <HAL_RCC_GetHCLKFreq+0x10>)
 8011952:	681b      	ldr	r3, [r3, #0]
}
 8011954:	0018      	movs	r0, r3
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
 801195a:	46c0      	nop			; (mov r8, r8)
 801195c:	20000118 	.word	0x20000118

08011960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011960:	b5b0      	push	{r4, r5, r7, lr}
 8011962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8011964:	f7ff fff2 	bl	801194c <HAL_RCC_GetHCLKFreq>
 8011968:	0004      	movs	r4, r0
 801196a:	f7ff fafb 	bl	8010f64 <LL_RCC_GetAPB1Prescaler>
 801196e:	0003      	movs	r3, r0
 8011970:	0b1a      	lsrs	r2, r3, #12
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011974:	0092      	lsls	r2, r2, #2
 8011976:	58d3      	ldr	r3, [r2, r3]
 8011978:	221f      	movs	r2, #31
 801197a:	4013      	ands	r3, r2
 801197c:	40dc      	lsrs	r4, r3
 801197e:	0023      	movs	r3, r4
}
 8011980:	0018      	movs	r0, r3
 8011982:	46bd      	mov	sp, r7
 8011984:	bdb0      	pop	{r4, r5, r7, pc}
 8011986:	46c0      	nop			; (mov r8, r8)
 8011988:	0802b000 	.word	0x0802b000

0801198c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2207      	movs	r2, #7
 801199a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801199c:	4b0e      	ldr	r3, [pc, #56]	; (80119d8 <HAL_RCC_GetClockConfig+0x4c>)
 801199e:	689b      	ldr	r3, [r3, #8]
 80119a0:	2207      	movs	r2, #7
 80119a2:	401a      	ands	r2, r3
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80119a8:	4b0b      	ldr	r3, [pc, #44]	; (80119d8 <HAL_RCC_GetClockConfig+0x4c>)
 80119aa:	689a      	ldr	r2, [r3, #8]
 80119ac:	23f0      	movs	r3, #240	; 0xf0
 80119ae:	011b      	lsls	r3, r3, #4
 80119b0:	401a      	ands	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80119b6:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <HAL_RCC_GetClockConfig+0x4c>)
 80119b8:	689a      	ldr	r2, [r3, #8]
 80119ba:	23e0      	movs	r3, #224	; 0xe0
 80119bc:	01db      	lsls	r3, r3, #7
 80119be:	401a      	ands	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80119c4:	4b05      	ldr	r3, [pc, #20]	; (80119dc <HAL_RCC_GetClockConfig+0x50>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	2207      	movs	r2, #7
 80119ca:	401a      	ands	r2, r3
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	601a      	str	r2, [r3, #0]
}
 80119d0:	46c0      	nop			; (mov r8, r8)
 80119d2:	46bd      	mov	sp, r7
 80119d4:	b002      	add	sp, #8
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	40021000 	.word	0x40021000
 80119dc:	40022000 	.word	0x40022000

080119e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b086      	sub	sp, #24
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80119e8:	2313      	movs	r3, #19
 80119ea:	18fb      	adds	r3, r7, r3
 80119ec:	2200      	movs	r2, #0
 80119ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80119f0:	2312      	movs	r3, #18
 80119f2:	18fb      	adds	r3, r7, r3
 80119f4:	2200      	movs	r2, #0
 80119f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681a      	ldr	r2, [r3, #0]
 80119fc:	2380      	movs	r3, #128	; 0x80
 80119fe:	029b      	lsls	r3, r3, #10
 8011a00:	4013      	ands	r3, r2
 8011a02:	d100      	bne.n	8011a06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8011a04:	e0ad      	b.n	8011b62 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a06:	2011      	movs	r0, #17
 8011a08:	183b      	adds	r3, r7, r0
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011a0e:	4b47      	ldr	r3, [pc, #284]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a12:	2380      	movs	r3, #128	; 0x80
 8011a14:	055b      	lsls	r3, r3, #21
 8011a16:	4013      	ands	r3, r2
 8011a18:	d110      	bne.n	8011a3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011a1a:	4b44      	ldr	r3, [pc, #272]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a1e:	4b43      	ldr	r3, [pc, #268]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011a20:	2180      	movs	r1, #128	; 0x80
 8011a22:	0549      	lsls	r1, r1, #21
 8011a24:	430a      	orrs	r2, r1
 8011a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8011a28:	4b40      	ldr	r3, [pc, #256]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a2c:	2380      	movs	r3, #128	; 0x80
 8011a2e:	055b      	lsls	r3, r3, #21
 8011a30:	4013      	ands	r3, r2
 8011a32:	60bb      	str	r3, [r7, #8]
 8011a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011a36:	183b      	adds	r3, r7, r0
 8011a38:	2201      	movs	r2, #1
 8011a3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011a3c:	4b3c      	ldr	r3, [pc, #240]	; (8011b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	4b3b      	ldr	r3, [pc, #236]	; (8011b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8011a42:	2180      	movs	r1, #128	; 0x80
 8011a44:	0049      	lsls	r1, r1, #1
 8011a46:	430a      	orrs	r2, r1
 8011a48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011a4a:	f7fa fe25 	bl	800c698 <HAL_GetTick>
 8011a4e:	0003      	movs	r3, r0
 8011a50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a52:	e00b      	b.n	8011a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011a54:	f7fa fe20 	bl	800c698 <HAL_GetTick>
 8011a58:	0002      	movs	r2, r0
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	d904      	bls.n	8011a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8011a62:	2313      	movs	r3, #19
 8011a64:	18fb      	adds	r3, r7, r3
 8011a66:	2203      	movs	r2, #3
 8011a68:	701a      	strb	r2, [r3, #0]
        break;
 8011a6a:	e005      	b.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011a6c:	4b30      	ldr	r3, [pc, #192]	; (8011b30 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	2380      	movs	r3, #128	; 0x80
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	4013      	ands	r3, r2
 8011a76:	d0ed      	beq.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8011a78:	2313      	movs	r3, #19
 8011a7a:	18fb      	adds	r3, r7, r3
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d15e      	bne.n	8011b40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8011a82:	4b2a      	ldr	r3, [pc, #168]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a86:	23c0      	movs	r3, #192	; 0xc0
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d019      	beq.n	8011ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a98:	697a      	ldr	r2, [r7, #20]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d014      	beq.n	8011ac8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8011a9e:	4b23      	ldr	r3, [pc, #140]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aa2:	4a24      	ldr	r2, [pc, #144]	; (8011b34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8011aa4:	4013      	ands	r3, r2
 8011aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8011aa8:	4b20      	ldr	r3, [pc, #128]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011aaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011aac:	4b1f      	ldr	r3, [pc, #124]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011aae:	2180      	movs	r1, #128	; 0x80
 8011ab0:	0249      	lsls	r1, r1, #9
 8011ab2:	430a      	orrs	r2, r1
 8011ab4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011ab6:	4b1d      	ldr	r3, [pc, #116]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011aba:	4b1c      	ldr	r3, [pc, #112]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011abc:	491e      	ldr	r1, [pc, #120]	; (8011b38 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8011abe:	400a      	ands	r2, r1
 8011ac0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011ac2:	4b1a      	ldr	r3, [pc, #104]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011ac4:	697a      	ldr	r2, [r7, #20]
 8011ac6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	2201      	movs	r2, #1
 8011acc:	4013      	ands	r3, r2
 8011ace:	d016      	beq.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ad0:	f7fa fde2 	bl	800c698 <HAL_GetTick>
 8011ad4:	0003      	movs	r3, r0
 8011ad6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011ad8:	e00c      	b.n	8011af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011ada:	f7fa fddd 	bl	800c698 <HAL_GetTick>
 8011ade:	0002      	movs	r2, r0
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	1ad3      	subs	r3, r2, r3
 8011ae4:	4a15      	ldr	r2, [pc, #84]	; (8011b3c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d904      	bls.n	8011af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8011aea:	2313      	movs	r3, #19
 8011aec:	18fb      	adds	r3, r7, r3
 8011aee:	2203      	movs	r2, #3
 8011af0:	701a      	strb	r2, [r3, #0]
            break;
 8011af2:	e004      	b.n	8011afe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011af4:	4b0d      	ldr	r3, [pc, #52]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011af8:	2202      	movs	r2, #2
 8011afa:	4013      	ands	r3, r2
 8011afc:	d0ed      	beq.n	8011ada <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8011afe:	2313      	movs	r3, #19
 8011b00:	18fb      	adds	r3, r7, r3
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10a      	bne.n	8011b1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011b08:	4b08      	ldr	r3, [pc, #32]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b0c:	4a09      	ldr	r2, [pc, #36]	; (8011b34 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8011b0e:	4013      	ands	r3, r2
 8011b10:	0019      	movs	r1, r3
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b16:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8011b18:	430a      	orrs	r2, r1
 8011b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8011b1c:	e016      	b.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011b1e:	2312      	movs	r3, #18
 8011b20:	18fb      	adds	r3, r7, r3
 8011b22:	2213      	movs	r2, #19
 8011b24:	18ba      	adds	r2, r7, r2
 8011b26:	7812      	ldrb	r2, [r2, #0]
 8011b28:	701a      	strb	r2, [r3, #0]
 8011b2a:	e00f      	b.n	8011b4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8011b2c:	40021000 	.word	0x40021000
 8011b30:	40007000 	.word	0x40007000
 8011b34:	fffffcff 	.word	0xfffffcff
 8011b38:	fffeffff 	.word	0xfffeffff
 8011b3c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b40:	2312      	movs	r3, #18
 8011b42:	18fb      	adds	r3, r7, r3
 8011b44:	2213      	movs	r2, #19
 8011b46:	18ba      	adds	r2, r7, r2
 8011b48:	7812      	ldrb	r2, [r2, #0]
 8011b4a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8011b4c:	2311      	movs	r3, #17
 8011b4e:	18fb      	adds	r3, r7, r3
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d105      	bne.n	8011b62 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011b56:	4bb6      	ldr	r3, [pc, #728]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b5a:	4bb5      	ldr	r3, [pc, #724]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b5c:	49b5      	ldr	r1, [pc, #724]	; (8011e34 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8011b5e:	400a      	ands	r2, r1
 8011b60:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2201      	movs	r2, #1
 8011b68:	4013      	ands	r3, r2
 8011b6a:	d009      	beq.n	8011b80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011b6c:	4bb0      	ldr	r3, [pc, #704]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b70:	2203      	movs	r2, #3
 8011b72:	4393      	bics	r3, r2
 8011b74:	0019      	movs	r1, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	685a      	ldr	r2, [r3, #4]
 8011b7a:	4bad      	ldr	r3, [pc, #692]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b7c:	430a      	orrs	r2, r1
 8011b7e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2202      	movs	r2, #2
 8011b86:	4013      	ands	r3, r2
 8011b88:	d009      	beq.n	8011b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011b8a:	4ba9      	ldr	r3, [pc, #676]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b8e:	220c      	movs	r2, #12
 8011b90:	4393      	bics	r3, r2
 8011b92:	0019      	movs	r1, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	689a      	ldr	r2, [r3, #8]
 8011b98:	4ba5      	ldr	r3, [pc, #660]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011b9a:	430a      	orrs	r2, r1
 8011b9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2204      	movs	r2, #4
 8011ba4:	4013      	ands	r3, r2
 8011ba6:	d009      	beq.n	8011bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011ba8:	4ba1      	ldr	r3, [pc, #644]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bac:	2230      	movs	r2, #48	; 0x30
 8011bae:	4393      	bics	r3, r2
 8011bb0:	0019      	movs	r1, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	68da      	ldr	r2, [r3, #12]
 8011bb6:	4b9e      	ldr	r3, [pc, #632]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011bb8:	430a      	orrs	r2, r1
 8011bba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2210      	movs	r2, #16
 8011bc2:	4013      	ands	r3, r2
 8011bc4:	d009      	beq.n	8011bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011bc6:	4b9a      	ldr	r3, [pc, #616]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bca:	4a9b      	ldr	r2, [pc, #620]	; (8011e38 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8011bcc:	4013      	ands	r3, r2
 8011bce:	0019      	movs	r1, r3
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	691a      	ldr	r2, [r3, #16]
 8011bd4:	4b96      	ldr	r3, [pc, #600]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011bd6:	430a      	orrs	r2, r1
 8011bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681a      	ldr	r2, [r3, #0]
 8011bde:	2380      	movs	r3, #128	; 0x80
 8011be0:	015b      	lsls	r3, r3, #5
 8011be2:	4013      	ands	r3, r2
 8011be4:	d009      	beq.n	8011bfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8011be6:	4b92      	ldr	r3, [pc, #584]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bea:	4a94      	ldr	r2, [pc, #592]	; (8011e3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8011bec:	4013      	ands	r3, r2
 8011bee:	0019      	movs	r1, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	695a      	ldr	r2, [r3, #20]
 8011bf4:	4b8e      	ldr	r3, [pc, #568]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011bf6:	430a      	orrs	r2, r1
 8011bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	2380      	movs	r3, #128	; 0x80
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4013      	ands	r3, r2
 8011c04:	d009      	beq.n	8011c1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011c06:	4b8a      	ldr	r3, [pc, #552]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c0a:	4a8d      	ldr	r2, [pc, #564]	; (8011e40 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	0019      	movs	r1, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c14:	4b86      	ldr	r3, [pc, #536]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c16:	430a      	orrs	r2, r1
 8011c18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	2380      	movs	r3, #128	; 0x80
 8011c20:	00db      	lsls	r3, r3, #3
 8011c22:	4013      	ands	r3, r2
 8011c24:	d009      	beq.n	8011c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011c26:	4b82      	ldr	r3, [pc, #520]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c2a:	4a86      	ldr	r2, [pc, #536]	; (8011e44 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8011c2c:	4013      	ands	r3, r2
 8011c2e:	0019      	movs	r1, r3
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c34:	4b7e      	ldr	r3, [pc, #504]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c36:	430a      	orrs	r2, r1
 8011c38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2220      	movs	r2, #32
 8011c40:	4013      	ands	r3, r2
 8011c42:	d009      	beq.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011c44:	4b7a      	ldr	r3, [pc, #488]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c48:	4a7f      	ldr	r2, [pc, #508]	; (8011e48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	0019      	movs	r1, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	699a      	ldr	r2, [r3, #24]
 8011c52:	4b77      	ldr	r3, [pc, #476]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c54:	430a      	orrs	r2, r1
 8011c56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2240      	movs	r2, #64	; 0x40
 8011c5e:	4013      	ands	r3, r2
 8011c60:	d009      	beq.n	8011c76 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8011c62:	4b73      	ldr	r3, [pc, #460]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c66:	4a79      	ldr	r2, [pc, #484]	; (8011e4c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8011c68:	4013      	ands	r3, r2
 8011c6a:	0019      	movs	r1, r3
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	69da      	ldr	r2, [r3, #28]
 8011c70:	4b6f      	ldr	r3, [pc, #444]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c72:	430a      	orrs	r2, r1
 8011c74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	2380      	movs	r3, #128	; 0x80
 8011c7c:	01db      	lsls	r3, r3, #7
 8011c7e:	4013      	ands	r3, r2
 8011c80:	d015      	beq.n	8011cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011c82:	4b6b      	ldr	r3, [pc, #428]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	0899      	lsrs	r1, r3, #2
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c8e:	4b68      	ldr	r3, [pc, #416]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011c90:	430a      	orrs	r2, r1
 8011c92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c98:	2380      	movs	r3, #128	; 0x80
 8011c9a:	05db      	lsls	r3, r3, #23
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d106      	bne.n	8011cae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8011ca0:	4b63      	ldr	r3, [pc, #396]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011ca2:	68da      	ldr	r2, [r3, #12]
 8011ca4:	4b62      	ldr	r3, [pc, #392]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011ca6:	2180      	movs	r1, #128	; 0x80
 8011ca8:	0249      	lsls	r1, r1, #9
 8011caa:	430a      	orrs	r2, r1
 8011cac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681a      	ldr	r2, [r3, #0]
 8011cb2:	2380      	movs	r3, #128	; 0x80
 8011cb4:	031b      	lsls	r3, r3, #12
 8011cb6:	4013      	ands	r3, r2
 8011cb8:	d009      	beq.n	8011cce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011cba:	4b5d      	ldr	r3, [pc, #372]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cbe:	2240      	movs	r2, #64	; 0x40
 8011cc0:	4393      	bics	r3, r2
 8011cc2:	0019      	movs	r1, r3
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cc8:	4b59      	ldr	r3, [pc, #356]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011cca:	430a      	orrs	r2, r1
 8011ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	2380      	movs	r3, #128	; 0x80
 8011cd4:	039b      	lsls	r3, r3, #14
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	d016      	beq.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8011cda:	4b55      	ldr	r3, [pc, #340]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cde:	4a5c      	ldr	r2, [pc, #368]	; (8011e50 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8011ce0:	4013      	ands	r3, r2
 8011ce2:	0019      	movs	r1, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ce8:	4b51      	ldr	r3, [pc, #324]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011cea:	430a      	orrs	r2, r1
 8011cec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cf2:	2380      	movs	r3, #128	; 0x80
 8011cf4:	03db      	lsls	r3, r3, #15
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d106      	bne.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011cfa:	4b4d      	ldr	r3, [pc, #308]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011cfc:	68da      	ldr	r2, [r3, #12]
 8011cfe:	4b4c      	ldr	r3, [pc, #304]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d00:	2180      	movs	r1, #128	; 0x80
 8011d02:	0449      	lsls	r1, r1, #17
 8011d04:	430a      	orrs	r2, r1
 8011d06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	681a      	ldr	r2, [r3, #0]
 8011d0c:	2380      	movs	r3, #128	; 0x80
 8011d0e:	03db      	lsls	r3, r3, #15
 8011d10:	4013      	ands	r3, r2
 8011d12:	d016      	beq.n	8011d42 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8011d14:	4b46      	ldr	r3, [pc, #280]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d18:	4a4e      	ldr	r2, [pc, #312]	; (8011e54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8011d1a:	4013      	ands	r3, r2
 8011d1c:	0019      	movs	r1, r3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d22:	4b43      	ldr	r3, [pc, #268]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d24:	430a      	orrs	r2, r1
 8011d26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d2c:	2380      	movs	r3, #128	; 0x80
 8011d2e:	045b      	lsls	r3, r3, #17
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d106      	bne.n	8011d42 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011d34:	4b3e      	ldr	r3, [pc, #248]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d36:	68da      	ldr	r2, [r3, #12]
 8011d38:	4b3d      	ldr	r3, [pc, #244]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d3a:	2180      	movs	r1, #128	; 0x80
 8011d3c:	0449      	lsls	r1, r1, #17
 8011d3e:	430a      	orrs	r2, r1
 8011d40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	2380      	movs	r3, #128	; 0x80
 8011d48:	011b      	lsls	r3, r3, #4
 8011d4a:	4013      	ands	r3, r2
 8011d4c:	d014      	beq.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8011d4e:	4b38      	ldr	r3, [pc, #224]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d52:	2203      	movs	r2, #3
 8011d54:	4393      	bics	r3, r2
 8011d56:	0019      	movs	r1, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6a1a      	ldr	r2, [r3, #32]
 8011d5c:	4b34      	ldr	r3, [pc, #208]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d5e:	430a      	orrs	r2, r1
 8011d60:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a1b      	ldr	r3, [r3, #32]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d106      	bne.n	8011d78 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8011d6a:	4b31      	ldr	r3, [pc, #196]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d6c:	68da      	ldr	r2, [r3, #12]
 8011d6e:	4b30      	ldr	r3, [pc, #192]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d70:	2180      	movs	r1, #128	; 0x80
 8011d72:	0249      	lsls	r1, r1, #9
 8011d74:	430a      	orrs	r2, r1
 8011d76:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681a      	ldr	r2, [r3, #0]
 8011d7c:	2380      	movs	r3, #128	; 0x80
 8011d7e:	019b      	lsls	r3, r3, #6
 8011d80:	4013      	ands	r3, r2
 8011d82:	d014      	beq.n	8011dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8011d84:	4b2a      	ldr	r3, [pc, #168]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d88:	220c      	movs	r2, #12
 8011d8a:	4393      	bics	r3, r2
 8011d8c:	0019      	movs	r1, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d92:	4b27      	ldr	r3, [pc, #156]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011d94:	430a      	orrs	r2, r1
 8011d96:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d9c:	2b04      	cmp	r3, #4
 8011d9e:	d106      	bne.n	8011dae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8011da0:	4b23      	ldr	r3, [pc, #140]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	4b22      	ldr	r3, [pc, #136]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011da6:	2180      	movs	r1, #128	; 0x80
 8011da8:	0249      	lsls	r1, r1, #9
 8011daa:	430a      	orrs	r2, r1
 8011dac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681a      	ldr	r2, [r3, #0]
 8011db2:	2380      	movs	r3, #128	; 0x80
 8011db4:	045b      	lsls	r3, r3, #17
 8011db6:	4013      	ands	r3, r2
 8011db8:	d016      	beq.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011dba:	4b1d      	ldr	r3, [pc, #116]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dbe:	4a22      	ldr	r2, [pc, #136]	; (8011e48 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8011dc0:	4013      	ands	r3, r2
 8011dc2:	0019      	movs	r1, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dc8:	4b19      	ldr	r3, [pc, #100]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011dca:	430a      	orrs	r2, r1
 8011dcc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dd2:	2380      	movs	r3, #128	; 0x80
 8011dd4:	019b      	lsls	r3, r3, #6
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d106      	bne.n	8011de8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011dda:	4b15      	ldr	r3, [pc, #84]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011ddc:	68da      	ldr	r2, [r3, #12]
 8011dde:	4b14      	ldr	r3, [pc, #80]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011de0:	2180      	movs	r1, #128	; 0x80
 8011de2:	0449      	lsls	r1, r1, #17
 8011de4:	430a      	orrs	r2, r1
 8011de6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	2380      	movs	r3, #128	; 0x80
 8011dee:	049b      	lsls	r3, r3, #18
 8011df0:	4013      	ands	r3, r2
 8011df2:	d016      	beq.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8011df4:	4b0e      	ldr	r3, [pc, #56]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011df8:	4a10      	ldr	r2, [pc, #64]	; (8011e3c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8011dfa:	4013      	ands	r3, r2
 8011dfc:	0019      	movs	r1, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e02:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011e04:	430a      	orrs	r2, r1
 8011e06:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e0c:	2380      	movs	r3, #128	; 0x80
 8011e0e:	005b      	lsls	r3, r3, #1
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d106      	bne.n	8011e22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8011e14:	4b06      	ldr	r3, [pc, #24]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011e16:	68da      	ldr	r2, [r3, #12]
 8011e18:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8011e1a:	2180      	movs	r1, #128	; 0x80
 8011e1c:	0449      	lsls	r1, r1, #17
 8011e1e:	430a      	orrs	r2, r1
 8011e20:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8011e22:	2312      	movs	r3, #18
 8011e24:	18fb      	adds	r3, r7, r3
 8011e26:	781b      	ldrb	r3, [r3, #0]
}
 8011e28:	0018      	movs	r0, r3
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	b006      	add	sp, #24
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	40021000 	.word	0x40021000
 8011e34:	efffffff 	.word	0xefffffff
 8011e38:	fffff3ff 	.word	0xfffff3ff
 8011e3c:	fffffcff 	.word	0xfffffcff
 8011e40:	fff3ffff 	.word	0xfff3ffff
 8011e44:	ffcfffff 	.word	0xffcfffff
 8011e48:	ffffcfff 	.word	0xffffcfff
 8011e4c:	ffff3fff 	.word	0xffff3fff
 8011e50:	ffbfffff 	.word	0xffbfffff
 8011e54:	feffffff 	.word	0xfeffffff

08011e58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d101      	bne.n	8011e6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011e66:	2301      	movs	r3, #1
 8011e68:	e0a8      	b.n	8011fbc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d109      	bne.n	8011e86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	685a      	ldr	r2, [r3, #4]
 8011e76:	2382      	movs	r3, #130	; 0x82
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d009      	beq.n	8011e92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2200      	movs	r2, #0
 8011e82:	61da      	str	r2, [r3, #28]
 8011e84:	e005      	b.n	8011e92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2200      	movs	r2, #0
 8011e90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	2200      	movs	r2, #0
 8011e96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	225d      	movs	r2, #93	; 0x5d
 8011e9c:	5c9b      	ldrb	r3, [r3, r2]
 8011e9e:	b2db      	uxtb	r3, r3
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d107      	bne.n	8011eb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	225c      	movs	r2, #92	; 0x5c
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	0018      	movs	r0, r3
 8011eb0:	f7fa f84e 	bl	800bf50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	225d      	movs	r2, #93	; 0x5d
 8011eb8:	2102      	movs	r1, #2
 8011eba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	681a      	ldr	r2, [r3, #0]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2140      	movs	r1, #64	; 0x40
 8011ec8:	438a      	bics	r2, r1
 8011eca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	68da      	ldr	r2, [r3, #12]
 8011ed0:	23e0      	movs	r3, #224	; 0xe0
 8011ed2:	00db      	lsls	r3, r3, #3
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d902      	bls.n	8011ede <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	60fb      	str	r3, [r7, #12]
 8011edc:	e002      	b.n	8011ee4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011ede:	2380      	movs	r3, #128	; 0x80
 8011ee0:	015b      	lsls	r3, r3, #5
 8011ee2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68da      	ldr	r2, [r3, #12]
 8011ee8:	23f0      	movs	r3, #240	; 0xf0
 8011eea:	011b      	lsls	r3, r3, #4
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d008      	beq.n	8011f02 <HAL_SPI_Init+0xaa>
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	68da      	ldr	r2, [r3, #12]
 8011ef4:	23e0      	movs	r3, #224	; 0xe0
 8011ef6:	00db      	lsls	r3, r3, #3
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d002      	beq.n	8011f02 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2200      	movs	r2, #0
 8011f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	2382      	movs	r3, #130	; 0x82
 8011f08:	005b      	lsls	r3, r3, #1
 8011f0a:	401a      	ands	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6899      	ldr	r1, [r3, #8]
 8011f10:	2384      	movs	r3, #132	; 0x84
 8011f12:	021b      	lsls	r3, r3, #8
 8011f14:	400b      	ands	r3, r1
 8011f16:	431a      	orrs	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	691b      	ldr	r3, [r3, #16]
 8011f1c:	2102      	movs	r1, #2
 8011f1e:	400b      	ands	r3, r1
 8011f20:	431a      	orrs	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	695b      	ldr	r3, [r3, #20]
 8011f26:	2101      	movs	r1, #1
 8011f28:	400b      	ands	r3, r1
 8011f2a:	431a      	orrs	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6999      	ldr	r1, [r3, #24]
 8011f30:	2380      	movs	r3, #128	; 0x80
 8011f32:	009b      	lsls	r3, r3, #2
 8011f34:	400b      	ands	r3, r1
 8011f36:	431a      	orrs	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	2138      	movs	r1, #56	; 0x38
 8011f3e:	400b      	ands	r3, r1
 8011f40:	431a      	orrs	r2, r3
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6a1b      	ldr	r3, [r3, #32]
 8011f46:	2180      	movs	r1, #128	; 0x80
 8011f48:	400b      	ands	r3, r1
 8011f4a:	431a      	orrs	r2, r3
 8011f4c:	0011      	movs	r1, r2
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f52:	2380      	movs	r3, #128	; 0x80
 8011f54:	019b      	lsls	r3, r3, #6
 8011f56:	401a      	ands	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	430a      	orrs	r2, r1
 8011f5e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	699b      	ldr	r3, [r3, #24]
 8011f64:	0c1b      	lsrs	r3, r3, #16
 8011f66:	2204      	movs	r2, #4
 8011f68:	401a      	ands	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6e:	2110      	movs	r1, #16
 8011f70:	400b      	ands	r3, r1
 8011f72:	431a      	orrs	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f78:	2108      	movs	r1, #8
 8011f7a:	400b      	ands	r3, r1
 8011f7c:	431a      	orrs	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	68d9      	ldr	r1, [r3, #12]
 8011f82:	23f0      	movs	r3, #240	; 0xf0
 8011f84:	011b      	lsls	r3, r3, #4
 8011f86:	400b      	ands	r3, r1
 8011f88:	431a      	orrs	r2, r3
 8011f8a:	0011      	movs	r1, r2
 8011f8c:	68fa      	ldr	r2, [r7, #12]
 8011f8e:	2380      	movs	r3, #128	; 0x80
 8011f90:	015b      	lsls	r3, r3, #5
 8011f92:	401a      	ands	r2, r3
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	430a      	orrs	r2, r1
 8011f9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	69da      	ldr	r2, [r3, #28]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4907      	ldr	r1, [pc, #28]	; (8011fc4 <HAL_SPI_Init+0x16c>)
 8011fa8:	400a      	ands	r2, r1
 8011faa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	225d      	movs	r2, #93	; 0x5d
 8011fb6:	2101      	movs	r1, #1
 8011fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	0018      	movs	r0, r3
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	b004      	add	sp, #16
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	fffff7ff 	.word	0xfffff7ff

08011fc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b088      	sub	sp, #32
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	60f8      	str	r0, [r7, #12]
 8011fd0:	60b9      	str	r1, [r7, #8]
 8011fd2:	603b      	str	r3, [r7, #0]
 8011fd4:	1dbb      	adds	r3, r7, #6
 8011fd6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011fd8:	231f      	movs	r3, #31
 8011fda:	18fb      	adds	r3, r7, r3
 8011fdc:	2200      	movs	r2, #0
 8011fde:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	225c      	movs	r2, #92	; 0x5c
 8011fe4:	5c9b      	ldrb	r3, [r3, r2]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d101      	bne.n	8011fee <HAL_SPI_Transmit+0x26>
 8011fea:	2302      	movs	r3, #2
 8011fec:	e147      	b.n	801227e <HAL_SPI_Transmit+0x2b6>
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	225c      	movs	r2, #92	; 0x5c
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011ff6:	f7fa fb4f 	bl	800c698 <HAL_GetTick>
 8011ffa:	0003      	movs	r3, r0
 8011ffc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8011ffe:	2316      	movs	r3, #22
 8012000:	18fb      	adds	r3, r7, r3
 8012002:	1dba      	adds	r2, r7, #6
 8012004:	8812      	ldrh	r2, [r2, #0]
 8012006:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	225d      	movs	r2, #93	; 0x5d
 801200c:	5c9b      	ldrb	r3, [r3, r2]
 801200e:	b2db      	uxtb	r3, r3
 8012010:	2b01      	cmp	r3, #1
 8012012:	d004      	beq.n	801201e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8012014:	231f      	movs	r3, #31
 8012016:	18fb      	adds	r3, r7, r3
 8012018:	2202      	movs	r2, #2
 801201a:	701a      	strb	r2, [r3, #0]
    goto error;
 801201c:	e128      	b.n	8012270 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d003      	beq.n	801202c <HAL_SPI_Transmit+0x64>
 8012024:	1dbb      	adds	r3, r7, #6
 8012026:	881b      	ldrh	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d104      	bne.n	8012036 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 801202c:	231f      	movs	r3, #31
 801202e:	18fb      	adds	r3, r7, r3
 8012030:	2201      	movs	r2, #1
 8012032:	701a      	strb	r2, [r3, #0]
    goto error;
 8012034:	e11c      	b.n	8012270 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	225d      	movs	r2, #93	; 0x5d
 801203a:	2103      	movs	r1, #3
 801203c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2200      	movs	r2, #0
 8012042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	68ba      	ldr	r2, [r7, #8]
 8012048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	1dba      	adds	r2, r7, #6
 801204e:	8812      	ldrh	r2, [r2, #0]
 8012050:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	1dba      	adds	r2, r7, #6
 8012056:	8812      	ldrh	r2, [r2, #0]
 8012058:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2200      	movs	r2, #0
 801205e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2244      	movs	r2, #68	; 0x44
 8012064:	2100      	movs	r1, #0
 8012066:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2246      	movs	r2, #70	; 0x46
 801206c:	2100      	movs	r1, #0
 801206e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2200      	movs	r2, #0
 8012074:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	689a      	ldr	r2, [r3, #8]
 8012080:	2380      	movs	r3, #128	; 0x80
 8012082:	021b      	lsls	r3, r3, #8
 8012084:	429a      	cmp	r2, r3
 8012086:	d110      	bne.n	80120aa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2140      	movs	r1, #64	; 0x40
 8012094:	438a      	bics	r2, r1
 8012096:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2180      	movs	r1, #128	; 0x80
 80120a4:	01c9      	lsls	r1, r1, #7
 80120a6:	430a      	orrs	r2, r1
 80120a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2240      	movs	r2, #64	; 0x40
 80120b2:	4013      	ands	r3, r2
 80120b4:	2b40      	cmp	r3, #64	; 0x40
 80120b6:	d007      	beq.n	80120c8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2140      	movs	r1, #64	; 0x40
 80120c4:	430a      	orrs	r2, r1
 80120c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	68da      	ldr	r2, [r3, #12]
 80120cc:	23e0      	movs	r3, #224	; 0xe0
 80120ce:	00db      	lsls	r3, r3, #3
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d952      	bls.n	801217a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d004      	beq.n	80120e6 <HAL_SPI_Transmit+0x11e>
 80120dc:	2316      	movs	r3, #22
 80120de:	18fb      	adds	r3, r7, r3
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	d143      	bne.n	801216e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ea:	881a      	ldrh	r2, [r3, #0]
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f6:	1c9a      	adds	r2, r3, #2
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012100:	b29b      	uxth	r3, r3
 8012102:	3b01      	subs	r3, #1
 8012104:	b29a      	uxth	r2, r3
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801210a:	e030      	b.n	801216e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	2202      	movs	r2, #2
 8012114:	4013      	ands	r3, r2
 8012116:	2b02      	cmp	r3, #2
 8012118:	d112      	bne.n	8012140 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801211e:	881a      	ldrh	r2, [r3, #0]
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801212a:	1c9a      	adds	r2, r3, #2
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012134:	b29b      	uxth	r3, r3
 8012136:	3b01      	subs	r3, #1
 8012138:	b29a      	uxth	r2, r3
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801213e:	e016      	b.n	801216e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012140:	f7fa faaa 	bl	800c698 <HAL_GetTick>
 8012144:	0002      	movs	r2, r0
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	683a      	ldr	r2, [r7, #0]
 801214c:	429a      	cmp	r2, r3
 801214e:	d802      	bhi.n	8012156 <HAL_SPI_Transmit+0x18e>
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	3301      	adds	r3, #1
 8012154:	d102      	bne.n	801215c <HAL_SPI_Transmit+0x194>
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d108      	bne.n	801216e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 801215c:	231f      	movs	r3, #31
 801215e:	18fb      	adds	r3, r7, r3
 8012160:	2203      	movs	r2, #3
 8012162:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	225d      	movs	r2, #93	; 0x5d
 8012168:	2101      	movs	r1, #1
 801216a:	5499      	strb	r1, [r3, r2]
          goto error;
 801216c:	e080      	b.n	8012270 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012172:	b29b      	uxth	r3, r3
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1c9      	bne.n	801210c <HAL_SPI_Transmit+0x144>
 8012178:	e053      	b.n	8012222 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d004      	beq.n	801218c <HAL_SPI_Transmit+0x1c4>
 8012182:	2316      	movs	r3, #22
 8012184:	18fb      	adds	r3, r7, r3
 8012186:	881b      	ldrh	r3, [r3, #0]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d145      	bne.n	8012218 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	330c      	adds	r3, #12
 8012196:	7812      	ldrb	r2, [r2, #0]
 8012198:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219e:	1c5a      	adds	r2, r3, #1
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	3b01      	subs	r3, #1
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80121b2:	e031      	b.n	8012218 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	689b      	ldr	r3, [r3, #8]
 80121ba:	2202      	movs	r2, #2
 80121bc:	4013      	ands	r3, r2
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d113      	bne.n	80121ea <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	330c      	adds	r3, #12
 80121cc:	7812      	ldrb	r2, [r2, #0]
 80121ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121de:	b29b      	uxth	r3, r3
 80121e0:	3b01      	subs	r3, #1
 80121e2:	b29a      	uxth	r2, r3
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80121e8:	e016      	b.n	8012218 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80121ea:	f7fa fa55 	bl	800c698 <HAL_GetTick>
 80121ee:	0002      	movs	r2, r0
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	683a      	ldr	r2, [r7, #0]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d802      	bhi.n	8012200 <HAL_SPI_Transmit+0x238>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	3301      	adds	r3, #1
 80121fe:	d102      	bne.n	8012206 <HAL_SPI_Transmit+0x23e>
 8012200:	683b      	ldr	r3, [r7, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d108      	bne.n	8012218 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8012206:	231f      	movs	r3, #31
 8012208:	18fb      	adds	r3, r7, r3
 801220a:	2203      	movs	r2, #3
 801220c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	225d      	movs	r2, #93	; 0x5d
 8012212:	2101      	movs	r1, #1
 8012214:	5499      	strb	r1, [r3, r2]
          goto error;
 8012216:	e02b      	b.n	8012270 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801221c:	b29b      	uxth	r3, r3
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1c8      	bne.n	80121b4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012222:	69ba      	ldr	r2, [r7, #24]
 8012224:	6839      	ldr	r1, [r7, #0]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	0018      	movs	r0, r3
 801222a:	f000 f95d 	bl	80124e8 <SPI_EndRxTxTransaction>
 801222e:	1e03      	subs	r3, r0, #0
 8012230:	d002      	beq.n	8012238 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2220      	movs	r2, #32
 8012236:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	689b      	ldr	r3, [r3, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d10a      	bne.n	8012256 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012240:	2300      	movs	r3, #0
 8012242:	613b      	str	r3, [r7, #16]
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	613b      	str	r3, [r7, #16]
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	689b      	ldr	r3, [r3, #8]
 8012252:	613b      	str	r3, [r7, #16]
 8012254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801225a:	2b00      	cmp	r3, #0
 801225c:	d004      	beq.n	8012268 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 801225e:	231f      	movs	r3, #31
 8012260:	18fb      	adds	r3, r7, r3
 8012262:	2201      	movs	r2, #1
 8012264:	701a      	strb	r2, [r3, #0]
 8012266:	e003      	b.n	8012270 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	225d      	movs	r2, #93	; 0x5d
 801226c:	2101      	movs	r1, #1
 801226e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	225c      	movs	r2, #92	; 0x5c
 8012274:	2100      	movs	r1, #0
 8012276:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8012278:	231f      	movs	r3, #31
 801227a:	18fb      	adds	r3, r7, r3
 801227c:	781b      	ldrb	r3, [r3, #0]
}
 801227e:	0018      	movs	r0, r3
 8012280:	46bd      	mov	sp, r7
 8012282:	b008      	add	sp, #32
 8012284:	bd80      	pop	{r7, pc}
	...

08012288 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b088      	sub	sp, #32
 801228c:	af00      	add	r7, sp, #0
 801228e:	60f8      	str	r0, [r7, #12]
 8012290:	60b9      	str	r1, [r7, #8]
 8012292:	603b      	str	r3, [r7, #0]
 8012294:	1dfb      	adds	r3, r7, #7
 8012296:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012298:	f7fa f9fe 	bl	800c698 <HAL_GetTick>
 801229c:	0002      	movs	r2, r0
 801229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a0:	1a9b      	subs	r3, r3, r2
 80122a2:	683a      	ldr	r2, [r7, #0]
 80122a4:	18d3      	adds	r3, r2, r3
 80122a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80122a8:	f7fa f9f6 	bl	800c698 <HAL_GetTick>
 80122ac:	0003      	movs	r3, r0
 80122ae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80122b0:	4b3a      	ldr	r3, [pc, #232]	; (801239c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	015b      	lsls	r3, r3, #5
 80122b6:	0d1b      	lsrs	r3, r3, #20
 80122b8:	69fa      	ldr	r2, [r7, #28]
 80122ba:	4353      	muls	r3, r2
 80122bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80122be:	e058      	b.n	8012372 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	3301      	adds	r3, #1
 80122c4:	d055      	beq.n	8012372 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80122c6:	f7fa f9e7 	bl	800c698 <HAL_GetTick>
 80122ca:	0002      	movs	r2, r0
 80122cc:	69bb      	ldr	r3, [r7, #24]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	69fa      	ldr	r2, [r7, #28]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d902      	bls.n	80122dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d142      	bne.n	8012362 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	685a      	ldr	r2, [r3, #4]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	21e0      	movs	r1, #224	; 0xe0
 80122e8:	438a      	bics	r2, r1
 80122ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	685a      	ldr	r2, [r3, #4]
 80122f0:	2382      	movs	r3, #130	; 0x82
 80122f2:	005b      	lsls	r3, r3, #1
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d113      	bne.n	8012320 <SPI_WaitFlagStateUntilTimeout+0x98>
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	689a      	ldr	r2, [r3, #8]
 80122fc:	2380      	movs	r3, #128	; 0x80
 80122fe:	021b      	lsls	r3, r3, #8
 8012300:	429a      	cmp	r2, r3
 8012302:	d005      	beq.n	8012310 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	689a      	ldr	r2, [r3, #8]
 8012308:	2380      	movs	r3, #128	; 0x80
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	429a      	cmp	r2, r3
 801230e:	d107      	bne.n	8012320 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2140      	movs	r1, #64	; 0x40
 801231c:	438a      	bics	r2, r1
 801231e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012324:	2380      	movs	r3, #128	; 0x80
 8012326:	019b      	lsls	r3, r3, #6
 8012328:	429a      	cmp	r2, r3
 801232a:	d110      	bne.n	801234e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	491a      	ldr	r1, [pc, #104]	; (80123a0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8012338:	400a      	ands	r2, r1
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2180      	movs	r1, #128	; 0x80
 8012348:	0189      	lsls	r1, r1, #6
 801234a:	430a      	orrs	r2, r1
 801234c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	225d      	movs	r2, #93	; 0x5d
 8012352:	2101      	movs	r1, #1
 8012354:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	225c      	movs	r2, #92	; 0x5c
 801235a:	2100      	movs	r1, #0
 801235c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801235e:	2303      	movs	r3, #3
 8012360:	e017      	b.n	8012392 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d101      	bne.n	801236c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8012368:	2300      	movs	r3, #0
 801236a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801236c:	697b      	ldr	r3, [r7, #20]
 801236e:	3b01      	subs	r3, #1
 8012370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	68ba      	ldr	r2, [r7, #8]
 801237a:	4013      	ands	r3, r2
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	425a      	negs	r2, r3
 8012382:	4153      	adcs	r3, r2
 8012384:	b2db      	uxtb	r3, r3
 8012386:	001a      	movs	r2, r3
 8012388:	1dfb      	adds	r3, r7, #7
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	429a      	cmp	r2, r3
 801238e:	d197      	bne.n	80122c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012390:	2300      	movs	r3, #0
}
 8012392:	0018      	movs	r0, r3
 8012394:	46bd      	mov	sp, r7
 8012396:	b008      	add	sp, #32
 8012398:	bd80      	pop	{r7, pc}
 801239a:	46c0      	nop			; (mov r8, r8)
 801239c:	20000118 	.word	0x20000118
 80123a0:	ffffdfff 	.word	0xffffdfff

080123a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b08a      	sub	sp, #40	; 0x28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
 80123b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80123b2:	2317      	movs	r3, #23
 80123b4:	18fb      	adds	r3, r7, r3
 80123b6:	2200      	movs	r2, #0
 80123b8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80123ba:	f7fa f96d 	bl	800c698 <HAL_GetTick>
 80123be:	0002      	movs	r2, r0
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	1a9b      	subs	r3, r3, r2
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	18d3      	adds	r3, r2, r3
 80123c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80123ca:	f7fa f965 	bl	800c698 <HAL_GetTick>
 80123ce:	0003      	movs	r3, r0
 80123d0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	330c      	adds	r3, #12
 80123d8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80123da:	4b41      	ldr	r3, [pc, #260]	; (80124e0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80123dc:	681a      	ldr	r2, [r3, #0]
 80123de:	0013      	movs	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	189b      	adds	r3, r3, r2
 80123e4:	00da      	lsls	r2, r3, #3
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	0d1b      	lsrs	r3, r3, #20
 80123ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123ec:	4353      	muls	r3, r2
 80123ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80123f0:	e068      	b.n	80124c4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	23c0      	movs	r3, #192	; 0xc0
 80123f6:	00db      	lsls	r3, r3, #3
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d10a      	bne.n	8012412 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d107      	bne.n	8012412 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	b2da      	uxtb	r2, r3
 8012408:	2117      	movs	r1, #23
 801240a:	187b      	adds	r3, r7, r1
 801240c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801240e:	187b      	adds	r3, r7, r1
 8012410:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	3301      	adds	r3, #1
 8012416:	d055      	beq.n	80124c4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012418:	f7fa f93e 	bl	800c698 <HAL_GetTick>
 801241c:	0002      	movs	r2, r0
 801241e:	6a3b      	ldr	r3, [r7, #32]
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012424:	429a      	cmp	r2, r3
 8012426:	d902      	bls.n	801242e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	2b00      	cmp	r3, #0
 801242c:	d142      	bne.n	80124b4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	685a      	ldr	r2, [r3, #4]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	21e0      	movs	r1, #224	; 0xe0
 801243a:	438a      	bics	r2, r1
 801243c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	685a      	ldr	r2, [r3, #4]
 8012442:	2382      	movs	r3, #130	; 0x82
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	429a      	cmp	r2, r3
 8012448:	d113      	bne.n	8012472 <SPI_WaitFifoStateUntilTimeout+0xce>
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	689a      	ldr	r2, [r3, #8]
 801244e:	2380      	movs	r3, #128	; 0x80
 8012450:	021b      	lsls	r3, r3, #8
 8012452:	429a      	cmp	r2, r3
 8012454:	d005      	beq.n	8012462 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	689a      	ldr	r2, [r3, #8]
 801245a:	2380      	movs	r3, #128	; 0x80
 801245c:	00db      	lsls	r3, r3, #3
 801245e:	429a      	cmp	r2, r3
 8012460:	d107      	bne.n	8012472 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2140      	movs	r1, #64	; 0x40
 801246e:	438a      	bics	r2, r1
 8012470:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012476:	2380      	movs	r3, #128	; 0x80
 8012478:	019b      	lsls	r3, r3, #6
 801247a:	429a      	cmp	r2, r3
 801247c:	d110      	bne.n	80124a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	4916      	ldr	r1, [pc, #88]	; (80124e4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 801248a:	400a      	ands	r2, r1
 801248c:	601a      	str	r2, [r3, #0]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	681a      	ldr	r2, [r3, #0]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2180      	movs	r1, #128	; 0x80
 801249a:	0189      	lsls	r1, r1, #6
 801249c:	430a      	orrs	r2, r1
 801249e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	225d      	movs	r2, #93	; 0x5d
 80124a4:	2101      	movs	r1, #1
 80124a6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	225c      	movs	r2, #92	; 0x5c
 80124ac:	2100      	movs	r1, #0
 80124ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80124b0:	2303      	movs	r3, #3
 80124b2:	e010      	b.n	80124d6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d101      	bne.n	80124be <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80124ba:	2300      	movs	r3, #0
 80124bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	3b01      	subs	r3, #1
 80124c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	689b      	ldr	r3, [r3, #8]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	4013      	ands	r3, r2
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	d18e      	bne.n	80123f2 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80124d4:	2300      	movs	r3, #0
}
 80124d6:	0018      	movs	r0, r3
 80124d8:	46bd      	mov	sp, r7
 80124da:	b00a      	add	sp, #40	; 0x28
 80124dc:	bd80      	pop	{r7, pc}
 80124de:	46c0      	nop			; (mov r8, r8)
 80124e0:	20000118 	.word	0x20000118
 80124e4:	ffffdfff 	.word	0xffffdfff

080124e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80124f4:	68ba      	ldr	r2, [r7, #8]
 80124f6:	23c0      	movs	r3, #192	; 0xc0
 80124f8:	0159      	lsls	r1, r3, #5
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	0013      	movs	r3, r2
 8012502:	2200      	movs	r2, #0
 8012504:	f7ff ff4e 	bl	80123a4 <SPI_WaitFifoStateUntilTimeout>
 8012508:	1e03      	subs	r3, r0, #0
 801250a:	d007      	beq.n	801251c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012510:	2220      	movs	r2, #32
 8012512:	431a      	orrs	r2, r3
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012518:	2303      	movs	r3, #3
 801251a:	e027      	b.n	801256c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	68f8      	ldr	r0, [r7, #12]
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	9300      	str	r3, [sp, #0]
 8012524:	0013      	movs	r3, r2
 8012526:	2200      	movs	r2, #0
 8012528:	2180      	movs	r1, #128	; 0x80
 801252a:	f7ff fead 	bl	8012288 <SPI_WaitFlagStateUntilTimeout>
 801252e:	1e03      	subs	r3, r0, #0
 8012530:	d007      	beq.n	8012542 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012536:	2220      	movs	r2, #32
 8012538:	431a      	orrs	r2, r3
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801253e:	2303      	movs	r3, #3
 8012540:	e014      	b.n	801256c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012542:	68ba      	ldr	r2, [r7, #8]
 8012544:	23c0      	movs	r3, #192	; 0xc0
 8012546:	00d9      	lsls	r1, r3, #3
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	0013      	movs	r3, r2
 8012550:	2200      	movs	r2, #0
 8012552:	f7ff ff27 	bl	80123a4 <SPI_WaitFifoStateUntilTimeout>
 8012556:	1e03      	subs	r3, r0, #0
 8012558:	d007      	beq.n	801256a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801255e:	2220      	movs	r2, #32
 8012560:	431a      	orrs	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012566:	2303      	movs	r3, #3
 8012568:	e000      	b.n	801256c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801256a:	2300      	movs	r3, #0
}
 801256c:	0018      	movs	r0, r3
 801256e:	46bd      	mov	sp, r7
 8012570:	b004      	add	sp, #16
 8012572:	bd80      	pop	{r7, pc}

08012574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d101      	bne.n	8012586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012582:	2301      	movs	r3, #1
 8012584:	e04a      	b.n	801261c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	223d      	movs	r2, #61	; 0x3d
 801258a:	5c9b      	ldrb	r3, [r3, r2]
 801258c:	b2db      	uxtb	r3, r3
 801258e:	2b00      	cmp	r3, #0
 8012590:	d107      	bne.n	80125a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	223c      	movs	r2, #60	; 0x3c
 8012596:	2100      	movs	r1, #0
 8012598:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	0018      	movs	r0, r3
 801259e:	f7f9 fd75 	bl	800c08c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	223d      	movs	r2, #61	; 0x3d
 80125a6:	2102      	movs	r1, #2
 80125a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	3304      	adds	r3, #4
 80125b2:	0019      	movs	r1, r3
 80125b4:	0010      	movs	r0, r2
 80125b6:	f000 fca5 	bl	8012f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2248      	movs	r2, #72	; 0x48
 80125be:	2101      	movs	r1, #1
 80125c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	223e      	movs	r2, #62	; 0x3e
 80125c6:	2101      	movs	r1, #1
 80125c8:	5499      	strb	r1, [r3, r2]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	223f      	movs	r2, #63	; 0x3f
 80125ce:	2101      	movs	r1, #1
 80125d0:	5499      	strb	r1, [r3, r2]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2240      	movs	r2, #64	; 0x40
 80125d6:	2101      	movs	r1, #1
 80125d8:	5499      	strb	r1, [r3, r2]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2241      	movs	r2, #65	; 0x41
 80125de:	2101      	movs	r1, #1
 80125e0:	5499      	strb	r1, [r3, r2]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2242      	movs	r2, #66	; 0x42
 80125e6:	2101      	movs	r1, #1
 80125e8:	5499      	strb	r1, [r3, r2]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2243      	movs	r2, #67	; 0x43
 80125ee:	2101      	movs	r1, #1
 80125f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2244      	movs	r2, #68	; 0x44
 80125f6:	2101      	movs	r1, #1
 80125f8:	5499      	strb	r1, [r3, r2]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2245      	movs	r2, #69	; 0x45
 80125fe:	2101      	movs	r1, #1
 8012600:	5499      	strb	r1, [r3, r2]
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2246      	movs	r2, #70	; 0x46
 8012606:	2101      	movs	r1, #1
 8012608:	5499      	strb	r1, [r3, r2]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2247      	movs	r2, #71	; 0x47
 801260e:	2101      	movs	r1, #1
 8012610:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	223d      	movs	r2, #61	; 0x3d
 8012616:	2101      	movs	r1, #1
 8012618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801261a:	2300      	movs	r3, #0
}
 801261c:	0018      	movs	r0, r3
 801261e:	46bd      	mov	sp, r7
 8012620:	b002      	add	sp, #8
 8012622:	bd80      	pop	{r7, pc}

08012624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	223d      	movs	r2, #61	; 0x3d
 8012630:	5c9b      	ldrb	r3, [r3, r2]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b01      	cmp	r3, #1
 8012636:	d001      	beq.n	801263c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012638:	2301      	movs	r3, #1
 801263a:	e03f      	b.n	80126bc <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	223d      	movs	r2, #61	; 0x3d
 8012640:	2102      	movs	r1, #2
 8012642:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4a1e      	ldr	r2, [pc, #120]	; (80126c4 <HAL_TIM_Base_Start+0xa0>)
 801264a:	4293      	cmp	r3, r2
 801264c:	d014      	beq.n	8012678 <HAL_TIM_Base_Start+0x54>
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681a      	ldr	r2, [r3, #0]
 8012652:	2380      	movs	r3, #128	; 0x80
 8012654:	05db      	lsls	r3, r3, #23
 8012656:	429a      	cmp	r2, r3
 8012658:	d00e      	beq.n	8012678 <HAL_TIM_Base_Start+0x54>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4a1a      	ldr	r2, [pc, #104]	; (80126c8 <HAL_TIM_Base_Start+0xa4>)
 8012660:	4293      	cmp	r3, r2
 8012662:	d009      	beq.n	8012678 <HAL_TIM_Base_Start+0x54>
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	4a18      	ldr	r2, [pc, #96]	; (80126cc <HAL_TIM_Base_Start+0xa8>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d004      	beq.n	8012678 <HAL_TIM_Base_Start+0x54>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	4a17      	ldr	r2, [pc, #92]	; (80126d0 <HAL_TIM_Base_Start+0xac>)
 8012674:	4293      	cmp	r3, r2
 8012676:	d116      	bne.n	80126a6 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	4a15      	ldr	r2, [pc, #84]	; (80126d4 <HAL_TIM_Base_Start+0xb0>)
 8012680:	4013      	ands	r3, r2
 8012682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2b06      	cmp	r3, #6
 8012688:	d016      	beq.n	80126b8 <HAL_TIM_Base_Start+0x94>
 801268a:	68fa      	ldr	r2, [r7, #12]
 801268c:	2380      	movs	r3, #128	; 0x80
 801268e:	025b      	lsls	r3, r3, #9
 8012690:	429a      	cmp	r2, r3
 8012692:	d011      	beq.n	80126b8 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2101      	movs	r1, #1
 80126a0:	430a      	orrs	r2, r1
 80126a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126a4:	e008      	b.n	80126b8 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2101      	movs	r1, #1
 80126b2:	430a      	orrs	r2, r1
 80126b4:	601a      	str	r2, [r3, #0]
 80126b6:	e000      	b.n	80126ba <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126b8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80126ba:	2300      	movs	r3, #0
}
 80126bc:	0018      	movs	r0, r3
 80126be:	46bd      	mov	sp, r7
 80126c0:	b004      	add	sp, #16
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	40012c00 	.word	0x40012c00
 80126c8:	40000400 	.word	0x40000400
 80126cc:	40000800 	.word	0x40000800
 80126d0:	40014000 	.word	0x40014000
 80126d4:	00010007 	.word	0x00010007

080126d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	223d      	movs	r2, #61	; 0x3d
 80126e4:	5c9b      	ldrb	r3, [r3, r2]
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	d001      	beq.n	80126f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80126ec:	2301      	movs	r3, #1
 80126ee:	e047      	b.n	8012780 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	223d      	movs	r2, #61	; 0x3d
 80126f4:	2102      	movs	r1, #2
 80126f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	68da      	ldr	r2, [r3, #12]
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	2101      	movs	r1, #1
 8012704:	430a      	orrs	r2, r1
 8012706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a1e      	ldr	r2, [pc, #120]	; (8012788 <HAL_TIM_Base_Start_IT+0xb0>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d014      	beq.n	801273c <HAL_TIM_Base_Start_IT+0x64>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	2380      	movs	r3, #128	; 0x80
 8012718:	05db      	lsls	r3, r3, #23
 801271a:	429a      	cmp	r2, r3
 801271c:	d00e      	beq.n	801273c <HAL_TIM_Base_Start_IT+0x64>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4a1a      	ldr	r2, [pc, #104]	; (801278c <HAL_TIM_Base_Start_IT+0xb4>)
 8012724:	4293      	cmp	r3, r2
 8012726:	d009      	beq.n	801273c <HAL_TIM_Base_Start_IT+0x64>
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a18      	ldr	r2, [pc, #96]	; (8012790 <HAL_TIM_Base_Start_IT+0xb8>)
 801272e:	4293      	cmp	r3, r2
 8012730:	d004      	beq.n	801273c <HAL_TIM_Base_Start_IT+0x64>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4a17      	ldr	r2, [pc, #92]	; (8012794 <HAL_TIM_Base_Start_IT+0xbc>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d116      	bne.n	801276a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	689b      	ldr	r3, [r3, #8]
 8012742:	4a15      	ldr	r2, [pc, #84]	; (8012798 <HAL_TIM_Base_Start_IT+0xc0>)
 8012744:	4013      	ands	r3, r2
 8012746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b06      	cmp	r3, #6
 801274c:	d016      	beq.n	801277c <HAL_TIM_Base_Start_IT+0xa4>
 801274e:	68fa      	ldr	r2, [r7, #12]
 8012750:	2380      	movs	r3, #128	; 0x80
 8012752:	025b      	lsls	r3, r3, #9
 8012754:	429a      	cmp	r2, r3
 8012756:	d011      	beq.n	801277c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2101      	movs	r1, #1
 8012764:	430a      	orrs	r2, r1
 8012766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012768:	e008      	b.n	801277c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2101      	movs	r1, #1
 8012776:	430a      	orrs	r2, r1
 8012778:	601a      	str	r2, [r3, #0]
 801277a:	e000      	b.n	801277e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801277c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	0018      	movs	r0, r3
 8012782:	46bd      	mov	sp, r7
 8012784:	b004      	add	sp, #16
 8012786:	bd80      	pop	{r7, pc}
 8012788:	40012c00 	.word	0x40012c00
 801278c:	40000400 	.word	0x40000400
 8012790:	40000800 	.word	0x40000800
 8012794:	40014000 	.word	0x40014000
 8012798:	00010007 	.word	0x00010007

0801279c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b082      	sub	sp, #8
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80127ac:	2301      	movs	r3, #1
 80127ae:	e042      	b.n	8012836 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	223d      	movs	r2, #61	; 0x3d
 80127b4:	5c9b      	ldrb	r3, [r3, r2]
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d107      	bne.n	80127cc <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	223c      	movs	r2, #60	; 0x3c
 80127c0:	2100      	movs	r1, #0
 80127c2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	0018      	movs	r0, r3
 80127c8:	f7f9 fc86 	bl	800c0d8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	223d      	movs	r2, #61	; 0x3d
 80127d0:	2102      	movs	r1, #2
 80127d2:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	3304      	adds	r3, #4
 80127dc:	0019      	movs	r1, r3
 80127de:	0010      	movs	r0, r2
 80127e0:	f000 fb90 	bl	8012f04 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2108      	movs	r1, #8
 80127f0:	438a      	bics	r2, r1
 80127f2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	6819      	ldr	r1, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	683a      	ldr	r2, [r7, #0]
 8012800:	430a      	orrs	r2, r1
 8012802:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2248      	movs	r2, #72	; 0x48
 8012808:	2101      	movs	r1, #1
 801280a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	223e      	movs	r2, #62	; 0x3e
 8012810:	2101      	movs	r1, #1
 8012812:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	223f      	movs	r2, #63	; 0x3f
 8012818:	2101      	movs	r1, #1
 801281a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2244      	movs	r2, #68	; 0x44
 8012820:	2101      	movs	r1, #1
 8012822:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2245      	movs	r2, #69	; 0x45
 8012828:	2101      	movs	r1, #1
 801282a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	223d      	movs	r2, #61	; 0x3d
 8012830:	2101      	movs	r1, #1
 8012832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	0018      	movs	r0, r3
 8012838:	46bd      	mov	sp, r7
 801283a:	b002      	add	sp, #8
 801283c:	bd80      	pop	{r7, pc}
	...

08012840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d101      	bne.n	8012854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012850:	2301      	movs	r3, #1
 8012852:	e090      	b.n	8012976 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	223d      	movs	r2, #61	; 0x3d
 8012858:	5c9b      	ldrb	r3, [r3, r2]
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	d107      	bne.n	8012870 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	223c      	movs	r2, #60	; 0x3c
 8012864:	2100      	movs	r1, #0
 8012866:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	0018      	movs	r0, r3
 801286c:	f7f9 fbbc 	bl	800bfe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	223d      	movs	r2, #61	; 0x3d
 8012874:	2102      	movs	r1, #2
 8012876:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	689a      	ldr	r2, [r3, #8]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	493f      	ldr	r1, [pc, #252]	; (8012980 <HAL_TIM_Encoder_Init+0x140>)
 8012884:	400a      	ands	r2, r1
 8012886:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	3304      	adds	r3, #4
 8012890:	0019      	movs	r1, r3
 8012892:	0010      	movs	r0, r2
 8012894:	f000 fb36 	bl	8012f04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	699b      	ldr	r3, [r3, #24]
 80128a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	6a1b      	ldr	r3, [r3, #32]
 80128ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	697a      	ldr	r2, [r7, #20]
 80128b6:	4313      	orrs	r3, r2
 80128b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	4a31      	ldr	r2, [pc, #196]	; (8012984 <HAL_TIM_Encoder_Init+0x144>)
 80128be:	4013      	ands	r3, r2
 80128c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	689a      	ldr	r2, [r3, #8]
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	699b      	ldr	r3, [r3, #24]
 80128ca:	021b      	lsls	r3, r3, #8
 80128cc:	4313      	orrs	r3, r2
 80128ce:	693a      	ldr	r2, [r7, #16]
 80128d0:	4313      	orrs	r3, r2
 80128d2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	4a2c      	ldr	r2, [pc, #176]	; (8012988 <HAL_TIM_Encoder_Init+0x148>)
 80128d8:	4013      	ands	r3, r2
 80128da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	4a2b      	ldr	r2, [pc, #172]	; (801298c <HAL_TIM_Encoder_Init+0x14c>)
 80128e0:	4013      	ands	r3, r2
 80128e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	68da      	ldr	r2, [r3, #12]
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	69db      	ldr	r3, [r3, #28]
 80128ec:	021b      	lsls	r3, r3, #8
 80128ee:	4313      	orrs	r3, r2
 80128f0:	693a      	ldr	r2, [r7, #16]
 80128f2:	4313      	orrs	r3, r2
 80128f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	011a      	lsls	r2, r3, #4
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	6a1b      	ldr	r3, [r3, #32]
 8012900:	031b      	lsls	r3, r3, #12
 8012902:	4313      	orrs	r3, r2
 8012904:	693a      	ldr	r2, [r7, #16]
 8012906:	4313      	orrs	r3, r2
 8012908:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2222      	movs	r2, #34	; 0x22
 801290e:	4393      	bics	r3, r2
 8012910:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2288      	movs	r2, #136	; 0x88
 8012916:	4393      	bics	r3, r2
 8012918:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	685a      	ldr	r2, [r3, #4]
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	695b      	ldr	r3, [r3, #20]
 8012922:	011b      	lsls	r3, r3, #4
 8012924:	4313      	orrs	r3, r2
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	4313      	orrs	r3, r2
 801292a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	697a      	ldr	r2, [r7, #20]
 8012932:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	693a      	ldr	r2, [r7, #16]
 801293a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	68fa      	ldr	r2, [r7, #12]
 8012942:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2248      	movs	r2, #72	; 0x48
 8012948:	2101      	movs	r1, #1
 801294a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	223e      	movs	r2, #62	; 0x3e
 8012950:	2101      	movs	r1, #1
 8012952:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	223f      	movs	r2, #63	; 0x3f
 8012958:	2101      	movs	r1, #1
 801295a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2244      	movs	r2, #68	; 0x44
 8012960:	2101      	movs	r1, #1
 8012962:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2245      	movs	r2, #69	; 0x45
 8012968:	2101      	movs	r1, #1
 801296a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	223d      	movs	r2, #61	; 0x3d
 8012970:	2101      	movs	r1, #1
 8012972:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012974:	2300      	movs	r3, #0
}
 8012976:	0018      	movs	r0, r3
 8012978:	46bd      	mov	sp, r7
 801297a:	b006      	add	sp, #24
 801297c:	bd80      	pop	{r7, pc}
 801297e:	46c0      	nop			; (mov r8, r8)
 8012980:	fffebff8 	.word	0xfffebff8
 8012984:	fffffcfc 	.word	0xfffffcfc
 8012988:	fffff3f3 	.word	0xfffff3f3
 801298c:	ffff0f0f 	.word	0xffff0f0f

08012990 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012990:	b590      	push	{r4, r7, lr}
 8012992:	b085      	sub	sp, #20
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
 8012998:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 801299a:	200f      	movs	r0, #15
 801299c:	183b      	adds	r3, r7, r0
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	213e      	movs	r1, #62	; 0x3e
 80129a2:	5c52      	ldrb	r2, [r2, r1]
 80129a4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80129a6:	230e      	movs	r3, #14
 80129a8:	18fb      	adds	r3, r7, r3
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	213f      	movs	r1, #63	; 0x3f
 80129ae:	5c52      	ldrb	r2, [r2, r1]
 80129b0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80129b2:	240d      	movs	r4, #13
 80129b4:	193b      	adds	r3, r7, r4
 80129b6:	687a      	ldr	r2, [r7, #4]
 80129b8:	2144      	movs	r1, #68	; 0x44
 80129ba:	5c52      	ldrb	r2, [r2, r1]
 80129bc:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80129be:	230c      	movs	r3, #12
 80129c0:	18fb      	adds	r3, r7, r3
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	2145      	movs	r1, #69	; 0x45
 80129c6:	5c52      	ldrb	r2, [r2, r1]
 80129c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d112      	bne.n	80129f6 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80129d0:	183b      	adds	r3, r7, r0
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b01      	cmp	r3, #1
 80129d6:	d103      	bne.n	80129e0 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80129d8:	193b      	adds	r3, r7, r4
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d001      	beq.n	80129e4 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80129e0:	2301      	movs	r3, #1
 80129e2:	e095      	b.n	8012b10 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	223e      	movs	r2, #62	; 0x3e
 80129e8:	2102      	movs	r1, #2
 80129ea:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2244      	movs	r2, #68	; 0x44
 80129f0:	2102      	movs	r1, #2
 80129f2:	5499      	strb	r1, [r3, r2]
 80129f4:	e03d      	b.n	8012a72 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	2b04      	cmp	r3, #4
 80129fa:	d114      	bne.n	8012a26 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80129fc:	230e      	movs	r3, #14
 80129fe:	18fb      	adds	r3, r7, r3
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d104      	bne.n	8012a10 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8012a06:	230c      	movs	r3, #12
 8012a08:	18fb      	adds	r3, r7, r3
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	2b01      	cmp	r3, #1
 8012a0e:	d001      	beq.n	8012a14 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8012a10:	2301      	movs	r3, #1
 8012a12:	e07d      	b.n	8012b10 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	223f      	movs	r2, #63	; 0x3f
 8012a18:	2102      	movs	r1, #2
 8012a1a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2245      	movs	r2, #69	; 0x45
 8012a20:	2102      	movs	r1, #2
 8012a22:	5499      	strb	r1, [r3, r2]
 8012a24:	e025      	b.n	8012a72 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8012a26:	230f      	movs	r3, #15
 8012a28:	18fb      	adds	r3, r7, r3
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b01      	cmp	r3, #1
 8012a2e:	d10e      	bne.n	8012a4e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8012a30:	230e      	movs	r3, #14
 8012a32:	18fb      	adds	r3, r7, r3
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	2b01      	cmp	r3, #1
 8012a38:	d109      	bne.n	8012a4e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8012a3a:	230d      	movs	r3, #13
 8012a3c:	18fb      	adds	r3, r7, r3
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d104      	bne.n	8012a4e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8012a44:	230c      	movs	r3, #12
 8012a46:	18fb      	adds	r3, r7, r3
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	2b01      	cmp	r3, #1
 8012a4c:	d001      	beq.n	8012a52 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 8012a4e:	2301      	movs	r3, #1
 8012a50:	e05e      	b.n	8012b10 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	223e      	movs	r2, #62	; 0x3e
 8012a56:	2102      	movs	r1, #2
 8012a58:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	223f      	movs	r2, #63	; 0x3f
 8012a5e:	2102      	movs	r1, #2
 8012a60:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2244      	movs	r2, #68	; 0x44
 8012a66:	2102      	movs	r1, #2
 8012a68:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	2245      	movs	r2, #69	; 0x45
 8012a6e:	2102      	movs	r1, #2
 8012a70:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d003      	beq.n	8012a80 <HAL_TIM_Encoder_Start_IT+0xf0>
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	2b04      	cmp	r3, #4
 8012a7c:	d010      	beq.n	8012aa0 <HAL_TIM_Encoder_Start_IT+0x110>
 8012a7e:	e01f      	b.n	8012ac0 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	2201      	movs	r2, #1
 8012a86:	2100      	movs	r1, #0
 8012a88:	0018      	movs	r0, r3
 8012a8a:	f000 fb6f 	bl	801316c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	68da      	ldr	r2, [r3, #12]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2102      	movs	r1, #2
 8012a9a:	430a      	orrs	r2, r1
 8012a9c:	60da      	str	r2, [r3, #12]
      break;
 8012a9e:	e02e      	b.n	8012afe <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	2104      	movs	r1, #4
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	f000 fb5f 	bl	801316c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	68da      	ldr	r2, [r3, #12]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	2104      	movs	r1, #4
 8012aba:	430a      	orrs	r2, r1
 8012abc:	60da      	str	r2, [r3, #12]
      break;
 8012abe:	e01e      	b.n	8012afe <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	0018      	movs	r0, r3
 8012aca:	f000 fb4f 	bl	801316c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	2104      	movs	r1, #4
 8012ad6:	0018      	movs	r0, r3
 8012ad8:	f000 fb48 	bl	801316c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68da      	ldr	r2, [r3, #12]
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2102      	movs	r1, #2
 8012ae8:	430a      	orrs	r2, r1
 8012aea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	68da      	ldr	r2, [r3, #12]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2104      	movs	r1, #4
 8012af8:	430a      	orrs	r2, r1
 8012afa:	60da      	str	r2, [r3, #12]
      break;
 8012afc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2101      	movs	r1, #1
 8012b0a:	430a      	orrs	r2, r1
 8012b0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	0018      	movs	r0, r3
 8012b12:	46bd      	mov	sp, r7
 8012b14:	b005      	add	sp, #20
 8012b16:	bd90      	pop	{r4, r7, pc}

08012b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	691b      	ldr	r3, [r3, #16]
 8012b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012b30:	68bb      	ldr	r3, [r7, #8]
 8012b32:	2202      	movs	r2, #2
 8012b34:	4013      	ands	r3, r2
 8012b36:	d021      	beq.n	8012b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2202      	movs	r2, #2
 8012b3c:	4013      	ands	r3, r2
 8012b3e:	d01d      	beq.n	8012b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2203      	movs	r2, #3
 8012b46:	4252      	negs	r2, r2
 8012b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	699b      	ldr	r3, [r3, #24]
 8012b56:	2203      	movs	r2, #3
 8012b58:	4013      	ands	r3, r2
 8012b5a:	d004      	beq.n	8012b66 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	0018      	movs	r0, r3
 8012b60:	f7f5 ff04 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8012b64:	e007      	b.n	8012b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	0018      	movs	r0, r3
 8012b6a:	f000 f9b3 	bl	8012ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	0018      	movs	r0, r3
 8012b72:	f000 f9b7 	bl	8012ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	2204      	movs	r2, #4
 8012b80:	4013      	ands	r3, r2
 8012b82:	d022      	beq.n	8012bca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2204      	movs	r2, #4
 8012b88:	4013      	ands	r3, r2
 8012b8a:	d01e      	beq.n	8012bca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2205      	movs	r2, #5
 8012b92:	4252      	negs	r2, r2
 8012b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2202      	movs	r2, #2
 8012b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	699a      	ldr	r2, [r3, #24]
 8012ba2:	23c0      	movs	r3, #192	; 0xc0
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4013      	ands	r3, r2
 8012ba8:	d004      	beq.n	8012bb4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	0018      	movs	r0, r3
 8012bae:	f7f5 fedd 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8012bb2:	e007      	b.n	8012bc4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	0018      	movs	r0, r3
 8012bb8:	f000 f98c 	bl	8012ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	0018      	movs	r0, r3
 8012bc0:	f000 f990 	bl	8012ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	2208      	movs	r2, #8
 8012bce:	4013      	ands	r3, r2
 8012bd0:	d021      	beq.n	8012c16 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2208      	movs	r2, #8
 8012bd6:	4013      	ands	r3, r2
 8012bd8:	d01d      	beq.n	8012c16 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2209      	movs	r2, #9
 8012be0:	4252      	negs	r2, r2
 8012be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2204      	movs	r2, #4
 8012be8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	69db      	ldr	r3, [r3, #28]
 8012bf0:	2203      	movs	r2, #3
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	d004      	beq.n	8012c00 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	0018      	movs	r0, r3
 8012bfa:	f7f5 feb7 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8012bfe:	e007      	b.n	8012c10 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	0018      	movs	r0, r3
 8012c04:	f000 f966 	bl	8012ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	0018      	movs	r0, r3
 8012c0c:	f000 f96a 	bl	8012ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	2210      	movs	r2, #16
 8012c1a:	4013      	ands	r3, r2
 8012c1c:	d022      	beq.n	8012c64 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2210      	movs	r2, #16
 8012c22:	4013      	ands	r3, r2
 8012c24:	d01e      	beq.n	8012c64 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	2211      	movs	r2, #17
 8012c2c:	4252      	negs	r2, r2
 8012c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2208      	movs	r2, #8
 8012c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	69da      	ldr	r2, [r3, #28]
 8012c3c:	23c0      	movs	r3, #192	; 0xc0
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	4013      	ands	r3, r2
 8012c42:	d004      	beq.n	8012c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	0018      	movs	r0, r3
 8012c48:	f7f5 fe90 	bl	800896c <HAL_TIM_IC_CaptureCallback>
 8012c4c:	e007      	b.n	8012c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	0018      	movs	r0, r3
 8012c52:	f000 f93f 	bl	8012ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	0018      	movs	r0, r3
 8012c5a:	f000 f943 	bl	8012ee4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2200      	movs	r2, #0
 8012c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	2201      	movs	r2, #1
 8012c68:	4013      	ands	r3, r2
 8012c6a:	d00c      	beq.n	8012c86 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	4013      	ands	r3, r2
 8012c72:	d008      	beq.n	8012c86 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2202      	movs	r2, #2
 8012c7a:	4252      	negs	r2, r2
 8012c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	0018      	movs	r0, r3
 8012c82:	f7f9 f853 	bl	800bd2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2280      	movs	r2, #128	; 0x80
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	d104      	bne.n	8012c98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	2380      	movs	r3, #128	; 0x80
 8012c92:	019b      	lsls	r3, r3, #6
 8012c94:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012c96:	d00b      	beq.n	8012cb0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2280      	movs	r2, #128	; 0x80
 8012c9c:	4013      	ands	r3, r2
 8012c9e:	d007      	beq.n	8012cb0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4a1e      	ldr	r2, [pc, #120]	; (8012d20 <HAL_TIM_IRQHandler+0x208>)
 8012ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	0018      	movs	r0, r3
 8012cac:	f000 fb00 	bl	80132b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012cb0:	68ba      	ldr	r2, [r7, #8]
 8012cb2:	2380      	movs	r3, #128	; 0x80
 8012cb4:	005b      	lsls	r3, r3, #1
 8012cb6:	4013      	ands	r3, r2
 8012cb8:	d00b      	beq.n	8012cd2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	2280      	movs	r2, #128	; 0x80
 8012cbe:	4013      	ands	r3, r2
 8012cc0:	d007      	beq.n	8012cd2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4a17      	ldr	r2, [pc, #92]	; (8012d24 <HAL_TIM_IRQHandler+0x20c>)
 8012cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	0018      	movs	r0, r3
 8012cce:	f000 faf7 	bl	80132c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	2240      	movs	r2, #64	; 0x40
 8012cd6:	4013      	ands	r3, r2
 8012cd8:	d00c      	beq.n	8012cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2240      	movs	r2, #64	; 0x40
 8012cde:	4013      	ands	r3, r2
 8012ce0:	d008      	beq.n	8012cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2241      	movs	r2, #65	; 0x41
 8012ce8:	4252      	negs	r2, r2
 8012cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	0018      	movs	r0, r3
 8012cf0:	f000 f900 	bl	8012ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	2220      	movs	r2, #32
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	d00c      	beq.n	8012d16 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	2220      	movs	r2, #32
 8012d00:	4013      	ands	r3, r2
 8012d02:	d008      	beq.n	8012d16 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	2221      	movs	r2, #33	; 0x21
 8012d0a:	4252      	negs	r2, r2
 8012d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	0018      	movs	r0, r3
 8012d12:	f000 fac5 	bl	80132a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012d16:	46c0      	nop			; (mov r8, r8)
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	b004      	add	sp, #16
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	46c0      	nop			; (mov r8, r8)
 8012d20:	ffffdf7f 	.word	0xffffdf7f
 8012d24:	fffffeff 	.word	0xfffffeff

08012d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b084      	sub	sp, #16
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d32:	230f      	movs	r3, #15
 8012d34:	18fb      	adds	r3, r7, r3
 8012d36:	2200      	movs	r2, #0
 8012d38:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	223c      	movs	r2, #60	; 0x3c
 8012d3e:	5c9b      	ldrb	r3, [r3, r2]
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d101      	bne.n	8012d48 <HAL_TIM_ConfigClockSource+0x20>
 8012d44:	2302      	movs	r3, #2
 8012d46:	e0bc      	b.n	8012ec2 <HAL_TIM_ConfigClockSource+0x19a>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	223c      	movs	r2, #60	; 0x3c
 8012d4c:	2101      	movs	r1, #1
 8012d4e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	223d      	movs	r2, #61	; 0x3d
 8012d54:	2102      	movs	r1, #2
 8012d56:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	4a5a      	ldr	r2, [pc, #360]	; (8012ecc <HAL_TIM_ConfigClockSource+0x1a4>)
 8012d64:	4013      	ands	r3, r2
 8012d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	4a59      	ldr	r2, [pc, #356]	; (8012ed0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2280      	movs	r2, #128	; 0x80
 8012d7e:	0192      	lsls	r2, r2, #6
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d040      	beq.n	8012e06 <HAL_TIM_ConfigClockSource+0xde>
 8012d84:	2280      	movs	r2, #128	; 0x80
 8012d86:	0192      	lsls	r2, r2, #6
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d900      	bls.n	8012d8e <HAL_TIM_ConfigClockSource+0x66>
 8012d8c:	e088      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012d8e:	2280      	movs	r2, #128	; 0x80
 8012d90:	0152      	lsls	r2, r2, #5
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d100      	bne.n	8012d98 <HAL_TIM_ConfigClockSource+0x70>
 8012d96:	e088      	b.n	8012eaa <HAL_TIM_ConfigClockSource+0x182>
 8012d98:	2280      	movs	r2, #128	; 0x80
 8012d9a:	0152      	lsls	r2, r2, #5
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d900      	bls.n	8012da2 <HAL_TIM_ConfigClockSource+0x7a>
 8012da0:	e07e      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012da2:	2b70      	cmp	r3, #112	; 0x70
 8012da4:	d018      	beq.n	8012dd8 <HAL_TIM_ConfigClockSource+0xb0>
 8012da6:	d900      	bls.n	8012daa <HAL_TIM_ConfigClockSource+0x82>
 8012da8:	e07a      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012daa:	2b60      	cmp	r3, #96	; 0x60
 8012dac:	d04f      	beq.n	8012e4e <HAL_TIM_ConfigClockSource+0x126>
 8012dae:	d900      	bls.n	8012db2 <HAL_TIM_ConfigClockSource+0x8a>
 8012db0:	e076      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012db2:	2b50      	cmp	r3, #80	; 0x50
 8012db4:	d03b      	beq.n	8012e2e <HAL_TIM_ConfigClockSource+0x106>
 8012db6:	d900      	bls.n	8012dba <HAL_TIM_ConfigClockSource+0x92>
 8012db8:	e072      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012dba:	2b40      	cmp	r3, #64	; 0x40
 8012dbc:	d057      	beq.n	8012e6e <HAL_TIM_ConfigClockSource+0x146>
 8012dbe:	d900      	bls.n	8012dc2 <HAL_TIM_ConfigClockSource+0x9a>
 8012dc0:	e06e      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012dc2:	2b30      	cmp	r3, #48	; 0x30
 8012dc4:	d063      	beq.n	8012e8e <HAL_TIM_ConfigClockSource+0x166>
 8012dc6:	d86b      	bhi.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012dc8:	2b20      	cmp	r3, #32
 8012dca:	d060      	beq.n	8012e8e <HAL_TIM_ConfigClockSource+0x166>
 8012dcc:	d868      	bhi.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d05d      	beq.n	8012e8e <HAL_TIM_ConfigClockSource+0x166>
 8012dd2:	2b10      	cmp	r3, #16
 8012dd4:	d05b      	beq.n	8012e8e <HAL_TIM_ConfigClockSource+0x166>
 8012dd6:	e063      	b.n	8012ea0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012de8:	f000 f9a0 	bl	801312c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	689b      	ldr	r3, [r3, #8]
 8012df2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	2277      	movs	r2, #119	; 0x77
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	609a      	str	r2, [r3, #8]
      break;
 8012e04:	e052      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012e16:	f000 f989 	bl	801312c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	689a      	ldr	r2, [r3, #8]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	2180      	movs	r1, #128	; 0x80
 8012e26:	01c9      	lsls	r1, r1, #7
 8012e28:	430a      	orrs	r2, r1
 8012e2a:	609a      	str	r2, [r3, #8]
      break;
 8012e2c:	e03e      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e3a:	001a      	movs	r2, r3
 8012e3c:	f000 f8fa 	bl	8013034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2150      	movs	r1, #80	; 0x50
 8012e46:	0018      	movs	r0, r3
 8012e48:	f000 f954 	bl	80130f4 <TIM_ITRx_SetConfig>
      break;
 8012e4c:	e02e      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012e5a:	001a      	movs	r2, r3
 8012e5c:	f000 f918 	bl	8013090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	2160      	movs	r1, #96	; 0x60
 8012e66:	0018      	movs	r0, r3
 8012e68:	f000 f944 	bl	80130f4 <TIM_ITRx_SetConfig>
      break;
 8012e6c:	e01e      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012e7a:	001a      	movs	r2, r3
 8012e7c:	f000 f8da 	bl	8013034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2140      	movs	r1, #64	; 0x40
 8012e86:	0018      	movs	r0, r3
 8012e88:	f000 f934 	bl	80130f4 <TIM_ITRx_SetConfig>
      break;
 8012e8c:	e00e      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681a      	ldr	r2, [r3, #0]
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	0019      	movs	r1, r3
 8012e98:	0010      	movs	r0, r2
 8012e9a:	f000 f92b 	bl	80130f4 <TIM_ITRx_SetConfig>
      break;
 8012e9e:	e005      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8012ea0:	230f      	movs	r3, #15
 8012ea2:	18fb      	adds	r3, r7, r3
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	701a      	strb	r2, [r3, #0]
      break;
 8012ea8:	e000      	b.n	8012eac <HAL_TIM_ConfigClockSource+0x184>
      break;
 8012eaa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	223d      	movs	r2, #61	; 0x3d
 8012eb0:	2101      	movs	r1, #1
 8012eb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	223c      	movs	r2, #60	; 0x3c
 8012eb8:	2100      	movs	r1, #0
 8012eba:	5499      	strb	r1, [r3, r2]

  return status;
 8012ebc:	230f      	movs	r3, #15
 8012ebe:	18fb      	adds	r3, r7, r3
 8012ec0:	781b      	ldrb	r3, [r3, #0]
}
 8012ec2:	0018      	movs	r0, r3
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	b004      	add	sp, #16
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	46c0      	nop			; (mov r8, r8)
 8012ecc:	ffceff88 	.word	0xffceff88
 8012ed0:	ffff00ff 	.word	0xffff00ff

08012ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012edc:	46c0      	nop			; (mov r8, r8)
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	b002      	add	sp, #8
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b082      	sub	sp, #8
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012eec:	46c0      	nop			; (mov r8, r8)
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	b002      	add	sp, #8
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012efc:	46c0      	nop			; (mov r8, r8)
 8012efe:	46bd      	mov	sp, r7
 8012f00:	b002      	add	sp, #8
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	4a3f      	ldr	r2, [pc, #252]	; (8013014 <TIM_Base_SetConfig+0x110>)
 8012f18:	4293      	cmp	r3, r2
 8012f1a:	d00c      	beq.n	8012f36 <TIM_Base_SetConfig+0x32>
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	2380      	movs	r3, #128	; 0x80
 8012f20:	05db      	lsls	r3, r3, #23
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d007      	beq.n	8012f36 <TIM_Base_SetConfig+0x32>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4a3b      	ldr	r2, [pc, #236]	; (8013018 <TIM_Base_SetConfig+0x114>)
 8012f2a:	4293      	cmp	r3, r2
 8012f2c:	d003      	beq.n	8012f36 <TIM_Base_SetConfig+0x32>
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	4a3a      	ldr	r2, [pc, #232]	; (801301c <TIM_Base_SetConfig+0x118>)
 8012f32:	4293      	cmp	r3, r2
 8012f34:	d108      	bne.n	8012f48 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	2270      	movs	r2, #112	; 0x70
 8012f3a:	4393      	bics	r3, r2
 8012f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	68fa      	ldr	r2, [r7, #12]
 8012f44:	4313      	orrs	r3, r2
 8012f46:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4a32      	ldr	r2, [pc, #200]	; (8013014 <TIM_Base_SetConfig+0x110>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d01c      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f50:	687a      	ldr	r2, [r7, #4]
 8012f52:	2380      	movs	r3, #128	; 0x80
 8012f54:	05db      	lsls	r3, r3, #23
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d017      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4a2e      	ldr	r2, [pc, #184]	; (8013018 <TIM_Base_SetConfig+0x114>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d013      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	4a2d      	ldr	r2, [pc, #180]	; (801301c <TIM_Base_SetConfig+0x118>)
 8012f66:	4293      	cmp	r3, r2
 8012f68:	d00f      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	4a2c      	ldr	r2, [pc, #176]	; (8013020 <TIM_Base_SetConfig+0x11c>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d00b      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	4a2b      	ldr	r2, [pc, #172]	; (8013024 <TIM_Base_SetConfig+0x120>)
 8012f76:	4293      	cmp	r3, r2
 8012f78:	d007      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	4a2a      	ldr	r2, [pc, #168]	; (8013028 <TIM_Base_SetConfig+0x124>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d003      	beq.n	8012f8a <TIM_Base_SetConfig+0x86>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	4a29      	ldr	r2, [pc, #164]	; (801302c <TIM_Base_SetConfig+0x128>)
 8012f86:	4293      	cmp	r3, r2
 8012f88:	d108      	bne.n	8012f9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	4a28      	ldr	r2, [pc, #160]	; (8013030 <TIM_Base_SetConfig+0x12c>)
 8012f8e:	4013      	ands	r3, r2
 8012f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	68fa      	ldr	r2, [r7, #12]
 8012f98:	4313      	orrs	r3, r2
 8012f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2280      	movs	r2, #128	; 0x80
 8012fa0:	4393      	bics	r3, r2
 8012fa2:	001a      	movs	r2, r3
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	689a      	ldr	r2, [r3, #8]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	4a13      	ldr	r2, [pc, #76]	; (8013014 <TIM_Base_SetConfig+0x110>)
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d00b      	beq.n	8012fe2 <TIM_Base_SetConfig+0xde>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	4a15      	ldr	r2, [pc, #84]	; (8013024 <TIM_Base_SetConfig+0x120>)
 8012fce:	4293      	cmp	r3, r2
 8012fd0:	d007      	beq.n	8012fe2 <TIM_Base_SetConfig+0xde>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4a14      	ldr	r2, [pc, #80]	; (8013028 <TIM_Base_SetConfig+0x124>)
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d003      	beq.n	8012fe2 <TIM_Base_SetConfig+0xde>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4a13      	ldr	r2, [pc, #76]	; (801302c <TIM_Base_SetConfig+0x128>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d103      	bne.n	8012fea <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	691a      	ldr	r2, [r3, #16]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2201      	movs	r2, #1
 8012fee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	2201      	movs	r2, #1
 8012ff6:	4013      	ands	r3, r2
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d106      	bne.n	801300a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	2201      	movs	r2, #1
 8013002:	4393      	bics	r3, r2
 8013004:	001a      	movs	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	611a      	str	r2, [r3, #16]
  }
}
 801300a:	46c0      	nop			; (mov r8, r8)
 801300c:	46bd      	mov	sp, r7
 801300e:	b004      	add	sp, #16
 8013010:	bd80      	pop	{r7, pc}
 8013012:	46c0      	nop			; (mov r8, r8)
 8013014:	40012c00 	.word	0x40012c00
 8013018:	40000400 	.word	0x40000400
 801301c:	40000800 	.word	0x40000800
 8013020:	40002000 	.word	0x40002000
 8013024:	40014000 	.word	0x40014000
 8013028:	40014400 	.word	0x40014400
 801302c:	40014800 	.word	0x40014800
 8013030:	fffffcff 	.word	0xfffffcff

08013034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6a1b      	ldr	r3, [r3, #32]
 8013044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6a1b      	ldr	r3, [r3, #32]
 801304a:	2201      	movs	r2, #1
 801304c:	4393      	bics	r3, r2
 801304e:	001a      	movs	r2, r3
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	699b      	ldr	r3, [r3, #24]
 8013058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	22f0      	movs	r2, #240	; 0xf0
 801305e:	4393      	bics	r3, r2
 8013060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	011b      	lsls	r3, r3, #4
 8013066:	693a      	ldr	r2, [r7, #16]
 8013068:	4313      	orrs	r3, r2
 801306a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	220a      	movs	r2, #10
 8013070:	4393      	bics	r3, r2
 8013072:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013074:	697a      	ldr	r2, [r7, #20]
 8013076:	68bb      	ldr	r3, [r7, #8]
 8013078:	4313      	orrs	r3, r2
 801307a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	693a      	ldr	r2, [r7, #16]
 8013080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	621a      	str	r2, [r3, #32]
}
 8013088:	46c0      	nop			; (mov r8, r8)
 801308a:	46bd      	mov	sp, r7
 801308c:	b006      	add	sp, #24
 801308e:	bd80      	pop	{r7, pc}

08013090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	6a1b      	ldr	r3, [r3, #32]
 80130a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	6a1b      	ldr	r3, [r3, #32]
 80130a6:	2210      	movs	r2, #16
 80130a8:	4393      	bics	r3, r2
 80130aa:	001a      	movs	r2, r3
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	699b      	ldr	r3, [r3, #24]
 80130b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	4a0d      	ldr	r2, [pc, #52]	; (80130f0 <TIM_TI2_ConfigInputStage+0x60>)
 80130ba:	4013      	ands	r3, r2
 80130bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	031b      	lsls	r3, r3, #12
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	22a0      	movs	r2, #160	; 0xa0
 80130cc:	4393      	bics	r3, r2
 80130ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	011b      	lsls	r3, r3, #4
 80130d4:	697a      	ldr	r2, [r7, #20]
 80130d6:	4313      	orrs	r3, r2
 80130d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	693a      	ldr	r2, [r7, #16]
 80130de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	697a      	ldr	r2, [r7, #20]
 80130e4:	621a      	str	r2, [r3, #32]
}
 80130e6:	46c0      	nop			; (mov r8, r8)
 80130e8:	46bd      	mov	sp, r7
 80130ea:	b006      	add	sp, #24
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	46c0      	nop			; (mov r8, r8)
 80130f0:	ffff0fff 	.word	0xffff0fff

080130f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	689b      	ldr	r3, [r3, #8]
 8013102:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	4a08      	ldr	r2, [pc, #32]	; (8013128 <TIM_ITRx_SetConfig+0x34>)
 8013108:	4013      	ands	r3, r2
 801310a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801310c:	683a      	ldr	r2, [r7, #0]
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	4313      	orrs	r3, r2
 8013112:	2207      	movs	r2, #7
 8013114:	4313      	orrs	r3, r2
 8013116:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	68fa      	ldr	r2, [r7, #12]
 801311c:	609a      	str	r2, [r3, #8]
}
 801311e:	46c0      	nop			; (mov r8, r8)
 8013120:	46bd      	mov	sp, r7
 8013122:	b004      	add	sp, #16
 8013124:	bd80      	pop	{r7, pc}
 8013126:	46c0      	nop			; (mov r8, r8)
 8013128:	ffcfff8f 	.word	0xffcfff8f

0801312c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
 8013138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	689b      	ldr	r3, [r3, #8]
 801313e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	4a09      	ldr	r2, [pc, #36]	; (8013168 <TIM_ETR_SetConfig+0x3c>)
 8013144:	4013      	ands	r3, r2
 8013146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	021a      	lsls	r2, r3, #8
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	431a      	orrs	r2, r3
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	4313      	orrs	r3, r2
 8013154:	697a      	ldr	r2, [r7, #20]
 8013156:	4313      	orrs	r3, r2
 8013158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	697a      	ldr	r2, [r7, #20]
 801315e:	609a      	str	r2, [r3, #8]
}
 8013160:	46c0      	nop			; (mov r8, r8)
 8013162:	46bd      	mov	sp, r7
 8013164:	b006      	add	sp, #24
 8013166:	bd80      	pop	{r7, pc}
 8013168:	ffff00ff 	.word	0xffff00ff

0801316c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	221f      	movs	r2, #31
 801317c:	4013      	ands	r3, r2
 801317e:	2201      	movs	r2, #1
 8013180:	409a      	lsls	r2, r3
 8013182:	0013      	movs	r3, r2
 8013184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6a1b      	ldr	r3, [r3, #32]
 801318a:	697a      	ldr	r2, [r7, #20]
 801318c:	43d2      	mvns	r2, r2
 801318e:	401a      	ands	r2, r3
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6a1a      	ldr	r2, [r3, #32]
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	211f      	movs	r1, #31
 801319c:	400b      	ands	r3, r1
 801319e:	6879      	ldr	r1, [r7, #4]
 80131a0:	4099      	lsls	r1, r3
 80131a2:	000b      	movs	r3, r1
 80131a4:	431a      	orrs	r2, r3
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	621a      	str	r2, [r3, #32]
}
 80131aa:	46c0      	nop			; (mov r8, r8)
 80131ac:	46bd      	mov	sp, r7
 80131ae:	b006      	add	sp, #24
 80131b0:	bd80      	pop	{r7, pc}
	...

080131b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	223c      	movs	r2, #60	; 0x3c
 80131c2:	5c9b      	ldrb	r3, [r3, r2]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d101      	bne.n	80131cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80131c8:	2302      	movs	r3, #2
 80131ca:	e05a      	b.n	8013282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	223c      	movs	r2, #60	; 0x3c
 80131d0:	2101      	movs	r1, #1
 80131d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	223d      	movs	r2, #61	; 0x3d
 80131d8:	2102      	movs	r1, #2
 80131da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4a26      	ldr	r2, [pc, #152]	; (801328c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d108      	bne.n	8013208 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	4a25      	ldr	r2, [pc, #148]	; (8013290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80131fa:	4013      	ands	r3, r2
 80131fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	68fa      	ldr	r2, [r7, #12]
 8013204:	4313      	orrs	r3, r2
 8013206:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2270      	movs	r2, #112	; 0x70
 801320c:	4393      	bics	r3, r2
 801320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	4313      	orrs	r3, r2
 8013218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	68fa      	ldr	r2, [r7, #12]
 8013220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	4a19      	ldr	r2, [pc, #100]	; (801328c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8013228:	4293      	cmp	r3, r2
 801322a:	d014      	beq.n	8013256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	2380      	movs	r3, #128	; 0x80
 8013232:	05db      	lsls	r3, r3, #23
 8013234:	429a      	cmp	r2, r3
 8013236:	d00e      	beq.n	8013256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a15      	ldr	r2, [pc, #84]	; (8013294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d009      	beq.n	8013256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	4a14      	ldr	r2, [pc, #80]	; (8013298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013248:	4293      	cmp	r3, r2
 801324a:	d004      	beq.n	8013256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4a12      	ldr	r2, [pc, #72]	; (801329c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013252:	4293      	cmp	r3, r2
 8013254:	d10c      	bne.n	8013270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	2280      	movs	r2, #128	; 0x80
 801325a:	4393      	bics	r3, r2
 801325c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	4313      	orrs	r3, r2
 8013266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	223d      	movs	r2, #61	; 0x3d
 8013274:	2101      	movs	r1, #1
 8013276:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	223c      	movs	r2, #60	; 0x3c
 801327c:	2100      	movs	r1, #0
 801327e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013280:	2300      	movs	r3, #0
}
 8013282:	0018      	movs	r0, r3
 8013284:	46bd      	mov	sp, r7
 8013286:	b004      	add	sp, #16
 8013288:	bd80      	pop	{r7, pc}
 801328a:	46c0      	nop			; (mov r8, r8)
 801328c:	40012c00 	.word	0x40012c00
 8013290:	ff0fffff 	.word	0xff0fffff
 8013294:	40000400 	.word	0x40000400
 8013298:	40000800 	.word	0x40000800
 801329c:	40014000 	.word	0x40014000

080132a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80132a8:	46c0      	nop			; (mov r8, r8)
 80132aa:	46bd      	mov	sp, r7
 80132ac:	b002      	add	sp, #8
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b082      	sub	sp, #8
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80132b8:	46c0      	nop			; (mov r8, r8)
 80132ba:	46bd      	mov	sp, r7
 80132bc:	b002      	add	sp, #8
 80132be:	bd80      	pop	{r7, pc}

080132c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80132c8:	46c0      	nop			; (mov r8, r8)
 80132ca:	46bd      	mov	sp, r7
 80132cc:	b002      	add	sp, #8
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <LL_DMA_ConfigTransfer>:
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 80132e0:	4a0c      	ldr	r2, [pc, #48]	; (8013314 <LL_DMA_ConfigTransfer+0x44>)
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	18d3      	adds	r3, r2, r3
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	001a      	movs	r2, r3
 80132ea:	697b      	ldr	r3, [r7, #20]
 80132ec:	18d3      	adds	r3, r2, r3
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a09      	ldr	r2, [pc, #36]	; (8013318 <LL_DMA_ConfigTransfer+0x48>)
 80132f2:	4013      	ands	r3, r2
 80132f4:	0019      	movs	r1, r3
 80132f6:	4a07      	ldr	r2, [pc, #28]	; (8013314 <LL_DMA_ConfigTransfer+0x44>)
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	18d3      	adds	r3, r2, r3
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	001a      	movs	r2, r3
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	18d3      	adds	r3, r2, r3
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	430a      	orrs	r2, r1
 8013308:	601a      	str	r2, [r3, #0]
}
 801330a:	46c0      	nop			; (mov r8, r8)
 801330c:	46bd      	mov	sp, r7
 801330e:	b006      	add	sp, #24
 8013310:	bd80      	pop	{r7, pc}
 8013312:	46c0      	nop			; (mov r8, r8)
 8013314:	0802b020 	.word	0x0802b020
 8013318:	ffff800f 	.word	0xffff800f

0801331c <LL_DMA_SetDataLength>:
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 801332c:	4a0b      	ldr	r2, [pc, #44]	; (801335c <LL_DMA_SetDataLength+0x40>)
 801332e:	68bb      	ldr	r3, [r7, #8]
 8013330:	18d3      	adds	r3, r2, r3
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	001a      	movs	r2, r3
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	18d3      	adds	r3, r2, r3
 801333a:	685b      	ldr	r3, [r3, #4]
 801333c:	0c1b      	lsrs	r3, r3, #16
 801333e:	0419      	lsls	r1, r3, #16
 8013340:	4a06      	ldr	r2, [pc, #24]	; (801335c <LL_DMA_SetDataLength+0x40>)
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	18d3      	adds	r3, r2, r3
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	001a      	movs	r2, r3
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	430a      	orrs	r2, r1
 8013352:	605a      	str	r2, [r3, #4]
}
 8013354:	46c0      	nop			; (mov r8, r8)
 8013356:	46bd      	mov	sp, r7
 8013358:	b006      	add	sp, #24
 801335a:	bd80      	pop	{r7, pc}
 801335c:	0802b020 	.word	0x0802b020

08013360 <LL_DMA_SetMemoryAddress>:
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 8013370:	4a06      	ldr	r2, [pc, #24]	; (801338c <LL_DMA_SetMemoryAddress+0x2c>)
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	18d3      	adds	r3, r2, r3
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	001a      	movs	r2, r3
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	18d3      	adds	r3, r2, r3
 801337e:	687a      	ldr	r2, [r7, #4]
 8013380:	60da      	str	r2, [r3, #12]
}
 8013382:	46c0      	nop			; (mov r8, r8)
 8013384:	46bd      	mov	sp, r7
 8013386:	b006      	add	sp, #24
 8013388:	bd80      	pop	{r7, pc}
 801338a:	46c0      	nop			; (mov r8, r8)
 801338c:	0802b020 	.word	0x0802b020

08013390 <LL_DMA_SetPeriphAddress>:
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b086      	sub	sp, #24
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 80133a0:	4a06      	ldr	r2, [pc, #24]	; (80133bc <LL_DMA_SetPeriphAddress+0x2c>)
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	18d3      	adds	r3, r2, r3
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	001a      	movs	r2, r3
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	18d3      	adds	r3, r2, r3
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	609a      	str	r2, [r3, #8]
}
 80133b2:	46c0      	nop			; (mov r8, r8)
 80133b4:	46bd      	mov	sp, r7
 80133b6:	b006      	add	sp, #24
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	46c0      	nop			; (mov r8, r8)
 80133bc:	0802b020 	.word	0x0802b020

080133c0 <LL_DMA_SetPeriphRequest>:
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	0a9b      	lsrs	r3, r3, #10
 80133d0:	4a0f      	ldr	r2, [pc, #60]	; (8013410 <LL_DMA_SetPeriphRequest+0x50>)
 80133d2:	405a      	eors	r2, r3
 80133d4:	0013      	movs	r3, r2
 80133d6:	00db      	lsls	r3, r3, #3
 80133d8:	1a9b      	subs	r3, r3, r2
 80133da:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	18d3      	adds	r3, r2, r3
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	4a0b      	ldr	r2, [pc, #44]	; (8013414 <LL_DMA_SetPeriphRequest+0x54>)
 80133e6:	4694      	mov	ip, r2
 80133e8:	4463      	add	r3, ip
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	227f      	movs	r2, #127	; 0x7f
 80133ee:	4393      	bics	r3, r2
 80133f0:	0019      	movs	r1, r3
 80133f2:	68ba      	ldr	r2, [r7, #8]
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	18d3      	adds	r3, r2, r3
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	4a06      	ldr	r2, [pc, #24]	; (8013414 <LL_DMA_SetPeriphRequest+0x54>)
 80133fc:	4694      	mov	ip, r2
 80133fe:	4463      	add	r3, ip
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	430a      	orrs	r2, r1
 8013404:	601a      	str	r2, [r3, #0]
}
 8013406:	46c0      	nop			; (mov r8, r8)
 8013408:	46bd      	mov	sp, r7
 801340a:	b006      	add	sp, #24
 801340c:	bd80      	pop	{r7, pc}
 801340e:	46c0      	nop			; (mov r8, r8)
 8013410:	00100080 	.word	0x00100080
 8013414:	40020800 	.word	0x40020800

08013418 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	60f8      	str	r0, [r7, #12]
 8013420:	60b9      	str	r1, [r7, #8]
 8013422:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 801342c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 8013432:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 8013438:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 801343e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 8013444:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 801344a:	431a      	orrs	r2, r3
 801344c:	68b9      	ldr	r1, [r7, #8]
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	0018      	movs	r0, r3
 8013452:	f7ff ff3d 	bl	80132d0 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	68b9      	ldr	r1, [r7, #8]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	0018      	movs	r0, r3
 8013460:	f7ff ff7e 	bl	8013360 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	68b9      	ldr	r1, [r7, #8]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	0018      	movs	r0, r3
 801346e:	f7ff ff8f 	bl	8013390 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a1a      	ldr	r2, [r3, #32]
 8013476:	68b9      	ldr	r1, [r7, #8]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	0018      	movs	r0, r3
 801347c:	f7ff ff4e 	bl	801331c <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013484:	68b9      	ldr	r1, [r7, #8]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	0018      	movs	r0, r3
 801348a:	f7ff ff99 	bl	80133c0 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 801348e:	2300      	movs	r3, #0
}
 8013490:	0018      	movs	r0, r3
 8013492:	46bd      	mov	sp, r7
 8013494:	b004      	add	sp, #16
 8013496:	bd80      	pop	{r7, pc}

08013498 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2200      	movs	r2, #0
 80134a4:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2200      	movs	r2, #0
 80134aa:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2200      	movs	r2, #0
 80134b0:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2200      	movs	r2, #0
 80134b6:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2200      	movs	r2, #0
 80134bc:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2200      	movs	r2, #0
 80134c2:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2200      	movs	r2, #0
 80134ce:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2200      	movs	r2, #0
 80134da:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80134e2:	46c0      	nop			; (mov r8, r8)
 80134e4:	46bd      	mov	sp, r7
 80134e6:	b002      	add	sp, #8
 80134e8:	bd80      	pop	{r7, pc}

080134ea <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80134ea:	b580      	push	{r7, lr}
 80134ec:	b084      	sub	sp, #16
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	60f8      	str	r0, [r7, #12]
 80134f2:	60b9      	str	r1, [r7, #8]
 80134f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6819      	ldr	r1, [r3, #0]
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	435b      	muls	r3, r3
 80134fe:	001a      	movs	r2, r3
 8013500:	0013      	movs	r3, r2
 8013502:	005b      	lsls	r3, r3, #1
 8013504:	189b      	adds	r3, r3, r2
 8013506:	43db      	mvns	r3, r3
 8013508:	400b      	ands	r3, r1
 801350a:	001a      	movs	r2, r3
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	435b      	muls	r3, r3
 8013510:	6879      	ldr	r1, [r7, #4]
 8013512:	434b      	muls	r3, r1
 8013514:	431a      	orrs	r2, r3
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	601a      	str	r2, [r3, #0]
}
 801351a:	46c0      	nop			; (mov r8, r8)
 801351c:	46bd      	mov	sp, r7
 801351e:	b004      	add	sp, #16
 8013520:	bd80      	pop	{r7, pc}

08013522 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b084      	sub	sp, #16
 8013526:	af00      	add	r7, sp, #0
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	43d2      	mvns	r2, r2
 8013536:	401a      	ands	r2, r3
 8013538:	68bb      	ldr	r3, [r7, #8]
 801353a:	6879      	ldr	r1, [r7, #4]
 801353c:	434b      	muls	r3, r1
 801353e:	431a      	orrs	r2, r3
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	605a      	str	r2, [r3, #4]
}
 8013544:	46c0      	nop			; (mov r8, r8)
 8013546:	46bd      	mov	sp, r7
 8013548:	b004      	add	sp, #16
 801354a:	bd80      	pop	{r7, pc}

0801354c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	60f8      	str	r0, [r7, #12]
 8013554:	60b9      	str	r1, [r7, #8]
 8013556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	6899      	ldr	r1, [r3, #8]
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	435b      	muls	r3, r3
 8013560:	001a      	movs	r2, r3
 8013562:	0013      	movs	r3, r2
 8013564:	005b      	lsls	r3, r3, #1
 8013566:	189b      	adds	r3, r3, r2
 8013568:	43db      	mvns	r3, r3
 801356a:	400b      	ands	r3, r1
 801356c:	001a      	movs	r2, r3
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	435b      	muls	r3, r3
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	434b      	muls	r3, r1
 8013576:	431a      	orrs	r2, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	609a      	str	r2, [r3, #8]
}
 801357c:	46c0      	nop			; (mov r8, r8)
 801357e:	46bd      	mov	sp, r7
 8013580:	b004      	add	sp, #16
 8013582:	bd80      	pop	{r7, pc}

08013584 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	60b9      	str	r1, [r7, #8]
 801358e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	68d9      	ldr	r1, [r3, #12]
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	435b      	muls	r3, r3
 8013598:	001a      	movs	r2, r3
 801359a:	0013      	movs	r3, r2
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	189b      	adds	r3, r3, r2
 80135a0:	43db      	mvns	r3, r3
 80135a2:	400b      	ands	r3, r1
 80135a4:	001a      	movs	r2, r3
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	435b      	muls	r3, r3
 80135aa:	6879      	ldr	r1, [r7, #4]
 80135ac:	434b      	muls	r3, r1
 80135ae:	431a      	orrs	r2, r3
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	60da      	str	r2, [r3, #12]
}
 80135b4:	46c0      	nop			; (mov r8, r8)
 80135b6:	46bd      	mov	sp, r7
 80135b8:	b004      	add	sp, #16
 80135ba:	bd80      	pop	{r7, pc}

080135bc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	6a19      	ldr	r1, [r3, #32]
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	435b      	muls	r3, r3
 80135d0:	68ba      	ldr	r2, [r7, #8]
 80135d2:	4353      	muls	r3, r2
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	435a      	muls	r2, r3
 80135d8:	0013      	movs	r3, r2
 80135da:	011b      	lsls	r3, r3, #4
 80135dc:	1a9b      	subs	r3, r3, r2
 80135de:	43db      	mvns	r3, r3
 80135e0:	400b      	ands	r3, r1
 80135e2:	001a      	movs	r2, r3
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	435b      	muls	r3, r3
 80135e8:	68b9      	ldr	r1, [r7, #8]
 80135ea:	434b      	muls	r3, r1
 80135ec:	68b9      	ldr	r1, [r7, #8]
 80135ee:	434b      	muls	r3, r1
 80135f0:	6879      	ldr	r1, [r7, #4]
 80135f2:	434b      	muls	r3, r1
 80135f4:	431a      	orrs	r2, r3
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80135fa:	46c0      	nop			; (mov r8, r8)
 80135fc:	46bd      	mov	sp, r7
 80135fe:	b004      	add	sp, #16
 8013600:	bd80      	pop	{r7, pc}

08013602 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8013602:	b580      	push	{r7, lr}
 8013604:	b084      	sub	sp, #16
 8013606:	af00      	add	r7, sp, #0
 8013608:	60f8      	str	r0, [r7, #12]
 801360a:	60b9      	str	r1, [r7, #8]
 801360c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	0a1b      	lsrs	r3, r3, #8
 8013616:	68ba      	ldr	r2, [r7, #8]
 8013618:	0a12      	lsrs	r2, r2, #8
 801361a:	4353      	muls	r3, r2
 801361c:	68ba      	ldr	r2, [r7, #8]
 801361e:	0a12      	lsrs	r2, r2, #8
 8013620:	4353      	muls	r3, r2
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	0a12      	lsrs	r2, r2, #8
 8013626:	435a      	muls	r2, r3
 8013628:	0013      	movs	r3, r2
 801362a:	011b      	lsls	r3, r3, #4
 801362c:	1a9b      	subs	r3, r3, r2
 801362e:	43db      	mvns	r3, r3
 8013630:	400b      	ands	r3, r1
 8013632:	001a      	movs	r2, r3
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	0a1b      	lsrs	r3, r3, #8
 8013638:	68b9      	ldr	r1, [r7, #8]
 801363a:	0a09      	lsrs	r1, r1, #8
 801363c:	434b      	muls	r3, r1
 801363e:	68b9      	ldr	r1, [r7, #8]
 8013640:	0a09      	lsrs	r1, r1, #8
 8013642:	434b      	muls	r3, r1
 8013644:	68b9      	ldr	r1, [r7, #8]
 8013646:	0a09      	lsrs	r1, r1, #8
 8013648:	434b      	muls	r3, r1
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	434b      	muls	r3, r1
 801364e:	431a      	orrs	r2, r3
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8013654:	46c0      	nop			; (mov r8, r8)
 8013656:	46bd      	mov	sp, r7
 8013658:	b004      	add	sp, #16
 801365a:	bd80      	pop	{r7, pc}

0801365c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b084      	sub	sp, #16
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 801366a:	e047      	b.n	80136fc <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 801366c:	683b      	ldr	r3, [r7, #0]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	2101      	movs	r1, #1
 8013672:	68fa      	ldr	r2, [r7, #12]
 8013674:	4091      	lsls	r1, r2
 8013676:	000a      	movs	r2, r1
 8013678:	4013      	ands	r3, r2
 801367a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d039      	beq.n	80136f6 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	2b01      	cmp	r3, #1
 8013688:	d003      	beq.n	8013692 <LL_GPIO_Init+0x36>
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	2b02      	cmp	r3, #2
 8013690:	d10d      	bne.n	80136ae <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	689a      	ldr	r2, [r3, #8]
 8013696:	68b9      	ldr	r1, [r7, #8]
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	0018      	movs	r0, r3
 801369c:	f7ff ff56 	bl	801354c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	68da      	ldr	r2, [r3, #12]
 80136a4:	68b9      	ldr	r1, [r7, #8]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	0018      	movs	r0, r3
 80136aa:	f7ff ff3a 	bl	8013522 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	691a      	ldr	r2, [r3, #16]
 80136b2:	68b9      	ldr	r1, [r7, #8]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	0018      	movs	r0, r3
 80136b8:	f7ff ff64 	bl	8013584 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	d111      	bne.n	80136e8 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	2bff      	cmp	r3, #255	; 0xff
 80136c8:	d807      	bhi.n	80136da <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	695a      	ldr	r2, [r3, #20]
 80136ce:	68b9      	ldr	r1, [r7, #8]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	0018      	movs	r0, r3
 80136d4:	f7ff ff72 	bl	80135bc <LL_GPIO_SetAFPin_0_7>
 80136d8:	e006      	b.n	80136e8 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	695a      	ldr	r2, [r3, #20]
 80136de:	68b9      	ldr	r1, [r7, #8]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	0018      	movs	r0, r3
 80136e4:	f7ff ff8d 	bl	8013602 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	685a      	ldr	r2, [r3, #4]
 80136ec:	68b9      	ldr	r1, [r7, #8]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	0018      	movs	r0, r3
 80136f2:	f7ff fefa 	bl	80134ea <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	3301      	adds	r3, #1
 80136fa:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	40da      	lsrs	r2, r3
 8013704:	1e13      	subs	r3, r2, #0
 8013706:	d1b1      	bne.n	801366c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8013708:	2300      	movs	r3, #0
}
 801370a:	0018      	movs	r0, r3
 801370c:	46bd      	mov	sp, r7
 801370e:	b004      	add	sp, #16
 8013710:	bd80      	pop	{r7, pc}

08013712 <LL_LPUART_IsEnabled>:
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b082      	sub	sp, #8
 8013716:	af00      	add	r7, sp, #0
 8013718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2201      	movs	r2, #1
 8013720:	4013      	ands	r3, r2
 8013722:	2b01      	cmp	r3, #1
 8013724:	d101      	bne.n	801372a <LL_LPUART_IsEnabled+0x18>
 8013726:	2301      	movs	r3, #1
 8013728:	e000      	b.n	801372c <LL_LPUART_IsEnabled+0x1a>
 801372a:	2300      	movs	r3, #0
}
 801372c:	0018      	movs	r0, r3
 801372e:	46bd      	mov	sp, r7
 8013730:	b002      	add	sp, #8
 8013732:	bd80      	pop	{r7, pc}

08013734 <LL_LPUART_SetPrescaler>:
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013742:	220f      	movs	r2, #15
 8013744:	4393      	bics	r3, r2
 8013746:	683a      	ldr	r2, [r7, #0]
 8013748:	b292      	uxth	r2, r2
 801374a:	431a      	orrs	r2, r3
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8013750:	46c0      	nop			; (mov r8, r8)
 8013752:	46bd      	mov	sp, r7
 8013754:	b002      	add	sp, #8
 8013756:	bd80      	pop	{r7, pc}

08013758 <LL_LPUART_SetStopBitsLength>:
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	4a05      	ldr	r2, [pc, #20]	; (801377c <LL_LPUART_SetStopBitsLength+0x24>)
 8013768:	401a      	ands	r2, r3
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	431a      	orrs	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	605a      	str	r2, [r3, #4]
}
 8013772:	46c0      	nop			; (mov r8, r8)
 8013774:	46bd      	mov	sp, r7
 8013776:	b002      	add	sp, #8
 8013778:	bd80      	pop	{r7, pc}
 801377a:	46c0      	nop			; (mov r8, r8)
 801377c:	ffffcfff 	.word	0xffffcfff

08013780 <LL_LPUART_SetHWFlowCtrl>:
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b082      	sub	sp, #8
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	689b      	ldr	r3, [r3, #8]
 801378e:	4a05      	ldr	r2, [pc, #20]	; (80137a4 <LL_LPUART_SetHWFlowCtrl+0x24>)
 8013790:	401a      	ands	r2, r3
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	431a      	orrs	r2, r3
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	609a      	str	r2, [r3, #8]
}
 801379a:	46c0      	nop			; (mov r8, r8)
 801379c:	46bd      	mov	sp, r7
 801379e:	b002      	add	sp, #8
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	46c0      	nop			; (mov r8, r8)
 80137a4:	fffffcff 	.word	0xfffffcff

080137a8 <LL_LPUART_SetBaudRate>:
{
 80137a8:	b5b0      	push	{r4, r5, r7, lr}
 80137aa:	b08c      	sub	sp, #48	; 0x30
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80137b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80137b2:	627a      	str	r2, [r7, #36]	; 0x24
 80137b4:	623b      	str	r3, [r7, #32]
  if (BaudRate != 0U)
 80137b6:	6a3b      	ldr	r3, [r7, #32]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d030      	beq.n	801381e <LL_LPUART_SetBaudRate+0x76>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 80137bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137be:	61bb      	str	r3, [r7, #24]
 80137c0:	2300      	movs	r3, #0
 80137c2:	61fb      	str	r3, [r7, #28]
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	001a      	movs	r2, r3
 80137ca:	4b17      	ldr	r3, [pc, #92]	; (8013828 <LL_LPUART_SetBaudRate+0x80>)
 80137cc:	0052      	lsls	r2, r2, #1
 80137ce:	5ad3      	ldrh	r3, [r2, r3]
 80137d0:	613b      	str	r3, [r7, #16]
 80137d2:	2300      	movs	r3, #0
 80137d4:	617b      	str	r3, [r7, #20]
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	69b8      	ldr	r0, [r7, #24]
 80137dc:	69f9      	ldr	r1, [r7, #28]
 80137de:	f7f2 fecf 	bl	8006580 <__aeabi_uldivmod>
 80137e2:	0002      	movs	r2, r0
 80137e4:	000b      	movs	r3, r1
 80137e6:	0e11      	lsrs	r1, r2, #24
 80137e8:	021d      	lsls	r5, r3, #8
 80137ea:	430d      	orrs	r5, r1
 80137ec:	0214      	lsls	r4, r2, #8
 80137ee:	6a3b      	ldr	r3, [r7, #32]
 80137f0:	085b      	lsrs	r3, r3, #1
 80137f2:	60bb      	str	r3, [r7, #8]
 80137f4:	2300      	movs	r3, #0
 80137f6:	60fb      	str	r3, [r7, #12]
 80137f8:	68b8      	ldr	r0, [r7, #8]
 80137fa:	68f9      	ldr	r1, [r7, #12]
 80137fc:	1900      	adds	r0, r0, r4
 80137fe:	4169      	adcs	r1, r5
 8013800:	6a3b      	ldr	r3, [r7, #32]
 8013802:	603b      	str	r3, [r7, #0]
 8013804:	2300      	movs	r3, #0
 8013806:	607b      	str	r3, [r7, #4]
 8013808:	683a      	ldr	r2, [r7, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f7f2 feb8 	bl	8006580 <__aeabi_uldivmod>
 8013810:	0002      	movs	r2, r0
 8013812:	000b      	movs	r3, r1
 8013814:	0013      	movs	r3, r2
 8013816:	031b      	lsls	r3, r3, #12
 8013818:	0b1a      	lsrs	r2, r3, #12
 801381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381c:	60da      	str	r2, [r3, #12]
}
 801381e:	46c0      	nop			; (mov r8, r8)
 8013820:	46bd      	mov	sp, r7
 8013822:	b00c      	add	sp, #48	; 0x30
 8013824:	bdb0      	pop	{r4, r5, r7, pc}
 8013826:	46c0      	nop			; (mov r8, r8)
 8013828:	0802b028 	.word	0x0802b028

0801382c <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b084      	sub	sp, #16
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8013836:	230f      	movs	r3, #15
 8013838:	18fb      	adds	r3, r7, r3
 801383a:	2201      	movs	r2, #1
 801383c:	701a      	strb	r2, [r3, #0]
#if defined(LPUART2)
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 801383e:	2300      	movs	r3, #0
 8013840:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	0018      	movs	r0, r3
 8013846:	f7ff ff64 	bl	8013712 <LL_LPUART_IsEnabled>
 801384a:	1e03      	subs	r3, r0, #0
 801384c:	d14d      	bne.n	80138ea <LL_LPUART_Init+0xbe>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	4a29      	ldr	r2, [pc, #164]	; (80138f8 <LL_LPUART_Init+0xcc>)
 8013854:	401a      	ands	r2, r3
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	6899      	ldr	r1, [r3, #8]
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	691b      	ldr	r3, [r3, #16]
 801385e:	4319      	orrs	r1, r3
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	695b      	ldr	r3, [r3, #20]
 8013864:	430b      	orrs	r3, r1
 8013866:	431a      	orrs	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	68da      	ldr	r2, [r3, #12]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	0011      	movs	r1, r2
 8013874:	0018      	movs	r0, r3
 8013876:	f7ff ff6f 	bl	8013758 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	699a      	ldr	r2, [r3, #24]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	0011      	movs	r1, r2
 8013882:	0018      	movs	r0, r3
 8013884:	f7ff ff7c 	bl	8013780 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
#if defined(LPUART2)
    if (LPUARTx == LPUART1)
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	4a1c      	ldr	r2, [pc, #112]	; (80138fc <LL_LPUART_Init+0xd0>)
 801388c:	4293      	cmp	r3, r2
 801388e:	d107      	bne.n	80138a0 <LL_LPUART_Init+0x74>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8013890:	23c0      	movs	r3, #192	; 0xc0
 8013892:	011b      	lsls	r3, r3, #4
 8013894:	0018      	movs	r0, r3
 8013896:	f000 f8bf 	bl	8013a18 <LL_RCC_GetLPUARTClockFreq>
 801389a:	0003      	movs	r3, r0
 801389c:	60bb      	str	r3, [r7, #8]
 801389e:	e00a      	b.n	80138b6 <LL_LPUART_Init+0x8a>
    }
    else if (LPUARTx == LPUART2)
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	4a17      	ldr	r2, [pc, #92]	; (8013900 <LL_LPUART_Init+0xd4>)
 80138a4:	4293      	cmp	r3, r2
 80138a6:	d106      	bne.n	80138b6 <LL_LPUART_Init+0x8a>
    {
      periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART2_CLKSOURCE);
 80138a8:	23c0      	movs	r3, #192	; 0xc0
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	0018      	movs	r0, r3
 80138ae:	f000 f8b3 	bl	8013a18 <LL_RCC_GetLPUARTClockFreq>
 80138b2:	0003      	movs	r3, r0
 80138b4:	60bb      	str	r3, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d00f      	beq.n	80138dc <LL_LPUART_Init+0xb0>
        && (LPUART_InitStruct->BaudRate != 0U))
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d00b      	beq.n	80138dc <LL_LPUART_Init+0xb0>
    {
      status = SUCCESS;
 80138c4:	230f      	movs	r3, #15
 80138c6:	18fb      	adds	r3, r7, r3
 80138c8:	2200      	movs	r2, #0
 80138ca:	701a      	strb	r2, [r3, #0]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 80138d4:	68b9      	ldr	r1, [r7, #8]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f7ff ff66 	bl	80137a8 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	0011      	movs	r1, r2
 80138e4:	0018      	movs	r0, r3
 80138e6:	f7ff ff25 	bl	8013734 <LL_LPUART_SetPrescaler>
  }

  return (status);
 80138ea:	230f      	movs	r3, #15
 80138ec:	18fb      	adds	r3, r7, r3
 80138ee:	781b      	ldrb	r3, [r3, #0]
}
 80138f0:	0018      	movs	r0, r3
 80138f2:	46bd      	mov	sp, r7
 80138f4:	b004      	add	sp, #16
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	efffe9f3 	.word	0xefffe9f3
 80138fc:	40008000 	.word	0x40008000
 8013900:	40008400 	.word	0x40008400

08013904 <LL_RCC_HSI_IsReady>:
{
 8013904:	b580      	push	{r7, lr}
 8013906:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8013908:	4b07      	ldr	r3, [pc, #28]	; (8013928 <LL_RCC_HSI_IsReady+0x24>)
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	2380      	movs	r3, #128	; 0x80
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	401a      	ands	r2, r3
 8013912:	2380      	movs	r3, #128	; 0x80
 8013914:	00db      	lsls	r3, r3, #3
 8013916:	429a      	cmp	r2, r3
 8013918:	d101      	bne.n	801391e <LL_RCC_HSI_IsReady+0x1a>
 801391a:	2301      	movs	r3, #1
 801391c:	e000      	b.n	8013920 <LL_RCC_HSI_IsReady+0x1c>
 801391e:	2300      	movs	r3, #0
}
 8013920:	0018      	movs	r0, r3
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	46c0      	nop			; (mov r8, r8)
 8013928:	40021000 	.word	0x40021000

0801392c <LL_RCC_LSE_IsReady>:
{
 801392c:	b580      	push	{r7, lr}
 801392e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8013930:	4b05      	ldr	r3, [pc, #20]	; (8013948 <LL_RCC_LSE_IsReady+0x1c>)
 8013932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013934:	2202      	movs	r2, #2
 8013936:	4013      	ands	r3, r2
 8013938:	2b02      	cmp	r3, #2
 801393a:	d101      	bne.n	8013940 <LL_RCC_LSE_IsReady+0x14>
 801393c:	2301      	movs	r3, #1
 801393e:	e000      	b.n	8013942 <LL_RCC_LSE_IsReady+0x16>
 8013940:	2300      	movs	r3, #0
}
 8013942:	0018      	movs	r0, r3
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	40021000 	.word	0x40021000

0801394c <LL_RCC_GetSysClkSource>:
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8013950:	4b03      	ldr	r3, [pc, #12]	; (8013960 <LL_RCC_GetSysClkSource+0x14>)
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	2238      	movs	r2, #56	; 0x38
 8013956:	4013      	ands	r3, r2
}
 8013958:	0018      	movs	r0, r3
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	46c0      	nop			; (mov r8, r8)
 8013960:	40021000 	.word	0x40021000

08013964 <LL_RCC_GetAHBPrescaler>:
{
 8013964:	b580      	push	{r7, lr}
 8013966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8013968:	4b03      	ldr	r3, [pc, #12]	; (8013978 <LL_RCC_GetAHBPrescaler+0x14>)
 801396a:	689a      	ldr	r2, [r3, #8]
 801396c:	23f0      	movs	r3, #240	; 0xf0
 801396e:	011b      	lsls	r3, r3, #4
 8013970:	4013      	ands	r3, r2
}
 8013972:	0018      	movs	r0, r3
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	40021000 	.word	0x40021000

0801397c <LL_RCC_GetAPB1Prescaler>:
{
 801397c:	b580      	push	{r7, lr}
 801397e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8013980:	4b03      	ldr	r3, [pc, #12]	; (8013990 <LL_RCC_GetAPB1Prescaler+0x14>)
 8013982:	689a      	ldr	r2, [r3, #8]
 8013984:	23e0      	movs	r3, #224	; 0xe0
 8013986:	01db      	lsls	r3, r3, #7
 8013988:	4013      	ands	r3, r2
}
 801398a:	0018      	movs	r0, r3
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}
 8013990:	40021000 	.word	0x40021000

08013994 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_LPUART2_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx) | (LPUARTx << 16U));
 801399c:	4b05      	ldr	r3, [pc, #20]	; (80139b4 <LL_RCC_GetLPUARTClockSource+0x20>)
 801399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	401a      	ands	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	041b      	lsls	r3, r3, #16
 80139a8:	4313      	orrs	r3, r2
}
 80139aa:	0018      	movs	r0, r3
 80139ac:	46bd      	mov	sp, r7
 80139ae:	b002      	add	sp, #8
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	46c0      	nop			; (mov r8, r8)
 80139b4:	40021000 	.word	0x40021000

080139b8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80139bc:	4b03      	ldr	r3, [pc, #12]	; (80139cc <LL_RCC_PLL_GetN+0x14>)
 80139be:	68db      	ldr	r3, [r3, #12]
 80139c0:	0a1b      	lsrs	r3, r3, #8
 80139c2:	227f      	movs	r2, #127	; 0x7f
 80139c4:	4013      	ands	r3, r2
}
 80139c6:	0018      	movs	r0, r3
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	40021000 	.word	0x40021000

080139d0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80139d4:	4b03      	ldr	r3, [pc, #12]	; (80139e4 <LL_RCC_PLL_GetR+0x14>)
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	0f5b      	lsrs	r3, r3, #29
 80139da:	075b      	lsls	r3, r3, #29
}
 80139dc:	0018      	movs	r0, r3
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	40021000 	.word	0x40021000

080139e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80139ec:	4b03      	ldr	r3, [pc, #12]	; (80139fc <LL_RCC_PLL_GetMainSource+0x14>)
 80139ee:	68db      	ldr	r3, [r3, #12]
 80139f0:	2203      	movs	r2, #3
 80139f2:	4013      	ands	r3, r2
}
 80139f4:	0018      	movs	r0, r3
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	46c0      	nop			; (mov r8, r8)
 80139fc:	40021000 	.word	0x40021000

08013a00 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8013a04:	4b03      	ldr	r3, [pc, #12]	; (8013a14 <LL_RCC_PLL_GetDivider+0x14>)
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	2270      	movs	r2, #112	; 0x70
 8013a0a:	4013      	ands	r3, r2
}
 8013a0c:	0018      	movs	r0, r3
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	46c0      	nop			; (mov r8, r8)
 8013a14:	40021000 	.word	0x40021000

08013a18 <LL_RCC_GetLPUARTClockFreq>:
  * @retval LPUART clock frequency (in Hz)
  *         @arg @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  * (*) feature not available on all devices
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b084      	sub	sp, #16
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8013a20:	2300      	movs	r3, #0
 8013a22:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  if (LPUARTxSource == LL_RCC_LPUART1_CLKSOURCE)
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	23c0      	movs	r3, #192	; 0xc0
 8013a28:	011b      	lsls	r3, r3, #4
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d134      	bne.n	8013a98 <LL_RCC_GetLPUARTClockFreq+0x80>
  {
    /* LPUART1CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	0018      	movs	r0, r3
 8013a32:	f7ff ffaf 	bl	8013994 <LL_RCC_GetLPUARTClockSource>
 8013a36:	0003      	movs	r3, r0
 8013a38:	4a3a      	ldr	r2, [pc, #232]	; (8013b24 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d016      	beq.n	8013a6c <LL_RCC_GetLPUARTClockFreq+0x54>
 8013a3e:	4a39      	ldr	r2, [pc, #228]	; (8013b24 <LL_RCC_GetLPUARTClockFreq+0x10c>)
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d81c      	bhi.n	8013a7e <LL_RCC_GetLPUARTClockFreq+0x66>
 8013a44:	4a38      	ldr	r2, [pc, #224]	; (8013b28 <LL_RCC_GetLPUARTClockFreq+0x110>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d003      	beq.n	8013a52 <LL_RCC_GetLPUARTClockFreq+0x3a>
 8013a4a:	4a38      	ldr	r2, [pc, #224]	; (8013b2c <LL_RCC_GetLPUARTClockFreq+0x114>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d005      	beq.n	8013a5c <LL_RCC_GetLPUARTClockFreq+0x44>
 8013a50:	e015      	b.n	8013a7e <LL_RCC_GetLPUARTClockFreq+0x66>
    {
      case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 8013a52:	f000 f875 	bl	8013b40 <RCC_GetSystemClockFreq>
 8013a56:	0003      	movs	r3, r0
 8013a58:	60fb      	str	r3, [r7, #12]
        break;
 8013a5a:	e05e      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8013a5c:	f7ff ff52 	bl	8013904 <LL_RCC_HSI_IsReady>
 8013a60:	0003      	movs	r3, r0
 8013a62:	2b01      	cmp	r3, #1
 8013a64:	d152      	bne.n	8013b0c <LL_RCC_GetLPUARTClockFreq+0xf4>
        {
          lpuart_frequency = HSI_VALUE;
 8013a66:	4b32      	ldr	r3, [pc, #200]	; (8013b30 <LL_RCC_GetLPUARTClockFreq+0x118>)
 8013a68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8013a6a:	e04f      	b.n	8013b0c <LL_RCC_GetLPUARTClockFreq+0xf4>

      case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8013a6c:	f7ff ff5e 	bl	801392c <LL_RCC_LSE_IsReady>
 8013a70:	0003      	movs	r3, r0
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	d14c      	bne.n	8013b10 <LL_RCC_GetLPUARTClockFreq+0xf8>
        {
          lpuart_frequency = LSE_VALUE;
 8013a76:	2380      	movs	r3, #128	; 0x80
 8013a78:	021b      	lsls	r3, r3, #8
 8013a7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8013a7c:	e048      	b.n	8013b10 <LL_RCC_GetLPUARTClockFreq+0xf8>

      case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8013a7e:	f000 f85f 	bl	8013b40 <RCC_GetSystemClockFreq>
 8013a82:	0003      	movs	r3, r0
 8013a84:	0018      	movs	r0, r3
 8013a86:	f000 f887 	bl	8013b98 <RCC_GetHCLKClockFreq>
 8013a8a:	0003      	movs	r3, r0
 8013a8c:	0018      	movs	r0, r3
 8013a8e:	f000 f89b 	bl	8013bc8 <RCC_GetPCLK1ClockFreq>
 8013a92:	0003      	movs	r3, r0
 8013a94:	60fb      	str	r3, [r7, #12]
        break;
 8013a96:	e040      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
    }
  }
#if defined(LPUART2)
  else if (LPUARTxSource == LL_RCC_LPUART2_CLKSOURCE)
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	23c0      	movs	r3, #192	; 0xc0
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d13b      	bne.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
  {
    /* LPUART2CLK clock frequency */
    switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	0018      	movs	r0, r3
 8013aa6:	f7ff ff75 	bl	8013994 <LL_RCC_GetLPUARTClockSource>
 8013aaa:	0003      	movs	r3, r0
 8013aac:	4a21      	ldr	r2, [pc, #132]	; (8013b34 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 8013aae:	4293      	cmp	r3, r2
 8013ab0:	d016      	beq.n	8013ae0 <LL_RCC_GetLPUARTClockFreq+0xc8>
 8013ab2:	4a20      	ldr	r2, [pc, #128]	; (8013b34 <LL_RCC_GetLPUARTClockFreq+0x11c>)
 8013ab4:	4293      	cmp	r3, r2
 8013ab6:	d81c      	bhi.n	8013af2 <LL_RCC_GetLPUARTClockFreq+0xda>
 8013ab8:	4a1f      	ldr	r2, [pc, #124]	; (8013b38 <LL_RCC_GetLPUARTClockFreq+0x120>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d003      	beq.n	8013ac6 <LL_RCC_GetLPUARTClockFreq+0xae>
 8013abe:	4a1f      	ldr	r2, [pc, #124]	; (8013b3c <LL_RCC_GetLPUARTClockFreq+0x124>)
 8013ac0:	4293      	cmp	r3, r2
 8013ac2:	d005      	beq.n	8013ad0 <LL_RCC_GetLPUARTClockFreq+0xb8>
 8013ac4:	e015      	b.n	8013af2 <LL_RCC_GetLPUARTClockFreq+0xda>
    {
      case LL_RCC_LPUART2_CLKSOURCE_SYSCLK: /* LPUART2 Clock is System Clock */
        lpuart_frequency = RCC_GetSystemClockFreq();
 8013ac6:	f000 f83b 	bl	8013b40 <RCC_GetSystemClockFreq>
 8013aca:	0003      	movs	r3, r0
 8013acc:	60fb      	str	r3, [r7, #12]
        break;
 8013ace:	e024      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>

      case LL_RCC_LPUART2_CLKSOURCE_HSI:    /* LPUART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8013ad0:	f7ff ff18 	bl	8013904 <LL_RCC_HSI_IsReady>
 8013ad4:	0003      	movs	r3, r0
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d11c      	bne.n	8013b14 <LL_RCC_GetLPUARTClockFreq+0xfc>
        {
          lpuart_frequency = HSI_VALUE;
 8013ada:	4b15      	ldr	r3, [pc, #84]	; (8013b30 <LL_RCC_GetLPUARTClockFreq+0x118>)
 8013adc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8013ade:	e019      	b.n	8013b14 <LL_RCC_GetLPUARTClockFreq+0xfc>

      case LL_RCC_LPUART2_CLKSOURCE_LSE:    /* LPUART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8013ae0:	f7ff ff24 	bl	801392c <LL_RCC_LSE_IsReady>
 8013ae4:	0003      	movs	r3, r0
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d116      	bne.n	8013b18 <LL_RCC_GetLPUARTClockFreq+0x100>
        {
          lpuart_frequency = LSE_VALUE;
 8013aea:	2380      	movs	r3, #128	; 0x80
 8013aec:	021b      	lsls	r3, r3, #8
 8013aee:	60fb      	str	r3, [r7, #12]
        }
        break;
 8013af0:	e012      	b.n	8013b18 <LL_RCC_GetLPUARTClockFreq+0x100>

      case LL_RCC_LPUART2_CLKSOURCE_PCLK1:  /* LPUART2 Clock is PCLK1 */
      default:
        lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8013af2:	f000 f825 	bl	8013b40 <RCC_GetSystemClockFreq>
 8013af6:	0003      	movs	r3, r0
 8013af8:	0018      	movs	r0, r3
 8013afa:	f000 f84d 	bl	8013b98 <RCC_GetHCLKClockFreq>
 8013afe:	0003      	movs	r3, r0
 8013b00:	0018      	movs	r0, r3
 8013b02:	f000 f861 	bl	8013bc8 <RCC_GetPCLK1ClockFreq>
 8013b06:	0003      	movs	r3, r0
 8013b08:	60fb      	str	r3, [r7, #12]
        break;
 8013b0a:	e006      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8013b0c:	46c0      	nop			; (mov r8, r8)
 8013b0e:	e004      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8013b10:	46c0      	nop			; (mov r8, r8)
 8013b12:	e002      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8013b14:	46c0      	nop			; (mov r8, r8)
 8013b16:	e000      	b.n	8013b1a <LL_RCC_GetLPUARTClockFreq+0x102>
        break;
 8013b18:	46c0      	nop			; (mov r8, r8)
  else
  {
    /*nothing to do*/
  }

  return lpuart_frequency;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
}
 8013b1c:	0018      	movs	r0, r3
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	b004      	add	sp, #16
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	0c000c00 	.word	0x0c000c00
 8013b28:	0c000400 	.word	0x0c000400
 8013b2c:	0c000800 	.word	0x0c000800
 8013b30:	00f42400 	.word	0x00f42400
 8013b34:	03000300 	.word	0x03000300
 8013b38:	03000100 	.word	0x03000100
 8013b3c:	03000200 	.word	0x03000200

08013b40 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8013b46:	f7ff ff01 	bl	801394c <LL_RCC_GetSysClkSource>
 8013b4a:	0003      	movs	r3, r0
 8013b4c:	2b08      	cmp	r3, #8
 8013b4e:	d002      	beq.n	8013b56 <RCC_GetSystemClockFreq+0x16>
 8013b50:	2b10      	cmp	r3, #16
 8013b52:	d003      	beq.n	8013b5c <RCC_GetSystemClockFreq+0x1c>
 8013b54:	e007      	b.n	8013b66 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8013b56:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <RCC_GetSystemClockFreq+0x50>)
 8013b58:	607b      	str	r3, [r7, #4]
      break;
 8013b5a:	e014      	b.n	8013b86 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8013b5c:	f000 f84a 	bl	8013bf4 <RCC_PLL_GetFreqDomain_SYS>
 8013b60:	0003      	movs	r3, r0
 8013b62:	607b      	str	r3, [r7, #4]
      break;
 8013b64:	e00f      	b.n	8013b86 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8013b66:	4b0b      	ldr	r3, [pc, #44]	; (8013b94 <RCC_GetSystemClockFreq+0x54>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	0adb      	lsrs	r3, r3, #11
 8013b6c:	2207      	movs	r2, #7
 8013b6e:	4013      	ands	r3, r2
 8013b70:	2201      	movs	r2, #1
 8013b72:	409a      	lsls	r2, r3
 8013b74:	0013      	movs	r3, r2
 8013b76:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8013b78:	6839      	ldr	r1, [r7, #0]
 8013b7a:	4805      	ldr	r0, [pc, #20]	; (8013b90 <RCC_GetSystemClockFreq+0x50>)
 8013b7c:	f7f2 fb4c 	bl	8006218 <__udivsi3>
 8013b80:	0003      	movs	r3, r0
 8013b82:	607b      	str	r3, [r7, #4]
      break;
 8013b84:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8013b86:	687b      	ldr	r3, [r7, #4]
}
 8013b88:	0018      	movs	r0, r3
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	b002      	add	sp, #8
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	00f42400 	.word	0x00f42400
 8013b94:	40021000 	.word	0x40021000

08013b98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8013ba0:	f7ff fee0 	bl	8013964 <LL_RCC_GetAHBPrescaler>
 8013ba4:	0003      	movs	r3, r0
 8013ba6:	0a1b      	lsrs	r3, r3, #8
 8013ba8:	220f      	movs	r2, #15
 8013baa:	401a      	ands	r2, r3
 8013bac:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <RCC_GetHCLKClockFreq+0x2c>)
 8013bae:	0092      	lsls	r2, r2, #2
 8013bb0:	58d3      	ldr	r3, [r2, r3]
 8013bb2:	221f      	movs	r2, #31
 8013bb4:	4013      	ands	r3, r2
 8013bb6:	687a      	ldr	r2, [r7, #4]
 8013bb8:	40da      	lsrs	r2, r3
 8013bba:	0013      	movs	r3, r2
}
 8013bbc:	0018      	movs	r0, r3
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	b002      	add	sp, #8
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	0802afc0 	.word	0x0802afc0

08013bc8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8013bd0:	f7ff fed4 	bl	801397c <LL_RCC_GetAPB1Prescaler>
 8013bd4:	0003      	movs	r3, r0
 8013bd6:	0b1a      	lsrs	r2, r3, #12
 8013bd8:	4b05      	ldr	r3, [pc, #20]	; (8013bf0 <RCC_GetPCLK1ClockFreq+0x28>)
 8013bda:	0092      	lsls	r2, r2, #2
 8013bdc:	58d3      	ldr	r3, [r2, r3]
 8013bde:	221f      	movs	r2, #31
 8013be0:	4013      	ands	r3, r2
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	40da      	lsrs	r2, r3
 8013be6:	0013      	movs	r3, r2
}
 8013be8:	0018      	movs	r0, r3
 8013bea:	46bd      	mov	sp, r7
 8013bec:	b002      	add	sp, #8
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	0802b000 	.word	0x0802b000

08013bf4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8013bf4:	b590      	push	{r4, r7, lr}
 8013bf6:	b083      	sub	sp, #12
 8013bf8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8013bfa:	f7ff fef5 	bl	80139e8 <LL_RCC_PLL_GetMainSource>
 8013bfe:	0003      	movs	r3, r0
 8013c00:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d003      	beq.n	8013c10 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	2b03      	cmp	r3, #3
 8013c0c:	d003      	beq.n	8013c16 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8013c0e:	e005      	b.n	8013c1c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8013c10:	4b13      	ldr	r3, [pc, #76]	; (8013c60 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8013c12:	607b      	str	r3, [r7, #4]
      break;
 8013c14:	e005      	b.n	8013c22 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8013c16:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8013c18:	607b      	str	r3, [r7, #4]
      break;
 8013c1a:	e002      	b.n	8013c22 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 8013c1c:	4b10      	ldr	r3, [pc, #64]	; (8013c60 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8013c1e:	607b      	str	r3, [r7, #4]
      break;
 8013c20:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8013c22:	f7ff fec9 	bl	80139b8 <LL_RCC_PLL_GetN>
 8013c26:	0002      	movs	r2, r0
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	4353      	muls	r3, r2
 8013c2c:	001c      	movs	r4, r3
 8013c2e:	f7ff fee7 	bl	8013a00 <LL_RCC_PLL_GetDivider>
 8013c32:	0003      	movs	r3, r0
 8013c34:	091b      	lsrs	r3, r3, #4
 8013c36:	3301      	adds	r3, #1
 8013c38:	0019      	movs	r1, r3
 8013c3a:	0020      	movs	r0, r4
 8013c3c:	f7f2 faec 	bl	8006218 <__udivsi3>
 8013c40:	0003      	movs	r3, r0
 8013c42:	001c      	movs	r4, r3
 8013c44:	f7ff fec4 	bl	80139d0 <LL_RCC_PLL_GetR>
 8013c48:	0003      	movs	r3, r0
 8013c4a:	0f5b      	lsrs	r3, r3, #29
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	0019      	movs	r1, r3
 8013c50:	0020      	movs	r0, r4
 8013c52:	f7f2 fae1 	bl	8006218 <__udivsi3>
 8013c56:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8013c58:	0018      	movs	r0, r3
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	b003      	add	sp, #12
 8013c5e:	bd90      	pop	{r4, r7, pc}
 8013c60:	00f42400 	.word	0x00f42400

08013c64 <LL_TIM_SetPrescaler>:
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	683a      	ldr	r2, [r7, #0]
 8013c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013c74:	46c0      	nop			; (mov r8, r8)
 8013c76:	46bd      	mov	sp, r7
 8013c78:	b002      	add	sp, #8
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <LL_TIM_SetAutoReload>:
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	683a      	ldr	r2, [r7, #0]
 8013c8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8013c8c:	46c0      	nop			; (mov r8, r8)
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	b002      	add	sp, #8
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <LL_TIM_SetRepetitionCounter>:
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	683a      	ldr	r2, [r7, #0]
 8013ca2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013ca4:	46c0      	nop			; (mov r8, r8)
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	b002      	add	sp, #8
 8013caa:	bd80      	pop	{r7, pc}

08013cac <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	695b      	ldr	r3, [r3, #20]
 8013cb8:	2201      	movs	r2, #1
 8013cba:	431a      	orrs	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	615a      	str	r2, [r3, #20]
}
 8013cc0:	46c0      	nop			; (mov r8, r8)
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	b002      	add	sp, #8
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	4a39      	ldr	r2, [pc, #228]	; (8013dc0 <LL_TIM_Init+0xf8>)
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	d00c      	beq.n	8013cfa <LL_TIM_Init+0x32>
 8013ce0:	687a      	ldr	r2, [r7, #4]
 8013ce2:	2380      	movs	r3, #128	; 0x80
 8013ce4:	05db      	lsls	r3, r3, #23
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d007      	beq.n	8013cfa <LL_TIM_Init+0x32>
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	4a35      	ldr	r2, [pc, #212]	; (8013dc4 <LL_TIM_Init+0xfc>)
 8013cee:	4293      	cmp	r3, r2
 8013cf0:	d003      	beq.n	8013cfa <LL_TIM_Init+0x32>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	4a34      	ldr	r2, [pc, #208]	; (8013dc8 <LL_TIM_Init+0x100>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d107      	bne.n	8013d0a <LL_TIM_Init+0x42>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2270      	movs	r2, #112	; 0x70
 8013cfe:	4393      	bics	r3, r2
 8013d00:	001a      	movs	r2, r3
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	4313      	orrs	r3, r2
 8013d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4a2c      	ldr	r2, [pc, #176]	; (8013dc0 <LL_TIM_Init+0xf8>)
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	d01c      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	2380      	movs	r3, #128	; 0x80
 8013d16:	05db      	lsls	r3, r3, #23
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	d017      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	4a29      	ldr	r2, [pc, #164]	; (8013dc4 <LL_TIM_Init+0xfc>)
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d013      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	4a28      	ldr	r2, [pc, #160]	; (8013dc8 <LL_TIM_Init+0x100>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d00f      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	4a27      	ldr	r2, [pc, #156]	; (8013dcc <LL_TIM_Init+0x104>)
 8013d30:	4293      	cmp	r3, r2
 8013d32:	d00b      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	4a26      	ldr	r2, [pc, #152]	; (8013dd0 <LL_TIM_Init+0x108>)
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	d007      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	4a25      	ldr	r2, [pc, #148]	; (8013dd4 <LL_TIM_Init+0x10c>)
 8013d40:	4293      	cmp	r3, r2
 8013d42:	d003      	beq.n	8013d4c <LL_TIM_Init+0x84>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	4a24      	ldr	r2, [pc, #144]	; (8013dd8 <LL_TIM_Init+0x110>)
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d106      	bne.n	8013d5a <LL_TIM_Init+0x92>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	4a23      	ldr	r2, [pc, #140]	; (8013ddc <LL_TIM_Init+0x114>)
 8013d50:	401a      	ands	r2, r3
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	4313      	orrs	r3, r2
 8013d58:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68fa      	ldr	r2, [r7, #12]
 8013d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	689a      	ldr	r2, [r3, #8]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	0011      	movs	r1, r2
 8013d68:	0018      	movs	r0, r3
 8013d6a:	f7ff ff87 	bl	8013c7c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	001a      	movs	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	0011      	movs	r1, r2
 8013d78:	0018      	movs	r0, r3
 8013d7a:	f7ff ff73 	bl	8013c64 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	4a0f      	ldr	r2, [pc, #60]	; (8013dc0 <LL_TIM_Init+0xf8>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d00b      	beq.n	8013d9e <LL_TIM_Init+0xd6>
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	4a11      	ldr	r2, [pc, #68]	; (8013dd0 <LL_TIM_Init+0x108>)
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	d007      	beq.n	8013d9e <LL_TIM_Init+0xd6>
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	4a10      	ldr	r2, [pc, #64]	; (8013dd4 <LL_TIM_Init+0x10c>)
 8013d92:	4293      	cmp	r3, r2
 8013d94:	d003      	beq.n	8013d9e <LL_TIM_Init+0xd6>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4a0f      	ldr	r2, [pc, #60]	; (8013dd8 <LL_TIM_Init+0x110>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d106      	bne.n	8013dac <LL_TIM_Init+0xe4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	691a      	ldr	r2, [r3, #16]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	0011      	movs	r1, r2
 8013da6:	0018      	movs	r0, r3
 8013da8:	f7ff ff74 	bl	8013c94 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	0018      	movs	r0, r3
 8013db0:	f7ff ff7c 	bl	8013cac <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8013db4:	2300      	movs	r3, #0
}
 8013db6:	0018      	movs	r0, r3
 8013db8:	46bd      	mov	sp, r7
 8013dba:	b004      	add	sp, #16
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	40012c00 	.word	0x40012c00
 8013dc4:	40000400 	.word	0x40000400
 8013dc8:	40000800 	.word	0x40000800
 8013dcc:	40002000 	.word	0x40002000
 8013dd0:	40014000 	.word	0x40014000
 8013dd4:	40014400 	.word	0x40014400
 8013dd8:	40014800 	.word	0x40014800
 8013ddc:	fffffcff 	.word	0xfffffcff

08013de0 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	005b      	lsls	r3, r3, #1
 8013dee:	085a      	lsrs	r2, r3, #1
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	601a      	str	r2, [r3, #0]
}
 8013df4:	46c0      	nop			; (mov r8, r8)
 8013df6:	46bd      	mov	sp, r7
 8013df8:	b002      	add	sp, #8
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <LL_APB1_GRP1_EnableClock>:
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8013e04:	4b07      	ldr	r3, [pc, #28]	; (8013e24 <LL_APB1_GRP1_EnableClock+0x28>)
 8013e06:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013e08:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <LL_APB1_GRP1_EnableClock+0x28>)
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	430a      	orrs	r2, r1
 8013e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8013e10:	4b04      	ldr	r3, [pc, #16]	; (8013e24 <LL_APB1_GRP1_EnableClock+0x28>)
 8013e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	4013      	ands	r3, r2
 8013e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013e1a:	68fb      	ldr	r3, [r7, #12]
}
 8013e1c:	46c0      	nop			; (mov r8, r8)
 8013e1e:	46bd      	mov	sp, r7
 8013e20:	b004      	add	sp, #16
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	40021000 	.word	0x40021000

08013e28 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	4a16      	ldr	r2, [pc, #88]	; (8013e90 <LL_UCPD_Init+0x68>)
 8013e36:	4293      	cmp	r3, r2
 8013e38:	d104      	bne.n	8013e44 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8013e3a:	2380      	movs	r3, #128	; 0x80
 8013e3c:	049b      	lsls	r3, r3, #18
 8013e3e:	0018      	movs	r0, r3
 8013e40:	f7ff ffdc 	bl	8013dfc <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4a13      	ldr	r2, [pc, #76]	; (8013e94 <LL_UCPD_Init+0x6c>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d104      	bne.n	8013e56 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8013e4c:	2380      	movs	r3, #128	; 0x80
 8013e4e:	04db      	lsls	r3, r3, #19
 8013e50:	0018      	movs	r0, r3
 8013e52:	f7ff ffd3 	bl	8013dfc <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	0018      	movs	r0, r3
 8013e5a:	f7ff ffc1 	bl	8013de0 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	4a0d      	ldr	r2, [pc, #52]	; (8013e98 <LL_UCPD_Init+0x70>)
 8013e64:	401a      	ands	r2, r3
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	6819      	ldr	r1, [r3, #0]
 8013e6a:	683b      	ldr	r3, [r7, #0]
 8013e6c:	685b      	ldr	r3, [r3, #4]
 8013e6e:	02db      	lsls	r3, r3, #11
 8013e70:	4319      	orrs	r1, r3
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	689b      	ldr	r3, [r3, #8]
 8013e76:	019b      	lsls	r3, r3, #6
 8013e78:	4319      	orrs	r1, r3
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	430b      	orrs	r3, r1
 8013e80:	431a      	orrs	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	0018      	movs	r0, r3
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	b002      	add	sp, #8
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	4000a000 	.word	0x4000a000
 8013e94:	4000a400 	.word	0x4000a400
 8013e98:	fff10000 	.word	0xfff10000

08013e9c <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2280      	movs	r2, #128	; 0x80
 8013ea8:	0292      	lsls	r2, r2, #10
 8013eaa:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2207      	movs	r2, #7
 8013eb0:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	2210      	movs	r2, #16
 8013eb6:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	220d      	movs	r2, #13
 8013ebc:	60da      	str	r2, [r3, #12]
}
 8013ebe:	46c0      	nop			; (mov r8, r8)
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	b002      	add	sp, #8
 8013ec4:	bd80      	pop	{r7, pc}
	...

08013ec8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013ed6:	4b05      	ldr	r3, [pc, #20]	; (8013eec <USB_EnableGlobalInt+0x24>)
 8013ed8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	68fa      	ldr	r2, [r7, #12]
 8013ede:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013ee0:	2300      	movs	r3, #0
}
 8013ee2:	0018      	movs	r0, r3
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	b004      	add	sp, #16
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	46c0      	nop			; (mov r8, r8)
 8013eec:	0000bf80 	.word	0x0000bf80

08013ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8013ef8:	4b06      	ldr	r3, [pc, #24]	; (8013f14 <USB_DisableGlobalInt+0x24>)
 8013efa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f00:	68fa      	ldr	r2, [r7, #12]
 8013f02:	43d2      	mvns	r2, r2
 8013f04:	401a      	ands	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8013f0a:	2300      	movs	r3, #0
}
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	b004      	add	sp, #16
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	0000bf80 	.word	0x0000bf80

08013f18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	000a      	movs	r2, r1
 8013f22:	1cfb      	adds	r3, r7, #3
 8013f24:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8013f26:	1cfb      	adds	r3, r7, #3
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d106      	bne.n	8013f3c <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	085a      	lsrs	r2, r3, #1
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	641a      	str	r2, [r3, #64]	; 0x40
 8013f3a:	e00d      	b.n	8013f58 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 8013f3c:	1cfb      	adds	r3, r7, #3
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d107      	bne.n	8013f54 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f48:	2280      	movs	r2, #128	; 0x80
 8013f4a:	0612      	lsls	r2, r2, #24
 8013f4c:	431a      	orrs	r2, r3
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	641a      	str	r2, [r3, #64]	; 0x40
 8013f52:	e001      	b.n	8013f58 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 8013f54:	2301      	movs	r3, #1
 8013f56:	e000      	b.n	8013f5a <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	b002      	add	sp, #8
 8013f60:	bd80      	pop	{r7, pc}

08013f62 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8013f62:	b084      	sub	sp, #16
 8013f64:	b5b0      	push	{r4, r5, r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	2004      	movs	r0, #4
 8013f6e:	2420      	movs	r4, #32
 8013f70:	1900      	adds	r0, r0, r4
 8013f72:	19c0      	adds	r0, r0, r7
 8013f74:	6001      	str	r1, [r0, #0]
 8013f76:	6042      	str	r2, [r0, #4]
 8013f78:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f84:	2201      	movs	r2, #1
 8013f86:	4393      	bics	r3, r2
 8013f88:	001a      	movs	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8013f8e:	250f      	movs	r5, #15
 8013f90:	197c      	adds	r4, r7, r5
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2100      	movs	r1, #0
 8013f96:	0018      	movs	r0, r3
 8013f98:	f7ff ffbe 	bl	8013f18 <USB_SetCurrentMode>
 8013f9c:	0003      	movs	r3, r0
 8013f9e:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 8013fa6:	197b      	adds	r3, r7, r5
 8013fa8:	781b      	ldrb	r3, [r3, #0]
}
 8013faa:	0018      	movs	r0, r3
 8013fac:	46bd      	mov	sp, r7
 8013fae:	b004      	add	sp, #16
 8013fb0:	bcb0      	pop	{r4, r5, r7}
 8013fb2:	bc08      	pop	{r3}
 8013fb4:	b004      	add	sp, #16
 8013fb6:	4718      	bx	r3

08013fb8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b09e      	sub	sp, #120	; 0x78
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8013fc2:	2377      	movs	r3, #119	; 0x77
 8013fc4:	18fb      	adds	r3, r7, r3
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	18d3      	adds	r3, r2, r3
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	4adc      	ldr	r2, [pc, #880]	; (8014348 <USB_ActivateEndpoint+0x390>)
 8013fd8:	4013      	ands	r3, r2
 8013fda:	673b      	str	r3, [r7, #112]	; 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	78db      	ldrb	r3, [r3, #3]
 8013fe0:	2b03      	cmp	r3, #3
 8013fe2:	d00e      	beq.n	8014002 <USB_ActivateEndpoint+0x4a>
 8013fe4:	dc19      	bgt.n	801401a <USB_ActivateEndpoint+0x62>
 8013fe6:	2b02      	cmp	r3, #2
 8013fe8:	d01c      	beq.n	8014024 <USB_ActivateEndpoint+0x6c>
 8013fea:	dc16      	bgt.n	801401a <USB_ActivateEndpoint+0x62>
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d002      	beq.n	8013ff6 <USB_ActivateEndpoint+0x3e>
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d00c      	beq.n	801400e <USB_ActivateEndpoint+0x56>
 8013ff4:	e011      	b.n	801401a <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8013ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013ff8:	2280      	movs	r2, #128	; 0x80
 8013ffa:	0092      	lsls	r2, r2, #2
 8013ffc:	4313      	orrs	r3, r2
 8013ffe:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8014000:	e011      	b.n	8014026 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8014002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014004:	22c0      	movs	r2, #192	; 0xc0
 8014006:	00d2      	lsls	r2, r2, #3
 8014008:	4313      	orrs	r3, r2
 801400a:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 801400c:	e00b      	b.n	8014026 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801400e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014010:	2280      	movs	r2, #128	; 0x80
 8014012:	00d2      	lsls	r2, r2, #3
 8014014:	4313      	orrs	r3, r2
 8014016:	673b      	str	r3, [r7, #112]	; 0x70
      break;
 8014018:	e005      	b.n	8014026 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 801401a:	2377      	movs	r3, #119	; 0x77
 801401c:	18fb      	adds	r3, r7, r3
 801401e:	2201      	movs	r2, #1
 8014020:	701a      	strb	r2, [r3, #0]
      break;
 8014022:	e000      	b.n	8014026 <USB_ActivateEndpoint+0x6e>
      break;
 8014024:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	18d3      	adds	r3, r2, r3
 8014030:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014032:	49c6      	ldr	r1, [pc, #792]	; (801434c <USB_ActivateEndpoint+0x394>)
 8014034:	430a      	orrs	r2, r1
 8014036:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	781b      	ldrb	r3, [r3, #0]
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	18d3      	adds	r3, r2, r3
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4ac2      	ldr	r2, [pc, #776]	; (8014350 <USB_ActivateEndpoint+0x398>)
 8014046:	4013      	ands	r3, r2
 8014048:	683a      	ldr	r2, [r7, #0]
 801404a:	7812      	ldrb	r2, [r2, #0]
 801404c:	4313      	orrs	r3, r2
 801404e:	66bb      	str	r3, [r7, #104]	; 0x68
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	18d3      	adds	r3, r2, r3
 801405a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801405c:	49bb      	ldr	r1, [pc, #748]	; (801434c <USB_ActivateEndpoint+0x394>)
 801405e:	430a      	orrs	r2, r1
 8014060:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	7b1b      	ldrb	r3, [r3, #12]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d000      	beq.n	801406c <USB_ActivateEndpoint+0xb4>
 801406a:	e155      	b.n	8014318 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	785b      	ldrb	r3, [r3, #1]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d06e      	beq.n	8014152 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	781b      	ldrb	r3, [r3, #0]
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	4ab6      	ldr	r2, [pc, #728]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 801407c:	4694      	mov	ip, r2
 801407e:	4463      	add	r3, ip
 8014080:	681a      	ldr	r2, [r3, #0]
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	49b2      	ldr	r1, [pc, #712]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 801408a:	468c      	mov	ip, r1
 801408c:	4463      	add	r3, ip
 801408e:	0c12      	lsrs	r2, r2, #16
 8014090:	0412      	lsls	r2, r2, #16
 8014092:	601a      	str	r2, [r3, #0]
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	00db      	lsls	r3, r3, #3
 801409a:	4aae      	ldr	r2, [pc, #696]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 801409c:	4694      	mov	ip, r2
 801409e:	4463      	add	r3, ip
 80140a0:	6819      	ldr	r1, [r3, #0]
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	88db      	ldrh	r3, [r3, #6]
 80140a6:	089b      	lsrs	r3, r3, #2
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	009a      	lsls	r2, r3, #2
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	00db      	lsls	r3, r3, #3
 80140b2:	48a8      	ldr	r0, [pc, #672]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 80140b4:	4684      	mov	ip, r0
 80140b6:	4463      	add	r3, ip
 80140b8:	430a      	orrs	r2, r1
 80140ba:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80140bc:	687a      	ldr	r2, [r7, #4]
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	18d3      	adds	r3, r2, r3
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	61bb      	str	r3, [r7, #24]
 80140ca:	69bb      	ldr	r3, [r7, #24]
 80140cc:	2240      	movs	r2, #64	; 0x40
 80140ce:	4013      	ands	r3, r2
 80140d0:	d011      	beq.n	80140f6 <USB_ActivateEndpoint+0x13e>
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	18d3      	adds	r3, r2, r3
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	4a9c      	ldr	r2, [pc, #624]	; (8014350 <USB_ActivateEndpoint+0x398>)
 80140e0:	4013      	ands	r3, r2
 80140e2:	617b      	str	r3, [r7, #20]
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	009b      	lsls	r3, r3, #2
 80140ec:	18d3      	adds	r3, r2, r3
 80140ee:	697a      	ldr	r2, [r7, #20]
 80140f0:	4999      	ldr	r1, [pc, #612]	; (8014358 <USB_ActivateEndpoint+0x3a0>)
 80140f2:	430a      	orrs	r2, r1
 80140f4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	78db      	ldrb	r3, [r3, #3]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d016      	beq.n	801412c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	18d3      	adds	r3, r2, r3
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4a94      	ldr	r2, [pc, #592]	; (801435c <USB_ActivateEndpoint+0x3a4>)
 801410c:	4013      	ands	r3, r2
 801410e:	60fb      	str	r3, [r7, #12]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2220      	movs	r2, #32
 8014114:	4053      	eors	r3, r2
 8014116:	60fb      	str	r3, [r7, #12]
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	18d3      	adds	r3, r2, r3
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	4989      	ldr	r1, [pc, #548]	; (801434c <USB_ActivateEndpoint+0x394>)
 8014126:	430a      	orrs	r2, r1
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	e261      	b.n	80145f0 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801412c:	687a      	ldr	r2, [r7, #4]
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	009b      	lsls	r3, r3, #2
 8014134:	18d3      	adds	r3, r2, r3
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	4a88      	ldr	r2, [pc, #544]	; (801435c <USB_ActivateEndpoint+0x3a4>)
 801413a:	4013      	ands	r3, r2
 801413c:	613b      	str	r3, [r7, #16]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	009b      	lsls	r3, r3, #2
 8014146:	18d3      	adds	r3, r2, r3
 8014148:	693a      	ldr	r2, [r7, #16]
 801414a:	4980      	ldr	r1, [pc, #512]	; (801434c <USB_ActivateEndpoint+0x394>)
 801414c:	430a      	orrs	r2, r1
 801414e:	601a      	str	r2, [r3, #0]
 8014150:	e24e      	b.n	80145f0 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	4a7e      	ldr	r2, [pc, #504]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 801415a:	4694      	mov	ip, r2
 801415c:	4463      	add	r3, ip
 801415e:	685a      	ldr	r2, [r3, #4]
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	497b      	ldr	r1, [pc, #492]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014168:	468c      	mov	ip, r1
 801416a:	4463      	add	r3, ip
 801416c:	0c12      	lsrs	r2, r2, #16
 801416e:	0412      	lsls	r2, r2, #16
 8014170:	605a      	str	r2, [r3, #4]
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	00db      	lsls	r3, r3, #3
 8014178:	4a76      	ldr	r2, [pc, #472]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 801417a:	4694      	mov	ip, r2
 801417c:	4463      	add	r3, ip
 801417e:	6859      	ldr	r1, [r3, #4]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	88db      	ldrh	r3, [r3, #6]
 8014184:	089b      	lsrs	r3, r3, #2
 8014186:	b29b      	uxth	r3, r3
 8014188:	009a      	lsls	r2, r3, #2
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	00db      	lsls	r3, r3, #3
 8014190:	4870      	ldr	r0, [pc, #448]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014192:	4684      	mov	ip, r0
 8014194:	4463      	add	r3, ip
 8014196:	430a      	orrs	r2, r1
 8014198:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	781b      	ldrb	r3, [r3, #0]
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	4a6c      	ldr	r2, [pc, #432]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 80141a2:	4694      	mov	ip, r2
 80141a4:	4463      	add	r3, ip
 80141a6:	685a      	ldr	r2, [r3, #4]
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	00db      	lsls	r3, r3, #3
 80141ae:	4969      	ldr	r1, [pc, #420]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 80141b0:	468c      	mov	ip, r1
 80141b2:	4463      	add	r3, ip
 80141b4:	0192      	lsls	r2, r2, #6
 80141b6:	0992      	lsrs	r2, r2, #6
 80141b8:	605a      	str	r2, [r3, #4]
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	691b      	ldr	r3, [r3, #16]
 80141be:	2b3e      	cmp	r3, #62	; 0x3e
 80141c0:	d920      	bls.n	8014204 <USB_ActivateEndpoint+0x24c>
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	095b      	lsrs	r3, r3, #5
 80141c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	221f      	movs	r2, #31
 80141d0:	4013      	ands	r3, r2
 80141d2:	d102      	bne.n	80141da <USB_ActivateEndpoint+0x222>
 80141d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141d6:	3b01      	subs	r3, #1
 80141d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	00db      	lsls	r3, r3, #3
 80141e0:	4a5c      	ldr	r2, [pc, #368]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 80141e2:	4694      	mov	ip, r2
 80141e4:	4463      	add	r3, ip
 80141e6:	685a      	ldr	r2, [r3, #4]
 80141e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80141ea:	069b      	lsls	r3, r3, #26
 80141ec:	431a      	orrs	r2, r3
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	00db      	lsls	r3, r3, #3
 80141f4:	4957      	ldr	r1, [pc, #348]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 80141f6:	468c      	mov	ip, r1
 80141f8:	4463      	add	r3, ip
 80141fa:	2180      	movs	r1, #128	; 0x80
 80141fc:	0609      	lsls	r1, r1, #24
 80141fe:	430a      	orrs	r2, r1
 8014200:	605a      	str	r2, [r3, #4]
 8014202:	e032      	b.n	801426a <USB_ActivateEndpoint+0x2b2>
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	691b      	ldr	r3, [r3, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d111      	bne.n	8014230 <USB_ActivateEndpoint+0x278>
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	781b      	ldrb	r3, [r3, #0]
 8014210:	00db      	lsls	r3, r3, #3
 8014212:	4a50      	ldr	r2, [pc, #320]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014214:	4694      	mov	ip, r2
 8014216:	4463      	add	r3, ip
 8014218:	685a      	ldr	r2, [r3, #4]
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	494c      	ldr	r1, [pc, #304]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014222:	468c      	mov	ip, r1
 8014224:	4463      	add	r3, ip
 8014226:	2180      	movs	r1, #128	; 0x80
 8014228:	0609      	lsls	r1, r1, #24
 801422a:	430a      	orrs	r2, r1
 801422c:	605a      	str	r2, [r3, #4]
 801422e:	e01c      	b.n	801426a <USB_ActivateEndpoint+0x2b2>
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	691b      	ldr	r3, [r3, #16]
 8014234:	085b      	lsrs	r3, r3, #1
 8014236:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	691b      	ldr	r3, [r3, #16]
 801423c:	2201      	movs	r2, #1
 801423e:	4013      	ands	r3, r2
 8014240:	d002      	beq.n	8014248 <USB_ActivateEndpoint+0x290>
 8014242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014244:	3301      	adds	r3, #1
 8014246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	4a41      	ldr	r2, [pc, #260]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014250:	4694      	mov	ip, r2
 8014252:	4463      	add	r3, ip
 8014254:	6859      	ldr	r1, [r3, #4]
 8014256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014258:	069a      	lsls	r2, r3, #26
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	00db      	lsls	r3, r3, #3
 8014260:	483c      	ldr	r0, [pc, #240]	; (8014354 <USB_ActivateEndpoint+0x39c>)
 8014262:	4684      	mov	ip, r0
 8014264:	4463      	add	r3, ip
 8014266:	430a      	orrs	r2, r1
 8014268:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	009b      	lsls	r3, r3, #2
 8014272:	18d3      	adds	r3, r2, r3
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	62bb      	str	r3, [r7, #40]	; 0x28
 8014278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801427a:	2380      	movs	r3, #128	; 0x80
 801427c:	01db      	lsls	r3, r3, #7
 801427e:	4013      	ands	r3, r2
 8014280:	d011      	beq.n	80142a6 <USB_ActivateEndpoint+0x2ee>
 8014282:	687a      	ldr	r2, [r7, #4]
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	18d3      	adds	r3, r2, r3
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4a30      	ldr	r2, [pc, #192]	; (8014350 <USB_ActivateEndpoint+0x398>)
 8014290:	4013      	ands	r3, r2
 8014292:	627b      	str	r3, [r7, #36]	; 0x24
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	781b      	ldrb	r3, [r3, #0]
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	18d3      	adds	r3, r2, r3
 801429e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142a0:	492f      	ldr	r1, [pc, #188]	; (8014360 <USB_ActivateEndpoint+0x3a8>)
 80142a2:	430a      	orrs	r2, r1
 80142a4:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	781b      	ldrb	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d11c      	bne.n	80142e8 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80142ae:	687a      	ldr	r2, [r7, #4]
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	18d3      	adds	r3, r2, r3
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4a2a      	ldr	r2, [pc, #168]	; (8014364 <USB_ActivateEndpoint+0x3ac>)
 80142bc:	4013      	ands	r3, r2
 80142be:	61fb      	str	r3, [r7, #28]
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	2280      	movs	r2, #128	; 0x80
 80142c4:	0152      	lsls	r2, r2, #5
 80142c6:	4053      	eors	r3, r2
 80142c8:	61fb      	str	r3, [r7, #28]
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	2280      	movs	r2, #128	; 0x80
 80142ce:	0192      	lsls	r2, r2, #6
 80142d0:	4053      	eors	r3, r2
 80142d2:	61fb      	str	r3, [r7, #28]
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	009b      	lsls	r3, r3, #2
 80142dc:	18d3      	adds	r3, r2, r3
 80142de:	69fa      	ldr	r2, [r7, #28]
 80142e0:	491a      	ldr	r1, [pc, #104]	; (801434c <USB_ActivateEndpoint+0x394>)
 80142e2:	430a      	orrs	r2, r1
 80142e4:	601a      	str	r2, [r3, #0]
 80142e6:	e183      	b.n	80145f0 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	009b      	lsls	r3, r3, #2
 80142f0:	18d3      	adds	r3, r2, r3
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4a1b      	ldr	r2, [pc, #108]	; (8014364 <USB_ActivateEndpoint+0x3ac>)
 80142f6:	4013      	ands	r3, r2
 80142f8:	623b      	str	r3, [r7, #32]
 80142fa:	6a3b      	ldr	r3, [r7, #32]
 80142fc:	2280      	movs	r2, #128	; 0x80
 80142fe:	0192      	lsls	r2, r2, #6
 8014300:	4053      	eors	r3, r2
 8014302:	623b      	str	r3, [r7, #32]
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	18d3      	adds	r3, r2, r3
 801430e:	6a3a      	ldr	r2, [r7, #32]
 8014310:	490e      	ldr	r1, [pc, #56]	; (801434c <USB_ActivateEndpoint+0x394>)
 8014312:	430a      	orrs	r2, r1
 8014314:	601a      	str	r2, [r3, #0]
 8014316:	e16b      	b.n	80145f0 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8014318:	683b      	ldr	r3, [r7, #0]
 801431a:	78db      	ldrb	r3, [r3, #3]
 801431c:	2b02      	cmp	r3, #2
 801431e:	d125      	bne.n	801436c <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	009b      	lsls	r3, r3, #2
 8014328:	18d3      	adds	r3, r2, r3
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4a08      	ldr	r2, [pc, #32]	; (8014350 <USB_ActivateEndpoint+0x398>)
 801432e:	4013      	ands	r3, r2
 8014330:	663b      	str	r3, [r7, #96]	; 0x60
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	18d3      	adds	r3, r2, r3
 801433c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801433e:	490a      	ldr	r1, [pc, #40]	; (8014368 <USB_ActivateEndpoint+0x3b0>)
 8014340:	430a      	orrs	r2, r1
 8014342:	601a      	str	r2, [r3, #0]
 8014344:	e024      	b.n	8014390 <USB_ActivateEndpoint+0x3d8>
 8014346:	46c0      	nop			; (mov r8, r8)
 8014348:	07ff898f 	.word	0x07ff898f
 801434c:	00008080 	.word	0x00008080
 8014350:	07ff8f8f 	.word	0x07ff8f8f
 8014354:	40009800 	.word	0x40009800
 8014358:	000080c0 	.word	0x000080c0
 801435c:	07ff8fbf 	.word	0x07ff8fbf
 8014360:	0000c080 	.word	0x0000c080
 8014364:	07ffbf8f 	.word	0x07ffbf8f
 8014368:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	781b      	ldrb	r3, [r3, #0]
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	18d3      	adds	r3, r2, r3
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	4aa1      	ldr	r2, [pc, #644]	; (8014600 <USB_ActivateEndpoint+0x648>)
 801437a:	4013      	ands	r3, r2
 801437c:	667b      	str	r3, [r7, #100]	; 0x64
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	683b      	ldr	r3, [r7, #0]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	18d3      	adds	r3, r2, r3
 8014388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801438a:	499e      	ldr	r1, [pc, #632]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 801438c:	430a      	orrs	r2, r1
 801438e:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	00db      	lsls	r3, r3, #3
 8014396:	4a9c      	ldr	r2, [pc, #624]	; (8014608 <USB_ActivateEndpoint+0x650>)
 8014398:	4694      	mov	ip, r2
 801439a:	4463      	add	r3, ip
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	781b      	ldrb	r3, [r3, #0]
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	4998      	ldr	r1, [pc, #608]	; (8014608 <USB_ActivateEndpoint+0x650>)
 80143a6:	468c      	mov	ip, r1
 80143a8:	4463      	add	r3, ip
 80143aa:	0c12      	lsrs	r2, r2, #16
 80143ac:	0412      	lsls	r2, r2, #16
 80143ae:	601a      	str	r2, [r3, #0]
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	4a94      	ldr	r2, [pc, #592]	; (8014608 <USB_ActivateEndpoint+0x650>)
 80143b8:	4694      	mov	ip, r2
 80143ba:	4463      	add	r3, ip
 80143bc:	6819      	ldr	r1, [r3, #0]
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	891b      	ldrh	r3, [r3, #8]
 80143c2:	089b      	lsrs	r3, r3, #2
 80143c4:	b29b      	uxth	r3, r3
 80143c6:	009a      	lsls	r2, r3, #2
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	00db      	lsls	r3, r3, #3
 80143ce:	488e      	ldr	r0, [pc, #568]	; (8014608 <USB_ActivateEndpoint+0x650>)
 80143d0:	4684      	mov	ip, r0
 80143d2:	4463      	add	r3, ip
 80143d4:	430a      	orrs	r2, r1
 80143d6:	601a      	str	r2, [r3, #0]
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	4a8a      	ldr	r2, [pc, #552]	; (8014608 <USB_ActivateEndpoint+0x650>)
 80143e0:	4694      	mov	ip, r2
 80143e2:	4463      	add	r3, ip
 80143e4:	685a      	ldr	r2, [r3, #4]
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	00db      	lsls	r3, r3, #3
 80143ec:	4986      	ldr	r1, [pc, #536]	; (8014608 <USB_ActivateEndpoint+0x650>)
 80143ee:	468c      	mov	ip, r1
 80143f0:	4463      	add	r3, ip
 80143f2:	0c12      	lsrs	r2, r2, #16
 80143f4:	0412      	lsls	r2, r2, #16
 80143f6:	605a      	str	r2, [r3, #4]
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	00db      	lsls	r3, r3, #3
 80143fe:	4a82      	ldr	r2, [pc, #520]	; (8014608 <USB_ActivateEndpoint+0x650>)
 8014400:	4694      	mov	ip, r2
 8014402:	4463      	add	r3, ip
 8014404:	6859      	ldr	r1, [r3, #4]
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	895b      	ldrh	r3, [r3, #10]
 801440a:	089b      	lsrs	r3, r3, #2
 801440c:	b29b      	uxth	r3, r3
 801440e:	009a      	lsls	r2, r3, #2
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	00db      	lsls	r3, r3, #3
 8014416:	487c      	ldr	r0, [pc, #496]	; (8014608 <USB_ActivateEndpoint+0x650>)
 8014418:	4684      	mov	ip, r0
 801441a:	4463      	add	r3, ip
 801441c:	430a      	orrs	r2, r1
 801441e:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	785b      	ldrb	r3, [r3, #1]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d169      	bne.n	80144fc <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	18d3      	adds	r3, r2, r3
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	643b      	str	r3, [r7, #64]	; 0x40
 8014436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014438:	2380      	movs	r3, #128	; 0x80
 801443a:	01db      	lsls	r3, r3, #7
 801443c:	4013      	ands	r3, r2
 801443e:	d011      	beq.n	8014464 <USB_ActivateEndpoint+0x4ac>
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	009b      	lsls	r3, r3, #2
 8014448:	18d3      	adds	r3, r2, r3
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4a6f      	ldr	r2, [pc, #444]	; (801460c <USB_ActivateEndpoint+0x654>)
 801444e:	4013      	ands	r3, r2
 8014450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	18d3      	adds	r3, r2, r3
 801445c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801445e:	496c      	ldr	r1, [pc, #432]	; (8014610 <USB_ActivateEndpoint+0x658>)
 8014460:	430a      	orrs	r2, r1
 8014462:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	781b      	ldrb	r3, [r3, #0]
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	18d3      	adds	r3, r2, r3
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	63bb      	str	r3, [r7, #56]	; 0x38
 8014472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014474:	2240      	movs	r2, #64	; 0x40
 8014476:	4013      	ands	r3, r2
 8014478:	d011      	beq.n	801449e <USB_ActivateEndpoint+0x4e6>
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	683b      	ldr	r3, [r7, #0]
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	009b      	lsls	r3, r3, #2
 8014482:	18d3      	adds	r3, r2, r3
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a61      	ldr	r2, [pc, #388]	; (801460c <USB_ActivateEndpoint+0x654>)
 8014488:	4013      	ands	r3, r2
 801448a:	637b      	str	r3, [r7, #52]	; 0x34
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	18d3      	adds	r3, r2, r3
 8014496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014498:	495e      	ldr	r1, [pc, #376]	; (8014614 <USB_ActivateEndpoint+0x65c>)
 801449a:	430a      	orrs	r2, r1
 801449c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	781b      	ldrb	r3, [r3, #0]
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	18d3      	adds	r3, r2, r3
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a5b      	ldr	r2, [pc, #364]	; (8014618 <USB_ActivateEndpoint+0x660>)
 80144ac:	4013      	ands	r3, r2
 80144ae:	633b      	str	r3, [r7, #48]	; 0x30
 80144b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b2:	2280      	movs	r2, #128	; 0x80
 80144b4:	0152      	lsls	r2, r2, #5
 80144b6:	4053      	eors	r3, r2
 80144b8:	633b      	str	r3, [r7, #48]	; 0x30
 80144ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144bc:	2280      	movs	r2, #128	; 0x80
 80144be:	0192      	lsls	r2, r2, #6
 80144c0:	4053      	eors	r3, r2
 80144c2:	633b      	str	r3, [r7, #48]	; 0x30
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	781b      	ldrb	r3, [r3, #0]
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	18d3      	adds	r3, r2, r3
 80144ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144d0:	494c      	ldr	r1, [pc, #304]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 80144d2:	430a      	orrs	r2, r1
 80144d4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	683b      	ldr	r3, [r7, #0]
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	18d3      	adds	r3, r2, r3
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	4a4e      	ldr	r2, [pc, #312]	; (801461c <USB_ActivateEndpoint+0x664>)
 80144e4:	4013      	ands	r3, r2
 80144e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	781b      	ldrb	r3, [r3, #0]
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	18d3      	adds	r3, r2, r3
 80144f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144f4:	4943      	ldr	r1, [pc, #268]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 80144f6:	430a      	orrs	r2, r1
 80144f8:	601a      	str	r2, [r3, #0]
 80144fa:	e079      	b.n	80145f0 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	18d3      	adds	r3, r2, r3
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	65fb      	str	r3, [r7, #92]	; 0x5c
 801450a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801450c:	2380      	movs	r3, #128	; 0x80
 801450e:	01db      	lsls	r3, r3, #7
 8014510:	4013      	ands	r3, r2
 8014512:	d011      	beq.n	8014538 <USB_ActivateEndpoint+0x580>
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	18d3      	adds	r3, r2, r3
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a3a      	ldr	r2, [pc, #232]	; (801460c <USB_ActivateEndpoint+0x654>)
 8014522:	4013      	ands	r3, r2
 8014524:	65bb      	str	r3, [r7, #88]	; 0x58
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	009b      	lsls	r3, r3, #2
 801452e:	18d3      	adds	r3, r2, r3
 8014530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014532:	4937      	ldr	r1, [pc, #220]	; (8014610 <USB_ActivateEndpoint+0x658>)
 8014534:	430a      	orrs	r2, r1
 8014536:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	18d3      	adds	r3, r2, r3
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	657b      	str	r3, [r7, #84]	; 0x54
 8014546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014548:	2240      	movs	r2, #64	; 0x40
 801454a:	4013      	ands	r3, r2
 801454c:	d011      	beq.n	8014572 <USB_ActivateEndpoint+0x5ba>
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	18d3      	adds	r3, r2, r3
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4a2c      	ldr	r2, [pc, #176]	; (801460c <USB_ActivateEndpoint+0x654>)
 801455c:	4013      	ands	r3, r2
 801455e:	653b      	str	r3, [r7, #80]	; 0x50
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	781b      	ldrb	r3, [r3, #0]
 8014566:	009b      	lsls	r3, r3, #2
 8014568:	18d3      	adds	r3, r2, r3
 801456a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801456c:	4929      	ldr	r1, [pc, #164]	; (8014614 <USB_ActivateEndpoint+0x65c>)
 801456e:	430a      	orrs	r2, r1
 8014570:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	78db      	ldrb	r3, [r3, #3]
 8014576:	2b01      	cmp	r3, #1
 8014578:	d016      	beq.n	80145a8 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	18d3      	adds	r3, r2, r3
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	4a25      	ldr	r2, [pc, #148]	; (801461c <USB_ActivateEndpoint+0x664>)
 8014588:	4013      	ands	r3, r2
 801458a:	64bb      	str	r3, [r7, #72]	; 0x48
 801458c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801458e:	2220      	movs	r2, #32
 8014590:	4053      	eors	r3, r2
 8014592:	64bb      	str	r3, [r7, #72]	; 0x48
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	009b      	lsls	r3, r3, #2
 801459c:	18d3      	adds	r3, r2, r3
 801459e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145a0:	4918      	ldr	r1, [pc, #96]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 80145a2:	430a      	orrs	r2, r1
 80145a4:	601a      	str	r2, [r3, #0]
 80145a6:	e011      	b.n	80145cc <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	18d3      	adds	r3, r2, r3
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	4a19      	ldr	r2, [pc, #100]	; (801461c <USB_ActivateEndpoint+0x664>)
 80145b6:	4013      	ands	r3, r2
 80145b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	18d3      	adds	r3, r2, r3
 80145c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80145c6:	490f      	ldr	r1, [pc, #60]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 80145c8:	430a      	orrs	r2, r1
 80145ca:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80145cc:	687a      	ldr	r2, [r7, #4]
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	781b      	ldrb	r3, [r3, #0]
 80145d2:	009b      	lsls	r3, r3, #2
 80145d4:	18d3      	adds	r3, r2, r3
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	4a0f      	ldr	r2, [pc, #60]	; (8014618 <USB_ActivateEndpoint+0x660>)
 80145da:	4013      	ands	r3, r2
 80145dc:	647b      	str	r3, [r7, #68]	; 0x44
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	18d3      	adds	r3, r2, r3
 80145e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145ea:	4906      	ldr	r1, [pc, #24]	; (8014604 <USB_ActivateEndpoint+0x64c>)
 80145ec:	430a      	orrs	r2, r1
 80145ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80145f0:	2377      	movs	r3, #119	; 0x77
 80145f2:	18fb      	adds	r3, r7, r3
 80145f4:	781b      	ldrb	r3, [r3, #0]
}
 80145f6:	0018      	movs	r0, r3
 80145f8:	46bd      	mov	sp, r7
 80145fa:	b01e      	add	sp, #120	; 0x78
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	46c0      	nop			; (mov r8, r8)
 8014600:	07ff8e8f 	.word	0x07ff8e8f
 8014604:	00008080 	.word	0x00008080
 8014608:	40009800 	.word	0x40009800
 801460c:	07ff8f8f 	.word	0x07ff8f8f
 8014610:	0000c080 	.word	0x0000c080
 8014614:	000080c0 	.word	0x000080c0
 8014618:	07ffbf8f 	.word	0x07ffbf8f
 801461c:	07ff8fbf 	.word	0x07ff8fbf

08014620 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b096      	sub	sp, #88	; 0x58
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	7b1b      	ldrb	r3, [r3, #12]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d164      	bne.n	80146fc <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	785b      	ldrb	r3, [r3, #1]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d02f      	beq.n	801469a <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	009b      	lsls	r3, r3, #2
 8014642:	18d3      	adds	r3, r2, r3
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	613b      	str	r3, [r7, #16]
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	2240      	movs	r2, #64	; 0x40
 801464c:	4013      	ands	r3, r2
 801464e:	d011      	beq.n	8014674 <USB_DeactivateEndpoint+0x54>
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	009b      	lsls	r3, r3, #2
 8014658:	18d3      	adds	r3, r2, r3
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	4a9d      	ldr	r2, [pc, #628]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 801465e:	4013      	ands	r3, r2
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	781b      	ldrb	r3, [r3, #0]
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	18d3      	adds	r3, r2, r3
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	499a      	ldr	r1, [pc, #616]	; (80148d8 <USB_DeactivateEndpoint+0x2b8>)
 8014670:	430a      	orrs	r2, r1
 8014672:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	18d3      	adds	r3, r2, r3
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	4a96      	ldr	r2, [pc, #600]	; (80148dc <USB_DeactivateEndpoint+0x2bc>)
 8014682:	4013      	ands	r3, r2
 8014684:	60bb      	str	r3, [r7, #8]
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	009b      	lsls	r3, r3, #2
 801468e:	18d3      	adds	r3, r2, r3
 8014690:	68ba      	ldr	r2, [r7, #8]
 8014692:	4993      	ldr	r1, [pc, #588]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 8014694:	430a      	orrs	r2, r1
 8014696:	601a      	str	r2, [r3, #0]
 8014698:	e117      	b.n	80148ca <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	18d3      	adds	r3, r2, r3
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	61fb      	str	r3, [r7, #28]
 80146a8:	69fa      	ldr	r2, [r7, #28]
 80146aa:	2380      	movs	r3, #128	; 0x80
 80146ac:	01db      	lsls	r3, r3, #7
 80146ae:	4013      	ands	r3, r2
 80146b0:	d011      	beq.n	80146d6 <USB_DeactivateEndpoint+0xb6>
 80146b2:	687a      	ldr	r2, [r7, #4]
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	009b      	lsls	r3, r3, #2
 80146ba:	18d3      	adds	r3, r2, r3
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	4a85      	ldr	r2, [pc, #532]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 80146c0:	4013      	ands	r3, r2
 80146c2:	61bb      	str	r3, [r7, #24]
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	009b      	lsls	r3, r3, #2
 80146cc:	18d3      	adds	r3, r2, r3
 80146ce:	69ba      	ldr	r2, [r7, #24]
 80146d0:	4984      	ldr	r1, [pc, #528]	; (80148e4 <USB_DeactivateEndpoint+0x2c4>)
 80146d2:	430a      	orrs	r2, r1
 80146d4:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80146d6:	687a      	ldr	r2, [r7, #4]
 80146d8:	683b      	ldr	r3, [r7, #0]
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	18d3      	adds	r3, r2, r3
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	4a81      	ldr	r2, [pc, #516]	; (80148e8 <USB_DeactivateEndpoint+0x2c8>)
 80146e4:	4013      	ands	r3, r2
 80146e6:	617b      	str	r3, [r7, #20]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	18d3      	adds	r3, r2, r3
 80146f2:	697a      	ldr	r2, [r7, #20]
 80146f4:	497a      	ldr	r1, [pc, #488]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 80146f6:	430a      	orrs	r2, r1
 80146f8:	601a      	str	r2, [r3, #0]
 80146fa:	e0e6      	b.n	80148ca <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	785b      	ldrb	r3, [r3, #1]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d171      	bne.n	80147e8 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	18d3      	adds	r3, r2, r3
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	63bb      	str	r3, [r7, #56]	; 0x38
 8014712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014714:	2380      	movs	r3, #128	; 0x80
 8014716:	01db      	lsls	r3, r3, #7
 8014718:	4013      	ands	r3, r2
 801471a:	d011      	beq.n	8014740 <USB_DeactivateEndpoint+0x120>
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	683b      	ldr	r3, [r7, #0]
 8014720:	781b      	ldrb	r3, [r3, #0]
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	18d3      	adds	r3, r2, r3
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4a6a      	ldr	r2, [pc, #424]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 801472a:	4013      	ands	r3, r2
 801472c:	637b      	str	r3, [r7, #52]	; 0x34
 801472e:	687a      	ldr	r2, [r7, #4]
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	009b      	lsls	r3, r3, #2
 8014736:	18d3      	adds	r3, r2, r3
 8014738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801473a:	496a      	ldr	r1, [pc, #424]	; (80148e4 <USB_DeactivateEndpoint+0x2c4>)
 801473c:	430a      	orrs	r2, r1
 801473e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014740:	687a      	ldr	r2, [r7, #4]
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	18d3      	adds	r3, r2, r3
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	633b      	str	r3, [r7, #48]	; 0x30
 801474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014750:	2240      	movs	r2, #64	; 0x40
 8014752:	4013      	ands	r3, r2
 8014754:	d011      	beq.n	801477a <USB_DeactivateEndpoint+0x15a>
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	18d3      	adds	r3, r2, r3
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	4a5c      	ldr	r2, [pc, #368]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 8014764:	4013      	ands	r3, r2
 8014766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	009b      	lsls	r3, r3, #2
 8014770:	18d3      	adds	r3, r2, r3
 8014772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014774:	4958      	ldr	r1, [pc, #352]	; (80148d8 <USB_DeactivateEndpoint+0x2b8>)
 8014776:	430a      	orrs	r2, r1
 8014778:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	18d3      	adds	r3, r2, r3
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	4a53      	ldr	r2, [pc, #332]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 8014788:	4013      	ands	r3, r2
 801478a:	62bb      	str	r3, [r7, #40]	; 0x28
 801478c:	687a      	ldr	r2, [r7, #4]
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	009b      	lsls	r3, r3, #2
 8014794:	18d3      	adds	r3, r2, r3
 8014796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014798:	494f      	ldr	r1, [pc, #316]	; (80148d8 <USB_DeactivateEndpoint+0x2b8>)
 801479a:	430a      	orrs	r2, r1
 801479c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	009b      	lsls	r3, r3, #2
 80147a6:	18d3      	adds	r3, r2, r3
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4a4f      	ldr	r2, [pc, #316]	; (80148e8 <USB_DeactivateEndpoint+0x2c8>)
 80147ac:	4013      	ands	r3, r2
 80147ae:	627b      	str	r3, [r7, #36]	; 0x24
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	009b      	lsls	r3, r3, #2
 80147b8:	18d3      	adds	r3, r2, r3
 80147ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147bc:	4948      	ldr	r1, [pc, #288]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 80147be:	430a      	orrs	r2, r1
 80147c0:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	18d3      	adds	r3, r2, r3
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	4a43      	ldr	r2, [pc, #268]	; (80148dc <USB_DeactivateEndpoint+0x2bc>)
 80147d0:	4013      	ands	r3, r2
 80147d2:	623b      	str	r3, [r7, #32]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	009b      	lsls	r3, r3, #2
 80147dc:	18d3      	adds	r3, r2, r3
 80147de:	6a3a      	ldr	r2, [r7, #32]
 80147e0:	493f      	ldr	r1, [pc, #252]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 80147e2:	430a      	orrs	r2, r1
 80147e4:	601a      	str	r2, [r3, #0]
 80147e6:	e070      	b.n	80148ca <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80147e8:	687a      	ldr	r2, [r7, #4]
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	009b      	lsls	r3, r3, #2
 80147f0:	18d3      	adds	r3, r2, r3
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	657b      	str	r3, [r7, #84]	; 0x54
 80147f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80147f8:	2380      	movs	r3, #128	; 0x80
 80147fa:	01db      	lsls	r3, r3, #7
 80147fc:	4013      	ands	r3, r2
 80147fe:	d011      	beq.n	8014824 <USB_DeactivateEndpoint+0x204>
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	009b      	lsls	r3, r3, #2
 8014808:	18d3      	adds	r3, r2, r3
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a31      	ldr	r2, [pc, #196]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 801480e:	4013      	ands	r3, r2
 8014810:	653b      	str	r3, [r7, #80]	; 0x50
 8014812:	687a      	ldr	r2, [r7, #4]
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	18d3      	adds	r3, r2, r3
 801481c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801481e:	4931      	ldr	r1, [pc, #196]	; (80148e4 <USB_DeactivateEndpoint+0x2c4>)
 8014820:	430a      	orrs	r2, r1
 8014822:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	009b      	lsls	r3, r3, #2
 801482c:	18d3      	adds	r3, r2, r3
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014834:	2240      	movs	r2, #64	; 0x40
 8014836:	4013      	ands	r3, r2
 8014838:	d011      	beq.n	801485e <USB_DeactivateEndpoint+0x23e>
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	781b      	ldrb	r3, [r3, #0]
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	18d3      	adds	r3, r2, r3
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a23      	ldr	r2, [pc, #140]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 8014848:	4013      	ands	r3, r2
 801484a:	64bb      	str	r3, [r7, #72]	; 0x48
 801484c:	687a      	ldr	r2, [r7, #4]
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	18d3      	adds	r3, r2, r3
 8014856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014858:	491f      	ldr	r1, [pc, #124]	; (80148d8 <USB_DeactivateEndpoint+0x2b8>)
 801485a:	430a      	orrs	r2, r1
 801485c:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	18d3      	adds	r3, r2, r3
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	4a1a      	ldr	r2, [pc, #104]	; (80148d4 <USB_DeactivateEndpoint+0x2b4>)
 801486c:	4013      	ands	r3, r2
 801486e:	647b      	str	r3, [r7, #68]	; 0x44
 8014870:	687a      	ldr	r2, [r7, #4]
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	18d3      	adds	r3, r2, r3
 801487a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801487c:	4919      	ldr	r1, [pc, #100]	; (80148e4 <USB_DeactivateEndpoint+0x2c4>)
 801487e:	430a      	orrs	r2, r1
 8014880:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	009b      	lsls	r3, r3, #2
 801488a:	18d3      	adds	r3, r2, r3
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4a13      	ldr	r2, [pc, #76]	; (80148dc <USB_DeactivateEndpoint+0x2bc>)
 8014890:	4013      	ands	r3, r2
 8014892:	643b      	str	r3, [r7, #64]	; 0x40
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	781b      	ldrb	r3, [r3, #0]
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	18d3      	adds	r3, r2, r3
 801489e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148a0:	490f      	ldr	r1, [pc, #60]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 80148a2:	430a      	orrs	r2, r1
 80148a4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	18d3      	adds	r3, r2, r3
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	4a0d      	ldr	r2, [pc, #52]	; (80148e8 <USB_DeactivateEndpoint+0x2c8>)
 80148b4:	4013      	ands	r3, r2
 80148b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80148b8:	687a      	ldr	r2, [r7, #4]
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	781b      	ldrb	r3, [r3, #0]
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	18d3      	adds	r3, r2, r3
 80148c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148c4:	4906      	ldr	r1, [pc, #24]	; (80148e0 <USB_DeactivateEndpoint+0x2c0>)
 80148c6:	430a      	orrs	r2, r1
 80148c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80148ca:	2300      	movs	r3, #0
}
 80148cc:	0018      	movs	r0, r3
 80148ce:	46bd      	mov	sp, r7
 80148d0:	b016      	add	sp, #88	; 0x58
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	07ff8f8f 	.word	0x07ff8f8f
 80148d8:	000080c0 	.word	0x000080c0
 80148dc:	07ff8fbf 	.word	0x07ff8fbf
 80148e0:	00008080 	.word	0x00008080
 80148e4:	0000c080 	.word	0x0000c080
 80148e8:	07ffbf8f 	.word	0x07ffbf8f

080148ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b097      	sub	sp, #92	; 0x5c
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	785b      	ldrb	r3, [r3, #1]
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d001      	beq.n	8014902 <USB_EPStartXfer+0x16>
 80148fe:	f000 fcbf 	bl	8015280 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	699a      	ldr	r2, [r3, #24]
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	691b      	ldr	r3, [r3, #16]
 801490a:	429a      	cmp	r2, r3
 801490c:	d903      	bls.n	8014916 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	691b      	ldr	r3, [r3, #16]
 8014912:	657b      	str	r3, [r7, #84]	; 0x54
 8014914:	e002      	b.n	801491c <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	699b      	ldr	r3, [r3, #24]
 801491a:	657b      	str	r3, [r7, #84]	; 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	7b1b      	ldrb	r3, [r3, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d12b      	bne.n	801497c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	6959      	ldr	r1, [r3, #20]
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	88da      	ldrh	r2, [r3, #6]
 801492c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801492e:	b29b      	uxth	r3, r3
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f001 f8f5 	bl	8015b20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	00db      	lsls	r3, r3, #3
 801493c:	4ace      	ldr	r2, [pc, #824]	; (8014c78 <USB_EPStartXfer+0x38c>)
 801493e:	4694      	mov	ip, r2
 8014940:	4463      	add	r3, ip
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	00db      	lsls	r3, r3, #3
 801494a:	49cb      	ldr	r1, [pc, #812]	; (8014c78 <USB_EPStartXfer+0x38c>)
 801494c:	468c      	mov	ip, r1
 801494e:	4463      	add	r3, ip
 8014950:	0412      	lsls	r2, r2, #16
 8014952:	0c12      	lsrs	r2, r2, #16
 8014954:	601a      	str	r2, [r3, #0]
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	4ac6      	ldr	r2, [pc, #792]	; (8014c78 <USB_EPStartXfer+0x38c>)
 801495e:	4694      	mov	ip, r2
 8014960:	4463      	add	r3, ip
 8014962:	6819      	ldr	r1, [r3, #0]
 8014964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014966:	041a      	lsls	r2, r3, #16
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	48c2      	ldr	r0, [pc, #776]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014970:	4684      	mov	ip, r0
 8014972:	4463      	add	r3, ip
 8014974:	430a      	orrs	r2, r1
 8014976:	601a      	str	r2, [r3, #0]
 8014978:	f000 fc67 	bl	801524a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801497c:	683b      	ldr	r3, [r7, #0]
 801497e:	78db      	ldrb	r3, [r3, #3]
 8014980:	2b02      	cmp	r3, #2
 8014982:	d000      	beq.n	8014986 <USB_EPStartXfer+0x9a>
 8014984:	e31a      	b.n	8014fbc <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	6a1a      	ldr	r2, [r3, #32]
 801498a:	683b      	ldr	r3, [r7, #0]
 801498c:	691b      	ldr	r3, [r3, #16]
 801498e:	429a      	cmp	r2, r3
 8014990:	d800      	bhi.n	8014994 <USB_EPStartXfer+0xa8>
 8014992:	e2c7      	b.n	8014f24 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8014994:	687a      	ldr	r2, [r7, #4]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	781b      	ldrb	r3, [r3, #0]
 801499a:	009b      	lsls	r3, r3, #2
 801499c:	18d3      	adds	r3, r2, r3
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4ab6      	ldr	r2, [pc, #728]	; (8014c7c <USB_EPStartXfer+0x390>)
 80149a2:	4013      	ands	r3, r2
 80149a4:	613b      	str	r3, [r7, #16]
 80149a6:	687a      	ldr	r2, [r7, #4]
 80149a8:	683b      	ldr	r3, [r7, #0]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	009b      	lsls	r3, r3, #2
 80149ae:	18d3      	adds	r3, r2, r3
 80149b0:	693a      	ldr	r2, [r7, #16]
 80149b2:	49b3      	ldr	r1, [pc, #716]	; (8014c80 <USB_EPStartXfer+0x394>)
 80149b4:	430a      	orrs	r2, r1
 80149b6:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80149b8:	683b      	ldr	r3, [r7, #0]
 80149ba:	6a1a      	ldr	r2, [r3, #32]
 80149bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149be:	1ad2      	subs	r2, r2, r3
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	18d3      	adds	r3, r2, r3
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2240      	movs	r2, #64	; 0x40
 80149d2:	4013      	ands	r3, r2
 80149d4:	d100      	bne.n	80149d8 <USB_EPStartXfer+0xec>
 80149d6:	e155      	b.n	8014c84 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	785b      	ldrb	r3, [r3, #1]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d162      	bne.n	8014aa6 <USB_EPStartXfer+0x1ba>
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	781b      	ldrb	r3, [r3, #0]
 80149e4:	00db      	lsls	r3, r3, #3
 80149e6:	4aa4      	ldr	r2, [pc, #656]	; (8014c78 <USB_EPStartXfer+0x38c>)
 80149e8:	4694      	mov	ip, r2
 80149ea:	4463      	add	r3, ip
 80149ec:	685a      	ldr	r2, [r3, #4]
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	00db      	lsls	r3, r3, #3
 80149f4:	49a0      	ldr	r1, [pc, #640]	; (8014c78 <USB_EPStartXfer+0x38c>)
 80149f6:	468c      	mov	ip, r1
 80149f8:	4463      	add	r3, ip
 80149fa:	0192      	lsls	r2, r2, #6
 80149fc:	0992      	lsrs	r2, r2, #6
 80149fe:	605a      	str	r2, [r3, #4]
 8014a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a02:	2b3e      	cmp	r3, #62	; 0x3e
 8014a04:	d91e      	bls.n	8014a44 <USB_EPStartXfer+0x158>
 8014a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a08:	095b      	lsrs	r3, r3, #5
 8014a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8014a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a0e:	221f      	movs	r2, #31
 8014a10:	4013      	ands	r3, r2
 8014a12:	d102      	bne.n	8014a1a <USB_EPStartXfer+0x12e>
 8014a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a16:	3b01      	subs	r3, #1
 8014a18:	653b      	str	r3, [r7, #80]	; 0x50
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	4a95      	ldr	r2, [pc, #596]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a22:	4694      	mov	ip, r2
 8014a24:	4463      	add	r3, ip
 8014a26:	685a      	ldr	r2, [r3, #4]
 8014a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a2a:	069b      	lsls	r3, r3, #26
 8014a2c:	431a      	orrs	r2, r3
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	4990      	ldr	r1, [pc, #576]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a36:	468c      	mov	ip, r1
 8014a38:	4463      	add	r3, ip
 8014a3a:	2180      	movs	r1, #128	; 0x80
 8014a3c:	0609      	lsls	r1, r1, #24
 8014a3e:	430a      	orrs	r2, r1
 8014a40:	605a      	str	r2, [r3, #4]
 8014a42:	e055      	b.n	8014af0 <USB_EPStartXfer+0x204>
 8014a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d111      	bne.n	8014a6e <USB_EPStartXfer+0x182>
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	4a89      	ldr	r2, [pc, #548]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a52:	4694      	mov	ip, r2
 8014a54:	4463      	add	r3, ip
 8014a56:	685a      	ldr	r2, [r3, #4]
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	00db      	lsls	r3, r3, #3
 8014a5e:	4986      	ldr	r1, [pc, #536]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a60:	468c      	mov	ip, r1
 8014a62:	4463      	add	r3, ip
 8014a64:	2180      	movs	r1, #128	; 0x80
 8014a66:	0609      	lsls	r1, r1, #24
 8014a68:	430a      	orrs	r2, r1
 8014a6a:	605a      	str	r2, [r3, #4]
 8014a6c:	e040      	b.n	8014af0 <USB_EPStartXfer+0x204>
 8014a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a70:	085b      	lsrs	r3, r3, #1
 8014a72:	653b      	str	r3, [r7, #80]	; 0x50
 8014a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a76:	2201      	movs	r2, #1
 8014a78:	4013      	ands	r3, r2
 8014a7a:	d002      	beq.n	8014a82 <USB_EPStartXfer+0x196>
 8014a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a7e:	3301      	adds	r3, #1
 8014a80:	653b      	str	r3, [r7, #80]	; 0x50
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	00db      	lsls	r3, r3, #3
 8014a88:	4a7b      	ldr	r2, [pc, #492]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a8a:	4694      	mov	ip, r2
 8014a8c:	4463      	add	r3, ip
 8014a8e:	6859      	ldr	r1, [r3, #4]
 8014a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a92:	069a      	lsls	r2, r3, #26
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	4877      	ldr	r0, [pc, #476]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014a9c:	4684      	mov	ip, r0
 8014a9e:	4463      	add	r3, ip
 8014aa0:	430a      	orrs	r2, r1
 8014aa2:	605a      	str	r2, [r3, #4]
 8014aa4:	e024      	b.n	8014af0 <USB_EPStartXfer+0x204>
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	785b      	ldrb	r3, [r3, #1]
 8014aaa:	2b01      	cmp	r3, #1
 8014aac:	d120      	bne.n	8014af0 <USB_EPStartXfer+0x204>
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	4a70      	ldr	r2, [pc, #448]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014ab6:	4694      	mov	ip, r2
 8014ab8:	4463      	add	r3, ip
 8014aba:	685a      	ldr	r2, [r3, #4]
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	00db      	lsls	r3, r3, #3
 8014ac2:	496d      	ldr	r1, [pc, #436]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014ac4:	468c      	mov	ip, r1
 8014ac6:	4463      	add	r3, ip
 8014ac8:	0412      	lsls	r2, r2, #16
 8014aca:	0c12      	lsrs	r2, r2, #16
 8014acc:	605a      	str	r2, [r3, #4]
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	4a68      	ldr	r2, [pc, #416]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014ad6:	4694      	mov	ip, r2
 8014ad8:	4463      	add	r3, ip
 8014ada:	6859      	ldr	r1, [r3, #4]
 8014adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ade:	041a      	lsls	r2, r3, #16
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	00db      	lsls	r3, r3, #3
 8014ae6:	4864      	ldr	r0, [pc, #400]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014ae8:	4684      	mov	ip, r0
 8014aea:	4463      	add	r3, ip
 8014aec:	430a      	orrs	r2, r1
 8014aee:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8014af0:	201a      	movs	r0, #26
 8014af2:	183b      	adds	r3, r7, r0
 8014af4:	683a      	ldr	r2, [r7, #0]
 8014af6:	8952      	ldrh	r2, [r2, #10]
 8014af8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	6959      	ldr	r1, [r3, #20]
 8014afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b00:	b29c      	uxth	r4, r3
 8014b02:	183b      	adds	r3, r7, r0
 8014b04:	881a      	ldrh	r2, [r3, #0]
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	0023      	movs	r3, r4
 8014b0a:	f001 f809 	bl	8015b20 <USB_WritePMA>
            ep->xfer_buff += len;
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	695a      	ldr	r2, [r3, #20]
 8014b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b14:	18d2      	adds	r2, r2, r3
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	6a1a      	ldr	r2, [r3, #32]
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	691b      	ldr	r3, [r3, #16]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d906      	bls.n	8014b34 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	6a1a      	ldr	r2, [r3, #32]
 8014b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b2c:	1ad2      	subs	r2, r2, r3
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	621a      	str	r2, [r3, #32]
 8014b32:	e005      	b.n	8014b40 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	6a1b      	ldr	r3, [r3, #32]
 8014b38:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8014b3a:	683b      	ldr	r3, [r7, #0]
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	785b      	ldrb	r3, [r3, #1]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d162      	bne.n	8014c0e <USB_EPStartXfer+0x322>
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	00db      	lsls	r3, r3, #3
 8014b4e:	4a4a      	ldr	r2, [pc, #296]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014b50:	4694      	mov	ip, r2
 8014b52:	4463      	add	r3, ip
 8014b54:	681a      	ldr	r2, [r3, #0]
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	00db      	lsls	r3, r3, #3
 8014b5c:	4946      	ldr	r1, [pc, #280]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014b5e:	468c      	mov	ip, r1
 8014b60:	4463      	add	r3, ip
 8014b62:	0192      	lsls	r2, r2, #6
 8014b64:	0992      	lsrs	r2, r2, #6
 8014b66:	601a      	str	r2, [r3, #0]
 8014b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8014b6c:	d91e      	bls.n	8014bac <USB_EPStartXfer+0x2c0>
 8014b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b70:	095b      	lsrs	r3, r3, #5
 8014b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b76:	221f      	movs	r2, #31
 8014b78:	4013      	ands	r3, r2
 8014b7a:	d102      	bne.n	8014b82 <USB_EPStartXfer+0x296>
 8014b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b7e:	3b01      	subs	r3, #1
 8014b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	4a3b      	ldr	r2, [pc, #236]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014b8a:	4694      	mov	ip, r2
 8014b8c:	4463      	add	r3, ip
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b92:	069b      	lsls	r3, r3, #26
 8014b94:	431a      	orrs	r2, r3
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	4936      	ldr	r1, [pc, #216]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014b9e:	468c      	mov	ip, r1
 8014ba0:	4463      	add	r3, ip
 8014ba2:	2180      	movs	r1, #128	; 0x80
 8014ba4:	0609      	lsls	r1, r1, #24
 8014ba6:	430a      	orrs	r2, r1
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	e055      	b.n	8014c58 <USB_EPStartXfer+0x36c>
 8014bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d111      	bne.n	8014bd6 <USB_EPStartXfer+0x2ea>
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	00db      	lsls	r3, r3, #3
 8014bb8:	4a2f      	ldr	r2, [pc, #188]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014bba:	4694      	mov	ip, r2
 8014bbc:	4463      	add	r3, ip
 8014bbe:	681a      	ldr	r2, [r3, #0]
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	492c      	ldr	r1, [pc, #176]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014bc8:	468c      	mov	ip, r1
 8014bca:	4463      	add	r3, ip
 8014bcc:	2180      	movs	r1, #128	; 0x80
 8014bce:	0609      	lsls	r1, r1, #24
 8014bd0:	430a      	orrs	r2, r1
 8014bd2:	601a      	str	r2, [r3, #0]
 8014bd4:	e040      	b.n	8014c58 <USB_EPStartXfer+0x36c>
 8014bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bd8:	085b      	lsrs	r3, r3, #1
 8014bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bde:	2201      	movs	r2, #1
 8014be0:	4013      	ands	r3, r2
 8014be2:	d002      	beq.n	8014bea <USB_EPStartXfer+0x2fe>
 8014be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014be6:	3301      	adds	r3, #1
 8014be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	00db      	lsls	r3, r3, #3
 8014bf0:	4a21      	ldr	r2, [pc, #132]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014bf2:	4694      	mov	ip, r2
 8014bf4:	4463      	add	r3, ip
 8014bf6:	6819      	ldr	r1, [r3, #0]
 8014bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bfa:	069a      	lsls	r2, r3, #26
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	781b      	ldrb	r3, [r3, #0]
 8014c00:	00db      	lsls	r3, r3, #3
 8014c02:	481d      	ldr	r0, [pc, #116]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014c04:	4684      	mov	ip, r0
 8014c06:	4463      	add	r3, ip
 8014c08:	430a      	orrs	r2, r1
 8014c0a:	601a      	str	r2, [r3, #0]
 8014c0c:	e024      	b.n	8014c58 <USB_EPStartXfer+0x36c>
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	785b      	ldrb	r3, [r3, #1]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d120      	bne.n	8014c58 <USB_EPStartXfer+0x36c>
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	781b      	ldrb	r3, [r3, #0]
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	4a16      	ldr	r2, [pc, #88]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014c1e:	4694      	mov	ip, r2
 8014c20:	4463      	add	r3, ip
 8014c22:	681a      	ldr	r2, [r3, #0]
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	4913      	ldr	r1, [pc, #76]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014c2c:	468c      	mov	ip, r1
 8014c2e:	4463      	add	r3, ip
 8014c30:	0412      	lsls	r2, r2, #16
 8014c32:	0c12      	lsrs	r2, r2, #16
 8014c34:	601a      	str	r2, [r3, #0]
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	00db      	lsls	r3, r3, #3
 8014c3c:	4a0e      	ldr	r2, [pc, #56]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014c3e:	4694      	mov	ip, r2
 8014c40:	4463      	add	r3, ip
 8014c42:	6819      	ldr	r1, [r3, #0]
 8014c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c46:	041a      	lsls	r2, r3, #16
 8014c48:	683b      	ldr	r3, [r7, #0]
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	00db      	lsls	r3, r3, #3
 8014c4e:	480a      	ldr	r0, [pc, #40]	; (8014c78 <USB_EPStartXfer+0x38c>)
 8014c50:	4684      	mov	ip, r0
 8014c52:	4463      	add	r3, ip
 8014c54:	430a      	orrs	r2, r1
 8014c56:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014c58:	201a      	movs	r0, #26
 8014c5a:	183b      	adds	r3, r7, r0
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	8912      	ldrh	r2, [r2, #8]
 8014c60:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	6959      	ldr	r1, [r3, #20]
 8014c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c68:	b29c      	uxth	r4, r3
 8014c6a:	183b      	adds	r3, r7, r0
 8014c6c:	881a      	ldrh	r2, [r3, #0]
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	0023      	movs	r3, r4
 8014c72:	f000 ff55 	bl	8015b20 <USB_WritePMA>
 8014c76:	e2e8      	b.n	801524a <USB_EPStartXfer+0x95e>
 8014c78:	40009800 	.word	0x40009800
 8014c7c:	07ff8f8f 	.word	0x07ff8f8f
 8014c80:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	785b      	ldrb	r3, [r3, #1]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d162      	bne.n	8014d52 <USB_EPStartXfer+0x466>
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	4ac7      	ldr	r2, [pc, #796]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014c94:	4694      	mov	ip, r2
 8014c96:	4463      	add	r3, ip
 8014c98:	681a      	ldr	r2, [r3, #0]
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	00db      	lsls	r3, r3, #3
 8014ca0:	49c3      	ldr	r1, [pc, #780]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014ca2:	468c      	mov	ip, r1
 8014ca4:	4463      	add	r3, ip
 8014ca6:	0192      	lsls	r2, r2, #6
 8014ca8:	0992      	lsrs	r2, r2, #6
 8014caa:	601a      	str	r2, [r3, #0]
 8014cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cae:	2b3e      	cmp	r3, #62	; 0x3e
 8014cb0:	d91e      	bls.n	8014cf0 <USB_EPStartXfer+0x404>
 8014cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cb4:	095b      	lsrs	r3, r3, #5
 8014cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cba:	221f      	movs	r2, #31
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	d102      	bne.n	8014cc6 <USB_EPStartXfer+0x3da>
 8014cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cc2:	3b01      	subs	r3, #1
 8014cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	00db      	lsls	r3, r3, #3
 8014ccc:	4ab8      	ldr	r2, [pc, #736]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014cce:	4694      	mov	ip, r2
 8014cd0:	4463      	add	r3, ip
 8014cd2:	681a      	ldr	r2, [r3, #0]
 8014cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014cd6:	069b      	lsls	r3, r3, #26
 8014cd8:	431a      	orrs	r2, r3
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	49b3      	ldr	r1, [pc, #716]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014ce2:	468c      	mov	ip, r1
 8014ce4:	4463      	add	r3, ip
 8014ce6:	2180      	movs	r1, #128	; 0x80
 8014ce8:	0609      	lsls	r1, r1, #24
 8014cea:	430a      	orrs	r2, r1
 8014cec:	601a      	str	r2, [r3, #0]
 8014cee:	e055      	b.n	8014d9c <USB_EPStartXfer+0x4b0>
 8014cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d111      	bne.n	8014d1a <USB_EPStartXfer+0x42e>
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	4aac      	ldr	r2, [pc, #688]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014cfe:	4694      	mov	ip, r2
 8014d00:	4463      	add	r3, ip
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	683b      	ldr	r3, [r7, #0]
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	49a9      	ldr	r1, [pc, #676]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d0c:	468c      	mov	ip, r1
 8014d0e:	4463      	add	r3, ip
 8014d10:	2180      	movs	r1, #128	; 0x80
 8014d12:	0609      	lsls	r1, r1, #24
 8014d14:	430a      	orrs	r2, r1
 8014d16:	601a      	str	r2, [r3, #0]
 8014d18:	e040      	b.n	8014d9c <USB_EPStartXfer+0x4b0>
 8014d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d1c:	085b      	lsrs	r3, r3, #1
 8014d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d22:	2201      	movs	r2, #1
 8014d24:	4013      	ands	r3, r2
 8014d26:	d002      	beq.n	8014d2e <USB_EPStartXfer+0x442>
 8014d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d2a:	3301      	adds	r3, #1
 8014d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	00db      	lsls	r3, r3, #3
 8014d34:	4a9e      	ldr	r2, [pc, #632]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d36:	4694      	mov	ip, r2
 8014d38:	4463      	add	r3, ip
 8014d3a:	6819      	ldr	r1, [r3, #0]
 8014d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014d3e:	069a      	lsls	r2, r3, #26
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	00db      	lsls	r3, r3, #3
 8014d46:	489a      	ldr	r0, [pc, #616]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d48:	4684      	mov	ip, r0
 8014d4a:	4463      	add	r3, ip
 8014d4c:	430a      	orrs	r2, r1
 8014d4e:	601a      	str	r2, [r3, #0]
 8014d50:	e024      	b.n	8014d9c <USB_EPStartXfer+0x4b0>
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	785b      	ldrb	r3, [r3, #1]
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d120      	bne.n	8014d9c <USB_EPStartXfer+0x4b0>
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	4a93      	ldr	r2, [pc, #588]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d62:	4694      	mov	ip, r2
 8014d64:	4463      	add	r3, ip
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	00db      	lsls	r3, r3, #3
 8014d6e:	4990      	ldr	r1, [pc, #576]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d70:	468c      	mov	ip, r1
 8014d72:	4463      	add	r3, ip
 8014d74:	0412      	lsls	r2, r2, #16
 8014d76:	0c12      	lsrs	r2, r2, #16
 8014d78:	601a      	str	r2, [r3, #0]
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	00db      	lsls	r3, r3, #3
 8014d80:	4a8b      	ldr	r2, [pc, #556]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d82:	4694      	mov	ip, r2
 8014d84:	4463      	add	r3, ip
 8014d86:	6819      	ldr	r1, [r3, #0]
 8014d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d8a:	041a      	lsls	r2, r3, #16
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	4887      	ldr	r0, [pc, #540]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014d94:	4684      	mov	ip, r0
 8014d96:	4463      	add	r3, ip
 8014d98:	430a      	orrs	r2, r1
 8014d9a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014d9c:	201a      	movs	r0, #26
 8014d9e:	183b      	adds	r3, r7, r0
 8014da0:	683a      	ldr	r2, [r7, #0]
 8014da2:	8912      	ldrh	r2, [r2, #8]
 8014da4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014da6:	683b      	ldr	r3, [r7, #0]
 8014da8:	6959      	ldr	r1, [r3, #20]
 8014daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dac:	b29c      	uxth	r4, r3
 8014dae:	183b      	adds	r3, r7, r0
 8014db0:	881a      	ldrh	r2, [r3, #0]
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	0023      	movs	r3, r4
 8014db6:	f000 feb3 	bl	8015b20 <USB_WritePMA>
            ep->xfer_buff += len;
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	695a      	ldr	r2, [r3, #20]
 8014dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dc0:	18d2      	adds	r2, r2, r3
 8014dc2:	683b      	ldr	r3, [r7, #0]
 8014dc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014dc6:	683b      	ldr	r3, [r7, #0]
 8014dc8:	6a1a      	ldr	r2, [r3, #32]
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	691b      	ldr	r3, [r3, #16]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d906      	bls.n	8014de0 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	6a1a      	ldr	r2, [r3, #32]
 8014dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dd8:	1ad2      	subs	r2, r2, r3
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	621a      	str	r2, [r3, #32]
 8014dde:	e005      	b.n	8014dec <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	6a1b      	ldr	r3, [r3, #32]
 8014de4:	657b      	str	r3, [r7, #84]	; 0x54
              ep->xfer_len_db = 0U;
 8014de6:	683b      	ldr	r3, [r7, #0]
 8014de8:	2200      	movs	r2, #0
 8014dea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	785b      	ldrb	r3, [r3, #1]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d162      	bne.n	8014eba <USB_EPStartXfer+0x5ce>
 8014df4:	683b      	ldr	r3, [r7, #0]
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	4a6d      	ldr	r2, [pc, #436]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014dfc:	4694      	mov	ip, r2
 8014dfe:	4463      	add	r3, ip
 8014e00:	685a      	ldr	r2, [r3, #4]
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	781b      	ldrb	r3, [r3, #0]
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	4969      	ldr	r1, [pc, #420]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e0a:	468c      	mov	ip, r1
 8014e0c:	4463      	add	r3, ip
 8014e0e:	0192      	lsls	r2, r2, #6
 8014e10:	0992      	lsrs	r2, r2, #6
 8014e12:	605a      	str	r2, [r3, #4]
 8014e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e16:	2b3e      	cmp	r3, #62	; 0x3e
 8014e18:	d91e      	bls.n	8014e58 <USB_EPStartXfer+0x56c>
 8014e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e1c:	095b      	lsrs	r3, r3, #5
 8014e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8014e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e22:	221f      	movs	r2, #31
 8014e24:	4013      	ands	r3, r2
 8014e26:	d102      	bne.n	8014e2e <USB_EPStartXfer+0x542>
 8014e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	00db      	lsls	r3, r3, #3
 8014e34:	4a5e      	ldr	r2, [pc, #376]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e36:	4694      	mov	ip, r2
 8014e38:	4463      	add	r3, ip
 8014e3a:	685a      	ldr	r2, [r3, #4]
 8014e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e3e:	069b      	lsls	r3, r3, #26
 8014e40:	431a      	orrs	r2, r3
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	00db      	lsls	r3, r3, #3
 8014e48:	4959      	ldr	r1, [pc, #356]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e4a:	468c      	mov	ip, r1
 8014e4c:	4463      	add	r3, ip
 8014e4e:	2180      	movs	r1, #128	; 0x80
 8014e50:	0609      	lsls	r1, r1, #24
 8014e52:	430a      	orrs	r2, r1
 8014e54:	605a      	str	r2, [r3, #4]
 8014e56:	e055      	b.n	8014f04 <USB_EPStartXfer+0x618>
 8014e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d111      	bne.n	8014e82 <USB_EPStartXfer+0x596>
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	00db      	lsls	r3, r3, #3
 8014e64:	4a52      	ldr	r2, [pc, #328]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e66:	4694      	mov	ip, r2
 8014e68:	4463      	add	r3, ip
 8014e6a:	685a      	ldr	r2, [r3, #4]
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	00db      	lsls	r3, r3, #3
 8014e72:	494f      	ldr	r1, [pc, #316]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e74:	468c      	mov	ip, r1
 8014e76:	4463      	add	r3, ip
 8014e78:	2180      	movs	r1, #128	; 0x80
 8014e7a:	0609      	lsls	r1, r1, #24
 8014e7c:	430a      	orrs	r2, r1
 8014e7e:	605a      	str	r2, [r3, #4]
 8014e80:	e040      	b.n	8014f04 <USB_EPStartXfer+0x618>
 8014e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e84:	085b      	lsrs	r3, r3, #1
 8014e86:	647b      	str	r3, [r7, #68]	; 0x44
 8014e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	d002      	beq.n	8014e96 <USB_EPStartXfer+0x5aa>
 8014e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e92:	3301      	adds	r3, #1
 8014e94:	647b      	str	r3, [r7, #68]	; 0x44
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	781b      	ldrb	r3, [r3, #0]
 8014e9a:	00db      	lsls	r3, r3, #3
 8014e9c:	4a44      	ldr	r2, [pc, #272]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014e9e:	4694      	mov	ip, r2
 8014ea0:	4463      	add	r3, ip
 8014ea2:	6859      	ldr	r1, [r3, #4]
 8014ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ea6:	069a      	lsls	r2, r3, #26
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	00db      	lsls	r3, r3, #3
 8014eae:	4840      	ldr	r0, [pc, #256]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014eb0:	4684      	mov	ip, r0
 8014eb2:	4463      	add	r3, ip
 8014eb4:	430a      	orrs	r2, r1
 8014eb6:	605a      	str	r2, [r3, #4]
 8014eb8:	e024      	b.n	8014f04 <USB_EPStartXfer+0x618>
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	785b      	ldrb	r3, [r3, #1]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d120      	bne.n	8014f04 <USB_EPStartXfer+0x618>
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	00db      	lsls	r3, r3, #3
 8014ec8:	4a39      	ldr	r2, [pc, #228]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014eca:	4694      	mov	ip, r2
 8014ecc:	4463      	add	r3, ip
 8014ece:	685a      	ldr	r2, [r3, #4]
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	00db      	lsls	r3, r3, #3
 8014ed6:	4936      	ldr	r1, [pc, #216]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014ed8:	468c      	mov	ip, r1
 8014eda:	4463      	add	r3, ip
 8014edc:	0412      	lsls	r2, r2, #16
 8014ede:	0c12      	lsrs	r2, r2, #16
 8014ee0:	605a      	str	r2, [r3, #4]
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	00db      	lsls	r3, r3, #3
 8014ee8:	4a31      	ldr	r2, [pc, #196]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014eea:	4694      	mov	ip, r2
 8014eec:	4463      	add	r3, ip
 8014eee:	6859      	ldr	r1, [r3, #4]
 8014ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ef2:	041a      	lsls	r2, r3, #16
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	00db      	lsls	r3, r3, #3
 8014efa:	482d      	ldr	r0, [pc, #180]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014efc:	4684      	mov	ip, r0
 8014efe:	4463      	add	r3, ip
 8014f00:	430a      	orrs	r2, r1
 8014f02:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8014f04:	201a      	movs	r0, #26
 8014f06:	183b      	adds	r3, r7, r0
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	8952      	ldrh	r2, [r2, #10]
 8014f0c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	6959      	ldr	r1, [r3, #20]
 8014f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f14:	b29c      	uxth	r4, r3
 8014f16:	183b      	adds	r3, r7, r0
 8014f18:	881a      	ldrh	r2, [r3, #0]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	0023      	movs	r3, r4
 8014f1e:	f000 fdff 	bl	8015b20 <USB_WritePMA>
 8014f22:	e192      	b.n	801524a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	6a1b      	ldr	r3, [r3, #32]
 8014f28:	657b      	str	r3, [r7, #84]	; 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	683b      	ldr	r3, [r7, #0]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	009b      	lsls	r3, r3, #2
 8014f32:	18d3      	adds	r3, r2, r3
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	4a1f      	ldr	r2, [pc, #124]	; (8014fb4 <USB_EPStartXfer+0x6c8>)
 8014f38:	4013      	ands	r3, r2
 8014f3a:	617b      	str	r3, [r7, #20]
 8014f3c:	687a      	ldr	r2, [r7, #4]
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	18d3      	adds	r3, r2, r3
 8014f46:	697a      	ldr	r2, [r7, #20]
 8014f48:	491b      	ldr	r1, [pc, #108]	; (8014fb8 <USB_EPStartXfer+0x6cc>)
 8014f4a:	430a      	orrs	r2, r1
 8014f4c:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	00db      	lsls	r3, r3, #3
 8014f54:	4a16      	ldr	r2, [pc, #88]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014f56:	4694      	mov	ip, r2
 8014f58:	4463      	add	r3, ip
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	781b      	ldrb	r3, [r3, #0]
 8014f60:	00db      	lsls	r3, r3, #3
 8014f62:	4913      	ldr	r1, [pc, #76]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014f64:	468c      	mov	ip, r1
 8014f66:	4463      	add	r3, ip
 8014f68:	0412      	lsls	r2, r2, #16
 8014f6a:	0c12      	lsrs	r2, r2, #16
 8014f6c:	601a      	str	r2, [r3, #0]
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	781b      	ldrb	r3, [r3, #0]
 8014f72:	00db      	lsls	r3, r3, #3
 8014f74:	4a0e      	ldr	r2, [pc, #56]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014f76:	4694      	mov	ip, r2
 8014f78:	4463      	add	r3, ip
 8014f7a:	6819      	ldr	r1, [r3, #0]
 8014f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014f7e:	041a      	lsls	r2, r3, #16
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	781b      	ldrb	r3, [r3, #0]
 8014f84:	00db      	lsls	r3, r3, #3
 8014f86:	480a      	ldr	r0, [pc, #40]	; (8014fb0 <USB_EPStartXfer+0x6c4>)
 8014f88:	4684      	mov	ip, r0
 8014f8a:	4463      	add	r3, ip
 8014f8c:	430a      	orrs	r2, r1
 8014f8e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014f90:	201a      	movs	r0, #26
 8014f92:	183b      	adds	r3, r7, r0
 8014f94:	683a      	ldr	r2, [r7, #0]
 8014f96:	8912      	ldrh	r2, [r2, #8]
 8014f98:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	6959      	ldr	r1, [r3, #20]
 8014f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fa0:	b29c      	uxth	r4, r3
 8014fa2:	183b      	adds	r3, r7, r0
 8014fa4:	881a      	ldrh	r2, [r3, #0]
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	0023      	movs	r3, r4
 8014faa:	f000 fdb9 	bl	8015b20 <USB_WritePMA>
 8014fae:	e14c      	b.n	801524a <USB_EPStartXfer+0x95e>
 8014fb0:	40009800 	.word	0x40009800
 8014fb4:	07ff8e8f 	.word	0x07ff8e8f
 8014fb8:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	6a1a      	ldr	r2, [r3, #32]
 8014fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fc2:	1ad2      	subs	r2, r2, r3
 8014fc4:	683b      	ldr	r3, [r7, #0]
 8014fc6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	18d3      	adds	r3, r2, r3
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	2240      	movs	r2, #64	; 0x40
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	d100      	bne.n	8014fdc <USB_EPStartXfer+0x6f0>
 8014fda:	e09b      	b.n	8015114 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	785b      	ldrb	r3, [r3, #1]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d162      	bne.n	80150aa <USB_EPStartXfer+0x7be>
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	00db      	lsls	r3, r3, #3
 8014fea:	4ad6      	ldr	r2, [pc, #856]	; (8015344 <USB_EPStartXfer+0xa58>)
 8014fec:	4694      	mov	ip, r2
 8014fee:	4463      	add	r3, ip
 8014ff0:	685a      	ldr	r2, [r3, #4]
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	00db      	lsls	r3, r3, #3
 8014ff8:	49d2      	ldr	r1, [pc, #840]	; (8015344 <USB_EPStartXfer+0xa58>)
 8014ffa:	468c      	mov	ip, r1
 8014ffc:	4463      	add	r3, ip
 8014ffe:	0192      	lsls	r2, r2, #6
 8015000:	0992      	lsrs	r2, r2, #6
 8015002:	605a      	str	r2, [r3, #4]
 8015004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015006:	2b3e      	cmp	r3, #62	; 0x3e
 8015008:	d91e      	bls.n	8015048 <USB_EPStartXfer+0x75c>
 801500a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801500c:	095b      	lsrs	r3, r3, #5
 801500e:	643b      	str	r3, [r7, #64]	; 0x40
 8015010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015012:	221f      	movs	r2, #31
 8015014:	4013      	ands	r3, r2
 8015016:	d102      	bne.n	801501e <USB_EPStartXfer+0x732>
 8015018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801501a:	3b01      	subs	r3, #1
 801501c:	643b      	str	r3, [r7, #64]	; 0x40
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	4ac7      	ldr	r2, [pc, #796]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015026:	4694      	mov	ip, r2
 8015028:	4463      	add	r3, ip
 801502a:	685a      	ldr	r2, [r3, #4]
 801502c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801502e:	069b      	lsls	r3, r3, #26
 8015030:	431a      	orrs	r2, r3
 8015032:	683b      	ldr	r3, [r7, #0]
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	00db      	lsls	r3, r3, #3
 8015038:	49c2      	ldr	r1, [pc, #776]	; (8015344 <USB_EPStartXfer+0xa58>)
 801503a:	468c      	mov	ip, r1
 801503c:	4463      	add	r3, ip
 801503e:	2180      	movs	r1, #128	; 0x80
 8015040:	0609      	lsls	r1, r1, #24
 8015042:	430a      	orrs	r2, r1
 8015044:	605a      	str	r2, [r3, #4]
 8015046:	e055      	b.n	80150f4 <USB_EPStartXfer+0x808>
 8015048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801504a:	2b00      	cmp	r3, #0
 801504c:	d111      	bne.n	8015072 <USB_EPStartXfer+0x786>
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	781b      	ldrb	r3, [r3, #0]
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	4abb      	ldr	r2, [pc, #748]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015056:	4694      	mov	ip, r2
 8015058:	4463      	add	r3, ip
 801505a:	685a      	ldr	r2, [r3, #4]
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	00db      	lsls	r3, r3, #3
 8015062:	49b8      	ldr	r1, [pc, #736]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015064:	468c      	mov	ip, r1
 8015066:	4463      	add	r3, ip
 8015068:	2180      	movs	r1, #128	; 0x80
 801506a:	0609      	lsls	r1, r1, #24
 801506c:	430a      	orrs	r2, r1
 801506e:	605a      	str	r2, [r3, #4]
 8015070:	e040      	b.n	80150f4 <USB_EPStartXfer+0x808>
 8015072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015074:	085b      	lsrs	r3, r3, #1
 8015076:	643b      	str	r3, [r7, #64]	; 0x40
 8015078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801507a:	2201      	movs	r2, #1
 801507c:	4013      	ands	r3, r2
 801507e:	d002      	beq.n	8015086 <USB_EPStartXfer+0x79a>
 8015080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015082:	3301      	adds	r3, #1
 8015084:	643b      	str	r3, [r7, #64]	; 0x40
 8015086:	683b      	ldr	r3, [r7, #0]
 8015088:	781b      	ldrb	r3, [r3, #0]
 801508a:	00db      	lsls	r3, r3, #3
 801508c:	4aad      	ldr	r2, [pc, #692]	; (8015344 <USB_EPStartXfer+0xa58>)
 801508e:	4694      	mov	ip, r2
 8015090:	4463      	add	r3, ip
 8015092:	6859      	ldr	r1, [r3, #4]
 8015094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015096:	069a      	lsls	r2, r3, #26
 8015098:	683b      	ldr	r3, [r7, #0]
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	00db      	lsls	r3, r3, #3
 801509e:	48a9      	ldr	r0, [pc, #676]	; (8015344 <USB_EPStartXfer+0xa58>)
 80150a0:	4684      	mov	ip, r0
 80150a2:	4463      	add	r3, ip
 80150a4:	430a      	orrs	r2, r1
 80150a6:	605a      	str	r2, [r3, #4]
 80150a8:	e024      	b.n	80150f4 <USB_EPStartXfer+0x808>
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	785b      	ldrb	r3, [r3, #1]
 80150ae:	2b01      	cmp	r3, #1
 80150b0:	d120      	bne.n	80150f4 <USB_EPStartXfer+0x808>
 80150b2:	683b      	ldr	r3, [r7, #0]
 80150b4:	781b      	ldrb	r3, [r3, #0]
 80150b6:	00db      	lsls	r3, r3, #3
 80150b8:	4aa2      	ldr	r2, [pc, #648]	; (8015344 <USB_EPStartXfer+0xa58>)
 80150ba:	4694      	mov	ip, r2
 80150bc:	4463      	add	r3, ip
 80150be:	685a      	ldr	r2, [r3, #4]
 80150c0:	683b      	ldr	r3, [r7, #0]
 80150c2:	781b      	ldrb	r3, [r3, #0]
 80150c4:	00db      	lsls	r3, r3, #3
 80150c6:	499f      	ldr	r1, [pc, #636]	; (8015344 <USB_EPStartXfer+0xa58>)
 80150c8:	468c      	mov	ip, r1
 80150ca:	4463      	add	r3, ip
 80150cc:	0412      	lsls	r2, r2, #16
 80150ce:	0c12      	lsrs	r2, r2, #16
 80150d0:	605a      	str	r2, [r3, #4]
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	00db      	lsls	r3, r3, #3
 80150d8:	4a9a      	ldr	r2, [pc, #616]	; (8015344 <USB_EPStartXfer+0xa58>)
 80150da:	4694      	mov	ip, r2
 80150dc:	4463      	add	r3, ip
 80150de:	6859      	ldr	r1, [r3, #4]
 80150e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150e2:	041a      	lsls	r2, r3, #16
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	4896      	ldr	r0, [pc, #600]	; (8015344 <USB_EPStartXfer+0xa58>)
 80150ec:	4684      	mov	ip, r0
 80150ee:	4463      	add	r3, ip
 80150f0:	430a      	orrs	r2, r1
 80150f2:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80150f4:	201a      	movs	r0, #26
 80150f6:	183b      	adds	r3, r7, r0
 80150f8:	683a      	ldr	r2, [r7, #0]
 80150fa:	8952      	ldrh	r2, [r2, #10]
 80150fc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	6959      	ldr	r1, [r3, #20]
 8015102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015104:	b29c      	uxth	r4, r3
 8015106:	183b      	adds	r3, r7, r0
 8015108:	881a      	ldrh	r2, [r3, #0]
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	0023      	movs	r3, r4
 801510e:	f000 fd07 	bl	8015b20 <USB_WritePMA>
 8015112:	e09a      	b.n	801524a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	785b      	ldrb	r3, [r3, #1]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d162      	bne.n	80151e2 <USB_EPStartXfer+0x8f6>
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	00db      	lsls	r3, r3, #3
 8015122:	4a88      	ldr	r2, [pc, #544]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015124:	4694      	mov	ip, r2
 8015126:	4463      	add	r3, ip
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	781b      	ldrb	r3, [r3, #0]
 801512e:	00db      	lsls	r3, r3, #3
 8015130:	4984      	ldr	r1, [pc, #528]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015132:	468c      	mov	ip, r1
 8015134:	4463      	add	r3, ip
 8015136:	0192      	lsls	r2, r2, #6
 8015138:	0992      	lsrs	r2, r2, #6
 801513a:	601a      	str	r2, [r3, #0]
 801513c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801513e:	2b3e      	cmp	r3, #62	; 0x3e
 8015140:	d91e      	bls.n	8015180 <USB_EPStartXfer+0x894>
 8015142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015144:	095b      	lsrs	r3, r3, #5
 8015146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801514a:	221f      	movs	r2, #31
 801514c:	4013      	ands	r3, r2
 801514e:	d102      	bne.n	8015156 <USB_EPStartXfer+0x86a>
 8015150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015152:	3b01      	subs	r3, #1
 8015154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	781b      	ldrb	r3, [r3, #0]
 801515a:	00db      	lsls	r3, r3, #3
 801515c:	4a79      	ldr	r2, [pc, #484]	; (8015344 <USB_EPStartXfer+0xa58>)
 801515e:	4694      	mov	ip, r2
 8015160:	4463      	add	r3, ip
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015166:	069b      	lsls	r3, r3, #26
 8015168:	431a      	orrs	r2, r3
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	00db      	lsls	r3, r3, #3
 8015170:	4974      	ldr	r1, [pc, #464]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015172:	468c      	mov	ip, r1
 8015174:	4463      	add	r3, ip
 8015176:	2180      	movs	r1, #128	; 0x80
 8015178:	0609      	lsls	r1, r1, #24
 801517a:	430a      	orrs	r2, r1
 801517c:	601a      	str	r2, [r3, #0]
 801517e:	e055      	b.n	801522c <USB_EPStartXfer+0x940>
 8015180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015182:	2b00      	cmp	r3, #0
 8015184:	d111      	bne.n	80151aa <USB_EPStartXfer+0x8be>
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	4a6d      	ldr	r2, [pc, #436]	; (8015344 <USB_EPStartXfer+0xa58>)
 801518e:	4694      	mov	ip, r2
 8015190:	4463      	add	r3, ip
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	00db      	lsls	r3, r3, #3
 801519a:	496a      	ldr	r1, [pc, #424]	; (8015344 <USB_EPStartXfer+0xa58>)
 801519c:	468c      	mov	ip, r1
 801519e:	4463      	add	r3, ip
 80151a0:	2180      	movs	r1, #128	; 0x80
 80151a2:	0609      	lsls	r1, r1, #24
 80151a4:	430a      	orrs	r2, r1
 80151a6:	601a      	str	r2, [r3, #0]
 80151a8:	e040      	b.n	801522c <USB_EPStartXfer+0x940>
 80151aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151ac:	085b      	lsrs	r3, r3, #1
 80151ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151b2:	2201      	movs	r2, #1
 80151b4:	4013      	ands	r3, r2
 80151b6:	d002      	beq.n	80151be <USB_EPStartXfer+0x8d2>
 80151b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151ba:	3301      	adds	r3, #1
 80151bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	4a5f      	ldr	r2, [pc, #380]	; (8015344 <USB_EPStartXfer+0xa58>)
 80151c6:	4694      	mov	ip, r2
 80151c8:	4463      	add	r3, ip
 80151ca:	6819      	ldr	r1, [r3, #0]
 80151cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151ce:	069a      	lsls	r2, r3, #26
 80151d0:	683b      	ldr	r3, [r7, #0]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	00db      	lsls	r3, r3, #3
 80151d6:	485b      	ldr	r0, [pc, #364]	; (8015344 <USB_EPStartXfer+0xa58>)
 80151d8:	4684      	mov	ip, r0
 80151da:	4463      	add	r3, ip
 80151dc:	430a      	orrs	r2, r1
 80151de:	601a      	str	r2, [r3, #0]
 80151e0:	e024      	b.n	801522c <USB_EPStartXfer+0x940>
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	785b      	ldrb	r3, [r3, #1]
 80151e6:	2b01      	cmp	r3, #1
 80151e8:	d120      	bne.n	801522c <USB_EPStartXfer+0x940>
 80151ea:	683b      	ldr	r3, [r7, #0]
 80151ec:	781b      	ldrb	r3, [r3, #0]
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	4a54      	ldr	r2, [pc, #336]	; (8015344 <USB_EPStartXfer+0xa58>)
 80151f2:	4694      	mov	ip, r2
 80151f4:	4463      	add	r3, ip
 80151f6:	681a      	ldr	r2, [r3, #0]
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	00db      	lsls	r3, r3, #3
 80151fe:	4951      	ldr	r1, [pc, #324]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015200:	468c      	mov	ip, r1
 8015202:	4463      	add	r3, ip
 8015204:	0412      	lsls	r2, r2, #16
 8015206:	0c12      	lsrs	r2, r2, #16
 8015208:	601a      	str	r2, [r3, #0]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	00db      	lsls	r3, r3, #3
 8015210:	4a4c      	ldr	r2, [pc, #304]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015212:	4694      	mov	ip, r2
 8015214:	4463      	add	r3, ip
 8015216:	6819      	ldr	r1, [r3, #0]
 8015218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801521a:	041a      	lsls	r2, r3, #16
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	4848      	ldr	r0, [pc, #288]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015224:	4684      	mov	ip, r0
 8015226:	4463      	add	r3, ip
 8015228:	430a      	orrs	r2, r1
 801522a:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801522c:	201a      	movs	r0, #26
 801522e:	183b      	adds	r3, r7, r0
 8015230:	683a      	ldr	r2, [r7, #0]
 8015232:	8912      	ldrh	r2, [r2, #8]
 8015234:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	6959      	ldr	r1, [r3, #20]
 801523a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801523c:	b29c      	uxth	r4, r3
 801523e:	183b      	adds	r3, r7, r0
 8015240:	881a      	ldrh	r2, [r3, #0]
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	0023      	movs	r3, r4
 8015246:	f000 fc6b 	bl	8015b20 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801524a:	687a      	ldr	r2, [r7, #4]
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	18d3      	adds	r3, r2, r3
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	4a3c      	ldr	r2, [pc, #240]	; (8015348 <USB_EPStartXfer+0xa5c>)
 8015258:	4013      	ands	r3, r2
 801525a:	60fb      	str	r3, [r7, #12]
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	2210      	movs	r2, #16
 8015260:	4053      	eors	r3, r2
 8015262:	60fb      	str	r3, [r7, #12]
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2220      	movs	r2, #32
 8015268:	4053      	eors	r3, r2
 801526a:	60fb      	str	r3, [r7, #12]
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	781b      	ldrb	r3, [r3, #0]
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	18d3      	adds	r3, r2, r3
 8015276:	68fa      	ldr	r2, [r7, #12]
 8015278:	4934      	ldr	r1, [pc, #208]	; (801534c <USB_EPStartXfer+0xa60>)
 801527a:	430a      	orrs	r2, r1
 801527c:	601a      	str	r2, [r3, #0]
 801527e:	e340      	b.n	8015902 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	7b1b      	ldrb	r3, [r3, #12]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d000      	beq.n	801528a <USB_EPStartXfer+0x99e>
 8015288:	e07e      	b.n	8015388 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	699a      	ldr	r2, [r3, #24]
 801528e:	683b      	ldr	r3, [r7, #0]
 8015290:	691b      	ldr	r3, [r3, #16]
 8015292:	429a      	cmp	r2, r3
 8015294:	d909      	bls.n	80152aa <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 8015296:	683b      	ldr	r3, [r7, #0]
 8015298:	691b      	ldr	r3, [r3, #16]
 801529a:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len -= len;
 801529c:	683b      	ldr	r3, [r7, #0]
 801529e:	699a      	ldr	r2, [r3, #24]
 80152a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152a2:	1ad2      	subs	r2, r2, r3
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	619a      	str	r2, [r3, #24]
 80152a8:	e005      	b.n	80152b6 <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	699b      	ldr	r3, [r3, #24]
 80152ae:	657b      	str	r3, [r7, #84]	; 0x54
        ep->xfer_len = 0U;
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	2200      	movs	r2, #0
 80152b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	4a21      	ldr	r2, [pc, #132]	; (8015344 <USB_EPStartXfer+0xa58>)
 80152be:	4694      	mov	ip, r2
 80152c0:	4463      	add	r3, ip
 80152c2:	685a      	ldr	r2, [r3, #4]
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	781b      	ldrb	r3, [r3, #0]
 80152c8:	00db      	lsls	r3, r3, #3
 80152ca:	491e      	ldr	r1, [pc, #120]	; (8015344 <USB_EPStartXfer+0xa58>)
 80152cc:	468c      	mov	ip, r1
 80152ce:	4463      	add	r3, ip
 80152d0:	0192      	lsls	r2, r2, #6
 80152d2:	0992      	lsrs	r2, r2, #6
 80152d4:	605a      	str	r2, [r3, #4]
 80152d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152d8:	2b3e      	cmp	r3, #62	; 0x3e
 80152da:	d91e      	bls.n	801531a <USB_EPStartXfer+0xa2e>
 80152dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152de:	095b      	lsrs	r3, r3, #5
 80152e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80152e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152e4:	221f      	movs	r2, #31
 80152e6:	4013      	ands	r3, r2
 80152e8:	d102      	bne.n	80152f0 <USB_EPStartXfer+0xa04>
 80152ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ec:	3b01      	subs	r3, #1
 80152ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	00db      	lsls	r3, r3, #3
 80152f6:	4a13      	ldr	r2, [pc, #76]	; (8015344 <USB_EPStartXfer+0xa58>)
 80152f8:	4694      	mov	ip, r2
 80152fa:	4463      	add	r3, ip
 80152fc:	685a      	ldr	r2, [r3, #4]
 80152fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015300:	069b      	lsls	r3, r3, #26
 8015302:	431a      	orrs	r2, r3
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	00db      	lsls	r3, r3, #3
 801530a:	490e      	ldr	r1, [pc, #56]	; (8015344 <USB_EPStartXfer+0xa58>)
 801530c:	468c      	mov	ip, r1
 801530e:	4463      	add	r3, ip
 8015310:	2180      	movs	r1, #128	; 0x80
 8015312:	0609      	lsls	r1, r1, #24
 8015314:	430a      	orrs	r2, r1
 8015316:	605a      	str	r2, [r3, #4]
 8015318:	e2d7      	b.n	80158ca <USB_EPStartXfer+0xfde>
 801531a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801531c:	2b00      	cmp	r3, #0
 801531e:	d117      	bne.n	8015350 <USB_EPStartXfer+0xa64>
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	00db      	lsls	r3, r3, #3
 8015326:	4a07      	ldr	r2, [pc, #28]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015328:	4694      	mov	ip, r2
 801532a:	4463      	add	r3, ip
 801532c:	685a      	ldr	r2, [r3, #4]
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	00db      	lsls	r3, r3, #3
 8015334:	4903      	ldr	r1, [pc, #12]	; (8015344 <USB_EPStartXfer+0xa58>)
 8015336:	468c      	mov	ip, r1
 8015338:	4463      	add	r3, ip
 801533a:	2180      	movs	r1, #128	; 0x80
 801533c:	0609      	lsls	r1, r1, #24
 801533e:	430a      	orrs	r2, r1
 8015340:	605a      	str	r2, [r3, #4]
 8015342:	e2c2      	b.n	80158ca <USB_EPStartXfer+0xfde>
 8015344:	40009800 	.word	0x40009800
 8015348:	07ff8fbf 	.word	0x07ff8fbf
 801534c:	00008080 	.word	0x00008080
 8015350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015352:	085b      	lsrs	r3, r3, #1
 8015354:	63bb      	str	r3, [r7, #56]	; 0x38
 8015356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015358:	2201      	movs	r2, #1
 801535a:	4013      	ands	r3, r2
 801535c:	d002      	beq.n	8015364 <USB_EPStartXfer+0xa78>
 801535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015360:	3301      	adds	r3, #1
 8015362:	63bb      	str	r3, [r7, #56]	; 0x38
 8015364:	683b      	ldr	r3, [r7, #0]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	00db      	lsls	r3, r3, #3
 801536a:	4ac4      	ldr	r2, [pc, #784]	; (801567c <USB_EPStartXfer+0xd90>)
 801536c:	4694      	mov	ip, r2
 801536e:	4463      	add	r3, ip
 8015370:	6859      	ldr	r1, [r3, #4]
 8015372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015374:	069a      	lsls	r2, r3, #26
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	781b      	ldrb	r3, [r3, #0]
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	48bf      	ldr	r0, [pc, #764]	; (801567c <USB_EPStartXfer+0xd90>)
 801537e:	4684      	mov	ip, r0
 8015380:	4463      	add	r3, ip
 8015382:	430a      	orrs	r2, r1
 8015384:	605a      	str	r2, [r3, #4]
 8015386:	e2a0      	b.n	80158ca <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	78db      	ldrb	r3, [r3, #3]
 801538c:	2b02      	cmp	r3, #2
 801538e:	d000      	beq.n	8015392 <USB_EPStartXfer+0xaa6>
 8015390:	e15f      	b.n	8015652 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8015392:	683b      	ldr	r3, [r7, #0]
 8015394:	785b      	ldrb	r3, [r3, #1]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d168      	bne.n	801546c <USB_EPStartXfer+0xb80>
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	00db      	lsls	r3, r3, #3
 80153a0:	4ab6      	ldr	r2, [pc, #728]	; (801567c <USB_EPStartXfer+0xd90>)
 80153a2:	4694      	mov	ip, r2
 80153a4:	4463      	add	r3, ip
 80153a6:	681a      	ldr	r2, [r3, #0]
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	49b3      	ldr	r1, [pc, #716]	; (801567c <USB_EPStartXfer+0xd90>)
 80153b0:	468c      	mov	ip, r1
 80153b2:	4463      	add	r3, ip
 80153b4:	0192      	lsls	r2, r2, #6
 80153b6:	0992      	lsrs	r2, r2, #6
 80153b8:	601a      	str	r2, [r3, #0]
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	691b      	ldr	r3, [r3, #16]
 80153be:	2b3e      	cmp	r3, #62	; 0x3e
 80153c0:	d920      	bls.n	8015404 <USB_EPStartXfer+0xb18>
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	691b      	ldr	r3, [r3, #16]
 80153c6:	095b      	lsrs	r3, r3, #5
 80153c8:	637b      	str	r3, [r7, #52]	; 0x34
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	221f      	movs	r2, #31
 80153d0:	4013      	ands	r3, r2
 80153d2:	d102      	bne.n	80153da <USB_EPStartXfer+0xaee>
 80153d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153d6:	3b01      	subs	r3, #1
 80153d8:	637b      	str	r3, [r7, #52]	; 0x34
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	00db      	lsls	r3, r3, #3
 80153e0:	4aa6      	ldr	r2, [pc, #664]	; (801567c <USB_EPStartXfer+0xd90>)
 80153e2:	4694      	mov	ip, r2
 80153e4:	4463      	add	r3, ip
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ea:	069b      	lsls	r3, r3, #26
 80153ec:	431a      	orrs	r2, r3
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	00db      	lsls	r3, r3, #3
 80153f4:	49a1      	ldr	r1, [pc, #644]	; (801567c <USB_EPStartXfer+0xd90>)
 80153f6:	468c      	mov	ip, r1
 80153f8:	4463      	add	r3, ip
 80153fa:	2180      	movs	r1, #128	; 0x80
 80153fc:	0609      	lsls	r1, r1, #24
 80153fe:	430a      	orrs	r2, r1
 8015400:	601a      	str	r2, [r3, #0]
 8015402:	e059      	b.n	80154b8 <USB_EPStartXfer+0xbcc>
 8015404:	683b      	ldr	r3, [r7, #0]
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d111      	bne.n	8015430 <USB_EPStartXfer+0xb44>
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	4a9a      	ldr	r2, [pc, #616]	; (801567c <USB_EPStartXfer+0xd90>)
 8015414:	4694      	mov	ip, r2
 8015416:	4463      	add	r3, ip
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	781b      	ldrb	r3, [r3, #0]
 801541e:	00db      	lsls	r3, r3, #3
 8015420:	4996      	ldr	r1, [pc, #600]	; (801567c <USB_EPStartXfer+0xd90>)
 8015422:	468c      	mov	ip, r1
 8015424:	4463      	add	r3, ip
 8015426:	2180      	movs	r1, #128	; 0x80
 8015428:	0609      	lsls	r1, r1, #24
 801542a:	430a      	orrs	r2, r1
 801542c:	601a      	str	r2, [r3, #0]
 801542e:	e043      	b.n	80154b8 <USB_EPStartXfer+0xbcc>
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	691b      	ldr	r3, [r3, #16]
 8015434:	085b      	lsrs	r3, r3, #1
 8015436:	637b      	str	r3, [r7, #52]	; 0x34
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	691b      	ldr	r3, [r3, #16]
 801543c:	2201      	movs	r2, #1
 801543e:	4013      	ands	r3, r2
 8015440:	d002      	beq.n	8015448 <USB_EPStartXfer+0xb5c>
 8015442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015444:	3301      	adds	r3, #1
 8015446:	637b      	str	r3, [r7, #52]	; 0x34
 8015448:	683b      	ldr	r3, [r7, #0]
 801544a:	781b      	ldrb	r3, [r3, #0]
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	4a8b      	ldr	r2, [pc, #556]	; (801567c <USB_EPStartXfer+0xd90>)
 8015450:	4694      	mov	ip, r2
 8015452:	4463      	add	r3, ip
 8015454:	6819      	ldr	r1, [r3, #0]
 8015456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015458:	069a      	lsls	r2, r3, #26
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	781b      	ldrb	r3, [r3, #0]
 801545e:	00db      	lsls	r3, r3, #3
 8015460:	4886      	ldr	r0, [pc, #536]	; (801567c <USB_EPStartXfer+0xd90>)
 8015462:	4684      	mov	ip, r0
 8015464:	4463      	add	r3, ip
 8015466:	430a      	orrs	r2, r1
 8015468:	601a      	str	r2, [r3, #0]
 801546a:	e025      	b.n	80154b8 <USB_EPStartXfer+0xbcc>
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	785b      	ldrb	r3, [r3, #1]
 8015470:	2b01      	cmp	r3, #1
 8015472:	d121      	bne.n	80154b8 <USB_EPStartXfer+0xbcc>
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	4a80      	ldr	r2, [pc, #512]	; (801567c <USB_EPStartXfer+0xd90>)
 801547c:	4694      	mov	ip, r2
 801547e:	4463      	add	r3, ip
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	781b      	ldrb	r3, [r3, #0]
 8015486:	00db      	lsls	r3, r3, #3
 8015488:	497c      	ldr	r1, [pc, #496]	; (801567c <USB_EPStartXfer+0xd90>)
 801548a:	468c      	mov	ip, r1
 801548c:	4463      	add	r3, ip
 801548e:	0412      	lsls	r2, r2, #16
 8015490:	0c12      	lsrs	r2, r2, #16
 8015492:	601a      	str	r2, [r3, #0]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	00db      	lsls	r3, r3, #3
 801549a:	4a78      	ldr	r2, [pc, #480]	; (801567c <USB_EPStartXfer+0xd90>)
 801549c:	4694      	mov	ip, r2
 801549e:	4463      	add	r3, ip
 80154a0:	6819      	ldr	r1, [r3, #0]
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	691b      	ldr	r3, [r3, #16]
 80154a6:	041a      	lsls	r2, r3, #16
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	4873      	ldr	r0, [pc, #460]	; (801567c <USB_EPStartXfer+0xd90>)
 80154b0:	4684      	mov	ip, r0
 80154b2:	4463      	add	r3, ip
 80154b4:	430a      	orrs	r2, r1
 80154b6:	601a      	str	r2, [r3, #0]
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	785b      	ldrb	r3, [r3, #1]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d168      	bne.n	8015592 <USB_EPStartXfer+0xca6>
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	4a6d      	ldr	r2, [pc, #436]	; (801567c <USB_EPStartXfer+0xd90>)
 80154c8:	4694      	mov	ip, r2
 80154ca:	4463      	add	r3, ip
 80154cc:	685a      	ldr	r2, [r3, #4]
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	00db      	lsls	r3, r3, #3
 80154d4:	4969      	ldr	r1, [pc, #420]	; (801567c <USB_EPStartXfer+0xd90>)
 80154d6:	468c      	mov	ip, r1
 80154d8:	4463      	add	r3, ip
 80154da:	0192      	lsls	r2, r2, #6
 80154dc:	0992      	lsrs	r2, r2, #6
 80154de:	605a      	str	r2, [r3, #4]
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	691b      	ldr	r3, [r3, #16]
 80154e4:	2b3e      	cmp	r3, #62	; 0x3e
 80154e6:	d920      	bls.n	801552a <USB_EPStartXfer+0xc3e>
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	691b      	ldr	r3, [r3, #16]
 80154ec:	095b      	lsrs	r3, r3, #5
 80154ee:	633b      	str	r3, [r7, #48]	; 0x30
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	691b      	ldr	r3, [r3, #16]
 80154f4:	221f      	movs	r2, #31
 80154f6:	4013      	ands	r3, r2
 80154f8:	d102      	bne.n	8015500 <USB_EPStartXfer+0xc14>
 80154fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154fc:	3b01      	subs	r3, #1
 80154fe:	633b      	str	r3, [r7, #48]	; 0x30
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	4a5d      	ldr	r2, [pc, #372]	; (801567c <USB_EPStartXfer+0xd90>)
 8015508:	4694      	mov	ip, r2
 801550a:	4463      	add	r3, ip
 801550c:	685a      	ldr	r2, [r3, #4]
 801550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015510:	069b      	lsls	r3, r3, #26
 8015512:	431a      	orrs	r2, r3
 8015514:	683b      	ldr	r3, [r7, #0]
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	00db      	lsls	r3, r3, #3
 801551a:	4958      	ldr	r1, [pc, #352]	; (801567c <USB_EPStartXfer+0xd90>)
 801551c:	468c      	mov	ip, r1
 801551e:	4463      	add	r3, ip
 8015520:	2180      	movs	r1, #128	; 0x80
 8015522:	0609      	lsls	r1, r1, #24
 8015524:	430a      	orrs	r2, r1
 8015526:	605a      	str	r2, [r3, #4]
 8015528:	e059      	b.n	80155de <USB_EPStartXfer+0xcf2>
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	691b      	ldr	r3, [r3, #16]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d111      	bne.n	8015556 <USB_EPStartXfer+0xc6a>
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	00db      	lsls	r3, r3, #3
 8015538:	4a50      	ldr	r2, [pc, #320]	; (801567c <USB_EPStartXfer+0xd90>)
 801553a:	4694      	mov	ip, r2
 801553c:	4463      	add	r3, ip
 801553e:	685a      	ldr	r2, [r3, #4]
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	781b      	ldrb	r3, [r3, #0]
 8015544:	00db      	lsls	r3, r3, #3
 8015546:	494d      	ldr	r1, [pc, #308]	; (801567c <USB_EPStartXfer+0xd90>)
 8015548:	468c      	mov	ip, r1
 801554a:	4463      	add	r3, ip
 801554c:	2180      	movs	r1, #128	; 0x80
 801554e:	0609      	lsls	r1, r1, #24
 8015550:	430a      	orrs	r2, r1
 8015552:	605a      	str	r2, [r3, #4]
 8015554:	e043      	b.n	80155de <USB_EPStartXfer+0xcf2>
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	691b      	ldr	r3, [r3, #16]
 801555a:	085b      	lsrs	r3, r3, #1
 801555c:	633b      	str	r3, [r7, #48]	; 0x30
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	691b      	ldr	r3, [r3, #16]
 8015562:	2201      	movs	r2, #1
 8015564:	4013      	ands	r3, r2
 8015566:	d002      	beq.n	801556e <USB_EPStartXfer+0xc82>
 8015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556a:	3301      	adds	r3, #1
 801556c:	633b      	str	r3, [r7, #48]	; 0x30
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	781b      	ldrb	r3, [r3, #0]
 8015572:	00db      	lsls	r3, r3, #3
 8015574:	4a41      	ldr	r2, [pc, #260]	; (801567c <USB_EPStartXfer+0xd90>)
 8015576:	4694      	mov	ip, r2
 8015578:	4463      	add	r3, ip
 801557a:	6859      	ldr	r1, [r3, #4]
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	069a      	lsls	r2, r3, #26
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	00db      	lsls	r3, r3, #3
 8015586:	483d      	ldr	r0, [pc, #244]	; (801567c <USB_EPStartXfer+0xd90>)
 8015588:	4684      	mov	ip, r0
 801558a:	4463      	add	r3, ip
 801558c:	430a      	orrs	r2, r1
 801558e:	605a      	str	r2, [r3, #4]
 8015590:	e025      	b.n	80155de <USB_EPStartXfer+0xcf2>
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	785b      	ldrb	r3, [r3, #1]
 8015596:	2b01      	cmp	r3, #1
 8015598:	d121      	bne.n	80155de <USB_EPStartXfer+0xcf2>
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	781b      	ldrb	r3, [r3, #0]
 801559e:	00db      	lsls	r3, r3, #3
 80155a0:	4a36      	ldr	r2, [pc, #216]	; (801567c <USB_EPStartXfer+0xd90>)
 80155a2:	4694      	mov	ip, r2
 80155a4:	4463      	add	r3, ip
 80155a6:	685a      	ldr	r2, [r3, #4]
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	4933      	ldr	r1, [pc, #204]	; (801567c <USB_EPStartXfer+0xd90>)
 80155b0:	468c      	mov	ip, r1
 80155b2:	4463      	add	r3, ip
 80155b4:	0412      	lsls	r2, r2, #16
 80155b6:	0c12      	lsrs	r2, r2, #16
 80155b8:	605a      	str	r2, [r3, #4]
 80155ba:	683b      	ldr	r3, [r7, #0]
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	00db      	lsls	r3, r3, #3
 80155c0:	4a2e      	ldr	r2, [pc, #184]	; (801567c <USB_EPStartXfer+0xd90>)
 80155c2:	4694      	mov	ip, r2
 80155c4:	4463      	add	r3, ip
 80155c6:	6859      	ldr	r1, [r3, #4]
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	691b      	ldr	r3, [r3, #16]
 80155cc:	041a      	lsls	r2, r3, #16
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	00db      	lsls	r3, r3, #3
 80155d4:	4829      	ldr	r0, [pc, #164]	; (801567c <USB_EPStartXfer+0xd90>)
 80155d6:	4684      	mov	ip, r0
 80155d8:	4463      	add	r3, ip
 80155da:	430a      	orrs	r2, r1
 80155dc:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80155de:	683b      	ldr	r3, [r7, #0]
 80155e0:	69db      	ldr	r3, [r3, #28]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d100      	bne.n	80155e8 <USB_EPStartXfer+0xcfc>
 80155e6:	e170      	b.n	80158ca <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	781b      	ldrb	r3, [r3, #0]
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	18d3      	adds	r3, r2, r3
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	2126      	movs	r1, #38	; 0x26
 80155f6:	187b      	adds	r3, r7, r1
 80155f8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80155fa:	187b      	adds	r3, r7, r1
 80155fc:	881a      	ldrh	r2, [r3, #0]
 80155fe:	2380      	movs	r3, #128	; 0x80
 8015600:	01db      	lsls	r3, r3, #7
 8015602:	4013      	ands	r3, r2
 8015604:	d004      	beq.n	8015610 <USB_EPStartXfer+0xd24>
 8015606:	187b      	adds	r3, r7, r1
 8015608:	881b      	ldrh	r3, [r3, #0]
 801560a:	2240      	movs	r2, #64	; 0x40
 801560c:	4013      	ands	r3, r2
 801560e:	d10d      	bne.n	801562c <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015610:	2126      	movs	r1, #38	; 0x26
 8015612:	187b      	adds	r3, r7, r1
 8015614:	881a      	ldrh	r2, [r3, #0]
 8015616:	2380      	movs	r3, #128	; 0x80
 8015618:	01db      	lsls	r3, r3, #7
 801561a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801561c:	d000      	beq.n	8015620 <USB_EPStartXfer+0xd34>
 801561e:	e154      	b.n	80158ca <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8015620:	187b      	adds	r3, r7, r1
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	2240      	movs	r2, #64	; 0x40
 8015626:	4013      	ands	r3, r2
 8015628:	d000      	beq.n	801562c <USB_EPStartXfer+0xd40>
 801562a:	e14e      	b.n	80158ca <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801562c:	687a      	ldr	r2, [r7, #4]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	009b      	lsls	r3, r3, #2
 8015634:	18d3      	adds	r3, r2, r3
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4a11      	ldr	r2, [pc, #68]	; (8015680 <USB_EPStartXfer+0xd94>)
 801563a:	4013      	ands	r3, r2
 801563c:	623b      	str	r3, [r7, #32]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	18d3      	adds	r3, r2, r3
 8015648:	6a3a      	ldr	r2, [r7, #32]
 801564a:	490e      	ldr	r1, [pc, #56]	; (8015684 <USB_EPStartXfer+0xd98>)
 801564c:	430a      	orrs	r2, r1
 801564e:	601a      	str	r2, [r3, #0]
 8015650:	e13b      	b.n	80158ca <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	78db      	ldrb	r3, [r3, #3]
 8015656:	2b01      	cmp	r3, #1
 8015658:	d000      	beq.n	801565c <USB_EPStartXfer+0xd70>
 801565a:	e134      	b.n	80158c6 <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	699a      	ldr	r2, [r3, #24]
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	691b      	ldr	r3, [r3, #16]
 8015664:	429a      	cmp	r2, r3
 8015666:	d90f      	bls.n	8015688 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	691b      	ldr	r3, [r3, #16]
 801566c:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len -= len;
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	699a      	ldr	r2, [r3, #24]
 8015672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015674:	1ad2      	subs	r2, r2, r3
 8015676:	683b      	ldr	r3, [r7, #0]
 8015678:	619a      	str	r2, [r3, #24]
 801567a:	e00b      	b.n	8015694 <USB_EPStartXfer+0xda8>
 801567c:	40009800 	.word	0x40009800
 8015680:	07ff8f8f 	.word	0x07ff8f8f
 8015684:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	699b      	ldr	r3, [r3, #24]
 801568c:	657b      	str	r3, [r7, #84]	; 0x54
          ep->xfer_len = 0U;
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	2200      	movs	r2, #0
 8015692:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	785b      	ldrb	r3, [r3, #1]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d162      	bne.n	8015762 <USB_EPStartXfer+0xe76>
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	00db      	lsls	r3, r3, #3
 80156a2:	4a9a      	ldr	r2, [pc, #616]	; (801590c <USB_EPStartXfer+0x1020>)
 80156a4:	4694      	mov	ip, r2
 80156a6:	4463      	add	r3, ip
 80156a8:	681a      	ldr	r2, [r3, #0]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	00db      	lsls	r3, r3, #3
 80156b0:	4996      	ldr	r1, [pc, #600]	; (801590c <USB_EPStartXfer+0x1020>)
 80156b2:	468c      	mov	ip, r1
 80156b4:	4463      	add	r3, ip
 80156b6:	0192      	lsls	r2, r2, #6
 80156b8:	0992      	lsrs	r2, r2, #6
 80156ba:	601a      	str	r2, [r3, #0]
 80156bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156be:	2b3e      	cmp	r3, #62	; 0x3e
 80156c0:	d91e      	bls.n	8015700 <USB_EPStartXfer+0xe14>
 80156c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156c4:	095b      	lsrs	r3, r3, #5
 80156c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156ca:	221f      	movs	r2, #31
 80156cc:	4013      	ands	r3, r2
 80156ce:	d102      	bne.n	80156d6 <USB_EPStartXfer+0xdea>
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	3b01      	subs	r3, #1
 80156d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	00db      	lsls	r3, r3, #3
 80156dc:	4a8b      	ldr	r2, [pc, #556]	; (801590c <USB_EPStartXfer+0x1020>)
 80156de:	4694      	mov	ip, r2
 80156e0:	4463      	add	r3, ip
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e6:	069b      	lsls	r3, r3, #26
 80156e8:	431a      	orrs	r2, r3
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	4986      	ldr	r1, [pc, #536]	; (801590c <USB_EPStartXfer+0x1020>)
 80156f2:	468c      	mov	ip, r1
 80156f4:	4463      	add	r3, ip
 80156f6:	2180      	movs	r1, #128	; 0x80
 80156f8:	0609      	lsls	r1, r1, #24
 80156fa:	430a      	orrs	r2, r1
 80156fc:	601a      	str	r2, [r3, #0]
 80156fe:	e055      	b.n	80157ac <USB_EPStartXfer+0xec0>
 8015700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015702:	2b00      	cmp	r3, #0
 8015704:	d111      	bne.n	801572a <USB_EPStartXfer+0xe3e>
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	4a7f      	ldr	r2, [pc, #508]	; (801590c <USB_EPStartXfer+0x1020>)
 801570e:	4694      	mov	ip, r2
 8015710:	4463      	add	r3, ip
 8015712:	681a      	ldr	r2, [r3, #0]
 8015714:	683b      	ldr	r3, [r7, #0]
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	00db      	lsls	r3, r3, #3
 801571a:	497c      	ldr	r1, [pc, #496]	; (801590c <USB_EPStartXfer+0x1020>)
 801571c:	468c      	mov	ip, r1
 801571e:	4463      	add	r3, ip
 8015720:	2180      	movs	r1, #128	; 0x80
 8015722:	0609      	lsls	r1, r1, #24
 8015724:	430a      	orrs	r2, r1
 8015726:	601a      	str	r2, [r3, #0]
 8015728:	e040      	b.n	80157ac <USB_EPStartXfer+0xec0>
 801572a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801572c:	085b      	lsrs	r3, r3, #1
 801572e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015732:	2201      	movs	r2, #1
 8015734:	4013      	ands	r3, r2
 8015736:	d002      	beq.n	801573e <USB_EPStartXfer+0xe52>
 8015738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573a:	3301      	adds	r3, #1
 801573c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	00db      	lsls	r3, r3, #3
 8015744:	4a71      	ldr	r2, [pc, #452]	; (801590c <USB_EPStartXfer+0x1020>)
 8015746:	4694      	mov	ip, r2
 8015748:	4463      	add	r3, ip
 801574a:	6819      	ldr	r1, [r3, #0]
 801574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801574e:	069a      	lsls	r2, r3, #26
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	781b      	ldrb	r3, [r3, #0]
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	486d      	ldr	r0, [pc, #436]	; (801590c <USB_EPStartXfer+0x1020>)
 8015758:	4684      	mov	ip, r0
 801575a:	4463      	add	r3, ip
 801575c:	430a      	orrs	r2, r1
 801575e:	601a      	str	r2, [r3, #0]
 8015760:	e024      	b.n	80157ac <USB_EPStartXfer+0xec0>
 8015762:	683b      	ldr	r3, [r7, #0]
 8015764:	785b      	ldrb	r3, [r3, #1]
 8015766:	2b01      	cmp	r3, #1
 8015768:	d120      	bne.n	80157ac <USB_EPStartXfer+0xec0>
 801576a:	683b      	ldr	r3, [r7, #0]
 801576c:	781b      	ldrb	r3, [r3, #0]
 801576e:	00db      	lsls	r3, r3, #3
 8015770:	4a66      	ldr	r2, [pc, #408]	; (801590c <USB_EPStartXfer+0x1020>)
 8015772:	4694      	mov	ip, r2
 8015774:	4463      	add	r3, ip
 8015776:	681a      	ldr	r2, [r3, #0]
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	4963      	ldr	r1, [pc, #396]	; (801590c <USB_EPStartXfer+0x1020>)
 8015780:	468c      	mov	ip, r1
 8015782:	4463      	add	r3, ip
 8015784:	0412      	lsls	r2, r2, #16
 8015786:	0c12      	lsrs	r2, r2, #16
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	781b      	ldrb	r3, [r3, #0]
 801578e:	00db      	lsls	r3, r3, #3
 8015790:	4a5e      	ldr	r2, [pc, #376]	; (801590c <USB_EPStartXfer+0x1020>)
 8015792:	4694      	mov	ip, r2
 8015794:	4463      	add	r3, ip
 8015796:	6819      	ldr	r1, [r3, #0]
 8015798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801579a:	041a      	lsls	r2, r3, #16
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	00db      	lsls	r3, r3, #3
 80157a2:	485a      	ldr	r0, [pc, #360]	; (801590c <USB_EPStartXfer+0x1020>)
 80157a4:	4684      	mov	ip, r0
 80157a6:	4463      	add	r3, ip
 80157a8:	430a      	orrs	r2, r1
 80157aa:	601a      	str	r2, [r3, #0]
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	785b      	ldrb	r3, [r3, #1]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d162      	bne.n	801587a <USB_EPStartXfer+0xf8e>
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	00db      	lsls	r3, r3, #3
 80157ba:	4a54      	ldr	r2, [pc, #336]	; (801590c <USB_EPStartXfer+0x1020>)
 80157bc:	4694      	mov	ip, r2
 80157be:	4463      	add	r3, ip
 80157c0:	685a      	ldr	r2, [r3, #4]
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	00db      	lsls	r3, r3, #3
 80157c8:	4950      	ldr	r1, [pc, #320]	; (801590c <USB_EPStartXfer+0x1020>)
 80157ca:	468c      	mov	ip, r1
 80157cc:	4463      	add	r3, ip
 80157ce:	0192      	lsls	r2, r2, #6
 80157d0:	0992      	lsrs	r2, r2, #6
 80157d2:	605a      	str	r2, [r3, #4]
 80157d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157d6:	2b3e      	cmp	r3, #62	; 0x3e
 80157d8:	d91e      	bls.n	8015818 <USB_EPStartXfer+0xf2c>
 80157da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157dc:	095b      	lsrs	r3, r3, #5
 80157de:	62bb      	str	r3, [r7, #40]	; 0x28
 80157e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157e2:	221f      	movs	r2, #31
 80157e4:	4013      	ands	r3, r2
 80157e6:	d102      	bne.n	80157ee <USB_EPStartXfer+0xf02>
 80157e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157ea:	3b01      	subs	r3, #1
 80157ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	00db      	lsls	r3, r3, #3
 80157f4:	4a45      	ldr	r2, [pc, #276]	; (801590c <USB_EPStartXfer+0x1020>)
 80157f6:	4694      	mov	ip, r2
 80157f8:	4463      	add	r3, ip
 80157fa:	685a      	ldr	r2, [r3, #4]
 80157fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fe:	069b      	lsls	r3, r3, #26
 8015800:	431a      	orrs	r2, r3
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	00db      	lsls	r3, r3, #3
 8015808:	4940      	ldr	r1, [pc, #256]	; (801590c <USB_EPStartXfer+0x1020>)
 801580a:	468c      	mov	ip, r1
 801580c:	4463      	add	r3, ip
 801580e:	2180      	movs	r1, #128	; 0x80
 8015810:	0609      	lsls	r1, r1, #24
 8015812:	430a      	orrs	r2, r1
 8015814:	605a      	str	r2, [r3, #4]
 8015816:	e058      	b.n	80158ca <USB_EPStartXfer+0xfde>
 8015818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801581a:	2b00      	cmp	r3, #0
 801581c:	d111      	bne.n	8015842 <USB_EPStartXfer+0xf56>
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	00db      	lsls	r3, r3, #3
 8015824:	4a39      	ldr	r2, [pc, #228]	; (801590c <USB_EPStartXfer+0x1020>)
 8015826:	4694      	mov	ip, r2
 8015828:	4463      	add	r3, ip
 801582a:	685a      	ldr	r2, [r3, #4]
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	781b      	ldrb	r3, [r3, #0]
 8015830:	00db      	lsls	r3, r3, #3
 8015832:	4936      	ldr	r1, [pc, #216]	; (801590c <USB_EPStartXfer+0x1020>)
 8015834:	468c      	mov	ip, r1
 8015836:	4463      	add	r3, ip
 8015838:	2180      	movs	r1, #128	; 0x80
 801583a:	0609      	lsls	r1, r1, #24
 801583c:	430a      	orrs	r2, r1
 801583e:	605a      	str	r2, [r3, #4]
 8015840:	e043      	b.n	80158ca <USB_EPStartXfer+0xfde>
 8015842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015844:	085b      	lsrs	r3, r3, #1
 8015846:	62bb      	str	r3, [r7, #40]	; 0x28
 8015848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801584a:	2201      	movs	r2, #1
 801584c:	4013      	ands	r3, r2
 801584e:	d002      	beq.n	8015856 <USB_EPStartXfer+0xf6a>
 8015850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015852:	3301      	adds	r3, #1
 8015854:	62bb      	str	r3, [r7, #40]	; 0x28
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	4a2b      	ldr	r2, [pc, #172]	; (801590c <USB_EPStartXfer+0x1020>)
 801585e:	4694      	mov	ip, r2
 8015860:	4463      	add	r3, ip
 8015862:	6859      	ldr	r1, [r3, #4]
 8015864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015866:	069a      	lsls	r2, r3, #26
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	00db      	lsls	r3, r3, #3
 801586e:	4827      	ldr	r0, [pc, #156]	; (801590c <USB_EPStartXfer+0x1020>)
 8015870:	4684      	mov	ip, r0
 8015872:	4463      	add	r3, ip
 8015874:	430a      	orrs	r2, r1
 8015876:	605a      	str	r2, [r3, #4]
 8015878:	e027      	b.n	80158ca <USB_EPStartXfer+0xfde>
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	785b      	ldrb	r3, [r3, #1]
 801587e:	2b01      	cmp	r3, #1
 8015880:	d123      	bne.n	80158ca <USB_EPStartXfer+0xfde>
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	781b      	ldrb	r3, [r3, #0]
 8015886:	00db      	lsls	r3, r3, #3
 8015888:	4a20      	ldr	r2, [pc, #128]	; (801590c <USB_EPStartXfer+0x1020>)
 801588a:	4694      	mov	ip, r2
 801588c:	4463      	add	r3, ip
 801588e:	685a      	ldr	r2, [r3, #4]
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	781b      	ldrb	r3, [r3, #0]
 8015894:	00db      	lsls	r3, r3, #3
 8015896:	491d      	ldr	r1, [pc, #116]	; (801590c <USB_EPStartXfer+0x1020>)
 8015898:	468c      	mov	ip, r1
 801589a:	4463      	add	r3, ip
 801589c:	0412      	lsls	r2, r2, #16
 801589e:	0c12      	lsrs	r2, r2, #16
 80158a0:	605a      	str	r2, [r3, #4]
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	781b      	ldrb	r3, [r3, #0]
 80158a6:	00db      	lsls	r3, r3, #3
 80158a8:	4a18      	ldr	r2, [pc, #96]	; (801590c <USB_EPStartXfer+0x1020>)
 80158aa:	4694      	mov	ip, r2
 80158ac:	4463      	add	r3, ip
 80158ae:	6859      	ldr	r1, [r3, #4]
 80158b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b2:	041a      	lsls	r2, r3, #16
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	4814      	ldr	r0, [pc, #80]	; (801590c <USB_EPStartXfer+0x1020>)
 80158bc:	4684      	mov	ip, r0
 80158be:	4463      	add	r3, ip
 80158c0:	430a      	orrs	r2, r1
 80158c2:	605a      	str	r2, [r3, #4]
 80158c4:	e001      	b.n	80158ca <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 80158c6:	2301      	movs	r3, #1
 80158c8:	e01c      	b.n	8015904 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80158ca:	687a      	ldr	r2, [r7, #4]
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	18d3      	adds	r3, r2, r3
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4a0e      	ldr	r2, [pc, #56]	; (8015910 <USB_EPStartXfer+0x1024>)
 80158d8:	4013      	ands	r3, r2
 80158da:	61fb      	str	r3, [r7, #28]
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	2280      	movs	r2, #128	; 0x80
 80158e0:	0152      	lsls	r2, r2, #5
 80158e2:	4053      	eors	r3, r2
 80158e4:	61fb      	str	r3, [r7, #28]
 80158e6:	69fb      	ldr	r3, [r7, #28]
 80158e8:	2280      	movs	r2, #128	; 0x80
 80158ea:	0192      	lsls	r2, r2, #6
 80158ec:	4053      	eors	r3, r2
 80158ee:	61fb      	str	r3, [r7, #28]
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	009b      	lsls	r3, r3, #2
 80158f8:	18d3      	adds	r3, r2, r3
 80158fa:	69fa      	ldr	r2, [r7, #28]
 80158fc:	4905      	ldr	r1, [pc, #20]	; (8015914 <USB_EPStartXfer+0x1028>)
 80158fe:	430a      	orrs	r2, r1
 8015900:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015902:	2300      	movs	r3, #0
}
 8015904:	0018      	movs	r0, r3
 8015906:	46bd      	mov	sp, r7
 8015908:	b017      	add	sp, #92	; 0x5c
 801590a:	bd90      	pop	{r4, r7, pc}
 801590c:	40009800 	.word	0x40009800
 8015910:	07ffbf8f 	.word	0x07ffbf8f
 8015914:	00008080 	.word	0x00008080

08015918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b084      	sub	sp, #16
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
 8015920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	785b      	ldrb	r3, [r3, #1]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d016      	beq.n	8015958 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	683b      	ldr	r3, [r7, #0]
 801592e:	781b      	ldrb	r3, [r3, #0]
 8015930:	009b      	lsls	r3, r3, #2
 8015932:	18d3      	adds	r3, r2, r3
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	4a16      	ldr	r2, [pc, #88]	; (8015990 <USB_EPSetStall+0x78>)
 8015938:	4013      	ands	r3, r2
 801593a:	60bb      	str	r3, [r7, #8]
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	2210      	movs	r2, #16
 8015940:	4053      	eors	r3, r2
 8015942:	60bb      	str	r3, [r7, #8]
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	009b      	lsls	r3, r3, #2
 801594c:	18d3      	adds	r3, r2, r3
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	4910      	ldr	r1, [pc, #64]	; (8015994 <USB_EPSetStall+0x7c>)
 8015952:	430a      	orrs	r2, r1
 8015954:	601a      	str	r2, [r3, #0]
 8015956:	e016      	b.n	8015986 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	781b      	ldrb	r3, [r3, #0]
 801595e:	009b      	lsls	r3, r3, #2
 8015960:	18d3      	adds	r3, r2, r3
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	4a0c      	ldr	r2, [pc, #48]	; (8015998 <USB_EPSetStall+0x80>)
 8015966:	4013      	ands	r3, r2
 8015968:	60fb      	str	r3, [r7, #12]
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2280      	movs	r2, #128	; 0x80
 801596e:	0152      	lsls	r2, r2, #5
 8015970:	4053      	eors	r3, r2
 8015972:	60fb      	str	r3, [r7, #12]
 8015974:	687a      	ldr	r2, [r7, #4]
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	18d3      	adds	r3, r2, r3
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	4904      	ldr	r1, [pc, #16]	; (8015994 <USB_EPSetStall+0x7c>)
 8015982:	430a      	orrs	r2, r1
 8015984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015986:	2300      	movs	r3, #0
}
 8015988:	0018      	movs	r0, r3
 801598a:	46bd      	mov	sp, r7
 801598c:	b004      	add	sp, #16
 801598e:	bd80      	pop	{r7, pc}
 8015990:	07ff8fbf 	.word	0x07ff8fbf
 8015994:	00008080 	.word	0x00008080
 8015998:	07ffbf8f 	.word	0x07ffbf8f

0801599c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b088      	sub	sp, #32
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	7b1b      	ldrb	r3, [r3, #12]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d000      	beq.n	80159b0 <USB_EPClearStall+0x14>
 80159ae:	e075      	b.n	8015a9c <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	785b      	ldrb	r3, [r3, #1]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d037      	beq.n	8015a28 <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	18d3      	adds	r3, r2, r3
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	613b      	str	r3, [r7, #16]
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	2240      	movs	r2, #64	; 0x40
 80159ca:	4013      	ands	r3, r2
 80159cc:	d011      	beq.n	80159f2 <USB_EPClearStall+0x56>
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	009b      	lsls	r3, r3, #2
 80159d6:	18d3      	adds	r3, r2, r3
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4a33      	ldr	r2, [pc, #204]	; (8015aa8 <USB_EPClearStall+0x10c>)
 80159dc:	4013      	ands	r3, r2
 80159de:	60fb      	str	r3, [r7, #12]
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	18d3      	adds	r3, r2, r3
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	492f      	ldr	r1, [pc, #188]	; (8015aac <USB_EPClearStall+0x110>)
 80159ee:	430a      	orrs	r2, r1
 80159f0:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	78db      	ldrb	r3, [r3, #3]
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d050      	beq.n	8015a9c <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80159fa:	687a      	ldr	r2, [r7, #4]
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	009b      	lsls	r3, r3, #2
 8015a02:	18d3      	adds	r3, r2, r3
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	4a2a      	ldr	r2, [pc, #168]	; (8015ab0 <USB_EPClearStall+0x114>)
 8015a08:	4013      	ands	r3, r2
 8015a0a:	60bb      	str	r3, [r7, #8]
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	2220      	movs	r2, #32
 8015a10:	4053      	eors	r3, r2
 8015a12:	60bb      	str	r3, [r7, #8]
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	683b      	ldr	r3, [r7, #0]
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	18d3      	adds	r3, r2, r3
 8015a1e:	68ba      	ldr	r2, [r7, #8]
 8015a20:	4924      	ldr	r1, [pc, #144]	; (8015ab4 <USB_EPClearStall+0x118>)
 8015a22:	430a      	orrs	r2, r1
 8015a24:	601a      	str	r2, [r3, #0]
 8015a26:	e039      	b.n	8015a9c <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015a28:	687a      	ldr	r2, [r7, #4]
 8015a2a:	683b      	ldr	r3, [r7, #0]
 8015a2c:	781b      	ldrb	r3, [r3, #0]
 8015a2e:	009b      	lsls	r3, r3, #2
 8015a30:	18d3      	adds	r3, r2, r3
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	61fb      	str	r3, [r7, #28]
 8015a36:	69fa      	ldr	r2, [r7, #28]
 8015a38:	2380      	movs	r3, #128	; 0x80
 8015a3a:	01db      	lsls	r3, r3, #7
 8015a3c:	4013      	ands	r3, r2
 8015a3e:	d011      	beq.n	8015a64 <USB_EPClearStall+0xc8>
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	18d3      	adds	r3, r2, r3
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	4a16      	ldr	r2, [pc, #88]	; (8015aa8 <USB_EPClearStall+0x10c>)
 8015a4e:	4013      	ands	r3, r2
 8015a50:	61bb      	str	r3, [r7, #24]
 8015a52:	687a      	ldr	r2, [r7, #4]
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	009b      	lsls	r3, r3, #2
 8015a5a:	18d3      	adds	r3, r2, r3
 8015a5c:	69ba      	ldr	r2, [r7, #24]
 8015a5e:	4916      	ldr	r1, [pc, #88]	; (8015ab8 <USB_EPClearStall+0x11c>)
 8015a60:	430a      	orrs	r2, r1
 8015a62:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	781b      	ldrb	r3, [r3, #0]
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	18d3      	adds	r3, r2, r3
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	4a12      	ldr	r2, [pc, #72]	; (8015abc <USB_EPClearStall+0x120>)
 8015a72:	4013      	ands	r3, r2
 8015a74:	617b      	str	r3, [r7, #20]
 8015a76:	697b      	ldr	r3, [r7, #20]
 8015a78:	2280      	movs	r2, #128	; 0x80
 8015a7a:	0152      	lsls	r2, r2, #5
 8015a7c:	4053      	eors	r3, r2
 8015a7e:	617b      	str	r3, [r7, #20]
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	2280      	movs	r2, #128	; 0x80
 8015a84:	0192      	lsls	r2, r2, #6
 8015a86:	4053      	eors	r3, r2
 8015a88:	617b      	str	r3, [r7, #20]
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	009b      	lsls	r3, r3, #2
 8015a92:	18d3      	adds	r3, r2, r3
 8015a94:	697a      	ldr	r2, [r7, #20]
 8015a96:	4907      	ldr	r1, [pc, #28]	; (8015ab4 <USB_EPClearStall+0x118>)
 8015a98:	430a      	orrs	r2, r1
 8015a9a:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8015a9c:	2300      	movs	r3, #0
}
 8015a9e:	0018      	movs	r0, r3
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	b008      	add	sp, #32
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	46c0      	nop			; (mov r8, r8)
 8015aa8:	07ff8f8f 	.word	0x07ff8f8f
 8015aac:	000080c0 	.word	0x000080c0
 8015ab0:	07ff8fbf 	.word	0x07ff8fbf
 8015ab4:	00008080 	.word	0x00008080
 8015ab8:	0000c080 	.word	0x0000c080
 8015abc:	07ffbf8f 	.word	0x07ffbf8f

08015ac0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b082      	sub	sp, #8
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	000a      	movs	r2, r1
 8015aca:	1cfb      	adds	r3, r7, #3
 8015acc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8015ace:	1cfb      	adds	r3, r7, #3
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d102      	bne.n	8015adc <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2280      	movs	r2, #128	; 0x80
 8015ada:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	0018      	movs	r0, r3
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	b002      	add	sp, #8
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b082      	sub	sp, #8
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015af2:	2280      	movs	r2, #128	; 0x80
 8015af4:	0212      	lsls	r2, r2, #8
 8015af6:	431a      	orrs	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8015afc:	2300      	movs	r3, #0
}
 8015afe:	0018      	movs	r0, r3
 8015b00:	46bd      	mov	sp, r7
 8015b02:	b002      	add	sp, #8
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b084      	sub	sp, #16
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8015b14:	68fb      	ldr	r3, [r7, #12]
}
 8015b16:	0018      	movs	r0, r3
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	b004      	add	sp, #16
 8015b1c:	bd80      	pop	{r7, pc}
	...

08015b20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b08a      	sub	sp, #40	; 0x28
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	0019      	movs	r1, r3
 8015b2c:	1dbb      	adds	r3, r7, #6
 8015b2e:	801a      	strh	r2, [r3, #0]
 8015b30:	1d3b      	adds	r3, r7, #4
 8015b32:	1c0a      	adds	r2, r1, #0
 8015b34:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8015b36:	1d3b      	adds	r3, r7, #4
 8015b38:	881b      	ldrh	r3, [r3, #0]
 8015b3a:	3303      	adds	r3, #3
 8015b3c:	089b      	lsrs	r3, r3, #2
 8015b3e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8015b40:	2016      	movs	r0, #22
 8015b42:	183b      	adds	r3, r7, r0
 8015b44:	1d3a      	adds	r2, r7, #4
 8015b46:	8812      	ldrh	r2, [r2, #0]
 8015b48:	2103      	movs	r1, #3
 8015b4a:	400a      	ands	r2, r1
 8015b4c:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8015b52:	183b      	adds	r3, r7, r0
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d002      	beq.n	8015b60 <USB_WritePMA+0x40>
  {
    NbWords--;
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	3b01      	subs	r3, #1
 8015b5e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8015b60:	1dbb      	adds	r3, r7, #6
 8015b62:	881b      	ldrh	r3, [r3, #0]
 8015b64:	4a28      	ldr	r2, [pc, #160]	; (8015c08 <USB_WritePMA+0xe8>)
 8015b66:	4694      	mov	ip, r2
 8015b68:	4463      	add	r3, ip
 8015b6a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8015b6c:	69bb      	ldr	r3, [r7, #24]
 8015b6e:	623b      	str	r3, [r7, #32]
 8015b70:	e01f      	b.n	8015bb2 <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	781a      	ldrb	r2, [r3, #0]
 8015b76:	7859      	ldrb	r1, [r3, #1]
 8015b78:	0209      	lsls	r1, r1, #8
 8015b7a:	430a      	orrs	r2, r1
 8015b7c:	7899      	ldrb	r1, [r3, #2]
 8015b7e:	0409      	lsls	r1, r1, #16
 8015b80:	430a      	orrs	r2, r1
 8015b82:	78db      	ldrb	r3, [r3, #3]
 8015b84:	061b      	lsls	r3, r3, #24
 8015b86:	4313      	orrs	r3, r2
 8015b88:	001a      	movs	r2, r3
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	3304      	adds	r3, #4
 8015b92:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	3301      	adds	r3, #1
 8015b98:	613b      	str	r3, [r7, #16]
    pBuf++;
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	613b      	str	r3, [r7, #16]
    pBuf++;
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	3301      	adds	r3, #1
 8015baa:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8015bac:	6a3b      	ldr	r3, [r7, #32]
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	623b      	str	r3, [r7, #32]
 8015bb2:	6a3b      	ldr	r3, [r7, #32]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1dc      	bne.n	8015b72 <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8015bb8:	2316      	movs	r3, #22
 8015bba:	18fb      	adds	r3, r7, r3
 8015bbc:	881b      	ldrh	r3, [r3, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d01e      	beq.n	8015c00 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	627b      	str	r3, [r7, #36]	; 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	001a      	movs	r2, r3
 8015bcc:	6a3b      	ldr	r3, [r7, #32]
 8015bce:	00db      	lsls	r3, r3, #3
 8015bd0:	409a      	lsls	r2, r3
 8015bd2:	0013      	movs	r3, r2
 8015bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bd6:	4313      	orrs	r3, r2
 8015bd8:	627b      	str	r3, [r7, #36]	; 0x24
      count++;
 8015bda:	6a3b      	ldr	r3, [r7, #32]
 8015bdc:	3301      	adds	r3, #1
 8015bde:	623b      	str	r3, [r7, #32]
      pBuf++;
 8015be0:	693b      	ldr	r3, [r7, #16]
 8015be2:	3301      	adds	r3, #1
 8015be4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8015be6:	2116      	movs	r1, #22
 8015be8:	187b      	adds	r3, r7, r1
 8015bea:	881a      	ldrh	r2, [r3, #0]
 8015bec:	187b      	adds	r3, r7, r1
 8015bee:	3a01      	subs	r2, #1
 8015bf0:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8015bf2:	187b      	adds	r3, r7, r1
 8015bf4:	881b      	ldrh	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d1e5      	bne.n	8015bc6 <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bfe:	601a      	str	r2, [r3, #0]
  }
}
 8015c00:	46c0      	nop			; (mov r8, r8)
 8015c02:	46bd      	mov	sp, r7
 8015c04:	b00a      	add	sp, #40	; 0x28
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	40009800 	.word	0x40009800

08015c0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015c0c:	b590      	push	{r4, r7, lr}
 8015c0e:	b08b      	sub	sp, #44	; 0x2c
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	60f8      	str	r0, [r7, #12]
 8015c14:	60b9      	str	r1, [r7, #8]
 8015c16:	0019      	movs	r1, r3
 8015c18:	1dbb      	adds	r3, r7, #6
 8015c1a:	801a      	strh	r2, [r3, #0]
 8015c1c:	1d3b      	adds	r3, r7, #4
 8015c1e:	1c0a      	adds	r2, r1, #0
 8015c20:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8015c22:	1d3b      	adds	r3, r7, #4
 8015c24:	881b      	ldrh	r3, [r3, #0]
 8015c26:	3303      	adds	r3, #3
 8015c28:	089b      	lsrs	r3, r3, #2
 8015c2a:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8015c2c:	201a      	movs	r0, #26
 8015c2e:	183b      	adds	r3, r7, r0
 8015c30:	1d3a      	adds	r2, r7, #4
 8015c32:	8812      	ldrh	r2, [r2, #0]
 8015c34:	2103      	movs	r1, #3
 8015c36:	400a      	ands	r2, r1
 8015c38:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 8015c3a:	68bb      	ldr	r3, [r7, #8]
 8015c3c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8015c3e:	1dbb      	adds	r3, r7, #6
 8015c40:	881b      	ldrh	r3, [r3, #0]
 8015c42:	4a39      	ldr	r2, [pc, #228]	; (8015d28 <USB_ReadPMA+0x11c>)
 8015c44:	4694      	mov	ip, r2
 8015c46:	4463      	add	r3, ip
 8015c48:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8015c4a:	183b      	adds	r3, r7, r0
 8015c4c:	881b      	ldrh	r3, [r3, #0]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d002      	beq.n	8015c58 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 8015c52:	69fb      	ldr	r3, [r7, #28]
 8015c54:	3b01      	subs	r3, #1
 8015c56:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c5c:	e03c      	b.n	8015cd8 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8015c5e:	6a3b      	ldr	r3, [r7, #32]
 8015c60:	681a      	ldr	r2, [r3, #0]
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	21ff      	movs	r1, #255	; 0xff
 8015c66:	4011      	ands	r1, r2
 8015c68:	000c      	movs	r4, r1
 8015c6a:	7819      	ldrb	r1, [r3, #0]
 8015c6c:	2000      	movs	r0, #0
 8015c6e:	4001      	ands	r1, r0
 8015c70:	1c08      	adds	r0, r1, #0
 8015c72:	1c21      	adds	r1, r4, #0
 8015c74:	4301      	orrs	r1, r0
 8015c76:	7019      	strb	r1, [r3, #0]
 8015c78:	0a11      	lsrs	r1, r2, #8
 8015c7a:	20ff      	movs	r0, #255	; 0xff
 8015c7c:	4001      	ands	r1, r0
 8015c7e:	000c      	movs	r4, r1
 8015c80:	7859      	ldrb	r1, [r3, #1]
 8015c82:	2000      	movs	r0, #0
 8015c84:	4001      	ands	r1, r0
 8015c86:	1c08      	adds	r0, r1, #0
 8015c88:	1c21      	adds	r1, r4, #0
 8015c8a:	4301      	orrs	r1, r0
 8015c8c:	7059      	strb	r1, [r3, #1]
 8015c8e:	0c11      	lsrs	r1, r2, #16
 8015c90:	20ff      	movs	r0, #255	; 0xff
 8015c92:	4001      	ands	r1, r0
 8015c94:	000c      	movs	r4, r1
 8015c96:	7899      	ldrb	r1, [r3, #2]
 8015c98:	2000      	movs	r0, #0
 8015c9a:	4001      	ands	r1, r0
 8015c9c:	1c08      	adds	r0, r1, #0
 8015c9e:	1c21      	adds	r1, r4, #0
 8015ca0:	4301      	orrs	r1, r0
 8015ca2:	7099      	strb	r1, [r3, #2]
 8015ca4:	0e10      	lsrs	r0, r2, #24
 8015ca6:	78da      	ldrb	r2, [r3, #3]
 8015ca8:	2100      	movs	r1, #0
 8015caa:	400a      	ands	r2, r1
 8015cac:	1c11      	adds	r1, r2, #0
 8015cae:	1c02      	adds	r2, r0, #0
 8015cb0:	430a      	orrs	r2, r1
 8015cb2:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 8015cb4:	6a3b      	ldr	r3, [r7, #32]
 8015cb6:	3304      	adds	r3, #4
 8015cb8:	623b      	str	r3, [r7, #32]
    pBuf++;
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	617b      	str	r3, [r7, #20]
    pBuf++;
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	617b      	str	r3, [r7, #20]
    pBuf++;
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	617b      	str	r3, [r7, #20]
    pBuf++;
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8015cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8015cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d1bf      	bne.n	8015c5e <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8015cde:	231a      	movs	r3, #26
 8015ce0:	18fb      	adds	r3, r7, r3
 8015ce2:	881b      	ldrh	r3, [r3, #0]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d01b      	beq.n	8015d20 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	00db      	lsls	r3, r3, #3
 8015cf4:	693a      	ldr	r2, [r7, #16]
 8015cf6:	40da      	lsrs	r2, r3
 8015cf8:	0013      	movs	r3, r2
 8015cfa:	b2da      	uxtb	r2, r3
 8015cfc:	697b      	ldr	r3, [r7, #20]
 8015cfe:	701a      	strb	r2, [r3, #0]
      count++;
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	3301      	adds	r3, #1
 8015d04:	627b      	str	r3, [r7, #36]	; 0x24
      pBuf++;
 8015d06:	697b      	ldr	r3, [r7, #20]
 8015d08:	3301      	adds	r3, #1
 8015d0a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8015d0c:	211a      	movs	r1, #26
 8015d0e:	187b      	adds	r3, r7, r1
 8015d10:	881a      	ldrh	r2, [r3, #0]
 8015d12:	187b      	adds	r3, r7, r1
 8015d14:	3a01      	subs	r2, #1
 8015d16:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 8015d18:	187b      	adds	r3, r7, r1
 8015d1a:	881b      	ldrh	r3, [r3, #0]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d1e6      	bne.n	8015cee <USB_ReadPMA+0xe2>
  }
}
 8015d20:	46c0      	nop			; (mov r8, r8)
 8015d22:	46bd      	mov	sp, r7
 8015d24:	b00b      	add	sp, #44	; 0x2c
 8015d26:	bd90      	pop	{r4, r7, pc}
 8015d28:	40009800 	.word	0x40009800

08015d2c <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 8015d30:	f00f fe0a 	bl	8025948 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 8015d34:	4b06      	ldr	r3, [pc, #24]	; (8015d50 <USBPD_TRACE_Init+0x24>)
 8015d36:	2103      	movs	r1, #3
 8015d38:	0018      	movs	r0, r3
 8015d3a:	f7eb fbc9 	bl	80014d0 <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 8015d3e:	4b05      	ldr	r3, [pc, #20]	; (8015d54 <USBPD_TRACE_Init+0x28>)
 8015d40:	2123      	movs	r1, #35	; 0x23
 8015d42:	0018      	movs	r0, r3
 8015d44:	f00f fe8c 	bl	8025a60 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 8015d48:	46c0      	nop			; (mov r8, r8)
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	46c0      	nop			; (mov r8, r8)
 8015d50:	08015d59 	.word	0x08015d59
 8015d54:	0802b040 	.word	0x0802b040

08015d58 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 8015d58:	b5b0      	push	{r4, r5, r7, lr}
 8015d5a:	b086      	sub	sp, #24
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	0004      	movs	r4, r0
 8015d60:	0008      	movs	r0, r1
 8015d62:	0011      	movs	r1, r2
 8015d64:	603b      	str	r3, [r7, #0]
 8015d66:	1dfb      	adds	r3, r7, #7
 8015d68:	1c22      	adds	r2, r4, #0
 8015d6a:	701a      	strb	r2, [r3, #0]
 8015d6c:	1dbb      	adds	r3, r7, #6
 8015d6e:	1c02      	adds	r2, r0, #0
 8015d70:	701a      	strb	r2, [r3, #0]
 8015d72:	1d7b      	adds	r3, r7, #5
 8015d74:	1c0a      	adds	r2, r1, #0
 8015d76:	701a      	strb	r2, [r3, #0]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 8015d78:	f7f6 fc8e 	bl	800c698 <HAL_GetTick>
 8015d7c:	0003      	movs	r3, r0
 8015d7e:	613b      	str	r3, [r7, #16]

  TRACER_EMB_Lock();
 8015d80:	f00f fed2 	bl	8025b28 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	3314      	adds	r3, #20
 8015d88:	0018      	movs	r0, r3
 8015d8a:	f00f ff67 	bl	8025c5c <TRACER_EMB_AllocateBufer>
 8015d8e:	0003      	movs	r3, r0
 8015d90:	60fb      	str	r3, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	3301      	adds	r3, #1
 8015d96:	d100      	bne.n	8015d9a <USBPD_TRACE_Add+0x42>
 8015d98:	e11d      	b.n	8015fd6 <USBPD_TRACE_Add+0x27e>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 8015d9a:	2314      	movs	r3, #20
 8015d9c:	18fb      	adds	r3, r7, r3
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	801a      	strh	r2, [r3, #0]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8015da2:	2316      	movs	r3, #22
 8015da4:	18fb      	adds	r3, r7, r3
 8015da6:	2200      	movs	r2, #0
 8015da8:	801a      	strh	r2, [r3, #0]
 8015daa:	e011      	b.n	8015dd0 <USBPD_TRACE_Add+0x78>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 8015dac:	2414      	movs	r4, #20
 8015dae:	193b      	adds	r3, r7, r4
 8015db0:	881b      	ldrh	r3, [r3, #0]
 8015db2:	21fd      	movs	r1, #253	; 0xfd
 8015db4:	0018      	movs	r0, r3
 8015db6:	f00f fe2d 	bl	8025a14 <TRACER_EMB_WriteData>
 8015dba:	193b      	adds	r3, r7, r4
 8015dbc:	193a      	adds	r2, r7, r4
 8015dbe:	8812      	ldrh	r2, [r2, #0]
 8015dc0:	3201      	adds	r2, #1
 8015dc2:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 8015dc4:	2116      	movs	r1, #22
 8015dc6:	187b      	adds	r3, r7, r1
 8015dc8:	881a      	ldrh	r2, [r3, #0]
 8015dca:	187b      	adds	r3, r7, r1
 8015dcc:	3201      	adds	r2, #1
 8015dce:	801a      	strh	r2, [r3, #0]
 8015dd0:	2516      	movs	r5, #22
 8015dd2:	197b      	adds	r3, r7, r5
 8015dd4:	881b      	ldrh	r3, [r3, #0]
 8015dd6:	2b03      	cmp	r3, #3
 8015dd8:	d9e8      	bls.n	8015dac <USBPD_TRACE_Add+0x54>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 8015dda:	1dbb      	adds	r3, r7, #6
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	3301      	adds	r3, #1
 8015de0:	b2db      	uxtb	r3, r3
 8015de2:	015b      	lsls	r3, r3, #5
 8015de4:	b2db      	uxtb	r3, r3
 8015de6:	2212      	movs	r2, #18
 8015de8:	4313      	orrs	r3, r2
 8015dea:	b2da      	uxtb	r2, r3
 8015dec:	2414      	movs	r4, #20
 8015dee:	193b      	adds	r3, r7, r4
 8015df0:	881b      	ldrh	r3, [r3, #0]
 8015df2:	0011      	movs	r1, r2
 8015df4:	0018      	movs	r0, r3
 8015df6:	f00f fe0d 	bl	8025a14 <TRACER_EMB_WriteData>
 8015dfa:	0021      	movs	r1, r4
 8015dfc:	187b      	adds	r3, r7, r1
 8015dfe:	187a      	adds	r2, r7, r1
 8015e00:	8812      	ldrh	r2, [r2, #0]
 8015e02:	3201      	adds	r2, #1
 8015e04:	801a      	strh	r2, [r3, #0]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 8015e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e08:	3309      	adds	r3, #9
 8015e0a:	0a1b      	lsrs	r3, r3, #8
 8015e0c:	b2da      	uxtb	r2, r3
 8015e0e:	000c      	movs	r4, r1
 8015e10:	187b      	adds	r3, r7, r1
 8015e12:	881b      	ldrh	r3, [r3, #0]
 8015e14:	0011      	movs	r1, r2
 8015e16:	0018      	movs	r0, r3
 8015e18:	f00f fdfc 	bl	8025a14 <TRACER_EMB_WriteData>
 8015e1c:	0021      	movs	r1, r4
 8015e1e:	187b      	adds	r3, r7, r1
 8015e20:	187a      	adds	r2, r7, r1
 8015e22:	8812      	ldrh	r2, [r2, #0]
 8015e24:	3201      	adds	r2, #1
 8015e26:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 8015e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2a:	b2db      	uxtb	r3, r3
 8015e2c:	3309      	adds	r3, #9
 8015e2e:	b2da      	uxtb	r2, r3
 8015e30:	000c      	movs	r4, r1
 8015e32:	187b      	adds	r3, r7, r1
 8015e34:	881b      	ldrh	r3, [r3, #0]
 8015e36:	0011      	movs	r1, r2
 8015e38:	0018      	movs	r0, r3
 8015e3a:	f00f fdeb 	bl	8025a14 <TRACER_EMB_WriteData>
 8015e3e:	0021      	movs	r1, r4
 8015e40:	187b      	adds	r3, r7, r1
 8015e42:	187a      	adds	r2, r7, r1
 8015e44:	8812      	ldrh	r2, [r2, #0]
 8015e46:	3201      	adds	r2, #1
 8015e48:	801a      	strh	r2, [r3, #0]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 8015e4a:	1dfb      	adds	r3, r7, #7
 8015e4c:	781a      	ldrb	r2, [r3, #0]
 8015e4e:	000c      	movs	r4, r1
 8015e50:	187b      	adds	r3, r7, r1
 8015e52:	881b      	ldrh	r3, [r3, #0]
 8015e54:	0011      	movs	r1, r2
 8015e56:	0018      	movs	r0, r3
 8015e58:	f00f fddc 	bl	8025a14 <TRACER_EMB_WriteData>
 8015e5c:	0021      	movs	r1, r4
 8015e5e:	187b      	adds	r3, r7, r1
 8015e60:	187a      	adds	r2, r7, r1
 8015e62:	8812      	ldrh	r2, [r2, #0]
 8015e64:	3201      	adds	r2, #1
 8015e66:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	b2da      	uxtb	r2, r3
 8015e6c:	000c      	movs	r4, r1
 8015e6e:	187b      	adds	r3, r7, r1
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	0011      	movs	r1, r2
 8015e74:	0018      	movs	r0, r3
 8015e76:	f00f fdcd 	bl	8025a14 <TRACER_EMB_WriteData>
 8015e7a:	0021      	movs	r1, r4
 8015e7c:	187b      	adds	r3, r7, r1
 8015e7e:	187a      	adds	r2, r7, r1
 8015e80:	8812      	ldrh	r2, [r2, #0]
 8015e82:	3201      	adds	r2, #1
 8015e84:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	0a1b      	lsrs	r3, r3, #8
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	000c      	movs	r4, r1
 8015e8e:	187b      	adds	r3, r7, r1
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	0011      	movs	r1, r2
 8015e94:	0018      	movs	r0, r3
 8015e96:	f00f fdbd 	bl	8025a14 <TRACER_EMB_WriteData>
 8015e9a:	0021      	movs	r1, r4
 8015e9c:	187b      	adds	r3, r7, r1
 8015e9e:	187a      	adds	r2, r7, r1
 8015ea0:	8812      	ldrh	r2, [r2, #0]
 8015ea2:	3201      	adds	r2, #1
 8015ea4:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 8015ea6:	693b      	ldr	r3, [r7, #16]
 8015ea8:	0c1b      	lsrs	r3, r3, #16
 8015eaa:	b2da      	uxtb	r2, r3
 8015eac:	000c      	movs	r4, r1
 8015eae:	187b      	adds	r3, r7, r1
 8015eb0:	881b      	ldrh	r3, [r3, #0]
 8015eb2:	0011      	movs	r1, r2
 8015eb4:	0018      	movs	r0, r3
 8015eb6:	f00f fdad 	bl	8025a14 <TRACER_EMB_WriteData>
 8015eba:	0021      	movs	r1, r4
 8015ebc:	187b      	adds	r3, r7, r1
 8015ebe:	187a      	adds	r2, r7, r1
 8015ec0:	8812      	ldrh	r2, [r2, #0]
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	0e1b      	lsrs	r3, r3, #24
 8015eca:	b2da      	uxtb	r2, r3
 8015ecc:	000c      	movs	r4, r1
 8015ece:	187b      	adds	r3, r7, r1
 8015ed0:	881b      	ldrh	r3, [r3, #0]
 8015ed2:	0011      	movs	r1, r2
 8015ed4:	0018      	movs	r0, r3
 8015ed6:	f00f fd9d 	bl	8025a14 <TRACER_EMB_WriteData>
 8015eda:	0021      	movs	r1, r4
 8015edc:	187b      	adds	r3, r7, r1
 8015ede:	187a      	adds	r2, r7, r1
 8015ee0:	8812      	ldrh	r2, [r2, #0]
 8015ee2:	3201      	adds	r2, #1
 8015ee4:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 8015ee6:	1dbb      	adds	r3, r7, #6
 8015ee8:	781a      	ldrb	r2, [r3, #0]
 8015eea:	000c      	movs	r4, r1
 8015eec:	187b      	adds	r3, r7, r1
 8015eee:	881b      	ldrh	r3, [r3, #0]
 8015ef0:	0011      	movs	r1, r2
 8015ef2:	0018      	movs	r0, r3
 8015ef4:	f00f fd8e 	bl	8025a14 <TRACER_EMB_WriteData>
 8015ef8:	0021      	movs	r1, r4
 8015efa:	187b      	adds	r3, r7, r1
 8015efc:	187a      	adds	r2, r7, r1
 8015efe:	8812      	ldrh	r2, [r2, #0]
 8015f00:	3201      	adds	r2, #1
 8015f02:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 8015f04:	1d7b      	adds	r3, r7, #5
 8015f06:	781a      	ldrb	r2, [r3, #0]
 8015f08:	000c      	movs	r4, r1
 8015f0a:	187b      	adds	r3, r7, r1
 8015f0c:	881b      	ldrh	r3, [r3, #0]
 8015f0e:	0011      	movs	r1, r2
 8015f10:	0018      	movs	r0, r3
 8015f12:	f00f fd7f 	bl	8025a14 <TRACER_EMB_WriteData>
 8015f16:	0021      	movs	r1, r4
 8015f18:	187b      	adds	r3, r7, r1
 8015f1a:	187a      	adds	r2, r7, r1
 8015f1c:	8812      	ldrh	r2, [r2, #0]
 8015f1e:	3201      	adds	r2, #1
 8015f20:	801a      	strh	r2, [r3, #0]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 8015f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f24:	0a1b      	lsrs	r3, r3, #8
 8015f26:	b2da      	uxtb	r2, r3
 8015f28:	000c      	movs	r4, r1
 8015f2a:	187b      	adds	r3, r7, r1
 8015f2c:	881b      	ldrh	r3, [r3, #0]
 8015f2e:	0011      	movs	r1, r2
 8015f30:	0018      	movs	r0, r3
 8015f32:	f00f fd6f 	bl	8025a14 <TRACER_EMB_WriteData>
 8015f36:	0021      	movs	r1, r4
 8015f38:	187b      	adds	r3, r7, r1
 8015f3a:	187a      	adds	r2, r7, r1
 8015f3c:	8812      	ldrh	r2, [r2, #0]
 8015f3e:	3201      	adds	r2, #1
 8015f40:	801a      	strh	r2, [r3, #0]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 8015f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f44:	b2da      	uxtb	r2, r3
 8015f46:	000c      	movs	r4, r1
 8015f48:	187b      	adds	r3, r7, r1
 8015f4a:	881b      	ldrh	r3, [r3, #0]
 8015f4c:	0011      	movs	r1, r2
 8015f4e:	0018      	movs	r0, r3
 8015f50:	f00f fd60 	bl	8025a14 <TRACER_EMB_WriteData>
 8015f54:	193b      	adds	r3, r7, r4
 8015f56:	193a      	adds	r2, r7, r4
 8015f58:	8812      	ldrh	r2, [r2, #0]
 8015f5a:	3201      	adds	r2, #1
 8015f5c:	801a      	strh	r2, [r3, #0]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 8015f5e:	197b      	adds	r3, r7, r5
 8015f60:	2200      	movs	r2, #0
 8015f62:	801a      	strh	r2, [r3, #0]
 8015f64:	e016      	b.n	8015f94 <USBPD_TRACE_Add+0x23c>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 8015f66:	2416      	movs	r4, #22
 8015f68:	193b      	adds	r3, r7, r4
 8015f6a:	881b      	ldrh	r3, [r3, #0]
 8015f6c:	683a      	ldr	r2, [r7, #0]
 8015f6e:	18d3      	adds	r3, r2, r3
 8015f70:	781a      	ldrb	r2, [r3, #0]
 8015f72:	2514      	movs	r5, #20
 8015f74:	197b      	adds	r3, r7, r5
 8015f76:	881b      	ldrh	r3, [r3, #0]
 8015f78:	0011      	movs	r1, r2
 8015f7a:	0018      	movs	r0, r3
 8015f7c:	f00f fd4a 	bl	8025a14 <TRACER_EMB_WriteData>
 8015f80:	197b      	adds	r3, r7, r5
 8015f82:	197a      	adds	r2, r7, r5
 8015f84:	8812      	ldrh	r2, [r2, #0]
 8015f86:	3201      	adds	r2, #1
 8015f88:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < Size; index++)
 8015f8a:	193b      	adds	r3, r7, r4
 8015f8c:	881a      	ldrh	r2, [r3, #0]
 8015f8e:	193b      	adds	r3, r7, r4
 8015f90:	3201      	adds	r2, #1
 8015f92:	801a      	strh	r2, [r3, #0]
 8015f94:	2116      	movs	r1, #22
 8015f96:	187b      	adds	r3, r7, r1
 8015f98:	881b      	ldrh	r3, [r3, #0]
 8015f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d8e2      	bhi.n	8015f66 <USBPD_TRACE_Add+0x20e>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8015fa0:	187b      	adds	r3, r7, r1
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	801a      	strh	r2, [r3, #0]
 8015fa6:	e011      	b.n	8015fcc <USBPD_TRACE_Add+0x274>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 8015fa8:	2414      	movs	r4, #20
 8015faa:	193b      	adds	r3, r7, r4
 8015fac:	881b      	ldrh	r3, [r3, #0]
 8015fae:	21a5      	movs	r1, #165	; 0xa5
 8015fb0:	0018      	movs	r0, r3
 8015fb2:	f00f fd2f 	bl	8025a14 <TRACER_EMB_WriteData>
 8015fb6:	193b      	adds	r3, r7, r4
 8015fb8:	193a      	adds	r2, r7, r4
 8015fba:	8812      	ldrh	r2, [r2, #0]
 8015fbc:	3201      	adds	r2, #1
 8015fbe:	801a      	strh	r2, [r3, #0]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 8015fc0:	2116      	movs	r1, #22
 8015fc2:	187b      	adds	r3, r7, r1
 8015fc4:	881a      	ldrh	r2, [r3, #0]
 8015fc6:	187b      	adds	r3, r7, r1
 8015fc8:	3201      	adds	r2, #1
 8015fca:	801a      	strh	r2, [r3, #0]
 8015fcc:	2316      	movs	r3, #22
 8015fce:	18fb      	adds	r3, r7, r3
 8015fd0:	881b      	ldrh	r3, [r3, #0]
 8015fd2:	2b03      	cmp	r3, #3
 8015fd4:	d9e8      	bls.n	8015fa8 <USBPD_TRACE_Add+0x250>
    }
  }

  TRACER_EMB_UnLock();
 8015fd6:	f00f fdc5 	bl	8025b64 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 8015fda:	f00f fde1 	bl	8025ba0 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 8015fde:	46c0      	nop			; (mov r8, r8)
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	b006      	add	sp, #24
 8015fe4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015fe8 <__NVIC_EnableIRQ>:
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	0002      	movs	r2, r0
 8015ff0:	1dfb      	adds	r3, r7, #7
 8015ff2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015ff4:	1dfb      	adds	r3, r7, #7
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8015ffa:	d809      	bhi.n	8016010 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015ffc:	1dfb      	adds	r3, r7, #7
 8015ffe:	781b      	ldrb	r3, [r3, #0]
 8016000:	001a      	movs	r2, r3
 8016002:	231f      	movs	r3, #31
 8016004:	401a      	ands	r2, r3
 8016006:	4b04      	ldr	r3, [pc, #16]	; (8016018 <__NVIC_EnableIRQ+0x30>)
 8016008:	2101      	movs	r1, #1
 801600a:	4091      	lsls	r1, r2
 801600c:	000a      	movs	r2, r1
 801600e:	601a      	str	r2, [r3, #0]
}
 8016010:	46c0      	nop			; (mov r8, r8)
 8016012:	46bd      	mov	sp, r7
 8016014:	b002      	add	sp, #8
 8016016:	bd80      	pop	{r7, pc}
 8016018:	e000e100 	.word	0xe000e100

0801601c <__NVIC_SetPriority>:
{
 801601c:	b590      	push	{r4, r7, lr}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
 8016022:	0002      	movs	r2, r0
 8016024:	6039      	str	r1, [r7, #0]
 8016026:	1dfb      	adds	r3, r7, #7
 8016028:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801602a:	1dfb      	adds	r3, r7, #7
 801602c:	781b      	ldrb	r3, [r3, #0]
 801602e:	2b7f      	cmp	r3, #127	; 0x7f
 8016030:	d828      	bhi.n	8016084 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016032:	4a2f      	ldr	r2, [pc, #188]	; (80160f0 <__NVIC_SetPriority+0xd4>)
 8016034:	1dfb      	adds	r3, r7, #7
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	b25b      	sxtb	r3, r3
 801603a:	089b      	lsrs	r3, r3, #2
 801603c:	33c0      	adds	r3, #192	; 0xc0
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	589b      	ldr	r3, [r3, r2]
 8016042:	1dfa      	adds	r2, r7, #7
 8016044:	7812      	ldrb	r2, [r2, #0]
 8016046:	0011      	movs	r1, r2
 8016048:	2203      	movs	r2, #3
 801604a:	400a      	ands	r2, r1
 801604c:	00d2      	lsls	r2, r2, #3
 801604e:	21ff      	movs	r1, #255	; 0xff
 8016050:	4091      	lsls	r1, r2
 8016052:	000a      	movs	r2, r1
 8016054:	43d2      	mvns	r2, r2
 8016056:	401a      	ands	r2, r3
 8016058:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	019b      	lsls	r3, r3, #6
 801605e:	22ff      	movs	r2, #255	; 0xff
 8016060:	401a      	ands	r2, r3
 8016062:	1dfb      	adds	r3, r7, #7
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	0018      	movs	r0, r3
 8016068:	2303      	movs	r3, #3
 801606a:	4003      	ands	r3, r0
 801606c:	00db      	lsls	r3, r3, #3
 801606e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016070:	481f      	ldr	r0, [pc, #124]	; (80160f0 <__NVIC_SetPriority+0xd4>)
 8016072:	1dfb      	adds	r3, r7, #7
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	b25b      	sxtb	r3, r3
 8016078:	089b      	lsrs	r3, r3, #2
 801607a:	430a      	orrs	r2, r1
 801607c:	33c0      	adds	r3, #192	; 0xc0
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	501a      	str	r2, [r3, r0]
}
 8016082:	e031      	b.n	80160e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8016084:	4a1b      	ldr	r2, [pc, #108]	; (80160f4 <__NVIC_SetPriority+0xd8>)
 8016086:	1dfb      	adds	r3, r7, #7
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	0019      	movs	r1, r3
 801608c:	230f      	movs	r3, #15
 801608e:	400b      	ands	r3, r1
 8016090:	3b08      	subs	r3, #8
 8016092:	089b      	lsrs	r3, r3, #2
 8016094:	3306      	adds	r3, #6
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	18d3      	adds	r3, r2, r3
 801609a:	3304      	adds	r3, #4
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	1dfa      	adds	r2, r7, #7
 80160a0:	7812      	ldrb	r2, [r2, #0]
 80160a2:	0011      	movs	r1, r2
 80160a4:	2203      	movs	r2, #3
 80160a6:	400a      	ands	r2, r1
 80160a8:	00d2      	lsls	r2, r2, #3
 80160aa:	21ff      	movs	r1, #255	; 0xff
 80160ac:	4091      	lsls	r1, r2
 80160ae:	000a      	movs	r2, r1
 80160b0:	43d2      	mvns	r2, r2
 80160b2:	401a      	ands	r2, r3
 80160b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	019b      	lsls	r3, r3, #6
 80160ba:	22ff      	movs	r2, #255	; 0xff
 80160bc:	401a      	ands	r2, r3
 80160be:	1dfb      	adds	r3, r7, #7
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	0018      	movs	r0, r3
 80160c4:	2303      	movs	r3, #3
 80160c6:	4003      	ands	r3, r0
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80160cc:	4809      	ldr	r0, [pc, #36]	; (80160f4 <__NVIC_SetPriority+0xd8>)
 80160ce:	1dfb      	adds	r3, r7, #7
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	001c      	movs	r4, r3
 80160d4:	230f      	movs	r3, #15
 80160d6:	4023      	ands	r3, r4
 80160d8:	3b08      	subs	r3, #8
 80160da:	089b      	lsrs	r3, r3, #2
 80160dc:	430a      	orrs	r2, r1
 80160de:	3306      	adds	r3, #6
 80160e0:	009b      	lsls	r3, r3, #2
 80160e2:	18c3      	adds	r3, r0, r3
 80160e4:	3304      	adds	r3, #4
 80160e6:	601a      	str	r2, [r3, #0]
}
 80160e8:	46c0      	nop			; (mov r8, r8)
 80160ea:	46bd      	mov	sp, r7
 80160ec:	b003      	add	sp, #12
 80160ee:	bd90      	pop	{r4, r7, pc}
 80160f0:	e000e100 	.word	0xe000e100
 80160f4:	e000ed00 	.word	0xe000ed00

080160f8 <LL_UCPD_Enable>:
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2280      	movs	r2, #128	; 0x80
 8016106:	0612      	lsls	r2, r2, #24
 8016108:	431a      	orrs	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	601a      	str	r2, [r3, #0]
}
 801610e:	46c0      	nop			; (mov r8, r8)
 8016110:	46bd      	mov	sp, r7
 8016112:	b002      	add	sp, #8
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0
 801611e:	6078      	str	r0, [r7, #4]
 8016120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4a05      	ldr	r2, [pc, #20]	; (801613c <LL_UCPD_SetRxOrderSet+0x24>)
 8016128:	401a      	ands	r2, r3
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	431a      	orrs	r2, r3
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	601a      	str	r2, [r3, #0]
}
 8016132:	46c0      	nop			; (mov r8, r8)
 8016134:	46bd      	mov	sp, r7
 8016136:	b002      	add	sp, #8
 8016138:	bd80      	pop	{r7, pc}
 801613a:	46c0      	nop			; (mov r8, r8)
 801613c:	e00fffff 	.word	0xe00fffff

08016140 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	68db      	ldr	r3, [r3, #12]
 801614e:	4a05      	ldr	r2, [pc, #20]	; (8016164 <LL_UCPD_SetccEnable+0x24>)
 8016150:	401a      	ands	r2, r3
 8016152:	683b      	ldr	r3, [r7, #0]
 8016154:	431a      	orrs	r2, r3
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	60da      	str	r2, [r3, #12]
}
 801615a:	46c0      	nop			; (mov r8, r8)
 801615c:	46bd      	mov	sp, r7
 801615e:	b002      	add	sp, #8
 8016160:	bd80      	pop	{r7, pc}
 8016162:	46c0      	nop			; (mov r8, r8)
 8016164:	fffff3ff 	.word	0xfffff3ff

08016168 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	691b      	ldr	r3, [r3, #16]
 8016174:	2280      	movs	r2, #128	; 0x80
 8016176:	0212      	lsls	r2, r2, #8
 8016178:	431a      	orrs	r2, r3
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	611a      	str	r2, [r3, #16]
}
 801617e:	46c0      	nop			; (mov r8, r8)
 8016180:	46bd      	mov	sp, r7
 8016182:	b002      	add	sp, #8
 8016184:	bd80      	pop	{r7, pc}

08016186 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8016186:	b580      	push	{r7, lr}
 8016188:	b082      	sub	sp, #8
 801618a:	af00      	add	r7, sp, #0
 801618c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	2280      	movs	r2, #128	; 0x80
 8016194:	01d2      	lsls	r2, r2, #7
 8016196:	431a      	orrs	r2, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	611a      	str	r2, [r3, #16]
}
 801619c:	46c0      	nop			; (mov r8, r8)
 801619e:	46bd      	mov	sp, r7
 80161a0:	b002      	add	sp, #8
 80161a2:	bd80      	pop	{r7, pc}

080161a4 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 80161a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161a6:	b08b      	sub	sp, #44	; 0x2c
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	60b9      	str	r1, [r7, #8]
 80161ac:	607a      	str	r2, [r7, #4]
 80161ae:	603b      	str	r3, [r7, #0]
 80161b0:	240f      	movs	r4, #15
 80161b2:	193b      	adds	r3, r7, r4
 80161b4:	1c02      	adds	r2, r0, #0
 80161b6:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80161b8:	193b      	adds	r3, r7, r4
 80161ba:	781a      	ldrb	r2, [r3, #0]
 80161bc:	0013      	movs	r3, r2
 80161be:	005b      	lsls	r3, r3, #1
 80161c0:	189b      	adds	r3, r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	4a65      	ldr	r2, [pc, #404]	; (801635c <CAD_Init+0x1b8>)
 80161c6:	189b      	adds	r3, r3, r2
 80161c8:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 80161ca:	193b      	adds	r3, r7, r4
 80161cc:	781a      	ldrb	r2, [r3, #0]
 80161ce:	4964      	ldr	r1, [pc, #400]	; (8016360 <CAD_Init+0x1bc>)
 80161d0:	0013      	movs	r3, r2
 80161d2:	011b      	lsls	r3, r3, #4
 80161d4:	1a9b      	subs	r3, r3, r2
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	18cb      	adds	r3, r1, r3
 80161da:	3310      	adds	r3, #16
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 80161e0:	193b      	adds	r3, r7, r4
 80161e2:	781a      	ldrb	r2, [r3, #0]
 80161e4:	495e      	ldr	r1, [pc, #376]	; (8016360 <CAD_Init+0x1bc>)
 80161e6:	0013      	movs	r3, r2
 80161e8:	011b      	lsls	r3, r3, #4
 80161ea:	1a9b      	subs	r3, r3, r2
 80161ec:	009b      	lsls	r3, r3, #2
 80161ee:	18cb      	adds	r3, r1, r3
 80161f0:	330c      	adds	r3, #12
 80161f2:	68ba      	ldr	r2, [r7, #8]
 80161f4:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 80161f6:	193b      	adds	r3, r7, r4
 80161f8:	781a      	ldrb	r2, [r3, #0]
 80161fa:	4959      	ldr	r1, [pc, #356]	; (8016360 <CAD_Init+0x1bc>)
 80161fc:	0013      	movs	r3, r2
 80161fe:	011b      	lsls	r3, r3, #4
 8016200:	1a9b      	subs	r3, r3, r2
 8016202:	009b      	lsls	r3, r3, #2
 8016204:	18cb      	adds	r3, r1, r3
 8016206:	330c      	adds	r3, #12
 8016208:	6819      	ldr	r1, [r3, #0]
 801620a:	193b      	adds	r3, r7, r4
 801620c:	781a      	ldrb	r2, [r3, #0]
 801620e:	4854      	ldr	r0, [pc, #336]	; (8016360 <CAD_Init+0x1bc>)
 8016210:	0013      	movs	r3, r2
 8016212:	011b      	lsls	r3, r3, #4
 8016214:	1a9b      	subs	r3, r3, r2
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	18c3      	adds	r3, r0, r3
 801621a:	3310      	adds	r3, #16
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	794a      	ldrb	r2, [r1, #5]
 8016220:	0612      	lsls	r2, r2, #24
 8016222:	0f92      	lsrs	r2, r2, #30
 8016224:	b2d2      	uxtb	r2, r2
 8016226:	2103      	movs	r1, #3
 8016228:	400a      	ands	r2, r1
 801622a:	0010      	movs	r0, r2
 801622c:	789a      	ldrb	r2, [r3, #2]
 801622e:	2103      	movs	r1, #3
 8016230:	438a      	bics	r2, r1
 8016232:	1c11      	adds	r1, r2, #0
 8016234:	1c02      	adds	r2, r0, #0
 8016236:	430a      	orrs	r2, r1
 8016238:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 801623a:	193b      	adds	r3, r7, r4
 801623c:	781a      	ldrb	r2, [r3, #0]
 801623e:	4948      	ldr	r1, [pc, #288]	; (8016360 <CAD_Init+0x1bc>)
 8016240:	0013      	movs	r3, r2
 8016242:	011b      	lsls	r3, r3, #4
 8016244:	1a9b      	subs	r3, r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	18cb      	adds	r3, r1, r3
 801624a:	3310      	adds	r3, #16
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	789a      	ldrb	r2, [r3, #2]
 8016250:	210c      	movs	r1, #12
 8016252:	438a      	bics	r2, r1
 8016254:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	220c      	movs	r2, #12
 801625a:	2100      	movs	r1, #0
 801625c:	0018      	movs	r0, r3
 801625e:	f011 fbff 	bl	8027a60 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8016262:	193b      	adds	r3, r7, r4
 8016264:	781a      	ldrb	r2, [r3, #0]
 8016266:	493e      	ldr	r1, [pc, #248]	; (8016360 <CAD_Init+0x1bc>)
 8016268:	0013      	movs	r3, r2
 801626a:	011b      	lsls	r3, r3, #4
 801626c:	1a9b      	subs	r3, r3, r2
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	18cb      	adds	r3, r1, r3
 8016272:	332c      	adds	r3, #44	; 0x2c
 8016274:	683a      	ldr	r2, [r7, #0]
 8016276:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8016278:	0025      	movs	r5, r4
 801627a:	193b      	adds	r3, r7, r4
 801627c:	781c      	ldrb	r4, [r3, #0]
 801627e:	197b      	adds	r3, r7, r5
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	0018      	movs	r0, r3
 8016284:	f000 fc42 	bl	8016b0c <USBPD_HW_GetUSPDInstance>
 8016288:	0001      	movs	r1, r0
 801628a:	4a35      	ldr	r2, [pc, #212]	; (8016360 <CAD_Init+0x1bc>)
 801628c:	0023      	movs	r3, r4
 801628e:	011b      	lsls	r3, r3, #4
 8016290:	1b1b      	subs	r3, r3, r4
 8016292:	009b      	lsls	r3, r3, #2
 8016294:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8016296:	2614      	movs	r6, #20
 8016298:	19bb      	adds	r3, r7, r6
 801629a:	0018      	movs	r0, r3
 801629c:	f7fd fdfe 	bl	8013e9c <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 80162a0:	002c      	movs	r4, r5
 80162a2:	193b      	adds	r3, r7, r4
 80162a4:	781a      	ldrb	r2, [r3, #0]
 80162a6:	492e      	ldr	r1, [pc, #184]	; (8016360 <CAD_Init+0x1bc>)
 80162a8:	0013      	movs	r3, r2
 80162aa:	011b      	lsls	r3, r3, #4
 80162ac:	1a9b      	subs	r3, r3, r2
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	585b      	ldr	r3, [r3, r1]
 80162b2:	19ba      	adds	r2, r7, r6
 80162b4:	0011      	movs	r1, r2
 80162b6:	0018      	movs	r0, r3
 80162b8:	f7fd fdb6 	bl	8013e28 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 80162bc:	193b      	adds	r3, r7, r4
 80162be:	781a      	ldrb	r2, [r3, #0]
 80162c0:	4927      	ldr	r1, [pc, #156]	; (8016360 <CAD_Init+0x1bc>)
 80162c2:	0013      	movs	r3, r2
 80162c4:	011b      	lsls	r3, r3, #4
 80162c6:	1a9b      	subs	r3, r3, r2
 80162c8:	009b      	lsls	r3, r3, #2
 80162ca:	585b      	ldr	r3, [r3, r1]
 80162cc:	22f8      	movs	r2, #248	; 0xf8
 80162ce:	0452      	lsls	r2, r2, #17
 80162d0:	0011      	movs	r1, r2
 80162d2:	0018      	movs	r0, r3
 80162d4:	f7ff ff20 	bl	8016118 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80162d8:	193b      	adds	r3, r7, r4
 80162da:	781a      	ldrb	r2, [r3, #0]
 80162dc:	4920      	ldr	r1, [pc, #128]	; (8016360 <CAD_Init+0x1bc>)
 80162de:	0013      	movs	r3, r2
 80162e0:	011b      	lsls	r3, r3, #4
 80162e2:	1a9b      	subs	r3, r3, r2
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	585b      	ldr	r3, [r3, r1]
 80162e8:	22c0      	movs	r2, #192	; 0xc0
 80162ea:	0112      	lsls	r2, r2, #4
 80162ec:	0011      	movs	r1, r2
 80162ee:	0018      	movs	r0, r3
 80162f0:	f7ff ff26 	bl	8016140 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 80162f4:	193b      	adds	r3, r7, r4
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	0018      	movs	r0, r3
 80162fa:	f009 fb81 	bl	801fa00 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80162fe:	193b      	adds	r3, r7, r4
 8016300:	781a      	ldrb	r2, [r3, #0]
 8016302:	4917      	ldr	r1, [pc, #92]	; (8016360 <CAD_Init+0x1bc>)
 8016304:	0013      	movs	r3, r2
 8016306:	011b      	lsls	r3, r3, #4
 8016308:	1a9b      	subs	r3, r3, r2
 801630a:	009b      	lsls	r3, r3, #2
 801630c:	585b      	ldr	r3, [r3, r1]
 801630e:	0018      	movs	r0, r3
 8016310:	f7ff fef2 	bl	80160f8 <LL_UCPD_Enable>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8016314:	193b      	adds	r3, r7, r4
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	0018      	movs	r0, r3
 801631a:	f001 fdc1 	bl	8017ea0 <USBPDM1_AssertRd>
    }
    else
#endif /* _SRC */
    {
#if defined(_SNK)
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SNK;
 801631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016320:	4a10      	ldr	r2, [pc, #64]	; (8016364 <CAD_Init+0x1c0>)
 8016322:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SNK = Ports[PortNum].settings->CAD_AccesorySupport;
 8016324:	193b      	adds	r3, r7, r4
 8016326:	781a      	ldrb	r2, [r3, #0]
 8016328:	490d      	ldr	r1, [pc, #52]	; (8016360 <CAD_Init+0x1bc>)
 801632a:	0013      	movs	r3, r2
 801632c:	011b      	lsls	r3, r3, #4
 801632e:	1a9b      	subs	r3, r3, r2
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	18cb      	adds	r3, r1, r3
 8016334:	330c      	adds	r3, #12
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	795b      	ldrb	r3, [r3, #5]
 801633a:	06db      	lsls	r3, r3, #27
 801633c:	0fdb      	lsrs	r3, r3, #31
 801633e:	b2da      	uxtb	r2, r3
 8016340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016342:	01d0      	lsls	r0, r2, #7
 8016344:	785a      	ldrb	r2, [r3, #1]
 8016346:	217f      	movs	r1, #127	; 0x7f
 8016348:	400a      	ands	r2, r1
 801634a:	1c11      	adds	r1, r2, #0
 801634c:	1c02      	adds	r2, r0, #0
 801634e:	430a      	orrs	r2, r1
 8016350:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8016352:	46c0      	nop			; (mov r8, r8)
 8016354:	46bd      	mov	sp, r7
 8016356:	b00b      	add	sp, #44	; 0x2c
 8016358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801635a:	46c0      	nop			; (mov r8, r8)
 801635c:	20000a5c 	.word	0x20000a5c
 8016360:	20000a74 	.word	0x20000a74
 8016364:	08016465 	.word	0x08016465

08016368 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	0002      	movs	r2, r0
 8016370:	1dfb      	adds	r3, r7, #7
 8016372:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8016374:	1dfb      	adds	r3, r7, #7
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	0018      	movs	r0, r3
 801637a:	f001 fe41 	bl	8018000 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 801637e:	1dfb      	adds	r3, r7, #7
 8016380:	7819      	ldrb	r1, [r3, #0]
 8016382:	4a0c      	ldr	r2, [pc, #48]	; (80163b4 <CAD_Enter_ErrorRecovery+0x4c>)
 8016384:	000b      	movs	r3, r1
 8016386:	005b      	lsls	r3, r3, #1
 8016388:	185b      	adds	r3, r3, r1
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	5c99      	ldrb	r1, [r3, r2]
 801638e:	2080      	movs	r0, #128	; 0x80
 8016390:	4240      	negs	r0, r0
 8016392:	4301      	orrs	r1, r0
 8016394:	5499      	strb	r1, [r3, r2]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8016396:	1dfb      	adds	r3, r7, #7
 8016398:	781a      	ldrb	r2, [r3, #0]
 801639a:	4907      	ldr	r1, [pc, #28]	; (80163b8 <CAD_Enter_ErrorRecovery+0x50>)
 801639c:	0013      	movs	r3, r2
 801639e:	011b      	lsls	r3, r3, #4
 80163a0:	1a9b      	subs	r3, r3, r2
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	18cb      	adds	r3, r1, r3
 80163a6:	332c      	adds	r3, #44	; 0x2c
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	4798      	blx	r3
}
 80163ac:	46c0      	nop			; (mov r8, r8)
 80163ae:	46bd      	mov	sp, r7
 80163b0:	b002      	add	sp, #8
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	20000a5c 	.word	0x20000a5c
 80163b8:	20000a74 	.word	0x20000a74

080163bc <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	0002      	movs	r2, r0
 80163c4:	6039      	str	r1, [r7, #0]
 80163c6:	1dfb      	adds	r3, r7, #7
 80163c8:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 80163ca:	1dfb      	adds	r3, r7, #7
 80163cc:	781a      	ldrb	r2, [r3, #0]
 80163ce:	4919      	ldr	r1, [pc, #100]	; (8016434 <CAD_SRC_Set_ResistorRp+0x78>)
 80163d0:	0013      	movs	r3, r2
 80163d2:	011b      	lsls	r3, r3, #4
 80163d4:	1a9b      	subs	r3, r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	18cb      	adds	r3, r1, r3
 80163da:	3310      	adds	r3, #16
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	683a      	ldr	r2, [r7, #0]
 80163e0:	1c11      	adds	r1, r2, #0
 80163e2:	2203      	movs	r2, #3
 80163e4:	400a      	ands	r2, r1
 80163e6:	b2d2      	uxtb	r2, r2
 80163e8:	2103      	movs	r1, #3
 80163ea:	400a      	ands	r2, r1
 80163ec:	0010      	movs	r0, r2
 80163ee:	789a      	ldrb	r2, [r3, #2]
 80163f0:	2103      	movs	r1, #3
 80163f2:	438a      	bics	r2, r1
 80163f4:	1c11      	adds	r1, r2, #0
 80163f6:	1c02      	adds	r2, r0, #0
 80163f8:	430a      	orrs	r2, r1
 80163fa:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 80163fc:	1dfb      	adds	r3, r7, #7
 80163fe:	781a      	ldrb	r2, [r3, #0]
 8016400:	490d      	ldr	r1, [pc, #52]	; (8016438 <CAD_SRC_Set_ResistorRp+0x7c>)
 8016402:	0013      	movs	r3, r2
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	189b      	adds	r3, r3, r2
 8016408:	009b      	lsls	r3, r3, #2
 801640a:	18cb      	adds	r3, r1, r3
 801640c:	785a      	ldrb	r2, [r3, #1]
 801640e:	2101      	movs	r1, #1
 8016410:	430a      	orrs	r2, r1
 8016412:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8016414:	1dfb      	adds	r3, r7, #7
 8016416:	781a      	ldrb	r2, [r3, #0]
 8016418:	4906      	ldr	r1, [pc, #24]	; (8016434 <CAD_SRC_Set_ResistorRp+0x78>)
 801641a:	0013      	movs	r3, r2
 801641c:	011b      	lsls	r3, r3, #4
 801641e:	1a9b      	subs	r3, r3, r2
 8016420:	009b      	lsls	r3, r3, #2
 8016422:	18cb      	adds	r3, r1, r3
 8016424:	332c      	adds	r3, #44	; 0x2c
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	4798      	blx	r3
  return 0;
 801642a:	2300      	movs	r3, #0
}
 801642c:	0018      	movs	r0, r3
 801642e:	46bd      	mov	sp, r7
 8016430:	b002      	add	sp, #8
 8016432:	bd80      	pop	{r7, pc}
 8016434:	20000a74 	.word	0x20000a74
 8016438:	20000a5c 	.word	0x20000a5c

0801643c <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	0002      	movs	r2, r0
 8016444:	6039      	str	r1, [r7, #0]
 8016446:	1dfb      	adds	r3, r7, #7
 8016448:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 801644a:	683a      	ldr	r2, [r7, #0]
 801644c:	1dfb      	adds	r3, r7, #7
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	0011      	movs	r1, r2
 8016452:	0018      	movs	r0, r3
 8016454:	f7ff ffb2 	bl	80163bc <CAD_SRC_Set_ResistorRp>
 8016458:	0003      	movs	r3, r0
}
 801645a:	0018      	movs	r0, r3
 801645c:	46bd      	mov	sp, r7
 801645e:	b002      	add	sp, #8
 8016460:	bd80      	pop	{r7, pc}
	...

08016464 <CAD_StateMachine_SNK>:
  * @retval Timeout value
  */
#if defined(_SNK)
/* function to handle SNK and SNK  + ACCESSORY OPTION */
uint32_t CAD_StateMachine_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b086      	sub	sp, #24
 8016468:	af00      	add	r7, sp, #0
 801646a:	60b9      	str	r1, [r7, #8]
 801646c:	607a      	str	r2, [r7, #4]
 801646e:	210f      	movs	r1, #15
 8016470:	187b      	adds	r3, r7, r1
 8016472:	1c02      	adds	r2, r0, #0
 8016474:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016476:	187b      	adds	r3, r7, r1
 8016478:	781a      	ldrb	r2, [r3, #0]
 801647a:	0013      	movs	r3, r2
 801647c:	005b      	lsls	r3, r3, #1
 801647e:	189b      	adds	r3, r3, r2
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	4a1b      	ldr	r2, [pc, #108]	; (80164f0 <CAD_StateMachine_SNK+0x8c>)
 8016484:	189b      	adds	r3, r3, r2
 8016486:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016488:	2302      	movs	r3, #2
 801648a:	617b      	str	r3, [r7, #20]
#if defined(USBPDM1_VCC_FEATURE_ENABLED)
  BSP_USBPD_PWR_VCCSetState(PortNum, 1);
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  /*Check CAD STATE*/
  switch (_handle->cstate)
 801648c:	693b      	ldr	r3, [r7, #16]
 801648e:	785b      	ldrb	r3, [r3, #1]
 8016490:	069b      	lsls	r3, r3, #26
 8016492:	0edb      	lsrs	r3, r3, #27
 8016494:	b2db      	uxtb	r3, r3
 8016496:	2b03      	cmp	r3, #3
 8016498:	d019      	beq.n	80164ce <CAD_StateMachine_SNK+0x6a>
 801649a:	dc23      	bgt.n	80164e4 <CAD_StateMachine_SNK+0x80>
 801649c:	2b01      	cmp	r3, #1
 801649e:	d002      	beq.n	80164a6 <CAD_StateMachine_SNK+0x42>
 80164a0:	2b02      	cmp	r3, #2
 80164a2:	d009      	beq.n	80164b8 <CAD_StateMachine_SNK+0x54>
#endif /* USBPDCORE_VPD */
#endif /* _ACCESSORY_SNK */

    default:
    {
      break;
 80164a4:	e01e      	b.n	80164e4 <CAD_StateMachine_SNK+0x80>
      _timing = ManageStateDetached_SNK(PortNum);
 80164a6:	230f      	movs	r3, #15
 80164a8:	18fb      	adds	r3, r7, r3
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	0018      	movs	r0, r3
 80164ae:	f000 f9c5 	bl	801683c <ManageStateDetached_SNK>
 80164b2:	0003      	movs	r3, r0
 80164b4:	617b      	str	r3, [r7, #20]
      break;
 80164b6:	e016      	b.n	80164e6 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	68b9      	ldr	r1, [r7, #8]
 80164bc:	230f      	movs	r3, #15
 80164be:	18fb      	adds	r3, r7, r3
 80164c0:	781b      	ldrb	r3, [r3, #0]
 80164c2:	0018      	movs	r0, r3
 80164c4:	f000 fa0c 	bl	80168e0 <ManageStateAttachedWait_SNK>
 80164c8:	0003      	movs	r3, r0
 80164ca:	617b      	str	r3, [r7, #20]
      break;
 80164cc:	e00b      	b.n	80164e6 <CAD_StateMachine_SNK+0x82>
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	68b9      	ldr	r1, [r7, #8]
 80164d2:	230f      	movs	r3, #15
 80164d4:	18fb      	adds	r3, r7, r3
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	0018      	movs	r0, r3
 80164da:	f000 fa8f 	bl	80169fc <ManageStateAttached_SNK>
 80164de:	0003      	movs	r3, r0
 80164e0:	617b      	str	r3, [r7, #20]
      break;
 80164e2:	e000      	b.n	80164e6 <CAD_StateMachine_SNK+0x82>
      break;
 80164e4:	46c0      	nop			; (mov r8, r8)
      BSP_USBPD_PWR_VCCSetState(PortNum, 0);
      break;
  }
#endif /* USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 80164e6:	697b      	ldr	r3, [r7, #20]
}
 80164e8:	0018      	movs	r0, r3
 80164ea:	46bd      	mov	sp, r7
 80164ec:	b006      	add	sp, #24
 80164ee:	bd80      	pop	{r7, pc}
 80164f0:	20000a5c 	.word	0x20000a5c

080164f4 <CAD_StateMachine>:
}
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80164f4:	b590      	push	{r4, r7, lr}
 80164f6:	b089      	sub	sp, #36	; 0x24
 80164f8:	af02      	add	r7, sp, #8
 80164fa:	60b9      	str	r1, [r7, #8]
 80164fc:	607a      	str	r2, [r7, #4]
 80164fe:	210f      	movs	r1, #15
 8016500:	187b      	adds	r3, r7, r1
 8016502:	1c02      	adds	r2, r0, #0
 8016504:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016506:	187b      	adds	r3, r7, r1
 8016508:	781a      	ldrb	r2, [r3, #0]
 801650a:	0013      	movs	r3, r2
 801650c:	005b      	lsls	r3, r3, #1
 801650e:	189b      	adds	r3, r3, r2
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4a7a      	ldr	r2, [pc, #488]	; (80166fc <CAD_StateMachine+0x208>)
 8016514:	189b      	adds	r3, r3, r2
 8016516:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016518:	2302      	movs	r3, #2
 801651a:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	2200      	movs	r2, #0
 8016520:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8016522:	187b      	adds	r3, r7, r1
 8016524:	781a      	ldrb	r2, [r3, #0]
 8016526:	4976      	ldr	r1, [pc, #472]	; (8016700 <CAD_StateMachine+0x20c>)
 8016528:	0013      	movs	r3, r2
 801652a:	011b      	lsls	r3, r3, #4
 801652c:	1a9b      	subs	r3, r3, r2
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	18cb      	adds	r3, r1, r3
 8016532:	3310      	adds	r3, #16
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	2210      	movs	r2, #16
 801653a:	4013      	ands	r3, r2
 801653c:	b2db      	uxtb	r3, r3
 801653e:	2b00      	cmp	r3, #0
 8016540:	d001      	beq.n	8016546 <CAD_StateMachine+0x52>
  {
    return _timing;
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	e0d6      	b.n	80166f4 <CAD_StateMachine+0x200>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8016546:	693b      	ldr	r3, [r7, #16]
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	227f      	movs	r2, #127	; 0x7f
 801654c:	4393      	bics	r3, r2
 801654e:	b2db      	uxtb	r3, r3
 8016550:	2b00      	cmp	r3, #0
 8016552:	d01b      	beq.n	801658c <CAD_StateMachine+0x98>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	781a      	ldrb	r2, [r3, #0]
 8016558:	217f      	movs	r1, #127	; 0x7f
 801655a:	400a      	ands	r2, r1
 801655c:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	785a      	ldrb	r2, [r3, #1]
 8016562:	213e      	movs	r1, #62	; 0x3e
 8016564:	438a      	bics	r2, r1
 8016566:	1c11      	adds	r1, r2, #0
 8016568:	2218      	movs	r2, #24
 801656a:	430a      	orrs	r2, r1
 801656c:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 801656e:	693b      	ldr	r3, [r7, #16]
 8016570:	785b      	ldrb	r3, [r3, #1]
 8016572:	069b      	lsls	r3, r3, #26
 8016574:	0edb      	lsrs	r3, r3, #27
 8016576:	b2db      	uxtb	r3, r3
 8016578:	001a      	movs	r2, r3
 801657a:	230f      	movs	r3, #15
 801657c:	18fb      	adds	r3, r7, r3
 801657e:	7819      	ldrb	r1, [r3, #0]
 8016580:	2300      	movs	r3, #0
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	2300      	movs	r3, #0
 8016586:	2005      	movs	r0, #5
 8016588:	f7ff fbe6 	bl	8015d58 <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	785b      	ldrb	r3, [r3, #1]
 8016590:	069b      	lsls	r3, r3, #26
 8016592:	0edb      	lsrs	r3, r3, #27
 8016594:	b2db      	uxtb	r3, r3
 8016596:	2b0d      	cmp	r3, #13
 8016598:	d05c      	beq.n	8016654 <CAD_StateMachine+0x160>
 801659a:	dc72      	bgt.n	8016682 <CAD_StateMachine+0x18e>
 801659c:	2b00      	cmp	r3, #0
 801659e:	d002      	beq.n	80165a6 <CAD_StateMachine+0xb2>
 80165a0:	2b0c      	cmp	r3, #12
 80165a2:	d02b      	beq.n	80165fc <CAD_StateMachine+0x108>
 80165a4:	e06d      	b.n	8016682 <CAD_StateMachine+0x18e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 80165a6:	240f      	movs	r4, #15
 80165a8:	193b      	adds	r3, r7, r4
 80165aa:	781a      	ldrb	r2, [r3, #0]
 80165ac:	4954      	ldr	r1, [pc, #336]	; (8016700 <CAD_StateMachine+0x20c>)
 80165ae:	0013      	movs	r3, r2
 80165b0:	011b      	lsls	r3, r3, #4
 80165b2:	1a9b      	subs	r3, r3, r2
 80165b4:	009b      	lsls	r3, r3, #2
 80165b6:	585b      	ldr	r3, [r3, r1]
 80165b8:	0018      	movs	r0, r3
 80165ba:	f7ff fdd5 	bl	8016168 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 80165be:	193b      	adds	r3, r7, r4
 80165c0:	781a      	ldrb	r2, [r3, #0]
 80165c2:	494f      	ldr	r1, [pc, #316]	; (8016700 <CAD_StateMachine+0x20c>)
 80165c4:	0013      	movs	r3, r2
 80165c6:	011b      	lsls	r3, r3, #4
 80165c8:	1a9b      	subs	r3, r3, r2
 80165ca:	009b      	lsls	r3, r3, #2
 80165cc:	585b      	ldr	r3, [r3, r1]
 80165ce:	0018      	movs	r0, r3
 80165d0:	f7ff fdd9 	bl	8016186 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 80165d4:	193b      	adds	r3, r7, r4
 80165d6:	781b      	ldrb	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d106      	bne.n	80165ea <CAD_StateMachine+0xf6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 80165dc:	2102      	movs	r1, #2
 80165de:	2008      	movs	r0, #8
 80165e0:	f7ff fd1c 	bl	801601c <__NVIC_SetPriority>
 80165e4:	2008      	movs	r0, #8
 80165e6:	f7ff fcff 	bl	8015fe8 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80165ea:	693b      	ldr	r3, [r7, #16]
 80165ec:	785a      	ldrb	r2, [r3, #1]
 80165ee:	213e      	movs	r1, #62	; 0x3e
 80165f0:	438a      	bics	r2, r1
 80165f2:	1c11      	adds	r1, r2, #0
 80165f4:	2202      	movs	r2, #2
 80165f6:	430a      	orrs	r2, r1
 80165f8:	705a      	strb	r2, [r3, #1]
      break;
 80165fa:	e04f      	b.n	801669c <CAD_StateMachine+0x1a8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 80165fc:	240f      	movs	r4, #15
 80165fe:	193b      	adds	r3, r7, r4
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	0018      	movs	r0, r3
 8016604:	f001 fcfc 	bl	8018000 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8016608:	193b      	adds	r3, r7, r4
 801660a:	781a      	ldrb	r2, [r3, #0]
 801660c:	493c      	ldr	r1, [pc, #240]	; (8016700 <CAD_StateMachine+0x20c>)
 801660e:	0013      	movs	r3, r2
 8016610:	011b      	lsls	r3, r3, #4
 8016612:	1a9b      	subs	r3, r3, r2
 8016614:	009b      	lsls	r3, r3, #2
 8016616:	18cb      	adds	r3, r1, r3
 8016618:	3334      	adds	r3, #52	; 0x34
 801661a:	2200      	movs	r2, #0
 801661c:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	781a      	ldrb	r2, [r3, #0]
 8016628:	2103      	movs	r1, #3
 801662a:	438a      	bics	r2, r1
 801662c:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	2201      	movs	r2, #1
 8016632:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8016634:	f7f6 f830 	bl	800c698 <HAL_GetTick>
 8016638:	0002      	movs	r2, r0
 801663a:	693b      	ldr	r3, [r7, #16]
 801663c:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 801663e:	231a      	movs	r3, #26
 8016640:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	785a      	ldrb	r2, [r3, #1]
 8016646:	213e      	movs	r1, #62	; 0x3e
 8016648:	438a      	bics	r2, r1
 801664a:	1c11      	adds	r1, r2, #0
 801664c:	221a      	movs	r2, #26
 801664e:	430a      	orrs	r2, r1
 8016650:	705a      	strb	r2, [r3, #1]
      break;
 8016652:	e023      	b.n	801669c <CAD_StateMachine+0x1a8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8016654:	f7f6 f820 	bl	800c698 <HAL_GetTick>
 8016658:	0002      	movs	r2, r0
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	685b      	ldr	r3, [r3, #4]
 801665e:	1ad3      	subs	r3, r2, r3
 8016660:	2b1a      	cmp	r3, #26
 8016662:	d91a      	bls.n	801669a <CAD_StateMachine+0x1a6>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 8016664:	230f      	movs	r3, #15
 8016666:	18fb      	adds	r3, r7, r3
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	0018      	movs	r0, r3
 801666c:	f001 fc18 	bl	8017ea0 <USBPDM1_AssertRd>
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	785a      	ldrb	r2, [r3, #1]
 8016674:	213e      	movs	r1, #62	; 0x3e
 8016676:	438a      	bics	r2, r1
 8016678:	1c11      	adds	r1, r2, #0
 801667a:	2202      	movs	r2, #2
 801667c:	430a      	orrs	r2, r1
 801667e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8016680:	e00b      	b.n	801669a <CAD_StateMachine+0x1a6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	689b      	ldr	r3, [r3, #8]
 8016686:	687c      	ldr	r4, [r7, #4]
 8016688:	68b9      	ldr	r1, [r7, #8]
 801668a:	220f      	movs	r2, #15
 801668c:	18ba      	adds	r2, r7, r2
 801668e:	7810      	ldrb	r0, [r2, #0]
 8016690:	0022      	movs	r2, r4
 8016692:	4798      	blx	r3
 8016694:	0003      	movs	r3, r0
 8016696:	617b      	str	r3, [r7, #20]
      break;
 8016698:	e000      	b.n	801669c <CAD_StateMachine+0x1a8>
      break;
 801669a:	46c0      	nop			; (mov r8, r8)
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 801669c:	693b      	ldr	r3, [r7, #16]
 801669e:	785b      	ldrb	r3, [r3, #1]
 80166a0:	069b      	lsls	r3, r3, #26
 80166a2:	0edb      	lsrs	r3, r3, #27
 80166a4:	b2da      	uxtb	r2, r3
 80166a6:	693b      	ldr	r3, [r7, #16]
 80166a8:	789b      	ldrb	r3, [r3, #2]
 80166aa:	069b      	lsls	r3, r3, #26
 80166ac:	0edb      	lsrs	r3, r3, #27
 80166ae:	b2db      	uxtb	r3, r3
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d01e      	beq.n	80166f2 <CAD_StateMachine+0x1fe>
  {
    _handle->pstate = _handle->cstate;
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	785b      	ldrb	r3, [r3, #1]
 80166b8:	069b      	lsls	r3, r3, #26
 80166ba:	0edb      	lsrs	r3, r3, #27
 80166bc:	b2da      	uxtb	r2, r3
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	211f      	movs	r1, #31
 80166c2:	400a      	ands	r2, r1
 80166c4:	1890      	adds	r0, r2, r2
 80166c6:	789a      	ldrb	r2, [r3, #2]
 80166c8:	213e      	movs	r1, #62	; 0x3e
 80166ca:	438a      	bics	r2, r1
 80166cc:	1c11      	adds	r1, r2, #0
 80166ce:	1c02      	adds	r2, r0, #0
 80166d0:	430a      	orrs	r2, r1
 80166d2:	709a      	strb	r2, [r3, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	785b      	ldrb	r3, [r3, #1]
 80166d8:	069b      	lsls	r3, r3, #26
 80166da:	0edb      	lsrs	r3, r3, #27
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	001a      	movs	r2, r3
 80166e0:	230f      	movs	r3, #15
 80166e2:	18fb      	adds	r3, r7, r3
 80166e4:	7819      	ldrb	r1, [r3, #0]
 80166e6:	2300      	movs	r3, #0
 80166e8:	9300      	str	r3, [sp, #0]
 80166ea:	2300      	movs	r3, #0
 80166ec:	2005      	movs	r0, #5
 80166ee:	f7ff fb33 	bl	8015d58 <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 80166f2:	697b      	ldr	r3, [r7, #20]
}
 80166f4:	0018      	movs	r0, r3
 80166f6:	46bd      	mov	sp, r7
 80166f8:	b007      	add	sp, #28
 80166fa:	bd90      	pop	{r4, r7, pc}
 80166fc:	20000a5c 	.word	0x20000a5c
 8016700:	20000a74 	.word	0x20000a74

08016704 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	0002      	movs	r2, r0
 801670c:	1dfb      	adds	r3, r7, #7
 801670e:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016710:	1dfb      	adds	r3, r7, #7
 8016712:	781a      	ldrb	r2, [r3, #0]
 8016714:	0013      	movs	r3, r2
 8016716:	005b      	lsls	r3, r3, #1
 8016718:	189b      	adds	r3, r3, r2
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	4a45      	ldr	r2, [pc, #276]	; (8016834 <CAD_Check_HW_SNK+0x130>)
 801671e:	189b      	adds	r3, r3, r2
 8016720:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8016722:	1dfb      	adds	r3, r7, #7
 8016724:	781a      	ldrb	r2, [r3, #0]
 8016726:	4944      	ldr	r1, [pc, #272]	; (8016838 <CAD_Check_HW_SNK+0x134>)
 8016728:	0013      	movs	r3, r2
 801672a:	011b      	lsls	r3, r3, #4
 801672c:	1a9b      	subs	r3, r3, r2
 801672e:	009b      	lsls	r3, r3, #2
 8016730:	585b      	ldr	r3, [r3, r1]
 8016732:	695a      	ldr	r2, [r3, #20]
 8016734:	23c0      	movs	r3, #192	; 0xc0
 8016736:	029b      	lsls	r3, r3, #10
 8016738:	4013      	ands	r3, r2
 801673a:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 801673c:	1dfb      	adds	r3, r7, #7
 801673e:	781a      	ldrb	r2, [r3, #0]
 8016740:	493d      	ldr	r1, [pc, #244]	; (8016838 <CAD_Check_HW_SNK+0x134>)
 8016742:	0013      	movs	r3, r2
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	1a9b      	subs	r3, r3, r2
 8016748:	009b      	lsls	r3, r3, #2
 801674a:	585b      	ldr	r3, [r3, r1]
 801674c:	695a      	ldr	r2, [r3, #20]
 801674e:	23c0      	movs	r3, #192	; 0xc0
 8016750:	031b      	lsls	r3, r3, #12
 8016752:	4013      	ands	r3, r2
 8016754:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	781a      	ldrb	r2, [r3, #0]
 801675a:	2103      	movs	r1, #3
 801675c:	438a      	bics	r2, r1
 801675e:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	781a      	ldrb	r2, [r3, #0]
 8016764:	211c      	movs	r1, #28
 8016766:	438a      	bics	r2, r1
 8016768:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d02c      	beq.n	80167ca <CAD_Check_HW_SNK+0xc6>
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d129      	bne.n	80167ca <CAD_Check_HW_SNK+0xc6>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	781a      	ldrb	r2, [r3, #0]
 801677a:	211c      	movs	r1, #28
 801677c:	438a      	bics	r2, r1
 801677e:	1c11      	adds	r1, r2, #0
 8016780:	2204      	movs	r2, #4
 8016782:	430a      	orrs	r2, r1
 8016784:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	781a      	ldrb	r2, [r3, #0]
 801678a:	2103      	movs	r1, #3
 801678c:	438a      	bics	r2, r1
 801678e:	1c11      	adds	r1, r2, #0
 8016790:	2201      	movs	r2, #1
 8016792:	430a      	orrs	r2, r1
 8016794:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8016796:	693b      	ldr	r3, [r7, #16]
 8016798:	0c18      	lsrs	r0, r3, #16
 801679a:	1dfb      	adds	r3, r7, #7
 801679c:	781a      	ldrb	r2, [r3, #0]
 801679e:	4926      	ldr	r1, [pc, #152]	; (8016838 <CAD_Check_HW_SNK+0x134>)
 80167a0:	0013      	movs	r3, r2
 80167a2:	011b      	lsls	r3, r3, #4
 80167a4:	1a9b      	subs	r3, r3, r2
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	18cb      	adds	r3, r1, r3
 80167aa:	3310      	adds	r3, #16
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	1c01      	adds	r1, r0, #0
 80167b0:	2203      	movs	r2, #3
 80167b2:	400a      	ands	r2, r1
 80167b4:	b2d2      	uxtb	r2, r2
 80167b6:	2103      	movs	r1, #3
 80167b8:	400a      	ands	r2, r1
 80167ba:	0090      	lsls	r0, r2, #2
 80167bc:	789a      	ldrb	r2, [r3, #2]
 80167be:	210c      	movs	r1, #12
 80167c0:	438a      	bics	r2, r1
 80167c2:	1c11      	adds	r1, r2, #0
 80167c4:	1c02      	adds	r2, r0, #0
 80167c6:	430a      	orrs	r2, r1
 80167c8:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 80167ca:	693b      	ldr	r3, [r7, #16]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d12c      	bne.n	801682a <CAD_Check_HW_SNK+0x126>
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d029      	beq.n	801682a <CAD_Check_HW_SNK+0x126>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	781a      	ldrb	r2, [r3, #0]
 80167da:	211c      	movs	r1, #28
 80167dc:	438a      	bics	r2, r1
 80167de:	1c11      	adds	r1, r2, #0
 80167e0:	2204      	movs	r2, #4
 80167e2:	430a      	orrs	r2, r1
 80167e4:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	781a      	ldrb	r2, [r3, #0]
 80167ea:	2103      	movs	r1, #3
 80167ec:	438a      	bics	r2, r1
 80167ee:	1c11      	adds	r1, r2, #0
 80167f0:	2202      	movs	r2, #2
 80167f2:	430a      	orrs	r2, r1
 80167f4:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	0c98      	lsrs	r0, r3, #18
 80167fa:	1dfb      	adds	r3, r7, #7
 80167fc:	781a      	ldrb	r2, [r3, #0]
 80167fe:	490e      	ldr	r1, [pc, #56]	; (8016838 <CAD_Check_HW_SNK+0x134>)
 8016800:	0013      	movs	r3, r2
 8016802:	011b      	lsls	r3, r3, #4
 8016804:	1a9b      	subs	r3, r3, r2
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	18cb      	adds	r3, r1, r3
 801680a:	3310      	adds	r3, #16
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	1c01      	adds	r1, r0, #0
 8016810:	2203      	movs	r2, #3
 8016812:	400a      	ands	r2, r1
 8016814:	b2d2      	uxtb	r2, r2
 8016816:	2103      	movs	r1, #3
 8016818:	400a      	ands	r2, r1
 801681a:	0090      	lsls	r0, r2, #2
 801681c:	789a      	ldrb	r2, [r3, #2]
 801681e:	210c      	movs	r1, #12
 8016820:	438a      	bics	r2, r1
 8016822:	1c11      	adds	r1, r2, #0
 8016824:	1c02      	adds	r2, r0, #0
 8016826:	430a      	orrs	r2, r1
 8016828:	709a      	strb	r2, [r3, #2]
  }
}
 801682a:	46c0      	nop			; (mov r8, r8)
 801682c:	46bd      	mov	sp, r7
 801682e:	b006      	add	sp, #24
 8016830:	bd80      	pop	{r7, pc}
 8016832:	46c0      	nop			; (mov r8, r8)
 8016834:	20000a5c 	.word	0x20000a5c
 8016838:	20000a74 	.word	0x20000a74

0801683c <ManageStateDetached_SNK>:
}
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b084      	sub	sp, #16
 8016840:	af00      	add	r7, sp, #0
 8016842:	0002      	movs	r2, r0
 8016844:	1dfb      	adds	r3, r7, #7
 8016846:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016848:	1dfb      	adds	r3, r7, #7
 801684a:	781a      	ldrb	r2, [r3, #0]
 801684c:	0013      	movs	r3, r2
 801684e:	005b      	lsls	r3, r3, #1
 8016850:	189b      	adds	r3, r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	4a21      	ldr	r2, [pc, #132]	; (80168dc <ManageStateDetached_SNK+0xa0>)
 8016856:	189b      	adds	r3, r3, r2
 8016858:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 801685a:	2302      	movs	r3, #2
 801685c:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 801685e:	1dfb      	adds	r3, r7, #7
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	0018      	movs	r0, r3
 8016864:	f7ff ff4e 	bl	8016704 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	781b      	ldrb	r3, [r3, #0]
 801686c:	221c      	movs	r2, #28
 801686e:	4013      	ands	r3, r2
 8016870:	b2db      	uxtb	r3, r3
 8016872:	2b00      	cmp	r3, #0
 8016874:	d103      	bne.n	801687e <ManageStateDetached_SNK+0x42>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 8016876:	2301      	movs	r3, #1
 8016878:	425b      	negs	r3, r3
 801687a:	60fb      	str	r3, [r7, #12]
 801687c:	e029      	b.n	80168d2 <ManageStateDetached_SNK+0x96>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 801687e:	f7f5 ff0b 	bl	800c698 <HAL_GetTick>
 8016882:	0002      	movs	r2, r0
 8016884:	68bb      	ldr	r3, [r7, #8]
 8016886:	605a      	str	r2, [r3, #4]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	785a      	ldrb	r2, [r3, #1]
 801688c:	213e      	movs	r1, #62	; 0x3e
 801688e:	438a      	bics	r2, r1
 8016890:	1c11      	adds	r1, r2, #0
 8016892:	2204      	movs	r2, #4
 8016894:	430a      	orrs	r2, r1
 8016896:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 8016898:	2001      	movs	r0, #1
 801689a:	f7f5 ff07 	bl	800c6ac <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 801689e:	1dfb      	adds	r3, r7, #7
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	0018      	movs	r0, r3
 80168a4:	f7ff ff2e 	bl	8016704 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	221c      	movs	r2, #28
 80168ae:	4013      	ands	r3, r2
 80168b0:	b2db      	uxtb	r3, r3
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d108      	bne.n	80168c8 <ManageStateDetached_SNK+0x8c>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 80168b6:	68bb      	ldr	r3, [r7, #8]
 80168b8:	785a      	ldrb	r2, [r3, #1]
 80168ba:	213e      	movs	r1, #62	; 0x3e
 80168bc:	438a      	bics	r2, r1
 80168be:	1c11      	adds	r1, r2, #0
 80168c0:	2202      	movs	r2, #2
 80168c2:	430a      	orrs	r2, r1
 80168c4:	705a      	strb	r2, [r3, #1]
 80168c6:	e004      	b.n	80168d2 <ManageStateDetached_SNK+0x96>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 80168c8:	1dfb      	adds	r3, r7, #7
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	0018      	movs	r0, r3
 80168ce:	f009 f8a9 	bl	801fa24 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80168d2:	68fb      	ldr	r3, [r7, #12]
}
 80168d4:	0018      	movs	r0, r3
 80168d6:	46bd      	mov	sp, r7
 80168d8:	b004      	add	sp, #16
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	20000a5c 	.word	0x20000a5c

080168e0 <ManageStateAttachedWait_SNK>:
}
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80168e0:	b590      	push	{r4, r7, lr}
 80168e2:	b089      	sub	sp, #36	; 0x24
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60b9      	str	r1, [r7, #8]
 80168e8:	607a      	str	r2, [r7, #4]
 80168ea:	240f      	movs	r4, #15
 80168ec:	193b      	adds	r3, r7, r4
 80168ee:	1c02      	adds	r2, r0, #0
 80168f0:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80168f2:	193b      	adds	r3, r7, r4
 80168f4:	781a      	ldrb	r2, [r3, #0]
 80168f6:	0013      	movs	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	189b      	adds	r3, r3, r2
 80168fc:	009b      	lsls	r3, r3, #2
 80168fe:	4a3e      	ldr	r2, [pc, #248]	; (80169f8 <ManageStateAttachedWait_SNK+0x118>)
 8016900:	189b      	adds	r3, r3, r2
 8016902:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016904:	2302      	movs	r3, #2
 8016906:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8016908:	f7f5 fec6 	bl	800c698 <HAL_GetTick>
 801690c:	0002      	movs	r2, r0
 801690e:	69bb      	ldr	r3, [r7, #24]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	1ad3      	subs	r3, r2, r3
 8016914:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8016916:	193b      	adds	r3, r7, r4
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	0018      	movs	r0, r3
 801691c:	f7ff fef2 	bl	8016704 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	221c      	movs	r2, #28
 8016926:	4013      	ands	r3, r2
 8016928:	b2db      	uxtb	r3, r3
 801692a:	2b04      	cmp	r3, #4
 801692c:	d130      	bne.n	8016990 <ManageStateAttachedWait_SNK+0xb0>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	2b78      	cmp	r3, #120	; 0x78
 8016932:	d927      	bls.n	8016984 <ManageStateAttachedWait_SNK+0xa4>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8016934:	193b      	adds	r3, r7, r4
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	2101      	movs	r1, #1
 801693a:	0018      	movs	r0, r3
 801693c:	f007 fd78 	bl	801e430 <USBPD_PWR_IF_GetVBUSStatus>
 8016940:	0003      	movs	r3, r0
 8016942:	2b01      	cmp	r3, #1
 8016944:	d11e      	bne.n	8016984 <ManageStateAttachedWait_SNK+0xa4>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8016946:	69bb      	ldr	r3, [r7, #24]
 8016948:	781b      	ldrb	r3, [r3, #0]
 801694a:	079b      	lsls	r3, r3, #30
 801694c:	0f9b      	lsrs	r3, r3, #30
 801694e:	b2db      	uxtb	r3, r3
 8016950:	001a      	movs	r2, r3
 8016952:	193b      	adds	r3, r7, r4
 8016954:	781b      	ldrb	r3, [r3, #0]
 8016956:	0011      	movs	r1, r2
 8016958:	0018      	movs	r0, r3
 801695a:	f001 fbf3 	bl	8018144 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 801695e:	69bb      	ldr	r3, [r7, #24]
 8016960:	785a      	ldrb	r2, [r3, #1]
 8016962:	213e      	movs	r1, #62	; 0x3e
 8016964:	438a      	bics	r2, r1
 8016966:	1c11      	adds	r1, r2, #0
 8016968:	2206      	movs	r2, #6
 801696a:	430a      	orrs	r2, r1
 801696c:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	2202      	movs	r2, #2
 8016972:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8016974:	69bb      	ldr	r3, [r7, #24]
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	079b      	lsls	r3, r3, #30
 801697a:	0f9b      	lsrs	r3, r3, #30
 801697c:	b2db      	uxtb	r3, r3
 801697e:	001a      	movs	r2, r3
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	781a      	ldrb	r2, [r3, #0]
 8016988:	2120      	movs	r1, #32
 801698a:	438a      	bics	r2, r1
 801698c:	701a      	strb	r2, [r3, #0]
 801698e:	e02e      	b.n	80169ee <ManageStateAttachedWait_SNK+0x10e>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	781b      	ldrb	r3, [r3, #0]
 8016994:	2220      	movs	r2, #32
 8016996:	4013      	ands	r3, r2
 8016998:	b2db      	uxtb	r3, r3
 801699a:	2b00      	cmp	r3, #0
 801699c:	d10c      	bne.n	80169b8 <ManageStateAttachedWait_SNK+0xd8>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 801699e:	f7f5 fe7b 	bl	800c698 <HAL_GetTick>
 80169a2:	0002      	movs	r2, r0
 80169a4:	69bb      	ldr	r3, [r7, #24]
 80169a6:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 80169a8:	69bb      	ldr	r3, [r7, #24]
 80169aa:	781a      	ldrb	r2, [r3, #0]
 80169ac:	2120      	movs	r1, #32
 80169ae:	430a      	orrs	r2, r1
 80169b0:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 80169b2:	230c      	movs	r3, #12
 80169b4:	61fb      	str	r3, [r7, #28]
 80169b6:	e01a      	b.n	80169ee <ManageStateAttachedWait_SNK+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 80169b8:	f7f5 fe6e 	bl	800c698 <HAL_GetTick>
 80169bc:	0002      	movs	r2, r0
 80169be:	69bb      	ldr	r3, [r7, #24]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	1ad3      	subs	r3, r2, r3
 80169c4:	2b0c      	cmp	r3, #12
 80169c6:	d912      	bls.n	80169ee <ManageStateAttachedWait_SNK+0x10e>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 80169c8:	69bb      	ldr	r3, [r7, #24]
 80169ca:	781a      	ldrb	r2, [r3, #0]
 80169cc:	2120      	movs	r1, #32
 80169ce:	438a      	bics	r2, r1
 80169d0:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 80169d2:	69bb      	ldr	r3, [r7, #24]
 80169d4:	785a      	ldrb	r2, [r3, #1]
 80169d6:	213e      	movs	r1, #62	; 0x3e
 80169d8:	438a      	bics	r2, r1
 80169da:	1c11      	adds	r1, r2, #0
 80169dc:	2202      	movs	r2, #2
 80169de:	430a      	orrs	r2, r1
 80169e0:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80169e2:	230f      	movs	r3, #15
 80169e4:	18fb      	adds	r3, r7, r3
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	0018      	movs	r0, r3
 80169ea:	f009 f839 	bl	801fa60 <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 80169ee:	69fb      	ldr	r3, [r7, #28]
}
 80169f0:	0018      	movs	r0, r3
 80169f2:	46bd      	mov	sp, r7
 80169f4:	b009      	add	sp, #36	; 0x24
 80169f6:	bd90      	pop	{r4, r7, pc}
 80169f8:	20000a5c 	.word	0x20000a5c

080169fc <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80169fc:	b590      	push	{r4, r7, lr}
 80169fe:	b089      	sub	sp, #36	; 0x24
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60b9      	str	r1, [r7, #8]
 8016a04:	607a      	str	r2, [r7, #4]
 8016a06:	210f      	movs	r1, #15
 8016a08:	187b      	adds	r3, r7, r1
 8016a0a:	1c02      	adds	r2, r0, #0
 8016a0c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8016a0e:	0008      	movs	r0, r1
 8016a10:	183b      	adds	r3, r7, r0
 8016a12:	781a      	ldrb	r2, [r3, #0]
 8016a14:	0013      	movs	r3, r2
 8016a16:	005b      	lsls	r3, r3, #1
 8016a18:	189b      	adds	r3, r3, r2
 8016a1a:	009b      	lsls	r3, r3, #2
 8016a1c:	4a2e      	ldr	r2, [pc, #184]	; (8016ad8 <ManageStateAttached_SNK+0xdc>)
 8016a1e:	189b      	adds	r3, r3, r2
 8016a20:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8016a22:	2302      	movs	r3, #2
 8016a24:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8016a26:	2300      	movs	r3, #0
 8016a28:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8016a2a:	183b      	adds	r3, r7, r0
 8016a2c:	781a      	ldrb	r2, [r3, #0]
 8016a2e:	492b      	ldr	r1, [pc, #172]	; (8016adc <ManageStateAttached_SNK+0xe0>)
 8016a30:	0013      	movs	r3, r2
 8016a32:	011b      	lsls	r3, r3, #4
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	009b      	lsls	r3, r3, #2
 8016a38:	18cb      	adds	r3, r1, r3
 8016a3a:	3334      	adds	r3, #52	; 0x34
 8016a3c:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d10c      	bne.n	8016a5c <ManageStateAttached_SNK+0x60>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8016a42:	183b      	adds	r3, r7, r0
 8016a44:	781a      	ldrb	r2, [r3, #0]
 8016a46:	4925      	ldr	r1, [pc, #148]	; (8016adc <ManageStateAttached_SNK+0xe0>)
 8016a48:	0013      	movs	r3, r2
 8016a4a:	011b      	lsls	r3, r3, #4
 8016a4c:	1a9b      	subs	r3, r3, r2
 8016a4e:	009b      	lsls	r3, r3, #2
 8016a50:	585b      	ldr	r3, [r3, r1]
 8016a52:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8016a54:	23c0      	movs	r3, #192	; 0xc0
 8016a56:	029b      	lsls	r3, r3, #10
 8016a58:	4013      	ands	r3, r2
 8016a5a:	e00c      	b.n	8016a76 <ManageStateAttached_SNK+0x7a>
 8016a5c:	230f      	movs	r3, #15
 8016a5e:	18fb      	adds	r3, r7, r3
 8016a60:	781a      	ldrb	r2, [r3, #0]
 8016a62:	491e      	ldr	r1, [pc, #120]	; (8016adc <ManageStateAttached_SNK+0xe0>)
 8016a64:	0013      	movs	r3, r2
 8016a66:	011b      	lsls	r3, r3, #4
 8016a68:	1a9b      	subs	r3, r3, r2
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	585b      	ldr	r3, [r3, r1]
 8016a6e:	695a      	ldr	r2, [r3, #20]
 8016a70:	23c0      	movs	r3, #192	; 0xc0
 8016a72:	031b      	lsls	r3, r3, #12
 8016a74:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8016a76:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8016a78:	240f      	movs	r4, #15
 8016a7a:	193b      	adds	r3, r7, r4
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	2102      	movs	r1, #2
 8016a80:	0018      	movs	r0, r3
 8016a82:	f007 fcd5 	bl	801e430 <USBPD_PWR_IF_GetVBUSStatus>
 8016a86:	0003      	movs	r3, r0
 8016a88:	2b01      	cmp	r3, #1
 8016a8a:	d11e      	bne.n	8016aca <ManageStateAttached_SNK+0xce>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8016a8c:	697a      	ldr	r2, [r7, #20]
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	429a      	cmp	r2, r3
 8016a92:	d11a      	bne.n	8016aca <ManageStateAttached_SNK+0xce>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8016a94:	193b      	adds	r3, r7, r4
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	0018      	movs	r0, r3
 8016a9a:	f001 fcb5 	bl	8018408 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8016a9e:	69bb      	ldr	r3, [r7, #24]
 8016aa0:	781a      	ldrb	r2, [r3, #0]
 8016aa2:	211c      	movs	r1, #28
 8016aa4:	438a      	bics	r2, r1
 8016aa6:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	785a      	ldrb	r2, [r3, #1]
 8016aac:	213e      	movs	r1, #62	; 0x3e
 8016aae:	438a      	bics	r2, r1
 8016ab0:	1c11      	adds	r1, r2, #0
 8016ab2:	2202      	movs	r2, #2
 8016ab4:	430a      	orrs	r2, r1
 8016ab6:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8016ab8:	68bb      	ldr	r3, [r7, #8]
 8016aba:	2201      	movs	r2, #1
 8016abc:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	61fb      	str	r3, [r7, #28]
 8016ac8:	e001      	b.n	8016ace <ManageStateAttached_SNK+0xd2>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8016aca:	230a      	movs	r3, #10
 8016acc:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8016ace:	69fb      	ldr	r3, [r7, #28]
}
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	b009      	add	sp, #36	; 0x24
 8016ad6:	bd90      	pop	{r4, r7, pc}
 8016ad8:	20000a5c 	.word	0x20000a5c
 8016adc:	20000a74 	.word	0x20000a74

08016ae0 <LL_AHB1_GRP1_EnableClock>:
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8016ae8:	4b07      	ldr	r3, [pc, #28]	; (8016b08 <LL_AHB1_GRP1_EnableClock+0x28>)
 8016aea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016aec:	4b06      	ldr	r3, [pc, #24]	; (8016b08 <LL_AHB1_GRP1_EnableClock+0x28>)
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	430a      	orrs	r2, r1
 8016af2:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8016af4:	4b04      	ldr	r3, [pc, #16]	; (8016b08 <LL_AHB1_GRP1_EnableClock+0x28>)
 8016af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016af8:	687a      	ldr	r2, [r7, #4]
 8016afa:	4013      	ands	r3, r2
 8016afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016afe:	68fb      	ldr	r3, [r7, #12]
}
 8016b00:	46c0      	nop			; (mov r8, r8)
 8016b02:	46bd      	mov	sp, r7
 8016b04:	b004      	add	sp, #16
 8016b06:	bd80      	pop	{r7, pc}
 8016b08:	40021000 	.word	0x40021000

08016b0c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b082      	sub	sp, #8
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	0002      	movs	r2, r0
 8016b14:	1dfb      	adds	r3, r7, #7
 8016b16:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
#else
  return UCPD_INSTANCE0;
 8016b18:	4b02      	ldr	r3, [pc, #8]	; (8016b24 <USBPD_HW_GetUSPDInstance+0x18>)
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 8016b1a:	0018      	movs	r0, r3
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	b002      	add	sp, #8
 8016b20:	bd80      	pop	{r7, pc}
 8016b22:	46c0      	nop			; (mov r8, r8)
 8016b24:	4000a000 	.word	0x4000a000

08016b28 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8016b28:	b590      	push	{r4, r7, lr}
 8016b2a:	b08f      	sub	sp, #60	; 0x3c
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	0002      	movs	r2, r0
 8016b30:	1dfb      	adds	r3, r7, #7
 8016b32:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8016b34:	240c      	movs	r4, #12
 8016b36:	193b      	adds	r3, r7, r4
 8016b38:	0018      	movs	r0, r3
 8016b3a:	f7fc fcad 	bl	8013498 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8016b3e:	193b      	adds	r3, r7, r4
 8016b40:	2200      	movs	r2, #0
 8016b42:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8016b44:	193b      	adds	r3, r7, r4
 8016b46:	2200      	movs	r2, #0
 8016b48:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8016b4a:	193b      	adds	r3, r7, r4
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8016b50:	193b      	adds	r3, r7, r4
 8016b52:	2280      	movs	r2, #128	; 0x80
 8016b54:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8016b56:	193b      	adds	r3, r7, r4
 8016b58:	2200      	movs	r2, #0
 8016b5a:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8016b5c:	193b      	adds	r3, r7, r4
 8016b5e:	2200      	movs	r2, #0
 8016b60:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8016b62:	193b      	adds	r3, r7, r4
 8016b64:	2200      	movs	r2, #0
 8016b66:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8016b68:	193b      	adds	r3, r7, r4
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8016b6e:	193b      	adds	r3, r7, r4
 8016b70:	2200      	movs	r2, #0
 8016b72:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8016b74:	193b      	adds	r3, r7, r4
 8016b76:	2280      	movs	r2, #128	; 0x80
 8016b78:	0192      	lsls	r2, r2, #6
 8016b7a:	629a      	str	r2, [r3, #40]	; 0x28

  switch (PortNum)
 8016b7c:	1dfb      	adds	r3, r7, #7
 8016b7e:	781b      	ldrb	r3, [r3, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d10c      	bne.n	8016b9e <USBPD_HW_Init_DMARxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8016b84:	2001      	movs	r0, #1
 8016b86:	f7ff ffab 	bl	8016ae0 <LL_AHB1_GRP1_EnableClock>

      /* Initialise the DMA */
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8016b8a:	193b      	adds	r3, r7, r4
 8016b8c:	223a      	movs	r2, #58	; 0x3a
 8016b8e:	625a      	str	r2, [r3, #36]	; 0x24

      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8016b90:	193b      	adds	r3, r7, r4
 8016b92:	4806      	ldr	r0, [pc, #24]	; (8016bac <USBPD_HW_Init_DMARxInstance+0x84>)
 8016b94:	001a      	movs	r2, r3
 8016b96:	2100      	movs	r1, #0
 8016b98:	f7fc fc3e 	bl	8013418 <LL_DMA_Init>
      break;
 8016b9c:	e000      	b.n	8016ba0 <USBPD_HW_Init_DMARxInstance+0x78>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8016b9e:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 8016ba0:	4b03      	ldr	r3, [pc, #12]	; (8016bb0 <USBPD_HW_Init_DMARxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 8016ba2:	0018      	movs	r0, r3
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	b00f      	add	sp, #60	; 0x3c
 8016ba8:	bd90      	pop	{r4, r7, pc}
 8016baa:	46c0      	nop			; (mov r8, r8)
 8016bac:	40020000 	.word	0x40020000
 8016bb0:	40020008 	.word	0x40020008

08016bb4 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	0002      	movs	r2, r0
 8016bbc:	1dfb      	adds	r3, r7, #7
 8016bbe:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8016bc0:	46c0      	nop			; (mov r8, r8)
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	b002      	add	sp, #8
 8016bc6:	bd80      	pop	{r7, pc}

08016bc8 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8016bc8:	b590      	push	{r4, r7, lr}
 8016bca:	b08f      	sub	sp, #60	; 0x3c
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	0002      	movs	r2, r0
 8016bd0:	1dfb      	adds	r3, r7, #7
 8016bd2:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8016bd4:	240c      	movs	r4, #12
 8016bd6:	193b      	adds	r3, r7, r4
 8016bd8:	0018      	movs	r0, r3
 8016bda:	f7fc fc5d 	bl	8013498 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8016bde:	193b      	adds	r3, r7, r4
 8016be0:	2210      	movs	r2, #16
 8016be2:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8016be4:	193b      	adds	r3, r7, r4
 8016be6:	2200      	movs	r2, #0
 8016be8:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8016bea:	193b      	adds	r3, r7, r4
 8016bec:	2200      	movs	r2, #0
 8016bee:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8016bf0:	193b      	adds	r3, r7, r4
 8016bf2:	2280      	movs	r2, #128	; 0x80
 8016bf4:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8016bf6:	193b      	adds	r3, r7, r4
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8016bfc:	193b      	adds	r3, r7, r4
 8016bfe:	2200      	movs	r2, #0
 8016c00:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8016c02:	193b      	adds	r3, r7, r4
 8016c04:	2200      	movs	r2, #0
 8016c06:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8016c08:	193b      	adds	r3, r7, r4
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8016c0e:	193b      	adds	r3, r7, r4
 8016c10:	2200      	movs	r2, #0
 8016c12:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8016c14:	1dfb      	adds	r3, r7, #7
 8016c16:	781b      	ldrb	r3, [r3, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d110      	bne.n	8016c3e <USBPD_HW_Init_DMATxInstance+0x76>
  {
    case 0 :
      /* Enable the clock */
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8016c1c:	2001      	movs	r0, #1
 8016c1e:	f7ff ff5f 	bl	8016ae0 <LL_AHB1_GRP1_EnableClock>

      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8016c22:	193b      	adds	r3, r7, r4
 8016c24:	223b      	movs	r2, #59	; 0x3b
 8016c26:	625a      	str	r2, [r3, #36]	; 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8016c28:	193b      	adds	r3, r7, r4
 8016c2a:	2280      	movs	r2, #128	; 0x80
 8016c2c:	0152      	lsls	r2, r2, #5
 8016c2e:	629a      	str	r2, [r3, #40]	; 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8016c30:	193b      	adds	r3, r7, r4
 8016c32:	4806      	ldr	r0, [pc, #24]	; (8016c4c <USBPD_HW_Init_DMATxInstance+0x84>)
 8016c34:	001a      	movs	r2, r3
 8016c36:	2101      	movs	r1, #1
 8016c38:	f7fc fbee 	bl	8013418 <LL_DMA_Init>
      break;
 8016c3c:	e000      	b.n	8016c40 <USBPD_HW_Init_DMATxInstance+0x78>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8016c3e:	46c0      	nop			; (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8016c40:	4b03      	ldr	r3, [pc, #12]	; (8016c50 <USBPD_HW_Init_DMATxInstance+0x88>)
#endif /* UCPD_INSTANCE1 */
}
 8016c42:	0018      	movs	r0, r3
 8016c44:	46bd      	mov	sp, r7
 8016c46:	b00f      	add	sp, #60	; 0x3c
 8016c48:	bd90      	pop	{r4, r7, pc}
 8016c4a:	46c0      	nop			; (mov r8, r8)
 8016c4c:	40020000 	.word	0x40020000
 8016c50:	4002001c 	.word	0x4002001c

08016c54 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	0002      	movs	r2, r0
 8016c5c:	1dfb      	adds	r3, r7, #7
 8016c5e:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8016c60:	46c0      	nop			; (mov r8, r8)
 8016c62:	46bd      	mov	sp, r7
 8016c64:	b002      	add	sp, #8
 8016c66:	bd80      	pop	{r7, pc}

08016c68 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	0002      	movs	r2, r0
 8016c70:	1dfb      	adds	r3, r7, #7
 8016c72:	701a      	strb	r2, [r3, #0]
 8016c74:	1dbb      	adds	r3, r7, #6
 8016c76:	1c0a      	adds	r2, r1, #0
 8016c78:	701a      	strb	r2, [r3, #0]
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8016c7a:	46c0      	nop			; (mov r8, r8)
  }
}
 8016c7c:	46c0      	nop			; (mov r8, r8)
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	b002      	add	sp, #8
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b082      	sub	sp, #8
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	699b      	ldr	r3, [r3, #24]
 8016c90:	2280      	movs	r2, #128	; 0x80
 8016c92:	0212      	lsls	r2, r2, #8
 8016c94:	431a      	orrs	r2, r3
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	619a      	str	r2, [r3, #24]
}
 8016c9a:	46c0      	nop			; (mov r8, r8)
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	b002      	add	sp, #8
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b082      	sub	sp, #8
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	699b      	ldr	r3, [r3, #24]
 8016cae:	2280      	movs	r2, #128	; 0x80
 8016cb0:	01d2      	lsls	r2, r2, #7
 8016cb2:	431a      	orrs	r2, r3
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	619a      	str	r2, [r3, #24]
}
 8016cb8:	46c0      	nop			; (mov r8, r8)
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	b002      	add	sp, #8
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	699b      	ldr	r3, [r3, #24]
 8016ccc:	2280      	movs	r2, #128	; 0x80
 8016cce:	0152      	lsls	r2, r2, #5
 8016cd0:	431a      	orrs	r2, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	619a      	str	r2, [r3, #24]
}
 8016cd6:	46c0      	nop			; (mov r8, r8)
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	b002      	add	sp, #8
 8016cdc:	bd80      	pop	{r7, pc}

08016cde <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8016cde:	b580      	push	{r7, lr}
 8016ce0:	b082      	sub	sp, #8
 8016ce2:	af00      	add	r7, sp, #0
 8016ce4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	699b      	ldr	r3, [r3, #24]
 8016cea:	2280      	movs	r2, #128	; 0x80
 8016cec:	0112      	lsls	r2, r2, #4
 8016cee:	431a      	orrs	r2, r3
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	619a      	str	r2, [r3, #24]
}
 8016cf4:	46c0      	nop			; (mov r8, r8)
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	b002      	add	sp, #8
 8016cfa:	bd80      	pop	{r7, pc}

08016cfc <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	699b      	ldr	r3, [r3, #24]
 8016d08:	2280      	movs	r2, #128	; 0x80
 8016d0a:	00d2      	lsls	r2, r2, #3
 8016d0c:	431a      	orrs	r2, r3
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	619a      	str	r2, [r3, #24]
}
 8016d12:	46c0      	nop			; (mov r8, r8)
 8016d14:	46bd      	mov	sp, r7
 8016d16:	b002      	add	sp, #8
 8016d18:	bd80      	pop	{r7, pc}

08016d1a <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8016d1a:	b580      	push	{r7, lr}
 8016d1c:	b082      	sub	sp, #8
 8016d1e:	af00      	add	r7, sp, #0
 8016d20:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	699b      	ldr	r3, [r3, #24]
 8016d26:	2280      	movs	r2, #128	; 0x80
 8016d28:	0092      	lsls	r2, r2, #2
 8016d2a:	431a      	orrs	r2, r3
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	619a      	str	r2, [r3, #24]
}
 8016d30:	46c0      	nop			; (mov r8, r8)
 8016d32:	46bd      	mov	sp, r7
 8016d34:	b002      	add	sp, #8
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	2240      	movs	r2, #64	; 0x40
 8016d46:	431a      	orrs	r2, r3
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	619a      	str	r2, [r3, #24]
}
 8016d4c:	46c0      	nop			; (mov r8, r8)
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	b002      	add	sp, #8
 8016d52:	bd80      	pop	{r7, pc}

08016d54 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b082      	sub	sp, #8
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	699b      	ldr	r3, [r3, #24]
 8016d60:	2220      	movs	r2, #32
 8016d62:	431a      	orrs	r2, r3
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	619a      	str	r2, [r3, #24]
}
 8016d68:	46c0      	nop			; (mov r8, r8)
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	b002      	add	sp, #8
 8016d6e:	bd80      	pop	{r7, pc}

08016d70 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	b082      	sub	sp, #8
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	699b      	ldr	r3, [r3, #24]
 8016d7c:	2210      	movs	r2, #16
 8016d7e:	431a      	orrs	r2, r3
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	619a      	str	r2, [r3, #24]
}
 8016d84:	46c0      	nop			; (mov r8, r8)
 8016d86:	46bd      	mov	sp, r7
 8016d88:	b002      	add	sp, #8
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	699b      	ldr	r3, [r3, #24]
 8016d98:	2208      	movs	r2, #8
 8016d9a:	431a      	orrs	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	619a      	str	r2, [r3, #24]
}
 8016da0:	46c0      	nop			; (mov r8, r8)
 8016da2:	46bd      	mov	sp, r7
 8016da4:	b002      	add	sp, #8
 8016da6:	bd80      	pop	{r7, pc}

08016da8 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	699b      	ldr	r3, [r3, #24]
 8016db4:	2204      	movs	r2, #4
 8016db6:	431a      	orrs	r2, r3
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	619a      	str	r2, [r3, #24]
}
 8016dbc:	46c0      	nop			; (mov r8, r8)
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	b002      	add	sp, #8
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	699b      	ldr	r3, [r3, #24]
 8016dd0:	2202      	movs	r2, #2
 8016dd2:	431a      	orrs	r2, r3
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	619a      	str	r2, [r3, #24]
}
 8016dd8:	46c0      	nop			; (mov r8, r8)
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	b002      	add	sp, #8
 8016dde:	bd80      	pop	{r7, pc}

08016de0 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8016de4:	2000      	movs	r0, #0
 8016de6:	f000 f803 	bl	8016df0 <PORTx_IRQHandler>
}
 8016dea:	46c0      	nop			; (mov r8, r8)
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	0002      	movs	r2, r0
 8016df8:	1dfb      	adds	r3, r7, #7
 8016dfa:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 8016dfc:	1dfb      	adds	r3, r7, #7
 8016dfe:	781a      	ldrb	r2, [r3, #0]
 8016e00:	49a6      	ldr	r1, [pc, #664]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016e02:	0013      	movs	r3, r2
 8016e04:	011b      	lsls	r3, r3, #4
 8016e06:	1a9b      	subs	r3, r3, r2
 8016e08:	009b      	lsls	r3, r3, #2
 8016e0a:	585b      	ldr	r3, [r3, r1]
 8016e0c:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	695b      	ldr	r3, [r3, #20]
 8016e12:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	691b      	ldr	r3, [r3, #16]
 8016e18:	68ba      	ldr	r2, [r7, #8]
 8016e1a:	4013      	ands	r3, r2
 8016e1c:	d100      	bne.n	8016e20 <PORTx_IRQHandler+0x30>
 8016e1e:	e1fc      	b.n	801721a <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	2202      	movs	r2, #2
 8016e24:	4013      	ands	r3, r2
 8016e26:	d03c      	beq.n	8016ea2 <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	0018      	movs	r0, r3
 8016e2c:	f7ff ffca 	bl	8016dc4 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016e30:	1dfb      	adds	r3, r7, #7
 8016e32:	781a      	ldrb	r2, [r3, #0]
 8016e34:	4999      	ldr	r1, [pc, #612]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016e36:	0013      	movs	r3, r2
 8016e38:	011b      	lsls	r3, r3, #4
 8016e3a:	1a9b      	subs	r3, r3, r2
 8016e3c:	009b      	lsls	r3, r3, #2
 8016e3e:	18cb      	adds	r3, r1, r3
 8016e40:	3304      	adds	r3, #4
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	6819      	ldr	r1, [r3, #0]
 8016e46:	1dfb      	adds	r3, r7, #7
 8016e48:	781a      	ldrb	r2, [r3, #0]
 8016e4a:	4894      	ldr	r0, [pc, #592]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016e4c:	0013      	movs	r3, r2
 8016e4e:	011b      	lsls	r3, r3, #4
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	18c3      	adds	r3, r0, r3
 8016e56:	3304      	adds	r3, #4
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	4391      	bics	r1, r2
 8016e5e:	000a      	movs	r2, r1
 8016e60:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8016e62:	46c0      	nop			; (mov r8, r8)
 8016e64:	1dfb      	adds	r3, r7, #7
 8016e66:	781a      	ldrb	r2, [r3, #0]
 8016e68:	498c      	ldr	r1, [pc, #560]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016e6a:	0013      	movs	r3, r2
 8016e6c:	011b      	lsls	r3, r3, #4
 8016e6e:	1a9b      	subs	r3, r3, r2
 8016e70:	009b      	lsls	r3, r3, #2
 8016e72:	18cb      	adds	r3, r1, r3
 8016e74:	3304      	adds	r3, #4
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	4013      	ands	r3, r2
 8016e7e:	2b01      	cmp	r3, #1
 8016e80:	d0f0      	beq.n	8016e64 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8016e82:	1dfb      	adds	r3, r7, #7
 8016e84:	781a      	ldrb	r2, [r3, #0]
 8016e86:	4985      	ldr	r1, [pc, #532]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016e88:	0013      	movs	r3, r2
 8016e8a:	011b      	lsls	r3, r3, #4
 8016e8c:	1a9b      	subs	r3, r3, r2
 8016e8e:	009b      	lsls	r3, r3, #2
 8016e90:	18cb      	adds	r3, r1, r3
 8016e92:	3314      	adds	r3, #20
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	1dfa      	adds	r2, r7, #7
 8016e98:	7812      	ldrb	r2, [r2, #0]
 8016e9a:	2101      	movs	r1, #1
 8016e9c:	0010      	movs	r0, r2
 8016e9e:	4798      	blx	r3
      return;
 8016ea0:	e1bb      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	2204      	movs	r2, #4
 8016ea6:	4013      	ands	r3, r2
 8016ea8:	d03c      	beq.n	8016f24 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	0018      	movs	r0, r3
 8016eae:	f7ff ff7b 	bl	8016da8 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016eb2:	1dfb      	adds	r3, r7, #7
 8016eb4:	781a      	ldrb	r2, [r3, #0]
 8016eb6:	4979      	ldr	r1, [pc, #484]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016eb8:	0013      	movs	r3, r2
 8016eba:	011b      	lsls	r3, r3, #4
 8016ebc:	1a9b      	subs	r3, r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	18cb      	adds	r3, r1, r3
 8016ec2:	3304      	adds	r3, #4
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	6819      	ldr	r1, [r3, #0]
 8016ec8:	1dfb      	adds	r3, r7, #7
 8016eca:	781a      	ldrb	r2, [r3, #0]
 8016ecc:	4873      	ldr	r0, [pc, #460]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016ece:	0013      	movs	r3, r2
 8016ed0:	011b      	lsls	r3, r3, #4
 8016ed2:	1a9b      	subs	r3, r3, r2
 8016ed4:	009b      	lsls	r3, r3, #2
 8016ed6:	18c3      	adds	r3, r0, r3
 8016ed8:	3304      	adds	r3, #4
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	2201      	movs	r2, #1
 8016ede:	4391      	bics	r1, r2
 8016ee0:	000a      	movs	r2, r1
 8016ee2:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8016ee4:	46c0      	nop			; (mov r8, r8)
 8016ee6:	1dfb      	adds	r3, r7, #7
 8016ee8:	781a      	ldrb	r2, [r3, #0]
 8016eea:	496c      	ldr	r1, [pc, #432]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016eec:	0013      	movs	r3, r2
 8016eee:	011b      	lsls	r3, r3, #4
 8016ef0:	1a9b      	subs	r3, r3, r2
 8016ef2:	009b      	lsls	r3, r3, #2
 8016ef4:	18cb      	adds	r3, r1, r3
 8016ef6:	3304      	adds	r3, #4
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2201      	movs	r2, #1
 8016efe:	4013      	ands	r3, r2
 8016f00:	2b01      	cmp	r3, #1
 8016f02:	d0f0      	beq.n	8016ee6 <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 8016f04:	1dfb      	adds	r3, r7, #7
 8016f06:	781a      	ldrb	r2, [r3, #0]
 8016f08:	4964      	ldr	r1, [pc, #400]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016f0a:	0013      	movs	r3, r2
 8016f0c:	011b      	lsls	r3, r3, #4
 8016f0e:	1a9b      	subs	r3, r3, r2
 8016f10:	009b      	lsls	r3, r3, #2
 8016f12:	18cb      	adds	r3, r1, r3
 8016f14:	3314      	adds	r3, #20
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	1dfa      	adds	r2, r7, #7
 8016f1a:	7812      	ldrb	r2, [r2, #0]
 8016f1c:	2100      	movs	r1, #0
 8016f1e:	0010      	movs	r0, r2
 8016f20:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 8016f22:	e17a      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 8016f24:	68bb      	ldr	r3, [r7, #8]
 8016f26:	2208      	movs	r2, #8
 8016f28:	4013      	ands	r3, r2
 8016f2a:	d03c      	beq.n	8016fa6 <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	0018      	movs	r0, r3
 8016f30:	f7ff ff2c 	bl	8016d8c <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016f34:	1dfb      	adds	r3, r7, #7
 8016f36:	781a      	ldrb	r2, [r3, #0]
 8016f38:	4958      	ldr	r1, [pc, #352]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016f3a:	0013      	movs	r3, r2
 8016f3c:	011b      	lsls	r3, r3, #4
 8016f3e:	1a9b      	subs	r3, r3, r2
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	18cb      	adds	r3, r1, r3
 8016f44:	3304      	adds	r3, #4
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	6819      	ldr	r1, [r3, #0]
 8016f4a:	1dfb      	adds	r3, r7, #7
 8016f4c:	781a      	ldrb	r2, [r3, #0]
 8016f4e:	4853      	ldr	r0, [pc, #332]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016f50:	0013      	movs	r3, r2
 8016f52:	011b      	lsls	r3, r3, #4
 8016f54:	1a9b      	subs	r3, r3, r2
 8016f56:	009b      	lsls	r3, r3, #2
 8016f58:	18c3      	adds	r3, r0, r3
 8016f5a:	3304      	adds	r3, #4
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	2201      	movs	r2, #1
 8016f60:	4391      	bics	r1, r2
 8016f62:	000a      	movs	r2, r1
 8016f64:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8016f66:	46c0      	nop			; (mov r8, r8)
 8016f68:	1dfb      	adds	r3, r7, #7
 8016f6a:	781a      	ldrb	r2, [r3, #0]
 8016f6c:	494b      	ldr	r1, [pc, #300]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016f6e:	0013      	movs	r3, r2
 8016f70:	011b      	lsls	r3, r3, #4
 8016f72:	1a9b      	subs	r3, r3, r2
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	18cb      	adds	r3, r1, r3
 8016f78:	3304      	adds	r3, #4
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	2201      	movs	r2, #1
 8016f80:	4013      	ands	r3, r2
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d0f0      	beq.n	8016f68 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 8016f86:	1dfb      	adds	r3, r7, #7
 8016f88:	781a      	ldrb	r2, [r3, #0]
 8016f8a:	4944      	ldr	r1, [pc, #272]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016f8c:	0013      	movs	r3, r2
 8016f8e:	011b      	lsls	r3, r3, #4
 8016f90:	1a9b      	subs	r3, r3, r2
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	18cb      	adds	r3, r1, r3
 8016f96:	3314      	adds	r3, #20
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	1dfa      	adds	r2, r7, #7
 8016f9c:	7812      	ldrb	r2, [r2, #0]
 8016f9e:	2102      	movs	r1, #2
 8016fa0:	0010      	movs	r0, r2
 8016fa2:	4798      	blx	r3
      return;
 8016fa4:	e139      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 8016fa6:	68bb      	ldr	r3, [r7, #8]
 8016fa8:	2210      	movs	r2, #16
 8016faa:	4013      	ands	r3, r2
 8016fac:	d004      	beq.n	8016fb8 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	0018      	movs	r0, r3
 8016fb2:	f7ff fedd 	bl	8016d70 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8016fb6:	e130      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	2220      	movs	r2, #32
 8016fbc:	4013      	ands	r3, r2
 8016fbe:	d013      	beq.n	8016fe8 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	0018      	movs	r0, r3
 8016fc4:	f7ff fec6 	bl	8016d54 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8016fc8:	1dfb      	adds	r3, r7, #7
 8016fca:	781a      	ldrb	r2, [r3, #0]
 8016fcc:	4933      	ldr	r1, [pc, #204]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8016fce:	0013      	movs	r3, r2
 8016fd0:	011b      	lsls	r3, r3, #4
 8016fd2:	1a9b      	subs	r3, r3, r2
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	18cb      	adds	r3, r1, r3
 8016fd8:	3324      	adds	r3, #36	; 0x24
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	1dfa      	adds	r2, r7, #7
 8016fde:	7812      	ldrb	r2, [r2, #0]
 8016fe0:	2105      	movs	r1, #5
 8016fe2:	0010      	movs	r0, r2
 8016fe4:	4798      	blx	r3
      return;
 8016fe6:	e118      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 8016fe8:	68bb      	ldr	r3, [r7, #8]
 8016fea:	2240      	movs	r2, #64	; 0x40
 8016fec:	4013      	ands	r3, r2
 8016fee:	d004      	beq.n	8016ffa <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	0018      	movs	r0, r3
 8016ff4:	f7ff fea0 	bl	8016d38 <LL_UCPD_ClearFlag_TxUND>
      return;
 8016ff8:	e10f      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8016ffa:	68ba      	ldr	r2, [r7, #8]
 8016ffc:	2380      	movs	r3, #128	; 0x80
 8016ffe:	009b      	lsls	r3, r3, #2
 8017000:	4013      	ands	r3, r2
 8017002:	d023      	beq.n	801704c <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017008:	2b05      	cmp	r3, #5
 801700a:	d10e      	bne.n	801702a <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801700c:	1dfb      	adds	r3, r7, #7
 801700e:	781a      	ldrb	r2, [r3, #0]
 8017010:	4922      	ldr	r1, [pc, #136]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8017012:	0013      	movs	r3, r2
 8017014:	011b      	lsls	r3, r3, #4
 8017016:	1a9b      	subs	r3, r3, r2
 8017018:	009b      	lsls	r3, r3, #2
 801701a:	18cb      	adds	r3, r1, r3
 801701c:	331c      	adds	r3, #28
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	1dfa      	adds	r2, r7, #7
 8017022:	7812      	ldrb	r2, [r2, #0]
 8017024:	2106      	movs	r1, #6
 8017026:	0010      	movs	r0, r2
 8017028:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	0018      	movs	r0, r3
 801702e:	f7ff fe74 	bl	8016d1a <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 8017032:	1dfb      	adds	r3, r7, #7
 8017034:	781a      	ldrb	r2, [r3, #0]
 8017036:	4919      	ldr	r1, [pc, #100]	; (801709c <PORTx_IRQHandler+0x2ac>)
 8017038:	2038      	movs	r0, #56	; 0x38
 801703a:	0013      	movs	r3, r2
 801703c:	011b      	lsls	r3, r3, #4
 801703e:	1a9b      	subs	r3, r3, r2
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	18cb      	adds	r3, r1, r3
 8017044:	181b      	adds	r3, r3, r0
 8017046:	2201      	movs	r2, #1
 8017048:	701a      	strb	r2, [r3, #0]
      return;
 801704a:	e0e6      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 801704c:	68ba      	ldr	r2, [r7, #8]
 801704e:	2380      	movs	r3, #128	; 0x80
 8017050:	00db      	lsls	r3, r3, #3
 8017052:	4013      	ands	r3, r2
 8017054:	d013      	beq.n	801707e <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8017056:	1dfb      	adds	r3, r7, #7
 8017058:	781a      	ldrb	r2, [r3, #0]
 801705a:	4910      	ldr	r1, [pc, #64]	; (801709c <PORTx_IRQHandler+0x2ac>)
 801705c:	0013      	movs	r3, r2
 801705e:	011b      	lsls	r3, r3, #4
 8017060:	1a9b      	subs	r3, r3, r2
 8017062:	009b      	lsls	r3, r3, #2
 8017064:	18cb      	adds	r3, r1, r3
 8017066:	331c      	adds	r3, #28
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	1dfa      	adds	r2, r7, #7
 801706c:	7812      	ldrb	r2, [r2, #0]
 801706e:	2105      	movs	r1, #5
 8017070:	0010      	movs	r0, r2
 8017072:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	0018      	movs	r0, r3
 8017078:	f7ff fe40 	bl	8016cfc <LL_UCPD_ClearFlag_RxHRST>
      return;
 801707c:	e0cd      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 801707e:	68ba      	ldr	r2, [r7, #8]
 8017080:	2380      	movs	r3, #128	; 0x80
 8017082:	011b      	lsls	r3, r3, #4
 8017084:	4013      	ands	r3, r2
 8017086:	d00d      	beq.n	80170a4 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 8017088:	1dfb      	adds	r3, r7, #7
 801708a:	781b      	ldrb	r3, [r3, #0]
 801708c:	4a04      	ldr	r2, [pc, #16]	; (80170a0 <PORTx_IRQHandler+0x2b0>)
 801708e:	2101      	movs	r1, #1
 8017090:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	0018      	movs	r0, r3
 8017096:	f7ff fe22 	bl	8016cde <LL_UCPD_ClearFlag_RxOvr>
      return;
 801709a:	e0be      	b.n	801721a <PORTx_IRQHandler+0x42a>
 801709c:	20000a74 	.word	0x20000a74
 80170a0:	20000a68 	.word	0x20000a68
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 80170a4:	68ba      	ldr	r2, [r7, #8]
 80170a6:	2380      	movs	r3, #128	; 0x80
 80170a8:	015b      	lsls	r3, r3, #5
 80170aa:	4013      	ands	r3, r2
 80170ac:	d100      	bne.n	80170b0 <PORTx_IRQHandler+0x2c0>
 80170ae:	e096      	b.n	80171de <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 80170b0:	1dfb      	adds	r3, r7, #7
 80170b2:	781a      	ldrb	r2, [r3, #0]
 80170b4:	495a      	ldr	r1, [pc, #360]	; (8017220 <PORTx_IRQHandler+0x430>)
 80170b6:	2038      	movs	r0, #56	; 0x38
 80170b8:	0013      	movs	r3, r2
 80170ba:	011b      	lsls	r3, r3, #4
 80170bc:	1a9b      	subs	r3, r3, r2
 80170be:	009b      	lsls	r3, r3, #2
 80170c0:	18cb      	adds	r3, r1, r3
 80170c2:	181b      	adds	r3, r3, r0
 80170c4:	2200      	movs	r2, #0
 80170c6:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	0018      	movs	r0, r3
 80170cc:	f7ff fdf8 	bl	8016cc0 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80170d0:	1dfb      	adds	r3, r7, #7
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	4952      	ldr	r1, [pc, #328]	; (8017220 <PORTx_IRQHandler+0x430>)
 80170d6:	0013      	movs	r3, r2
 80170d8:	011b      	lsls	r3, r3, #4
 80170da:	1a9b      	subs	r3, r3, r2
 80170dc:	009b      	lsls	r3, r3, #2
 80170de:	18cb      	adds	r3, r1, r3
 80170e0:	3308      	adds	r3, #8
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	6819      	ldr	r1, [r3, #0]
 80170e6:	1dfb      	adds	r3, r7, #7
 80170e8:	781a      	ldrb	r2, [r3, #0]
 80170ea:	484d      	ldr	r0, [pc, #308]	; (8017220 <PORTx_IRQHandler+0x430>)
 80170ec:	0013      	movs	r3, r2
 80170ee:	011b      	lsls	r3, r3, #4
 80170f0:	1a9b      	subs	r3, r3, r2
 80170f2:	009b      	lsls	r3, r3, #2
 80170f4:	18c3      	adds	r3, r0, r3
 80170f6:	3308      	adds	r3, #8
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	2201      	movs	r2, #1
 80170fc:	4391      	bics	r1, r2
 80170fe:	000a      	movs	r2, r1
 8017100:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8017102:	46c0      	nop			; (mov r8, r8)
 8017104:	1dfb      	adds	r3, r7, #7
 8017106:	781a      	ldrb	r2, [r3, #0]
 8017108:	4945      	ldr	r1, [pc, #276]	; (8017220 <PORTx_IRQHandler+0x430>)
 801710a:	0013      	movs	r3, r2
 801710c:	011b      	lsls	r3, r3, #4
 801710e:	1a9b      	subs	r3, r3, r2
 8017110:	009b      	lsls	r3, r3, #2
 8017112:	18cb      	adds	r3, r1, r3
 8017114:	3308      	adds	r3, #8
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	2201      	movs	r2, #1
 801711c:	4013      	ands	r3, r2
 801711e:	2b01      	cmp	r3, #1
 8017120:	d0f0      	beq.n	8017104 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8017122:	1dfb      	adds	r3, r7, #7
 8017124:	781a      	ldrb	r2, [r3, #0]
 8017126:	493e      	ldr	r1, [pc, #248]	; (8017220 <PORTx_IRQHandler+0x430>)
 8017128:	0013      	movs	r3, r2
 801712a:	011b      	lsls	r3, r3, #4
 801712c:	1a9b      	subs	r3, r3, r2
 801712e:	009b      	lsls	r3, r3, #2
 8017130:	18cb      	adds	r3, r1, r3
 8017132:	3330      	adds	r3, #48	; 0x30
 8017134:	6818      	ldr	r0, [r3, #0]
 8017136:	1dfb      	adds	r3, r7, #7
 8017138:	781a      	ldrb	r2, [r3, #0]
 801713a:	4939      	ldr	r1, [pc, #228]	; (8017220 <PORTx_IRQHandler+0x430>)
 801713c:	0013      	movs	r3, r2
 801713e:	011b      	lsls	r3, r3, #4
 8017140:	1a9b      	subs	r3, r3, r2
 8017142:	009b      	lsls	r3, r3, #2
 8017144:	18cb      	adds	r3, r1, r3
 8017146:	3308      	adds	r3, #8
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	0002      	movs	r2, r0
 801714c:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 801714e:	1dfb      	adds	r3, r7, #7
 8017150:	781a      	ldrb	r2, [r3, #0]
 8017152:	4933      	ldr	r1, [pc, #204]	; (8017220 <PORTx_IRQHandler+0x430>)
 8017154:	0013      	movs	r3, r2
 8017156:	011b      	lsls	r3, r3, #4
 8017158:	1a9b      	subs	r3, r3, r2
 801715a:	009b      	lsls	r3, r3, #2
 801715c:	18cb      	adds	r3, r1, r3
 801715e:	3308      	adds	r3, #8
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	2284      	movs	r2, #132	; 0x84
 8017164:	0052      	lsls	r2, r2, #1
 8017166:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8017168:	1dfb      	adds	r3, r7, #7
 801716a:	781a      	ldrb	r2, [r3, #0]
 801716c:	492c      	ldr	r1, [pc, #176]	; (8017220 <PORTx_IRQHandler+0x430>)
 801716e:	0013      	movs	r3, r2
 8017170:	011b      	lsls	r3, r3, #4
 8017172:	1a9b      	subs	r3, r3, r2
 8017174:	009b      	lsls	r3, r3, #2
 8017176:	18cb      	adds	r3, r1, r3
 8017178:	3308      	adds	r3, #8
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	6819      	ldr	r1, [r3, #0]
 801717e:	1dfb      	adds	r3, r7, #7
 8017180:	781a      	ldrb	r2, [r3, #0]
 8017182:	4827      	ldr	r0, [pc, #156]	; (8017220 <PORTx_IRQHandler+0x430>)
 8017184:	0013      	movs	r3, r2
 8017186:	011b      	lsls	r3, r3, #4
 8017188:	1a9b      	subs	r3, r3, r2
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	18c3      	adds	r3, r0, r3
 801718e:	3308      	adds	r3, #8
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2201      	movs	r2, #1
 8017194:	430a      	orrs	r2, r1
 8017196:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 8017198:	68ba      	ldr	r2, [r7, #8]
 801719a:	2380      	movs	r3, #128	; 0x80
 801719c:	019b      	lsls	r3, r3, #6
 801719e:	4013      	ands	r3, r2
 80171a0:	d117      	bne.n	80171d2 <PORTx_IRQHandler+0x3e2>
 80171a2:	1dfb      	adds	r3, r7, #7
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	4a1f      	ldr	r2, [pc, #124]	; (8017224 <PORTx_IRQHandler+0x434>)
 80171a8:	5cd3      	ldrb	r3, [r2, r3]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d111      	bne.n	80171d2 <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 80171ae:	1dfb      	adds	r3, r7, #7
 80171b0:	781a      	ldrb	r2, [r3, #0]
 80171b2:	491b      	ldr	r1, [pc, #108]	; (8017220 <PORTx_IRQHandler+0x430>)
 80171b4:	0013      	movs	r3, r2
 80171b6:	011b      	lsls	r3, r3, #4
 80171b8:	1a9b      	subs	r3, r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	18cb      	adds	r3, r1, r3
 80171be:	3320      	adds	r3, #32
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80171c6:	2107      	movs	r1, #7
 80171c8:	4019      	ands	r1, r3
 80171ca:	1dfb      	adds	r3, r7, #7
 80171cc:	781b      	ldrb	r3, [r3, #0]
 80171ce:	0018      	movs	r0, r3
 80171d0:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 80171d2:	1dfb      	adds	r3, r7, #7
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	4a13      	ldr	r2, [pc, #76]	; (8017224 <PORTx_IRQHandler+0x434>)
 80171d8:	2100      	movs	r1, #0
 80171da:	54d1      	strb	r1, [r2, r3]
      return;
 80171dc:	e01d      	b.n	801721a <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 80171de:	68ba      	ldr	r2, [r7, #8]
 80171e0:	2380      	movs	r3, #128	; 0x80
 80171e2:	01db      	lsls	r3, r3, #7
 80171e4:	4013      	ands	r3, r2
 80171e6:	d104      	bne.n	80171f2 <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 80171e8:	68ba      	ldr	r2, [r7, #8]
 80171ea:	2380      	movs	r3, #128	; 0x80
 80171ec:	021b      	lsls	r3, r3, #8
 80171ee:	4013      	ands	r3, r2
 80171f0:	d013      	beq.n	801721a <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	0018      	movs	r0, r3
 80171f6:	f7ff fd54 	bl	8016ca2 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	0018      	movs	r0, r3
 80171fe:	f7ff fd41 	bl	8016c84 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 8017202:	1dfb      	adds	r3, r7, #7
 8017204:	781a      	ldrb	r2, [r3, #0]
 8017206:	4906      	ldr	r1, [pc, #24]	; (8017220 <PORTx_IRQHandler+0x430>)
 8017208:	0013      	movs	r3, r2
 801720a:	011b      	lsls	r3, r3, #4
 801720c:	1a9b      	subs	r3, r3, r2
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	18cb      	adds	r3, r1, r3
 8017212:	332c      	adds	r3, #44	; 0x2c
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 8017218:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 801721a:	46bd      	mov	sp, r7
 801721c:	b004      	add	sp, #16
 801721e:	bd80      	pop	{r7, pc}
 8017220:	20000a74 	.word	0x20000a74
 8017224:	20000a68 	.word	0x20000a68

08017228 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 8017228:	b590      	push	{r4, r7, lr}
 801722a:	b085      	sub	sp, #20
 801722c:	af00      	add	r7, sp, #0
 801722e:	60b9      	str	r1, [r7, #8]
 8017230:	607a      	str	r2, [r7, #4]
 8017232:	603b      	str	r3, [r7, #0]
 8017234:	240f      	movs	r4, #15
 8017236:	193b      	adds	r3, r7, r4
 8017238:	1c02      	adds	r2, r0, #0
 801723a:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 801723c:	193b      	adds	r3, r7, r4
 801723e:	781a      	ldrb	r2, [r3, #0]
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	6919      	ldr	r1, [r3, #16]
 8017244:	4830      	ldr	r0, [pc, #192]	; (8017308 <USBPD_PHY_Init+0xe0>)
 8017246:	0013      	movs	r3, r2
 8017248:	011b      	lsls	r3, r3, #4
 801724a:	1a9b      	subs	r3, r3, r2
 801724c:	009b      	lsls	r3, r3, #2
 801724e:	18c3      	adds	r3, r0, r3
 8017250:	3314      	adds	r3, #20
 8017252:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8017254:	193b      	adds	r3, r7, r4
 8017256:	781a      	ldrb	r2, [r3, #0]
 8017258:	68bb      	ldr	r3, [r7, #8]
 801725a:	68d9      	ldr	r1, [r3, #12]
 801725c:	482a      	ldr	r0, [pc, #168]	; (8017308 <USBPD_PHY_Init+0xe0>)
 801725e:	0013      	movs	r3, r2
 8017260:	011b      	lsls	r3, r3, #4
 8017262:	1a9b      	subs	r3, r3, r2
 8017264:	009b      	lsls	r3, r3, #2
 8017266:	18c3      	adds	r3, r0, r3
 8017268:	3318      	adds	r3, #24
 801726a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 801726c:	193b      	adds	r3, r7, r4
 801726e:	781a      	ldrb	r2, [r3, #0]
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	6859      	ldr	r1, [r3, #4]
 8017274:	4824      	ldr	r0, [pc, #144]	; (8017308 <USBPD_PHY_Init+0xe0>)
 8017276:	0013      	movs	r3, r2
 8017278:	011b      	lsls	r3, r3, #4
 801727a:	1a9b      	subs	r3, r3, r2
 801727c:	009b      	lsls	r3, r3, #2
 801727e:	18c3      	adds	r3, r0, r3
 8017280:	331c      	adds	r3, #28
 8017282:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8017284:	193b      	adds	r3, r7, r4
 8017286:	781a      	ldrb	r2, [r3, #0]
 8017288:	491f      	ldr	r1, [pc, #124]	; (8017308 <USBPD_PHY_Init+0xe0>)
 801728a:	0013      	movs	r3, r2
 801728c:	011b      	lsls	r3, r3, #4
 801728e:	1a9b      	subs	r3, r3, r2
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	18cb      	adds	r3, r1, r3
 8017294:	3320      	adds	r3, #32
 8017296:	4a1d      	ldr	r2, [pc, #116]	; (801730c <USBPD_PHY_Init+0xe4>)
 8017298:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801729a:	193b      	adds	r3, r7, r4
 801729c:	781a      	ldrb	r2, [r3, #0]
 801729e:	68bb      	ldr	r3, [r7, #8]
 80172a0:	6899      	ldr	r1, [r3, #8]
 80172a2:	4819      	ldr	r0, [pc, #100]	; (8017308 <USBPD_PHY_Init+0xe0>)
 80172a4:	0013      	movs	r3, r2
 80172a6:	011b      	lsls	r3, r3, #4
 80172a8:	1a9b      	subs	r3, r3, r2
 80172aa:	009b      	lsls	r3, r3, #2
 80172ac:	18c3      	adds	r3, r0, r3
 80172ae:	3324      	adds	r3, #36	; 0x24
 80172b0:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 80172b2:	193b      	adds	r3, r7, r4
 80172b4:	781a      	ldrb	r2, [r3, #0]
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	6959      	ldr	r1, [r3, #20]
 80172ba:	4813      	ldr	r0, [pc, #76]	; (8017308 <USBPD_PHY_Init+0xe0>)
 80172bc:	0013      	movs	r3, r2
 80172be:	011b      	lsls	r3, r3, #4
 80172c0:	1a9b      	subs	r3, r3, r2
 80172c2:	009b      	lsls	r3, r3, #2
 80172c4:	18c3      	adds	r3, r0, r3
 80172c6:	3328      	adds	r3, #40	; 0x28
 80172c8:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 80172ca:	193b      	adds	r3, r7, r4
 80172cc:	781a      	ldrb	r2, [r3, #0]
 80172ce:	490e      	ldr	r1, [pc, #56]	; (8017308 <USBPD_PHY_Init+0xe0>)
 80172d0:	0013      	movs	r3, r2
 80172d2:	011b      	lsls	r3, r3, #4
 80172d4:	1a9b      	subs	r3, r3, r2
 80172d6:	009b      	lsls	r3, r3, #2
 80172d8:	18cb      	adds	r3, r1, r3
 80172da:	3330      	adds	r3, #48	; 0x30
 80172dc:	687a      	ldr	r2, [r7, #4]
 80172de:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 80172e0:	193b      	adds	r3, r7, r4
 80172e2:	781b      	ldrb	r3, [r3, #0]
 80172e4:	4a0a      	ldr	r2, [pc, #40]	; (8017310 <USBPD_PHY_Init+0xe8>)
 80172e6:	00db      	lsls	r3, r3, #3
 80172e8:	18d3      	adds	r3, r2, r3
 80172ea:	3304      	adds	r3, #4
 80172ec:	6a3a      	ldr	r2, [r7, #32]
 80172ee:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80172f0:	193b      	adds	r3, r7, r4
 80172f2:	781a      	ldrb	r2, [r3, #0]
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	6819      	ldr	r1, [r3, #0]
 80172f8:	4b05      	ldr	r3, [pc, #20]	; (8017310 <USBPD_PHY_Init+0xe8>)
 80172fa:	00d2      	lsls	r2, r2, #3
 80172fc:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 80172fe:	2300      	movs	r3, #0
}
 8017300:	0018      	movs	r0, r3
 8017302:	46bd      	mov	sp, r7
 8017304:	b005      	add	sp, #20
 8017306:	bd90      	pop	{r4, r7, pc}
 8017308:	20000a74 	.word	0x20000a74
 801730c:	080174f9 	.word	0x080174f9
 8017310:	20000a6c 	.word	0x20000a6c

08017314 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b082      	sub	sp, #8
 8017318:	af00      	add	r7, sp, #0
 801731a:	0002      	movs	r2, r0
 801731c:	1dfb      	adds	r3, r7, #7
 801731e:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 8017320:	4b02      	ldr	r3, [pc, #8]	; (801732c <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 8017322:	0018      	movs	r0, r3
 8017324:	46bd      	mov	sp, r7
 8017326:	b002      	add	sp, #8
 8017328:	bd80      	pop	{r7, pc}
 801732a:	46c0      	nop			; (mov r8, r8)
 801732c:	00000389 	.word	0x00000389

08017330 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	0002      	movs	r2, r0
 8017338:	1dfb      	adds	r3, r7, #7
 801733a:	701a      	strb	r2, [r3, #0]
  return 30u;
 801733c:	231e      	movs	r3, #30
}
 801733e:	0018      	movs	r0, r3
 8017340:	46bd      	mov	sp, r7
 8017342:	b002      	add	sp, #8
 8017344:	bd80      	pop	{r7, pc}

08017346 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 8017346:	b580      	push	{r7, lr}
 8017348:	b082      	sub	sp, #8
 801734a:	af00      	add	r7, sp, #0
 801734c:	0002      	movs	r2, r0
 801734e:	1dfb      	adds	r3, r7, #7
 8017350:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8017352:	46c0      	nop			; (mov r8, r8)
 8017354:	46bd      	mov	sp, r7
 8017356:	b002      	add	sp, #8
 8017358:	bd80      	pop	{r7, pc}

0801735a <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 801735a:	b580      	push	{r7, lr}
 801735c:	b082      	sub	sp, #8
 801735e:	af00      	add	r7, sp, #0
 8017360:	0002      	movs	r2, r0
 8017362:	1dfb      	adds	r3, r7, #7
 8017364:	701a      	strb	r2, [r3, #0]
 8017366:	1dbb      	adds	r3, r7, #6
 8017368:	1c0a      	adds	r2, r1, #0
 801736a:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 801736c:	1dbb      	adds	r3, r7, #6
 801736e:	7819      	ldrb	r1, [r3, #0]
 8017370:	1dfb      	adds	r3, r7, #7
 8017372:	7818      	ldrb	r0, [r3, #0]
 8017374:	2300      	movs	r3, #0
 8017376:	2200      	movs	r2, #0
 8017378:	f000 f805 	bl	8017386 <USBPD_PHY_SendMessage>
 801737c:	0003      	movs	r3, r0
}
 801737e:	0018      	movs	r0, r3
 8017380:	46bd      	mov	sp, r7
 8017382:	b002      	add	sp, #8
 8017384:	bd80      	pop	{r7, pc}

08017386 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 8017386:	b590      	push	{r4, r7, lr}
 8017388:	b083      	sub	sp, #12
 801738a:	af00      	add	r7, sp, #0
 801738c:	0004      	movs	r4, r0
 801738e:	0008      	movs	r0, r1
 8017390:	603a      	str	r2, [r7, #0]
 8017392:	0019      	movs	r1, r3
 8017394:	1dfb      	adds	r3, r7, #7
 8017396:	1c22      	adds	r2, r4, #0
 8017398:	701a      	strb	r2, [r3, #0]
 801739a:	1dbb      	adds	r3, r7, #6
 801739c:	1c02      	adds	r2, r0, #0
 801739e:	701a      	strb	r2, [r3, #0]
 80173a0:	1d3b      	adds	r3, r7, #4
 80173a2:	1c0a      	adds	r2, r1, #0
 80173a4:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 80173a6:	1d3b      	adds	r3, r7, #4
 80173a8:	881c      	ldrh	r4, [r3, #0]
 80173aa:	683a      	ldr	r2, [r7, #0]
 80173ac:	1dbb      	adds	r3, r7, #6
 80173ae:	7819      	ldrb	r1, [r3, #0]
 80173b0:	1dfb      	adds	r3, r7, #7
 80173b2:	7818      	ldrb	r0, [r3, #0]
 80173b4:	0023      	movs	r3, r4
 80173b6:	f000 fb2f 	bl	8017a18 <USBPD_HW_IF_SendBuffer>
 80173ba:	0003      	movs	r3, r0
}
 80173bc:	0018      	movs	r0, r3
 80173be:	46bd      	mov	sp, r7
 80173c0:	b003      	add	sp, #12
 80173c2:	bd90      	pop	{r4, r7, pc}

080173c4 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b082      	sub	sp, #8
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	0002      	movs	r2, r0
 80173cc:	1dfb      	adds	r3, r7, #7
 80173ce:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 80173d0:	1dfb      	adds	r3, r7, #7
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	0018      	movs	r0, r3
 80173d6:	f000 fc7d 	bl	8017cd4 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	0018      	movs	r0, r3
 80173de:	46bd      	mov	sp, r7
 80173e0:	b002      	add	sp, #8
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	0002      	movs	r2, r0
 80173ec:	1dfb      	adds	r3, r7, #7
 80173ee:	701a      	strb	r2, [r3, #0]
 80173f0:	1dbb      	adds	r3, r7, #6
 80173f2:	1c0a      	adds	r2, r1, #0
 80173f4:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80173f6:	1dbb      	adds	r3, r7, #6
 80173f8:	781b      	ldrb	r3, [r3, #0]
 80173fa:	2b07      	cmp	r3, #7
 80173fc:	d104      	bne.n	8017408 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80173fe:	1dfb      	adds	r3, r7, #7
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	0018      	movs	r0, r3
 8017404:	f000 fad0 	bl	80179a8 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8017408:	2300      	movs	r3, #0
}
 801740a:	0018      	movs	r0, r3
 801740c:	46bd      	mov	sp, r7
 801740e:	b002      	add	sp, #8
 8017410:	bd80      	pop	{r7, pc}

08017412 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8017412:	b580      	push	{r7, lr}
 8017414:	b082      	sub	sp, #8
 8017416:	af00      	add	r7, sp, #0
 8017418:	0002      	movs	r2, r0
 801741a:	1dfb      	adds	r3, r7, #7
 801741c:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 801741e:	1dfb      	adds	r3, r7, #7
 8017420:	781b      	ldrb	r3, [r3, #0]
 8017422:	0018      	movs	r0, r3
 8017424:	f001 f87e 	bl	8018524 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 8017428:	46c0      	nop			; (mov r8, r8)
 801742a:	46bd      	mov	sp, r7
 801742c:	b002      	add	sp, #8
 801742e:	bd80      	pop	{r7, pc}

08017430 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	0002      	movs	r2, r0
 8017438:	1dfb      	adds	r3, r7, #7
 801743a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 801743c:	1dfb      	adds	r3, r7, #7
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	0018      	movs	r0, r3
 8017442:	f001 f889 	bl	8018558 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 8017446:	46c0      	nop			; (mov r8, r8)
 8017448:	46bd      	mov	sp, r7
 801744a:	b002      	add	sp, #8
 801744c:	bd80      	pop	{r7, pc}
	...

08017450 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8017450:	b580      	push	{r7, lr}
 8017452:	b082      	sub	sp, #8
 8017454:	af00      	add	r7, sp, #0
 8017456:	0002      	movs	r2, r0
 8017458:	6039      	str	r1, [r7, #0]
 801745a:	1dfb      	adds	r3, r7, #7
 801745c:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 801745e:	1dfb      	adds	r3, r7, #7
 8017460:	781b      	ldrb	r3, [r3, #0]
 8017462:	4a05      	ldr	r2, [pc, #20]	; (8017478 <USBPD_PHY_SOPSupported+0x28>)
 8017464:	00db      	lsls	r3, r3, #3
 8017466:	18d3      	adds	r3, r2, r3
 8017468:	3304      	adds	r3, #4
 801746a:	683a      	ldr	r2, [r7, #0]
 801746c:	601a      	str	r2, [r3, #0]
}
 801746e:	46c0      	nop			; (mov r8, r8)
 8017470:	46bd      	mov	sp, r7
 8017472:	b002      	add	sp, #8
 8017474:	bd80      	pop	{r7, pc}
 8017476:	46c0      	nop			; (mov r8, r8)
 8017478:	20000a6c 	.word	0x20000a6c

0801747c <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 801747c:	b580      	push	{r7, lr}
 801747e:	b082      	sub	sp, #8
 8017480:	af00      	add	r7, sp, #0
 8017482:	0002      	movs	r2, r0
 8017484:	1dfb      	adds	r3, r7, #7
 8017486:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 8017488:	1dfb      	adds	r3, r7, #7
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	0018      	movs	r0, r3
 801748e:	f001 f87d 	bl	801858c <USBPD_HW_IF_IsResistor_SinkTxOk>
 8017492:	0003      	movs	r3, r0
}
 8017494:	0018      	movs	r0, r3
 8017496:	46bd      	mov	sp, r7
 8017498:	b002      	add	sp, #8
 801749a:	bd80      	pop	{r7, pc}

0801749c <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	0002      	movs	r2, r0
 80174a4:	1dfb      	adds	r3, r7, #7
 80174a6:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 80174a8:	1dfb      	adds	r3, r7, #7
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	0018      	movs	r0, r3
 80174ae:	f001 f8b1 	bl	8018614 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 80174b2:	46c0      	nop			; (mov r8, r8)
 80174b4:	46bd      	mov	sp, r7
 80174b6:	b002      	add	sp, #8
 80174b8:	bd80      	pop	{r7, pc}

080174ba <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80174ba:	b580      	push	{r7, lr}
 80174bc:	b082      	sub	sp, #8
 80174be:	af00      	add	r7, sp, #0
 80174c0:	0002      	movs	r2, r0
 80174c2:	1dfb      	adds	r3, r7, #7
 80174c4:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 80174c6:	1dfb      	adds	r3, r7, #7
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	0018      	movs	r0, r3
 80174cc:	f000 fe0a 	bl	80180e4 <USBPD_HW_IF_EnableRX>
}
 80174d0:	46c0      	nop			; (mov r8, r8)
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b002      	add	sp, #8
 80174d6:	bd80      	pop	{r7, pc}

080174d8 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	0002      	movs	r2, r0
 80174e0:	1dfb      	adds	r3, r7, #7
 80174e2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 80174e4:	1dfb      	adds	r3, r7, #7
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	0018      	movs	r0, r3
 80174ea:	f000 fe13 	bl	8018114 <USBPD_HW_IF_DisableRX>
}
 80174ee:	46c0      	nop			; (mov r8, r8)
 80174f0:	46bd      	mov	sp, r7
 80174f2:	b002      	add	sp, #8
 80174f4:	bd80      	pop	{r7, pc}
	...

080174f8 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80174f8:	b590      	push	{r4, r7, lr}
 80174fa:	b085      	sub	sp, #20
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	0002      	movs	r2, r0
 8017500:	6039      	str	r1, [r7, #0]
 8017502:	1dfb      	adds	r3, r7, #7
 8017504:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 8017506:	2008      	movs	r0, #8
 8017508:	183b      	adds	r3, r7, r0
 801750a:	4a2e      	ldr	r2, [pc, #184]	; (80175c4 <PHY_Rx_Completed+0xcc>)
 801750c:	6811      	ldr	r1, [r2, #0]
 801750e:	6019      	str	r1, [r3, #0]
 8017510:	8892      	ldrh	r2, [r2, #4]
 8017512:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 8017514:	240f      	movs	r4, #15
 8017516:	193b      	adds	r3, r7, r4
 8017518:	1839      	adds	r1, r7, r0
 801751a:	683a      	ldr	r2, [r7, #0]
 801751c:	188a      	adds	r2, r1, r2
 801751e:	7812      	ldrb	r2, [r2, #0]
 8017520:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8017522:	193b      	adds	r3, r7, r4
 8017524:	781b      	ldrb	r3, [r3, #0]
 8017526:	2b04      	cmp	r3, #4
 8017528:	dc02      	bgt.n	8017530 <PHY_Rx_Completed+0x38>
 801752a:	2b00      	cmp	r3, #0
 801752c:	da1d      	bge.n	801756a <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 801752e:	e040      	b.n	80175b2 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 8017530:	2b06      	cmp	r3, #6
 8017532:	d13e      	bne.n	80175b2 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8017534:	1dfb      	adds	r3, r7, #7
 8017536:	781b      	ldrb	r3, [r3, #0]
 8017538:	4a23      	ldr	r2, [pc, #140]	; (80175c8 <PHY_Rx_Completed+0xd0>)
 801753a:	00db      	lsls	r3, r3, #3
 801753c:	18d3      	adds	r3, r2, r3
 801753e:	3304      	adds	r3, #4
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	221e      	movs	r2, #30
 8017544:	4013      	ands	r3, r2
 8017546:	2b1e      	cmp	r3, #30
 8017548:	d135      	bne.n	80175b6 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 801754a:	1dfb      	adds	r3, r7, #7
 801754c:	781a      	ldrb	r2, [r3, #0]
 801754e:	491f      	ldr	r1, [pc, #124]	; (80175cc <PHY_Rx_Completed+0xd4>)
 8017550:	0013      	movs	r3, r2
 8017552:	011b      	lsls	r3, r3, #4
 8017554:	1a9b      	subs	r3, r3, r2
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	18cb      	adds	r3, r1, r3
 801755a:	331c      	adds	r3, #28
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	1dfa      	adds	r2, r7, #7
 8017560:	7812      	ldrb	r2, [r2, #0]
 8017562:	2106      	movs	r1, #6
 8017564:	0010      	movs	r0, r2
 8017566:	4798      	blx	r3
      break;
 8017568:	e025      	b.n	80175b6 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801756a:	240f      	movs	r4, #15
 801756c:	193b      	adds	r3, r7, r4
 801756e:	781b      	ldrb	r3, [r3, #0]
 8017570:	2201      	movs	r2, #1
 8017572:	409a      	lsls	r2, r3
 8017574:	0013      	movs	r3, r2
 8017576:	b2db      	uxtb	r3, r3
 8017578:	0018      	movs	r0, r3
 801757a:	1dfb      	adds	r3, r7, #7
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	4a12      	ldr	r2, [pc, #72]	; (80175c8 <PHY_Rx_Completed+0xd0>)
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	18d3      	adds	r3, r2, r3
 8017584:	3304      	adds	r3, #4
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	193a      	adds	r2, r7, r4
 801758a:	7812      	ldrb	r2, [r2, #0]
 801758c:	2101      	movs	r1, #1
 801758e:	4091      	lsls	r1, r2
 8017590:	000a      	movs	r2, r1
 8017592:	b2d2      	uxtb	r2, r2
 8017594:	4013      	ands	r3, r2
 8017596:	4298      	cmp	r0, r3
 8017598:	d10f      	bne.n	80175ba <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 801759a:	1dfb      	adds	r3, r7, #7
 801759c:	781a      	ldrb	r2, [r3, #0]
 801759e:	4b0a      	ldr	r3, [pc, #40]	; (80175c8 <PHY_Rx_Completed+0xd0>)
 80175a0:	00d2      	lsls	r2, r2, #3
 80175a2:	58d3      	ldr	r3, [r2, r3]
 80175a4:	193a      	adds	r2, r7, r4
 80175a6:	7811      	ldrb	r1, [r2, #0]
 80175a8:	1dfa      	adds	r2, r7, #7
 80175aa:	7812      	ldrb	r2, [r2, #0]
 80175ac:	0010      	movs	r0, r2
 80175ae:	4798      	blx	r3
      break;
 80175b0:	e003      	b.n	80175ba <PHY_Rx_Completed+0xc2>
      break;
 80175b2:	46c0      	nop			; (mov r8, r8)
 80175b4:	e002      	b.n	80175bc <PHY_Rx_Completed+0xc4>
      break;
 80175b6:	46c0      	nop			; (mov r8, r8)
 80175b8:	e000      	b.n	80175bc <PHY_Rx_Completed+0xc4>
      break;
 80175ba:	46c0      	nop			; (mov r8, r8)
  }
}
 80175bc:	46c0      	nop			; (mov r8, r8)
 80175be:	46bd      	mov	sp, r7
 80175c0:	b005      	add	sp, #20
 80175c2:	bd90      	pop	{r4, r7, pc}
 80175c4:	0802a064 	.word	0x0802a064
 80175c8:	20000a6c 	.word	0x20000a6c
 80175cc:	20000a74 	.word	0x20000a74

080175d0 <LL_AHB1_GRP1_EnableClock>:
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b084      	sub	sp, #16
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80175d8:	4b07      	ldr	r3, [pc, #28]	; (80175f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80175da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80175dc:	4b06      	ldr	r3, [pc, #24]	; (80175f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80175de:	687a      	ldr	r2, [r7, #4]
 80175e0:	430a      	orrs	r2, r1
 80175e2:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80175e4:	4b04      	ldr	r3, [pc, #16]	; (80175f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80175e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175e8:	687a      	ldr	r2, [r7, #4]
 80175ea:	4013      	ands	r3, r2
 80175ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80175ee:	68fb      	ldr	r3, [r7, #12]
}
 80175f0:	46c0      	nop			; (mov r8, r8)
 80175f2:	46bd      	mov	sp, r7
 80175f4:	b004      	add	sp, #16
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	40021000 	.word	0x40021000

080175fc <LL_APB1_GRP1_EnableClock>:
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8017604:	4b07      	ldr	r3, [pc, #28]	; (8017624 <LL_APB1_GRP1_EnableClock+0x28>)
 8017606:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8017608:	4b06      	ldr	r3, [pc, #24]	; (8017624 <LL_APB1_GRP1_EnableClock+0x28>)
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	430a      	orrs	r2, r1
 801760e:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8017610:	4b04      	ldr	r3, [pc, #16]	; (8017624 <LL_APB1_GRP1_EnableClock+0x28>)
 8017612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	4013      	ands	r3, r2
 8017618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801761a:	68fb      	ldr	r3, [r7, #12]
}
 801761c:	46c0      	nop			; (mov r8, r8)
 801761e:	46bd      	mov	sp, r7
 8017620:	b004      	add	sp, #16
 8017622:	bd80      	pop	{r7, pc}
 8017624:	40021000 	.word	0x40021000

08017628 <LL_APB2_GRP1_EnableClock>:
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8017630:	4b07      	ldr	r3, [pc, #28]	; (8017650 <LL_APB2_GRP1_EnableClock+0x28>)
 8017632:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8017634:	4b06      	ldr	r3, [pc, #24]	; (8017650 <LL_APB2_GRP1_EnableClock+0x28>)
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	430a      	orrs	r2, r1
 801763a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 801763c:	4b04      	ldr	r3, [pc, #16]	; (8017650 <LL_APB2_GRP1_EnableClock+0x28>)
 801763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017640:	687a      	ldr	r2, [r7, #4]
 8017642:	4013      	ands	r3, r2
 8017644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8017646:	68fb      	ldr	r3, [r7, #12]
}
 8017648:	46c0      	nop			; (mov r8, r8)
 801764a:	46bd      	mov	sp, r7
 801764c:	b004      	add	sp, #16
 801764e:	bd80      	pop	{r7, pc}
 8017650:	40021000 	.word	0x40021000

08017654 <LL_UCPD_Enable>:
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2280      	movs	r2, #128	; 0x80
 8017662:	0612      	lsls	r2, r2, #24
 8017664:	431a      	orrs	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	601a      	str	r2, [r3, #0]
}
 801766a:	46c0      	nop			; (mov r8, r8)
 801766c:	46bd      	mov	sp, r7
 801766e:	b002      	add	sp, #8
 8017670:	bd80      	pop	{r7, pc}

08017672 <LL_UCPD_Disable>:
{
 8017672:	b580      	push	{r7, lr}
 8017674:	b082      	sub	sp, #8
 8017676:	af00      	add	r7, sp, #0
 8017678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	005b      	lsls	r3, r3, #1
 8017680:	085a      	lsrs	r2, r3, #1
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	601a      	str	r2, [r3, #0]
}
 8017686:	46c0      	nop			; (mov r8, r8)
 8017688:	46bd      	mov	sp, r7
 801768a:	b002      	add	sp, #8
 801768c:	bd80      	pop	{r7, pc}
	...

08017690 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b082      	sub	sp, #8
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	68db      	ldr	r3, [r3, #12]
 801769c:	4a03      	ldr	r2, [pc, #12]	; (80176ac <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 801769e:	401a      	ands	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	60da      	str	r2, [r3, #12]
}
 80176a4:	46c0      	nop			; (mov r8, r8)
 80176a6:	46bd      	mov	sp, r7
 80176a8:	b002      	add	sp, #8
 80176aa:	bd80      	pop	{r7, pc}
 80176ac:	ffdfffff 	.word	0xffdfffff

080176b0 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	2280      	movs	r2, #128	; 0x80
 80176be:	0392      	lsls	r2, r2, #14
 80176c0:	431a      	orrs	r2, r3
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	60da      	str	r2, [r3, #12]
}
 80176c6:	46c0      	nop			; (mov r8, r8)
 80176c8:	46bd      	mov	sp, r7
 80176ca:	b002      	add	sp, #8
 80176cc:	bd80      	pop	{r7, pc}
	...

080176d0 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b082      	sub	sp, #8
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	68db      	ldr	r3, [r3, #12]
 80176dc:	4a03      	ldr	r2, [pc, #12]	; (80176ec <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 80176de:	401a      	ands	r2, r3
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	60da      	str	r2, [r3, #12]
}
 80176e4:	46c0      	nop			; (mov r8, r8)
 80176e6:	46bd      	mov	sp, r7
 80176e8:	b002      	add	sp, #8
 80176ea:	bd80      	pop	{r7, pc}
 80176ec:	ffefffff 	.word	0xffefffff

080176f0 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b082      	sub	sp, #8
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	68db      	ldr	r3, [r3, #12]
 80176fc:	2280      	movs	r2, #128	; 0x80
 80176fe:	0352      	lsls	r2, r2, #13
 8017700:	431a      	orrs	r2, r3
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	60da      	str	r2, [r3, #12]
}
 8017706:	46c0      	nop			; (mov r8, r8)
 8017708:	46bd      	mov	sp, r7
 801770a:	b002      	add	sp, #8
 801770c:	bd80      	pop	{r7, pc}

0801770e <LL_UCPD_SignalFRSTX>:
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b082      	sub	sp, #8
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	68db      	ldr	r3, [r3, #12]
 801771a:	2280      	movs	r2, #128	; 0x80
 801771c:	0292      	lsls	r2, r2, #10
 801771e:	431a      	orrs	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	60da      	str	r2, [r3, #12]
}
 8017724:	46c0      	nop			; (mov r8, r8)
 8017726:	46bd      	mov	sp, r7
 8017728:	b002      	add	sp, #8
 801772a:	bd80      	pop	{r7, pc}

0801772c <LL_UCPD_FRSDetectionEnable>:
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	68db      	ldr	r3, [r3, #12]
 8017738:	2280      	movs	r2, #128	; 0x80
 801773a:	0252      	lsls	r2, r2, #9
 801773c:	431a      	orrs	r2, r3
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	60da      	str	r2, [r3, #12]
}
 8017742:	46c0      	nop			; (mov r8, r8)
 8017744:	46bd      	mov	sp, r7
 8017746:	b002      	add	sp, #8
 8017748:	bd80      	pop	{r7, pc}
	...

0801774c <LL_UCPD_FRSDetectionDisable>:
{
 801774c:	b580      	push	{r7, lr}
 801774e:	b082      	sub	sp, #8
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	4a03      	ldr	r2, [pc, #12]	; (8017768 <LL_UCPD_FRSDetectionDisable+0x1c>)
 801775a:	401a      	ands	r2, r3
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	60da      	str	r2, [r3, #12]
}
 8017760:	46c0      	nop			; (mov r8, r8)
 8017762:	46bd      	mov	sp, r7
 8017764:	b002      	add	sp, #8
 8017766:	bd80      	pop	{r7, pc}
 8017768:	fffeffff 	.word	0xfffeffff

0801776c <LL_UCPD_SetccEnable>:
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b082      	sub	sp, #8
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
 8017774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	68db      	ldr	r3, [r3, #12]
 801777a:	4a05      	ldr	r2, [pc, #20]	; (8017790 <LL_UCPD_SetccEnable+0x24>)
 801777c:	401a      	ands	r2, r3
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	431a      	orrs	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	60da      	str	r2, [r3, #12]
}
 8017786:	46c0      	nop			; (mov r8, r8)
 8017788:	46bd      	mov	sp, r7
 801778a:	b002      	add	sp, #8
 801778c:	bd80      	pop	{r7, pc}
 801778e:	46c0      	nop			; (mov r8, r8)
 8017790:	fffff3ff 	.word	0xfffff3ff

08017794 <LL_UCPD_SetSNKRole>:
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b082      	sub	sp, #8
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	68db      	ldr	r3, [r3, #12]
 80177a0:	2280      	movs	r2, #128	; 0x80
 80177a2:	0092      	lsls	r2, r2, #2
 80177a4:	431a      	orrs	r2, r3
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	60da      	str	r2, [r3, #12]
}
 80177aa:	46c0      	nop			; (mov r8, r8)
 80177ac:	46bd      	mov	sp, r7
 80177ae:	b002      	add	sp, #8
 80177b0:	bd80      	pop	{r7, pc}
	...

080177b4 <LL_UCPD_SetSRCRole>:
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	4a03      	ldr	r2, [pc, #12]	; (80177d0 <LL_UCPD_SetSRCRole+0x1c>)
 80177c2:	401a      	ands	r2, r3
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	60da      	str	r2, [r3, #12]
}
 80177c8:	46c0      	nop			; (mov r8, r8)
 80177ca:	46bd      	mov	sp, r7
 80177cc:	b002      	add	sp, #8
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	fffffdff 	.word	0xfffffdff

080177d4 <LL_UCPD_SetRpResistor>:
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	68db      	ldr	r3, [r3, #12]
 80177e2:	4a05      	ldr	r2, [pc, #20]	; (80177f8 <LL_UCPD_SetRpResistor+0x24>)
 80177e4:	401a      	ands	r2, r3
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	431a      	orrs	r2, r3
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	60da      	str	r2, [r3, #12]
}
 80177ee:	46c0      	nop			; (mov r8, r8)
 80177f0:	46bd      	mov	sp, r7
 80177f2:	b002      	add	sp, #8
 80177f4:	bd80      	pop	{r7, pc}
 80177f6:	46c0      	nop			; (mov r8, r8)
 80177f8:	fffffe7f 	.word	0xfffffe7f

080177fc <LL_UCPD_SetCCPin>:
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b082      	sub	sp, #8
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	2240      	movs	r2, #64	; 0x40
 801780c:	4393      	bics	r3, r2
 801780e:	001a      	movs	r2, r3
 8017810:	683b      	ldr	r3, [r7, #0]
 8017812:	431a      	orrs	r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	60da      	str	r2, [r3, #12]
}
 8017818:	46c0      	nop			; (mov r8, r8)
 801781a:	46bd      	mov	sp, r7
 801781c:	b002      	add	sp, #8
 801781e:	bd80      	pop	{r7, pc}

08017820 <LL_UCPD_RxEnable>:
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b082      	sub	sp, #8
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	2220      	movs	r2, #32
 801782e:	431a      	orrs	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	60da      	str	r2, [r3, #12]
}
 8017834:	46c0      	nop			; (mov r8, r8)
 8017836:	46bd      	mov	sp, r7
 8017838:	b002      	add	sp, #8
 801783a:	bd80      	pop	{r7, pc}

0801783c <LL_UCPD_RxDisable>:
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	68db      	ldr	r3, [r3, #12]
 8017848:	2220      	movs	r2, #32
 801784a:	4393      	bics	r3, r2
 801784c:	001a      	movs	r2, r3
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	60da      	str	r2, [r3, #12]
}
 8017852:	46c0      	nop			; (mov r8, r8)
 8017854:	46bd      	mov	sp, r7
 8017856:	b002      	add	sp, #8
 8017858:	bd80      	pop	{r7, pc}

0801785a <LL_UCPD_SetRxMode>:
{
 801785a:	b580      	push	{r7, lr}
 801785c:	b082      	sub	sp, #8
 801785e:	af00      	add	r7, sp, #0
 8017860:	6078      	str	r0, [r7, #4]
 8017862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	68db      	ldr	r3, [r3, #12]
 8017868:	2210      	movs	r2, #16
 801786a:	4393      	bics	r3, r2
 801786c:	001a      	movs	r2, r3
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	431a      	orrs	r2, r3
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	60da      	str	r2, [r3, #12]
}
 8017876:	46c0      	nop			; (mov r8, r8)
 8017878:	46bd      	mov	sp, r7
 801787a:	b002      	add	sp, #8
 801787c:	bd80      	pop	{r7, pc}

0801787e <LL_UCPD_SendHardReset>:
{
 801787e:	b580      	push	{r7, lr}
 8017880:	b082      	sub	sp, #8
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	68db      	ldr	r3, [r3, #12]
 801788a:	2208      	movs	r2, #8
 801788c:	431a      	orrs	r2, r3
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	60da      	str	r2, [r3, #12]
}
 8017892:	46c0      	nop			; (mov r8, r8)
 8017894:	46bd      	mov	sp, r7
 8017896:	b002      	add	sp, #8
 8017898:	bd80      	pop	{r7, pc}

0801789a <LL_UCPD_SendMessage>:
{
 801789a:	b580      	push	{r7, lr}
 801789c:	b082      	sub	sp, #8
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	68db      	ldr	r3, [r3, #12]
 80178a6:	2204      	movs	r2, #4
 80178a8:	431a      	orrs	r2, r3
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	60da      	str	r2, [r3, #12]
}
 80178ae:	46c0      	nop			; (mov r8, r8)
 80178b0:	46bd      	mov	sp, r7
 80178b2:	b002      	add	sp, #8
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <LL_UCPD_SetTxMode>:
{
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b082      	sub	sp, #8
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	6078      	str	r0, [r7, #4]
 80178be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	68db      	ldr	r3, [r3, #12]
 80178c4:	2203      	movs	r2, #3
 80178c6:	4393      	bics	r3, r2
 80178c8:	001a      	movs	r2, r3
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	431a      	orrs	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	60da      	str	r2, [r3, #12]
}
 80178d2:	46c0      	nop			; (mov r8, r8)
 80178d4:	46bd      	mov	sp, r7
 80178d6:	b002      	add	sp, #8
 80178d8:	bd80      	pop	{r7, pc}

080178da <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 80178da:	b580      	push	{r7, lr}
 80178dc:	b082      	sub	sp, #8
 80178de:	af00      	add	r7, sp, #0
 80178e0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	2280      	movs	r2, #128	; 0x80
 80178e8:	05d2      	lsls	r2, r2, #23
 80178ea:	431a      	orrs	r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	601a      	str	r2, [r3, #0]
}
 80178f0:	46c0      	nop			; (mov r8, r8)
 80178f2:	46bd      	mov	sp, r7
 80178f4:	b002      	add	sp, #8
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	4a03      	ldr	r2, [pc, #12]	; (8017914 <LL_UCPD_RxDMADisable+0x1c>)
 8017906:	401a      	ands	r2, r3
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	601a      	str	r2, [r3, #0]
}
 801790c:	46c0      	nop			; (mov r8, r8)
 801790e:	46bd      	mov	sp, r7
 8017910:	b002      	add	sp, #8
 8017912:	bd80      	pop	{r7, pc}
 8017914:	bfffffff 	.word	0xbfffffff

08017918 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b082      	sub	sp, #8
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	2280      	movs	r2, #128	; 0x80
 8017926:	0592      	lsls	r2, r2, #22
 8017928:	431a      	orrs	r2, r3
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	601a      	str	r2, [r3, #0]
}
 801792e:	46c0      	nop			; (mov r8, r8)
 8017930:	46bd      	mov	sp, r7
 8017932:	b002      	add	sp, #8
 8017934:	bd80      	pop	{r7, pc}
	...

08017938 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b082      	sub	sp, #8
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	4a03      	ldr	r2, [pc, #12]	; (8017954 <LL_UCPD_TxDMADisable+0x1c>)
 8017946:	401a      	ands	r2, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	601a      	str	r2, [r3, #0]
}
 801794c:	46c0      	nop			; (mov r8, r8)
 801794e:	46bd      	mov	sp, r7
 8017950:	b002      	add	sp, #8
 8017952:	bd80      	pop	{r7, pc}
 8017954:	dfffffff 	.word	0xdfffffff

08017958 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	683a      	ldr	r2, [r7, #0]
 8017966:	61da      	str	r2, [r3, #28]
}
 8017968:	46c0      	nop			; (mov r8, r8)
 801796a:	46bd      	mov	sp, r7
 801796c:	b002      	add	sp, #8
 801796e:	bd80      	pop	{r7, pc}

08017970 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	683a      	ldr	r2, [r7, #0]
 801797e:	621a      	str	r2, [r3, #32]
}
 8017980:	46c0      	nop			; (mov r8, r8)
 8017982:	46bd      	mov	sp, r7
 8017984:	b002      	add	sp, #8
 8017986:	bd80      	pop	{r7, pc}

08017988 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8017988:	b580      	push	{r7, lr}
 801798a:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 801798c:	2380      	movs	r3, #128	; 0x80
 801798e:	055b      	lsls	r3, r3, #21
 8017990:	0018      	movs	r0, r3
 8017992:	f7ff fe33 	bl	80175fc <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8017996:	2380      	movs	r3, #128	; 0x80
 8017998:	015b      	lsls	r3, r3, #5
 801799a:	0018      	movs	r0, r3
 801799c:	f7ff fe18 	bl	80175d0 <LL_AHB1_GRP1_EnableClock>
}
 80179a0:	46c0      	nop			; (mov r8, r8)
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}
	...

080179a8 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	0002      	movs	r2, r0
 80179b0:	1dfb      	adds	r3, r7, #7
 80179b2:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 80179b4:	1dfb      	adds	r3, r7, #7
 80179b6:	781a      	ldrb	r2, [r3, #0]
 80179b8:	4916      	ldr	r1, [pc, #88]	; (8017a14 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80179ba:	0013      	movs	r3, r2
 80179bc:	011b      	lsls	r3, r3, #4
 80179be:	1a9b      	subs	r3, r3, r2
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	585b      	ldr	r3, [r3, r1]
 80179c4:	68db      	ldr	r3, [r3, #12]
 80179c6:	2207      	movs	r2, #7
 80179c8:	4393      	bics	r3, r2
 80179ca:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 80179cc:	1dfb      	adds	r3, r7, #7
 80179ce:	781a      	ldrb	r2, [r3, #0]
 80179d0:	4910      	ldr	r1, [pc, #64]	; (8017a14 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80179d2:	0013      	movs	r3, r2
 80179d4:	011b      	lsls	r3, r3, #4
 80179d6:	1a9b      	subs	r3, r3, r2
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	585b      	ldr	r3, [r3, r1]
 80179dc:	0018      	movs	r0, r3
 80179de:	f7ff fe48 	bl	8017672 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 80179e2:	1dfb      	adds	r3, r7, #7
 80179e4:	781a      	ldrb	r2, [r3, #0]
 80179e6:	490b      	ldr	r1, [pc, #44]	; (8017a14 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80179e8:	0013      	movs	r3, r2
 80179ea:	011b      	lsls	r3, r3, #4
 80179ec:	1a9b      	subs	r3, r3, r2
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	585b      	ldr	r3, [r3, r1]
 80179f2:	0018      	movs	r0, r3
 80179f4:	f7ff fe2e 	bl	8017654 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 80179f8:	1dfb      	adds	r3, r7, #7
 80179fa:	781a      	ldrb	r2, [r3, #0]
 80179fc:	4905      	ldr	r1, [pc, #20]	; (8017a14 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 80179fe:	0013      	movs	r3, r2
 8017a00:	011b      	lsls	r3, r3, #4
 8017a02:	1a9b      	subs	r3, r3, r2
 8017a04:	009b      	lsls	r3, r3, #2
 8017a06:	585b      	ldr	r3, [r3, r1]
 8017a08:	68fa      	ldr	r2, [r7, #12]
 8017a0a:	60da      	str	r2, [r3, #12]
}
 8017a0c:	46c0      	nop			; (mov r8, r8)
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	b004      	add	sp, #16
 8017a12:	bd80      	pop	{r7, pc}
 8017a14:	20000a74 	.word	0x20000a74

08017a18 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8017a18:	b590      	push	{r4, r7, lr}
 8017a1a:	b08b      	sub	sp, #44	; 0x2c
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	60ba      	str	r2, [r7, #8]
 8017a20:	607b      	str	r3, [r7, #4]
 8017a22:	240f      	movs	r4, #15
 8017a24:	193b      	adds	r3, r7, r4
 8017a26:	1c02      	adds	r2, r0, #0
 8017a28:	701a      	strb	r2, [r3, #0]
 8017a2a:	200e      	movs	r0, #14
 8017a2c:	183b      	adds	r3, r7, r0
 8017a2e:	1c0a      	adds	r2, r1, #0
 8017a30:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8017a32:	2327      	movs	r3, #39	; 0x27
 8017a34:	18fb      	adds	r3, r7, r3
 8017a36:	2200      	movs	r2, #0
 8017a38:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8017a3a:	183b      	adds	r3, r7, r0
 8017a3c:	781b      	ldrb	r3, [r3, #0]
 8017a3e:	2b05      	cmp	r3, #5
 8017a40:	d10b      	bne.n	8017a5a <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8017a42:	193b      	adds	r3, r7, r4
 8017a44:	781a      	ldrb	r2, [r3, #0]
 8017a46:	499e      	ldr	r1, [pc, #632]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017a48:	0013      	movs	r3, r2
 8017a4a:	011b      	lsls	r3, r3, #4
 8017a4c:	1a9b      	subs	r3, r3, r2
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	585b      	ldr	r3, [r3, r1]
 8017a52:	0018      	movs	r0, r3
 8017a54:	f7ff ff13 	bl	801787e <LL_UCPD_SendHardReset>
 8017a58:	e12a      	b.n	8017cb0 <USBPD_HW_IF_SendBuffer+0x298>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8017a5e:	61fb      	str	r3, [r7, #28]
  return(result);
 8017a60:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8017a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017a64:	b672      	cpsid	i
}
 8017a66:	46c0      	nop			; (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8017a68:	240f      	movs	r4, #15
 8017a6a:	193b      	adds	r3, r7, r4
 8017a6c:	781a      	ldrb	r2, [r3, #0]
 8017a6e:	4994      	ldr	r1, [pc, #592]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017a70:	2038      	movs	r0, #56	; 0x38
 8017a72:	0013      	movs	r3, r2
 8017a74:	011b      	lsls	r3, r3, #4
 8017a76:	1a9b      	subs	r3, r3, r2
 8017a78:	009b      	lsls	r3, r3, #2
 8017a7a:	18cb      	adds	r3, r1, r3
 8017a7c:	181b      	adds	r3, r3, r0
 8017a7e:	781b      	ldrb	r3, [r3, #0]
 8017a80:	b2db      	uxtb	r3, r3
 8017a82:	2b01      	cmp	r3, #1
 8017a84:	d00e      	beq.n	8017aa4 <USBPD_HW_IF_SendBuffer+0x8c>
 8017a86:	193b      	adds	r3, r7, r4
 8017a88:	781a      	ldrb	r2, [r3, #0]
 8017a8a:	498d      	ldr	r1, [pc, #564]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017a8c:	0013      	movs	r3, r2
 8017a8e:	011b      	lsls	r3, r3, #4
 8017a90:	1a9b      	subs	r3, r3, r2
 8017a92:	009b      	lsls	r3, r3, #2
 8017a94:	18cb      	adds	r3, r1, r3
 8017a96:	3304      	adds	r3, #4
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	4013      	ands	r3, r2
 8017aa0:	2b01      	cmp	r3, #1
 8017aa2:	d10a      	bne.n	8017aba <USBPD_HW_IF_SendBuffer+0xa2>
 8017aa4:	6a3b      	ldr	r3, [r7, #32]
 8017aa6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aa8:	69bb      	ldr	r3, [r7, #24]
 8017aaa:	f383 8810 	msr	PRIMASK, r3
}
 8017aae:	46c0      	nop			; (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8017ab0:	2327      	movs	r3, #39	; 0x27
 8017ab2:	18fb      	adds	r3, r7, r3
 8017ab4:	2202      	movs	r2, #2
 8017ab6:	701a      	strb	r2, [r3, #0]
 8017ab8:	e0fa      	b.n	8017cb0 <USBPD_HW_IF_SendBuffer+0x298>
 8017aba:	6a3b      	ldr	r3, [r7, #32]
 8017abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	f383 8810 	msr	PRIMASK, r3
}
 8017ac4:	46c0      	nop			; (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8017ac6:	230e      	movs	r3, #14
 8017ac8:	18fb      	adds	r3, r7, r3
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	2b07      	cmp	r3, #7
 8017ace:	d871      	bhi.n	8017bb4 <USBPD_HW_IF_SendBuffer+0x19c>
 8017ad0:	009a      	lsls	r2, r3, #2
 8017ad2:	4b7c      	ldr	r3, [pc, #496]	; (8017cc4 <USBPD_HW_IF_SendBuffer+0x2ac>)
 8017ad4:	18d3      	adds	r3, r2, r3
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8017ada:	240f      	movs	r4, #15
 8017adc:	193b      	adds	r3, r7, r4
 8017ade:	781a      	ldrb	r2, [r3, #0]
 8017ae0:	4977      	ldr	r1, [pc, #476]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017ae2:	0013      	movs	r3, r2
 8017ae4:	011b      	lsls	r3, r3, #4
 8017ae6:	1a9b      	subs	r3, r3, r2
 8017ae8:	009b      	lsls	r3, r3, #2
 8017aea:	585b      	ldr	r3, [r3, r1]
 8017aec:	4a76      	ldr	r2, [pc, #472]	; (8017cc8 <USBPD_HW_IF_SendBuffer+0x2b0>)
 8017aee:	0011      	movs	r1, r2
 8017af0:	0018      	movs	r0, r3
 8017af2:	f7ff ff31 	bl	8017958 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017af6:	193b      	adds	r3, r7, r4
 8017af8:	781a      	ldrb	r2, [r3, #0]
 8017afa:	4971      	ldr	r1, [pc, #452]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017afc:	0013      	movs	r3, r2
 8017afe:	011b      	lsls	r3, r3, #4
 8017b00:	1a9b      	subs	r3, r3, r2
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	585b      	ldr	r3, [r3, r1]
 8017b06:	2100      	movs	r1, #0
 8017b08:	0018      	movs	r0, r3
 8017b0a:	f7ff fed4 	bl	80178b6 <LL_UCPD_SetTxMode>
          break;
 8017b0e:	e056      	b.n	8017bbe <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8017b10:	240f      	movs	r4, #15
 8017b12:	193b      	adds	r3, r7, r4
 8017b14:	781a      	ldrb	r2, [r3, #0]
 8017b16:	496a      	ldr	r1, [pc, #424]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017b18:	0013      	movs	r3, r2
 8017b1a:	011b      	lsls	r3, r3, #4
 8017b1c:	1a9b      	subs	r3, r3, r2
 8017b1e:	009b      	lsls	r3, r3, #2
 8017b20:	585b      	ldr	r3, [r3, r1]
 8017b22:	4a6a      	ldr	r2, [pc, #424]	; (8017ccc <USBPD_HW_IF_SendBuffer+0x2b4>)
 8017b24:	0011      	movs	r1, r2
 8017b26:	0018      	movs	r0, r3
 8017b28:	f7ff ff16 	bl	8017958 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017b2c:	193b      	adds	r3, r7, r4
 8017b2e:	781a      	ldrb	r2, [r3, #0]
 8017b30:	4963      	ldr	r1, [pc, #396]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017b32:	0013      	movs	r3, r2
 8017b34:	011b      	lsls	r3, r3, #4
 8017b36:	1a9b      	subs	r3, r3, r2
 8017b38:	009b      	lsls	r3, r3, #2
 8017b3a:	585b      	ldr	r3, [r3, r1]
 8017b3c:	2100      	movs	r1, #0
 8017b3e:	0018      	movs	r0, r3
 8017b40:	f7ff feb9 	bl	80178b6 <LL_UCPD_SetTxMode>
          break;
 8017b44:	e03b      	b.n	8017bbe <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8017b46:	240f      	movs	r4, #15
 8017b48:	193b      	adds	r3, r7, r4
 8017b4a:	781a      	ldrb	r2, [r3, #0]
 8017b4c:	495c      	ldr	r1, [pc, #368]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017b4e:	0013      	movs	r3, r2
 8017b50:	011b      	lsls	r3, r3, #4
 8017b52:	1a9b      	subs	r3, r3, r2
 8017b54:	009b      	lsls	r3, r3, #2
 8017b56:	585b      	ldr	r3, [r3, r1]
 8017b58:	4a5d      	ldr	r2, [pc, #372]	; (8017cd0 <USBPD_HW_IF_SendBuffer+0x2b8>)
 8017b5a:	0011      	movs	r1, r2
 8017b5c:	0018      	movs	r0, r3
 8017b5e:	f7ff fefb 	bl	8017958 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8017b62:	193b      	adds	r3, r7, r4
 8017b64:	781a      	ldrb	r2, [r3, #0]
 8017b66:	4956      	ldr	r1, [pc, #344]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017b68:	0013      	movs	r3, r2
 8017b6a:	011b      	lsls	r3, r3, #4
 8017b6c:	1a9b      	subs	r3, r3, r2
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	585b      	ldr	r3, [r3, r1]
 8017b72:	2100      	movs	r1, #0
 8017b74:	0018      	movs	r0, r3
 8017b76:	f7ff fe9e 	bl	80178b6 <LL_UCPD_SetTxMode>
          break;
 8017b7a:	e020      	b.n	8017bbe <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8017b7c:	230f      	movs	r3, #15
 8017b7e:	18fb      	adds	r3, r7, r3
 8017b80:	781a      	ldrb	r2, [r3, #0]
 8017b82:	494f      	ldr	r1, [pc, #316]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017b84:	0013      	movs	r3, r2
 8017b86:	011b      	lsls	r3, r3, #4
 8017b88:	1a9b      	subs	r3, r3, r2
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	585b      	ldr	r3, [r3, r1]
 8017b8e:	2101      	movs	r1, #1
 8017b90:	0018      	movs	r0, r3
 8017b92:	f7ff fe90 	bl	80178b6 <LL_UCPD_SetTxMode>
          break;
 8017b96:	e012      	b.n	8017bbe <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8017b98:	230f      	movs	r3, #15
 8017b9a:	18fb      	adds	r3, r7, r3
 8017b9c:	781a      	ldrb	r2, [r3, #0]
 8017b9e:	4948      	ldr	r1, [pc, #288]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017ba0:	0013      	movs	r3, r2
 8017ba2:	011b      	lsls	r3, r3, #4
 8017ba4:	1a9b      	subs	r3, r3, r2
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	585b      	ldr	r3, [r3, r1]
 8017baa:	2102      	movs	r1, #2
 8017bac:	0018      	movs	r0, r3
 8017bae:	f7ff fe82 	bl	80178b6 <LL_UCPD_SetTxMode>
          break;
 8017bb2:	e004      	b.n	8017bbe <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 8017bb4:	2327      	movs	r3, #39	; 0x27
 8017bb6:	18fb      	adds	r3, r7, r3
 8017bb8:	2202      	movs	r2, #2
 8017bba:	701a      	strb	r2, [r3, #0]
          break;
 8017bbc:	46c0      	nop			; (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8017bbe:	2327      	movs	r3, #39	; 0x27
 8017bc0:	18fb      	adds	r3, r7, r3
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d173      	bne.n	8017cb0 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8017bc8:	200f      	movs	r0, #15
 8017bca:	183b      	adds	r3, r7, r0
 8017bcc:	781a      	ldrb	r2, [r3, #0]
 8017bce:	493c      	ldr	r1, [pc, #240]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017bd0:	0013      	movs	r3, r2
 8017bd2:	011b      	lsls	r3, r3, #4
 8017bd4:	1a9b      	subs	r3, r3, r2
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	18cb      	adds	r3, r1, r3
 8017bda:	3304      	adds	r3, #4
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	6819      	ldr	r1, [r3, #0]
 8017be0:	183b      	adds	r3, r7, r0
 8017be2:	781a      	ldrb	r2, [r3, #0]
 8017be4:	4836      	ldr	r0, [pc, #216]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017be6:	0013      	movs	r3, r2
 8017be8:	011b      	lsls	r3, r3, #4
 8017bea:	1a9b      	subs	r3, r3, r2
 8017bec:	009b      	lsls	r3, r3, #2
 8017bee:	18c3      	adds	r3, r0, r3
 8017bf0:	3304      	adds	r3, #4
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	4391      	bics	r1, r2
 8017bf8:	000a      	movs	r2, r1
 8017bfa:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8017bfc:	46c0      	nop			; (mov r8, r8)
 8017bfe:	200f      	movs	r0, #15
 8017c00:	183b      	adds	r3, r7, r0
 8017c02:	781a      	ldrb	r2, [r3, #0]
 8017c04:	492e      	ldr	r1, [pc, #184]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c06:	0013      	movs	r3, r2
 8017c08:	011b      	lsls	r3, r3, #4
 8017c0a:	1a9b      	subs	r3, r3, r2
 8017c0c:	009b      	lsls	r3, r3, #2
 8017c0e:	18cb      	adds	r3, r1, r3
 8017c10:	3304      	adds	r3, #4
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	2201      	movs	r2, #1
 8017c18:	4013      	ands	r3, r2
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d0ef      	beq.n	8017bfe <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8017c1e:	0004      	movs	r4, r0
 8017c20:	193b      	adds	r3, r7, r4
 8017c22:	781a      	ldrb	r2, [r3, #0]
 8017c24:	4926      	ldr	r1, [pc, #152]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c26:	0013      	movs	r3, r2
 8017c28:	011b      	lsls	r3, r3, #4
 8017c2a:	1a9b      	subs	r3, r3, r2
 8017c2c:	009b      	lsls	r3, r3, #2
 8017c2e:	18cb      	adds	r3, r1, r3
 8017c30:	3304      	adds	r3, #4
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	68ba      	ldr	r2, [r7, #8]
 8017c36:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8017c38:	193b      	adds	r3, r7, r4
 8017c3a:	781a      	ldrb	r2, [r3, #0]
 8017c3c:	4920      	ldr	r1, [pc, #128]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c3e:	0013      	movs	r3, r2
 8017c40:	011b      	lsls	r3, r3, #4
 8017c42:	1a9b      	subs	r3, r3, r2
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	18cb      	adds	r3, r1, r3
 8017c48:	3304      	adds	r3, #4
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	687a      	ldr	r2, [r7, #4]
 8017c4e:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8017c50:	193b      	adds	r3, r7, r4
 8017c52:	781a      	ldrb	r2, [r3, #0]
 8017c54:	491a      	ldr	r1, [pc, #104]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c56:	0013      	movs	r3, r2
 8017c58:	011b      	lsls	r3, r3, #4
 8017c5a:	1a9b      	subs	r3, r3, r2
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	18cb      	adds	r3, r1, r3
 8017c60:	3304      	adds	r3, #4
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	6819      	ldr	r1, [r3, #0]
 8017c66:	193b      	adds	r3, r7, r4
 8017c68:	781a      	ldrb	r2, [r3, #0]
 8017c6a:	4815      	ldr	r0, [pc, #84]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c6c:	0013      	movs	r3, r2
 8017c6e:	011b      	lsls	r3, r3, #4
 8017c70:	1a9b      	subs	r3, r3, r2
 8017c72:	009b      	lsls	r3, r3, #2
 8017c74:	18c3      	adds	r3, r0, r3
 8017c76:	3304      	adds	r3, #4
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	2201      	movs	r2, #1
 8017c7c:	430a      	orrs	r2, r1
 8017c7e:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8017c80:	193b      	adds	r3, r7, r4
 8017c82:	781a      	ldrb	r2, [r3, #0]
 8017c84:	490e      	ldr	r1, [pc, #56]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017c86:	0013      	movs	r3, r2
 8017c88:	011b      	lsls	r3, r3, #4
 8017c8a:	1a9b      	subs	r3, r3, r2
 8017c8c:	009b      	lsls	r3, r3, #2
 8017c8e:	585b      	ldr	r3, [r3, r1]
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	0011      	movs	r1, r2
 8017c94:	0018      	movs	r0, r3
 8017c96:	f7ff fe6b 	bl	8017970 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8017c9a:	193b      	adds	r3, r7, r4
 8017c9c:	781a      	ldrb	r2, [r3, #0]
 8017c9e:	4908      	ldr	r1, [pc, #32]	; (8017cc0 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8017ca0:	0013      	movs	r3, r2
 8017ca2:	011b      	lsls	r3, r3, #4
 8017ca4:	1a9b      	subs	r3, r3, r2
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	585b      	ldr	r3, [r3, r1]
 8017caa:	0018      	movs	r0, r3
 8017cac:	f7ff fdf5 	bl	801789a <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8017cb0:	2327      	movs	r3, #39	; 0x27
 8017cb2:	18fb      	adds	r3, r7, r3
 8017cb4:	781b      	ldrb	r3, [r3, #0]
}
 8017cb6:	0018      	movs	r0, r3
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	b00b      	add	sp, #44	; 0x2c
 8017cbc:	bd90      	pop	{r4, r7, pc}
 8017cbe:	46c0      	nop			; (mov r8, r8)
 8017cc0:	20000a74 	.word	0x20000a74
 8017cc4:	0802b064 	.word	0x0802b064
 8017cc8:	0008e318 	.word	0x0008e318
 8017ccc:	00031b18 	.word	0x00031b18
 8017cd0:	000360d8 	.word	0x000360d8

08017cd4 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	0002      	movs	r2, r0
 8017cdc:	1dfb      	adds	r3, r7, #7
 8017cde:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8017ce0:	1dfb      	adds	r3, r7, #7
 8017ce2:	781a      	ldrb	r2, [r3, #0]
 8017ce4:	490c      	ldr	r1, [pc, #48]	; (8017d18 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8017ce6:	0013      	movs	r3, r2
 8017ce8:	011b      	lsls	r3, r3, #4
 8017cea:	1a9b      	subs	r3, r3, r2
 8017cec:	009b      	lsls	r3, r3, #2
 8017cee:	585b      	ldr	r3, [r3, r1]
 8017cf0:	2102      	movs	r1, #2
 8017cf2:	0018      	movs	r0, r3
 8017cf4:	f7ff fddf 	bl	80178b6 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8017cf8:	1dfb      	adds	r3, r7, #7
 8017cfa:	781a      	ldrb	r2, [r3, #0]
 8017cfc:	4906      	ldr	r1, [pc, #24]	; (8017d18 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 8017cfe:	0013      	movs	r3, r2
 8017d00:	011b      	lsls	r3, r3, #4
 8017d02:	1a9b      	subs	r3, r3, r2
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	585b      	ldr	r3, [r3, r1]
 8017d08:	0018      	movs	r0, r3
 8017d0a:	f7ff fdc6 	bl	801789a <LL_UCPD_SendMessage>
}
 8017d0e:	46c0      	nop			; (mov r8, r8)
 8017d10:	46bd      	mov	sp, r7
 8017d12:	b002      	add	sp, #8
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	46c0      	nop			; (mov r8, r8)
 8017d18:	20000a74 	.word	0x20000a74

08017d1c <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	0002      	movs	r2, r0
 8017d24:	1dfb      	adds	r3, r7, #7
 8017d26:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8017d28:	2001      	movs	r0, #1
 8017d2a:	f7ff fc7d 	bl	8017628 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 8017d2e:	1dfb      	adds	r3, r7, #7
 8017d30:	781a      	ldrb	r2, [r3, #0]
 8017d32:	4953      	ldr	r1, [pc, #332]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017d34:	0013      	movs	r3, r2
 8017d36:	011b      	lsls	r3, r3, #4
 8017d38:	1a9b      	subs	r3, r3, r2
 8017d3a:	009b      	lsls	r3, r3, #2
 8017d3c:	18cb      	adds	r3, r1, r3
 8017d3e:	3310      	adds	r3, #16
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	789b      	ldrb	r3, [r3, #2]
 8017d44:	079b      	lsls	r3, r3, #30
 8017d46:	0f9b      	lsrs	r3, r3, #30
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	2b02      	cmp	r3, #2
 8017d4c:	d021      	beq.n	8017d92 <USBPDM1_AssertRp+0x76>
 8017d4e:	dc2f      	bgt.n	8017db0 <USBPDM1_AssertRp+0x94>
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d002      	beq.n	8017d5a <USBPDM1_AssertRp+0x3e>
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d00d      	beq.n	8017d74 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8017d58:	e02a      	b.n	8017db0 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8017d5a:	1dfb      	adds	r3, r7, #7
 8017d5c:	781a      	ldrb	r2, [r3, #0]
 8017d5e:	4948      	ldr	r1, [pc, #288]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017d60:	0013      	movs	r3, r2
 8017d62:	011b      	lsls	r3, r3, #4
 8017d64:	1a9b      	subs	r3, r3, r2
 8017d66:	009b      	lsls	r3, r3, #2
 8017d68:	585b      	ldr	r3, [r3, r1]
 8017d6a:	2180      	movs	r1, #128	; 0x80
 8017d6c:	0018      	movs	r0, r3
 8017d6e:	f7ff fd31 	bl	80177d4 <LL_UCPD_SetRpResistor>
      break;
 8017d72:	e01e      	b.n	8017db2 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8017d74:	1dfb      	adds	r3, r7, #7
 8017d76:	781a      	ldrb	r2, [r3, #0]
 8017d78:	4941      	ldr	r1, [pc, #260]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017d7a:	0013      	movs	r3, r2
 8017d7c:	011b      	lsls	r3, r3, #4
 8017d7e:	1a9b      	subs	r3, r3, r2
 8017d80:	009b      	lsls	r3, r3, #2
 8017d82:	585b      	ldr	r3, [r3, r1]
 8017d84:	2280      	movs	r2, #128	; 0x80
 8017d86:	0052      	lsls	r2, r2, #1
 8017d88:	0011      	movs	r1, r2
 8017d8a:	0018      	movs	r0, r3
 8017d8c:	f7ff fd22 	bl	80177d4 <LL_UCPD_SetRpResistor>
      break;
 8017d90:	e00f      	b.n	8017db2 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8017d92:	1dfb      	adds	r3, r7, #7
 8017d94:	781a      	ldrb	r2, [r3, #0]
 8017d96:	493a      	ldr	r1, [pc, #232]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017d98:	0013      	movs	r3, r2
 8017d9a:	011b      	lsls	r3, r3, #4
 8017d9c:	1a9b      	subs	r3, r3, r2
 8017d9e:	009b      	lsls	r3, r3, #2
 8017da0:	585b      	ldr	r3, [r3, r1]
 8017da2:	22c0      	movs	r2, #192	; 0xc0
 8017da4:	0052      	lsls	r2, r2, #1
 8017da6:	0011      	movs	r1, r2
 8017da8:	0018      	movs	r0, r3
 8017daa:	f7ff fd13 	bl	80177d4 <LL_UCPD_SetRpResistor>
      break;
 8017dae:	e000      	b.n	8017db2 <USBPDM1_AssertRp+0x96>
      break;
 8017db0:	46c0      	nop			; (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017db2:	1dfb      	adds	r3, r7, #7
 8017db4:	781a      	ldrb	r2, [r3, #0]
 8017db6:	4932      	ldr	r1, [pc, #200]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017db8:	0013      	movs	r3, r2
 8017dba:	011b      	lsls	r3, r3, #4
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	009b      	lsls	r3, r3, #2
 8017dc0:	585b      	ldr	r3, [r3, r1]
 8017dc2:	2100      	movs	r1, #0
 8017dc4:	0018      	movs	r0, r3
 8017dc6:	f7ff fcd1 	bl	801776c <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8017dca:	1dfb      	adds	r3, r7, #7
 8017dcc:	781a      	ldrb	r2, [r3, #0]
 8017dce:	492c      	ldr	r1, [pc, #176]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017dd0:	0013      	movs	r3, r2
 8017dd2:	011b      	lsls	r3, r3, #4
 8017dd4:	1a9b      	subs	r3, r3, r2
 8017dd6:	009b      	lsls	r3, r3, #2
 8017dd8:	585b      	ldr	r3, [r3, r1]
 8017dda:	0018      	movs	r0, r3
 8017ddc:	f7ff fcea 	bl	80177b4 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8017de0:	1dfb      	adds	r3, r7, #7
 8017de2:	781a      	ldrb	r2, [r3, #0]
 8017de4:	4926      	ldr	r1, [pc, #152]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017de6:	0013      	movs	r3, r2
 8017de8:	011b      	lsls	r3, r3, #4
 8017dea:	1a9b      	subs	r3, r3, r2
 8017dec:	009b      	lsls	r3, r3, #2
 8017dee:	18cb      	adds	r3, r1, r3
 8017df0:	3334      	adds	r3, #52	; 0x34
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d10e      	bne.n	8017e16 <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8017df8:	1dfb      	adds	r3, r7, #7
 8017dfa:	781a      	ldrb	r2, [r3, #0]
 8017dfc:	4920      	ldr	r1, [pc, #128]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017dfe:	0013      	movs	r3, r2
 8017e00:	011b      	lsls	r3, r3, #4
 8017e02:	1a9b      	subs	r3, r3, r2
 8017e04:	009b      	lsls	r3, r3, #2
 8017e06:	585b      	ldr	r3, [r3, r1]
 8017e08:	22c0      	movs	r2, #192	; 0xc0
 8017e0a:	0112      	lsls	r2, r2, #4
 8017e0c:	0011      	movs	r1, r2
 8017e0e:	0018      	movs	r0, r3
 8017e10:	f7ff fcac 	bl	801776c <LL_UCPD_SetccEnable>
 8017e14:	e01b      	b.n	8017e4e <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017e16:	1dfb      	adds	r3, r7, #7
 8017e18:	781a      	ldrb	r2, [r3, #0]
 8017e1a:	4919      	ldr	r1, [pc, #100]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017e1c:	0013      	movs	r3, r2
 8017e1e:	011b      	lsls	r3, r3, #4
 8017e20:	1a9b      	subs	r3, r3, r2
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8017e26:	1dfb      	adds	r3, r7, #7
 8017e28:	781a      	ldrb	r2, [r3, #0]
 8017e2a:	4915      	ldr	r1, [pc, #84]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017e2c:	0013      	movs	r3, r2
 8017e2e:	011b      	lsls	r3, r3, #4
 8017e30:	1a9b      	subs	r3, r3, r2
 8017e32:	009b      	lsls	r3, r3, #2
 8017e34:	18cb      	adds	r3, r1, r3
 8017e36:	3334      	adds	r3, #52	; 0x34
 8017e38:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d102      	bne.n	8017e44 <USBPDM1_AssertRp+0x128>
 8017e3e:	2380      	movs	r3, #128	; 0x80
 8017e40:	00db      	lsls	r3, r3, #3
 8017e42:	e001      	b.n	8017e48 <USBPDM1_AssertRp+0x12c>
 8017e44:	2380      	movs	r3, #128	; 0x80
 8017e46:	011b      	lsls	r3, r3, #4
 8017e48:	0019      	movs	r1, r3
 8017e4a:	f7ff fc8f 	bl	801776c <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8017e4e:	4b0d      	ldr	r3, [pc, #52]	; (8017e84 <USBPDM1_AssertRp+0x168>)
 8017e50:	6819      	ldr	r1, [r3, #0]
 8017e52:	1dfb      	adds	r3, r7, #7
 8017e54:	781a      	ldrb	r2, [r3, #0]
 8017e56:	480a      	ldr	r0, [pc, #40]	; (8017e80 <USBPDM1_AssertRp+0x164>)
 8017e58:	0013      	movs	r3, r2
 8017e5a:	011b      	lsls	r3, r3, #4
 8017e5c:	1a9b      	subs	r3, r3, r2
 8017e5e:	009b      	lsls	r3, r3, #2
 8017e60:	581b      	ldr	r3, [r3, r0]
 8017e62:	4a09      	ldr	r2, [pc, #36]	; (8017e88 <USBPDM1_AssertRp+0x16c>)
 8017e64:	4293      	cmp	r3, r2
 8017e66:	d102      	bne.n	8017e6e <USBPDM1_AssertRp+0x152>
 8017e68:	2380      	movs	r3, #128	; 0x80
 8017e6a:	009b      	lsls	r3, r3, #2
 8017e6c:	e001      	b.n	8017e72 <USBPDM1_AssertRp+0x156>
 8017e6e:	2380      	movs	r3, #128	; 0x80
 8017e70:	00db      	lsls	r3, r3, #3
 8017e72:	4a04      	ldr	r2, [pc, #16]	; (8017e84 <USBPDM1_AssertRp+0x168>)
 8017e74:	430b      	orrs	r3, r1
 8017e76:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 8017e78:	46c0      	nop			; (mov r8, r8)
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	b002      	add	sp, #8
 8017e7e:	bd80      	pop	{r7, pc}
 8017e80:	20000a74 	.word	0x20000a74
 8017e84:	40010000 	.word	0x40010000
 8017e88:	4000a000 	.word	0x4000a000

08017e8c <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	0002      	movs	r2, r0
 8017e94:	1dfb      	adds	r3, r7, #7
 8017e96:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8017e98:	46c0      	nop			; (mov r8, r8)
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	b002      	add	sp, #8
 8017e9e:	bd80      	pop	{r7, pc}

08017ea0 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	0002      	movs	r2, r0
 8017ea8:	1dfb      	adds	r3, r7, #7
 8017eaa:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8017eac:	1dfb      	adds	r3, r7, #7
 8017eae:	781a      	ldrb	r2, [r3, #0]
 8017eb0:	494b      	ldr	r1, [pc, #300]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017eb2:	0013      	movs	r3, r2
 8017eb4:	011b      	lsls	r3, r3, #4
 8017eb6:	1a9b      	subs	r3, r3, r2
 8017eb8:	009b      	lsls	r3, r3, #2
 8017eba:	585b      	ldr	r3, [r3, r1]
 8017ebc:	0018      	movs	r0, r3
 8017ebe:	f7ff fbf7 	bl	80176b0 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8017ec2:	1dfb      	adds	r3, r7, #7
 8017ec4:	781a      	ldrb	r2, [r3, #0]
 8017ec6:	4946      	ldr	r1, [pc, #280]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017ec8:	0013      	movs	r3, r2
 8017eca:	011b      	lsls	r3, r3, #4
 8017ecc:	1a9b      	subs	r3, r3, r2
 8017ece:	009b      	lsls	r3, r3, #2
 8017ed0:	585b      	ldr	r3, [r3, r1]
 8017ed2:	0018      	movs	r0, r3
 8017ed4:	f7ff fc0c 	bl	80176f0 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8017ed8:	2001      	movs	r0, #1
 8017eda:	f7ff fba5 	bl	8017628 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8017ede:	1dfb      	adds	r3, r7, #7
 8017ee0:	781a      	ldrb	r2, [r3, #0]
 8017ee2:	493f      	ldr	r1, [pc, #252]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017ee4:	0013      	movs	r3, r2
 8017ee6:	011b      	lsls	r3, r3, #4
 8017ee8:	1a9b      	subs	r3, r3, r2
 8017eea:	009b      	lsls	r3, r3, #2
 8017eec:	585b      	ldr	r3, [r3, r1]
 8017eee:	2100      	movs	r1, #0
 8017ef0:	0018      	movs	r0, r3
 8017ef2:	f7ff fc3b 	bl	801776c <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8017ef6:	1dfb      	adds	r3, r7, #7
 8017ef8:	781a      	ldrb	r2, [r3, #0]
 8017efa:	4939      	ldr	r1, [pc, #228]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017efc:	0013      	movs	r3, r2
 8017efe:	011b      	lsls	r3, r3, #4
 8017f00:	1a9b      	subs	r3, r3, r2
 8017f02:	009b      	lsls	r3, r3, #2
 8017f04:	585b      	ldr	r3, [r3, r1]
 8017f06:	0018      	movs	r0, r3
 8017f08:	f7ff fc44 	bl	8017794 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8017f0c:	1dfb      	adds	r3, r7, #7
 8017f0e:	781a      	ldrb	r2, [r3, #0]
 8017f10:	4933      	ldr	r1, [pc, #204]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017f12:	0013      	movs	r3, r2
 8017f14:	011b      	lsls	r3, r3, #4
 8017f16:	1a9b      	subs	r3, r3, r2
 8017f18:	009b      	lsls	r3, r3, #2
 8017f1a:	18cb      	adds	r3, r1, r3
 8017f1c:	3334      	adds	r3, #52	; 0x34
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d10e      	bne.n	8017f42 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8017f24:	1dfb      	adds	r3, r7, #7
 8017f26:	781a      	ldrb	r2, [r3, #0]
 8017f28:	492d      	ldr	r1, [pc, #180]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017f2a:	0013      	movs	r3, r2
 8017f2c:	011b      	lsls	r3, r3, #4
 8017f2e:	1a9b      	subs	r3, r3, r2
 8017f30:	009b      	lsls	r3, r3, #2
 8017f32:	585b      	ldr	r3, [r3, r1]
 8017f34:	22c0      	movs	r2, #192	; 0xc0
 8017f36:	0112      	lsls	r2, r2, #4
 8017f38:	0011      	movs	r1, r2
 8017f3a:	0018      	movs	r0, r3
 8017f3c:	f7ff fc16 	bl	801776c <LL_UCPD_SetccEnable>
 8017f40:	e01b      	b.n	8017f7a <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017f42:	1dfb      	adds	r3, r7, #7
 8017f44:	781a      	ldrb	r2, [r3, #0]
 8017f46:	4926      	ldr	r1, [pc, #152]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017f48:	0013      	movs	r3, r2
 8017f4a:	011b      	lsls	r3, r3, #4
 8017f4c:	1a9b      	subs	r3, r3, r2
 8017f4e:	009b      	lsls	r3, r3, #2
 8017f50:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8017f52:	1dfb      	adds	r3, r7, #7
 8017f54:	781a      	ldrb	r2, [r3, #0]
 8017f56:	4922      	ldr	r1, [pc, #136]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017f58:	0013      	movs	r3, r2
 8017f5a:	011b      	lsls	r3, r3, #4
 8017f5c:	1a9b      	subs	r3, r3, r2
 8017f5e:	009b      	lsls	r3, r3, #2
 8017f60:	18cb      	adds	r3, r1, r3
 8017f62:	3334      	adds	r3, #52	; 0x34
 8017f64:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d102      	bne.n	8017f70 <USBPDM1_AssertRd+0xd0>
 8017f6a:	2380      	movs	r3, #128	; 0x80
 8017f6c:	00db      	lsls	r3, r3, #3
 8017f6e:	e001      	b.n	8017f74 <USBPDM1_AssertRd+0xd4>
 8017f70:	2380      	movs	r3, #128	; 0x80
 8017f72:	011b      	lsls	r3, r3, #4
 8017f74:	0019      	movs	r1, r3
 8017f76:	f7ff fbf9 	bl	801776c <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8017f7a:	4b1a      	ldr	r3, [pc, #104]	; (8017fe4 <USBPDM1_AssertRd+0x144>)
 8017f7c:	6819      	ldr	r1, [r3, #0]
 8017f7e:	1dfb      	adds	r3, r7, #7
 8017f80:	781a      	ldrb	r2, [r3, #0]
 8017f82:	4817      	ldr	r0, [pc, #92]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017f84:	0013      	movs	r3, r2
 8017f86:	011b      	lsls	r3, r3, #4
 8017f88:	1a9b      	subs	r3, r3, r2
 8017f8a:	009b      	lsls	r3, r3, #2
 8017f8c:	581b      	ldr	r3, [r3, r0]
 8017f8e:	4a16      	ldr	r2, [pc, #88]	; (8017fe8 <USBPDM1_AssertRd+0x148>)
 8017f90:	4293      	cmp	r3, r2
 8017f92:	d102      	bne.n	8017f9a <USBPDM1_AssertRd+0xfa>
 8017f94:	2380      	movs	r3, #128	; 0x80
 8017f96:	009b      	lsls	r3, r3, #2
 8017f98:	e001      	b.n	8017f9e <USBPDM1_AssertRd+0xfe>
 8017f9a:	2380      	movs	r3, #128	; 0x80
 8017f9c:	00db      	lsls	r3, r3, #3
 8017f9e:	4a11      	ldr	r2, [pc, #68]	; (8017fe4 <USBPDM1_AssertRd+0x144>)
 8017fa0:	430b      	orrs	r3, r1
 8017fa2:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8017fa4:	2001      	movs	r0, #1
 8017fa6:	f7f4 fb81 	bl	800c6ac <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 8017faa:	1dfb      	adds	r3, r7, #7
 8017fac:	781a      	ldrb	r2, [r3, #0]
 8017fae:	490c      	ldr	r1, [pc, #48]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017fb0:	0013      	movs	r3, r2
 8017fb2:	011b      	lsls	r3, r3, #4
 8017fb4:	1a9b      	subs	r3, r3, r2
 8017fb6:	009b      	lsls	r3, r3, #2
 8017fb8:	585b      	ldr	r3, [r3, r1]
 8017fba:	0018      	movs	r0, r3
 8017fbc:	f7ff fb68 	bl	8017690 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8017fc0:	1dfb      	adds	r3, r7, #7
 8017fc2:	781a      	ldrb	r2, [r3, #0]
 8017fc4:	4906      	ldr	r1, [pc, #24]	; (8017fe0 <USBPDM1_AssertRd+0x140>)
 8017fc6:	0013      	movs	r3, r2
 8017fc8:	011b      	lsls	r3, r3, #4
 8017fca:	1a9b      	subs	r3, r3, r2
 8017fcc:	009b      	lsls	r3, r3, #2
 8017fce:	585b      	ldr	r3, [r3, r1]
 8017fd0:	0018      	movs	r0, r3
 8017fd2:	f7ff fb7d 	bl	80176d0 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8017fd6:	46c0      	nop			; (mov r8, r8)
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	b002      	add	sp, #8
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	46c0      	nop			; (mov r8, r8)
 8017fe0:	20000a74 	.word	0x20000a74
 8017fe4:	40010000 	.word	0x40010000
 8017fe8:	4000a000 	.word	0x4000a000

08017fec <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b082      	sub	sp, #8
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	0002      	movs	r2, r0
 8017ff4:	1dfb      	adds	r3, r7, #7
 8017ff6:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8017ff8:	46c0      	nop			; (mov r8, r8)
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	b002      	add	sp, #8
 8017ffe:	bd80      	pop	{r7, pc}

08018000 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	0002      	movs	r2, r0
 8018008:	1dfb      	adds	r3, r7, #7
 801800a:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 801800c:	2001      	movs	r0, #1
 801800e:	f7ff fb0b 	bl	8017628 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8018012:	1dfb      	adds	r3, r7, #7
 8018014:	781a      	ldrb	r2, [r3, #0]
 8018016:	4930      	ldr	r1, [pc, #192]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 8018018:	0013      	movs	r3, r2
 801801a:	011b      	lsls	r3, r3, #4
 801801c:	1a9b      	subs	r3, r3, r2
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	585b      	ldr	r3, [r3, r1]
 8018022:	0018      	movs	r0, r3
 8018024:	f7ff fbc6 	bl	80177b4 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8018028:	1dfb      	adds	r3, r7, #7
 801802a:	781a      	ldrb	r2, [r3, #0]
 801802c:	492a      	ldr	r1, [pc, #168]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 801802e:	0013      	movs	r3, r2
 8018030:	011b      	lsls	r3, r3, #4
 8018032:	1a9b      	subs	r3, r3, r2
 8018034:	009b      	lsls	r3, r3, #2
 8018036:	585b      	ldr	r3, [r3, r1]
 8018038:	2100      	movs	r1, #0
 801803a:	0018      	movs	r0, r3
 801803c:	f7ff fbca 	bl	80177d4 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8018040:	1dfb      	adds	r3, r7, #7
 8018042:	781a      	ldrb	r2, [r3, #0]
 8018044:	4924      	ldr	r1, [pc, #144]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 8018046:	0013      	movs	r3, r2
 8018048:	011b      	lsls	r3, r3, #4
 801804a:	1a9b      	subs	r3, r3, r2
 801804c:	009b      	lsls	r3, r3, #2
 801804e:	585b      	ldr	r3, [r3, r1]
 8018050:	2100      	movs	r1, #0
 8018052:	0018      	movs	r0, r3
 8018054:	f7ff fb8a 	bl	801776c <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8018058:	4b20      	ldr	r3, [pc, #128]	; (80180dc <USBPDM1_EnterErrorRecovery+0xdc>)
 801805a:	6819      	ldr	r1, [r3, #0]
 801805c:	1dfb      	adds	r3, r7, #7
 801805e:	781a      	ldrb	r2, [r3, #0]
 8018060:	481d      	ldr	r0, [pc, #116]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 8018062:	0013      	movs	r3, r2
 8018064:	011b      	lsls	r3, r3, #4
 8018066:	1a9b      	subs	r3, r3, r2
 8018068:	009b      	lsls	r3, r3, #2
 801806a:	581b      	ldr	r3, [r3, r0]
 801806c:	4a1c      	ldr	r2, [pc, #112]	; (80180e0 <USBPDM1_EnterErrorRecovery+0xe0>)
 801806e:	4293      	cmp	r3, r2
 8018070:	d102      	bne.n	8018078 <USBPDM1_EnterErrorRecovery+0x78>
 8018072:	2380      	movs	r3, #128	; 0x80
 8018074:	009b      	lsls	r3, r3, #2
 8018076:	e001      	b.n	801807c <USBPDM1_EnterErrorRecovery+0x7c>
 8018078:	2380      	movs	r3, #128	; 0x80
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	4a17      	ldr	r2, [pc, #92]	; (80180dc <USBPDM1_EnterErrorRecovery+0xdc>)
 801807e:	430b      	orrs	r3, r1
 8018080:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8018082:	1dfb      	adds	r3, r7, #7
 8018084:	781a      	ldrb	r2, [r3, #0]
 8018086:	4914      	ldr	r1, [pc, #80]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 8018088:	0013      	movs	r3, r2
 801808a:	011b      	lsls	r3, r3, #4
 801808c:	1a9b      	subs	r3, r3, r2
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	585b      	ldr	r3, [r3, r1]
 8018092:	0018      	movs	r0, r3
 8018094:	f7ff fbd2 	bl	801783c <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8018098:	1dfb      	adds	r3, r7, #7
 801809a:	781a      	ldrb	r2, [r3, #0]
 801809c:	490e      	ldr	r1, [pc, #56]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 801809e:	0013      	movs	r3, r2
 80180a0:	011b      	lsls	r3, r3, #4
 80180a2:	1a9b      	subs	r3, r3, r2
 80180a4:	009b      	lsls	r3, r3, #2
 80180a6:	18cb      	adds	r3, r1, r3
 80180a8:	330c      	adds	r3, #12
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	7a1b      	ldrb	r3, [r3, #8]
 80180ae:	2202      	movs	r2, #2
 80180b0:	4013      	ands	r3, r2
 80180b2:	b2db      	uxtb	r3, r3
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d00a      	beq.n	80180ce <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80180b8:	1dfb      	adds	r3, r7, #7
 80180ba:	781a      	ldrb	r2, [r3, #0]
 80180bc:	4906      	ldr	r1, [pc, #24]	; (80180d8 <USBPDM1_EnterErrorRecovery+0xd8>)
 80180be:	0013      	movs	r3, r2
 80180c0:	011b      	lsls	r3, r3, #4
 80180c2:	1a9b      	subs	r3, r3, r2
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	585b      	ldr	r3, [r3, r1]
 80180c8:	0018      	movs	r0, r3
 80180ca:	f7ff fb3f 	bl	801774c <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 80180ce:	46c0      	nop			; (mov r8, r8)
 80180d0:	46bd      	mov	sp, r7
 80180d2:	b002      	add	sp, #8
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	46c0      	nop			; (mov r8, r8)
 80180d8:	20000a74 	.word	0x20000a74
 80180dc:	40010000 	.word	0x40010000
 80180e0:	4000a000 	.word	0x4000a000

080180e4 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	0002      	movs	r2, r0
 80180ec:	1dfb      	adds	r3, r7, #7
 80180ee:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 80180f0:	1dfb      	adds	r3, r7, #7
 80180f2:	781a      	ldrb	r2, [r3, #0]
 80180f4:	4906      	ldr	r1, [pc, #24]	; (8018110 <USBPD_HW_IF_EnableRX+0x2c>)
 80180f6:	0013      	movs	r3, r2
 80180f8:	011b      	lsls	r3, r3, #4
 80180fa:	1a9b      	subs	r3, r3, r2
 80180fc:	009b      	lsls	r3, r3, #2
 80180fe:	585b      	ldr	r3, [r3, r1]
 8018100:	0018      	movs	r0, r3
 8018102:	f7ff fb8d 	bl	8017820 <LL_UCPD_RxEnable>
}
 8018106:	46c0      	nop			; (mov r8, r8)
 8018108:	46bd      	mov	sp, r7
 801810a:	b002      	add	sp, #8
 801810c:	bd80      	pop	{r7, pc}
 801810e:	46c0      	nop			; (mov r8, r8)
 8018110:	20000a74 	.word	0x20000a74

08018114 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	0002      	movs	r2, r0
 801811c:	1dfb      	adds	r3, r7, #7
 801811e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8018120:	1dfb      	adds	r3, r7, #7
 8018122:	781a      	ldrb	r2, [r3, #0]
 8018124:	4906      	ldr	r1, [pc, #24]	; (8018140 <USBPD_HW_IF_DisableRX+0x2c>)
 8018126:	0013      	movs	r3, r2
 8018128:	011b      	lsls	r3, r3, #4
 801812a:	1a9b      	subs	r3, r3, r2
 801812c:	009b      	lsls	r3, r3, #2
 801812e:	585b      	ldr	r3, [r3, r1]
 8018130:	0018      	movs	r0, r3
 8018132:	f7ff fb83 	bl	801783c <LL_UCPD_RxDisable>
}
 8018136:	46c0      	nop			; (mov r8, r8)
 8018138:	46bd      	mov	sp, r7
 801813a:	b002      	add	sp, #8
 801813c:	bd80      	pop	{r7, pc}
 801813e:	46c0      	nop			; (mov r8, r8)
 8018140:	20000a74 	.word	0x20000a74

08018144 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8018144:	b590      	push	{r4, r7, lr}
 8018146:	b085      	sub	sp, #20
 8018148:	af00      	add	r7, sp, #0
 801814a:	0002      	movs	r2, r0
 801814c:	6039      	str	r1, [r7, #0]
 801814e:	1dfb      	adds	r3, r7, #7
 8018150:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8018152:	f000 fc65 	bl	8018a20 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8018156:	1dfb      	adds	r3, r7, #7
 8018158:	781c      	ldrb	r4, [r3, #0]
 801815a:	1dfb      	adds	r3, r7, #7
 801815c:	781b      	ldrb	r3, [r3, #0]
 801815e:	0018      	movs	r0, r3
 8018160:	f7fe fd32 	bl	8016bc8 <USBPD_HW_Init_DMATxInstance>
 8018164:	0001      	movs	r1, r0
 8018166:	4aa6      	ldr	r2, [pc, #664]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018168:	0023      	movs	r3, r4
 801816a:	011b      	lsls	r3, r3, #4
 801816c:	1b1b      	subs	r3, r3, r4
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	18d3      	adds	r3, r2, r3
 8018172:	3304      	adds	r3, #4
 8018174:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 8018176:	1dfb      	adds	r3, r7, #7
 8018178:	781c      	ldrb	r4, [r3, #0]
 801817a:	1dfb      	adds	r3, r7, #7
 801817c:	781b      	ldrb	r3, [r3, #0]
 801817e:	0018      	movs	r0, r3
 8018180:	f7fe fcd2 	bl	8016b28 <USBPD_HW_Init_DMARxInstance>
 8018184:	0001      	movs	r1, r0
 8018186:	4a9e      	ldr	r2, [pc, #632]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018188:	0023      	movs	r3, r4
 801818a:	011b      	lsls	r3, r3, #4
 801818c:	1b1b      	subs	r3, r3, r4
 801818e:	009b      	lsls	r3, r3, #2
 8018190:	18d3      	adds	r3, r2, r3
 8018192:	3308      	adds	r3, #8
 8018194:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8018196:	1dfb      	adds	r3, r7, #7
 8018198:	781a      	ldrb	r2, [r3, #0]
 801819a:	4999      	ldr	r1, [pc, #612]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801819c:	0013      	movs	r3, r2
 801819e:	011b      	lsls	r3, r3, #4
 80181a0:	1a9b      	subs	r3, r3, r2
 80181a2:	009b      	lsls	r3, r3, #2
 80181a4:	585b      	ldr	r3, [r3, r1]
 80181a6:	3330      	adds	r3, #48	; 0x30
 80181a8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80181aa:	1dfb      	adds	r3, r7, #7
 80181ac:	781a      	ldrb	r2, [r3, #0]
 80181ae:	4994      	ldr	r1, [pc, #592]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80181b0:	0013      	movs	r3, r2
 80181b2:	011b      	lsls	r3, r3, #4
 80181b4:	1a9b      	subs	r3, r3, r2
 80181b6:	009b      	lsls	r3, r3, #2
 80181b8:	18cb      	adds	r3, r1, r3
 80181ba:	3308      	adds	r3, #8
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	68fa      	ldr	r2, [r7, #12]
 80181c0:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80181c2:	1dfb      	adds	r3, r7, #7
 80181c4:	781a      	ldrb	r2, [r3, #0]
 80181c6:	498e      	ldr	r1, [pc, #568]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80181c8:	0013      	movs	r3, r2
 80181ca:	011b      	lsls	r3, r3, #4
 80181cc:	1a9b      	subs	r3, r3, r2
 80181ce:	009b      	lsls	r3, r3, #2
 80181d0:	18cb      	adds	r3, r1, r3
 80181d2:	3330      	adds	r3, #48	; 0x30
 80181d4:	6818      	ldr	r0, [r3, #0]
 80181d6:	1dfb      	adds	r3, r7, #7
 80181d8:	781a      	ldrb	r2, [r3, #0]
 80181da:	4989      	ldr	r1, [pc, #548]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80181dc:	0013      	movs	r3, r2
 80181de:	011b      	lsls	r3, r3, #4
 80181e0:	1a9b      	subs	r3, r3, r2
 80181e2:	009b      	lsls	r3, r3, #2
 80181e4:	18cb      	adds	r3, r1, r3
 80181e6:	3308      	adds	r3, #8
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	0002      	movs	r2, r0
 80181ec:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80181ee:	1dfb      	adds	r3, r7, #7
 80181f0:	781a      	ldrb	r2, [r3, #0]
 80181f2:	4983      	ldr	r1, [pc, #524]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80181f4:	0013      	movs	r3, r2
 80181f6:	011b      	lsls	r3, r3, #4
 80181f8:	1a9b      	subs	r3, r3, r2
 80181fa:	009b      	lsls	r3, r3, #2
 80181fc:	18cb      	adds	r3, r1, r3
 80181fe:	3308      	adds	r3, #8
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	2284      	movs	r2, #132	; 0x84
 8018204:	0052      	lsls	r2, r2, #1
 8018206:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8018208:	1dfb      	adds	r3, r7, #7
 801820a:	781a      	ldrb	r2, [r3, #0]
 801820c:	497c      	ldr	r1, [pc, #496]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801820e:	0013      	movs	r3, r2
 8018210:	011b      	lsls	r3, r3, #4
 8018212:	1a9b      	subs	r3, r3, r2
 8018214:	009b      	lsls	r3, r3, #2
 8018216:	18cb      	adds	r3, r1, r3
 8018218:	3308      	adds	r3, #8
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	6819      	ldr	r1, [r3, #0]
 801821e:	1dfb      	adds	r3, r7, #7
 8018220:	781a      	ldrb	r2, [r3, #0]
 8018222:	4877      	ldr	r0, [pc, #476]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018224:	0013      	movs	r3, r2
 8018226:	011b      	lsls	r3, r3, #4
 8018228:	1a9b      	subs	r3, r3, r2
 801822a:	009b      	lsls	r3, r3, #2
 801822c:	18c3      	adds	r3, r0, r3
 801822e:	3308      	adds	r3, #8
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	2201      	movs	r2, #1
 8018234:	430a      	orrs	r2, r1
 8018236:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8018238:	1dfb      	adds	r3, r7, #7
 801823a:	781a      	ldrb	r2, [r3, #0]
 801823c:	4970      	ldr	r1, [pc, #448]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801823e:	0013      	movs	r3, r2
 8018240:	011b      	lsls	r3, r3, #4
 8018242:	1a9b      	subs	r3, r3, r2
 8018244:	009b      	lsls	r3, r3, #2
 8018246:	585b      	ldr	r3, [r3, r1]
 8018248:	3324      	adds	r3, #36	; 0x24
 801824a:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 801824c:	1dfb      	adds	r3, r7, #7
 801824e:	781a      	ldrb	r2, [r3, #0]
 8018250:	496b      	ldr	r1, [pc, #428]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018252:	0013      	movs	r3, r2
 8018254:	011b      	lsls	r3, r3, #4
 8018256:	1a9b      	subs	r3, r3, r2
 8018258:	009b      	lsls	r3, r3, #2
 801825a:	18cb      	adds	r3, r1, r3
 801825c:	3304      	adds	r3, #4
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	68fa      	ldr	r2, [r7, #12]
 8018262:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8018264:	1dfb      	adds	r3, r7, #7
 8018266:	781a      	ldrb	r2, [r3, #0]
 8018268:	4965      	ldr	r1, [pc, #404]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801826a:	0013      	movs	r3, r2
 801826c:	011b      	lsls	r3, r3, #4
 801826e:	1a9b      	subs	r3, r3, r2
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	585b      	ldr	r3, [r3, r1]
 8018274:	6919      	ldr	r1, [r3, #16]
 8018276:	1dfb      	adds	r3, r7, #7
 8018278:	781a      	ldrb	r2, [r3, #0]
 801827a:	4861      	ldr	r0, [pc, #388]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801827c:	0013      	movs	r3, r2
 801827e:	011b      	lsls	r3, r3, #4
 8018280:	1a9b      	subs	r3, r3, r2
 8018282:	009b      	lsls	r3, r3, #2
 8018284:	581b      	ldr	r3, [r3, r0]
 8018286:	4a5f      	ldr	r2, [pc, #380]	; (8018404 <HW_SignalAttachement+0x2c0>)
 8018288:	430a      	orrs	r2, r1
 801828a:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 801828c:	1dfb      	adds	r3, r7, #7
 801828e:	781a      	ldrb	r2, [r3, #0]
 8018290:	495b      	ldr	r1, [pc, #364]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018292:	0013      	movs	r3, r2
 8018294:	011b      	lsls	r3, r3, #4
 8018296:	1a9b      	subs	r3, r3, r2
 8018298:	009b      	lsls	r3, r3, #2
 801829a:	18cb      	adds	r3, r1, r3
 801829c:	3334      	adds	r3, #52	; 0x34
 801829e:	683a      	ldr	r2, [r7, #0]
 80182a0:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80182a2:	1dfb      	adds	r3, r7, #7
 80182a4:	781a      	ldrb	r2, [r3, #0]
 80182a6:	4956      	ldr	r1, [pc, #344]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80182a8:	0013      	movs	r3, r2
 80182aa:	011b      	lsls	r3, r3, #4
 80182ac:	1a9b      	subs	r3, r3, r2
 80182ae:	009b      	lsls	r3, r3, #2
 80182b0:	5858      	ldr	r0, [r3, r1]
 80182b2:	1dfb      	adds	r3, r7, #7
 80182b4:	781a      	ldrb	r2, [r3, #0]
 80182b6:	4952      	ldr	r1, [pc, #328]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80182b8:	0013      	movs	r3, r2
 80182ba:	011b      	lsls	r3, r3, #4
 80182bc:	1a9b      	subs	r3, r3, r2
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	18cb      	adds	r3, r1, r3
 80182c2:	3334      	adds	r3, #52	; 0x34
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b01      	cmp	r3, #1
 80182c8:	d101      	bne.n	80182ce <HW_SignalAttachement+0x18a>
 80182ca:	2300      	movs	r3, #0
 80182cc:	e000      	b.n	80182d0 <HW_SignalAttachement+0x18c>
 80182ce:	2340      	movs	r3, #64	; 0x40
 80182d0:	0019      	movs	r1, r3
 80182d2:	f7ff fa93 	bl	80177fc <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80182d6:	1dfb      	adds	r3, r7, #7
 80182d8:	781a      	ldrb	r2, [r3, #0]
 80182da:	4949      	ldr	r1, [pc, #292]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80182dc:	0013      	movs	r3, r2
 80182de:	011b      	lsls	r3, r3, #4
 80182e0:	1a9b      	subs	r3, r3, r2
 80182e2:	009b      	lsls	r3, r3, #2
 80182e4:	18cb      	adds	r3, r1, r3
 80182e6:	330c      	adds	r3, #12
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	7a1b      	ldrb	r3, [r3, #8]
 80182ec:	2202      	movs	r2, #2
 80182ee:	4013      	ands	r3, r2
 80182f0:	b2db      	uxtb	r3, r3
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d034      	beq.n	8018360 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80182f6:	1dfb      	adds	r3, r7, #7
 80182f8:	781a      	ldrb	r2, [r3, #0]
 80182fa:	4941      	ldr	r1, [pc, #260]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80182fc:	0013      	movs	r3, r2
 80182fe:	011b      	lsls	r3, r3, #4
 8018300:	1a9b      	subs	r3, r3, r2
 8018302:	009b      	lsls	r3, r3, #2
 8018304:	18cb      	adds	r3, r1, r3
 8018306:	3334      	adds	r3, #52	; 0x34
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	2b01      	cmp	r3, #1
 801830c:	d101      	bne.n	8018312 <HW_SignalAttachement+0x1ce>
 801830e:	2301      	movs	r3, #1
 8018310:	e000      	b.n	8018314 <HW_SignalAttachement+0x1d0>
 8018312:	2302      	movs	r3, #2
 8018314:	1dfa      	adds	r2, r7, #7
 8018316:	7812      	ldrb	r2, [r2, #0]
 8018318:	0019      	movs	r1, r3
 801831a:	0010      	movs	r0, r2
 801831c:	f7fe fca4 	bl	8016c68 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8018320:	1dfb      	adds	r3, r7, #7
 8018322:	781a      	ldrb	r2, [r3, #0]
 8018324:	4936      	ldr	r1, [pc, #216]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018326:	0013      	movs	r3, r2
 8018328:	011b      	lsls	r3, r3, #4
 801832a:	1a9b      	subs	r3, r3, r2
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	585b      	ldr	r3, [r3, r1]
 8018330:	0018      	movs	r0, r3
 8018332:	f7ff f9fb 	bl	801772c <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8018336:	1dfb      	adds	r3, r7, #7
 8018338:	781a      	ldrb	r2, [r3, #0]
 801833a:	4931      	ldr	r1, [pc, #196]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801833c:	0013      	movs	r3, r2
 801833e:	011b      	lsls	r3, r3, #4
 8018340:	1a9b      	subs	r3, r3, r2
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	585b      	ldr	r3, [r3, r1]
 8018346:	6919      	ldr	r1, [r3, #16]
 8018348:	1dfb      	adds	r3, r7, #7
 801834a:	781a      	ldrb	r2, [r3, #0]
 801834c:	482c      	ldr	r0, [pc, #176]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801834e:	0013      	movs	r3, r2
 8018350:	011b      	lsls	r3, r3, #4
 8018352:	1a9b      	subs	r3, r3, r2
 8018354:	009b      	lsls	r3, r3, #2
 8018356:	581b      	ldr	r3, [r3, r0]
 8018358:	2280      	movs	r2, #128	; 0x80
 801835a:	0352      	lsls	r2, r2, #13
 801835c:	430a      	orrs	r2, r1
 801835e:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8018360:	1dfb      	adds	r3, r7, #7
 8018362:	781a      	ldrb	r2, [r3, #0]
 8018364:	4926      	ldr	r1, [pc, #152]	; (8018400 <HW_SignalAttachement+0x2bc>)
 8018366:	0013      	movs	r3, r2
 8018368:	011b      	lsls	r3, r3, #4
 801836a:	1a9b      	subs	r3, r3, r2
 801836c:	009b      	lsls	r3, r3, #2
 801836e:	18cb      	adds	r3, r1, r3
 8018370:	3334      	adds	r3, #52	; 0x34
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	2b01      	cmp	r3, #1
 8018376:	d10e      	bne.n	8018396 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8018378:	1dfb      	adds	r3, r7, #7
 801837a:	781a      	ldrb	r2, [r3, #0]
 801837c:	4920      	ldr	r1, [pc, #128]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801837e:	0013      	movs	r3, r2
 8018380:	011b      	lsls	r3, r3, #4
 8018382:	1a9b      	subs	r3, r3, r2
 8018384:	009b      	lsls	r3, r3, #2
 8018386:	585b      	ldr	r3, [r3, r1]
 8018388:	2280      	movs	r2, #128	; 0x80
 801838a:	00d2      	lsls	r2, r2, #3
 801838c:	0011      	movs	r1, r2
 801838e:	0018      	movs	r0, r3
 8018390:	f7ff f9ec 	bl	801776c <LL_UCPD_SetccEnable>
 8018394:	e00d      	b.n	80183b2 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8018396:	1dfb      	adds	r3, r7, #7
 8018398:	781a      	ldrb	r2, [r3, #0]
 801839a:	4919      	ldr	r1, [pc, #100]	; (8018400 <HW_SignalAttachement+0x2bc>)
 801839c:	0013      	movs	r3, r2
 801839e:	011b      	lsls	r3, r3, #4
 80183a0:	1a9b      	subs	r3, r3, r2
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	585b      	ldr	r3, [r3, r1]
 80183a6:	2280      	movs	r2, #128	; 0x80
 80183a8:	0112      	lsls	r2, r2, #4
 80183aa:	0011      	movs	r1, r2
 80183ac:	0018      	movs	r0, r3
 80183ae:	f7ff f9dd 	bl	801776c <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 80183b2:	1dfb      	adds	r3, r7, #7
 80183b4:	781a      	ldrb	r2, [r3, #0]
 80183b6:	4912      	ldr	r1, [pc, #72]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80183b8:	0013      	movs	r3, r2
 80183ba:	011b      	lsls	r3, r3, #4
 80183bc:	1a9b      	subs	r3, r3, r2
 80183be:	009b      	lsls	r3, r3, #2
 80183c0:	585b      	ldr	r3, [r3, r1]
 80183c2:	2100      	movs	r1, #0
 80183c4:	0018      	movs	r0, r3
 80183c6:	f7ff fa48 	bl	801785a <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 80183ca:	1dfb      	adds	r3, r7, #7
 80183cc:	781a      	ldrb	r2, [r3, #0]
 80183ce:	490c      	ldr	r1, [pc, #48]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80183d0:	0013      	movs	r3, r2
 80183d2:	011b      	lsls	r3, r3, #4
 80183d4:	1a9b      	subs	r3, r3, r2
 80183d6:	009b      	lsls	r3, r3, #2
 80183d8:	585b      	ldr	r3, [r3, r1]
 80183da:	0018      	movs	r0, r3
 80183dc:	f7ff fa7d 	bl	80178da <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 80183e0:	1dfb      	adds	r3, r7, #7
 80183e2:	781a      	ldrb	r2, [r3, #0]
 80183e4:	4906      	ldr	r1, [pc, #24]	; (8018400 <HW_SignalAttachement+0x2bc>)
 80183e6:	0013      	movs	r3, r2
 80183e8:	011b      	lsls	r3, r3, #4
 80183ea:	1a9b      	subs	r3, r3, r2
 80183ec:	009b      	lsls	r3, r3, #2
 80183ee:	585b      	ldr	r3, [r3, r1]
 80183f0:	0018      	movs	r0, r3
 80183f2:	f7ff fa91 	bl	8017918 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80183f6:	46c0      	nop			; (mov r8, r8)
 80183f8:	46bd      	mov	sp, r7
 80183fa:	b005      	add	sp, #20
 80183fc:	bd90      	pop	{r4, r7, pc}
 80183fe:	46c0      	nop			; (mov r8, r8)
 8018400:	20000a74 	.word	0x20000a74
 8018404:	00001e7e 	.word	0x00001e7e

08018408 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b082      	sub	sp, #8
 801840c:	af00      	add	r7, sp, #0
 801840e:	0002      	movs	r2, r0
 8018410:	1dfb      	adds	r3, r7, #7
 8018412:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8018414:	1dfb      	adds	r3, r7, #7
 8018416:	781a      	ldrb	r2, [r3, #0]
 8018418:	4941      	ldr	r1, [pc, #260]	; (8018520 <HW_SignalDetachment+0x118>)
 801841a:	0013      	movs	r3, r2
 801841c:	011b      	lsls	r3, r3, #4
 801841e:	1a9b      	subs	r3, r3, r2
 8018420:	009b      	lsls	r3, r3, #2
 8018422:	585b      	ldr	r3, [r3, r1]
 8018424:	0018      	movs	r0, r3
 8018426:	f7ff fa67 	bl	80178f8 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 801842a:	1dfb      	adds	r3, r7, #7
 801842c:	781a      	ldrb	r2, [r3, #0]
 801842e:	493c      	ldr	r1, [pc, #240]	; (8018520 <HW_SignalDetachment+0x118>)
 8018430:	0013      	movs	r3, r2
 8018432:	011b      	lsls	r3, r3, #4
 8018434:	1a9b      	subs	r3, r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	585b      	ldr	r3, [r3, r1]
 801843a:	0018      	movs	r0, r3
 801843c:	f7ff fa7c 	bl	8017938 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8018440:	1dfb      	adds	r3, r7, #7
 8018442:	781a      	ldrb	r2, [r3, #0]
 8018444:	4936      	ldr	r1, [pc, #216]	; (8018520 <HW_SignalDetachment+0x118>)
 8018446:	0013      	movs	r3, r2
 8018448:	011b      	lsls	r3, r3, #4
 801844a:	1a9b      	subs	r3, r3, r2
 801844c:	009b      	lsls	r3, r3, #2
 801844e:	585b      	ldr	r3, [r3, r1]
 8018450:	0018      	movs	r0, r3
 8018452:	f7ff f9f3 	bl	801783c <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8018456:	1dfb      	adds	r3, r7, #7
 8018458:	781a      	ldrb	r2, [r3, #0]
 801845a:	4931      	ldr	r1, [pc, #196]	; (8018520 <HW_SignalDetachment+0x118>)
 801845c:	0013      	movs	r3, r2
 801845e:	011b      	lsls	r3, r3, #4
 8018460:	1a9b      	subs	r3, r3, r2
 8018462:	009b      	lsls	r3, r3, #2
 8018464:	585b      	ldr	r3, [r3, r1]
 8018466:	22c0      	movs	r2, #192	; 0xc0
 8018468:	0212      	lsls	r2, r2, #8
 801846a:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 801846c:	1dfb      	adds	r3, r7, #7
 801846e:	781b      	ldrb	r3, [r3, #0]
 8018470:	0018      	movs	r0, r3
 8018472:	f7fe fbef 	bl	8016c54 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8018476:	1dfb      	adds	r3, r7, #7
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	0018      	movs	r0, r3
 801847c:	f7fe fb9a 	bl	8016bb4 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8018480:	1dfb      	adds	r3, r7, #7
 8018482:	781a      	ldrb	r2, [r3, #0]
 8018484:	4926      	ldr	r1, [pc, #152]	; (8018520 <HW_SignalDetachment+0x118>)
 8018486:	0013      	movs	r3, r2
 8018488:	011b      	lsls	r3, r3, #4
 801848a:	1a9b      	subs	r3, r3, r2
 801848c:	009b      	lsls	r3, r3, #2
 801848e:	585b      	ldr	r3, [r3, r1]
 8018490:	22c0      	movs	r2, #192	; 0xc0
 8018492:	0112      	lsls	r2, r2, #4
 8018494:	0011      	movs	r1, r2
 8018496:	0018      	movs	r0, r3
 8018498:	f7ff f968 	bl	801776c <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 801849c:	1dfb      	adds	r3, r7, #7
 801849e:	781a      	ldrb	r2, [r3, #0]
 80184a0:	491f      	ldr	r1, [pc, #124]	; (8018520 <HW_SignalDetachment+0x118>)
 80184a2:	0013      	movs	r3, r2
 80184a4:	011b      	lsls	r3, r3, #4
 80184a6:	1a9b      	subs	r3, r3, r2
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	18cb      	adds	r3, r1, r3
 80184ac:	3310      	adds	r3, #16
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	2204      	movs	r2, #4
 80184b4:	4013      	ands	r3, r2
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d104      	bne.n	80184c6 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80184bc:	1dfb      	adds	r3, r7, #7
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	0018      	movs	r0, r3
 80184c2:	f007 facd 	bl	801fa60 <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80184c6:	1dfb      	adds	r3, r7, #7
 80184c8:	781a      	ldrb	r2, [r3, #0]
 80184ca:	4915      	ldr	r1, [pc, #84]	; (8018520 <HW_SignalDetachment+0x118>)
 80184cc:	0013      	movs	r3, r2
 80184ce:	011b      	lsls	r3, r3, #4
 80184d0:	1a9b      	subs	r3, r3, r2
 80184d2:	009b      	lsls	r3, r3, #2
 80184d4:	18cb      	adds	r3, r1, r3
 80184d6:	330c      	adds	r3, #12
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	7a1b      	ldrb	r3, [r3, #8]
 80184dc:	2202      	movs	r2, #2
 80184de:	4013      	ands	r3, r2
 80184e0:	b2db      	uxtb	r3, r3
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d00a      	beq.n	80184fc <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80184e6:	1dfb      	adds	r3, r7, #7
 80184e8:	781a      	ldrb	r2, [r3, #0]
 80184ea:	490d      	ldr	r1, [pc, #52]	; (8018520 <HW_SignalDetachment+0x118>)
 80184ec:	0013      	movs	r3, r2
 80184ee:	011b      	lsls	r3, r3, #4
 80184f0:	1a9b      	subs	r3, r3, r2
 80184f2:	009b      	lsls	r3, r3, #2
 80184f4:	585b      	ldr	r3, [r3, r1]
 80184f6:	0018      	movs	r0, r3
 80184f8:	f7ff f928 	bl	801774c <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80184fc:	1dfb      	adds	r3, r7, #7
 80184fe:	781a      	ldrb	r2, [r3, #0]
 8018500:	4907      	ldr	r1, [pc, #28]	; (8018520 <HW_SignalDetachment+0x118>)
 8018502:	0013      	movs	r3, r2
 8018504:	011b      	lsls	r3, r3, #4
 8018506:	1a9b      	subs	r3, r3, r2
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	18cb      	adds	r3, r1, r3
 801850c:	3334      	adds	r3, #52	; 0x34
 801850e:	2200      	movs	r2, #0
 8018510:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8018512:	f000 fb25 	bl	8018b60 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8018516:	46c0      	nop			; (mov r8, r8)
 8018518:	46bd      	mov	sp, r7
 801851a:	b002      	add	sp, #8
 801851c:	bd80      	pop	{r7, pc}
 801851e:	46c0      	nop			; (mov r8, r8)
 8018520:	20000a74 	.word	0x20000a74

08018524 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b082      	sub	sp, #8
 8018528:	af00      	add	r7, sp, #0
 801852a:	0002      	movs	r2, r0
 801852c:	1dfb      	adds	r3, r7, #7
 801852e:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8018530:	1dfb      	adds	r3, r7, #7
 8018532:	781a      	ldrb	r2, [r3, #0]
 8018534:	4907      	ldr	r1, [pc, #28]	; (8018554 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 8018536:	0013      	movs	r3, r2
 8018538:	011b      	lsls	r3, r3, #4
 801853a:	1a9b      	subs	r3, r3, r2
 801853c:	009b      	lsls	r3, r3, #2
 801853e:	585b      	ldr	r3, [r3, r1]
 8018540:	2280      	movs	r2, #128	; 0x80
 8018542:	0052      	lsls	r2, r2, #1
 8018544:	0011      	movs	r1, r2
 8018546:	0018      	movs	r0, r3
 8018548:	f7ff f944 	bl	80177d4 <LL_UCPD_SetRpResistor>
}
 801854c:	46c0      	nop			; (mov r8, r8)
 801854e:	46bd      	mov	sp, r7
 8018550:	b002      	add	sp, #8
 8018552:	bd80      	pop	{r7, pc}
 8018554:	20000a74 	.word	0x20000a74

08018558 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	0002      	movs	r2, r0
 8018560:	1dfb      	adds	r3, r7, #7
 8018562:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8018564:	1dfb      	adds	r3, r7, #7
 8018566:	781a      	ldrb	r2, [r3, #0]
 8018568:	4907      	ldr	r1, [pc, #28]	; (8018588 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 801856a:	0013      	movs	r3, r2
 801856c:	011b      	lsls	r3, r3, #4
 801856e:	1a9b      	subs	r3, r3, r2
 8018570:	009b      	lsls	r3, r3, #2
 8018572:	585b      	ldr	r3, [r3, r1]
 8018574:	22c0      	movs	r2, #192	; 0xc0
 8018576:	0052      	lsls	r2, r2, #1
 8018578:	0011      	movs	r1, r2
 801857a:	0018      	movs	r0, r3
 801857c:	f7ff f92a 	bl	80177d4 <LL_UCPD_SetRpResistor>
}
 8018580:	46c0      	nop			; (mov r8, r8)
 8018582:	46bd      	mov	sp, r7
 8018584:	b002      	add	sp, #8
 8018586:	bd80      	pop	{r7, pc}
 8018588:	20000a74 	.word	0x20000a74

0801858c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 801858c:	b580      	push	{r7, lr}
 801858e:	b082      	sub	sp, #8
 8018590:	af00      	add	r7, sp, #0
 8018592:	0002      	movs	r2, r0
 8018594:	1dfb      	adds	r3, r7, #7
 8018596:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8018598:	1dfb      	adds	r3, r7, #7
 801859a:	781a      	ldrb	r2, [r3, #0]
 801859c:	491c      	ldr	r1, [pc, #112]	; (8018610 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 801859e:	0013      	movs	r3, r2
 80185a0:	011b      	lsls	r3, r3, #4
 80185a2:	1a9b      	subs	r3, r3, r2
 80185a4:	009b      	lsls	r3, r3, #2
 80185a6:	18cb      	adds	r3, r1, r3
 80185a8:	3334      	adds	r3, #52	; 0x34
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d002      	beq.n	80185b6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 80185b0:	2b02      	cmp	r3, #2
 80185b2:	d012      	beq.n	80185da <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80185b4:	e026      	b.n	8018604 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80185b6:	1dfb      	adds	r3, r7, #7
 80185b8:	781a      	ldrb	r2, [r3, #0]
 80185ba:	4915      	ldr	r1, [pc, #84]	; (8018610 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80185bc:	0013      	movs	r3, r2
 80185be:	011b      	lsls	r3, r3, #4
 80185c0:	1a9b      	subs	r3, r3, r2
 80185c2:	009b      	lsls	r3, r3, #2
 80185c4:	585b      	ldr	r3, [r3, r1]
 80185c6:	695a      	ldr	r2, [r3, #20]
 80185c8:	23c0      	movs	r3, #192	; 0xc0
 80185ca:	029b      	lsls	r3, r3, #10
 80185cc:	401a      	ands	r2, r3
 80185ce:	23c0      	movs	r3, #192	; 0xc0
 80185d0:	029b      	lsls	r3, r3, #10
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d113      	bne.n	80185fe <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 80185d6:	2301      	movs	r3, #1
 80185d8:	e015      	b.n	8018606 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 80185da:	1dfb      	adds	r3, r7, #7
 80185dc:	781a      	ldrb	r2, [r3, #0]
 80185de:	490c      	ldr	r1, [pc, #48]	; (8018610 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80185e0:	0013      	movs	r3, r2
 80185e2:	011b      	lsls	r3, r3, #4
 80185e4:	1a9b      	subs	r3, r3, r2
 80185e6:	009b      	lsls	r3, r3, #2
 80185e8:	585b      	ldr	r3, [r3, r1]
 80185ea:	695a      	ldr	r2, [r3, #20]
 80185ec:	23c0      	movs	r3, #192	; 0xc0
 80185ee:	031b      	lsls	r3, r3, #12
 80185f0:	401a      	ands	r2, r3
 80185f2:	23c0      	movs	r3, #192	; 0xc0
 80185f4:	031b      	lsls	r3, r3, #12
 80185f6:	429a      	cmp	r2, r3
 80185f8:	d103      	bne.n	8018602 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 80185fa:	2301      	movs	r3, #1
 80185fc:	e003      	b.n	8018606 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 80185fe:	46c0      	nop			; (mov r8, r8)
 8018600:	e000      	b.n	8018604 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 8018602:	46c0      	nop			; (mov r8, r8)
  }

  return USBPD_FALSE;
 8018604:	2300      	movs	r3, #0
}
 8018606:	0018      	movs	r0, r3
 8018608:	46bd      	mov	sp, r7
 801860a:	b002      	add	sp, #8
 801860c:	bd80      	pop	{r7, pc}
 801860e:	46c0      	nop			; (mov r8, r8)
 8018610:	20000a74 	.word	0x20000a74

08018614 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b082      	sub	sp, #8
 8018618:	af00      	add	r7, sp, #0
 801861a:	0002      	movs	r2, r0
 801861c:	1dfb      	adds	r3, r7, #7
 801861e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8018620:	1dfb      	adds	r3, r7, #7
 8018622:	781a      	ldrb	r2, [r3, #0]
 8018624:	4906      	ldr	r1, [pc, #24]	; (8018640 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 8018626:	0013      	movs	r3, r2
 8018628:	011b      	lsls	r3, r3, #4
 801862a:	1a9b      	subs	r3, r3, r2
 801862c:	009b      	lsls	r3, r3, #2
 801862e:	585b      	ldr	r3, [r3, r1]
 8018630:	0018      	movs	r0, r3
 8018632:	f7ff f86c 	bl	801770e <LL_UCPD_SignalFRSTX>
}
 8018636:	46c0      	nop			; (mov r8, r8)
 8018638:	46bd      	mov	sp, r7
 801863a:	b002      	add	sp, #8
 801863c:	bd80      	pop	{r7, pc}
 801863e:	46c0      	nop			; (mov r8, r8)
 8018640:	20000a74 	.word	0x20000a74

08018644 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	0002      	movs	r2, r0
 801864c:	1dfb      	adds	r3, r7, #7
 801864e:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8018650:	1dfb      	adds	r3, r7, #7
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	220c      	movs	r2, #12
 8018656:	18ba      	adds	r2, r7, r2
 8018658:	0011      	movs	r1, r2
 801865a:	0018      	movs	r0, r3
 801865c:	f007 fa1e 	bl	801fa9c <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	b29b      	uxth	r3, r3
}
 8018664:	0018      	movs	r0, r3
 8018666:	46bd      	mov	sp, r7
 8018668:	b004      	add	sp, #16
 801866a:	bd80      	pop	{r7, pc}

0801866c <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b084      	sub	sp, #16
 8018670:	af00      	add	r7, sp, #0
 8018672:	0002      	movs	r2, r0
 8018674:	1dfb      	adds	r3, r7, #7
 8018676:	701a      	strb	r2, [r3, #0]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 8018678:	1dfb      	adds	r3, r7, #7
 801867a:	781b      	ldrb	r3, [r3, #0]
 801867c:	220c      	movs	r2, #12
 801867e:	18ba      	adds	r2, r7, r2
 8018680:	0011      	movs	r1, r2
 8018682:	0018      	movs	r0, r3
 8018684:	f007 fa46 	bl	801fb14 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	b21b      	sxth	r3, r3
}
 801868c:	0018      	movs	r0, r3
 801868e:	46bd      	mov	sp, r7
 8018690:	b004      	add	sp, #16
 8018692:	bd80      	pop	{r7, pc}

08018694 <LL_APB2_GRP1_EnableClock>:
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 801869c:	4b07      	ldr	r3, [pc, #28]	; (80186bc <LL_APB2_GRP1_EnableClock+0x28>)
 801869e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80186a0:	4b06      	ldr	r3, [pc, #24]	; (80186bc <LL_APB2_GRP1_EnableClock+0x28>)
 80186a2:	687a      	ldr	r2, [r7, #4]
 80186a4:	430a      	orrs	r2, r1
 80186a6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80186a8:	4b04      	ldr	r3, [pc, #16]	; (80186bc <LL_APB2_GRP1_EnableClock+0x28>)
 80186aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	4013      	ands	r3, r2
 80186b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80186b2:	68fb      	ldr	r3, [r7, #12]
}
 80186b4:	46c0      	nop			; (mov r8, r8)
 80186b6:	46bd      	mov	sp, r7
 80186b8:	b004      	add	sp, #16
 80186ba:	bd80      	pop	{r7, pc}
 80186bc:	40021000 	.word	0x40021000

080186c0 <LL_APB2_GRP1_DisableClock>:
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 80186c8:	4b05      	ldr	r3, [pc, #20]	; (80186e0 <LL_APB2_GRP1_DisableClock+0x20>)
 80186ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	43d9      	mvns	r1, r3
 80186d0:	4b03      	ldr	r3, [pc, #12]	; (80186e0 <LL_APB2_GRP1_DisableClock+0x20>)
 80186d2:	400a      	ands	r2, r1
 80186d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80186d6:	46c0      	nop			; (mov r8, r8)
 80186d8:	46bd      	mov	sp, r7
 80186da:	b002      	add	sp, #8
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	46c0      	nop			; (mov r8, r8)
 80186e0:	40021000 	.word	0x40021000

080186e4 <LL_TIM_EnableCounter>:
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b082      	sub	sp, #8
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2201      	movs	r2, #1
 80186f2:	431a      	orrs	r2, r3
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	601a      	str	r2, [r3, #0]
}
 80186f8:	46c0      	nop			; (mov r8, r8)
 80186fa:	46bd      	mov	sp, r7
 80186fc:	b002      	add	sp, #8
 80186fe:	bd80      	pop	{r7, pc}

08018700 <LL_TIM_SetCounterMode>:
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b082      	sub	sp, #8
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	2270      	movs	r2, #112	; 0x70
 8018710:	4393      	bics	r3, r2
 8018712:	001a      	movs	r2, r3
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	431a      	orrs	r2, r3
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	601a      	str	r2, [r3, #0]
}
 801871c:	46c0      	nop			; (mov r8, r8)
 801871e:	46bd      	mov	sp, r7
 8018720:	b002      	add	sp, #8
 8018722:	bd80      	pop	{r7, pc}

08018724 <LL_TIM_SetPrescaler>:
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	683a      	ldr	r2, [r7, #0]
 8018732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018734:	46c0      	nop			; (mov r8, r8)
 8018736:	46bd      	mov	sp, r7
 8018738:	b002      	add	sp, #8
 801873a:	bd80      	pop	{r7, pc}

0801873c <LL_TIM_GetPrescaler>:
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b082      	sub	sp, #8
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8018748:	0018      	movs	r0, r3
 801874a:	46bd      	mov	sp, r7
 801874c:	b002      	add	sp, #8
 801874e:	bd80      	pop	{r7, pc}

08018750 <LL_TIM_SetAutoReload>:
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	683a      	ldr	r2, [r7, #0]
 801875e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8018760:	46c0      	nop			; (mov r8, r8)
 8018762:	46bd      	mov	sp, r7
 8018764:	b002      	add	sp, #8
 8018766:	bd80      	pop	{r7, pc}

08018768 <LL_TIM_OC_SetMode>:
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b086      	sub	sp, #24
 801876c:	af00      	add	r7, sp, #0
 801876e:	60f8      	str	r0, [r7, #12]
 8018770:	60b9      	str	r1, [r7, #8]
 8018772:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	2b01      	cmp	r3, #1
 8018778:	d02c      	beq.n	80187d4 <LL_TIM_OC_SetMode+0x6c>
 801877a:	68bb      	ldr	r3, [r7, #8]
 801877c:	2b04      	cmp	r3, #4
 801877e:	d027      	beq.n	80187d0 <LL_TIM_OC_SetMode+0x68>
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	2b10      	cmp	r3, #16
 8018784:	d022      	beq.n	80187cc <LL_TIM_OC_SetMode+0x64>
 8018786:	68bb      	ldr	r3, [r7, #8]
 8018788:	2b40      	cmp	r3, #64	; 0x40
 801878a:	d01d      	beq.n	80187c8 <LL_TIM_OC_SetMode+0x60>
 801878c:	68ba      	ldr	r2, [r7, #8]
 801878e:	2380      	movs	r3, #128	; 0x80
 8018790:	005b      	lsls	r3, r3, #1
 8018792:	429a      	cmp	r2, r3
 8018794:	d016      	beq.n	80187c4 <LL_TIM_OC_SetMode+0x5c>
 8018796:	68ba      	ldr	r2, [r7, #8]
 8018798:	2380      	movs	r3, #128	; 0x80
 801879a:	00db      	lsls	r3, r3, #3
 801879c:	429a      	cmp	r2, r3
 801879e:	d00f      	beq.n	80187c0 <LL_TIM_OC_SetMode+0x58>
 80187a0:	68ba      	ldr	r2, [r7, #8]
 80187a2:	2380      	movs	r3, #128	; 0x80
 80187a4:	015b      	lsls	r3, r3, #5
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d008      	beq.n	80187bc <LL_TIM_OC_SetMode+0x54>
 80187aa:	68ba      	ldr	r2, [r7, #8]
 80187ac:	2380      	movs	r3, #128	; 0x80
 80187ae:	025b      	lsls	r3, r3, #9
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d101      	bne.n	80187b8 <LL_TIM_OC_SetMode+0x50>
 80187b4:	2307      	movs	r3, #7
 80187b6:	e00e      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187b8:	2308      	movs	r3, #8
 80187ba:	e00c      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187bc:	2306      	movs	r3, #6
 80187be:	e00a      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187c0:	2305      	movs	r3, #5
 80187c2:	e008      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187c4:	2304      	movs	r3, #4
 80187c6:	e006      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187c8:	2303      	movs	r3, #3
 80187ca:	e004      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187cc:	2302      	movs	r3, #2
 80187ce:	e002      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187d0:	2301      	movs	r3, #1
 80187d2:	e000      	b.n	80187d6 <LL_TIM_OC_SetMode+0x6e>
 80187d4:	2300      	movs	r3, #0
 80187d6:	2017      	movs	r0, #23
 80187d8:	183a      	adds	r2, r7, r0
 80187da:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	3318      	adds	r3, #24
 80187e0:	0019      	movs	r1, r3
 80187e2:	183b      	adds	r3, r7, r0
 80187e4:	781b      	ldrb	r3, [r3, #0]
 80187e6:	4a0e      	ldr	r2, [pc, #56]	; (8018820 <LL_TIM_OC_SetMode+0xb8>)
 80187e8:	5cd3      	ldrb	r3, [r2, r3]
 80187ea:	18cb      	adds	r3, r1, r3
 80187ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80187ee:	693b      	ldr	r3, [r7, #16]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	183a      	adds	r2, r7, r0
 80187f4:	7812      	ldrb	r2, [r2, #0]
 80187f6:	490b      	ldr	r1, [pc, #44]	; (8018824 <LL_TIM_OC_SetMode+0xbc>)
 80187f8:	5c8a      	ldrb	r2, [r1, r2]
 80187fa:	0011      	movs	r1, r2
 80187fc:	4a0a      	ldr	r2, [pc, #40]	; (8018828 <LL_TIM_OC_SetMode+0xc0>)
 80187fe:	408a      	lsls	r2, r1
 8018800:	43d2      	mvns	r2, r2
 8018802:	401a      	ands	r2, r3
 8018804:	183b      	adds	r3, r7, r0
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	4906      	ldr	r1, [pc, #24]	; (8018824 <LL_TIM_OC_SetMode+0xbc>)
 801880a:	5ccb      	ldrb	r3, [r1, r3]
 801880c:	0019      	movs	r1, r3
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	408b      	lsls	r3, r1
 8018812:	431a      	orrs	r2, r3
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	601a      	str	r2, [r3, #0]
}
 8018818:	46c0      	nop			; (mov r8, r8)
 801881a:	46bd      	mov	sp, r7
 801881c:	b006      	add	sp, #24
 801881e:	bd80      	pop	{r7, pc}
 8018820:	0802b084 	.word	0x0802b084
 8018824:	0802b090 	.word	0x0802b090
 8018828:	00010073 	.word	0x00010073

0801882c <LL_TIM_OC_SetPolarity>:
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b086      	sub	sp, #24
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	2b01      	cmp	r3, #1
 801883c:	d02c      	beq.n	8018898 <LL_TIM_OC_SetPolarity+0x6c>
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	2b04      	cmp	r3, #4
 8018842:	d027      	beq.n	8018894 <LL_TIM_OC_SetPolarity+0x68>
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	2b10      	cmp	r3, #16
 8018848:	d022      	beq.n	8018890 <LL_TIM_OC_SetPolarity+0x64>
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	2b40      	cmp	r3, #64	; 0x40
 801884e:	d01d      	beq.n	801888c <LL_TIM_OC_SetPolarity+0x60>
 8018850:	68ba      	ldr	r2, [r7, #8]
 8018852:	2380      	movs	r3, #128	; 0x80
 8018854:	005b      	lsls	r3, r3, #1
 8018856:	429a      	cmp	r2, r3
 8018858:	d016      	beq.n	8018888 <LL_TIM_OC_SetPolarity+0x5c>
 801885a:	68ba      	ldr	r2, [r7, #8]
 801885c:	2380      	movs	r3, #128	; 0x80
 801885e:	00db      	lsls	r3, r3, #3
 8018860:	429a      	cmp	r2, r3
 8018862:	d00f      	beq.n	8018884 <LL_TIM_OC_SetPolarity+0x58>
 8018864:	68ba      	ldr	r2, [r7, #8]
 8018866:	2380      	movs	r3, #128	; 0x80
 8018868:	015b      	lsls	r3, r3, #5
 801886a:	429a      	cmp	r2, r3
 801886c:	d008      	beq.n	8018880 <LL_TIM_OC_SetPolarity+0x54>
 801886e:	68ba      	ldr	r2, [r7, #8]
 8018870:	2380      	movs	r3, #128	; 0x80
 8018872:	025b      	lsls	r3, r3, #9
 8018874:	429a      	cmp	r2, r3
 8018876:	d101      	bne.n	801887c <LL_TIM_OC_SetPolarity+0x50>
 8018878:	2307      	movs	r3, #7
 801887a:	e00e      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 801887c:	2308      	movs	r3, #8
 801887e:	e00c      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018880:	2306      	movs	r3, #6
 8018882:	e00a      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018884:	2305      	movs	r3, #5
 8018886:	e008      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018888:	2304      	movs	r3, #4
 801888a:	e006      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 801888c:	2303      	movs	r3, #3
 801888e:	e004      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018890:	2302      	movs	r3, #2
 8018892:	e002      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018894:	2301      	movs	r3, #1
 8018896:	e000      	b.n	801889a <LL_TIM_OC_SetPolarity+0x6e>
 8018898:	2300      	movs	r3, #0
 801889a:	2017      	movs	r0, #23
 801889c:	183a      	adds	r2, r7, r0
 801889e:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	6a1b      	ldr	r3, [r3, #32]
 80188a4:	183a      	adds	r2, r7, r0
 80188a6:	7812      	ldrb	r2, [r2, #0]
 80188a8:	490a      	ldr	r1, [pc, #40]	; (80188d4 <LL_TIM_OC_SetPolarity+0xa8>)
 80188aa:	5c8a      	ldrb	r2, [r1, r2]
 80188ac:	0011      	movs	r1, r2
 80188ae:	2202      	movs	r2, #2
 80188b0:	408a      	lsls	r2, r1
 80188b2:	43d2      	mvns	r2, r2
 80188b4:	401a      	ands	r2, r3
 80188b6:	183b      	adds	r3, r7, r0
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	4906      	ldr	r1, [pc, #24]	; (80188d4 <LL_TIM_OC_SetPolarity+0xa8>)
 80188bc:	5ccb      	ldrb	r3, [r1, r3]
 80188be:	0019      	movs	r1, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	408b      	lsls	r3, r1
 80188c4:	431a      	orrs	r2, r3
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	621a      	str	r2, [r3, #32]
}
 80188ca:	46c0      	nop			; (mov r8, r8)
 80188cc:	46bd      	mov	sp, r7
 80188ce:	b006      	add	sp, #24
 80188d0:	bd80      	pop	{r7, pc}
 80188d2:	46c0      	nop			; (mov r8, r8)
 80188d4:	0802b09c 	.word	0x0802b09c

080188d8 <LL_TIM_OC_SetCompareCH1>:
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	683a      	ldr	r2, [r7, #0]
 80188e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80188e8:	46c0      	nop			; (mov r8, r8)
 80188ea:	46bd      	mov	sp, r7
 80188ec:	b002      	add	sp, #8
 80188ee:	bd80      	pop	{r7, pc}

080188f0 <LL_TIM_OC_SetCompareCH2>:
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
 80188f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	683a      	ldr	r2, [r7, #0]
 80188fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8018900:	46c0      	nop			; (mov r8, r8)
 8018902:	46bd      	mov	sp, r7
 8018904:	b002      	add	sp, #8
 8018906:	bd80      	pop	{r7, pc}

08018908 <LL_TIM_OC_SetCompareCH3>:
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
 8018910:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	683a      	ldr	r2, [r7, #0]
 8018916:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8018918:	46c0      	nop			; (mov r8, r8)
 801891a:	46bd      	mov	sp, r7
 801891c:	b002      	add	sp, #8
 801891e:	bd80      	pop	{r7, pc}

08018920 <LL_TIM_OC_SetCompareCH4>:
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b082      	sub	sp, #8
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	683a      	ldr	r2, [r7, #0]
 801892e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8018930:	46c0      	nop			; (mov r8, r8)
 8018932:	46bd      	mov	sp, r7
 8018934:	b002      	add	sp, #8
 8018936:	bd80      	pop	{r7, pc}

08018938 <LL_TIM_ClearFlag_CC1>:
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b082      	sub	sp, #8
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2203      	movs	r2, #3
 8018944:	4252      	negs	r2, r2
 8018946:	611a      	str	r2, [r3, #16]
}
 8018948:	46c0      	nop			; (mov r8, r8)
 801894a:	46bd      	mov	sp, r7
 801894c:	b002      	add	sp, #8
 801894e:	bd80      	pop	{r7, pc}

08018950 <LL_TIM_IsActiveFlag_CC1>:
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b082      	sub	sp, #8
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	691b      	ldr	r3, [r3, #16]
 801895c:	2202      	movs	r2, #2
 801895e:	4013      	ands	r3, r2
 8018960:	2b02      	cmp	r3, #2
 8018962:	d101      	bne.n	8018968 <LL_TIM_IsActiveFlag_CC1+0x18>
 8018964:	2301      	movs	r3, #1
 8018966:	e000      	b.n	801896a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8018968:	2300      	movs	r3, #0
}
 801896a:	0018      	movs	r0, r3
 801896c:	46bd      	mov	sp, r7
 801896e:	b002      	add	sp, #8
 8018970:	bd80      	pop	{r7, pc}

08018972 <LL_TIM_ClearFlag_CC2>:
{
 8018972:	b580      	push	{r7, lr}
 8018974:	b082      	sub	sp, #8
 8018976:	af00      	add	r7, sp, #0
 8018978:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	2205      	movs	r2, #5
 801897e:	4252      	negs	r2, r2
 8018980:	611a      	str	r2, [r3, #16]
}
 8018982:	46c0      	nop			; (mov r8, r8)
 8018984:	46bd      	mov	sp, r7
 8018986:	b002      	add	sp, #8
 8018988:	bd80      	pop	{r7, pc}

0801898a <LL_TIM_IsActiveFlag_CC2>:
{
 801898a:	b580      	push	{r7, lr}
 801898c:	b082      	sub	sp, #8
 801898e:	af00      	add	r7, sp, #0
 8018990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	691b      	ldr	r3, [r3, #16]
 8018996:	2204      	movs	r2, #4
 8018998:	4013      	ands	r3, r2
 801899a:	2b04      	cmp	r3, #4
 801899c:	d101      	bne.n	80189a2 <LL_TIM_IsActiveFlag_CC2+0x18>
 801899e:	2301      	movs	r3, #1
 80189a0:	e000      	b.n	80189a4 <LL_TIM_IsActiveFlag_CC2+0x1a>
 80189a2:	2300      	movs	r3, #0
}
 80189a4:	0018      	movs	r0, r3
 80189a6:	46bd      	mov	sp, r7
 80189a8:	b002      	add	sp, #8
 80189aa:	bd80      	pop	{r7, pc}

080189ac <LL_TIM_ClearFlag_CC3>:
{
 80189ac:	b580      	push	{r7, lr}
 80189ae:	b082      	sub	sp, #8
 80189b0:	af00      	add	r7, sp, #0
 80189b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2209      	movs	r2, #9
 80189b8:	4252      	negs	r2, r2
 80189ba:	611a      	str	r2, [r3, #16]
}
 80189bc:	46c0      	nop			; (mov r8, r8)
 80189be:	46bd      	mov	sp, r7
 80189c0:	b002      	add	sp, #8
 80189c2:	bd80      	pop	{r7, pc}

080189c4 <LL_TIM_IsActiveFlag_CC3>:
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b082      	sub	sp, #8
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	691b      	ldr	r3, [r3, #16]
 80189d0:	2208      	movs	r2, #8
 80189d2:	4013      	ands	r3, r2
 80189d4:	2b08      	cmp	r3, #8
 80189d6:	d101      	bne.n	80189dc <LL_TIM_IsActiveFlag_CC3+0x18>
 80189d8:	2301      	movs	r3, #1
 80189da:	e000      	b.n	80189de <LL_TIM_IsActiveFlag_CC3+0x1a>
 80189dc:	2300      	movs	r3, #0
}
 80189de:	0018      	movs	r0, r3
 80189e0:	46bd      	mov	sp, r7
 80189e2:	b002      	add	sp, #8
 80189e4:	bd80      	pop	{r7, pc}

080189e6 <LL_TIM_ClearFlag_CC4>:
{
 80189e6:	b580      	push	{r7, lr}
 80189e8:	b082      	sub	sp, #8
 80189ea:	af00      	add	r7, sp, #0
 80189ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	2211      	movs	r2, #17
 80189f2:	4252      	negs	r2, r2
 80189f4:	611a      	str	r2, [r3, #16]
}
 80189f6:	46c0      	nop			; (mov r8, r8)
 80189f8:	46bd      	mov	sp, r7
 80189fa:	b002      	add	sp, #8
 80189fc:	bd80      	pop	{r7, pc}

080189fe <LL_TIM_IsActiveFlag_CC4>:
{
 80189fe:	b580      	push	{r7, lr}
 8018a00:	b082      	sub	sp, #8
 8018a02:	af00      	add	r7, sp, #0
 8018a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	691b      	ldr	r3, [r3, #16]
 8018a0a:	2210      	movs	r2, #16
 8018a0c:	4013      	ands	r3, r2
 8018a0e:	2b10      	cmp	r3, #16
 8018a10:	d101      	bne.n	8018a16 <LL_TIM_IsActiveFlag_CC4+0x18>
 8018a12:	2301      	movs	r3, #1
 8018a14:	e000      	b.n	8018a18 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8018a16:	2300      	movs	r3, #0
}
 8018a18:	0018      	movs	r0, r3
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	b002      	add	sp, #8
 8018a1e:	bd80      	pop	{r7, pc}

08018a20 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8018a20:	b5b0      	push	{r4, r5, r7, lr}
 8018a22:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8018a24:	4b48      	ldr	r3, [pc, #288]	; (8018b48 <USBPD_TIM_Init+0x128>)
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	b25b      	sxtb	r3, r3
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d000      	beq.n	8018a30 <USBPD_TIM_Init+0x10>
 8018a2e:	e07e      	b.n	8018b2e <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8018a30:	2380      	movs	r3, #128	; 0x80
 8018a32:	011b      	lsls	r3, r3, #4
 8018a34:	0018      	movs	r0, r3
 8018a36:	f7ff fe2d 	bl	8018694 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8018a3a:	4b44      	ldr	r3, [pc, #272]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	0018      	movs	r0, r3
 8018a40:	f7ff fe5e 	bl	8018700 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8018a44:	4b42      	ldr	r3, [pc, #264]	; (8018b50 <USBPD_TIM_Init+0x130>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	4a42      	ldr	r2, [pc, #264]	; (8018b54 <USBPD_TIM_Init+0x134>)
 8018a4a:	4293      	cmp	r3, r2
 8018a4c:	d90b      	bls.n	8018a66 <USBPD_TIM_Init+0x46>
 8018a4e:	4b40      	ldr	r3, [pc, #256]	; (8018b50 <USBPD_TIM_Init+0x130>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4a41      	ldr	r2, [pc, #260]	; (8018b58 <USBPD_TIM_Init+0x138>)
 8018a54:	4694      	mov	ip, r2
 8018a56:	4463      	add	r3, ip
 8018a58:	4940      	ldr	r1, [pc, #256]	; (8018b5c <USBPD_TIM_Init+0x13c>)
 8018a5a:	0018      	movs	r0, r3
 8018a5c:	f7ed fbdc 	bl	8006218 <__udivsi3>
 8018a60:	0003      	movs	r3, r0
 8018a62:	3b01      	subs	r3, #1
 8018a64:	e000      	b.n	8018a68 <USBPD_TIM_Init+0x48>
 8018a66:	2300      	movs	r3, #0
 8018a68:	4a38      	ldr	r2, [pc, #224]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018a6a:	0019      	movs	r1, r3
 8018a6c:	0010      	movs	r0, r2
 8018a6e:	f7ff fe59 	bl	8018724 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8018a72:	4b37      	ldr	r3, [pc, #220]	; (8018b50 <USBPD_TIM_Init+0x130>)
 8018a74:	681c      	ldr	r4, [r3, #0]
 8018a76:	4b35      	ldr	r3, [pc, #212]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018a78:	0018      	movs	r0, r3
 8018a7a:	f7ff fe5f 	bl	801873c <LL_TIM_GetPrescaler>
 8018a7e:	0003      	movs	r3, r0
 8018a80:	3301      	adds	r3, #1
 8018a82:	0019      	movs	r1, r3
 8018a84:	0020      	movs	r0, r4
 8018a86:	f7ed fbc7 	bl	8006218 <__udivsi3>
 8018a8a:	0003      	movs	r3, r0
 8018a8c:	2b63      	cmp	r3, #99	; 0x63
 8018a8e:	d910      	bls.n	8018ab2 <USBPD_TIM_Init+0x92>
 8018a90:	4b2f      	ldr	r3, [pc, #188]	; (8018b50 <USBPD_TIM_Init+0x130>)
 8018a92:	681c      	ldr	r4, [r3, #0]
 8018a94:	4b2d      	ldr	r3, [pc, #180]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018a96:	0018      	movs	r0, r3
 8018a98:	f7ff fe50 	bl	801873c <LL_TIM_GetPrescaler>
 8018a9c:	0003      	movs	r3, r0
 8018a9e:	3301      	adds	r3, #1
 8018aa0:	2264      	movs	r2, #100	; 0x64
 8018aa2:	4353      	muls	r3, r2
 8018aa4:	0019      	movs	r1, r3
 8018aa6:	0020      	movs	r0, r4
 8018aa8:	f7ed fbb6 	bl	8006218 <__udivsi3>
 8018aac:	0003      	movs	r3, r0
 8018aae:	3b01      	subs	r3, #1
 8018ab0:	e000      	b.n	8018ab4 <USBPD_TIM_Init+0x94>
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	4a25      	ldr	r2, [pc, #148]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018ab6:	0019      	movs	r1, r3
 8018ab8:	0010      	movs	r0, r2
 8018aba:	f7ff fe49 	bl	8018750 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8018abe:	4b23      	ldr	r3, [pc, #140]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018ac0:	2230      	movs	r2, #48	; 0x30
 8018ac2:	2101      	movs	r1, #1
 8018ac4:	0018      	movs	r0, r3
 8018ac6:	f7ff fe4f 	bl	8018768 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8018aca:	4b20      	ldr	r3, [pc, #128]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018acc:	2230      	movs	r2, #48	; 0x30
 8018ace:	2110      	movs	r1, #16
 8018ad0:	0018      	movs	r0, r3
 8018ad2:	f7ff fe49 	bl	8018768 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8018ad6:	2380      	movs	r3, #128	; 0x80
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	481c      	ldr	r0, [pc, #112]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018adc:	2230      	movs	r2, #48	; 0x30
 8018ade:	0019      	movs	r1, r3
 8018ae0:	f7ff fe42 	bl	8018768 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8018ae4:	2380      	movs	r3, #128	; 0x80
 8018ae6:	015b      	lsls	r3, r3, #5
 8018ae8:	4818      	ldr	r0, [pc, #96]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018aea:	2230      	movs	r2, #48	; 0x30
 8018aec:	0019      	movs	r1, r3
 8018aee:	f7ff fe3b 	bl	8018768 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8018af2:	4b16      	ldr	r3, [pc, #88]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018af4:	2200      	movs	r2, #0
 8018af6:	2101      	movs	r1, #1
 8018af8:	0018      	movs	r0, r3
 8018afa:	f7ff fe97 	bl	801882c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8018afe:	4b13      	ldr	r3, [pc, #76]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018b00:	2200      	movs	r2, #0
 8018b02:	2110      	movs	r1, #16
 8018b04:	0018      	movs	r0, r3
 8018b06:	f7ff fe91 	bl	801882c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8018b0a:	2380      	movs	r3, #128	; 0x80
 8018b0c:	005b      	lsls	r3, r3, #1
 8018b0e:	480f      	ldr	r0, [pc, #60]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018b10:	2200      	movs	r2, #0
 8018b12:	0019      	movs	r1, r3
 8018b14:	f7ff fe8a 	bl	801882c <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8018b18:	2380      	movs	r3, #128	; 0x80
 8018b1a:	015b      	lsls	r3, r3, #5
 8018b1c:	480b      	ldr	r0, [pc, #44]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018b1e:	2200      	movs	r2, #0
 8018b20:	0019      	movs	r1, r3
 8018b22:	f7ff fe83 	bl	801882c <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8018b26:	4b09      	ldr	r3, [pc, #36]	; (8018b4c <USBPD_TIM_Init+0x12c>)
 8018b28:	0018      	movs	r0, r3
 8018b2a:	f7ff fddb 	bl	80186e4 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8018b2e:	4b06      	ldr	r3, [pc, #24]	; (8018b48 <USBPD_TIM_Init+0x128>)
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	b25b      	sxtb	r3, r3
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	3301      	adds	r3, #1
 8018b38:	b2db      	uxtb	r3, r3
 8018b3a:	b25a      	sxtb	r2, r3
 8018b3c:	4b02      	ldr	r3, [pc, #8]	; (8018b48 <USBPD_TIM_Init+0x128>)
 8018b3e:	701a      	strb	r2, [r3, #0]
}
 8018b40:	46c0      	nop			; (mov r8, r8)
 8018b42:	46bd      	mov	sp, r7
 8018b44:	bdb0      	pop	{r4, r5, r7, pc}
 8018b46:	46c0      	nop			; (mov r8, r8)
 8018b48:	20000ab0 	.word	0x20000ab0
 8018b4c:	40012c00 	.word	0x40012c00
 8018b50:	20000118 	.word	0x20000118
 8018b54:	000f423f 	.word	0x000f423f
 8018b58:	0007a120 	.word	0x0007a120
 8018b5c:	000f4240 	.word	0x000f4240

08018b60 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8018b64:	4b0a      	ldr	r3, [pc, #40]	; (8018b90 <USBPD_TIM_DeInit+0x30>)
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	b25b      	sxtb	r3, r3
 8018b6a:	b2db      	uxtb	r3, r3
 8018b6c:	3b01      	subs	r3, #1
 8018b6e:	b2db      	uxtb	r3, r3
 8018b70:	b25a      	sxtb	r2, r3
 8018b72:	4b07      	ldr	r3, [pc, #28]	; (8018b90 <USBPD_TIM_DeInit+0x30>)
 8018b74:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8018b76:	4b06      	ldr	r3, [pc, #24]	; (8018b90 <USBPD_TIM_DeInit+0x30>)
 8018b78:	781b      	ldrb	r3, [r3, #0]
 8018b7a:	b25b      	sxtb	r3, r3
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d104      	bne.n	8018b8a <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8018b80:	2380      	movs	r3, #128	; 0x80
 8018b82:	011b      	lsls	r3, r3, #4
 8018b84:	0018      	movs	r0, r3
 8018b86:	f7ff fd9b 	bl	80186c0 <LL_APB2_GRP1_DisableClock>
  }
}
 8018b8a:	46c0      	nop			; (mov r8, r8)
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	20000ab0 	.word	0x20000ab0

08018b94 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b082      	sub	sp, #8
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	0002      	movs	r2, r0
 8018b9c:	6039      	str	r1, [r7, #0]
 8018b9e:	1dfb      	adds	r3, r7, #7
 8018ba0:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8018ba2:	1dfb      	adds	r3, r7, #7
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	2b03      	cmp	r3, #3
 8018ba8:	d044      	beq.n	8018c34 <USBPD_TIM_Start+0xa0>
 8018baa:	dc57      	bgt.n	8018c5c <USBPD_TIM_Start+0xc8>
 8018bac:	2b02      	cmp	r3, #2
 8018bae:	d02d      	beq.n	8018c0c <USBPD_TIM_Start+0x78>
 8018bb0:	dc54      	bgt.n	8018c5c <USBPD_TIM_Start+0xc8>
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d002      	beq.n	8018bbc <USBPD_TIM_Start+0x28>
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	d014      	beq.n	8018be4 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8018bba:	e04f      	b.n	8018c5c <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8018bbc:	4b2a      	ldr	r3, [pc, #168]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018bbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018bc0:	683b      	ldr	r3, [r7, #0]
 8018bc2:	18d3      	adds	r3, r2, r3
 8018bc4:	4929      	ldr	r1, [pc, #164]	; (8018c6c <USBPD_TIM_Start+0xd8>)
 8018bc6:	0018      	movs	r0, r3
 8018bc8:	f7ed fbac 	bl	8006324 <__aeabi_uidivmod>
 8018bcc:	000b      	movs	r3, r1
 8018bce:	001a      	movs	r2, r3
 8018bd0:	4b25      	ldr	r3, [pc, #148]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018bd2:	0011      	movs	r1, r2
 8018bd4:	0018      	movs	r0, r3
 8018bd6:	f7ff fe7f 	bl	80188d8 <LL_TIM_OC_SetCompareCH1>
 8018bda:	4b23      	ldr	r3, [pc, #140]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018bdc:	0018      	movs	r0, r3
 8018bde:	f7ff feab 	bl	8018938 <LL_TIM_ClearFlag_CC1>
      break;
 8018be2:	e03c      	b.n	8018c5e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8018be4:	4b20      	ldr	r3, [pc, #128]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018be6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	18d3      	adds	r3, r2, r3
 8018bec:	491f      	ldr	r1, [pc, #124]	; (8018c6c <USBPD_TIM_Start+0xd8>)
 8018bee:	0018      	movs	r0, r3
 8018bf0:	f7ed fb98 	bl	8006324 <__aeabi_uidivmod>
 8018bf4:	000b      	movs	r3, r1
 8018bf6:	001a      	movs	r2, r3
 8018bf8:	4b1b      	ldr	r3, [pc, #108]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018bfa:	0011      	movs	r1, r2
 8018bfc:	0018      	movs	r0, r3
 8018bfe:	f7ff fe77 	bl	80188f0 <LL_TIM_OC_SetCompareCH2>
 8018c02:	4b19      	ldr	r3, [pc, #100]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c04:	0018      	movs	r0, r3
 8018c06:	f7ff feb4 	bl	8018972 <LL_TIM_ClearFlag_CC2>
      break;
 8018c0a:	e028      	b.n	8018c5e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8018c0c:	4b16      	ldr	r3, [pc, #88]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c10:	683b      	ldr	r3, [r7, #0]
 8018c12:	18d3      	adds	r3, r2, r3
 8018c14:	4915      	ldr	r1, [pc, #84]	; (8018c6c <USBPD_TIM_Start+0xd8>)
 8018c16:	0018      	movs	r0, r3
 8018c18:	f7ed fb84 	bl	8006324 <__aeabi_uidivmod>
 8018c1c:	000b      	movs	r3, r1
 8018c1e:	001a      	movs	r2, r3
 8018c20:	4b11      	ldr	r3, [pc, #68]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c22:	0011      	movs	r1, r2
 8018c24:	0018      	movs	r0, r3
 8018c26:	f7ff fe6f 	bl	8018908 <LL_TIM_OC_SetCompareCH3>
 8018c2a:	4b0f      	ldr	r3, [pc, #60]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c2c:	0018      	movs	r0, r3
 8018c2e:	f7ff febd 	bl	80189ac <LL_TIM_ClearFlag_CC3>
      break;
 8018c32:	e014      	b.n	8018c5e <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8018c34:	4b0c      	ldr	r3, [pc, #48]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	18d3      	adds	r3, r2, r3
 8018c3c:	490b      	ldr	r1, [pc, #44]	; (8018c6c <USBPD_TIM_Start+0xd8>)
 8018c3e:	0018      	movs	r0, r3
 8018c40:	f7ed fb70 	bl	8006324 <__aeabi_uidivmod>
 8018c44:	000b      	movs	r3, r1
 8018c46:	001a      	movs	r2, r3
 8018c48:	4b07      	ldr	r3, [pc, #28]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c4a:	0011      	movs	r1, r2
 8018c4c:	0018      	movs	r0, r3
 8018c4e:	f7ff fe67 	bl	8018920 <LL_TIM_OC_SetCompareCH4>
 8018c52:	4b05      	ldr	r3, [pc, #20]	; (8018c68 <USBPD_TIM_Start+0xd4>)
 8018c54:	0018      	movs	r0, r3
 8018c56:	f7ff fec6 	bl	80189e6 <LL_TIM_ClearFlag_CC4>
      break;
 8018c5a:	e000      	b.n	8018c5e <USBPD_TIM_Start+0xca>
      break;
 8018c5c:	46c0      	nop			; (mov r8, r8)
  }
}
 8018c5e:	46c0      	nop			; (mov r8, r8)
 8018c60:	46bd      	mov	sp, r7
 8018c62:	b002      	add	sp, #8
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	46c0      	nop			; (mov r8, r8)
 8018c68:	40012c00 	.word	0x40012c00
 8018c6c:	00002710 	.word	0x00002710

08018c70 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b084      	sub	sp, #16
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	0002      	movs	r2, r0
 8018c78:	1dfb      	adds	r3, r7, #7
 8018c7a:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8018c80:	1dfb      	adds	r3, r7, #7
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	2b03      	cmp	r3, #3
 8018c86:	d01d      	beq.n	8018cc4 <USBPD_TIM_IsExpired+0x54>
 8018c88:	dc23      	bgt.n	8018cd2 <USBPD_TIM_IsExpired+0x62>
 8018c8a:	2b02      	cmp	r3, #2
 8018c8c:	d013      	beq.n	8018cb6 <USBPD_TIM_IsExpired+0x46>
 8018c8e:	dc20      	bgt.n	8018cd2 <USBPD_TIM_IsExpired+0x62>
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d002      	beq.n	8018c9a <USBPD_TIM_IsExpired+0x2a>
 8018c94:	2b01      	cmp	r3, #1
 8018c96:	d007      	beq.n	8018ca8 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8018c98:	e01b      	b.n	8018cd2 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8018c9a:	4b11      	ldr	r3, [pc, #68]	; (8018ce0 <USBPD_TIM_IsExpired+0x70>)
 8018c9c:	0018      	movs	r0, r3
 8018c9e:	f7ff fe57 	bl	8018950 <LL_TIM_IsActiveFlag_CC1>
 8018ca2:	0003      	movs	r3, r0
 8018ca4:	60fb      	str	r3, [r7, #12]
      break;
 8018ca6:	e015      	b.n	8018cd4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8018ca8:	4b0d      	ldr	r3, [pc, #52]	; (8018ce0 <USBPD_TIM_IsExpired+0x70>)
 8018caa:	0018      	movs	r0, r3
 8018cac:	f7ff fe6d 	bl	801898a <LL_TIM_IsActiveFlag_CC2>
 8018cb0:	0003      	movs	r3, r0
 8018cb2:	60fb      	str	r3, [r7, #12]
      break;
 8018cb4:	e00e      	b.n	8018cd4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8018cb6:	4b0a      	ldr	r3, [pc, #40]	; (8018ce0 <USBPD_TIM_IsExpired+0x70>)
 8018cb8:	0018      	movs	r0, r3
 8018cba:	f7ff fe83 	bl	80189c4 <LL_TIM_IsActiveFlag_CC3>
 8018cbe:	0003      	movs	r3, r0
 8018cc0:	60fb      	str	r3, [r7, #12]
      break;
 8018cc2:	e007      	b.n	8018cd4 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8018cc4:	4b06      	ldr	r3, [pc, #24]	; (8018ce0 <USBPD_TIM_IsExpired+0x70>)
 8018cc6:	0018      	movs	r0, r3
 8018cc8:	f7ff fe99 	bl	80189fe <LL_TIM_IsActiveFlag_CC4>
 8018ccc:	0003      	movs	r3, r0
 8018cce:	60fb      	str	r3, [r7, #12]
      break;
 8018cd0:	e000      	b.n	8018cd4 <USBPD_TIM_IsExpired+0x64>
      break;
 8018cd2:	46c0      	nop			; (mov r8, r8)
  }
  return _expired;
 8018cd4:	68fb      	ldr	r3, [r7, #12]
}
 8018cd6:	0018      	movs	r0, r3
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	b004      	add	sp, #16
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	46c0      	nop			; (mov r8, r8)
 8018ce0:	40012c00 	.word	0x40012c00

08018ce4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	6078      	str	r0, [r7, #4]
 8018cec:	000a      	movs	r2, r1
 8018cee:	1cfb      	adds	r3, r7, #3
 8018cf0:	701a      	strb	r2, [r3, #0]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8018cf2:	2387      	movs	r3, #135	; 0x87
 8018cf4:	009b      	lsls	r3, r3, #2
 8018cf6:	0018      	movs	r0, r3
 8018cf8:	f008 fd32 	bl	8021760 <USBD_static_malloc>
 8018cfc:	0003      	movs	r3, r0
 8018cfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d10a      	bne.n	8018d1c <USBD_CDC_Init+0x38>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018d06:	687a      	ldr	r2, [r7, #4]
 8018d08:	23b5      	movs	r3, #181	; 0xb5
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	58d2      	ldr	r2, [r2, r3]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	32b0      	adds	r2, #176	; 0xb0
 8018d12:	0092      	lsls	r2, r2, #2
 8018d14:	2100      	movs	r1, #0
 8018d16:	50d1      	str	r1, [r2, r3]
    return (uint8_t)USBD_EMEM;
 8018d18:	2302      	movs	r3, #2
 8018d1a:	e0e9      	b.n	8018ef0 <USBD_CDC_Init+0x20c>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8018d1c:	2387      	movs	r3, #135	; 0x87
 8018d1e:	009a      	lsls	r2, r3, #2
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2100      	movs	r1, #0
 8018d24:	0018      	movs	r0, r3
 8018d26:	f00e fe9b 	bl	8027a60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8018d2a:	687a      	ldr	r2, [r7, #4]
 8018d2c:	23b5      	movs	r3, #181	; 0xb5
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	58d2      	ldr	r2, [r2, r3]
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	32b0      	adds	r2, #176	; 0xb0
 8018d36:	0092      	lsls	r2, r2, #2
 8018d38:	68f9      	ldr	r1, [r7, #12]
 8018d3a:	50d1      	str	r1, [r2, r3]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8018d3c:	687a      	ldr	r2, [r7, #4]
 8018d3e:	23b5      	movs	r3, #181	; 0xb5
 8018d40:	009b      	lsls	r3, r3, #2
 8018d42:	58d2      	ldr	r2, [r2, r3]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	32b0      	adds	r2, #176	; 0xb0
 8018d48:	0092      	lsls	r2, r2, #2
 8018d4a:	58d1      	ldr	r1, [r2, r3]
 8018d4c:	687a      	ldr	r2, [r7, #4]
 8018d4e:	23af      	movs	r3, #175	; 0xaf
 8018d50:	009b      	lsls	r3, r3, #2
 8018d52:	50d1      	str	r1, [r2, r3]
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	7c1b      	ldrb	r3, [r3, #16]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d13c      	bne.n	8018dd6 <USBD_CDC_Init+0xf2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018d5c:	4b66      	ldr	r3, [pc, #408]	; (8018ef8 <USBD_CDC_Init+0x214>)
 8018d5e:	7819      	ldrb	r1, [r3, #0]
 8018d60:	2380      	movs	r3, #128	; 0x80
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	2202      	movs	r2, #2
 8018d68:	f008 fb37 	bl	80213da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018d6c:	4b62      	ldr	r3, [pc, #392]	; (8018ef8 <USBD_CDC_Init+0x214>)
 8018d6e:	781b      	ldrb	r3, [r3, #0]
 8018d70:	001a      	movs	r2, r3
 8018d72:	230f      	movs	r3, #15
 8018d74:	401a      	ands	r2, r3
 8018d76:	6879      	ldr	r1, [r7, #4]
 8018d78:	0013      	movs	r3, r2
 8018d7a:	009b      	lsls	r3, r3, #2
 8018d7c:	189b      	adds	r3, r3, r2
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	18cb      	adds	r3, r1, r3
 8018d82:	3324      	adds	r3, #36	; 0x24
 8018d84:	2201      	movs	r2, #1
 8018d86:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018d88:	4b5c      	ldr	r3, [pc, #368]	; (8018efc <USBD_CDC_Init+0x218>)
 8018d8a:	7819      	ldrb	r1, [r3, #0]
 8018d8c:	2380      	movs	r3, #128	; 0x80
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	6878      	ldr	r0, [r7, #4]
 8018d92:	2202      	movs	r2, #2
 8018d94:	f008 fb21 	bl	80213da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018d98:	4b58      	ldr	r3, [pc, #352]	; (8018efc <USBD_CDC_Init+0x218>)
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	001a      	movs	r2, r3
 8018d9e:	230f      	movs	r3, #15
 8018da0:	401a      	ands	r2, r3
 8018da2:	6878      	ldr	r0, [r7, #4]
 8018da4:	23b2      	movs	r3, #178	; 0xb2
 8018da6:	0059      	lsls	r1, r3, #1
 8018da8:	0013      	movs	r3, r2
 8018daa:	009b      	lsls	r3, r3, #2
 8018dac:	189b      	adds	r3, r3, r2
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	18c3      	adds	r3, r0, r3
 8018db2:	185b      	adds	r3, r3, r1
 8018db4:	2201      	movs	r2, #1
 8018db6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8018db8:	4b51      	ldr	r3, [pc, #324]	; (8018f00 <USBD_CDC_Init+0x21c>)
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	001a      	movs	r2, r3
 8018dbe:	230f      	movs	r3, #15
 8018dc0:	401a      	ands	r2, r3
 8018dc2:	6879      	ldr	r1, [r7, #4]
 8018dc4:	0013      	movs	r3, r2
 8018dc6:	009b      	lsls	r3, r3, #2
 8018dc8:	189b      	adds	r3, r3, r2
 8018dca:	009b      	lsls	r3, r3, #2
 8018dcc:	18cb      	adds	r3, r1, r3
 8018dce:	3326      	adds	r3, #38	; 0x26
 8018dd0:	2210      	movs	r2, #16
 8018dd2:	801a      	strh	r2, [r3, #0]
 8018dd4:	e039      	b.n	8018e4a <USBD_CDC_Init+0x166>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8018dd6:	4b48      	ldr	r3, [pc, #288]	; (8018ef8 <USBD_CDC_Init+0x214>)
 8018dd8:	7819      	ldrb	r1, [r3, #0]
 8018dda:	6878      	ldr	r0, [r7, #4]
 8018ddc:	2340      	movs	r3, #64	; 0x40
 8018dde:	2202      	movs	r2, #2
 8018de0:	f008 fafb 	bl	80213da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8018de4:	4b44      	ldr	r3, [pc, #272]	; (8018ef8 <USBD_CDC_Init+0x214>)
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	001a      	movs	r2, r3
 8018dea:	230f      	movs	r3, #15
 8018dec:	401a      	ands	r2, r3
 8018dee:	6879      	ldr	r1, [r7, #4]
 8018df0:	0013      	movs	r3, r2
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	189b      	adds	r3, r3, r2
 8018df6:	009b      	lsls	r3, r3, #2
 8018df8:	18cb      	adds	r3, r1, r3
 8018dfa:	3324      	adds	r3, #36	; 0x24
 8018dfc:	2201      	movs	r2, #1
 8018dfe:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8018e00:	4b3e      	ldr	r3, [pc, #248]	; (8018efc <USBD_CDC_Init+0x218>)
 8018e02:	7819      	ldrb	r1, [r3, #0]
 8018e04:	6878      	ldr	r0, [r7, #4]
 8018e06:	2340      	movs	r3, #64	; 0x40
 8018e08:	2202      	movs	r2, #2
 8018e0a:	f008 fae6 	bl	80213da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8018e0e:	4b3b      	ldr	r3, [pc, #236]	; (8018efc <USBD_CDC_Init+0x218>)
 8018e10:	781b      	ldrb	r3, [r3, #0]
 8018e12:	001a      	movs	r2, r3
 8018e14:	230f      	movs	r3, #15
 8018e16:	401a      	ands	r2, r3
 8018e18:	6878      	ldr	r0, [r7, #4]
 8018e1a:	23b2      	movs	r3, #178	; 0xb2
 8018e1c:	0059      	lsls	r1, r3, #1
 8018e1e:	0013      	movs	r3, r2
 8018e20:	009b      	lsls	r3, r3, #2
 8018e22:	189b      	adds	r3, r3, r2
 8018e24:	009b      	lsls	r3, r3, #2
 8018e26:	18c3      	adds	r3, r0, r3
 8018e28:	185b      	adds	r3, r3, r1
 8018e2a:	2201      	movs	r2, #1
 8018e2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8018e2e:	4b34      	ldr	r3, [pc, #208]	; (8018f00 <USBD_CDC_Init+0x21c>)
 8018e30:	781b      	ldrb	r3, [r3, #0]
 8018e32:	001a      	movs	r2, r3
 8018e34:	230f      	movs	r3, #15
 8018e36:	401a      	ands	r2, r3
 8018e38:	6879      	ldr	r1, [r7, #4]
 8018e3a:	0013      	movs	r3, r2
 8018e3c:	009b      	lsls	r3, r3, #2
 8018e3e:	189b      	adds	r3, r3, r2
 8018e40:	009b      	lsls	r3, r3, #2
 8018e42:	18cb      	adds	r3, r1, r3
 8018e44:	3326      	adds	r3, #38	; 0x26
 8018e46:	2210      	movs	r2, #16
 8018e48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8018e4a:	4b2d      	ldr	r3, [pc, #180]	; (8018f00 <USBD_CDC_Init+0x21c>)
 8018e4c:	7819      	ldrb	r1, [r3, #0]
 8018e4e:	6878      	ldr	r0, [r7, #4]
 8018e50:	2308      	movs	r3, #8
 8018e52:	2203      	movs	r2, #3
 8018e54:	f008 fac1 	bl	80213da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8018e58:	4b29      	ldr	r3, [pc, #164]	; (8018f00 <USBD_CDC_Init+0x21c>)
 8018e5a:	781b      	ldrb	r3, [r3, #0]
 8018e5c:	001a      	movs	r2, r3
 8018e5e:	230f      	movs	r3, #15
 8018e60:	401a      	ands	r2, r3
 8018e62:	6879      	ldr	r1, [r7, #4]
 8018e64:	0013      	movs	r3, r2
 8018e66:	009b      	lsls	r3, r3, #2
 8018e68:	189b      	adds	r3, r3, r2
 8018e6a:	009b      	lsls	r3, r3, #2
 8018e6c:	18cb      	adds	r3, r1, r3
 8018e6e:	3324      	adds	r3, #36	; 0x24
 8018e70:	2201      	movs	r2, #1
 8018e72:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8018e74:	68fa      	ldr	r2, [r7, #12]
 8018e76:	2381      	movs	r3, #129	; 0x81
 8018e78:	009b      	lsls	r3, r3, #2
 8018e7a:	2100      	movs	r1, #0
 8018e7c:	50d1      	str	r1, [r2, r3]

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8018e7e:	687a      	ldr	r2, [r7, #4]
 8018e80:	23b5      	movs	r3, #181	; 0xb5
 8018e82:	009b      	lsls	r3, r3, #2
 8018e84:	58d3      	ldr	r3, [r2, r3]
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	33b0      	adds	r3, #176	; 0xb0
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	18d3      	adds	r3, r2, r3
 8018e8e:	3304      	adds	r3, #4
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8018e96:	68fa      	ldr	r2, [r7, #12]
 8018e98:	2385      	movs	r3, #133	; 0x85
 8018e9a:	009b      	lsls	r3, r3, #2
 8018e9c:	2100      	movs	r1, #0
 8018e9e:	50d1      	str	r1, [r2, r3]
  hcdc->RxState = 0U;
 8018ea0:	68fa      	ldr	r2, [r7, #12]
 8018ea2:	2386      	movs	r3, #134	; 0x86
 8018ea4:	009b      	lsls	r3, r3, #2
 8018ea6:	2100      	movs	r1, #0
 8018ea8:	50d1      	str	r1, [r2, r3]

  if (hcdc->RxBuffer == NULL)
 8018eaa:	68fa      	ldr	r2, [r7, #12]
 8018eac:	2381      	movs	r3, #129	; 0x81
 8018eae:	009b      	lsls	r3, r3, #2
 8018eb0:	58d3      	ldr	r3, [r2, r3]
 8018eb2:	2b00      	cmp	r3, #0
 8018eb4:	d101      	bne.n	8018eba <USBD_CDC_Init+0x1d6>
  {
    return (uint8_t)USBD_EMEM;
 8018eb6:	2302      	movs	r3, #2
 8018eb8:	e01a      	b.n	8018ef0 <USBD_CDC_Init+0x20c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	7c1b      	ldrb	r3, [r3, #16]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d10b      	bne.n	8018eda <USBD_CDC_Init+0x1f6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018ec2:	4b0e      	ldr	r3, [pc, #56]	; (8018efc <USBD_CDC_Init+0x218>)
 8018ec4:	7819      	ldrb	r1, [r3, #0]
 8018ec6:	68fa      	ldr	r2, [r7, #12]
 8018ec8:	2381      	movs	r3, #129	; 0x81
 8018eca:	009b      	lsls	r3, r3, #2
 8018ecc:	58d2      	ldr	r2, [r2, r3]
 8018ece:	2380      	movs	r3, #128	; 0x80
 8018ed0:	009b      	lsls	r3, r3, #2
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f008 fbc4 	bl	8021660 <USBD_LL_PrepareReceive>
 8018ed8:	e009      	b.n	8018eee <USBD_CDC_Init+0x20a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8018eda:	4b08      	ldr	r3, [pc, #32]	; (8018efc <USBD_CDC_Init+0x218>)
 8018edc:	7819      	ldrb	r1, [r3, #0]
 8018ede:	68fa      	ldr	r2, [r7, #12]
 8018ee0:	2381      	movs	r3, #129	; 0x81
 8018ee2:	009b      	lsls	r3, r3, #2
 8018ee4:	58d2      	ldr	r2, [r2, r3]
 8018ee6:	6878      	ldr	r0, [r7, #4]
 8018ee8:	2340      	movs	r3, #64	; 0x40
 8018eea:	f008 fbb9 	bl	8021660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018eee:	2300      	movs	r3, #0
}
 8018ef0:	0018      	movs	r0, r3
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	b004      	add	sp, #16
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	200001ab 	.word	0x200001ab
 8018efc:	200001ac 	.word	0x200001ac
 8018f00:	200001ad 	.word	0x200001ad

08018f04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018f04:	b580      	push	{r7, lr}
 8018f06:	b082      	sub	sp, #8
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	000a      	movs	r2, r1
 8018f0e:	1cfb      	adds	r3, r7, #3
 8018f10:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8018f12:	4b41      	ldr	r3, [pc, #260]	; (8019018 <USBD_CDC_DeInit+0x114>)
 8018f14:	781a      	ldrb	r2, [r3, #0]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	0011      	movs	r1, r2
 8018f1a:	0018      	movs	r0, r3
 8018f1c:	f008 fa94 	bl	8021448 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8018f20:	4b3d      	ldr	r3, [pc, #244]	; (8019018 <USBD_CDC_DeInit+0x114>)
 8018f22:	781b      	ldrb	r3, [r3, #0]
 8018f24:	001a      	movs	r2, r3
 8018f26:	230f      	movs	r3, #15
 8018f28:	401a      	ands	r2, r3
 8018f2a:	6879      	ldr	r1, [r7, #4]
 8018f2c:	0013      	movs	r3, r2
 8018f2e:	009b      	lsls	r3, r3, #2
 8018f30:	189b      	adds	r3, r3, r2
 8018f32:	009b      	lsls	r3, r3, #2
 8018f34:	18cb      	adds	r3, r1, r3
 8018f36:	3324      	adds	r3, #36	; 0x24
 8018f38:	2200      	movs	r2, #0
 8018f3a:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8018f3c:	4b37      	ldr	r3, [pc, #220]	; (801901c <USBD_CDC_DeInit+0x118>)
 8018f3e:	781a      	ldrb	r2, [r3, #0]
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	0011      	movs	r1, r2
 8018f44:	0018      	movs	r0, r3
 8018f46:	f008 fa7f 	bl	8021448 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8018f4a:	4b34      	ldr	r3, [pc, #208]	; (801901c <USBD_CDC_DeInit+0x118>)
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	001a      	movs	r2, r3
 8018f50:	230f      	movs	r3, #15
 8018f52:	401a      	ands	r2, r3
 8018f54:	6878      	ldr	r0, [r7, #4]
 8018f56:	23b2      	movs	r3, #178	; 0xb2
 8018f58:	0059      	lsls	r1, r3, #1
 8018f5a:	0013      	movs	r3, r2
 8018f5c:	009b      	lsls	r3, r3, #2
 8018f5e:	189b      	adds	r3, r3, r2
 8018f60:	009b      	lsls	r3, r3, #2
 8018f62:	18c3      	adds	r3, r0, r3
 8018f64:	185b      	adds	r3, r3, r1
 8018f66:	2200      	movs	r2, #0
 8018f68:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8018f6a:	4b2d      	ldr	r3, [pc, #180]	; (8019020 <USBD_CDC_DeInit+0x11c>)
 8018f6c:	781a      	ldrb	r2, [r3, #0]
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	0011      	movs	r1, r2
 8018f72:	0018      	movs	r0, r3
 8018f74:	f008 fa68 	bl	8021448 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8018f78:	4b29      	ldr	r3, [pc, #164]	; (8019020 <USBD_CDC_DeInit+0x11c>)
 8018f7a:	781b      	ldrb	r3, [r3, #0]
 8018f7c:	001a      	movs	r2, r3
 8018f7e:	230f      	movs	r3, #15
 8018f80:	401a      	ands	r2, r3
 8018f82:	6879      	ldr	r1, [r7, #4]
 8018f84:	0013      	movs	r3, r2
 8018f86:	009b      	lsls	r3, r3, #2
 8018f88:	189b      	adds	r3, r3, r2
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	18cb      	adds	r3, r1, r3
 8018f8e:	3324      	adds	r3, #36	; 0x24
 8018f90:	2200      	movs	r2, #0
 8018f92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8018f94:	4b22      	ldr	r3, [pc, #136]	; (8019020 <USBD_CDC_DeInit+0x11c>)
 8018f96:	781b      	ldrb	r3, [r3, #0]
 8018f98:	001a      	movs	r2, r3
 8018f9a:	230f      	movs	r3, #15
 8018f9c:	401a      	ands	r2, r3
 8018f9e:	6879      	ldr	r1, [r7, #4]
 8018fa0:	0013      	movs	r3, r2
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	189b      	adds	r3, r3, r2
 8018fa6:	009b      	lsls	r3, r3, #2
 8018fa8:	18cb      	adds	r3, r1, r3
 8018faa:	3326      	adds	r3, #38	; 0x26
 8018fac:	2200      	movs	r2, #0
 8018fae:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8018fb0:	687a      	ldr	r2, [r7, #4]
 8018fb2:	23b5      	movs	r3, #181	; 0xb5
 8018fb4:	009b      	lsls	r3, r3, #2
 8018fb6:	58d2      	ldr	r2, [r2, r3]
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	32b0      	adds	r2, #176	; 0xb0
 8018fbc:	0092      	lsls	r2, r2, #2
 8018fbe:	58d3      	ldr	r3, [r2, r3]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d024      	beq.n	801900e <USBD_CDC_DeInit+0x10a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8018fc4:	687a      	ldr	r2, [r7, #4]
 8018fc6:	23b5      	movs	r3, #181	; 0xb5
 8018fc8:	009b      	lsls	r3, r3, #2
 8018fca:	58d3      	ldr	r3, [r2, r3]
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	33b0      	adds	r3, #176	; 0xb0
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	18d3      	adds	r3, r2, r3
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	685b      	ldr	r3, [r3, #4]
 8018fda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8018fdc:	687a      	ldr	r2, [r7, #4]
 8018fde:	23b5      	movs	r3, #181	; 0xb5
 8018fe0:	009b      	lsls	r3, r3, #2
 8018fe2:	58d2      	ldr	r2, [r2, r3]
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	32b0      	adds	r2, #176	; 0xb0
 8018fe8:	0092      	lsls	r2, r2, #2
 8018fea:	58d3      	ldr	r3, [r2, r3]
 8018fec:	0018      	movs	r0, r3
 8018fee:	f008 fbc3 	bl	8021778 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	23b5      	movs	r3, #181	; 0xb5
 8018ff6:	009b      	lsls	r3, r3, #2
 8018ff8:	58d2      	ldr	r2, [r2, r3]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	32b0      	adds	r2, #176	; 0xb0
 8018ffe:	0092      	lsls	r2, r2, #2
 8019000:	2100      	movs	r1, #0
 8019002:	50d1      	str	r1, [r2, r3]
    pdev->pClassData = NULL;
 8019004:	687a      	ldr	r2, [r7, #4]
 8019006:	23af      	movs	r3, #175	; 0xaf
 8019008:	009b      	lsls	r3, r3, #2
 801900a:	2100      	movs	r1, #0
 801900c:	50d1      	str	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 801900e:	2300      	movs	r3, #0
}
 8019010:	0018      	movs	r0, r3
 8019012:	46bd      	mov	sp, r7
 8019014:	b002      	add	sp, #8
 8019016:	bd80      	pop	{r7, pc}
 8019018:	200001ab 	.word	0x200001ab
 801901c:	200001ac 	.word	0x200001ac
 8019020:	200001ad 	.word	0x200001ad

08019024 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b086      	sub	sp, #24
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801902e:	687a      	ldr	r2, [r7, #4]
 8019030:	23b5      	movs	r3, #181	; 0xb5
 8019032:	009b      	lsls	r3, r3, #2
 8019034:	58d2      	ldr	r2, [r2, r3]
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	32b0      	adds	r2, #176	; 0xb0
 801903a:	0092      	lsls	r2, r2, #2
 801903c:	58d3      	ldr	r3, [r2, r3]
 801903e:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8019040:	230d      	movs	r3, #13
 8019042:	18fb      	adds	r3, r7, r3
 8019044:	2200      	movs	r2, #0
 8019046:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8019048:	230a      	movs	r3, #10
 801904a:	18fb      	adds	r3, r7, r3
 801904c:	2200      	movs	r2, #0
 801904e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019050:	2317      	movs	r3, #23
 8019052:	18fb      	adds	r3, r7, r3
 8019054:	2200      	movs	r2, #0
 8019056:	701a      	strb	r2, [r3, #0]

  if (hcdc == NULL)
 8019058:	693b      	ldr	r3, [r7, #16]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d101      	bne.n	8019062 <USBD_CDC_Setup+0x3e>
  {
    return (uint8_t)USBD_FAIL;
 801905e:	2303      	movs	r3, #3
 8019060:	e0d1      	b.n	8019206 <USBD_CDC_Setup+0x1e2>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	001a      	movs	r2, r3
 8019068:	2360      	movs	r3, #96	; 0x60
 801906a:	4013      	ands	r3, r2
 801906c:	d05b      	beq.n	8019126 <USBD_CDC_Setup+0x102>
 801906e:	2b20      	cmp	r3, #32
 8019070:	d000      	beq.n	8019074 <USBD_CDC_Setup+0x50>
 8019072:	e0ba      	b.n	80191ea <USBD_CDC_Setup+0x1c6>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8019074:	683b      	ldr	r3, [r7, #0]
 8019076:	88db      	ldrh	r3, [r3, #6]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d043      	beq.n	8019104 <USBD_CDC_Setup+0xe0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801907c:	683b      	ldr	r3, [r7, #0]
 801907e:	781b      	ldrb	r3, [r3, #0]
 8019080:	b25b      	sxtb	r3, r3
 8019082:	2b00      	cmp	r3, #0
 8019084:	da22      	bge.n	80190cc <USBD_CDC_Setup+0xa8>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8019086:	687a      	ldr	r2, [r7, #4]
 8019088:	23b5      	movs	r3, #181	; 0xb5
 801908a:	009b      	lsls	r3, r3, #2
 801908c:	58d3      	ldr	r3, [r2, r3]
 801908e:	687a      	ldr	r2, [r7, #4]
 8019090:	33b0      	adds	r3, #176	; 0xb0
 8019092:	009b      	lsls	r3, r3, #2
 8019094:	18d3      	adds	r3, r2, r3
 8019096:	3304      	adds	r3, #4
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	689b      	ldr	r3, [r3, #8]
 801909c:	683a      	ldr	r2, [r7, #0]
 801909e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80190a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80190a2:	683a      	ldr	r2, [r7, #0]
 80190a4:	88d2      	ldrh	r2, [r2, #6]
 80190a6:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	88db      	ldrh	r3, [r3, #6]
 80190ac:	220e      	movs	r2, #14
 80190ae:	18ba      	adds	r2, r7, r2
 80190b0:	b299      	uxth	r1, r3
 80190b2:	2907      	cmp	r1, #7
 80190b4:	d900      	bls.n	80190b8 <USBD_CDC_Setup+0x94>
 80190b6:	2307      	movs	r3, #7
 80190b8:	8013      	strh	r3, [r2, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80190ba:	6939      	ldr	r1, [r7, #16]
 80190bc:	230e      	movs	r3, #14
 80190be:	18fb      	adds	r3, r7, r3
 80190c0:	881a      	ldrh	r2, [r3, #0]
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	0018      	movs	r0, r3
 80190c6:	f001 ff8b 	bl	801afe0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80190ca:	e099      	b.n	8019200 <USBD_CDC_Setup+0x1dc>
          hcdc->CmdOpCode = req->bRequest;
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	7859      	ldrb	r1, [r3, #1]
 80190d0:	693a      	ldr	r2, [r7, #16]
 80190d2:	2380      	movs	r3, #128	; 0x80
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80190d8:	683b      	ldr	r3, [r7, #0]
 80190da:	88db      	ldrh	r3, [r3, #6]
 80190dc:	2b3f      	cmp	r3, #63	; 0x3f
 80190de:	d803      	bhi.n	80190e8 <USBD_CDC_Setup+0xc4>
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	88db      	ldrh	r3, [r3, #6]
 80190e4:	b2da      	uxtb	r2, r3
 80190e6:	e000      	b.n	80190ea <USBD_CDC_Setup+0xc6>
 80190e8:	2240      	movs	r2, #64	; 0x40
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	4948      	ldr	r1, [pc, #288]	; (8019210 <USBD_CDC_Setup+0x1ec>)
 80190ee:	545a      	strb	r2, [r3, r1]
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80190f0:	6939      	ldr	r1, [r7, #16]
 80190f2:	693b      	ldr	r3, [r7, #16]
 80190f4:	4a46      	ldr	r2, [pc, #280]	; (8019210 <USBD_CDC_Setup+0x1ec>)
 80190f6:	5c9b      	ldrb	r3, [r3, r2]
 80190f8:	001a      	movs	r2, r3
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	0018      	movs	r0, r3
 80190fe:	f001 ff9c 	bl	801b03a <USBD_CtlPrepareRx>
      break;
 8019102:	e07d      	b.n	8019200 <USBD_CDC_Setup+0x1dc>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	23b5      	movs	r3, #181	; 0xb5
 8019108:	009b      	lsls	r3, r3, #2
 801910a:	58d3      	ldr	r3, [r2, r3]
 801910c:	687a      	ldr	r2, [r7, #4]
 801910e:	33b0      	adds	r3, #176	; 0xb0
 8019110:	009b      	lsls	r3, r3, #2
 8019112:	18d3      	adds	r3, r2, r3
 8019114:	3304      	adds	r3, #4
 8019116:	681b      	ldr	r3, [r3, #0]
 8019118:	689b      	ldr	r3, [r3, #8]
 801911a:	683a      	ldr	r2, [r7, #0]
 801911c:	7850      	ldrb	r0, [r2, #1]
 801911e:	6839      	ldr	r1, [r7, #0]
 8019120:	2200      	movs	r2, #0
 8019122:	4798      	blx	r3
      break;
 8019124:	e06c      	b.n	8019200 <USBD_CDC_Setup+0x1dc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	785b      	ldrb	r3, [r3, #1]
 801912a:	2b0b      	cmp	r3, #11
 801912c:	d03c      	beq.n	80191a8 <USBD_CDC_Setup+0x184>
 801912e:	dc4d      	bgt.n	80191cc <USBD_CDC_Setup+0x1a8>
 8019130:	2b0a      	cmp	r3, #10
 8019132:	d01f      	beq.n	8019174 <USBD_CDC_Setup+0x150>
 8019134:	dc4a      	bgt.n	80191cc <USBD_CDC_Setup+0x1a8>
 8019136:	2b00      	cmp	r3, #0
 8019138:	d002      	beq.n	8019140 <USBD_CDC_Setup+0x11c>
 801913a:	2b01      	cmp	r3, #1
 801913c:	d051      	beq.n	80191e2 <USBD_CDC_Setup+0x1be>
 801913e:	e045      	b.n	80191cc <USBD_CDC_Setup+0x1a8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	23a7      	movs	r3, #167	; 0xa7
 8019144:	009b      	lsls	r3, r3, #2
 8019146:	5cd3      	ldrb	r3, [r2, r3]
 8019148:	b2db      	uxtb	r3, r3
 801914a:	2b03      	cmp	r3, #3
 801914c:	d107      	bne.n	801915e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801914e:	230a      	movs	r3, #10
 8019150:	18f9      	adds	r1, r7, r3
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2202      	movs	r2, #2
 8019156:	0018      	movs	r0, r3
 8019158:	f001 ff42 	bl	801afe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801915c:	e044      	b.n	80191e8 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 801915e:	683a      	ldr	r2, [r7, #0]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	0011      	movs	r1, r2
 8019164:	0018      	movs	r0, r3
 8019166:	f001 feb3 	bl	801aed0 <USBD_CtlError>
            ret = USBD_FAIL;
 801916a:	2317      	movs	r3, #23
 801916c:	18fb      	adds	r3, r7, r3
 801916e:	2203      	movs	r2, #3
 8019170:	701a      	strb	r2, [r3, #0]
          break;
 8019172:	e039      	b.n	80191e8 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019174:	687a      	ldr	r2, [r7, #4]
 8019176:	23a7      	movs	r3, #167	; 0xa7
 8019178:	009b      	lsls	r3, r3, #2
 801917a:	5cd3      	ldrb	r3, [r2, r3]
 801917c:	b2db      	uxtb	r3, r3
 801917e:	2b03      	cmp	r3, #3
 8019180:	d107      	bne.n	8019192 <USBD_CDC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8019182:	230d      	movs	r3, #13
 8019184:	18f9      	adds	r1, r7, r3
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2201      	movs	r2, #1
 801918a:	0018      	movs	r0, r3
 801918c:	f001 ff28 	bl	801afe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019190:	e02a      	b.n	80191e8 <USBD_CDC_Setup+0x1c4>
            USBD_CtlError(pdev, req);
 8019192:	683a      	ldr	r2, [r7, #0]
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	0011      	movs	r1, r2
 8019198:	0018      	movs	r0, r3
 801919a:	f001 fe99 	bl	801aed0 <USBD_CtlError>
            ret = USBD_FAIL;
 801919e:	2317      	movs	r3, #23
 80191a0:	18fb      	adds	r3, r7, r3
 80191a2:	2203      	movs	r2, #3
 80191a4:	701a      	strb	r2, [r3, #0]
          break;
 80191a6:	e01f      	b.n	80191e8 <USBD_CDC_Setup+0x1c4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80191a8:	687a      	ldr	r2, [r7, #4]
 80191aa:	23a7      	movs	r3, #167	; 0xa7
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	5cd3      	ldrb	r3, [r2, r3]
 80191b0:	b2db      	uxtb	r3, r3
 80191b2:	2b03      	cmp	r3, #3
 80191b4:	d017      	beq.n	80191e6 <USBD_CDC_Setup+0x1c2>
          {
            USBD_CtlError(pdev, req);
 80191b6:	683a      	ldr	r2, [r7, #0]
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	0011      	movs	r1, r2
 80191bc:	0018      	movs	r0, r3
 80191be:	f001 fe87 	bl	801aed0 <USBD_CtlError>
            ret = USBD_FAIL;
 80191c2:	2317      	movs	r3, #23
 80191c4:	18fb      	adds	r3, r7, r3
 80191c6:	2203      	movs	r2, #3
 80191c8:	701a      	strb	r2, [r3, #0]
          }
          break;
 80191ca:	e00c      	b.n	80191e6 <USBD_CDC_Setup+0x1c2>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80191cc:	683a      	ldr	r2, [r7, #0]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	0011      	movs	r1, r2
 80191d2:	0018      	movs	r0, r3
 80191d4:	f001 fe7c 	bl	801aed0 <USBD_CtlError>
          ret = USBD_FAIL;
 80191d8:	2317      	movs	r3, #23
 80191da:	18fb      	adds	r3, r7, r3
 80191dc:	2203      	movs	r2, #3
 80191de:	701a      	strb	r2, [r3, #0]
          break;
 80191e0:	e002      	b.n	80191e8 <USBD_CDC_Setup+0x1c4>
          break;
 80191e2:	46c0      	nop			; (mov r8, r8)
 80191e4:	e00c      	b.n	8019200 <USBD_CDC_Setup+0x1dc>
          break;
 80191e6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80191e8:	e00a      	b.n	8019200 <USBD_CDC_Setup+0x1dc>

    default:
      USBD_CtlError(pdev, req);
 80191ea:	683a      	ldr	r2, [r7, #0]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	0011      	movs	r1, r2
 80191f0:	0018      	movs	r0, r3
 80191f2:	f001 fe6d 	bl	801aed0 <USBD_CtlError>
      ret = USBD_FAIL;
 80191f6:	2317      	movs	r3, #23
 80191f8:	18fb      	adds	r3, r7, r3
 80191fa:	2203      	movs	r2, #3
 80191fc:	701a      	strb	r2, [r3, #0]
      break;
 80191fe:	46c0      	nop			; (mov r8, r8)
  }

  return (uint8_t)ret;
 8019200:	2317      	movs	r3, #23
 8019202:	18fb      	adds	r3, r7, r3
 8019204:	781b      	ldrb	r3, [r3, #0]
}
 8019206:	0018      	movs	r0, r3
 8019208:	46bd      	mov	sp, r7
 801920a:	b006      	add	sp, #24
 801920c:	bd80      	pop	{r7, pc}
 801920e:	46c0      	nop			; (mov r8, r8)
 8019210:	00000201 	.word	0x00000201

08019214 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019214:	b590      	push	{r4, r7, lr}
 8019216:	b085      	sub	sp, #20
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	000a      	movs	r2, r1
 801921e:	1cfb      	adds	r3, r7, #3
 8019220:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	23b2      	movs	r3, #178	; 0xb2
 8019226:	009b      	lsls	r3, r3, #2
 8019228:	58d3      	ldr	r3, [r2, r3]
 801922a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801922c:	687a      	ldr	r2, [r7, #4]
 801922e:	23b5      	movs	r3, #181	; 0xb5
 8019230:	009b      	lsls	r3, r3, #2
 8019232:	58d2      	ldr	r2, [r2, r3]
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	32b0      	adds	r2, #176	; 0xb0
 8019238:	0092      	lsls	r2, r2, #2
 801923a:	58d3      	ldr	r3, [r2, r3]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d101      	bne.n	8019244 <USBD_CDC_DataIn+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8019240:	2303      	movs	r3, #3
 8019242:	e072      	b.n	801932a <USBD_CDC_DataIn+0x116>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019244:	687a      	ldr	r2, [r7, #4]
 8019246:	23b5      	movs	r3, #181	; 0xb5
 8019248:	009b      	lsls	r3, r3, #2
 801924a:	58d2      	ldr	r2, [r2, r3]
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	32b0      	adds	r2, #176	; 0xb0
 8019250:	0092      	lsls	r2, r2, #2
 8019252:	58d3      	ldr	r3, [r2, r3]
 8019254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8019256:	1cfb      	adds	r3, r7, #3
 8019258:	781b      	ldrb	r3, [r3, #0]
 801925a:	220f      	movs	r2, #15
 801925c:	401a      	ands	r2, r3
 801925e:	6879      	ldr	r1, [r7, #4]
 8019260:	0013      	movs	r3, r2
 8019262:	009b      	lsls	r3, r3, #2
 8019264:	189b      	adds	r3, r3, r2
 8019266:	009b      	lsls	r3, r3, #2
 8019268:	18cb      	adds	r3, r1, r3
 801926a:	3318      	adds	r3, #24
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d031      	beq.n	80192d6 <USBD_CDC_DataIn+0xc2>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8019272:	1cfb      	adds	r3, r7, #3
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	220f      	movs	r2, #15
 8019278:	401a      	ands	r2, r3
 801927a:	6879      	ldr	r1, [r7, #4]
 801927c:	0013      	movs	r3, r2
 801927e:	009b      	lsls	r3, r3, #2
 8019280:	189b      	adds	r3, r3, r2
 8019282:	009b      	lsls	r3, r3, #2
 8019284:	18cb      	adds	r3, r1, r3
 8019286:	3318      	adds	r3, #24
 8019288:	6818      	ldr	r0, [r3, #0]
 801928a:	1cfb      	adds	r3, r7, #3
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	220f      	movs	r2, #15
 8019290:	401a      	ands	r2, r3
 8019292:	68f9      	ldr	r1, [r7, #12]
 8019294:	0013      	movs	r3, r2
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	189b      	adds	r3, r3, r2
 801929a:	00db      	lsls	r3, r3, #3
 801929c:	18cb      	adds	r3, r1, r3
 801929e:	3324      	adds	r3, #36	; 0x24
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	0019      	movs	r1, r3
 80192a4:	f7ed f83e 	bl	8006324 <__aeabi_uidivmod>
 80192a8:	1e0b      	subs	r3, r1, #0
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80192aa:	d114      	bne.n	80192d6 <USBD_CDC_DataIn+0xc2>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80192ac:	1cfb      	adds	r3, r7, #3
 80192ae:	781b      	ldrb	r3, [r3, #0]
 80192b0:	220f      	movs	r2, #15
 80192b2:	401a      	ands	r2, r3
 80192b4:	6879      	ldr	r1, [r7, #4]
 80192b6:	0013      	movs	r3, r2
 80192b8:	009b      	lsls	r3, r3, #2
 80192ba:	189b      	adds	r3, r3, r2
 80192bc:	009b      	lsls	r3, r3, #2
 80192be:	18cb      	adds	r3, r1, r3
 80192c0:	3318      	adds	r3, #24
 80192c2:	2200      	movs	r2, #0
 80192c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80192c6:	1cfb      	adds	r3, r7, #3
 80192c8:	7819      	ldrb	r1, [r3, #0]
 80192ca:	6878      	ldr	r0, [r7, #4]
 80192cc:	2300      	movs	r3, #0
 80192ce:	2200      	movs	r2, #0
 80192d0:	f008 f996 	bl	8021600 <USBD_LL_Transmit>
 80192d4:	e028      	b.n	8019328 <USBD_CDC_DataIn+0x114>
  }
  else
  {
    hcdc->TxState = 0U;
 80192d6:	68ba      	ldr	r2, [r7, #8]
 80192d8:	2385      	movs	r3, #133	; 0x85
 80192da:	009b      	lsls	r3, r3, #2
 80192dc:	2100      	movs	r1, #0
 80192de:	50d1      	str	r1, [r2, r3]

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80192e0:	687a      	ldr	r2, [r7, #4]
 80192e2:	23b5      	movs	r3, #181	; 0xb5
 80192e4:	009b      	lsls	r3, r3, #2
 80192e6:	58d3      	ldr	r3, [r2, r3]
 80192e8:	687a      	ldr	r2, [r7, #4]
 80192ea:	33b0      	adds	r3, #176	; 0xb0
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	18d3      	adds	r3, r2, r3
 80192f0:	3304      	adds	r3, #4
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	691b      	ldr	r3, [r3, #16]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d016      	beq.n	8019328 <USBD_CDC_DataIn+0x114>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80192fa:	687a      	ldr	r2, [r7, #4]
 80192fc:	23b5      	movs	r3, #181	; 0xb5
 80192fe:	009b      	lsls	r3, r3, #2
 8019300:	58d3      	ldr	r3, [r2, r3]
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	33b0      	adds	r3, #176	; 0xb0
 8019306:	009b      	lsls	r3, r3, #2
 8019308:	18d3      	adds	r3, r2, r3
 801930a:	3304      	adds	r3, #4
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	691c      	ldr	r4, [r3, #16]
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	2382      	movs	r3, #130	; 0x82
 8019314:	009b      	lsls	r3, r3, #2
 8019316:	58d0      	ldr	r0, [r2, r3]
 8019318:	68bb      	ldr	r3, [r7, #8]
 801931a:	2284      	movs	r2, #132	; 0x84
 801931c:	0092      	lsls	r2, r2, #2
 801931e:	1899      	adds	r1, r3, r2
 8019320:	1cfb      	adds	r3, r7, #3
 8019322:	781b      	ldrb	r3, [r3, #0]
 8019324:	001a      	movs	r2, r3
 8019326:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8019328:	2300      	movs	r3, #0
}
 801932a:	0018      	movs	r0, r3
 801932c:	46bd      	mov	sp, r7
 801932e:	b005      	add	sp, #20
 8019330:	bd90      	pop	{r4, r7, pc}

08019332 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019332:	b580      	push	{r7, lr}
 8019334:	b084      	sub	sp, #16
 8019336:	af00      	add	r7, sp, #0
 8019338:	6078      	str	r0, [r7, #4]
 801933a:	000a      	movs	r2, r1
 801933c:	1cfb      	adds	r3, r7, #3
 801933e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019340:	687a      	ldr	r2, [r7, #4]
 8019342:	23b5      	movs	r3, #181	; 0xb5
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	58d2      	ldr	r2, [r2, r3]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	32b0      	adds	r2, #176	; 0xb0
 801934c:	0092      	lsls	r2, r2, #2
 801934e:	58d3      	ldr	r3, [r2, r3]
 8019350:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8019352:	687a      	ldr	r2, [r7, #4]
 8019354:	23b5      	movs	r3, #181	; 0xb5
 8019356:	009b      	lsls	r3, r3, #2
 8019358:	58d2      	ldr	r2, [r2, r3]
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	32b0      	adds	r2, #176	; 0xb0
 801935e:	0092      	lsls	r2, r2, #2
 8019360:	58d3      	ldr	r3, [r2, r3]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d101      	bne.n	801936a <USBD_CDC_DataOut+0x38>
  {
    return (uint8_t)USBD_FAIL;
 8019366:	2303      	movs	r3, #3
 8019368:	e022      	b.n	80193b0 <USBD_CDC_DataOut+0x7e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801936a:	1cfb      	adds	r3, r7, #3
 801936c:	781a      	ldrb	r2, [r3, #0]
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	0011      	movs	r1, r2
 8019372:	0018      	movs	r0, r3
 8019374:	f008 f9a4 	bl	80216c0 <USBD_LL_GetRxDataSize>
 8019378:	0001      	movs	r1, r0
 801937a:	68fa      	ldr	r2, [r7, #12]
 801937c:	2383      	movs	r3, #131	; 0x83
 801937e:	009b      	lsls	r3, r3, #2
 8019380:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019382:	687a      	ldr	r2, [r7, #4]
 8019384:	23b5      	movs	r3, #181	; 0xb5
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	58d3      	ldr	r3, [r2, r3]
 801938a:	687a      	ldr	r2, [r7, #4]
 801938c:	33b0      	adds	r3, #176	; 0xb0
 801938e:	009b      	lsls	r3, r3, #2
 8019390:	18d3      	adds	r3, r2, r3
 8019392:	3304      	adds	r3, #4
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	68da      	ldr	r2, [r3, #12]
 8019398:	68f9      	ldr	r1, [r7, #12]
 801939a:	2381      	movs	r3, #129	; 0x81
 801939c:	009b      	lsls	r3, r3, #2
 801939e:	58c8      	ldr	r0, [r1, r3]
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	2183      	movs	r1, #131	; 0x83
 80193a4:	0089      	lsls	r1, r1, #2
 80193a6:	468c      	mov	ip, r1
 80193a8:	4463      	add	r3, ip
 80193aa:	0019      	movs	r1, r3
 80193ac:	4790      	blx	r2

  return (uint8_t)USBD_OK;
 80193ae:	2300      	movs	r3, #0
}
 80193b0:	0018      	movs	r0, r3
 80193b2:	46bd      	mov	sp, r7
 80193b4:	b004      	add	sp, #16
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80193b8:	b590      	push	{r4, r7, lr}
 80193ba:	b085      	sub	sp, #20
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80193c0:	687a      	ldr	r2, [r7, #4]
 80193c2:	23b5      	movs	r3, #181	; 0xb5
 80193c4:	009b      	lsls	r3, r3, #2
 80193c6:	58d2      	ldr	r2, [r2, r3]
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	32b0      	adds	r2, #176	; 0xb0
 80193cc:	0092      	lsls	r2, r2, #2
 80193ce:	58d3      	ldr	r3, [r2, r3]
 80193d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d101      	bne.n	80193dc <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80193d8:	2303      	movs	r3, #3
 80193da:	e02c      	b.n	8019436 <USBD_CDC_EP0_RxReady+0x7e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	23b5      	movs	r3, #181	; 0xb5
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	58d3      	ldr	r3, [r2, r3]
 80193e4:	687a      	ldr	r2, [r7, #4]
 80193e6:	33b0      	adds	r3, #176	; 0xb0
 80193e8:	009b      	lsls	r3, r3, #2
 80193ea:	18d3      	adds	r3, r2, r3
 80193ec:	3304      	adds	r3, #4
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d01f      	beq.n	8019434 <USBD_CDC_EP0_RxReady+0x7c>
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	2380      	movs	r3, #128	; 0x80
 80193f8:	009b      	lsls	r3, r3, #2
 80193fa:	5cd3      	ldrb	r3, [r2, r3]
 80193fc:	2bff      	cmp	r3, #255	; 0xff
 80193fe:	d019      	beq.n	8019434 <USBD_CDC_EP0_RxReady+0x7c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8019400:	687a      	ldr	r2, [r7, #4]
 8019402:	23b5      	movs	r3, #181	; 0xb5
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	58d3      	ldr	r3, [r2, r3]
 8019408:	687a      	ldr	r2, [r7, #4]
 801940a:	33b0      	adds	r3, #176	; 0xb0
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	18d3      	adds	r3, r2, r3
 8019410:	3304      	adds	r3, #4
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	689b      	ldr	r3, [r3, #8]
 8019416:	68f9      	ldr	r1, [r7, #12]
 8019418:	2280      	movs	r2, #128	; 0x80
 801941a:	0092      	lsls	r2, r2, #2
 801941c:	5c88      	ldrb	r0, [r1, r2]
                                                                     (uint8_t *)hcdc->data,
 801941e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8019420:	68fa      	ldr	r2, [r7, #12]
 8019422:	4c07      	ldr	r4, [pc, #28]	; (8019440 <USBD_CDC_EP0_RxReady+0x88>)
 8019424:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8019426:	b292      	uxth	r2, r2
 8019428:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801942a:	68fa      	ldr	r2, [r7, #12]
 801942c:	2380      	movs	r3, #128	; 0x80
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	21ff      	movs	r1, #255	; 0xff
 8019432:	54d1      	strb	r1, [r2, r3]
  }

  return (uint8_t)USBD_OK;
 8019434:	2300      	movs	r3, #0
}
 8019436:	0018      	movs	r0, r3
 8019438:	46bd      	mov	sp, r7
 801943a:	b005      	add	sp, #20
 801943c:	bd90      	pop	{r4, r7, pc}
 801943e:	46c0      	nop			; (mov r8, r8)
 8019440:	00000201 	.word	0x00000201

08019444 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b086      	sub	sp, #24
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801944c:	4b20      	ldr	r3, [pc, #128]	; (80194d0 <USBD_CDC_GetFSCfgDesc+0x8c>)
 801944e:	2182      	movs	r1, #130	; 0x82
 8019450:	0018      	movs	r0, r3
 8019452:	f000 fd9c 	bl	8019f8e <USBD_GetEpDesc>
 8019456:	0003      	movs	r3, r0
 8019458:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801945a:	4b1d      	ldr	r3, [pc, #116]	; (80194d0 <USBD_CDC_GetFSCfgDesc+0x8c>)
 801945c:	2101      	movs	r1, #1
 801945e:	0018      	movs	r0, r3
 8019460:	f000 fd95 	bl	8019f8e <USBD_GetEpDesc>
 8019464:	0003      	movs	r3, r0
 8019466:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019468:	4b19      	ldr	r3, [pc, #100]	; (80194d0 <USBD_CDC_GetFSCfgDesc+0x8c>)
 801946a:	2181      	movs	r1, #129	; 0x81
 801946c:	0018      	movs	r0, r3
 801946e:	f000 fd8e 	bl	8019f8e <USBD_GetEpDesc>
 8019472:	0003      	movs	r3, r0
 8019474:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8019476:	697b      	ldr	r3, [r7, #20]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d002      	beq.n	8019482 <USBD_CDC_GetFSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801947c:	697b      	ldr	r3, [r7, #20]
 801947e:	2210      	movs	r2, #16
 8019480:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8019482:	693b      	ldr	r3, [r7, #16]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d00b      	beq.n	80194a0 <USBD_CDC_GetFSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	791a      	ldrb	r2, [r3, #4]
 801948c:	2100      	movs	r1, #0
 801948e:	400a      	ands	r2, r1
 8019490:	1c11      	adds	r1, r2, #0
 8019492:	2240      	movs	r2, #64	; 0x40
 8019494:	430a      	orrs	r2, r1
 8019496:	711a      	strb	r2, [r3, #4]
 8019498:	795a      	ldrb	r2, [r3, #5]
 801949a:	2100      	movs	r1, #0
 801949c:	400a      	ands	r2, r1
 801949e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d00b      	beq.n	80194be <USBD_CDC_GetFSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80194a6:	68fb      	ldr	r3, [r7, #12]
 80194a8:	791a      	ldrb	r2, [r3, #4]
 80194aa:	2100      	movs	r1, #0
 80194ac:	400a      	ands	r2, r1
 80194ae:	1c11      	adds	r1, r2, #0
 80194b0:	2240      	movs	r2, #64	; 0x40
 80194b2:	430a      	orrs	r2, r1
 80194b4:	711a      	strb	r2, [r3, #4]
 80194b6:	795a      	ldrb	r2, [r3, #5]
 80194b8:	2100      	movs	r1, #0
 80194ba:	400a      	ands	r2, r1
 80194bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	2243      	movs	r2, #67	; 0x43
 80194c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80194c4:	4b02      	ldr	r3, [pc, #8]	; (80194d0 <USBD_CDC_GetFSCfgDesc+0x8c>)
}
 80194c6:	0018      	movs	r0, r3
 80194c8:	46bd      	mov	sp, r7
 80194ca:	b006      	add	sp, #24
 80194cc:	bd80      	pop	{r7, pc}
 80194ce:	46c0      	nop			; (mov r8, r8)
 80194d0:	20000168 	.word	0x20000168

080194d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b086      	sub	sp, #24
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80194dc:	4b20      	ldr	r3, [pc, #128]	; (8019560 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80194de:	2182      	movs	r1, #130	; 0x82
 80194e0:	0018      	movs	r0, r3
 80194e2:	f000 fd54 	bl	8019f8e <USBD_GetEpDesc>
 80194e6:	0003      	movs	r3, r0
 80194e8:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80194ea:	4b1d      	ldr	r3, [pc, #116]	; (8019560 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80194ec:	2101      	movs	r1, #1
 80194ee:	0018      	movs	r0, r3
 80194f0:	f000 fd4d 	bl	8019f8e <USBD_GetEpDesc>
 80194f4:	0003      	movs	r3, r0
 80194f6:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80194f8:	4b19      	ldr	r3, [pc, #100]	; (8019560 <USBD_CDC_GetHSCfgDesc+0x8c>)
 80194fa:	2181      	movs	r1, #129	; 0x81
 80194fc:	0018      	movs	r0, r3
 80194fe:	f000 fd46 	bl	8019f8e <USBD_GetEpDesc>
 8019502:	0003      	movs	r3, r0
 8019504:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d002      	beq.n	8019512 <USBD_CDC_GetHSCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	2210      	movs	r2, #16
 8019510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8019512:	693b      	ldr	r3, [r7, #16]
 8019514:	2b00      	cmp	r3, #0
 8019516:	d00b      	beq.n	8019530 <USBD_CDC_GetHSCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	791a      	ldrb	r2, [r3, #4]
 801951c:	2100      	movs	r1, #0
 801951e:	400a      	ands	r2, r1
 8019520:	711a      	strb	r2, [r3, #4]
 8019522:	795a      	ldrb	r2, [r3, #5]
 8019524:	2100      	movs	r1, #0
 8019526:	400a      	ands	r2, r1
 8019528:	1c11      	adds	r1, r2, #0
 801952a:	2202      	movs	r2, #2
 801952c:	430a      	orrs	r2, r1
 801952e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d00b      	beq.n	801954e <USBD_CDC_GetHSCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	791a      	ldrb	r2, [r3, #4]
 801953a:	2100      	movs	r1, #0
 801953c:	400a      	ands	r2, r1
 801953e:	711a      	strb	r2, [r3, #4]
 8019540:	795a      	ldrb	r2, [r3, #5]
 8019542:	2100      	movs	r1, #0
 8019544:	400a      	ands	r2, r1
 8019546:	1c11      	adds	r1, r2, #0
 8019548:	2202      	movs	r2, #2
 801954a:	430a      	orrs	r2, r1
 801954c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	2243      	movs	r2, #67	; 0x43
 8019552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8019554:	4b02      	ldr	r3, [pc, #8]	; (8019560 <USBD_CDC_GetHSCfgDesc+0x8c>)
}
 8019556:	0018      	movs	r0, r3
 8019558:	46bd      	mov	sp, r7
 801955a:	b006      	add	sp, #24
 801955c:	bd80      	pop	{r7, pc}
 801955e:	46c0      	nop			; (mov r8, r8)
 8019560:	20000168 	.word	0x20000168

08019564 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b086      	sub	sp, #24
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801956c:	4b20      	ldr	r3, [pc, #128]	; (80195f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 801956e:	2182      	movs	r1, #130	; 0x82
 8019570:	0018      	movs	r0, r3
 8019572:	f000 fd0c 	bl	8019f8e <USBD_GetEpDesc>
 8019576:	0003      	movs	r3, r0
 8019578:	617b      	str	r3, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801957a:	4b1d      	ldr	r3, [pc, #116]	; (80195f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 801957c:	2101      	movs	r1, #1
 801957e:	0018      	movs	r0, r3
 8019580:	f000 fd05 	bl	8019f8e <USBD_GetEpDesc>
 8019584:	0003      	movs	r3, r0
 8019586:	613b      	str	r3, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8019588:	4b19      	ldr	r3, [pc, #100]	; (80195f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
 801958a:	2181      	movs	r1, #129	; 0x81
 801958c:	0018      	movs	r0, r3
 801958e:	f000 fcfe 	bl	8019f8e <USBD_GetEpDesc>
 8019592:	0003      	movs	r3, r0
 8019594:	60fb      	str	r3, [r7, #12]

  if (pEpCmdDesc != NULL)
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d002      	beq.n	80195a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x3e>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	2210      	movs	r2, #16
 80195a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80195a2:	693b      	ldr	r3, [r7, #16]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d00b      	beq.n	80195c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x5c>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	791a      	ldrb	r2, [r3, #4]
 80195ac:	2100      	movs	r1, #0
 80195ae:	400a      	ands	r2, r1
 80195b0:	1c11      	adds	r1, r2, #0
 80195b2:	2240      	movs	r2, #64	; 0x40
 80195b4:	430a      	orrs	r2, r1
 80195b6:	711a      	strb	r2, [r3, #4]
 80195b8:	795a      	ldrb	r2, [r3, #5]
 80195ba:	2100      	movs	r1, #0
 80195bc:	400a      	ands	r2, r1
 80195be:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d00b      	beq.n	80195de <USBD_CDC_GetOtherSpeedCfgDesc+0x7a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	791a      	ldrb	r2, [r3, #4]
 80195ca:	2100      	movs	r1, #0
 80195cc:	400a      	ands	r2, r1
 80195ce:	1c11      	adds	r1, r2, #0
 80195d0:	2240      	movs	r2, #64	; 0x40
 80195d2:	430a      	orrs	r2, r1
 80195d4:	711a      	strb	r2, [r3, #4]
 80195d6:	795a      	ldrb	r2, [r3, #5]
 80195d8:	2100      	movs	r1, #0
 80195da:	400a      	ands	r2, r1
 80195dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2243      	movs	r2, #67	; 0x43
 80195e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80195e4:	4b02      	ldr	r3, [pc, #8]	; (80195f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8c>)
}
 80195e6:	0018      	movs	r0, r3
 80195e8:	46bd      	mov	sp, r7
 80195ea:	b006      	add	sp, #24
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	46c0      	nop			; (mov r8, r8)
 80195f0:	20000168 	.word	0x20000168

080195f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b082      	sub	sp, #8
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	220a      	movs	r2, #10
 8019600:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8019602:	4b02      	ldr	r3, [pc, #8]	; (801960c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8019604:	0018      	movs	r0, r3
 8019606:	46bd      	mov	sp, r7
 8019608:	b002      	add	sp, #8
 801960a:	bd80      	pop	{r7, pc}
 801960c:	20000124 	.word	0x20000124

08019610 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8019610:	b580      	push	{r7, lr}
 8019612:	b082      	sub	sp, #8
 8019614:	af00      	add	r7, sp, #0
 8019616:	6078      	str	r0, [r7, #4]
 8019618:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d101      	bne.n	8019624 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8019620:	2303      	movs	r3, #3
 8019622:	e00b      	b.n	801963c <USBD_CDC_RegisterInterface+0x2c>
  }

  pdev->pUserData[pdev->classId] = fops;
 8019624:	687a      	ldr	r2, [r7, #4]
 8019626:	23b5      	movs	r3, #181	; 0xb5
 8019628:	009b      	lsls	r3, r3, #2
 801962a:	58d3      	ldr	r3, [r2, r3]
 801962c:	687a      	ldr	r2, [r7, #4]
 801962e:	33b0      	adds	r3, #176	; 0xb0
 8019630:	009b      	lsls	r3, r3, #2
 8019632:	18d3      	adds	r3, r2, r3
 8019634:	3304      	adds	r3, #4
 8019636:	683a      	ldr	r2, [r7, #0]
 8019638:	601a      	str	r2, [r3, #0]

  return (uint8_t)USBD_OK;
 801963a:	2300      	movs	r3, #0
}
 801963c:	0018      	movs	r0, r3
 801963e:	46bd      	mov	sp, r7
 8019640:	b002      	add	sp, #8
 8019642:	bd80      	pop	{r7, pc}

08019644 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	60f8      	str	r0, [r7, #12]
 801964c:	60b9      	str	r1, [r7, #8]
 801964e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019650:	68fa      	ldr	r2, [r7, #12]
 8019652:	23b5      	movs	r3, #181	; 0xb5
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	58d2      	ldr	r2, [r2, r3]
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	32b0      	adds	r2, #176	; 0xb0
 801965c:	0092      	lsls	r2, r2, #2
 801965e:	58d3      	ldr	r3, [r2, r3]
 8019660:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d101      	bne.n	801966c <USBD_CDC_SetTxBuffer+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8019668:	2303      	movs	r3, #3
 801966a:	e00a      	b.n	8019682 <USBD_CDC_SetTxBuffer+0x3e>
  }

  hcdc->TxBuffer = pbuff;
 801966c:	697a      	ldr	r2, [r7, #20]
 801966e:	2382      	movs	r3, #130	; 0x82
 8019670:	009b      	lsls	r3, r3, #2
 8019672:	68b9      	ldr	r1, [r7, #8]
 8019674:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8019676:	697a      	ldr	r2, [r7, #20]
 8019678:	2384      	movs	r3, #132	; 0x84
 801967a:	009b      	lsls	r3, r3, #2
 801967c:	6879      	ldr	r1, [r7, #4]
 801967e:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 8019680:	2300      	movs	r3, #0
}
 8019682:	0018      	movs	r0, r3
 8019684:	46bd      	mov	sp, r7
 8019686:	b006      	add	sp, #24
 8019688:	bd80      	pop	{r7, pc}

0801968a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801968a:	b580      	push	{r7, lr}
 801968c:	b084      	sub	sp, #16
 801968e:	af00      	add	r7, sp, #0
 8019690:	6078      	str	r0, [r7, #4]
 8019692:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	23b5      	movs	r3, #181	; 0xb5
 8019698:	009b      	lsls	r3, r3, #2
 801969a:	58d2      	ldr	r2, [r2, r3]
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	32b0      	adds	r2, #176	; 0xb0
 80196a0:	0092      	lsls	r2, r2, #2
 80196a2:	58d3      	ldr	r3, [r2, r3]
 80196a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	d101      	bne.n	80196b0 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80196ac:	2303      	movs	r3, #3
 80196ae:	e005      	b.n	80196bc <USBD_CDC_SetRxBuffer+0x32>
  }

  hcdc->RxBuffer = pbuff;
 80196b0:	68fa      	ldr	r2, [r7, #12]
 80196b2:	2381      	movs	r3, #129	; 0x81
 80196b4:	009b      	lsls	r3, r3, #2
 80196b6:	6839      	ldr	r1, [r7, #0]
 80196b8:	50d1      	str	r1, [r2, r3]

  return (uint8_t)USBD_OK;
 80196ba:	2300      	movs	r3, #0
}
 80196bc:	0018      	movs	r0, r3
 80196be:	46bd      	mov	sp, r7
 80196c0:	b004      	add	sp, #16
 80196c2:	bd80      	pop	{r7, pc}

080196c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80196c4:	b590      	push	{r4, r7, lr}
 80196c6:	b085      	sub	sp, #20
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	23b5      	movs	r3, #181	; 0xb5
 80196d0:	009b      	lsls	r3, r3, #2
 80196d2:	58d2      	ldr	r2, [r2, r3]
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	32b0      	adds	r2, #176	; 0xb0
 80196d8:	0092      	lsls	r2, r2, #2
 80196da:	58d3      	ldr	r3, [r2, r3]
 80196dc:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80196de:	230f      	movs	r3, #15
 80196e0:	18fb      	adds	r3, r7, r3
 80196e2:	2201      	movs	r2, #1
 80196e4:	701a      	strb	r2, [r3, #0]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80196e6:	68bb      	ldr	r3, [r7, #8]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d101      	bne.n	80196f0 <USBD_CDC_TransmitPacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80196ec:	2303      	movs	r3, #3
 80196ee:	e030      	b.n	8019752 <USBD_CDC_TransmitPacket+0x8e>
  }

  if (hcdc->TxState == 0U)
 80196f0:	68ba      	ldr	r2, [r7, #8]
 80196f2:	2385      	movs	r3, #133	; 0x85
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	58d3      	ldr	r3, [r2, r3]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d127      	bne.n	801974c <USBD_CDC_TransmitPacket+0x88>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80196fc:	68ba      	ldr	r2, [r7, #8]
 80196fe:	2385      	movs	r3, #133	; 0x85
 8019700:	009b      	lsls	r3, r3, #2
 8019702:	2101      	movs	r1, #1
 8019704:	50d1      	str	r1, [r2, r3]

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8019706:	4b15      	ldr	r3, [pc, #84]	; (801975c <USBD_CDC_TransmitPacket+0x98>)
 8019708:	781b      	ldrb	r3, [r3, #0]
 801970a:	001a      	movs	r2, r3
 801970c:	230f      	movs	r3, #15
 801970e:	401a      	ands	r2, r3
 8019710:	68b9      	ldr	r1, [r7, #8]
 8019712:	2384      	movs	r3, #132	; 0x84
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	58c9      	ldr	r1, [r1, r3]
 8019718:	6878      	ldr	r0, [r7, #4]
 801971a:	0013      	movs	r3, r2
 801971c:	009b      	lsls	r3, r3, #2
 801971e:	189b      	adds	r3, r3, r2
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	18c3      	adds	r3, r0, r3
 8019724:	3318      	adds	r3, #24
 8019726:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8019728:	4b0c      	ldr	r3, [pc, #48]	; (801975c <USBD_CDC_TransmitPacket+0x98>)
 801972a:	7819      	ldrb	r1, [r3, #0]
 801972c:	68ba      	ldr	r2, [r7, #8]
 801972e:	2382      	movs	r3, #130	; 0x82
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	58d4      	ldr	r4, [r2, r3]
 8019734:	68ba      	ldr	r2, [r7, #8]
 8019736:	2384      	movs	r3, #132	; 0x84
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	58d3      	ldr	r3, [r2, r3]
 801973c:	6878      	ldr	r0, [r7, #4]
 801973e:	0022      	movs	r2, r4
 8019740:	f007 ff5e 	bl	8021600 <USBD_LL_Transmit>

    ret = USBD_OK;
 8019744:	230f      	movs	r3, #15
 8019746:	18fb      	adds	r3, r7, r3
 8019748:	2200      	movs	r2, #0
 801974a:	701a      	strb	r2, [r3, #0]
  }

  return (uint8_t)ret;
 801974c:	230f      	movs	r3, #15
 801974e:	18fb      	adds	r3, r7, r3
 8019750:	781b      	ldrb	r3, [r3, #0]
}
 8019752:	0018      	movs	r0, r3
 8019754:	46bd      	mov	sp, r7
 8019756:	b005      	add	sp, #20
 8019758:	bd90      	pop	{r4, r7, pc}
 801975a:	46c0      	nop			; (mov r8, r8)
 801975c:	200001ab 	.word	0x200001ab

08019760 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b084      	sub	sp, #16
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8019768:	687a      	ldr	r2, [r7, #4]
 801976a:	23b5      	movs	r3, #181	; 0xb5
 801976c:	009b      	lsls	r3, r3, #2
 801976e:	58d2      	ldr	r2, [r2, r3]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	32b0      	adds	r2, #176	; 0xb0
 8019774:	0092      	lsls	r2, r2, #2
 8019776:	58d3      	ldr	r3, [r2, r3]
 8019778:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	23b5      	movs	r3, #181	; 0xb5
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	58d2      	ldr	r2, [r2, r3]
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	32b0      	adds	r2, #176	; 0xb0
 8019786:	0092      	lsls	r2, r2, #2
 8019788:	58d3      	ldr	r3, [r2, r3]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d101      	bne.n	8019792 <USBD_CDC_ReceivePacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801978e:	2303      	movs	r3, #3
 8019790:	e01a      	b.n	80197c8 <USBD_CDC_ReceivePacket+0x68>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	7c1b      	ldrb	r3, [r3, #16]
 8019796:	2b00      	cmp	r3, #0
 8019798:	d10b      	bne.n	80197b2 <USBD_CDC_ReceivePacket+0x52>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801979a:	4b0d      	ldr	r3, [pc, #52]	; (80197d0 <USBD_CDC_ReceivePacket+0x70>)
 801979c:	7819      	ldrb	r1, [r3, #0]
 801979e:	68fa      	ldr	r2, [r7, #12]
 80197a0:	2381      	movs	r3, #129	; 0x81
 80197a2:	009b      	lsls	r3, r3, #2
 80197a4:	58d2      	ldr	r2, [r2, r3]
 80197a6:	2380      	movs	r3, #128	; 0x80
 80197a8:	009b      	lsls	r3, r3, #2
 80197aa:	6878      	ldr	r0, [r7, #4]
 80197ac:	f007 ff58 	bl	8021660 <USBD_LL_PrepareReceive>
 80197b0:	e009      	b.n	80197c6 <USBD_CDC_ReceivePacket+0x66>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80197b2:	4b07      	ldr	r3, [pc, #28]	; (80197d0 <USBD_CDC_ReceivePacket+0x70>)
 80197b4:	7819      	ldrb	r1, [r3, #0]
 80197b6:	68fa      	ldr	r2, [r7, #12]
 80197b8:	2381      	movs	r3, #129	; 0x81
 80197ba:	009b      	lsls	r3, r3, #2
 80197bc:	58d2      	ldr	r2, [r2, r3]
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	2340      	movs	r3, #64	; 0x40
 80197c2:	f007 ff4d 	bl	8021660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80197c6:	2300      	movs	r3, #0
}
 80197c8:	0018      	movs	r0, r3
 80197ca:	46bd      	mov	sp, r7
 80197cc:	b004      	add	sp, #16
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	200001ac 	.word	0x200001ac

080197d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80197d4:	b5b0      	push	{r4, r5, r7, lr}
 80197d6:	b086      	sub	sp, #24
 80197d8:	af00      	add	r7, sp, #0
 80197da:	60f8      	str	r0, [r7, #12]
 80197dc:	60b9      	str	r1, [r7, #8]
 80197de:	1dfb      	adds	r3, r7, #7
 80197e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d101      	bne.n	80197ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80197e8:	2303      	movs	r3, #3
 80197ea:	e029      	b.n	8019840 <USBD_Init+0x6c>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80197ec:	68fa      	ldr	r2, [r7, #12]
 80197ee:	23ae      	movs	r3, #174	; 0xae
 80197f0:	009b      	lsls	r3, r3, #2
 80197f2:	2100      	movs	r1, #0
 80197f4:	50d1      	str	r1, [r2, r3]
  pdev->pUserData[0] = NULL;
 80197f6:	68fa      	ldr	r2, [r7, #12]
 80197f8:	23b1      	movs	r3, #177	; 0xb1
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	2100      	movs	r1, #0
 80197fe:	50d1      	str	r1, [r2, r3]
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8019800:	68fa      	ldr	r2, [r7, #12]
 8019802:	23b4      	movs	r3, #180	; 0xb4
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	2100      	movs	r1, #0
 8019808:	50d1      	str	r1, [r2, r3]

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801980a:	68bb      	ldr	r3, [r7, #8]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d004      	beq.n	801981a <USBD_Init+0x46>
  {
    pdev->pDesc = pdesc;
 8019810:	68fa      	ldr	r2, [r7, #12]
 8019812:	23ad      	movs	r3, #173	; 0xad
 8019814:	009b      	lsls	r3, r3, #2
 8019816:	68b9      	ldr	r1, [r7, #8]
 8019818:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801981a:	68fa      	ldr	r2, [r7, #12]
 801981c:	23a7      	movs	r3, #167	; 0xa7
 801981e:	009b      	lsls	r3, r3, #2
 8019820:	2101      	movs	r1, #1
 8019822:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	1dfa      	adds	r2, r7, #7
 8019828:	7812      	ldrb	r2, [r2, #0]
 801982a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801982c:	2517      	movs	r5, #23
 801982e:	197c      	adds	r4, r7, r5
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	0018      	movs	r0, r3
 8019834:	f007 fd3a 	bl	80212ac <USBD_LL_Init>
 8019838:	0003      	movs	r3, r0
 801983a:	7023      	strb	r3, [r4, #0]

  return ret;
 801983c:	197b      	adds	r3, r7, r5
 801983e:	781b      	ldrb	r3, [r3, #0]
}
 8019840:	0018      	movs	r0, r3
 8019842:	46bd      	mov	sp, r7
 8019844:	b006      	add	sp, #24
 8019846:	bdb0      	pop	{r4, r5, r7, pc}

08019848 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019848:	b580      	push	{r7, lr}
 801984a:	b084      	sub	sp, #16
 801984c:	af00      	add	r7, sp, #0
 801984e:	6078      	str	r0, [r7, #4]
 8019850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019852:	230e      	movs	r3, #14
 8019854:	18fb      	adds	r3, r7, r3
 8019856:	2200      	movs	r2, #0
 8019858:	801a      	strh	r2, [r3, #0]

  if (pclass == NULL)
 801985a:	683b      	ldr	r3, [r7, #0]
 801985c:	2b00      	cmp	r3, #0
 801985e:	d101      	bne.n	8019864 <USBD_RegisterClass+0x1c>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8019860:	2303      	movs	r3, #3
 8019862:	e02b      	b.n	80198bc <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8019864:	687a      	ldr	r2, [r7, #4]
 8019866:	23ae      	movs	r3, #174	; 0xae
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	6839      	ldr	r1, [r7, #0]
 801986c:	50d1      	str	r1, [r2, r3]
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801986e:	687a      	ldr	r2, [r7, #4]
 8019870:	23b5      	movs	r3, #181	; 0xb5
 8019872:	009b      	lsls	r3, r3, #2
 8019874:	58d2      	ldr	r2, [r2, r3]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	32ae      	adds	r2, #174	; 0xae
 801987a:	0092      	lsls	r2, r2, #2
 801987c:	58d3      	ldr	r3, [r2, r3]
 801987e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019880:	2b00      	cmp	r3, #0
 8019882:	d011      	beq.n	80198a8 <USBD_RegisterClass+0x60>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	23b5      	movs	r3, #181	; 0xb5
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	58d2      	ldr	r2, [r2, r3]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	32ae      	adds	r2, #174	; 0xae
 8019890:	0092      	lsls	r2, r2, #2
 8019892:	58d3      	ldr	r3, [r2, r3]
 8019894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019896:	220e      	movs	r2, #14
 8019898:	18ba      	adds	r2, r7, r2
 801989a:	0010      	movs	r0, r2
 801989c:	4798      	blx	r3
 801989e:	0001      	movs	r1, r0
 80198a0:	687a      	ldr	r2, [r7, #4]
 80198a2:	23b4      	movs	r3, #180	; 0xb4
 80198a4:	009b      	lsls	r3, r3, #2
 80198a6:	50d1      	str	r1, [r2, r3]
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	23b6      	movs	r3, #182	; 0xb6
 80198ac:	009b      	lsls	r3, r3, #2
 80198ae:	58d3      	ldr	r3, [r2, r3]
 80198b0:	1c59      	adds	r1, r3, #1
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	23b6      	movs	r3, #182	; 0xb6
 80198b6:	009b      	lsls	r3, r3, #2
 80198b8:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80198ba:	2300      	movs	r3, #0
}
 80198bc:	0018      	movs	r0, r3
 80198be:	46bd      	mov	sp, r7
 80198c0:	b004      	add	sp, #16
 80198c2:	bd80      	pop	{r7, pc}

080198c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b082      	sub	sp, #8
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	0018      	movs	r0, r3
 80198d0:	f007 fd5e 	bl	8021390 <USBD_LL_Start>
 80198d4:	0003      	movs	r3, r0
}
 80198d6:	0018      	movs	r0, r3
 80198d8:	46bd      	mov	sp, r7
 80198da:	b002      	add	sp, #8
 80198dc:	bd80      	pop	{r7, pc}

080198de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80198de:	b580      	push	{r7, lr}
 80198e0:	b082      	sub	sp, #8
 80198e2:	af00      	add	r7, sp, #0
 80198e4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80198e6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80198e8:	0018      	movs	r0, r3
 80198ea:	46bd      	mov	sp, r7
 80198ec:	b002      	add	sp, #8
 80198ee:	bd80      	pop	{r7, pc}

080198f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80198f0:	b590      	push	{r4, r7, lr}
 80198f2:	b085      	sub	sp, #20
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	000a      	movs	r2, r1
 80198fa:	1cfb      	adds	r3, r7, #3
 80198fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80198fe:	210f      	movs	r1, #15
 8019900:	187b      	adds	r3, r7, r1
 8019902:	2200      	movs	r2, #0
 8019904:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	23ae      	movs	r3, #174	; 0xae
 801990a:	009b      	lsls	r3, r3, #2
 801990c:	58d3      	ldr	r3, [r2, r3]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d00c      	beq.n	801992c <USBD_SetClassConfig+0x3c>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	23ae      	movs	r3, #174	; 0xae
 8019916:	009b      	lsls	r3, r3, #2
 8019918:	58d3      	ldr	r3, [r2, r3]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	187c      	adds	r4, r7, r1
 801991e:	1cfa      	adds	r2, r7, #3
 8019920:	7811      	ldrb	r1, [r2, #0]
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	0010      	movs	r0, r2
 8019926:	4798      	blx	r3
 8019928:	0003      	movs	r3, r0
 801992a:	7023      	strb	r3, [r4, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801992c:	230f      	movs	r3, #15
 801992e:	18fb      	adds	r3, r7, r3
 8019930:	781b      	ldrb	r3, [r3, #0]
}
 8019932:	0018      	movs	r0, r3
 8019934:	46bd      	mov	sp, r7
 8019936:	b005      	add	sp, #20
 8019938:	bd90      	pop	{r4, r7, pc}

0801993a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801993a:	b590      	push	{r4, r7, lr}
 801993c:	b085      	sub	sp, #20
 801993e:	af00      	add	r7, sp, #0
 8019940:	6078      	str	r0, [r7, #4]
 8019942:	000a      	movs	r2, r1
 8019944:	1cfb      	adds	r3, r7, #3
 8019946:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019948:	240f      	movs	r4, #15
 801994a:	193b      	adds	r3, r7, r4
 801994c:	2200      	movs	r2, #0
 801994e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8019950:	687a      	ldr	r2, [r7, #4]
 8019952:	23ae      	movs	r3, #174	; 0xae
 8019954:	009b      	lsls	r3, r3, #2
 8019956:	58d3      	ldr	r3, [r2, r3]
 8019958:	685b      	ldr	r3, [r3, #4]
 801995a:	1cfa      	adds	r2, r7, #3
 801995c:	7811      	ldrb	r1, [r2, #0]
 801995e:	687a      	ldr	r2, [r7, #4]
 8019960:	0010      	movs	r0, r2
 8019962:	4798      	blx	r3
 8019964:	1e03      	subs	r3, r0, #0
 8019966:	d002      	beq.n	801996e <USBD_ClrClassConfig+0x34>
  {
    ret = USBD_FAIL;
 8019968:	193b      	adds	r3, r7, r4
 801996a:	2203      	movs	r2, #3
 801996c:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801996e:	230f      	movs	r3, #15
 8019970:	18fb      	adds	r3, r7, r3
 8019972:	781b      	ldrb	r3, [r3, #0]
}
 8019974:	0018      	movs	r0, r3
 8019976:	46bd      	mov	sp, r7
 8019978:	b005      	add	sp, #20
 801997a:	bd90      	pop	{r4, r7, pc}

0801997c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801997c:	b590      	push	{r4, r7, lr}
 801997e:	b085      	sub	sp, #20
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	4a30      	ldr	r2, [pc, #192]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 801998a:	4694      	mov	ip, r2
 801998c:	4463      	add	r3, ip
 801998e:	683a      	ldr	r2, [r7, #0]
 8019990:	0011      	movs	r1, r2
 8019992:	0018      	movs	r0, r3
 8019994:	f001 fa5f 	bl	801ae56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019998:	687a      	ldr	r2, [r7, #4]
 801999a:	23a5      	movs	r3, #165	; 0xa5
 801999c:	009b      	lsls	r3, r3, #2
 801999e:	2101      	movs	r1, #1
 80199a0:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80199a2:	687a      	ldr	r2, [r7, #4]
 80199a4:	23ac      	movs	r3, #172	; 0xac
 80199a6:	009b      	lsls	r3, r3, #2
 80199a8:	5ad3      	ldrh	r3, [r2, r3]
 80199aa:	0019      	movs	r1, r3
 80199ac:	687a      	ldr	r2, [r7, #4]
 80199ae:	23a6      	movs	r3, #166	; 0xa6
 80199b0:	009b      	lsls	r3, r3, #2
 80199b2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	4a25      	ldr	r2, [pc, #148]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 80199b8:	5c9b      	ldrb	r3, [r3, r2]
 80199ba:	001a      	movs	r2, r3
 80199bc:	231f      	movs	r3, #31
 80199be:	4013      	ands	r3, r2
 80199c0:	2b02      	cmp	r3, #2
 80199c2:	d01f      	beq.n	8019a04 <USBD_LL_SetupStage+0x88>
 80199c4:	d82b      	bhi.n	8019a1e <USBD_LL_SetupStage+0xa2>
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d002      	beq.n	80199d0 <USBD_LL_SetupStage+0x54>
 80199ca:	2b01      	cmp	r3, #1
 80199cc:	d00d      	beq.n	80199ea <USBD_LL_SetupStage+0x6e>
 80199ce:	e026      	b.n	8019a1e <USBD_LL_SetupStage+0xa2>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	4a1e      	ldr	r2, [pc, #120]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 80199d4:	189a      	adds	r2, r3, r2
 80199d6:	230f      	movs	r3, #15
 80199d8:	18fc      	adds	r4, r7, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	0011      	movs	r1, r2
 80199de:	0018      	movs	r0, r3
 80199e0:	f000 fb5e 	bl	801a0a0 <USBD_StdDevReq>
 80199e4:	0003      	movs	r3, r0
 80199e6:	7023      	strb	r3, [r4, #0]
      break;
 80199e8:	e029      	b.n	8019a3e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	4a17      	ldr	r2, [pc, #92]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 80199ee:	189a      	adds	r2, r3, r2
 80199f0:	230f      	movs	r3, #15
 80199f2:	18fc      	adds	r4, r7, r3
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	0011      	movs	r1, r2
 80199f8:	0018      	movs	r0, r3
 80199fa:	f000 fbcf 	bl	801a19c <USBD_StdItfReq>
 80199fe:	0003      	movs	r3, r0
 8019a00:	7023      	strb	r3, [r4, #0]
      break;
 8019a02:	e01c      	b.n	8019a3e <USBD_LL_SetupStage+0xc2>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	4a11      	ldr	r2, [pc, #68]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 8019a08:	189a      	adds	r2, r3, r2
 8019a0a:	230f      	movs	r3, #15
 8019a0c:	18fc      	adds	r4, r7, r3
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	0011      	movs	r1, r2
 8019a12:	0018      	movs	r0, r3
 8019a14:	f000 fc4f 	bl	801a2b6 <USBD_StdEPReq>
 8019a18:	0003      	movs	r3, r0
 8019a1a:	7023      	strb	r3, [r4, #0]
      break;
 8019a1c:	e00f      	b.n	8019a3e <USBD_LL_SetupStage+0xc2>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	4a0a      	ldr	r2, [pc, #40]	; (8019a4c <USBD_LL_SetupStage+0xd0>)
 8019a22:	5c9b      	ldrb	r3, [r3, r2]
 8019a24:	227f      	movs	r2, #127	; 0x7f
 8019a26:	4393      	bics	r3, r2
 8019a28:	b2da      	uxtb	r2, r3
 8019a2a:	230f      	movs	r3, #15
 8019a2c:	18fc      	adds	r4, r7, r3
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	0011      	movs	r1, r2
 8019a32:	0018      	movs	r0, r3
 8019a34:	f007 fd33 	bl	802149e <USBD_LL_StallEP>
 8019a38:	0003      	movs	r3, r0
 8019a3a:	7023      	strb	r3, [r4, #0]
      break;
 8019a3c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8019a3e:	230f      	movs	r3, #15
 8019a40:	18fb      	adds	r3, r7, r3
 8019a42:	781b      	ldrb	r3, [r3, #0]
}
 8019a44:	0018      	movs	r0, r3
 8019a46:	46bd      	mov	sp, r7
 8019a48:	b005      	add	sp, #20
 8019a4a:	bd90      	pop	{r4, r7, pc}
 8019a4c:	000002aa 	.word	0x000002aa

08019a50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a52:	b087      	sub	sp, #28
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	60f8      	str	r0, [r7, #12]
 8019a58:	607a      	str	r2, [r7, #4]
 8019a5a:	200b      	movs	r0, #11
 8019a5c:	183b      	adds	r3, r7, r0
 8019a5e:	1c0a      	adds	r2, r1, #0
 8019a60:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8019a62:	2317      	movs	r3, #23
 8019a64:	18fb      	adds	r3, r7, r3
 8019a66:	2200      	movs	r2, #0
 8019a68:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  if (epnum == 0U)
 8019a6a:	183b      	adds	r3, r7, r0
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d000      	beq.n	8019a74 <USBD_LL_DataOutStage+0x24>
 8019a72:	e084      	b.n	8019b7e <USBD_LL_DataOutStage+0x12e>
  {
    pep = &pdev->ep_out[0];
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	3355      	adds	r3, #85	; 0x55
 8019a78:	33ff      	adds	r3, #255	; 0xff
 8019a7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019a7c:	68fa      	ldr	r2, [r7, #12]
 8019a7e:	23a5      	movs	r3, #165	; 0xa5
 8019a80:	009b      	lsls	r3, r3, #2
 8019a82:	58d3      	ldr	r3, [r2, r3]
 8019a84:	2b03      	cmp	r3, #3
 8019a86:	d000      	beq.n	8019a8a <USBD_LL_DataOutStage+0x3a>
 8019a88:	e0c0      	b.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
    {
      if (pep->rem_length > pep->maxpacket)
 8019a8a:	693b      	ldr	r3, [r7, #16]
 8019a8c:	689a      	ldr	r2, [r3, #8]
 8019a8e:	693b      	ldr	r3, [r7, #16]
 8019a90:	68db      	ldr	r3, [r3, #12]
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d914      	bls.n	8019ac0 <USBD_LL_DataOutStage+0x70>
      {
        pep->rem_length -= pep->maxpacket;
 8019a96:	693b      	ldr	r3, [r7, #16]
 8019a98:	689a      	ldr	r2, [r3, #8]
 8019a9a:	693b      	ldr	r3, [r7, #16]
 8019a9c:	68db      	ldr	r3, [r3, #12]
 8019a9e:	1ad2      	subs	r2, r2, r3
 8019aa0:	693b      	ldr	r3, [r7, #16]
 8019aa2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8019aa4:	693b      	ldr	r3, [r7, #16]
 8019aa6:	68d9      	ldr	r1, [r3, #12]
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	689a      	ldr	r2, [r3, #8]
 8019aac:	000b      	movs	r3, r1
 8019aae:	4293      	cmp	r3, r2
 8019ab0:	d900      	bls.n	8019ab4 <USBD_LL_DataOutStage+0x64>
 8019ab2:	0013      	movs	r3, r2
 8019ab4:	6879      	ldr	r1, [r7, #4]
 8019ab6:	68f8      	ldr	r0, [r7, #12]
 8019ab8:	001a      	movs	r2, r3
 8019aba:	f001 fade 	bl	801b07a <USBD_CtlContinueRx>
 8019abe:	e0a5      	b.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	4a55      	ldr	r2, [pc, #340]	; (8019c18 <USBD_LL_DataOutStage+0x1c8>)
 8019ac4:	5c9b      	ldrb	r3, [r3, r2]
 8019ac6:	001a      	movs	r2, r3
 8019ac8:	231f      	movs	r3, #31
 8019aca:	4013      	ands	r3, r2
 8019acc:	2b02      	cmp	r3, #2
 8019ace:	d018      	beq.n	8019b02 <USBD_LL_DataOutStage+0xb2>
 8019ad0:	d825      	bhi.n	8019b1e <USBD_LL_DataOutStage+0xce>
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d002      	beq.n	8019adc <USBD_LL_DataOutStage+0x8c>
 8019ad6:	2b01      	cmp	r3, #1
 8019ad8:	d005      	beq.n	8019ae6 <USBD_LL_DataOutStage+0x96>
 8019ada:	e020      	b.n	8019b1e <USBD_LL_DataOutStage+0xce>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8019adc:	2316      	movs	r3, #22
 8019ade:	18fb      	adds	r3, r7, r3
 8019ae0:	2200      	movs	r2, #0
 8019ae2:	701a      	strb	r2, [r3, #0]
            break;
 8019ae4:	e020      	b.n	8019b28 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	4a4c      	ldr	r2, [pc, #304]	; (8019c1c <USBD_LL_DataOutStage+0x1cc>)
 8019aea:	5a9b      	ldrh	r3, [r3, r2]
 8019aec:	b2da      	uxtb	r2, r3
 8019aee:	2316      	movs	r3, #22
 8019af0:	18fc      	adds	r4, r7, r3
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	0011      	movs	r1, r2
 8019af6:	0018      	movs	r0, r3
 8019af8:	f000 fa31 	bl	8019f5e <USBD_CoreFindIF>
 8019afc:	0003      	movs	r3, r0
 8019afe:	7023      	strb	r3, [r4, #0]
            break;
 8019b00:	e012      	b.n	8019b28 <USBD_LL_DataOutStage+0xd8>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	4a45      	ldr	r2, [pc, #276]	; (8019c1c <USBD_LL_DataOutStage+0x1cc>)
 8019b06:	5a9b      	ldrh	r3, [r3, r2]
 8019b08:	b2da      	uxtb	r2, r3
 8019b0a:	2316      	movs	r3, #22
 8019b0c:	18fc      	adds	r4, r7, r3
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	0011      	movs	r1, r2
 8019b12:	0018      	movs	r0, r3
 8019b14:	f000 fa2f 	bl	8019f76 <USBD_CoreFindEP>
 8019b18:	0003      	movs	r3, r0
 8019b1a:	7023      	strb	r3, [r4, #0]
            break;
 8019b1c:	e004      	b.n	8019b28 <USBD_LL_DataOutStage+0xd8>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8019b1e:	2316      	movs	r3, #22
 8019b20:	18fb      	adds	r3, r7, r3
 8019b22:	2200      	movs	r2, #0
 8019b24:	701a      	strb	r2, [r3, #0]
            break;
 8019b26:	46c0      	nop			; (mov r8, r8)
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8019b28:	2116      	movs	r1, #22
 8019b2a:	187b      	adds	r3, r7, r1
 8019b2c:	781b      	ldrb	r3, [r3, #0]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d120      	bne.n	8019b74 <USBD_LL_DataOutStage+0x124>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019b32:	68fa      	ldr	r2, [r7, #12]
 8019b34:	23a7      	movs	r3, #167	; 0xa7
 8019b36:	009b      	lsls	r3, r3, #2
 8019b38:	5cd3      	ldrb	r3, [r2, r3]
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	2b03      	cmp	r3, #3
 8019b3e:	d119      	bne.n	8019b74 <USBD_LL_DataOutStage+0x124>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8019b40:	187b      	adds	r3, r7, r1
 8019b42:	781a      	ldrb	r2, [r3, #0]
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	32ae      	adds	r2, #174	; 0xae
 8019b48:	0092      	lsls	r2, r2, #2
 8019b4a:	58d3      	ldr	r3, [r2, r3]
 8019b4c:	691b      	ldr	r3, [r3, #16]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d010      	beq.n	8019b74 <USBD_LL_DataOutStage+0x124>
            {
              pdev->classId = idx;
 8019b52:	0008      	movs	r0, r1
 8019b54:	187b      	adds	r3, r7, r1
 8019b56:	7819      	ldrb	r1, [r3, #0]
 8019b58:	68fa      	ldr	r2, [r7, #12]
 8019b5a:	23b5      	movs	r3, #181	; 0xb5
 8019b5c:	009b      	lsls	r3, r3, #2
 8019b5e:	50d1      	str	r1, [r2, r3]
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8019b60:	183b      	adds	r3, r7, r0
 8019b62:	781a      	ldrb	r2, [r3, #0]
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	32ae      	adds	r2, #174	; 0xae
 8019b68:	0092      	lsls	r2, r2, #2
 8019b6a:	58d3      	ldr	r3, [r2, r3]
 8019b6c:	691b      	ldr	r3, [r3, #16]
 8019b6e:	68fa      	ldr	r2, [r7, #12]
 8019b70:	0010      	movs	r0, r2
 8019b72:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	0018      	movs	r0, r3
 8019b78:	f001 fa90 	bl	801b09c <USBD_CtlSendStatus>
 8019b7c:	e046      	b.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8019b7e:	260b      	movs	r6, #11
 8019b80:	19bb      	adds	r3, r7, r6
 8019b82:	781b      	ldrb	r3, [r3, #0]
 8019b84:	227f      	movs	r2, #127	; 0x7f
 8019b86:	4013      	ands	r3, r2
 8019b88:	b2da      	uxtb	r2, r3
 8019b8a:	2516      	movs	r5, #22
 8019b8c:	197c      	adds	r4, r7, r5
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	0011      	movs	r1, r2
 8019b92:	0018      	movs	r0, r3
 8019b94:	f000 f9ef 	bl	8019f76 <USBD_CoreFindEP>
 8019b98:	0003      	movs	r3, r0
 8019b9a:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019b9c:	0029      	movs	r1, r5
 8019b9e:	187b      	adds	r3, r7, r1
 8019ba0:	781b      	ldrb	r3, [r3, #0]
 8019ba2:	2bff      	cmp	r3, #255	; 0xff
 8019ba4:	d032      	beq.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
 8019ba6:	187b      	adds	r3, r7, r1
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	d12e      	bne.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019bae:	68fa      	ldr	r2, [r7, #12]
 8019bb0:	23a7      	movs	r3, #167	; 0xa7
 8019bb2:	009b      	lsls	r3, r3, #2
 8019bb4:	5cd3      	ldrb	r3, [r2, r3]
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	2b03      	cmp	r3, #3
 8019bba:	d11f      	bne.n	8019bfc <USBD_LL_DataOutStage+0x1ac>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8019bbc:	187b      	adds	r3, r7, r1
 8019bbe:	781a      	ldrb	r2, [r3, #0]
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	32ae      	adds	r2, #174	; 0xae
 8019bc4:	0092      	lsls	r2, r2, #2
 8019bc6:	58d3      	ldr	r3, [r2, r3]
 8019bc8:	699b      	ldr	r3, [r3, #24]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d016      	beq.n	8019bfc <USBD_LL_DataOutStage+0x1ac>
        {
          pdev->classId = idx;
 8019bce:	0008      	movs	r0, r1
 8019bd0:	187b      	adds	r3, r7, r1
 8019bd2:	7819      	ldrb	r1, [r3, #0]
 8019bd4:	68fa      	ldr	r2, [r7, #12]
 8019bd6:	23b5      	movs	r3, #181	; 0xb5
 8019bd8:	009b      	lsls	r3, r3, #2
 8019bda:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8019bdc:	183b      	adds	r3, r7, r0
 8019bde:	781a      	ldrb	r2, [r3, #0]
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	32ae      	adds	r2, #174	; 0xae
 8019be4:	0092      	lsls	r2, r2, #2
 8019be6:	58d3      	ldr	r3, [r2, r3]
 8019be8:	699b      	ldr	r3, [r3, #24]
 8019bea:	2217      	movs	r2, #23
 8019bec:	18bc      	adds	r4, r7, r2
 8019bee:	19ba      	adds	r2, r7, r6
 8019bf0:	7811      	ldrb	r1, [r2, #0]
 8019bf2:	68fa      	ldr	r2, [r7, #12]
 8019bf4:	0010      	movs	r0, r2
 8019bf6:	4798      	blx	r3
 8019bf8:	0003      	movs	r3, r0
 8019bfa:	7023      	strb	r3, [r4, #0]
        }
      }
      if (ret != USBD_OK)
 8019bfc:	2217      	movs	r2, #23
 8019bfe:	18bb      	adds	r3, r7, r2
 8019c00:	781b      	ldrb	r3, [r3, #0]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d002      	beq.n	8019c0c <USBD_LL_DataOutStage+0x1bc>
      {
        return ret;
 8019c06:	18bb      	adds	r3, r7, r2
 8019c08:	781b      	ldrb	r3, [r3, #0]
 8019c0a:	e000      	b.n	8019c0e <USBD_LL_DataOutStage+0x1be>
      }
    }
  }

  return USBD_OK;
 8019c0c:	2300      	movs	r3, #0
}
 8019c0e:	0018      	movs	r0, r3
 8019c10:	46bd      	mov	sp, r7
 8019c12:	b007      	add	sp, #28
 8019c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c16:	46c0      	nop			; (mov r8, r8)
 8019c18:	000002aa 	.word	0x000002aa
 8019c1c:	000002ae 	.word	0x000002ae

08019c20 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8019c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c22:	b087      	sub	sp, #28
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	607a      	str	r2, [r7, #4]
 8019c2a:	200b      	movs	r0, #11
 8019c2c:	183b      	adds	r3, r7, r0
 8019c2e:	1c0a      	adds	r2, r1, #0
 8019c30:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8019c32:	183b      	adds	r3, r7, r0
 8019c34:	781b      	ldrb	r3, [r3, #0]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d000      	beq.n	8019c3c <USBD_LL_DataInStage+0x1c>
 8019c3a:	e07d      	b.n	8019d38 <USBD_LL_DataInStage+0x118>
  {
    pep = &pdev->ep_in[0];
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	3314      	adds	r3, #20
 8019c40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8019c42:	68fa      	ldr	r2, [r7, #12]
 8019c44:	23a5      	movs	r3, #165	; 0xa5
 8019c46:	009b      	lsls	r3, r3, #2
 8019c48:	58d3      	ldr	r3, [r2, r3]
 8019c4a:	2b02      	cmp	r3, #2
 8019c4c:	d164      	bne.n	8019d18 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8019c4e:	693b      	ldr	r3, [r7, #16]
 8019c50:	689a      	ldr	r2, [r3, #8]
 8019c52:	693b      	ldr	r3, [r7, #16]
 8019c54:	68db      	ldr	r3, [r3, #12]
 8019c56:	429a      	cmp	r2, r3
 8019c58:	d914      	bls.n	8019c84 <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8019c5a:	693b      	ldr	r3, [r7, #16]
 8019c5c:	689a      	ldr	r2, [r3, #8]
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	68db      	ldr	r3, [r3, #12]
 8019c62:	1ad2      	subs	r2, r2, r3
 8019c64:	693b      	ldr	r3, [r7, #16]
 8019c66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8019c68:	693b      	ldr	r3, [r7, #16]
 8019c6a:	689a      	ldr	r2, [r3, #8]
 8019c6c:	6879      	ldr	r1, [r7, #4]
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	0018      	movs	r0, r3
 8019c72:	f001 f9d1 	bl	801b018 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019c76:	68f8      	ldr	r0, [r7, #12]
 8019c78:	2300      	movs	r3, #0
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	2100      	movs	r1, #0
 8019c7e:	f007 fcef 	bl	8021660 <USBD_LL_PrepareReceive>
 8019c82:	e049      	b.n	8019d18 <USBD_LL_DataInStage+0xf8>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8019c84:	693b      	ldr	r3, [r7, #16]
 8019c86:	68da      	ldr	r2, [r3, #12]
 8019c88:	693b      	ldr	r3, [r7, #16]
 8019c8a:	689b      	ldr	r3, [r3, #8]
 8019c8c:	429a      	cmp	r2, r3
 8019c8e:	d11f      	bne.n	8019cd0 <USBD_LL_DataInStage+0xb0>
            (pep->total_length >= pep->maxpacket) &&
 8019c90:	693b      	ldr	r3, [r7, #16]
 8019c92:	685a      	ldr	r2, [r3, #4]
 8019c94:	693b      	ldr	r3, [r7, #16]
 8019c96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8019c98:	429a      	cmp	r2, r3
 8019c9a:	d319      	bcc.n	8019cd0 <USBD_LL_DataInStage+0xb0>
            (pep->total_length < pdev->ep0_data_len))
 8019c9c:	693b      	ldr	r3, [r7, #16]
 8019c9e:	685a      	ldr	r2, [r3, #4]
 8019ca0:	68f9      	ldr	r1, [r7, #12]
 8019ca2:	23a6      	movs	r3, #166	; 0xa6
 8019ca4:	009b      	lsls	r3, r3, #2
 8019ca6:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d211      	bcs.n	8019cd0 <USBD_LL_DataInStage+0xb0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	2200      	movs	r2, #0
 8019cb0:	2100      	movs	r1, #0
 8019cb2:	0018      	movs	r0, r3
 8019cb4:	f001 f9b0 	bl	801b018 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8019cb8:	68fa      	ldr	r2, [r7, #12]
 8019cba:	23a6      	movs	r3, #166	; 0xa6
 8019cbc:	009b      	lsls	r3, r3, #2
 8019cbe:	2100      	movs	r1, #0
 8019cc0:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019cc2:	68f8      	ldr	r0, [r7, #12]
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	2100      	movs	r1, #0
 8019cca:	f007 fcc9 	bl	8021660 <USBD_LL_PrepareReceive>
 8019cce:	e023      	b.n	8019d18 <USBD_LL_DataInStage+0xf8>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019cd0:	68fa      	ldr	r2, [r7, #12]
 8019cd2:	23a7      	movs	r3, #167	; 0xa7
 8019cd4:	009b      	lsls	r3, r3, #2
 8019cd6:	5cd3      	ldrb	r3, [r2, r3]
 8019cd8:	b2db      	uxtb	r3, r3
 8019cda:	2b03      	cmp	r3, #3
 8019cdc:	d113      	bne.n	8019d06 <USBD_LL_DataInStage+0xe6>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8019cde:	68fa      	ldr	r2, [r7, #12]
 8019ce0:	23ae      	movs	r3, #174	; 0xae
 8019ce2:	009b      	lsls	r3, r3, #2
 8019ce4:	58d3      	ldr	r3, [r2, r3]
 8019ce6:	68db      	ldr	r3, [r3, #12]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d00c      	beq.n	8019d06 <USBD_LL_DataInStage+0xe6>
            {
              pdev->classId = 0U;
 8019cec:	68fa      	ldr	r2, [r7, #12]
 8019cee:	23b5      	movs	r3, #181	; 0xb5
 8019cf0:	009b      	lsls	r3, r3, #2
 8019cf2:	2100      	movs	r1, #0
 8019cf4:	50d1      	str	r1, [r2, r3]
              pdev->pClass[0]->EP0_TxSent(pdev);
 8019cf6:	68fa      	ldr	r2, [r7, #12]
 8019cf8:	23ae      	movs	r3, #174	; 0xae
 8019cfa:	009b      	lsls	r3, r3, #2
 8019cfc:	58d3      	ldr	r3, [r2, r3]
 8019cfe:	68db      	ldr	r3, [r3, #12]
 8019d00:	68fa      	ldr	r2, [r7, #12]
 8019d02:	0010      	movs	r0, r2
 8019d04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2180      	movs	r1, #128	; 0x80
 8019d0a:	0018      	movs	r0, r3
 8019d0c:	f007 fbc7 	bl	802149e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	0018      	movs	r0, r3
 8019d14:	f001 f9d6 	bl	801b0c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8019d18:	68fa      	ldr	r2, [r7, #12]
 8019d1a:	23a8      	movs	r3, #168	; 0xa8
 8019d1c:	009b      	lsls	r3, r3, #2
 8019d1e:	5cd3      	ldrb	r3, [r2, r3]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d050      	beq.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
    {
      (void)USBD_RunTestMode(pdev);
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	0018      	movs	r0, r3
 8019d28:	f7ff fdd9 	bl	80198de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8019d2c:	68fa      	ldr	r2, [r7, #12]
 8019d2e:	23a8      	movs	r3, #168	; 0xa8
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	2100      	movs	r1, #0
 8019d34:	54d1      	strb	r1, [r2, r3]
 8019d36:	e046      	b.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8019d38:	260b      	movs	r6, #11
 8019d3a:	19bb      	adds	r3, r7, r6
 8019d3c:	781b      	ldrb	r3, [r3, #0]
 8019d3e:	2280      	movs	r2, #128	; 0x80
 8019d40:	4252      	negs	r2, r2
 8019d42:	4313      	orrs	r3, r2
 8019d44:	b2da      	uxtb	r2, r3
 8019d46:	2517      	movs	r5, #23
 8019d48:	197c      	adds	r4, r7, r5
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	0011      	movs	r1, r2
 8019d4e:	0018      	movs	r0, r3
 8019d50:	f000 f911 	bl	8019f76 <USBD_CoreFindEP>
 8019d54:	0003      	movs	r3, r0
 8019d56:	7023      	strb	r3, [r4, #0]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8019d58:	0029      	movs	r1, r5
 8019d5a:	187b      	adds	r3, r7, r1
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	2bff      	cmp	r3, #255	; 0xff
 8019d60:	d031      	beq.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
 8019d62:	187b      	adds	r3, r7, r1
 8019d64:	781b      	ldrb	r3, [r3, #0]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d12d      	bne.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019d6a:	68fa      	ldr	r2, [r7, #12]
 8019d6c:	23a7      	movs	r3, #167	; 0xa7
 8019d6e:	009b      	lsls	r3, r3, #2
 8019d70:	5cd3      	ldrb	r3, [r2, r3]
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	2b03      	cmp	r3, #3
 8019d76:	d126      	bne.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8019d78:	187b      	adds	r3, r7, r1
 8019d7a:	781a      	ldrb	r2, [r3, #0]
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	32ae      	adds	r2, #174	; 0xae
 8019d80:	0092      	lsls	r2, r2, #2
 8019d82:	58d3      	ldr	r3, [r2, r3]
 8019d84:	695b      	ldr	r3, [r3, #20]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d01d      	beq.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
        {
          pdev->classId = idx;
 8019d8a:	0008      	movs	r0, r1
 8019d8c:	187b      	adds	r3, r7, r1
 8019d8e:	7819      	ldrb	r1, [r3, #0]
 8019d90:	68fa      	ldr	r2, [r7, #12]
 8019d92:	23b5      	movs	r3, #181	; 0xb5
 8019d94:	009b      	lsls	r3, r3, #2
 8019d96:	50d1      	str	r1, [r2, r3]
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8019d98:	183b      	adds	r3, r7, r0
 8019d9a:	781a      	ldrb	r2, [r3, #0]
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	32ae      	adds	r2, #174	; 0xae
 8019da0:	0092      	lsls	r2, r2, #2
 8019da2:	58d3      	ldr	r3, [r2, r3]
 8019da4:	695b      	ldr	r3, [r3, #20]
 8019da6:	2516      	movs	r5, #22
 8019da8:	197c      	adds	r4, r7, r5
 8019daa:	19ba      	adds	r2, r7, r6
 8019dac:	7811      	ldrb	r1, [r2, #0]
 8019dae:	68fa      	ldr	r2, [r7, #12]
 8019db0:	0010      	movs	r0, r2
 8019db2:	4798      	blx	r3
 8019db4:	0003      	movs	r3, r0
 8019db6:	7023      	strb	r3, [r4, #0]

          if (ret != USBD_OK)
 8019db8:	197b      	adds	r3, r7, r5
 8019dba:	781b      	ldrb	r3, [r3, #0]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d002      	beq.n	8019dc6 <USBD_LL_DataInStage+0x1a6>
          {
            return ret;
 8019dc0:	197b      	adds	r3, r7, r5
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	e000      	b.n	8019dc8 <USBD_LL_DataInStage+0x1a8>
        }
      }
    }
  }

  return USBD_OK;
 8019dc6:	2300      	movs	r3, #0
}
 8019dc8:	0018      	movs	r0, r3
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	b007      	add	sp, #28
 8019dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dd0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8019dd0:	b590      	push	{r4, r7, lr}
 8019dd2:	b085      	sub	sp, #20
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8019dd8:	240f      	movs	r4, #15
 8019dda:	193b      	adds	r3, r7, r4
 8019ddc:	2200      	movs	r2, #0
 8019dde:	701a      	strb	r2, [r3, #0]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019de0:	687a      	ldr	r2, [r7, #4]
 8019de2:	23a7      	movs	r3, #167	; 0xa7
 8019de4:	009b      	lsls	r3, r3, #2
 8019de6:	2101      	movs	r1, #1
 8019de8:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8019dea:	687a      	ldr	r2, [r7, #4]
 8019dec:	23a5      	movs	r3, #165	; 0xa5
 8019dee:	009b      	lsls	r3, r3, #2
 8019df0:	2100      	movs	r1, #0
 8019df2:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2200      	movs	r2, #0
 8019df8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8019dfa:	687a      	ldr	r2, [r7, #4]
 8019dfc:	23a9      	movs	r3, #169	; 0xa9
 8019dfe:	009b      	lsls	r3, r3, #2
 8019e00:	2100      	movs	r1, #0
 8019e02:	50d1      	str	r1, [r2, r3]
  pdev->dev_test_mode = 0U;
 8019e04:	687a      	ldr	r2, [r7, #4]
 8019e06:	23a8      	movs	r3, #168	; 0xa8
 8019e08:	009b      	lsls	r3, r3, #2
 8019e0a:	2100      	movs	r1, #0
 8019e0c:	54d1      	strb	r1, [r2, r3]
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	23ae      	movs	r3, #174	; 0xae
 8019e12:	009b      	lsls	r3, r3, #2
 8019e14:	58d3      	ldr	r3, [r2, r3]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d016      	beq.n	8019e48 <USBD_LL_Reset+0x78>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8019e1a:	687a      	ldr	r2, [r7, #4]
 8019e1c:	23ae      	movs	r3, #174	; 0xae
 8019e1e:	009b      	lsls	r3, r3, #2
 8019e20:	58d3      	ldr	r3, [r2, r3]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d00f      	beq.n	8019e48 <USBD_LL_Reset+0x78>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8019e28:	687a      	ldr	r2, [r7, #4]
 8019e2a:	23ae      	movs	r3, #174	; 0xae
 8019e2c:	009b      	lsls	r3, r3, #2
 8019e2e:	58d3      	ldr	r3, [r2, r3]
 8019e30:	685a      	ldr	r2, [r3, #4]
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	685b      	ldr	r3, [r3, #4]
 8019e36:	b2d9      	uxtb	r1, r3
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	0018      	movs	r0, r3
 8019e3c:	4790      	blx	r2
 8019e3e:	1e03      	subs	r3, r0, #0
 8019e40:	d002      	beq.n	8019e48 <USBD_LL_Reset+0x78>
      {
        ret = USBD_FAIL;
 8019e42:	193b      	adds	r3, r7, r4
 8019e44:	2203      	movs	r2, #3
 8019e46:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019e48:	6878      	ldr	r0, [r7, #4]
 8019e4a:	2340      	movs	r3, #64	; 0x40
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	2100      	movs	r1, #0
 8019e50:	f007 fac3 	bl	80213da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8019e54:	687a      	ldr	r2, [r7, #4]
 8019e56:	23b2      	movs	r3, #178	; 0xb2
 8019e58:	005b      	lsls	r3, r3, #1
 8019e5a:	2101      	movs	r1, #1
 8019e5c:	52d1      	strh	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8019e5e:	687a      	ldr	r2, [r7, #4]
 8019e60:	23b0      	movs	r3, #176	; 0xb0
 8019e62:	005b      	lsls	r3, r3, #1
 8019e64:	2140      	movs	r1, #64	; 0x40
 8019e66:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8019e68:	6878      	ldr	r0, [r7, #4]
 8019e6a:	2340      	movs	r3, #64	; 0x40
 8019e6c:	2200      	movs	r2, #0
 8019e6e:	2180      	movs	r1, #128	; 0x80
 8019e70:	f007 fab3 	bl	80213da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	2201      	movs	r2, #1
 8019e78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2240      	movs	r2, #64	; 0x40
 8019e7e:	621a      	str	r2, [r3, #32]

  return ret;
 8019e80:	230f      	movs	r3, #15
 8019e82:	18fb      	adds	r3, r7, r3
 8019e84:	781b      	ldrb	r3, [r3, #0]
}
 8019e86:	0018      	movs	r0, r3
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	b005      	add	sp, #20
 8019e8c:	bd90      	pop	{r4, r7, pc}

08019e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8019e8e:	b580      	push	{r7, lr}
 8019e90:	b082      	sub	sp, #8
 8019e92:	af00      	add	r7, sp, #0
 8019e94:	6078      	str	r0, [r7, #4]
 8019e96:	000a      	movs	r2, r1
 8019e98:	1cfb      	adds	r3, r7, #3
 8019e9a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	1cfa      	adds	r2, r7, #3
 8019ea0:	7812      	ldrb	r2, [r2, #0]
 8019ea2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8019ea4:	2300      	movs	r3, #0
}
 8019ea6:	0018      	movs	r0, r3
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	b002      	add	sp, #8
 8019eac:	bd80      	pop	{r7, pc}
	...

08019eb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8019eb8:	687a      	ldr	r2, [r7, #4]
 8019eba:	23a7      	movs	r3, #167	; 0xa7
 8019ebc:	009b      	lsls	r3, r3, #2
 8019ebe:	5cd3      	ldrb	r3, [r2, r3]
 8019ec0:	b2d9      	uxtb	r1, r3
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	4a05      	ldr	r2, [pc, #20]	; (8019edc <USBD_LL_Suspend+0x2c>)
 8019ec6:	5499      	strb	r1, [r3, r2]
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	23a7      	movs	r3, #167	; 0xa7
 8019ecc:	009b      	lsls	r3, r3, #2
 8019ece:	2104      	movs	r1, #4
 8019ed0:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8019ed2:	2300      	movs	r3, #0
}
 8019ed4:	0018      	movs	r0, r3
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	b002      	add	sp, #8
 8019eda:	bd80      	pop	{r7, pc}
 8019edc:	0000029d 	.word	0x0000029d

08019ee0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8019ee0:	b580      	push	{r7, lr}
 8019ee2:	b082      	sub	sp, #8
 8019ee4:	af00      	add	r7, sp, #0
 8019ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8019ee8:	687a      	ldr	r2, [r7, #4]
 8019eea:	23a7      	movs	r3, #167	; 0xa7
 8019eec:	009b      	lsls	r3, r3, #2
 8019eee:	5cd3      	ldrb	r3, [r2, r3]
 8019ef0:	b2db      	uxtb	r3, r3
 8019ef2:	2b04      	cmp	r3, #4
 8019ef4:	d107      	bne.n	8019f06 <USBD_LL_Resume+0x26>
  {
    pdev->dev_state = pdev->dev_old_state;
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	4a05      	ldr	r2, [pc, #20]	; (8019f10 <USBD_LL_Resume+0x30>)
 8019efa:	5c9b      	ldrb	r3, [r3, r2]
 8019efc:	b2d9      	uxtb	r1, r3
 8019efe:	687a      	ldr	r2, [r7, #4]
 8019f00:	23a7      	movs	r3, #167	; 0xa7
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8019f06:	2300      	movs	r3, #0
}
 8019f08:	0018      	movs	r0, r3
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	b002      	add	sp, #8
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	0000029d 	.word	0x0000029d

08019f14 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019f1c:	687a      	ldr	r2, [r7, #4]
 8019f1e:	23a7      	movs	r3, #167	; 0xa7
 8019f20:	009b      	lsls	r3, r3, #2
 8019f22:	5cd3      	ldrb	r3, [r2, r3]
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	2b03      	cmp	r3, #3
 8019f28:	d114      	bne.n	8019f54 <USBD_LL_SOF+0x40>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8019f2a:	687a      	ldr	r2, [r7, #4]
 8019f2c:	23ae      	movs	r3, #174	; 0xae
 8019f2e:	009b      	lsls	r3, r3, #2
 8019f30:	58d3      	ldr	r3, [r2, r3]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d00e      	beq.n	8019f54 <USBD_LL_SOF+0x40>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8019f36:	687a      	ldr	r2, [r7, #4]
 8019f38:	23ae      	movs	r3, #174	; 0xae
 8019f3a:	009b      	lsls	r3, r3, #2
 8019f3c:	58d3      	ldr	r3, [r2, r3]
 8019f3e:	69db      	ldr	r3, [r3, #28]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d007      	beq.n	8019f54 <USBD_LL_SOF+0x40>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8019f44:	687a      	ldr	r2, [r7, #4]
 8019f46:	23ae      	movs	r3, #174	; 0xae
 8019f48:	009b      	lsls	r3, r3, #2
 8019f4a:	58d3      	ldr	r3, [r2, r3]
 8019f4c:	69db      	ldr	r3, [r3, #28]
 8019f4e:	687a      	ldr	r2, [r7, #4]
 8019f50:	0010      	movs	r0, r2
 8019f52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8019f54:	2300      	movs	r3, #0
}
 8019f56:	0018      	movs	r0, r3
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	b002      	add	sp, #8
 8019f5c:	bd80      	pop	{r7, pc}

08019f5e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019f5e:	b580      	push	{r7, lr}
 8019f60:	b082      	sub	sp, #8
 8019f62:	af00      	add	r7, sp, #0
 8019f64:	6078      	str	r0, [r7, #4]
 8019f66:	000a      	movs	r2, r1
 8019f68:	1cfb      	adds	r3, r7, #3
 8019f6a:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019f6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019f6e:	0018      	movs	r0, r3
 8019f70:	46bd      	mov	sp, r7
 8019f72:	b002      	add	sp, #8
 8019f74:	bd80      	pop	{r7, pc}

08019f76 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8019f76:	b580      	push	{r7, lr}
 8019f78:	b082      	sub	sp, #8
 8019f7a:	af00      	add	r7, sp, #0
 8019f7c:	6078      	str	r0, [r7, #4]
 8019f7e:	000a      	movs	r2, r1
 8019f80:	1cfb      	adds	r3, r7, #3
 8019f82:	701a      	strb	r2, [r3, #0]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8019f84:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8019f86:	0018      	movs	r0, r3
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	b002      	add	sp, #8
 8019f8c:	bd80      	pop	{r7, pc}

08019f8e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8019f8e:	b580      	push	{r7, lr}
 8019f90:	b086      	sub	sp, #24
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	6078      	str	r0, [r7, #4]
 8019f96:	000a      	movs	r2, r1
 8019f98:	1cfb      	adds	r3, r7, #3
 8019f9a:	701a      	strb	r2, [r3, #0]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	789a      	ldrb	r2, [r3, #2]
 8019fac:	78db      	ldrb	r3, [r3, #3]
 8019fae:	021b      	lsls	r3, r3, #8
 8019fb0:	4313      	orrs	r3, r2
 8019fb2:	b29a      	uxth	r2, r3
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	d92a      	bls.n	801a014 <USBD_GetEpDesc+0x86>
  {
    ptr = desc->bLength;
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	781b      	ldrb	r3, [r3, #0]
 8019fc2:	b29a      	uxth	r2, r3
 8019fc4:	230a      	movs	r3, #10
 8019fc6:	18fb      	adds	r3, r7, r3
 8019fc8:	801a      	strh	r2, [r3, #0]

    while (ptr < desc->wTotalLength)
 8019fca:	e016      	b.n	8019ffa <USBD_GetEpDesc+0x6c>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8019fcc:	230a      	movs	r3, #10
 8019fce:	18fa      	adds	r2, r7, r3
 8019fd0:	697b      	ldr	r3, [r7, #20]
 8019fd2:	0011      	movs	r1, r2
 8019fd4:	0018      	movs	r0, r3
 8019fd6:	f000 f822 	bl	801a01e <USBD_GetNextDesc>
 8019fda:	0003      	movs	r3, r0
 8019fdc:	617b      	str	r3, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	785b      	ldrb	r3, [r3, #1]
 8019fe2:	2b05      	cmp	r3, #5
 8019fe4:	d109      	bne.n	8019ffa <USBD_GetEpDesc+0x6c>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8019fe6:	697b      	ldr	r3, [r7, #20]
 8019fe8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	789b      	ldrb	r3, [r3, #2]
 8019fee:	1cfa      	adds	r2, r7, #3
 8019ff0:	7812      	ldrb	r2, [r2, #0]
 8019ff2:	429a      	cmp	r2, r3
 8019ff4:	d00d      	beq.n	801a012 <USBD_GetEpDesc+0x84>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8019ff6:	2300      	movs	r3, #0
 8019ff8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	789a      	ldrb	r2, [r3, #2]
 8019ffe:	78db      	ldrb	r3, [r3, #3]
 801a000:	021b      	lsls	r3, r3, #8
 801a002:	4313      	orrs	r3, r2
 801a004:	b29a      	uxth	r2, r3
 801a006:	230a      	movs	r3, #10
 801a008:	18fb      	adds	r3, r7, r3
 801a00a:	881b      	ldrh	r3, [r3, #0]
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d8dd      	bhi.n	8019fcc <USBD_GetEpDesc+0x3e>
 801a010:	e000      	b.n	801a014 <USBD_GetEpDesc+0x86>
          break;
 801a012:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return (void *)pEpDesc;
 801a014:	693b      	ldr	r3, [r7, #16]
}
 801a016:	0018      	movs	r0, r3
 801a018:	46bd      	mov	sp, r7
 801a01a:	b006      	add	sp, #24
 801a01c:	bd80      	pop	{r7, pc}

0801a01e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801a01e:	b580      	push	{r7, lr}
 801a020:	b084      	sub	sp, #16
 801a022:	af00      	add	r7, sp, #0
 801a024:	6078      	str	r0, [r7, #4]
 801a026:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	881a      	ldrh	r2, [r3, #0]
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	781b      	ldrb	r3, [r3, #0]
 801a034:	b29b      	uxth	r3, r3
 801a036:	18d3      	adds	r3, r2, r3
 801a038:	b29a      	uxth	r2, r3
 801a03a:	683b      	ldr	r3, [r7, #0]
 801a03c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	001a      	movs	r2, r3
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	189b      	adds	r3, r3, r2
 801a048:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801a04a:	68fb      	ldr	r3, [r7, #12]
}
 801a04c:	0018      	movs	r0, r3
 801a04e:	46bd      	mov	sp, r7
 801a050:	b004      	add	sp, #16
 801a052:	bd80      	pop	{r7, pc}

0801a054 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801a054:	b580      	push	{r7, lr}
 801a056:	b086      	sub	sp, #24
 801a058:	af00      	add	r7, sp, #0
 801a05a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	781a      	ldrb	r2, [r3, #0]
 801a064:	2112      	movs	r1, #18
 801a066:	187b      	adds	r3, r7, r1
 801a068:	801a      	strh	r2, [r3, #0]
  _pbuff++;
 801a06a:	697b      	ldr	r3, [r7, #20]
 801a06c:	3301      	adds	r3, #1
 801a06e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	781a      	ldrb	r2, [r3, #0]
 801a074:	2010      	movs	r0, #16
 801a076:	183b      	adds	r3, r7, r0
 801a078:	801a      	strh	r2, [r3, #0]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801a07a:	183b      	adds	r3, r7, r0
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	021b      	lsls	r3, r3, #8
 801a080:	b21a      	sxth	r2, r3
 801a082:	187b      	adds	r3, r7, r1
 801a084:	2100      	movs	r1, #0
 801a086:	5e5b      	ldrsh	r3, [r3, r1]
 801a088:	4313      	orrs	r3, r2
 801a08a:	b21a      	sxth	r2, r3
 801a08c:	210e      	movs	r1, #14
 801a08e:	187b      	adds	r3, r7, r1
 801a090:	801a      	strh	r2, [r3, #0]

  return _SwapVal;
 801a092:	187b      	adds	r3, r7, r1
 801a094:	881b      	ldrh	r3, [r3, #0]
}
 801a096:	0018      	movs	r0, r3
 801a098:	46bd      	mov	sp, r7
 801a09a:	b006      	add	sp, #24
 801a09c:	bd80      	pop	{r7, pc}
	...

0801a0a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a0a0:	b590      	push	{r4, r7, lr}
 801a0a2:	b085      	sub	sp, #20
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a0aa:	230f      	movs	r3, #15
 801a0ac:	18fb      	adds	r3, r7, r3
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a0b2:	683b      	ldr	r3, [r7, #0]
 801a0b4:	781b      	ldrb	r3, [r3, #0]
 801a0b6:	001a      	movs	r2, r3
 801a0b8:	2360      	movs	r3, #96	; 0x60
 801a0ba:	4013      	ands	r3, r2
 801a0bc:	2b40      	cmp	r3, #64	; 0x40
 801a0be:	d004      	beq.n	801a0ca <USBD_StdDevReq+0x2a>
 801a0c0:	d85b      	bhi.n	801a17a <USBD_StdDevReq+0xda>
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d013      	beq.n	801a0ee <USBD_StdDevReq+0x4e>
 801a0c6:	2b20      	cmp	r3, #32
 801a0c8:	d157      	bne.n	801a17a <USBD_StdDevReq+0xda>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801a0ca:	687a      	ldr	r2, [r7, #4]
 801a0cc:	23b5      	movs	r3, #181	; 0xb5
 801a0ce:	009b      	lsls	r3, r3, #2
 801a0d0:	58d2      	ldr	r2, [r2, r3]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	32ae      	adds	r2, #174	; 0xae
 801a0d6:	0092      	lsls	r2, r2, #2
 801a0d8:	58d3      	ldr	r3, [r2, r3]
 801a0da:	689b      	ldr	r3, [r3, #8]
 801a0dc:	220f      	movs	r2, #15
 801a0de:	18bc      	adds	r4, r7, r2
 801a0e0:	6839      	ldr	r1, [r7, #0]
 801a0e2:	687a      	ldr	r2, [r7, #4]
 801a0e4:	0010      	movs	r0, r2
 801a0e6:	4798      	blx	r3
 801a0e8:	0003      	movs	r3, r0
 801a0ea:	7023      	strb	r3, [r4, #0]
      break;
 801a0ec:	e04c      	b.n	801a188 <USBD_StdDevReq+0xe8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	785b      	ldrb	r3, [r3, #1]
 801a0f2:	2b09      	cmp	r3, #9
 801a0f4:	d839      	bhi.n	801a16a <USBD_StdDevReq+0xca>
 801a0f6:	009a      	lsls	r2, r3, #2
 801a0f8:	4b27      	ldr	r3, [pc, #156]	; (801a198 <USBD_StdDevReq+0xf8>)
 801a0fa:	18d3      	adds	r3, r2, r3
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a100:	683a      	ldr	r2, [r7, #0]
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	0011      	movs	r1, r2
 801a106:	0018      	movs	r0, r3
 801a108:	f000 fada 	bl	801a6c0 <USBD_GetDescriptor>
          break;
 801a10c:	e034      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a10e:	683a      	ldr	r2, [r7, #0]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	0011      	movs	r1, r2
 801a114:	0018      	movs	r0, r3
 801a116:	f000 fcad 	bl	801aa74 <USBD_SetAddress>
          break;
 801a11a:	e02d      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801a11c:	230f      	movs	r3, #15
 801a11e:	18fc      	adds	r4, r7, r3
 801a120:	683a      	ldr	r2, [r7, #0]
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	0011      	movs	r1, r2
 801a126:	0018      	movs	r0, r3
 801a128:	f000 fcfa 	bl	801ab20 <USBD_SetConfig>
 801a12c:	0003      	movs	r3, r0
 801a12e:	7023      	strb	r3, [r4, #0]
          break;
 801a130:	e022      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a132:	683a      	ldr	r2, [r7, #0]
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	0011      	movs	r1, r2
 801a138:	0018      	movs	r0, r3
 801a13a:	f000 fdbf 	bl	801acbc <USBD_GetConfig>
          break;
 801a13e:	e01b      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a140:	683a      	ldr	r2, [r7, #0]
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	0011      	movs	r1, r2
 801a146:	0018      	movs	r0, r3
 801a148:	f000 fdf4 	bl	801ad34 <USBD_GetStatus>
          break;
 801a14c:	e014      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a14e:	683a      	ldr	r2, [r7, #0]
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	0011      	movs	r1, r2
 801a154:	0018      	movs	r0, r3
 801a156:	f000 fe28 	bl	801adaa <USBD_SetFeature>
          break;
 801a15a:	e00d      	b.n	801a178 <USBD_StdDevReq+0xd8>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a15c:	683a      	ldr	r2, [r7, #0]
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	0011      	movs	r1, r2
 801a162:	0018      	movs	r0, r3
 801a164:	f000 fe50 	bl	801ae08 <USBD_ClrFeature>
          break;
 801a168:	e006      	b.n	801a178 <USBD_StdDevReq+0xd8>

        default:
          USBD_CtlError(pdev, req);
 801a16a:	683a      	ldr	r2, [r7, #0]
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	0011      	movs	r1, r2
 801a170:	0018      	movs	r0, r3
 801a172:	f000 fead 	bl	801aed0 <USBD_CtlError>
          break;
 801a176:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801a178:	e006      	b.n	801a188 <USBD_StdDevReq+0xe8>

    default:
      USBD_CtlError(pdev, req);
 801a17a:	683a      	ldr	r2, [r7, #0]
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	0011      	movs	r1, r2
 801a180:	0018      	movs	r0, r3
 801a182:	f000 fea5 	bl	801aed0 <USBD_CtlError>
      break;
 801a186:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801a188:	230f      	movs	r3, #15
 801a18a:	18fb      	adds	r3, r7, r3
 801a18c:	781b      	ldrb	r3, [r3, #0]
}
 801a18e:	0018      	movs	r0, r3
 801a190:	46bd      	mov	sp, r7
 801a192:	b005      	add	sp, #20
 801a194:	bd90      	pop	{r4, r7, pc}
 801a196:	46c0      	nop			; (mov r8, r8)
 801a198:	0802b0a8 	.word	0x0802b0a8

0801a19c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a19c:	b5b0      	push	{r4, r5, r7, lr}
 801a19e:	b084      	sub	sp, #16
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	6078      	str	r0, [r7, #4]
 801a1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a1a6:	230f      	movs	r3, #15
 801a1a8:	18fb      	adds	r3, r7, r3
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	701a      	strb	r2, [r3, #0]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	781b      	ldrb	r3, [r3, #0]
 801a1b2:	001a      	movs	r2, r3
 801a1b4:	2360      	movs	r3, #96	; 0x60
 801a1b6:	4013      	ands	r3, r2
 801a1b8:	2b40      	cmp	r3, #64	; 0x40
 801a1ba:	d005      	beq.n	801a1c8 <USBD_StdItfReq+0x2c>
 801a1bc:	d900      	bls.n	801a1c0 <USBD_StdItfReq+0x24>
 801a1be:	e06c      	b.n	801a29a <USBD_StdItfReq+0xfe>
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d001      	beq.n	801a1c8 <USBD_StdItfReq+0x2c>
 801a1c4:	2b20      	cmp	r3, #32
 801a1c6:	d168      	bne.n	801a29a <USBD_StdItfReq+0xfe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a1c8:	687a      	ldr	r2, [r7, #4]
 801a1ca:	23a7      	movs	r3, #167	; 0xa7
 801a1cc:	009b      	lsls	r3, r3, #2
 801a1ce:	5cd3      	ldrb	r3, [r2, r3]
 801a1d0:	b2db      	uxtb	r3, r3
 801a1d2:	3b01      	subs	r3, #1
 801a1d4:	2b02      	cmp	r3, #2
 801a1d6:	d857      	bhi.n	801a288 <USBD_StdItfReq+0xec>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	889b      	ldrh	r3, [r3, #4]
 801a1dc:	b2db      	uxtb	r3, r3
 801a1de:	2b01      	cmp	r3, #1
 801a1e0:	d84b      	bhi.n	801a27a <USBD_StdItfReq+0xde>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	889b      	ldrh	r3, [r3, #4]
 801a1e6:	b2da      	uxtb	r2, r3
 801a1e8:	250e      	movs	r5, #14
 801a1ea:	197c      	adds	r4, r7, r5
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	0011      	movs	r1, r2
 801a1f0:	0018      	movs	r0, r3
 801a1f2:	f7ff feb4 	bl	8019f5e <USBD_CoreFindIF>
 801a1f6:	0003      	movs	r3, r0
 801a1f8:	7023      	strb	r3, [r4, #0]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a1fa:	0029      	movs	r1, r5
 801a1fc:	187b      	adds	r3, r7, r1
 801a1fe:	781b      	ldrb	r3, [r3, #0]
 801a200:	2bff      	cmp	r3, #255	; 0xff
 801a202:	d028      	beq.n	801a256 <USBD_StdItfReq+0xba>
 801a204:	187b      	adds	r3, r7, r1
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d124      	bne.n	801a256 <USBD_StdItfReq+0xba>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801a20c:	187b      	adds	r3, r7, r1
 801a20e:	781a      	ldrb	r2, [r3, #0]
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	32ae      	adds	r2, #174	; 0xae
 801a214:	0092      	lsls	r2, r2, #2
 801a216:	58d3      	ldr	r3, [r2, r3]
 801a218:	689b      	ldr	r3, [r3, #8]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d016      	beq.n	801a24c <USBD_StdItfReq+0xb0>
              {
                pdev->classId = idx;
 801a21e:	0008      	movs	r0, r1
 801a220:	187b      	adds	r3, r7, r1
 801a222:	7819      	ldrb	r1, [r3, #0]
 801a224:	687a      	ldr	r2, [r7, #4]
 801a226:	23b5      	movs	r3, #181	; 0xb5
 801a228:	009b      	lsls	r3, r3, #2
 801a22a:	50d1      	str	r1, [r2, r3]
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801a22c:	183b      	adds	r3, r7, r0
 801a22e:	781a      	ldrb	r2, [r3, #0]
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	32ae      	adds	r2, #174	; 0xae
 801a234:	0092      	lsls	r2, r2, #2
 801a236:	58d3      	ldr	r3, [r2, r3]
 801a238:	689b      	ldr	r3, [r3, #8]
 801a23a:	220f      	movs	r2, #15
 801a23c:	18bc      	adds	r4, r7, r2
 801a23e:	6839      	ldr	r1, [r7, #0]
 801a240:	687a      	ldr	r2, [r7, #4]
 801a242:	0010      	movs	r0, r2
 801a244:	4798      	blx	r3
 801a246:	0003      	movs	r3, r0
 801a248:	7023      	strb	r3, [r4, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 801a24a:	e008      	b.n	801a25e <USBD_StdItfReq+0xc2>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801a24c:	230f      	movs	r3, #15
 801a24e:	18fb      	adds	r3, r7, r3
 801a250:	2203      	movs	r2, #3
 801a252:	701a      	strb	r2, [r3, #0]
              if (pdev->pClass[idx]->Setup != NULL)
 801a254:	e003      	b.n	801a25e <USBD_StdItfReq+0xc2>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801a256:	230f      	movs	r3, #15
 801a258:	18fb      	adds	r3, r7, r3
 801a25a:	2203      	movs	r2, #3
 801a25c:	701a      	strb	r2, [r3, #0]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	88db      	ldrh	r3, [r3, #6]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d117      	bne.n	801a296 <USBD_StdItfReq+0xfa>
 801a266:	230f      	movs	r3, #15
 801a268:	18fb      	adds	r3, r7, r3
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d112      	bne.n	801a296 <USBD_StdItfReq+0xfa>
            {
              (void)USBD_CtlSendStatus(pdev);
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	0018      	movs	r0, r3
 801a274:	f000 ff12 	bl	801b09c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a278:	e00d      	b.n	801a296 <USBD_StdItfReq+0xfa>
            USBD_CtlError(pdev, req);
 801a27a:	683a      	ldr	r2, [r7, #0]
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	0011      	movs	r1, r2
 801a280:	0018      	movs	r0, r3
 801a282:	f000 fe25 	bl	801aed0 <USBD_CtlError>
          break;
 801a286:	e006      	b.n	801a296 <USBD_StdItfReq+0xfa>

        default:
          USBD_CtlError(pdev, req);
 801a288:	683a      	ldr	r2, [r7, #0]
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	0011      	movs	r1, r2
 801a28e:	0018      	movs	r0, r3
 801a290:	f000 fe1e 	bl	801aed0 <USBD_CtlError>
          break;
 801a294:	e000      	b.n	801a298 <USBD_StdItfReq+0xfc>
          break;
 801a296:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801a298:	e006      	b.n	801a2a8 <USBD_StdItfReq+0x10c>

    default:
      USBD_CtlError(pdev, req);
 801a29a:	683a      	ldr	r2, [r7, #0]
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	0011      	movs	r1, r2
 801a2a0:	0018      	movs	r0, r3
 801a2a2:	f000 fe15 	bl	801aed0 <USBD_CtlError>
      break;
 801a2a6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801a2a8:	230f      	movs	r3, #15
 801a2aa:	18fb      	adds	r3, r7, r3
 801a2ac:	781b      	ldrb	r3, [r3, #0]
}
 801a2ae:	0018      	movs	r0, r3
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	b004      	add	sp, #16
 801a2b4:	bdb0      	pop	{r4, r5, r7, pc}

0801a2b6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a2b6:	b5b0      	push	{r4, r5, r7, lr}
 801a2b8:	b084      	sub	sp, #16
 801a2ba:	af00      	add	r7, sp, #0
 801a2bc:	6078      	str	r0, [r7, #4]
 801a2be:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801a2c0:	230f      	movs	r3, #15
 801a2c2:	18fb      	adds	r3, r7, r3
 801a2c4:	2200      	movs	r2, #0
 801a2c6:	701a      	strb	r2, [r3, #0]

  ep_addr = LOBYTE(req->wIndex);
 801a2c8:	683b      	ldr	r3, [r7, #0]
 801a2ca:	889a      	ldrh	r2, [r3, #4]
 801a2cc:	230e      	movs	r3, #14
 801a2ce:	18fb      	adds	r3, r7, r3
 801a2d0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	001a      	movs	r2, r3
 801a2d8:	2360      	movs	r3, #96	; 0x60
 801a2da:	4013      	ands	r3, r2
 801a2dc:	2b40      	cmp	r3, #64	; 0x40
 801a2de:	d006      	beq.n	801a2ee <USBD_StdEPReq+0x38>
 801a2e0:	d900      	bls.n	801a2e4 <USBD_StdEPReq+0x2e>
 801a2e2:	e1de      	b.n	801a6a2 <USBD_StdEPReq+0x3ec>
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d039      	beq.n	801a35c <USBD_StdEPReq+0xa6>
 801a2e8:	2b20      	cmp	r3, #32
 801a2ea:	d000      	beq.n	801a2ee <USBD_StdEPReq+0x38>
 801a2ec:	e1d9      	b.n	801a6a2 <USBD_StdEPReq+0x3ec>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801a2ee:	250d      	movs	r5, #13
 801a2f0:	197c      	adds	r4, r7, r5
 801a2f2:	230e      	movs	r3, #14
 801a2f4:	18fb      	adds	r3, r7, r3
 801a2f6:	781a      	ldrb	r2, [r3, #0]
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	0011      	movs	r1, r2
 801a2fc:	0018      	movs	r0, r3
 801a2fe:	f7ff fe3a 	bl	8019f76 <USBD_CoreFindEP>
 801a302:	0003      	movs	r3, r0
 801a304:	7023      	strb	r3, [r4, #0]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a306:	197b      	adds	r3, r7, r5
 801a308:	781b      	ldrb	r3, [r3, #0]
 801a30a:	2bff      	cmp	r3, #255	; 0xff
 801a30c:	d100      	bne.n	801a310 <USBD_StdEPReq+0x5a>
 801a30e:	e1cf      	b.n	801a6b0 <USBD_StdEPReq+0x3fa>
 801a310:	197b      	adds	r3, r7, r5
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d000      	beq.n	801a31a <USBD_StdEPReq+0x64>
 801a318:	e1ca      	b.n	801a6b0 <USBD_StdEPReq+0x3fa>
      {
        pdev->classId = idx;
 801a31a:	197b      	adds	r3, r7, r5
 801a31c:	7819      	ldrb	r1, [r3, #0]
 801a31e:	687a      	ldr	r2, [r7, #4]
 801a320:	23b5      	movs	r3, #181	; 0xb5
 801a322:	009b      	lsls	r3, r3, #2
 801a324:	50d1      	str	r1, [r2, r3]
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801a326:	0029      	movs	r1, r5
 801a328:	187b      	adds	r3, r7, r1
 801a32a:	781a      	ldrb	r2, [r3, #0]
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	32ae      	adds	r2, #174	; 0xae
 801a330:	0092      	lsls	r2, r2, #2
 801a332:	58d3      	ldr	r3, [r2, r3]
 801a334:	689b      	ldr	r3, [r3, #8]
 801a336:	2b00      	cmp	r3, #0
 801a338:	d100      	bne.n	801a33c <USBD_StdEPReq+0x86>
 801a33a:	e1b9      	b.n	801a6b0 <USBD_StdEPReq+0x3fa>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801a33c:	187b      	adds	r3, r7, r1
 801a33e:	781a      	ldrb	r2, [r3, #0]
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	32ae      	adds	r2, #174	; 0xae
 801a344:	0092      	lsls	r2, r2, #2
 801a346:	58d3      	ldr	r3, [r2, r3]
 801a348:	689b      	ldr	r3, [r3, #8]
 801a34a:	220f      	movs	r2, #15
 801a34c:	18bc      	adds	r4, r7, r2
 801a34e:	6839      	ldr	r1, [r7, #0]
 801a350:	687a      	ldr	r2, [r7, #4]
 801a352:	0010      	movs	r0, r2
 801a354:	4798      	blx	r3
 801a356:	0003      	movs	r3, r0
 801a358:	7023      	strb	r3, [r4, #0]
        }
      }
      break;
 801a35a:	e1a9      	b.n	801a6b0 <USBD_StdEPReq+0x3fa>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a35c:	683b      	ldr	r3, [r7, #0]
 801a35e:	785b      	ldrb	r3, [r3, #1]
 801a360:	2b03      	cmp	r3, #3
 801a362:	d007      	beq.n	801a374 <USBD_StdEPReq+0xbe>
 801a364:	dd00      	ble.n	801a368 <USBD_StdEPReq+0xb2>
 801a366:	e194      	b.n	801a692 <USBD_StdEPReq+0x3dc>
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d100      	bne.n	801a36e <USBD_StdEPReq+0xb8>
 801a36c:	e0c9      	b.n	801a502 <USBD_StdEPReq+0x24c>
 801a36e:	2b01      	cmp	r3, #1
 801a370:	d04d      	beq.n	801a40e <USBD_StdEPReq+0x158>
 801a372:	e18e      	b.n	801a692 <USBD_StdEPReq+0x3dc>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a374:	687a      	ldr	r2, [r7, #4]
 801a376:	23a7      	movs	r3, #167	; 0xa7
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	5cd3      	ldrb	r3, [r2, r3]
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	2b02      	cmp	r3, #2
 801a380:	d002      	beq.n	801a388 <USBD_StdEPReq+0xd2>
 801a382:	2b03      	cmp	r3, #3
 801a384:	d01e      	beq.n	801a3c4 <USBD_StdEPReq+0x10e>
 801a386:	e03a      	b.n	801a3fe <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a388:	220e      	movs	r2, #14
 801a38a:	18bb      	adds	r3, r7, r2
 801a38c:	781b      	ldrb	r3, [r3, #0]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d011      	beq.n	801a3b6 <USBD_StdEPReq+0x100>
 801a392:	18bb      	adds	r3, r7, r2
 801a394:	781b      	ldrb	r3, [r3, #0]
 801a396:	2b80      	cmp	r3, #128	; 0x80
 801a398:	d00d      	beq.n	801a3b6 <USBD_StdEPReq+0x100>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a39a:	18bb      	adds	r3, r7, r2
 801a39c:	781a      	ldrb	r2, [r3, #0]
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	0011      	movs	r1, r2
 801a3a2:	0018      	movs	r0, r3
 801a3a4:	f007 f87b 	bl	802149e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2180      	movs	r1, #128	; 0x80
 801a3ac:	0018      	movs	r0, r3
 801a3ae:	f007 f876 	bl	802149e <USBD_LL_StallEP>
 801a3b2:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a3b4:	e02a      	b.n	801a40c <USBD_StdEPReq+0x156>
                USBD_CtlError(pdev, req);
 801a3b6:	683a      	ldr	r2, [r7, #0]
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	0011      	movs	r1, r2
 801a3bc:	0018      	movs	r0, r3
 801a3be:	f000 fd87 	bl	801aed0 <USBD_CtlError>
              break;
 801a3c2:	e023      	b.n	801a40c <USBD_StdEPReq+0x156>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a3c4:	683b      	ldr	r3, [r7, #0]
 801a3c6:	885b      	ldrh	r3, [r3, #2]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d113      	bne.n	801a3f4 <USBD_StdEPReq+0x13e>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a3cc:	220e      	movs	r2, #14
 801a3ce:	18bb      	adds	r3, r7, r2
 801a3d0:	781b      	ldrb	r3, [r3, #0]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d00e      	beq.n	801a3f4 <USBD_StdEPReq+0x13e>
 801a3d6:	18bb      	adds	r3, r7, r2
 801a3d8:	781b      	ldrb	r3, [r3, #0]
 801a3da:	2b80      	cmp	r3, #128	; 0x80
 801a3dc:	d00a      	beq.n	801a3f4 <USBD_StdEPReq+0x13e>
 801a3de:	683b      	ldr	r3, [r7, #0]
 801a3e0:	88db      	ldrh	r3, [r3, #6]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d106      	bne.n	801a3f4 <USBD_StdEPReq+0x13e>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801a3e6:	18bb      	adds	r3, r7, r2
 801a3e8:	781a      	ldrb	r2, [r3, #0]
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	0011      	movs	r1, r2
 801a3ee:	0018      	movs	r0, r3
 801a3f0:	f007 f855 	bl	802149e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	0018      	movs	r0, r3
 801a3f8:	f000 fe50 	bl	801b09c <USBD_CtlSendStatus>

              break;
 801a3fc:	e006      	b.n	801a40c <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801a3fe:	683a      	ldr	r2, [r7, #0]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	0011      	movs	r1, r2
 801a404:	0018      	movs	r0, r3
 801a406:	f000 fd63 	bl	801aed0 <USBD_CtlError>
              break;
 801a40a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801a40c:	e148      	b.n	801a6a0 <USBD_StdEPReq+0x3ea>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a40e:	687a      	ldr	r2, [r7, #4]
 801a410:	23a7      	movs	r3, #167	; 0xa7
 801a412:	009b      	lsls	r3, r3, #2
 801a414:	5cd3      	ldrb	r3, [r2, r3]
 801a416:	b2db      	uxtb	r3, r3
 801a418:	2b02      	cmp	r3, #2
 801a41a:	d002      	beq.n	801a422 <USBD_StdEPReq+0x16c>
 801a41c:	2b03      	cmp	r3, #3
 801a41e:	d01e      	beq.n	801a45e <USBD_StdEPReq+0x1a8>
 801a420:	e066      	b.n	801a4f0 <USBD_StdEPReq+0x23a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a422:	220e      	movs	r2, #14
 801a424:	18bb      	adds	r3, r7, r2
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d011      	beq.n	801a450 <USBD_StdEPReq+0x19a>
 801a42c:	18bb      	adds	r3, r7, r2
 801a42e:	781b      	ldrb	r3, [r3, #0]
 801a430:	2b80      	cmp	r3, #128	; 0x80
 801a432:	d00d      	beq.n	801a450 <USBD_StdEPReq+0x19a>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801a434:	18bb      	adds	r3, r7, r2
 801a436:	781a      	ldrb	r2, [r3, #0]
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	0011      	movs	r1, r2
 801a43c:	0018      	movs	r0, r3
 801a43e:	f007 f82e 	bl	802149e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	2180      	movs	r1, #128	; 0x80
 801a446:	0018      	movs	r0, r3
 801a448:	f007 f829 	bl	802149e <USBD_LL_StallEP>
 801a44c:	46c0      	nop			; (mov r8, r8)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a44e:	e057      	b.n	801a500 <USBD_StdEPReq+0x24a>
                USBD_CtlError(pdev, req);
 801a450:	683a      	ldr	r2, [r7, #0]
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	0011      	movs	r1, r2
 801a456:	0018      	movs	r0, r3
 801a458:	f000 fd3a 	bl	801aed0 <USBD_CtlError>
              break;
 801a45c:	e050      	b.n	801a500 <USBD_StdEPReq+0x24a>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a45e:	683b      	ldr	r3, [r7, #0]
 801a460:	885b      	ldrh	r3, [r3, #2]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d14b      	bne.n	801a4fe <USBD_StdEPReq+0x248>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a466:	210e      	movs	r1, #14
 801a468:	187b      	adds	r3, r7, r1
 801a46a:	781b      	ldrb	r3, [r3, #0]
 801a46c:	227f      	movs	r2, #127	; 0x7f
 801a46e:	4013      	ands	r3, r2
 801a470:	d006      	beq.n	801a480 <USBD_StdEPReq+0x1ca>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801a472:	187b      	adds	r3, r7, r1
 801a474:	781a      	ldrb	r2, [r3, #0]
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	0011      	movs	r1, r2
 801a47a:	0018      	movs	r0, r3
 801a47c:	f007 f83a 	bl	80214f4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	0018      	movs	r0, r3
 801a484:	f000 fe0a 	bl	801b09c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801a488:	250d      	movs	r5, #13
 801a48a:	197c      	adds	r4, r7, r5
 801a48c:	230e      	movs	r3, #14
 801a48e:	18fb      	adds	r3, r7, r3
 801a490:	781a      	ldrb	r2, [r3, #0]
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	0011      	movs	r1, r2
 801a496:	0018      	movs	r0, r3
 801a498:	f7ff fd6d 	bl	8019f76 <USBD_CoreFindEP>
 801a49c:	0003      	movs	r3, r0
 801a49e:	7023      	strb	r3, [r4, #0]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801a4a0:	197b      	adds	r3, r7, r5
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	2bff      	cmp	r3, #255	; 0xff
 801a4a6:	d02a      	beq.n	801a4fe <USBD_StdEPReq+0x248>
 801a4a8:	197b      	adds	r3, r7, r5
 801a4aa:	781b      	ldrb	r3, [r3, #0]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d126      	bne.n	801a4fe <USBD_StdEPReq+0x248>
                {
                  pdev->classId = idx;
 801a4b0:	197b      	adds	r3, r7, r5
 801a4b2:	7819      	ldrb	r1, [r3, #0]
 801a4b4:	687a      	ldr	r2, [r7, #4]
 801a4b6:	23b5      	movs	r3, #181	; 0xb5
 801a4b8:	009b      	lsls	r3, r3, #2
 801a4ba:	50d1      	str	r1, [r2, r3]
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801a4bc:	0029      	movs	r1, r5
 801a4be:	187b      	adds	r3, r7, r1
 801a4c0:	781a      	ldrb	r2, [r3, #0]
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	32ae      	adds	r2, #174	; 0xae
 801a4c6:	0092      	lsls	r2, r2, #2
 801a4c8:	58d3      	ldr	r3, [r2, r3]
 801a4ca:	689b      	ldr	r3, [r3, #8]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d016      	beq.n	801a4fe <USBD_StdEPReq+0x248>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801a4d0:	187b      	adds	r3, r7, r1
 801a4d2:	781a      	ldrb	r2, [r3, #0]
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	32ae      	adds	r2, #174	; 0xae
 801a4d8:	0092      	lsls	r2, r2, #2
 801a4da:	58d3      	ldr	r3, [r2, r3]
 801a4dc:	689b      	ldr	r3, [r3, #8]
 801a4de:	220f      	movs	r2, #15
 801a4e0:	18bc      	adds	r4, r7, r2
 801a4e2:	6839      	ldr	r1, [r7, #0]
 801a4e4:	687a      	ldr	r2, [r7, #4]
 801a4e6:	0010      	movs	r0, r2
 801a4e8:	4798      	blx	r3
 801a4ea:	0003      	movs	r3, r0
 801a4ec:	7023      	strb	r3, [r4, #0]
                  }
                }
              }
              break;
 801a4ee:	e006      	b.n	801a4fe <USBD_StdEPReq+0x248>

            default:
              USBD_CtlError(pdev, req);
 801a4f0:	683a      	ldr	r2, [r7, #0]
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	0011      	movs	r1, r2
 801a4f6:	0018      	movs	r0, r3
 801a4f8:	f000 fcea 	bl	801aed0 <USBD_CtlError>
              break;
 801a4fc:	e000      	b.n	801a500 <USBD_StdEPReq+0x24a>
              break;
 801a4fe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801a500:	e0ce      	b.n	801a6a0 <USBD_StdEPReq+0x3ea>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a502:	687a      	ldr	r2, [r7, #4]
 801a504:	23a7      	movs	r3, #167	; 0xa7
 801a506:	009b      	lsls	r3, r3, #2
 801a508:	5cd3      	ldrb	r3, [r2, r3]
 801a50a:	b2db      	uxtb	r3, r3
 801a50c:	2b02      	cmp	r3, #2
 801a50e:	d002      	beq.n	801a516 <USBD_StdEPReq+0x260>
 801a510:	2b03      	cmp	r3, #3
 801a512:	d03c      	beq.n	801a58e <USBD_StdEPReq+0x2d8>
 801a514:	e0b5      	b.n	801a682 <USBD_StdEPReq+0x3cc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a516:	220e      	movs	r2, #14
 801a518:	18bb      	adds	r3, r7, r2
 801a51a:	781b      	ldrb	r3, [r3, #0]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d00a      	beq.n	801a536 <USBD_StdEPReq+0x280>
 801a520:	18bb      	adds	r3, r7, r2
 801a522:	781b      	ldrb	r3, [r3, #0]
 801a524:	2b80      	cmp	r3, #128	; 0x80
 801a526:	d006      	beq.n	801a536 <USBD_StdEPReq+0x280>
              {
                USBD_CtlError(pdev, req);
 801a528:	683a      	ldr	r2, [r7, #0]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	0011      	movs	r1, r2
 801a52e:	0018      	movs	r0, r3
 801a530:	f000 fcce 	bl	801aed0 <USBD_CtlError>
                break;
 801a534:	e0ac      	b.n	801a690 <USBD_StdEPReq+0x3da>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a536:	220e      	movs	r2, #14
 801a538:	18bb      	adds	r3, r7, r2
 801a53a:	781b      	ldrb	r3, [r3, #0]
 801a53c:	b25b      	sxtb	r3, r3
 801a53e:	2b00      	cmp	r3, #0
 801a540:	da0c      	bge.n	801a55c <USBD_StdEPReq+0x2a6>
 801a542:	18bb      	adds	r3, r7, r2
 801a544:	781b      	ldrb	r3, [r3, #0]
 801a546:	227f      	movs	r2, #127	; 0x7f
 801a548:	401a      	ands	r2, r3
 801a54a:	0013      	movs	r3, r2
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	189b      	adds	r3, r3, r2
 801a550:	009b      	lsls	r3, r3, #2
 801a552:	3310      	adds	r3, #16
 801a554:	687a      	ldr	r2, [r7, #4]
 801a556:	18d3      	adds	r3, r2, r3
 801a558:	3304      	adds	r3, #4
 801a55a:	e00d      	b.n	801a578 <USBD_StdEPReq+0x2c2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a55c:	230e      	movs	r3, #14
 801a55e:	18fb      	adds	r3, r7, r3
 801a560:	781b      	ldrb	r3, [r3, #0]
 801a562:	227f      	movs	r2, #127	; 0x7f
 801a564:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a566:	0013      	movs	r3, r2
 801a568:	009b      	lsls	r3, r3, #2
 801a56a:	189b      	adds	r3, r3, r2
 801a56c:	009b      	lsls	r3, r3, #2
 801a56e:	3351      	adds	r3, #81	; 0x51
 801a570:	33ff      	adds	r3, #255	; 0xff
 801a572:	687a      	ldr	r2, [r7, #4]
 801a574:	18d3      	adds	r3, r2, r3
 801a576:	3304      	adds	r3, #4
 801a578:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a57a:	68bb      	ldr	r3, [r7, #8]
 801a57c:	2200      	movs	r2, #0
 801a57e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a580:	68b9      	ldr	r1, [r7, #8]
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	2202      	movs	r2, #2
 801a586:	0018      	movs	r0, r3
 801a588:	f000 fd2a 	bl	801afe0 <USBD_CtlSendData>
              break;
 801a58c:	e080      	b.n	801a690 <USBD_StdEPReq+0x3da>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a58e:	220e      	movs	r2, #14
 801a590:	18bb      	adds	r3, r7, r2
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	b25b      	sxtb	r3, r3
 801a596:	2b00      	cmp	r3, #0
 801a598:	da14      	bge.n	801a5c4 <USBD_StdEPReq+0x30e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a59a:	18bb      	adds	r3, r7, r2
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	220f      	movs	r2, #15
 801a5a0:	401a      	ands	r2, r3
 801a5a2:	6879      	ldr	r1, [r7, #4]
 801a5a4:	0013      	movs	r3, r2
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	189b      	adds	r3, r3, r2
 801a5aa:	009b      	lsls	r3, r3, #2
 801a5ac:	18cb      	adds	r3, r1, r3
 801a5ae:	3324      	adds	r3, #36	; 0x24
 801a5b0:	881b      	ldrh	r3, [r3, #0]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d11e      	bne.n	801a5f4 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801a5b6:	683a      	ldr	r2, [r7, #0]
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	0011      	movs	r1, r2
 801a5bc:	0018      	movs	r0, r3
 801a5be:	f000 fc87 	bl	801aed0 <USBD_CtlError>
                  break;
 801a5c2:	e065      	b.n	801a690 <USBD_StdEPReq+0x3da>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a5c4:	230e      	movs	r3, #14
 801a5c6:	18fb      	adds	r3, r7, r3
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	220f      	movs	r2, #15
 801a5cc:	401a      	ands	r2, r3
 801a5ce:	6878      	ldr	r0, [r7, #4]
 801a5d0:	23b2      	movs	r3, #178	; 0xb2
 801a5d2:	0059      	lsls	r1, r3, #1
 801a5d4:	0013      	movs	r3, r2
 801a5d6:	009b      	lsls	r3, r3, #2
 801a5d8:	189b      	adds	r3, r3, r2
 801a5da:	009b      	lsls	r3, r3, #2
 801a5dc:	18c3      	adds	r3, r0, r3
 801a5de:	185b      	adds	r3, r3, r1
 801a5e0:	881b      	ldrh	r3, [r3, #0]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <USBD_StdEPReq+0x33e>
                {
                  USBD_CtlError(pdev, req);
 801a5e6:	683a      	ldr	r2, [r7, #0]
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	0011      	movs	r1, r2
 801a5ec:	0018      	movs	r0, r3
 801a5ee:	f000 fc6f 	bl	801aed0 <USBD_CtlError>
                  break;
 801a5f2:	e04d      	b.n	801a690 <USBD_StdEPReq+0x3da>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a5f4:	220e      	movs	r2, #14
 801a5f6:	18bb      	adds	r3, r7, r2
 801a5f8:	781b      	ldrb	r3, [r3, #0]
 801a5fa:	b25b      	sxtb	r3, r3
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	da0c      	bge.n	801a61a <USBD_StdEPReq+0x364>
 801a600:	18bb      	adds	r3, r7, r2
 801a602:	781b      	ldrb	r3, [r3, #0]
 801a604:	227f      	movs	r2, #127	; 0x7f
 801a606:	401a      	ands	r2, r3
 801a608:	0013      	movs	r3, r2
 801a60a:	009b      	lsls	r3, r3, #2
 801a60c:	189b      	adds	r3, r3, r2
 801a60e:	009b      	lsls	r3, r3, #2
 801a610:	3310      	adds	r3, #16
 801a612:	687a      	ldr	r2, [r7, #4]
 801a614:	18d3      	adds	r3, r2, r3
 801a616:	3304      	adds	r3, #4
 801a618:	e00d      	b.n	801a636 <USBD_StdEPReq+0x380>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a61a:	230e      	movs	r3, #14
 801a61c:	18fb      	adds	r3, r7, r3
 801a61e:	781b      	ldrb	r3, [r3, #0]
 801a620:	227f      	movs	r2, #127	; 0x7f
 801a622:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a624:	0013      	movs	r3, r2
 801a626:	009b      	lsls	r3, r3, #2
 801a628:	189b      	adds	r3, r3, r2
 801a62a:	009b      	lsls	r3, r3, #2
 801a62c:	3351      	adds	r3, #81	; 0x51
 801a62e:	33ff      	adds	r3, #255	; 0xff
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	18d3      	adds	r3, r2, r3
 801a634:	3304      	adds	r3, #4
 801a636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a638:	220e      	movs	r2, #14
 801a63a:	18bb      	adds	r3, r7, r2
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d003      	beq.n	801a64a <USBD_StdEPReq+0x394>
 801a642:	18bb      	adds	r3, r7, r2
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	2b80      	cmp	r3, #128	; 0x80
 801a648:	d103      	bne.n	801a652 <USBD_StdEPReq+0x39c>
              {
                pep->status = 0x0000U;
 801a64a:	68bb      	ldr	r3, [r7, #8]
 801a64c:	2200      	movs	r2, #0
 801a64e:	601a      	str	r2, [r3, #0]
 801a650:	e010      	b.n	801a674 <USBD_StdEPReq+0x3be>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801a652:	230e      	movs	r3, #14
 801a654:	18fb      	adds	r3, r7, r3
 801a656:	781a      	ldrb	r2, [r3, #0]
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	0011      	movs	r1, r2
 801a65c:	0018      	movs	r0, r3
 801a65e:	f006 ff74 	bl	802154a <USBD_LL_IsStallEP>
 801a662:	1e03      	subs	r3, r0, #0
 801a664:	d003      	beq.n	801a66e <USBD_StdEPReq+0x3b8>
              {
                pep->status = 0x0001U;
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	2201      	movs	r2, #1
 801a66a:	601a      	str	r2, [r3, #0]
 801a66c:	e002      	b.n	801a674 <USBD_StdEPReq+0x3be>
              }
              else
              {
                pep->status = 0x0000U;
 801a66e:	68bb      	ldr	r3, [r7, #8]
 801a670:	2200      	movs	r2, #0
 801a672:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801a674:	68b9      	ldr	r1, [r7, #8]
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	2202      	movs	r2, #2
 801a67a:	0018      	movs	r0, r3
 801a67c:	f000 fcb0 	bl	801afe0 <USBD_CtlSendData>
              break;
 801a680:	e006      	b.n	801a690 <USBD_StdEPReq+0x3da>

            default:
              USBD_CtlError(pdev, req);
 801a682:	683a      	ldr	r2, [r7, #0]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	0011      	movs	r1, r2
 801a688:	0018      	movs	r0, r3
 801a68a:	f000 fc21 	bl	801aed0 <USBD_CtlError>
              break;
 801a68e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 801a690:	e006      	b.n	801a6a0 <USBD_StdEPReq+0x3ea>

        default:
          USBD_CtlError(pdev, req);
 801a692:	683a      	ldr	r2, [r7, #0]
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	0011      	movs	r1, r2
 801a698:	0018      	movs	r0, r3
 801a69a:	f000 fc19 	bl	801aed0 <USBD_CtlError>
          break;
 801a69e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801a6a0:	e007      	b.n	801a6b2 <USBD_StdEPReq+0x3fc>

    default:
      USBD_CtlError(pdev, req);
 801a6a2:	683a      	ldr	r2, [r7, #0]
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	0011      	movs	r1, r2
 801a6a8:	0018      	movs	r0, r3
 801a6aa:	f000 fc11 	bl	801aed0 <USBD_CtlError>
      break;
 801a6ae:	e000      	b.n	801a6b2 <USBD_StdEPReq+0x3fc>
      break;
 801a6b0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801a6b2:	230f      	movs	r3, #15
 801a6b4:	18fb      	adds	r3, r7, r3
 801a6b6:	781b      	ldrb	r3, [r3, #0]
}
 801a6b8:	0018      	movs	r0, r3
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	b004      	add	sp, #16
 801a6be:	bdb0      	pop	{r4, r5, r7, pc}

0801a6c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b084      	sub	sp, #16
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
 801a6c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a6ca:	2308      	movs	r3, #8
 801a6cc:	18fb      	adds	r3, r7, r3
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a6d6:	230b      	movs	r3, #11
 801a6d8:	18fb      	adds	r3, r7, r3
 801a6da:	2200      	movs	r2, #0
 801a6dc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801a6de:	683b      	ldr	r3, [r7, #0]
 801a6e0:	885b      	ldrh	r3, [r3, #2]
 801a6e2:	0a1b      	lsrs	r3, r3, #8
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	2b0f      	cmp	r3, #15
 801a6e8:	d900      	bls.n	801a6ec <USBD_GetDescriptor+0x2c>
 801a6ea:	e17b      	b.n	801a9e4 <USBD_GetDescriptor+0x324>
 801a6ec:	009a      	lsls	r2, r3, #2
 801a6ee:	4bdd      	ldr	r3, [pc, #884]	; (801aa64 <USBD_GetDescriptor+0x3a4>)
 801a6f0:	18d3      	adds	r3, r2, r3
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	469f      	mov	pc, r3
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801a6f6:	687a      	ldr	r2, [r7, #4]
 801a6f8:	23ad      	movs	r3, #173	; 0xad
 801a6fa:	009b      	lsls	r3, r3, #2
 801a6fc:	58d3      	ldr	r3, [r2, r3]
 801a6fe:	69db      	ldr	r3, [r3, #28]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00d      	beq.n	801a720 <USBD_GetDescriptor+0x60>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801a704:	687a      	ldr	r2, [r7, #4]
 801a706:	23ad      	movs	r3, #173	; 0xad
 801a708:	009b      	lsls	r3, r3, #2
 801a70a:	58d3      	ldr	r3, [r2, r3]
 801a70c:	69db      	ldr	r3, [r3, #28]
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	7c12      	ldrb	r2, [r2, #16]
 801a712:	2108      	movs	r1, #8
 801a714:	1879      	adds	r1, r7, r1
 801a716:	0010      	movs	r0, r2
 801a718:	4798      	blx	r3
 801a71a:	0003      	movs	r3, r0
 801a71c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a71e:	e16e      	b.n	801a9fe <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 801a720:	683a      	ldr	r2, [r7, #0]
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	0011      	movs	r1, r2
 801a726:	0018      	movs	r0, r3
 801a728:	f000 fbd2 	bl	801aed0 <USBD_CtlError>
        err++;
 801a72c:	210b      	movs	r1, #11
 801a72e:	187b      	adds	r3, r7, r1
 801a730:	781a      	ldrb	r2, [r3, #0]
 801a732:	187b      	adds	r3, r7, r1
 801a734:	3201      	adds	r2, #1
 801a736:	701a      	strb	r2, [r3, #0]
      break;
 801a738:	e161      	b.n	801a9fe <USBD_GetDescriptor+0x33e>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	23ad      	movs	r3, #173	; 0xad
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	58d3      	ldr	r3, [r2, r3]
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	687a      	ldr	r2, [r7, #4]
 801a746:	7c12      	ldrb	r2, [r2, #16]
 801a748:	2108      	movs	r1, #8
 801a74a:	1879      	adds	r1, r7, r1
 801a74c:	0010      	movs	r0, r2
 801a74e:	4798      	blx	r3
 801a750:	0003      	movs	r3, r0
 801a752:	60fb      	str	r3, [r7, #12]
      break;
 801a754:	e153      	b.n	801a9fe <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	7c1b      	ldrb	r3, [r3, #16]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d10f      	bne.n	801a77e <USBD_GetDescriptor+0xbe>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801a75e:	687a      	ldr	r2, [r7, #4]
 801a760:	23ae      	movs	r3, #174	; 0xae
 801a762:	009b      	lsls	r3, r3, #2
 801a764:	58d3      	ldr	r3, [r2, r3]
 801a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a768:	2208      	movs	r2, #8
 801a76a:	18ba      	adds	r2, r7, r2
 801a76c:	0010      	movs	r0, r2
 801a76e:	4798      	blx	r3
 801a770:	0003      	movs	r3, r0
 801a772:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	3301      	adds	r3, #1
 801a778:	2202      	movs	r2, #2
 801a77a:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a77c:	e13f      	b.n	801a9fe <USBD_GetDescriptor+0x33e>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	23ae      	movs	r3, #174	; 0xae
 801a782:	009b      	lsls	r3, r3, #2
 801a784:	58d3      	ldr	r3, [r2, r3]
 801a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a788:	2208      	movs	r2, #8
 801a78a:	18ba      	adds	r2, r7, r2
 801a78c:	0010      	movs	r0, r2
 801a78e:	4798      	blx	r3
 801a790:	0003      	movs	r3, r0
 801a792:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	3301      	adds	r3, #1
 801a798:	2202      	movs	r2, #2
 801a79a:	701a      	strb	r2, [r3, #0]
      break;
 801a79c:	e12f      	b.n	801a9fe <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a79e:	683b      	ldr	r3, [r7, #0]
 801a7a0:	885b      	ldrh	r3, [r3, #2]
 801a7a2:	b2db      	uxtb	r3, r3
 801a7a4:	2b05      	cmp	r3, #5
 801a7a6:	d900      	bls.n	801a7aa <USBD_GetDescriptor+0xea>
 801a7a8:	e0d0      	b.n	801a94c <USBD_GetDescriptor+0x28c>
 801a7aa:	009a      	lsls	r2, r3, #2
 801a7ac:	4bae      	ldr	r3, [pc, #696]	; (801aa68 <USBD_GetDescriptor+0x3a8>)
 801a7ae:	18d3      	adds	r3, r2, r3
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a7b4:	687a      	ldr	r2, [r7, #4]
 801a7b6:	23ad      	movs	r3, #173	; 0xad
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	58d3      	ldr	r3, [r2, r3]
 801a7bc:	685b      	ldr	r3, [r3, #4]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d00d      	beq.n	801a7de <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a7c2:	687a      	ldr	r2, [r7, #4]
 801a7c4:	23ad      	movs	r3, #173	; 0xad
 801a7c6:	009b      	lsls	r3, r3, #2
 801a7c8:	58d3      	ldr	r3, [r2, r3]
 801a7ca:	685b      	ldr	r3, [r3, #4]
 801a7cc:	687a      	ldr	r2, [r7, #4]
 801a7ce:	7c12      	ldrb	r2, [r2, #16]
 801a7d0:	2108      	movs	r1, #8
 801a7d2:	1879      	adds	r1, r7, r1
 801a7d4:	0010      	movs	r0, r2
 801a7d6:	4798      	blx	r3
 801a7d8:	0003      	movs	r3, r0
 801a7da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a7dc:	e0c3      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a7de:	683a      	ldr	r2, [r7, #0]
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	0011      	movs	r1, r2
 801a7e4:	0018      	movs	r0, r3
 801a7e6:	f000 fb73 	bl	801aed0 <USBD_CtlError>
            err++;
 801a7ea:	210b      	movs	r1, #11
 801a7ec:	187b      	adds	r3, r7, r1
 801a7ee:	781a      	ldrb	r2, [r3, #0]
 801a7f0:	187b      	adds	r3, r7, r1
 801a7f2:	3201      	adds	r2, #1
 801a7f4:	701a      	strb	r2, [r3, #0]
          break;
 801a7f6:	e0b6      	b.n	801a966 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a7f8:	687a      	ldr	r2, [r7, #4]
 801a7fa:	23ad      	movs	r3, #173	; 0xad
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	58d3      	ldr	r3, [r2, r3]
 801a800:	689b      	ldr	r3, [r3, #8]
 801a802:	2b00      	cmp	r3, #0
 801a804:	d00d      	beq.n	801a822 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a806:	687a      	ldr	r2, [r7, #4]
 801a808:	23ad      	movs	r3, #173	; 0xad
 801a80a:	009b      	lsls	r3, r3, #2
 801a80c:	58d3      	ldr	r3, [r2, r3]
 801a80e:	689b      	ldr	r3, [r3, #8]
 801a810:	687a      	ldr	r2, [r7, #4]
 801a812:	7c12      	ldrb	r2, [r2, #16]
 801a814:	2108      	movs	r1, #8
 801a816:	1879      	adds	r1, r7, r1
 801a818:	0010      	movs	r0, r2
 801a81a:	4798      	blx	r3
 801a81c:	0003      	movs	r3, r0
 801a81e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a820:	e0a1      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a822:	683a      	ldr	r2, [r7, #0]
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	0011      	movs	r1, r2
 801a828:	0018      	movs	r0, r3
 801a82a:	f000 fb51 	bl	801aed0 <USBD_CtlError>
            err++;
 801a82e:	210b      	movs	r1, #11
 801a830:	187b      	adds	r3, r7, r1
 801a832:	781a      	ldrb	r2, [r3, #0]
 801a834:	187b      	adds	r3, r7, r1
 801a836:	3201      	adds	r2, #1
 801a838:	701a      	strb	r2, [r3, #0]
          break;
 801a83a:	e094      	b.n	801a966 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a83c:	687a      	ldr	r2, [r7, #4]
 801a83e:	23ad      	movs	r3, #173	; 0xad
 801a840:	009b      	lsls	r3, r3, #2
 801a842:	58d3      	ldr	r3, [r2, r3]
 801a844:	68db      	ldr	r3, [r3, #12]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d00d      	beq.n	801a866 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a84a:	687a      	ldr	r2, [r7, #4]
 801a84c:	23ad      	movs	r3, #173	; 0xad
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	58d3      	ldr	r3, [r2, r3]
 801a852:	68db      	ldr	r3, [r3, #12]
 801a854:	687a      	ldr	r2, [r7, #4]
 801a856:	7c12      	ldrb	r2, [r2, #16]
 801a858:	2108      	movs	r1, #8
 801a85a:	1879      	adds	r1, r7, r1
 801a85c:	0010      	movs	r0, r2
 801a85e:	4798      	blx	r3
 801a860:	0003      	movs	r3, r0
 801a862:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a864:	e07f      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a866:	683a      	ldr	r2, [r7, #0]
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	0011      	movs	r1, r2
 801a86c:	0018      	movs	r0, r3
 801a86e:	f000 fb2f 	bl	801aed0 <USBD_CtlError>
            err++;
 801a872:	210b      	movs	r1, #11
 801a874:	187b      	adds	r3, r7, r1
 801a876:	781a      	ldrb	r2, [r3, #0]
 801a878:	187b      	adds	r3, r7, r1
 801a87a:	3201      	adds	r2, #1
 801a87c:	701a      	strb	r2, [r3, #0]
          break;
 801a87e:	e072      	b.n	801a966 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a880:	687a      	ldr	r2, [r7, #4]
 801a882:	23ad      	movs	r3, #173	; 0xad
 801a884:	009b      	lsls	r3, r3, #2
 801a886:	58d3      	ldr	r3, [r2, r3]
 801a888:	691b      	ldr	r3, [r3, #16]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d00d      	beq.n	801a8aa <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	23ad      	movs	r3, #173	; 0xad
 801a892:	009b      	lsls	r3, r3, #2
 801a894:	58d3      	ldr	r3, [r2, r3]
 801a896:	691b      	ldr	r3, [r3, #16]
 801a898:	687a      	ldr	r2, [r7, #4]
 801a89a:	7c12      	ldrb	r2, [r2, #16]
 801a89c:	2108      	movs	r1, #8
 801a89e:	1879      	adds	r1, r7, r1
 801a8a0:	0010      	movs	r0, r2
 801a8a2:	4798      	blx	r3
 801a8a4:	0003      	movs	r3, r0
 801a8a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a8a8:	e05d      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a8aa:	683a      	ldr	r2, [r7, #0]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	0011      	movs	r1, r2
 801a8b0:	0018      	movs	r0, r3
 801a8b2:	f000 fb0d 	bl	801aed0 <USBD_CtlError>
            err++;
 801a8b6:	210b      	movs	r1, #11
 801a8b8:	187b      	adds	r3, r7, r1
 801a8ba:	781a      	ldrb	r2, [r3, #0]
 801a8bc:	187b      	adds	r3, r7, r1
 801a8be:	3201      	adds	r2, #1
 801a8c0:	701a      	strb	r2, [r3, #0]
          break;
 801a8c2:	e050      	b.n	801a966 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a8c4:	687a      	ldr	r2, [r7, #4]
 801a8c6:	23ad      	movs	r3, #173	; 0xad
 801a8c8:	009b      	lsls	r3, r3, #2
 801a8ca:	58d3      	ldr	r3, [r2, r3]
 801a8cc:	695b      	ldr	r3, [r3, #20]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d00d      	beq.n	801a8ee <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a8d2:	687a      	ldr	r2, [r7, #4]
 801a8d4:	23ad      	movs	r3, #173	; 0xad
 801a8d6:	009b      	lsls	r3, r3, #2
 801a8d8:	58d3      	ldr	r3, [r2, r3]
 801a8da:	695b      	ldr	r3, [r3, #20]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	7c12      	ldrb	r2, [r2, #16]
 801a8e0:	2108      	movs	r1, #8
 801a8e2:	1879      	adds	r1, r7, r1
 801a8e4:	0010      	movs	r0, r2
 801a8e6:	4798      	blx	r3
 801a8e8:	0003      	movs	r3, r0
 801a8ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a8ec:	e03b      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a8ee:	683a      	ldr	r2, [r7, #0]
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	0011      	movs	r1, r2
 801a8f4:	0018      	movs	r0, r3
 801a8f6:	f000 faeb 	bl	801aed0 <USBD_CtlError>
            err++;
 801a8fa:	210b      	movs	r1, #11
 801a8fc:	187b      	adds	r3, r7, r1
 801a8fe:	781a      	ldrb	r2, [r3, #0]
 801a900:	187b      	adds	r3, r7, r1
 801a902:	3201      	adds	r2, #1
 801a904:	701a      	strb	r2, [r3, #0]
          break;
 801a906:	e02e      	b.n	801a966 <USBD_GetDescriptor+0x2a6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a908:	687a      	ldr	r2, [r7, #4]
 801a90a:	23ad      	movs	r3, #173	; 0xad
 801a90c:	009b      	lsls	r3, r3, #2
 801a90e:	58d3      	ldr	r3, [r2, r3]
 801a910:	699b      	ldr	r3, [r3, #24]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d00d      	beq.n	801a932 <USBD_GetDescriptor+0x272>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	23ad      	movs	r3, #173	; 0xad
 801a91a:	009b      	lsls	r3, r3, #2
 801a91c:	58d3      	ldr	r3, [r2, r3]
 801a91e:	699b      	ldr	r3, [r3, #24]
 801a920:	687a      	ldr	r2, [r7, #4]
 801a922:	7c12      	ldrb	r2, [r2, #16]
 801a924:	2108      	movs	r1, #8
 801a926:	1879      	adds	r1, r7, r1
 801a928:	0010      	movs	r0, r2
 801a92a:	4798      	blx	r3
 801a92c:	0003      	movs	r3, r0
 801a92e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a930:	e019      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            USBD_CtlError(pdev, req);
 801a932:	683a      	ldr	r2, [r7, #0]
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	0011      	movs	r1, r2
 801a938:	0018      	movs	r0, r3
 801a93a:	f000 fac9 	bl	801aed0 <USBD_CtlError>
            err++;
 801a93e:	210b      	movs	r1, #11
 801a940:	187b      	adds	r3, r7, r1
 801a942:	781a      	ldrb	r2, [r3, #0]
 801a944:	187b      	adds	r3, r7, r1
 801a946:	3201      	adds	r2, #1
 801a948:	701a      	strb	r2, [r3, #0]
          break;
 801a94a:	e00c      	b.n	801a966 <USBD_GetDescriptor+0x2a6>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801a94c:	683a      	ldr	r2, [r7, #0]
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	0011      	movs	r1, r2
 801a952:	0018      	movs	r0, r3
 801a954:	f000 fabc 	bl	801aed0 <USBD_CtlError>
          err++;
 801a958:	210b      	movs	r1, #11
 801a95a:	187b      	adds	r3, r7, r1
 801a95c:	781a      	ldrb	r2, [r3, #0]
 801a95e:	187b      	adds	r3, r7, r1
 801a960:	3201      	adds	r2, #1
 801a962:	701a      	strb	r2, [r3, #0]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801a964:	46c0      	nop			; (mov r8, r8)
      }
      break;
 801a966:	e04a      	b.n	801a9fe <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	7c1b      	ldrb	r3, [r3, #16]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d10b      	bne.n	801a988 <USBD_GetDescriptor+0x2c8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801a970:	687a      	ldr	r2, [r7, #4]
 801a972:	23ae      	movs	r3, #174	; 0xae
 801a974:	009b      	lsls	r3, r3, #2
 801a976:	58d3      	ldr	r3, [r2, r3]
 801a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a97a:	2208      	movs	r2, #8
 801a97c:	18ba      	adds	r2, r7, r2
 801a97e:	0010      	movs	r0, r2
 801a980:	4798      	blx	r3
 801a982:	0003      	movs	r3, r0
 801a984:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a986:	e03a      	b.n	801a9fe <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 801a988:	683a      	ldr	r2, [r7, #0]
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	0011      	movs	r1, r2
 801a98e:	0018      	movs	r0, r3
 801a990:	f000 fa9e 	bl	801aed0 <USBD_CtlError>
        err++;
 801a994:	210b      	movs	r1, #11
 801a996:	187b      	adds	r3, r7, r1
 801a998:	781a      	ldrb	r2, [r3, #0]
 801a99a:	187b      	adds	r3, r7, r1
 801a99c:	3201      	adds	r2, #1
 801a99e:	701a      	strb	r2, [r3, #0]
      break;
 801a9a0:	e02d      	b.n	801a9fe <USBD_GetDescriptor+0x33e>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	7c1b      	ldrb	r3, [r3, #16]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d10f      	bne.n	801a9ca <USBD_GetDescriptor+0x30a>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801a9aa:	687a      	ldr	r2, [r7, #4]
 801a9ac:	23ae      	movs	r3, #174	; 0xae
 801a9ae:	009b      	lsls	r3, r3, #2
 801a9b0:	58d3      	ldr	r3, [r2, r3]
 801a9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a9b4:	2208      	movs	r2, #8
 801a9b6:	18ba      	adds	r2, r7, r2
 801a9b8:	0010      	movs	r0, r2
 801a9ba:	4798      	blx	r3
 801a9bc:	0003      	movs	r3, r0
 801a9be:	60fb      	str	r3, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	3301      	adds	r3, #1
 801a9c4:	2207      	movs	r2, #7
 801a9c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a9c8:	e019      	b.n	801a9fe <USBD_GetDescriptor+0x33e>
        USBD_CtlError(pdev, req);
 801a9ca:	683a      	ldr	r2, [r7, #0]
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	0011      	movs	r1, r2
 801a9d0:	0018      	movs	r0, r3
 801a9d2:	f000 fa7d 	bl	801aed0 <USBD_CtlError>
        err++;
 801a9d6:	210b      	movs	r1, #11
 801a9d8:	187b      	adds	r3, r7, r1
 801a9da:	781a      	ldrb	r2, [r3, #0]
 801a9dc:	187b      	adds	r3, r7, r1
 801a9de:	3201      	adds	r2, #1
 801a9e0:	701a      	strb	r2, [r3, #0]
      break;
 801a9e2:	e00c      	b.n	801a9fe <USBD_GetDescriptor+0x33e>

    default:
      USBD_CtlError(pdev, req);
 801a9e4:	683a      	ldr	r2, [r7, #0]
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	0011      	movs	r1, r2
 801a9ea:	0018      	movs	r0, r3
 801a9ec:	f000 fa70 	bl	801aed0 <USBD_CtlError>
      err++;
 801a9f0:	210b      	movs	r1, #11
 801a9f2:	187b      	adds	r3, r7, r1
 801a9f4:	781a      	ldrb	r2, [r3, #0]
 801a9f6:	187b      	adds	r3, r7, r1
 801a9f8:	3201      	adds	r2, #1
 801a9fa:	701a      	strb	r2, [r3, #0]
      break;
 801a9fc:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 801a9fe:	230b      	movs	r3, #11
 801aa00:	18fb      	adds	r3, r7, r3
 801aa02:	781b      	ldrb	r3, [r3, #0]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d131      	bne.n	801aa6c <USBD_GetDescriptor+0x3ac>
  {
    return;
  }

  if (req->wLength != 0U)
 801aa08:	683b      	ldr	r3, [r7, #0]
 801aa0a:	88db      	ldrh	r3, [r3, #6]
 801aa0c:	2b00      	cmp	r3, #0
 801aa0e:	d023      	beq.n	801aa58 <USBD_GetDescriptor+0x398>
  {
    if (len != 0U)
 801aa10:	2108      	movs	r1, #8
 801aa12:	187b      	adds	r3, r7, r1
 801aa14:	881b      	ldrh	r3, [r3, #0]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d017      	beq.n	801aa4a <USBD_GetDescriptor+0x38a>
    {
      len = MIN(len, req->wLength);
 801aa1a:	683b      	ldr	r3, [r7, #0]
 801aa1c:	88da      	ldrh	r2, [r3, #6]
 801aa1e:	187b      	adds	r3, r7, r1
 801aa20:	881b      	ldrh	r3, [r3, #0]
 801aa22:	1c18      	adds	r0, r3, #0
 801aa24:	1c11      	adds	r1, r2, #0
 801aa26:	b28a      	uxth	r2, r1
 801aa28:	b283      	uxth	r3, r0
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d900      	bls.n	801aa30 <USBD_GetDescriptor+0x370>
 801aa2e:	1c01      	adds	r1, r0, #0
 801aa30:	b28a      	uxth	r2, r1
 801aa32:	2108      	movs	r1, #8
 801aa34:	187b      	adds	r3, r7, r1
 801aa36:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801aa38:	187b      	adds	r3, r7, r1
 801aa3a:	881b      	ldrh	r3, [r3, #0]
 801aa3c:	001a      	movs	r2, r3
 801aa3e:	68f9      	ldr	r1, [r7, #12]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	0018      	movs	r0, r3
 801aa44:	f000 facc 	bl	801afe0 <USBD_CtlSendData>
 801aa48:	e011      	b.n	801aa6e <USBD_GetDescriptor+0x3ae>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801aa4a:	683a      	ldr	r2, [r7, #0]
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	0011      	movs	r1, r2
 801aa50:	0018      	movs	r0, r3
 801aa52:	f000 fa3d 	bl	801aed0 <USBD_CtlError>
 801aa56:	e00a      	b.n	801aa6e <USBD_GetDescriptor+0x3ae>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	0018      	movs	r0, r3
 801aa5c:	f000 fb1e 	bl	801b09c <USBD_CtlSendStatus>
 801aa60:	e005      	b.n	801aa6e <USBD_GetDescriptor+0x3ae>
 801aa62:	46c0      	nop			; (mov r8, r8)
 801aa64:	0802b0d0 	.word	0x0802b0d0
 801aa68:	0802b110 	.word	0x0802b110
    return;
 801aa6c:	46c0      	nop			; (mov r8, r8)
  }
}
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	b004      	add	sp, #16
 801aa72:	bd80      	pop	{r7, pc}

0801aa74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aa74:	b590      	push	{r4, r7, lr}
 801aa76:	b085      	sub	sp, #20
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
 801aa7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801aa7e:	683b      	ldr	r3, [r7, #0]
 801aa80:	889b      	ldrh	r3, [r3, #4]
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d13e      	bne.n	801ab04 <USBD_SetAddress+0x90>
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	88db      	ldrh	r3, [r3, #6]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d13a      	bne.n	801ab04 <USBD_SetAddress+0x90>
 801aa8e:	683b      	ldr	r3, [r7, #0]
 801aa90:	885b      	ldrh	r3, [r3, #2]
 801aa92:	2b7f      	cmp	r3, #127	; 0x7f
 801aa94:	d836      	bhi.n	801ab04 <USBD_SetAddress+0x90>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	885b      	ldrh	r3, [r3, #2]
 801aa9a:	b2da      	uxtb	r2, r3
 801aa9c:	230f      	movs	r3, #15
 801aa9e:	18fb      	adds	r3, r7, r3
 801aaa0:	217f      	movs	r1, #127	; 0x7f
 801aaa2:	400a      	ands	r2, r1
 801aaa4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aaa6:	687a      	ldr	r2, [r7, #4]
 801aaa8:	23a7      	movs	r3, #167	; 0xa7
 801aaaa:	009b      	lsls	r3, r3, #2
 801aaac:	5cd3      	ldrb	r3, [r2, r3]
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	2b03      	cmp	r3, #3
 801aab2:	d106      	bne.n	801aac2 <USBD_SetAddress+0x4e>
    {
      USBD_CtlError(pdev, req);
 801aab4:	683a      	ldr	r2, [r7, #0]
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	0011      	movs	r1, r2
 801aaba:	0018      	movs	r0, r3
 801aabc:	f000 fa08 	bl	801aed0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aac0:	e027      	b.n	801ab12 <USBD_SetAddress+0x9e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	240f      	movs	r4, #15
 801aac6:	193a      	adds	r2, r7, r4
 801aac8:	4914      	ldr	r1, [pc, #80]	; (801ab1c <USBD_SetAddress+0xa8>)
 801aaca:	7812      	ldrb	r2, [r2, #0]
 801aacc:	545a      	strb	r2, [r3, r1]
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801aace:	193b      	adds	r3, r7, r4
 801aad0:	781a      	ldrb	r2, [r3, #0]
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	0011      	movs	r1, r2
 801aad6:	0018      	movs	r0, r3
 801aad8:	f006 fd67 	bl	80215aa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	0018      	movs	r0, r3
 801aae0:	f000 fadc 	bl	801b09c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801aae4:	193b      	adds	r3, r7, r4
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d005      	beq.n	801aaf8 <USBD_SetAddress+0x84>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801aaec:	687a      	ldr	r2, [r7, #4]
 801aaee:	23a7      	movs	r3, #167	; 0xa7
 801aaf0:	009b      	lsls	r3, r3, #2
 801aaf2:	2102      	movs	r1, #2
 801aaf4:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801aaf6:	e00c      	b.n	801ab12 <USBD_SetAddress+0x9e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801aaf8:	687a      	ldr	r2, [r7, #4]
 801aafa:	23a7      	movs	r3, #167	; 0xa7
 801aafc:	009b      	lsls	r3, r3, #2
 801aafe:	2101      	movs	r1, #1
 801ab00:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab02:	e006      	b.n	801ab12 <USBD_SetAddress+0x9e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ab04:	683a      	ldr	r2, [r7, #0]
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	0011      	movs	r1, r2
 801ab0a:	0018      	movs	r0, r3
 801ab0c:	f000 f9e0 	bl	801aed0 <USBD_CtlError>
  }
}
 801ab10:	46c0      	nop			; (mov r8, r8)
 801ab12:	46c0      	nop			; (mov r8, r8)
 801ab14:	46bd      	mov	sp, r7
 801ab16:	b005      	add	sp, #20
 801ab18:	bd90      	pop	{r4, r7, pc}
 801ab1a:	46c0      	nop			; (mov r8, r8)
 801ab1c:	0000029e 	.word	0x0000029e

0801ab20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ab20:	b5b0      	push	{r4, r5, r7, lr}
 801ab22:	b084      	sub	sp, #16
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ab2a:	230f      	movs	r3, #15
 801ab2c:	18fb      	adds	r3, r7, r3
 801ab2e:	2200      	movs	r2, #0
 801ab30:	701a      	strb	r2, [r3, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	885b      	ldrh	r3, [r3, #2]
 801ab36:	b2da      	uxtb	r2, r3
 801ab38:	4b5f      	ldr	r3, [pc, #380]	; (801acb8 <USBD_SetConfig+0x198>)
 801ab3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ab3c:	4b5e      	ldr	r3, [pc, #376]	; (801acb8 <USBD_SetConfig+0x198>)
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	2b01      	cmp	r3, #1
 801ab42:	d907      	bls.n	801ab54 <USBD_SetConfig+0x34>
  {
    USBD_CtlError(pdev, req);
 801ab44:	683a      	ldr	r2, [r7, #0]
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	0011      	movs	r1, r2
 801ab4a:	0018      	movs	r0, r3
 801ab4c:	f000 f9c0 	bl	801aed0 <USBD_CtlError>
    return USBD_FAIL;
 801ab50:	2303      	movs	r3, #3
 801ab52:	e0ac      	b.n	801acae <USBD_SetConfig+0x18e>
  }

  switch (pdev->dev_state)
 801ab54:	687a      	ldr	r2, [r7, #4]
 801ab56:	23a7      	movs	r3, #167	; 0xa7
 801ab58:	009b      	lsls	r3, r3, #2
 801ab5a:	5cd3      	ldrb	r3, [r2, r3]
 801ab5c:	b2db      	uxtb	r3, r3
 801ab5e:	2b02      	cmp	r3, #2
 801ab60:	d002      	beq.n	801ab68 <USBD_SetConfig+0x48>
 801ab62:	2b03      	cmp	r3, #3
 801ab64:	d033      	beq.n	801abce <USBD_SetConfig+0xae>
 801ab66:	e08d      	b.n	801ac84 <USBD_SetConfig+0x164>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801ab68:	4b53      	ldr	r3, [pc, #332]	; (801acb8 <USBD_SetConfig+0x198>)
 801ab6a:	781b      	ldrb	r3, [r3, #0]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d029      	beq.n	801abc4 <USBD_SetConfig+0xa4>
      {
        pdev->dev_config = cfgidx;
 801ab70:	4b51      	ldr	r3, [pc, #324]	; (801acb8 <USBD_SetConfig+0x198>)
 801ab72:	781b      	ldrb	r3, [r3, #0]
 801ab74:	001a      	movs	r2, r3
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ab7a:	4b4f      	ldr	r3, [pc, #316]	; (801acb8 <USBD_SetConfig+0x198>)
 801ab7c:	781a      	ldrb	r2, [r3, #0]
 801ab7e:	250f      	movs	r5, #15
 801ab80:	197c      	adds	r4, r7, r5
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	0011      	movs	r1, r2
 801ab86:	0018      	movs	r0, r3
 801ab88:	f7fe feb2 	bl	80198f0 <USBD_SetClassConfig>
 801ab8c:	0003      	movs	r3, r0
 801ab8e:	7023      	strb	r3, [r4, #0]

        if (ret != USBD_OK)
 801ab90:	197b      	adds	r3, r7, r5
 801ab92:	781b      	ldrb	r3, [r3, #0]
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d00b      	beq.n	801abb0 <USBD_SetConfig+0x90>
        {
          USBD_CtlError(pdev, req);
 801ab98:	683a      	ldr	r2, [r7, #0]
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	0011      	movs	r1, r2
 801ab9e:	0018      	movs	r0, r3
 801aba0:	f000 f996 	bl	801aed0 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801aba4:	687a      	ldr	r2, [r7, #4]
 801aba6:	23a7      	movs	r3, #167	; 0xa7
 801aba8:	009b      	lsls	r3, r3, #2
 801abaa:	2102      	movs	r1, #2
 801abac:	54d1      	strb	r1, [r2, r3]
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801abae:	e07b      	b.n	801aca8 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	0018      	movs	r0, r3
 801abb4:	f000 fa72 	bl	801b09c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801abb8:	687a      	ldr	r2, [r7, #4]
 801abba:	23a7      	movs	r3, #167	; 0xa7
 801abbc:	009b      	lsls	r3, r3, #2
 801abbe:	2103      	movs	r1, #3
 801abc0:	54d1      	strb	r1, [r2, r3]
      break;
 801abc2:	e071      	b.n	801aca8 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	0018      	movs	r0, r3
 801abc8:	f000 fa68 	bl	801b09c <USBD_CtlSendStatus>
      break;
 801abcc:	e06c      	b.n	801aca8 <USBD_SetConfig+0x188>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801abce:	4b3a      	ldr	r3, [pc, #232]	; (801acb8 <USBD_SetConfig+0x198>)
 801abd0:	781b      	ldrb	r3, [r3, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d115      	bne.n	801ac02 <USBD_SetConfig+0xe2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	23a7      	movs	r3, #167	; 0xa7
 801abda:	009b      	lsls	r3, r3, #2
 801abdc:	2102      	movs	r1, #2
 801abde:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 801abe0:	4b35      	ldr	r3, [pc, #212]	; (801acb8 <USBD_SetConfig+0x198>)
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	001a      	movs	r2, r3
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801abea:	4b33      	ldr	r3, [pc, #204]	; (801acb8 <USBD_SetConfig+0x198>)
 801abec:	781a      	ldrb	r2, [r3, #0]
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	0011      	movs	r1, r2
 801abf2:	0018      	movs	r0, r3
 801abf4:	f7fe fea1 	bl	801993a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	0018      	movs	r0, r3
 801abfc:	f000 fa4e 	bl	801b09c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801ac00:	e052      	b.n	801aca8 <USBD_SetConfig+0x188>
      else if (cfgidx != pdev->dev_config)
 801ac02:	4b2d      	ldr	r3, [pc, #180]	; (801acb8 <USBD_SetConfig+0x198>)
 801ac04:	781b      	ldrb	r3, [r3, #0]
 801ac06:	001a      	movs	r2, r3
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	685b      	ldr	r3, [r3, #4]
 801ac0c:	429a      	cmp	r2, r3
 801ac0e:	d034      	beq.n	801ac7a <USBD_SetConfig+0x15a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	685b      	ldr	r3, [r3, #4]
 801ac14:	b2da      	uxtb	r2, r3
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	0011      	movs	r1, r2
 801ac1a:	0018      	movs	r0, r3
 801ac1c:	f7fe fe8d 	bl	801993a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801ac20:	4b25      	ldr	r3, [pc, #148]	; (801acb8 <USBD_SetConfig+0x198>)
 801ac22:	781b      	ldrb	r3, [r3, #0]
 801ac24:	001a      	movs	r2, r3
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801ac2a:	4b23      	ldr	r3, [pc, #140]	; (801acb8 <USBD_SetConfig+0x198>)
 801ac2c:	781a      	ldrb	r2, [r3, #0]
 801ac2e:	250f      	movs	r5, #15
 801ac30:	197c      	adds	r4, r7, r5
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	0011      	movs	r1, r2
 801ac36:	0018      	movs	r0, r3
 801ac38:	f7fe fe5a 	bl	80198f0 <USBD_SetClassConfig>
 801ac3c:	0003      	movs	r3, r0
 801ac3e:	7023      	strb	r3, [r4, #0]
        if (ret != USBD_OK)
 801ac40:	197b      	adds	r3, r7, r5
 801ac42:	781b      	ldrb	r3, [r3, #0]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	d013      	beq.n	801ac70 <USBD_SetConfig+0x150>
          USBD_CtlError(pdev, req);
 801ac48:	683a      	ldr	r2, [r7, #0]
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	0011      	movs	r1, r2
 801ac4e:	0018      	movs	r0, r3
 801ac50:	f000 f93e 	bl	801aed0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	685b      	ldr	r3, [r3, #4]
 801ac58:	b2da      	uxtb	r2, r3
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	0011      	movs	r1, r2
 801ac5e:	0018      	movs	r0, r3
 801ac60:	f7fe fe6b 	bl	801993a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ac64:	687a      	ldr	r2, [r7, #4]
 801ac66:	23a7      	movs	r3, #167	; 0xa7
 801ac68:	009b      	lsls	r3, r3, #2
 801ac6a:	2102      	movs	r1, #2
 801ac6c:	54d1      	strb	r1, [r2, r3]
      break;
 801ac6e:	e01b      	b.n	801aca8 <USBD_SetConfig+0x188>
          (void)USBD_CtlSendStatus(pdev);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	0018      	movs	r0, r3
 801ac74:	f000 fa12 	bl	801b09c <USBD_CtlSendStatus>
      break;
 801ac78:	e016      	b.n	801aca8 <USBD_SetConfig+0x188>
        (void)USBD_CtlSendStatus(pdev);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	0018      	movs	r0, r3
 801ac7e:	f000 fa0d 	bl	801b09c <USBD_CtlSendStatus>
      break;
 801ac82:	e011      	b.n	801aca8 <USBD_SetConfig+0x188>

    default:
      USBD_CtlError(pdev, req);
 801ac84:	683a      	ldr	r2, [r7, #0]
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	0011      	movs	r1, r2
 801ac8a:	0018      	movs	r0, r3
 801ac8c:	f000 f920 	bl	801aed0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801ac90:	4b09      	ldr	r3, [pc, #36]	; (801acb8 <USBD_SetConfig+0x198>)
 801ac92:	781a      	ldrb	r2, [r3, #0]
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	0011      	movs	r1, r2
 801ac98:	0018      	movs	r0, r3
 801ac9a:	f7fe fe4e 	bl	801993a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801ac9e:	230f      	movs	r3, #15
 801aca0:	18fb      	adds	r3, r7, r3
 801aca2:	2203      	movs	r2, #3
 801aca4:	701a      	strb	r2, [r3, #0]
      break;
 801aca6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801aca8:	230f      	movs	r3, #15
 801acaa:	18fb      	adds	r3, r7, r3
 801acac:	781b      	ldrb	r3, [r3, #0]
}
 801acae:	0018      	movs	r0, r3
 801acb0:	46bd      	mov	sp, r7
 801acb2:	b004      	add	sp, #16
 801acb4:	bdb0      	pop	{r4, r5, r7, pc}
 801acb6:	46c0      	nop			; (mov r8, r8)
 801acb8:	20000ab1 	.word	0x20000ab1

0801acbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b082      	sub	sp, #8
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801acc6:	683b      	ldr	r3, [r7, #0]
 801acc8:	88db      	ldrh	r3, [r3, #6]
 801acca:	2b01      	cmp	r3, #1
 801accc:	d006      	beq.n	801acdc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801acce:	683a      	ldr	r2, [r7, #0]
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	0011      	movs	r1, r2
 801acd4:	0018      	movs	r0, r3
 801acd6:	f000 f8fb 	bl	801aed0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801acda:	e027      	b.n	801ad2c <USBD_GetConfig+0x70>
    switch (pdev->dev_state)
 801acdc:	687a      	ldr	r2, [r7, #4]
 801acde:	23a7      	movs	r3, #167	; 0xa7
 801ace0:	009b      	lsls	r3, r3, #2
 801ace2:	5cd3      	ldrb	r3, [r2, r3]
 801ace4:	b2db      	uxtb	r3, r3
 801ace6:	2b02      	cmp	r3, #2
 801ace8:	dc02      	bgt.n	801acf0 <USBD_GetConfig+0x34>
 801acea:	2b00      	cmp	r3, #0
 801acec:	dc03      	bgt.n	801acf6 <USBD_GetConfig+0x3a>
 801acee:	e016      	b.n	801ad1e <USBD_GetConfig+0x62>
 801acf0:	2b03      	cmp	r3, #3
 801acf2:	d00c      	beq.n	801ad0e <USBD_GetConfig+0x52>
 801acf4:	e013      	b.n	801ad1e <USBD_GetConfig+0x62>
        pdev->dev_default_config = 0U;
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	2200      	movs	r2, #0
 801acfa:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	3308      	adds	r3, #8
 801ad00:	0019      	movs	r1, r3
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	2201      	movs	r2, #1
 801ad06:	0018      	movs	r0, r3
 801ad08:	f000 f96a 	bl	801afe0 <USBD_CtlSendData>
        break;
 801ad0c:	e00e      	b.n	801ad2c <USBD_GetConfig+0x70>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	1d19      	adds	r1, r3, #4
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	2201      	movs	r2, #1
 801ad16:	0018      	movs	r0, r3
 801ad18:	f000 f962 	bl	801afe0 <USBD_CtlSendData>
        break;
 801ad1c:	e006      	b.n	801ad2c <USBD_GetConfig+0x70>
        USBD_CtlError(pdev, req);
 801ad1e:	683a      	ldr	r2, [r7, #0]
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	0011      	movs	r1, r2
 801ad24:	0018      	movs	r0, r3
 801ad26:	f000 f8d3 	bl	801aed0 <USBD_CtlError>
        break;
 801ad2a:	46c0      	nop			; (mov r8, r8)
}
 801ad2c:	46c0      	nop			; (mov r8, r8)
 801ad2e:	46bd      	mov	sp, r7
 801ad30:	b002      	add	sp, #8
 801ad32:	bd80      	pop	{r7, pc}

0801ad34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b082      	sub	sp, #8
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ad3e:	687a      	ldr	r2, [r7, #4]
 801ad40:	23a7      	movs	r3, #167	; 0xa7
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	5cd3      	ldrb	r3, [r2, r3]
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	3b01      	subs	r3, #1
 801ad4a:	2b02      	cmp	r3, #2
 801ad4c:	d822      	bhi.n	801ad94 <USBD_GetStatus+0x60>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	88db      	ldrh	r3, [r3, #6]
 801ad52:	2b02      	cmp	r3, #2
 801ad54:	d006      	beq.n	801ad64 <USBD_GetStatus+0x30>
      {
        USBD_CtlError(pdev, req);
 801ad56:	683a      	ldr	r2, [r7, #0]
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	0011      	movs	r1, r2
 801ad5c:	0018      	movs	r0, r3
 801ad5e:	f000 f8b7 	bl	801aed0 <USBD_CtlError>
        break;
 801ad62:	e01e      	b.n	801ada2 <USBD_GetStatus+0x6e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	2201      	movs	r2, #1
 801ad68:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801ad6a:	687a      	ldr	r2, [r7, #4]
 801ad6c:	23a9      	movs	r3, #169	; 0xa9
 801ad6e:	009b      	lsls	r3, r3, #2
 801ad70:	58d3      	ldr	r3, [r2, r3]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d005      	beq.n	801ad82 <USBD_GetStatus+0x4e>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	68db      	ldr	r3, [r3, #12]
 801ad7a:	2202      	movs	r2, #2
 801ad7c:	431a      	orrs	r2, r3
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	330c      	adds	r3, #12
 801ad86:	0019      	movs	r1, r3
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	2202      	movs	r2, #2
 801ad8c:	0018      	movs	r0, r3
 801ad8e:	f000 f927 	bl	801afe0 <USBD_CtlSendData>
      break;
 801ad92:	e006      	b.n	801ada2 <USBD_GetStatus+0x6e>

    default:
      USBD_CtlError(pdev, req);
 801ad94:	683a      	ldr	r2, [r7, #0]
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	0011      	movs	r1, r2
 801ad9a:	0018      	movs	r0, r3
 801ad9c:	f000 f898 	bl	801aed0 <USBD_CtlError>
      break;
 801ada0:	46c0      	nop			; (mov r8, r8)
  }
}
 801ada2:	46c0      	nop			; (mov r8, r8)
 801ada4:	46bd      	mov	sp, r7
 801ada6:	b002      	add	sp, #8
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b082      	sub	sp, #8
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
 801adb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801adb4:	683b      	ldr	r3, [r7, #0]
 801adb6:	885b      	ldrh	r3, [r3, #2]
 801adb8:	2b01      	cmp	r3, #1
 801adba:	d109      	bne.n	801add0 <USBD_SetFeature+0x26>
  {
    pdev->dev_remote_wakeup = 1U;
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	23a9      	movs	r3, #169	; 0xa9
 801adc0:	009b      	lsls	r3, r3, #2
 801adc2:	2101      	movs	r1, #1
 801adc4:	50d1      	str	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	0018      	movs	r0, r3
 801adca:	f000 f967 	bl	801b09c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801adce:	e017      	b.n	801ae00 <USBD_SetFeature+0x56>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	885b      	ldrh	r3, [r3, #2]
 801add4:	2b02      	cmp	r3, #2
 801add6:	d10d      	bne.n	801adf4 <USBD_SetFeature+0x4a>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801add8:	683b      	ldr	r3, [r7, #0]
 801adda:	889b      	ldrh	r3, [r3, #4]
 801addc:	0a1b      	lsrs	r3, r3, #8
 801adde:	b29b      	uxth	r3, r3
 801ade0:	b2d9      	uxtb	r1, r3
 801ade2:	687a      	ldr	r2, [r7, #4]
 801ade4:	23a8      	movs	r3, #168	; 0xa8
 801ade6:	009b      	lsls	r3, r3, #2
 801ade8:	54d1      	strb	r1, [r2, r3]
    (void)USBD_CtlSendStatus(pdev);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	0018      	movs	r0, r3
 801adee:	f000 f955 	bl	801b09c <USBD_CtlSendStatus>
}
 801adf2:	e005      	b.n	801ae00 <USBD_SetFeature+0x56>
    USBD_CtlError(pdev, req);
 801adf4:	683a      	ldr	r2, [r7, #0]
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	0011      	movs	r1, r2
 801adfa:	0018      	movs	r0, r3
 801adfc:	f000 f868 	bl	801aed0 <USBD_CtlError>
}
 801ae00:	46c0      	nop			; (mov r8, r8)
 801ae02:	46bd      	mov	sp, r7
 801ae04:	b002      	add	sp, #8
 801ae06:	bd80      	pop	{r7, pc}

0801ae08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b082      	sub	sp, #8
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae12:	687a      	ldr	r2, [r7, #4]
 801ae14:	23a7      	movs	r3, #167	; 0xa7
 801ae16:	009b      	lsls	r3, r3, #2
 801ae18:	5cd3      	ldrb	r3, [r2, r3]
 801ae1a:	b2db      	uxtb	r3, r3
 801ae1c:	3b01      	subs	r3, #1
 801ae1e:	2b02      	cmp	r3, #2
 801ae20:	d80d      	bhi.n	801ae3e <USBD_ClrFeature+0x36>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	885b      	ldrh	r3, [r3, #2]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d110      	bne.n	801ae4c <USBD_ClrFeature+0x44>
      {
        pdev->dev_remote_wakeup = 0U;
 801ae2a:	687a      	ldr	r2, [r7, #4]
 801ae2c:	23a9      	movs	r3, #169	; 0xa9
 801ae2e:	009b      	lsls	r3, r3, #2
 801ae30:	2100      	movs	r1, #0
 801ae32:	50d1      	str	r1, [r2, r3]
        (void)USBD_CtlSendStatus(pdev);
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	0018      	movs	r0, r3
 801ae38:	f000 f930 	bl	801b09c <USBD_CtlSendStatus>
      }
      break;
 801ae3c:	e006      	b.n	801ae4c <USBD_ClrFeature+0x44>

    default:
      USBD_CtlError(pdev, req);
 801ae3e:	683a      	ldr	r2, [r7, #0]
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	0011      	movs	r1, r2
 801ae44:	0018      	movs	r0, r3
 801ae46:	f000 f843 	bl	801aed0 <USBD_CtlError>
      break;
 801ae4a:	e000      	b.n	801ae4e <USBD_ClrFeature+0x46>
      break;
 801ae4c:	46c0      	nop			; (mov r8, r8)
  }
}
 801ae4e:	46c0      	nop			; (mov r8, r8)
 801ae50:	46bd      	mov	sp, r7
 801ae52:	b002      	add	sp, #8
 801ae54:	bd80      	pop	{r7, pc}

0801ae56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ae56:	b580      	push	{r7, lr}
 801ae58:	b084      	sub	sp, #16
 801ae5a:	af00      	add	r7, sp, #0
 801ae5c:	6078      	str	r0, [r7, #4]
 801ae5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801ae60:	683b      	ldr	r3, [r7, #0]
 801ae62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	781a      	ldrb	r2, [r3, #0]
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	3301      	adds	r3, #1
 801ae70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	781a      	ldrb	r2, [r3, #0]
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801ae7a:	68fb      	ldr	r3, [r7, #12]
 801ae7c:	3301      	adds	r3, #1
 801ae7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	0018      	movs	r0, r3
 801ae84:	f7ff f8e6 	bl	801a054 <SWAPBYTE>
 801ae88:	0003      	movs	r3, r0
 801ae8a:	001a      	movs	r2, r3
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	3301      	adds	r3, #1
 801ae94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	3301      	adds	r3, #1
 801ae9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	0018      	movs	r0, r3
 801aea0:	f7ff f8d8 	bl	801a054 <SWAPBYTE>
 801aea4:	0003      	movs	r3, r0
 801aea6:	001a      	movs	r2, r3
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	3301      	adds	r3, #1
 801aeb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	3301      	adds	r3, #1
 801aeb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	0018      	movs	r0, r3
 801aebc:	f7ff f8ca 	bl	801a054 <SWAPBYTE>
 801aec0:	0003      	movs	r3, r0
 801aec2:	001a      	movs	r2, r3
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	80da      	strh	r2, [r3, #6]
}
 801aec8:	46c0      	nop			; (mov r8, r8)
 801aeca:	46bd      	mov	sp, r7
 801aecc:	b004      	add	sp, #16
 801aece:	bd80      	pop	{r7, pc}

0801aed0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b082      	sub	sp, #8
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
 801aed8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2180      	movs	r1, #128	; 0x80
 801aede:	0018      	movs	r0, r3
 801aee0:	f006 fadd 	bl	802149e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2100      	movs	r1, #0
 801aee8:	0018      	movs	r0, r3
 801aeea:	f006 fad8 	bl	802149e <USBD_LL_StallEP>
}
 801aeee:	46c0      	nop			; (mov r8, r8)
 801aef0:	46bd      	mov	sp, r7
 801aef2:	b002      	add	sp, #8
 801aef4:	bd80      	pop	{r7, pc}

0801aef6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801aef6:	b590      	push	{r4, r7, lr}
 801aef8:	b087      	sub	sp, #28
 801aefa:	af00      	add	r7, sp, #0
 801aefc:	60f8      	str	r0, [r7, #12]
 801aefe:	60b9      	str	r1, [r7, #8]
 801af00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801af02:	2417      	movs	r4, #23
 801af04:	193b      	adds	r3, r7, r4
 801af06:	2200      	movs	r2, #0
 801af08:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d044      	beq.n	801af9a <USBD_GetString+0xa4>
  {
    return;
  }

  pdesc = desc;
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801af14:	693b      	ldr	r3, [r7, #16]
 801af16:	0018      	movs	r0, r3
 801af18:	f000 f843 	bl	801afa2 <USBD_GetLen>
 801af1c:	0003      	movs	r3, r0
 801af1e:	3301      	adds	r3, #1
 801af20:	b29b      	uxth	r3, r3
 801af22:	18db      	adds	r3, r3, r3
 801af24:	b29a      	uxth	r2, r3
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801af2a:	193b      	adds	r3, r7, r4
 801af2c:	781b      	ldrb	r3, [r3, #0]
 801af2e:	68ba      	ldr	r2, [r7, #8]
 801af30:	18d3      	adds	r3, r2, r3
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	7812      	ldrb	r2, [r2, #0]
 801af36:	701a      	strb	r2, [r3, #0]
  idx++;
 801af38:	193b      	adds	r3, r7, r4
 801af3a:	781a      	ldrb	r2, [r3, #0]
 801af3c:	193b      	adds	r3, r7, r4
 801af3e:	3201      	adds	r2, #1
 801af40:	701a      	strb	r2, [r3, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801af42:	193b      	adds	r3, r7, r4
 801af44:	781b      	ldrb	r3, [r3, #0]
 801af46:	68ba      	ldr	r2, [r7, #8]
 801af48:	18d3      	adds	r3, r2, r3
 801af4a:	2203      	movs	r2, #3
 801af4c:	701a      	strb	r2, [r3, #0]
  idx++;
 801af4e:	193b      	adds	r3, r7, r4
 801af50:	781a      	ldrb	r2, [r3, #0]
 801af52:	193b      	adds	r3, r7, r4
 801af54:	3201      	adds	r2, #1
 801af56:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 801af58:	e01a      	b.n	801af90 <USBD_GetString+0x9a>
  {
    unicode[idx] = *pdesc;
 801af5a:	2117      	movs	r1, #23
 801af5c:	187b      	adds	r3, r7, r1
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	68ba      	ldr	r2, [r7, #8]
 801af62:	18d3      	adds	r3, r2, r3
 801af64:	693a      	ldr	r2, [r7, #16]
 801af66:	7812      	ldrb	r2, [r2, #0]
 801af68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801af6a:	693b      	ldr	r3, [r7, #16]
 801af6c:	3301      	adds	r3, #1
 801af6e:	613b      	str	r3, [r7, #16]
    idx++;
 801af70:	187b      	adds	r3, r7, r1
 801af72:	781a      	ldrb	r2, [r3, #0]
 801af74:	187b      	adds	r3, r7, r1
 801af76:	3201      	adds	r2, #1
 801af78:	701a      	strb	r2, [r3, #0]

    unicode[idx] = 0U;
 801af7a:	187b      	adds	r3, r7, r1
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	68ba      	ldr	r2, [r7, #8]
 801af80:	18d3      	adds	r3, r2, r3
 801af82:	2200      	movs	r2, #0
 801af84:	701a      	strb	r2, [r3, #0]
    idx++;
 801af86:	187b      	adds	r3, r7, r1
 801af88:	781a      	ldrb	r2, [r3, #0]
 801af8a:	187b      	adds	r3, r7, r1
 801af8c:	3201      	adds	r2, #1
 801af8e:	701a      	strb	r2, [r3, #0]
  while (*pdesc != (uint8_t)'\0')
 801af90:	693b      	ldr	r3, [r7, #16]
 801af92:	781b      	ldrb	r3, [r3, #0]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d1e0      	bne.n	801af5a <USBD_GetString+0x64>
 801af98:	e000      	b.n	801af9c <USBD_GetString+0xa6>
    return;
 801af9a:	46c0      	nop			; (mov r8, r8)
  }
}
 801af9c:	46bd      	mov	sp, r7
 801af9e:	b007      	add	sp, #28
 801afa0:	bd90      	pop	{r4, r7, pc}

0801afa2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801afa2:	b580      	push	{r7, lr}
 801afa4:	b084      	sub	sp, #16
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801afaa:	230f      	movs	r3, #15
 801afac:	18fb      	adds	r3, r7, r3
 801afae:	2200      	movs	r2, #0
 801afb0:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801afb6:	e008      	b.n	801afca <USBD_GetLen+0x28>
  {
    len++;
 801afb8:	210f      	movs	r1, #15
 801afba:	187b      	adds	r3, r7, r1
 801afbc:	781a      	ldrb	r2, [r3, #0]
 801afbe:	187b      	adds	r3, r7, r1
 801afc0:	3201      	adds	r2, #1
 801afc2:	701a      	strb	r2, [r3, #0]
    pbuff++;
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	3301      	adds	r3, #1
 801afc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801afca:	68bb      	ldr	r3, [r7, #8]
 801afcc:	781b      	ldrb	r3, [r3, #0]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d1f2      	bne.n	801afb8 <USBD_GetLen+0x16>
  }

  return len;
 801afd2:	230f      	movs	r3, #15
 801afd4:	18fb      	adds	r3, r7, r3
 801afd6:	781b      	ldrb	r3, [r3, #0]
}
 801afd8:	0018      	movs	r0, r3
 801afda:	46bd      	mov	sp, r7
 801afdc:	b004      	add	sp, #16
 801afde:	bd80      	pop	{r7, pc}

0801afe0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b084      	sub	sp, #16
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	60f8      	str	r0, [r7, #12]
 801afe8:	60b9      	str	r1, [r7, #8]
 801afea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801afec:	68fa      	ldr	r2, [r7, #12]
 801afee:	23a5      	movs	r3, #165	; 0xa5
 801aff0:	009b      	lsls	r3, r3, #2
 801aff2:	2102      	movs	r1, #2
 801aff4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	687a      	ldr	r2, [r7, #4]
 801affa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	687a      	ldr	r2, [r7, #4]
 801b000:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	68ba      	ldr	r2, [r7, #8]
 801b006:	68f8      	ldr	r0, [r7, #12]
 801b008:	2100      	movs	r1, #0
 801b00a:	f006 faf9 	bl	8021600 <USBD_LL_Transmit>

  return USBD_OK;
 801b00e:	2300      	movs	r3, #0
}
 801b010:	0018      	movs	r0, r3
 801b012:	46bd      	mov	sp, r7
 801b014:	b004      	add	sp, #16
 801b016:	bd80      	pop	{r7, pc}

0801b018 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	60f8      	str	r0, [r7, #12]
 801b020:	60b9      	str	r1, [r7, #8]
 801b022:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	68ba      	ldr	r2, [r7, #8]
 801b028:	68f8      	ldr	r0, [r7, #12]
 801b02a:	2100      	movs	r1, #0
 801b02c:	f006 fae8 	bl	8021600 <USBD_LL_Transmit>

  return USBD_OK;
 801b030:	2300      	movs	r3, #0
}
 801b032:	0018      	movs	r0, r3
 801b034:	46bd      	mov	sp, r7
 801b036:	b004      	add	sp, #16
 801b038:	bd80      	pop	{r7, pc}

0801b03a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801b03a:	b580      	push	{r7, lr}
 801b03c:	b084      	sub	sp, #16
 801b03e:	af00      	add	r7, sp, #0
 801b040:	60f8      	str	r0, [r7, #12]
 801b042:	60b9      	str	r1, [r7, #8]
 801b044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	23a5      	movs	r3, #165	; 0xa5
 801b04a:	009b      	lsls	r3, r3, #2
 801b04c:	2103      	movs	r1, #3
 801b04e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801b050:	68fa      	ldr	r2, [r7, #12]
 801b052:	23ac      	movs	r3, #172	; 0xac
 801b054:	005b      	lsls	r3, r3, #1
 801b056:	6879      	ldr	r1, [r7, #4]
 801b058:	50d1      	str	r1, [r2, r3]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801b05a:	68fa      	ldr	r2, [r7, #12]
 801b05c:	23ae      	movs	r3, #174	; 0xae
 801b05e:	005b      	lsls	r3, r3, #1
 801b060:	6879      	ldr	r1, [r7, #4]
 801b062:	50d1      	str	r1, [r2, r3]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	68ba      	ldr	r2, [r7, #8]
 801b068:	68f8      	ldr	r0, [r7, #12]
 801b06a:	2100      	movs	r1, #0
 801b06c:	f006 faf8 	bl	8021660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b070:	2300      	movs	r3, #0
}
 801b072:	0018      	movs	r0, r3
 801b074:	46bd      	mov	sp, r7
 801b076:	b004      	add	sp, #16
 801b078:	bd80      	pop	{r7, pc}

0801b07a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801b07a:	b580      	push	{r7, lr}
 801b07c:	b084      	sub	sp, #16
 801b07e:	af00      	add	r7, sp, #0
 801b080:	60f8      	str	r0, [r7, #12]
 801b082:	60b9      	str	r1, [r7, #8]
 801b084:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	68ba      	ldr	r2, [r7, #8]
 801b08a:	68f8      	ldr	r0, [r7, #12]
 801b08c:	2100      	movs	r1, #0
 801b08e:	f006 fae7 	bl	8021660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b092:	2300      	movs	r3, #0
}
 801b094:	0018      	movs	r0, r3
 801b096:	46bd      	mov	sp, r7
 801b098:	b004      	add	sp, #16
 801b09a:	bd80      	pop	{r7, pc}

0801b09c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b082      	sub	sp, #8
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b0a4:	687a      	ldr	r2, [r7, #4]
 801b0a6:	23a5      	movs	r3, #165	; 0xa5
 801b0a8:	009b      	lsls	r3, r3, #2
 801b0aa:	2104      	movs	r1, #4
 801b0ac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b0ae:	6878      	ldr	r0, [r7, #4]
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	2100      	movs	r1, #0
 801b0b6:	f006 faa3 	bl	8021600 <USBD_LL_Transmit>

  return USBD_OK;
 801b0ba:	2300      	movs	r3, #0
}
 801b0bc:	0018      	movs	r0, r3
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	b002      	add	sp, #8
 801b0c2:	bd80      	pop	{r7, pc}

0801b0c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b082      	sub	sp, #8
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b0cc:	687a      	ldr	r2, [r7, #4]
 801b0ce:	23a5      	movs	r3, #165	; 0xa5
 801b0d0:	009b      	lsls	r3, r3, #2
 801b0d2:	2105      	movs	r1, #5
 801b0d4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	2300      	movs	r3, #0
 801b0da:	2200      	movs	r2, #0
 801b0dc:	2100      	movs	r1, #0
 801b0de:	f006 fabf 	bl	8021660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b0e2:	2300      	movs	r3, #0
}
 801b0e4:	0018      	movs	r0, r3
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	b002      	add	sp, #8
 801b0ea:	bd80      	pop	{r7, pc}

0801b0ec <__NVIC_SetPriority>:
{
 801b0ec:	b590      	push	{r4, r7, lr}
 801b0ee:	b083      	sub	sp, #12
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	0002      	movs	r2, r0
 801b0f4:	6039      	str	r1, [r7, #0]
 801b0f6:	1dfb      	adds	r3, r7, #7
 801b0f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801b0fa:	1dfb      	adds	r3, r7, #7
 801b0fc:	781b      	ldrb	r3, [r3, #0]
 801b0fe:	2b7f      	cmp	r3, #127	; 0x7f
 801b100:	d828      	bhi.n	801b154 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801b102:	4a2f      	ldr	r2, [pc, #188]	; (801b1c0 <__NVIC_SetPriority+0xd4>)
 801b104:	1dfb      	adds	r3, r7, #7
 801b106:	781b      	ldrb	r3, [r3, #0]
 801b108:	b25b      	sxtb	r3, r3
 801b10a:	089b      	lsrs	r3, r3, #2
 801b10c:	33c0      	adds	r3, #192	; 0xc0
 801b10e:	009b      	lsls	r3, r3, #2
 801b110:	589b      	ldr	r3, [r3, r2]
 801b112:	1dfa      	adds	r2, r7, #7
 801b114:	7812      	ldrb	r2, [r2, #0]
 801b116:	0011      	movs	r1, r2
 801b118:	2203      	movs	r2, #3
 801b11a:	400a      	ands	r2, r1
 801b11c:	00d2      	lsls	r2, r2, #3
 801b11e:	21ff      	movs	r1, #255	; 0xff
 801b120:	4091      	lsls	r1, r2
 801b122:	000a      	movs	r2, r1
 801b124:	43d2      	mvns	r2, r2
 801b126:	401a      	ands	r2, r3
 801b128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801b12a:	683b      	ldr	r3, [r7, #0]
 801b12c:	019b      	lsls	r3, r3, #6
 801b12e:	22ff      	movs	r2, #255	; 0xff
 801b130:	401a      	ands	r2, r3
 801b132:	1dfb      	adds	r3, r7, #7
 801b134:	781b      	ldrb	r3, [r3, #0]
 801b136:	0018      	movs	r0, r3
 801b138:	2303      	movs	r3, #3
 801b13a:	4003      	ands	r3, r0
 801b13c:	00db      	lsls	r3, r3, #3
 801b13e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801b140:	481f      	ldr	r0, [pc, #124]	; (801b1c0 <__NVIC_SetPriority+0xd4>)
 801b142:	1dfb      	adds	r3, r7, #7
 801b144:	781b      	ldrb	r3, [r3, #0]
 801b146:	b25b      	sxtb	r3, r3
 801b148:	089b      	lsrs	r3, r3, #2
 801b14a:	430a      	orrs	r2, r1
 801b14c:	33c0      	adds	r3, #192	; 0xc0
 801b14e:	009b      	lsls	r3, r3, #2
 801b150:	501a      	str	r2, [r3, r0]
}
 801b152:	e031      	b.n	801b1b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801b154:	4a1b      	ldr	r2, [pc, #108]	; (801b1c4 <__NVIC_SetPriority+0xd8>)
 801b156:	1dfb      	adds	r3, r7, #7
 801b158:	781b      	ldrb	r3, [r3, #0]
 801b15a:	0019      	movs	r1, r3
 801b15c:	230f      	movs	r3, #15
 801b15e:	400b      	ands	r3, r1
 801b160:	3b08      	subs	r3, #8
 801b162:	089b      	lsrs	r3, r3, #2
 801b164:	3306      	adds	r3, #6
 801b166:	009b      	lsls	r3, r3, #2
 801b168:	18d3      	adds	r3, r2, r3
 801b16a:	3304      	adds	r3, #4
 801b16c:	681b      	ldr	r3, [r3, #0]
 801b16e:	1dfa      	adds	r2, r7, #7
 801b170:	7812      	ldrb	r2, [r2, #0]
 801b172:	0011      	movs	r1, r2
 801b174:	2203      	movs	r2, #3
 801b176:	400a      	ands	r2, r1
 801b178:	00d2      	lsls	r2, r2, #3
 801b17a:	21ff      	movs	r1, #255	; 0xff
 801b17c:	4091      	lsls	r1, r2
 801b17e:	000a      	movs	r2, r1
 801b180:	43d2      	mvns	r2, r2
 801b182:	401a      	ands	r2, r3
 801b184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	019b      	lsls	r3, r3, #6
 801b18a:	22ff      	movs	r2, #255	; 0xff
 801b18c:	401a      	ands	r2, r3
 801b18e:	1dfb      	adds	r3, r7, #7
 801b190:	781b      	ldrb	r3, [r3, #0]
 801b192:	0018      	movs	r0, r3
 801b194:	2303      	movs	r3, #3
 801b196:	4003      	ands	r3, r0
 801b198:	00db      	lsls	r3, r3, #3
 801b19a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801b19c:	4809      	ldr	r0, [pc, #36]	; (801b1c4 <__NVIC_SetPriority+0xd8>)
 801b19e:	1dfb      	adds	r3, r7, #7
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	001c      	movs	r4, r3
 801b1a4:	230f      	movs	r3, #15
 801b1a6:	4023      	ands	r3, r4
 801b1a8:	3b08      	subs	r3, #8
 801b1aa:	089b      	lsrs	r3, r3, #2
 801b1ac:	430a      	orrs	r2, r1
 801b1ae:	3306      	adds	r3, #6
 801b1b0:	009b      	lsls	r3, r3, #2
 801b1b2:	18c3      	adds	r3, r0, r3
 801b1b4:	3304      	adds	r3, #4
 801b1b6:	601a      	str	r2, [r3, #0]
}
 801b1b8:	46c0      	nop			; (mov r8, r8)
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	b003      	add	sp, #12
 801b1be:	bd90      	pop	{r4, r7, pc}
 801b1c0:	e000e100 	.word	0xe000e100
 801b1c4:	e000ed00 	.word	0xe000ed00

0801b1c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801b1cc:	4b05      	ldr	r3, [pc, #20]	; (801b1e4 <SysTick_Handler+0x1c>)
 801b1ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801b1d0:	f001 ff2a 	bl	801d028 <xTaskGetSchedulerState>
 801b1d4:	0003      	movs	r3, r0
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d001      	beq.n	801b1de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801b1da:	f002 fbfd 	bl	801d9d8 <xPortSysTickHandler>
  }
}
 801b1de:	46c0      	nop			; (mov r8, r8)
 801b1e0:	46bd      	mov	sp, r7
 801b1e2:	bd80      	pop	{r7, pc}
 801b1e4:	e000e010 	.word	0xe000e010

0801b1e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801b1ec:	2305      	movs	r3, #5
 801b1ee:	425b      	negs	r3, r3
 801b1f0:	2100      	movs	r1, #0
 801b1f2:	0018      	movs	r0, r3
 801b1f4:	f7ff ff7a 	bl	801b0ec <__NVIC_SetPriority>
#endif
}
 801b1f8:	46c0      	nop			; (mov r8, r8)
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd80      	pop	{r7, pc}
	...

0801b200 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801b200:	b580      	push	{r7, lr}
 801b202:	b082      	sub	sp, #8
 801b204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b206:	f3ef 8305 	mrs	r3, IPSR
 801b20a:	603b      	str	r3, [r7, #0]
  return(result);
 801b20c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d003      	beq.n	801b21a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801b212:	2306      	movs	r3, #6
 801b214:	425b      	negs	r3, r3
 801b216:	607b      	str	r3, [r7, #4]
 801b218:	e00c      	b.n	801b234 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801b21a:	4b09      	ldr	r3, [pc, #36]	; (801b240 <osKernelInitialize+0x40>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	d105      	bne.n	801b22e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801b222:	4b07      	ldr	r3, [pc, #28]	; (801b240 <osKernelInitialize+0x40>)
 801b224:	2201      	movs	r2, #1
 801b226:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801b228:	2300      	movs	r3, #0
 801b22a:	607b      	str	r3, [r7, #4]
 801b22c:	e002      	b.n	801b234 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801b22e:	2301      	movs	r3, #1
 801b230:	425b      	negs	r3, r3
 801b232:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801b234:	687b      	ldr	r3, [r7, #4]
}
 801b236:	0018      	movs	r0, r3
 801b238:	46bd      	mov	sp, r7
 801b23a:	b002      	add	sp, #8
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	46c0      	nop			; (mov r8, r8)
 801b240:	20000ab4 	.word	0x20000ab4

0801b244 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801b244:	b580      	push	{r7, lr}
 801b246:	b082      	sub	sp, #8
 801b248:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b24a:	f3ef 8305 	mrs	r3, IPSR
 801b24e:	603b      	str	r3, [r7, #0]
  return(result);
 801b250:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b252:	2b00      	cmp	r3, #0
 801b254:	d003      	beq.n	801b25e <osKernelStart+0x1a>
    stat = osErrorISR;
 801b256:	2306      	movs	r3, #6
 801b258:	425b      	negs	r3, r3
 801b25a:	607b      	str	r3, [r7, #4]
 801b25c:	e010      	b.n	801b280 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801b25e:	4b0b      	ldr	r3, [pc, #44]	; (801b28c <osKernelStart+0x48>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	2b01      	cmp	r3, #1
 801b264:	d109      	bne.n	801b27a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801b266:	f7ff ffbf 	bl	801b1e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801b26a:	4b08      	ldr	r3, [pc, #32]	; (801b28c <osKernelStart+0x48>)
 801b26c:	2202      	movs	r2, #2
 801b26e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801b270:	f001 fae2 	bl	801c838 <vTaskStartScheduler>
      stat = osOK;
 801b274:	2300      	movs	r3, #0
 801b276:	607b      	str	r3, [r7, #4]
 801b278:	e002      	b.n	801b280 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801b27a:	2301      	movs	r3, #1
 801b27c:	425b      	negs	r3, r3
 801b27e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801b280:	687b      	ldr	r3, [r7, #4]
}
 801b282:	0018      	movs	r0, r3
 801b284:	46bd      	mov	sp, r7
 801b286:	b002      	add	sp, #8
 801b288:	bd80      	pop	{r7, pc}
 801b28a:	46c0      	nop			; (mov r8, r8)
 801b28c:	20000ab4 	.word	0x20000ab4

0801b290 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801b290:	b5b0      	push	{r4, r5, r7, lr}
 801b292:	b08e      	sub	sp, #56	; 0x38
 801b294:	af04      	add	r7, sp, #16
 801b296:	60f8      	str	r0, [r7, #12]
 801b298:	60b9      	str	r1, [r7, #8]
 801b29a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801b29c:	2300      	movs	r3, #0
 801b29e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b2a0:	f3ef 8305 	mrs	r3, IPSR
 801b2a4:	617b      	str	r3, [r7, #20]
  return(result);
 801b2a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d000      	beq.n	801b2ae <osThreadNew+0x1e>
 801b2ac:	e081      	b.n	801b3b2 <osThreadNew+0x122>
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d100      	bne.n	801b2b6 <osThreadNew+0x26>
 801b2b4:	e07d      	b.n	801b3b2 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 801b2b6:	2380      	movs	r3, #128	; 0x80
 801b2b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801b2ba:	2318      	movs	r3, #24
 801b2bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801b2be:	2300      	movs	r3, #0
 801b2c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801b2c2:	2301      	movs	r3, #1
 801b2c4:	425b      	negs	r3, r3
 801b2c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d044      	beq.n	801b358 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d002      	beq.n	801b2dc <osThreadNew+0x4c>
        name = attr->name;
 801b2d6:	687b      	ldr	r3, [r7, #4]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	699b      	ldr	r3, [r3, #24]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d002      	beq.n	801b2ea <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	699b      	ldr	r3, [r3, #24]
 801b2e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801b2ea:	69fb      	ldr	r3, [r7, #28]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d007      	beq.n	801b300 <osThreadNew+0x70>
 801b2f0:	69fb      	ldr	r3, [r7, #28]
 801b2f2:	2b38      	cmp	r3, #56	; 0x38
 801b2f4:	d804      	bhi.n	801b300 <osThreadNew+0x70>
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	685b      	ldr	r3, [r3, #4]
 801b2fa:	2201      	movs	r2, #1
 801b2fc:	4013      	ands	r3, r2
 801b2fe:	d001      	beq.n	801b304 <osThreadNew+0x74>
        return (NULL);
 801b300:	2300      	movs	r3, #0
 801b302:	e057      	b.n	801b3b4 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	695b      	ldr	r3, [r3, #20]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d003      	beq.n	801b314 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	695b      	ldr	r3, [r3, #20]
 801b310:	089b      	lsrs	r3, r3, #2
 801b312:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	689b      	ldr	r3, [r3, #8]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d00e      	beq.n	801b33a <osThreadNew+0xaa>
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	68db      	ldr	r3, [r3, #12]
 801b320:	2ba7      	cmp	r3, #167	; 0xa7
 801b322:	d90a      	bls.n	801b33a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d006      	beq.n	801b33a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	695b      	ldr	r3, [r3, #20]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d002      	beq.n	801b33a <osThreadNew+0xaa>
        mem = 1;
 801b334:	2301      	movs	r3, #1
 801b336:	61bb      	str	r3, [r7, #24]
 801b338:	e010      	b.n	801b35c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	689b      	ldr	r3, [r3, #8]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d10c      	bne.n	801b35c <osThreadNew+0xcc>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	68db      	ldr	r3, [r3, #12]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d108      	bne.n	801b35c <osThreadNew+0xcc>
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	691b      	ldr	r3, [r3, #16]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d104      	bne.n	801b35c <osThreadNew+0xcc>
          mem = 0;
 801b352:	2300      	movs	r3, #0
 801b354:	61bb      	str	r3, [r7, #24]
 801b356:	e001      	b.n	801b35c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 801b358:	2300      	movs	r3, #0
 801b35a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801b35c:	69bb      	ldr	r3, [r7, #24]
 801b35e:	2b01      	cmp	r3, #1
 801b360:	d112      	bne.n	801b388 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b36a:	68bd      	ldr	r5, [r7, #8]
 801b36c:	6a3c      	ldr	r4, [r7, #32]
 801b36e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b370:	68f8      	ldr	r0, [r7, #12]
 801b372:	9302      	str	r3, [sp, #8]
 801b374:	9201      	str	r2, [sp, #4]
 801b376:	69fb      	ldr	r3, [r7, #28]
 801b378:	9300      	str	r3, [sp, #0]
 801b37a:	002b      	movs	r3, r5
 801b37c:	0022      	movs	r2, r4
 801b37e:	f000 ff54 	bl	801c22a <xTaskCreateStatic>
 801b382:	0003      	movs	r3, r0
 801b384:	613b      	str	r3, [r7, #16]
 801b386:	e014      	b.n	801b3b2 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 801b388:	69bb      	ldr	r3, [r7, #24]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d111      	bne.n	801b3b2 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801b38e:	6a3b      	ldr	r3, [r7, #32]
 801b390:	b29a      	uxth	r2, r3
 801b392:	68bc      	ldr	r4, [r7, #8]
 801b394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b396:	68f8      	ldr	r0, [r7, #12]
 801b398:	2310      	movs	r3, #16
 801b39a:	18fb      	adds	r3, r7, r3
 801b39c:	9301      	str	r3, [sp, #4]
 801b39e:	69fb      	ldr	r3, [r7, #28]
 801b3a0:	9300      	str	r3, [sp, #0]
 801b3a2:	0023      	movs	r3, r4
 801b3a4:	f000 ff85 	bl	801c2b2 <xTaskCreate>
 801b3a8:	0003      	movs	r3, r0
 801b3aa:	2b01      	cmp	r3, #1
 801b3ac:	d001      	beq.n	801b3b2 <osThreadNew+0x122>
            hTask = NULL;
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801b3b2:	693b      	ldr	r3, [r7, #16]
}
 801b3b4:	0018      	movs	r0, r3
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	b00a      	add	sp, #40	; 0x28
 801b3ba:	bdb0      	pop	{r4, r5, r7, pc}

0801b3bc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b082      	sub	sp, #8
 801b3c0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 801b3c2:	f001 fe23 	bl	801d00c <xTaskGetCurrentTaskHandle>
 801b3c6:	0003      	movs	r3, r0
 801b3c8:	607b      	str	r3, [r7, #4]

  return (id);
 801b3ca:	687b      	ldr	r3, [r7, #4]
}
 801b3cc:	0018      	movs	r0, r3
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	b002      	add	sp, #8
 801b3d2:	bd80      	pop	{r7, pc}

0801b3d4 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b086      	sub	sp, #24
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b3e0:	f3ef 8305 	mrs	r3, IPSR
 801b3e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b3e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d003      	beq.n	801b3f4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 801b3ec:	2306      	movs	r3, #6
 801b3ee:	425b      	negs	r3, r3
 801b3f0:	617b      	str	r3, [r7, #20]
 801b3f2:	e00c      	b.n	801b40e <osThreadSuspend+0x3a>
  }
  else if (hTask == NULL) {
 801b3f4:	693b      	ldr	r3, [r7, #16]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d103      	bne.n	801b402 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 801b3fa:	2304      	movs	r3, #4
 801b3fc:	425b      	negs	r3, r3
 801b3fe:	617b      	str	r3, [r7, #20]
 801b400:	e005      	b.n	801b40e <osThreadSuspend+0x3a>
  }
  else {
    stat = osOK;
 801b402:	2300      	movs	r3, #0
 801b404:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 801b406:	693b      	ldr	r3, [r7, #16]
 801b408:	0018      	movs	r0, r3
 801b40a:	f001 f93b 	bl	801c684 <vTaskSuspend>
  }

  return (stat);
 801b40e:	697b      	ldr	r3, [r7, #20]
}
 801b410:	0018      	movs	r0, r3
 801b412:	46bd      	mov	sp, r7
 801b414:	b006      	add	sp, #24
 801b416:	bd80      	pop	{r7, pc}

0801b418 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 801b418:	b580      	push	{r7, lr}
 801b41a:	b086      	sub	sp, #24
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b424:	f3ef 8305 	mrs	r3, IPSR
 801b428:	60fb      	str	r3, [r7, #12]
  return(result);
 801b42a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d003      	beq.n	801b438 <osThreadResume+0x20>
    stat = osErrorISR;
 801b430:	2306      	movs	r3, #6
 801b432:	425b      	negs	r3, r3
 801b434:	617b      	str	r3, [r7, #20]
 801b436:	e00c      	b.n	801b452 <osThreadResume+0x3a>
  }
  else if (hTask == NULL) {
 801b438:	693b      	ldr	r3, [r7, #16]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d103      	bne.n	801b446 <osThreadResume+0x2e>
    stat = osErrorParameter;
 801b43e:	2304      	movs	r3, #4
 801b440:	425b      	negs	r3, r3
 801b442:	617b      	str	r3, [r7, #20]
 801b444:	e005      	b.n	801b452 <osThreadResume+0x3a>
  }
  else {
    stat = osOK;
 801b446:	2300      	movs	r3, #0
 801b448:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 801b44a:	693b      	ldr	r3, [r7, #16]
 801b44c:	0018      	movs	r0, r3
 801b44e:	f001 f9a5 	bl	801c79c <vTaskResume>
  }

  return (stat);
 801b452:	697b      	ldr	r3, [r7, #20]
}
 801b454:	0018      	movs	r0, r3
 801b456:	46bd      	mov	sp, r7
 801b458:	b006      	add	sp, #24
 801b45a:	bd80      	pop	{r7, pc}

0801b45c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801b45c:	b580      	push	{r7, lr}
 801b45e:	b084      	sub	sp, #16
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b464:	f3ef 8305 	mrs	r3, IPSR
 801b468:	60bb      	str	r3, [r7, #8]
  return(result);
 801b46a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d003      	beq.n	801b478 <osDelay+0x1c>
    stat = osErrorISR;
 801b470:	2306      	movs	r3, #6
 801b472:	425b      	negs	r3, r3
 801b474:	60fb      	str	r3, [r7, #12]
 801b476:	e008      	b.n	801b48a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 801b478:	2300      	movs	r3, #0
 801b47a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d003      	beq.n	801b48a <osDelay+0x2e>
      vTaskDelay(ticks);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	0018      	movs	r0, r3
 801b486:	f001 f869 	bl	801c55c <vTaskDelay>
    }
  }

  return (stat);
 801b48a:	68fb      	ldr	r3, [r7, #12]
}
 801b48c:	0018      	movs	r0, r3
 801b48e:	46bd      	mov	sp, r7
 801b490:	b004      	add	sp, #16
 801b492:	bd80      	pop	{r7, pc}

0801b494 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801b494:	b590      	push	{r4, r7, lr}
 801b496:	b08b      	sub	sp, #44	; 0x2c
 801b498:	af02      	add	r7, sp, #8
 801b49a:	60f8      	str	r0, [r7, #12]
 801b49c:	60b9      	str	r1, [r7, #8]
 801b49e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b4a4:	f3ef 8305 	mrs	r3, IPSR
 801b4a8:	613b      	str	r3, [r7, #16]
  return(result);
 801b4aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d000      	beq.n	801b4b2 <osMessageQueueNew+0x1e>
 801b4b0:	e064      	b.n	801b57c <osMessageQueueNew+0xe8>
 801b4b2:	68fb      	ldr	r3, [r7, #12]
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d100      	bne.n	801b4ba <osMessageQueueNew+0x26>
 801b4b8:	e060      	b.n	801b57c <osMessageQueueNew+0xe8>
 801b4ba:	68bb      	ldr	r3, [r7, #8]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d05d      	beq.n	801b57c <osMessageQueueNew+0xe8>
    mem = -1;
 801b4c0:	2301      	movs	r3, #1
 801b4c2:	425b      	negs	r3, r3
 801b4c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d028      	beq.n	801b51e <osMessageQueueNew+0x8a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	689b      	ldr	r3, [r3, #8]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d011      	beq.n	801b4f8 <osMessageQueueNew+0x64>
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	68db      	ldr	r3, [r3, #12]
 801b4d8:	2b4f      	cmp	r3, #79	; 0x4f
 801b4da:	d90d      	bls.n	801b4f8 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d009      	beq.n	801b4f8 <osMessageQueueNew+0x64>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	695a      	ldr	r2, [r3, #20]
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	68b9      	ldr	r1, [r7, #8]
 801b4ec:	434b      	muls	r3, r1
 801b4ee:	429a      	cmp	r2, r3
 801b4f0:	d302      	bcc.n	801b4f8 <osMessageQueueNew+0x64>
        mem = 1;
 801b4f2:	2301      	movs	r3, #1
 801b4f4:	61bb      	str	r3, [r7, #24]
 801b4f6:	e014      	b.n	801b522 <osMessageQueueNew+0x8e>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	689b      	ldr	r3, [r3, #8]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d110      	bne.n	801b522 <osMessageQueueNew+0x8e>
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	68db      	ldr	r3, [r3, #12]
 801b504:	2b00      	cmp	r3, #0
 801b506:	d10c      	bne.n	801b522 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d108      	bne.n	801b522 <osMessageQueueNew+0x8e>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	695b      	ldr	r3, [r3, #20]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d104      	bne.n	801b522 <osMessageQueueNew+0x8e>
          mem = 0;
 801b518:	2300      	movs	r3, #0
 801b51a:	61bb      	str	r3, [r7, #24]
 801b51c:	e001      	b.n	801b522 <osMessageQueueNew+0x8e>
        }
      }
    }
    else {
      mem = 0;
 801b51e:	2300      	movs	r3, #0
 801b520:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801b522:	69bb      	ldr	r3, [r7, #24]
 801b524:	2b01      	cmp	r3, #1
 801b526:	d10c      	bne.n	801b542 <osMessageQueueNew+0xae>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	691a      	ldr	r2, [r3, #16]
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	689b      	ldr	r3, [r3, #8]
 801b530:	68b9      	ldr	r1, [r7, #8]
 801b532:	68f8      	ldr	r0, [r7, #12]
 801b534:	2400      	movs	r4, #0
 801b536:	9400      	str	r4, [sp, #0]
 801b538:	f000 fa09 	bl	801b94e <xQueueGenericCreateStatic>
 801b53c:	0003      	movs	r3, r0
 801b53e:	61fb      	str	r3, [r7, #28]
 801b540:	e00a      	b.n	801b558 <osMessageQueueNew+0xc4>
      #endif
    }
    else {
      if (mem == 0) {
 801b542:	69bb      	ldr	r3, [r7, #24]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d107      	bne.n	801b558 <osMessageQueueNew+0xc4>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801b548:	68b9      	ldr	r1, [r7, #8]
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	2200      	movs	r2, #0
 801b54e:	0018      	movs	r0, r3
 801b550:	f000 fa49 	bl	801b9e6 <xQueueGenericCreate>
 801b554:	0003      	movs	r3, r0
 801b556:	61fb      	str	r3, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801b558:	69fb      	ldr	r3, [r7, #28]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d00e      	beq.n	801b57c <osMessageQueueNew+0xe8>
      if (attr != NULL) {
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d003      	beq.n	801b56c <osMessageQueueNew+0xd8>
        name = attr->name;
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	617b      	str	r3, [r7, #20]
 801b56a:	e001      	b.n	801b570 <osMessageQueueNew+0xdc>
      } else {
        name = NULL;
 801b56c:	2300      	movs	r3, #0
 801b56e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801b570:	697a      	ldr	r2, [r7, #20]
 801b572:	69fb      	ldr	r3, [r7, #28]
 801b574:	0011      	movs	r1, r2
 801b576:	0018      	movs	r0, r3
 801b578:	f000 fdfc 	bl	801c174 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801b57c:	69fb      	ldr	r3, [r7, #28]
}
 801b57e:	0018      	movs	r0, r3
 801b580:	46bd      	mov	sp, r7
 801b582:	b009      	add	sp, #36	; 0x24
 801b584:	bd90      	pop	{r4, r7, pc}
	...

0801b588 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801b588:	b580      	push	{r7, lr}
 801b58a:	b088      	sub	sp, #32
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	60f8      	str	r0, [r7, #12]
 801b590:	60b9      	str	r1, [r7, #8]
 801b592:	603b      	str	r3, [r7, #0]
 801b594:	1dfb      	adds	r3, r7, #7
 801b596:	701a      	strb	r2, [r3, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801b598:	68fb      	ldr	r3, [r7, #12]
 801b59a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801b59c:	2300      	movs	r3, #0
 801b59e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b5a0:	f3ef 8305 	mrs	r3, IPSR
 801b5a4:	617b      	str	r3, [r7, #20]
  return(result);
 801b5a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d024      	beq.n	801b5f6 <osMessageQueuePut+0x6e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801b5ac:	69bb      	ldr	r3, [r7, #24]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d005      	beq.n	801b5be <osMessageQueuePut+0x36>
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d002      	beq.n	801b5be <osMessageQueuePut+0x36>
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d003      	beq.n	801b5c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801b5be:	2304      	movs	r3, #4
 801b5c0:	425b      	negs	r3, r3
 801b5c2:	61fb      	str	r3, [r7, #28]
 801b5c4:	e034      	b.n	801b630 <osMessageQueuePut+0xa8>
    }
    else {
      yield = pdFALSE;
 801b5c6:	2300      	movs	r3, #0
 801b5c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801b5ca:	2310      	movs	r3, #16
 801b5cc:	18fa      	adds	r2, r7, r3
 801b5ce:	68b9      	ldr	r1, [r7, #8]
 801b5d0:	69b8      	ldr	r0, [r7, #24]
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	f000 fb24 	bl	801bc20 <xQueueGenericSendFromISR>
 801b5d8:	0003      	movs	r3, r0
 801b5da:	2b01      	cmp	r3, #1
 801b5dc:	d003      	beq.n	801b5e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801b5de:	2303      	movs	r3, #3
 801b5e0:	425b      	negs	r3, r3
 801b5e2:	61fb      	str	r3, [r7, #28]
 801b5e4:	e024      	b.n	801b630 <osMessageQueuePut+0xa8>
      } else {
        portYIELD_FROM_ISR (yield);
 801b5e6:	693b      	ldr	r3, [r7, #16]
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d021      	beq.n	801b630 <osMessageQueuePut+0xa8>
 801b5ec:	4b13      	ldr	r3, [pc, #76]	; (801b63c <osMessageQueuePut+0xb4>)
 801b5ee:	2280      	movs	r2, #128	; 0x80
 801b5f0:	0552      	lsls	r2, r2, #21
 801b5f2:	601a      	str	r2, [r3, #0]
 801b5f4:	e01c      	b.n	801b630 <osMessageQueuePut+0xa8>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801b5f6:	69bb      	ldr	r3, [r7, #24]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d002      	beq.n	801b602 <osMessageQueuePut+0x7a>
 801b5fc:	68bb      	ldr	r3, [r7, #8]
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d103      	bne.n	801b60a <osMessageQueuePut+0x82>
      stat = osErrorParameter;
 801b602:	2304      	movs	r3, #4
 801b604:	425b      	negs	r3, r3
 801b606:	61fb      	str	r3, [r7, #28]
 801b608:	e012      	b.n	801b630 <osMessageQueuePut+0xa8>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801b60a:	683a      	ldr	r2, [r7, #0]
 801b60c:	68b9      	ldr	r1, [r7, #8]
 801b60e:	69b8      	ldr	r0, [r7, #24]
 801b610:	2300      	movs	r3, #0
 801b612:	f000 fa41 	bl	801ba98 <xQueueGenericSend>
 801b616:	0003      	movs	r3, r0
 801b618:	2b01      	cmp	r3, #1
 801b61a:	d009      	beq.n	801b630 <osMessageQueuePut+0xa8>
        if (timeout != 0U) {
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d003      	beq.n	801b62a <osMessageQueuePut+0xa2>
          stat = osErrorTimeout;
 801b622:	2302      	movs	r3, #2
 801b624:	425b      	negs	r3, r3
 801b626:	61fb      	str	r3, [r7, #28]
 801b628:	e002      	b.n	801b630 <osMessageQueuePut+0xa8>
        } else {
          stat = osErrorResource;
 801b62a:	2303      	movs	r3, #3
 801b62c:	425b      	negs	r3, r3
 801b62e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801b630:	69fb      	ldr	r3, [r7, #28]
}
 801b632:	0018      	movs	r0, r3
 801b634:	46bd      	mov	sp, r7
 801b636:	b008      	add	sp, #32
 801b638:	bd80      	pop	{r7, pc}
 801b63a:	46c0      	nop			; (mov r8, r8)
 801b63c:	e000ed04 	.word	0xe000ed04

0801b640 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801b640:	b580      	push	{r7, lr}
 801b642:	b088      	sub	sp, #32
 801b644:	af00      	add	r7, sp, #0
 801b646:	60f8      	str	r0, [r7, #12]
 801b648:	60b9      	str	r1, [r7, #8]
 801b64a:	607a      	str	r2, [r7, #4]
 801b64c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801b652:	2300      	movs	r3, #0
 801b654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b656:	f3ef 8305 	mrs	r3, IPSR
 801b65a:	617b      	str	r3, [r7, #20]
  return(result);
 801b65c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d024      	beq.n	801b6ac <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801b662:	69bb      	ldr	r3, [r7, #24]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d005      	beq.n	801b674 <osMessageQueueGet+0x34>
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d002      	beq.n	801b674 <osMessageQueueGet+0x34>
 801b66e:	683b      	ldr	r3, [r7, #0]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d003      	beq.n	801b67c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801b674:	2304      	movs	r3, #4
 801b676:	425b      	negs	r3, r3
 801b678:	61fb      	str	r3, [r7, #28]
 801b67a:	e034      	b.n	801b6e6 <osMessageQueueGet+0xa6>
    }
    else {
      yield = pdFALSE;
 801b67c:	2300      	movs	r3, #0
 801b67e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801b680:	2310      	movs	r3, #16
 801b682:	18fa      	adds	r2, r7, r3
 801b684:	68b9      	ldr	r1, [r7, #8]
 801b686:	69bb      	ldr	r3, [r7, #24]
 801b688:	0018      	movs	r0, r3
 801b68a:	f000 fbf2 	bl	801be72 <xQueueReceiveFromISR>
 801b68e:	0003      	movs	r3, r0
 801b690:	2b01      	cmp	r3, #1
 801b692:	d003      	beq.n	801b69c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801b694:	2303      	movs	r3, #3
 801b696:	425b      	negs	r3, r3
 801b698:	61fb      	str	r3, [r7, #28]
 801b69a:	e024      	b.n	801b6e6 <osMessageQueueGet+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 801b69c:	693b      	ldr	r3, [r7, #16]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d021      	beq.n	801b6e6 <osMessageQueueGet+0xa6>
 801b6a2:	4b13      	ldr	r3, [pc, #76]	; (801b6f0 <osMessageQueueGet+0xb0>)
 801b6a4:	2280      	movs	r2, #128	; 0x80
 801b6a6:	0552      	lsls	r2, r2, #21
 801b6a8:	601a      	str	r2, [r3, #0]
 801b6aa:	e01c      	b.n	801b6e6 <osMessageQueueGet+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801b6ac:	69bb      	ldr	r3, [r7, #24]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d002      	beq.n	801b6b8 <osMessageQueueGet+0x78>
 801b6b2:	68bb      	ldr	r3, [r7, #8]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d103      	bne.n	801b6c0 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 801b6b8:	2304      	movs	r3, #4
 801b6ba:	425b      	negs	r3, r3
 801b6bc:	61fb      	str	r3, [r7, #28]
 801b6be:	e012      	b.n	801b6e6 <osMessageQueueGet+0xa6>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801b6c0:	683a      	ldr	r2, [r7, #0]
 801b6c2:	68b9      	ldr	r1, [r7, #8]
 801b6c4:	69bb      	ldr	r3, [r7, #24]
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	f000 fb1e 	bl	801bd08 <xQueueReceive>
 801b6cc:	0003      	movs	r3, r0
 801b6ce:	2b01      	cmp	r3, #1
 801b6d0:	d009      	beq.n	801b6e6 <osMessageQueueGet+0xa6>
        if (timeout != 0U) {
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d003      	beq.n	801b6e0 <osMessageQueueGet+0xa0>
          stat = osErrorTimeout;
 801b6d8:	2302      	movs	r3, #2
 801b6da:	425b      	negs	r3, r3
 801b6dc:	61fb      	str	r3, [r7, #28]
 801b6de:	e002      	b.n	801b6e6 <osMessageQueueGet+0xa6>
        } else {
          stat = osErrorResource;
 801b6e0:	2303      	movs	r3, #3
 801b6e2:	425b      	negs	r3, r3
 801b6e4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801b6e6:	69fb      	ldr	r3, [r7, #28]
}
 801b6e8:	0018      	movs	r0, r3
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	b008      	add	sp, #32
 801b6ee:	bd80      	pop	{r7, pc}
 801b6f0:	e000ed04 	.word	0xe000ed04

0801b6f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	b084      	sub	sp, #16
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	60f8      	str	r0, [r7, #12]
 801b6fc:	60b9      	str	r1, [r7, #8]
 801b6fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	4a06      	ldr	r2, [pc, #24]	; (801b71c <vApplicationGetIdleTaskMemory+0x28>)
 801b704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801b706:	68bb      	ldr	r3, [r7, #8]
 801b708:	4a05      	ldr	r2, [pc, #20]	; (801b720 <vApplicationGetIdleTaskMemory+0x2c>)
 801b70a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	2280      	movs	r2, #128	; 0x80
 801b710:	601a      	str	r2, [r3, #0]
}
 801b712:	46c0      	nop			; (mov r8, r8)
 801b714:	46bd      	mov	sp, r7
 801b716:	b004      	add	sp, #16
 801b718:	bd80      	pop	{r7, pc}
 801b71a:	46c0      	nop			; (mov r8, r8)
 801b71c:	20000ab8 	.word	0x20000ab8
 801b720:	20000b60 	.word	0x20000b60

0801b724 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801b724:	b580      	push	{r7, lr}
 801b726:	b084      	sub	sp, #16
 801b728:	af00      	add	r7, sp, #0
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	60b9      	str	r1, [r7, #8]
 801b72e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801b730:	68fb      	ldr	r3, [r7, #12]
 801b732:	4a06      	ldr	r2, [pc, #24]	; (801b74c <vApplicationGetTimerTaskMemory+0x28>)
 801b734:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	4a05      	ldr	r2, [pc, #20]	; (801b750 <vApplicationGetTimerTaskMemory+0x2c>)
 801b73a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	2280      	movs	r2, #128	; 0x80
 801b740:	0052      	lsls	r2, r2, #1
 801b742:	601a      	str	r2, [r3, #0]
}
 801b744:	46c0      	nop			; (mov r8, r8)
 801b746:	46bd      	mov	sp, r7
 801b748:	b004      	add	sp, #16
 801b74a:	bd80      	pop	{r7, pc}
 801b74c:	20000d60 	.word	0x20000d60
 801b750:	20000e08 	.word	0x20000e08

0801b754 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801b754:	b580      	push	{r7, lr}
 801b756:	b082      	sub	sp, #8
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	3308      	adds	r3, #8
 801b760:	001a      	movs	r2, r3
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	2201      	movs	r2, #1
 801b76a:	4252      	negs	r2, r2
 801b76c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	3308      	adds	r3, #8
 801b772:	001a      	movs	r2, r3
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	3308      	adds	r3, #8
 801b77c:	001a      	movs	r2, r3
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	2200      	movs	r2, #0
 801b786:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801b788:	46c0      	nop			; (mov r8, r8)
 801b78a:	46bd      	mov	sp, r7
 801b78c:	b002      	add	sp, #8
 801b78e:	bd80      	pop	{r7, pc}

0801b790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801b790:	b580      	push	{r7, lr}
 801b792:	b082      	sub	sp, #8
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	2200      	movs	r2, #0
 801b79c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801b79e:	46c0      	nop			; (mov r8, r8)
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	b002      	add	sp, #8
 801b7a4:	bd80      	pop	{r7, pc}

0801b7a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b7a6:	b580      	push	{r7, lr}
 801b7a8:	b084      	sub	sp, #16
 801b7aa:	af00      	add	r7, sp, #0
 801b7ac:	6078      	str	r0, [r7, #4]
 801b7ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	685b      	ldr	r3, [r3, #4]
 801b7b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801b7b6:	683b      	ldr	r3, [r7, #0]
 801b7b8:	68fa      	ldr	r2, [r7, #12]
 801b7ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	689a      	ldr	r2, [r3, #8]
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	689b      	ldr	r3, [r3, #8]
 801b7c8:	683a      	ldr	r2, [r7, #0]
 801b7ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	683a      	ldr	r2, [r7, #0]
 801b7d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801b7d2:	683b      	ldr	r3, [r7, #0]
 801b7d4:	687a      	ldr	r2, [r7, #4]
 801b7d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	1c5a      	adds	r2, r3, #1
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	601a      	str	r2, [r3, #0]
}
 801b7e2:	46c0      	nop			; (mov r8, r8)
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	b004      	add	sp, #16
 801b7e8:	bd80      	pop	{r7, pc}

0801b7ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b7ea:	b580      	push	{r7, lr}
 801b7ec:	b084      	sub	sp, #16
 801b7ee:	af00      	add	r7, sp, #0
 801b7f0:	6078      	str	r0, [r7, #4]
 801b7f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801b7f4:	683b      	ldr	r3, [r7, #0]
 801b7f6:	681b      	ldr	r3, [r3, #0]
 801b7f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801b7fa:	68bb      	ldr	r3, [r7, #8]
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	d103      	bne.n	801b808 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	691b      	ldr	r3, [r3, #16]
 801b804:	60fb      	str	r3, [r7, #12]
 801b806:	e00c      	b.n	801b822 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	3308      	adds	r3, #8
 801b80c:	60fb      	str	r3, [r7, #12]
 801b80e:	e002      	b.n	801b816 <vListInsert+0x2c>
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	685b      	ldr	r3, [r3, #4]
 801b814:	60fb      	str	r3, [r7, #12]
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	685b      	ldr	r3, [r3, #4]
 801b81a:	681b      	ldr	r3, [r3, #0]
 801b81c:	68ba      	ldr	r2, [r7, #8]
 801b81e:	429a      	cmp	r2, r3
 801b820:	d2f6      	bcs.n	801b810 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	685a      	ldr	r2, [r3, #4]
 801b826:	683b      	ldr	r3, [r7, #0]
 801b828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801b82a:	683b      	ldr	r3, [r7, #0]
 801b82c:	685b      	ldr	r3, [r3, #4]
 801b82e:	683a      	ldr	r2, [r7, #0]
 801b830:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	68fa      	ldr	r2, [r7, #12]
 801b836:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	683a      	ldr	r2, [r7, #0]
 801b83c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801b83e:	683b      	ldr	r3, [r7, #0]
 801b840:	687a      	ldr	r2, [r7, #4]
 801b842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	1c5a      	adds	r2, r3, #1
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	601a      	str	r2, [r3, #0]
}
 801b84e:	46c0      	nop			; (mov r8, r8)
 801b850:	46bd      	mov	sp, r7
 801b852:	b004      	add	sp, #16
 801b854:	bd80      	pop	{r7, pc}

0801b856 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801b856:	b580      	push	{r7, lr}
 801b858:	b084      	sub	sp, #16
 801b85a:	af00      	add	r7, sp, #0
 801b85c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	691b      	ldr	r3, [r3, #16]
 801b862:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	685b      	ldr	r3, [r3, #4]
 801b868:	687a      	ldr	r2, [r7, #4]
 801b86a:	6892      	ldr	r2, [r2, #8]
 801b86c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	689b      	ldr	r3, [r3, #8]
 801b872:	687a      	ldr	r2, [r7, #4]
 801b874:	6852      	ldr	r2, [r2, #4]
 801b876:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	685b      	ldr	r3, [r3, #4]
 801b87c:	687a      	ldr	r2, [r7, #4]
 801b87e:	429a      	cmp	r2, r3
 801b880:	d103      	bne.n	801b88a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	689a      	ldr	r2, [r3, #8]
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	2200      	movs	r2, #0
 801b88e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	681b      	ldr	r3, [r3, #0]
 801b894:	1e5a      	subs	r2, r3, #1
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	681b      	ldr	r3, [r3, #0]
}
 801b89e:	0018      	movs	r0, r3
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	b004      	add	sp, #16
 801b8a4:	bd80      	pop	{r7, pc}

0801b8a6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801b8a6:	b580      	push	{r7, lr}
 801b8a8:	b084      	sub	sp, #16
 801b8aa:	af00      	add	r7, sp, #0
 801b8ac:	6078      	str	r0, [r7, #4]
 801b8ae:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d101      	bne.n	801b8be <xQueueGenericReset+0x18>
 801b8ba:	b672      	cpsid	i
 801b8bc:	e7fe      	b.n	801b8bc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 801b8be:	f002 f82f 	bl	801d920 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	681a      	ldr	r2, [r3, #0]
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8ce:	434b      	muls	r3, r1
 801b8d0:	18d2      	adds	r2, r2, r3
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	2200      	movs	r2, #0
 801b8da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	681a      	ldr	r2, [r3, #0]
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b8ec:	1e59      	subs	r1, r3, #1
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b8f2:	434b      	muls	r3, r1
 801b8f4:	18d2      	adds	r2, r2, r3
 801b8f6:	68fb      	ldr	r3, [r7, #12]
 801b8f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801b8fa:	68fb      	ldr	r3, [r7, #12]
 801b8fc:	2244      	movs	r2, #68	; 0x44
 801b8fe:	21ff      	movs	r1, #255	; 0xff
 801b900:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	2245      	movs	r2, #69	; 0x45
 801b906:	21ff      	movs	r1, #255	; 0xff
 801b908:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d10d      	bne.n	801b92c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	691b      	ldr	r3, [r3, #16]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d013      	beq.n	801b940 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	3310      	adds	r3, #16
 801b91c:	0018      	movs	r0, r3
 801b91e:	f001 f9dd 	bl	801ccdc <xTaskRemoveFromEventList>
 801b922:	1e03      	subs	r3, r0, #0
 801b924:	d00c      	beq.n	801b940 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801b926:	f001 ffeb 	bl	801d900 <vPortYield>
 801b92a:	e009      	b.n	801b940 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	3310      	adds	r3, #16
 801b930:	0018      	movs	r0, r3
 801b932:	f7ff ff0f 	bl	801b754 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801b936:	68fb      	ldr	r3, [r7, #12]
 801b938:	3324      	adds	r3, #36	; 0x24
 801b93a:	0018      	movs	r0, r3
 801b93c:	f7ff ff0a 	bl	801b754 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801b940:	f002 f800 	bl	801d944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801b944:	2301      	movs	r3, #1
}
 801b946:	0018      	movs	r0, r3
 801b948:	46bd      	mov	sp, r7
 801b94a:	b004      	add	sp, #16
 801b94c:	bd80      	pop	{r7, pc}

0801b94e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801b94e:	b590      	push	{r4, r7, lr}
 801b950:	b089      	sub	sp, #36	; 0x24
 801b952:	af02      	add	r7, sp, #8
 801b954:	60f8      	str	r0, [r7, #12]
 801b956:	60b9      	str	r1, [r7, #8]
 801b958:	607a      	str	r2, [r7, #4]
 801b95a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801b95c:	68fb      	ldr	r3, [r7, #12]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d101      	bne.n	801b966 <xQueueGenericCreateStatic+0x18>
 801b962:	b672      	cpsid	i
 801b964:	e7fe      	b.n	801b964 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801b966:	683b      	ldr	r3, [r7, #0]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d101      	bne.n	801b970 <xQueueGenericCreateStatic+0x22>
 801b96c:	b672      	cpsid	i
 801b96e:	e7fe      	b.n	801b96e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d002      	beq.n	801b97c <xQueueGenericCreateStatic+0x2e>
 801b976:	68bb      	ldr	r3, [r7, #8]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d001      	beq.n	801b980 <xQueueGenericCreateStatic+0x32>
 801b97c:	2301      	movs	r3, #1
 801b97e:	e000      	b.n	801b982 <xQueueGenericCreateStatic+0x34>
 801b980:	2300      	movs	r3, #0
 801b982:	2b00      	cmp	r3, #0
 801b984:	d101      	bne.n	801b98a <xQueueGenericCreateStatic+0x3c>
 801b986:	b672      	cpsid	i
 801b988:	e7fe      	b.n	801b988 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d102      	bne.n	801b996 <xQueueGenericCreateStatic+0x48>
 801b990:	68bb      	ldr	r3, [r7, #8]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d101      	bne.n	801b99a <xQueueGenericCreateStatic+0x4c>
 801b996:	2301      	movs	r3, #1
 801b998:	e000      	b.n	801b99c <xQueueGenericCreateStatic+0x4e>
 801b99a:	2300      	movs	r3, #0
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d101      	bne.n	801b9a4 <xQueueGenericCreateStatic+0x56>
 801b9a0:	b672      	cpsid	i
 801b9a2:	e7fe      	b.n	801b9a2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801b9a4:	2350      	movs	r3, #80	; 0x50
 801b9a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 801b9a8:	693b      	ldr	r3, [r7, #16]
 801b9aa:	2b50      	cmp	r3, #80	; 0x50
 801b9ac:	d001      	beq.n	801b9b2 <xQueueGenericCreateStatic+0x64>
 801b9ae:	b672      	cpsid	i
 801b9b0:	e7fe      	b.n	801b9b0 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801b9b2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d00e      	beq.n	801b9dc <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801b9be:	697b      	ldr	r3, [r7, #20]
 801b9c0:	2246      	movs	r2, #70	; 0x46
 801b9c2:	2101      	movs	r1, #1
 801b9c4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801b9c6:	2328      	movs	r3, #40	; 0x28
 801b9c8:	18fb      	adds	r3, r7, r3
 801b9ca:	781c      	ldrb	r4, [r3, #0]
 801b9cc:	687a      	ldr	r2, [r7, #4]
 801b9ce:	68b9      	ldr	r1, [r7, #8]
 801b9d0:	68f8      	ldr	r0, [r7, #12]
 801b9d2:	697b      	ldr	r3, [r7, #20]
 801b9d4:	9300      	str	r3, [sp, #0]
 801b9d6:	0023      	movs	r3, r4
 801b9d8:	f000 f837 	bl	801ba4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801b9dc:	697b      	ldr	r3, [r7, #20]
	}
 801b9de:	0018      	movs	r0, r3
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	b007      	add	sp, #28
 801b9e4:	bd90      	pop	{r4, r7, pc}

0801b9e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801b9e6:	b590      	push	{r4, r7, lr}
 801b9e8:	b08b      	sub	sp, #44	; 0x2c
 801b9ea:	af02      	add	r7, sp, #8
 801b9ec:	60f8      	str	r0, [r7, #12]
 801b9ee:	60b9      	str	r1, [r7, #8]
 801b9f0:	1dfb      	adds	r3, r7, #7
 801b9f2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d101      	bne.n	801b9fe <xQueueGenericCreate+0x18>
 801b9fa:	b672      	cpsid	i
 801b9fc:	e7fe      	b.n	801b9fc <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	68ba      	ldr	r2, [r7, #8]
 801ba02:	4353      	muls	r3, r2
 801ba04:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801ba06:	69fb      	ldr	r3, [r7, #28]
 801ba08:	3350      	adds	r3, #80	; 0x50
 801ba0a:	0018      	movs	r0, r3
 801ba0c:	f002 f820 	bl	801da50 <pvPortMalloc>
 801ba10:	0003      	movs	r3, r0
 801ba12:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d012      	beq.n	801ba40 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801ba1a:	69bb      	ldr	r3, [r7, #24]
 801ba1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	3350      	adds	r3, #80	; 0x50
 801ba22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801ba24:	69bb      	ldr	r3, [r7, #24]
 801ba26:	2246      	movs	r2, #70	; 0x46
 801ba28:	2100      	movs	r1, #0
 801ba2a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801ba2c:	1dfb      	adds	r3, r7, #7
 801ba2e:	781c      	ldrb	r4, [r3, #0]
 801ba30:	697a      	ldr	r2, [r7, #20]
 801ba32:	68b9      	ldr	r1, [r7, #8]
 801ba34:	68f8      	ldr	r0, [r7, #12]
 801ba36:	69bb      	ldr	r3, [r7, #24]
 801ba38:	9300      	str	r3, [sp, #0]
 801ba3a:	0023      	movs	r3, r4
 801ba3c:	f000 f805 	bl	801ba4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801ba40:	69bb      	ldr	r3, [r7, #24]
	}
 801ba42:	0018      	movs	r0, r3
 801ba44:	46bd      	mov	sp, r7
 801ba46:	b009      	add	sp, #36	; 0x24
 801ba48:	bd90      	pop	{r4, r7, pc}

0801ba4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801ba4a:	b580      	push	{r7, lr}
 801ba4c:	b084      	sub	sp, #16
 801ba4e:	af00      	add	r7, sp, #0
 801ba50:	60f8      	str	r0, [r7, #12]
 801ba52:	60b9      	str	r1, [r7, #8]
 801ba54:	607a      	str	r2, [r7, #4]
 801ba56:	001a      	movs	r2, r3
 801ba58:	1cfb      	adds	r3, r7, #3
 801ba5a:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d103      	bne.n	801ba6a <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801ba62:	69bb      	ldr	r3, [r7, #24]
 801ba64:	69ba      	ldr	r2, [r7, #24]
 801ba66:	601a      	str	r2, [r3, #0]
 801ba68:	e002      	b.n	801ba70 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	687a      	ldr	r2, [r7, #4]
 801ba6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801ba70:	69bb      	ldr	r3, [r7, #24]
 801ba72:	68fa      	ldr	r2, [r7, #12]
 801ba74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801ba76:	69bb      	ldr	r3, [r7, #24]
 801ba78:	68ba      	ldr	r2, [r7, #8]
 801ba7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801ba7c:	69bb      	ldr	r3, [r7, #24]
 801ba7e:	2101      	movs	r1, #1
 801ba80:	0018      	movs	r0, r3
 801ba82:	f7ff ff10 	bl	801b8a6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801ba86:	69bb      	ldr	r3, [r7, #24]
 801ba88:	1cfa      	adds	r2, r7, #3
 801ba8a:	214c      	movs	r1, #76	; 0x4c
 801ba8c:	7812      	ldrb	r2, [r2, #0]
 801ba8e:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801ba90:	46c0      	nop			; (mov r8, r8)
 801ba92:	46bd      	mov	sp, r7
 801ba94:	b004      	add	sp, #16
 801ba96:	bd80      	pop	{r7, pc}

0801ba98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b08a      	sub	sp, #40	; 0x28
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	60f8      	str	r0, [r7, #12]
 801baa0:	60b9      	str	r1, [r7, #8]
 801baa2:	607a      	str	r2, [r7, #4]
 801baa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801baa6:	2300      	movs	r3, #0
 801baa8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801baae:	6a3b      	ldr	r3, [r7, #32]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d101      	bne.n	801bab8 <xQueueGenericSend+0x20>
 801bab4:	b672      	cpsid	i
 801bab6:	e7fe      	b.n	801bab6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801bab8:	68bb      	ldr	r3, [r7, #8]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d103      	bne.n	801bac6 <xQueueGenericSend+0x2e>
 801babe:	6a3b      	ldr	r3, [r7, #32]
 801bac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d101      	bne.n	801baca <xQueueGenericSend+0x32>
 801bac6:	2301      	movs	r3, #1
 801bac8:	e000      	b.n	801bacc <xQueueGenericSend+0x34>
 801baca:	2300      	movs	r3, #0
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d101      	bne.n	801bad4 <xQueueGenericSend+0x3c>
 801bad0:	b672      	cpsid	i
 801bad2:	e7fe      	b.n	801bad2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801bad4:	683b      	ldr	r3, [r7, #0]
 801bad6:	2b02      	cmp	r3, #2
 801bad8:	d103      	bne.n	801bae2 <xQueueGenericSend+0x4a>
 801bada:	6a3b      	ldr	r3, [r7, #32]
 801badc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bade:	2b01      	cmp	r3, #1
 801bae0:	d101      	bne.n	801bae6 <xQueueGenericSend+0x4e>
 801bae2:	2301      	movs	r3, #1
 801bae4:	e000      	b.n	801bae8 <xQueueGenericSend+0x50>
 801bae6:	2300      	movs	r3, #0
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d101      	bne.n	801baf0 <xQueueGenericSend+0x58>
 801baec:	b672      	cpsid	i
 801baee:	e7fe      	b.n	801baee <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801baf0:	f001 fa9a 	bl	801d028 <xTaskGetSchedulerState>
 801baf4:	1e03      	subs	r3, r0, #0
 801baf6:	d102      	bne.n	801bafe <xQueueGenericSend+0x66>
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d101      	bne.n	801bb02 <xQueueGenericSend+0x6a>
 801bafe:	2301      	movs	r3, #1
 801bb00:	e000      	b.n	801bb04 <xQueueGenericSend+0x6c>
 801bb02:	2300      	movs	r3, #0
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d101      	bne.n	801bb0c <xQueueGenericSend+0x74>
 801bb08:	b672      	cpsid	i
 801bb0a:	e7fe      	b.n	801bb0a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801bb0c:	f001 ff08 	bl	801d920 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801bb10:	6a3b      	ldr	r3, [r7, #32]
 801bb12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bb14:	6a3b      	ldr	r3, [r7, #32]
 801bb16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb18:	429a      	cmp	r2, r3
 801bb1a:	d302      	bcc.n	801bb22 <xQueueGenericSend+0x8a>
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	2b02      	cmp	r3, #2
 801bb20:	d11e      	bne.n	801bb60 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801bb22:	683a      	ldr	r2, [r7, #0]
 801bb24:	68b9      	ldr	r1, [r7, #8]
 801bb26:	6a3b      	ldr	r3, [r7, #32]
 801bb28:	0018      	movs	r0, r3
 801bb2a:	f000 fa05 	bl	801bf38 <prvCopyDataToQueue>
 801bb2e:	0003      	movs	r3, r0
 801bb30:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801bb32:	6a3b      	ldr	r3, [r7, #32]
 801bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d009      	beq.n	801bb4e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801bb3a:	6a3b      	ldr	r3, [r7, #32]
 801bb3c:	3324      	adds	r3, #36	; 0x24
 801bb3e:	0018      	movs	r0, r3
 801bb40:	f001 f8cc 	bl	801ccdc <xTaskRemoveFromEventList>
 801bb44:	1e03      	subs	r3, r0, #0
 801bb46:	d007      	beq.n	801bb58 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801bb48:	f001 feda 	bl	801d900 <vPortYield>
 801bb4c:	e004      	b.n	801bb58 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801bb4e:	69fb      	ldr	r3, [r7, #28]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d001      	beq.n	801bb58 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801bb54:	f001 fed4 	bl	801d900 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801bb58:	f001 fef4 	bl	801d944 <vPortExitCritical>
				return pdPASS;
 801bb5c:	2301      	movs	r3, #1
 801bb5e:	e05b      	b.n	801bc18 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d103      	bne.n	801bb6e <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801bb66:	f001 feed 	bl	801d944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	e054      	b.n	801bc18 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 801bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d106      	bne.n	801bb82 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801bb74:	2314      	movs	r3, #20
 801bb76:	18fb      	adds	r3, r7, r3
 801bb78:	0018      	movs	r0, r3
 801bb7a:	f001 f90b 	bl	801cd94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801bb7e:	2301      	movs	r3, #1
 801bb80:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801bb82:	f001 fedf 	bl	801d944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801bb86:	f000 feb5 	bl	801c8f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801bb8a:	f001 fec9 	bl	801d920 <vPortEnterCritical>
 801bb8e:	6a3b      	ldr	r3, [r7, #32]
 801bb90:	2244      	movs	r2, #68	; 0x44
 801bb92:	5c9b      	ldrb	r3, [r3, r2]
 801bb94:	b25b      	sxtb	r3, r3
 801bb96:	3301      	adds	r3, #1
 801bb98:	d103      	bne.n	801bba2 <xQueueGenericSend+0x10a>
 801bb9a:	6a3b      	ldr	r3, [r7, #32]
 801bb9c:	2244      	movs	r2, #68	; 0x44
 801bb9e:	2100      	movs	r1, #0
 801bba0:	5499      	strb	r1, [r3, r2]
 801bba2:	6a3b      	ldr	r3, [r7, #32]
 801bba4:	2245      	movs	r2, #69	; 0x45
 801bba6:	5c9b      	ldrb	r3, [r3, r2]
 801bba8:	b25b      	sxtb	r3, r3
 801bbaa:	3301      	adds	r3, #1
 801bbac:	d103      	bne.n	801bbb6 <xQueueGenericSend+0x11e>
 801bbae:	6a3b      	ldr	r3, [r7, #32]
 801bbb0:	2245      	movs	r2, #69	; 0x45
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	5499      	strb	r1, [r3, r2]
 801bbb6:	f001 fec5 	bl	801d944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801bbba:	1d3a      	adds	r2, r7, #4
 801bbbc:	2314      	movs	r3, #20
 801bbbe:	18fb      	adds	r3, r7, r3
 801bbc0:	0011      	movs	r1, r2
 801bbc2:	0018      	movs	r0, r3
 801bbc4:	f001 f8fa 	bl	801cdbc <xTaskCheckForTimeOut>
 801bbc8:	1e03      	subs	r3, r0, #0
 801bbca:	d11e      	bne.n	801bc0a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801bbcc:	6a3b      	ldr	r3, [r7, #32]
 801bbce:	0018      	movs	r0, r3
 801bbd0:	f000 fab7 	bl	801c142 <prvIsQueueFull>
 801bbd4:	1e03      	subs	r3, r0, #0
 801bbd6:	d011      	beq.n	801bbfc <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801bbd8:	6a3b      	ldr	r3, [r7, #32]
 801bbda:	3310      	adds	r3, #16
 801bbdc:	687a      	ldr	r2, [r7, #4]
 801bbde:	0011      	movs	r1, r2
 801bbe0:	0018      	movs	r0, r3
 801bbe2:	f001 f837 	bl	801cc54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801bbe6:	6a3b      	ldr	r3, [r7, #32]
 801bbe8:	0018      	movs	r0, r3
 801bbea:	f000 fa36 	bl	801c05a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801bbee:	f000 fe8d 	bl	801c90c <xTaskResumeAll>
 801bbf2:	1e03      	subs	r3, r0, #0
 801bbf4:	d18a      	bne.n	801bb0c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 801bbf6:	f001 fe83 	bl	801d900 <vPortYield>
 801bbfa:	e787      	b.n	801bb0c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801bbfc:	6a3b      	ldr	r3, [r7, #32]
 801bbfe:	0018      	movs	r0, r3
 801bc00:	f000 fa2b 	bl	801c05a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801bc04:	f000 fe82 	bl	801c90c <xTaskResumeAll>
 801bc08:	e780      	b.n	801bb0c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801bc0a:	6a3b      	ldr	r3, [r7, #32]
 801bc0c:	0018      	movs	r0, r3
 801bc0e:	f000 fa24 	bl	801c05a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801bc12:	f000 fe7b 	bl	801c90c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801bc16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801bc18:	0018      	movs	r0, r3
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	b00a      	add	sp, #40	; 0x28
 801bc1e:	bd80      	pop	{r7, pc}

0801bc20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801bc20:	b590      	push	{r4, r7, lr}
 801bc22:	b08b      	sub	sp, #44	; 0x2c
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	60f8      	str	r0, [r7, #12]
 801bc28:	60b9      	str	r1, [r7, #8]
 801bc2a:	607a      	str	r2, [r7, #4]
 801bc2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801bc32:	6a3b      	ldr	r3, [r7, #32]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d101      	bne.n	801bc3c <xQueueGenericSendFromISR+0x1c>
 801bc38:	b672      	cpsid	i
 801bc3a:	e7fe      	b.n	801bc3a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d103      	bne.n	801bc4a <xQueueGenericSendFromISR+0x2a>
 801bc42:	6a3b      	ldr	r3, [r7, #32]
 801bc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d101      	bne.n	801bc4e <xQueueGenericSendFromISR+0x2e>
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	e000      	b.n	801bc50 <xQueueGenericSendFromISR+0x30>
 801bc4e:	2300      	movs	r3, #0
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d101      	bne.n	801bc58 <xQueueGenericSendFromISR+0x38>
 801bc54:	b672      	cpsid	i
 801bc56:	e7fe      	b.n	801bc56 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801bc58:	683b      	ldr	r3, [r7, #0]
 801bc5a:	2b02      	cmp	r3, #2
 801bc5c:	d103      	bne.n	801bc66 <xQueueGenericSendFromISR+0x46>
 801bc5e:	6a3b      	ldr	r3, [r7, #32]
 801bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc62:	2b01      	cmp	r3, #1
 801bc64:	d101      	bne.n	801bc6a <xQueueGenericSendFromISR+0x4a>
 801bc66:	2301      	movs	r3, #1
 801bc68:	e000      	b.n	801bc6c <xQueueGenericSendFromISR+0x4c>
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d101      	bne.n	801bc74 <xQueueGenericSendFromISR+0x54>
 801bc70:	b672      	cpsid	i
 801bc72:	e7fe      	b.n	801bc72 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801bc74:	f001 fe7e 	bl	801d974 <ulSetInterruptMaskFromISR>
 801bc78:	0003      	movs	r3, r0
 801bc7a:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801bc7c:	6a3b      	ldr	r3, [r7, #32]
 801bc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bc80:	6a3b      	ldr	r3, [r7, #32]
 801bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d302      	bcc.n	801bc8e <xQueueGenericSendFromISR+0x6e>
 801bc88:	683b      	ldr	r3, [r7, #0]
 801bc8a:	2b02      	cmp	r3, #2
 801bc8c:	d131      	bne.n	801bcf2 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801bc8e:	241b      	movs	r4, #27
 801bc90:	193b      	adds	r3, r7, r4
 801bc92:	6a3a      	ldr	r2, [r7, #32]
 801bc94:	2145      	movs	r1, #69	; 0x45
 801bc96:	5c52      	ldrb	r2, [r2, r1]
 801bc98:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801bc9a:	6a3b      	ldr	r3, [r7, #32]
 801bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bc9e:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801bca0:	683a      	ldr	r2, [r7, #0]
 801bca2:	68b9      	ldr	r1, [r7, #8]
 801bca4:	6a3b      	ldr	r3, [r7, #32]
 801bca6:	0018      	movs	r0, r3
 801bca8:	f000 f946 	bl	801bf38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801bcac:	193b      	adds	r3, r7, r4
 801bcae:	781b      	ldrb	r3, [r3, #0]
 801bcb0:	b25b      	sxtb	r3, r3
 801bcb2:	3301      	adds	r3, #1
 801bcb4:	d111      	bne.n	801bcda <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801bcb6:	6a3b      	ldr	r3, [r7, #32]
 801bcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d016      	beq.n	801bcec <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801bcbe:	6a3b      	ldr	r3, [r7, #32]
 801bcc0:	3324      	adds	r3, #36	; 0x24
 801bcc2:	0018      	movs	r0, r3
 801bcc4:	f001 f80a 	bl	801ccdc <xTaskRemoveFromEventList>
 801bcc8:	1e03      	subs	r3, r0, #0
 801bcca:	d00f      	beq.n	801bcec <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d00c      	beq.n	801bcec <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	2201      	movs	r2, #1
 801bcd6:	601a      	str	r2, [r3, #0]
 801bcd8:	e008      	b.n	801bcec <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801bcda:	231b      	movs	r3, #27
 801bcdc:	18fb      	adds	r3, r7, r3
 801bcde:	781b      	ldrb	r3, [r3, #0]
 801bce0:	3301      	adds	r3, #1
 801bce2:	b2db      	uxtb	r3, r3
 801bce4:	b259      	sxtb	r1, r3
 801bce6:	6a3b      	ldr	r3, [r7, #32]
 801bce8:	2245      	movs	r2, #69	; 0x45
 801bcea:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 801bcec:	2301      	movs	r3, #1
 801bcee:	627b      	str	r3, [r7, #36]	; 0x24
		{
 801bcf0:	e001      	b.n	801bcf6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801bcf6:	69fb      	ldr	r3, [r7, #28]
 801bcf8:	0018      	movs	r0, r3
 801bcfa:	f001 fe41 	bl	801d980 <vClearInterruptMaskFromISR>

	return xReturn;
 801bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bd00:	0018      	movs	r0, r3
 801bd02:	46bd      	mov	sp, r7
 801bd04:	b00b      	add	sp, #44	; 0x2c
 801bd06:	bd90      	pop	{r4, r7, pc}

0801bd08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801bd08:	b580      	push	{r7, lr}
 801bd0a:	b08a      	sub	sp, #40	; 0x28
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	60f8      	str	r0, [r7, #12]
 801bd10:	60b9      	str	r1, [r7, #8]
 801bd12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801bd14:	2300      	movs	r3, #0
 801bd16:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801bd1c:	6a3b      	ldr	r3, [r7, #32]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d101      	bne.n	801bd26 <xQueueReceive+0x1e>
 801bd22:	b672      	cpsid	i
 801bd24:	e7fe      	b.n	801bd24 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801bd26:	68bb      	ldr	r3, [r7, #8]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d103      	bne.n	801bd34 <xQueueReceive+0x2c>
 801bd2c:	6a3b      	ldr	r3, [r7, #32]
 801bd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d101      	bne.n	801bd38 <xQueueReceive+0x30>
 801bd34:	2301      	movs	r3, #1
 801bd36:	e000      	b.n	801bd3a <xQueueReceive+0x32>
 801bd38:	2300      	movs	r3, #0
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d101      	bne.n	801bd42 <xQueueReceive+0x3a>
 801bd3e:	b672      	cpsid	i
 801bd40:	e7fe      	b.n	801bd40 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801bd42:	f001 f971 	bl	801d028 <xTaskGetSchedulerState>
 801bd46:	1e03      	subs	r3, r0, #0
 801bd48:	d102      	bne.n	801bd50 <xQueueReceive+0x48>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d101      	bne.n	801bd54 <xQueueReceive+0x4c>
 801bd50:	2301      	movs	r3, #1
 801bd52:	e000      	b.n	801bd56 <xQueueReceive+0x4e>
 801bd54:	2300      	movs	r3, #0
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d101      	bne.n	801bd5e <xQueueReceive+0x56>
 801bd5a:	b672      	cpsid	i
 801bd5c:	e7fe      	b.n	801bd5c <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801bd5e:	f001 fddf 	bl	801d920 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801bd62:	6a3b      	ldr	r3, [r7, #32]
 801bd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd66:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801bd68:	69fb      	ldr	r3, [r7, #28]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d01a      	beq.n	801bda4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801bd6e:	68ba      	ldr	r2, [r7, #8]
 801bd70:	6a3b      	ldr	r3, [r7, #32]
 801bd72:	0011      	movs	r1, r2
 801bd74:	0018      	movs	r0, r3
 801bd76:	f000 f94a 	bl	801c00e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801bd7a:	69fb      	ldr	r3, [r7, #28]
 801bd7c:	1e5a      	subs	r2, r3, #1
 801bd7e:	6a3b      	ldr	r3, [r7, #32]
 801bd80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801bd82:	6a3b      	ldr	r3, [r7, #32]
 801bd84:	691b      	ldr	r3, [r3, #16]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d008      	beq.n	801bd9c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801bd8a:	6a3b      	ldr	r3, [r7, #32]
 801bd8c:	3310      	adds	r3, #16
 801bd8e:	0018      	movs	r0, r3
 801bd90:	f000 ffa4 	bl	801ccdc <xTaskRemoveFromEventList>
 801bd94:	1e03      	subs	r3, r0, #0
 801bd96:	d001      	beq.n	801bd9c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801bd98:	f001 fdb2 	bl	801d900 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801bd9c:	f001 fdd2 	bl	801d944 <vPortExitCritical>
				return pdPASS;
 801bda0:	2301      	movs	r3, #1
 801bda2:	e062      	b.n	801be6a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d103      	bne.n	801bdb2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801bdaa:	f001 fdcb 	bl	801d944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801bdae:	2300      	movs	r3, #0
 801bdb0:	e05b      	b.n	801be6a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 801bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d106      	bne.n	801bdc6 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801bdb8:	2314      	movs	r3, #20
 801bdba:	18fb      	adds	r3, r7, r3
 801bdbc:	0018      	movs	r0, r3
 801bdbe:	f000 ffe9 	bl	801cd94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801bdc2:	2301      	movs	r3, #1
 801bdc4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801bdc6:	f001 fdbd 	bl	801d944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801bdca:	f000 fd93 	bl	801c8f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801bdce:	f001 fda7 	bl	801d920 <vPortEnterCritical>
 801bdd2:	6a3b      	ldr	r3, [r7, #32]
 801bdd4:	2244      	movs	r2, #68	; 0x44
 801bdd6:	5c9b      	ldrb	r3, [r3, r2]
 801bdd8:	b25b      	sxtb	r3, r3
 801bdda:	3301      	adds	r3, #1
 801bddc:	d103      	bne.n	801bde6 <xQueueReceive+0xde>
 801bdde:	6a3b      	ldr	r3, [r7, #32]
 801bde0:	2244      	movs	r2, #68	; 0x44
 801bde2:	2100      	movs	r1, #0
 801bde4:	5499      	strb	r1, [r3, r2]
 801bde6:	6a3b      	ldr	r3, [r7, #32]
 801bde8:	2245      	movs	r2, #69	; 0x45
 801bdea:	5c9b      	ldrb	r3, [r3, r2]
 801bdec:	b25b      	sxtb	r3, r3
 801bdee:	3301      	adds	r3, #1
 801bdf0:	d103      	bne.n	801bdfa <xQueueReceive+0xf2>
 801bdf2:	6a3b      	ldr	r3, [r7, #32]
 801bdf4:	2245      	movs	r2, #69	; 0x45
 801bdf6:	2100      	movs	r1, #0
 801bdf8:	5499      	strb	r1, [r3, r2]
 801bdfa:	f001 fda3 	bl	801d944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801bdfe:	1d3a      	adds	r2, r7, #4
 801be00:	2314      	movs	r3, #20
 801be02:	18fb      	adds	r3, r7, r3
 801be04:	0011      	movs	r1, r2
 801be06:	0018      	movs	r0, r3
 801be08:	f000 ffd8 	bl	801cdbc <xTaskCheckForTimeOut>
 801be0c:	1e03      	subs	r3, r0, #0
 801be0e:	d11e      	bne.n	801be4e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801be10:	6a3b      	ldr	r3, [r7, #32]
 801be12:	0018      	movs	r0, r3
 801be14:	f000 f97f 	bl	801c116 <prvIsQueueEmpty>
 801be18:	1e03      	subs	r3, r0, #0
 801be1a:	d011      	beq.n	801be40 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801be1c:	6a3b      	ldr	r3, [r7, #32]
 801be1e:	3324      	adds	r3, #36	; 0x24
 801be20:	687a      	ldr	r2, [r7, #4]
 801be22:	0011      	movs	r1, r2
 801be24:	0018      	movs	r0, r3
 801be26:	f000 ff15 	bl	801cc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801be2a:	6a3b      	ldr	r3, [r7, #32]
 801be2c:	0018      	movs	r0, r3
 801be2e:	f000 f914 	bl	801c05a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801be32:	f000 fd6b 	bl	801c90c <xTaskResumeAll>
 801be36:	1e03      	subs	r3, r0, #0
 801be38:	d191      	bne.n	801bd5e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 801be3a:	f001 fd61 	bl	801d900 <vPortYield>
 801be3e:	e78e      	b.n	801bd5e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801be40:	6a3b      	ldr	r3, [r7, #32]
 801be42:	0018      	movs	r0, r3
 801be44:	f000 f909 	bl	801c05a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801be48:	f000 fd60 	bl	801c90c <xTaskResumeAll>
 801be4c:	e787      	b.n	801bd5e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801be4e:	6a3b      	ldr	r3, [r7, #32]
 801be50:	0018      	movs	r0, r3
 801be52:	f000 f902 	bl	801c05a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801be56:	f000 fd59 	bl	801c90c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801be5a:	6a3b      	ldr	r3, [r7, #32]
 801be5c:	0018      	movs	r0, r3
 801be5e:	f000 f95a 	bl	801c116 <prvIsQueueEmpty>
 801be62:	1e03      	subs	r3, r0, #0
 801be64:	d100      	bne.n	801be68 <xQueueReceive+0x160>
 801be66:	e77a      	b.n	801bd5e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801be68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801be6a:	0018      	movs	r0, r3
 801be6c:	46bd      	mov	sp, r7
 801be6e:	b00a      	add	sp, #40	; 0x28
 801be70:	bd80      	pop	{r7, pc}

0801be72 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801be72:	b590      	push	{r4, r7, lr}
 801be74:	b08b      	sub	sp, #44	; 0x2c
 801be76:	af00      	add	r7, sp, #0
 801be78:	60f8      	str	r0, [r7, #12]
 801be7a:	60b9      	str	r1, [r7, #8]
 801be7c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801be82:	6a3b      	ldr	r3, [r7, #32]
 801be84:	2b00      	cmp	r3, #0
 801be86:	d101      	bne.n	801be8c <xQueueReceiveFromISR+0x1a>
 801be88:	b672      	cpsid	i
 801be8a:	e7fe      	b.n	801be8a <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d103      	bne.n	801be9a <xQueueReceiveFromISR+0x28>
 801be92:	6a3b      	ldr	r3, [r7, #32]
 801be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801be96:	2b00      	cmp	r3, #0
 801be98:	d101      	bne.n	801be9e <xQueueReceiveFromISR+0x2c>
 801be9a:	2301      	movs	r3, #1
 801be9c:	e000      	b.n	801bea0 <xQueueReceiveFromISR+0x2e>
 801be9e:	2300      	movs	r3, #0
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d101      	bne.n	801bea8 <xQueueReceiveFromISR+0x36>
 801bea4:	b672      	cpsid	i
 801bea6:	e7fe      	b.n	801bea6 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801bea8:	f001 fd64 	bl	801d974 <ulSetInterruptMaskFromISR>
 801beac:	0003      	movs	r3, r0
 801beae:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801beb0:	6a3b      	ldr	r3, [r7, #32]
 801beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801beb4:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801beb6:	69bb      	ldr	r3, [r7, #24]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d032      	beq.n	801bf22 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801bebc:	2417      	movs	r4, #23
 801bebe:	193b      	adds	r3, r7, r4
 801bec0:	6a3a      	ldr	r2, [r7, #32]
 801bec2:	2144      	movs	r1, #68	; 0x44
 801bec4:	5c52      	ldrb	r2, [r2, r1]
 801bec6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801bec8:	68ba      	ldr	r2, [r7, #8]
 801beca:	6a3b      	ldr	r3, [r7, #32]
 801becc:	0011      	movs	r1, r2
 801bece:	0018      	movs	r0, r3
 801bed0:	f000 f89d 	bl	801c00e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801bed4:	69bb      	ldr	r3, [r7, #24]
 801bed6:	1e5a      	subs	r2, r3, #1
 801bed8:	6a3b      	ldr	r3, [r7, #32]
 801beda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801bedc:	193b      	adds	r3, r7, r4
 801bede:	781b      	ldrb	r3, [r3, #0]
 801bee0:	b25b      	sxtb	r3, r3
 801bee2:	3301      	adds	r3, #1
 801bee4:	d111      	bne.n	801bf0a <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801bee6:	6a3b      	ldr	r3, [r7, #32]
 801bee8:	691b      	ldr	r3, [r3, #16]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d016      	beq.n	801bf1c <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801beee:	6a3b      	ldr	r3, [r7, #32]
 801bef0:	3310      	adds	r3, #16
 801bef2:	0018      	movs	r0, r3
 801bef4:	f000 fef2 	bl	801ccdc <xTaskRemoveFromEventList>
 801bef8:	1e03      	subs	r3, r0, #0
 801befa:	d00f      	beq.n	801bf1c <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d00c      	beq.n	801bf1c <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	2201      	movs	r2, #1
 801bf06:	601a      	str	r2, [r3, #0]
 801bf08:	e008      	b.n	801bf1c <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801bf0a:	2317      	movs	r3, #23
 801bf0c:	18fb      	adds	r3, r7, r3
 801bf0e:	781b      	ldrb	r3, [r3, #0]
 801bf10:	3301      	adds	r3, #1
 801bf12:	b2db      	uxtb	r3, r3
 801bf14:	b259      	sxtb	r1, r3
 801bf16:	6a3b      	ldr	r3, [r7, #32]
 801bf18:	2244      	movs	r2, #68	; 0x44
 801bf1a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	627b      	str	r3, [r7, #36]	; 0x24
 801bf20:	e001      	b.n	801bf26 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 801bf22:	2300      	movs	r3, #0
 801bf24:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801bf26:	69fb      	ldr	r3, [r7, #28]
 801bf28:	0018      	movs	r0, r3
 801bf2a:	f001 fd29 	bl	801d980 <vClearInterruptMaskFromISR>

	return xReturn;
 801bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801bf30:	0018      	movs	r0, r3
 801bf32:	46bd      	mov	sp, r7
 801bf34:	b00b      	add	sp, #44	; 0x2c
 801bf36:	bd90      	pop	{r4, r7, pc}

0801bf38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b086      	sub	sp, #24
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	60f8      	str	r0, [r7, #12]
 801bf40:	60b9      	str	r1, [r7, #8]
 801bf42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801bf44:	2300      	movs	r3, #0
 801bf46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d10e      	bne.n	801bf74 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d14e      	bne.n	801bffc <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	689b      	ldr	r3, [r3, #8]
 801bf62:	0018      	movs	r0, r3
 801bf64:	f001 f87c 	bl	801d060 <xTaskPriorityDisinherit>
 801bf68:	0003      	movs	r3, r0
 801bf6a:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801bf6c:	68fb      	ldr	r3, [r7, #12]
 801bf6e:	2200      	movs	r2, #0
 801bf70:	609a      	str	r2, [r3, #8]
 801bf72:	e043      	b.n	801bffc <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d119      	bne.n	801bfae <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801bf7a:	68fb      	ldr	r3, [r7, #12]
 801bf7c:	6858      	ldr	r0, [r3, #4]
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bf82:	68bb      	ldr	r3, [r7, #8]
 801bf84:	0019      	movs	r1, r3
 801bf86:	f00b ff04 	bl	8027d92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	685a      	ldr	r2, [r3, #4]
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf92:	18d2      	adds	r2, r2, r3
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	685a      	ldr	r2, [r3, #4]
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	689b      	ldr	r3, [r3, #8]
 801bfa0:	429a      	cmp	r2, r3
 801bfa2:	d32b      	bcc.n	801bffc <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	681a      	ldr	r2, [r3, #0]
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	605a      	str	r2, [r3, #4]
 801bfac:	e026      	b.n	801bffc <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	68d8      	ldr	r0, [r3, #12]
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bfb6:	68bb      	ldr	r3, [r7, #8]
 801bfb8:	0019      	movs	r1, r3
 801bfba:	f00b feea 	bl	8027d92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	68da      	ldr	r2, [r3, #12]
 801bfc2:	68fb      	ldr	r3, [r7, #12]
 801bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfc6:	425b      	negs	r3, r3
 801bfc8:	18d2      	adds	r2, r2, r3
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	68da      	ldr	r2, [r3, #12]
 801bfd2:	68fb      	ldr	r3, [r7, #12]
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	429a      	cmp	r2, r3
 801bfd8:	d207      	bcs.n	801bfea <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	689a      	ldr	r2, [r3, #8]
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfe2:	425b      	negs	r3, r3
 801bfe4:	18d2      	adds	r2, r2, r3
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	2b02      	cmp	r3, #2
 801bfee:	d105      	bne.n	801bffc <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801bff0:	693b      	ldr	r3, [r7, #16]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d002      	beq.n	801bffc <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801bff6:	693b      	ldr	r3, [r7, #16]
 801bff8:	3b01      	subs	r3, #1
 801bffa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801bffc:	693b      	ldr	r3, [r7, #16]
 801bffe:	1c5a      	adds	r2, r3, #1
 801c000:	68fb      	ldr	r3, [r7, #12]
 801c002:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801c004:	697b      	ldr	r3, [r7, #20]
}
 801c006:	0018      	movs	r0, r3
 801c008:	46bd      	mov	sp, r7
 801c00a:	b006      	add	sp, #24
 801c00c:	bd80      	pop	{r7, pc}

0801c00e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801c00e:	b580      	push	{r7, lr}
 801c010:	b082      	sub	sp, #8
 801c012:	af00      	add	r7, sp, #0
 801c014:	6078      	str	r0, [r7, #4]
 801c016:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d018      	beq.n	801c052 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	68da      	ldr	r2, [r3, #12]
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c028:	18d2      	adds	r2, r2, r3
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	68da      	ldr	r2, [r3, #12]
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	689b      	ldr	r3, [r3, #8]
 801c036:	429a      	cmp	r2, r3
 801c038:	d303      	bcc.n	801c042 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	681a      	ldr	r2, [r3, #0]
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	68d9      	ldr	r1, [r3, #12]
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c04a:	683b      	ldr	r3, [r7, #0]
 801c04c:	0018      	movs	r0, r3
 801c04e:	f00b fea0 	bl	8027d92 <memcpy>
	}
}
 801c052:	46c0      	nop			; (mov r8, r8)
 801c054:	46bd      	mov	sp, r7
 801c056:	b002      	add	sp, #8
 801c058:	bd80      	pop	{r7, pc}

0801c05a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801c05a:	b580      	push	{r7, lr}
 801c05c:	b084      	sub	sp, #16
 801c05e:	af00      	add	r7, sp, #0
 801c060:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801c062:	f001 fc5d 	bl	801d920 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801c066:	230f      	movs	r3, #15
 801c068:	18fb      	adds	r3, r7, r3
 801c06a:	687a      	ldr	r2, [r7, #4]
 801c06c:	2145      	movs	r1, #69	; 0x45
 801c06e:	5c52      	ldrb	r2, [r2, r1]
 801c070:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801c072:	e013      	b.n	801c09c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c078:	2b00      	cmp	r3, #0
 801c07a:	d016      	beq.n	801c0aa <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	3324      	adds	r3, #36	; 0x24
 801c080:	0018      	movs	r0, r3
 801c082:	f000 fe2b 	bl	801ccdc <xTaskRemoveFromEventList>
 801c086:	1e03      	subs	r3, r0, #0
 801c088:	d001      	beq.n	801c08e <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801c08a:	f000 fee7 	bl	801ce5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801c08e:	210f      	movs	r1, #15
 801c090:	187b      	adds	r3, r7, r1
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	3b01      	subs	r3, #1
 801c096:	b2da      	uxtb	r2, r3
 801c098:	187b      	adds	r3, r7, r1
 801c09a:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801c09c:	230f      	movs	r3, #15
 801c09e:	18fb      	adds	r3, r7, r3
 801c0a0:	781b      	ldrb	r3, [r3, #0]
 801c0a2:	b25b      	sxtb	r3, r3
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	dce5      	bgt.n	801c074 <prvUnlockQueue+0x1a>
 801c0a8:	e000      	b.n	801c0ac <prvUnlockQueue+0x52>
					break;
 801c0aa:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	2245      	movs	r2, #69	; 0x45
 801c0b0:	21ff      	movs	r1, #255	; 0xff
 801c0b2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801c0b4:	f001 fc46 	bl	801d944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801c0b8:	f001 fc32 	bl	801d920 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801c0bc:	230e      	movs	r3, #14
 801c0be:	18fb      	adds	r3, r7, r3
 801c0c0:	687a      	ldr	r2, [r7, #4]
 801c0c2:	2144      	movs	r1, #68	; 0x44
 801c0c4:	5c52      	ldrb	r2, [r2, r1]
 801c0c6:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801c0c8:	e013      	b.n	801c0f2 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	691b      	ldr	r3, [r3, #16]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d016      	beq.n	801c100 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	3310      	adds	r3, #16
 801c0d6:	0018      	movs	r0, r3
 801c0d8:	f000 fe00 	bl	801ccdc <xTaskRemoveFromEventList>
 801c0dc:	1e03      	subs	r3, r0, #0
 801c0de:	d001      	beq.n	801c0e4 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 801c0e0:	f000 febc 	bl	801ce5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801c0e4:	210e      	movs	r1, #14
 801c0e6:	187b      	adds	r3, r7, r1
 801c0e8:	781b      	ldrb	r3, [r3, #0]
 801c0ea:	3b01      	subs	r3, #1
 801c0ec:	b2da      	uxtb	r2, r3
 801c0ee:	187b      	adds	r3, r7, r1
 801c0f0:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801c0f2:	230e      	movs	r3, #14
 801c0f4:	18fb      	adds	r3, r7, r3
 801c0f6:	781b      	ldrb	r3, [r3, #0]
 801c0f8:	b25b      	sxtb	r3, r3
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	dce5      	bgt.n	801c0ca <prvUnlockQueue+0x70>
 801c0fe:	e000      	b.n	801c102 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 801c100:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	2244      	movs	r2, #68	; 0x44
 801c106:	21ff      	movs	r1, #255	; 0xff
 801c108:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 801c10a:	f001 fc1b 	bl	801d944 <vPortExitCritical>
}
 801c10e:	46c0      	nop			; (mov r8, r8)
 801c110:	46bd      	mov	sp, r7
 801c112:	b004      	add	sp, #16
 801c114:	bd80      	pop	{r7, pc}

0801c116 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801c116:	b580      	push	{r7, lr}
 801c118:	b084      	sub	sp, #16
 801c11a:	af00      	add	r7, sp, #0
 801c11c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801c11e:	f001 fbff 	bl	801d920 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c126:	2b00      	cmp	r3, #0
 801c128:	d102      	bne.n	801c130 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801c12a:	2301      	movs	r3, #1
 801c12c:	60fb      	str	r3, [r7, #12]
 801c12e:	e001      	b.n	801c134 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801c130:	2300      	movs	r3, #0
 801c132:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801c134:	f001 fc06 	bl	801d944 <vPortExitCritical>

	return xReturn;
 801c138:	68fb      	ldr	r3, [r7, #12]
}
 801c13a:	0018      	movs	r0, r3
 801c13c:	46bd      	mov	sp, r7
 801c13e:	b004      	add	sp, #16
 801c140:	bd80      	pop	{r7, pc}

0801c142 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801c142:	b580      	push	{r7, lr}
 801c144:	b084      	sub	sp, #16
 801c146:	af00      	add	r7, sp, #0
 801c148:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801c14a:	f001 fbe9 	bl	801d920 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c156:	429a      	cmp	r2, r3
 801c158:	d102      	bne.n	801c160 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801c15a:	2301      	movs	r3, #1
 801c15c:	60fb      	str	r3, [r7, #12]
 801c15e:	e001      	b.n	801c164 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801c160:	2300      	movs	r3, #0
 801c162:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801c164:	f001 fbee 	bl	801d944 <vPortExitCritical>

	return xReturn;
 801c168:	68fb      	ldr	r3, [r7, #12]
}
 801c16a:	0018      	movs	r0, r3
 801c16c:	46bd      	mov	sp, r7
 801c16e:	b004      	add	sp, #16
 801c170:	bd80      	pop	{r7, pc}
	...

0801c174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801c174:	b580      	push	{r7, lr}
 801c176:	b084      	sub	sp, #16
 801c178:	af00      	add	r7, sp, #0
 801c17a:	6078      	str	r0, [r7, #4]
 801c17c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801c17e:	2300      	movs	r3, #0
 801c180:	60fb      	str	r3, [r7, #12]
 801c182:	e015      	b.n	801c1b0 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801c184:	4b0e      	ldr	r3, [pc, #56]	; (801c1c0 <vQueueAddToRegistry+0x4c>)
 801c186:	68fa      	ldr	r2, [r7, #12]
 801c188:	00d2      	lsls	r2, r2, #3
 801c18a:	58d3      	ldr	r3, [r2, r3]
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	d10c      	bne.n	801c1aa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801c190:	4b0b      	ldr	r3, [pc, #44]	; (801c1c0 <vQueueAddToRegistry+0x4c>)
 801c192:	68fa      	ldr	r2, [r7, #12]
 801c194:	00d2      	lsls	r2, r2, #3
 801c196:	6839      	ldr	r1, [r7, #0]
 801c198:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801c19a:	4a09      	ldr	r2, [pc, #36]	; (801c1c0 <vQueueAddToRegistry+0x4c>)
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	00db      	lsls	r3, r3, #3
 801c1a0:	18d3      	adds	r3, r2, r3
 801c1a2:	3304      	adds	r3, #4
 801c1a4:	687a      	ldr	r2, [r7, #4]
 801c1a6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801c1a8:	e006      	b.n	801c1b8 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	3301      	adds	r3, #1
 801c1ae:	60fb      	str	r3, [r7, #12]
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	2b07      	cmp	r3, #7
 801c1b4:	d9e6      	bls.n	801c184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801c1b6:	46c0      	nop			; (mov r8, r8)
 801c1b8:	46c0      	nop			; (mov r8, r8)
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	b004      	add	sp, #16
 801c1be:	bd80      	pop	{r7, pc}
 801c1c0:	20001208 	.word	0x20001208

0801c1c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b086      	sub	sp, #24
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	60f8      	str	r0, [r7, #12]
 801c1cc:	60b9      	str	r1, [r7, #8]
 801c1ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801c1d4:	f001 fba4 	bl	801d920 <vPortEnterCritical>
 801c1d8:	697b      	ldr	r3, [r7, #20]
 801c1da:	2244      	movs	r2, #68	; 0x44
 801c1dc:	5c9b      	ldrb	r3, [r3, r2]
 801c1de:	b25b      	sxtb	r3, r3
 801c1e0:	3301      	adds	r3, #1
 801c1e2:	d103      	bne.n	801c1ec <vQueueWaitForMessageRestricted+0x28>
 801c1e4:	697b      	ldr	r3, [r7, #20]
 801c1e6:	2244      	movs	r2, #68	; 0x44
 801c1e8:	2100      	movs	r1, #0
 801c1ea:	5499      	strb	r1, [r3, r2]
 801c1ec:	697b      	ldr	r3, [r7, #20]
 801c1ee:	2245      	movs	r2, #69	; 0x45
 801c1f0:	5c9b      	ldrb	r3, [r3, r2]
 801c1f2:	b25b      	sxtb	r3, r3
 801c1f4:	3301      	adds	r3, #1
 801c1f6:	d103      	bne.n	801c200 <vQueueWaitForMessageRestricted+0x3c>
 801c1f8:	697b      	ldr	r3, [r7, #20]
 801c1fa:	2245      	movs	r2, #69	; 0x45
 801c1fc:	2100      	movs	r1, #0
 801c1fe:	5499      	strb	r1, [r3, r2]
 801c200:	f001 fba0 	bl	801d944 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801c204:	697b      	ldr	r3, [r7, #20]
 801c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d106      	bne.n	801c21a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801c20c:	697b      	ldr	r3, [r7, #20]
 801c20e:	3324      	adds	r3, #36	; 0x24
 801c210:	687a      	ldr	r2, [r7, #4]
 801c212:	68b9      	ldr	r1, [r7, #8]
 801c214:	0018      	movs	r0, r3
 801c216:	f000 fd3b 	bl	801cc90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801c21a:	697b      	ldr	r3, [r7, #20]
 801c21c:	0018      	movs	r0, r3
 801c21e:	f7ff ff1c 	bl	801c05a <prvUnlockQueue>
	}
 801c222:	46c0      	nop			; (mov r8, r8)
 801c224:	46bd      	mov	sp, r7
 801c226:	b006      	add	sp, #24
 801c228:	bd80      	pop	{r7, pc}

0801c22a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801c22a:	b590      	push	{r4, r7, lr}
 801c22c:	b08d      	sub	sp, #52	; 0x34
 801c22e:	af04      	add	r7, sp, #16
 801c230:	60f8      	str	r0, [r7, #12]
 801c232:	60b9      	str	r1, [r7, #8]
 801c234:	607a      	str	r2, [r7, #4]
 801c236:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801c238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c23a:	2b00      	cmp	r3, #0
 801c23c:	d101      	bne.n	801c242 <xTaskCreateStatic+0x18>
 801c23e:	b672      	cpsid	i
 801c240:	e7fe      	b.n	801c240 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 801c242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c244:	2b00      	cmp	r3, #0
 801c246:	d101      	bne.n	801c24c <xTaskCreateStatic+0x22>
 801c248:	b672      	cpsid	i
 801c24a:	e7fe      	b.n	801c24a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801c24c:	23a8      	movs	r3, #168	; 0xa8
 801c24e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801c250:	697b      	ldr	r3, [r7, #20]
 801c252:	2ba8      	cmp	r3, #168	; 0xa8
 801c254:	d001      	beq.n	801c25a <xTaskCreateStatic+0x30>
 801c256:	b672      	cpsid	i
 801c258:	e7fe      	b.n	801c258 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801c25a:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801c25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d020      	beq.n	801c2a4 <xTaskCreateStatic+0x7a>
 801c262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c264:	2b00      	cmp	r3, #0
 801c266:	d01d      	beq.n	801c2a4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801c268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c26a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801c26c:	69fb      	ldr	r3, [r7, #28]
 801c26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801c272:	69fb      	ldr	r3, [r7, #28]
 801c274:	22a5      	movs	r2, #165	; 0xa5
 801c276:	2102      	movs	r1, #2
 801c278:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801c27a:	683c      	ldr	r4, [r7, #0]
 801c27c:	687a      	ldr	r2, [r7, #4]
 801c27e:	68b9      	ldr	r1, [r7, #8]
 801c280:	68f8      	ldr	r0, [r7, #12]
 801c282:	2300      	movs	r3, #0
 801c284:	9303      	str	r3, [sp, #12]
 801c286:	69fb      	ldr	r3, [r7, #28]
 801c288:	9302      	str	r3, [sp, #8]
 801c28a:	2318      	movs	r3, #24
 801c28c:	18fb      	adds	r3, r7, r3
 801c28e:	9301      	str	r3, [sp, #4]
 801c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c292:	9300      	str	r3, [sp, #0]
 801c294:	0023      	movs	r3, r4
 801c296:	f000 f859 	bl	801c34c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801c29a:	69fb      	ldr	r3, [r7, #28]
 801c29c:	0018      	movs	r0, r3
 801c29e:	f000 f8f5 	bl	801c48c <prvAddNewTaskToReadyList>
 801c2a2:	e001      	b.n	801c2a8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 801c2a4:	2300      	movs	r3, #0
 801c2a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801c2a8:	69bb      	ldr	r3, [r7, #24]
	}
 801c2aa:	0018      	movs	r0, r3
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	b009      	add	sp, #36	; 0x24
 801c2b0:	bd90      	pop	{r4, r7, pc}

0801c2b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801c2b2:	b590      	push	{r4, r7, lr}
 801c2b4:	b08d      	sub	sp, #52	; 0x34
 801c2b6:	af04      	add	r7, sp, #16
 801c2b8:	60f8      	str	r0, [r7, #12]
 801c2ba:	60b9      	str	r1, [r7, #8]
 801c2bc:	603b      	str	r3, [r7, #0]
 801c2be:	1dbb      	adds	r3, r7, #6
 801c2c0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801c2c2:	1dbb      	adds	r3, r7, #6
 801c2c4:	881b      	ldrh	r3, [r3, #0]
 801c2c6:	009b      	lsls	r3, r3, #2
 801c2c8:	0018      	movs	r0, r3
 801c2ca:	f001 fbc1 	bl	801da50 <pvPortMalloc>
 801c2ce:	0003      	movs	r3, r0
 801c2d0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 801c2d2:	697b      	ldr	r3, [r7, #20]
 801c2d4:	2b00      	cmp	r3, #0
 801c2d6:	d010      	beq.n	801c2fa <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801c2d8:	20a8      	movs	r0, #168	; 0xa8
 801c2da:	f001 fbb9 	bl	801da50 <pvPortMalloc>
 801c2de:	0003      	movs	r3, r0
 801c2e0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 801c2e2:	69fb      	ldr	r3, [r7, #28]
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d003      	beq.n	801c2f0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801c2e8:	69fb      	ldr	r3, [r7, #28]
 801c2ea:	697a      	ldr	r2, [r7, #20]
 801c2ec:	631a      	str	r2, [r3, #48]	; 0x30
 801c2ee:	e006      	b.n	801c2fe <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801c2f0:	697b      	ldr	r3, [r7, #20]
 801c2f2:	0018      	movs	r0, r3
 801c2f4:	f001 fc58 	bl	801dba8 <vPortFree>
 801c2f8:	e001      	b.n	801c2fe <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801c2fe:	69fb      	ldr	r3, [r7, #28]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d01a      	beq.n	801c33a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801c304:	69fb      	ldr	r3, [r7, #28]
 801c306:	22a5      	movs	r2, #165	; 0xa5
 801c308:	2100      	movs	r1, #0
 801c30a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801c30c:	1dbb      	adds	r3, r7, #6
 801c30e:	881a      	ldrh	r2, [r3, #0]
 801c310:	683c      	ldr	r4, [r7, #0]
 801c312:	68b9      	ldr	r1, [r7, #8]
 801c314:	68f8      	ldr	r0, [r7, #12]
 801c316:	2300      	movs	r3, #0
 801c318:	9303      	str	r3, [sp, #12]
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	9302      	str	r3, [sp, #8]
 801c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c320:	9301      	str	r3, [sp, #4]
 801c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c324:	9300      	str	r3, [sp, #0]
 801c326:	0023      	movs	r3, r4
 801c328:	f000 f810 	bl	801c34c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801c32c:	69fb      	ldr	r3, [r7, #28]
 801c32e:	0018      	movs	r0, r3
 801c330:	f000 f8ac 	bl	801c48c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801c334:	2301      	movs	r3, #1
 801c336:	61bb      	str	r3, [r7, #24]
 801c338:	e002      	b.n	801c340 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801c33a:	2301      	movs	r3, #1
 801c33c:	425b      	negs	r3, r3
 801c33e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801c340:	69bb      	ldr	r3, [r7, #24]
	}
 801c342:	0018      	movs	r0, r3
 801c344:	46bd      	mov	sp, r7
 801c346:	b009      	add	sp, #36	; 0x24
 801c348:	bd90      	pop	{r4, r7, pc}
	...

0801c34c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	b086      	sub	sp, #24
 801c350:	af00      	add	r7, sp, #0
 801c352:	60f8      	str	r0, [r7, #12]
 801c354:	60b9      	str	r1, [r7, #8]
 801c356:	607a      	str	r2, [r7, #4]
 801c358:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c35c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	009b      	lsls	r3, r3, #2
 801c362:	001a      	movs	r2, r3
 801c364:	21a5      	movs	r1, #165	; 0xa5
 801c366:	f00b fb7b 	bl	8027a60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c36c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	4942      	ldr	r1, [pc, #264]	; (801c47c <prvInitialiseNewTask+0x130>)
 801c372:	468c      	mov	ip, r1
 801c374:	4463      	add	r3, ip
 801c376:	009b      	lsls	r3, r3, #2
 801c378:	18d3      	adds	r3, r2, r3
 801c37a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801c37c:	693b      	ldr	r3, [r7, #16]
 801c37e:	2207      	movs	r2, #7
 801c380:	4393      	bics	r3, r2
 801c382:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801c384:	693b      	ldr	r3, [r7, #16]
 801c386:	2207      	movs	r2, #7
 801c388:	4013      	ands	r3, r2
 801c38a:	d001      	beq.n	801c390 <prvInitialiseNewTask+0x44>
 801c38c:	b672      	cpsid	i
 801c38e:	e7fe      	b.n	801c38e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801c390:	68bb      	ldr	r3, [r7, #8]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d020      	beq.n	801c3d8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801c396:	2300      	movs	r3, #0
 801c398:	617b      	str	r3, [r7, #20]
 801c39a:	e013      	b.n	801c3c4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801c39c:	68ba      	ldr	r2, [r7, #8]
 801c39e:	697b      	ldr	r3, [r7, #20]
 801c3a0:	18d3      	adds	r3, r2, r3
 801c3a2:	7818      	ldrb	r0, [r3, #0]
 801c3a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c3a6:	2134      	movs	r1, #52	; 0x34
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	18d3      	adds	r3, r2, r3
 801c3ac:	185b      	adds	r3, r3, r1
 801c3ae:	1c02      	adds	r2, r0, #0
 801c3b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801c3b2:	68ba      	ldr	r2, [r7, #8]
 801c3b4:	697b      	ldr	r3, [r7, #20]
 801c3b6:	18d3      	adds	r3, r2, r3
 801c3b8:	781b      	ldrb	r3, [r3, #0]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d006      	beq.n	801c3cc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801c3be:	697b      	ldr	r3, [r7, #20]
 801c3c0:	3301      	adds	r3, #1
 801c3c2:	617b      	str	r3, [r7, #20]
 801c3c4:	697b      	ldr	r3, [r7, #20]
 801c3c6:	2b0f      	cmp	r3, #15
 801c3c8:	d9e8      	bls.n	801c39c <prvInitialiseNewTask+0x50>
 801c3ca:	e000      	b.n	801c3ce <prvInitialiseNewTask+0x82>
			{
				break;
 801c3cc:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3d0:	2243      	movs	r2, #67	; 0x43
 801c3d2:	2100      	movs	r1, #0
 801c3d4:	5499      	strb	r1, [r3, r2]
 801c3d6:	e003      	b.n	801c3e0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3da:	2234      	movs	r2, #52	; 0x34
 801c3dc:	2100      	movs	r1, #0
 801c3de:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801c3e0:	6a3b      	ldr	r3, [r7, #32]
 801c3e2:	2b37      	cmp	r3, #55	; 0x37
 801c3e4:	d901      	bls.n	801c3ea <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801c3e6:	2337      	movs	r3, #55	; 0x37
 801c3e8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3ec:	6a3a      	ldr	r2, [r7, #32]
 801c3ee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3f2:	6a3a      	ldr	r2, [r7, #32]
 801c3f4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3fe:	3304      	adds	r3, #4
 801c400:	0018      	movs	r0, r3
 801c402:	f7ff f9c5 	bl	801b790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c408:	3318      	adds	r3, #24
 801c40a:	0018      	movs	r0, r3
 801c40c:	f7ff f9c0 	bl	801b790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801c410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c414:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801c416:	6a3b      	ldr	r3, [r7, #32]
 801c418:	2238      	movs	r2, #56	; 0x38
 801c41a:	1ad2      	subs	r2, r2, r3
 801c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c41e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c424:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c428:	22a0      	movs	r2, #160	; 0xa0
 801c42a:	2100      	movs	r1, #0
 801c42c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c430:	22a4      	movs	r2, #164	; 0xa4
 801c432:	2100      	movs	r1, #0
 801c434:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c438:	3354      	adds	r3, #84	; 0x54
 801c43a:	224c      	movs	r2, #76	; 0x4c
 801c43c:	2100      	movs	r1, #0
 801c43e:	0018      	movs	r0, r3
 801c440:	f00b fb0e 	bl	8027a60 <memset>
 801c444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c446:	4a0e      	ldr	r2, [pc, #56]	; (801c480 <prvInitialiseNewTask+0x134>)
 801c448:	659a      	str	r2, [r3, #88]	; 0x58
 801c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c44c:	4a0d      	ldr	r2, [pc, #52]	; (801c484 <prvInitialiseNewTask+0x138>)
 801c44e:	65da      	str	r2, [r3, #92]	; 0x5c
 801c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c452:	4a0d      	ldr	r2, [pc, #52]	; (801c488 <prvInitialiseNewTask+0x13c>)
 801c454:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801c456:	683a      	ldr	r2, [r7, #0]
 801c458:	68f9      	ldr	r1, [r7, #12]
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	0018      	movs	r0, r3
 801c45e:	f001 f9c1 	bl	801d7e4 <pxPortInitialiseStack>
 801c462:	0002      	movs	r2, r0
 801c464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c466:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c46a:	2b00      	cmp	r3, #0
 801c46c:	d002      	beq.n	801c474 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c474:	46c0      	nop			; (mov r8, r8)
 801c476:	46bd      	mov	sp, r7
 801c478:	b006      	add	sp, #24
 801c47a:	bd80      	pop	{r7, pc}
 801c47c:	3fffffff 	.word	0x3fffffff
 801c480:	2000550c 	.word	0x2000550c
 801c484:	20005574 	.word	0x20005574
 801c488:	200055dc 	.word	0x200055dc

0801c48c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801c494:	f001 fa44 	bl	801d920 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801c498:	4b2a      	ldr	r3, [pc, #168]	; (801c544 <prvAddNewTaskToReadyList+0xb8>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	1c5a      	adds	r2, r3, #1
 801c49e:	4b29      	ldr	r3, [pc, #164]	; (801c544 <prvAddNewTaskToReadyList+0xb8>)
 801c4a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801c4a2:	4b29      	ldr	r3, [pc, #164]	; (801c548 <prvAddNewTaskToReadyList+0xbc>)
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d109      	bne.n	801c4be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801c4aa:	4b27      	ldr	r3, [pc, #156]	; (801c548 <prvAddNewTaskToReadyList+0xbc>)
 801c4ac:	687a      	ldr	r2, [r7, #4]
 801c4ae:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801c4b0:	4b24      	ldr	r3, [pc, #144]	; (801c544 <prvAddNewTaskToReadyList+0xb8>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	2b01      	cmp	r3, #1
 801c4b6:	d110      	bne.n	801c4da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801c4b8:	f000 fcea 	bl	801ce90 <prvInitialiseTaskLists>
 801c4bc:	e00d      	b.n	801c4da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801c4be:	4b23      	ldr	r3, [pc, #140]	; (801c54c <prvAddNewTaskToReadyList+0xc0>)
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d109      	bne.n	801c4da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801c4c6:	4b20      	ldr	r3, [pc, #128]	; (801c548 <prvAddNewTaskToReadyList+0xbc>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4d0:	429a      	cmp	r2, r3
 801c4d2:	d802      	bhi.n	801c4da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801c4d4:	4b1c      	ldr	r3, [pc, #112]	; (801c548 <prvAddNewTaskToReadyList+0xbc>)
 801c4d6:	687a      	ldr	r2, [r7, #4]
 801c4d8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801c4da:	4b1d      	ldr	r3, [pc, #116]	; (801c550 <prvAddNewTaskToReadyList+0xc4>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	1c5a      	adds	r2, r3, #1
 801c4e0:	4b1b      	ldr	r3, [pc, #108]	; (801c550 <prvAddNewTaskToReadyList+0xc4>)
 801c4e2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801c4e4:	4b1a      	ldr	r3, [pc, #104]	; (801c550 <prvAddNewTaskToReadyList+0xc4>)
 801c4e6:	681a      	ldr	r2, [r3, #0]
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c4f0:	4b18      	ldr	r3, [pc, #96]	; (801c554 <prvAddNewTaskToReadyList+0xc8>)
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	429a      	cmp	r2, r3
 801c4f6:	d903      	bls.n	801c500 <prvAddNewTaskToReadyList+0x74>
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c4fc:	4b15      	ldr	r3, [pc, #84]	; (801c554 <prvAddNewTaskToReadyList+0xc8>)
 801c4fe:	601a      	str	r2, [r3, #0]
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c504:	0013      	movs	r3, r2
 801c506:	009b      	lsls	r3, r3, #2
 801c508:	189b      	adds	r3, r3, r2
 801c50a:	009b      	lsls	r3, r3, #2
 801c50c:	4a12      	ldr	r2, [pc, #72]	; (801c558 <prvAddNewTaskToReadyList+0xcc>)
 801c50e:	189a      	adds	r2, r3, r2
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	3304      	adds	r3, #4
 801c514:	0019      	movs	r1, r3
 801c516:	0010      	movs	r0, r2
 801c518:	f7ff f945 	bl	801b7a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801c51c:	f001 fa12 	bl	801d944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801c520:	4b0a      	ldr	r3, [pc, #40]	; (801c54c <prvAddNewTaskToReadyList+0xc0>)
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d008      	beq.n	801c53a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801c528:	4b07      	ldr	r3, [pc, #28]	; (801c548 <prvAddNewTaskToReadyList+0xbc>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c532:	429a      	cmp	r2, r3
 801c534:	d201      	bcs.n	801c53a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801c536:	f001 f9e3 	bl	801d900 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c53a:	46c0      	nop			; (mov r8, r8)
 801c53c:	46bd      	mov	sp, r7
 801c53e:	b002      	add	sp, #8
 801c540:	bd80      	pop	{r7, pc}
 801c542:	46c0      	nop			; (mov r8, r8)
 801c544:	2000171c 	.word	0x2000171c
 801c548:	20001248 	.word	0x20001248
 801c54c:	20001728 	.word	0x20001728
 801c550:	20001738 	.word	0x20001738
 801c554:	20001724 	.word	0x20001724
 801c558:	2000124c 	.word	0x2000124c

0801c55c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b084      	sub	sp, #16
 801c560:	af00      	add	r7, sp, #0
 801c562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801c564:	2300      	movs	r3, #0
 801c566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d010      	beq.n	801c590 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801c56e:	4b0d      	ldr	r3, [pc, #52]	; (801c5a4 <vTaskDelay+0x48>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	2b00      	cmp	r3, #0
 801c574:	d001      	beq.n	801c57a <vTaskDelay+0x1e>
 801c576:	b672      	cpsid	i
 801c578:	e7fe      	b.n	801c578 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 801c57a:	f000 f9bb 	bl	801c8f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	2100      	movs	r1, #0
 801c582:	0018      	movs	r0, r3
 801c584:	f000 fdc8 	bl	801d118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801c588:	f000 f9c0 	bl	801c90c <xTaskResumeAll>
 801c58c:	0003      	movs	r3, r0
 801c58e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d101      	bne.n	801c59a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 801c596:	f001 f9b3 	bl	801d900 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c59a:	46c0      	nop			; (mov r8, r8)
 801c59c:	46bd      	mov	sp, r7
 801c59e:	b004      	add	sp, #16
 801c5a0:	bd80      	pop	{r7, pc}
 801c5a2:	46c0      	nop			; (mov r8, r8)
 801c5a4:	20001744 	.word	0x20001744

0801c5a8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b088      	sub	sp, #32
 801c5ac:	af00      	add	r7, sp, #0
 801c5ae:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801c5b4:	69bb      	ldr	r3, [r7, #24]
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d101      	bne.n	801c5be <eTaskGetState+0x16>
 801c5ba:	b672      	cpsid	i
 801c5bc:	e7fe      	b.n	801c5bc <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 801c5be:	4b2c      	ldr	r3, [pc, #176]	; (801c670 <eTaskGetState+0xc8>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	69ba      	ldr	r2, [r7, #24]
 801c5c4:	429a      	cmp	r2, r3
 801c5c6:	d104      	bne.n	801c5d2 <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801c5c8:	231f      	movs	r3, #31
 801c5ca:	18fb      	adds	r3, r7, r3
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	701a      	strb	r2, [r3, #0]
 801c5d0:	e046      	b.n	801c660 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 801c5d2:	f001 f9a5 	bl	801d920 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801c5d6:	69bb      	ldr	r3, [r7, #24]
 801c5d8:	695b      	ldr	r3, [r3, #20]
 801c5da:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801c5dc:	4b25      	ldr	r3, [pc, #148]	; (801c674 <eTaskGetState+0xcc>)
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801c5e2:	4b25      	ldr	r3, [pc, #148]	; (801c678 <eTaskGetState+0xd0>)
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801c5e8:	f001 f9ac 	bl	801d944 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801c5ec:	697a      	ldr	r2, [r7, #20]
 801c5ee:	693b      	ldr	r3, [r7, #16]
 801c5f0:	429a      	cmp	r2, r3
 801c5f2:	d003      	beq.n	801c5fc <eTaskGetState+0x54>
 801c5f4:	697a      	ldr	r2, [r7, #20]
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	d104      	bne.n	801c606 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801c5fc:	231f      	movs	r3, #31
 801c5fe:	18fb      	adds	r3, r7, r3
 801c600:	2202      	movs	r2, #2
 801c602:	701a      	strb	r2, [r3, #0]
 801c604:	e02c      	b.n	801c660 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801c606:	697a      	ldr	r2, [r7, #20]
 801c608:	4b1c      	ldr	r3, [pc, #112]	; (801c67c <eTaskGetState+0xd4>)
 801c60a:	429a      	cmp	r2, r3
 801c60c:	d118      	bne.n	801c640 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801c60e:	69bb      	ldr	r3, [r7, #24]
 801c610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c612:	2b00      	cmp	r3, #0
 801c614:	d10f      	bne.n	801c636 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801c616:	69bb      	ldr	r3, [r7, #24]
 801c618:	22a4      	movs	r2, #164	; 0xa4
 801c61a:	5c9b      	ldrb	r3, [r3, r2]
 801c61c:	b2db      	uxtb	r3, r3
 801c61e:	2b01      	cmp	r3, #1
 801c620:	d104      	bne.n	801c62c <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 801c622:	231f      	movs	r3, #31
 801c624:	18fb      	adds	r3, r7, r3
 801c626:	2202      	movs	r2, #2
 801c628:	701a      	strb	r2, [r3, #0]
 801c62a:	e019      	b.n	801c660 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 801c62c:	231f      	movs	r3, #31
 801c62e:	18fb      	adds	r3, r7, r3
 801c630:	2203      	movs	r2, #3
 801c632:	701a      	strb	r2, [r3, #0]
 801c634:	e014      	b.n	801c660 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801c636:	231f      	movs	r3, #31
 801c638:	18fb      	adds	r3, r7, r3
 801c63a:	2202      	movs	r2, #2
 801c63c:	701a      	strb	r2, [r3, #0]
 801c63e:	e00f      	b.n	801c660 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801c640:	697a      	ldr	r2, [r7, #20]
 801c642:	4b0f      	ldr	r3, [pc, #60]	; (801c680 <eTaskGetState+0xd8>)
 801c644:	429a      	cmp	r2, r3
 801c646:	d002      	beq.n	801c64e <eTaskGetState+0xa6>
 801c648:	697b      	ldr	r3, [r7, #20]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d104      	bne.n	801c658 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801c64e:	231f      	movs	r3, #31
 801c650:	18fb      	adds	r3, r7, r3
 801c652:	2204      	movs	r2, #4
 801c654:	701a      	strb	r2, [r3, #0]
 801c656:	e003      	b.n	801c660 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801c658:	231f      	movs	r3, #31
 801c65a:	18fb      	adds	r3, r7, r3
 801c65c:	2201      	movs	r2, #1
 801c65e:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 801c660:	231f      	movs	r3, #31
 801c662:	18fb      	adds	r3, r7, r3
 801c664:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801c666:	0018      	movs	r0, r3
 801c668:	46bd      	mov	sp, r7
 801c66a:	b008      	add	sp, #32
 801c66c:	bd80      	pop	{r7, pc}
 801c66e:	46c0      	nop			; (mov r8, r8)
 801c670:	20001248 	.word	0x20001248
 801c674:	200016d4 	.word	0x200016d4
 801c678:	200016d8 	.word	0x200016d8
 801c67c:	20001708 	.word	0x20001708
 801c680:	200016f0 	.word	0x200016f0

0801c684 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801c684:	b580      	push	{r7, lr}
 801c686:	b084      	sub	sp, #16
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801c68c:	f001 f948 	bl	801d920 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	2b00      	cmp	r3, #0
 801c694:	d102      	bne.n	801c69c <vTaskSuspend+0x18>
 801c696:	4b29      	ldr	r3, [pc, #164]	; (801c73c <vTaskSuspend+0xb8>)
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	e000      	b.n	801c69e <vTaskSuspend+0x1a>
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801c6a0:	68fb      	ldr	r3, [r7, #12]
 801c6a2:	3304      	adds	r3, #4
 801c6a4:	0018      	movs	r0, r3
 801c6a6:	f7ff f8d6 	bl	801b856 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d004      	beq.n	801c6bc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	3318      	adds	r3, #24
 801c6b6:	0018      	movs	r0, r3
 801c6b8:	f7ff f8cd 	bl	801b856 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	1d1a      	adds	r2, r3, #4
 801c6c0:	4b1f      	ldr	r3, [pc, #124]	; (801c740 <vTaskSuspend+0xbc>)
 801c6c2:	0011      	movs	r1, r2
 801c6c4:	0018      	movs	r0, r3
 801c6c6:	f7ff f86e 	bl	801b7a6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	22a4      	movs	r2, #164	; 0xa4
 801c6ce:	5c9b      	ldrb	r3, [r3, r2]
 801c6d0:	b2db      	uxtb	r3, r3
 801c6d2:	2b01      	cmp	r3, #1
 801c6d4:	d103      	bne.n	801c6de <vTaskSuspend+0x5a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801c6d6:	68fb      	ldr	r3, [r7, #12]
 801c6d8:	22a4      	movs	r2, #164	; 0xa4
 801c6da:	2100      	movs	r1, #0
 801c6dc:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801c6de:	f001 f931 	bl	801d944 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801c6e2:	4b18      	ldr	r3, [pc, #96]	; (801c744 <vTaskSuspend+0xc0>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d005      	beq.n	801c6f6 <vTaskSuspend+0x72>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801c6ea:	f001 f919 	bl	801d920 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801c6ee:	f000 fc6f 	bl	801cfd0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801c6f2:	f001 f927 	bl	801d944 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801c6f6:	4b11      	ldr	r3, [pc, #68]	; (801c73c <vTaskSuspend+0xb8>)
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	68fa      	ldr	r2, [r7, #12]
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	d118      	bne.n	801c732 <vTaskSuspend+0xae>
		{
			if( xSchedulerRunning != pdFALSE )
 801c700:	4b10      	ldr	r3, [pc, #64]	; (801c744 <vTaskSuspend+0xc0>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d008      	beq.n	801c71a <vTaskSuspend+0x96>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801c708:	4b0f      	ldr	r3, [pc, #60]	; (801c748 <vTaskSuspend+0xc4>)
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d001      	beq.n	801c714 <vTaskSuspend+0x90>
 801c710:	b672      	cpsid	i
 801c712:	e7fe      	b.n	801c712 <vTaskSuspend+0x8e>
				portYIELD_WITHIN_API();
 801c714:	f001 f8f4 	bl	801d900 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c718:	e00b      	b.n	801c732 <vTaskSuspend+0xae>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801c71a:	4b09      	ldr	r3, [pc, #36]	; (801c740 <vTaskSuspend+0xbc>)
 801c71c:	681a      	ldr	r2, [r3, #0]
 801c71e:	4b0b      	ldr	r3, [pc, #44]	; (801c74c <vTaskSuspend+0xc8>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	429a      	cmp	r2, r3
 801c724:	d103      	bne.n	801c72e <vTaskSuspend+0xaa>
					pxCurrentTCB = NULL;
 801c726:	4b05      	ldr	r3, [pc, #20]	; (801c73c <vTaskSuspend+0xb8>)
 801c728:	2200      	movs	r2, #0
 801c72a:	601a      	str	r2, [r3, #0]
	}
 801c72c:	e001      	b.n	801c732 <vTaskSuspend+0xae>
					vTaskSwitchContext();
 801c72e:	f000 fa37 	bl	801cba0 <vTaskSwitchContext>
	}
 801c732:	46c0      	nop			; (mov r8, r8)
 801c734:	46bd      	mov	sp, r7
 801c736:	b004      	add	sp, #16
 801c738:	bd80      	pop	{r7, pc}
 801c73a:	46c0      	nop			; (mov r8, r8)
 801c73c:	20001248 	.word	0x20001248
 801c740:	20001708 	.word	0x20001708
 801c744:	20001728 	.word	0x20001728
 801c748:	20001744 	.word	0x20001744
 801c74c:	2000171c 	.word	0x2000171c

0801c750 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801c750:	b580      	push	{r7, lr}
 801c752:	b084      	sub	sp, #16
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801c758:	2300      	movs	r3, #0
 801c75a:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	2b00      	cmp	r3, #0
 801c764:	d101      	bne.n	801c76a <prvTaskIsTaskSuspended+0x1a>
 801c766:	b672      	cpsid	i
 801c768:	e7fe      	b.n	801c768 <prvTaskIsTaskSuspended+0x18>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801c76a:	68bb      	ldr	r3, [r7, #8]
 801c76c:	695a      	ldr	r2, [r3, #20]
 801c76e:	4b09      	ldr	r3, [pc, #36]	; (801c794 <prvTaskIsTaskSuspended+0x44>)
 801c770:	429a      	cmp	r2, r3
 801c772:	d10a      	bne.n	801c78a <prvTaskIsTaskSuspended+0x3a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801c774:	68bb      	ldr	r3, [r7, #8]
 801c776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c778:	4b07      	ldr	r3, [pc, #28]	; (801c798 <prvTaskIsTaskSuspended+0x48>)
 801c77a:	429a      	cmp	r2, r3
 801c77c:	d005      	beq.n	801c78a <prvTaskIsTaskSuspended+0x3a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801c77e:	68bb      	ldr	r3, [r7, #8]
 801c780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c782:	2b00      	cmp	r3, #0
 801c784:	d101      	bne.n	801c78a <prvTaskIsTaskSuspended+0x3a>
				{
					xReturn = pdTRUE;
 801c786:	2301      	movs	r3, #1
 801c788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801c78a:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801c78c:	0018      	movs	r0, r3
 801c78e:	46bd      	mov	sp, r7
 801c790:	b004      	add	sp, #16
 801c792:	bd80      	pop	{r7, pc}
 801c794:	20001708 	.word	0x20001708
 801c798:	200016dc 	.word	0x200016dc

0801c79c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b084      	sub	sp, #16
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d101      	bne.n	801c7b2 <vTaskResume+0x16>
 801c7ae:	b672      	cpsid	i
 801c7b0:	e7fe      	b.n	801c7b0 <vTaskResume+0x14>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801c7b2:	4b1e      	ldr	r3, [pc, #120]	; (801c82c <vTaskResume+0x90>)
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	68fa      	ldr	r2, [r7, #12]
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	d032      	beq.n	801c822 <vTaskResume+0x86>
 801c7bc:	68fb      	ldr	r3, [r7, #12]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d02f      	beq.n	801c822 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
 801c7c2:	f001 f8ad 	bl	801d920 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	0018      	movs	r0, r3
 801c7ca:	f7ff ffc1 	bl	801c750 <prvTaskIsTaskSuspended>
 801c7ce:	1e03      	subs	r3, r0, #0
 801c7d0:	d025      	beq.n	801c81e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801c7d2:	68fb      	ldr	r3, [r7, #12]
 801c7d4:	3304      	adds	r3, #4
 801c7d6:	0018      	movs	r0, r3
 801c7d8:	f7ff f83d 	bl	801b856 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801c7dc:	68fb      	ldr	r3, [r7, #12]
 801c7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c7e0:	4b13      	ldr	r3, [pc, #76]	; (801c830 <vTaskResume+0x94>)
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d903      	bls.n	801c7f0 <vTaskResume+0x54>
 801c7e8:	68fb      	ldr	r3, [r7, #12]
 801c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c7ec:	4b10      	ldr	r3, [pc, #64]	; (801c830 <vTaskResume+0x94>)
 801c7ee:	601a      	str	r2, [r3, #0]
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c7f4:	0013      	movs	r3, r2
 801c7f6:	009b      	lsls	r3, r3, #2
 801c7f8:	189b      	adds	r3, r3, r2
 801c7fa:	009b      	lsls	r3, r3, #2
 801c7fc:	4a0d      	ldr	r2, [pc, #52]	; (801c834 <vTaskResume+0x98>)
 801c7fe:	189a      	adds	r2, r3, r2
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	3304      	adds	r3, #4
 801c804:	0019      	movs	r1, r3
 801c806:	0010      	movs	r0, r2
 801c808:	f7fe ffcd 	bl	801b7a6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c810:	4b06      	ldr	r3, [pc, #24]	; (801c82c <vTaskResume+0x90>)
 801c812:	681b      	ldr	r3, [r3, #0]
 801c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c816:	429a      	cmp	r2, r3
 801c818:	d301      	bcc.n	801c81e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801c81a:	f001 f871 	bl	801d900 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801c81e:	f001 f891 	bl	801d944 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801c822:	46c0      	nop			; (mov r8, r8)
 801c824:	46bd      	mov	sp, r7
 801c826:	b004      	add	sp, #16
 801c828:	bd80      	pop	{r7, pc}
 801c82a:	46c0      	nop			; (mov r8, r8)
 801c82c:	20001248 	.word	0x20001248
 801c830:	20001724 	.word	0x20001724
 801c834:	2000124c 	.word	0x2000124c

0801c838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801c838:	b590      	push	{r4, r7, lr}
 801c83a:	b089      	sub	sp, #36	; 0x24
 801c83c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801c83e:	2300      	movs	r3, #0
 801c840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801c842:	2300      	movs	r3, #0
 801c844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801c846:	003a      	movs	r2, r7
 801c848:	1d39      	adds	r1, r7, #4
 801c84a:	2308      	movs	r3, #8
 801c84c:	18fb      	adds	r3, r7, r3
 801c84e:	0018      	movs	r0, r3
 801c850:	f7fe ff50 	bl	801b6f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801c854:	683c      	ldr	r4, [r7, #0]
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	68ba      	ldr	r2, [r7, #8]
 801c85a:	491e      	ldr	r1, [pc, #120]	; (801c8d4 <vTaskStartScheduler+0x9c>)
 801c85c:	481e      	ldr	r0, [pc, #120]	; (801c8d8 <vTaskStartScheduler+0xa0>)
 801c85e:	9202      	str	r2, [sp, #8]
 801c860:	9301      	str	r3, [sp, #4]
 801c862:	2300      	movs	r3, #0
 801c864:	9300      	str	r3, [sp, #0]
 801c866:	2300      	movs	r3, #0
 801c868:	0022      	movs	r2, r4
 801c86a:	f7ff fcde 	bl	801c22a <xTaskCreateStatic>
 801c86e:	0002      	movs	r2, r0
 801c870:	4b1a      	ldr	r3, [pc, #104]	; (801c8dc <vTaskStartScheduler+0xa4>)
 801c872:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801c874:	4b19      	ldr	r3, [pc, #100]	; (801c8dc <vTaskStartScheduler+0xa4>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d002      	beq.n	801c882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801c87c:	2301      	movs	r3, #1
 801c87e:	60fb      	str	r3, [r7, #12]
 801c880:	e001      	b.n	801c886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801c882:	2300      	movs	r3, #0
 801c884:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	2b01      	cmp	r3, #1
 801c88a:	d103      	bne.n	801c894 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 801c88c:	f000 fc98 	bl	801d1c0 <xTimerCreateTimerTask>
 801c890:	0003      	movs	r3, r0
 801c892:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	2b01      	cmp	r3, #1
 801c898:	d113      	bne.n	801c8c2 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 801c89a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801c89c:	4b10      	ldr	r3, [pc, #64]	; (801c8e0 <vTaskStartScheduler+0xa8>)
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	3354      	adds	r3, #84	; 0x54
 801c8a2:	001a      	movs	r2, r3
 801c8a4:	4b0f      	ldr	r3, [pc, #60]	; (801c8e4 <vTaskStartScheduler+0xac>)
 801c8a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801c8a8:	4b0f      	ldr	r3, [pc, #60]	; (801c8e8 <vTaskStartScheduler+0xb0>)
 801c8aa:	2201      	movs	r2, #1
 801c8ac:	4252      	negs	r2, r2
 801c8ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801c8b0:	4b0e      	ldr	r3, [pc, #56]	; (801c8ec <vTaskStartScheduler+0xb4>)
 801c8b2:	2201      	movs	r2, #1
 801c8b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801c8b6:	4b0e      	ldr	r3, [pc, #56]	; (801c8f0 <vTaskStartScheduler+0xb8>)
 801c8b8:	2200      	movs	r2, #0
 801c8ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801c8bc:	f000 fffc 	bl	801d8b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801c8c0:	e004      	b.n	801c8cc <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	3301      	adds	r3, #1
 801c8c6:	d101      	bne.n	801c8cc <vTaskStartScheduler+0x94>
 801c8c8:	b672      	cpsid	i
 801c8ca:	e7fe      	b.n	801c8ca <vTaskStartScheduler+0x92>
}
 801c8cc:	46c0      	nop			; (mov r8, r8)
 801c8ce:	46bd      	mov	sp, r7
 801c8d0:	b005      	add	sp, #20
 801c8d2:	bd90      	pop	{r4, r7, pc}
 801c8d4:	0802a06c 	.word	0x0802a06c
 801c8d8:	0801ce71 	.word	0x0801ce71
 801c8dc:	20001740 	.word	0x20001740
 801c8e0:	20001248 	.word	0x20001248
 801c8e4:	20000488 	.word	0x20000488
 801c8e8:	2000173c 	.word	0x2000173c
 801c8ec:	20001728 	.word	0x20001728
 801c8f0:	20001720 	.word	0x20001720

0801c8f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801c8f4:	b580      	push	{r7, lr}
 801c8f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801c8f8:	4b03      	ldr	r3, [pc, #12]	; (801c908 <vTaskSuspendAll+0x14>)
 801c8fa:	681b      	ldr	r3, [r3, #0]
 801c8fc:	1c5a      	adds	r2, r3, #1
 801c8fe:	4b02      	ldr	r3, [pc, #8]	; (801c908 <vTaskSuspendAll+0x14>)
 801c900:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801c902:	46c0      	nop			; (mov r8, r8)
 801c904:	46bd      	mov	sp, r7
 801c906:	bd80      	pop	{r7, pc}
 801c908:	20001744 	.word	0x20001744

0801c90c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b084      	sub	sp, #16
 801c910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801c912:	2300      	movs	r3, #0
 801c914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801c916:	2300      	movs	r3, #0
 801c918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801c91a:	4b3a      	ldr	r3, [pc, #232]	; (801ca04 <xTaskResumeAll+0xf8>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d101      	bne.n	801c926 <xTaskResumeAll+0x1a>
 801c922:	b672      	cpsid	i
 801c924:	e7fe      	b.n	801c924 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801c926:	f000 fffb 	bl	801d920 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801c92a:	4b36      	ldr	r3, [pc, #216]	; (801ca04 <xTaskResumeAll+0xf8>)
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	1e5a      	subs	r2, r3, #1
 801c930:	4b34      	ldr	r3, [pc, #208]	; (801ca04 <xTaskResumeAll+0xf8>)
 801c932:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801c934:	4b33      	ldr	r3, [pc, #204]	; (801ca04 <xTaskResumeAll+0xf8>)
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d15b      	bne.n	801c9f4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801c93c:	4b32      	ldr	r3, [pc, #200]	; (801ca08 <xTaskResumeAll+0xfc>)
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	2b00      	cmp	r3, #0
 801c942:	d057      	beq.n	801c9f4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801c944:	e02f      	b.n	801c9a6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801c946:	4b31      	ldr	r3, [pc, #196]	; (801ca0c <xTaskResumeAll+0x100>)
 801c948:	68db      	ldr	r3, [r3, #12]
 801c94a:	68db      	ldr	r3, [r3, #12]
 801c94c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	3318      	adds	r3, #24
 801c952:	0018      	movs	r0, r3
 801c954:	f7fe ff7f 	bl	801b856 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	3304      	adds	r3, #4
 801c95c:	0018      	movs	r0, r3
 801c95e:	f7fe ff7a 	bl	801b856 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c966:	4b2a      	ldr	r3, [pc, #168]	; (801ca10 <xTaskResumeAll+0x104>)
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	429a      	cmp	r2, r3
 801c96c:	d903      	bls.n	801c976 <xTaskResumeAll+0x6a>
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c972:	4b27      	ldr	r3, [pc, #156]	; (801ca10 <xTaskResumeAll+0x104>)
 801c974:	601a      	str	r2, [r3, #0]
 801c976:	68fb      	ldr	r3, [r7, #12]
 801c978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c97a:	0013      	movs	r3, r2
 801c97c:	009b      	lsls	r3, r3, #2
 801c97e:	189b      	adds	r3, r3, r2
 801c980:	009b      	lsls	r3, r3, #2
 801c982:	4a24      	ldr	r2, [pc, #144]	; (801ca14 <xTaskResumeAll+0x108>)
 801c984:	189a      	adds	r2, r3, r2
 801c986:	68fb      	ldr	r3, [r7, #12]
 801c988:	3304      	adds	r3, #4
 801c98a:	0019      	movs	r1, r3
 801c98c:	0010      	movs	r0, r2
 801c98e:	f7fe ff0a 	bl	801b7a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c996:	4b20      	ldr	r3, [pc, #128]	; (801ca18 <xTaskResumeAll+0x10c>)
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c99c:	429a      	cmp	r2, r3
 801c99e:	d302      	bcc.n	801c9a6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 801c9a0:	4b1e      	ldr	r3, [pc, #120]	; (801ca1c <xTaskResumeAll+0x110>)
 801c9a2:	2201      	movs	r2, #1
 801c9a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801c9a6:	4b19      	ldr	r3, [pc, #100]	; (801ca0c <xTaskResumeAll+0x100>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d1cb      	bne.n	801c946 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d001      	beq.n	801c9b8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801c9b4:	f000 fb0c 	bl	801cfd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801c9b8:	4b19      	ldr	r3, [pc, #100]	; (801ca20 <xTaskResumeAll+0x114>)
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d00f      	beq.n	801c9e4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801c9c4:	f000 f83c 	bl	801ca40 <xTaskIncrementTick>
 801c9c8:	1e03      	subs	r3, r0, #0
 801c9ca:	d002      	beq.n	801c9d2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 801c9cc:	4b13      	ldr	r3, [pc, #76]	; (801ca1c <xTaskResumeAll+0x110>)
 801c9ce:	2201      	movs	r2, #1
 801c9d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801c9d2:	687b      	ldr	r3, [r7, #4]
 801c9d4:	3b01      	subs	r3, #1
 801c9d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d1f2      	bne.n	801c9c4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 801c9de:	4b10      	ldr	r3, [pc, #64]	; (801ca20 <xTaskResumeAll+0x114>)
 801c9e0:	2200      	movs	r2, #0
 801c9e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801c9e4:	4b0d      	ldr	r3, [pc, #52]	; (801ca1c <xTaskResumeAll+0x110>)
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	2b00      	cmp	r3, #0
 801c9ea:	d003      	beq.n	801c9f4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801c9ec:	2301      	movs	r3, #1
 801c9ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801c9f0:	f000 ff86 	bl	801d900 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c9f4:	f000 ffa6 	bl	801d944 <vPortExitCritical>

	return xAlreadyYielded;
 801c9f8:	68bb      	ldr	r3, [r7, #8]
}
 801c9fa:	0018      	movs	r0, r3
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	b004      	add	sp, #16
 801ca00:	bd80      	pop	{r7, pc}
 801ca02:	46c0      	nop			; (mov r8, r8)
 801ca04:	20001744 	.word	0x20001744
 801ca08:	2000171c 	.word	0x2000171c
 801ca0c:	200016dc 	.word	0x200016dc
 801ca10:	20001724 	.word	0x20001724
 801ca14:	2000124c 	.word	0x2000124c
 801ca18:	20001248 	.word	0x20001248
 801ca1c:	20001730 	.word	0x20001730
 801ca20:	2000172c 	.word	0x2000172c

0801ca24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b082      	sub	sp, #8
 801ca28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801ca2a:	4b04      	ldr	r3, [pc, #16]	; (801ca3c <xTaskGetTickCount+0x18>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801ca30:	687b      	ldr	r3, [r7, #4]
}
 801ca32:	0018      	movs	r0, r3
 801ca34:	46bd      	mov	sp, r7
 801ca36:	b002      	add	sp, #8
 801ca38:	bd80      	pop	{r7, pc}
 801ca3a:	46c0      	nop			; (mov r8, r8)
 801ca3c:	20001720 	.word	0x20001720

0801ca40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b086      	sub	sp, #24
 801ca44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801ca46:	2300      	movs	r3, #0
 801ca48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ca4a:	4b4a      	ldr	r3, [pc, #296]	; (801cb74 <xTaskIncrementTick+0x134>)
 801ca4c:	681b      	ldr	r3, [r3, #0]
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	d000      	beq.n	801ca54 <xTaskIncrementTick+0x14>
 801ca52:	e084      	b.n	801cb5e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801ca54:	4b48      	ldr	r3, [pc, #288]	; (801cb78 <xTaskIncrementTick+0x138>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	3301      	adds	r3, #1
 801ca5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801ca5c:	4b46      	ldr	r3, [pc, #280]	; (801cb78 <xTaskIncrementTick+0x138>)
 801ca5e:	693a      	ldr	r2, [r7, #16]
 801ca60:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801ca62:	693b      	ldr	r3, [r7, #16]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d117      	bne.n	801ca98 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 801ca68:	4b44      	ldr	r3, [pc, #272]	; (801cb7c <xTaskIncrementTick+0x13c>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d001      	beq.n	801ca76 <xTaskIncrementTick+0x36>
 801ca72:	b672      	cpsid	i
 801ca74:	e7fe      	b.n	801ca74 <xTaskIncrementTick+0x34>
 801ca76:	4b41      	ldr	r3, [pc, #260]	; (801cb7c <xTaskIncrementTick+0x13c>)
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	60fb      	str	r3, [r7, #12]
 801ca7c:	4b40      	ldr	r3, [pc, #256]	; (801cb80 <xTaskIncrementTick+0x140>)
 801ca7e:	681a      	ldr	r2, [r3, #0]
 801ca80:	4b3e      	ldr	r3, [pc, #248]	; (801cb7c <xTaskIncrementTick+0x13c>)
 801ca82:	601a      	str	r2, [r3, #0]
 801ca84:	4b3e      	ldr	r3, [pc, #248]	; (801cb80 <xTaskIncrementTick+0x140>)
 801ca86:	68fa      	ldr	r2, [r7, #12]
 801ca88:	601a      	str	r2, [r3, #0]
 801ca8a:	4b3e      	ldr	r3, [pc, #248]	; (801cb84 <xTaskIncrementTick+0x144>)
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	1c5a      	adds	r2, r3, #1
 801ca90:	4b3c      	ldr	r3, [pc, #240]	; (801cb84 <xTaskIncrementTick+0x144>)
 801ca92:	601a      	str	r2, [r3, #0]
 801ca94:	f000 fa9c 	bl	801cfd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ca98:	4b3b      	ldr	r3, [pc, #236]	; (801cb88 <xTaskIncrementTick+0x148>)
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	693a      	ldr	r2, [r7, #16]
 801ca9e:	429a      	cmp	r2, r3
 801caa0:	d349      	bcc.n	801cb36 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801caa2:	4b36      	ldr	r3, [pc, #216]	; (801cb7c <xTaskIncrementTick+0x13c>)
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d104      	bne.n	801cab6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801caac:	4b36      	ldr	r3, [pc, #216]	; (801cb88 <xTaskIncrementTick+0x148>)
 801caae:	2201      	movs	r2, #1
 801cab0:	4252      	negs	r2, r2
 801cab2:	601a      	str	r2, [r3, #0]
					break;
 801cab4:	e03f      	b.n	801cb36 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cab6:	4b31      	ldr	r3, [pc, #196]	; (801cb7c <xTaskIncrementTick+0x13c>)
 801cab8:	681b      	ldr	r3, [r3, #0]
 801caba:	68db      	ldr	r3, [r3, #12]
 801cabc:	68db      	ldr	r3, [r3, #12]
 801cabe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801cac0:	68bb      	ldr	r3, [r7, #8]
 801cac2:	685b      	ldr	r3, [r3, #4]
 801cac4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801cac6:	693a      	ldr	r2, [r7, #16]
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	429a      	cmp	r2, r3
 801cacc:	d203      	bcs.n	801cad6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801cace:	4b2e      	ldr	r3, [pc, #184]	; (801cb88 <xTaskIncrementTick+0x148>)
 801cad0:	687a      	ldr	r2, [r7, #4]
 801cad2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801cad4:	e02f      	b.n	801cb36 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801cad6:	68bb      	ldr	r3, [r7, #8]
 801cad8:	3304      	adds	r3, #4
 801cada:	0018      	movs	r0, r3
 801cadc:	f7fe febb 	bl	801b856 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801cae0:	68bb      	ldr	r3, [r7, #8]
 801cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d004      	beq.n	801caf2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801cae8:	68bb      	ldr	r3, [r7, #8]
 801caea:	3318      	adds	r3, #24
 801caec:	0018      	movs	r0, r3
 801caee:	f7fe feb2 	bl	801b856 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801caf2:	68bb      	ldr	r3, [r7, #8]
 801caf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801caf6:	4b25      	ldr	r3, [pc, #148]	; (801cb8c <xTaskIncrementTick+0x14c>)
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d903      	bls.n	801cb06 <xTaskIncrementTick+0xc6>
 801cafe:	68bb      	ldr	r3, [r7, #8]
 801cb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb02:	4b22      	ldr	r3, [pc, #136]	; (801cb8c <xTaskIncrementTick+0x14c>)
 801cb04:	601a      	str	r2, [r3, #0]
 801cb06:	68bb      	ldr	r3, [r7, #8]
 801cb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb0a:	0013      	movs	r3, r2
 801cb0c:	009b      	lsls	r3, r3, #2
 801cb0e:	189b      	adds	r3, r3, r2
 801cb10:	009b      	lsls	r3, r3, #2
 801cb12:	4a1f      	ldr	r2, [pc, #124]	; (801cb90 <xTaskIncrementTick+0x150>)
 801cb14:	189a      	adds	r2, r3, r2
 801cb16:	68bb      	ldr	r3, [r7, #8]
 801cb18:	3304      	adds	r3, #4
 801cb1a:	0019      	movs	r1, r3
 801cb1c:	0010      	movs	r0, r2
 801cb1e:	f7fe fe42 	bl	801b7a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801cb22:	68bb      	ldr	r3, [r7, #8]
 801cb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb26:	4b1b      	ldr	r3, [pc, #108]	; (801cb94 <xTaskIncrementTick+0x154>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb2c:	429a      	cmp	r2, r3
 801cb2e:	d3b8      	bcc.n	801caa2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 801cb30:	2301      	movs	r3, #1
 801cb32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801cb34:	e7b5      	b.n	801caa2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801cb36:	4b17      	ldr	r3, [pc, #92]	; (801cb94 <xTaskIncrementTick+0x154>)
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cb3c:	4914      	ldr	r1, [pc, #80]	; (801cb90 <xTaskIncrementTick+0x150>)
 801cb3e:	0013      	movs	r3, r2
 801cb40:	009b      	lsls	r3, r3, #2
 801cb42:	189b      	adds	r3, r3, r2
 801cb44:	009b      	lsls	r3, r3, #2
 801cb46:	585b      	ldr	r3, [r3, r1]
 801cb48:	2b01      	cmp	r3, #1
 801cb4a:	d901      	bls.n	801cb50 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 801cb4c:	2301      	movs	r3, #1
 801cb4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801cb50:	4b11      	ldr	r3, [pc, #68]	; (801cb98 <xTaskIncrementTick+0x158>)
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d007      	beq.n	801cb68 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 801cb58:	2301      	movs	r3, #1
 801cb5a:	617b      	str	r3, [r7, #20]
 801cb5c:	e004      	b.n	801cb68 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801cb5e:	4b0f      	ldr	r3, [pc, #60]	; (801cb9c <xTaskIncrementTick+0x15c>)
 801cb60:	681b      	ldr	r3, [r3, #0]
 801cb62:	1c5a      	adds	r2, r3, #1
 801cb64:	4b0d      	ldr	r3, [pc, #52]	; (801cb9c <xTaskIncrementTick+0x15c>)
 801cb66:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801cb68:	697b      	ldr	r3, [r7, #20]
}
 801cb6a:	0018      	movs	r0, r3
 801cb6c:	46bd      	mov	sp, r7
 801cb6e:	b006      	add	sp, #24
 801cb70:	bd80      	pop	{r7, pc}
 801cb72:	46c0      	nop			; (mov r8, r8)
 801cb74:	20001744 	.word	0x20001744
 801cb78:	20001720 	.word	0x20001720
 801cb7c:	200016d4 	.word	0x200016d4
 801cb80:	200016d8 	.word	0x200016d8
 801cb84:	20001734 	.word	0x20001734
 801cb88:	2000173c 	.word	0x2000173c
 801cb8c:	20001724 	.word	0x20001724
 801cb90:	2000124c 	.word	0x2000124c
 801cb94:	20001248 	.word	0x20001248
 801cb98:	20001730 	.word	0x20001730
 801cb9c:	2000172c 	.word	0x2000172c

0801cba0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b082      	sub	sp, #8
 801cba4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801cba6:	4b25      	ldr	r3, [pc, #148]	; (801cc3c <vTaskSwitchContext+0x9c>)
 801cba8:	681b      	ldr	r3, [r3, #0]
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	d003      	beq.n	801cbb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801cbae:	4b24      	ldr	r3, [pc, #144]	; (801cc40 <vTaskSwitchContext+0xa0>)
 801cbb0:	2201      	movs	r2, #1
 801cbb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801cbb4:	e03d      	b.n	801cc32 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 801cbb6:	4b22      	ldr	r3, [pc, #136]	; (801cc40 <vTaskSwitchContext+0xa0>)
 801cbb8:	2200      	movs	r2, #0
 801cbba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cbbc:	4b21      	ldr	r3, [pc, #132]	; (801cc44 <vTaskSwitchContext+0xa4>)
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	607b      	str	r3, [r7, #4]
 801cbc2:	e007      	b.n	801cbd4 <vTaskSwitchContext+0x34>
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d101      	bne.n	801cbce <vTaskSwitchContext+0x2e>
 801cbca:	b672      	cpsid	i
 801cbcc:	e7fe      	b.n	801cbcc <vTaskSwitchContext+0x2c>
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	3b01      	subs	r3, #1
 801cbd2:	607b      	str	r3, [r7, #4]
 801cbd4:	491c      	ldr	r1, [pc, #112]	; (801cc48 <vTaskSwitchContext+0xa8>)
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	0013      	movs	r3, r2
 801cbda:	009b      	lsls	r3, r3, #2
 801cbdc:	189b      	adds	r3, r3, r2
 801cbde:	009b      	lsls	r3, r3, #2
 801cbe0:	585b      	ldr	r3, [r3, r1]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d0ee      	beq.n	801cbc4 <vTaskSwitchContext+0x24>
 801cbe6:	687a      	ldr	r2, [r7, #4]
 801cbe8:	0013      	movs	r3, r2
 801cbea:	009b      	lsls	r3, r3, #2
 801cbec:	189b      	adds	r3, r3, r2
 801cbee:	009b      	lsls	r3, r3, #2
 801cbf0:	4a15      	ldr	r2, [pc, #84]	; (801cc48 <vTaskSwitchContext+0xa8>)
 801cbf2:	189b      	adds	r3, r3, r2
 801cbf4:	603b      	str	r3, [r7, #0]
 801cbf6:	683b      	ldr	r3, [r7, #0]
 801cbf8:	685b      	ldr	r3, [r3, #4]
 801cbfa:	685a      	ldr	r2, [r3, #4]
 801cbfc:	683b      	ldr	r3, [r7, #0]
 801cbfe:	605a      	str	r2, [r3, #4]
 801cc00:	683b      	ldr	r3, [r7, #0]
 801cc02:	685a      	ldr	r2, [r3, #4]
 801cc04:	683b      	ldr	r3, [r7, #0]
 801cc06:	3308      	adds	r3, #8
 801cc08:	429a      	cmp	r2, r3
 801cc0a:	d104      	bne.n	801cc16 <vTaskSwitchContext+0x76>
 801cc0c:	683b      	ldr	r3, [r7, #0]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	685a      	ldr	r2, [r3, #4]
 801cc12:	683b      	ldr	r3, [r7, #0]
 801cc14:	605a      	str	r2, [r3, #4]
 801cc16:	683b      	ldr	r3, [r7, #0]
 801cc18:	685b      	ldr	r3, [r3, #4]
 801cc1a:	68da      	ldr	r2, [r3, #12]
 801cc1c:	4b0b      	ldr	r3, [pc, #44]	; (801cc4c <vTaskSwitchContext+0xac>)
 801cc1e:	601a      	str	r2, [r3, #0]
 801cc20:	4b08      	ldr	r3, [pc, #32]	; (801cc44 <vTaskSwitchContext+0xa4>)
 801cc22:	687a      	ldr	r2, [r7, #4]
 801cc24:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801cc26:	4b09      	ldr	r3, [pc, #36]	; (801cc4c <vTaskSwitchContext+0xac>)
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	3354      	adds	r3, #84	; 0x54
 801cc2c:	001a      	movs	r2, r3
 801cc2e:	4b08      	ldr	r3, [pc, #32]	; (801cc50 <vTaskSwitchContext+0xb0>)
 801cc30:	601a      	str	r2, [r3, #0]
}
 801cc32:	46c0      	nop			; (mov r8, r8)
 801cc34:	46bd      	mov	sp, r7
 801cc36:	b002      	add	sp, #8
 801cc38:	bd80      	pop	{r7, pc}
 801cc3a:	46c0      	nop			; (mov r8, r8)
 801cc3c:	20001744 	.word	0x20001744
 801cc40:	20001730 	.word	0x20001730
 801cc44:	20001724 	.word	0x20001724
 801cc48:	2000124c 	.word	0x2000124c
 801cc4c:	20001248 	.word	0x20001248
 801cc50:	20000488 	.word	0x20000488

0801cc54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801cc5e:	687b      	ldr	r3, [r7, #4]
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d101      	bne.n	801cc68 <vTaskPlaceOnEventList+0x14>
 801cc64:	b672      	cpsid	i
 801cc66:	e7fe      	b.n	801cc66 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801cc68:	4b08      	ldr	r3, [pc, #32]	; (801cc8c <vTaskPlaceOnEventList+0x38>)
 801cc6a:	681b      	ldr	r3, [r3, #0]
 801cc6c:	3318      	adds	r3, #24
 801cc6e:	001a      	movs	r2, r3
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	0011      	movs	r1, r2
 801cc74:	0018      	movs	r0, r3
 801cc76:	f7fe fdb8 	bl	801b7ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	2101      	movs	r1, #1
 801cc7e:	0018      	movs	r0, r3
 801cc80:	f000 fa4a 	bl	801d118 <prvAddCurrentTaskToDelayedList>
}
 801cc84:	46c0      	nop			; (mov r8, r8)
 801cc86:	46bd      	mov	sp, r7
 801cc88:	b002      	add	sp, #8
 801cc8a:	bd80      	pop	{r7, pc}
 801cc8c:	20001248 	.word	0x20001248

0801cc90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b084      	sub	sp, #16
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	60f8      	str	r0, [r7, #12]
 801cc98:	60b9      	str	r1, [r7, #8]
 801cc9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d101      	bne.n	801cca6 <vTaskPlaceOnEventListRestricted+0x16>
 801cca2:	b672      	cpsid	i
 801cca4:	e7fe      	b.n	801cca4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801cca6:	4b0c      	ldr	r3, [pc, #48]	; (801ccd8 <vTaskPlaceOnEventListRestricted+0x48>)
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	3318      	adds	r3, #24
 801ccac:	001a      	movs	r2, r3
 801ccae:	68fb      	ldr	r3, [r7, #12]
 801ccb0:	0011      	movs	r1, r2
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	f7fe fd77 	bl	801b7a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d002      	beq.n	801ccc4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 801ccbe:	2301      	movs	r3, #1
 801ccc0:	425b      	negs	r3, r3
 801ccc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801ccc4:	687a      	ldr	r2, [r7, #4]
 801ccc6:	68bb      	ldr	r3, [r7, #8]
 801ccc8:	0011      	movs	r1, r2
 801ccca:	0018      	movs	r0, r3
 801cccc:	f000 fa24 	bl	801d118 <prvAddCurrentTaskToDelayedList>
	}
 801ccd0:	46c0      	nop			; (mov r8, r8)
 801ccd2:	46bd      	mov	sp, r7
 801ccd4:	b004      	add	sp, #16
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	20001248 	.word	0x20001248

0801ccdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b084      	sub	sp, #16
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	68db      	ldr	r3, [r3, #12]
 801cce8:	68db      	ldr	r3, [r3, #12]
 801ccea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 801ccec:	68bb      	ldr	r3, [r7, #8]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d101      	bne.n	801ccf6 <xTaskRemoveFromEventList+0x1a>
 801ccf2:	b672      	cpsid	i
 801ccf4:	e7fe      	b.n	801ccf4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ccf6:	68bb      	ldr	r3, [r7, #8]
 801ccf8:	3318      	adds	r3, #24
 801ccfa:	0018      	movs	r0, r3
 801ccfc:	f7fe fdab 	bl	801b856 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801cd00:	4b1e      	ldr	r3, [pc, #120]	; (801cd7c <xTaskRemoveFromEventList+0xa0>)
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d11d      	bne.n	801cd44 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801cd08:	68bb      	ldr	r3, [r7, #8]
 801cd0a:	3304      	adds	r3, #4
 801cd0c:	0018      	movs	r0, r3
 801cd0e:	f7fe fda2 	bl	801b856 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801cd12:	68bb      	ldr	r3, [r7, #8]
 801cd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd16:	4b1a      	ldr	r3, [pc, #104]	; (801cd80 <xTaskRemoveFromEventList+0xa4>)
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d903      	bls.n	801cd26 <xTaskRemoveFromEventList+0x4a>
 801cd1e:	68bb      	ldr	r3, [r7, #8]
 801cd20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd22:	4b17      	ldr	r3, [pc, #92]	; (801cd80 <xTaskRemoveFromEventList+0xa4>)
 801cd24:	601a      	str	r2, [r3, #0]
 801cd26:	68bb      	ldr	r3, [r7, #8]
 801cd28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd2a:	0013      	movs	r3, r2
 801cd2c:	009b      	lsls	r3, r3, #2
 801cd2e:	189b      	adds	r3, r3, r2
 801cd30:	009b      	lsls	r3, r3, #2
 801cd32:	4a14      	ldr	r2, [pc, #80]	; (801cd84 <xTaskRemoveFromEventList+0xa8>)
 801cd34:	189a      	adds	r2, r3, r2
 801cd36:	68bb      	ldr	r3, [r7, #8]
 801cd38:	3304      	adds	r3, #4
 801cd3a:	0019      	movs	r1, r3
 801cd3c:	0010      	movs	r0, r2
 801cd3e:	f7fe fd32 	bl	801b7a6 <vListInsertEnd>
 801cd42:	e007      	b.n	801cd54 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801cd44:	68bb      	ldr	r3, [r7, #8]
 801cd46:	3318      	adds	r3, #24
 801cd48:	001a      	movs	r2, r3
 801cd4a:	4b0f      	ldr	r3, [pc, #60]	; (801cd88 <xTaskRemoveFromEventList+0xac>)
 801cd4c:	0011      	movs	r1, r2
 801cd4e:	0018      	movs	r0, r3
 801cd50:	f7fe fd29 	bl	801b7a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801cd54:	68bb      	ldr	r3, [r7, #8]
 801cd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cd58:	4b0c      	ldr	r3, [pc, #48]	; (801cd8c <xTaskRemoveFromEventList+0xb0>)
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd5e:	429a      	cmp	r2, r3
 801cd60:	d905      	bls.n	801cd6e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801cd62:	2301      	movs	r3, #1
 801cd64:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801cd66:	4b0a      	ldr	r3, [pc, #40]	; (801cd90 <xTaskRemoveFromEventList+0xb4>)
 801cd68:	2201      	movs	r2, #1
 801cd6a:	601a      	str	r2, [r3, #0]
 801cd6c:	e001      	b.n	801cd72 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801cd72:	68fb      	ldr	r3, [r7, #12]
}
 801cd74:	0018      	movs	r0, r3
 801cd76:	46bd      	mov	sp, r7
 801cd78:	b004      	add	sp, #16
 801cd7a:	bd80      	pop	{r7, pc}
 801cd7c:	20001744 	.word	0x20001744
 801cd80:	20001724 	.word	0x20001724
 801cd84:	2000124c 	.word	0x2000124c
 801cd88:	200016dc 	.word	0x200016dc
 801cd8c:	20001248 	.word	0x20001248
 801cd90:	20001730 	.word	0x20001730

0801cd94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801cd9c:	4b05      	ldr	r3, [pc, #20]	; (801cdb4 <vTaskInternalSetTimeOutState+0x20>)
 801cd9e:	681a      	ldr	r2, [r3, #0]
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801cda4:	4b04      	ldr	r3, [pc, #16]	; (801cdb8 <vTaskInternalSetTimeOutState+0x24>)
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	605a      	str	r2, [r3, #4]
}
 801cdac:	46c0      	nop			; (mov r8, r8)
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	b002      	add	sp, #8
 801cdb2:	bd80      	pop	{r7, pc}
 801cdb4:	20001734 	.word	0x20001734
 801cdb8:	20001720 	.word	0x20001720

0801cdbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b086      	sub	sp, #24
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	6078      	str	r0, [r7, #4]
 801cdc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d101      	bne.n	801cdd0 <xTaskCheckForTimeOut+0x14>
 801cdcc:	b672      	cpsid	i
 801cdce:	e7fe      	b.n	801cdce <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 801cdd0:	683b      	ldr	r3, [r7, #0]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d101      	bne.n	801cdda <xTaskCheckForTimeOut+0x1e>
 801cdd6:	b672      	cpsid	i
 801cdd8:	e7fe      	b.n	801cdd8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 801cdda:	f000 fda1 	bl	801d920 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801cdde:	4b1d      	ldr	r3, [pc, #116]	; (801ce54 <xTaskCheckForTimeOut+0x98>)
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	685b      	ldr	r3, [r3, #4]
 801cde8:	693a      	ldr	r2, [r7, #16]
 801cdea:	1ad3      	subs	r3, r2, r3
 801cdec:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801cdee:	683b      	ldr	r3, [r7, #0]
 801cdf0:	681b      	ldr	r3, [r3, #0]
 801cdf2:	3301      	adds	r3, #1
 801cdf4:	d102      	bne.n	801cdfc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801cdf6:	2300      	movs	r3, #0
 801cdf8:	617b      	str	r3, [r7, #20]
 801cdfa:	e024      	b.n	801ce46 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	681a      	ldr	r2, [r3, #0]
 801ce00:	4b15      	ldr	r3, [pc, #84]	; (801ce58 <xTaskCheckForTimeOut+0x9c>)
 801ce02:	681b      	ldr	r3, [r3, #0]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d007      	beq.n	801ce18 <xTaskCheckForTimeOut+0x5c>
 801ce08:	687b      	ldr	r3, [r7, #4]
 801ce0a:	685b      	ldr	r3, [r3, #4]
 801ce0c:	693a      	ldr	r2, [r7, #16]
 801ce0e:	429a      	cmp	r2, r3
 801ce10:	d302      	bcc.n	801ce18 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801ce12:	2301      	movs	r3, #1
 801ce14:	617b      	str	r3, [r7, #20]
 801ce16:	e016      	b.n	801ce46 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	681b      	ldr	r3, [r3, #0]
 801ce1c:	68fa      	ldr	r2, [r7, #12]
 801ce1e:	429a      	cmp	r2, r3
 801ce20:	d20c      	bcs.n	801ce3c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801ce22:	683b      	ldr	r3, [r7, #0]
 801ce24:	681a      	ldr	r2, [r3, #0]
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	1ad2      	subs	r2, r2, r3
 801ce2a:	683b      	ldr	r3, [r7, #0]
 801ce2c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	0018      	movs	r0, r3
 801ce32:	f7ff ffaf 	bl	801cd94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801ce36:	2300      	movs	r3, #0
 801ce38:	617b      	str	r3, [r7, #20]
 801ce3a:	e004      	b.n	801ce46 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 801ce3c:	683b      	ldr	r3, [r7, #0]
 801ce3e:	2200      	movs	r2, #0
 801ce40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801ce42:	2301      	movs	r3, #1
 801ce44:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801ce46:	f000 fd7d 	bl	801d944 <vPortExitCritical>

	return xReturn;
 801ce4a:	697b      	ldr	r3, [r7, #20]
}
 801ce4c:	0018      	movs	r0, r3
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	b006      	add	sp, #24
 801ce52:	bd80      	pop	{r7, pc}
 801ce54:	20001720 	.word	0x20001720
 801ce58:	20001734 	.word	0x20001734

0801ce5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801ce60:	4b02      	ldr	r3, [pc, #8]	; (801ce6c <vTaskMissedYield+0x10>)
 801ce62:	2201      	movs	r2, #1
 801ce64:	601a      	str	r2, [r3, #0]
}
 801ce66:	46c0      	nop			; (mov r8, r8)
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}
 801ce6c:	20001730 	.word	0x20001730

0801ce70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b082      	sub	sp, #8
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801ce78:	f000 f84e 	bl	801cf18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801ce7c:	4b03      	ldr	r3, [pc, #12]	; (801ce8c <prvIdleTask+0x1c>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	2b01      	cmp	r3, #1
 801ce82:	d9f9      	bls.n	801ce78 <prvIdleTask+0x8>
			{
				taskYIELD();
 801ce84:	f000 fd3c 	bl	801d900 <vPortYield>
		prvCheckTasksWaitingTermination();
 801ce88:	e7f6      	b.n	801ce78 <prvIdleTask+0x8>
 801ce8a:	46c0      	nop			; (mov r8, r8)
 801ce8c:	2000124c 	.word	0x2000124c

0801ce90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801ce90:	b580      	push	{r7, lr}
 801ce92:	b082      	sub	sp, #8
 801ce94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ce96:	2300      	movs	r3, #0
 801ce98:	607b      	str	r3, [r7, #4]
 801ce9a:	e00c      	b.n	801ceb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801ce9c:	687a      	ldr	r2, [r7, #4]
 801ce9e:	0013      	movs	r3, r2
 801cea0:	009b      	lsls	r3, r3, #2
 801cea2:	189b      	adds	r3, r3, r2
 801cea4:	009b      	lsls	r3, r3, #2
 801cea6:	4a14      	ldr	r2, [pc, #80]	; (801cef8 <prvInitialiseTaskLists+0x68>)
 801cea8:	189b      	adds	r3, r3, r2
 801ceaa:	0018      	movs	r0, r3
 801ceac:	f7fe fc52 	bl	801b754 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	3301      	adds	r3, #1
 801ceb4:	607b      	str	r3, [r7, #4]
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	2b37      	cmp	r3, #55	; 0x37
 801ceba:	d9ef      	bls.n	801ce9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801cebc:	4b0f      	ldr	r3, [pc, #60]	; (801cefc <prvInitialiseTaskLists+0x6c>)
 801cebe:	0018      	movs	r0, r3
 801cec0:	f7fe fc48 	bl	801b754 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801cec4:	4b0e      	ldr	r3, [pc, #56]	; (801cf00 <prvInitialiseTaskLists+0x70>)
 801cec6:	0018      	movs	r0, r3
 801cec8:	f7fe fc44 	bl	801b754 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801cecc:	4b0d      	ldr	r3, [pc, #52]	; (801cf04 <prvInitialiseTaskLists+0x74>)
 801cece:	0018      	movs	r0, r3
 801ced0:	f7fe fc40 	bl	801b754 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801ced4:	4b0c      	ldr	r3, [pc, #48]	; (801cf08 <prvInitialiseTaskLists+0x78>)
 801ced6:	0018      	movs	r0, r3
 801ced8:	f7fe fc3c 	bl	801b754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801cedc:	4b0b      	ldr	r3, [pc, #44]	; (801cf0c <prvInitialiseTaskLists+0x7c>)
 801cede:	0018      	movs	r0, r3
 801cee0:	f7fe fc38 	bl	801b754 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801cee4:	4b0a      	ldr	r3, [pc, #40]	; (801cf10 <prvInitialiseTaskLists+0x80>)
 801cee6:	4a05      	ldr	r2, [pc, #20]	; (801cefc <prvInitialiseTaskLists+0x6c>)
 801cee8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801ceea:	4b0a      	ldr	r3, [pc, #40]	; (801cf14 <prvInitialiseTaskLists+0x84>)
 801ceec:	4a04      	ldr	r2, [pc, #16]	; (801cf00 <prvInitialiseTaskLists+0x70>)
 801ceee:	601a      	str	r2, [r3, #0]
}
 801cef0:	46c0      	nop			; (mov r8, r8)
 801cef2:	46bd      	mov	sp, r7
 801cef4:	b002      	add	sp, #8
 801cef6:	bd80      	pop	{r7, pc}
 801cef8:	2000124c 	.word	0x2000124c
 801cefc:	200016ac 	.word	0x200016ac
 801cf00:	200016c0 	.word	0x200016c0
 801cf04:	200016dc 	.word	0x200016dc
 801cf08:	200016f0 	.word	0x200016f0
 801cf0c:	20001708 	.word	0x20001708
 801cf10:	200016d4 	.word	0x200016d4
 801cf14:	200016d8 	.word	0x200016d8

0801cf18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b082      	sub	sp, #8
 801cf1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801cf1e:	e01a      	b.n	801cf56 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 801cf20:	f000 fcfe 	bl	801d920 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cf24:	4b10      	ldr	r3, [pc, #64]	; (801cf68 <prvCheckTasksWaitingTermination+0x50>)
 801cf26:	68db      	ldr	r3, [r3, #12]
 801cf28:	68db      	ldr	r3, [r3, #12]
 801cf2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	3304      	adds	r3, #4
 801cf30:	0018      	movs	r0, r3
 801cf32:	f7fe fc90 	bl	801b856 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801cf36:	4b0d      	ldr	r3, [pc, #52]	; (801cf6c <prvCheckTasksWaitingTermination+0x54>)
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	1e5a      	subs	r2, r3, #1
 801cf3c:	4b0b      	ldr	r3, [pc, #44]	; (801cf6c <prvCheckTasksWaitingTermination+0x54>)
 801cf3e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 801cf40:	4b0b      	ldr	r3, [pc, #44]	; (801cf70 <prvCheckTasksWaitingTermination+0x58>)
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	1e5a      	subs	r2, r3, #1
 801cf46:	4b0a      	ldr	r3, [pc, #40]	; (801cf70 <prvCheckTasksWaitingTermination+0x58>)
 801cf48:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 801cf4a:	f000 fcfb 	bl	801d944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801cf4e:	687b      	ldr	r3, [r7, #4]
 801cf50:	0018      	movs	r0, r3
 801cf52:	f000 f80f 	bl	801cf74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801cf56:	4b06      	ldr	r3, [pc, #24]	; (801cf70 <prvCheckTasksWaitingTermination+0x58>)
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d1e0      	bne.n	801cf20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801cf5e:	46c0      	nop			; (mov r8, r8)
 801cf60:	46c0      	nop			; (mov r8, r8)
 801cf62:	46bd      	mov	sp, r7
 801cf64:	b002      	add	sp, #8
 801cf66:	bd80      	pop	{r7, pc}
 801cf68:	200016f0 	.word	0x200016f0
 801cf6c:	2000171c 	.word	0x2000171c
 801cf70:	20001704 	.word	0x20001704

0801cf74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801cf74:	b580      	push	{r7, lr}
 801cf76:	b082      	sub	sp, #8
 801cf78:	af00      	add	r7, sp, #0
 801cf7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	3354      	adds	r3, #84	; 0x54
 801cf80:	0018      	movs	r0, r3
 801cf82:	f00a fe1d 	bl	8027bc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	22a5      	movs	r2, #165	; 0xa5
 801cf8a:	5c9b      	ldrb	r3, [r3, r2]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d109      	bne.n	801cfa4 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf94:	0018      	movs	r0, r3
 801cf96:	f000 fe07 	bl	801dba8 <vPortFree>
				vPortFree( pxTCB );
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	0018      	movs	r0, r3
 801cf9e:	f000 fe03 	bl	801dba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801cfa2:	e010      	b.n	801cfc6 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	22a5      	movs	r2, #165	; 0xa5
 801cfa8:	5c9b      	ldrb	r3, [r3, r2]
 801cfaa:	2b01      	cmp	r3, #1
 801cfac:	d104      	bne.n	801cfb8 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	0018      	movs	r0, r3
 801cfb2:	f000 fdf9 	bl	801dba8 <vPortFree>
	}
 801cfb6:	e006      	b.n	801cfc6 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	22a5      	movs	r2, #165	; 0xa5
 801cfbc:	5c9b      	ldrb	r3, [r3, r2]
 801cfbe:	2b02      	cmp	r3, #2
 801cfc0:	d001      	beq.n	801cfc6 <prvDeleteTCB+0x52>
 801cfc2:	b672      	cpsid	i
 801cfc4:	e7fe      	b.n	801cfc4 <prvDeleteTCB+0x50>
	}
 801cfc6:	46c0      	nop			; (mov r8, r8)
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	b002      	add	sp, #8
 801cfcc:	bd80      	pop	{r7, pc}
	...

0801cfd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b082      	sub	sp, #8
 801cfd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801cfd6:	4b0b      	ldr	r3, [pc, #44]	; (801d004 <prvResetNextTaskUnblockTime+0x34>)
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d104      	bne.n	801cfea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801cfe0:	4b09      	ldr	r3, [pc, #36]	; (801d008 <prvResetNextTaskUnblockTime+0x38>)
 801cfe2:	2201      	movs	r2, #1
 801cfe4:	4252      	negs	r2, r2
 801cfe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801cfe8:	e008      	b.n	801cffc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801cfea:	4b06      	ldr	r3, [pc, #24]	; (801d004 <prvResetNextTaskUnblockTime+0x34>)
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	68db      	ldr	r3, [r3, #12]
 801cff0:	68db      	ldr	r3, [r3, #12]
 801cff2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	685a      	ldr	r2, [r3, #4]
 801cff8:	4b03      	ldr	r3, [pc, #12]	; (801d008 <prvResetNextTaskUnblockTime+0x38>)
 801cffa:	601a      	str	r2, [r3, #0]
}
 801cffc:	46c0      	nop			; (mov r8, r8)
 801cffe:	46bd      	mov	sp, r7
 801d000:	b002      	add	sp, #8
 801d002:	bd80      	pop	{r7, pc}
 801d004:	200016d4 	.word	0x200016d4
 801d008:	2000173c 	.word	0x2000173c

0801d00c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801d012:	4b04      	ldr	r3, [pc, #16]	; (801d024 <xTaskGetCurrentTaskHandle+0x18>)
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	607b      	str	r3, [r7, #4]

		return xReturn;
 801d018:	687b      	ldr	r3, [r7, #4]
	}
 801d01a:	0018      	movs	r0, r3
 801d01c:	46bd      	mov	sp, r7
 801d01e:	b002      	add	sp, #8
 801d020:	bd80      	pop	{r7, pc}
 801d022:	46c0      	nop			; (mov r8, r8)
 801d024:	20001248 	.word	0x20001248

0801d028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801d028:	b580      	push	{r7, lr}
 801d02a:	b082      	sub	sp, #8
 801d02c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801d02e:	4b0a      	ldr	r3, [pc, #40]	; (801d058 <xTaskGetSchedulerState+0x30>)
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d102      	bne.n	801d03c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801d036:	2301      	movs	r3, #1
 801d038:	607b      	str	r3, [r7, #4]
 801d03a:	e008      	b.n	801d04e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d03c:	4b07      	ldr	r3, [pc, #28]	; (801d05c <xTaskGetSchedulerState+0x34>)
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	2b00      	cmp	r3, #0
 801d042:	d102      	bne.n	801d04a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801d044:	2302      	movs	r3, #2
 801d046:	607b      	str	r3, [r7, #4]
 801d048:	e001      	b.n	801d04e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801d04a:	2300      	movs	r3, #0
 801d04c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801d04e:	687b      	ldr	r3, [r7, #4]
	}
 801d050:	0018      	movs	r0, r3
 801d052:	46bd      	mov	sp, r7
 801d054:	b002      	add	sp, #8
 801d056:	bd80      	pop	{r7, pc}
 801d058:	20001728 	.word	0x20001728
 801d05c:	20001744 	.word	0x20001744

0801d060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801d060:	b580      	push	{r7, lr}
 801d062:	b084      	sub	sp, #16
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801d06c:	2300      	movs	r3, #0
 801d06e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d044      	beq.n	801d100 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801d076:	4b25      	ldr	r3, [pc, #148]	; (801d10c <xTaskPriorityDisinherit+0xac>)
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	68ba      	ldr	r2, [r7, #8]
 801d07c:	429a      	cmp	r2, r3
 801d07e:	d001      	beq.n	801d084 <xTaskPriorityDisinherit+0x24>
 801d080:	b672      	cpsid	i
 801d082:	e7fe      	b.n	801d082 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 801d084:	68bb      	ldr	r3, [r7, #8]
 801d086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d101      	bne.n	801d090 <xTaskPriorityDisinherit+0x30>
 801d08c:	b672      	cpsid	i
 801d08e:	e7fe      	b.n	801d08e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 801d090:	68bb      	ldr	r3, [r7, #8]
 801d092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d094:	1e5a      	subs	r2, r3, #1
 801d096:	68bb      	ldr	r3, [r7, #8]
 801d098:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801d09a:	68bb      	ldr	r3, [r7, #8]
 801d09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d09e:	68bb      	ldr	r3, [r7, #8]
 801d0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d0a2:	429a      	cmp	r2, r3
 801d0a4:	d02c      	beq.n	801d100 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801d0a6:	68bb      	ldr	r3, [r7, #8]
 801d0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d128      	bne.n	801d100 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801d0ae:	68bb      	ldr	r3, [r7, #8]
 801d0b0:	3304      	adds	r3, #4
 801d0b2:	0018      	movs	r0, r3
 801d0b4:	f7fe fbcf 	bl	801b856 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801d0b8:	68bb      	ldr	r3, [r7, #8]
 801d0ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801d0bc:	68bb      	ldr	r3, [r7, #8]
 801d0be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d0c0:	68bb      	ldr	r3, [r7, #8]
 801d0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0c4:	2238      	movs	r2, #56	; 0x38
 801d0c6:	1ad2      	subs	r2, r2, r3
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801d0cc:	68bb      	ldr	r3, [r7, #8]
 801d0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d0d0:	4b0f      	ldr	r3, [pc, #60]	; (801d110 <xTaskPriorityDisinherit+0xb0>)
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	429a      	cmp	r2, r3
 801d0d6:	d903      	bls.n	801d0e0 <xTaskPriorityDisinherit+0x80>
 801d0d8:	68bb      	ldr	r3, [r7, #8]
 801d0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d0dc:	4b0c      	ldr	r3, [pc, #48]	; (801d110 <xTaskPriorityDisinherit+0xb0>)
 801d0de:	601a      	str	r2, [r3, #0]
 801d0e0:	68bb      	ldr	r3, [r7, #8]
 801d0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d0e4:	0013      	movs	r3, r2
 801d0e6:	009b      	lsls	r3, r3, #2
 801d0e8:	189b      	adds	r3, r3, r2
 801d0ea:	009b      	lsls	r3, r3, #2
 801d0ec:	4a09      	ldr	r2, [pc, #36]	; (801d114 <xTaskPriorityDisinherit+0xb4>)
 801d0ee:	189a      	adds	r2, r3, r2
 801d0f0:	68bb      	ldr	r3, [r7, #8]
 801d0f2:	3304      	adds	r3, #4
 801d0f4:	0019      	movs	r1, r3
 801d0f6:	0010      	movs	r0, r2
 801d0f8:	f7fe fb55 	bl	801b7a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801d100:	68fb      	ldr	r3, [r7, #12]
	}
 801d102:	0018      	movs	r0, r3
 801d104:	46bd      	mov	sp, r7
 801d106:	b004      	add	sp, #16
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	46c0      	nop			; (mov r8, r8)
 801d10c:	20001248 	.word	0x20001248
 801d110:	20001724 	.word	0x20001724
 801d114:	2000124c 	.word	0x2000124c

0801d118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b084      	sub	sp, #16
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
 801d120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801d122:	4b21      	ldr	r3, [pc, #132]	; (801d1a8 <prvAddCurrentTaskToDelayedList+0x90>)
 801d124:	681b      	ldr	r3, [r3, #0]
 801d126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801d128:	4b20      	ldr	r3, [pc, #128]	; (801d1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	3304      	adds	r3, #4
 801d12e:	0018      	movs	r0, r3
 801d130:	f7fe fb91 	bl	801b856 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	3301      	adds	r3, #1
 801d138:	d10b      	bne.n	801d152 <prvAddCurrentTaskToDelayedList+0x3a>
 801d13a:	683b      	ldr	r3, [r7, #0]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d008      	beq.n	801d152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801d140:	4b1a      	ldr	r3, [pc, #104]	; (801d1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	1d1a      	adds	r2, r3, #4
 801d146:	4b1a      	ldr	r3, [pc, #104]	; (801d1b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801d148:	0011      	movs	r1, r2
 801d14a:	0018      	movs	r0, r3
 801d14c:	f7fe fb2b 	bl	801b7a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801d150:	e026      	b.n	801d1a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801d152:	68fa      	ldr	r2, [r7, #12]
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	18d3      	adds	r3, r2, r3
 801d158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801d15a:	4b14      	ldr	r3, [pc, #80]	; (801d1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801d15c:	681b      	ldr	r3, [r3, #0]
 801d15e:	68ba      	ldr	r2, [r7, #8]
 801d160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801d162:	68ba      	ldr	r2, [r7, #8]
 801d164:	68fb      	ldr	r3, [r7, #12]
 801d166:	429a      	cmp	r2, r3
 801d168:	d209      	bcs.n	801d17e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801d16a:	4b12      	ldr	r3, [pc, #72]	; (801d1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801d16c:	681a      	ldr	r2, [r3, #0]
 801d16e:	4b0f      	ldr	r3, [pc, #60]	; (801d1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	3304      	adds	r3, #4
 801d174:	0019      	movs	r1, r3
 801d176:	0010      	movs	r0, r2
 801d178:	f7fe fb37 	bl	801b7ea <vListInsert>
}
 801d17c:	e010      	b.n	801d1a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801d17e:	4b0e      	ldr	r3, [pc, #56]	; (801d1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 801d180:	681a      	ldr	r2, [r3, #0]
 801d182:	4b0a      	ldr	r3, [pc, #40]	; (801d1ac <prvAddCurrentTaskToDelayedList+0x94>)
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	3304      	adds	r3, #4
 801d188:	0019      	movs	r1, r3
 801d18a:	0010      	movs	r0, r2
 801d18c:	f7fe fb2d 	bl	801b7ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801d190:	4b0a      	ldr	r3, [pc, #40]	; (801d1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	68ba      	ldr	r2, [r7, #8]
 801d196:	429a      	cmp	r2, r3
 801d198:	d202      	bcs.n	801d1a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801d19a:	4b08      	ldr	r3, [pc, #32]	; (801d1bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801d19c:	68ba      	ldr	r2, [r7, #8]
 801d19e:	601a      	str	r2, [r3, #0]
}
 801d1a0:	46c0      	nop			; (mov r8, r8)
 801d1a2:	46bd      	mov	sp, r7
 801d1a4:	b004      	add	sp, #16
 801d1a6:	bd80      	pop	{r7, pc}
 801d1a8:	20001720 	.word	0x20001720
 801d1ac:	20001248 	.word	0x20001248
 801d1b0:	20001708 	.word	0x20001708
 801d1b4:	200016d8 	.word	0x200016d8
 801d1b8:	200016d4 	.word	0x200016d4
 801d1bc:	2000173c 	.word	0x2000173c

0801d1c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801d1c0:	b590      	push	{r4, r7, lr}
 801d1c2:	b089      	sub	sp, #36	; 0x24
 801d1c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801d1ca:	f000 fac9 	bl	801d760 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801d1ce:	4b17      	ldr	r3, [pc, #92]	; (801d22c <xTimerCreateTimerTask+0x6c>)
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d020      	beq.n	801d218 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801d1d6:	2300      	movs	r3, #0
 801d1d8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801d1da:	2300      	movs	r3, #0
 801d1dc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801d1de:	003a      	movs	r2, r7
 801d1e0:	1d39      	adds	r1, r7, #4
 801d1e2:	2308      	movs	r3, #8
 801d1e4:	18fb      	adds	r3, r7, r3
 801d1e6:	0018      	movs	r0, r3
 801d1e8:	f7fe fa9c 	bl	801b724 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801d1ec:	683c      	ldr	r4, [r7, #0]
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	68ba      	ldr	r2, [r7, #8]
 801d1f2:	490f      	ldr	r1, [pc, #60]	; (801d230 <xTimerCreateTimerTask+0x70>)
 801d1f4:	480f      	ldr	r0, [pc, #60]	; (801d234 <xTimerCreateTimerTask+0x74>)
 801d1f6:	9202      	str	r2, [sp, #8]
 801d1f8:	9301      	str	r3, [sp, #4]
 801d1fa:	2302      	movs	r3, #2
 801d1fc:	9300      	str	r3, [sp, #0]
 801d1fe:	2300      	movs	r3, #0
 801d200:	0022      	movs	r2, r4
 801d202:	f7ff f812 	bl	801c22a <xTaskCreateStatic>
 801d206:	0002      	movs	r2, r0
 801d208:	4b0b      	ldr	r3, [pc, #44]	; (801d238 <xTimerCreateTimerTask+0x78>)
 801d20a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801d20c:	4b0a      	ldr	r3, [pc, #40]	; (801d238 <xTimerCreateTimerTask+0x78>)
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d001      	beq.n	801d218 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801d214:	2301      	movs	r3, #1
 801d216:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801d218:	68fb      	ldr	r3, [r7, #12]
 801d21a:	2b00      	cmp	r3, #0
 801d21c:	d101      	bne.n	801d222 <xTimerCreateTimerTask+0x62>
 801d21e:	b672      	cpsid	i
 801d220:	e7fe      	b.n	801d220 <xTimerCreateTimerTask+0x60>
	return xReturn;
 801d222:	68fb      	ldr	r3, [r7, #12]
}
 801d224:	0018      	movs	r0, r3
 801d226:	46bd      	mov	sp, r7
 801d228:	b005      	add	sp, #20
 801d22a:	bd90      	pop	{r4, r7, pc}
 801d22c:	20001778 	.word	0x20001778
 801d230:	0802a074 	.word	0x0802a074
 801d234:	0801d359 	.word	0x0801d359
 801d238:	2000177c 	.word	0x2000177c

0801d23c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801d23c:	b590      	push	{r4, r7, lr}
 801d23e:	b08b      	sub	sp, #44	; 0x2c
 801d240:	af00      	add	r7, sp, #0
 801d242:	60f8      	str	r0, [r7, #12]
 801d244:	60b9      	str	r1, [r7, #8]
 801d246:	607a      	str	r2, [r7, #4]
 801d248:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801d24a:	2300      	movs	r3, #0
 801d24c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801d24e:	68fb      	ldr	r3, [r7, #12]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d101      	bne.n	801d258 <xTimerGenericCommand+0x1c>
 801d254:	b672      	cpsid	i
 801d256:	e7fe      	b.n	801d256 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801d258:	4b1c      	ldr	r3, [pc, #112]	; (801d2cc <xTimerGenericCommand+0x90>)
 801d25a:	681b      	ldr	r3, [r3, #0]
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	d030      	beq.n	801d2c2 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801d260:	2414      	movs	r4, #20
 801d262:	193b      	adds	r3, r7, r4
 801d264:	68ba      	ldr	r2, [r7, #8]
 801d266:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801d268:	193b      	adds	r3, r7, r4
 801d26a:	687a      	ldr	r2, [r7, #4]
 801d26c:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801d26e:	193b      	adds	r3, r7, r4
 801d270:	68fa      	ldr	r2, [r7, #12]
 801d272:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801d274:	68bb      	ldr	r3, [r7, #8]
 801d276:	2b05      	cmp	r3, #5
 801d278:	dc19      	bgt.n	801d2ae <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801d27a:	f7ff fed5 	bl	801d028 <xTaskGetSchedulerState>
 801d27e:	0003      	movs	r3, r0
 801d280:	2b02      	cmp	r3, #2
 801d282:	d109      	bne.n	801d298 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801d284:	4b11      	ldr	r3, [pc, #68]	; (801d2cc <xTimerGenericCommand+0x90>)
 801d286:	6818      	ldr	r0, [r3, #0]
 801d288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d28a:	1939      	adds	r1, r7, r4
 801d28c:	2300      	movs	r3, #0
 801d28e:	f7fe fc03 	bl	801ba98 <xQueueGenericSend>
 801d292:	0003      	movs	r3, r0
 801d294:	627b      	str	r3, [r7, #36]	; 0x24
 801d296:	e014      	b.n	801d2c2 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801d298:	4b0c      	ldr	r3, [pc, #48]	; (801d2cc <xTimerGenericCommand+0x90>)
 801d29a:	6818      	ldr	r0, [r3, #0]
 801d29c:	2314      	movs	r3, #20
 801d29e:	18f9      	adds	r1, r7, r3
 801d2a0:	2300      	movs	r3, #0
 801d2a2:	2200      	movs	r2, #0
 801d2a4:	f7fe fbf8 	bl	801ba98 <xQueueGenericSend>
 801d2a8:	0003      	movs	r3, r0
 801d2aa:	627b      	str	r3, [r7, #36]	; 0x24
 801d2ac:	e009      	b.n	801d2c2 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801d2ae:	4b07      	ldr	r3, [pc, #28]	; (801d2cc <xTimerGenericCommand+0x90>)
 801d2b0:	6818      	ldr	r0, [r3, #0]
 801d2b2:	683a      	ldr	r2, [r7, #0]
 801d2b4:	2314      	movs	r3, #20
 801d2b6:	18f9      	adds	r1, r7, r3
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	f7fe fcb1 	bl	801bc20 <xQueueGenericSendFromISR>
 801d2be:	0003      	movs	r3, r0
 801d2c0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d2c4:	0018      	movs	r0, r3
 801d2c6:	46bd      	mov	sp, r7
 801d2c8:	b00b      	add	sp, #44	; 0x2c
 801d2ca:	bd90      	pop	{r4, r7, pc}
 801d2cc:	20001778 	.word	0x20001778

0801d2d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	b086      	sub	sp, #24
 801d2d4:	af02      	add	r7, sp, #8
 801d2d6:	6078      	str	r0, [r7, #4]
 801d2d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d2da:	4b1e      	ldr	r3, [pc, #120]	; (801d354 <prvProcessExpiredTimer+0x84>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	68db      	ldr	r3, [r3, #12]
 801d2e0:	68db      	ldr	r3, [r3, #12]
 801d2e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	3304      	adds	r3, #4
 801d2e8:	0018      	movs	r0, r3
 801d2ea:	f7fe fab4 	bl	801b856 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d2ee:	68fb      	ldr	r3, [r7, #12]
 801d2f0:	2228      	movs	r2, #40	; 0x28
 801d2f2:	5c9b      	ldrb	r3, [r3, r2]
 801d2f4:	001a      	movs	r2, r3
 801d2f6:	2304      	movs	r3, #4
 801d2f8:	4013      	ands	r3, r2
 801d2fa:	d019      	beq.n	801d330 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	699a      	ldr	r2, [r3, #24]
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	18d1      	adds	r1, r2, r3
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	683a      	ldr	r2, [r7, #0]
 801d308:	68f8      	ldr	r0, [r7, #12]
 801d30a:	f000 f8c3 	bl	801d494 <prvInsertTimerInActiveList>
 801d30e:	1e03      	subs	r3, r0, #0
 801d310:	d017      	beq.n	801d342 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801d312:	687a      	ldr	r2, [r7, #4]
 801d314:	68f8      	ldr	r0, [r7, #12]
 801d316:	2300      	movs	r3, #0
 801d318:	9300      	str	r3, [sp, #0]
 801d31a:	2300      	movs	r3, #0
 801d31c:	2100      	movs	r1, #0
 801d31e:	f7ff ff8d 	bl	801d23c <xTimerGenericCommand>
 801d322:	0003      	movs	r3, r0
 801d324:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 801d326:	68bb      	ldr	r3, [r7, #8]
 801d328:	2b00      	cmp	r3, #0
 801d32a:	d10a      	bne.n	801d342 <prvProcessExpiredTimer+0x72>
 801d32c:	b672      	cpsid	i
 801d32e:	e7fe      	b.n	801d32e <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	2228      	movs	r2, #40	; 0x28
 801d334:	5c9b      	ldrb	r3, [r3, r2]
 801d336:	2201      	movs	r2, #1
 801d338:	4393      	bics	r3, r2
 801d33a:	b2d9      	uxtb	r1, r3
 801d33c:	68fb      	ldr	r3, [r7, #12]
 801d33e:	2228      	movs	r2, #40	; 0x28
 801d340:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	6a1b      	ldr	r3, [r3, #32]
 801d346:	68fa      	ldr	r2, [r7, #12]
 801d348:	0010      	movs	r0, r2
 801d34a:	4798      	blx	r3
}
 801d34c:	46c0      	nop			; (mov r8, r8)
 801d34e:	46bd      	mov	sp, r7
 801d350:	b004      	add	sp, #16
 801d352:	bd80      	pop	{r7, pc}
 801d354:	20001770 	.word	0x20001770

0801d358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b084      	sub	sp, #16
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801d360:	2308      	movs	r3, #8
 801d362:	18fb      	adds	r3, r7, r3
 801d364:	0018      	movs	r0, r3
 801d366:	f000 f853 	bl	801d410 <prvGetNextExpireTime>
 801d36a:	0003      	movs	r3, r0
 801d36c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801d36e:	68ba      	ldr	r2, [r7, #8]
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	0011      	movs	r1, r2
 801d374:	0018      	movs	r0, r3
 801d376:	f000 f803 	bl	801d380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801d37a:	f000 f8cd 	bl	801d518 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801d37e:	e7ef      	b.n	801d360 <prvTimerTask+0x8>

0801d380 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801d380:	b580      	push	{r7, lr}
 801d382:	b084      	sub	sp, #16
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
 801d388:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801d38a:	f7ff fab3 	bl	801c8f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d38e:	2308      	movs	r3, #8
 801d390:	18fb      	adds	r3, r7, r3
 801d392:	0018      	movs	r0, r3
 801d394:	f000 f85e 	bl	801d454 <prvSampleTimeNow>
 801d398:	0003      	movs	r3, r0
 801d39a:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d12b      	bne.n	801d3fa <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801d3a2:	683b      	ldr	r3, [r7, #0]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d10c      	bne.n	801d3c2 <prvProcessTimerOrBlockTask+0x42>
 801d3a8:	687a      	ldr	r2, [r7, #4]
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	429a      	cmp	r2, r3
 801d3ae:	d808      	bhi.n	801d3c2 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 801d3b0:	f7ff faac 	bl	801c90c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801d3b4:	68fa      	ldr	r2, [r7, #12]
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	0011      	movs	r1, r2
 801d3ba:	0018      	movs	r0, r3
 801d3bc:	f7ff ff88 	bl	801d2d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801d3c0:	e01d      	b.n	801d3fe <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 801d3c2:	683b      	ldr	r3, [r7, #0]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d008      	beq.n	801d3da <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801d3c8:	4b0f      	ldr	r3, [pc, #60]	; (801d408 <prvProcessTimerOrBlockTask+0x88>)
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d101      	bne.n	801d3d6 <prvProcessTimerOrBlockTask+0x56>
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	e000      	b.n	801d3d8 <prvProcessTimerOrBlockTask+0x58>
 801d3d6:	2300      	movs	r3, #0
 801d3d8:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801d3da:	4b0c      	ldr	r3, [pc, #48]	; (801d40c <prvProcessTimerOrBlockTask+0x8c>)
 801d3dc:	6818      	ldr	r0, [r3, #0]
 801d3de:	687a      	ldr	r2, [r7, #4]
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	1ad3      	subs	r3, r2, r3
 801d3e4:	683a      	ldr	r2, [r7, #0]
 801d3e6:	0019      	movs	r1, r3
 801d3e8:	f7fe feec 	bl	801c1c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801d3ec:	f7ff fa8e 	bl	801c90c <xTaskResumeAll>
 801d3f0:	1e03      	subs	r3, r0, #0
 801d3f2:	d104      	bne.n	801d3fe <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 801d3f4:	f000 fa84 	bl	801d900 <vPortYield>
}
 801d3f8:	e001      	b.n	801d3fe <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 801d3fa:	f7ff fa87 	bl	801c90c <xTaskResumeAll>
}
 801d3fe:	46c0      	nop			; (mov r8, r8)
 801d400:	46bd      	mov	sp, r7
 801d402:	b004      	add	sp, #16
 801d404:	bd80      	pop	{r7, pc}
 801d406:	46c0      	nop			; (mov r8, r8)
 801d408:	20001774 	.word	0x20001774
 801d40c:	20001778 	.word	0x20001778

0801d410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b084      	sub	sp, #16
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801d418:	4b0d      	ldr	r3, [pc, #52]	; (801d450 <prvGetNextExpireTime+0x40>)
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d101      	bne.n	801d426 <prvGetNextExpireTime+0x16>
 801d422:	2201      	movs	r2, #1
 801d424:	e000      	b.n	801d428 <prvGetNextExpireTime+0x18>
 801d426:	2200      	movs	r2, #0
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d105      	bne.n	801d440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801d434:	4b06      	ldr	r3, [pc, #24]	; (801d450 <prvGetNextExpireTime+0x40>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	68db      	ldr	r3, [r3, #12]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	60fb      	str	r3, [r7, #12]
 801d43e:	e001      	b.n	801d444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801d440:	2300      	movs	r3, #0
 801d442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801d444:	68fb      	ldr	r3, [r7, #12]
}
 801d446:	0018      	movs	r0, r3
 801d448:	46bd      	mov	sp, r7
 801d44a:	b004      	add	sp, #16
 801d44c:	bd80      	pop	{r7, pc}
 801d44e:	46c0      	nop			; (mov r8, r8)
 801d450:	20001770 	.word	0x20001770

0801d454 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801d45c:	f7ff fae2 	bl	801ca24 <xTaskGetTickCount>
 801d460:	0003      	movs	r3, r0
 801d462:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 801d464:	4b0a      	ldr	r3, [pc, #40]	; (801d490 <prvSampleTimeNow+0x3c>)
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	68fa      	ldr	r2, [r7, #12]
 801d46a:	429a      	cmp	r2, r3
 801d46c:	d205      	bcs.n	801d47a <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 801d46e:	f000 f919 	bl	801d6a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	2201      	movs	r2, #1
 801d476:	601a      	str	r2, [r3, #0]
 801d478:	e002      	b.n	801d480 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	2200      	movs	r2, #0
 801d47e:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801d480:	4b03      	ldr	r3, [pc, #12]	; (801d490 <prvSampleTimeNow+0x3c>)
 801d482:	68fa      	ldr	r2, [r7, #12]
 801d484:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 801d486:	68fb      	ldr	r3, [r7, #12]
}
 801d488:	0018      	movs	r0, r3
 801d48a:	46bd      	mov	sp, r7
 801d48c:	b004      	add	sp, #16
 801d48e:	bd80      	pop	{r7, pc}
 801d490:	20001780 	.word	0x20001780

0801d494 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801d494:	b580      	push	{r7, lr}
 801d496:	b086      	sub	sp, #24
 801d498:	af00      	add	r7, sp, #0
 801d49a:	60f8      	str	r0, [r7, #12]
 801d49c:	60b9      	str	r1, [r7, #8]
 801d49e:	607a      	str	r2, [r7, #4]
 801d4a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	68ba      	ldr	r2, [r7, #8]
 801d4aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	68fa      	ldr	r2, [r7, #12]
 801d4b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801d4b2:	68ba      	ldr	r2, [r7, #8]
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d812      	bhi.n	801d4e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d4ba:	687a      	ldr	r2, [r7, #4]
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	1ad2      	subs	r2, r2, r3
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	699b      	ldr	r3, [r3, #24]
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d302      	bcc.n	801d4ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801d4c8:	2301      	movs	r3, #1
 801d4ca:	617b      	str	r3, [r7, #20]
 801d4cc:	e01b      	b.n	801d506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801d4ce:	4b10      	ldr	r3, [pc, #64]	; (801d510 <prvInsertTimerInActiveList+0x7c>)
 801d4d0:	681a      	ldr	r2, [r3, #0]
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	3304      	adds	r3, #4
 801d4d6:	0019      	movs	r1, r3
 801d4d8:	0010      	movs	r0, r2
 801d4da:	f7fe f986 	bl	801b7ea <vListInsert>
 801d4de:	e012      	b.n	801d506 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801d4e0:	687a      	ldr	r2, [r7, #4]
 801d4e2:	683b      	ldr	r3, [r7, #0]
 801d4e4:	429a      	cmp	r2, r3
 801d4e6:	d206      	bcs.n	801d4f6 <prvInsertTimerInActiveList+0x62>
 801d4e8:	68ba      	ldr	r2, [r7, #8]
 801d4ea:	683b      	ldr	r3, [r7, #0]
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	d302      	bcc.n	801d4f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801d4f0:	2301      	movs	r3, #1
 801d4f2:	617b      	str	r3, [r7, #20]
 801d4f4:	e007      	b.n	801d506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d4f6:	4b07      	ldr	r3, [pc, #28]	; (801d514 <prvInsertTimerInActiveList+0x80>)
 801d4f8:	681a      	ldr	r2, [r3, #0]
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	3304      	adds	r3, #4
 801d4fe:	0019      	movs	r1, r3
 801d500:	0010      	movs	r0, r2
 801d502:	f7fe f972 	bl	801b7ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 801d506:	697b      	ldr	r3, [r7, #20]
}
 801d508:	0018      	movs	r0, r3
 801d50a:	46bd      	mov	sp, r7
 801d50c:	b006      	add	sp, #24
 801d50e:	bd80      	pop	{r7, pc}
 801d510:	20001774 	.word	0x20001774
 801d514:	20001770 	.word	0x20001770

0801d518 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801d518:	b590      	push	{r4, r7, lr}
 801d51a:	b08d      	sub	sp, #52	; 0x34
 801d51c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801d51e:	e0ac      	b.n	801d67a <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801d520:	2208      	movs	r2, #8
 801d522:	18bb      	adds	r3, r7, r2
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	2b00      	cmp	r3, #0
 801d528:	da0f      	bge.n	801d54a <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801d52a:	18bb      	adds	r3, r7, r2
 801d52c:	3304      	adds	r3, #4
 801d52e:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d532:	2b00      	cmp	r3, #0
 801d534:	d101      	bne.n	801d53a <prvProcessReceivedCommands+0x22>
 801d536:	b672      	cpsid	i
 801d538:	e7fe      	b.n	801d538 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d53c:	681a      	ldr	r2, [r3, #0]
 801d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d540:	6858      	ldr	r0, [r3, #4]
 801d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d544:	689b      	ldr	r3, [r3, #8]
 801d546:	0019      	movs	r1, r3
 801d548:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801d54a:	2208      	movs	r2, #8
 801d54c:	18bb      	adds	r3, r7, r2
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	2b00      	cmp	r3, #0
 801d552:	da00      	bge.n	801d556 <prvProcessReceivedCommands+0x3e>
 801d554:	e091      	b.n	801d67a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801d556:	18bb      	adds	r3, r7, r2
 801d558:	689b      	ldr	r3, [r3, #8]
 801d55a:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801d55c:	6a3b      	ldr	r3, [r7, #32]
 801d55e:	695b      	ldr	r3, [r3, #20]
 801d560:	2b00      	cmp	r3, #0
 801d562:	d004      	beq.n	801d56e <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d564:	6a3b      	ldr	r3, [r7, #32]
 801d566:	3304      	adds	r3, #4
 801d568:	0018      	movs	r0, r3
 801d56a:	f7fe f974 	bl	801b856 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801d56e:	1d3b      	adds	r3, r7, #4
 801d570:	0018      	movs	r0, r3
 801d572:	f7ff ff6f 	bl	801d454 <prvSampleTimeNow>
 801d576:	0003      	movs	r3, r0
 801d578:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 801d57a:	2308      	movs	r3, #8
 801d57c:	18fb      	adds	r3, r7, r3
 801d57e:	681b      	ldr	r3, [r3, #0]
 801d580:	2b09      	cmp	r3, #9
 801d582:	d900      	bls.n	801d586 <prvProcessReceivedCommands+0x6e>
 801d584:	e078      	b.n	801d678 <prvProcessReceivedCommands+0x160>
 801d586:	009a      	lsls	r2, r3, #2
 801d588:	4b44      	ldr	r3, [pc, #272]	; (801d69c <prvProcessReceivedCommands+0x184>)
 801d58a:	18d3      	adds	r3, r2, r3
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801d590:	6a3b      	ldr	r3, [r7, #32]
 801d592:	2228      	movs	r2, #40	; 0x28
 801d594:	5c9b      	ldrb	r3, [r3, r2]
 801d596:	2201      	movs	r2, #1
 801d598:	4313      	orrs	r3, r2
 801d59a:	b2d9      	uxtb	r1, r3
 801d59c:	6a3b      	ldr	r3, [r7, #32]
 801d59e:	2228      	movs	r2, #40	; 0x28
 801d5a0:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801d5a2:	2408      	movs	r4, #8
 801d5a4:	193b      	adds	r3, r7, r4
 801d5a6:	685a      	ldr	r2, [r3, #4]
 801d5a8:	6a3b      	ldr	r3, [r7, #32]
 801d5aa:	699b      	ldr	r3, [r3, #24]
 801d5ac:	18d1      	adds	r1, r2, r3
 801d5ae:	193b      	adds	r3, r7, r4
 801d5b0:	685b      	ldr	r3, [r3, #4]
 801d5b2:	69fa      	ldr	r2, [r7, #28]
 801d5b4:	6a38      	ldr	r0, [r7, #32]
 801d5b6:	f7ff ff6d 	bl	801d494 <prvInsertTimerInActiveList>
 801d5ba:	1e03      	subs	r3, r0, #0
 801d5bc:	d05d      	beq.n	801d67a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d5be:	6a3b      	ldr	r3, [r7, #32]
 801d5c0:	6a1b      	ldr	r3, [r3, #32]
 801d5c2:	6a3a      	ldr	r2, [r7, #32]
 801d5c4:	0010      	movs	r0, r2
 801d5c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d5c8:	6a3b      	ldr	r3, [r7, #32]
 801d5ca:	2228      	movs	r2, #40	; 0x28
 801d5cc:	5c9b      	ldrb	r3, [r3, r2]
 801d5ce:	001a      	movs	r2, r3
 801d5d0:	2304      	movs	r3, #4
 801d5d2:	4013      	ands	r3, r2
 801d5d4:	d051      	beq.n	801d67a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801d5d6:	193b      	adds	r3, r7, r4
 801d5d8:	685a      	ldr	r2, [r3, #4]
 801d5da:	6a3b      	ldr	r3, [r7, #32]
 801d5dc:	699b      	ldr	r3, [r3, #24]
 801d5de:	18d2      	adds	r2, r2, r3
 801d5e0:	6a38      	ldr	r0, [r7, #32]
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	9300      	str	r3, [sp, #0]
 801d5e6:	2300      	movs	r3, #0
 801d5e8:	2100      	movs	r1, #0
 801d5ea:	f7ff fe27 	bl	801d23c <xTimerGenericCommand>
 801d5ee:	0003      	movs	r3, r0
 801d5f0:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 801d5f2:	69bb      	ldr	r3, [r7, #24]
 801d5f4:	2b00      	cmp	r3, #0
 801d5f6:	d140      	bne.n	801d67a <prvProcessReceivedCommands+0x162>
 801d5f8:	b672      	cpsid	i
 801d5fa:	e7fe      	b.n	801d5fa <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d5fc:	6a3b      	ldr	r3, [r7, #32]
 801d5fe:	2228      	movs	r2, #40	; 0x28
 801d600:	5c9b      	ldrb	r3, [r3, r2]
 801d602:	2201      	movs	r2, #1
 801d604:	4393      	bics	r3, r2
 801d606:	b2d9      	uxtb	r1, r3
 801d608:	6a3b      	ldr	r3, [r7, #32]
 801d60a:	2228      	movs	r2, #40	; 0x28
 801d60c:	5499      	strb	r1, [r3, r2]
					break;
 801d60e:	e034      	b.n	801d67a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801d610:	6a3b      	ldr	r3, [r7, #32]
 801d612:	2228      	movs	r2, #40	; 0x28
 801d614:	5c9b      	ldrb	r3, [r3, r2]
 801d616:	2201      	movs	r2, #1
 801d618:	4313      	orrs	r3, r2
 801d61a:	b2d9      	uxtb	r1, r3
 801d61c:	6a3b      	ldr	r3, [r7, #32]
 801d61e:	2228      	movs	r2, #40	; 0x28
 801d620:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801d622:	2308      	movs	r3, #8
 801d624:	18fb      	adds	r3, r7, r3
 801d626:	685a      	ldr	r2, [r3, #4]
 801d628:	6a3b      	ldr	r3, [r7, #32]
 801d62a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801d62c:	6a3b      	ldr	r3, [r7, #32]
 801d62e:	699b      	ldr	r3, [r3, #24]
 801d630:	2b00      	cmp	r3, #0
 801d632:	d101      	bne.n	801d638 <prvProcessReceivedCommands+0x120>
 801d634:	b672      	cpsid	i
 801d636:	e7fe      	b.n	801d636 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801d638:	6a3b      	ldr	r3, [r7, #32]
 801d63a:	699a      	ldr	r2, [r3, #24]
 801d63c:	69fb      	ldr	r3, [r7, #28]
 801d63e:	18d1      	adds	r1, r2, r3
 801d640:	69fb      	ldr	r3, [r7, #28]
 801d642:	69fa      	ldr	r2, [r7, #28]
 801d644:	6a38      	ldr	r0, [r7, #32]
 801d646:	f7ff ff25 	bl	801d494 <prvInsertTimerInActiveList>
					break;
 801d64a:	e016      	b.n	801d67a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801d64c:	6a3b      	ldr	r3, [r7, #32]
 801d64e:	2228      	movs	r2, #40	; 0x28
 801d650:	5c9b      	ldrb	r3, [r3, r2]
 801d652:	001a      	movs	r2, r3
 801d654:	2302      	movs	r3, #2
 801d656:	4013      	ands	r3, r2
 801d658:	d104      	bne.n	801d664 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 801d65a:	6a3b      	ldr	r3, [r7, #32]
 801d65c:	0018      	movs	r0, r3
 801d65e:	f000 faa3 	bl	801dba8 <vPortFree>
 801d662:	e00a      	b.n	801d67a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801d664:	6a3b      	ldr	r3, [r7, #32]
 801d666:	2228      	movs	r2, #40	; 0x28
 801d668:	5c9b      	ldrb	r3, [r3, r2]
 801d66a:	2201      	movs	r2, #1
 801d66c:	4393      	bics	r3, r2
 801d66e:	b2d9      	uxtb	r1, r3
 801d670:	6a3b      	ldr	r3, [r7, #32]
 801d672:	2228      	movs	r2, #40	; 0x28
 801d674:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801d676:	e000      	b.n	801d67a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 801d678:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801d67a:	4b09      	ldr	r3, [pc, #36]	; (801d6a0 <prvProcessReceivedCommands+0x188>)
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	2208      	movs	r2, #8
 801d680:	18b9      	adds	r1, r7, r2
 801d682:	2200      	movs	r2, #0
 801d684:	0018      	movs	r0, r3
 801d686:	f7fe fb3f 	bl	801bd08 <xQueueReceive>
 801d68a:	1e03      	subs	r3, r0, #0
 801d68c:	d000      	beq.n	801d690 <prvProcessReceivedCommands+0x178>
 801d68e:	e747      	b.n	801d520 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801d690:	46c0      	nop			; (mov r8, r8)
 801d692:	46c0      	nop			; (mov r8, r8)
 801d694:	46bd      	mov	sp, r7
 801d696:	b00b      	add	sp, #44	; 0x2c
 801d698:	bd90      	pop	{r4, r7, pc}
 801d69a:	46c0      	nop			; (mov r8, r8)
 801d69c:	0802b128 	.word	0x0802b128
 801d6a0:	20001778 	.word	0x20001778

0801d6a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801d6a4:	b580      	push	{r7, lr}
 801d6a6:	b088      	sub	sp, #32
 801d6a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801d6aa:	e041      	b.n	801d730 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801d6ac:	4b2a      	ldr	r3, [pc, #168]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	68db      	ldr	r3, [r3, #12]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d6b6:	4b28      	ldr	r3, [pc, #160]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	68db      	ldr	r3, [r3, #12]
 801d6bc:	68db      	ldr	r3, [r3, #12]
 801d6be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801d6c0:	68fb      	ldr	r3, [r7, #12]
 801d6c2:	3304      	adds	r3, #4
 801d6c4:	0018      	movs	r0, r3
 801d6c6:	f7fe f8c6 	bl	801b856 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801d6ca:	68fb      	ldr	r3, [r7, #12]
 801d6cc:	6a1b      	ldr	r3, [r3, #32]
 801d6ce:	68fa      	ldr	r2, [r7, #12]
 801d6d0:	0010      	movs	r0, r2
 801d6d2:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	2228      	movs	r2, #40	; 0x28
 801d6d8:	5c9b      	ldrb	r3, [r3, r2]
 801d6da:	001a      	movs	r2, r3
 801d6dc:	2304      	movs	r3, #4
 801d6de:	4013      	ands	r3, r2
 801d6e0:	d026      	beq.n	801d730 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	699b      	ldr	r3, [r3, #24]
 801d6e6:	693a      	ldr	r2, [r7, #16]
 801d6e8:	18d3      	adds	r3, r2, r3
 801d6ea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801d6ec:	68ba      	ldr	r2, [r7, #8]
 801d6ee:	693b      	ldr	r3, [r7, #16]
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	d90e      	bls.n	801d712 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801d6f4:	68fb      	ldr	r3, [r7, #12]
 801d6f6:	68ba      	ldr	r2, [r7, #8]
 801d6f8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	68fa      	ldr	r2, [r7, #12]
 801d6fe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801d700:	4b15      	ldr	r3, [pc, #84]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d702:	681a      	ldr	r2, [r3, #0]
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	3304      	adds	r3, #4
 801d708:	0019      	movs	r1, r3
 801d70a:	0010      	movs	r0, r2
 801d70c:	f7fe f86d 	bl	801b7ea <vListInsert>
 801d710:	e00e      	b.n	801d730 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801d712:	693a      	ldr	r2, [r7, #16]
 801d714:	68f8      	ldr	r0, [r7, #12]
 801d716:	2300      	movs	r3, #0
 801d718:	9300      	str	r3, [sp, #0]
 801d71a:	2300      	movs	r3, #0
 801d71c:	2100      	movs	r1, #0
 801d71e:	f7ff fd8d 	bl	801d23c <xTimerGenericCommand>
 801d722:	0003      	movs	r3, r0
 801d724:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d101      	bne.n	801d730 <prvSwitchTimerLists+0x8c>
 801d72c:	b672      	cpsid	i
 801d72e:	e7fe      	b.n	801d72e <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801d730:	4b09      	ldr	r3, [pc, #36]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	2b00      	cmp	r3, #0
 801d738:	d1b8      	bne.n	801d6ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801d73a:	4b07      	ldr	r3, [pc, #28]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801d740:	4b06      	ldr	r3, [pc, #24]	; (801d75c <prvSwitchTimerLists+0xb8>)
 801d742:	681a      	ldr	r2, [r3, #0]
 801d744:	4b04      	ldr	r3, [pc, #16]	; (801d758 <prvSwitchTimerLists+0xb4>)
 801d746:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 801d748:	4b04      	ldr	r3, [pc, #16]	; (801d75c <prvSwitchTimerLists+0xb8>)
 801d74a:	697a      	ldr	r2, [r7, #20]
 801d74c:	601a      	str	r2, [r3, #0]
}
 801d74e:	46c0      	nop			; (mov r8, r8)
 801d750:	46bd      	mov	sp, r7
 801d752:	b006      	add	sp, #24
 801d754:	bd80      	pop	{r7, pc}
 801d756:	46c0      	nop			; (mov r8, r8)
 801d758:	20001770 	.word	0x20001770
 801d75c:	20001774 	.word	0x20001774

0801d760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801d760:	b580      	push	{r7, lr}
 801d762:	b082      	sub	sp, #8
 801d764:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801d766:	f000 f8db 	bl	801d920 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801d76a:	4b16      	ldr	r3, [pc, #88]	; (801d7c4 <prvCheckForValidListAndQueue+0x64>)
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d123      	bne.n	801d7ba <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 801d772:	4b15      	ldr	r3, [pc, #84]	; (801d7c8 <prvCheckForValidListAndQueue+0x68>)
 801d774:	0018      	movs	r0, r3
 801d776:	f7fd ffed 	bl	801b754 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801d77a:	4b14      	ldr	r3, [pc, #80]	; (801d7cc <prvCheckForValidListAndQueue+0x6c>)
 801d77c:	0018      	movs	r0, r3
 801d77e:	f7fd ffe9 	bl	801b754 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801d782:	4b13      	ldr	r3, [pc, #76]	; (801d7d0 <prvCheckForValidListAndQueue+0x70>)
 801d784:	4a10      	ldr	r2, [pc, #64]	; (801d7c8 <prvCheckForValidListAndQueue+0x68>)
 801d786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801d788:	4b12      	ldr	r3, [pc, #72]	; (801d7d4 <prvCheckForValidListAndQueue+0x74>)
 801d78a:	4a10      	ldr	r2, [pc, #64]	; (801d7cc <prvCheckForValidListAndQueue+0x6c>)
 801d78c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801d78e:	4b12      	ldr	r3, [pc, #72]	; (801d7d8 <prvCheckForValidListAndQueue+0x78>)
 801d790:	4a12      	ldr	r2, [pc, #72]	; (801d7dc <prvCheckForValidListAndQueue+0x7c>)
 801d792:	2100      	movs	r1, #0
 801d794:	9100      	str	r1, [sp, #0]
 801d796:	2110      	movs	r1, #16
 801d798:	200a      	movs	r0, #10
 801d79a:	f7fe f8d8 	bl	801b94e <xQueueGenericCreateStatic>
 801d79e:	0002      	movs	r2, r0
 801d7a0:	4b08      	ldr	r3, [pc, #32]	; (801d7c4 <prvCheckForValidListAndQueue+0x64>)
 801d7a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801d7a4:	4b07      	ldr	r3, [pc, #28]	; (801d7c4 <prvCheckForValidListAndQueue+0x64>)
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d006      	beq.n	801d7ba <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801d7ac:	4b05      	ldr	r3, [pc, #20]	; (801d7c4 <prvCheckForValidListAndQueue+0x64>)
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	4a0b      	ldr	r2, [pc, #44]	; (801d7e0 <prvCheckForValidListAndQueue+0x80>)
 801d7b2:	0011      	movs	r1, r2
 801d7b4:	0018      	movs	r0, r3
 801d7b6:	f7fe fcdd 	bl	801c174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801d7ba:	f000 f8c3 	bl	801d944 <vPortExitCritical>
}
 801d7be:	46c0      	nop			; (mov r8, r8)
 801d7c0:	46bd      	mov	sp, r7
 801d7c2:	bd80      	pop	{r7, pc}
 801d7c4:	20001778 	.word	0x20001778
 801d7c8:	20001748 	.word	0x20001748
 801d7cc:	2000175c 	.word	0x2000175c
 801d7d0:	20001770 	.word	0x20001770
 801d7d4:	20001774 	.word	0x20001774
 801d7d8:	20001824 	.word	0x20001824
 801d7dc:	20001784 	.word	0x20001784
 801d7e0:	0802a07c 	.word	0x0802a07c

0801d7e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801d7e4:	b580      	push	{r7, lr}
 801d7e6:	b084      	sub	sp, #16
 801d7e8:	af00      	add	r7, sp, #0
 801d7ea:	60f8      	str	r0, [r7, #12]
 801d7ec:	60b9      	str	r1, [r7, #8]
 801d7ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	3b04      	subs	r3, #4
 801d7f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	2280      	movs	r2, #128	; 0x80
 801d7fa:	0452      	lsls	r2, r2, #17
 801d7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801d7fe:	68fb      	ldr	r3, [r7, #12]
 801d800:	3b04      	subs	r3, #4
 801d802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801d804:	68ba      	ldr	r2, [r7, #8]
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	3b04      	subs	r3, #4
 801d80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801d810:	4a08      	ldr	r2, [pc, #32]	; (801d834 <pxPortInitialiseStack+0x50>)
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	3b14      	subs	r3, #20
 801d81a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801d81c:	687a      	ldr	r2, [r7, #4]
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	3b20      	subs	r3, #32
 801d826:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801d828:	68fb      	ldr	r3, [r7, #12]
}
 801d82a:	0018      	movs	r0, r3
 801d82c:	46bd      	mov	sp, r7
 801d82e:	b004      	add	sp, #16
 801d830:	bd80      	pop	{r7, pc}
 801d832:	46c0      	nop			; (mov r8, r8)
 801d834:	0801d839 	.word	0x0801d839

0801d838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801d838:	b580      	push	{r7, lr}
 801d83a:	b082      	sub	sp, #8
 801d83c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801d83e:	2300      	movs	r3, #0
 801d840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801d842:	4b08      	ldr	r3, [pc, #32]	; (801d864 <prvTaskExitError+0x2c>)
 801d844:	681b      	ldr	r3, [r3, #0]
 801d846:	3301      	adds	r3, #1
 801d848:	d001      	beq.n	801d84e <prvTaskExitError+0x16>
 801d84a:	b672      	cpsid	i
 801d84c:	e7fe      	b.n	801d84c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 801d84e:	b672      	cpsid	i
	while( ulDummy == 0 )
 801d850:	46c0      	nop			; (mov r8, r8)
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	2b00      	cmp	r3, #0
 801d856:	d0fc      	beq.n	801d852 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801d858:	46c0      	nop			; (mov r8, r8)
 801d85a:	46c0      	nop			; (mov r8, r8)
 801d85c:	46bd      	mov	sp, r7
 801d85e:	b002      	add	sp, #8
 801d860:	bd80      	pop	{r7, pc}
 801d862:	46c0      	nop			; (mov r8, r8)
 801d864:	200001b0 	.word	0x200001b0

0801d868 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 801d86c:	46c0      	nop			; (mov r8, r8)
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}
	...

0801d880 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 801d880:	4a0b      	ldr	r2, [pc, #44]	; (801d8b0 <pxCurrentTCBConst2>)
 801d882:	6813      	ldr	r3, [r2, #0]
 801d884:	6818      	ldr	r0, [r3, #0]
 801d886:	3020      	adds	r0, #32
 801d888:	f380 8809 	msr	PSP, r0
 801d88c:	2002      	movs	r0, #2
 801d88e:	f380 8814 	msr	CONTROL, r0
 801d892:	f3bf 8f6f 	isb	sy
 801d896:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801d898:	46ae      	mov	lr, r5
 801d89a:	bc08      	pop	{r3}
 801d89c:	bc04      	pop	{r2}
 801d89e:	b662      	cpsie	i
 801d8a0:	4718      	bx	r3
 801d8a2:	46c0      	nop			; (mov r8, r8)
 801d8a4:	46c0      	nop			; (mov r8, r8)
 801d8a6:	46c0      	nop			; (mov r8, r8)
 801d8a8:	46c0      	nop			; (mov r8, r8)
 801d8aa:	46c0      	nop			; (mov r8, r8)
 801d8ac:	46c0      	nop			; (mov r8, r8)
 801d8ae:	46c0      	nop			; (mov r8, r8)

0801d8b0 <pxCurrentTCBConst2>:
 801d8b0:	20001248 	.word	0x20001248
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 801d8b4:	46c0      	nop			; (mov r8, r8)
 801d8b6:	46c0      	nop			; (mov r8, r8)

0801d8b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801d8bc:	4b0e      	ldr	r3, [pc, #56]	; (801d8f8 <xPortStartScheduler+0x40>)
 801d8be:	681a      	ldr	r2, [r3, #0]
 801d8c0:	4b0d      	ldr	r3, [pc, #52]	; (801d8f8 <xPortStartScheduler+0x40>)
 801d8c2:	21ff      	movs	r1, #255	; 0xff
 801d8c4:	0409      	lsls	r1, r1, #16
 801d8c6:	430a      	orrs	r2, r1
 801d8c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801d8ca:	4b0b      	ldr	r3, [pc, #44]	; (801d8f8 <xPortStartScheduler+0x40>)
 801d8cc:	681a      	ldr	r2, [r3, #0]
 801d8ce:	4b0a      	ldr	r3, [pc, #40]	; (801d8f8 <xPortStartScheduler+0x40>)
 801d8d0:	21ff      	movs	r1, #255	; 0xff
 801d8d2:	0609      	lsls	r1, r1, #24
 801d8d4:	430a      	orrs	r2, r1
 801d8d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801d8d8:	f000 f898 	bl	801da0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801d8dc:	4b07      	ldr	r3, [pc, #28]	; (801d8fc <xPortStartScheduler+0x44>)
 801d8de:	2200      	movs	r2, #0
 801d8e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 801d8e2:	f7ff ffcd 	bl	801d880 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801d8e6:	f7ff f95b 	bl	801cba0 <vTaskSwitchContext>
	prvTaskExitError();
 801d8ea:	f7ff ffa5 	bl	801d838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801d8ee:	2300      	movs	r3, #0
}
 801d8f0:	0018      	movs	r0, r3
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bd80      	pop	{r7, pc}
 801d8f6:	46c0      	nop			; (mov r8, r8)
 801d8f8:	e000ed20 	.word	0xe000ed20
 801d8fc:	200001b0 	.word	0x200001b0

0801d900 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 801d900:	b580      	push	{r7, lr}
 801d902:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801d904:	4b05      	ldr	r3, [pc, #20]	; (801d91c <vPortYield+0x1c>)
 801d906:	2280      	movs	r2, #128	; 0x80
 801d908:	0552      	lsls	r2, r2, #21
 801d90a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 801d90c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801d910:	f3bf 8f6f 	isb	sy
}
 801d914:	46c0      	nop			; (mov r8, r8)
 801d916:	46bd      	mov	sp, r7
 801d918:	bd80      	pop	{r7, pc}
 801d91a:	46c0      	nop			; (mov r8, r8)
 801d91c:	e000ed04 	.word	0xe000ed04

0801d920 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801d920:	b580      	push	{r7, lr}
 801d922:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 801d924:	b672      	cpsid	i
	uxCriticalNesting++;
 801d926:	4b06      	ldr	r3, [pc, #24]	; (801d940 <vPortEnterCritical+0x20>)
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	1c5a      	adds	r2, r3, #1
 801d92c:	4b04      	ldr	r3, [pc, #16]	; (801d940 <vPortEnterCritical+0x20>)
 801d92e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 801d930:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801d934:	f3bf 8f6f 	isb	sy
}
 801d938:	46c0      	nop			; (mov r8, r8)
 801d93a:	46bd      	mov	sp, r7
 801d93c:	bd80      	pop	{r7, pc}
 801d93e:	46c0      	nop			; (mov r8, r8)
 801d940:	200001b0 	.word	0x200001b0

0801d944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801d944:	b580      	push	{r7, lr}
 801d946:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801d948:	4b09      	ldr	r3, [pc, #36]	; (801d970 <vPortExitCritical+0x2c>)
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d101      	bne.n	801d954 <vPortExitCritical+0x10>
 801d950:	b672      	cpsid	i
 801d952:	e7fe      	b.n	801d952 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 801d954:	4b06      	ldr	r3, [pc, #24]	; (801d970 <vPortExitCritical+0x2c>)
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	1e5a      	subs	r2, r3, #1
 801d95a:	4b05      	ldr	r3, [pc, #20]	; (801d970 <vPortExitCritical+0x2c>)
 801d95c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 801d95e:	4b04      	ldr	r3, [pc, #16]	; (801d970 <vPortExitCritical+0x2c>)
 801d960:	681b      	ldr	r3, [r3, #0]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d100      	bne.n	801d968 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 801d966:	b662      	cpsie	i
	}
}
 801d968:	46c0      	nop			; (mov r8, r8)
 801d96a:	46bd      	mov	sp, r7
 801d96c:	bd80      	pop	{r7, pc}
 801d96e:	46c0      	nop			; (mov r8, r8)
 801d970:	200001b0 	.word	0x200001b0

0801d974 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 801d974:	f3ef 8010 	mrs	r0, PRIMASK
 801d978:	b672      	cpsid	i
 801d97a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801d97c:	46c0      	nop			; (mov r8, r8)
 801d97e:	0018      	movs	r0, r3

0801d980 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 801d980:	f380 8810 	msr	PRIMASK, r0
 801d984:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 801d986:	46c0      	nop			; (mov r8, r8)
	...

0801d990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801d990:	f3ef 8009 	mrs	r0, PSP
 801d994:	4b0e      	ldr	r3, [pc, #56]	; (801d9d0 <pxCurrentTCBConst>)
 801d996:	681a      	ldr	r2, [r3, #0]
 801d998:	3820      	subs	r0, #32
 801d99a:	6010      	str	r0, [r2, #0]
 801d99c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801d99e:	4644      	mov	r4, r8
 801d9a0:	464d      	mov	r5, r9
 801d9a2:	4656      	mov	r6, sl
 801d9a4:	465f      	mov	r7, fp
 801d9a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801d9a8:	b508      	push	{r3, lr}
 801d9aa:	b672      	cpsid	i
 801d9ac:	f7ff f8f8 	bl	801cba0 <vTaskSwitchContext>
 801d9b0:	b662      	cpsie	i
 801d9b2:	bc0c      	pop	{r2, r3}
 801d9b4:	6811      	ldr	r1, [r2, #0]
 801d9b6:	6808      	ldr	r0, [r1, #0]
 801d9b8:	3010      	adds	r0, #16
 801d9ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801d9bc:	46a0      	mov	r8, r4
 801d9be:	46a9      	mov	r9, r5
 801d9c0:	46b2      	mov	sl, r6
 801d9c2:	46bb      	mov	fp, r7
 801d9c4:	f380 8809 	msr	PSP, r0
 801d9c8:	3820      	subs	r0, #32
 801d9ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801d9cc:	4718      	bx	r3
 801d9ce:	46c0      	nop			; (mov r8, r8)

0801d9d0 <pxCurrentTCBConst>:
 801d9d0:	20001248 	.word	0x20001248
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 801d9d4:	46c0      	nop			; (mov r8, r8)
 801d9d6:	46c0      	nop			; (mov r8, r8)

0801d9d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b082      	sub	sp, #8
 801d9dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801d9de:	f7ff ffc9 	bl	801d974 <ulSetInterruptMaskFromISR>
 801d9e2:	0003      	movs	r3, r0
 801d9e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801d9e6:	f7ff f82b 	bl	801ca40 <xTaskIncrementTick>
 801d9ea:	1e03      	subs	r3, r0, #0
 801d9ec:	d003      	beq.n	801d9f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801d9ee:	4b06      	ldr	r3, [pc, #24]	; (801da08 <xPortSysTickHandler+0x30>)
 801d9f0:	2280      	movs	r2, #128	; 0x80
 801d9f2:	0552      	lsls	r2, r2, #21
 801d9f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	0018      	movs	r0, r3
 801d9fa:	f7ff ffc1 	bl	801d980 <vClearInterruptMaskFromISR>
}
 801d9fe:	46c0      	nop			; (mov r8, r8)
 801da00:	46bd      	mov	sp, r7
 801da02:	b002      	add	sp, #8
 801da04:	bd80      	pop	{r7, pc}
 801da06:	46c0      	nop			; (mov r8, r8)
 801da08:	e000ed04 	.word	0xe000ed04

0801da0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801da0c:	b580      	push	{r7, lr}
 801da0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801da10:	4b0b      	ldr	r3, [pc, #44]	; (801da40 <vPortSetupTimerInterrupt+0x34>)
 801da12:	2200      	movs	r2, #0
 801da14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801da16:	4b0b      	ldr	r3, [pc, #44]	; (801da44 <vPortSetupTimerInterrupt+0x38>)
 801da18:	2200      	movs	r2, #0
 801da1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801da1c:	4b0a      	ldr	r3, [pc, #40]	; (801da48 <vPortSetupTimerInterrupt+0x3c>)
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	22fa      	movs	r2, #250	; 0xfa
 801da22:	0091      	lsls	r1, r2, #2
 801da24:	0018      	movs	r0, r3
 801da26:	f7e8 fbf7 	bl	8006218 <__udivsi3>
 801da2a:	0003      	movs	r3, r0
 801da2c:	001a      	movs	r2, r3
 801da2e:	4b07      	ldr	r3, [pc, #28]	; (801da4c <vPortSetupTimerInterrupt+0x40>)
 801da30:	3a01      	subs	r2, #1
 801da32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801da34:	4b02      	ldr	r3, [pc, #8]	; (801da40 <vPortSetupTimerInterrupt+0x34>)
 801da36:	2207      	movs	r2, #7
 801da38:	601a      	str	r2, [r3, #0]
}
 801da3a:	46c0      	nop			; (mov r8, r8)
 801da3c:	46bd      	mov	sp, r7
 801da3e:	bd80      	pop	{r7, pc}
 801da40:	e000e010 	.word	0xe000e010
 801da44:	e000e018 	.word	0xe000e018
 801da48:	20000118 	.word	0x20000118
 801da4c:	e000e014 	.word	0xe000e014

0801da50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b086      	sub	sp, #24
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801da58:	2300      	movs	r3, #0
 801da5a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801da5c:	f7fe ff4a 	bl	801c8f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801da60:	4b4b      	ldr	r3, [pc, #300]	; (801db90 <pvPortMalloc+0x140>)
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d101      	bne.n	801da6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801da68:	f000 f8ec 	bl	801dc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801da6c:	4b49      	ldr	r3, [pc, #292]	; (801db94 <pvPortMalloc+0x144>)
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	687a      	ldr	r2, [r7, #4]
 801da72:	4013      	ands	r3, r2
 801da74:	d000      	beq.n	801da78 <pvPortMalloc+0x28>
 801da76:	e07e      	b.n	801db76 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d012      	beq.n	801daa4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 801da7e:	2208      	movs	r2, #8
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	189b      	adds	r3, r3, r2
 801da84:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	2207      	movs	r2, #7
 801da8a:	4013      	ands	r3, r2
 801da8c:	d00a      	beq.n	801daa4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	2207      	movs	r2, #7
 801da92:	4393      	bics	r3, r2
 801da94:	3308      	adds	r3, #8
 801da96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	2207      	movs	r2, #7
 801da9c:	4013      	ands	r3, r2
 801da9e:	d001      	beq.n	801daa4 <pvPortMalloc+0x54>
 801daa0:	b672      	cpsid	i
 801daa2:	e7fe      	b.n	801daa2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d065      	beq.n	801db76 <pvPortMalloc+0x126>
 801daaa:	4b3b      	ldr	r3, [pc, #236]	; (801db98 <pvPortMalloc+0x148>)
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	687a      	ldr	r2, [r7, #4]
 801dab0:	429a      	cmp	r2, r3
 801dab2:	d860      	bhi.n	801db76 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801dab4:	4b39      	ldr	r3, [pc, #228]	; (801db9c <pvPortMalloc+0x14c>)
 801dab6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801dab8:	4b38      	ldr	r3, [pc, #224]	; (801db9c <pvPortMalloc+0x14c>)
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801dabe:	e004      	b.n	801daca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 801dac0:	697b      	ldr	r3, [r7, #20]
 801dac2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801dac4:	697b      	ldr	r3, [r7, #20]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801daca:	697b      	ldr	r3, [r7, #20]
 801dacc:	685b      	ldr	r3, [r3, #4]
 801dace:	687a      	ldr	r2, [r7, #4]
 801dad0:	429a      	cmp	r2, r3
 801dad2:	d903      	bls.n	801dadc <pvPortMalloc+0x8c>
 801dad4:	697b      	ldr	r3, [r7, #20]
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d1f1      	bne.n	801dac0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801dadc:	4b2c      	ldr	r3, [pc, #176]	; (801db90 <pvPortMalloc+0x140>)
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	697a      	ldr	r2, [r7, #20]
 801dae2:	429a      	cmp	r2, r3
 801dae4:	d047      	beq.n	801db76 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801dae6:	693b      	ldr	r3, [r7, #16]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	2208      	movs	r2, #8
 801daec:	189b      	adds	r3, r3, r2
 801daee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801daf0:	697b      	ldr	r3, [r7, #20]
 801daf2:	681a      	ldr	r2, [r3, #0]
 801daf4:	693b      	ldr	r3, [r7, #16]
 801daf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801daf8:	697b      	ldr	r3, [r7, #20]
 801dafa:	685a      	ldr	r2, [r3, #4]
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	1ad2      	subs	r2, r2, r3
 801db00:	2308      	movs	r3, #8
 801db02:	005b      	lsls	r3, r3, #1
 801db04:	429a      	cmp	r2, r3
 801db06:	d916      	bls.n	801db36 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801db08:	697a      	ldr	r2, [r7, #20]
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	18d3      	adds	r3, r2, r3
 801db0e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801db10:	68bb      	ldr	r3, [r7, #8]
 801db12:	2207      	movs	r2, #7
 801db14:	4013      	ands	r3, r2
 801db16:	d001      	beq.n	801db1c <pvPortMalloc+0xcc>
 801db18:	b672      	cpsid	i
 801db1a:	e7fe      	b.n	801db1a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801db1c:	697b      	ldr	r3, [r7, #20]
 801db1e:	685a      	ldr	r2, [r3, #4]
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	1ad2      	subs	r2, r2, r3
 801db24:	68bb      	ldr	r3, [r7, #8]
 801db26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801db28:	697b      	ldr	r3, [r7, #20]
 801db2a:	687a      	ldr	r2, [r7, #4]
 801db2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801db2e:	68bb      	ldr	r3, [r7, #8]
 801db30:	0018      	movs	r0, r3
 801db32:	f000 f8e7 	bl	801dd04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801db36:	4b18      	ldr	r3, [pc, #96]	; (801db98 <pvPortMalloc+0x148>)
 801db38:	681a      	ldr	r2, [r3, #0]
 801db3a:	697b      	ldr	r3, [r7, #20]
 801db3c:	685b      	ldr	r3, [r3, #4]
 801db3e:	1ad2      	subs	r2, r2, r3
 801db40:	4b15      	ldr	r3, [pc, #84]	; (801db98 <pvPortMalloc+0x148>)
 801db42:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801db44:	4b14      	ldr	r3, [pc, #80]	; (801db98 <pvPortMalloc+0x148>)
 801db46:	681a      	ldr	r2, [r3, #0]
 801db48:	4b15      	ldr	r3, [pc, #84]	; (801dba0 <pvPortMalloc+0x150>)
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	429a      	cmp	r2, r3
 801db4e:	d203      	bcs.n	801db58 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801db50:	4b11      	ldr	r3, [pc, #68]	; (801db98 <pvPortMalloc+0x148>)
 801db52:	681a      	ldr	r2, [r3, #0]
 801db54:	4b12      	ldr	r3, [pc, #72]	; (801dba0 <pvPortMalloc+0x150>)
 801db56:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801db58:	697b      	ldr	r3, [r7, #20]
 801db5a:	685a      	ldr	r2, [r3, #4]
 801db5c:	4b0d      	ldr	r3, [pc, #52]	; (801db94 <pvPortMalloc+0x144>)
 801db5e:	681b      	ldr	r3, [r3, #0]
 801db60:	431a      	orrs	r2, r3
 801db62:	697b      	ldr	r3, [r7, #20]
 801db64:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801db66:	697b      	ldr	r3, [r7, #20]
 801db68:	2200      	movs	r2, #0
 801db6a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801db6c:	4b0d      	ldr	r3, [pc, #52]	; (801dba4 <pvPortMalloc+0x154>)
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	1c5a      	adds	r2, r3, #1
 801db72:	4b0c      	ldr	r3, [pc, #48]	; (801dba4 <pvPortMalloc+0x154>)
 801db74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801db76:	f7fe fec9 	bl	801c90c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	2207      	movs	r2, #7
 801db7e:	4013      	ands	r3, r2
 801db80:	d001      	beq.n	801db86 <pvPortMalloc+0x136>
 801db82:	b672      	cpsid	i
 801db84:	e7fe      	b.n	801db84 <pvPortMalloc+0x134>
	return pvReturn;
 801db86:	68fb      	ldr	r3, [r7, #12]
}
 801db88:	0018      	movs	r0, r3
 801db8a:	46bd      	mov	sp, r7
 801db8c:	b006      	add	sp, #24
 801db8e:	bd80      	pop	{r7, pc}
 801db90:	200033d4 	.word	0x200033d4
 801db94:	200033e8 	.word	0x200033e8
 801db98:	200033d8 	.word	0x200033d8
 801db9c:	200033cc 	.word	0x200033cc
 801dba0:	200033dc 	.word	0x200033dc
 801dba4:	200033e0 	.word	0x200033e0

0801dba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b084      	sub	sp, #16
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	d03a      	beq.n	801dc30 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801dbba:	2308      	movs	r3, #8
 801dbbc:	425b      	negs	r3, r3
 801dbbe:	68fa      	ldr	r2, [r7, #12]
 801dbc0:	18d3      	adds	r3, r2, r3
 801dbc2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801dbc4:	68fb      	ldr	r3, [r7, #12]
 801dbc6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801dbc8:	68bb      	ldr	r3, [r7, #8]
 801dbca:	685a      	ldr	r2, [r3, #4]
 801dbcc:	4b1a      	ldr	r3, [pc, #104]	; (801dc38 <vPortFree+0x90>)
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	4013      	ands	r3, r2
 801dbd2:	d101      	bne.n	801dbd8 <vPortFree+0x30>
 801dbd4:	b672      	cpsid	i
 801dbd6:	e7fe      	b.n	801dbd6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801dbd8:	68bb      	ldr	r3, [r7, #8]
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	2b00      	cmp	r3, #0
 801dbde:	d001      	beq.n	801dbe4 <vPortFree+0x3c>
 801dbe0:	b672      	cpsid	i
 801dbe2:	e7fe      	b.n	801dbe2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801dbe4:	68bb      	ldr	r3, [r7, #8]
 801dbe6:	685a      	ldr	r2, [r3, #4]
 801dbe8:	4b13      	ldr	r3, [pc, #76]	; (801dc38 <vPortFree+0x90>)
 801dbea:	681b      	ldr	r3, [r3, #0]
 801dbec:	4013      	ands	r3, r2
 801dbee:	d01f      	beq.n	801dc30 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801dbf0:	68bb      	ldr	r3, [r7, #8]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d11b      	bne.n	801dc30 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801dbf8:	68bb      	ldr	r3, [r7, #8]
 801dbfa:	685a      	ldr	r2, [r3, #4]
 801dbfc:	4b0e      	ldr	r3, [pc, #56]	; (801dc38 <vPortFree+0x90>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	43db      	mvns	r3, r3
 801dc02:	401a      	ands	r2, r3
 801dc04:	68bb      	ldr	r3, [r7, #8]
 801dc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801dc08:	f7fe fe74 	bl	801c8f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801dc0c:	68bb      	ldr	r3, [r7, #8]
 801dc0e:	685a      	ldr	r2, [r3, #4]
 801dc10:	4b0a      	ldr	r3, [pc, #40]	; (801dc3c <vPortFree+0x94>)
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	18d2      	adds	r2, r2, r3
 801dc16:	4b09      	ldr	r3, [pc, #36]	; (801dc3c <vPortFree+0x94>)
 801dc18:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801dc1a:	68bb      	ldr	r3, [r7, #8]
 801dc1c:	0018      	movs	r0, r3
 801dc1e:	f000 f871 	bl	801dd04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801dc22:	4b07      	ldr	r3, [pc, #28]	; (801dc40 <vPortFree+0x98>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	1c5a      	adds	r2, r3, #1
 801dc28:	4b05      	ldr	r3, [pc, #20]	; (801dc40 <vPortFree+0x98>)
 801dc2a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 801dc2c:	f7fe fe6e 	bl	801c90c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801dc30:	46c0      	nop			; (mov r8, r8)
 801dc32:	46bd      	mov	sp, r7
 801dc34:	b004      	add	sp, #16
 801dc36:	bd80      	pop	{r7, pc}
 801dc38:	200033e8 	.word	0x200033e8
 801dc3c:	200033d8 	.word	0x200033d8
 801dc40:	200033e4 	.word	0x200033e4

0801dc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801dc44:	b580      	push	{r7, lr}
 801dc46:	b084      	sub	sp, #16
 801dc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801dc4a:	4b27      	ldr	r3, [pc, #156]	; (801dce8 <prvHeapInit+0xa4>)
 801dc4c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801dc4e:	4b27      	ldr	r3, [pc, #156]	; (801dcec <prvHeapInit+0xa8>)
 801dc50:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	2207      	movs	r2, #7
 801dc56:	4013      	ands	r3, r2
 801dc58:	d00c      	beq.n	801dc74 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801dc5a:	68fb      	ldr	r3, [r7, #12]
 801dc5c:	3307      	adds	r3, #7
 801dc5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	2207      	movs	r2, #7
 801dc64:	4393      	bics	r3, r2
 801dc66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801dc68:	68ba      	ldr	r2, [r7, #8]
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	1ad2      	subs	r2, r2, r3
 801dc6e:	4b1f      	ldr	r3, [pc, #124]	; (801dcec <prvHeapInit+0xa8>)
 801dc70:	18d3      	adds	r3, r2, r3
 801dc72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801dc78:	4b1d      	ldr	r3, [pc, #116]	; (801dcf0 <prvHeapInit+0xac>)
 801dc7a:	687a      	ldr	r2, [r7, #4]
 801dc7c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801dc7e:	4b1c      	ldr	r3, [pc, #112]	; (801dcf0 <prvHeapInit+0xac>)
 801dc80:	2200      	movs	r2, #0
 801dc82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	68ba      	ldr	r2, [r7, #8]
 801dc88:	18d3      	adds	r3, r2, r3
 801dc8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801dc8c:	2208      	movs	r2, #8
 801dc8e:	68fb      	ldr	r3, [r7, #12]
 801dc90:	1a9b      	subs	r3, r3, r2
 801dc92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801dc94:	68fb      	ldr	r3, [r7, #12]
 801dc96:	2207      	movs	r2, #7
 801dc98:	4393      	bics	r3, r2
 801dc9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801dc9c:	68fa      	ldr	r2, [r7, #12]
 801dc9e:	4b15      	ldr	r3, [pc, #84]	; (801dcf4 <prvHeapInit+0xb0>)
 801dca0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 801dca2:	4b14      	ldr	r3, [pc, #80]	; (801dcf4 <prvHeapInit+0xb0>)
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	2200      	movs	r2, #0
 801dca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801dcaa:	4b12      	ldr	r3, [pc, #72]	; (801dcf4 <prvHeapInit+0xb0>)
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	2200      	movs	r2, #0
 801dcb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801dcb6:	683b      	ldr	r3, [r7, #0]
 801dcb8:	68fa      	ldr	r2, [r7, #12]
 801dcba:	1ad2      	subs	r2, r2, r3
 801dcbc:	683b      	ldr	r3, [r7, #0]
 801dcbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801dcc0:	4b0c      	ldr	r3, [pc, #48]	; (801dcf4 <prvHeapInit+0xb0>)
 801dcc2:	681a      	ldr	r2, [r3, #0]
 801dcc4:	683b      	ldr	r3, [r7, #0]
 801dcc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801dcc8:	683b      	ldr	r3, [r7, #0]
 801dcca:	685a      	ldr	r2, [r3, #4]
 801dccc:	4b0a      	ldr	r3, [pc, #40]	; (801dcf8 <prvHeapInit+0xb4>)
 801dcce:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801dcd0:	683b      	ldr	r3, [r7, #0]
 801dcd2:	685a      	ldr	r2, [r3, #4]
 801dcd4:	4b09      	ldr	r3, [pc, #36]	; (801dcfc <prvHeapInit+0xb8>)
 801dcd6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801dcd8:	4b09      	ldr	r3, [pc, #36]	; (801dd00 <prvHeapInit+0xbc>)
 801dcda:	2280      	movs	r2, #128	; 0x80
 801dcdc:	0612      	lsls	r2, r2, #24
 801dcde:	601a      	str	r2, [r3, #0]
}
 801dce0:	46c0      	nop			; (mov r8, r8)
 801dce2:	46bd      	mov	sp, r7
 801dce4:	b004      	add	sp, #16
 801dce6:	bd80      	pop	{r7, pc}
 801dce8:	00001b58 	.word	0x00001b58
 801dcec:	20001874 	.word	0x20001874
 801dcf0:	200033cc 	.word	0x200033cc
 801dcf4:	200033d4 	.word	0x200033d4
 801dcf8:	200033dc 	.word	0x200033dc
 801dcfc:	200033d8 	.word	0x200033d8
 801dd00:	200033e8 	.word	0x200033e8

0801dd04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	b084      	sub	sp, #16
 801dd08:	af00      	add	r7, sp, #0
 801dd0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801dd0c:	4b27      	ldr	r3, [pc, #156]	; (801ddac <prvInsertBlockIntoFreeList+0xa8>)
 801dd0e:	60fb      	str	r3, [r7, #12]
 801dd10:	e002      	b.n	801dd18 <prvInsertBlockIntoFreeList+0x14>
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	60fb      	str	r3, [r7, #12]
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	687a      	ldr	r2, [r7, #4]
 801dd1e:	429a      	cmp	r2, r3
 801dd20:	d8f7      	bhi.n	801dd12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	685b      	ldr	r3, [r3, #4]
 801dd2a:	68ba      	ldr	r2, [r7, #8]
 801dd2c:	18d3      	adds	r3, r2, r3
 801dd2e:	687a      	ldr	r2, [r7, #4]
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d108      	bne.n	801dd46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	685a      	ldr	r2, [r3, #4]
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	685b      	ldr	r3, [r3, #4]
 801dd3c:	18d2      	adds	r2, r2, r3
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801dd4a:	687b      	ldr	r3, [r7, #4]
 801dd4c:	685b      	ldr	r3, [r3, #4]
 801dd4e:	68ba      	ldr	r2, [r7, #8]
 801dd50:	18d2      	adds	r2, r2, r3
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	429a      	cmp	r2, r3
 801dd58:	d118      	bne.n	801dd8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	681a      	ldr	r2, [r3, #0]
 801dd5e:	4b14      	ldr	r3, [pc, #80]	; (801ddb0 <prvInsertBlockIntoFreeList+0xac>)
 801dd60:	681b      	ldr	r3, [r3, #0]
 801dd62:	429a      	cmp	r2, r3
 801dd64:	d00d      	beq.n	801dd82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	685a      	ldr	r2, [r3, #4]
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	685b      	ldr	r3, [r3, #4]
 801dd70:	18d2      	adds	r2, r2, r3
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801dd76:	68fb      	ldr	r3, [r7, #12]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	681a      	ldr	r2, [r3, #0]
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	601a      	str	r2, [r3, #0]
 801dd80:	e008      	b.n	801dd94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801dd82:	4b0b      	ldr	r3, [pc, #44]	; (801ddb0 <prvInsertBlockIntoFreeList+0xac>)
 801dd84:	681a      	ldr	r2, [r3, #0]
 801dd86:	687b      	ldr	r3, [r7, #4]
 801dd88:	601a      	str	r2, [r3, #0]
 801dd8a:	e003      	b.n	801dd94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	681a      	ldr	r2, [r3, #0]
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801dd94:	68fa      	ldr	r2, [r7, #12]
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	429a      	cmp	r2, r3
 801dd9a:	d002      	beq.n	801dda2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	687a      	ldr	r2, [r7, #4]
 801dda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801dda2:	46c0      	nop			; (mov r8, r8)
 801dda4:	46bd      	mov	sp, r7
 801dda6:	b004      	add	sp, #16
 801dda8:	bd80      	pop	{r7, pc}
 801ddaa:	46c0      	nop			; (mov r8, r8)
 801ddac:	200033cc 	.word	0x200033cc
 801ddb0:	200033d4 	.word	0x200033d4

0801ddb4 <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801ddb8:	f7f9 fde6 	bl	8017988 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801ddbc:	f000 f830 	bl	801de20 <USBPD_DPM_InitCore>
 801ddc0:	1e03      	subs	r3, r0, #0
 801ddc2:	d000      	beq.n	801ddc6 <MX_USBPD_Init+0x12>
  {
    while(1);
 801ddc4:	e7fe      	b.n	801ddc4 <MX_USBPD_Init+0x10>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 801ddc6:	4b0a      	ldr	r3, [pc, #40]	; (801ddf0 <MX_USBPD_Init+0x3c>)
 801ddc8:	4a0a      	ldr	r2, [pc, #40]	; (801ddf4 <MX_USBPD_Init+0x40>)
 801ddca:	490b      	ldr	r1, [pc, #44]	; (801ddf8 <MX_USBPD_Init+0x44>)
 801ddcc:	480b      	ldr	r0, [pc, #44]	; (801ddfc <MX_USBPD_Init+0x48>)
 801ddce:	f004 fd77 	bl	80228c0 <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 801ddd2:	f000 fb7d 	bl	801e4d0 <USBPD_DPM_UserInit>
 801ddd6:	1e03      	subs	r3, r0, #0
 801ddd8:	d000      	beq.n	801dddc <MX_USBPD_Init+0x28>
  {
    while(1);
 801ddda:	e7fe      	b.n	801ddda <MX_USBPD_Init+0x26>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 801dddc:	f000 f8f8 	bl	801dfd0 <USBPD_DPM_InitOS>
 801dde0:	1e03      	subs	r3, r0, #0
 801dde2:	d000      	beq.n	801dde6 <MX_USBPD_Init+0x32>
  {
    while(1);
 801dde4:	e7fe      	b.n	801dde4 <MX_USBPD_Init+0x30>
  __ASM volatile ("cpsie i" : : : "memory");
 801dde6:	b662      	cpsie	i
}
 801dde8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 801ddea:	46c0      	nop			; (mov r8, r8)
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bd80      	pop	{r7, pc}
 801ddf0:	0801866d 	.word	0x0801866d
 801ddf4:	08018645 	.word	0x08018645
 801ddf8:	0801de11 	.word	0x0801de11
 801ddfc:	0801de01 	.word	0x0801de01

0801de00 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
__weak const uint8_t* BSP_GetBoardName(void)
{
 801de00:	b580      	push	{r7, lr}
 801de02:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_NAME;
 801de04:	4b01      	ldr	r3, [pc, #4]	; (801de0c <BSP_GetBoardName+0xc>)
}
 801de06:	0018      	movs	r0, r3
 801de08:	46bd      	mov	sp, r7
 801de0a:	bd80      	pop	{r7, pc}
 801de0c:	0802a084 	.word	0x0802a084

0801de10 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
__weak const uint8_t* BSP_GetBoardID(void)
{
 801de10:	b580      	push	{r7, lr}
 801de12:	af00      	add	r7, sp, #0
  return (const uint8_t*)BSP_BOARD_ID;
 801de14:	4b01      	ldr	r3, [pc, #4]	; (801de1c <BSP_GetBoardID+0xc>)
}
 801de16:	0018      	movs	r0, r3
 801de18:	46bd      	mov	sp, r7
 801de1a:	bd80      	pop	{r7, pc}
 801de1c:	0802a090 	.word	0x0802a090

0801de20 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801de20:	b5b0      	push	{r4, r5, r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801de26:	1dfb      	adds	r3, r7, #7
 801de28:	2200      	movs	r2, #0
 801de2a:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801de2c:	4b63      	ldr	r3, [pc, #396]	; (801dfbc <USBPD_DPM_InitCore+0x19c>)
 801de2e:	0018      	movs	r0, r3
 801de30:	f7e3 fb54 	bl	80014dc <USBPD_PE_CheckLIB>
 801de34:	0003      	movs	r3, r0
 801de36:	2b01      	cmp	r3, #1
 801de38:	d003      	beq.n	801de42 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801de3a:	1dfb      	adds	r3, r7, #7
 801de3c:	2202      	movs	r2, #2
 801de3e:	701a      	strb	r2, [r3, #0]
    goto error;
 801de40:	e0b6      	b.n	801dfb0 <USBPD_DPM_InitCore+0x190>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801de42:	f7e3 fb59 	bl	80014f8 <USBPD_PE_GetMemoryConsumption>
 801de46:	0003      	movs	r3, r0
 801de48:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 801de4a:	f7f7 ff6f 	bl	8015d2c <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801de4e:	1dbb      	adds	r3, r7, #6
 801de50:	2200      	movs	r2, #0
 801de52:	701a      	strb	r2, [r3, #0]
 801de54:	e0a6      	b.n	801dfa4 <USBPD_DPM_InitCore+0x184>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801de56:	1dbb      	adds	r3, r7, #6
 801de58:	781b      	ldrb	r3, [r3, #0]
 801de5a:	4a59      	ldr	r2, [pc, #356]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801de5c:	009b      	lsls	r3, r3, #2
 801de5e:	18d3      	adds	r3, r2, r3
 801de60:	785a      	ldrb	r2, [r3, #1]
 801de62:	2108      	movs	r1, #8
 801de64:	438a      	bics	r2, r1
 801de66:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801de68:	1dbb      	adds	r3, r7, #6
 801de6a:	781a      	ldrb	r2, [r3, #0]
 801de6c:	1dbb      	adds	r3, r7, #6
 801de6e:	7818      	ldrb	r0, [r3, #0]
 801de70:	4954      	ldr	r1, [pc, #336]	; (801dfc4 <USBPD_DPM_InitCore+0x1a4>)
 801de72:	0013      	movs	r3, r2
 801de74:	005b      	lsls	r3, r3, #1
 801de76:	189b      	adds	r3, r3, r2
 801de78:	009b      	lsls	r3, r3, #2
 801de7a:	18cb      	adds	r3, r1, r3
 801de7c:	791b      	ldrb	r3, [r3, #4]
 801de7e:	079b      	lsls	r3, r3, #30
 801de80:	0f9b      	lsrs	r3, r3, #30
 801de82:	b2d9      	uxtb	r1, r3
 801de84:	4b4e      	ldr	r3, [pc, #312]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801de86:	0082      	lsls	r2, r0, #2
 801de88:	2003      	movs	r0, #3
 801de8a:	4001      	ands	r1, r0
 801de8c:	000c      	movs	r4, r1
 801de8e:	5cd1      	ldrb	r1, [r2, r3]
 801de90:	2003      	movs	r0, #3
 801de92:	4381      	bics	r1, r0
 801de94:	1c08      	adds	r0, r1, #0
 801de96:	1c21      	adds	r1, r4, #0
 801de98:	4301      	orrs	r1, r0
 801de9a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801de9c:	1dbb      	adds	r3, r7, #6
 801de9e:	781a      	ldrb	r2, [r3, #0]
 801dea0:	1dbb      	adds	r3, r7, #6
 801dea2:	7818      	ldrb	r0, [r3, #0]
 801dea4:	4947      	ldr	r1, [pc, #284]	; (801dfc4 <USBPD_DPM_InitCore+0x1a4>)
 801dea6:	0013      	movs	r3, r2
 801dea8:	005b      	lsls	r3, r3, #1
 801deaa:	189b      	adds	r3, r3, r2
 801deac:	009b      	lsls	r3, r3, #2
 801deae:	18cb      	adds	r3, r1, r3
 801deb0:	791b      	ldrb	r3, [r3, #4]
 801deb2:	075b      	lsls	r3, r3, #29
 801deb4:	0fdb      	lsrs	r3, r3, #31
 801deb6:	b2d9      	uxtb	r1, r3
 801deb8:	4b41      	ldr	r3, [pc, #260]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801deba:	0082      	lsls	r2, r0, #2
 801debc:	2001      	movs	r0, #1
 801debe:	4001      	ands	r1, r0
 801dec0:	008c      	lsls	r4, r1, #2
 801dec2:	5cd1      	ldrb	r1, [r2, r3]
 801dec4:	2004      	movs	r0, #4
 801dec6:	4381      	bics	r1, r0
 801dec8:	1c08      	adds	r0, r1, #0
 801deca:	1c21      	adds	r1, r4, #0
 801decc:	4301      	orrs	r1, r0
 801dece:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801ded0:	1dbb      	adds	r3, r7, #6
 801ded2:	781a      	ldrb	r2, [r3, #0]
 801ded4:	4b3a      	ldr	r3, [pc, #232]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801ded6:	0092      	lsls	r2, r2, #2
 801ded8:	5cd1      	ldrb	r1, [r2, r3]
 801deda:	2010      	movs	r0, #16
 801dedc:	4381      	bics	r1, r0
 801dede:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801dee0:	1dbb      	adds	r3, r7, #6
 801dee2:	781a      	ldrb	r2, [r3, #0]
 801dee4:	4b36      	ldr	r3, [pc, #216]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801dee6:	0092      	lsls	r2, r2, #2
 801dee8:	5cd1      	ldrb	r1, [r2, r3]
 801deea:	203f      	movs	r0, #63	; 0x3f
 801deec:	4001      	ands	r1, r0
 801deee:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801def0:	1dbb      	adds	r3, r7, #6
 801def2:	781b      	ldrb	r3, [r3, #0]
 801def4:	4a32      	ldr	r2, [pc, #200]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801def6:	009b      	lsls	r3, r3, #2
 801def8:	18d3      	adds	r3, r2, r3
 801defa:	785a      	ldrb	r2, [r3, #1]
 801defc:	2160      	movs	r1, #96	; 0x60
 801defe:	438a      	bics	r2, r1
 801df00:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801df02:	1dbb      	adds	r3, r7, #6
 801df04:	781b      	ldrb	r3, [r3, #0]
 801df06:	4a2e      	ldr	r2, [pc, #184]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801df08:	009b      	lsls	r3, r3, #2
 801df0a:	18d3      	adds	r3, r2, r3
 801df0c:	785a      	ldrb	r2, [r3, #1]
 801df0e:	217f      	movs	r1, #127	; 0x7f
 801df10:	400a      	ands	r2, r1
 801df12:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 801df14:	1dbb      	adds	r3, r7, #6
 801df16:	781a      	ldrb	r2, [r3, #0]
 801df18:	0013      	movs	r3, r2
 801df1a:	005b      	lsls	r3, r3, #1
 801df1c:	189b      	adds	r3, r3, r2
 801df1e:	009b      	lsls	r3, r3, #2
 801df20:	4a28      	ldr	r2, [pc, #160]	; (801dfc4 <USBPD_DPM_InitCore+0x1a4>)
 801df22:	189c      	adds	r4, r3, r2
 801df24:	1dbb      	adds	r3, r7, #6
 801df26:	781b      	ldrb	r3, [r3, #0]
 801df28:	009a      	lsls	r2, r3, #2
 801df2a:	4b25      	ldr	r3, [pc, #148]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801df2c:	18d2      	adds	r2, r2, r3
 801df2e:	4926      	ldr	r1, [pc, #152]	; (801dfc8 <USBPD_DPM_InitCore+0x1a8>)
 801df30:	1dbb      	adds	r3, r7, #6
 801df32:	7818      	ldrb	r0, [r3, #0]
 801df34:	0013      	movs	r3, r2
 801df36:	0022      	movs	r2, r4
 801df38:	f7e2 f8e6 	bl	8000108 <USBPD_CAD_Init>
 801df3c:	1e03      	subs	r3, r0, #0
 801df3e:	d003      	beq.n	801df48 <USBPD_DPM_InitCore+0x128>
 801df40:	1dfb      	adds	r3, r7, #7
 801df42:	2202      	movs	r2, #2
 801df44:	701a      	strb	r2, [r3, #0]
 801df46:	e033      	b.n	801dfb0 <USBPD_DPM_InitCore+0x190>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801df48:	1dbb      	adds	r3, r7, #6
 801df4a:	781a      	ldrb	r2, [r3, #0]
 801df4c:	0013      	movs	r3, r2
 801df4e:	005b      	lsls	r3, r3, #1
 801df50:	189b      	adds	r3, r3, r2
 801df52:	009b      	lsls	r3, r3, #2
 801df54:	4a1b      	ldr	r2, [pc, #108]	; (801dfc4 <USBPD_DPM_InitCore+0x1a4>)
 801df56:	1899      	adds	r1, r3, r2
 801df58:	1dbb      	adds	r3, r7, #6
 801df5a:	781b      	ldrb	r3, [r3, #0]
 801df5c:	009a      	lsls	r2, r3, #2
 801df5e:	4b18      	ldr	r3, [pc, #96]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801df60:	18d2      	adds	r2, r2, r3
 801df62:	1dfc      	adds	r4, r7, #7
 801df64:	4d19      	ldr	r5, [pc, #100]	; (801dfcc <USBPD_DPM_InitCore+0x1ac>)
 801df66:	1dbb      	adds	r3, r7, #6
 801df68:	7818      	ldrb	r0, [r3, #0]
 801df6a:	002b      	movs	r3, r5
 801df6c:	f7e2 f9aa 	bl	80002c4 <USBPD_PE_Init>
 801df70:	0003      	movs	r3, r0
 801df72:	7023      	strb	r3, [r4, #0]
 801df74:	1dfb      	adds	r3, r7, #7
 801df76:	781b      	ldrb	r3, [r3, #0]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	d119      	bne.n	801dfb0 <USBPD_DPM_InitCore+0x190>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801df7c:	1dbb      	adds	r3, r7, #6
 801df7e:	781b      	ldrb	r3, [r3, #0]
 801df80:	4a0f      	ldr	r2, [pc, #60]	; (801dfc0 <USBPD_DPM_InitCore+0x1a0>)
 801df82:	009b      	lsls	r3, r3, #2
 801df84:	18d3      	adds	r3, r2, r3
 801df86:	785a      	ldrb	r2, [r3, #1]
 801df88:	2108      	movs	r1, #8
 801df8a:	430a      	orrs	r2, r1
 801df8c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801df8e:	1dbb      	adds	r3, r7, #6
 801df90:	781b      	ldrb	r3, [r3, #0]
 801df92:	2101      	movs	r1, #1
 801df94:	0018      	movs	r0, r3
 801df96:	f7e2 f8e4 	bl	8000162 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801df9a:	1dbb      	adds	r3, r7, #6
 801df9c:	1dba      	adds	r2, r7, #6
 801df9e:	7812      	ldrb	r2, [r2, #0]
 801dfa0:	3201      	adds	r2, #1
 801dfa2:	701a      	strb	r2, [r3, #0]
 801dfa4:	1dbb      	adds	r3, r7, #6
 801dfa6:	781b      	ldrb	r3, [r3, #0]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d100      	bne.n	801dfae <USBPD_DPM_InitCore+0x18e>
 801dfac:	e753      	b.n	801de56 <USBPD_DPM_InitCore+0x36>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801dfae:	46c0      	nop			; (mov r8, r8)
  return _retr;
 801dfb0:	1dfb      	adds	r3, r7, #7
 801dfb2:	781b      	ldrb	r3, [r3, #0]
}
 801dfb4:	0018      	movs	r0, r3
 801dfb6:	46bd      	mov	sp, r7
 801dfb8:	b002      	add	sp, #8
 801dfba:	bdb0      	pop	{r4, r5, r7, pc}
 801dfbc:	30410000 	.word	0x30410000
 801dfc0:	200033fc 	.word	0x200033fc
 801dfc4:	200001b4 	.word	0x200001b4
 801dfc8:	0802b150 	.word	0x0802b150
 801dfcc:	0802b158 	.word	0x0802b158

0801dfd0 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 801dfd0:	b590      	push	{r4, r7, lr}
 801dfd2:	b08d      	sub	sp, #52	; 0x34
 801dfd4:	af00      	add	r7, sp, #0
  OS_INIT();
 801dfd6:	242f      	movs	r4, #47	; 0x2f
 801dfd8:	193b      	adds	r3, r7, r4
 801dfda:	2200      	movs	r2, #0
 801dfdc:	701a      	strb	r2, [r3, #0]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 801dfde:	2200      	movs	r2, #0
 801dfe0:	2102      	movs	r1, #2
 801dfe2:	2001      	movs	r0, #1
 801dfe4:	f7fd fa56 	bl	801b494 <osMessageQueueNew>
 801dfe8:	0002      	movs	r2, r0
 801dfea:	4b32      	ldr	r3, [pc, #200]	; (801e0b4 <USBPD_DPM_InitOS+0xe4>)
 801dfec:	601a      	str	r2, [r3, #0]
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 801dfee:	1d3b      	adds	r3, r7, #4
 801dff0:	0018      	movs	r0, r3
 801dff2:	2324      	movs	r3, #36	; 0x24
 801dff4:	001a      	movs	r2, r3
 801dff6:	2100      	movs	r1, #0
 801dff8:	f009 fd32 	bl	8027a60 <memset>
 801dffc:	1d3b      	adds	r3, r7, #4
 801dffe:	4a2e      	ldr	r2, [pc, #184]	; (801e0b8 <USBPD_DPM_InitOS+0xe8>)
 801e000:	601a      	str	r2, [r3, #0]
 801e002:	1d3b      	adds	r3, r7, #4
 801e004:	2296      	movs	r2, #150	; 0x96
 801e006:	00d2      	lsls	r2, r2, #3
 801e008:	615a      	str	r2, [r3, #20]
 801e00a:	1d3b      	adds	r3, r7, #4
 801e00c:	2230      	movs	r2, #48	; 0x30
 801e00e:	619a      	str	r2, [r3, #24]
 801e010:	1d3a      	adds	r2, r7, #4
 801e012:	4b2a      	ldr	r3, [pc, #168]	; (801e0bc <USBPD_DPM_InitOS+0xec>)
 801e014:	2100      	movs	r1, #0
 801e016:	0018      	movs	r0, r3
 801e018:	f7fd f93a 	bl	801b290 <osThreadNew>
 801e01c:	0002      	movs	r2, r0
 801e01e:	4b28      	ldr	r3, [pc, #160]	; (801e0c0 <USBPD_DPM_InitOS+0xf0>)
 801e020:	601a      	str	r2, [r3, #0]
 801e022:	4b27      	ldr	r3, [pc, #156]	; (801e0c0 <USBPD_DPM_InitOS+0xf0>)
 801e024:	681b      	ldr	r3, [r3, #0]
 801e026:	2b00      	cmp	r3, #0
 801e028:	d103      	bne.n	801e032 <USBPD_DPM_InitOS+0x62>
 801e02a:	193b      	adds	r3, r7, r4
 801e02c:	2202      	movs	r2, #2
 801e02e:	701a      	strb	r2, [r3, #0]
 801e030:	e039      	b.n	801e0a6 <USBPD_DPM_InitOS+0xd6>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801e032:	2300      	movs	r3, #0
 801e034:	62bb      	str	r3, [r7, #40]	; 0x28
 801e036:	e032      	b.n	801e09e <USBPD_DPM_InitOS+0xce>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 801e038:	2200      	movs	r2, #0
 801e03a:	2102      	movs	r1, #2
 801e03c:	2001      	movs	r0, #1
 801e03e:	f7fd fa29 	bl	801b494 <osMessageQueueNew>
 801e042:	0001      	movs	r1, r0
 801e044:	4b1f      	ldr	r3, [pc, #124]	; (801e0c4 <USBPD_DPM_InitOS+0xf4>)
 801e046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e048:	0092      	lsls	r2, r2, #2
 801e04a:	50d1      	str	r1, [r2, r3]

    if (index == USBPD_PORT_0)
 801e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d122      	bne.n	801e098 <USBPD_DPM_InitOS+0xc8>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 801e052:	1d3b      	adds	r3, r7, #4
 801e054:	0018      	movs	r0, r3
 801e056:	2324      	movs	r3, #36	; 0x24
 801e058:	001a      	movs	r2, r3
 801e05a:	2100      	movs	r1, #0
 801e05c:	f009 fd00 	bl	8027a60 <memset>
 801e060:	1d3b      	adds	r3, r7, #4
 801e062:	4a19      	ldr	r2, [pc, #100]	; (801e0c8 <USBPD_DPM_InitOS+0xf8>)
 801e064:	601a      	str	r2, [r3, #0]
 801e066:	1d3b      	adds	r3, r7, #4
 801e068:	22af      	movs	r2, #175	; 0xaf
 801e06a:	00d2      	lsls	r2, r2, #3
 801e06c:	615a      	str	r2, [r3, #20]
 801e06e:	1d3b      	adds	r3, r7, #4
 801e070:	2220      	movs	r2, #32
 801e072:	619a      	str	r2, [r3, #24]
 801e074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e076:	1d3a      	adds	r2, r7, #4
 801e078:	4b14      	ldr	r3, [pc, #80]	; (801e0cc <USBPD_DPM_InitOS+0xfc>)
 801e07a:	0018      	movs	r0, r3
 801e07c:	f7fd f908 	bl	801b290 <osThreadNew>
 801e080:	0002      	movs	r2, r0
 801e082:	4b13      	ldr	r3, [pc, #76]	; (801e0d0 <USBPD_DPM_InitOS+0x100>)
 801e084:	601a      	str	r2, [r3, #0]
 801e086:	4b12      	ldr	r3, [pc, #72]	; (801e0d0 <USBPD_DPM_InitOS+0x100>)
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	d104      	bne.n	801e098 <USBPD_DPM_InitOS+0xc8>
 801e08e:	232f      	movs	r3, #47	; 0x2f
 801e090:	18fb      	adds	r3, r7, r3
 801e092:	2202      	movs	r2, #2
 801e094:	701a      	strb	r2, [r3, #0]
 801e096:	e006      	b.n	801e0a6 <USBPD_DPM_InitOS+0xd6>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 801e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e09a:	3301      	adds	r3, #1
 801e09c:	62bb      	str	r3, [r7, #40]	; 0x28
 801e09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d0c9      	beq.n	801e038 <USBPD_DPM_InitOS+0x68>
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 801e0a4:	46c0      	nop			; (mov r8, r8)

  return _retr;
 801e0a6:	232f      	movs	r3, #47	; 0x2f
 801e0a8:	18fb      	adds	r3, r7, r3
 801e0aa:	781b      	ldrb	r3, [r3, #0]
}
 801e0ac:	0018      	movs	r0, r3
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	b00d      	add	sp, #52	; 0x34
 801e0b2:	bd90      	pop	{r4, r7, pc}
 801e0b4:	200033f0 	.word	0x200033f0
 801e0b8:	0802a098 	.word	0x0802a098
 801e0bc:	0801e1c9 	.word	0x0801e1c9
 801e0c0:	200033f4 	.word	0x200033f4
 801e0c4:	200033f8 	.word	0x200033f8
 801e0c8:	0802a09c 	.word	0x0802a09c
 801e0cc:	0801e165 	.word	0x0801e165
 801e0d0:	200033ec 	.word	0x200033ec

0801e0d4 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 801e0d4:	b580      	push	{r7, lr}
 801e0d6:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 801e0d8:	4b09      	ldr	r3, [pc, #36]	; (801e100 <USBPD_DPM_TimerCounter+0x2c>)
 801e0da:	785b      	ldrb	r3, [r3, #1]
 801e0dc:	2208      	movs	r2, #8
 801e0de:	4013      	ands	r3, r2
 801e0e0:	b2db      	uxtb	r3, r3
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d008      	beq.n	801e0f8 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 801e0e6:	2000      	movs	r0, #0
 801e0e8:	f000 fa6c 	bl	801e5c4 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 801e0ec:	2000      	movs	r0, #0
 801e0ee:	f7e2 f946 	bl	800037e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 801e0f2:	2000      	movs	r0, #0
 801e0f4:	f7e7 fa98 	bl	8005628 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 801e0f8:	46c0      	nop			; (mov r8, r8)
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	bd80      	pop	{r7, pc}
 801e0fe:	46c0      	nop			; (mov r8, r8)
 801e100:	200033fc 	.word	0x200033fc

0801e104 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b084      	sub	sp, #16
 801e108:	af00      	add	r7, sp, #0
 801e10a:	0002      	movs	r2, r0
 801e10c:	1dfb      	adds	r3, r7, #7
 801e10e:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801e110:	4b08      	ldr	r3, [pc, #32]	; (801e134 <USBPD_PE_TaskWakeUp+0x30>)
 801e112:	60fb      	str	r3, [r7, #12]
 801e114:	1dfb      	adds	r3, r7, #7
 801e116:	781a      	ldrb	r2, [r3, #0]
 801e118:	4b07      	ldr	r3, [pc, #28]	; (801e138 <USBPD_PE_TaskWakeUp+0x34>)
 801e11a:	0092      	lsls	r2, r2, #2
 801e11c:	58d0      	ldr	r0, [r2, r3]
 801e11e:	230c      	movs	r3, #12
 801e120:	18f9      	adds	r1, r7, r3
 801e122:	2300      	movs	r3, #0
 801e124:	2200      	movs	r2, #0
 801e126:	f7fd fa2f 	bl	801b588 <osMessageQueuePut>
}
 801e12a:	46c0      	nop			; (mov r8, r8)
 801e12c:	46bd      	mov	sp, r7
 801e12e:	b004      	add	sp, #16
 801e130:	bd80      	pop	{r7, pc}
 801e132:	46c0      	nop			; (mov r8, r8)
 801e134:	0000ffff 	.word	0x0000ffff
 801e138:	200033f8 	.word	0x200033f8

0801e13c <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801e13c:	b580      	push	{r7, lr}
 801e13e:	b082      	sub	sp, #8
 801e140:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 801e142:	4b06      	ldr	r3, [pc, #24]	; (801e15c <USBPD_DPM_CADTaskWakeUp+0x20>)
 801e144:	607b      	str	r3, [r7, #4]
 801e146:	4b06      	ldr	r3, [pc, #24]	; (801e160 <USBPD_DPM_CADTaskWakeUp+0x24>)
 801e148:	6818      	ldr	r0, [r3, #0]
 801e14a:	1d39      	adds	r1, r7, #4
 801e14c:	2300      	movs	r3, #0
 801e14e:	2200      	movs	r2, #0
 801e150:	f7fd fa1a 	bl	801b588 <osMessageQueuePut>
}
 801e154:	46c0      	nop			; (mov r8, r8)
 801e156:	46bd      	mov	sp, r7
 801e158:	b002      	add	sp, #8
 801e15a:	bd80      	pop	{r7, pc}
 801e15c:	0000ffff 	.word	0x0000ffff
 801e160:	200033f0 	.word	0x200033f0

0801e164 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 801e164:	b590      	push	{r4, r7, lr}
 801e166:	b087      	sub	sp, #28
 801e168:	af00      	add	r7, sp, #0
 801e16a:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 801e16c:	687a      	ldr	r2, [r7, #4]
 801e16e:	2317      	movs	r3, #23
 801e170:	18fb      	adds	r3, r7, r3
 801e172:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801e174:	2317      	movs	r3, #23
 801e176:	18fb      	adds	r3, r7, r3
 801e178:	781b      	ldrb	r3, [r3, #0]
 801e17a:	4a11      	ldr	r2, [pc, #68]	; (801e1c0 <USBPD_PE_Task+0x5c>)
 801e17c:	009b      	lsls	r3, r3, #2
 801e17e:	18d3      	adds	r3, r2, r3
 801e180:	785b      	ldrb	r3, [r3, #1]
 801e182:	06db      	lsls	r3, r3, #27
 801e184:	0fdb      	lsrs	r3, r3, #31
 801e186:	b2db      	uxtb	r3, r3
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d105      	bne.n	801e198 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 801e18c:	f7fd f916 	bl	801b3bc <osThreadGetId>
 801e190:	0003      	movs	r3, r0
 801e192:	0018      	movs	r0, r3
 801e194:	f7fd f91e 	bl	801b3d4 <osThreadSuspend>
    }

    _timing = USBPD_PE_StateMachine_SNK(_port);
 801e198:	2417      	movs	r4, #23
 801e19a:	193b      	adds	r3, r7, r4
 801e19c:	781b      	ldrb	r3, [r3, #0]
 801e19e:	0018      	movs	r0, r3
 801e1a0:	f7e3 fe42 	bl	8001e28 <USBPD_PE_StateMachine_SNK>
 801e1a4:	0003      	movs	r3, r0
 801e1a6:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 801e1a8:	193b      	adds	r3, r7, r4
 801e1aa:	781a      	ldrb	r2, [r3, #0]
 801e1ac:	4b05      	ldr	r3, [pc, #20]	; (801e1c4 <USBPD_PE_Task+0x60>)
 801e1ae:	0092      	lsls	r2, r2, #2
 801e1b0:	58d0      	ldr	r0, [r2, r3]
 801e1b2:	693b      	ldr	r3, [r7, #16]
 801e1b4:	220c      	movs	r2, #12
 801e1b6:	18b9      	adds	r1, r7, r2
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	f7fd fa41 	bl	801b640 <osMessageQueueGet>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 801e1be:	e7d9      	b.n	801e174 <USBPD_PE_Task+0x10>
 801e1c0:	200033fc 	.word	0x200033fc
 801e1c4:	200033f8 	.word	0x200033f8

0801e1c8 <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 801e1c8:	b580      	push	{r7, lr}
 801e1ca:	b084      	sub	sp, #16
 801e1cc:	af00      	add	r7, sp, #0
 801e1ce:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 801e1d0:	f7e1 ffce 	bl	8000170 <USBPD_CAD_Process>
 801e1d4:	0003      	movs	r3, r0
 801e1d6:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 801e1d8:	4b04      	ldr	r3, [pc, #16]	; (801e1ec <USBPD_CAD_Task+0x24>)
 801e1da:	6818      	ldr	r0, [r3, #0]
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	2208      	movs	r2, #8
 801e1e0:	18b9      	adds	r1, r7, r2
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	f7fd fa2c 	bl	801b640 <osMessageQueueGet>
    _timing = USBPD_CAD_Process();
 801e1e8:	e7f2      	b.n	801e1d0 <USBPD_CAD_Task+0x8>
 801e1ea:	46c0      	nop			; (mov r8, r8)
 801e1ec:	200033f0 	.word	0x200033f0

0801e1f0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801e1f0:	b580      	push	{r7, lr}
 801e1f2:	b086      	sub	sp, #24
 801e1f4:	af02      	add	r7, sp, #8
 801e1f6:	603a      	str	r2, [r7, #0]
 801e1f8:	1dfb      	adds	r3, r7, #7
 801e1fa:	1c02      	adds	r2, r0, #0
 801e1fc:	701a      	strb	r2, [r3, #0]
 801e1fe:	1dbb      	adds	r3, r7, #6
 801e200:	1c0a      	adds	r2, r1, #0
 801e202:	701a      	strb	r2, [r3, #0]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 801e204:	1dbb      	adds	r3, r7, #6
 801e206:	781a      	ldrb	r2, [r3, #0]
 801e208:	1dfb      	adds	r3, r7, #7
 801e20a:	7819      	ldrb	r1, [r3, #0]
 801e20c:	2300      	movs	r3, #0
 801e20e:	9300      	str	r3, [sp, #0]
 801e210:	2300      	movs	r3, #0
 801e212:	2003      	movs	r0, #3
 801e214:	f7f7 fda0 	bl	8015d58 <USBPD_TRACE_Add>
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801e218:	1dbb      	adds	r3, r7, #6
 801e21a:	781b      	ldrb	r3, [r3, #0]
 801e21c:	2b04      	cmp	r3, #4
 801e21e:	d009      	beq.n	801e234 <USBPD_DPM_CADCallback+0x44>
 801e220:	dd00      	ble.n	801e224 <USBPD_DPM_CADCallback+0x34>
 801e222:	e06f      	b.n	801e304 <USBPD_DPM_CADCallback+0x114>
 801e224:	2b03      	cmp	r3, #3
 801e226:	d01d      	beq.n	801e264 <USBPD_DPM_CADCallback+0x74>
 801e228:	dc6c      	bgt.n	801e304 <USBPD_DPM_CADCallback+0x114>
 801e22a:	2b01      	cmp	r3, #1
 801e22c:	d01a      	beq.n	801e264 <USBPD_DPM_CADCallback+0x74>
 801e22e:	2b02      	cmp	r3, #2
 801e230:	d00c      	beq.n	801e24c <USBPD_DPM_CADCallback+0x5c>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801e232:	e067      	b.n	801e304 <USBPD_DPM_CADCallback+0x114>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801e234:	1dfb      	adds	r3, r7, #7
 801e236:	781b      	ldrb	r3, [r3, #0]
 801e238:	2104      	movs	r1, #4
 801e23a:	0018      	movs	r0, r3
 801e23c:	f000 f968 	bl	801e510 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801e240:	1dfb      	adds	r3, r7, #7
 801e242:	781b      	ldrb	r3, [r3, #0]
 801e244:	0018      	movs	r0, r3
 801e246:	f000 f867 	bl	801e318 <DPM_StartPETask>
      break;
 801e24a:	e05c      	b.n	801e306 <USBPD_DPM_CADCallback+0x116>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801e24c:	1dfb      	adds	r3, r7, #7
 801e24e:	781b      	ldrb	r3, [r3, #0]
 801e250:	2102      	movs	r1, #2
 801e252:	0018      	movs	r0, r3
 801e254:	f000 f95c 	bl	801e510 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801e258:	1dfb      	adds	r3, r7, #7
 801e25a:	781b      	ldrb	r3, [r3, #0]
 801e25c:	0018      	movs	r0, r3
 801e25e:	f000 f85b 	bl	801e318 <DPM_StartPETask>
      break;
 801e262:	e050      	b.n	801e306 <USBPD_DPM_CADCallback+0x116>
      uint8_t _timeout = 0;
 801e264:	230f      	movs	r3, #15
 801e266:	18fb      	adds	r3, r7, r3
 801e268:	2200      	movs	r2, #0
 801e26a:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801e26c:	1dfb      	adds	r3, r7, #7
 801e26e:	781b      	ldrb	r3, [r3, #0]
 801e270:	0018      	movs	r0, r3
 801e272:	f7ff ff47 	bl	801e104 <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801e276:	e015      	b.n	801e2a4 <USBPD_DPM_CADCallback+0xb4>
        (void)OS_DELAY(1);
 801e278:	2001      	movs	r0, #1
 801e27a:	f7fd f8ef 	bl	801b45c <osDelay>
        _timeout++;
 801e27e:	210f      	movs	r1, #15
 801e280:	187b      	adds	r3, r7, r1
 801e282:	781a      	ldrb	r2, [r3, #0]
 801e284:	187b      	adds	r3, r7, r1
 801e286:	3201      	adds	r2, #1
 801e288:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801e28a:	187b      	adds	r3, r7, r1
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	2b1e      	cmp	r3, #30
 801e290:	d908      	bls.n	801e2a4 <USBPD_DPM_CADCallback+0xb4>
          (void)OS_TASK_SUSPEND(DPM_PEThreadId_Table[PortNum]);
 801e292:	1dfb      	adds	r3, r7, #7
 801e294:	781a      	ldrb	r2, [r3, #0]
 801e296:	4b1e      	ldr	r3, [pc, #120]	; (801e310 <USBPD_DPM_CADCallback+0x120>)
 801e298:	0092      	lsls	r2, r2, #2
 801e29a:	58d3      	ldr	r3, [r2, r3]
 801e29c:	0018      	movs	r0, r3
 801e29e:	f7fd f899 	bl	801b3d4 <osThreadSuspend>
          break;
 801e2a2:	e00a      	b.n	801e2ba <USBPD_DPM_CADCallback+0xca>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801e2a4:	1dfb      	adds	r3, r7, #7
 801e2a6:	781a      	ldrb	r2, [r3, #0]
 801e2a8:	4b19      	ldr	r3, [pc, #100]	; (801e310 <USBPD_DPM_CADCallback+0x120>)
 801e2aa:	0092      	lsls	r2, r2, #2
 801e2ac:	58d3      	ldr	r3, [r2, r3]
 801e2ae:	0018      	movs	r0, r3
 801e2b0:	f7fe f97a 	bl	801c5a8 <eTaskGetState>
 801e2b4:	0003      	movs	r3, r0
 801e2b6:	2b03      	cmp	r3, #3
 801e2b8:	d1de      	bne.n	801e278 <USBPD_DPM_CADCallback+0x88>
      USBPD_PE_StateMachine_Stop(PortNum);
 801e2ba:	1dfb      	adds	r3, r7, #7
 801e2bc:	781b      	ldrb	r3, [r3, #0]
 801e2be:	0018      	movs	r0, r3
 801e2c0:	f7e2 f8cb 	bl	800045a <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801e2c4:	1dfb      	adds	r3, r7, #7
 801e2c6:	781a      	ldrb	r2, [r3, #0]
 801e2c8:	4b12      	ldr	r3, [pc, #72]	; (801e314 <USBPD_DPM_CADCallback+0x124>)
 801e2ca:	0092      	lsls	r2, r2, #2
 801e2cc:	5cd1      	ldrb	r1, [r2, r3]
 801e2ce:	2010      	movs	r0, #16
 801e2d0:	4381      	bics	r1, r0
 801e2d2:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801e2d4:	1dfb      	adds	r3, r7, #7
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	4a0e      	ldr	r2, [pc, #56]	; (801e314 <USBPD_DPM_CADCallback+0x124>)
 801e2da:	009b      	lsls	r3, r3, #2
 801e2dc:	18d3      	adds	r3, r2, r3
 801e2de:	785a      	ldrb	r2, [r3, #1]
 801e2e0:	2107      	movs	r1, #7
 801e2e2:	438a      	bics	r2, r1
 801e2e4:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801e2e6:	1dbb      	adds	r3, r7, #6
 801e2e8:	781a      	ldrb	r2, [r3, #0]
 801e2ea:	1dfb      	adds	r3, r7, #7
 801e2ec:	781b      	ldrb	r3, [r3, #0]
 801e2ee:	0011      	movs	r1, r2
 801e2f0:	0018      	movs	r0, r3
 801e2f2:	f000 f90d 	bl	801e510 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801e2f6:	1dfb      	adds	r3, r7, #7
 801e2f8:	781b      	ldrb	r3, [r3, #0]
 801e2fa:	2169      	movs	r1, #105	; 0x69
 801e2fc:	0018      	movs	r0, r3
 801e2fe:	f000 f96b 	bl	801e5d8 <USBPD_DPM_Notification>
      break;
 801e302:	e000      	b.n	801e306 <USBPD_DPM_CADCallback+0x116>
      break;
 801e304:	46c0      	nop			; (mov r8, r8)
  }
}
 801e306:	46c0      	nop			; (mov r8, r8)
 801e308:	46bd      	mov	sp, r7
 801e30a:	b004      	add	sp, #16
 801e30c:	bd80      	pop	{r7, pc}
 801e30e:	46c0      	nop			; (mov r8, r8)
 801e310:	200033ec 	.word	0x200033ec
 801e314:	200033fc 	.word	0x200033fc

0801e318 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801e318:	b580      	push	{r7, lr}
 801e31a:	b082      	sub	sp, #8
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	0002      	movs	r2, r0
 801e320:	1dfb      	adds	r3, r7, #7
 801e322:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801e324:	1dfb      	adds	r3, r7, #7
 801e326:	781b      	ldrb	r3, [r3, #0]
 801e328:	0018      	movs	r0, r3
 801e32a:	f7e2 f890 	bl	800044e <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801e32e:	1dfb      	adds	r3, r7, #7
 801e330:	781b      	ldrb	r3, [r3, #0]
 801e332:	2b01      	cmp	r3, #1
 801e334:	d808      	bhi.n	801e348 <DPM_StartPETask+0x30>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801e336:	1dfb      	adds	r3, r7, #7
 801e338:	781a      	ldrb	r2, [r3, #0]
 801e33a:	4b0a      	ldr	r3, [pc, #40]	; (801e364 <DPM_StartPETask+0x4c>)
 801e33c:	0092      	lsls	r2, r2, #2
 801e33e:	58d3      	ldr	r3, [r2, r3]
 801e340:	0018      	movs	r0, r3
 801e342:	f7fd f869 	bl	801b418 <osThreadResume>
      break;
 801e346:	e002      	b.n	801e34e <DPM_StartPETask+0x36>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801e348:	f000 f80e 	bl	801e368 <USBPD_DPM_ErrorHandler>
      break;
 801e34c:	46c0      	nop			; (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801e34e:	1dfb      	adds	r3, r7, #7
 801e350:	781b      	ldrb	r3, [r3, #0]
 801e352:	2168      	movs	r1, #104	; 0x68
 801e354:	0018      	movs	r0, r3
 801e356:	f000 f93f 	bl	801e5d8 <USBPD_DPM_Notification>
}
 801e35a:	46c0      	nop			; (mov r8, r8)
 801e35c:	46bd      	mov	sp, r7
 801e35e:	b002      	add	sp, #8
 801e360:	bd80      	pop	{r7, pc}
 801e362:	46c0      	nop			; (mov r8, r8)
 801e364:	200033ec 	.word	0x200033ec

0801e368 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801e36c:	e7fe      	b.n	801e36c <USBPD_DPM_ErrorHandler+0x4>
	...

0801e370 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b084      	sub	sp, #16
 801e374:	af00      	add	r7, sp, #0
 801e376:	0002      	movs	r2, r0
 801e378:	1dfb      	adds	r3, r7, #7
 801e37a:	701a      	strb	r2, [r3, #0]
 801e37c:	1dbb      	adds	r3, r7, #6
 801e37e:	1c0a      	adds	r2, r1, #0
 801e380:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801e382:	230f      	movs	r3, #15
 801e384:	18fb      	adds	r3, r7, r3
 801e386:	2202      	movs	r2, #2
 801e388:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801e38a:	1dfb      	adds	r3, r7, #7
 801e38c:	781b      	ldrb	r3, [r3, #0]
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d001      	beq.n	801e396 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 801e392:	2302      	movs	r3, #2
 801e394:	e024      	b.n	801e3e0 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801e396:	1dfb      	adds	r3, r7, #7
 801e398:	781b      	ldrb	r3, [r3, #0]
 801e39a:	2208      	movs	r2, #8
 801e39c:	18ba      	adds	r2, r7, r2
 801e39e:	0011      	movs	r1, r2
 801e3a0:	0018      	movs	r0, r3
 801e3a2:	f001 fb7b 	bl	801fa9c <BSP_USBPD_PWR_VBUSGetVoltage>

  if (USBPD_VSAFE_0V == Vsafe)
 801e3a6:	1dbb      	adds	r3, r7, #6
 801e3a8:	781b      	ldrb	r3, [r3, #0]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d10a      	bne.n	801e3c4 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e3ae:	68bb      	ldr	r3, [r7, #8]
 801e3b0:	4a0d      	ldr	r2, [pc, #52]	; (801e3e8 <USBPD_PWR_IF_SupplyReady+0x78>)
 801e3b2:	4293      	cmp	r3, r2
 801e3b4:	d801      	bhi.n	801e3ba <USBPD_PWR_IF_SupplyReady+0x4a>
 801e3b6:	2200      	movs	r2, #0
 801e3b8:	e000      	b.n	801e3bc <USBPD_PWR_IF_SupplyReady+0x4c>
 801e3ba:	2202      	movs	r2, #2
 801e3bc:	230f      	movs	r3, #15
 801e3be:	18fb      	adds	r3, r7, r3
 801e3c0:	701a      	strb	r2, [r3, #0]
 801e3c2:	e00a      	b.n	801e3da <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801e3c4:	68ba      	ldr	r2, [r7, #8]
 801e3c6:	23af      	movs	r3, #175	; 0xaf
 801e3c8:	011b      	lsls	r3, r3, #4
 801e3ca:	429a      	cmp	r2, r3
 801e3cc:	d901      	bls.n	801e3d2 <USBPD_PWR_IF_SupplyReady+0x62>
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	e000      	b.n	801e3d4 <USBPD_PWR_IF_SupplyReady+0x64>
 801e3d2:	2202      	movs	r2, #2
 801e3d4:	230f      	movs	r3, #15
 801e3d6:	18fb      	adds	r3, r7, r3
 801e3d8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801e3da:	230f      	movs	r3, #15
 801e3dc:	18fb      	adds	r3, r7, r3
 801e3de:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801e3e0:	0018      	movs	r0, r3
 801e3e2:	46bd      	mov	sp, r7
 801e3e4:	b004      	add	sp, #16
 801e3e6:	bd80      	pop	{r7, pc}
 801e3e8:	000002ed 	.word	0x000002ed

0801e3ec <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801e3ec:	b580      	push	{r7, lr}
 801e3ee:	b084      	sub	sp, #16
 801e3f0:	af00      	add	r7, sp, #0
 801e3f2:	60ba      	str	r2, [r7, #8]
 801e3f4:	607b      	str	r3, [r7, #4]
 801e3f6:	230f      	movs	r3, #15
 801e3f8:	18fb      	adds	r3, r7, r3
 801e3fa:	1c02      	adds	r2, r0, #0
 801e3fc:	701a      	strb	r2, [r3, #0]
 801e3fe:	230e      	movs	r3, #14
 801e400:	18fb      	adds	r3, r7, r3
 801e402:	1c0a      	adds	r2, r1, #0
 801e404:	701a      	strb	r2, [r3, #0]
    {
      *Size = USBPD_NbPDO[0];
 801e406:	4b08      	ldr	r3, [pc, #32]	; (801e428 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801e408:	781b      	ldrb	r3, [r3, #0]
 801e40a:	001a      	movs	r2, r3
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 801e410:	4b05      	ldr	r3, [pc, #20]	; (801e428 <USBPD_PWR_IF_GetPortPDOs+0x3c>)
 801e412:	781b      	ldrb	r3, [r3, #0]
 801e414:	009a      	lsls	r2, r3, #2
 801e416:	4905      	ldr	r1, [pc, #20]	; (801e42c <USBPD_PWR_IF_GetPortPDOs+0x40>)
 801e418:	68bb      	ldr	r3, [r7, #8]
 801e41a:	0018      	movs	r0, r3
 801e41c:	f009 fcb9 	bl	8027d92 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801e420:	46c0      	nop			; (mov r8, r8)
 801e422:	46bd      	mov	sp, r7
 801e424:	b004      	add	sp, #16
 801e426:	bd80      	pop	{r7, pc}
 801e428:	2000023c 	.word	0x2000023c
 801e42c:	20000240 	.word	0x20000240

0801e430 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801e430:	b580      	push	{r7, lr}
 801e432:	b084      	sub	sp, #16
 801e434:	af00      	add	r7, sp, #0
 801e436:	0002      	movs	r2, r0
 801e438:	1dfb      	adds	r3, r7, #7
 801e43a:	701a      	strb	r2, [r3, #0]
 801e43c:	1dbb      	adds	r3, r7, #6
 801e43e:	1c0a      	adds	r2, r1, #0
 801e440:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801e442:	230f      	movs	r3, #15
 801e444:	18fb      	adds	r3, r7, r3
 801e446:	2200      	movs	r2, #0
 801e448:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801e44a:	1dfb      	adds	r3, r7, #7
 801e44c:	781b      	ldrb	r3, [r3, #0]
 801e44e:	0018      	movs	r0, r3
 801e450:	f7fa f8f8 	bl	8018644 <HW_IF_PWR_GetVoltage>
 801e454:	0003      	movs	r3, r0
 801e456:	60bb      	str	r3, [r7, #8]

  _vbus = 5000;
 801e458:	4b1b      	ldr	r3, [pc, #108]	; (801e4c8 <USBPD_PWR_IF_GetVBUSStatus+0x98>)
 801e45a:	60bb      	str	r3, [r7, #8]
  switch(PowerTypeStatus)
 801e45c:	1dbb      	adds	r3, r7, #6
 801e45e:	781b      	ldrb	r3, [r3, #0]
 801e460:	2b02      	cmp	r3, #2
 801e462:	d018      	beq.n	801e496 <USBPD_PWR_IF_GetVBUSStatus+0x66>
 801e464:	dc21      	bgt.n	801e4aa <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801e466:	2b00      	cmp	r3, #0
 801e468:	d002      	beq.n	801e470 <USBPD_PWR_IF_GetVBUSStatus+0x40>
 801e46a:	2b01      	cmp	r3, #1
 801e46c:	d009      	beq.n	801e482 <USBPD_PWR_IF_GetVBUSStatus+0x52>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801e46e:	e01c      	b.n	801e4aa <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e470:	68bb      	ldr	r3, [r7, #8]
 801e472:	4a16      	ldr	r2, [pc, #88]	; (801e4cc <USBPD_PWR_IF_GetVBUSStatus+0x9c>)
 801e474:	4293      	cmp	r3, r2
 801e476:	d81a      	bhi.n	801e4ae <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801e478:	230f      	movs	r3, #15
 801e47a:	18fb      	adds	r3, r7, r3
 801e47c:	2201      	movs	r2, #1
 801e47e:	701a      	strb	r2, [r3, #0]
    break;
 801e480:	e015      	b.n	801e4ae <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e482:	68ba      	ldr	r2, [r7, #8]
 801e484:	23af      	movs	r3, #175	; 0xaf
 801e486:	011b      	lsls	r3, r3, #4
 801e488:	429a      	cmp	r2, r3
 801e48a:	d312      	bcc.n	801e4b2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801e48c:	230f      	movs	r3, #15
 801e48e:	18fb      	adds	r3, r7, r3
 801e490:	2201      	movs	r2, #1
 801e492:	701a      	strb	r2, [r3, #0]
    break;
 801e494:	e00d      	b.n	801e4b2 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801e496:	68ba      	ldr	r2, [r7, #8]
 801e498:	23af      	movs	r3, #175	; 0xaf
 801e49a:	011b      	lsls	r3, r3, #4
 801e49c:	429a      	cmp	r2, r3
 801e49e:	d20a      	bcs.n	801e4b6 <USBPD_PWR_IF_GetVBUSStatus+0x86>
 801e4a0:	230f      	movs	r3, #15
 801e4a2:	18fb      	adds	r3, r7, r3
 801e4a4:	2201      	movs	r2, #1
 801e4a6:	701a      	strb	r2, [r3, #0]
    break;
 801e4a8:	e005      	b.n	801e4b6 <USBPD_PWR_IF_GetVBUSStatus+0x86>
    break;
 801e4aa:	46c0      	nop			; (mov r8, r8)
 801e4ac:	e004      	b.n	801e4b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801e4ae:	46c0      	nop			; (mov r8, r8)
 801e4b0:	e002      	b.n	801e4b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801e4b2:	46c0      	nop			; (mov r8, r8)
 801e4b4:	e000      	b.n	801e4b8 <USBPD_PWR_IF_GetVBUSStatus+0x88>
    break;
 801e4b6:	46c0      	nop			; (mov r8, r8)
  }
  return _status;
 801e4b8:	230f      	movs	r3, #15
 801e4ba:	18fb      	adds	r3, r7, r3
 801e4bc:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801e4be:	0018      	movs	r0, r3
 801e4c0:	46bd      	mov	sp, r7
 801e4c2:	b004      	add	sp, #16
 801e4c4:	bd80      	pop	{r7, pc}
 801e4c6:	46c0      	nop			; (mov r8, r8)
 801e4c8:	00001388 	.word	0x00001388
 801e4cc:	000002ed 	.word	0x000002ed

0801e4d0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 801e4d0:	b580      	push	{r7, lr}
 801e4d2:	af00      	add	r7, sp, #0
  {
	return USBPD_ERROR;
  }*/


  return USBPD_OK;
 801e4d4:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801e4d6:	0018      	movs	r0, r3
 801e4d8:	46bd      	mov	sp, r7
 801e4da:	bd80      	pop	{r7, pc}

0801e4dc <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 801e4dc:	b580      	push	{r7, lr}
 801e4de:	b084      	sub	sp, #16
 801e4e0:	af00      	add	r7, sp, #0
 801e4e2:	60f8      	str	r0, [r7, #12]
 801e4e4:	60b9      	str	r1, [r7, #8]
 801e4e6:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 801e4e8:	4b06      	ldr	r3, [pc, #24]	; (801e504 <USBPD_DPM_SetNotification_GUI+0x28>)
 801e4ea:	68ba      	ldr	r2, [r7, #8]
 801e4ec:	601a      	str	r2, [r3, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 801e4ee:	4b06      	ldr	r3, [pc, #24]	; (801e508 <USBPD_DPM_SetNotification_GUI+0x2c>)
 801e4f0:	68fa      	ldr	r2, [r7, #12]
 801e4f2:	601a      	str	r2, [r3, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 801e4f4:	4b05      	ldr	r3, [pc, #20]	; (801e50c <USBPD_DPM_SetNotification_GUI+0x30>)
 801e4f6:	687a      	ldr	r2, [r7, #4]
 801e4f8:	601a      	str	r2, [r3, #0]
}
 801e4fa:	46c0      	nop			; (mov r8, r8)
 801e4fc:	46bd      	mov	sp, r7
 801e4fe:	b004      	add	sp, #16
 801e500:	bd80      	pop	{r7, pc}
 801e502:	46c0      	nop			; (mov r8, r8)
 801e504:	20003400 	.word	0x20003400
 801e508:	20003404 	.word	0x20003404
 801e50c:	20003408 	.word	0x20003408

0801e510 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801e510:	b590      	push	{r4, r7, lr}
 801e512:	b093      	sub	sp, #76	; 0x4c
 801e514:	af02      	add	r7, sp, #8
 801e516:	0002      	movs	r2, r0
 801e518:	1dfb      	adds	r3, r7, #7
 801e51a:	701a      	strb	r2, [r3, #0]
 801e51c:	1dbb      	adds	r3, r7, #6
 801e51e:	1c0a      	adds	r2, r1, #0
 801e520:	701a      	strb	r2, [r3, #0]
  switch(State)
 801e522:	1dbb      	adds	r3, r7, #6
 801e524:	781b      	ldrb	r3, [r3, #0]
 801e526:	2b02      	cmp	r3, #2
 801e528:	d001      	beq.n	801e52e <USBPD_DPM_UserCableDetection+0x1e>
 801e52a:	2b04      	cmp	r3, #4
 801e52c:	d10b      	bne.n	801e546 <USBPD_DPM_UserCableDetection+0x36>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801e52e:	4b22      	ldr	r3, [pc, #136]	; (801e5b8 <USBPD_DPM_UserCableDetection+0xa8>)
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d013      	beq.n	801e55e <USBPD_DPM_UserCableDetection+0x4e>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 801e536:	4b20      	ldr	r3, [pc, #128]	; (801e5b8 <USBPD_DPM_UserCableDetection+0xa8>)
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	1dfa      	adds	r2, r7, #7
 801e53c:	7810      	ldrb	r0, [r2, #0]
 801e53e:	2200      	movs	r2, #0
 801e540:	2120      	movs	r1, #32
 801e542:	4798      	blx	r3
    }
    break;
 801e544:	e00b      	b.n	801e55e <USBPD_DPM_UserCableDetection+0x4e>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 801e546:	4b1c      	ldr	r3, [pc, #112]	; (801e5b8 <USBPD_DPM_UserCableDetection+0xa8>)
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d008      	beq.n	801e560 <USBPD_DPM_UserCableDetection+0x50>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 801e54e:	4b1a      	ldr	r3, [pc, #104]	; (801e5b8 <USBPD_DPM_UserCableDetection+0xa8>)
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	1dfa      	adds	r2, r7, #7
 801e554:	7810      	ldrb	r0, [r2, #0]
 801e556:	4919      	ldr	r1, [pc, #100]	; (801e5bc <USBPD_DPM_UserCableDetection+0xac>)
 801e558:	2200      	movs	r2, #0
 801e55a:	4798      	blx	r3
 801e55c:	e000      	b.n	801e560 <USBPD_DPM_UserCableDetection+0x50>
    break;
 801e55e:	46c0      	nop			; (mov r8, r8)
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801e560:	4a17      	ldr	r2, [pc, #92]	; (801e5c0 <USBPD_DPM_UserCableDetection+0xb0>)
 801e562:	240c      	movs	r4, #12
 801e564:	193b      	adds	r3, r7, r4
 801e566:	2132      	movs	r1, #50	; 0x32
 801e568:	0018      	movs	r0, r3
 801e56a:	f009 f9d9 	bl	8027920 <sniprintf>
 801e56e:	0002      	movs	r2, r0
 801e570:	213f      	movs	r1, #63	; 0x3f
 801e572:	187b      	adds	r3, r7, r1
 801e574:	701a      	strb	r2, [r3, #0]
 801e576:	187b      	adds	r3, r7, r1
 801e578:	781b      	ldrb	r3, [r3, #0]
 801e57a:	2b31      	cmp	r3, #49	; 0x31
 801e57c:	d80d      	bhi.n	801e59a <USBPD_DPM_UserCableDetection+0x8a>
 801e57e:	193b      	adds	r3, r7, r4
 801e580:	0018      	movs	r0, r3
 801e582:	f7e7 fe2d 	bl	80061e0 <strlen>
 801e586:	193a      	adds	r2, r7, r4
 801e588:	1dfb      	adds	r3, r7, #7
 801e58a:	7819      	ldrb	r1, [r3, #0]
 801e58c:	9000      	str	r0, [sp, #0]
 801e58e:	0013      	movs	r3, r2
 801e590:	2200      	movs	r2, #0
 801e592:	2006      	movs	r0, #6
 801e594:	f7f7 fbe0 	bl	8015d58 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801e598:	e00a      	b.n	801e5b0 <USBPD_DPM_UserCableDetection+0xa0>
DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_UserCableDetection");
 801e59a:	230c      	movs	r3, #12
 801e59c:	18fa      	adds	r2, r7, r3
 801e59e:	1dfb      	adds	r3, r7, #7
 801e5a0:	7819      	ldrb	r1, [r3, #0]
 801e5a2:	2332      	movs	r3, #50	; 0x32
 801e5a4:	9300      	str	r3, [sp, #0]
 801e5a6:	0013      	movs	r3, r2
 801e5a8:	2200      	movs	r2, #0
 801e5aa:	2006      	movs	r0, #6
 801e5ac:	f7f7 fbd4 	bl	8015d58 <USBPD_TRACE_Add>
}
 801e5b0:	46c0      	nop			; (mov r8, r8)
 801e5b2:	46bd      	mov	sp, r7
 801e5b4:	b011      	add	sp, #68	; 0x44
 801e5b6:	bd90      	pop	{r4, r7, pc}
 801e5b8:	20003404 	.word	0x20003404
 801e5bc:	00008020 	.word	0x00008020
 801e5c0:	0802a0a4 	.word	0x0802a0a4

0801e5c4 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 801e5c4:	b580      	push	{r7, lr}
 801e5c6:	b082      	sub	sp, #8
 801e5c8:	af00      	add	r7, sp, #0
 801e5ca:	0002      	movs	r2, r0
 801e5cc:	1dfb      	adds	r3, r7, #7
 801e5ce:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 801e5d0:	46c0      	nop			; (mov r8, r8)
 801e5d2:	46bd      	mov	sp, r7
 801e5d4:	b002      	add	sp, #8
 801e5d6:	bd80      	pop	{r7, pc}

0801e5d8 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801e5d8:	b590      	push	{r4, r7, lr}
 801e5da:	b095      	sub	sp, #84	; 0x54
 801e5dc:	af02      	add	r7, sp, #8
 801e5de:	0002      	movs	r2, r0
 801e5e0:	1dfb      	adds	r3, r7, #7
 801e5e2:	701a      	strb	r2, [r3, #0]
 801e5e4:	1dbb      	adds	r3, r7, #6
 801e5e6:	1c0a      	adds	r2, r1, #0
 801e5e8:	701a      	strb	r2, [r3, #0]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 801e5ea:	4b39      	ldr	r3, [pc, #228]	; (801e6d0 <USBPD_DPM_Notification+0xf8>)
 801e5ec:	681b      	ldr	r3, [r3, #0]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d008      	beq.n	801e604 <USBPD_DPM_Notification+0x2c>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 801e5f2:	4b37      	ldr	r3, [pc, #220]	; (801e6d0 <USBPD_DPM_Notification+0xf8>)
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	1dba      	adds	r2, r7, #6
 801e5f8:	7812      	ldrb	r2, [r2, #0]
 801e5fa:	b291      	uxth	r1, r2
 801e5fc:	1dfa      	adds	r2, r7, #7
 801e5fe:	7812      	ldrb	r2, [r2, #0]
 801e600:	0010      	movs	r0, r2
 801e602:	4798      	blx	r3
  }
/* USER CODE BEGIN USBPD_DPM_Notification */
  /* Manage event notified by the stack? */
  switch(EventVal)
 801e604:	1dbb      	adds	r3, r7, #6
 801e606:	781b      	ldrb	r3, [r3, #0]
 801e608:	2b10      	cmp	r3, #16
 801e60a:	d002      	beq.n	801e612 <USBPD_DPM_Notification+0x3a>
 801e60c:	2b20      	cmp	r3, #32
 801e60e:	d015      	beq.n	801e63c <USBPD_DPM_Notification+0x64>
 801e610:	e02f      	b.n	801e672 <USBPD_DPM_Notification+0x9a>
  {
    case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
    	char _str[50];
    	sprintf(_str,"POWER_EXPLICIT_CONTRACT notification as DPM notif");
 801e612:	4a30      	ldr	r2, [pc, #192]	; (801e6d4 <USBPD_DPM_Notification+0xfc>)
 801e614:	240c      	movs	r4, #12
 801e616:	193b      	adds	r3, r7, r4
 801e618:	0011      	movs	r1, r2
 801e61a:	0018      	movs	r0, r3
 801e61c:	f009 f9b4 	bl	8027988 <siprintf>
    	USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t*)_str, strlen(_str));
 801e620:	193b      	adds	r3, r7, r4
 801e622:	0018      	movs	r0, r3
 801e624:	f7e7 fddc 	bl	80061e0 <strlen>
 801e628:	193a      	adds	r2, r7, r4
 801e62a:	1dfb      	adds	r3, r7, #7
 801e62c:	7819      	ldrb	r1, [r3, #0]
 801e62e:	9000      	str	r0, [sp, #0]
 801e630:	0013      	movs	r3, r2
 801e632:	2200      	movs	r2, #0
 801e634:	2006      	movs	r0, #6
 801e636:	f7f7 fb8f 	bl	8015d58 <USBPD_TRACE_Add>
      break;
 801e63a:	e044      	b.n	801e6c6 <USBPD_DPM_Notification+0xee>
//    case USBPD_NOTIFY_REQUEST_WAIT:
//      break;
//    case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE:
//      break;
    case USBPD_NOTIFY_STATE_SNK_READY:
    	uint32_t voltage = BSP_PWR_VBUSGetVoltage(0);
 801e63c:	2000      	movs	r0, #0
 801e63e:	f001 f9a3 	bl	801f988 <BSP_PWR_VBUSGetVoltage>
 801e642:	0003      	movs	r3, r0
 801e644:	647b      	str	r3, [r7, #68]	; 0x44

    	char _str2[50];
		// Use snprintf to limit the number of characters written
		int len = snprintf(_str2, sizeof(_str2), "--------Output Enabled--------");
 801e646:	4a24      	ldr	r2, [pc, #144]	; (801e6d8 <USBPD_DPM_Notification+0x100>)
 801e648:	240c      	movs	r4, #12
 801e64a:	193b      	adds	r3, r7, r4
 801e64c:	2132      	movs	r1, #50	; 0x32
 801e64e:	0018      	movs	r0, r3
 801e650:	f009 f966 	bl	8027920 <sniprintf>
 801e654:	0003      	movs	r3, r0
 801e656:	643b      	str	r3, [r7, #64]	; 0x40
		USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 801e658:	193b      	adds	r3, r7, r4
 801e65a:	0018      	movs	r0, r3
 801e65c:	f7e7 fdc0 	bl	80061e0 <strlen>
 801e660:	0002      	movs	r2, r0
 801e662:	193b      	adds	r3, r7, r4
 801e664:	9200      	str	r2, [sp, #0]
 801e666:	2200      	movs	r2, #0
 801e668:	2100      	movs	r1, #0
 801e66a:	2006      	movs	r0, #6
 801e66c:	f7f7 fb74 	bl	8015d58 <USBPD_TRACE_Add>
      break;
 801e670:	e029      	b.n	801e6c6 <USBPD_DPM_Notification+0xee>
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801e672:	1dbb      	adds	r3, r7, #6
 801e674:	781b      	ldrb	r3, [r3, #0]
 801e676:	4a19      	ldr	r2, [pc, #100]	; (801e6dc <USBPD_DPM_Notification+0x104>)
 801e678:	240c      	movs	r4, #12
 801e67a:	1938      	adds	r0, r7, r4
 801e67c:	2132      	movs	r1, #50	; 0x32
 801e67e:	f009 f94f 	bl	8027920 <sniprintf>
 801e682:	0002      	movs	r2, r0
 801e684:	213f      	movs	r1, #63	; 0x3f
 801e686:	187b      	adds	r3, r7, r1
 801e688:	701a      	strb	r2, [r3, #0]
 801e68a:	187b      	adds	r3, r7, r1
 801e68c:	781b      	ldrb	r3, [r3, #0]
 801e68e:	2b31      	cmp	r3, #49	; 0x31
 801e690:	d80d      	bhi.n	801e6ae <USBPD_DPM_Notification+0xd6>
 801e692:	193b      	adds	r3, r7, r4
 801e694:	0018      	movs	r0, r3
 801e696:	f7e7 fda3 	bl	80061e0 <strlen>
 801e69a:	193a      	adds	r2, r7, r4
 801e69c:	1dfb      	adds	r3, r7, #7
 801e69e:	7819      	ldrb	r1, [r3, #0]
 801e6a0:	9000      	str	r0, [sp, #0]
 801e6a2:	0013      	movs	r3, r2
 801e6a4:	2200      	movs	r2, #0
 801e6a6:	2006      	movs	r0, #6
 801e6a8:	f7f7 fb56 	bl	8015d58 <USBPD_TRACE_Add>
      break;
 801e6ac:	e00a      	b.n	801e6c4 <USBPD_DPM_Notification+0xec>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801e6ae:	230c      	movs	r3, #12
 801e6b0:	18fa      	adds	r2, r7, r3
 801e6b2:	1dfb      	adds	r3, r7, #7
 801e6b4:	7819      	ldrb	r1, [r3, #0]
 801e6b6:	2332      	movs	r3, #50	; 0x32
 801e6b8:	9300      	str	r3, [sp, #0]
 801e6ba:	0013      	movs	r3, r2
 801e6bc:	2200      	movs	r2, #0
 801e6be:	2006      	movs	r0, #6
 801e6c0:	f7f7 fb4a 	bl	8015d58 <USBPD_TRACE_Add>
      break;
 801e6c4:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801e6c6:	46c0      	nop			; (mov r8, r8)
 801e6c8:	46bd      	mov	sp, r7
 801e6ca:	b013      	add	sp, #76	; 0x4c
 801e6cc:	bd90      	pop	{r4, r7, pc}
 801e6ce:	46c0      	nop			; (mov r8, r8)
 801e6d0:	20003400 	.word	0x20003400
 801e6d4:	0802a0d0 	.word	0x0802a0d0
 801e6d8:	0802a104 	.word	0x0802a104
 801e6dc:	0802a124 	.word	0x0802a124

0801e6e0 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801e6e0:	b590      	push	{r4, r7, lr}
 801e6e2:	b093      	sub	sp, #76	; 0x4c
 801e6e4:	af02      	add	r7, sp, #8
 801e6e6:	6039      	str	r1, [r7, #0]
 801e6e8:	0011      	movs	r1, r2
 801e6ea:	1dfb      	adds	r3, r7, #7
 801e6ec:	1c02      	adds	r2, r0, #0
 801e6ee:	701a      	strb	r2, [r3, #0]
 801e6f0:	1dbb      	adds	r3, r7, #6
 801e6f2:	1c0a      	adds	r2, r1, #0
 801e6f4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801e6f6:	4a16      	ldr	r2, [pc, #88]	; (801e750 <USBPD_DPM_HardReset+0x70>)
 801e6f8:	240c      	movs	r4, #12
 801e6fa:	193b      	adds	r3, r7, r4
 801e6fc:	2132      	movs	r1, #50	; 0x32
 801e6fe:	0018      	movs	r0, r3
 801e700:	f009 f90e 	bl	8027920 <sniprintf>
 801e704:	0002      	movs	r2, r0
 801e706:	213f      	movs	r1, #63	; 0x3f
 801e708:	187b      	adds	r3, r7, r1
 801e70a:	701a      	strb	r2, [r3, #0]
 801e70c:	187b      	adds	r3, r7, r1
 801e70e:	781b      	ldrb	r3, [r3, #0]
 801e710:	2b31      	cmp	r3, #49	; 0x31
 801e712:	d80d      	bhi.n	801e730 <USBPD_DPM_HardReset+0x50>
 801e714:	193b      	adds	r3, r7, r4
 801e716:	0018      	movs	r0, r3
 801e718:	f7e7 fd62 	bl	80061e0 <strlen>
 801e71c:	193a      	adds	r2, r7, r4
 801e71e:	1dfb      	adds	r3, r7, #7
 801e720:	7819      	ldrb	r1, [r3, #0]
 801e722:	9000      	str	r0, [sp, #0]
 801e724:	0013      	movs	r3, r2
 801e726:	2200      	movs	r2, #0
 801e728:	2006      	movs	r0, #6
 801e72a:	f7f7 fb15 	bl	8015d58 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_HardReset */
}
 801e72e:	e00a      	b.n	801e746 <USBPD_DPM_HardReset+0x66>
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
 801e730:	230c      	movs	r3, #12
 801e732:	18fa      	adds	r2, r7, r3
 801e734:	1dfb      	adds	r3, r7, #7
 801e736:	7819      	ldrb	r1, [r3, #0]
 801e738:	2332      	movs	r3, #50	; 0x32
 801e73a:	9300      	str	r3, [sp, #0]
 801e73c:	0013      	movs	r3, r2
 801e73e:	2200      	movs	r2, #0
 801e740:	2006      	movs	r0, #6
 801e742:	f7f7 fb09 	bl	8015d58 <USBPD_TRACE_Add>
}
 801e746:	46c0      	nop			; (mov r8, r8)
 801e748:	46bd      	mov	sp, r7
 801e74a:	b011      	add	sp, #68	; 0x44
 801e74c:	bd90      	pop	{r4, r7, pc}
 801e74e:	46c0      	nop			; (mov r8, r8)
 801e750:	0802a148 	.word	0x0802a148

0801e754 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801e754:	b590      	push	{r4, r7, lr}
 801e756:	b097      	sub	sp, #92	; 0x5c
 801e758:	af02      	add	r7, sp, #8
 801e75a:	60ba      	str	r2, [r7, #8]
 801e75c:	607b      	str	r3, [r7, #4]
 801e75e:	230f      	movs	r3, #15
 801e760:	18fb      	adds	r3, r7, r3
 801e762:	1c02      	adds	r2, r0, #0
 801e764:	701a      	strb	r2, [r3, #0]
 801e766:	200e      	movs	r0, #14
 801e768:	183b      	adds	r3, r7, r0
 801e76a:	1c0a      	adds	r2, r1, #0
 801e76c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801e76e:	183b      	adds	r3, r7, r0
 801e770:	781b      	ldrb	r3, [r3, #0]
 801e772:	2b01      	cmp	r3, #1
 801e774:	d002      	beq.n	801e77c <USBPD_DPM_GetDataInfo+0x28>
 801e776:	2b0a      	cmp	r3, #10
 801e778:	d011      	beq.n	801e79e <USBPD_DPM_GetDataInfo+0x4a>
 801e77a:	e01e      	b.n	801e7ba <USBPD_DPM_GetDataInfo+0x66>
  {

  case USBPD_CORE_DATATYPE_SNK_PDO: /*!< Handling of port Sink PDO, requested by get sink capa*/
  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801e77c:	687c      	ldr	r4, [r7, #4]
 801e77e:	68ba      	ldr	r2, [r7, #8]
 801e780:	230e      	movs	r3, #14
 801e782:	18fb      	adds	r3, r7, r3
 801e784:	7819      	ldrb	r1, [r3, #0]
 801e786:	230f      	movs	r3, #15
 801e788:	18fb      	adds	r3, r7, r3
 801e78a:	7818      	ldrb	r0, [r3, #0]
 801e78c:	0023      	movs	r3, r4
 801e78e:	f7ff fe2d 	bl	801e3ec <USBPD_PWR_IF_GetPortPDOs>
  *Size *= 4;
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	009a      	lsls	r2, r3, #2
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	601a      	str	r2, [r3, #0]
  break;
 801e79c:	e03a      	b.n	801e814 <USBPD_DPM_GetDataInfo+0xc0>

  case USBPD_CORE_PPS_STATUS :
	  {
		/* Get current drawn by sink */
		USBPD_PPSSDB_TypeDef pps_status = {0};
 801e79e:	2300      	movs	r3, #0
 801e7a0:	64bb      	str	r3, [r7, #72]	; 0x48
		/*
		pps_status.fields.OutputVoltageIn20mVunits  = 0xFFFF;
		pps_status.fields.OutputCurrentIn50mAunits  = 0xFF;
		pps_status.fields.RealTimeFlags             = USBPD_PPS_REALTIMEFLAGS_PTF_NOT_SUPPORTED | USBPD_PPS_REALTIMEFLAGS_OMF_DISABLED;*/

		*Size = 4;
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	2204      	movs	r2, #4
 801e7a6:	601a      	str	r2, [r3, #0]
		(void)memcpy((uint8_t*)Ptr, (uint8_t *)&pps_status.d32, *Size);
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	681a      	ldr	r2, [r3, #0]
 801e7ac:	2348      	movs	r3, #72	; 0x48
 801e7ae:	18f9      	adds	r1, r7, r3
 801e7b0:	68bb      	ldr	r3, [r7, #8]
 801e7b2:	0018      	movs	r0, r3
 801e7b4:	f009 faed 	bl	8027d92 <memcpy>
	  }
	  break;
 801e7b8:	e02c      	b.n	801e814 <USBPD_DPM_GetDataInfo+0xc0>
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801e7ba:	230e      	movs	r3, #14
 801e7bc:	18fb      	adds	r3, r7, r3
 801e7be:	781b      	ldrb	r3, [r3, #0]
 801e7c0:	4a16      	ldr	r2, [pc, #88]	; (801e81c <USBPD_DPM_GetDataInfo+0xc8>)
 801e7c2:	2414      	movs	r4, #20
 801e7c4:	1938      	adds	r0, r7, r4
 801e7c6:	2132      	movs	r1, #50	; 0x32
 801e7c8:	f009 f8aa 	bl	8027920 <sniprintf>
 801e7cc:	0002      	movs	r2, r0
 801e7ce:	214f      	movs	r1, #79	; 0x4f
 801e7d0:	187b      	adds	r3, r7, r1
 801e7d2:	701a      	strb	r2, [r3, #0]
 801e7d4:	187b      	adds	r3, r7, r1
 801e7d6:	781b      	ldrb	r3, [r3, #0]
 801e7d8:	2b31      	cmp	r3, #49	; 0x31
 801e7da:	d80e      	bhi.n	801e7fa <USBPD_DPM_GetDataInfo+0xa6>
 801e7dc:	193b      	adds	r3, r7, r4
 801e7de:	0018      	movs	r0, r3
 801e7e0:	f7e7 fcfe 	bl	80061e0 <strlen>
 801e7e4:	193a      	adds	r2, r7, r4
 801e7e6:	230f      	movs	r3, #15
 801e7e8:	18fb      	adds	r3, r7, r3
 801e7ea:	7819      	ldrb	r1, [r3, #0]
 801e7ec:	9000      	str	r0, [sp, #0]
 801e7ee:	0013      	movs	r3, r2
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	2006      	movs	r0, #6
 801e7f4:	f7f7 fab0 	bl	8015d58 <USBPD_TRACE_Add>
    break;
 801e7f8:	e00b      	b.n	801e812 <USBPD_DPM_GetDataInfo+0xbe>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
 801e7fa:	2314      	movs	r3, #20
 801e7fc:	18fa      	adds	r2, r7, r3
 801e7fe:	230f      	movs	r3, #15
 801e800:	18fb      	adds	r3, r7, r3
 801e802:	7819      	ldrb	r1, [r3, #0]
 801e804:	2332      	movs	r3, #50	; 0x32
 801e806:	9300      	str	r3, [sp, #0]
 801e808:	0013      	movs	r3, r2
 801e80a:	2200      	movs	r2, #0
 801e80c:	2006      	movs	r0, #6
 801e80e:	f7f7 faa3 	bl	8015d58 <USBPD_TRACE_Add>
    break;
 801e812:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801e814:	46c0      	nop			; (mov r8, r8)
 801e816:	46bd      	mov	sp, r7
 801e818:	b015      	add	sp, #84	; 0x54
 801e81a:	bd90      	pop	{r4, r7, pc}
 801e81c:	0802a16c 	.word	0x0802a16c

0801e820 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801e820:	b5b0      	push	{r4, r5, r7, lr}
 801e822:	b094      	sub	sp, #80	; 0x50
 801e824:	af02      	add	r7, sp, #8
 801e826:	60ba      	str	r2, [r7, #8]
 801e828:	607b      	str	r3, [r7, #4]
 801e82a:	230f      	movs	r3, #15
 801e82c:	18fb      	adds	r3, r7, r3
 801e82e:	1c02      	adds	r2, r0, #0
 801e830:	701a      	strb	r2, [r3, #0]
 801e832:	200e      	movs	r0, #14
 801e834:	183b      	adds	r3, r7, r0
 801e836:	1c0a      	adds	r2, r1, #0
 801e838:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801e83a:	183b      	adds	r3, r7, r0
 801e83c:	781b      	ldrb	r3, [r3, #0]
 801e83e:	2b04      	cmp	r3, #4
 801e840:	d002      	beq.n	801e848 <USBPD_DPM_SetDataInfo+0x28>
 801e842:	2b0a      	cmp	r3, #10
 801e844:	d00b      	beq.n	801e85e <USBPD_DPM_SetDataInfo+0x3e>
 801e846:	e01d      	b.n	801e884 <USBPD_DPM_SetDataInfo+0x64>
  {
  /* Case Received Source PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:         /*!< Storage of Received Source PDO values        */
       USBPD_USER_SERV_StoreSRCPDO(PortNum, Ptr, Size);
 801e848:	687a      	ldr	r2, [r7, #4]
 801e84a:	68b9      	ldr	r1, [r7, #8]
 801e84c:	230f      	movs	r3, #15
 801e84e:	18fb      	adds	r3, r7, r3
 801e850:	781b      	ldrb	r3, [r3, #0]
 801e852:	0018      	movs	r0, r3
 801e854:	f001 f9ec 	bl	801fc30 <USBPD_USER_SERV_StoreSRCPDO>
       USER_SERV_ExtractSRCCapa();
 801e858:	f002 f9ce 	bl	8020bf8 <USER_SERV_ExtractSRCCapa>
       break;
 801e85c:	e03f      	b.n	801e8de <USBPD_DPM_SetDataInfo+0xbe>

    case USBPD_CORE_PPS_STATUS :
	  {
		uint8_t*  ext_capa;
		ext_capa = (uint8_t*)&DPM_Ports[PortNum].DPM_RcvPPSStatus;
 801e85e:	230f      	movs	r3, #15
 801e860:	18fb      	adds	r3, r7, r3
 801e862:	781a      	ldrb	r2, [r3, #0]
 801e864:	0013      	movs	r3, r2
 801e866:	009b      	lsls	r3, r3, #2
 801e868:	189b      	adds	r3, r3, r2
 801e86a:	011b      	lsls	r3, r3, #4
 801e86c:	3320      	adds	r3, #32
 801e86e:	001a      	movs	r2, r3
 801e870:	4b25      	ldr	r3, [pc, #148]	; (801e908 <USBPD_DPM_SetDataInfo+0xe8>)
 801e872:	18d3      	adds	r3, r2, r3
 801e874:	647b      	str	r3, [r7, #68]	; 0x44
		memcpy(ext_capa, Ptr, Size);
 801e876:	687a      	ldr	r2, [r7, #4]
 801e878:	68b9      	ldr	r1, [r7, #8]
 801e87a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e87c:	0018      	movs	r0, r3
 801e87e:	f009 fa88 	bl	8027d92 <memcpy>
	  }
	  break;
 801e882:	e02c      	b.n	801e8de <USBPD_DPM_SetDataInfo+0xbe>
//  case USBPD_CORE_GET_BATTERY_CAPABILITY:     /*!< Storing of received Get Battery capability message content*/
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801e884:	230e      	movs	r3, #14
 801e886:	18fb      	adds	r3, r7, r3
 801e888:	781b      	ldrb	r3, [r3, #0]
 801e88a:	4a20      	ldr	r2, [pc, #128]	; (801e90c <USBPD_DPM_SetDataInfo+0xec>)
 801e88c:	2410      	movs	r4, #16
 801e88e:	1938      	adds	r0, r7, r4
 801e890:	2132      	movs	r1, #50	; 0x32
 801e892:	f009 f845 	bl	8027920 <sniprintf>
 801e896:	0002      	movs	r2, r0
 801e898:	2143      	movs	r1, #67	; 0x43
 801e89a:	187b      	adds	r3, r7, r1
 801e89c:	701a      	strb	r2, [r3, #0]
 801e89e:	187b      	adds	r3, r7, r1
 801e8a0:	781b      	ldrb	r3, [r3, #0]
 801e8a2:	2b31      	cmp	r3, #49	; 0x31
 801e8a4:	d80e      	bhi.n	801e8c4 <USBPD_DPM_SetDataInfo+0xa4>
 801e8a6:	193b      	adds	r3, r7, r4
 801e8a8:	0018      	movs	r0, r3
 801e8aa:	f7e7 fc99 	bl	80061e0 <strlen>
 801e8ae:	193a      	adds	r2, r7, r4
 801e8b0:	230f      	movs	r3, #15
 801e8b2:	18fb      	adds	r3, r7, r3
 801e8b4:	7819      	ldrb	r1, [r3, #0]
 801e8b6:	9000      	str	r0, [sp, #0]
 801e8b8:	0013      	movs	r3, r2
 801e8ba:	2200      	movs	r2, #0
 801e8bc:	2006      	movs	r0, #6
 801e8be:	f7f7 fa4b 	bl	8015d58 <USBPD_TRACE_Add>
    break;
 801e8c2:	e00b      	b.n	801e8dc <USBPD_DPM_SetDataInfo+0xbc>
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
 801e8c4:	2310      	movs	r3, #16
 801e8c6:	18fa      	adds	r2, r7, r3
 801e8c8:	230f      	movs	r3, #15
 801e8ca:	18fb      	adds	r3, r7, r3
 801e8cc:	7819      	ldrb	r1, [r3, #0]
 801e8ce:	2332      	movs	r3, #50	; 0x32
 801e8d0:	9300      	str	r3, [sp, #0]
 801e8d2:	0013      	movs	r3, r2
 801e8d4:	2200      	movs	r2, #0
 801e8d6:	2006      	movs	r0, #6
 801e8d8:	f7f7 fa3e 	bl	8015d58 <USBPD_TRACE_Add>
    break;
 801e8dc:	46c0      	nop			; (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 801e8de:	4b0c      	ldr	r3, [pc, #48]	; (801e910 <USBPD_DPM_SetDataInfo+0xf0>)
 801e8e0:	681b      	ldr	r3, [r3, #0]
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d00b      	beq.n	801e8fe <USBPD_DPM_SetDataInfo+0xde>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801e8e6:	4b0a      	ldr	r3, [pc, #40]	; (801e910 <USBPD_DPM_SetDataInfo+0xf0>)
 801e8e8:	681c      	ldr	r4, [r3, #0]
 801e8ea:	687d      	ldr	r5, [r7, #4]
 801e8ec:	68ba      	ldr	r2, [r7, #8]
 801e8ee:	230e      	movs	r3, #14
 801e8f0:	18fb      	adds	r3, r7, r3
 801e8f2:	7819      	ldrb	r1, [r3, #0]
 801e8f4:	230f      	movs	r3, #15
 801e8f6:	18fb      	adds	r3, r7, r3
 801e8f8:	7818      	ldrb	r0, [r3, #0]
 801e8fa:	002b      	movs	r3, r5
 801e8fc:	47a0      	blx	r4
  }
}
 801e8fe:	46c0      	nop			; (mov r8, r8)
 801e900:	46bd      	mov	sp, r7
 801e902:	b012      	add	sp, #72	; 0x48
 801e904:	bdb0      	pop	{r4, r5, r7, pc}
 801e906:	46c0      	nop			; (mov r8, r8)
 801e908:	20003410 	.word	0x20003410
 801e90c:	0802a194 	.word	0x0802a194
 801e910:	20003408 	.word	0x20003408

0801e914 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801e914:	b590      	push	{r4, r7, lr}
 801e916:	b085      	sub	sp, #20
 801e918:	af00      	add	r7, sp, #0
 801e91a:	60b9      	str	r1, [r7, #8]
 801e91c:	607a      	str	r2, [r7, #4]
 801e91e:	240f      	movs	r4, #15
 801e920:	193b      	adds	r3, r7, r4
 801e922:	1c02      	adds	r2, r0, #0
 801e924:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

	/* Variable PDO*/
	USBPD_USER_SERV_EvaluateCapa(PortNum, PtrRequestData, PtrPowerObjectType);
 801e926:	687a      	ldr	r2, [r7, #4]
 801e928:	68b9      	ldr	r1, [r7, #8]
 801e92a:	193b      	adds	r3, r7, r4
 801e92c:	781b      	ldrb	r3, [r3, #0]
 801e92e:	0018      	movs	r0, r3
 801e930:	f001 f9be 	bl	801fcb0 <USBPD_USER_SERV_EvaluateCapa>
	*PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
	*PtrRequestData = rdo.d32;*/


/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801e934:	46c0      	nop			; (mov r8, r8)
 801e936:	46bd      	mov	sp, r7
 801e938:	b005      	add	sp, #20
 801e93a:	bd90      	pop	{r4, r7, pc}

0801e93c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801e93c:	b590      	push	{r4, r7, lr}
 801e93e:	b083      	sub	sp, #12
 801e940:	af00      	add	r7, sp, #0
 801e942:	0004      	movs	r4, r0
 801e944:	0008      	movs	r0, r1
 801e946:	603a      	str	r2, [r7, #0]
 801e948:	0019      	movs	r1, r3
 801e94a:	1dfb      	adds	r3, r7, #7
 801e94c:	1c22      	adds	r2, r4, #0
 801e94e:	701a      	strb	r2, [r3, #0]
 801e950:	1dbb      	adds	r3, r7, #6
 801e952:	1c02      	adds	r2, r0, #0
 801e954:	701a      	strb	r2, [r3, #0]
 801e956:	1d3b      	adds	r3, r7, #4
 801e958:	1c0a      	adds	r2, r1, #0
 801e95a:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801e95c:	46c0      	nop			; (mov r8, r8)
 801e95e:	46bd      	mov	sp, r7
 801e960:	b003      	add	sp, #12
 801e962:	bd90      	pop	{r4, r7, pc}

0801e964 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b082      	sub	sp, #8
 801e968:	af00      	add	r7, sp, #0
 801e96a:	0002      	movs	r2, r0
 801e96c:	1dfb      	adds	r3, r7, #7
 801e96e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801e970:	1dfb      	adds	r3, r7, #7
 801e972:	781b      	ldrb	r3, [r3, #0]
 801e974:	0018      	movs	r0, r3
 801e976:	f7e1 fc91 	bl	800029c <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801e97a:	46c0      	nop			; (mov r8, r8)
 801e97c:	46bd      	mov	sp, r7
 801e97e:	b002      	add	sp, #8
 801e980:	bd80      	pop	{r7, pc}
	...

0801e984 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801e984:	b580      	push	{r7, lr}
 801e986:	b084      	sub	sp, #16
 801e988:	af00      	add	r7, sp, #0
 801e98a:	0002      	movs	r2, r0
 801e98c:	1dfb      	adds	r3, r7, #7
 801e98e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801e990:	230f      	movs	r3, #15
 801e992:	18fb      	adds	r3, r7, r3
 801e994:	220c      	movs	r2, #12
 801e996:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801e998:	1dfb      	adds	r3, r7, #7
 801e99a:	781a      	ldrb	r2, [r3, #0]
 801e99c:	4b2c      	ldr	r3, [pc, #176]	; (801ea50 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e99e:	2174      	movs	r1, #116	; 0x74
 801e9a0:	434a      	muls	r2, r1
 801e9a2:	5cd3      	ldrb	r3, [r2, r3]
 801e9a4:	07db      	lsls	r3, r3, #31
 801e9a6:	0fdb      	lsrs	r3, r3, #31
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d015      	beq.n	801e9da <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801e9ae:	1dfb      	adds	r3, r7, #7
 801e9b0:	781a      	ldrb	r2, [r3, #0]
 801e9b2:	4b27      	ldr	r3, [pc, #156]	; (801ea50 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e9b4:	2174      	movs	r1, #116	; 0x74
 801e9b6:	434a      	muls	r2, r1
 801e9b8:	5cd3      	ldrb	r3, [r2, r3]
 801e9ba:	075b      	lsls	r3, r3, #29
 801e9bc:	0fdb      	lsrs	r3, r3, #31
 801e9be:	b2db      	uxtb	r3, r3
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d10f      	bne.n	801e9e4 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801e9c4:	1dfb      	adds	r3, r7, #7
 801e9c6:	781a      	ldrb	r2, [r3, #0]
 801e9c8:	4b21      	ldr	r3, [pc, #132]	; (801ea50 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e9ca:	2174      	movs	r1, #116	; 0x74
 801e9cc:	434a      	muls	r2, r1
 801e9ce:	5cd3      	ldrb	r3, [r2, r3]
 801e9d0:	071b      	lsls	r3, r3, #28
 801e9d2:	0fdb      	lsrs	r3, r3, #31
 801e9d4:	b2db      	uxtb	r3, r3
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d104      	bne.n	801e9e4 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801e9da:	230f      	movs	r3, #15
 801e9dc:	18fb      	adds	r3, r7, r3
 801e9de:	2201      	movs	r2, #1
 801e9e0:	701a      	strb	r2, [r3, #0]
 801e9e2:	e02d      	b.n	801ea40 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801e9e4:	1dfb      	adds	r3, r7, #7
 801e9e6:	781a      	ldrb	r2, [r3, #0]
 801e9e8:	4b19      	ldr	r3, [pc, #100]	; (801ea50 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801e9ea:	2174      	movs	r1, #116	; 0x74
 801e9ec:	434a      	muls	r2, r1
 801e9ee:	5cd3      	ldrb	r3, [r2, r3]
 801e9f0:	075b      	lsls	r3, r3, #29
 801e9f2:	0fdb      	lsrs	r3, r3, #31
 801e9f4:	b2db      	uxtb	r3, r3
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d109      	bne.n	801ea0e <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801e9fa:	1dfb      	adds	r3, r7, #7
 801e9fc:	781a      	ldrb	r2, [r3, #0]
 801e9fe:	4b15      	ldr	r3, [pc, #84]	; (801ea54 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801ea00:	0092      	lsls	r2, r2, #2
 801ea02:	5cd3      	ldrb	r3, [r2, r3]
 801ea04:	071b      	lsls	r3, r3, #28
 801ea06:	0fdb      	lsrs	r3, r3, #31
 801ea08:	b2db      	uxtb	r3, r3
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d014      	beq.n	801ea38 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801ea0e:	1dfb      	adds	r3, r7, #7
 801ea10:	781a      	ldrb	r2, [r3, #0]
 801ea12:	4b0f      	ldr	r3, [pc, #60]	; (801ea50 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801ea14:	2174      	movs	r1, #116	; 0x74
 801ea16:	434a      	muls	r2, r1
 801ea18:	5cd3      	ldrb	r3, [r2, r3]
 801ea1a:	071b      	lsls	r3, r3, #28
 801ea1c:	0fdb      	lsrs	r3, r3, #31
 801ea1e:	b2db      	uxtb	r3, r3
 801ea20:	2b01      	cmp	r3, #1
 801ea22:	d10d      	bne.n	801ea40 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801ea24:	1dfb      	adds	r3, r7, #7
 801ea26:	781a      	ldrb	r2, [r3, #0]
 801ea28:	4b0a      	ldr	r3, [pc, #40]	; (801ea54 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801ea2a:	0092      	lsls	r2, r2, #2
 801ea2c:	5cd3      	ldrb	r3, [r2, r3]
 801ea2e:	071b      	lsls	r3, r3, #28
 801ea30:	0fdb      	lsrs	r3, r3, #31
 801ea32:	b2db      	uxtb	r3, r3
 801ea34:	2b01      	cmp	r3, #1
 801ea36:	d103      	bne.n	801ea40 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801ea38:	230f      	movs	r3, #15
 801ea3a:	18fb      	adds	r3, r7, r3
 801ea3c:	220a      	movs	r2, #10
 801ea3e:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801ea40:	230f      	movs	r3, #15
 801ea42:	18fb      	adds	r3, r7, r3
 801ea44:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801ea46:	0018      	movs	r0, r3
 801ea48:	46bd      	mov	sp, r7
 801ea4a:	b004      	add	sp, #16
 801ea4c:	bd80      	pop	{r7, pc}
 801ea4e:	46c0      	nop			; (mov r8, r8)
 801ea50:	200001c8 	.word	0x200001c8
 801ea54:	200033fc 	.word	0x200033fc

0801ea58 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801ea58:	b580      	push	{r7, lr}
 801ea5a:	b082      	sub	sp, #8
 801ea5c:	af00      	add	r7, sp, #0
 801ea5e:	0002      	movs	r2, r0
 801ea60:	1dfb      	adds	r3, r7, #7
 801ea62:	701a      	strb	r2, [r3, #0]
 801ea64:	1dbb      	adds	r3, r7, #6
 801ea66:	1c0a      	adds	r2, r1, #0
 801ea68:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801ea6a:	1dbb      	adds	r3, r7, #6
 801ea6c:	781a      	ldrb	r2, [r3, #0]
 801ea6e:	1dfb      	adds	r3, r7, #7
 801ea70:	781b      	ldrb	r3, [r3, #0]
 801ea72:	0011      	movs	r1, r2
 801ea74:	0018      	movs	r0, r3
 801ea76:	f7ff fc7b 	bl	801e370 <USBPD_PWR_IF_SupplyReady>
 801ea7a:	0003      	movs	r3, r0
 801ea7c:	425a      	negs	r2, r3
 801ea7e:	4153      	adcs	r3, r2
 801ea80:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801ea82:	0018      	movs	r0, r3
 801ea84:	46bd      	mov	sp, r7
 801ea86:	b002      	add	sp, #8
 801ea88:	bd80      	pop	{r7, pc}
	...

0801ea8c <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 801ea8c:	b5b0      	push	{r4, r5, r7, lr}
 801ea8e:	b092      	sub	sp, #72	; 0x48
 801ea90:	af02      	add	r7, sp, #8
 801ea92:	0002      	movs	r2, r0
 801ea94:	1dfb      	adds	r3, r7, #7
 801ea96:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 801ea98:	253f      	movs	r5, #63	; 0x3f
 801ea9a:	197c      	adds	r4, r7, r5
 801ea9c:	1dfb      	adds	r3, r7, #7
 801ea9e:	781b      	ldrb	r3, [r3, #0]
 801eaa0:	0018      	movs	r0, r3
 801eaa2:	f7e1 fd09 	bl	80004b8 <USBPD_PE_Request_HardReset>
 801eaa6:	0003      	movs	r3, r0
 801eaa8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 801eaaa:	197b      	adds	r3, r7, r5
 801eaac:	781b      	ldrb	r3, [r3, #0]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d027      	beq.n	801eb02 <USBPD_DPM_RequestHardReset+0x76>
 801eab2:	4a17      	ldr	r2, [pc, #92]	; (801eb10 <USBPD_DPM_RequestHardReset+0x84>)
 801eab4:	240c      	movs	r4, #12
 801eab6:	193b      	adds	r3, r7, r4
 801eab8:	2132      	movs	r1, #50	; 0x32
 801eaba:	0018      	movs	r0, r3
 801eabc:	f008 ff30 	bl	8027920 <sniprintf>
 801eac0:	0002      	movs	r2, r0
 801eac2:	213e      	movs	r1, #62	; 0x3e
 801eac4:	187b      	adds	r3, r7, r1
 801eac6:	701a      	strb	r2, [r3, #0]
 801eac8:	187b      	adds	r3, r7, r1
 801eaca:	781b      	ldrb	r3, [r3, #0]
 801eacc:	2b31      	cmp	r3, #49	; 0x31
 801eace:	d80d      	bhi.n	801eaec <USBPD_DPM_RequestHardReset+0x60>
 801ead0:	193b      	adds	r3, r7, r4
 801ead2:	0018      	movs	r0, r3
 801ead4:	f7e7 fb84 	bl	80061e0 <strlen>
 801ead8:	193a      	adds	r2, r7, r4
 801eada:	1dfb      	adds	r3, r7, #7
 801eadc:	7819      	ldrb	r1, [r3, #0]
 801eade:	9000      	str	r0, [sp, #0]
 801eae0:	0013      	movs	r3, r2
 801eae2:	2200      	movs	r2, #0
 801eae4:	2006      	movs	r0, #6
 801eae6:	f7f7 f937 	bl	8015d58 <USBPD_TRACE_Add>
 801eaea:	e00a      	b.n	801eb02 <USBPD_DPM_RequestHardReset+0x76>
 801eaec:	230c      	movs	r3, #12
 801eaee:	18fa      	adds	r2, r7, r3
 801eaf0:	1dfb      	adds	r3, r7, #7
 801eaf2:	7819      	ldrb	r1, [r3, #0]
 801eaf4:	2332      	movs	r3, #50	; 0x32
 801eaf6:	9300      	str	r3, [sp, #0]
 801eaf8:	0013      	movs	r3, r2
 801eafa:	2200      	movs	r2, #0
 801eafc:	2006      	movs	r0, #6
 801eafe:	f7f7 f92b 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801eb02:	233f      	movs	r3, #63	; 0x3f
 801eb04:	18fb      	adds	r3, r7, r3
 801eb06:	781b      	ldrb	r3, [r3, #0]
}
 801eb08:	0018      	movs	r0, r3
 801eb0a:	46bd      	mov	sp, r7
 801eb0c:	b010      	add	sp, #64	; 0x40
 801eb0e:	bdb0      	pop	{r4, r5, r7, pc}
 801eb10:	0802a1bc 	.word	0x0802a1bc

0801eb14 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 801eb14:	b5b0      	push	{r4, r5, r7, lr}
 801eb16:	b092      	sub	sp, #72	; 0x48
 801eb18:	af02      	add	r7, sp, #8
 801eb1a:	0002      	movs	r2, r0
 801eb1c:	1dfb      	adds	r3, r7, #7
 801eb1e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 801eb20:	253f      	movs	r5, #63	; 0x3f
 801eb22:	197c      	adds	r4, r7, r5
 801eb24:	1dfb      	adds	r3, r7, #7
 801eb26:	781b      	ldrb	r3, [r3, #0]
 801eb28:	0018      	movs	r0, r3
 801eb2a:	f7e1 fcd1 	bl	80004d0 <USBPD_PE_Request_CableReset>
 801eb2e:	0003      	movs	r3, r0
 801eb30:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801eb32:	197b      	adds	r3, r7, r5
 801eb34:	781b      	ldrb	r3, [r3, #0]
 801eb36:	2b00      	cmp	r3, #0
 801eb38:	d027      	beq.n	801eb8a <USBPD_DPM_RequestCableReset+0x76>
 801eb3a:	4a17      	ldr	r2, [pc, #92]	; (801eb98 <USBPD_DPM_RequestCableReset+0x84>)
 801eb3c:	240c      	movs	r4, #12
 801eb3e:	193b      	adds	r3, r7, r4
 801eb40:	2132      	movs	r1, #50	; 0x32
 801eb42:	0018      	movs	r0, r3
 801eb44:	f008 feec 	bl	8027920 <sniprintf>
 801eb48:	0002      	movs	r2, r0
 801eb4a:	213e      	movs	r1, #62	; 0x3e
 801eb4c:	187b      	adds	r3, r7, r1
 801eb4e:	701a      	strb	r2, [r3, #0]
 801eb50:	187b      	adds	r3, r7, r1
 801eb52:	781b      	ldrb	r3, [r3, #0]
 801eb54:	2b31      	cmp	r3, #49	; 0x31
 801eb56:	d80d      	bhi.n	801eb74 <USBPD_DPM_RequestCableReset+0x60>
 801eb58:	193b      	adds	r3, r7, r4
 801eb5a:	0018      	movs	r0, r3
 801eb5c:	f7e7 fb40 	bl	80061e0 <strlen>
 801eb60:	193a      	adds	r2, r7, r4
 801eb62:	1dfb      	adds	r3, r7, #7
 801eb64:	7819      	ldrb	r1, [r3, #0]
 801eb66:	9000      	str	r0, [sp, #0]
 801eb68:	0013      	movs	r3, r2
 801eb6a:	2200      	movs	r2, #0
 801eb6c:	2006      	movs	r0, #6
 801eb6e:	f7f7 f8f3 	bl	8015d58 <USBPD_TRACE_Add>
 801eb72:	e00a      	b.n	801eb8a <USBPD_DPM_RequestCableReset+0x76>
 801eb74:	230c      	movs	r3, #12
 801eb76:	18fa      	adds	r2, r7, r3
 801eb78:	1dfb      	adds	r3, r7, #7
 801eb7a:	7819      	ldrb	r1, [r3, #0]
 801eb7c:	2332      	movs	r3, #50	; 0x32
 801eb7e:	9300      	str	r3, [sp, #0]
 801eb80:	0013      	movs	r3, r2
 801eb82:	2200      	movs	r2, #0
 801eb84:	2006      	movs	r0, #6
 801eb86:	f7f7 f8e7 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801eb8a:	233f      	movs	r3, #63	; 0x3f
 801eb8c:	18fb      	adds	r3, r7, r3
 801eb8e:	781b      	ldrb	r3, [r3, #0]
}
 801eb90:	0018      	movs	r0, r3
 801eb92:	46bd      	mov	sp, r7
 801eb94:	b010      	add	sp, #64	; 0x40
 801eb96:	bdb0      	pop	{r4, r5, r7, pc}
 801eb98:	0802a1e4 	.word	0x0802a1e4

0801eb9c <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 801eb9c:	b5b0      	push	{r4, r5, r7, lr}
 801eb9e:	b092      	sub	sp, #72	; 0x48
 801eba0:	af02      	add	r7, sp, #8
 801eba2:	0002      	movs	r2, r0
 801eba4:	1dfb      	adds	r3, r7, #7
 801eba6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 801eba8:	253f      	movs	r5, #63	; 0x3f
 801ebaa:	197c      	adds	r4, r7, r5
 801ebac:	1dfb      	adds	r3, r7, #7
 801ebae:	781b      	ldrb	r3, [r3, #0]
 801ebb0:	2200      	movs	r2, #0
 801ebb2:	2102      	movs	r1, #2
 801ebb4:	0018      	movs	r0, r3
 801ebb6:	f7e1 fca5 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ebba:	0003      	movs	r3, r0
 801ebbc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 801ebbe:	197b      	adds	r3, r7, r5
 801ebc0:	781b      	ldrb	r3, [r3, #0]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d027      	beq.n	801ec16 <USBPD_DPM_RequestGotoMin+0x7a>
 801ebc6:	4a17      	ldr	r2, [pc, #92]	; (801ec24 <USBPD_DPM_RequestGotoMin+0x88>)
 801ebc8:	240c      	movs	r4, #12
 801ebca:	193b      	adds	r3, r7, r4
 801ebcc:	2132      	movs	r1, #50	; 0x32
 801ebce:	0018      	movs	r0, r3
 801ebd0:	f008 fea6 	bl	8027920 <sniprintf>
 801ebd4:	0002      	movs	r2, r0
 801ebd6:	213e      	movs	r1, #62	; 0x3e
 801ebd8:	187b      	adds	r3, r7, r1
 801ebda:	701a      	strb	r2, [r3, #0]
 801ebdc:	187b      	adds	r3, r7, r1
 801ebde:	781b      	ldrb	r3, [r3, #0]
 801ebe0:	2b31      	cmp	r3, #49	; 0x31
 801ebe2:	d80d      	bhi.n	801ec00 <USBPD_DPM_RequestGotoMin+0x64>
 801ebe4:	193b      	adds	r3, r7, r4
 801ebe6:	0018      	movs	r0, r3
 801ebe8:	f7e7 fafa 	bl	80061e0 <strlen>
 801ebec:	193a      	adds	r2, r7, r4
 801ebee:	1dfb      	adds	r3, r7, #7
 801ebf0:	7819      	ldrb	r1, [r3, #0]
 801ebf2:	9000      	str	r0, [sp, #0]
 801ebf4:	0013      	movs	r3, r2
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	2006      	movs	r0, #6
 801ebfa:	f7f7 f8ad 	bl	8015d58 <USBPD_TRACE_Add>
 801ebfe:	e00a      	b.n	801ec16 <USBPD_DPM_RequestGotoMin+0x7a>
 801ec00:	230c      	movs	r3, #12
 801ec02:	18fa      	adds	r2, r7, r3
 801ec04:	1dfb      	adds	r3, r7, #7
 801ec06:	7819      	ldrb	r1, [r3, #0]
 801ec08:	2332      	movs	r3, #50	; 0x32
 801ec0a:	9300      	str	r3, [sp, #0]
 801ec0c:	0013      	movs	r3, r2
 801ec0e:	2200      	movs	r2, #0
 801ec10:	2006      	movs	r0, #6
 801ec12:	f7f7 f8a1 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801ec16:	233f      	movs	r3, #63	; 0x3f
 801ec18:	18fb      	adds	r3, r7, r3
 801ec1a:	781b      	ldrb	r3, [r3, #0]
}
 801ec1c:	0018      	movs	r0, r3
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	b010      	add	sp, #64	; 0x40
 801ec22:	bdb0      	pop	{r4, r5, r7, pc}
 801ec24:	0802a20c 	.word	0x0802a20c

0801ec28 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 801ec28:	b5b0      	push	{r4, r5, r7, lr}
 801ec2a:	b092      	sub	sp, #72	; 0x48
 801ec2c:	af02      	add	r7, sp, #8
 801ec2e:	0002      	movs	r2, r0
 801ec30:	1dfb      	adds	r3, r7, #7
 801ec32:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801ec34:	253f      	movs	r5, #63	; 0x3f
 801ec36:	197c      	adds	r4, r7, r5
 801ec38:	1dfb      	adds	r3, r7, #7
 801ec3a:	781b      	ldrb	r3, [r3, #0]
 801ec3c:	2200      	movs	r2, #0
 801ec3e:	2105      	movs	r1, #5
 801ec40:	0018      	movs	r0, r3
 801ec42:	f7e1 fc5f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ec46:	0003      	movs	r3, r0
 801ec48:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 801ec4a:	197b      	adds	r3, r7, r5
 801ec4c:	781b      	ldrb	r3, [r3, #0]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d027      	beq.n	801eca2 <USBPD_DPM_RequestPing+0x7a>
 801ec52:	4a17      	ldr	r2, [pc, #92]	; (801ecb0 <USBPD_DPM_RequestPing+0x88>)
 801ec54:	240c      	movs	r4, #12
 801ec56:	193b      	adds	r3, r7, r4
 801ec58:	2132      	movs	r1, #50	; 0x32
 801ec5a:	0018      	movs	r0, r3
 801ec5c:	f008 fe60 	bl	8027920 <sniprintf>
 801ec60:	0002      	movs	r2, r0
 801ec62:	213e      	movs	r1, #62	; 0x3e
 801ec64:	187b      	adds	r3, r7, r1
 801ec66:	701a      	strb	r2, [r3, #0]
 801ec68:	187b      	adds	r3, r7, r1
 801ec6a:	781b      	ldrb	r3, [r3, #0]
 801ec6c:	2b31      	cmp	r3, #49	; 0x31
 801ec6e:	d80d      	bhi.n	801ec8c <USBPD_DPM_RequestPing+0x64>
 801ec70:	193b      	adds	r3, r7, r4
 801ec72:	0018      	movs	r0, r3
 801ec74:	f7e7 fab4 	bl	80061e0 <strlen>
 801ec78:	193a      	adds	r2, r7, r4
 801ec7a:	1dfb      	adds	r3, r7, #7
 801ec7c:	7819      	ldrb	r1, [r3, #0]
 801ec7e:	9000      	str	r0, [sp, #0]
 801ec80:	0013      	movs	r3, r2
 801ec82:	2200      	movs	r2, #0
 801ec84:	2006      	movs	r0, #6
 801ec86:	f7f7 f867 	bl	8015d58 <USBPD_TRACE_Add>
 801ec8a:	e00a      	b.n	801eca2 <USBPD_DPM_RequestPing+0x7a>
 801ec8c:	230c      	movs	r3, #12
 801ec8e:	18fa      	adds	r2, r7, r3
 801ec90:	1dfb      	adds	r3, r7, #7
 801ec92:	7819      	ldrb	r1, [r3, #0]
 801ec94:	2332      	movs	r3, #50	; 0x32
 801ec96:	9300      	str	r3, [sp, #0]
 801ec98:	0013      	movs	r3, r2
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	2006      	movs	r0, #6
 801ec9e:	f7f7 f85b 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801eca2:	233f      	movs	r3, #63	; 0x3f
 801eca4:	18fb      	adds	r3, r7, r3
 801eca6:	781b      	ldrb	r3, [r3, #0]
}
 801eca8:	0018      	movs	r0, r3
 801ecaa:	46bd      	mov	sp, r7
 801ecac:	b010      	add	sp, #64	; 0x40
 801ecae:	bdb0      	pop	{r4, r5, r7, pc}
 801ecb0:	0802a230 	.word	0x0802a230

0801ecb4 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 801ecb4:	b5b0      	push	{r4, r5, r7, lr}
 801ecb6:	b09e      	sub	sp, #120	; 0x78
 801ecb8:	af02      	add	r7, sp, #8
 801ecba:	0004      	movs	r4, r0
 801ecbc:	0008      	movs	r0, r1
 801ecbe:	0011      	movs	r1, r2
 801ecc0:	1dfb      	adds	r3, r7, #7
 801ecc2:	1c22      	adds	r2, r4, #0
 801ecc4:	701a      	strb	r2, [r3, #0]
 801ecc6:	1dbb      	adds	r3, r7, #6
 801ecc8:	1c02      	adds	r2, r0, #0
 801ecca:	701a      	strb	r2, [r3, #0]
 801eccc:	1d3b      	adds	r3, r7, #4
 801ecce:	1c0a      	adds	r2, r1, #0
 801ecd0:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801ecd2:	256f      	movs	r5, #111	; 0x6f
 801ecd4:	197b      	adds	r3, r7, r5
 801ecd6:	2202      	movs	r2, #2
 801ecd8:	701a      	strb	r2, [r3, #0]
  //source: https://community.st.com/t5/stm32-mcus-other-solutions/message-rejected-for-this-port-configuration-on-the-stm32-x-cube/td-p/86358
    uint32_t voltage, allowablepower;
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_PDO_TypeDef  pdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801ecda:	1dfb      	adds	r3, r7, #7
 801ecdc:	781b      	ldrb	r3, [r3, #0]
 801ecde:	2274      	movs	r2, #116	; 0x74
 801ece0:	435a      	muls	r2, r3
 801ece2:	4b52      	ldr	r3, [pc, #328]	; (801ee2c <USBPD_DPM_RequestMessageRequest+0x178>)
 801ece4:	18d3      	adds	r3, r2, r3
 801ece6:	66bb      	str	r3, [r7, #104]	; 0x68
	USBPD_DPM_SNKPowerRequestDetailsTypeDef request_details;
	rdo.d32 = 0;
 801ece8:	2300      	movs	r3, #0
 801ecea:	65bb      	str	r3, [r7, #88]	; 0x58

	/* selected SRC PDO */
	pdo.d32 = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[(IndexSrcPDO - 1)];
 801ecec:	1dfb      	adds	r3, r7, #7
 801ecee:	781a      	ldrb	r2, [r3, #0]
 801ecf0:	1dbb      	adds	r3, r7, #6
 801ecf2:	781b      	ldrb	r3, [r3, #0]
 801ecf4:	1e58      	subs	r0, r3, #1
 801ecf6:	494e      	ldr	r1, [pc, #312]	; (801ee30 <USBPD_DPM_RequestMessageRequest+0x17c>)
 801ecf8:	0013      	movs	r3, r2
 801ecfa:	009b      	lsls	r3, r3, #2
 801ecfc:	189b      	adds	r3, r3, r2
 801ecfe:	009b      	lsls	r3, r3, #2
 801ed00:	181b      	adds	r3, r3, r0
 801ed02:	009b      	lsls	r3, r3, #2
 801ed04:	585b      	ldr	r3, [r3, r1]
 801ed06:	657b      	str	r3, [r7, #84]	; 0x54
	voltage = RequestedVoltage;
 801ed08:	1d3b      	adds	r3, r7, #4
 801ed0a:	881b      	ldrh	r3, [r3, #0]
 801ed0c:	663b      	str	r3, [r7, #96]	; 0x60
	allowablepower = (puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits * RequestedVoltage) / 1000U;
 801ed0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ed10:	685b      	ldr	r3, [r3, #4]
 801ed12:	1d3a      	adds	r2, r7, #4
 801ed14:	8812      	ldrh	r2, [r2, #0]
 801ed16:	4353      	muls	r3, r2
 801ed18:	22fa      	movs	r2, #250	; 0xfa
 801ed1a:	0091      	lsls	r1, r2, #2
 801ed1c:	0018      	movs	r0, r3
 801ed1e:	f7e7 fa7b 	bl	8006218 <__udivsi3>
 801ed22:	0003      	movs	r3, r0
 801ed24:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 801ed26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801ed28:	235c      	movs	r3, #92	; 0x5c
 801ed2a:	18fc      	adds	r4, r7, r3
 801ed2c:	2360      	movs	r3, #96	; 0x60
 801ed2e:	18fa      	adds	r2, r7, r3
 801ed30:	1dfb      	adds	r3, r7, #7
 801ed32:	7818      	ldrb	r0, [r3, #0]
 801ed34:	0023      	movs	r3, r4
 801ed36:	f001 f8a3 	bl	801fe80 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 801ed3a:	0003      	movs	r3, r0
 801ed3c:	2b01      	cmp	r3, #1
 801ed3e:	d141      	bne.n	801edc4 <USBPD_DPM_RequestMessageRequest+0x110>
	{
	  /* Check that voltage has been correctly selected */
	  if (RequestedVoltage == voltage)
 801ed40:	1d3b      	adds	r3, r7, #4
 801ed42:	881a      	ldrh	r2, [r3, #0]
 801ed44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ed46:	429a      	cmp	r2, r3
 801ed48:	d13c      	bne.n	801edc4 <USBPD_DPM_RequestMessageRequest+0x110>
	  {
		request_details.RequestedVoltageInmVunits    = RequestedVoltage;
 801ed4a:	1d3b      	adds	r3, r7, #4
 801ed4c:	881a      	ldrh	r2, [r3, #0]
 801ed4e:	243c      	movs	r4, #60	; 0x3c
 801ed50:	193b      	adds	r3, r7, r4
 801ed52:	601a      	str	r2, [r3, #0]
		request_details.OperatingCurrentInmAunits    = (1000U * allowablepower)/RequestedVoltage;
 801ed54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ed56:	0013      	movs	r3, r2
 801ed58:	015b      	lsls	r3, r3, #5
 801ed5a:	1a9b      	subs	r3, r3, r2
 801ed5c:	009b      	lsls	r3, r3, #2
 801ed5e:	189b      	adds	r3, r3, r2
 801ed60:	00db      	lsls	r3, r3, #3
 801ed62:	001a      	movs	r2, r3
 801ed64:	1d3b      	adds	r3, r7, #4
 801ed66:	881b      	ldrh	r3, [r3, #0]
 801ed68:	0019      	movs	r1, r3
 801ed6a:	0010      	movs	r0, r2
 801ed6c:	f7e7 fa54 	bl	8006218 <__udivsi3>
 801ed70:	0003      	movs	r3, r0
 801ed72:	001a      	movs	r2, r3
 801ed74:	0020      	movs	r0, r4
 801ed76:	183b      	adds	r3, r7, r0
 801ed78:	609a      	str	r2, [r3, #8]
		request_details.MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801ed7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ed7c:	685a      	ldr	r2, [r3, #4]
 801ed7e:	183b      	adds	r3, r7, r0
 801ed80:	605a      	str	r2, [r3, #4]
		request_details.MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 801ed82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ed84:	699a      	ldr	r2, [r3, #24]
 801ed86:	183b      	adds	r3, r7, r0
 801ed88:	60da      	str	r2, [r3, #12]
		request_details.OperatingPowerInmWunits      = puser->DPM_SNKRequestedPower.OperatingPowerInmWunits;
 801ed8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ed8c:	695a      	ldr	r2, [r3, #20]
 801ed8e:	183b      	adds	r3, r7, r0
 801ed90:	611a      	str	r2, [r3, #16]

		USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, (IndexSrcPDO - 1), &request_details, &rdo, &pdo_object);
 801ed92:	1dbb      	adds	r3, r7, #6
 801ed94:	781b      	ldrb	r3, [r3, #0]
 801ed96:	3b01      	subs	r3, #1
 801ed98:	b2d9      	uxtb	r1, r3
 801ed9a:	2358      	movs	r3, #88	; 0x58
 801ed9c:	18fc      	adds	r4, r7, r3
 801ed9e:	183a      	adds	r2, r7, r0
 801eda0:	1dfb      	adds	r3, r7, #7
 801eda2:	7818      	ldrb	r0, [r3, #0]
 801eda4:	2350      	movs	r3, #80	; 0x50
 801eda6:	18fb      	adds	r3, r7, r3
 801eda8:	9300      	str	r3, [sp, #0]
 801edaa:	0023      	movs	r3, r4
 801edac:	f001 fafc 	bl	80203a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

		_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801edb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801edb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801edb4:	197c      	adds	r4, r7, r5
 801edb6:	1dfb      	adds	r3, r7, #7
 801edb8:	781b      	ldrb	r3, [r3, #0]
 801edba:	0018      	movs	r0, r3
 801edbc:	f7e1 fca4 	bl	8000708 <USBPD_PE_Send_Request>
 801edc0:	0003      	movs	r3, r0
 801edc2:	7023      	strb	r3, [r4, #0]
	  }
	}

/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801edc4:	236f      	movs	r3, #111	; 0x6f
 801edc6:	18fb      	adds	r3, r7, r3
 801edc8:	781b      	ldrb	r3, [r3, #0]
 801edca:	2b00      	cmp	r3, #0
 801edcc:	d027      	beq.n	801ee1e <USBPD_DPM_RequestMessageRequest+0x16a>
 801edce:	4a19      	ldr	r2, [pc, #100]	; (801ee34 <USBPD_DPM_RequestMessageRequest+0x180>)
 801edd0:	2408      	movs	r4, #8
 801edd2:	193b      	adds	r3, r7, r4
 801edd4:	2132      	movs	r1, #50	; 0x32
 801edd6:	0018      	movs	r0, r3
 801edd8:	f008 fda2 	bl	8027920 <sniprintf>
 801eddc:	0002      	movs	r2, r0
 801edde:	2167      	movs	r1, #103	; 0x67
 801ede0:	187b      	adds	r3, r7, r1
 801ede2:	701a      	strb	r2, [r3, #0]
 801ede4:	187b      	adds	r3, r7, r1
 801ede6:	781b      	ldrb	r3, [r3, #0]
 801ede8:	2b31      	cmp	r3, #49	; 0x31
 801edea:	d80d      	bhi.n	801ee08 <USBPD_DPM_RequestMessageRequest+0x154>
 801edec:	193b      	adds	r3, r7, r4
 801edee:	0018      	movs	r0, r3
 801edf0:	f7e7 f9f6 	bl	80061e0 <strlen>
 801edf4:	193a      	adds	r2, r7, r4
 801edf6:	1dfb      	adds	r3, r7, #7
 801edf8:	7819      	ldrb	r1, [r3, #0]
 801edfa:	9000      	str	r0, [sp, #0]
 801edfc:	0013      	movs	r3, r2
 801edfe:	2200      	movs	r2, #0
 801ee00:	2006      	movs	r0, #6
 801ee02:	f7f6 ffa9 	bl	8015d58 <USBPD_TRACE_Add>
 801ee06:	e00a      	b.n	801ee1e <USBPD_DPM_RequestMessageRequest+0x16a>
 801ee08:	2308      	movs	r3, #8
 801ee0a:	18fa      	adds	r2, r7, r3
 801ee0c:	1dfb      	adds	r3, r7, #7
 801ee0e:	7819      	ldrb	r1, [r3, #0]
 801ee10:	2332      	movs	r3, #50	; 0x32
 801ee12:	9300      	str	r3, [sp, #0]
 801ee14:	0013      	movs	r3, r2
 801ee16:	2200      	movs	r2, #0
 801ee18:	2006      	movs	r0, #6
 801ee1a:	f7f6 ff9d 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801ee1e:	236f      	movs	r3, #111	; 0x6f
 801ee20:	18fb      	adds	r3, r7, r3
 801ee22:	781b      	ldrb	r3, [r3, #0]
}
 801ee24:	0018      	movs	r0, r3
 801ee26:	46bd      	mov	sp, r7
 801ee28:	b01c      	add	sp, #112	; 0x70
 801ee2a:	bdb0      	pop	{r4, r5, r7, pc}
 801ee2c:	200001c8 	.word	0x200001c8
 801ee30:	20003410 	.word	0x20003410
 801ee34:	0802a250 	.word	0x0802a250

0801ee38 <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 801ee38:	b5b0      	push	{r4, r5, r7, lr}
 801ee3a:	b092      	sub	sp, #72	; 0x48
 801ee3c:	af02      	add	r7, sp, #8
 801ee3e:	0002      	movs	r2, r0
 801ee40:	1dfb      	adds	r3, r7, #7
 801ee42:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 801ee44:	253f      	movs	r5, #63	; 0x3f
 801ee46:	197c      	adds	r4, r7, r5
 801ee48:	1dfb      	adds	r3, r7, #7
 801ee4a:	781b      	ldrb	r3, [r3, #0]
 801ee4c:	2200      	movs	r2, #0
 801ee4e:	2107      	movs	r1, #7
 801ee50:	0018      	movs	r0, r3
 801ee52:	f7e1 fb57 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ee56:	0003      	movs	r3, r0
 801ee58:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 801ee5a:	197b      	adds	r3, r7, r5
 801ee5c:	781b      	ldrb	r3, [r3, #0]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	d027      	beq.n	801eeb2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801ee62:	4a17      	ldr	r2, [pc, #92]	; (801eec0 <USBPD_DPM_RequestGetSourceCapability+0x88>)
 801ee64:	240c      	movs	r4, #12
 801ee66:	193b      	adds	r3, r7, r4
 801ee68:	2132      	movs	r1, #50	; 0x32
 801ee6a:	0018      	movs	r0, r3
 801ee6c:	f008 fd58 	bl	8027920 <sniprintf>
 801ee70:	0002      	movs	r2, r0
 801ee72:	213e      	movs	r1, #62	; 0x3e
 801ee74:	187b      	adds	r3, r7, r1
 801ee76:	701a      	strb	r2, [r3, #0]
 801ee78:	187b      	adds	r3, r7, r1
 801ee7a:	781b      	ldrb	r3, [r3, #0]
 801ee7c:	2b31      	cmp	r3, #49	; 0x31
 801ee7e:	d80d      	bhi.n	801ee9c <USBPD_DPM_RequestGetSourceCapability+0x64>
 801ee80:	193b      	adds	r3, r7, r4
 801ee82:	0018      	movs	r0, r3
 801ee84:	f7e7 f9ac 	bl	80061e0 <strlen>
 801ee88:	193a      	adds	r2, r7, r4
 801ee8a:	1dfb      	adds	r3, r7, #7
 801ee8c:	7819      	ldrb	r1, [r3, #0]
 801ee8e:	9000      	str	r0, [sp, #0]
 801ee90:	0013      	movs	r3, r2
 801ee92:	2200      	movs	r2, #0
 801ee94:	2006      	movs	r0, #6
 801ee96:	f7f6 ff5f 	bl	8015d58 <USBPD_TRACE_Add>
 801ee9a:	e00a      	b.n	801eeb2 <USBPD_DPM_RequestGetSourceCapability+0x7a>
 801ee9c:	230c      	movs	r3, #12
 801ee9e:	18fa      	adds	r2, r7, r3
 801eea0:	1dfb      	adds	r3, r7, #7
 801eea2:	7819      	ldrb	r1, [r3, #0]
 801eea4:	2332      	movs	r3, #50	; 0x32
 801eea6:	9300      	str	r3, [sp, #0]
 801eea8:	0013      	movs	r3, r2
 801eeaa:	2200      	movs	r2, #0
 801eeac:	2006      	movs	r0, #6
 801eeae:	f7f6 ff53 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801eeb2:	233f      	movs	r3, #63	; 0x3f
 801eeb4:	18fb      	adds	r3, r7, r3
 801eeb6:	781b      	ldrb	r3, [r3, #0]
}
 801eeb8:	0018      	movs	r0, r3
 801eeba:	46bd      	mov	sp, r7
 801eebc:	b010      	add	sp, #64	; 0x40
 801eebe:	bdb0      	pop	{r4, r5, r7, pc}
 801eec0:	0802a274 	.word	0x0802a274

0801eec4 <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 801eec4:	b5b0      	push	{r4, r5, r7, lr}
 801eec6:	b092      	sub	sp, #72	; 0x48
 801eec8:	af02      	add	r7, sp, #8
 801eeca:	0002      	movs	r2, r0
 801eecc:	1dfb      	adds	r3, r7, #7
 801eece:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 801eed0:	253f      	movs	r5, #63	; 0x3f
 801eed2:	197c      	adds	r4, r7, r5
 801eed4:	1dfb      	adds	r3, r7, #7
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	2200      	movs	r2, #0
 801eeda:	2108      	movs	r1, #8
 801eedc:	0018      	movs	r0, r3
 801eede:	f7e1 fb11 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801eee2:	0003      	movs	r3, r0
 801eee4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 801eee6:	197b      	adds	r3, r7, r5
 801eee8:	781b      	ldrb	r3, [r3, #0]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d027      	beq.n	801ef3e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801eeee:	4a17      	ldr	r2, [pc, #92]	; (801ef4c <USBPD_DPM_RequestGetSinkCapability+0x88>)
 801eef0:	240c      	movs	r4, #12
 801eef2:	193b      	adds	r3, r7, r4
 801eef4:	2132      	movs	r1, #50	; 0x32
 801eef6:	0018      	movs	r0, r3
 801eef8:	f008 fd12 	bl	8027920 <sniprintf>
 801eefc:	0002      	movs	r2, r0
 801eefe:	213e      	movs	r1, #62	; 0x3e
 801ef00:	187b      	adds	r3, r7, r1
 801ef02:	701a      	strb	r2, [r3, #0]
 801ef04:	187b      	adds	r3, r7, r1
 801ef06:	781b      	ldrb	r3, [r3, #0]
 801ef08:	2b31      	cmp	r3, #49	; 0x31
 801ef0a:	d80d      	bhi.n	801ef28 <USBPD_DPM_RequestGetSinkCapability+0x64>
 801ef0c:	193b      	adds	r3, r7, r4
 801ef0e:	0018      	movs	r0, r3
 801ef10:	f7e7 f966 	bl	80061e0 <strlen>
 801ef14:	193a      	adds	r2, r7, r4
 801ef16:	1dfb      	adds	r3, r7, #7
 801ef18:	7819      	ldrb	r1, [r3, #0]
 801ef1a:	9000      	str	r0, [sp, #0]
 801ef1c:	0013      	movs	r3, r2
 801ef1e:	2200      	movs	r2, #0
 801ef20:	2006      	movs	r0, #6
 801ef22:	f7f6 ff19 	bl	8015d58 <USBPD_TRACE_Add>
 801ef26:	e00a      	b.n	801ef3e <USBPD_DPM_RequestGetSinkCapability+0x7a>
 801ef28:	230c      	movs	r3, #12
 801ef2a:	18fa      	adds	r2, r7, r3
 801ef2c:	1dfb      	adds	r3, r7, #7
 801ef2e:	7819      	ldrb	r1, [r3, #0]
 801ef30:	2332      	movs	r3, #50	; 0x32
 801ef32:	9300      	str	r3, [sp, #0]
 801ef34:	0013      	movs	r3, r2
 801ef36:	2200      	movs	r2, #0
 801ef38:	2006      	movs	r0, #6
 801ef3a:	f7f6 ff0d 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801ef3e:	233f      	movs	r3, #63	; 0x3f
 801ef40:	18fb      	adds	r3, r7, r3
 801ef42:	781b      	ldrb	r3, [r3, #0]
}
 801ef44:	0018      	movs	r0, r3
 801ef46:	46bd      	mov	sp, r7
 801ef48:	b010      	add	sp, #64	; 0x40
 801ef4a:	bdb0      	pop	{r4, r5, r7, pc}
 801ef4c:	0802a29c 	.word	0x0802a29c

0801ef50 <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 801ef50:	b5b0      	push	{r4, r5, r7, lr}
 801ef52:	b092      	sub	sp, #72	; 0x48
 801ef54:	af02      	add	r7, sp, #8
 801ef56:	0002      	movs	r2, r0
 801ef58:	1dfb      	adds	r3, r7, #7
 801ef5a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 801ef5c:	253f      	movs	r5, #63	; 0x3f
 801ef5e:	197c      	adds	r4, r7, r5
 801ef60:	1dfb      	adds	r3, r7, #7
 801ef62:	781b      	ldrb	r3, [r3, #0]
 801ef64:	2200      	movs	r2, #0
 801ef66:	2109      	movs	r1, #9
 801ef68:	0018      	movs	r0, r3
 801ef6a:	f7e1 facb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801ef6e:	0003      	movs	r3, r0
 801ef70:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 801ef72:	197b      	adds	r3, r7, r5
 801ef74:	781b      	ldrb	r3, [r3, #0]
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	d027      	beq.n	801efca <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801ef7a:	4a17      	ldr	r2, [pc, #92]	; (801efd8 <USBPD_DPM_RequestDataRoleSwap+0x88>)
 801ef7c:	240c      	movs	r4, #12
 801ef7e:	193b      	adds	r3, r7, r4
 801ef80:	2132      	movs	r1, #50	; 0x32
 801ef82:	0018      	movs	r0, r3
 801ef84:	f008 fccc 	bl	8027920 <sniprintf>
 801ef88:	0002      	movs	r2, r0
 801ef8a:	213e      	movs	r1, #62	; 0x3e
 801ef8c:	187b      	adds	r3, r7, r1
 801ef8e:	701a      	strb	r2, [r3, #0]
 801ef90:	187b      	adds	r3, r7, r1
 801ef92:	781b      	ldrb	r3, [r3, #0]
 801ef94:	2b31      	cmp	r3, #49	; 0x31
 801ef96:	d80d      	bhi.n	801efb4 <USBPD_DPM_RequestDataRoleSwap+0x64>
 801ef98:	193b      	adds	r3, r7, r4
 801ef9a:	0018      	movs	r0, r3
 801ef9c:	f7e7 f920 	bl	80061e0 <strlen>
 801efa0:	193a      	adds	r2, r7, r4
 801efa2:	1dfb      	adds	r3, r7, #7
 801efa4:	7819      	ldrb	r1, [r3, #0]
 801efa6:	9000      	str	r0, [sp, #0]
 801efa8:	0013      	movs	r3, r2
 801efaa:	2200      	movs	r2, #0
 801efac:	2006      	movs	r0, #6
 801efae:	f7f6 fed3 	bl	8015d58 <USBPD_TRACE_Add>
 801efb2:	e00a      	b.n	801efca <USBPD_DPM_RequestDataRoleSwap+0x7a>
 801efb4:	230c      	movs	r3, #12
 801efb6:	18fa      	adds	r2, r7, r3
 801efb8:	1dfb      	adds	r3, r7, #7
 801efba:	7819      	ldrb	r1, [r3, #0]
 801efbc:	2332      	movs	r3, #50	; 0x32
 801efbe:	9300      	str	r3, [sp, #0]
 801efc0:	0013      	movs	r3, r2
 801efc2:	2200      	movs	r2, #0
 801efc4:	2006      	movs	r0, #6
 801efc6:	f7f6 fec7 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801efca:	233f      	movs	r3, #63	; 0x3f
 801efcc:	18fb      	adds	r3, r7, r3
 801efce:	781b      	ldrb	r3, [r3, #0]
}
 801efd0:	0018      	movs	r0, r3
 801efd2:	46bd      	mov	sp, r7
 801efd4:	b010      	add	sp, #64	; 0x40
 801efd6:	bdb0      	pop	{r4, r5, r7, pc}
 801efd8:	0802a2c4 	.word	0x0802a2c4

0801efdc <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 801efdc:	b590      	push	{r4, r7, lr}
 801efde:	b093      	sub	sp, #76	; 0x4c
 801efe0:	af02      	add	r7, sp, #8
 801efe2:	0002      	movs	r2, r0
 801efe4:	1dfb      	adds	r3, r7, #7
 801efe6:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 801efe8:	4a16      	ldr	r2, [pc, #88]	; (801f044 <USBPD_DPM_RequestPowerRoleSwap+0x68>)
 801efea:	240c      	movs	r4, #12
 801efec:	193b      	adds	r3, r7, r4
 801efee:	2132      	movs	r1, #50	; 0x32
 801eff0:	0018      	movs	r0, r3
 801eff2:	f008 fc95 	bl	8027920 <sniprintf>
 801eff6:	0002      	movs	r2, r0
 801eff8:	213f      	movs	r1, #63	; 0x3f
 801effa:	187b      	adds	r3, r7, r1
 801effc:	701a      	strb	r2, [r3, #0]
 801effe:	187b      	adds	r3, r7, r1
 801f000:	781b      	ldrb	r3, [r3, #0]
 801f002:	2b31      	cmp	r3, #49	; 0x31
 801f004:	d80d      	bhi.n	801f022 <USBPD_DPM_RequestPowerRoleSwap+0x46>
 801f006:	193b      	adds	r3, r7, r4
 801f008:	0018      	movs	r0, r3
 801f00a:	f7e7 f8e9 	bl	80061e0 <strlen>
 801f00e:	193a      	adds	r2, r7, r4
 801f010:	1dfb      	adds	r3, r7, #7
 801f012:	7819      	ldrb	r1, [r3, #0]
 801f014:	9000      	str	r0, [sp, #0]
 801f016:	0013      	movs	r3, r2
 801f018:	2200      	movs	r2, #0
 801f01a:	2006      	movs	r0, #6
 801f01c:	f7f6 fe9c 	bl	8015d58 <USBPD_TRACE_Add>
 801f020:	e00a      	b.n	801f038 <USBPD_DPM_RequestPowerRoleSwap+0x5c>
 801f022:	230c      	movs	r3, #12
 801f024:	18fa      	adds	r2, r7, r3
 801f026:	1dfb      	adds	r3, r7, #7
 801f028:	7819      	ldrb	r1, [r3, #0]
 801f02a:	2332      	movs	r3, #50	; 0x32
 801f02c:	9300      	str	r3, [sp, #0]
 801f02e:	0013      	movs	r3, r2
 801f030:	2200      	movs	r2, #0
 801f032:	2006      	movs	r0, #6
 801f034:	f7f6 fe90 	bl	8015d58 <USBPD_TRACE_Add>
  return USBPD_ERROR;
 801f038:	2302      	movs	r3, #2
}
 801f03a:	0018      	movs	r0, r3
 801f03c:	46bd      	mov	sp, r7
 801f03e:	b011      	add	sp, #68	; 0x44
 801f040:	bd90      	pop	{r4, r7, pc}
 801f042:	46c0      	nop			; (mov r8, r8)
 801f044:	0802a2e4 	.word	0x0802a2e4

0801f048 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 801f048:	b5b0      	push	{r4, r5, r7, lr}
 801f04a:	b092      	sub	sp, #72	; 0x48
 801f04c:	af02      	add	r7, sp, #8
 801f04e:	0002      	movs	r2, r0
 801f050:	1dfb      	adds	r3, r7, #7
 801f052:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 801f054:	253f      	movs	r5, #63	; 0x3f
 801f056:	197c      	adds	r4, r7, r5
 801f058:	1dfb      	adds	r3, r7, #7
 801f05a:	781b      	ldrb	r3, [r3, #0]
 801f05c:	2200      	movs	r2, #0
 801f05e:	210b      	movs	r1, #11
 801f060:	0018      	movs	r0, r3
 801f062:	f7e1 fa4f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f066:	0003      	movs	r3, r0
 801f068:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 801f06a:	197b      	adds	r3, r7, r5
 801f06c:	781b      	ldrb	r3, [r3, #0]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d027      	beq.n	801f0c2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801f072:	4a17      	ldr	r2, [pc, #92]	; (801f0d0 <USBPD_DPM_RequestVconnSwap+0x88>)
 801f074:	240c      	movs	r4, #12
 801f076:	193b      	adds	r3, r7, r4
 801f078:	2132      	movs	r1, #50	; 0x32
 801f07a:	0018      	movs	r0, r3
 801f07c:	f008 fc50 	bl	8027920 <sniprintf>
 801f080:	0002      	movs	r2, r0
 801f082:	213e      	movs	r1, #62	; 0x3e
 801f084:	187b      	adds	r3, r7, r1
 801f086:	701a      	strb	r2, [r3, #0]
 801f088:	187b      	adds	r3, r7, r1
 801f08a:	781b      	ldrb	r3, [r3, #0]
 801f08c:	2b31      	cmp	r3, #49	; 0x31
 801f08e:	d80d      	bhi.n	801f0ac <USBPD_DPM_RequestVconnSwap+0x64>
 801f090:	193b      	adds	r3, r7, r4
 801f092:	0018      	movs	r0, r3
 801f094:	f7e7 f8a4 	bl	80061e0 <strlen>
 801f098:	193a      	adds	r2, r7, r4
 801f09a:	1dfb      	adds	r3, r7, #7
 801f09c:	7819      	ldrb	r1, [r3, #0]
 801f09e:	9000      	str	r0, [sp, #0]
 801f0a0:	0013      	movs	r3, r2
 801f0a2:	2200      	movs	r2, #0
 801f0a4:	2006      	movs	r0, #6
 801f0a6:	f7f6 fe57 	bl	8015d58 <USBPD_TRACE_Add>
 801f0aa:	e00a      	b.n	801f0c2 <USBPD_DPM_RequestVconnSwap+0x7a>
 801f0ac:	230c      	movs	r3, #12
 801f0ae:	18fa      	adds	r2, r7, r3
 801f0b0:	1dfb      	adds	r3, r7, #7
 801f0b2:	7819      	ldrb	r1, [r3, #0]
 801f0b4:	2332      	movs	r3, #50	; 0x32
 801f0b6:	9300      	str	r3, [sp, #0]
 801f0b8:	0013      	movs	r3, r2
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	2006      	movs	r0, #6
 801f0be:	f7f6 fe4b 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f0c2:	233f      	movs	r3, #63	; 0x3f
 801f0c4:	18fb      	adds	r3, r7, r3
 801f0c6:	781b      	ldrb	r3, [r3, #0]
}
 801f0c8:	0018      	movs	r0, r3
 801f0ca:	46bd      	mov	sp, r7
 801f0cc:	b010      	add	sp, #64	; 0x40
 801f0ce:	bdb0      	pop	{r4, r5, r7, pc}
 801f0d0:	0802a304 	.word	0x0802a304

0801f0d4 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 801f0d4:	b5b0      	push	{r4, r5, r7, lr}
 801f0d6:	b092      	sub	sp, #72	; 0x48
 801f0d8:	af02      	add	r7, sp, #8
 801f0da:	0002      	movs	r2, r0
 801f0dc:	1dfb      	adds	r3, r7, #7
 801f0de:	701a      	strb	r2, [r3, #0]
 801f0e0:	1dbb      	adds	r3, r7, #6
 801f0e2:	1c0a      	adds	r2, r1, #0
 801f0e4:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 801f0e6:	253f      	movs	r5, #63	; 0x3f
 801f0e8:	197c      	adds	r4, r7, r5
 801f0ea:	1dbb      	adds	r3, r7, #6
 801f0ec:	781a      	ldrb	r2, [r3, #0]
 801f0ee:	1dfb      	adds	r3, r7, #7
 801f0f0:	781b      	ldrb	r3, [r3, #0]
 801f0f2:	210d      	movs	r1, #13
 801f0f4:	0018      	movs	r0, r3
 801f0f6:	f7e1 fa05 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f0fa:	0003      	movs	r3, r0
 801f0fc:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 801f0fe:	197b      	adds	r3, r7, r5
 801f100:	781b      	ldrb	r3, [r3, #0]
 801f102:	2b00      	cmp	r3, #0
 801f104:	d027      	beq.n	801f156 <USBPD_DPM_RequestSoftReset+0x82>
 801f106:	4a17      	ldr	r2, [pc, #92]	; (801f164 <USBPD_DPM_RequestSoftReset+0x90>)
 801f108:	240c      	movs	r4, #12
 801f10a:	193b      	adds	r3, r7, r4
 801f10c:	2132      	movs	r1, #50	; 0x32
 801f10e:	0018      	movs	r0, r3
 801f110:	f008 fc06 	bl	8027920 <sniprintf>
 801f114:	0002      	movs	r2, r0
 801f116:	213e      	movs	r1, #62	; 0x3e
 801f118:	187b      	adds	r3, r7, r1
 801f11a:	701a      	strb	r2, [r3, #0]
 801f11c:	187b      	adds	r3, r7, r1
 801f11e:	781b      	ldrb	r3, [r3, #0]
 801f120:	2b31      	cmp	r3, #49	; 0x31
 801f122:	d80d      	bhi.n	801f140 <USBPD_DPM_RequestSoftReset+0x6c>
 801f124:	193b      	adds	r3, r7, r4
 801f126:	0018      	movs	r0, r3
 801f128:	f7e7 f85a 	bl	80061e0 <strlen>
 801f12c:	193a      	adds	r2, r7, r4
 801f12e:	1dfb      	adds	r3, r7, #7
 801f130:	7819      	ldrb	r1, [r3, #0]
 801f132:	9000      	str	r0, [sp, #0]
 801f134:	0013      	movs	r3, r2
 801f136:	2200      	movs	r2, #0
 801f138:	2006      	movs	r0, #6
 801f13a:	f7f6 fe0d 	bl	8015d58 <USBPD_TRACE_Add>
 801f13e:	e00a      	b.n	801f156 <USBPD_DPM_RequestSoftReset+0x82>
 801f140:	230c      	movs	r3, #12
 801f142:	18fa      	adds	r2, r7, r3
 801f144:	1dfb      	adds	r3, r7, #7
 801f146:	7819      	ldrb	r1, [r3, #0]
 801f148:	2332      	movs	r3, #50	; 0x32
 801f14a:	9300      	str	r3, [sp, #0]
 801f14c:	0013      	movs	r3, r2
 801f14e:	2200      	movs	r2, #0
 801f150:	2006      	movs	r0, #6
 801f152:	f7f6 fe01 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f156:	233f      	movs	r3, #63	; 0x3f
 801f158:	18fb      	adds	r3, r7, r3
 801f15a:	781b      	ldrb	r3, [r3, #0]
}
 801f15c:	0018      	movs	r0, r3
 801f15e:	46bd      	mov	sp, r7
 801f160:	b010      	add	sp, #64	; 0x40
 801f162:	bdb0      	pop	{r4, r5, r7, pc}
 801f164:	0802a324 	.word	0x0802a324

0801f168 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 801f168:	b5b0      	push	{r4, r5, r7, lr}
 801f16a:	b092      	sub	sp, #72	; 0x48
 801f16c:	af02      	add	r7, sp, #8
 801f16e:	0002      	movs	r2, r0
 801f170:	1dfb      	adds	r3, r7, #7
 801f172:	701a      	strb	r2, [r3, #0]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 801f174:	253f      	movs	r5, #63	; 0x3f
 801f176:	197c      	adds	r4, r7, r5
 801f178:	1dfb      	adds	r3, r7, #7
 801f17a:	781b      	ldrb	r3, [r3, #0]
 801f17c:	2200      	movs	r2, #0
 801f17e:	2101      	movs	r1, #1
 801f180:	0018      	movs	r0, r3
 801f182:	f7e1 fa6b 	bl	800065c <USBPD_PE_Request_DataMessage>
 801f186:	0003      	movs	r3, r0
 801f188:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 801f18a:	197b      	adds	r3, r7, r5
 801f18c:	781b      	ldrb	r3, [r3, #0]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d027      	beq.n	801f1e2 <USBPD_DPM_RequestSourceCapability+0x7a>
 801f192:	4a17      	ldr	r2, [pc, #92]	; (801f1f0 <USBPD_DPM_RequestSourceCapability+0x88>)
 801f194:	240c      	movs	r4, #12
 801f196:	193b      	adds	r3, r7, r4
 801f198:	2132      	movs	r1, #50	; 0x32
 801f19a:	0018      	movs	r0, r3
 801f19c:	f008 fbc0 	bl	8027920 <sniprintf>
 801f1a0:	0002      	movs	r2, r0
 801f1a2:	213e      	movs	r1, #62	; 0x3e
 801f1a4:	187b      	adds	r3, r7, r1
 801f1a6:	701a      	strb	r2, [r3, #0]
 801f1a8:	187b      	adds	r3, r7, r1
 801f1aa:	781b      	ldrb	r3, [r3, #0]
 801f1ac:	2b31      	cmp	r3, #49	; 0x31
 801f1ae:	d80d      	bhi.n	801f1cc <USBPD_DPM_RequestSourceCapability+0x64>
 801f1b0:	193b      	adds	r3, r7, r4
 801f1b2:	0018      	movs	r0, r3
 801f1b4:	f7e7 f814 	bl	80061e0 <strlen>
 801f1b8:	193a      	adds	r2, r7, r4
 801f1ba:	1dfb      	adds	r3, r7, #7
 801f1bc:	7819      	ldrb	r1, [r3, #0]
 801f1be:	9000      	str	r0, [sp, #0]
 801f1c0:	0013      	movs	r3, r2
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	2006      	movs	r0, #6
 801f1c6:	f7f6 fdc7 	bl	8015d58 <USBPD_TRACE_Add>
 801f1ca:	e00a      	b.n	801f1e2 <USBPD_DPM_RequestSourceCapability+0x7a>
 801f1cc:	230c      	movs	r3, #12
 801f1ce:	18fa      	adds	r2, r7, r3
 801f1d0:	1dfb      	adds	r3, r7, #7
 801f1d2:	7819      	ldrb	r1, [r3, #0]
 801f1d4:	2332      	movs	r3, #50	; 0x32
 801f1d6:	9300      	str	r3, [sp, #0]
 801f1d8:	0013      	movs	r3, r2
 801f1da:	2200      	movs	r2, #0
 801f1dc:	2006      	movs	r0, #6
 801f1de:	f7f6 fdbb 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f1e2:	233f      	movs	r3, #63	; 0x3f
 801f1e4:	18fb      	adds	r3, r7, r3
 801f1e6:	781b      	ldrb	r3, [r3, #0]
}
 801f1e8:	0018      	movs	r0, r3
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	b010      	add	sp, #64	; 0x40
 801f1ee:	bdb0      	pop	{r4, r5, r7, pc}
 801f1f0:	0802a34c 	.word	0x0802a34c

0801f1f4 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 801f1f4:	b5b0      	push	{r4, r5, r7, lr}
 801f1f6:	b092      	sub	sp, #72	; 0x48
 801f1f8:	af02      	add	r7, sp, #8
 801f1fa:	0002      	movs	r2, r0
 801f1fc:	6039      	str	r1, [r7, #0]
 801f1fe:	1dfb      	adds	r3, r7, #7
 801f200:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 801f202:	253f      	movs	r5, #63	; 0x3f
 801f204:	197c      	adds	r4, r7, r5
 801f206:	003a      	movs	r2, r7
 801f208:	1dfb      	adds	r3, r7, #7
 801f20a:	781b      	ldrb	r3, [r3, #0]
 801f20c:	2106      	movs	r1, #6
 801f20e:	0018      	movs	r0, r3
 801f210:	f7e1 fa24 	bl	800065c <USBPD_PE_Request_DataMessage>
 801f214:	0003      	movs	r3, r0
 801f216:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 801f218:	197b      	adds	r3, r7, r5
 801f21a:	781b      	ldrb	r3, [r3, #0]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d027      	beq.n	801f270 <USBPD_DPM_RequestAlert+0x7c>
 801f220:	4a17      	ldr	r2, [pc, #92]	; (801f280 <USBPD_DPM_RequestAlert+0x8c>)
 801f222:	240c      	movs	r4, #12
 801f224:	193b      	adds	r3, r7, r4
 801f226:	2132      	movs	r1, #50	; 0x32
 801f228:	0018      	movs	r0, r3
 801f22a:	f008 fb79 	bl	8027920 <sniprintf>
 801f22e:	0002      	movs	r2, r0
 801f230:	213e      	movs	r1, #62	; 0x3e
 801f232:	187b      	adds	r3, r7, r1
 801f234:	701a      	strb	r2, [r3, #0]
 801f236:	187b      	adds	r3, r7, r1
 801f238:	781b      	ldrb	r3, [r3, #0]
 801f23a:	2b31      	cmp	r3, #49	; 0x31
 801f23c:	d80d      	bhi.n	801f25a <USBPD_DPM_RequestAlert+0x66>
 801f23e:	193b      	adds	r3, r7, r4
 801f240:	0018      	movs	r0, r3
 801f242:	f7e6 ffcd 	bl	80061e0 <strlen>
 801f246:	193a      	adds	r2, r7, r4
 801f248:	1dfb      	adds	r3, r7, #7
 801f24a:	7819      	ldrb	r1, [r3, #0]
 801f24c:	9000      	str	r0, [sp, #0]
 801f24e:	0013      	movs	r3, r2
 801f250:	2200      	movs	r2, #0
 801f252:	2006      	movs	r0, #6
 801f254:	f7f6 fd80 	bl	8015d58 <USBPD_TRACE_Add>
 801f258:	e00a      	b.n	801f270 <USBPD_DPM_RequestAlert+0x7c>
 801f25a:	230c      	movs	r3, #12
 801f25c:	18fa      	adds	r2, r7, r3
 801f25e:	1dfb      	adds	r3, r7, #7
 801f260:	7819      	ldrb	r1, [r3, #0]
 801f262:	2332      	movs	r3, #50	; 0x32
 801f264:	9300      	str	r3, [sp, #0]
 801f266:	0013      	movs	r3, r2
 801f268:	2200      	movs	r2, #0
 801f26a:	2006      	movs	r0, #6
 801f26c:	f7f6 fd74 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f270:	233f      	movs	r3, #63	; 0x3f
 801f272:	18fb      	adds	r3, r7, r3
 801f274:	781b      	ldrb	r3, [r3, #0]
}
 801f276:	0018      	movs	r0, r3
 801f278:	46bd      	mov	sp, r7
 801f27a:	b010      	add	sp, #64	; 0x40
 801f27c:	bdb0      	pop	{r4, r5, r7, pc}
 801f27e:	46c0      	nop			; (mov r8, r8)
 801f280:	0802a4dc 	.word	0x0802a4dc

0801f284 <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 801f284:	b5b0      	push	{r4, r5, r7, lr}
 801f286:	b092      	sub	sp, #72	; 0x48
 801f288:	af02      	add	r7, sp, #8
 801f28a:	0002      	movs	r2, r0
 801f28c:	1dfb      	adds	r3, r7, #7
 801f28e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 801f290:	253f      	movs	r5, #63	; 0x3f
 801f292:	197c      	adds	r4, r7, r5
 801f294:	1dfb      	adds	r3, r7, #7
 801f296:	781b      	ldrb	r3, [r3, #0]
 801f298:	2200      	movs	r2, #0
 801f29a:	2111      	movs	r1, #17
 801f29c:	0018      	movs	r0, r3
 801f29e:	f7e1 f931 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f2a2:	0003      	movs	r3, r0
 801f2a4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 801f2a6:	197b      	adds	r3, r7, r5
 801f2a8:	781b      	ldrb	r3, [r3, #0]
 801f2aa:	2b00      	cmp	r3, #0
 801f2ac:	d027      	beq.n	801f2fe <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801f2ae:	4a17      	ldr	r2, [pc, #92]	; (801f30c <USBPD_DPM_RequestGetSourceCapabilityExt+0x88>)
 801f2b0:	240c      	movs	r4, #12
 801f2b2:	193b      	adds	r3, r7, r4
 801f2b4:	2132      	movs	r1, #50	; 0x32
 801f2b6:	0018      	movs	r0, r3
 801f2b8:	f008 fb32 	bl	8027920 <sniprintf>
 801f2bc:	0002      	movs	r2, r0
 801f2be:	213e      	movs	r1, #62	; 0x3e
 801f2c0:	187b      	adds	r3, r7, r1
 801f2c2:	701a      	strb	r2, [r3, #0]
 801f2c4:	187b      	adds	r3, r7, r1
 801f2c6:	781b      	ldrb	r3, [r3, #0]
 801f2c8:	2b31      	cmp	r3, #49	; 0x31
 801f2ca:	d80d      	bhi.n	801f2e8 <USBPD_DPM_RequestGetSourceCapabilityExt+0x64>
 801f2cc:	193b      	adds	r3, r7, r4
 801f2ce:	0018      	movs	r0, r3
 801f2d0:	f7e6 ff86 	bl	80061e0 <strlen>
 801f2d4:	193a      	adds	r2, r7, r4
 801f2d6:	1dfb      	adds	r3, r7, #7
 801f2d8:	7819      	ldrb	r1, [r3, #0]
 801f2da:	9000      	str	r0, [sp, #0]
 801f2dc:	0013      	movs	r3, r2
 801f2de:	2200      	movs	r2, #0
 801f2e0:	2006      	movs	r0, #6
 801f2e2:	f7f6 fd39 	bl	8015d58 <USBPD_TRACE_Add>
 801f2e6:	e00a      	b.n	801f2fe <USBPD_DPM_RequestGetSourceCapabilityExt+0x7a>
 801f2e8:	230c      	movs	r3, #12
 801f2ea:	18fa      	adds	r2, r7, r3
 801f2ec:	1dfb      	adds	r3, r7, #7
 801f2ee:	7819      	ldrb	r1, [r3, #0]
 801f2f0:	2332      	movs	r3, #50	; 0x32
 801f2f2:	9300      	str	r3, [sp, #0]
 801f2f4:	0013      	movs	r3, r2
 801f2f6:	2200      	movs	r2, #0
 801f2f8:	2006      	movs	r0, #6
 801f2fa:	f7f6 fd2d 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f2fe:	233f      	movs	r3, #63	; 0x3f
 801f300:	18fb      	adds	r3, r7, r3
 801f302:	781b      	ldrb	r3, [r3, #0]
}
 801f304:	0018      	movs	r0, r3
 801f306:	46bd      	mov	sp, r7
 801f308:	b010      	add	sp, #64	; 0x40
 801f30a:	bdb0      	pop	{r4, r5, r7, pc}
 801f30c:	0802a4fc 	.word	0x0802a4fc

0801f310 <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 801f310:	b5b0      	push	{r4, r5, r7, lr}
 801f312:	b092      	sub	sp, #72	; 0x48
 801f314:	af02      	add	r7, sp, #8
 801f316:	0002      	movs	r2, r0
 801f318:	1dfb      	adds	r3, r7, #7
 801f31a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAPEXT, USBPD_SOPTYPE_SOP);
 801f31c:	253f      	movs	r5, #63	; 0x3f
 801f31e:	197c      	adds	r4, r7, r5
 801f320:	1dfb      	adds	r3, r7, #7
 801f322:	781b      	ldrb	r3, [r3, #0]
 801f324:	2200      	movs	r2, #0
 801f326:	2116      	movs	r1, #22
 801f328:	0018      	movs	r0, r3
 801f32a:	f7e1 f8eb 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f32e:	0003      	movs	r3, r0
 801f330:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA_EXT not accepted by the stack");
 801f332:	197b      	adds	r3, r7, r5
 801f334:	781b      	ldrb	r3, [r3, #0]
 801f336:	2b00      	cmp	r3, #0
 801f338:	d027      	beq.n	801f38a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801f33a:	4a17      	ldr	r2, [pc, #92]	; (801f398 <USBPD_DPM_RequestGetSinkCapabilityExt+0x88>)
 801f33c:	240c      	movs	r4, #12
 801f33e:	193b      	adds	r3, r7, r4
 801f340:	2132      	movs	r1, #50	; 0x32
 801f342:	0018      	movs	r0, r3
 801f344:	f008 faec 	bl	8027920 <sniprintf>
 801f348:	0002      	movs	r2, r0
 801f34a:	213e      	movs	r1, #62	; 0x3e
 801f34c:	187b      	adds	r3, r7, r1
 801f34e:	701a      	strb	r2, [r3, #0]
 801f350:	187b      	adds	r3, r7, r1
 801f352:	781b      	ldrb	r3, [r3, #0]
 801f354:	2b31      	cmp	r3, #49	; 0x31
 801f356:	d80d      	bhi.n	801f374 <USBPD_DPM_RequestGetSinkCapabilityExt+0x64>
 801f358:	193b      	adds	r3, r7, r4
 801f35a:	0018      	movs	r0, r3
 801f35c:	f7e6 ff40 	bl	80061e0 <strlen>
 801f360:	193a      	adds	r2, r7, r4
 801f362:	1dfb      	adds	r3, r7, #7
 801f364:	7819      	ldrb	r1, [r3, #0]
 801f366:	9000      	str	r0, [sp, #0]
 801f368:	0013      	movs	r3, r2
 801f36a:	2200      	movs	r2, #0
 801f36c:	2006      	movs	r0, #6
 801f36e:	f7f6 fcf3 	bl	8015d58 <USBPD_TRACE_Add>
 801f372:	e00a      	b.n	801f38a <USBPD_DPM_RequestGetSinkCapabilityExt+0x7a>
 801f374:	230c      	movs	r3, #12
 801f376:	18fa      	adds	r2, r7, r3
 801f378:	1dfb      	adds	r3, r7, #7
 801f37a:	7819      	ldrb	r1, [r3, #0]
 801f37c:	2332      	movs	r3, #50	; 0x32
 801f37e:	9300      	str	r3, [sp, #0]
 801f380:	0013      	movs	r3, r2
 801f382:	2200      	movs	r2, #0
 801f384:	2006      	movs	r0, #6
 801f386:	f7f6 fce7 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f38a:	233f      	movs	r3, #63	; 0x3f
 801f38c:	18fb      	adds	r3, r7, r3
 801f38e:	781b      	ldrb	r3, [r3, #0]
}
 801f390:	0018      	movs	r0, r3
 801f392:	46bd      	mov	sp, r7
 801f394:	b010      	add	sp, #64	; 0x40
 801f396:	bdb0      	pop	{r4, r5, r7, pc}
 801f398:	0802a528 	.word	0x0802a528

0801f39c <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 801f39c:	b590      	push	{r4, r7, lr}
 801f39e:	b093      	sub	sp, #76	; 0x4c
 801f3a0:	af02      	add	r7, sp, #8
 801f3a2:	603a      	str	r2, [r7, #0]
 801f3a4:	1dfb      	adds	r3, r7, #7
 801f3a6:	1c02      	adds	r2, r0, #0
 801f3a8:	701a      	strb	r2, [r3, #0]
 801f3aa:	1dbb      	adds	r3, r7, #6
 801f3ac:	1c0a      	adds	r2, r1, #0
 801f3ae:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801f3b0:	213f      	movs	r1, #63	; 0x3f
 801f3b2:	187b      	adds	r3, r7, r1
 801f3b4:	2202      	movs	r2, #2
 801f3b6:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_SOP == SOPType)
 801f3b8:	1dbb      	adds	r3, r7, #6
 801f3ba:	781b      	ldrb	r3, [r3, #0]
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d10d      	bne.n	801f3dc <USBPD_DPM_RequestGetManufacturerInfo+0x40>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 801f3c0:	187c      	adds	r4, r7, r1
 801f3c2:	683a      	ldr	r2, [r7, #0]
 801f3c4:	1dbb      	adds	r3, r7, #6
 801f3c6:	7819      	ldrb	r1, [r3, #0]
 801f3c8:	1dfb      	adds	r3, r7, #7
 801f3ca:	7818      	ldrb	r0, [r3, #0]
 801f3cc:	2302      	movs	r3, #2
 801f3ce:	9300      	str	r3, [sp, #0]
 801f3d0:	0013      	movs	r3, r2
 801f3d2:	2206      	movs	r2, #6
 801f3d4:	f7e1 f9ce 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801f3d8:	0003      	movs	r3, r0
 801f3da:	7023      	strb	r3, [r4, #0]
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 801f3dc:	233f      	movs	r3, #63	; 0x3f
 801f3de:	18fb      	adds	r3, r7, r3
 801f3e0:	781b      	ldrb	r3, [r3, #0]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d027      	beq.n	801f436 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801f3e6:	4a17      	ldr	r2, [pc, #92]	; (801f444 <USBPD_DPM_RequestGetManufacturerInfo+0xa8>)
 801f3e8:	240c      	movs	r4, #12
 801f3ea:	193b      	adds	r3, r7, r4
 801f3ec:	2132      	movs	r1, #50	; 0x32
 801f3ee:	0018      	movs	r0, r3
 801f3f0:	f008 fa96 	bl	8027920 <sniprintf>
 801f3f4:	0002      	movs	r2, r0
 801f3f6:	213e      	movs	r1, #62	; 0x3e
 801f3f8:	187b      	adds	r3, r7, r1
 801f3fa:	701a      	strb	r2, [r3, #0]
 801f3fc:	187b      	adds	r3, r7, r1
 801f3fe:	781b      	ldrb	r3, [r3, #0]
 801f400:	2b31      	cmp	r3, #49	; 0x31
 801f402:	d80d      	bhi.n	801f420 <USBPD_DPM_RequestGetManufacturerInfo+0x84>
 801f404:	193b      	adds	r3, r7, r4
 801f406:	0018      	movs	r0, r3
 801f408:	f7e6 feea 	bl	80061e0 <strlen>
 801f40c:	193a      	adds	r2, r7, r4
 801f40e:	1dfb      	adds	r3, r7, #7
 801f410:	7819      	ldrb	r1, [r3, #0]
 801f412:	9000      	str	r0, [sp, #0]
 801f414:	0013      	movs	r3, r2
 801f416:	2200      	movs	r2, #0
 801f418:	2006      	movs	r0, #6
 801f41a:	f7f6 fc9d 	bl	8015d58 <USBPD_TRACE_Add>
 801f41e:	e00a      	b.n	801f436 <USBPD_DPM_RequestGetManufacturerInfo+0x9a>
 801f420:	230c      	movs	r3, #12
 801f422:	18fa      	adds	r2, r7, r3
 801f424:	1dfb      	adds	r3, r7, #7
 801f426:	7819      	ldrb	r1, [r3, #0]
 801f428:	2332      	movs	r3, #50	; 0x32
 801f42a:	9300      	str	r3, [sp, #0]
 801f42c:	0013      	movs	r3, r2
 801f42e:	2200      	movs	r2, #0
 801f430:	2006      	movs	r0, #6
 801f432:	f7f6 fc91 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f436:	233f      	movs	r3, #63	; 0x3f
 801f438:	18fb      	adds	r3, r7, r3
 801f43a:	781b      	ldrb	r3, [r3, #0]
}
 801f43c:	0018      	movs	r0, r3
 801f43e:	46bd      	mov	sp, r7
 801f440:	b011      	add	sp, #68	; 0x44
 801f442:	bd90      	pop	{r4, r7, pc}
 801f444:	0802a554 	.word	0x0802a554

0801f448 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 801f448:	b5b0      	push	{r4, r5, r7, lr}
 801f44a:	b092      	sub	sp, #72	; 0x48
 801f44c:	af02      	add	r7, sp, #8
 801f44e:	0002      	movs	r2, r0
 801f450:	1dfb      	adds	r3, r7, #7
 801f452:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 801f454:	253f      	movs	r5, #63	; 0x3f
 801f456:	197c      	adds	r4, r7, r5
 801f458:	1dfb      	adds	r3, r7, #7
 801f45a:	781b      	ldrb	r3, [r3, #0]
 801f45c:	2200      	movs	r2, #0
 801f45e:	2114      	movs	r1, #20
 801f460:	0018      	movs	r0, r3
 801f462:	f7e1 f84f 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f466:	0003      	movs	r3, r0
 801f468:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 801f46a:	197b      	adds	r3, r7, r5
 801f46c:	781b      	ldrb	r3, [r3, #0]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d027      	beq.n	801f4c2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801f472:	4a17      	ldr	r2, [pc, #92]	; (801f4d0 <USBPD_DPM_RequestGetPPS_Status+0x88>)
 801f474:	240c      	movs	r4, #12
 801f476:	193b      	adds	r3, r7, r4
 801f478:	2132      	movs	r1, #50	; 0x32
 801f47a:	0018      	movs	r0, r3
 801f47c:	f008 fa50 	bl	8027920 <sniprintf>
 801f480:	0002      	movs	r2, r0
 801f482:	213e      	movs	r1, #62	; 0x3e
 801f484:	187b      	adds	r3, r7, r1
 801f486:	701a      	strb	r2, [r3, #0]
 801f488:	187b      	adds	r3, r7, r1
 801f48a:	781b      	ldrb	r3, [r3, #0]
 801f48c:	2b31      	cmp	r3, #49	; 0x31
 801f48e:	d80d      	bhi.n	801f4ac <USBPD_DPM_RequestGetPPS_Status+0x64>
 801f490:	193b      	adds	r3, r7, r4
 801f492:	0018      	movs	r0, r3
 801f494:	f7e6 fea4 	bl	80061e0 <strlen>
 801f498:	193a      	adds	r2, r7, r4
 801f49a:	1dfb      	adds	r3, r7, #7
 801f49c:	7819      	ldrb	r1, [r3, #0]
 801f49e:	9000      	str	r0, [sp, #0]
 801f4a0:	0013      	movs	r3, r2
 801f4a2:	2200      	movs	r2, #0
 801f4a4:	2006      	movs	r0, #6
 801f4a6:	f7f6 fc57 	bl	8015d58 <USBPD_TRACE_Add>
 801f4aa:	e00a      	b.n	801f4c2 <USBPD_DPM_RequestGetPPS_Status+0x7a>
 801f4ac:	230c      	movs	r3, #12
 801f4ae:	18fa      	adds	r2, r7, r3
 801f4b0:	1dfb      	adds	r3, r7, #7
 801f4b2:	7819      	ldrb	r1, [r3, #0]
 801f4b4:	2332      	movs	r3, #50	; 0x32
 801f4b6:	9300      	str	r3, [sp, #0]
 801f4b8:	0013      	movs	r3, r2
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	2006      	movs	r0, #6
 801f4be:	f7f6 fc4b 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f4c2:	233f      	movs	r3, #63	; 0x3f
 801f4c4:	18fb      	adds	r3, r7, r3
 801f4c6:	781b      	ldrb	r3, [r3, #0]
}
 801f4c8:	0018      	movs	r0, r3
 801f4ca:	46bd      	mov	sp, r7
 801f4cc:	b010      	add	sp, #64	; 0x40
 801f4ce:	bdb0      	pop	{r4, r5, r7, pc}
 801f4d0:	0802a57c 	.word	0x0802a57c

0801f4d4 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 801f4d4:	b5b0      	push	{r4, r5, r7, lr}
 801f4d6:	b092      	sub	sp, #72	; 0x48
 801f4d8:	af02      	add	r7, sp, #8
 801f4da:	0002      	movs	r2, r0
 801f4dc:	1dfb      	adds	r3, r7, #7
 801f4de:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 801f4e0:	253f      	movs	r5, #63	; 0x3f
 801f4e2:	197c      	adds	r4, r7, r5
 801f4e4:	1dfb      	adds	r3, r7, #7
 801f4e6:	781b      	ldrb	r3, [r3, #0]
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	2112      	movs	r1, #18
 801f4ec:	0018      	movs	r0, r3
 801f4ee:	f7e1 f809 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f4f2:	0003      	movs	r3, r0
 801f4f4:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 801f4f6:	197b      	adds	r3, r7, r5
 801f4f8:	781b      	ldrb	r3, [r3, #0]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d027      	beq.n	801f54e <USBPD_DPM_RequestGetStatus+0x7a>
 801f4fe:	4a17      	ldr	r2, [pc, #92]	; (801f55c <USBPD_DPM_RequestGetStatus+0x88>)
 801f500:	240c      	movs	r4, #12
 801f502:	193b      	adds	r3, r7, r4
 801f504:	2132      	movs	r1, #50	; 0x32
 801f506:	0018      	movs	r0, r3
 801f508:	f008 fa0a 	bl	8027920 <sniprintf>
 801f50c:	0002      	movs	r2, r0
 801f50e:	213e      	movs	r1, #62	; 0x3e
 801f510:	187b      	adds	r3, r7, r1
 801f512:	701a      	strb	r2, [r3, #0]
 801f514:	187b      	adds	r3, r7, r1
 801f516:	781b      	ldrb	r3, [r3, #0]
 801f518:	2b31      	cmp	r3, #49	; 0x31
 801f51a:	d80d      	bhi.n	801f538 <USBPD_DPM_RequestGetStatus+0x64>
 801f51c:	193b      	adds	r3, r7, r4
 801f51e:	0018      	movs	r0, r3
 801f520:	f7e6 fe5e 	bl	80061e0 <strlen>
 801f524:	193a      	adds	r2, r7, r4
 801f526:	1dfb      	adds	r3, r7, #7
 801f528:	7819      	ldrb	r1, [r3, #0]
 801f52a:	9000      	str	r0, [sp, #0]
 801f52c:	0013      	movs	r3, r2
 801f52e:	2200      	movs	r2, #0
 801f530:	2006      	movs	r0, #6
 801f532:	f7f6 fc11 	bl	8015d58 <USBPD_TRACE_Add>
 801f536:	e00a      	b.n	801f54e <USBPD_DPM_RequestGetStatus+0x7a>
 801f538:	230c      	movs	r3, #12
 801f53a:	18fa      	adds	r2, r7, r3
 801f53c:	1dfb      	adds	r3, r7, #7
 801f53e:	7819      	ldrb	r1, [r3, #0]
 801f540:	2332      	movs	r3, #50	; 0x32
 801f542:	9300      	str	r3, [sp, #0]
 801f544:	0013      	movs	r3, r2
 801f546:	2200      	movs	r2, #0
 801f548:	2006      	movs	r0, #6
 801f54a:	f7f6 fc05 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f54e:	233f      	movs	r3, #63	; 0x3f
 801f550:	18fb      	adds	r3, r7, r3
 801f552:	781b      	ldrb	r3, [r3, #0]
}
 801f554:	0018      	movs	r0, r3
 801f556:	46bd      	mov	sp, r7
 801f558:	b010      	add	sp, #64	; 0x40
 801f55a:	bdb0      	pop	{r4, r5, r7, pc}
 801f55c:	0802a5a8 	.word	0x0802a5a8

0801f560 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 801f560:	b5b0      	push	{r4, r5, r7, lr}
 801f562:	b092      	sub	sp, #72	; 0x48
 801f564:	af02      	add	r7, sp, #8
 801f566:	0002      	movs	r2, r0
 801f568:	1dfb      	adds	r3, r7, #7
 801f56a:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 801f56c:	253f      	movs	r5, #63	; 0x3f
 801f56e:	197c      	adds	r4, r7, r5
 801f570:	1dfb      	adds	r3, r7, #7
 801f572:	781b      	ldrb	r3, [r3, #0]
 801f574:	2200      	movs	r2, #0
 801f576:	2113      	movs	r1, #19
 801f578:	0018      	movs	r0, r3
 801f57a:	f7e0 ffc3 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f57e:	0003      	movs	r3, r0
 801f580:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 801f582:	197b      	adds	r3, r7, r5
 801f584:	781b      	ldrb	r3, [r3, #0]
 801f586:	2b00      	cmp	r3, #0
 801f588:	d027      	beq.n	801f5da <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801f58a:	4a17      	ldr	r2, [pc, #92]	; (801f5e8 <USBPD_DPM_RequestFastRoleSwap+0x88>)
 801f58c:	240c      	movs	r4, #12
 801f58e:	193b      	adds	r3, r7, r4
 801f590:	2132      	movs	r1, #50	; 0x32
 801f592:	0018      	movs	r0, r3
 801f594:	f008 f9c4 	bl	8027920 <sniprintf>
 801f598:	0002      	movs	r2, r0
 801f59a:	213e      	movs	r1, #62	; 0x3e
 801f59c:	187b      	adds	r3, r7, r1
 801f59e:	701a      	strb	r2, [r3, #0]
 801f5a0:	187b      	adds	r3, r7, r1
 801f5a2:	781b      	ldrb	r3, [r3, #0]
 801f5a4:	2b31      	cmp	r3, #49	; 0x31
 801f5a6:	d80d      	bhi.n	801f5c4 <USBPD_DPM_RequestFastRoleSwap+0x64>
 801f5a8:	193b      	adds	r3, r7, r4
 801f5aa:	0018      	movs	r0, r3
 801f5ac:	f7e6 fe18 	bl	80061e0 <strlen>
 801f5b0:	193a      	adds	r2, r7, r4
 801f5b2:	1dfb      	adds	r3, r7, #7
 801f5b4:	7819      	ldrb	r1, [r3, #0]
 801f5b6:	9000      	str	r0, [sp, #0]
 801f5b8:	0013      	movs	r3, r2
 801f5ba:	2200      	movs	r2, #0
 801f5bc:	2006      	movs	r0, #6
 801f5be:	f7f6 fbcb 	bl	8015d58 <USBPD_TRACE_Add>
 801f5c2:	e00a      	b.n	801f5da <USBPD_DPM_RequestFastRoleSwap+0x7a>
 801f5c4:	230c      	movs	r3, #12
 801f5c6:	18fa      	adds	r2, r7, r3
 801f5c8:	1dfb      	adds	r3, r7, #7
 801f5ca:	7819      	ldrb	r1, [r3, #0]
 801f5cc:	2332      	movs	r3, #50	; 0x32
 801f5ce:	9300      	str	r3, [sp, #0]
 801f5d0:	0013      	movs	r3, r2
 801f5d2:	2200      	movs	r2, #0
 801f5d4:	2006      	movs	r0, #6
 801f5d6:	f7f6 fbbf 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f5da:	233f      	movs	r3, #63	; 0x3f
 801f5dc:	18fb      	adds	r3, r7, r3
 801f5de:	781b      	ldrb	r3, [r3, #0]
}
 801f5e0:	0018      	movs	r0, r3
 801f5e2:	46bd      	mov	sp, r7
 801f5e4:	b010      	add	sp, #64	; 0x40
 801f5e6:	bdb0      	pop	{r4, r5, r7, pc}
 801f5e8:	0802a5d0 	.word	0x0802a5d0

0801f5ec <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 801f5ec:	b5b0      	push	{r4, r5, r7, lr}
 801f5ee:	b092      	sub	sp, #72	; 0x48
 801f5f0:	af02      	add	r7, sp, #8
 801f5f2:	0002      	movs	r2, r0
 801f5f4:	1dfb      	adds	r3, r7, #7
 801f5f6:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 801f5f8:	253f      	movs	r5, #63	; 0x3f
 801f5fa:	197c      	adds	r4, r7, r5
 801f5fc:	1dfb      	adds	r3, r7, #7
 801f5fe:	781b      	ldrb	r3, [r3, #0]
 801f600:	2200      	movs	r2, #0
 801f602:	2115      	movs	r1, #21
 801f604:	0018      	movs	r0, r3
 801f606:	f7e0 ff7d 	bl	8000504 <USBPD_PE_Request_CtrlMessage>
 801f60a:	0003      	movs	r3, r0
 801f60c:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 801f60e:	197b      	adds	r3, r7, r5
 801f610:	781b      	ldrb	r3, [r3, #0]
 801f612:	2b00      	cmp	r3, #0
 801f614:	d027      	beq.n	801f666 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801f616:	4a17      	ldr	r2, [pc, #92]	; (801f674 <USBPD_DPM_RequestGetCountryCodes+0x88>)
 801f618:	240c      	movs	r4, #12
 801f61a:	193b      	adds	r3, r7, r4
 801f61c:	2132      	movs	r1, #50	; 0x32
 801f61e:	0018      	movs	r0, r3
 801f620:	f008 f97e 	bl	8027920 <sniprintf>
 801f624:	0002      	movs	r2, r0
 801f626:	213e      	movs	r1, #62	; 0x3e
 801f628:	187b      	adds	r3, r7, r1
 801f62a:	701a      	strb	r2, [r3, #0]
 801f62c:	187b      	adds	r3, r7, r1
 801f62e:	781b      	ldrb	r3, [r3, #0]
 801f630:	2b31      	cmp	r3, #49	; 0x31
 801f632:	d80d      	bhi.n	801f650 <USBPD_DPM_RequestGetCountryCodes+0x64>
 801f634:	193b      	adds	r3, r7, r4
 801f636:	0018      	movs	r0, r3
 801f638:	f7e6 fdd2 	bl	80061e0 <strlen>
 801f63c:	193a      	adds	r2, r7, r4
 801f63e:	1dfb      	adds	r3, r7, #7
 801f640:	7819      	ldrb	r1, [r3, #0]
 801f642:	9000      	str	r0, [sp, #0]
 801f644:	0013      	movs	r3, r2
 801f646:	2200      	movs	r2, #0
 801f648:	2006      	movs	r0, #6
 801f64a:	f7f6 fb85 	bl	8015d58 <USBPD_TRACE_Add>
 801f64e:	e00a      	b.n	801f666 <USBPD_DPM_RequestGetCountryCodes+0x7a>
 801f650:	230c      	movs	r3, #12
 801f652:	18fa      	adds	r2, r7, r3
 801f654:	1dfb      	adds	r3, r7, #7
 801f656:	7819      	ldrb	r1, [r3, #0]
 801f658:	2332      	movs	r3, #50	; 0x32
 801f65a:	9300      	str	r3, [sp, #0]
 801f65c:	0013      	movs	r3, r2
 801f65e:	2200      	movs	r2, #0
 801f660:	2006      	movs	r0, #6
 801f662:	f7f6 fb79 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f666:	233f      	movs	r3, #63	; 0x3f
 801f668:	18fb      	adds	r3, r7, r3
 801f66a:	781b      	ldrb	r3, [r3, #0]
}
 801f66c:	0018      	movs	r0, r3
 801f66e:	46bd      	mov	sp, r7
 801f670:	b010      	add	sp, #64	; 0x40
 801f672:	bdb0      	pop	{r4, r5, r7, pc}
 801f674:	0802a5f0 	.word	0x0802a5f0

0801f678 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 801f678:	b5b0      	push	{r4, r5, r7, lr}
 801f67a:	b092      	sub	sp, #72	; 0x48
 801f67c:	af02      	add	r7, sp, #8
 801f67e:	0002      	movs	r2, r0
 801f680:	1dfb      	adds	r3, r7, #7
 801f682:	701a      	strb	r2, [r3, #0]
 801f684:	1d3b      	adds	r3, r7, #4
 801f686:	1c0a      	adds	r2, r1, #0
 801f688:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 801f68a:	253f      	movs	r5, #63	; 0x3f
 801f68c:	197c      	adds	r4, r7, r5
 801f68e:	1d3a      	adds	r2, r7, #4
 801f690:	1dfb      	adds	r3, r7, #7
 801f692:	781b      	ldrb	r3, [r3, #0]
 801f694:	2107      	movs	r1, #7
 801f696:	0018      	movs	r0, r3
 801f698:	f7e0 ffe0 	bl	800065c <USBPD_PE_Request_DataMessage>
 801f69c:	0003      	movs	r3, r0
 801f69e:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 801f6a0:	197b      	adds	r3, r7, r5
 801f6a2:	781b      	ldrb	r3, [r3, #0]
 801f6a4:	2b00      	cmp	r3, #0
 801f6a6:	d027      	beq.n	801f6f8 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801f6a8:	4a17      	ldr	r2, [pc, #92]	; (801f708 <USBPD_DPM_RequestGetCountryInfo+0x90>)
 801f6aa:	240c      	movs	r4, #12
 801f6ac:	193b      	adds	r3, r7, r4
 801f6ae:	2132      	movs	r1, #50	; 0x32
 801f6b0:	0018      	movs	r0, r3
 801f6b2:	f008 f935 	bl	8027920 <sniprintf>
 801f6b6:	0002      	movs	r2, r0
 801f6b8:	213e      	movs	r1, #62	; 0x3e
 801f6ba:	187b      	adds	r3, r7, r1
 801f6bc:	701a      	strb	r2, [r3, #0]
 801f6be:	187b      	adds	r3, r7, r1
 801f6c0:	781b      	ldrb	r3, [r3, #0]
 801f6c2:	2b31      	cmp	r3, #49	; 0x31
 801f6c4:	d80d      	bhi.n	801f6e2 <USBPD_DPM_RequestGetCountryInfo+0x6a>
 801f6c6:	193b      	adds	r3, r7, r4
 801f6c8:	0018      	movs	r0, r3
 801f6ca:	f7e6 fd89 	bl	80061e0 <strlen>
 801f6ce:	193a      	adds	r2, r7, r4
 801f6d0:	1dfb      	adds	r3, r7, #7
 801f6d2:	7819      	ldrb	r1, [r3, #0]
 801f6d4:	9000      	str	r0, [sp, #0]
 801f6d6:	0013      	movs	r3, r2
 801f6d8:	2200      	movs	r2, #0
 801f6da:	2006      	movs	r0, #6
 801f6dc:	f7f6 fb3c 	bl	8015d58 <USBPD_TRACE_Add>
 801f6e0:	e00a      	b.n	801f6f8 <USBPD_DPM_RequestGetCountryInfo+0x80>
 801f6e2:	230c      	movs	r3, #12
 801f6e4:	18fa      	adds	r2, r7, r3
 801f6e6:	1dfb      	adds	r3, r7, #7
 801f6e8:	7819      	ldrb	r1, [r3, #0]
 801f6ea:	2332      	movs	r3, #50	; 0x32
 801f6ec:	9300      	str	r3, [sp, #0]
 801f6ee:	0013      	movs	r3, r2
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	2006      	movs	r0, #6
 801f6f4:	f7f6 fb30 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f6f8:	233f      	movs	r3, #63	; 0x3f
 801f6fa:	18fb      	adds	r3, r7, r3
 801f6fc:	781b      	ldrb	r3, [r3, #0]
}
 801f6fe:	0018      	movs	r0, r3
 801f700:	46bd      	mov	sp, r7
 801f702:	b010      	add	sp, #64	; 0x40
 801f704:	bdb0      	pop	{r4, r5, r7, pc}
 801f706:	46c0      	nop			; (mov r8, r8)
 801f708:	0802a61c 	.word	0x0802a61c

0801f70c <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 801f70c:	b5b0      	push	{r4, r5, r7, lr}
 801f70e:	b092      	sub	sp, #72	; 0x48
 801f710:	af02      	add	r7, sp, #8
 801f712:	0002      	movs	r2, r0
 801f714:	6039      	str	r1, [r7, #0]
 801f716:	1dfb      	adds	r3, r7, #7
 801f718:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 801f71a:	253f      	movs	r5, #63	; 0x3f
 801f71c:	197c      	adds	r4, r7, r5
 801f71e:	683a      	ldr	r2, [r7, #0]
 801f720:	1dfb      	adds	r3, r7, #7
 801f722:	7818      	ldrb	r0, [r3, #0]
 801f724:	2301      	movs	r3, #1
 801f726:	9300      	str	r3, [sp, #0]
 801f728:	0013      	movs	r3, r2
 801f72a:	2203      	movs	r2, #3
 801f72c:	2100      	movs	r1, #0
 801f72e:	f7e1 f821 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801f732:	0003      	movs	r3, r0
 801f734:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 801f736:	197b      	adds	r3, r7, r5
 801f738:	781b      	ldrb	r3, [r3, #0]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d027      	beq.n	801f78e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801f73e:	4a17      	ldr	r2, [pc, #92]	; (801f79c <USBPD_DPM_RequestGetBatteryCapability+0x90>)
 801f740:	240c      	movs	r4, #12
 801f742:	193b      	adds	r3, r7, r4
 801f744:	2132      	movs	r1, #50	; 0x32
 801f746:	0018      	movs	r0, r3
 801f748:	f008 f8ea 	bl	8027920 <sniprintf>
 801f74c:	0002      	movs	r2, r0
 801f74e:	213e      	movs	r1, #62	; 0x3e
 801f750:	187b      	adds	r3, r7, r1
 801f752:	701a      	strb	r2, [r3, #0]
 801f754:	187b      	adds	r3, r7, r1
 801f756:	781b      	ldrb	r3, [r3, #0]
 801f758:	2b31      	cmp	r3, #49	; 0x31
 801f75a:	d80d      	bhi.n	801f778 <USBPD_DPM_RequestGetBatteryCapability+0x6c>
 801f75c:	193b      	adds	r3, r7, r4
 801f75e:	0018      	movs	r0, r3
 801f760:	f7e6 fd3e 	bl	80061e0 <strlen>
 801f764:	193a      	adds	r2, r7, r4
 801f766:	1dfb      	adds	r3, r7, #7
 801f768:	7819      	ldrb	r1, [r3, #0]
 801f76a:	9000      	str	r0, [sp, #0]
 801f76c:	0013      	movs	r3, r2
 801f76e:	2200      	movs	r2, #0
 801f770:	2006      	movs	r0, #6
 801f772:	f7f6 faf1 	bl	8015d58 <USBPD_TRACE_Add>
 801f776:	e00a      	b.n	801f78e <USBPD_DPM_RequestGetBatteryCapability+0x82>
 801f778:	230c      	movs	r3, #12
 801f77a:	18fa      	adds	r2, r7, r3
 801f77c:	1dfb      	adds	r3, r7, #7
 801f77e:	7819      	ldrb	r1, [r3, #0]
 801f780:	2332      	movs	r3, #50	; 0x32
 801f782:	9300      	str	r3, [sp, #0]
 801f784:	0013      	movs	r3, r2
 801f786:	2200      	movs	r2, #0
 801f788:	2006      	movs	r0, #6
 801f78a:	f7f6 fae5 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f78e:	233f      	movs	r3, #63	; 0x3f
 801f790:	18fb      	adds	r3, r7, r3
 801f792:	781b      	ldrb	r3, [r3, #0]
}
 801f794:	0018      	movs	r0, r3
 801f796:	46bd      	mov	sp, r7
 801f798:	b010      	add	sp, #64	; 0x40
 801f79a:	bdb0      	pop	{r4, r5, r7, pc}
 801f79c:	0802a648 	.word	0x0802a648

0801f7a0 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 801f7a0:	b5b0      	push	{r4, r5, r7, lr}
 801f7a2:	b092      	sub	sp, #72	; 0x48
 801f7a4:	af02      	add	r7, sp, #8
 801f7a6:	0002      	movs	r2, r0
 801f7a8:	6039      	str	r1, [r7, #0]
 801f7aa:	1dfb      	adds	r3, r7, #7
 801f7ac:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 801f7ae:	253f      	movs	r5, #63	; 0x3f
 801f7b0:	197c      	adds	r4, r7, r5
 801f7b2:	683a      	ldr	r2, [r7, #0]
 801f7b4:	1dfb      	adds	r3, r7, #7
 801f7b6:	7818      	ldrb	r0, [r3, #0]
 801f7b8:	2301      	movs	r3, #1
 801f7ba:	9300      	str	r3, [sp, #0]
 801f7bc:	0013      	movs	r3, r2
 801f7be:	2204      	movs	r2, #4
 801f7c0:	2100      	movs	r1, #0
 801f7c2:	f7e0 ffd7 	bl	8000774 <USBPD_PE_SendExtendedMessage>
 801f7c6:	0003      	movs	r3, r0
 801f7c8:	7023      	strb	r3, [r4, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801f7ca:	197b      	adds	r3, r7, r5
 801f7cc:	781b      	ldrb	r3, [r3, #0]
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d027      	beq.n	801f822 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801f7d2:	4a17      	ldr	r2, [pc, #92]	; (801f830 <USBPD_DPM_RequestGetBatteryStatus+0x90>)
 801f7d4:	240c      	movs	r4, #12
 801f7d6:	193b      	adds	r3, r7, r4
 801f7d8:	2132      	movs	r1, #50	; 0x32
 801f7da:	0018      	movs	r0, r3
 801f7dc:	f008 f8a0 	bl	8027920 <sniprintf>
 801f7e0:	0002      	movs	r2, r0
 801f7e2:	213e      	movs	r1, #62	; 0x3e
 801f7e4:	187b      	adds	r3, r7, r1
 801f7e6:	701a      	strb	r2, [r3, #0]
 801f7e8:	187b      	adds	r3, r7, r1
 801f7ea:	781b      	ldrb	r3, [r3, #0]
 801f7ec:	2b31      	cmp	r3, #49	; 0x31
 801f7ee:	d80d      	bhi.n	801f80c <USBPD_DPM_RequestGetBatteryStatus+0x6c>
 801f7f0:	193b      	adds	r3, r7, r4
 801f7f2:	0018      	movs	r0, r3
 801f7f4:	f7e6 fcf4 	bl	80061e0 <strlen>
 801f7f8:	193a      	adds	r2, r7, r4
 801f7fa:	1dfb      	adds	r3, r7, #7
 801f7fc:	7819      	ldrb	r1, [r3, #0]
 801f7fe:	9000      	str	r0, [sp, #0]
 801f800:	0013      	movs	r3, r2
 801f802:	2200      	movs	r2, #0
 801f804:	2006      	movs	r0, #6
 801f806:	f7f6 faa7 	bl	8015d58 <USBPD_TRACE_Add>
 801f80a:	e00a      	b.n	801f822 <USBPD_DPM_RequestGetBatteryStatus+0x82>
 801f80c:	230c      	movs	r3, #12
 801f80e:	18fa      	adds	r2, r7, r3
 801f810:	1dfb      	adds	r3, r7, #7
 801f812:	7819      	ldrb	r1, [r3, #0]
 801f814:	2332      	movs	r3, #50	; 0x32
 801f816:	9300      	str	r3, [sp, #0]
 801f818:	0013      	movs	r3, r2
 801f81a:	2200      	movs	r2, #0
 801f81c:	2006      	movs	r0, #6
 801f81e:	f7f6 fa9b 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f822:	233f      	movs	r3, #63	; 0x3f
 801f824:	18fb      	adds	r3, r7, r3
 801f826:	781b      	ldrb	r3, [r3, #0]
}
 801f828:	0018      	movs	r0, r3
 801f82a:	46bd      	mov	sp, r7
 801f82c:	b010      	add	sp, #64	; 0x40
 801f82e:	bdb0      	pop	{r4, r5, r7, pc}
 801f830:	0802a674 	.word	0x0802a674

0801f834 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 801f834:	b590      	push	{r4, r7, lr}
 801f836:	b093      	sub	sp, #76	; 0x4c
 801f838:	af02      	add	r7, sp, #8
 801f83a:	0002      	movs	r2, r0
 801f83c:	1dfb      	adds	r3, r7, #7
 801f83e:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801f840:	213f      	movs	r1, #63	; 0x3f
 801f842:	187b      	adds	r3, r7, r1
 801f844:	2202      	movs	r2, #2
 801f846:	701a      	strb	r2, [r3, #0]
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 801f848:	187b      	adds	r3, r7, r1
 801f84a:	781b      	ldrb	r3, [r3, #0]
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d027      	beq.n	801f8a0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801f850:	4a17      	ldr	r2, [pc, #92]	; (801f8b0 <USBPD_DPM_RequestSecurityRequest+0x7c>)
 801f852:	240c      	movs	r4, #12
 801f854:	193b      	adds	r3, r7, r4
 801f856:	2132      	movs	r1, #50	; 0x32
 801f858:	0018      	movs	r0, r3
 801f85a:	f008 f861 	bl	8027920 <sniprintf>
 801f85e:	0002      	movs	r2, r0
 801f860:	213e      	movs	r1, #62	; 0x3e
 801f862:	187b      	adds	r3, r7, r1
 801f864:	701a      	strb	r2, [r3, #0]
 801f866:	187b      	adds	r3, r7, r1
 801f868:	781b      	ldrb	r3, [r3, #0]
 801f86a:	2b31      	cmp	r3, #49	; 0x31
 801f86c:	d80d      	bhi.n	801f88a <USBPD_DPM_RequestSecurityRequest+0x56>
 801f86e:	193b      	adds	r3, r7, r4
 801f870:	0018      	movs	r0, r3
 801f872:	f7e6 fcb5 	bl	80061e0 <strlen>
 801f876:	193a      	adds	r2, r7, r4
 801f878:	1dfb      	adds	r3, r7, #7
 801f87a:	7819      	ldrb	r1, [r3, #0]
 801f87c:	9000      	str	r0, [sp, #0]
 801f87e:	0013      	movs	r3, r2
 801f880:	2200      	movs	r2, #0
 801f882:	2006      	movs	r0, #6
 801f884:	f7f6 fa68 	bl	8015d58 <USBPD_TRACE_Add>
 801f888:	e00a      	b.n	801f8a0 <USBPD_DPM_RequestSecurityRequest+0x6c>
 801f88a:	230c      	movs	r3, #12
 801f88c:	18fa      	adds	r2, r7, r3
 801f88e:	1dfb      	adds	r3, r7, #7
 801f890:	7819      	ldrb	r1, [r3, #0]
 801f892:	2332      	movs	r3, #50	; 0x32
 801f894:	9300      	str	r3, [sp, #0]
 801f896:	0013      	movs	r3, r2
 801f898:	2200      	movs	r2, #0
 801f89a:	2006      	movs	r0, #6
 801f89c:	f7f6 fa5c 	bl	8015d58 <USBPD_TRACE_Add>
  return _status;
 801f8a0:	233f      	movs	r3, #63	; 0x3f
 801f8a2:	18fb      	adds	r3, r7, r3
 801f8a4:	781b      	ldrb	r3, [r3, #0]
}
 801f8a6:	0018      	movs	r0, r3
 801f8a8:	46bd      	mov	sp, r7
 801f8aa:	b011      	add	sp, #68	; 0x44
 801f8ac:	bd90      	pop	{r4, r7, pc}
 801f8ae:	46c0      	nop			; (mov r8, r8)
 801f8b0:	0802a6a4 	.word	0x0802a6a4

0801f8b4 <USBPD_DPM_RequestSRCPDO>:
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @param  RequestedCurrent Requested current (in MA and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSRCPDO(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage, uint16_t RequestedCurrent)
{
 801f8b4:	b5b0      	push	{r4, r5, r7, lr}
 801f8b6:	b094      	sub	sp, #80	; 0x50
 801f8b8:	af02      	add	r7, sp, #8
 801f8ba:	0005      	movs	r5, r0
 801f8bc:	000c      	movs	r4, r1
 801f8be:	0010      	movs	r0, r2
 801f8c0:	0019      	movs	r1, r3
 801f8c2:	1dfb      	adds	r3, r7, #7
 801f8c4:	1c2a      	adds	r2, r5, #0
 801f8c6:	701a      	strb	r2, [r3, #0]
 801f8c8:	1dbb      	adds	r3, r7, #6
 801f8ca:	1c22      	adds	r2, r4, #0
 801f8cc:	701a      	strb	r2, [r3, #0]
 801f8ce:	1d3b      	adds	r3, r7, #4
 801f8d0:	1c02      	adds	r2, r0, #0
 801f8d2:	801a      	strh	r2, [r3, #0]
 801f8d4:	1cbb      	adds	r3, r7, #2
 801f8d6:	1c0a      	adds	r2, r1, #0
 801f8d8:	801a      	strh	r2, [r3, #0]
	USBPD_StatusTypeDef _status = USBPD_ERROR;
 801f8da:	2547      	movs	r5, #71	; 0x47
 801f8dc:	197b      	adds	r3, r7, r5
 801f8de:	2202      	movs	r2, #2
 801f8e0:	701a      	strb	r2, [r3, #0]
	USBPD_SNKRDO_TypeDef rdo;
	USBPD_CORE_PDO_Type_TypeDef pdo_object;

	/* Initialize RDO object*/
	rdo.d32 = 0;
 801f8e2:	2300      	movs	r3, #0
 801f8e4:	643b      	str	r3, [r7, #64]	; 0x40

	USER_SERV_SNK_BuildRequestedRDO(PortNum,IndexSrcPDO, RequestedVoltage, RequestedCurrent, &rdo, &pdo_object);
 801f8e6:	1dbb      	adds	r3, r7, #6
 801f8e8:	781b      	ldrb	r3, [r3, #0]
 801f8ea:	b299      	uxth	r1, r3
 801f8ec:	1cbb      	adds	r3, r7, #2
 801f8ee:	881c      	ldrh	r4, [r3, #0]
 801f8f0:	1d3b      	adds	r3, r7, #4
 801f8f2:	881a      	ldrh	r2, [r3, #0]
 801f8f4:	1dfb      	adds	r3, r7, #7
 801f8f6:	7818      	ldrb	r0, [r3, #0]
 801f8f8:	233c      	movs	r3, #60	; 0x3c
 801f8fa:	18fb      	adds	r3, r7, r3
 801f8fc:	9301      	str	r3, [sp, #4]
 801f8fe:	2340      	movs	r3, #64	; 0x40
 801f900:	18fb      	adds	r3, r7, r3
 801f902:	9300      	str	r3, [sp, #0]
 801f904:	0023      	movs	r3, r4
 801f906:	f000 ff6b 	bl	80207e0 <USER_SERV_SNK_BuildRequestedRDO>

	/*Send requested rdo to Policy Engine */
	_status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);
 801f90a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f90c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f90e:	197c      	adds	r4, r7, r5
 801f910:	1dfb      	adds	r3, r7, #7
 801f912:	781b      	ldrb	r3, [r3, #0]
 801f914:	0018      	movs	r0, r3
 801f916:	f7e0 fef7 	bl	8000708 <USBPD_PE_Send_Request>
 801f91a:	0003      	movs	r3, r0
 801f91c:	7023      	strb	r3, [r4, #0]

    /* USER CODE END USBPD_DPM_RequestMessageRequest */
	DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 801f91e:	197b      	adds	r3, r7, r5
 801f920:	781b      	ldrb	r3, [r3, #0]
 801f922:	2b00      	cmp	r3, #0
 801f924:	d027      	beq.n	801f976 <USBPD_DPM_RequestSRCPDO+0xc2>
 801f926:	4a17      	ldr	r2, [pc, #92]	; (801f984 <USBPD_DPM_RequestSRCPDO+0xd0>)
 801f928:	2408      	movs	r4, #8
 801f92a:	193b      	adds	r3, r7, r4
 801f92c:	2132      	movs	r1, #50	; 0x32
 801f92e:	0018      	movs	r0, r3
 801f930:	f007 fff6 	bl	8027920 <sniprintf>
 801f934:	0002      	movs	r2, r0
 801f936:	2146      	movs	r1, #70	; 0x46
 801f938:	187b      	adds	r3, r7, r1
 801f93a:	701a      	strb	r2, [r3, #0]
 801f93c:	187b      	adds	r3, r7, r1
 801f93e:	781b      	ldrb	r3, [r3, #0]
 801f940:	2b31      	cmp	r3, #49	; 0x31
 801f942:	d80d      	bhi.n	801f960 <USBPD_DPM_RequestSRCPDO+0xac>
 801f944:	193b      	adds	r3, r7, r4
 801f946:	0018      	movs	r0, r3
 801f948:	f7e6 fc4a 	bl	80061e0 <strlen>
 801f94c:	193a      	adds	r2, r7, r4
 801f94e:	1dfb      	adds	r3, r7, #7
 801f950:	7819      	ldrb	r1, [r3, #0]
 801f952:	9000      	str	r0, [sp, #0]
 801f954:	0013      	movs	r3, r2
 801f956:	2200      	movs	r2, #0
 801f958:	2006      	movs	r0, #6
 801f95a:	f7f6 f9fd 	bl	8015d58 <USBPD_TRACE_Add>
 801f95e:	e00a      	b.n	801f976 <USBPD_DPM_RequestSRCPDO+0xc2>
 801f960:	2308      	movs	r3, #8
 801f962:	18fa      	adds	r2, r7, r3
 801f964:	1dfb      	adds	r3, r7, #7
 801f966:	7819      	ldrb	r1, [r3, #0]
 801f968:	2332      	movs	r3, #50	; 0x32
 801f96a:	9300      	str	r3, [sp, #0]
 801f96c:	0013      	movs	r3, r2
 801f96e:	2200      	movs	r2, #0
 801f970:	2006      	movs	r0, #6
 801f972:	f7f6 f9f1 	bl	8015d58 <USBPD_TRACE_Add>
	return _status;
 801f976:	2347      	movs	r3, #71	; 0x47
 801f978:	18fb      	adds	r3, r7, r3
 801f97a:	781b      	ldrb	r3, [r3, #0]
}
 801f97c:	0018      	movs	r0, r3
 801f97e:	46bd      	mov	sp, r7
 801f980:	b012      	add	sp, #72	; 0x48
 801f982:	bdb0      	pop	{r4, r5, r7, pc}
 801f984:	0802a250 	.word	0x0802a250

0801f988 <BSP_PWR_VBUSGetVoltage>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Voltage measured voltage level (in mV)
  */
__weak uint32_t BSP_PWR_VBUSGetVoltage(uint32_t PortId)
{
 801f988:	b580      	push	{r7, lr}
 801f98a:	b086      	sub	sp, #24
 801f98c:	af02      	add	r7, sp, #8
 801f98e:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetVoltage");
 801f990:	687b      	ldr	r3, [r7, #4]
 801f992:	b2d9      	uxtb	r1, r3
 801f994:	4b0a      	ldr	r3, [pc, #40]	; (801f9c0 <BSP_PWR_VBUSGetVoltage+0x38>)
 801f996:	2227      	movs	r2, #39	; 0x27
 801f998:	9200      	str	r2, [sp, #0]
 801f99a:	2200      	movs	r2, #0
 801f99c:	2006      	movs	r0, #6
 801f99e:	f7f6 f9db 	bl	8015d58 <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetVoltage */
  uint32_t voltage = 0;
 801f9a2:	2300      	movs	r3, #0
 801f9a4:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetVoltage(PortId, &voltage);
 801f9a6:	230c      	movs	r3, #12
 801f9a8:	18fa      	adds	r2, r7, r3
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	0011      	movs	r1, r2
 801f9ae:	0018      	movs	r0, r3
 801f9b0:	f000 f874 	bl	801fa9c <BSP_USBPD_PWR_VBUSGetVoltage>
  return voltage;
 801f9b4:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetVoltage */
}
 801f9b6:	0018      	movs	r0, r3
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	b004      	add	sp, #16
 801f9bc:	bd80      	pop	{r7, pc}
 801f9be:	46c0      	nop			; (mov r8, r8)
 801f9c0:	0802a844 	.word	0x0802a844

0801f9c4 <BSP_PWR_VBUSGetCurrent>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrent(uint32_t PortId)
{
 801f9c4:	b580      	push	{r7, lr}
 801f9c6:	b086      	sub	sp, #24
 801f9c8:	af02      	add	r7, sp, #8
 801f9ca:	6078      	str	r0, [r7, #4]
  PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrent");
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	b2d9      	uxtb	r1, r3
 801f9d0:	4b0a      	ldr	r3, [pc, #40]	; (801f9fc <BSP_PWR_VBUSGetCurrent+0x38>)
 801f9d2:	2227      	movs	r2, #39	; 0x27
 801f9d4:	9200      	str	r2, [sp, #0]
 801f9d6:	2200      	movs	r2, #0
 801f9d8:	2006      	movs	r0, #6
 801f9da:	f7f6 f9bd 	bl	8015d58 <USBPD_TRACE_Add>
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t current = 0;
 801f9de:	2300      	movs	r3, #0
 801f9e0:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrent(PortId, &current);
 801f9e2:	230c      	movs	r3, #12
 801f9e4:	18fa      	adds	r2, r7, r3
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	0011      	movs	r1, r2
 801f9ea:	0018      	movs	r0, r3
 801f9ec:	f000 f892 	bl	801fb14 <BSP_USBPD_PWR_VBUSGetCurrent>

  return current;
 801f9f0:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801f9f2:	0018      	movs	r0, r3
 801f9f4:	46bd      	mov	sp, r7
 801f9f6:	b004      	add	sp, #16
 801f9f8:	bd80      	pop	{r7, pc}
 801f9fa:	46c0      	nop			; (mov r8, r8)
 801f9fc:	0802a86c 	.word	0x0802a86c

0801fa00 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801fa00:	b580      	push	{r7, lr}
 801fa02:	b084      	sub	sp, #16
 801fa04:	af00      	add	r7, sp, #0
 801fa06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801fa08:	2300      	movs	r3, #0
 801fa0a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	2b01      	cmp	r3, #1
 801fa10:	d902      	bls.n	801fa18 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801fa12:	2302      	movs	r3, #2
 801fa14:	425b      	negs	r3, r3
 801fa16:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801fa18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801fa1a:	0018      	movs	r0, r3
 801fa1c:	46bd      	mov	sp, r7
 801fa1e:	b004      	add	sp, #16
 801fa20:	bd80      	pop	{r7, pc}
	...

0801fa24 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	b086      	sub	sp, #24
 801fa28:	af02      	add	r7, sp, #8
 801fa2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801fa2c:	2300      	movs	r3, #0
 801fa2e:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	2b01      	cmp	r3, #1
 801fa34:	d903      	bls.n	801fa3e <BSP_USBPD_PWR_VBUSInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801fa36:	2302      	movs	r3, #2
 801fa38:	425b      	negs	r3, r3
 801fa3a:	60fb      	str	r3, [r7, #12]
 801fa3c:	e008      	b.n	801fa50 <BSP_USBPD_PWR_VBUSInit+0x2c>
  {
    /* !!!
      BSP_PWR_VBUSInit is obsolete. You may need to move your user code
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	b2d9      	uxtb	r1, r3
 801fa42:	4b06      	ldr	r3, [pc, #24]	; (801fa5c <BSP_USBPD_PWR_VBUSInit+0x38>)
 801fa44:	2225      	movs	r2, #37	; 0x25
 801fa46:	9200      	str	r2, [sp, #0]
 801fa48:	2200      	movs	r2, #0
 801fa4a:	2006      	movs	r0, #6
 801fa4c:	f7f6 f984 	bl	8015d58 <USBPD_TRACE_Add>
  }

  return ret;
 801fa50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801fa52:	0018      	movs	r0, r3
 801fa54:	46bd      	mov	sp, r7
 801fa56:	b004      	add	sp, #16
 801fa58:	bd80      	pop	{r7, pc}
 801fa5a:	46c0      	nop			; (mov r8, r8)
 801fa5c:	0802aa80 	.word	0x0802aa80

0801fa60 <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801fa60:	b580      	push	{r7, lr}
 801fa62:	b086      	sub	sp, #24
 801fa64:	af02      	add	r7, sp, #8
 801fa66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801fa68:	230b      	movs	r3, #11
 801fa6a:	425b      	negs	r3, r3
 801fa6c:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	2b01      	cmp	r3, #1
 801fa72:	d902      	bls.n	801fa7a <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801fa74:	2302      	movs	r3, #2
 801fa76:	425b      	negs	r3, r3
 801fa78:	60fb      	str	r3, [r7, #12]
  }
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	b2d9      	uxtb	r1, r3
 801fa7e:	4b06      	ldr	r3, [pc, #24]	; (801fa98 <BSP_USBPD_PWR_VBUSDeInit+0x38>)
 801fa80:	2227      	movs	r2, #39	; 0x27
 801fa82:	9200      	str	r2, [sp, #0]
 801fa84:	2200      	movs	r2, #0
 801fa86:	2006      	movs	r0, #6
 801fa88:	f7f6 f966 	bl	8015d58 <USBPD_TRACE_Add>
  return ret;
 801fa8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801fa8e:	0018      	movs	r0, r3
 801fa90:	46bd      	mov	sp, r7
 801fa92:	b004      	add	sp, #16
 801fa94:	bd80      	pop	{r7, pc}
 801fa96:	46c0      	nop			; (mov r8, r8)
 801fa98:	0802aaa8 	.word	0x0802aaa8

0801fa9c <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801fa9c:	b580      	push	{r7, lr}
 801fa9e:	b086      	sub	sp, #24
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	6078      	str	r0, [r7, #4]
 801faa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid */
  int32_t ret = BSP_ERROR_NONE;
 801faa6:	2300      	movs	r3, #0
 801faa8:	617b      	str	r3, [r7, #20]
  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	2b01      	cmp	r3, #1
 801faae:	d802      	bhi.n	801fab6 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801fab0:	683b      	ldr	r3, [r7, #0]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d106      	bne.n	801fac4 <BSP_USBPD_PWR_VBUSGetVoltage+0x28>
  {
	  ret = BSP_ERROR_WRONG_PARAM;
 801fab6:	2302      	movs	r3, #2
 801fab8:	425b      	negs	r3, r3
 801faba:	617b      	str	r3, [r7, #20]
	  *pVoltage = 0;
 801fabc:	683b      	ldr	r3, [r7, #0]
 801fabe:	2200      	movs	r2, #0
 801fac0:	601a      	str	r2, [r3, #0]
 801fac2:	e017      	b.n	801faf4 <BSP_USBPD_PWR_VBUSGetVoltage+0x58>
  {
	  uint32_t vadc;
	  uint32_t vsense;

	  //Calculate vadc(mV) on ADC pin based on ADC resolution and reference voltage VDDA
	  vadc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801fac4:	4b0e      	ldr	r3, [pc, #56]	; (801fb00 <BSP_USBPD_PWR_VBUSGetVoltage+0x64>)
 801fac6:	881b      	ldrh	r3, [r3, #0]
 801fac8:	b29b      	uxth	r3, r3
 801faca:	001a      	movs	r2, r3
 801facc:	4b0d      	ldr	r3, [pc, #52]	; (801fb04 <BSP_USBPD_PWR_VBUSGetVoltage+0x68>)
 801face:	4353      	muls	r3, r2
 801fad0:	490d      	ldr	r1, [pc, #52]	; (801fb08 <BSP_USBPD_PWR_VBUSGetVoltage+0x6c>)
 801fad2:	0018      	movs	r0, r3
 801fad4:	f7e6 fba0 	bl	8006218 <__udivsi3>
 801fad8:	0003      	movs	r3, r0
 801fada:	613b      	str	r3, [r7, #16]
			  LL_ADC_RESOLUTION_12B); /* mV */


	  /* Calculate VBUS on PD_sense line*/
	  /* Value is multiplied by 5.97 (Divider R_B/R_A (40.2K/200K) for VSENSE) */
	  vsense = vadc * (R_A + R_B)/R_B;
 801fadc:	693b      	ldr	r3, [r7, #16]
 801fade:	4a0b      	ldr	r2, [pc, #44]	; (801fb0c <BSP_USBPD_PWR_VBUSGetVoltage+0x70>)
 801fae0:	4353      	muls	r3, r2
 801fae2:	490b      	ldr	r1, [pc, #44]	; (801fb10 <BSP_USBPD_PWR_VBUSGetVoltage+0x74>)
 801fae4:	0018      	movs	r0, r3
 801fae6:	f7e6 fb97 	bl	8006218 <__udivsi3>
 801faea:	0003      	movs	r3, r0
 801faec:	60fb      	str	r3, [r7, #12]
	  *pVoltage = vsense;
 801faee:	683b      	ldr	r3, [r7, #0]
 801faf0:	68fa      	ldr	r2, [r7, #12]
 801faf2:	601a      	str	r2, [r3, #0]
  }
  return ret;
 801faf4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801faf6:	0018      	movs	r0, r3
 801faf8:	46bd      	mov	sp, r7
 801fafa:	b006      	add	sp, #24
 801fafc:	bd80      	pop	{r7, pc}
 801fafe:	46c0      	nop			; (mov r8, r8)
 801fb00:	20000568 	.word	0x20000568
 801fb04:	00000ce4 	.word	0x00000ce4
 801fb08:	00000fff 	.word	0x00000fff
 801fb0c:	000399e0 	.word	0x000399e0
 801fb10:	00008ca0 	.word	0x00008ca0

0801fb14 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t Instance, int32_t *pCurrent)
{
 801fb14:	b580      	push	{r7, lr}
 801fb16:	b086      	sub	sp, #24
 801fb18:	af00      	add	r7, sp, #0
 801fb1a:	6078      	str	r0, [r7, #4]
 801fb1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	2b01      	cmp	r3, #1
 801fb22:	d802      	bhi.n	801fb2a <BSP_USBPD_PWR_VBUSGetCurrent+0x16>
 801fb24:	683b      	ldr	r3, [r7, #0]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d106      	bne.n	801fb38 <BSP_USBPD_PWR_VBUSGetCurrent+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801fb2a:	2302      	movs	r3, #2
 801fb2c:	425b      	negs	r3, r3
 801fb2e:	617b      	str	r3, [r7, #20]
    *pCurrent = 0;
 801fb30:	683b      	ldr	r3, [r7, #0]
 801fb32:	2200      	movs	r2, #0
 801fb34:	601a      	str	r2, [r3, #0]
 801fb36:	e020      	b.n	801fb7a <BSP_USBPD_PWR_VBUSGetCurrent+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801fb38:	4b12      	ldr	r3, [pc, #72]	; (801fb84 <BSP_USBPD_PWR_VBUSGetCurrent+0x70>)
 801fb3a:	889b      	ldrh	r3, [r3, #4]
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	001a      	movs	r2, r3
 801fb40:	4b11      	ldr	r3, [pc, #68]	; (801fb88 <BSP_USBPD_PWR_VBUSGetCurrent+0x74>)
 801fb42:	4353      	muls	r3, r2
 801fb44:	4911      	ldr	r1, [pc, #68]	; (801fb8c <BSP_USBPD_PWR_VBUSGetCurrent+0x78>)
 801fb46:	0018      	movs	r0, r3
 801fb48:	f7e6 fb66 	bl	8006218 <__udivsi3>
 801fb4c:	0003      	movs	r3, r0
 801fb4e:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_2], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate isense on PD_sense based on R_SENSE and G of amplifier
	 isense = vout_adc * 1000 / (G_SENSE*R_SENSE_MOHMS); /* mA */
 801fb50:	693a      	ldr	r2, [r7, #16]
 801fb52:	0013      	movs	r3, r2
 801fb54:	015b      	lsls	r3, r3, #5
 801fb56:	1a9b      	subs	r3, r3, r2
 801fb58:	009b      	lsls	r3, r3, #2
 801fb5a:	189b      	adds	r3, r3, r2
 801fb5c:	00db      	lsls	r3, r3, #3
 801fb5e:	001a      	movs	r2, r3
 801fb60:	2396      	movs	r3, #150	; 0x96
 801fb62:	0099      	lsls	r1, r3, #2
 801fb64:	0010      	movs	r0, r2
 801fb66:	f7e6 fb57 	bl	8006218 <__udivsi3>
 801fb6a:	0003      	movs	r3, r0
 801fb6c:	60fb      	str	r3, [r7, #12]
	*pCurrent = isense;
 801fb6e:	68fa      	ldr	r2, [r7, #12]
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801fb74:	230b      	movs	r3, #11
 801fb76:	425b      	negs	r3, r3
 801fb78:	617b      	str	r3, [r7, #20]
  /* !!!
      BSP_PWR_VBUSGetCurrent is obsolete. You may need to move your user code
      inside this function
   !!! */
  //PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetCurrent");
  return ret;
 801fb7a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801fb7c:	0018      	movs	r0, r3
 801fb7e:	46bd      	mov	sp, r7
 801fb80:	b006      	add	sp, #24
 801fb82:	bd80      	pop	{r7, pc}
 801fb84:	20000568 	.word	0x20000568
 801fb88:	00000ce4 	.word	0x00000ce4
 801fb8c:	00000fff 	.word	0x00000fff

0801fb90 <BSP_USBPD_PWR_VBUSGetCurrentOCP>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetCurrentOCP(uint32_t Instance, int32_t *pCurrentOCP)
{
 801fb90:	b580      	push	{r7, lr}
 801fb92:	b086      	sub	sp, #24
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
 801fb98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetCurrent */
  /* Check if instance is valid       */
  int32_t ret;

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrentOCP))
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	2b01      	cmp	r3, #1
 801fb9e:	d802      	bhi.n	801fba6 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x16>
 801fba0:	683b      	ldr	r3, [r7, #0]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d106      	bne.n	801fbb4 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801fba6:	2302      	movs	r3, #2
 801fba8:	425b      	negs	r3, r3
 801fbaa:	617b      	str	r3, [r7, #20]
    *pCurrentOCP = 0;
 801fbac:	683b      	ldr	r3, [r7, #0]
 801fbae:	2200      	movs	r2, #0
 801fbb0:	601a      	str	r2, [r3, #0]
 801fbb2:	e020      	b.n	801fbf6 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x66>
  {
	 uint32_t vout_adc;
	 uint32_t isense;

	 //Calculate vout_adc(mV) on ADC pin based on ADC resolution and reference voltage VDDA and raw ADC value
	 vout_adc = __LL_ADC_CALC_DATA_TO_VOLTAGE( VDDA_APPLI, \
 801fbb4:	4b12      	ldr	r3, [pc, #72]	; (801fc00 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x70>)
 801fbb6:	885b      	ldrh	r3, [r3, #2]
 801fbb8:	b29b      	uxth	r3, r3
 801fbba:	001a      	movs	r2, r3
 801fbbc:	4b11      	ldr	r3, [pc, #68]	; (801fc04 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x74>)
 801fbbe:	4353      	muls	r3, r2
 801fbc0:	4911      	ldr	r1, [pc, #68]	; (801fc08 <BSP_USBPD_PWR_VBUSGetCurrentOCP+0x78>)
 801fbc2:	0018      	movs	r0, r3
 801fbc4:	f7e6 fb28 	bl	8006218 <__udivsi3>
 801fbc8:	0003      	movs	r3, r0
 801fbca:	613b      	str	r3, [r7, #16]
	  			  aADCxConvertedValues[RANK_1], \
	  			  LL_ADC_RESOLUTION_12B); /* mV */

	 //Calculate OCP current on PD_OCP line based on R_OCP and G of amplifier INA301
	 isense = vout_adc * 1000 / (G_OCP*R_OCP_MOHMS); /* mA */
 801fbcc:	693a      	ldr	r2, [r7, #16]
 801fbce:	0013      	movs	r3, r2
 801fbd0:	015b      	lsls	r3, r3, #5
 801fbd2:	1a9b      	subs	r3, r3, r2
 801fbd4:	009b      	lsls	r3, r3, #2
 801fbd6:	189b      	adds	r3, r3, r2
 801fbd8:	00db      	lsls	r3, r3, #3
 801fbda:	001a      	movs	r2, r3
 801fbdc:	23fa      	movs	r3, #250	; 0xfa
 801fbde:	0059      	lsls	r1, r3, #1
 801fbe0:	0010      	movs	r0, r2
 801fbe2:	f7e6 fb19 	bl	8006218 <__udivsi3>
 801fbe6:	0003      	movs	r3, r0
 801fbe8:	60fb      	str	r3, [r7, #12]
	*pCurrentOCP = isense;
 801fbea:	68fa      	ldr	r2, [r7, #12]
 801fbec:	683b      	ldr	r3, [r7, #0]
 801fbee:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801fbf0:	230b      	movs	r3, #11
 801fbf2:	425b      	negs	r3, r3
 801fbf4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 801fbf6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetCurrent */
}
 801fbf8:	0018      	movs	r0, r3
 801fbfa:	46bd      	mov	sp, r7
 801fbfc:	b006      	add	sp, #24
 801fbfe:	bd80      	pop	{r7, pc}
 801fc00:	20000568 	.word	0x20000568
 801fc04:	00000ce4 	.word	0x00000ce4
 801fc08:	00000fff 	.word	0x00000fff

0801fc0c <BSP_PWR_VBUSGetCurrentOCP>:
  *         @arg TYPE_C_PORT_1
  *         @arg TYPE_C_PORT_2
  * @retval Current measured current level (in mA)
  */
__weak int32_t BSP_PWR_VBUSGetCurrentOCP(uint32_t PortId)
{
 801fc0c:	b580      	push	{r7, lr}
 801fc0e:	b084      	sub	sp, #16
 801fc10:	af00      	add	r7, sp, #0
 801fc12:	6078      	str	r0, [r7, #4]
  //PWR_DEBUG_TRACE(PortId, "ADVICE: Obsolete BSP_PWR_VBUSGetCurrentOCP");
/* USER CODE BEGIN BSP_PWR_VBUSGetCurrent */
  int32_t currentOCP = 0;
 801fc14:	2300      	movs	r3, #0
 801fc16:	60fb      	str	r3, [r7, #12]

  (void)BSP_USBPD_PWR_VBUSGetCurrentOCP(PortId, &currentOCP);
 801fc18:	230c      	movs	r3, #12
 801fc1a:	18fa      	adds	r2, r7, r3
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	0011      	movs	r1, r2
 801fc20:	0018      	movs	r0, r3
 801fc22:	f7ff ffb5 	bl	801fb90 <BSP_USBPD_PWR_VBUSGetCurrentOCP>

  return currentOCP;
 801fc26:	68fb      	ldr	r3, [r7, #12]
/* USER CODE END BSP_PWR_VBUSGetCurrent */
}
 801fc28:	0018      	movs	r0, r3
 801fc2a:	46bd      	mov	sp, r7
 801fc2c:	b004      	add	sp, #16
 801fc2e:	bd80      	pop	{r7, pc}

0801fc30 <USBPD_USER_SERV_StoreSRCPDO>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_USER_SERV_StoreSRCPDO(uint8_t PortNum, uint8_t *Ptr, uint32_t Size)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	b086      	sub	sp, #24
 801fc34:	af00      	add	r7, sp, #0
 801fc36:	60b9      	str	r1, [r7, #8]
 801fc38:	607a      	str	r2, [r7, #4]
 801fc3a:	210f      	movs	r1, #15
 801fc3c:	187b      	adds	r3, r7, r1
 801fc3e:	1c02      	adds	r2, r0, #0
 801fc40:	701a      	strb	r2, [r3, #0]
  /*!< Storage of Received Source PDO values */
  if (Size <= (USBPD_MAX_NB_PDO * 4U))
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	2b1c      	cmp	r3, #28
 801fc46:	d82c      	bhi.n	801fca2 <USBPD_USER_SERV_StoreSRCPDO+0x72>
  {
    uint8_t *rdo;
    DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4U);
 801fc48:	187b      	adds	r3, r7, r1
 801fc4a:	781a      	ldrb	r2, [r3, #0]
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	0899      	lsrs	r1, r3, #2
 801fc50:	4816      	ldr	r0, [pc, #88]	; (801fcac <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801fc52:	0013      	movs	r3, r2
 801fc54:	009b      	lsls	r3, r3, #2
 801fc56:	189b      	adds	r3, r3, r2
 801fc58:	011b      	lsls	r3, r3, #4
 801fc5a:	18c3      	adds	r3, r0, r3
 801fc5c:	331c      	adds	r3, #28
 801fc5e:	6019      	str	r1, [r3, #0]
    /* Copy PDO data in DPM Handle field */
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801fc60:	2300      	movs	r3, #0
 801fc62:	617b      	str	r3, [r7, #20]
 801fc64:	e018      	b.n	801fc98 <USBPD_USER_SERV_StoreSRCPDO+0x68>
    {
      rdo = (uint8_t *)&DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index];
 801fc66:	230f      	movs	r3, #15
 801fc68:	18fb      	adds	r3, r7, r3
 801fc6a:	781a      	ldrb	r2, [r3, #0]
 801fc6c:	0013      	movs	r3, r2
 801fc6e:	009b      	lsls	r3, r3, #2
 801fc70:	189b      	adds	r3, r3, r2
 801fc72:	009b      	lsls	r3, r3, #2
 801fc74:	697a      	ldr	r2, [r7, #20]
 801fc76:	189b      	adds	r3, r3, r2
 801fc78:	009a      	lsls	r2, r3, #2
 801fc7a:	4b0c      	ldr	r3, [pc, #48]	; (801fcac <USBPD_USER_SERV_StoreSRCPDO+0x7c>)
 801fc7c:	18d3      	adds	r3, r2, r3
 801fc7e:	613b      	str	r3, [r7, #16]
      (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 801fc80:	697b      	ldr	r3, [r7, #20]
 801fc82:	009b      	lsls	r3, r3, #2
 801fc84:	68ba      	ldr	r2, [r7, #8]
 801fc86:	18d1      	adds	r1, r2, r3
 801fc88:	693b      	ldr	r3, [r7, #16]
 801fc8a:	2204      	movs	r2, #4
 801fc8c:	0018      	movs	r0, r3
 801fc8e:	f008 f880 	bl	8027d92 <memcpy>
    for (uint32_t index = 0; index < (Size / 4U); index++)
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	3301      	adds	r3, #1
 801fc96:	617b      	str	r3, [r7, #20]
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	089b      	lsrs	r3, r3, #2
 801fc9c:	697a      	ldr	r2, [r7, #20]
 801fc9e:	429a      	cmp	r2, r3
 801fca0:	d3e1      	bcc.n	801fc66 <USBPD_USER_SERV_StoreSRCPDO+0x36>
    }
  }
}
 801fca2:	46c0      	nop			; (mov r8, r8)
 801fca4:	46bd      	mov	sp, r7
 801fca6:	b006      	add	sp, #24
 801fca8:	bd80      	pop	{r7, pc}
 801fcaa:	46c0      	nop			; (mov r8, r8)
 801fcac:	20003410 	.word	0x20003410

0801fcb0 <USBPD_USER_SERV_EvaluateCapa>:
  * @retval None
  */
void USBPD_USER_SERV_EvaluateCapa(uint8_t PortNum,
                                  uint32_t *PtrRequestData,
                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801fcb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcb2:	b0ab      	sub	sp, #172	; 0xac
 801fcb4:	af02      	add	r7, sp, #8
 801fcb6:	60b9      	str	r1, [r7, #8]
 801fcb8:	607a      	str	r2, [r7, #4]
 801fcba:	240f      	movs	r4, #15
 801fcbc:	193b      	adds	r3, r7, r4
 801fcbe:	1c02      	adds	r2, r0, #0
 801fcc0:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef  fixed_pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 801fcc2:	193b      	adds	r3, r7, r4
 801fcc4:	781a      	ldrb	r2, [r3, #0]
 801fcc6:	0013      	movs	r3, r2
 801fcc8:	009b      	lsls	r3, r3, #2
 801fcca:	189b      	adds	r3, r3, r2
 801fccc:	011b      	lsls	r3, r3, #4
 801fcce:	4a66      	ldr	r2, [pc, #408]	; (801fe68 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801fcd0:	189b      	adds	r3, r3, r2
 801fcd2:	269c      	movs	r6, #156	; 0x9c
 801fcd4:	19ba      	adds	r2, r7, r6
 801fcd6:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 801fcd8:	193b      	adds	r3, r7, r4
 801fcda:	781b      	ldrb	r3, [r3, #0]
 801fcdc:	2274      	movs	r2, #116	; 0x74
 801fcde:	435a      	muls	r2, r3
 801fce0:	4b62      	ldr	r3, [pc, #392]	; (801fe6c <USBPD_USER_SERV_EvaluateCapa+0x1bc>)
 801fce2:	18d3      	adds	r3, r2, r3
 801fce4:	2298      	movs	r2, #152	; 0x98
 801fce6:	18b9      	adds	r1, r7, r2
 801fce8:	600b      	str	r3, [r1, #0]
  uint32_t pdoindex;
  uint32_t size;
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  snkpowerrequestdetails.RequestedVoltageInmVunits = 0;
 801fcea:	2178      	movs	r1, #120	; 0x78
 801fcec:	187b      	adds	r3, r7, r1
 801fcee:	2200      	movs	r2, #0
 801fcf0:	601a      	str	r2, [r3, #0]
  snkpowerrequestdetails.OperatingCurrentInmAunits = 0;
 801fcf2:	187b      	adds	r3, r7, r1
 801fcf4:	2200      	movs	r2, #0
 801fcf6:	609a      	str	r2, [r3, #8]

  /* Find the Pdo index for the requested voltage, depending on the wanted method */
  pdoindex = USER_SERV_FindVoltageIndex(PortNum, &snkpowerrequestdetails, USER_SERV_PDO_Sel_Method);
 801fcf8:	193b      	adds	r3, r7, r4
 801fcfa:	7818      	ldrb	r0, [r3, #0]
 801fcfc:	4b5c      	ldr	r3, [pc, #368]	; (801fe70 <USBPD_USER_SERV_EvaluateCapa+0x1c0>)
 801fcfe:	781a      	ldrb	r2, [r3, #0]
 801fd00:	187b      	adds	r3, r7, r1
 801fd02:	0019      	movs	r1, r3
 801fd04:	f000 fa56 	bl	80201b4 <USER_SERV_FindVoltageIndex>
 801fd08:	0003      	movs	r3, r0
 801fd0a:	2194      	movs	r1, #148	; 0x94
 801fd0c:	1878      	adds	r0, r7, r1
 801fd0e:	6003      	str	r3, [r0, #0]

  /* Initialize RDO */
  rdo.d32 = 0;
 801fd10:	2300      	movs	r3, #0
 801fd12:	258c      	movs	r5, #140	; 0x8c
 801fd14:	1978      	adds	r0, r7, r5
 801fd16:	6003      	str	r3, [r0, #0]

  /* If no valid SNK PDO or if no SRC PDO match found
      (index>=nb of valid received SRC PDOs or function returned DPM_NO_SRC_PDO_FOUND */
  if (pdoindex >= pdhandle->DPM_NumberOfRcvSRCPDO)
 801fd18:	19b8      	adds	r0, r7, r6
 801fd1a:	6803      	ldr	r3, [r0, #0]
 801fd1c:	69db      	ldr	r3, [r3, #28]
 801fd1e:	1879      	adds	r1, r7, r1
 801fd20:	680a      	ldr	r2, [r1, #0]
 801fd22:	429a      	cmp	r2, r3
 801fd24:	d200      	bcs.n	801fd28 <USBPD_USER_SERV_EvaluateCapa+0x78>
 801fd26:	e085      	b.n	801fe34 <USBPD_USER_SERV_EvaluateCapa+0x184>
  {
#if defined(_TRACE)
    uint8_t msg[] = "USBPD_USER_SERV_EvaluateCapa: could not find desired voltage";
 801fd28:	2114      	movs	r1, #20
 801fd2a:	187a      	adds	r2, r7, r1
 801fd2c:	4b51      	ldr	r3, [pc, #324]	; (801fe74 <USBPD_USER_SERV_EvaluateCapa+0x1c4>)
 801fd2e:	0010      	movs	r0, r2
 801fd30:	0019      	movs	r1, r3
 801fd32:	233d      	movs	r3, #61	; 0x3d
 801fd34:	001a      	movs	r2, r3
 801fd36:	f008 f82c 	bl	8027d92 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 801fd3a:	2114      	movs	r1, #20
 801fd3c:	187a      	adds	r2, r7, r1
 801fd3e:	193b      	adds	r3, r7, r4
 801fd40:	7819      	ldrb	r1, [r3, #0]
 801fd42:	233d      	movs	r3, #61	; 0x3d
 801fd44:	9300      	str	r3, [sp, #0]
 801fd46:	0013      	movs	r3, r2
 801fd48:	2200      	movs	r2, #0
 801fd4a:	2006      	movs	r0, #6
 801fd4c:	f7f6 f804 	bl	8015d58 <USBPD_TRACE_Add>
#endif /* _TRACE */
    fixed_pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 801fd50:	19b9      	adds	r1, r7, r6
 801fd52:	680b      	ldr	r3, [r1, #0]
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	2090      	movs	r0, #144	; 0x90
 801fd58:	1839      	adds	r1, r7, r0
 801fd5a:	600b      	str	r3, [r1, #0]
    /* Read SNK PDO list for retrieving useful data to fill in RDO */
    USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 801fd5c:	2174      	movs	r1, #116	; 0x74
 801fd5e:	1879      	adds	r1, r7, r1
 801fd60:	2358      	movs	r3, #88	; 0x58
 801fd62:	18fa      	adds	r2, r7, r3
 801fd64:	193b      	adds	r3, r7, r4
 801fd66:	7818      	ldrb	r0, [r3, #0]
 801fd68:	000b      	movs	r3, r1
 801fd6a:	2101      	movs	r1, #1
 801fd6c:	f7fe fb3e 	bl	801e3ec <USBPD_PWR_IF_GetPortPDOs>
    /* Store value of 1st SNK PDO (Fixed) in local variable */
    snk_fixed_pdo.d32 = snkpdolist[0];
 801fd70:	2158      	movs	r1, #88	; 0x58
 801fd72:	187b      	adds	r3, r7, r1
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	657b      	str	r3, [r7, #84]	; 0x54
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 801fd78:	238f      	movs	r3, #143	; 0x8f
 801fd7a:	18fb      	adds	r3, r7, r3
 801fd7c:	781a      	ldrb	r2, [r3, #0]
 801fd7e:	2170      	movs	r1, #112	; 0x70
 801fd80:	438a      	bics	r2, r1
 801fd82:	1c11      	adds	r1, r2, #0
 801fd84:	2210      	movs	r2, #16
 801fd86:	430a      	orrs	r2, r1
 801fd88:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801fd8a:	2090      	movs	r0, #144	; 0x90
 801fd8c:	183b      	adds	r3, r7, r0
 801fd8e:	881b      	ldrh	r3, [r3, #0]
 801fd90:	059b      	lsls	r3, r3, #22
 801fd92:	0d9b      	lsrs	r3, r3, #22
 801fd94:	b29b      	uxth	r3, r3
 801fd96:	059b      	lsls	r3, r3, #22
 801fd98:	0d9b      	lsrs	r3, r3, #22
 801fd9a:	029b      	lsls	r3, r3, #10
 801fd9c:	1979      	adds	r1, r7, r5
 801fd9e:	680a      	ldr	r2, [r1, #0]
 801fda0:	4935      	ldr	r1, [pc, #212]	; (801fe78 <USBPD_USER_SERV_EvaluateCapa+0x1c8>)
 801fda2:	400a      	ands	r2, r1
 801fda4:	4313      	orrs	r3, r2
 801fda6:	1979      	adds	r1, r7, r5
 801fda8:	600b      	str	r3, [r1, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =  fixed_pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801fdaa:	183b      	adds	r3, r7, r0
 801fdac:	881b      	ldrh	r3, [r3, #0]
 801fdae:	059b      	lsls	r3, r3, #22
 801fdb0:	0d9b      	lsrs	r3, r3, #22
 801fdb2:	b29a      	uxth	r2, r3
 801fdb4:	197b      	adds	r3, r7, r5
 801fdb6:	0592      	lsls	r2, r2, #22
 801fdb8:	0d90      	lsrs	r0, r2, #22
 801fdba:	881a      	ldrh	r2, [r3, #0]
 801fdbc:	0a92      	lsrs	r2, r2, #10
 801fdbe:	0292      	lsls	r2, r2, #10
 801fdc0:	1c11      	adds	r1, r2, #0
 801fdc2:	1c02      	adds	r2, r0, #0
 801fdc4:	430a      	orrs	r2, r1
 801fdc6:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch = 1U;
 801fdc8:	208f      	movs	r0, #143	; 0x8f
 801fdca:	183b      	adds	r3, r7, r0
 801fdcc:	781a      	ldrb	r2, [r3, #0]
 801fdce:	2104      	movs	r1, #4
 801fdd0:	430a      	orrs	r2, r1
 801fdd2:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 801fdd4:	2157      	movs	r1, #87	; 0x57
 801fdd6:	187b      	adds	r3, r7, r1
 801fdd8:	781b      	ldrb	r3, [r3, #0]
 801fdda:	075b      	lsls	r3, r3, #29
 801fddc:	0fdb      	lsrs	r3, r3, #31
 801fdde:	b2da      	uxtb	r2, r3
 801fde0:	183b      	adds	r3, r7, r0
 801fde2:	2101      	movs	r1, #1
 801fde4:	400a      	ands	r2, r1
 801fde6:	1890      	adds	r0, r2, r2
 801fde8:	781a      	ldrb	r2, [r3, #0]
 801fdea:	2102      	movs	r1, #2
 801fdec:	438a      	bics	r2, r1
 801fdee:	1c11      	adds	r1, r2, #0
 801fdf0:	1c02      	adds	r2, r0, #0
 801fdf2:	430a      	orrs	r2, r1
 801fdf4:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 801fdf6:	193b      	adds	r3, r7, r4
 801fdf8:	781a      	ldrb	r2, [r3, #0]
 801fdfa:	2398      	movs	r3, #152	; 0x98
 801fdfc:	18fb      	adds	r3, r7, r3
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	6859      	ldr	r1, [r3, #4]
 801fe02:	4819      	ldr	r0, [pc, #100]	; (801fe68 <USBPD_USER_SERV_EvaluateCapa+0x1b8>)
 801fe04:	0013      	movs	r3, r2
 801fe06:	009b      	lsls	r3, r3, #2
 801fe08:	189b      	adds	r3, r3, r2
 801fe0a:	011b      	lsls	r3, r3, #4
 801fe0c:	18c3      	adds	r3, r0, r3
 801fe0e:	334c      	adds	r3, #76	; 0x4c
 801fe10:	6019      	str	r1, [r3, #0]

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 801fe12:	197b      	adds	r3, r7, r5
 801fe14:	681a      	ldr	r2, [r3, #0]
 801fe16:	19bb      	adds	r3, r7, r6
 801fe18:	681b      	ldr	r3, [r3, #0]
 801fe1a:	63da      	str	r2, [r3, #60]	; 0x3c
    *PtrPowerObjectType = USBPD_CORE_PDO_TYPE_FIXED;
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	2200      	movs	r2, #0
 801fe20:	601a      	str	r2, [r3, #0]
    *PtrRequestData = rdo.d32;
 801fe22:	197b      	adds	r3, r7, r5
 801fe24:	681a      	ldr	r2, [r3, #0]
 801fe26:	68bb      	ldr	r3, [r7, #8]
 801fe28:	601a      	str	r2, [r3, #0]
    pdhandle->DPM_RequestedVoltage = 5000U;
 801fe2a:	19bb      	adds	r3, r7, r6
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	4a13      	ldr	r2, [pc, #76]	; (801fe7c <USBPD_USER_SERV_EvaluateCapa+0x1cc>)
 801fe30:	649a      	str	r2, [r3, #72]	; 0x48
 801fe32:	e015      	b.n	801fe60 <USBPD_USER_SERV_EvaluateCapa+0x1b0>
    return;
  }

  USER_SERV_SNK_BuildRDOfromSelectedPDO(PortNum, pdoindex, &snkpowerrequestdetails, &rdo, PtrPowerObjectType);
 801fe34:	2394      	movs	r3, #148	; 0x94
 801fe36:	18fb      	adds	r3, r7, r3
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	b2d9      	uxtb	r1, r3
 801fe3c:	238c      	movs	r3, #140	; 0x8c
 801fe3e:	18fc      	adds	r4, r7, r3
 801fe40:	2378      	movs	r3, #120	; 0x78
 801fe42:	18fa      	adds	r2, r7, r3
 801fe44:	230f      	movs	r3, #15
 801fe46:	18fb      	adds	r3, r7, r3
 801fe48:	7818      	ldrb	r0, [r3, #0]
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	9300      	str	r3, [sp, #0]
 801fe4e:	0023      	movs	r3, r4
 801fe50:	f000 faaa 	bl	80203a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 801fe54:	239c      	movs	r3, #156	; 0x9c
 801fe56:	18fb      	adds	r3, r7, r3
 801fe58:	681b      	ldr	r3, [r3, #0]
 801fe5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fe5c:	68bb      	ldr	r3, [r7, #8]
 801fe5e:	601a      	str	r2, [r3, #0]
}
 801fe60:	46bd      	mov	sp, r7
 801fe62:	b029      	add	sp, #164	; 0xa4
 801fe64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe66:	46c0      	nop			; (mov r8, r8)
 801fe68:	20003410 	.word	0x20003410
 801fe6c:	200001c8 	.word	0x200001c8
 801fe70:	2000340c 	.word	0x2000340c
 801fe74:	0802adb0 	.word	0x0802adb0
 801fe78:	fff003ff 	.word	0xfff003ff
 801fe7c:	00001388 	.word	0x00001388

0801fe80 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>:
  */
uint32_t USER_SERV_SNK_EvaluateMatchWithSRCPDO(uint8_t PortNum,
                                                      uint32_t SrcPDO,
                                                      uint32_t *PtrRequestedVoltage,
                                                      uint32_t *PtrRequestedPower)
{
 801fe80:	b590      	push	{r4, r7, lr}
 801fe82:	b09b      	sub	sp, #108	; 0x6c
 801fe84:	af00      	add	r7, sp, #0
 801fe86:	60b9      	str	r1, [r7, #8]
 801fe88:	607a      	str	r2, [r7, #4]
 801fe8a:	603b      	str	r3, [r7, #0]
 801fe8c:	240f      	movs	r4, #15
 801fe8e:	193b      	adds	r3, r7, r4
 801fe90:	1c02      	adds	r2, r0, #0
 801fe92:	701a      	strb	r2, [r3, #0]
  USBPD_PDO_TypeDef srcpdo;
  USBPD_PDO_TypeDef snkpdo;
  uint32_t match = USBPD_FALSE;
 801fe94:	2300      	movs	r3, #0
 801fe96:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t currentrequestedpower;
  uint32_t maxrequestedvoltage;
  uint32_t currentrequestedvoltage;

  /* Retrieve SNK PDO list from PWR_IF storage : PDO values + nb of u32 written by PWR_IF (nb of PDOs) */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)snkpdo_array, &nbsnkpdo);
 801fe98:	2330      	movs	r3, #48	; 0x30
 801fe9a:	18f9      	adds	r1, r7, r3
 801fe9c:	2314      	movs	r3, #20
 801fe9e:	18fa      	adds	r2, r7, r3
 801fea0:	193b      	adds	r3, r7, r4
 801fea2:	7818      	ldrb	r0, [r3, #0]
 801fea4:	000b      	movs	r3, r1
 801fea6:	2101      	movs	r1, #1
 801fea8:	f7fe faa0 	bl	801e3ec <USBPD_PWR_IF_GetPortPDOs>

  if (0 == nbsnkpdo)
 801feac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d101      	bne.n	801feb6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x36>
  {
    return (USBPD_FALSE);
 801feb2:	2300      	movs	r3, #0
 801feb4:	e179      	b.n	80201aa <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  /* Set default output values */
  maxrequestedpower    = 0;
 801feb6:	2300      	movs	r3, #0
 801feb8:	663b      	str	r3, [r7, #96]	; 0x60
  maxrequestedvoltage  = 0;
 801feba:	2300      	movs	r3, #0
 801febc:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Check SRC PDO value according to its type */
  srcpdo.d32 = SrcPDO;
 801febe:	68bb      	ldr	r3, [r7, #8]
 801fec0:	63bb      	str	r3, [r7, #56]	; 0x38
  switch (srcpdo.GenericPDO.PowerObject)
 801fec2:	233b      	movs	r3, #59	; 0x3b
 801fec4:	18fb      	adds	r3, r7, r3
 801fec6:	781b      	ldrb	r3, [r3, #0]
 801fec8:	061b      	lsls	r3, r3, #24
 801feca:	0f9b      	lsrs	r3, r3, #30
 801fecc:	b2db      	uxtb	r3, r3
 801fece:	2b00      	cmp	r3, #0
 801fed0:	d003      	beq.n	801feda <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x5a>
 801fed2:	2b03      	cmp	r3, #3
 801fed4:	d100      	bne.n	801fed8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x58>
 801fed6:	e06c      	b.n	801ffb2 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x132>
 801fed8:	e159      	b.n	802018e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30e>
  {
    /* SRC Fixed Supply PDO */
    case USBPD_CORE_PDO_TYPE_FIXED:
    {
      srcvoltage50mv = srcpdo.SRCFixedPDO.VoltageIn50mVunits;
 801feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fedc:	031b      	lsls	r3, r3, #12
 801fede:	0d9b      	lsrs	r3, r3, #22
 801fee0:	b29a      	uxth	r2, r3
 801fee2:	2342      	movs	r3, #66	; 0x42
 801fee4:	18fb      	adds	r3, r7, r3
 801fee6:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent10ma = srcpdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 801fee8:	2338      	movs	r3, #56	; 0x38
 801feea:	18fb      	adds	r3, r7, r3
 801feec:	881b      	ldrh	r3, [r3, #0]
 801feee:	059b      	lsls	r3, r3, #22
 801fef0:	0d9b      	lsrs	r3, r3, #22
 801fef2:	b29a      	uxth	r2, r3
 801fef4:	2340      	movs	r3, #64	; 0x40
 801fef6:	18fb      	adds	r3, r7, r3
 801fef8:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801fefa:	2352      	movs	r3, #82	; 0x52
 801fefc:	18fb      	adds	r3, r7, r3
 801fefe:	2200      	movs	r2, #0
 801ff00:	801a      	strh	r2, [r3, #0]
 801ff02:	e04f      	b.n	801ffa4 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x124>
      {
        currentrequestedpower = 0;
 801ff04:	2300      	movs	r3, #0
 801ff06:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801ff08:	2300      	movs	r3, #0
 801ff0a:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801ff0c:	2352      	movs	r3, #82	; 0x52
 801ff0e:	18fb      	adds	r3, r7, r3
 801ff10:	881a      	ldrh	r2, [r3, #0]
 801ff12:	2314      	movs	r3, #20
 801ff14:	18fb      	adds	r3, r7, r3
 801ff16:	0092      	lsls	r2, r2, #2
 801ff18:	58d3      	ldr	r3, [r2, r3]
 801ff1a:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 801ff1c:	2337      	movs	r3, #55	; 0x37
 801ff1e:	18fb      	adds	r3, r7, r3
 801ff20:	781b      	ldrb	r3, [r3, #0]
 801ff22:	061b      	lsls	r3, r3, #24
 801ff24:	0f9b      	lsrs	r3, r3, #30
 801ff26:	b2db      	uxtb	r3, r3
 801ff28:	2b00      	cmp	r3, #0
 801ff2a:	d128      	bne.n	801ff7e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0xfe>
        {
          /* SNK Fixed Supply PDO */
          case USBPD_CORE_PDO_TYPE_FIXED:
          {
            snkvoltage50mv = snkpdo.SNKFixedPDO.VoltageIn50mVunits;
 801ff2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ff2e:	031b      	lsls	r3, r3, #12
 801ff30:	0d9b      	lsrs	r3, r3, #22
 801ff32:	b29a      	uxth	r2, r3
 801ff34:	213e      	movs	r1, #62	; 0x3e
 801ff36:	187b      	adds	r3, r7, r1
 801ff38:	801a      	strh	r2, [r3, #0]
            snkopcurrent10ma = snkpdo.SNKFixedPDO.OperationalCurrentIn10mAunits;
 801ff3a:	2334      	movs	r3, #52	; 0x34
 801ff3c:	18fb      	adds	r3, r7, r3
 801ff3e:	881b      	ldrh	r3, [r3, #0]
 801ff40:	059b      	lsls	r3, r3, #22
 801ff42:	0d9b      	lsrs	r3, r3, #22
 801ff44:	b29a      	uxth	r2, r3
 801ff46:	203c      	movs	r0, #60	; 0x3c
 801ff48:	183b      	adds	r3, r7, r0
 801ff4a:	801a      	strh	r2, [r3, #0]

               Requested Voltage: SNK Voltage
               Requested Op Current: SNK Op Current
               Requested Max Current: SNK Op Current
            */
            if ((snkvoltage50mv == srcvoltage50mv) && (snkopcurrent10ma <= srcmaxcurrent10ma))
 801ff4c:	187a      	adds	r2, r7, r1
 801ff4e:	2342      	movs	r3, #66	; 0x42
 801ff50:	18fb      	adds	r3, r7, r3
 801ff52:	8812      	ldrh	r2, [r2, #0]
 801ff54:	881b      	ldrh	r3, [r3, #0]
 801ff56:	429a      	cmp	r2, r3
 801ff58:	d113      	bne.n	801ff82 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
 801ff5a:	183a      	adds	r2, r7, r0
 801ff5c:	2340      	movs	r3, #64	; 0x40
 801ff5e:	18fb      	adds	r3, r7, r3
 801ff60:	8812      	ldrh	r2, [r2, #0]
 801ff62:	881b      	ldrh	r3, [r3, #0]
 801ff64:	429a      	cmp	r2, r3
 801ff66:	d80c      	bhi.n	801ff82 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
            {
              currentrequestedpower = (snkvoltage50mv * snkopcurrent10ma) / 2U; /* To get value in mW */
 801ff68:	187b      	adds	r3, r7, r1
 801ff6a:	881b      	ldrh	r3, [r3, #0]
 801ff6c:	183a      	adds	r2, r7, r0
 801ff6e:	8812      	ldrh	r2, [r2, #0]
 801ff70:	4353      	muls	r3, r2
 801ff72:	085b      	lsrs	r3, r3, #1
 801ff74:	65fb      	str	r3, [r7, #92]	; 0x5c
              currentrequestedvoltage = snkvoltage50mv;
 801ff76:	187b      	adds	r3, r7, r1
 801ff78:	881b      	ldrh	r3, [r3, #0]
 801ff7a:	657b      	str	r3, [r7, #84]	; 0x54
            }
            break;
 801ff7c:	e001      	b.n	801ff82 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x102>
          }
          /* SNK Augmented Power Data Object (APDO) */
          case USBPD_CORE_PDO_TYPE_APDO:
            break;
 801ff7e:	46c0      	nop			; (mov r8, r8)
 801ff80:	e000      	b.n	801ff84 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x104>
            break;
 801ff82:	46c0      	nop			; (mov r8, r8)

          default:
            break;
        }

        if (currentrequestedpower > maxrequestedpower)
 801ff84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ff86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ff88:	429a      	cmp	r2, r3
 801ff8a:	d905      	bls.n	801ff98 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x118>
        {
          match = USBPD_TRUE;
 801ff8c:	2301      	movs	r3, #1
 801ff8e:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 801ff90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ff92:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 801ff94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ff96:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801ff98:	2152      	movs	r1, #82	; 0x52
 801ff9a:	187b      	adds	r3, r7, r1
 801ff9c:	881a      	ldrh	r2, [r3, #0]
 801ff9e:	187b      	adds	r3, r7, r1
 801ffa0:	3201      	adds	r2, #1
 801ffa2:	801a      	strh	r2, [r3, #0]
 801ffa4:	2352      	movs	r3, #82	; 0x52
 801ffa6:	18fb      	adds	r3, r7, r3
 801ffa8:	881a      	ldrh	r2, [r3, #0]
 801ffaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffac:	429a      	cmp	r2, r3
 801ffae:	d3a9      	bcc.n	801ff04 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x84>
        }
      }
    }
    break;
 801ffb0:	e0ef      	b.n	8020192 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>
    case USBPD_CORE_PDO_TYPE_APDO:
    {
      uint16_t srcmaxvoltage100mv;
      uint16_t srcminvoltage100mv;
      uint16_t srcmaxcurrent50ma;
      srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 801ffb2:	233a      	movs	r3, #58	; 0x3a
 801ffb4:	18fb      	adds	r3, r7, r3
 801ffb6:	881b      	ldrh	r3, [r3, #0]
 801ffb8:	05db      	lsls	r3, r3, #23
 801ffba:	0e1b      	lsrs	r3, r3, #24
 801ffbc:	b2da      	uxtb	r2, r3
 801ffbe:	234e      	movs	r3, #78	; 0x4e
 801ffc0:	18fb      	adds	r3, r7, r3
 801ffc2:	801a      	strh	r2, [r3, #0]
      srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 801ffc4:	2138      	movs	r1, #56	; 0x38
 801ffc6:	187b      	adds	r3, r7, r1
 801ffc8:	785a      	ldrb	r2, [r3, #1]
 801ffca:	234c      	movs	r3, #76	; 0x4c
 801ffcc:	18fb      	adds	r3, r7, r3
 801ffce:	801a      	strh	r2, [r3, #0]
      srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 801ffd0:	187b      	adds	r3, r7, r1
 801ffd2:	781b      	ldrb	r3, [r3, #0]
 801ffd4:	065b      	lsls	r3, r3, #25
 801ffd6:	0e5b      	lsrs	r3, r3, #25
 801ffd8:	b2da      	uxtb	r2, r3
 801ffda:	234a      	movs	r3, #74	; 0x4a
 801ffdc:	18fb      	adds	r3, r7, r3
 801ffde:	801a      	strh	r2, [r3, #0]

      /* Loop through SNK PDO list */
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 801ffe0:	2350      	movs	r3, #80	; 0x50
 801ffe2:	18fb      	adds	r3, r7, r3
 801ffe4:	2200      	movs	r2, #0
 801ffe6:	801a      	strh	r2, [r3, #0]
 801ffe8:	e0c9      	b.n	802017e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2fe>
      {
        currentrequestedpower = 0;
 801ffea:	2300      	movs	r3, #0
 801ffec:	65fb      	str	r3, [r7, #92]	; 0x5c
        currentrequestedvoltage = 0;
 801ffee:	2300      	movs	r3, #0
 801fff0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Retrieve SNK PDO value according to its type */
        snkpdo.d32 = snkpdo_array[i];
 801fff2:	2350      	movs	r3, #80	; 0x50
 801fff4:	18fb      	adds	r3, r7, r3
 801fff6:	881a      	ldrh	r2, [r3, #0]
 801fff8:	2314      	movs	r3, #20
 801fffa:	18fb      	adds	r3, r7, r3
 801fffc:	0092      	lsls	r2, r2, #2
 801fffe:	58d3      	ldr	r3, [r2, r3]
 8020000:	637b      	str	r3, [r7, #52]	; 0x34
        switch (snkpdo.GenericPDO.PowerObject)
 8020002:	2337      	movs	r3, #55	; 0x37
 8020004:	18fb      	adds	r3, r7, r3
 8020006:	781b      	ldrb	r3, [r3, #0]
 8020008:	061b      	lsls	r3, r3, #24
 802000a:	0f9b      	lsrs	r3, r3, #30
 802000c:	b2db      	uxtb	r3, r3
 802000e:	2b00      	cmp	r3, #0
 8020010:	d100      	bne.n	8020014 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x194>
 8020012:	e09f      	b.n	8020154 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d4>
 8020014:	2b03      	cmp	r3, #3
 8020016:	d000      	beq.n	802001a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x19a>
 8020018:	e09e      	b.n	8020158 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2d8>
          {
            uint16_t snkmaxvoltage100mv;
            uint16_t snkminvoltage100mv;
            uint16_t snkmaxcurrent50ma;

            snkminvoltage100mv = snkpdo.SRCSNKAPDO.MinVoltageIn100mV;
 802001a:	2134      	movs	r1, #52	; 0x34
 802001c:	187b      	adds	r3, r7, r1
 802001e:	785a      	ldrb	r2, [r3, #1]
 8020020:	2048      	movs	r0, #72	; 0x48
 8020022:	183b      	adds	r3, r7, r0
 8020024:	801a      	strh	r2, [r3, #0]
            snkmaxvoltage100mv = snkpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8020026:	2336      	movs	r3, #54	; 0x36
 8020028:	18fb      	adds	r3, r7, r3
 802002a:	881b      	ldrh	r3, [r3, #0]
 802002c:	05db      	lsls	r3, r3, #23
 802002e:	0e1b      	lsrs	r3, r3, #24
 8020030:	b2da      	uxtb	r2, r3
 8020032:	2446      	movs	r4, #70	; 0x46
 8020034:	193b      	adds	r3, r7, r4
 8020036:	801a      	strh	r2, [r3, #0]
            snkmaxcurrent50ma = snkpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8020038:	187b      	adds	r3, r7, r1
 802003a:	781b      	ldrb	r3, [r3, #0]
 802003c:	065b      	lsls	r3, r3, #25
 802003e:	0e5b      	lsrs	r3, r3, #25
 8020040:	b2da      	uxtb	r2, r3
 8020042:	2344      	movs	r3, #68	; 0x44
 8020044:	18fb      	adds	r3, r7, r3
 8020046:	801a      	strh	r2, [r3, #0]

            /* Match if SNK APDO voltage overlaps with the SRC APDO voltage range */
            if (((srcminvoltage100mv <= snkmaxvoltage100mv) && (srcminvoltage100mv >= snkminvoltage100mv)) ||
 8020048:	214c      	movs	r1, #76	; 0x4c
 802004a:	187a      	adds	r2, r7, r1
 802004c:	193b      	adds	r3, r7, r4
 802004e:	8812      	ldrh	r2, [r2, #0]
 8020050:	881b      	ldrh	r3, [r3, #0]
 8020052:	429a      	cmp	r2, r3
 8020054:	d805      	bhi.n	8020062 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1e2>
 8020056:	187a      	adds	r2, r7, r1
 8020058:	183b      	adds	r3, r7, r0
 802005a:	8812      	ldrh	r2, [r2, #0]
 802005c:	881b      	ldrh	r3, [r3, #0]
 802005e:	429a      	cmp	r2, r3
 8020060:	d210      	bcs.n	8020084 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 8020062:	2148      	movs	r1, #72	; 0x48
 8020064:	187a      	adds	r2, r7, r1
 8020066:	234e      	movs	r3, #78	; 0x4e
 8020068:	18fb      	adds	r3, r7, r3
 802006a:	8812      	ldrh	r2, [r2, #0]
 802006c:	881b      	ldrh	r3, [r3, #0]
 802006e:	429a      	cmp	r2, r3
 8020070:	d900      	bls.n	8020074 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x1f4>
 8020072:	e073      	b.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				((snkminvoltage100mv <= srcmaxvoltage100mv) && (snkminvoltage100mv >= srcminvoltage100mv)))
 8020074:	187a      	adds	r2, r7, r1
 8020076:	234c      	movs	r3, #76	; 0x4c
 8020078:	18fb      	adds	r3, r7, r3
 802007a:	8812      	ldrh	r2, [r2, #0]
 802007c:	881b      	ldrh	r3, [r3, #0]
 802007e:	429a      	cmp	r2, r3
 8020080:	d200      	bcs.n	8020084 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x204>
 8020082:	e06b      	b.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			{
			  if (snkmaxcurrent50ma <= srcmaxcurrent50ma)
 8020084:	2044      	movs	r0, #68	; 0x44
 8020086:	183a      	adds	r2, r7, r0
 8020088:	234a      	movs	r3, #74	; 0x4a
 802008a:	18fb      	adds	r3, r7, r3
 802008c:	8812      	ldrh	r2, [r2, #0]
 802008e:	881b      	ldrh	r3, [r3, #0]
 8020090:	429a      	cmp	r2, r3
 8020092:	d863      	bhi.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
			  {
				if (0U != *PtrRequestedPower)
 8020094:	683b      	ldr	r3, [r7, #0]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	2b00      	cmp	r3, #0
 802009a:	d02c      	beq.n	80200f6 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x276>
				{
				  /* A specific voltage was requested, verify it */
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 802009c:	2348      	movs	r3, #72	; 0x48
 802009e:	18fb      	adds	r3, r7, r3
 80200a0:	881b      	ldrh	r3, [r3, #0]
 80200a2:	2264      	movs	r2, #100	; 0x64
 80200a4:	4353      	muls	r3, r2
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	001a      	movs	r2, r3
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	429a      	cmp	r2, r3
 80200b0:	d854      	bhi.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
					 ((*PtrRequestedVoltage) <= PWR_DECODE_100MV(snkmaxvoltage100mv)))
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	2246      	movs	r2, #70	; 0x46
 80200b8:	18ba      	adds	r2, r7, r2
 80200ba:	8812      	ldrh	r2, [r2, #0]
 80200bc:	2164      	movs	r1, #100	; 0x64
 80200be:	434a      	muls	r2, r1
 80200c0:	b292      	uxth	r2, r2
				  if ((PWR_DECODE_100MV(snkminvoltage100mv) <= (*PtrRequestedVoltage)) &&
 80200c2:	4293      	cmp	r3, r2
 80200c4:	d84a      	bhi.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  {
					currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 80200c6:	687b      	ldr	r3, [r7, #4]
 80200c8:	681b      	ldr	r3, [r3, #0]
 80200ca:	183a      	adds	r2, r7, r0
 80200cc:	8812      	ldrh	r2, [r2, #0]
 80200ce:	2132      	movs	r1, #50	; 0x32
 80200d0:	434a      	muls	r2, r1
 80200d2:	b292      	uxth	r2, r2
 80200d4:	4353      	muls	r3, r2
 80200d6:	22fa      	movs	r2, #250	; 0xfa
 80200d8:	0091      	lsls	r1, r2, #2
 80200da:	0018      	movs	r0, r3
 80200dc:	f7e6 f89c 	bl	8006218 <__udivsi3>
 80200e0:	0003      	movs	r3, r0
 80200e2:	65fb      	str	r3, [r7, #92]	; 0x5c
											/ 1000U; /* mW */
					currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	2132      	movs	r1, #50	; 0x32
 80200ea:	0018      	movs	r0, r3
 80200ec:	f7e6 f894 	bl	8006218 <__udivsi3>
 80200f0:	0003      	movs	r3, r0
 80200f2:	657b      	str	r3, [r7, #84]	; 0x54
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
				}
			  }
			}
          }
          break;
 80200f4:	e032      	b.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
				  *PtrRequestedVoltage = MIN(PWR_DECODE_100MV(srcmaxvoltage100mv),
 80200f6:	2346      	movs	r3, #70	; 0x46
 80200f8:	18fb      	adds	r3, r7, r3
 80200fa:	881b      	ldrh	r3, [r3, #0]
 80200fc:	2264      	movs	r2, #100	; 0x64
 80200fe:	4353      	muls	r3, r2
 8020100:	b299      	uxth	r1, r3
 8020102:	234e      	movs	r3, #78	; 0x4e
 8020104:	18fb      	adds	r3, r7, r3
 8020106:	881b      	ldrh	r3, [r3, #0]
 8020108:	2264      	movs	r2, #100	; 0x64
 802010a:	4353      	muls	r3, r2
 802010c:	b29b      	uxth	r3, r3
 802010e:	1c18      	adds	r0, r3, #0
 8020110:	b28a      	uxth	r2, r1
 8020112:	b283      	uxth	r3, r0
 8020114:	429a      	cmp	r2, r3
 8020116:	d900      	bls.n	802011a <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x29a>
 8020118:	1c01      	adds	r1, r0, #0
 802011a:	b28b      	uxth	r3, r1
 802011c:	001a      	movs	r2, r3
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	601a      	str	r2, [r3, #0]
				  currentrequestedpower = (*PtrRequestedVoltage * PWR_DECODE_50MA(snkmaxcurrent50ma))
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	2244      	movs	r2, #68	; 0x44
 8020128:	18ba      	adds	r2, r7, r2
 802012a:	8812      	ldrh	r2, [r2, #0]
 802012c:	2132      	movs	r1, #50	; 0x32
 802012e:	434a      	muls	r2, r1
 8020130:	b292      	uxth	r2, r2
 8020132:	4353      	muls	r3, r2
 8020134:	22fa      	movs	r2, #250	; 0xfa
 8020136:	0091      	lsls	r1, r2, #2
 8020138:	0018      	movs	r0, r3
 802013a:	f7e6 f86d 	bl	8006218 <__udivsi3>
 802013e:	0003      	movs	r3, r0
 8020140:	65fb      	str	r3, [r7, #92]	; 0x5c
				  currentrequestedvoltage = (*PtrRequestedVoltage / 50U);
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	2132      	movs	r1, #50	; 0x32
 8020148:	0018      	movs	r0, r3
 802014a:	f7e6 f865 	bl	8006218 <__udivsi3>
 802014e:	0003      	movs	r3, r0
 8020150:	657b      	str	r3, [r7, #84]	; 0x54
          break;
 8020152:	e003      	b.n	802015c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2dc>
            break;
 8020154:	46c0      	nop			; (mov r8, r8)
 8020156:	e002      	b.n	802015e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>

          default:
            break;
 8020158:	46c0      	nop			; (mov r8, r8)
 802015a:	e000      	b.n	802015e <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2de>
          break;
 802015c:	46c0      	nop			; (mov r8, r8)
        }

        if (currentrequestedpower > maxrequestedpower)
 802015e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020162:	429a      	cmp	r2, r3
 8020164:	d905      	bls.n	8020172 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x2f2>
        {
          match = USBPD_TRUE;
 8020166:	2301      	movs	r3, #1
 8020168:	667b      	str	r3, [r7, #100]	; 0x64
          maxrequestedpower   = currentrequestedpower;
 802016a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802016c:	663b      	str	r3, [r7, #96]	; 0x60
          maxrequestedvoltage = currentrequestedvoltage;
 802016e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020170:	65bb      	str	r3, [r7, #88]	; 0x58
      for (uint16_t i = 0; i < nbsnkpdo; i++)
 8020172:	2150      	movs	r1, #80	; 0x50
 8020174:	187b      	adds	r3, r7, r1
 8020176:	881a      	ldrh	r2, [r3, #0]
 8020178:	187b      	adds	r3, r7, r1
 802017a:	3201      	adds	r2, #1
 802017c:	801a      	strh	r2, [r3, #0]
 802017e:	2350      	movs	r3, #80	; 0x50
 8020180:	18fb      	adds	r3, r7, r3
 8020182:	881a      	ldrh	r2, [r3, #0]
 8020184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020186:	429a      	cmp	r2, r3
 8020188:	d200      	bcs.n	802018c <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x30c>
 802018a:	e72e      	b.n	801ffea <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x16a>
        }
      }
    }
    break;
 802018c:	e001      	b.n	8020192 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x312>

    default:
      return (USBPD_FALSE);
 802018e:	2300      	movs	r3, #0
 8020190:	e00b      	b.n	80201aa <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x32a>
  }

  if (maxrequestedpower > 0)
 8020192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8020194:	2b00      	cmp	r3, #0
 8020196:	d007      	beq.n	80201a8 <USER_SERV_SNK_EvaluateMatchWithSRCPDO+0x328>
  {
    *PtrRequestedPower   = maxrequestedpower;
 8020198:	683b      	ldr	r3, [r7, #0]
 802019a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802019c:	601a      	str	r2, [r3, #0]
    *PtrRequestedVoltage = maxrequestedvoltage * 50U; /* value in mV */
 802019e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80201a0:	2232      	movs	r2, #50	; 0x32
 80201a2:	435a      	muls	r2, r3
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	601a      	str	r2, [r3, #0]
  }
  return (match);
 80201a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80201aa:	0018      	movs	r0, r3
 80201ac:	46bd      	mov	sp, r7
 80201ae:	b01b      	add	sp, #108	; 0x6c
 80201b0:	bd90      	pop	{r4, r7, pc}
	...

080201b4 <USER_SERV_FindVoltageIndex>:
  * @retval Index of PDO within source capabilities message (DPM_NO_SRC_PDO_FOUND indicating not found)
  */
uint32_t USER_SERV_FindVoltageIndex(uint32_t PortNum,
                                           USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                           uint8_t Method)
{
 80201b4:	b580      	push	{r7, lr}
 80201b6:	b090      	sub	sp, #64	; 0x40
 80201b8:	af00      	add	r7, sp, #0
 80201ba:	60f8      	str	r0, [r7, #12]
 80201bc:	60b9      	str	r1, [r7, #8]
 80201be:	1dfb      	adds	r3, r7, #7
 80201c0:	701a      	strb	r2, [r3, #0]
  uint32_t nbpdo;
  uint32_t allowablepower;
  uint32_t selpower;
  uint32_t allowablecurrent;
  uint32_t selcurrent;
  uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 80201c2:	23ff      	movs	r3, #255	; 0xff
 80201c4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t temp_index;
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80201c6:	68fb      	ldr	r3, [r7, #12]
 80201c8:	2274      	movs	r2, #116	; 0x74
 80201ca:	435a      	muls	r2, r3
 80201cc:	4b73      	ldr	r3, [pc, #460]	; (802039c <USER_SERV_FindVoltageIndex+0x1e8>)
 80201ce:	18d3      	adds	r3, r2, r3
 80201d0:	62bb      	str	r3, [r7, #40]	; 0x28

  allowablepower = 0;
 80201d2:	2300      	movs	r3, #0
 80201d4:	613b      	str	r3, [r7, #16]
  selpower       = 0;
 80201d6:	2300      	movs	r3, #0
 80201d8:	63bb      	str	r3, [r7, #56]	; 0x38
  reqvoltage     = 0;
 80201da:	2300      	movs	r3, #0
 80201dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  voltage        = 0;
 80201de:	2300      	movs	r3, #0
 80201e0:	617b      	str	r3, [r7, #20]
  selcurrent     = 0;
 80201e2:	2300      	movs	r3, #0
 80201e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 80201e6:	496e      	ldr	r1, [pc, #440]	; (80203a0 <USER_SERV_FindVoltageIndex+0x1ec>)
 80201e8:	68fa      	ldr	r2, [r7, #12]
 80201ea:	0013      	movs	r3, r2
 80201ec:	009b      	lsls	r3, r3, #2
 80201ee:	189b      	adds	r3, r3, r2
 80201f0:	011b      	lsls	r3, r3, #4
 80201f2:	18cb      	adds	r3, r1, r3
 80201f4:	331c      	adds	r3, #28
 80201f6:	681b      	ldr	r3, [r3, #0]
 80201f8:	627b      	str	r3, [r7, #36]	; 0x24
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 80201fa:	68fa      	ldr	r2, [r7, #12]
 80201fc:	0013      	movs	r3, r2
 80201fe:	009b      	lsls	r3, r3, #2
 8020200:	189b      	adds	r3, r3, r2
 8020202:	011b      	lsls	r3, r3, #4
 8020204:	4a66      	ldr	r2, [pc, #408]	; (80203a0 <USER_SERV_FindVoltageIndex+0x1ec>)
 8020206:	189b      	adds	r3, r3, r2
 8020208:	623b      	str	r3, [r7, #32]

  /* search the best PDO in the list of source PDOs */
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 802020a:	2300      	movs	r3, #0
 802020c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802020e:	e09a      	b.n	8020346 <USER_SERV_FindVoltageIndex+0x192>
  {
    pdo.d32 = ptpdoarray[temp_index];
 8020210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020212:	009b      	lsls	r3, r3, #2
 8020214:	6a3a      	ldr	r2, [r7, #32]
 8020216:	18d3      	adds	r3, r2, r3
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	61bb      	str	r3, [r7, #24]

    /* Check if the received source PDO is matching any of the SNK PDO */
    allowablepower = 0;
 802021c:	2300      	movs	r3, #0
 802021e:	613b      	str	r3, [r7, #16]
    if (USBPD_TRUE == USER_SERV_SNK_EvaluateMatchWithSRCPDO(PortNum, pdo.d32, &voltage, &allowablepower))
 8020220:	68fb      	ldr	r3, [r7, #12]
 8020222:	b2d8      	uxtb	r0, r3
 8020224:	69b9      	ldr	r1, [r7, #24]
 8020226:	2310      	movs	r3, #16
 8020228:	18fb      	adds	r3, r7, r3
 802022a:	2214      	movs	r2, #20
 802022c:	18ba      	adds	r2, r7, r2
 802022e:	f7ff fe27 	bl	801fe80 <USER_SERV_SNK_EvaluateMatchWithSRCPDO>
 8020232:	0003      	movs	r3, r0
 8020234:	2b01      	cmp	r3, #1
 8020236:	d000      	beq.n	802023a <USER_SERV_FindVoltageIndex+0x86>
 8020238:	e082      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
    {
      allowablecurrent = (allowablepower / voltage) * 1000U;
 802023a:	693b      	ldr	r3, [r7, #16]
 802023c:	697a      	ldr	r2, [r7, #20]
 802023e:	0011      	movs	r1, r2
 8020240:	0018      	movs	r0, r3
 8020242:	f7e5 ffe9 	bl	8006218 <__udivsi3>
 8020246:	0003      	movs	r3, r0
 8020248:	001a      	movs	r2, r3
 802024a:	0013      	movs	r3, r2
 802024c:	015b      	lsls	r3, r3, #5
 802024e:	1a9b      	subs	r3, r3, r2
 8020250:	009b      	lsls	r3, r3, #2
 8020252:	189b      	adds	r3, r3, r2
 8020254:	00db      	lsls	r3, r3, #3
 8020256:	61fb      	str	r3, [r7, #28]

      /* Choose the best PDO depending on the user preferences */
      switch (Method)
 8020258:	1dfb      	adds	r3, r7, #7
 802025a:	781b      	ldrb	r3, [r3, #0]
 802025c:	2b05      	cmp	r3, #5
 802025e:	d85b      	bhi.n	8020318 <USER_SERV_FindVoltageIndex+0x164>
 8020260:	009a      	lsls	r2, r3, #2
 8020262:	4b50      	ldr	r3, [pc, #320]	; (80203a4 <USER_SERV_FindVoltageIndex+0x1f0>)
 8020264:	18d3      	adds	r3, r2, r3
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	469f      	mov	pc, r3
      {
        case PDO_SEL_METHOD_MAX_PWR:
          if (allowablepower > selpower)
 802026a:	693b      	ldr	r3, [r7, #16]
 802026c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802026e:	429a      	cmp	r2, r3
 8020270:	d25b      	bcs.n	802032a <USER_SERV_FindVoltageIndex+0x176>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8020272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020274:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8020276:	693b      	ldr	r3, [r7, #16]
 8020278:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 802027a:	697b      	ldr	r3, [r7, #20]
 802027c:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 802027e:	69fb      	ldr	r3, [r7, #28]
 8020280:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8020282:	e052      	b.n	802032a <USER_SERV_FindVoltageIndex+0x176>

        case PDO_SEL_METHOD_MIN_PWR:
          if ((allowablepower < selpower) || (selpower == 0))
 8020284:	693b      	ldr	r3, [r7, #16]
 8020286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020288:	429a      	cmp	r2, r3
 802028a:	d802      	bhi.n	8020292 <USER_SERV_FindVoltageIndex+0xde>
 802028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802028e:	2b00      	cmp	r3, #0
 8020290:	d14d      	bne.n	802032e <USER_SERV_FindVoltageIndex+0x17a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8020292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020294:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 8020296:	693b      	ldr	r3, [r7, #16]
 8020298:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 802029a:	697b      	ldr	r3, [r7, #20]
 802029c:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 802029e:	69fb      	ldr	r3, [r7, #28]
 80202a0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 80202a2:	e044      	b.n	802032e <USER_SERV_FindVoltageIndex+0x17a>

        case PDO_SEL_METHOD_MAX_VOLT:
          if (voltage > reqvoltage)
 80202a4:	697b      	ldr	r3, [r7, #20]
 80202a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80202a8:	429a      	cmp	r2, r3
 80202aa:	d242      	bcs.n	8020332 <USER_SERV_FindVoltageIndex+0x17e>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80202ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202ae:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 80202b0:	693b      	ldr	r3, [r7, #16]
 80202b2:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 80202b4:	697b      	ldr	r3, [r7, #20]
 80202b6:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 80202b8:	69fb      	ldr	r3, [r7, #28]
 80202ba:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 80202bc:	e039      	b.n	8020332 <USER_SERV_FindVoltageIndex+0x17e>

        case PDO_SEL_METHOD_MIN_VOLT:
          if ((voltage < reqvoltage) || (reqvoltage == 0))
 80202be:	697b      	ldr	r3, [r7, #20]
 80202c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80202c2:	429a      	cmp	r2, r3
 80202c4:	d802      	bhi.n	80202cc <USER_SERV_FindVoltageIndex+0x118>
 80202c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d134      	bne.n	8020336 <USER_SERV_FindVoltageIndex+0x182>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80202cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202ce:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 80202d0:	693b      	ldr	r3, [r7, #16]
 80202d2:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 80202d4:	697b      	ldr	r3, [r7, #20]
 80202d6:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 80202d8:	69fb      	ldr	r3, [r7, #28]
 80202da:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 80202dc:	e02b      	b.n	8020336 <USER_SERV_FindVoltageIndex+0x182>

        case PDO_SEL_METHOD_MAX_CUR:
          if (allowablecurrent > selcurrent)
 80202de:	69fa      	ldr	r2, [r7, #28]
 80202e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80202e2:	429a      	cmp	r2, r3
 80202e4:	d929      	bls.n	802033a <USER_SERV_FindVoltageIndex+0x186>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 80202e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80202e8:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 80202ea:	693b      	ldr	r3, [r7, #16]
 80202ec:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 80202ee:	697b      	ldr	r3, [r7, #20]
 80202f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 80202f2:	69fb      	ldr	r3, [r7, #28]
 80202f4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 80202f6:	e020      	b.n	802033a <USER_SERV_FindVoltageIndex+0x186>

        case PDO_SEL_METHOD_MIN_CUR:
          if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 80202f8:	69fa      	ldr	r2, [r7, #28]
 80202fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80202fc:	429a      	cmp	r2, r3
 80202fe:	d302      	bcc.n	8020306 <USER_SERV_FindVoltageIndex+0x152>
 8020300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020302:	2b00      	cmp	r3, #0
 8020304:	d11b      	bne.n	802033e <USER_SERV_FindVoltageIndex+0x18a>
          {
            /* Consider the current PDO the best one until now */
            curr_index = temp_index;
 8020306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020308:	633b      	str	r3, [r7, #48]	; 0x30
            selpower   = allowablepower;
 802030a:	693b      	ldr	r3, [r7, #16]
 802030c:	63bb      	str	r3, [r7, #56]	; 0x38
            reqvoltage = voltage;
 802030e:	697b      	ldr	r3, [r7, #20]
 8020310:	63fb      	str	r3, [r7, #60]	; 0x3c
            selcurrent = allowablecurrent;
 8020312:	69fb      	ldr	r3, [r7, #28]
 8020314:	637b      	str	r3, [r7, #52]	; 0x34
          }
          break;
 8020316:	e012      	b.n	802033e <USER_SERV_FindVoltageIndex+0x18a>

        default:
          /* Default behavior: last PDO is selected */
          curr_index = temp_index;
 8020318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802031a:	633b      	str	r3, [r7, #48]	; 0x30
          selpower   = allowablepower;
 802031c:	693b      	ldr	r3, [r7, #16]
 802031e:	63bb      	str	r3, [r7, #56]	; 0x38
          reqvoltage = voltage;
 8020320:	697b      	ldr	r3, [r7, #20]
 8020322:	63fb      	str	r3, [r7, #60]	; 0x3c
          selcurrent = allowablecurrent;
 8020324:	69fb      	ldr	r3, [r7, #28]
 8020326:	637b      	str	r3, [r7, #52]	; 0x34
 8020328:	e00a      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 802032a:	46c0      	nop			; (mov r8, r8)
 802032c:	e008      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 802032e:	46c0      	nop			; (mov r8, r8)
 8020330:	e006      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8020332:	46c0      	nop			; (mov r8, r8)
 8020334:	e004      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 8020336:	46c0      	nop			; (mov r8, r8)
 8020338:	e002      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 802033a:	46c0      	nop			; (mov r8, r8)
 802033c:	e000      	b.n	8020340 <USER_SERV_FindVoltageIndex+0x18c>
          break;
 802033e:	46c0      	nop			; (mov r8, r8)
  for (temp_index = 0; temp_index < nbpdo; temp_index++)
 8020340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020342:	3301      	adds	r3, #1
 8020344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802034a:	429a      	cmp	r2, r3
 802034c:	d200      	bcs.n	8020350 <USER_SERV_FindVoltageIndex+0x19c>
 802034e:	e75f      	b.n	8020210 <USER_SERV_FindVoltageIndex+0x5c>
      }
    }
  }

  /* If a suitable PDO was found */
  if (curr_index != DPM_NO_SRC_PDO_FOUND)
 8020350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020352:	2bff      	cmp	r3, #255	; 0xff
 8020354:	d01c      	beq.n	8020390 <USER_SERV_FindVoltageIndex+0x1dc>
  {
    /* Fill the request power details */
    PtrRequestPowerDetails->MaxOperatingCurrentInmAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 8020356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020358:	685a      	ldr	r2, [r3, #4]
 802035a:	68bb      	ldr	r3, [r7, #8]
 802035c:	605a      	str	r2, [r3, #4]
    PtrRequestPowerDetails->OperatingCurrentInmAunits    = (1000U * selpower) / reqvoltage;
 802035e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020360:	0013      	movs	r3, r2
 8020362:	015b      	lsls	r3, r3, #5
 8020364:	1a9b      	subs	r3, r3, r2
 8020366:	009b      	lsls	r3, r3, #2
 8020368:	189b      	adds	r3, r3, r2
 802036a:	00db      	lsls	r3, r3, #3
 802036c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802036e:	0018      	movs	r0, r3
 8020370:	f7e5 ff52 	bl	8006218 <__udivsi3>
 8020374:	0003      	movs	r3, r0
 8020376:	001a      	movs	r2, r3
 8020378:	68bb      	ldr	r3, [r7, #8]
 802037a:	609a      	str	r2, [r3, #8]
    PtrRequestPowerDetails->MaxOperatingPowerInmWunits   = puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits;
 802037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802037e:	699a      	ldr	r2, [r3, #24]
 8020380:	68bb      	ldr	r3, [r7, #8]
 8020382:	60da      	str	r2, [r3, #12]
    PtrRequestPowerDetails->OperatingPowerInmWunits      = selpower;
 8020384:	68bb      	ldr	r3, [r7, #8]
 8020386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8020388:	611a      	str	r2, [r3, #16]
    PtrRequestPowerDetails->RequestedVoltageInmVunits    = reqvoltage;
 802038a:	68bb      	ldr	r3, [r7, #8]
 802038c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802038e:	601a      	str	r2, [r3, #0]
  }

  return curr_index;
 8020390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8020392:	0018      	movs	r0, r3
 8020394:	46bd      	mov	sp, r7
 8020396:	b010      	add	sp, #64	; 0x40
 8020398:	bd80      	pop	{r7, pc}
 802039a:	46c0      	nop			; (mov r8, r8)
 802039c:	200001c8 	.word	0x200001c8
 80203a0:	20003410 	.word	0x20003410
 80203a4:	0802b198 	.word	0x0802b198

080203a8 <USER_SERV_SNK_BuildRDOfromSelectedPDO>:
void USER_SERV_SNK_BuildRDOfromSelectedPDO(uint8_t PortNum,
                                                  uint8_t IndexSrcPDO,
                                                  USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80203a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203aa:	b0b7      	sub	sp, #220	; 0xdc
 80203ac:	af02      	add	r7, sp, #8
 80203ae:	60ba      	str	r2, [r7, #8]
 80203b0:	607b      	str	r3, [r7, #4]
 80203b2:	240f      	movs	r4, #15
 80203b4:	193b      	adds	r3, r7, r4
 80203b6:	1c02      	adds	r2, r0, #0
 80203b8:	701a      	strb	r2, [r3, #0]
 80203ba:	230e      	movs	r3, #14
 80203bc:	18fb      	adds	r3, r7, r3
 80203be:	1c0a      	adds	r2, r1, #0
 80203c0:	701a      	strb	r2, [r3, #0]
  uint32_t mv = 0;
 80203c2:	2300      	movs	r3, #0
 80203c4:	22cc      	movs	r2, #204	; 0xcc
 80203c6:	18ba      	adds	r2, r7, r2
 80203c8:	6013      	str	r3, [r2, #0]
  uint32_t ma = 0;
 80203ca:	2300      	movs	r3, #0
 80203cc:	22c8      	movs	r2, #200	; 0xc8
 80203ce:	18ba      	adds	r2, r7, r2
 80203d0:	6013      	str	r3, [r2, #0]
  uint32_t size;
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 80203d2:	193b      	adds	r3, r7, r4
 80203d4:	781a      	ldrb	r2, [r3, #0]
 80203d6:	0013      	movs	r3, r2
 80203d8:	009b      	lsls	r3, r3, #2
 80203da:	189b      	adds	r3, r3, r2
 80203dc:	011b      	lsls	r3, r3, #4
 80203de:	4ab4      	ldr	r2, [pc, #720]	; (80206b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 80203e0:	189b      	adds	r3, r3, r2
 80203e2:	25c4      	movs	r5, #196	; 0xc4
 80203e4:	197a      	adds	r2, r7, r5
 80203e6:	6013      	str	r3, [r2, #0]
  USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80203e8:	193b      	adds	r3, r7, r4
 80203ea:	781b      	ldrb	r3, [r3, #0]
 80203ec:	2274      	movs	r2, #116	; 0x74
 80203ee:	435a      	muls	r2, r3
 80203f0:	4bb0      	ldr	r3, [pc, #704]	; (80206b4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x30c>)
 80203f2:	18d3      	adds	r3, r2, r3
 80203f4:	22c0      	movs	r2, #192	; 0xc0
 80203f6:	18ba      	adds	r2, r7, r2
 80203f8:	6013      	str	r3, [r2, #0]
  uint32_t snkpdolist[USBPD_MAX_NB_PDO];
  USBPD_PDO_TypeDef snk_fixed_pdo;

  /* Initialize RDO */
  rdo.d32 = 0;
 80203fa:	2300      	movs	r3, #0
 80203fc:	22b0      	movs	r2, #176	; 0xb0
 80203fe:	18ba      	adds	r2, r7, r2
 8020400:	6013      	str	r3, [r2, #0]

  /* Read SNK PDO list for retrieving useful data to fill in RDO */
  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkpdolist[0], &size);
 8020402:	23b8      	movs	r3, #184	; 0xb8
 8020404:	18f9      	adds	r1, r7, r3
 8020406:	2694      	movs	r6, #148	; 0x94
 8020408:	19ba      	adds	r2, r7, r6
 802040a:	193b      	adds	r3, r7, r4
 802040c:	7818      	ldrb	r0, [r3, #0]
 802040e:	000b      	movs	r3, r1
 8020410:	2101      	movs	r1, #1
 8020412:	f7fd ffeb 	bl	801e3ec <USBPD_PWR_IF_GetPortPDOs>

  /* Store value of 1st SNK PDO (Fixed) in local variable */
  snk_fixed_pdo.d32 = snkpdolist[0];
 8020416:	19bb      	adds	r3, r7, r6
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	2290      	movs	r2, #144	; 0x90
 802041c:	18ba      	adds	r2, r7, r2
 802041e:	6013      	str	r3, [r2, #0]

  /* Set common fields in RDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[0];
 8020420:	197b      	adds	r3, r7, r5
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	22b4      	movs	r2, #180	; 0xb4
 8020428:	18ba      	adds	r2, r7, r2
 802042a:	6013      	str	r3, [r2, #0]
  rdo.GenericRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 802042c:	2393      	movs	r3, #147	; 0x93
 802042e:	18fb      	adds	r3, r7, r3
 8020430:	781b      	ldrb	r3, [r3, #0]
 8020432:	075b      	lsls	r3, r3, #29
 8020434:	0fdb      	lsrs	r3, r3, #31
 8020436:	b2da      	uxtb	r2, r3
 8020438:	23b3      	movs	r3, #179	; 0xb3
 802043a:	18fb      	adds	r3, r7, r3
 802043c:	2101      	movs	r1, #1
 802043e:	400a      	ands	r2, r1
 8020440:	1890      	adds	r0, r2, r2
 8020442:	781a      	ldrb	r2, [r3, #0]
 8020444:	2102      	movs	r1, #2
 8020446:	438a      	bics	r2, r1
 8020448:	1c11      	adds	r1, r2, #0
 802044a:	1c02      	adds	r2, r0, #0
 802044c:	430a      	orrs	r2, r1
 802044e:	701a      	strb	r2, [r3, #0]
  if (USBPD_SPECIFICATION_REV2 < DPM_Params[PortNum].PE_SpecRevision)
 8020450:	193b      	adds	r3, r7, r4
 8020452:	781a      	ldrb	r2, [r3, #0]
 8020454:	4b98      	ldr	r3, [pc, #608]	; (80206b8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 8020456:	0092      	lsls	r2, r2, #2
 8020458:	5cd3      	ldrb	r3, [r2, r3]
 802045a:	079b      	lsls	r3, r3, #30
 802045c:	0f9b      	lsrs	r3, r3, #30
 802045e:	b2db      	uxtb	r3, r3
 8020460:	2b01      	cmp	r3, #1
 8020462:	d931      	bls.n	80204c8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x120>
  {
#if defined(USBPDCORE_UNCHUNCKED_MODE)
    rdo.FixedVariableRDO.UnchunkedExtendedMessage = DPM_Settings[PortNum].PE_PD3_Support.d.PE_UnchunkSupport;
 8020464:	193b      	adds	r3, r7, r4
 8020466:	781a      	ldrb	r2, [r3, #0]
 8020468:	4994      	ldr	r1, [pc, #592]	; (80206bc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x314>)
 802046a:	2008      	movs	r0, #8
 802046c:	0013      	movs	r3, r2
 802046e:	005b      	lsls	r3, r3, #1
 8020470:	189b      	adds	r3, r3, r2
 8020472:	009b      	lsls	r3, r3, #2
 8020474:	18cb      	adds	r3, r1, r3
 8020476:	181b      	adds	r3, r3, r0
 8020478:	781b      	ldrb	r3, [r3, #0]
 802047a:	07db      	lsls	r3, r3, #31
 802047c:	0fdb      	lsrs	r3, r3, #31
 802047e:	b2da      	uxtb	r2, r3
 8020480:	23b2      	movs	r3, #178	; 0xb2
 8020482:	18fb      	adds	r3, r7, r3
 8020484:	01d0      	lsls	r0, r2, #7
 8020486:	781a      	ldrb	r2, [r3, #0]
 8020488:	217f      	movs	r1, #127	; 0x7f
 802048a:	400a      	ands	r2, r1
 802048c:	1c11      	adds	r1, r2, #0
 802048e:	1c02      	adds	r2, r0, #0
 8020490:	430a      	orrs	r2, r1
 8020492:	701a      	strb	r2, [r3, #0]
    DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_FALSE;
 8020494:	193b      	adds	r3, r7, r4
 8020496:	781b      	ldrb	r3, [r3, #0]
 8020498:	4a87      	ldr	r2, [pc, #540]	; (80206b8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 802049a:	009b      	lsls	r3, r3, #2
 802049c:	18d3      	adds	r3, r2, r3
 802049e:	78da      	ldrb	r2, [r3, #3]
 80204a0:	2102      	movs	r1, #2
 80204a2:	438a      	bics	r2, r1
 80204a4:	70da      	strb	r2, [r3, #3]
    /* Set unchuncked bit if supported by port partner;*/
    if (USBPD_TRUE == pdo.SRCFixedPDO.UnchunkedExtendedMessage)
 80204a6:	23b7      	movs	r3, #183	; 0xb7
 80204a8:	18fb      	adds	r3, r7, r3
 80204aa:	781b      	ldrb	r3, [r3, #0]
 80204ac:	2201      	movs	r2, #1
 80204ae:	4013      	ands	r3, r2
 80204b0:	b2db      	uxtb	r3, r3
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d008      	beq.n	80204c8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x120>
    {
      DPM_Params[PortNum].PE_UnchunkSupport   = USBPD_TRUE;
 80204b6:	193b      	adds	r3, r7, r4
 80204b8:	781b      	ldrb	r3, [r3, #0]
 80204ba:	4a7f      	ldr	r2, [pc, #508]	; (80206b8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x310>)
 80204bc:	009b      	lsls	r3, r3, #2
 80204be:	18d3      	adds	r3, r2, r3
 80204c0:	78da      	ldrb	r2, [r3, #3]
 80204c2:	2102      	movs	r1, #2
 80204c4:	430a      	orrs	r2, r1
 80204c6:	70da      	strb	r2, [r3, #3]
    }
#endif /* USBPDCORE_UNCHUNCKED_MODE */
  }

  /* If no valid SNK PDO or if no SRC PDO match found (index>=nb of valid received SRC PDOs */
  if ((size < 1) || (IndexSrcPDO >= pdhandle->DPM_NumberOfRcvSRCPDO))
 80204c8:	23b8      	movs	r3, #184	; 0xb8
 80204ca:	18fb      	adds	r3, r7, r3
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	2b00      	cmp	r3, #0
 80204d0:	d008      	beq.n	80204e4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x13c>
 80204d2:	230e      	movs	r3, #14
 80204d4:	18fb      	adds	r3, r7, r3
 80204d6:	781a      	ldrb	r2, [r3, #0]
 80204d8:	23c4      	movs	r3, #196	; 0xc4
 80204da:	18fb      	adds	r3, r7, r3
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	69db      	ldr	r3, [r3, #28]
 80204e0:	429a      	cmp	r2, r3
 80204e2:	d367      	bcc.n	80205b4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x20c>
  {
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */
#ifdef _TRACE
    uint8_t msg[] = "USER_SERV_SNK_BuildRDOfromSelectedPDO: Pb in SRC PDO selection";
 80204e4:	2414      	movs	r4, #20
 80204e6:	193a      	adds	r2, r7, r4
 80204e8:	4b75      	ldr	r3, [pc, #468]	; (80206c0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x318>)
 80204ea:	0010      	movs	r0, r2
 80204ec:	0019      	movs	r1, r3
 80204ee:	233f      	movs	r3, #63	; 0x3f
 80204f0:	001a      	movs	r2, r3
 80204f2:	f007 fc4e 	bl	8027d92 <memcpy>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0, (uint8_t *)msg, sizeof(msg));
 80204f6:	193a      	adds	r2, r7, r4
 80204f8:	260f      	movs	r6, #15
 80204fa:	19bb      	adds	r3, r7, r6
 80204fc:	7819      	ldrb	r1, [r3, #0]
 80204fe:	233f      	movs	r3, #63	; 0x3f
 8020500:	9300      	str	r3, [sp, #0]
 8020502:	0013      	movs	r3, r2
 8020504:	2200      	movs	r2, #0
 8020506:	2006      	movs	r0, #6
 8020508:	f7f5 fc26 	bl	8015d58 <USBPD_TRACE_Add>
#endif /* _TRACE */
    rdo.FixedVariableRDO.ObjectPosition = 1U;
 802050c:	25b3      	movs	r5, #179	; 0xb3
 802050e:	197b      	adds	r3, r7, r5
 8020510:	781a      	ldrb	r2, [r3, #0]
 8020512:	2170      	movs	r1, #112	; 0x70
 8020514:	438a      	bics	r2, r1
 8020516:	1c11      	adds	r1, r2, #0
 8020518:	2210      	movs	r2, #16
 802051a:	430a      	orrs	r2, r1
 802051c:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 802051e:	20b4      	movs	r0, #180	; 0xb4
 8020520:	183b      	adds	r3, r7, r0
 8020522:	881b      	ldrh	r3, [r3, #0]
 8020524:	059b      	lsls	r3, r3, #22
 8020526:	0d9b      	lsrs	r3, r3, #22
 8020528:	b29b      	uxth	r3, r3
 802052a:	059b      	lsls	r3, r3, #22
 802052c:	0d9b      	lsrs	r3, r3, #22
 802052e:	029b      	lsls	r3, r3, #10
 8020530:	24b0      	movs	r4, #176	; 0xb0
 8020532:	193a      	adds	r2, r7, r4
 8020534:	6812      	ldr	r2, [r2, #0]
 8020536:	4963      	ldr	r1, [pc, #396]	; (80206c4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x31c>)
 8020538:	400a      	ands	r2, r1
 802053a:	4313      	orrs	r3, r2
 802053c:	193a      	adds	r2, r7, r4
 802053e:	6013      	str	r3, [r2, #0]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits;
 8020540:	183b      	adds	r3, r7, r0
 8020542:	881b      	ldrh	r3, [r3, #0]
 8020544:	059b      	lsls	r3, r3, #22
 8020546:	0d9b      	lsrs	r3, r3, #22
 8020548:	b29a      	uxth	r2, r3
 802054a:	193b      	adds	r3, r7, r4
 802054c:	0592      	lsls	r2, r2, #22
 802054e:	0d90      	lsrs	r0, r2, #22
 8020550:	881a      	ldrh	r2, [r3, #0]
 8020552:	0a92      	lsrs	r2, r2, #10
 8020554:	0292      	lsls	r2, r2, #10
 8020556:	1c11      	adds	r1, r2, #0
 8020558:	1c02      	adds	r2, r0, #0
 802055a:	430a      	orrs	r2, r1
 802055c:	801a      	strh	r2, [r3, #0]
    rdo.FixedVariableRDO.CapabilityMismatch           = 1U;
 802055e:	197b      	adds	r3, r7, r5
 8020560:	781a      	ldrb	r2, [r3, #0]
 8020562:	2104      	movs	r1, #4
 8020564:	430a      	orrs	r2, r1
 8020566:	701a      	strb	r2, [r3, #0]
    rdo.FixedVariableRDO.USBCommunicationsCapable     = snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8020568:	2393      	movs	r3, #147	; 0x93
 802056a:	18fb      	adds	r3, r7, r3
 802056c:	781b      	ldrb	r3, [r3, #0]
 802056e:	075b      	lsls	r3, r3, #29
 8020570:	0fdb      	lsrs	r3, r3, #31
 8020572:	b2da      	uxtb	r2, r3
 8020574:	197b      	adds	r3, r7, r5
 8020576:	2101      	movs	r1, #1
 8020578:	400a      	ands	r2, r1
 802057a:	1890      	adds	r0, r2, r2
 802057c:	781a      	ldrb	r2, [r3, #0]
 802057e:	2102      	movs	r1, #2
 8020580:	438a      	bics	r2, r1
 8020582:	1c11      	adds	r1, r2, #0
 8020584:	1c02      	adds	r2, r0, #0
 8020586:	430a      	orrs	r2, r1
 8020588:	701a      	strb	r2, [r3, #0]
    DPM_Ports[PortNum].DPM_RequestedCurrent           = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 802058a:	19bb      	adds	r3, r7, r6
 802058c:	781a      	ldrb	r2, [r3, #0]
 802058e:	23c0      	movs	r3, #192	; 0xc0
 8020590:	18fb      	adds	r3, r7, r3
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	6859      	ldr	r1, [r3, #4]
 8020596:	4846      	ldr	r0, [pc, #280]	; (80206b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 8020598:	0013      	movs	r3, r2
 802059a:	009b      	lsls	r3, r3, #2
 802059c:	189b      	adds	r3, r3, r2
 802059e:	011b      	lsls	r3, r3, #4
 80205a0:	18c3      	adds	r3, r0, r3
 80205a2:	334c      	adds	r3, #76	; 0x4c
 80205a4:	6019      	str	r1, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 80205a6:	193b      	adds	r3, r7, r4
 80205a8:	681a      	ldr	r2, [r3, #0]
 80205aa:	23c4      	movs	r3, #196	; 0xc4
 80205ac:	18fb      	adds	r3, r7, r3
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80205b2:	e10c      	b.n	80207ce <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x426>
    return;
  }

  /* Set the Object position */
  rdo.GenericRDO.ObjectPosition               = IndexSrcPDO + 1U;
 80205b4:	240e      	movs	r4, #14
 80205b6:	193b      	adds	r3, r7, r4
 80205b8:	781b      	ldrb	r3, [r3, #0]
 80205ba:	3301      	adds	r3, #1
 80205bc:	b2db      	uxtb	r3, r3
 80205be:	1c1a      	adds	r2, r3, #0
 80205c0:	2307      	movs	r3, #7
 80205c2:	4013      	ands	r3, r2
 80205c4:	b2da      	uxtb	r2, r3
 80205c6:	25b3      	movs	r5, #179	; 0xb3
 80205c8:	197b      	adds	r3, r7, r5
 80205ca:	2107      	movs	r1, #7
 80205cc:	400a      	ands	r2, r1
 80205ce:	0110      	lsls	r0, r2, #4
 80205d0:	781a      	ldrb	r2, [r3, #0]
 80205d2:	2170      	movs	r1, #112	; 0x70
 80205d4:	438a      	bics	r2, r1
 80205d6:	1c11      	adds	r1, r2, #0
 80205d8:	1c02      	adds	r2, r0, #0
 80205da:	430a      	orrs	r2, r1
 80205dc:	701a      	strb	r2, [r3, #0]
  rdo.GenericRDO.NoUSBSuspend                 = 0;
 80205de:	197b      	adds	r3, r7, r5
 80205e0:	781a      	ldrb	r2, [r3, #0]
 80205e2:	2101      	movs	r1, #1
 80205e4:	438a      	bics	r2, r1
 80205e6:	701a      	strb	r2, [r3, #0]

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO];
 80205e8:	193b      	adds	r3, r7, r4
 80205ea:	781a      	ldrb	r2, [r3, #0]
 80205ec:	23c4      	movs	r3, #196	; 0xc4
 80205ee:	18fb      	adds	r3, r7, r3
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	0092      	lsls	r2, r2, #2
 80205f4:	58d3      	ldr	r3, [r2, r3]
 80205f6:	22b4      	movs	r2, #180	; 0xb4
 80205f8:	18ba      	adds	r2, r7, r2
 80205fa:	6013      	str	r3, [r2, #0]

  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 80205fc:	21b7      	movs	r1, #183	; 0xb7
 80205fe:	187b      	adds	r3, r7, r1
 8020600:	781b      	ldrb	r3, [r3, #0]
 8020602:	061b      	lsls	r3, r3, #24
 8020604:	0f9b      	lsrs	r3, r3, #30
 8020606:	b2db      	uxtb	r3, r3
 8020608:	001a      	movs	r2, r3
 802060a:	23d8      	movs	r3, #216	; 0xd8
 802060c:	2010      	movs	r0, #16
 802060e:	181b      	adds	r3, r3, r0
 8020610:	19db      	adds	r3, r3, r7
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	601a      	str	r2, [r3, #0]

  /* Retrieve request details from SRC PDO selection */
  mv = PtrRequestPowerDetails->RequestedVoltageInmVunits;
 8020616:	68bb      	ldr	r3, [r7, #8]
 8020618:	681b      	ldr	r3, [r3, #0]
 802061a:	22cc      	movs	r2, #204	; 0xcc
 802061c:	18ba      	adds	r2, r7, r2
 802061e:	6013      	str	r3, [r2, #0]
  ma = PtrRequestPowerDetails->OperatingCurrentInmAunits;
 8020620:	68bb      	ldr	r3, [r7, #8]
 8020622:	689b      	ldr	r3, [r3, #8]
 8020624:	22c8      	movs	r2, #200	; 0xc8
 8020626:	18ba      	adds	r2, r7, r2
 8020628:	6013      	str	r3, [r2, #0]

  switch (pdo.GenericPDO.PowerObject)
 802062a:	187b      	adds	r3, r7, r1
 802062c:	781b      	ldrb	r3, [r3, #0]
 802062e:	061b      	lsls	r3, r3, #24
 8020630:	0f9b      	lsrs	r3, r3, #30
 8020632:	b2db      	uxtb	r3, r3
 8020634:	2b00      	cmp	r3, #0
 8020636:	d002      	beq.n	802063e <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x296>
 8020638:	2b03      	cmp	r3, #3
 802063a:	d045      	beq.n	80206c8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x320>
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
    }
    break;

    default:
      break;
 802063c:	e094      	b.n	8020768 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>
      DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 802063e:	230f      	movs	r3, #15
 8020640:	18fb      	adds	r3, r7, r3
 8020642:	781a      	ldrb	r2, [r3, #0]
 8020644:	491a      	ldr	r1, [pc, #104]	; (80206b0 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x308>)
 8020646:	0013      	movs	r3, r2
 8020648:	009b      	lsls	r3, r3, #2
 802064a:	189b      	adds	r3, r3, r2
 802064c:	011b      	lsls	r3, r3, #4
 802064e:	18cb      	adds	r3, r1, r3
 8020650:	334c      	adds	r3, #76	; 0x4c
 8020652:	24c8      	movs	r4, #200	; 0xc8
 8020654:	193a      	adds	r2, r7, r4
 8020656:	6812      	ldr	r2, [r2, #0]
 8020658:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 802065a:	193b      	adds	r3, r7, r4
 802065c:	681b      	ldr	r3, [r3, #0]
 802065e:	210a      	movs	r1, #10
 8020660:	0018      	movs	r0, r3
 8020662:	f7e5 fdd9 	bl	8006218 <__udivsi3>
 8020666:	0003      	movs	r3, r0
 8020668:	059b      	lsls	r3, r3, #22
 802066a:	0d9b      	lsrs	r3, r3, #22
 802066c:	b29b      	uxth	r3, r3
 802066e:	059b      	lsls	r3, r3, #22
 8020670:	0d9b      	lsrs	r3, r3, #22
 8020672:	029b      	lsls	r3, r3, #10
 8020674:	25b0      	movs	r5, #176	; 0xb0
 8020676:	197a      	adds	r2, r7, r5
 8020678:	6812      	ldr	r2, [r2, #0]
 802067a:	4912      	ldr	r1, [pc, #72]	; (80206c4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x31c>)
 802067c:	400a      	ands	r2, r1
 802067e:	4313      	orrs	r3, r2
 8020680:	197a      	adds	r2, r7, r5
 8020682:	6013      	str	r3, [r2, #0]
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = ma / 10U;
 8020684:	193b      	adds	r3, r7, r4
 8020686:	681b      	ldr	r3, [r3, #0]
 8020688:	210a      	movs	r1, #10
 802068a:	0018      	movs	r0, r3
 802068c:	f7e5 fdc4 	bl	8006218 <__udivsi3>
 8020690:	0003      	movs	r3, r0
 8020692:	059b      	lsls	r3, r3, #22
 8020694:	0d9b      	lsrs	r3, r3, #22
 8020696:	b29a      	uxth	r2, r3
 8020698:	197b      	adds	r3, r7, r5
 802069a:	0592      	lsls	r2, r2, #22
 802069c:	0d90      	lsrs	r0, r2, #22
 802069e:	881a      	ldrh	r2, [r3, #0]
 80206a0:	0a92      	lsrs	r2, r2, #10
 80206a2:	0292      	lsls	r2, r2, #10
 80206a4:	1c11      	adds	r1, r2, #0
 80206a6:	1c02      	adds	r2, r0, #0
 80206a8:	430a      	orrs	r2, r1
 80206aa:	801a      	strh	r2, [r3, #0]
    break;
 80206ac:	e05c      	b.n	8020768 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x3c0>
 80206ae:	46c0      	nop			; (mov r8, r8)
 80206b0:	20003410 	.word	0x20003410
 80206b4:	200001c8 	.word	0x200001c8
 80206b8:	200033fc 	.word	0x200033fc
 80206bc:	200001b4 	.word	0x200001b4
 80206c0:	0802ae10 	.word	0x0802ae10
 80206c4:	fff003ff 	.word	0xfff003ff
      DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 80206c8:	230f      	movs	r3, #15
 80206ca:	18fb      	adds	r3, r7, r3
 80206cc:	781a      	ldrb	r2, [r3, #0]
 80206ce:	4941      	ldr	r1, [pc, #260]	; (80207d4 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x42c>)
 80206d0:	0013      	movs	r3, r2
 80206d2:	009b      	lsls	r3, r3, #2
 80206d4:	189b      	adds	r3, r3, r2
 80206d6:	011b      	lsls	r3, r3, #4
 80206d8:	18cb      	adds	r3, r1, r3
 80206da:	334c      	adds	r3, #76	; 0x4c
 80206dc:	24c8      	movs	r4, #200	; 0xc8
 80206de:	193a      	adds	r2, r7, r4
 80206e0:	6812      	ldr	r2, [r2, #0]
 80206e2:	601a      	str	r2, [r3, #0]
      rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO + 1U;
 80206e4:	230e      	movs	r3, #14
 80206e6:	18fb      	adds	r3, r7, r3
 80206e8:	781b      	ldrb	r3, [r3, #0]
 80206ea:	3301      	adds	r3, #1
 80206ec:	b2db      	uxtb	r3, r3
 80206ee:	1c1a      	adds	r2, r3, #0
 80206f0:	2307      	movs	r3, #7
 80206f2:	4013      	ands	r3, r2
 80206f4:	b2da      	uxtb	r2, r3
 80206f6:	23b3      	movs	r3, #179	; 0xb3
 80206f8:	18fb      	adds	r3, r7, r3
 80206fa:	2107      	movs	r1, #7
 80206fc:	400a      	ands	r2, r1
 80206fe:	0110      	lsls	r0, r2, #4
 8020700:	781a      	ldrb	r2, [r3, #0]
 8020702:	2170      	movs	r1, #112	; 0x70
 8020704:	438a      	bics	r2, r1
 8020706:	1c11      	adds	r1, r2, #0
 8020708:	1c02      	adds	r2, r0, #0
 802070a:	430a      	orrs	r2, r1
 802070c:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 802070e:	193b      	adds	r3, r7, r4
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	2132      	movs	r1, #50	; 0x32
 8020714:	0018      	movs	r0, r3
 8020716:	f7e5 fd7f 	bl	8006218 <__udivsi3>
 802071a:	0003      	movs	r3, r0
 802071c:	1c1a      	adds	r2, r3, #0
 802071e:	237f      	movs	r3, #127	; 0x7f
 8020720:	4013      	ands	r3, r2
 8020722:	b2da      	uxtb	r2, r3
 8020724:	24b0      	movs	r4, #176	; 0xb0
 8020726:	193b      	adds	r3, r7, r4
 8020728:	217f      	movs	r1, #127	; 0x7f
 802072a:	400a      	ands	r2, r1
 802072c:	0010      	movs	r0, r2
 802072e:	781a      	ldrb	r2, [r3, #0]
 8020730:	217f      	movs	r1, #127	; 0x7f
 8020732:	438a      	bics	r2, r1
 8020734:	1c11      	adds	r1, r2, #0
 8020736:	1c02      	adds	r2, r0, #0
 8020738:	430a      	orrs	r2, r1
 802073a:	701a      	strb	r2, [r3, #0]
      rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 802073c:	23cc      	movs	r3, #204	; 0xcc
 802073e:	18fb      	adds	r3, r7, r3
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	2114      	movs	r1, #20
 8020744:	0018      	movs	r0, r3
 8020746:	f7e5 fd67 	bl	8006218 <__udivsi3>
 802074a:	0003      	movs	r3, r0
 802074c:	055b      	lsls	r3, r3, #21
 802074e:	0d5b      	lsrs	r3, r3, #21
 8020750:	b29b      	uxth	r3, r3
 8020752:	055b      	lsls	r3, r3, #21
 8020754:	0d5b      	lsrs	r3, r3, #21
 8020756:	025b      	lsls	r3, r3, #9
 8020758:	193a      	adds	r2, r7, r4
 802075a:	6812      	ldr	r2, [r2, #0]
 802075c:	491e      	ldr	r1, [pc, #120]	; (80207d8 <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x430>)
 802075e:	400a      	ands	r2, r1
 8020760:	4313      	orrs	r3, r2
 8020762:	193a      	adds	r2, r7, r4
 8020764:	6013      	str	r3, [r2, #0]
    break;
 8020766:	46c0      	nop			; (mov r8, r8)
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 8020768:	23b0      	movs	r3, #176	; 0xb0
 802076a:	18fb      	adds	r3, r7, r3
 802076c:	681a      	ldr	r2, [r3, #0]
 802076e:	21c4      	movs	r1, #196	; 0xc4
 8020770:	187b      	adds	r3, r7, r1
 8020772:	681b      	ldr	r3, [r3, #0]
 8020774:	63da      	str	r2, [r3, #60]	; 0x3c
  pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 8020776:	23b3      	movs	r3, #179	; 0xb3
 8020778:	18fb      	adds	r3, r7, r3
 802077a:	781b      	ldrb	r3, [r3, #0]
 802077c:	065b      	lsls	r3, r3, #25
 802077e:	0f5b      	lsrs	r3, r3, #29
 8020780:	b2db      	uxtb	r3, r3
 8020782:	001a      	movs	r2, r3
 8020784:	187b      	adds	r3, r7, r1
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	641a      	str	r2, [r3, #64]	; 0x40

  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 802078a:	187b      	adds	r3, r7, r1
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mv;
 8020794:	187b      	adds	r3, r7, r1
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	22cc      	movs	r2, #204	; 0xcc
 802079a:	18ba      	adds	r2, r7, r2
 802079c:	6812      	ldr	r2, [r2, #0]
 802079e:	649a      	str	r2, [r3, #72]	; 0x48

  char _str2[60];
  int len = snprintf(_str2, sizeof(_str2), "Call of native BuildRDO made");
 80207a0:	4a0e      	ldr	r2, [pc, #56]	; (80207dc <USER_SERV_SNK_BuildRDOfromSelectedPDO+0x434>)
 80207a2:	2454      	movs	r4, #84	; 0x54
 80207a4:	193b      	adds	r3, r7, r4
 80207a6:	213c      	movs	r1, #60	; 0x3c
 80207a8:	0018      	movs	r0, r3
 80207aa:	f007 f8b9 	bl	8027920 <sniprintf>
 80207ae:	0003      	movs	r3, r0
 80207b0:	22bc      	movs	r2, #188	; 0xbc
 80207b2:	18ba      	adds	r2, r7, r2
 80207b4:	6013      	str	r3, [r2, #0]
  USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0, 0, (uint8_t*)_str2, strlen(_str2));
 80207b6:	193b      	adds	r3, r7, r4
 80207b8:	0018      	movs	r0, r3
 80207ba:	f7e5 fd11 	bl	80061e0 <strlen>
 80207be:	0002      	movs	r2, r0
 80207c0:	193b      	adds	r3, r7, r4
 80207c2:	9200      	str	r2, [sp, #0]
 80207c4:	2200      	movs	r2, #0
 80207c6:	2100      	movs	r1, #0
 80207c8:	2006      	movs	r0, #6
 80207ca:	f7f5 fac5 	bl	8015d58 <USBPD_TRACE_Add>
}
 80207ce:	46bd      	mov	sp, r7
 80207d0:	b035      	add	sp, #212	; 0xd4
 80207d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207d4:	20003410 	.word	0x20003410
 80207d8:	fff001ff 	.word	0xfff001ff
 80207dc:	0802adf0 	.word	0x0802adf0

080207e0 <USER_SERV_SNK_BuildRequestedRDO>:
void USER_SERV_SNK_BuildRequestedRDO(uint8_t PortNum,
                                                  uint16_t IndexSrcPDO,
												  uint16_t Voltage_mV, uint16_t Current_mA,
                                                  USBPD_SNKRDO_TypeDef *Rdo,
                                                  USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80207e0:	b5b0      	push	{r4, r5, r7, lr}
 80207e2:	b088      	sub	sp, #32
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	0005      	movs	r5, r0
 80207e8:	000c      	movs	r4, r1
 80207ea:	0010      	movs	r0, r2
 80207ec:	0019      	movs	r1, r3
 80207ee:	1dfb      	adds	r3, r7, #7
 80207f0:	1c2a      	adds	r2, r5, #0
 80207f2:	701a      	strb	r2, [r3, #0]
 80207f4:	1d3b      	adds	r3, r7, #4
 80207f6:	1c22      	adds	r2, r4, #0
 80207f8:	801a      	strh	r2, [r3, #0]
 80207fa:	1cbb      	adds	r3, r7, #2
 80207fc:	1c02      	adds	r2, r0, #0
 80207fe:	801a      	strh	r2, [r3, #0]
 8020800:	003b      	movs	r3, r7
 8020802:	1c0a      	adds	r2, r1, #0
 8020804:	801a      	strh	r2, [r3, #0]
  uint32_t mv = Voltage_mV;
 8020806:	1cbb      	adds	r3, r7, #2
 8020808:	881b      	ldrh	r3, [r3, #0]
 802080a:	61fb      	str	r3, [r7, #28]
  uint32_t ma = Current_mA;
 802080c:	003b      	movs	r3, r7
 802080e:	881b      	ldrh	r3, [r3, #0]
 8020810:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef  pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 8020812:	1dfb      	adds	r3, r7, #7
 8020814:	781a      	ldrb	r2, [r3, #0]
 8020816:	0013      	movs	r3, r2
 8020818:	009b      	lsls	r3, r3, #2
 802081a:	189b      	adds	r3, r3, r2
 802081c:	011b      	lsls	r3, r3, #4
 802081e:	4a63      	ldr	r2, [pc, #396]	; (80209ac <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 8020820:	189b      	adds	r3, r3, r2
 8020822:	617b      	str	r3, [r7, #20]

  /* Initialize RDO */
  rdo.d32 = 0;
 8020824:	2300      	movs	r3, #0
 8020826:	60fb      	str	r3, [r7, #12]
  rdo.GenericRDO.USBCommunicationsCapable = 0; //snk_fixed_pdo.SNKFixedPDO.USBCommunicationsCapable;
 8020828:	200f      	movs	r0, #15
 802082a:	183b      	adds	r3, r7, r0
 802082c:	781a      	ldrb	r2, [r3, #0]
 802082e:	2102      	movs	r1, #2
 8020830:	438a      	bics	r2, r1
 8020832:	701a      	strb	r2, [r3, #0]
                                               //Shall only be set for Sources capable of communication over the USB data lines
  rdo.GenericRDO.NoUSBSuspend             = 1; //Sinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting
 8020834:	183b      	adds	r3, r7, r0
 8020836:	781a      	ldrb	r2, [r3, #0]
 8020838:	2101      	movs	r1, #1
 802083a:	430a      	orrs	r2, r1
 802083c:	701a      	strb	r2, [r3, #0]
                                               //the No USB Suspend flag in a Request Message
  rdo.GenericRDO.ObjectPosition = IndexSrcPDO;
 802083e:	1d3b      	adds	r3, r7, #4
 8020840:	881b      	ldrh	r3, [r3, #0]
 8020842:	1c1a      	adds	r2, r3, #0
 8020844:	2307      	movs	r3, #7
 8020846:	4013      	ands	r3, r2
 8020848:	b2da      	uxtb	r2, r3
 802084a:	183b      	adds	r3, r7, r0
 802084c:	2107      	movs	r1, #7
 802084e:	400a      	ands	r2, r1
 8020850:	0110      	lsls	r0, r2, #4
 8020852:	781a      	ldrb	r2, [r3, #0]
 8020854:	2170      	movs	r1, #112	; 0x70
 8020856:	438a      	bics	r2, r1
 8020858:	1c11      	adds	r1, r2, #0
 802085a:	1c02      	adds	r2, r0, #0
 802085c:	430a      	orrs	r2, r1
 802085e:	701a      	strb	r2, [r3, #0]

  /* Initialize PDO */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[IndexSrcPDO-1];
 8020860:	1d3b      	adds	r3, r7, #4
 8020862:	881b      	ldrh	r3, [r3, #0]
 8020864:	1e5a      	subs	r2, r3, #1
 8020866:	697b      	ldr	r3, [r7, #20]
 8020868:	0092      	lsls	r2, r2, #2
 802086a:	58d3      	ldr	r3, [r2, r3]
 802086c:	613b      	str	r3, [r7, #16]
  *PtrPowerObject = pdo.GenericPDO.PowerObject;
 802086e:	2113      	movs	r1, #19
 8020870:	187b      	adds	r3, r7, r1
 8020872:	781b      	ldrb	r3, [r3, #0]
 8020874:	061b      	lsls	r3, r3, #24
 8020876:	0f9b      	lsrs	r3, r3, #30
 8020878:	b2db      	uxtb	r3, r3
 802087a:	001a      	movs	r2, r3
 802087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802087e:	601a      	str	r2, [r3, #0]

  /* Build RDO*/
  switch (pdo.GenericPDO.PowerObject)
 8020880:	187b      	adds	r3, r7, r1
 8020882:	781b      	ldrb	r3, [r3, #0]
 8020884:	061b      	lsls	r3, r3, #24
 8020886:	0f9b      	lsrs	r3, r3, #30
 8020888:	b2db      	uxtb	r3, r3
 802088a:	2b00      	cmp	r3, #0
 802088c:	d002      	beq.n	8020894 <USER_SERV_SNK_BuildRequestedRDO+0xb4>
 802088e:	2b03      	cmp	r3, #3
 8020890:	d02e      	beq.n	80208f0 <USER_SERV_SNK_BuildRequestedRDO+0x110>
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
      }
      break;

      default:
        break;
 8020892:	e072      	b.n	802097a <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent           = ma;
 8020894:	1dfb      	adds	r3, r7, #7
 8020896:	781a      	ldrb	r2, [r3, #0]
 8020898:	4944      	ldr	r1, [pc, #272]	; (80209ac <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 802089a:	0013      	movs	r3, r2
 802089c:	009b      	lsls	r3, r3, #2
 802089e:	189b      	adds	r3, r3, r2
 80208a0:	011b      	lsls	r3, r3, #4
 80208a2:	18cb      	adds	r3, r1, r3
 80208a4:	334c      	adds	r3, #76	; 0x4c
 80208a6:	69ba      	ldr	r2, [r7, #24]
 80208a8:	601a      	str	r2, [r3, #0]
        rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = ma / 10U;
 80208aa:	69bb      	ldr	r3, [r7, #24]
 80208ac:	210a      	movs	r1, #10
 80208ae:	0018      	movs	r0, r3
 80208b0:	f7e5 fcb2 	bl	8006218 <__udivsi3>
 80208b4:	0003      	movs	r3, r0
 80208b6:	059b      	lsls	r3, r3, #22
 80208b8:	0d9b      	lsrs	r3, r3, #22
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	059b      	lsls	r3, r3, #22
 80208be:	0d9b      	lsrs	r3, r3, #22
 80208c0:	029b      	lsls	r3, r3, #10
 80208c2:	68fa      	ldr	r2, [r7, #12]
 80208c4:	493a      	ldr	r1, [pc, #232]	; (80209b0 <USER_SERV_SNK_BuildRequestedRDO+0x1d0>)
 80208c6:	400a      	ands	r2, r1
 80208c8:	4313      	orrs	r3, r2
 80208ca:	60fb      	str	r3, [r7, #12]
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = pdo.SRCFixedPDO.MaxCurrentIn10mAunits; //ma / 10U;
 80208cc:	2310      	movs	r3, #16
 80208ce:	18fb      	adds	r3, r7, r3
 80208d0:	881b      	ldrh	r3, [r3, #0]
 80208d2:	059b      	lsls	r3, r3, #22
 80208d4:	0d9b      	lsrs	r3, r3, #22
 80208d6:	b29a      	uxth	r2, r3
 80208d8:	230c      	movs	r3, #12
 80208da:	18fb      	adds	r3, r7, r3
 80208dc:	0592      	lsls	r2, r2, #22
 80208de:	0d90      	lsrs	r0, r2, #22
 80208e0:	881a      	ldrh	r2, [r3, #0]
 80208e2:	0a92      	lsrs	r2, r2, #10
 80208e4:	0292      	lsls	r2, r2, #10
 80208e6:	1c11      	adds	r1, r2, #0
 80208e8:	1c02      	adds	r2, r0, #0
 80208ea:	430a      	orrs	r2, r1
 80208ec:	801a      	strh	r2, [r3, #0]
      break;
 80208ee:	e044      	b.n	802097a <USER_SERV_SNK_BuildRequestedRDO+0x19a>
        DPM_Ports[PortNum].DPM_RequestedCurrent    = ma;
 80208f0:	1dfb      	adds	r3, r7, #7
 80208f2:	781a      	ldrb	r2, [r3, #0]
 80208f4:	492d      	ldr	r1, [pc, #180]	; (80209ac <USER_SERV_SNK_BuildRequestedRDO+0x1cc>)
 80208f6:	0013      	movs	r3, r2
 80208f8:	009b      	lsls	r3, r3, #2
 80208fa:	189b      	adds	r3, r3, r2
 80208fc:	011b      	lsls	r3, r3, #4
 80208fe:	18cb      	adds	r3, r1, r3
 8020900:	334c      	adds	r3, #76	; 0x4c
 8020902:	69ba      	ldr	r2, [r7, #24]
 8020904:	601a      	str	r2, [r3, #0]
        rdo.ProgRDO.ObjectPosition                 = IndexSrcPDO;
 8020906:	1d3b      	adds	r3, r7, #4
 8020908:	881b      	ldrh	r3, [r3, #0]
 802090a:	1c1a      	adds	r2, r3, #0
 802090c:	2307      	movs	r3, #7
 802090e:	4013      	ands	r3, r2
 8020910:	b2da      	uxtb	r2, r3
 8020912:	230f      	movs	r3, #15
 8020914:	18fb      	adds	r3, r7, r3
 8020916:	2107      	movs	r1, #7
 8020918:	400a      	ands	r2, r1
 802091a:	0110      	lsls	r0, r2, #4
 802091c:	781a      	ldrb	r2, [r3, #0]
 802091e:	2170      	movs	r1, #112	; 0x70
 8020920:	438a      	bics	r2, r1
 8020922:	1c11      	adds	r1, r2, #0
 8020924:	1c02      	adds	r2, r0, #0
 8020926:	430a      	orrs	r2, r1
 8020928:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OperatingCurrentIn50mAunits    = ma / 50U;
 802092a:	69bb      	ldr	r3, [r7, #24]
 802092c:	2132      	movs	r1, #50	; 0x32
 802092e:	0018      	movs	r0, r3
 8020930:	f7e5 fc72 	bl	8006218 <__udivsi3>
 8020934:	0003      	movs	r3, r0
 8020936:	1c1a      	adds	r2, r3, #0
 8020938:	237f      	movs	r3, #127	; 0x7f
 802093a:	4013      	ands	r3, r2
 802093c:	b2da      	uxtb	r2, r3
 802093e:	230c      	movs	r3, #12
 8020940:	18fb      	adds	r3, r7, r3
 8020942:	217f      	movs	r1, #127	; 0x7f
 8020944:	400a      	ands	r2, r1
 8020946:	0010      	movs	r0, r2
 8020948:	781a      	ldrb	r2, [r3, #0]
 802094a:	217f      	movs	r1, #127	; 0x7f
 802094c:	438a      	bics	r2, r1
 802094e:	1c11      	adds	r1, r2, #0
 8020950:	1c02      	adds	r2, r0, #0
 8020952:	430a      	orrs	r2, r1
 8020954:	701a      	strb	r2, [r3, #0]
        rdo.ProgRDO.OutputVoltageIn20mV            = mv / 20U;
 8020956:	69fb      	ldr	r3, [r7, #28]
 8020958:	2114      	movs	r1, #20
 802095a:	0018      	movs	r0, r3
 802095c:	f7e5 fc5c 	bl	8006218 <__udivsi3>
 8020960:	0003      	movs	r3, r0
 8020962:	055b      	lsls	r3, r3, #21
 8020964:	0d5b      	lsrs	r3, r3, #21
 8020966:	b29b      	uxth	r3, r3
 8020968:	055b      	lsls	r3, r3, #21
 802096a:	0d5b      	lsrs	r3, r3, #21
 802096c:	025b      	lsls	r3, r3, #9
 802096e:	68fa      	ldr	r2, [r7, #12]
 8020970:	4910      	ldr	r1, [pc, #64]	; (80209b4 <USER_SERV_SNK_BuildRequestedRDO+0x1d4>)
 8020972:	400a      	ands	r2, r1
 8020974:	4313      	orrs	r3, r2
 8020976:	60fb      	str	r3, [r7, #12]
      break;
 8020978:	46c0      	nop			; (mov r8, r8)
    }

  /*Assign request values to pdhandle*/
  pdhandle->DPM_RDOPositionPrevious = pdhandle->DPM_RDOPosition;
 802097a:	697b      	ldr	r3, [r7, #20]
 802097c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802097e:	697b      	ldr	r3, [r7, #20]
 8020980:	645a      	str	r2, [r3, #68]	; 0x44
  pdhandle->DPM_RDOPosition = IndexSrcPDO; //pdhandle->DPM_RDOPosition  = rdo.GenericRDO.ObjectPosition;
 8020982:	1d3b      	adds	r3, r7, #4
 8020984:	881a      	ldrh	r2, [r3, #0]
 8020986:	697b      	ldr	r3, [r7, #20]
 8020988:	641a      	str	r2, [r3, #64]	; 0x40
  pdhandle->DPM_RequestedVoltage = mv;
 802098a:	697b      	ldr	r3, [r7, #20]
 802098c:	69fa      	ldr	r2, [r7, #28]
 802098e:	649a      	str	r2, [r3, #72]	; 0x48
  pdhandle->DPM_RequestedCurrent = ma;
 8020990:	697b      	ldr	r3, [r7, #20]
 8020992:	69ba      	ldr	r2, [r7, #24]
 8020994:	64da      	str	r2, [r3, #76]	; 0x4c

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 8020996:	68fa      	ldr	r2, [r7, #12]
 8020998:	697b      	ldr	r3, [r7, #20]
 802099a:	63da      	str	r2, [r3, #60]	; 0x3c
  Rdo->d32 = pdhandle->DPM_RequestDOMsg;
 802099c:	697b      	ldr	r3, [r7, #20]
 802099e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80209a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80209a2:	601a      	str	r2, [r3, #0]

}
 80209a4:	46c0      	nop			; (mov r8, r8)
 80209a6:	46bd      	mov	sp, r7
 80209a8:	b008      	add	sp, #32
 80209aa:	bdb0      	pop	{r4, r5, r7, pc}
 80209ac:	20003410 	.word	0x20003410
 80209b0:	fff003ff 	.word	0xfff003ff
 80209b4:	fff001ff 	.word	0xfff001ff

080209b8 <USER_SERV_FindSRCIndex>:
											USBPD_DPM_SNKPowerRequestDetailsTypeDef *PtrRequestPowerDetails,
											uint16_t Voltage_mV,
											uint16_t Current_mA,
											uint8_t Method)

{
 80209b8:	b590      	push	{r4, r7, lr}
 80209ba:	b099      	sub	sp, #100	; 0x64
 80209bc:	af00      	add	r7, sp, #0
 80209be:	60f8      	str	r0, [r7, #12]
 80209c0:	60b9      	str	r1, [r7, #8]
 80209c2:	0019      	movs	r1, r3
 80209c4:	1dbb      	adds	r3, r7, #6
 80209c6:	801a      	strh	r2, [r3, #0]
 80209c8:	1d3b      	adds	r3, r7, #4
 80209ca:	1c0a      	adds	r2, r1, #0
 80209cc:	801a      	strh	r2, [r3, #0]
	USBPD_PDO_TypeDef srcpdo;
	uint32_t *ptpdoarray;
	uint32_t reqvoltage = Voltage_mV;
 80209ce:	1dbb      	adds	r3, r7, #6
 80209d0:	881b      	ldrh	r3, [r3, #0]
 80209d2:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t reqcurrent = Current_mA;
 80209d4:	1d3b      	adds	r3, r7, #4
 80209d6:	881b      	ldrh	r3, [r3, #0]
 80209d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t nbsrcpdo;
	uint32_t allowablepower;
	uint32_t selpower;
	uint32_t allowablecurrent;
	uint32_t selcurrent = 0;
 80209da:	2300      	movs	r3, #0
 80209dc:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t curr_index = DPM_NO_SRC_PDO_FOUND;
 80209de:	23ff      	movs	r3, #255	; 0xff
 80209e0:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t temp_index;
	USBPD_USER_SettingsTypeDef *puser = (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 80209e2:	68fb      	ldr	r3, [r7, #12]
 80209e4:	2274      	movs	r2, #116	; 0x74
 80209e6:	435a      	muls	r2, r3
 80209e8:	4b81      	ldr	r3, [pc, #516]	; (8020bf0 <USER_SERV_FindSRCIndex+0x238>)
 80209ea:	18d3      	adds	r3, r2, r3
 80209ec:	63bb      	str	r3, [r7, #56]	; 0x38

	uint32_t RDOposition;
	uint32_t nbsrcAPDO = 0;
 80209ee:	2300      	movs	r3, #0
 80209f0:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t nbsrcFixedPDO = 0;
 80209f2:	2300      	movs	r3, #0
 80209f4:	64fb      	str	r3, [r7, #76]	; 0x4c


	//Get current PDO position
	USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 80209f6:	68fa      	ldr	r2, [r7, #12]
 80209f8:	0013      	movs	r3, r2
 80209fa:	009b      	lsls	r3, r3, #2
 80209fc:	189b      	adds	r3, r3, r2
 80209fe:	011b      	lsls	r3, r3, #4
 8020a00:	4a7c      	ldr	r2, [pc, #496]	; (8020bf4 <USER_SERV_FindSRCIndex+0x23c>)
 8020a02:	189b      	adds	r3, r3, r2
 8020a04:	637b      	str	r3, [r7, #52]	; 0x34
	RDOposition = pdhandle->DPM_RDOPosition;
 8020a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a0a:	633b      	str	r3, [r7, #48]	; 0x30

	//Get number of source PDOs
	nbsrcpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 8020a0c:	4979      	ldr	r1, [pc, #484]	; (8020bf4 <USER_SERV_FindSRCIndex+0x23c>)
 8020a0e:	68fa      	ldr	r2, [r7, #12]
 8020a10:	0013      	movs	r3, r2
 8020a12:	009b      	lsls	r3, r3, #2
 8020a14:	189b      	adds	r3, r3, r2
 8020a16:	011b      	lsls	r3, r3, #4
 8020a18:	18cb      	adds	r3, r1, r3
 8020a1a:	331c      	adds	r3, #28
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//Get array list of SRC PDOs
	ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 8020a20:	68fa      	ldr	r2, [r7, #12]
 8020a22:	0013      	movs	r3, r2
 8020a24:	009b      	lsls	r3, r3, #2
 8020a26:	189b      	adds	r3, r3, r2
 8020a28:	011b      	lsls	r3, r3, #4
 8020a2a:	4a72      	ldr	r2, [pc, #456]	; (8020bf4 <USER_SERV_FindSRCIndex+0x23c>)
 8020a2c:	189b      	adds	r3, r3, r2
 8020a2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Get number of APDOs and FixedPDOs */
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 8020a30:	2300      	movs	r3, #0
 8020a32:	657b      	str	r3, [r7, #84]	; 0x54
 8020a34:	e019      	b.n	8020a6a <USER_SERV_FindSRCIndex+0xb2>
	{
		srcpdo.d32 = ptpdoarray[temp_index];
 8020a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a38:	009b      	lsls	r3, r3, #2
 8020a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020a3c:	18d3      	adds	r3, r2, r3
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	613b      	str	r3, [r7, #16]

		switch (srcpdo.GenericPDO.PowerObject)
 8020a42:	2313      	movs	r3, #19
 8020a44:	18fb      	adds	r3, r7, r3
 8020a46:	781b      	ldrb	r3, [r3, #0]
 8020a48:	061b      	lsls	r3, r3, #24
 8020a4a:	0f9b      	lsrs	r3, r3, #30
 8020a4c:	b2db      	uxtb	r3, r3
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	d002      	beq.n	8020a58 <USER_SERV_FindSRCIndex+0xa0>
 8020a52:	2b03      	cmp	r3, #3
 8020a54:	d003      	beq.n	8020a5e <USER_SERV_FindSRCIndex+0xa6>
 8020a56:	e005      	b.n	8020a64 <USER_SERV_FindSRCIndex+0xac>
		{
			/* SRC Fixed Supply PDO */
			case USBPD_CORE_PDO_TYPE_FIXED:
			{
				nbsrcFixedPDO++;
 8020a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020a5a:	3301      	adds	r3, #1
 8020a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			/* Augmented Power Data Object (APDO) */
			case USBPD_CORE_PDO_TYPE_APDO:
			{
				//nbsrcAPDO++;
				nbsrcAPDO++;
 8020a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020a60:	3301      	adds	r3, #1
 8020a62:	653b      	str	r3, [r7, #80]	; 0x50
	for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 8020a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a66:	3301      	adds	r3, #1
 8020a68:	657b      	str	r3, [r7, #84]	; 0x54
 8020a6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a6e:	429a      	cmp	r2, r3
 8020a70:	d3e1      	bcc.n	8020a36 <USER_SERV_FindSRCIndex+0x7e>
		}
	}


	// Search for matching APDO or find next FixedPDO
	if (nbsrcAPDO > 0 && Method== PDO_SEL_METHOD_MAX_CUR)
 8020a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d100      	bne.n	8020a7a <USER_SERV_FindSRCIndex+0xc2>
 8020a78:	e084      	b.n	8020b84 <USER_SERV_FindSRCIndex+0x1cc>
 8020a7a:	2368      	movs	r3, #104	; 0x68
 8020a7c:	2208      	movs	r2, #8
 8020a7e:	189b      	adds	r3, r3, r2
 8020a80:	19db      	adds	r3, r3, r7
 8020a82:	781b      	ldrb	r3, [r3, #0]
 8020a84:	2b04      	cmp	r3, #4
 8020a86:	d000      	beq.n	8020a8a <USER_SERV_FindSRCIndex+0xd2>
 8020a88:	e07c      	b.n	8020b84 <USER_SERV_FindSRCIndex+0x1cc>
	{

		/* Check SRC PDO value according to its type */
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 8020a8a:	2300      	movs	r3, #0
 8020a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8020a8e:	e074      	b.n	8020b7a <USER_SERV_FindSRCIndex+0x1c2>
		{
			srcpdo.d32 = ptpdoarray[temp_index];
 8020a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020a92:	009b      	lsls	r3, r3, #2
 8020a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020a96:	18d3      	adds	r3, r2, r3
 8020a98:	681b      	ldr	r3, [r3, #0]
 8020a9a:	613b      	str	r3, [r7, #16]

			switch (srcpdo.GenericPDO.PowerObject)
 8020a9c:	2313      	movs	r3, #19
 8020a9e:	18fb      	adds	r3, r7, r3
 8020aa0:	781b      	ldrb	r3, [r3, #0]
 8020aa2:	061b      	lsls	r3, r3, #24
 8020aa4:	0f9b      	lsrs	r3, r3, #30
 8020aa6:	b2db      	uxtb	r3, r3
 8020aa8:	2b00      	cmp	r3, #0
 8020aaa:	d001      	beq.n	8020ab0 <USER_SERV_FindSRCIndex+0xf8>
 8020aac:	2b03      	cmp	r3, #3
 8020aae:	d161      	bne.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
			{
				uint16_t srcmaxvoltage100mv;
				uint16_t srcminvoltage100mv;
				uint16_t srcmaxcurrent50ma;
				//Extract voltage and current limits of given SRC APDO
				srcmaxvoltage100mv = srcpdo.SRCSNKAPDO.MaxVoltageIn100mV;
 8020ab0:	2312      	movs	r3, #18
 8020ab2:	18fb      	adds	r3, r7, r3
 8020ab4:	881b      	ldrh	r3, [r3, #0]
 8020ab6:	05db      	lsls	r3, r3, #23
 8020ab8:	0e1b      	lsrs	r3, r3, #24
 8020aba:	b2da      	uxtb	r2, r3
 8020abc:	2026      	movs	r0, #38	; 0x26
 8020abe:	183b      	adds	r3, r7, r0
 8020ac0:	801a      	strh	r2, [r3, #0]
				srcminvoltage100mv = srcpdo.SRCSNKAPDO.MinVoltageIn100mV;
 8020ac2:	2110      	movs	r1, #16
 8020ac4:	187b      	adds	r3, r7, r1
 8020ac6:	785a      	ldrb	r2, [r3, #1]
 8020ac8:	2424      	movs	r4, #36	; 0x24
 8020aca:	193b      	adds	r3, r7, r4
 8020acc:	801a      	strh	r2, [r3, #0]
				srcmaxcurrent50ma = srcpdo.SRCSNKAPDO.MaxCurrentIn50mAunits;
 8020ace:	187b      	adds	r3, r7, r1
 8020ad0:	781b      	ldrb	r3, [r3, #0]
 8020ad2:	065b      	lsls	r3, r3, #25
 8020ad4:	0e5b      	lsrs	r3, r3, #25
 8020ad6:	b2da      	uxtb	r2, r3
 8020ad8:	2122      	movs	r1, #34	; 0x22
 8020ada:	187b      	adds	r3, r7, r1
 8020adc:	801a      	strh	r2, [r3, #0]

				/*Check if reqvoltage falls within SRC_APDO voltage range*/
				if ( (PWR_DECODE_100MV(srcminvoltage100mv) <= reqvoltage) && (reqvoltage <= PWR_DECODE_100MV(srcmaxvoltage100mv)) )
 8020ade:	193b      	adds	r3, r7, r4
 8020ae0:	881b      	ldrh	r3, [r3, #0]
 8020ae2:	2264      	movs	r2, #100	; 0x64
 8020ae4:	4353      	muls	r3, r2
 8020ae6:	b29b      	uxth	r3, r3
 8020ae8:	001a      	movs	r2, r3
 8020aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020aec:	4293      	cmp	r3, r2
 8020aee:	d341      	bcc.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
 8020af0:	183b      	adds	r3, r7, r0
 8020af2:	881b      	ldrh	r3, [r3, #0]
 8020af4:	2264      	movs	r2, #100	; 0x64
 8020af6:	4353      	muls	r3, r2
 8020af8:	b29b      	uxth	r3, r3
 8020afa:	001a      	movs	r2, r3
 8020afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020afe:	4293      	cmp	r3, r2
 8020b00:	d838      	bhi.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
				{
					/*Check that reqcurrent is smaller or equal to srcmaxcurrent*/
					if ( (reqcurrent <= PWR_DECODE_50MA(srcmaxcurrent50ma)) && (reqcurrent != 0) )
 8020b02:	187b      	adds	r3, r7, r1
 8020b04:	881b      	ldrh	r3, [r3, #0]
 8020b06:	2232      	movs	r2, #50	; 0x32
 8020b08:	4353      	muls	r3, r2
 8020b0a:	b29b      	uxth	r3, r3
 8020b0c:	001a      	movs	r2, r3
 8020b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b10:	4293      	cmp	r3, r2
 8020b12:	d82f      	bhi.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
 8020b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d02c      	beq.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
					{
						/*Convert srcmaxcurrent into mV*/
						allowablecurrent = PWR_DECODE_50MA(srcmaxcurrent50ma);
 8020b1a:	187b      	adds	r3, r7, r1
 8020b1c:	881b      	ldrh	r3, [r3, #0]
 8020b1e:	2232      	movs	r2, #50	; 0x32
 8020b20:	4353      	muls	r3, r2
 8020b22:	b29b      	uxth	r3, r3
 8020b24:	61fb      	str	r3, [r7, #28]

						/*Find the best APDO index based on the method */
						switch(Method)
 8020b26:	2368      	movs	r3, #104	; 0x68
 8020b28:	2208      	movs	r2, #8
 8020b2a:	189b      	adds	r3, r3, r2
 8020b2c:	19db      	adds	r3, r3, r7
 8020b2e:	781b      	ldrb	r3, [r3, #0]
 8020b30:	2b04      	cmp	r3, #4
 8020b32:	d002      	beq.n	8020b3a <USER_SERV_FindSRCIndex+0x182>
 8020b34:	2b05      	cmp	r3, #5
 8020b36:	d009      	beq.n	8020b4c <USER_SERV_FindSRCIndex+0x194>
 8020b38:	e014      	b.n	8020b64 <USER_SERV_FindSRCIndex+0x1ac>
						{
						case PDO_SEL_METHOD_MAX_CUR:
							if (allowablecurrent > selcurrent)
 8020b3a:	69fa      	ldr	r2, [r7, #28]
 8020b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020b3e:	429a      	cmp	r2, r3
 8020b40:	d915      	bls.n	8020b6e <USER_SERV_FindSRCIndex+0x1b6>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 8020b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b44:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 8020b46:	69fb      	ldr	r3, [r7, #28]
 8020b48:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 8020b4a:	e010      	b.n	8020b6e <USER_SERV_FindSRCIndex+0x1b6>

						case PDO_SEL_METHOD_MIN_CUR:
							if ((allowablecurrent < selcurrent) || (selcurrent == 0))
 8020b4c:	69fa      	ldr	r2, [r7, #28]
 8020b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020b50:	429a      	cmp	r2, r3
 8020b52:	d302      	bcc.n	8020b5a <USER_SERV_FindSRCIndex+0x1a2>
 8020b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d10b      	bne.n	8020b72 <USER_SERV_FindSRCIndex+0x1ba>
							{
								/* Consider the current PDO the best one until now */
								curr_index = temp_index;
 8020b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b5c:	65bb      	str	r3, [r7, #88]	; 0x58
								selcurrent = allowablecurrent;
 8020b5e:	69fb      	ldr	r3, [r7, #28]
 8020b60:	65fb      	str	r3, [r7, #92]	; 0x5c
							}
							break;
 8020b62:	e006      	b.n	8020b72 <USER_SERV_FindSRCIndex+0x1ba>

						default:
							/* Default behavior: last PDO is selected */
							curr_index = temp_index;
 8020b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b66:	65bb      	str	r3, [r7, #88]	; 0x58
							selcurrent = allowablecurrent;
 8020b68:	69fb      	ldr	r3, [r7, #28]
 8020b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8020b6c:	e002      	b.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
							break;
 8020b6e:	46c0      	nop			; (mov r8, r8)
 8020b70:	e000      	b.n	8020b74 <USER_SERV_FindSRCIndex+0x1bc>
							break;
 8020b72:	46c0      	nop			; (mov r8, r8)
		for (temp_index = 0; temp_index < nbsrcpdo; temp_index++)
 8020b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020b76:	3301      	adds	r3, #1
 8020b78:	657b      	str	r3, [r7, #84]	; 0x54
 8020b7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b7e:	429a      	cmp	r2, r3
 8020b80:	d386      	bcc.n	8020a90 <USER_SERV_FindSRCIndex+0xd8>
	if (nbsrcAPDO > 0 && Method== PDO_SEL_METHOD_MAX_CUR)
 8020b82:	e02e      	b.n	8020be2 <USER_SERV_FindSRCIndex+0x22a>
		}
	}

	else
	{
		uint32_t start_index = RDOposition;
 8020b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b86:	61bb      	str	r3, [r7, #24]
		uint32_t found_fixed_pdo = 0;
 8020b88:	2300      	movs	r3, #0
 8020b8a:	64bb      	str	r3, [r7, #72]	; 0x48

		// Start searching for the next Fixed PDO
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 8020b8c:	2300      	movs	r3, #0
 8020b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8020b90:	e01e      	b.n	8020bd0 <USER_SERV_FindSRCIndex+0x218>
		{
			// Increment and wrap around if necessary
			uint32_t check_index = (start_index + i) % nbsrcpdo;
 8020b92:	69ba      	ldr	r2, [r7, #24]
 8020b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020b96:	18d3      	adds	r3, r2, r3
 8020b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020b9a:	0018      	movs	r0, r3
 8020b9c:	f7e5 fbc2 	bl	8006324 <__aeabi_uidivmod>
 8020ba0:	000b      	movs	r3, r1
 8020ba2:	617b      	str	r3, [r7, #20]

			// Load the PDO
			srcpdo.d32 = ptpdoarray[check_index];
 8020ba4:	697b      	ldr	r3, [r7, #20]
 8020ba6:	009b      	lsls	r3, r3, #2
 8020ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020baa:	18d3      	adds	r3, r2, r3
 8020bac:	681b      	ldr	r3, [r3, #0]
 8020bae:	613b      	str	r3, [r7, #16]

			// Check if it's a Fixed PDO
			if (srcpdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 8020bb0:	2313      	movs	r3, #19
 8020bb2:	18fb      	adds	r3, r7, r3
 8020bb4:	781b      	ldrb	r3, [r3, #0]
 8020bb6:	223f      	movs	r2, #63	; 0x3f
 8020bb8:	4393      	bics	r3, r2
 8020bba:	b2db      	uxtb	r3, r3
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d104      	bne.n	8020bca <USER_SERV_FindSRCIndex+0x212>
			{
				curr_index = check_index;
 8020bc0:	697b      	ldr	r3, [r7, #20]
 8020bc2:	65bb      	str	r3, [r7, #88]	; 0x58
				found_fixed_pdo = 1;
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	64bb      	str	r3, [r7, #72]	; 0x48
				break;
 8020bc8:	e006      	b.n	8020bd8 <USER_SERV_FindSRCIndex+0x220>
		for (uint32_t i = 0; i < nbsrcpdo; i++)
 8020bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020bcc:	3301      	adds	r3, #1
 8020bce:	647b      	str	r3, [r7, #68]	; 0x44
 8020bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bd4:	429a      	cmp	r2, r3
 8020bd6:	d3dc      	bcc.n	8020b92 <USER_SERV_FindSRCIndex+0x1da>
			}
		}

		// Default to the first Fixed PDO if none found (failsafe)
		if (!found_fixed_pdo)
 8020bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	d101      	bne.n	8020be2 <USER_SERV_FindSRCIndex+0x22a>
		{
			curr_index = 0;
 8020bde:	2300      	movs	r3, #0
 8020be0:	65bb      	str	r3, [r7, #88]	; 0x58
		}
	}

	return curr_index+1;
 8020be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8020be4:	3301      	adds	r3, #1
}
 8020be6:	0018      	movs	r0, r3
 8020be8:	46bd      	mov	sp, r7
 8020bea:	b019      	add	sp, #100	; 0x64
 8020bec:	bd90      	pop	{r4, r7, pc}
 8020bee:	46c0      	nop			; (mov r8, r8)
 8020bf0:	200001c8 	.word	0x200001c8
 8020bf4:	20003410 	.word	0x20003410

08020bf8 <USER_SERV_ExtractSRCCapa>:




void USER_SERV_ExtractSRCCapa(void) {
 8020bf8:	b580      	push	{r7, lr}
 8020bfa:	b082      	sub	sp, #8
 8020bfc:	af00      	add	r7, sp, #0
	//
	bool printToCOM = false;
 8020bfe:	1dfb      	adds	r3, r7, #7
 8020c00:	2200      	movs	r2, #0
 8020c02:	701a      	strb	r2, [r3, #0]
	sourcecapa_limits(printToCOM);
 8020c04:	1dfb      	adds	r3, r7, #7
 8020c06:	781b      	ldrb	r3, [r3, #0]
 8020c08:	0018      	movs	r0, r3
 8020c0a:	f7e9 f855 	bl	8009cb8 <sourcecapa_limits>
}
 8020c0e:	46c0      	nop			; (mov r8, r8)
 8020c10:	46bd      	mov	sp, r7
 8020c12:	b002      	add	sp, #8
 8020c14:	bd80      	pop	{r7, pc}
	...

08020c18 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8020c1c:	4914      	ldr	r1, [pc, #80]	; (8020c70 <MX_USB_Device_Init+0x58>)
 8020c1e:	4b15      	ldr	r3, [pc, #84]	; (8020c74 <MX_USB_Device_Init+0x5c>)
 8020c20:	2200      	movs	r2, #0
 8020c22:	0018      	movs	r0, r3
 8020c24:	f7f8 fdd6 	bl	80197d4 <USBD_Init>
 8020c28:	1e03      	subs	r3, r0, #0
 8020c2a:	d001      	beq.n	8020c30 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8020c2c:	f7eb f894 	bl	800bd58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8020c30:	4a11      	ldr	r2, [pc, #68]	; (8020c78 <MX_USB_Device_Init+0x60>)
 8020c32:	4b10      	ldr	r3, [pc, #64]	; (8020c74 <MX_USB_Device_Init+0x5c>)
 8020c34:	0011      	movs	r1, r2
 8020c36:	0018      	movs	r0, r3
 8020c38:	f7f8 fe06 	bl	8019848 <USBD_RegisterClass>
 8020c3c:	1e03      	subs	r3, r0, #0
 8020c3e:	d001      	beq.n	8020c44 <MX_USB_Device_Init+0x2c>
    Error_Handler();
 8020c40:	f7eb f88a 	bl	800bd58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8020c44:	4a0d      	ldr	r2, [pc, #52]	; (8020c7c <MX_USB_Device_Init+0x64>)
 8020c46:	4b0b      	ldr	r3, [pc, #44]	; (8020c74 <MX_USB_Device_Init+0x5c>)
 8020c48:	0011      	movs	r1, r2
 8020c4a:	0018      	movs	r0, r3
 8020c4c:	f7f8 fce0 	bl	8019610 <USBD_CDC_RegisterInterface>
 8020c50:	1e03      	subs	r3, r0, #0
 8020c52:	d001      	beq.n	8020c58 <MX_USB_Device_Init+0x40>
    Error_Handler();
 8020c54:	f7eb f880 	bl	800bd58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8020c58:	4b06      	ldr	r3, [pc, #24]	; (8020c74 <MX_USB_Device_Init+0x5c>)
 8020c5a:	0018      	movs	r0, r3
 8020c5c:	f7f8 fe32 	bl	80198c4 <USBD_Start>
 8020c60:	1e03      	subs	r3, r0, #0
 8020c62:	d001      	beq.n	8020c68 <MX_USB_Device_Init+0x50>
    Error_Handler();
 8020c64:	f7eb f878 	bl	800bd58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8020c68:	46c0      	nop			; (mov r8, r8)
 8020c6a:	46bd      	mov	sp, r7
 8020c6c:	bd80      	pop	{r7, pc}
 8020c6e:	46c0      	nop			; (mov r8, r8)
 8020c70:	20000270 	.word	0x20000270
 8020c74:	20003460 	.word	0x20003460
 8020c78:	20000130 	.word	0x20000130
 8020c7c:	2000025c 	.word	0x2000025c

08020c80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8020c84:	4907      	ldr	r1, [pc, #28]	; (8020ca4 <CDC_Init_FS+0x24>)
 8020c86:	4b08      	ldr	r3, [pc, #32]	; (8020ca8 <CDC_Init_FS+0x28>)
 8020c88:	2200      	movs	r2, #0
 8020c8a:	0018      	movs	r0, r3
 8020c8c:	f7f8 fcda 	bl	8019644 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8020c90:	4a06      	ldr	r2, [pc, #24]	; (8020cac <CDC_Init_FS+0x2c>)
 8020c92:	4b05      	ldr	r3, [pc, #20]	; (8020ca8 <CDC_Init_FS+0x28>)
 8020c94:	0011      	movs	r1, r2
 8020c96:	0018      	movs	r0, r3
 8020c98:	f7f8 fcf7 	bl	801968a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8020c9c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8020c9e:	0018      	movs	r0, r3
 8020ca0:	46bd      	mov	sp, r7
 8020ca2:	bd80      	pop	{r7, pc}
 8020ca4:	20003f3c 	.word	0x20003f3c
 8020ca8:	20003460 	.word	0x20003460
 8020cac:	2000373c 	.word	0x2000373c

08020cb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020cb0:	b580      	push	{r7, lr}
 8020cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8020cb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8020cb6:	0018      	movs	r0, r3
 8020cb8:	46bd      	mov	sp, r7
 8020cba:	bd80      	pop	{r7, pc}

08020cbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b084      	sub	sp, #16
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6039      	str	r1, [r7, #0]
 8020cc4:	0011      	movs	r1, r2
 8020cc6:	1dfb      	adds	r3, r7, #7
 8020cc8:	1c02      	adds	r2, r0, #0
 8020cca:	701a      	strb	r2, [r3, #0]
 8020ccc:	1d3b      	adds	r3, r7, #4
 8020cce:	1c0a      	adds	r2, r1, #0
 8020cd0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8020cd2:	1dfb      	adds	r3, r7, #7
 8020cd4:	781b      	ldrb	r3, [r3, #0]
 8020cd6:	2b23      	cmp	r3, #35	; 0x23
 8020cd8:	d814      	bhi.n	8020d04 <CDC_Control_FS+0x48>
 8020cda:	009a      	lsls	r2, r3, #2
 8020cdc:	4b0c      	ldr	r3, [pc, #48]	; (8020d10 <CDC_Control_FS+0x54>)
 8020cde:	18d3      	adds	r3, r2, r3
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	469f      	mov	pc, r3
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
    	 USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 8020ce4:	683b      	ldr	r3, [r7, #0]
 8020ce6:	60fb      	str	r3, [r7, #12]
    	 uint8_t host_com_port_open = (req->wValue & 0x0001) ? 1 : 0;
 8020ce8:	68fb      	ldr	r3, [r7, #12]
 8020cea:	885b      	ldrh	r3, [r3, #2]
 8020cec:	b2da      	uxtb	r2, r3
 8020cee:	200b      	movs	r0, #11
 8020cf0:	183b      	adds	r3, r7, r0
 8020cf2:	2101      	movs	r1, #1
 8020cf4:	400a      	ands	r2, r1
 8020cf6:	701a      	strb	r2, [r3, #0]

    	 handleCOMportstatus(host_com_port_open);
 8020cf8:	183b      	adds	r3, r7, r0
 8020cfa:	781b      	ldrb	r3, [r3, #0]
 8020cfc:	0018      	movs	r0, r3
 8020cfe:	f7e7 ffef 	bl	8008ce0 <handleCOMportstatus>
    break;
 8020d02:	e000      	b.n	8020d06 <CDC_Control_FS+0x4a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8020d04:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 8020d06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8020d08:	0018      	movs	r0, r3
 8020d0a:	46bd      	mov	sp, r7
 8020d0c:	b004      	add	sp, #16
 8020d0e:	bd80      	pop	{r7, pc}
 8020d10:	0802b1b0 	.word	0x0802b1b0

08020d14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8020d14:	b590      	push	{r4, r7, lr}
 8020d16:	b085      	sub	sp, #20
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
 8020d1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8020d1e:	687a      	ldr	r2, [r7, #4]
 8020d20:	4b18      	ldr	r3, [pc, #96]	; (8020d84 <CDC_Receive_FS+0x70>)
 8020d22:	0011      	movs	r1, r2
 8020d24:	0018      	movs	r0, r3
 8020d26:	f7f8 fcb0 	bl	801968a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020d2a:	4b16      	ldr	r3, [pc, #88]	; (8020d84 <CDC_Receive_FS+0x70>)
 8020d2c:	0018      	movs	r0, r3
 8020d2e:	f7f8 fd17 	bl	8019760 <USBD_CDC_ReceivePacket>

  uint8_t* usb_buffer = getUSBbuffer();
 8020d32:	f7e7 fc39 	bl	80085a8 <getUSBbuffer>
 8020d36:	0003      	movs	r3, r0
 8020d38:	60fb      	str	r3, [r7, #12]
  memset(usb_buffer, '\0', 64);  // clear the usb_buffer
 8020d3a:	68fb      	ldr	r3, [r7, #12]
 8020d3c:	2240      	movs	r2, #64	; 0x40
 8020d3e:	2100      	movs	r1, #0
 8020d40:	0018      	movs	r0, r3
 8020d42:	f006 fe8d 	bl	8027a60 <memset>
  uint8_t len = (uint8_t)*Len;
 8020d46:	683b      	ldr	r3, [r7, #0]
 8020d48:	681a      	ldr	r2, [r3, #0]
 8020d4a:	240b      	movs	r4, #11
 8020d4c:	193b      	adds	r3, r7, r4
 8020d4e:	701a      	strb	r2, [r3, #0]
  memcpy(usb_buffer, Buf, len);  // copy received data to the usb_buffer
 8020d50:	193b      	adds	r3, r7, r4
 8020d52:	781a      	ldrb	r2, [r3, #0]
 8020d54:	6879      	ldr	r1, [r7, #4]
 8020d56:	68fb      	ldr	r3, [r7, #12]
 8020d58:	0018      	movs	r0, r3
 8020d5a:	f007 f81a 	bl	8027d92 <memcpy>

  // Add logic to process received commands based on usb_buffer content
  processUSBCommand(usb_buffer, len);
 8020d5e:	193b      	adds	r3, r7, r4
 8020d60:	781a      	ldrb	r2, [r3, #0]
 8020d62:	68fb      	ldr	r3, [r7, #12]
 8020d64:	0011      	movs	r1, r2
 8020d66:	0018      	movs	r0, r3
 8020d68:	f7e8 f87c 	bl	8008e64 <processUSBCommand>

  //Clear the Buf to avoid residual data
  memset(Buf, '\0', len);
 8020d6c:	193b      	adds	r3, r7, r4
 8020d6e:	781a      	ldrb	r2, [r3, #0]
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	2100      	movs	r1, #0
 8020d74:	0018      	movs	r0, r3
 8020d76:	f006 fe73 	bl	8027a60 <memset>
  return (USBD_OK);
 8020d7a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8020d7c:	0018      	movs	r0, r3
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	b005      	add	sp, #20
 8020d82:	bd90      	pop	{r4, r7, pc}
 8020d84:	20003460 	.word	0x20003460

08020d88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8020d88:	b5b0      	push	{r4, r5, r7, lr}
 8020d8a:	b084      	sub	sp, #16
 8020d8c:	af00      	add	r7, sp, #0
 8020d8e:	6078      	str	r0, [r7, #4]
 8020d90:	000a      	movs	r2, r1
 8020d92:	1cbb      	adds	r3, r7, #2
 8020d94:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8020d96:	230f      	movs	r3, #15
 8020d98:	18fb      	adds	r3, r7, r3
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8020d9e:	4a11      	ldr	r2, [pc, #68]	; (8020de4 <CDC_Transmit_FS+0x5c>)
 8020da0:	23af      	movs	r3, #175	; 0xaf
 8020da2:	009b      	lsls	r3, r3, #2
 8020da4:	58d3      	ldr	r3, [r2, r3]
 8020da6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8020da8:	68ba      	ldr	r2, [r7, #8]
 8020daa:	2385      	movs	r3, #133	; 0x85
 8020dac:	009b      	lsls	r3, r3, #2
 8020dae:	58d3      	ldr	r3, [r2, r3]
 8020db0:	2b00      	cmp	r3, #0
 8020db2:	d001      	beq.n	8020db8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8020db4:	2301      	movs	r3, #1
 8020db6:	e010      	b.n	8020dda <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8020db8:	1cbb      	adds	r3, r7, #2
 8020dba:	881a      	ldrh	r2, [r3, #0]
 8020dbc:	6879      	ldr	r1, [r7, #4]
 8020dbe:	4b09      	ldr	r3, [pc, #36]	; (8020de4 <CDC_Transmit_FS+0x5c>)
 8020dc0:	0018      	movs	r0, r3
 8020dc2:	f7f8 fc3f 	bl	8019644 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8020dc6:	250f      	movs	r5, #15
 8020dc8:	197c      	adds	r4, r7, r5
 8020dca:	4b06      	ldr	r3, [pc, #24]	; (8020de4 <CDC_Transmit_FS+0x5c>)
 8020dcc:	0018      	movs	r0, r3
 8020dce:	f7f8 fc79 	bl	80196c4 <USBD_CDC_TransmitPacket>
 8020dd2:	0003      	movs	r3, r0
 8020dd4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8020dd6:	197b      	adds	r3, r7, r5
 8020dd8:	781b      	ldrb	r3, [r3, #0]
}
 8020dda:	0018      	movs	r0, r3
 8020ddc:	46bd      	mov	sp, r7
 8020dde:	b004      	add	sp, #16
 8020de0:	bdb0      	pop	{r4, r5, r7, pc}
 8020de2:	46c0      	nop			; (mov r8, r8)
 8020de4:	20003460 	.word	0x20003460

08020de8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b086      	sub	sp, #24
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	60f8      	str	r0, [r7, #12]
 8020df0:	60b9      	str	r1, [r7, #8]
 8020df2:	1dfb      	adds	r3, r7, #7
 8020df4:	701a      	strb	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8020df6:	2117      	movs	r1, #23
 8020df8:	187b      	adds	r3, r7, r1
 8020dfa:	2200      	movs	r2, #0
 8020dfc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8020dfe:	187b      	adds	r3, r7, r1
 8020e00:	781b      	ldrb	r3, [r3, #0]
 8020e02:	b25b      	sxtb	r3, r3
}
 8020e04:	0018      	movs	r0, r3
 8020e06:	46bd      	mov	sp, r7
 8020e08:	b006      	add	sp, #24
 8020e0a:	bd80      	pop	{r7, pc}

08020e0c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020e0c:	b580      	push	{r7, lr}
 8020e0e:	b082      	sub	sp, #8
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	0002      	movs	r2, r0
 8020e14:	6039      	str	r1, [r7, #0]
 8020e16:	1dfb      	adds	r3, r7, #7
 8020e18:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8020e1a:	683b      	ldr	r3, [r7, #0]
 8020e1c:	2212      	movs	r2, #18
 8020e1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8020e20:	4b02      	ldr	r3, [pc, #8]	; (8020e2c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8020e22:	0018      	movs	r0, r3
 8020e24:	46bd      	mov	sp, r7
 8020e26:	b002      	add	sp, #8
 8020e28:	bd80      	pop	{r7, pc}
 8020e2a:	46c0      	nop			; (mov r8, r8)
 8020e2c:	20000290 	.word	0x20000290

08020e30 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020e30:	b580      	push	{r7, lr}
 8020e32:	b082      	sub	sp, #8
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	0002      	movs	r2, r0
 8020e38:	6039      	str	r1, [r7, #0]
 8020e3a:	1dfb      	adds	r3, r7, #7
 8020e3c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	2204      	movs	r2, #4
 8020e42:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8020e44:	4b02      	ldr	r3, [pc, #8]	; (8020e50 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8020e46:	0018      	movs	r0, r3
 8020e48:	46bd      	mov	sp, r7
 8020e4a:	b002      	add	sp, #8
 8020e4c:	bd80      	pop	{r7, pc}
 8020e4e:	46c0      	nop			; (mov r8, r8)
 8020e50:	200002a4 	.word	0x200002a4

08020e54 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020e54:	b580      	push	{r7, lr}
 8020e56:	b082      	sub	sp, #8
 8020e58:	af00      	add	r7, sp, #0
 8020e5a:	0002      	movs	r2, r0
 8020e5c:	6039      	str	r1, [r7, #0]
 8020e5e:	1dfb      	adds	r3, r7, #7
 8020e60:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8020e62:	1dfb      	adds	r3, r7, #7
 8020e64:	781b      	ldrb	r3, [r3, #0]
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d106      	bne.n	8020e78 <USBD_CDC_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8020e6a:	683a      	ldr	r2, [r7, #0]
 8020e6c:	4908      	ldr	r1, [pc, #32]	; (8020e90 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8020e6e:	4b09      	ldr	r3, [pc, #36]	; (8020e94 <USBD_CDC_ProductStrDescriptor+0x40>)
 8020e70:	0018      	movs	r0, r3
 8020e72:	f7fa f840 	bl	801aef6 <USBD_GetString>
 8020e76:	e005      	b.n	8020e84 <USBD_CDC_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8020e78:	683a      	ldr	r2, [r7, #0]
 8020e7a:	4905      	ldr	r1, [pc, #20]	; (8020e90 <USBD_CDC_ProductStrDescriptor+0x3c>)
 8020e7c:	4b05      	ldr	r3, [pc, #20]	; (8020e94 <USBD_CDC_ProductStrDescriptor+0x40>)
 8020e7e:	0018      	movs	r0, r3
 8020e80:	f7fa f839 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020e84:	4b02      	ldr	r3, [pc, #8]	; (8020e90 <USBD_CDC_ProductStrDescriptor+0x3c>)
}
 8020e86:	0018      	movs	r0, r3
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	b002      	add	sp, #8
 8020e8c:	bd80      	pop	{r7, pc}
 8020e8e:	46c0      	nop			; (mov r8, r8)
 8020e90:	2000473c 	.word	0x2000473c
 8020e94:	0802ae50 	.word	0x0802ae50

08020e98 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b082      	sub	sp, #8
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	0002      	movs	r2, r0
 8020ea0:	6039      	str	r1, [r7, #0]
 8020ea2:	1dfb      	adds	r3, r7, #7
 8020ea4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8020ea6:	683a      	ldr	r2, [r7, #0]
 8020ea8:	4904      	ldr	r1, [pc, #16]	; (8020ebc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8020eaa:	4b05      	ldr	r3, [pc, #20]	; (8020ec0 <USBD_CDC_ManufacturerStrDescriptor+0x28>)
 8020eac:	0018      	movs	r0, r3
 8020eae:	f7fa f822 	bl	801aef6 <USBD_GetString>
  return USBD_StrDesc;
 8020eb2:	4b02      	ldr	r3, [pc, #8]	; (8020ebc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
}
 8020eb4:	0018      	movs	r0, r3
 8020eb6:	46bd      	mov	sp, r7
 8020eb8:	b002      	add	sp, #8
 8020eba:	bd80      	pop	{r7, pc}
 8020ebc:	2000473c 	.word	0x2000473c
 8020ec0:	0802ae68 	.word	0x0802ae68

08020ec4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020ec4:	b580      	push	{r7, lr}
 8020ec6:	b082      	sub	sp, #8
 8020ec8:	af00      	add	r7, sp, #0
 8020eca:	0002      	movs	r2, r0
 8020ecc:	6039      	str	r1, [r7, #0]
 8020ece:	1dfb      	adds	r3, r7, #7
 8020ed0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8020ed2:	683b      	ldr	r3, [r7, #0]
 8020ed4:	221a      	movs	r2, #26
 8020ed6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8020ed8:	f000 f84c 	bl	8020f74 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8020edc:	4b02      	ldr	r3, [pc, #8]	; (8020ee8 <USBD_CDC_SerialStrDescriptor+0x24>)
}
 8020ede:	0018      	movs	r0, r3
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	b002      	add	sp, #8
 8020ee4:	bd80      	pop	{r7, pc}
 8020ee6:	46c0      	nop			; (mov r8, r8)
 8020ee8:	200002a8 	.word	0x200002a8

08020eec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020eec:	b580      	push	{r7, lr}
 8020eee:	b082      	sub	sp, #8
 8020ef0:	af00      	add	r7, sp, #0
 8020ef2:	0002      	movs	r2, r0
 8020ef4:	6039      	str	r1, [r7, #0]
 8020ef6:	1dfb      	adds	r3, r7, #7
 8020ef8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8020efa:	1dfb      	adds	r3, r7, #7
 8020efc:	781b      	ldrb	r3, [r3, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d106      	bne.n	8020f10 <USBD_CDC_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8020f02:	683a      	ldr	r2, [r7, #0]
 8020f04:	4908      	ldr	r1, [pc, #32]	; (8020f28 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8020f06:	4b09      	ldr	r3, [pc, #36]	; (8020f2c <USBD_CDC_ConfigStrDescriptor+0x40>)
 8020f08:	0018      	movs	r0, r3
 8020f0a:	f7f9 fff4 	bl	801aef6 <USBD_GetString>
 8020f0e:	e005      	b.n	8020f1c <USBD_CDC_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8020f10:	683a      	ldr	r2, [r7, #0]
 8020f12:	4905      	ldr	r1, [pc, #20]	; (8020f28 <USBD_CDC_ConfigStrDescriptor+0x3c>)
 8020f14:	4b05      	ldr	r3, [pc, #20]	; (8020f2c <USBD_CDC_ConfigStrDescriptor+0x40>)
 8020f16:	0018      	movs	r0, r3
 8020f18:	f7f9 ffed 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020f1c:	4b02      	ldr	r3, [pc, #8]	; (8020f28 <USBD_CDC_ConfigStrDescriptor+0x3c>)
}
 8020f1e:	0018      	movs	r0, r3
 8020f20:	46bd      	mov	sp, r7
 8020f22:	b002      	add	sp, #8
 8020f24:	bd80      	pop	{r7, pc}
 8020f26:	46c0      	nop			; (mov r8, r8)
 8020f28:	2000473c 	.word	0x2000473c
 8020f2c:	0802ae7c 	.word	0x0802ae7c

08020f30 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020f30:	b580      	push	{r7, lr}
 8020f32:	b082      	sub	sp, #8
 8020f34:	af00      	add	r7, sp, #0
 8020f36:	0002      	movs	r2, r0
 8020f38:	6039      	str	r1, [r7, #0]
 8020f3a:	1dfb      	adds	r3, r7, #7
 8020f3c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8020f3e:	1dfb      	adds	r3, r7, #7
 8020f40:	781b      	ldrb	r3, [r3, #0]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d106      	bne.n	8020f54 <USBD_CDC_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8020f46:	683a      	ldr	r2, [r7, #0]
 8020f48:	4908      	ldr	r1, [pc, #32]	; (8020f6c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8020f4a:	4b09      	ldr	r3, [pc, #36]	; (8020f70 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8020f4c:	0018      	movs	r0, r3
 8020f4e:	f7f9 ffd2 	bl	801aef6 <USBD_GetString>
 8020f52:	e005      	b.n	8020f60 <USBD_CDC_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8020f54:	683a      	ldr	r2, [r7, #0]
 8020f56:	4905      	ldr	r1, [pc, #20]	; (8020f6c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
 8020f58:	4b05      	ldr	r3, [pc, #20]	; (8020f70 <USBD_CDC_InterfaceStrDescriptor+0x40>)
 8020f5a:	0018      	movs	r0, r3
 8020f5c:	f7f9 ffcb 	bl	801aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020f60:	4b02      	ldr	r3, [pc, #8]	; (8020f6c <USBD_CDC_InterfaceStrDescriptor+0x3c>)
}
 8020f62:	0018      	movs	r0, r3
 8020f64:	46bd      	mov	sp, r7
 8020f66:	b002      	add	sp, #8
 8020f68:	bd80      	pop	{r7, pc}
 8020f6a:	46c0      	nop			; (mov r8, r8)
 8020f6c:	2000473c 	.word	0x2000473c
 8020f70:	0802ae88 	.word	0x0802ae88

08020f74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b084      	sub	sp, #16
 8020f78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8020f7a:	4b10      	ldr	r3, [pc, #64]	; (8020fbc <Get_SerialNum+0x48>)
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020f80:	4b0f      	ldr	r3, [pc, #60]	; (8020fc0 <Get_SerialNum+0x4c>)
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020f86:	4b0f      	ldr	r3, [pc, #60]	; (8020fc4 <Get_SerialNum+0x50>)
 8020f88:	681b      	ldr	r3, [r3, #0]
 8020f8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8020f8c:	68fa      	ldr	r2, [r7, #12]
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	18d3      	adds	r3, r2, r3
 8020f92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8020f94:	68fb      	ldr	r3, [r7, #12]
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d00b      	beq.n	8020fb2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8020f9a:	490b      	ldr	r1, [pc, #44]	; (8020fc8 <Get_SerialNum+0x54>)
 8020f9c:	68fb      	ldr	r3, [r7, #12]
 8020f9e:	2208      	movs	r2, #8
 8020fa0:	0018      	movs	r0, r3
 8020fa2:	f000 f815 	bl	8020fd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8020fa6:	4909      	ldr	r1, [pc, #36]	; (8020fcc <Get_SerialNum+0x58>)
 8020fa8:	68bb      	ldr	r3, [r7, #8]
 8020faa:	2204      	movs	r2, #4
 8020fac:	0018      	movs	r0, r3
 8020fae:	f000 f80f 	bl	8020fd0 <IntToUnicode>
  }
}
 8020fb2:	46c0      	nop			; (mov r8, r8)
 8020fb4:	46bd      	mov	sp, r7
 8020fb6:	b004      	add	sp, #16
 8020fb8:	bd80      	pop	{r7, pc}
 8020fba:	46c0      	nop			; (mov r8, r8)
 8020fbc:	1fff7590 	.word	0x1fff7590
 8020fc0:	1fff7594 	.word	0x1fff7594
 8020fc4:	1fff7598 	.word	0x1fff7598
 8020fc8:	200002aa 	.word	0x200002aa
 8020fcc:	200002ba 	.word	0x200002ba

08020fd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8020fd0:	b580      	push	{r7, lr}
 8020fd2:	b086      	sub	sp, #24
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	60f8      	str	r0, [r7, #12]
 8020fd8:	60b9      	str	r1, [r7, #8]
 8020fda:	1dfb      	adds	r3, r7, #7
 8020fdc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8020fde:	2117      	movs	r1, #23
 8020fe0:	187b      	adds	r3, r7, r1
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8020fe6:	187b      	adds	r3, r7, r1
 8020fe8:	2200      	movs	r2, #0
 8020fea:	701a      	strb	r2, [r3, #0]
 8020fec:	e02f      	b.n	802104e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	0f1b      	lsrs	r3, r3, #28
 8020ff2:	2b09      	cmp	r3, #9
 8020ff4:	d80d      	bhi.n	8021012 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	0f1b      	lsrs	r3, r3, #28
 8020ffa:	b2da      	uxtb	r2, r3
 8020ffc:	2317      	movs	r3, #23
 8020ffe:	18fb      	adds	r3, r7, r3
 8021000:	781b      	ldrb	r3, [r3, #0]
 8021002:	005b      	lsls	r3, r3, #1
 8021004:	0019      	movs	r1, r3
 8021006:	68bb      	ldr	r3, [r7, #8]
 8021008:	185b      	adds	r3, r3, r1
 802100a:	3230      	adds	r2, #48	; 0x30
 802100c:	b2d2      	uxtb	r2, r2
 802100e:	701a      	strb	r2, [r3, #0]
 8021010:	e00c      	b.n	802102c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021012:	68fb      	ldr	r3, [r7, #12]
 8021014:	0f1b      	lsrs	r3, r3, #28
 8021016:	b2da      	uxtb	r2, r3
 8021018:	2317      	movs	r3, #23
 802101a:	18fb      	adds	r3, r7, r3
 802101c:	781b      	ldrb	r3, [r3, #0]
 802101e:	005b      	lsls	r3, r3, #1
 8021020:	0019      	movs	r1, r3
 8021022:	68bb      	ldr	r3, [r7, #8]
 8021024:	185b      	adds	r3, r3, r1
 8021026:	3237      	adds	r2, #55	; 0x37
 8021028:	b2d2      	uxtb	r2, r2
 802102a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802102c:	68fb      	ldr	r3, [r7, #12]
 802102e:	011b      	lsls	r3, r3, #4
 8021030:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8021032:	2117      	movs	r1, #23
 8021034:	187b      	adds	r3, r7, r1
 8021036:	781b      	ldrb	r3, [r3, #0]
 8021038:	005b      	lsls	r3, r3, #1
 802103a:	3301      	adds	r3, #1
 802103c:	68ba      	ldr	r2, [r7, #8]
 802103e:	18d3      	adds	r3, r2, r3
 8021040:	2200      	movs	r2, #0
 8021042:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8021044:	187b      	adds	r3, r7, r1
 8021046:	781a      	ldrb	r2, [r3, #0]
 8021048:	187b      	adds	r3, r7, r1
 802104a:	3201      	adds	r2, #1
 802104c:	701a      	strb	r2, [r3, #0]
 802104e:	2317      	movs	r3, #23
 8021050:	18fa      	adds	r2, r7, r3
 8021052:	1dfb      	adds	r3, r7, #7
 8021054:	7812      	ldrb	r2, [r2, #0]
 8021056:	781b      	ldrb	r3, [r3, #0]
 8021058:	429a      	cmp	r2, r3
 802105a:	d3c8      	bcc.n	8020fee <IntToUnicode+0x1e>
  }
}
 802105c:	46c0      	nop			; (mov r8, r8)
 802105e:	46c0      	nop			; (mov r8, r8)
 8021060:	46bd      	mov	sp, r7
 8021062:	b006      	add	sp, #24
 8021064:	bd80      	pop	{r7, pc}
	...

08021068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8021068:	b590      	push	{r4, r7, lr}
 802106a:	b099      	sub	sp, #100	; 0x64
 802106c:	af00      	add	r7, sp, #0
 802106e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8021070:	2414      	movs	r4, #20
 8021072:	193b      	adds	r3, r7, r4
 8021074:	0018      	movs	r0, r3
 8021076:	234c      	movs	r3, #76	; 0x4c
 8021078:	001a      	movs	r2, r3
 802107a:	2100      	movs	r1, #0
 802107c:	f006 fcf0 	bl	8027a60 <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	681b      	ldr	r3, [r3, #0]
 8021084:	4a25      	ldr	r2, [pc, #148]	; (802111c <HAL_PCD_MspInit+0xb4>)
 8021086:	4293      	cmp	r3, r2
 8021088:	d143      	bne.n	8021112 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 802108a:	193b      	adds	r3, r7, r4
 802108c:	2280      	movs	r2, #128	; 0x80
 802108e:	0452      	lsls	r2, r2, #17
 8021090:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8021092:	193b      	adds	r3, r7, r4
 8021094:	2200      	movs	r2, #0
 8021096:	645a      	str	r2, [r3, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8021098:	193b      	adds	r3, r7, r4
 802109a:	0018      	movs	r0, r3
 802109c:	f7f0 fca0 	bl	80119e0 <HAL_RCCEx_PeriphCLKConfig>
 80210a0:	1e03      	subs	r3, r0, #0
 80210a2:	d001      	beq.n	80210a8 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80210a4:	f7ea fe58 	bl	800bd58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80210a8:	4b1d      	ldr	r3, [pc, #116]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210ac:	4b1c      	ldr	r3, [pc, #112]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210ae:	2180      	movs	r1, #128	; 0x80
 80210b0:	0189      	lsls	r1, r1, #6
 80210b2:	430a      	orrs	r2, r1
 80210b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80210b6:	4b1a      	ldr	r3, [pc, #104]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210ba:	2380      	movs	r3, #128	; 0x80
 80210bc:	019b      	lsls	r3, r3, #6
 80210be:	4013      	ands	r3, r2
 80210c0:	613b      	str	r3, [r7, #16]
 80210c2:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80210c4:	4b16      	ldr	r3, [pc, #88]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210c8:	2380      	movs	r3, #128	; 0x80
 80210ca:	055b      	lsls	r3, r3, #21
 80210cc:	4013      	ands	r3, r2
 80210ce:	d116      	bne.n	80210fe <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80210d0:	4b13      	ldr	r3, [pc, #76]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210d4:	4b12      	ldr	r3, [pc, #72]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210d6:	2180      	movs	r1, #128	; 0x80
 80210d8:	0549      	lsls	r1, r1, #21
 80210da:	430a      	orrs	r2, r1
 80210dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80210de:	4b10      	ldr	r3, [pc, #64]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210e2:	2380      	movs	r3, #128	; 0x80
 80210e4:	055b      	lsls	r3, r3, #21
 80210e6:	4013      	ands	r3, r2
 80210e8:	60fb      	str	r3, [r7, #12]
 80210ea:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80210ec:	f7ef feec 	bl	8010ec8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80210f0:	4b0b      	ldr	r3, [pc, #44]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80210f4:	4b0a      	ldr	r3, [pc, #40]	; (8021120 <HAL_PCD_MspInit+0xb8>)
 80210f6:	490b      	ldr	r1, [pc, #44]	; (8021124 <HAL_PCD_MspInit+0xbc>)
 80210f8:	400a      	ands	r2, r1
 80210fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80210fc:	e001      	b.n	8021102 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80210fe:	f7ef fee3 	bl	8010ec8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 3, 0);
 8021102:	2200      	movs	r2, #0
 8021104:	2103      	movs	r1, #3
 8021106:	2008      	movs	r0, #8
 8021108:	f7ed f8e2 	bl	800e2d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 802110c:	2008      	movs	r0, #8
 802110e:	f7ed f8f4 	bl	800e2fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8021112:	46c0      	nop			; (mov r8, r8)
 8021114:	46bd      	mov	sp, r7
 8021116:	b019      	add	sp, #100	; 0x64
 8021118:	bd90      	pop	{r4, r7, pc}
 802111a:	46c0      	nop			; (mov r8, r8)
 802111c:	40005c00 	.word	0x40005c00
 8021120:	40021000 	.word	0x40021000
 8021124:	efffffff 	.word	0xefffffff

08021128 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021128:	b580      	push	{r7, lr}
 802112a:	b082      	sub	sp, #8
 802112c:	af00      	add	r7, sp, #0
 802112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021130:	687a      	ldr	r2, [r7, #4]
 8021132:	23b7      	movs	r3, #183	; 0xb7
 8021134:	009b      	lsls	r3, r3, #2
 8021136:	58d2      	ldr	r2, [r2, r3]
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	21a7      	movs	r1, #167	; 0xa7
 802113c:	0089      	lsls	r1, r1, #2
 802113e:	468c      	mov	ip, r1
 8021140:	4463      	add	r3, ip
 8021142:	0019      	movs	r1, r3
 8021144:	0010      	movs	r0, r2
 8021146:	f7f8 fc19 	bl	801997c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 802114a:	46c0      	nop			; (mov r8, r8)
 802114c:	46bd      	mov	sp, r7
 802114e:	b002      	add	sp, #8
 8021150:	bd80      	pop	{r7, pc}

08021152 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021152:	b590      	push	{r4, r7, lr}
 8021154:	b083      	sub	sp, #12
 8021156:	af00      	add	r7, sp, #0
 8021158:	6078      	str	r0, [r7, #4]
 802115a:	000a      	movs	r2, r1
 802115c:	1cfb      	adds	r3, r7, #3
 802115e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021160:	687a      	ldr	r2, [r7, #4]
 8021162:	23b7      	movs	r3, #183	; 0xb7
 8021164:	009b      	lsls	r3, r3, #2
 8021166:	58d4      	ldr	r4, [r2, r3]
 8021168:	1cfb      	adds	r3, r7, #3
 802116a:	781a      	ldrb	r2, [r3, #0]
 802116c:	6878      	ldr	r0, [r7, #4]
 802116e:	23b4      	movs	r3, #180	; 0xb4
 8021170:	0059      	lsls	r1, r3, #1
 8021172:	0013      	movs	r3, r2
 8021174:	009b      	lsls	r3, r3, #2
 8021176:	189b      	adds	r3, r3, r2
 8021178:	00db      	lsls	r3, r3, #3
 802117a:	18c3      	adds	r3, r0, r3
 802117c:	185b      	adds	r3, r3, r1
 802117e:	681a      	ldr	r2, [r3, #0]
 8021180:	1cfb      	adds	r3, r7, #3
 8021182:	781b      	ldrb	r3, [r3, #0]
 8021184:	0019      	movs	r1, r3
 8021186:	0020      	movs	r0, r4
 8021188:	f7f8 fc62 	bl	8019a50 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 802118c:	46c0      	nop			; (mov r8, r8)
 802118e:	46bd      	mov	sp, r7
 8021190:	b003      	add	sp, #12
 8021192:	bd90      	pop	{r4, r7, pc}

08021194 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021194:	b580      	push	{r7, lr}
 8021196:	b082      	sub	sp, #8
 8021198:	af00      	add	r7, sp, #0
 802119a:	6078      	str	r0, [r7, #4]
 802119c:	000a      	movs	r2, r1
 802119e:	1cfb      	adds	r3, r7, #3
 80211a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80211a2:	687a      	ldr	r2, [r7, #4]
 80211a4:	23b7      	movs	r3, #183	; 0xb7
 80211a6:	009b      	lsls	r3, r3, #2
 80211a8:	58d0      	ldr	r0, [r2, r3]
 80211aa:	1cfb      	adds	r3, r7, #3
 80211ac:	781a      	ldrb	r2, [r3, #0]
 80211ae:	6879      	ldr	r1, [r7, #4]
 80211b0:	0013      	movs	r3, r2
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	189b      	adds	r3, r3, r2
 80211b6:	00db      	lsls	r3, r3, #3
 80211b8:	18cb      	adds	r3, r1, r3
 80211ba:	3328      	adds	r3, #40	; 0x28
 80211bc:	681a      	ldr	r2, [r3, #0]
 80211be:	1cfb      	adds	r3, r7, #3
 80211c0:	781b      	ldrb	r3, [r3, #0]
 80211c2:	0019      	movs	r1, r3
 80211c4:	f7f8 fd2c 	bl	8019c20 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80211c8:	46c0      	nop			; (mov r8, r8)
 80211ca:	46bd      	mov	sp, r7
 80211cc:	b002      	add	sp, #8
 80211ce:	bd80      	pop	{r7, pc}

080211d0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80211d0:	b580      	push	{r7, lr}
 80211d2:	b082      	sub	sp, #8
 80211d4:	af00      	add	r7, sp, #0
 80211d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80211d8:	687a      	ldr	r2, [r7, #4]
 80211da:	23b7      	movs	r3, #183	; 0xb7
 80211dc:	009b      	lsls	r3, r3, #2
 80211de:	58d3      	ldr	r3, [r2, r3]
 80211e0:	0018      	movs	r0, r3
 80211e2:	f7f8 fe97 	bl	8019f14 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80211e6:	46c0      	nop			; (mov r8, r8)
 80211e8:	46bd      	mov	sp, r7
 80211ea:	b002      	add	sp, #8
 80211ec:	bd80      	pop	{r7, pc}

080211ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80211ee:	b580      	push	{r7, lr}
 80211f0:	b084      	sub	sp, #16
 80211f2:	af00      	add	r7, sp, #0
 80211f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80211f6:	230f      	movs	r3, #15
 80211f8:	18fb      	adds	r3, r7, r3
 80211fa:	2201      	movs	r2, #1
 80211fc:	701a      	strb	r2, [r3, #0]
  if (hpcd->Init.speed != USBD_FS_SPEED)
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	79db      	ldrb	r3, [r3, #7]
 8021202:	2b02      	cmp	r3, #2
 8021204:	d001      	beq.n	802120a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8021206:	f7ea fda7 	bl	800bd58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802120a:	687a      	ldr	r2, [r7, #4]
 802120c:	23b7      	movs	r3, #183	; 0xb7
 802120e:	009b      	lsls	r3, r3, #2
 8021210:	58d2      	ldr	r2, [r2, r3]
 8021212:	230f      	movs	r3, #15
 8021214:	18fb      	adds	r3, r7, r3
 8021216:	781b      	ldrb	r3, [r3, #0]
 8021218:	0019      	movs	r1, r3
 802121a:	0010      	movs	r0, r2
 802121c:	f7f8 fe37 	bl	8019e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021220:	687a      	ldr	r2, [r7, #4]
 8021222:	23b7      	movs	r3, #183	; 0xb7
 8021224:	009b      	lsls	r3, r3, #2
 8021226:	58d3      	ldr	r3, [r2, r3]
 8021228:	0018      	movs	r0, r3
 802122a:	f7f8 fdd1 	bl	8019dd0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 802122e:	46c0      	nop			; (mov r8, r8)
 8021230:	46bd      	mov	sp, r7
 8021232:	b004      	add	sp, #16
 8021234:	bd80      	pop	{r7, pc}
	...

08021238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021238:	b580      	push	{r7, lr}
 802123a:	b082      	sub	sp, #8
 802123c:	af00      	add	r7, sp, #0
 802123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
 /* __HAL_PCD_GATE_PHYCLOCK(hpcd);*/
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021240:	687a      	ldr	r2, [r7, #4]
 8021242:	23b7      	movs	r3, #183	; 0xb7
 8021244:	009b      	lsls	r3, r3, #2
 8021246:	58d3      	ldr	r3, [r2, r3]
 8021248:	0018      	movs	r0, r3
 802124a:	f7f8 fe31 	bl	8019eb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	7adb      	ldrb	r3, [r3, #11]
 8021252:	2b00      	cmp	r3, #0
 8021254:	d005      	beq.n	8021262 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021256:	4b05      	ldr	r3, [pc, #20]	; (802126c <HAL_PCD_SuspendCallback+0x34>)
 8021258:	691a      	ldr	r2, [r3, #16]
 802125a:	4b04      	ldr	r3, [pc, #16]	; (802126c <HAL_PCD_SuspendCallback+0x34>)
 802125c:	2106      	movs	r1, #6
 802125e:	430a      	orrs	r2, r1
 8021260:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8021262:	46c0      	nop			; (mov r8, r8)
 8021264:	46bd      	mov	sp, r7
 8021266:	b002      	add	sp, #8
 8021268:	bd80      	pop	{r7, pc}
 802126a:	46c0      	nop			; (mov r8, r8)
 802126c:	e000ed00 	.word	0xe000ed00

08021270 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021270:	b580      	push	{r7, lr}
 8021272:	b082      	sub	sp, #8
 8021274:	af00      	add	r7, sp, #0
 8021276:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */
 /* __HAL_PCD_UNGATE_PHYCLOCK(hpcd);*/

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	7adb      	ldrb	r3, [r3, #11]
 802127c:	2b00      	cmp	r3, #0
 802127e:	d007      	beq.n	8021290 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021280:	4b09      	ldr	r3, [pc, #36]	; (80212a8 <HAL_PCD_ResumeCallback+0x38>)
 8021282:	691a      	ldr	r2, [r3, #16]
 8021284:	4b08      	ldr	r3, [pc, #32]	; (80212a8 <HAL_PCD_ResumeCallback+0x38>)
 8021286:	2106      	movs	r1, #6
 8021288:	438a      	bics	r2, r1
 802128a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 802128c:	f000 fa7c 	bl	8021788 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8021290:	687a      	ldr	r2, [r7, #4]
 8021292:	23b7      	movs	r3, #183	; 0xb7
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	58d3      	ldr	r3, [r2, r3]
 8021298:	0018      	movs	r0, r3
 802129a:	f7f8 fe21 	bl	8019ee0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 802129e:	46c0      	nop			; (mov r8, r8)
 80212a0:	46bd      	mov	sp, r7
 80212a2:	b002      	add	sp, #8
 80212a4:	bd80      	pop	{r7, pc}
 80212a6:	46c0      	nop			; (mov r8, r8)
 80212a8:	e000ed00 	.word	0xe000ed00

080212ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80212ac:	b580      	push	{r7, lr}
 80212ae:	b082      	sub	sp, #8
 80212b0:	af00      	add	r7, sp, #0
 80212b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_DRD_FS.pData = pdev;
 80212b4:	4a34      	ldr	r2, [pc, #208]	; (8021388 <USBD_LL_Init+0xdc>)
 80212b6:	23b7      	movs	r3, #183	; 0xb7
 80212b8:	009b      	lsls	r3, r3, #2
 80212ba:	6879      	ldr	r1, [r7, #4]
 80212bc:	50d1      	str	r1, [r2, r3]
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_DRD_FS;
 80212be:	687a      	ldr	r2, [r7, #4]
 80212c0:	23b2      	movs	r3, #178	; 0xb2
 80212c2:	009b      	lsls	r3, r3, #2
 80212c4:	4930      	ldr	r1, [pc, #192]	; (8021388 <USBD_LL_Init+0xdc>)
 80212c6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80212c8:	4b2f      	ldr	r3, [pc, #188]	; (8021388 <USBD_LL_Init+0xdc>)
 80212ca:	4a30      	ldr	r2, [pc, #192]	; (802138c <USBD_LL_Init+0xe0>)
 80212cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80212ce:	4b2e      	ldr	r3, [pc, #184]	; (8021388 <USBD_LL_Init+0xdc>)
 80212d0:	2208      	movs	r2, #8
 80212d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 80212d4:	4b2c      	ldr	r3, [pc, #176]	; (8021388 <USBD_LL_Init+0xdc>)
 80212d6:	2208      	movs	r2, #8
 80212d8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 80212da:	4b2b      	ldr	r3, [pc, #172]	; (8021388 <USBD_LL_Init+0xdc>)
 80212dc:	2202      	movs	r2, #2
 80212de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80212e0:	4b29      	ldr	r3, [pc, #164]	; (8021388 <USBD_LL_Init+0xdc>)
 80212e2:	2202      	movs	r2, #2
 80212e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80212e6:	4b28      	ldr	r3, [pc, #160]	; (8021388 <USBD_LL_Init+0xdc>)
 80212e8:	2200      	movs	r2, #0
 80212ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80212ec:	4b26      	ldr	r3, [pc, #152]	; (8021388 <USBD_LL_Init+0xdc>)
 80212ee:	2200      	movs	r2, #0
 80212f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80212f2:	4b25      	ldr	r3, [pc, #148]	; (8021388 <USBD_LL_Init+0xdc>)
 80212f4:	2200      	movs	r2, #0
 80212f6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80212f8:	4b23      	ldr	r3, [pc, #140]	; (8021388 <USBD_LL_Init+0xdc>)
 80212fa:	2200      	movs	r2, #0
 80212fc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80212fe:	4b22      	ldr	r3, [pc, #136]	; (8021388 <USBD_LL_Init+0xdc>)
 8021300:	2200      	movs	r2, #0
 8021302:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8021304:	4b20      	ldr	r3, [pc, #128]	; (8021388 <USBD_LL_Init+0xdc>)
 8021306:	2200      	movs	r2, #0
 8021308:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 802130a:	4b1f      	ldr	r3, [pc, #124]	; (8021388 <USBD_LL_Init+0xdc>)
 802130c:	2200      	movs	r2, #0
 802130e:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8021310:	4b1d      	ldr	r3, [pc, #116]	; (8021388 <USBD_LL_Init+0xdc>)
 8021312:	0018      	movs	r0, r3
 8021314:	f7ee f8c8 	bl	800f4a8 <HAL_PCD_Init>
 8021318:	1e03      	subs	r3, r0, #0
 802131a:	d001      	beq.n	8021320 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 802131c:	f7ea fd1c 	bl	800bd58 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8021320:	687a      	ldr	r2, [r7, #4]
 8021322:	23b2      	movs	r3, #178	; 0xb2
 8021324:	009b      	lsls	r3, r3, #2
 8021326:	58d0      	ldr	r0, [r2, r3]
 8021328:	2318      	movs	r3, #24
 802132a:	2200      	movs	r2, #0
 802132c:	2100      	movs	r1, #0
 802132e:	f7ef fd59 	bl	8010de4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8021332:	687a      	ldr	r2, [r7, #4]
 8021334:	23b2      	movs	r3, #178	; 0xb2
 8021336:	009b      	lsls	r3, r3, #2
 8021338:	58d0      	ldr	r0, [r2, r3]
 802133a:	2358      	movs	r3, #88	; 0x58
 802133c:	2200      	movs	r2, #0
 802133e:	2180      	movs	r1, #128	; 0x80
 8021340:	f7ef fd50 	bl	8010de4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8021344:	687a      	ldr	r2, [r7, #4]
 8021346:	23b2      	movs	r3, #178	; 0xb2
 8021348:	009b      	lsls	r3, r3, #2
 802134a:	58d0      	ldr	r0, [r2, r3]
 802134c:	23c0      	movs	r3, #192	; 0xc0
 802134e:	2200      	movs	r2, #0
 8021350:	2181      	movs	r1, #129	; 0x81
 8021352:	f7ef fd47 	bl	8010de4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8021356:	687a      	ldr	r2, [r7, #4]
 8021358:	23b2      	movs	r3, #178	; 0xb2
 802135a:	009b      	lsls	r3, r3, #2
 802135c:	58d0      	ldr	r0, [r2, r3]
 802135e:	2388      	movs	r3, #136	; 0x88
 8021360:	005b      	lsls	r3, r3, #1
 8021362:	2200      	movs	r2, #0
 8021364:	2101      	movs	r1, #1
 8021366:	f7ef fd3d 	bl	8010de4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 802136a:	687a      	ldr	r2, [r7, #4]
 802136c:	23b2      	movs	r3, #178	; 0xb2
 802136e:	009b      	lsls	r3, r3, #2
 8021370:	58d0      	ldr	r0, [r2, r3]
 8021372:	2380      	movs	r3, #128	; 0x80
 8021374:	005b      	lsls	r3, r3, #1
 8021376:	2200      	movs	r2, #0
 8021378:	2182      	movs	r1, #130	; 0x82
 802137a:	f7ef fd33 	bl	8010de4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */

  return USBD_OK;
 802137e:	2300      	movs	r3, #0
}
 8021380:	0018      	movs	r0, r3
 8021382:	46bd      	mov	sp, r7
 8021384:	b002      	add	sp, #8
 8021386:	bd80      	pop	{r7, pc}
 8021388:	2000493c 	.word	0x2000493c
 802138c:	40005c00 	.word	0x40005c00

08021390 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8021390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021392:	b085      	sub	sp, #20
 8021394:	af00      	add	r7, sp, #0
 8021396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021398:	210f      	movs	r1, #15
 802139a:	187b      	adds	r3, r7, r1
 802139c:	2200      	movs	r2, #0
 802139e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80213a0:	260e      	movs	r6, #14
 80213a2:	19bb      	adds	r3, r7, r6
 80213a4:	2200      	movs	r2, #0
 80213a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80213a8:	687a      	ldr	r2, [r7, #4]
 80213aa:	23b2      	movs	r3, #178	; 0xb2
 80213ac:	009b      	lsls	r3, r3, #2
 80213ae:	58d3      	ldr	r3, [r2, r3]
 80213b0:	000d      	movs	r5, r1
 80213b2:	187c      	adds	r4, r7, r1
 80213b4:	0018      	movs	r0, r3
 80213b6:	f7ee f971 	bl	800f69c <HAL_PCD_Start>
 80213ba:	0003      	movs	r3, r0
 80213bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80213be:	19bc      	adds	r4, r7, r6
 80213c0:	197b      	adds	r3, r7, r5
 80213c2:	781b      	ldrb	r3, [r3, #0]
 80213c4:	0018      	movs	r0, r3
 80213c6:	f000 f9e6 	bl	8021796 <USBD_Get_USB_Status>
 80213ca:	0003      	movs	r3, r0
 80213cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80213ce:	19bb      	adds	r3, r7, r6
 80213d0:	781b      	ldrb	r3, [r3, #0]
}
 80213d2:	0018      	movs	r0, r3
 80213d4:	46bd      	mov	sp, r7
 80213d6:	b005      	add	sp, #20
 80213d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080213da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80213da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213dc:	b085      	sub	sp, #20
 80213de:	af00      	add	r7, sp, #0
 80213e0:	6078      	str	r0, [r7, #4]
 80213e2:	000c      	movs	r4, r1
 80213e4:	0010      	movs	r0, r2
 80213e6:	0019      	movs	r1, r3
 80213e8:	1cfb      	adds	r3, r7, #3
 80213ea:	1c22      	adds	r2, r4, #0
 80213ec:	701a      	strb	r2, [r3, #0]
 80213ee:	1cbb      	adds	r3, r7, #2
 80213f0:	1c02      	adds	r2, r0, #0
 80213f2:	701a      	strb	r2, [r3, #0]
 80213f4:	003b      	movs	r3, r7
 80213f6:	1c0a      	adds	r2, r1, #0
 80213f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80213fa:	260f      	movs	r6, #15
 80213fc:	19bb      	adds	r3, r7, r6
 80213fe:	2200      	movs	r2, #0
 8021400:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8021402:	250e      	movs	r5, #14
 8021404:	197b      	adds	r3, r7, r5
 8021406:	2200      	movs	r2, #0
 8021408:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802140a:	687a      	ldr	r2, [r7, #4]
 802140c:	23b2      	movs	r3, #178	; 0xb2
 802140e:	009b      	lsls	r3, r3, #2
 8021410:	58d0      	ldr	r0, [r2, r3]
 8021412:	19bc      	adds	r4, r7, r6
 8021414:	1cbb      	adds	r3, r7, #2
 8021416:	781d      	ldrb	r5, [r3, #0]
 8021418:	003b      	movs	r3, r7
 802141a:	881a      	ldrh	r2, [r3, #0]
 802141c:	1cfb      	adds	r3, r7, #3
 802141e:	7819      	ldrb	r1, [r3, #0]
 8021420:	002b      	movs	r3, r5
 8021422:	f7ee faa1 	bl	800f968 <HAL_PCD_EP_Open>
 8021426:	0003      	movs	r3, r0
 8021428:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802142a:	250e      	movs	r5, #14
 802142c:	197c      	adds	r4, r7, r5
 802142e:	19bb      	adds	r3, r7, r6
 8021430:	781b      	ldrb	r3, [r3, #0]
 8021432:	0018      	movs	r0, r3
 8021434:	f000 f9af 	bl	8021796 <USBD_Get_USB_Status>
 8021438:	0003      	movs	r3, r0
 802143a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802143c:	197b      	adds	r3, r7, r5
 802143e:	781b      	ldrb	r3, [r3, #0]
}
 8021440:	0018      	movs	r0, r3
 8021442:	46bd      	mov	sp, r7
 8021444:	b005      	add	sp, #20
 8021446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021448 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8021448:	b5f0      	push	{r4, r5, r6, r7, lr}
 802144a:	b085      	sub	sp, #20
 802144c:	af00      	add	r7, sp, #0
 802144e:	6078      	str	r0, [r7, #4]
 8021450:	000a      	movs	r2, r1
 8021452:	1cfb      	adds	r3, r7, #3
 8021454:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021456:	210f      	movs	r1, #15
 8021458:	187b      	adds	r3, r7, r1
 802145a:	2200      	movs	r2, #0
 802145c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802145e:	260e      	movs	r6, #14
 8021460:	19bb      	adds	r3, r7, r6
 8021462:	2200      	movs	r2, #0
 8021464:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021466:	687a      	ldr	r2, [r7, #4]
 8021468:	23b2      	movs	r3, #178	; 0xb2
 802146a:	009b      	lsls	r3, r3, #2
 802146c:	58d2      	ldr	r2, [r2, r3]
 802146e:	000d      	movs	r5, r1
 8021470:	187c      	adds	r4, r7, r1
 8021472:	1cfb      	adds	r3, r7, #3
 8021474:	781b      	ldrb	r3, [r3, #0]
 8021476:	0019      	movs	r1, r3
 8021478:	0010      	movs	r0, r2
 802147a:	f7ee fae6 	bl	800fa4a <HAL_PCD_EP_Close>
 802147e:	0003      	movs	r3, r0
 8021480:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021482:	19bc      	adds	r4, r7, r6
 8021484:	197b      	adds	r3, r7, r5
 8021486:	781b      	ldrb	r3, [r3, #0]
 8021488:	0018      	movs	r0, r3
 802148a:	f000 f984 	bl	8021796 <USBD_Get_USB_Status>
 802148e:	0003      	movs	r3, r0
 8021490:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021492:	19bb      	adds	r3, r7, r6
 8021494:	781b      	ldrb	r3, [r3, #0]
}
 8021496:	0018      	movs	r0, r3
 8021498:	46bd      	mov	sp, r7
 802149a:	b005      	add	sp, #20
 802149c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802149e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802149e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214a0:	b085      	sub	sp, #20
 80214a2:	af00      	add	r7, sp, #0
 80214a4:	6078      	str	r0, [r7, #4]
 80214a6:	000a      	movs	r2, r1
 80214a8:	1cfb      	adds	r3, r7, #3
 80214aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80214ac:	210f      	movs	r1, #15
 80214ae:	187b      	adds	r3, r7, r1
 80214b0:	2200      	movs	r2, #0
 80214b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80214b4:	260e      	movs	r6, #14
 80214b6:	19bb      	adds	r3, r7, r6
 80214b8:	2200      	movs	r2, #0
 80214ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80214bc:	687a      	ldr	r2, [r7, #4]
 80214be:	23b2      	movs	r3, #178	; 0xb2
 80214c0:	009b      	lsls	r3, r3, #2
 80214c2:	58d2      	ldr	r2, [r2, r3]
 80214c4:	000d      	movs	r5, r1
 80214c6:	187c      	adds	r4, r7, r1
 80214c8:	1cfb      	adds	r3, r7, #3
 80214ca:	781b      	ldrb	r3, [r3, #0]
 80214cc:	0019      	movs	r1, r3
 80214ce:	0010      	movs	r0, r2
 80214d0:	f7ee fb9c 	bl	800fc0c <HAL_PCD_EP_SetStall>
 80214d4:	0003      	movs	r3, r0
 80214d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80214d8:	19bc      	adds	r4, r7, r6
 80214da:	197b      	adds	r3, r7, r5
 80214dc:	781b      	ldrb	r3, [r3, #0]
 80214de:	0018      	movs	r0, r3
 80214e0:	f000 f959 	bl	8021796 <USBD_Get_USB_Status>
 80214e4:	0003      	movs	r3, r0
 80214e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80214e8:	19bb      	adds	r3, r7, r6
 80214ea:	781b      	ldrb	r3, [r3, #0]
}
 80214ec:	0018      	movs	r0, r3
 80214ee:	46bd      	mov	sp, r7
 80214f0:	b005      	add	sp, #20
 80214f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080214f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80214f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214f6:	b085      	sub	sp, #20
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
 80214fc:	000a      	movs	r2, r1
 80214fe:	1cfb      	adds	r3, r7, #3
 8021500:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021502:	210f      	movs	r1, #15
 8021504:	187b      	adds	r3, r7, r1
 8021506:	2200      	movs	r2, #0
 8021508:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802150a:	260e      	movs	r6, #14
 802150c:	19bb      	adds	r3, r7, r6
 802150e:	2200      	movs	r2, #0
 8021510:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021512:	687a      	ldr	r2, [r7, #4]
 8021514:	23b2      	movs	r3, #178	; 0xb2
 8021516:	009b      	lsls	r3, r3, #2
 8021518:	58d2      	ldr	r2, [r2, r3]
 802151a:	000d      	movs	r5, r1
 802151c:	187c      	adds	r4, r7, r1
 802151e:	1cfb      	adds	r3, r7, #3
 8021520:	781b      	ldrb	r3, [r3, #0]
 8021522:	0019      	movs	r1, r3
 8021524:	0010      	movs	r0, r2
 8021526:	f7ee fbcf 	bl	800fcc8 <HAL_PCD_EP_ClrStall>
 802152a:	0003      	movs	r3, r0
 802152c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802152e:	19bc      	adds	r4, r7, r6
 8021530:	197b      	adds	r3, r7, r5
 8021532:	781b      	ldrb	r3, [r3, #0]
 8021534:	0018      	movs	r0, r3
 8021536:	f000 f92e 	bl	8021796 <USBD_Get_USB_Status>
 802153a:	0003      	movs	r3, r0
 802153c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802153e:	19bb      	adds	r3, r7, r6
 8021540:	781b      	ldrb	r3, [r3, #0]
}
 8021542:	0018      	movs	r0, r3
 8021544:	46bd      	mov	sp, r7
 8021546:	b005      	add	sp, #20
 8021548:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802154a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802154a:	b580      	push	{r7, lr}
 802154c:	b084      	sub	sp, #16
 802154e:	af00      	add	r7, sp, #0
 8021550:	6078      	str	r0, [r7, #4]
 8021552:	000a      	movs	r2, r1
 8021554:	1cfb      	adds	r3, r7, #3
 8021556:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021558:	687a      	ldr	r2, [r7, #4]
 802155a:	23b2      	movs	r3, #178	; 0xb2
 802155c:	009b      	lsls	r3, r3, #2
 802155e:	58d3      	ldr	r3, [r2, r3]
 8021560:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8021562:	1cfb      	adds	r3, r7, #3
 8021564:	781b      	ldrb	r3, [r3, #0]
 8021566:	b25b      	sxtb	r3, r3
 8021568:	2b00      	cmp	r3, #0
 802156a:	da0c      	bge.n	8021586 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802156c:	1cfb      	adds	r3, r7, #3
 802156e:	781b      	ldrb	r3, [r3, #0]
 8021570:	227f      	movs	r2, #127	; 0x7f
 8021572:	401a      	ands	r2, r3
 8021574:	68f9      	ldr	r1, [r7, #12]
 8021576:	0013      	movs	r3, r2
 8021578:	009b      	lsls	r3, r3, #2
 802157a:	189b      	adds	r3, r3, r2
 802157c:	00db      	lsls	r3, r3, #3
 802157e:	18cb      	adds	r3, r1, r3
 8021580:	3316      	adds	r3, #22
 8021582:	781b      	ldrb	r3, [r3, #0]
 8021584:	e00d      	b.n	80215a2 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021586:	1cfb      	adds	r3, r7, #3
 8021588:	781b      	ldrb	r3, [r3, #0]
 802158a:	227f      	movs	r2, #127	; 0x7f
 802158c:	401a      	ands	r2, r3
 802158e:	68f8      	ldr	r0, [r7, #12]
 8021590:	23ab      	movs	r3, #171	; 0xab
 8021592:	0059      	lsls	r1, r3, #1
 8021594:	0013      	movs	r3, r2
 8021596:	009b      	lsls	r3, r3, #2
 8021598:	189b      	adds	r3, r3, r2
 802159a:	00db      	lsls	r3, r3, #3
 802159c:	18c3      	adds	r3, r0, r3
 802159e:	185b      	adds	r3, r3, r1
 80215a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80215a2:	0018      	movs	r0, r3
 80215a4:	46bd      	mov	sp, r7
 80215a6:	b004      	add	sp, #16
 80215a8:	bd80      	pop	{r7, pc}

080215aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80215aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215ac:	b085      	sub	sp, #20
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	6078      	str	r0, [r7, #4]
 80215b2:	000a      	movs	r2, r1
 80215b4:	1cfb      	adds	r3, r7, #3
 80215b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80215b8:	210f      	movs	r1, #15
 80215ba:	187b      	adds	r3, r7, r1
 80215bc:	2200      	movs	r2, #0
 80215be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80215c0:	260e      	movs	r6, #14
 80215c2:	19bb      	adds	r3, r7, r6
 80215c4:	2200      	movs	r2, #0
 80215c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80215c8:	687a      	ldr	r2, [r7, #4]
 80215ca:	23b2      	movs	r3, #178	; 0xb2
 80215cc:	009b      	lsls	r3, r3, #2
 80215ce:	58d2      	ldr	r2, [r2, r3]
 80215d0:	000d      	movs	r5, r1
 80215d2:	187c      	adds	r4, r7, r1
 80215d4:	1cfb      	adds	r3, r7, #3
 80215d6:	781b      	ldrb	r3, [r3, #0]
 80215d8:	0019      	movs	r1, r3
 80215da:	0010      	movs	r0, r2
 80215dc:	f7ee f99a 	bl	800f914 <HAL_PCD_SetAddress>
 80215e0:	0003      	movs	r3, r0
 80215e2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80215e4:	19bc      	adds	r4, r7, r6
 80215e6:	197b      	adds	r3, r7, r5
 80215e8:	781b      	ldrb	r3, [r3, #0]
 80215ea:	0018      	movs	r0, r3
 80215ec:	f000 f8d3 	bl	8021796 <USBD_Get_USB_Status>
 80215f0:	0003      	movs	r3, r0
 80215f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80215f4:	19bb      	adds	r3, r7, r6
 80215f6:	781b      	ldrb	r3, [r3, #0]
}
 80215f8:	0018      	movs	r0, r3
 80215fa:	46bd      	mov	sp, r7
 80215fc:	b005      	add	sp, #20
 80215fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021600 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8021600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021602:	b087      	sub	sp, #28
 8021604:	af00      	add	r7, sp, #0
 8021606:	60f8      	str	r0, [r7, #12]
 8021608:	607a      	str	r2, [r7, #4]
 802160a:	603b      	str	r3, [r7, #0]
 802160c:	230b      	movs	r3, #11
 802160e:	18fb      	adds	r3, r7, r3
 8021610:	1c0a      	adds	r2, r1, #0
 8021612:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021614:	2617      	movs	r6, #23
 8021616:	19bb      	adds	r3, r7, r6
 8021618:	2200      	movs	r2, #0
 802161a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802161c:	2516      	movs	r5, #22
 802161e:	197b      	adds	r3, r7, r5
 8021620:	2200      	movs	r2, #0
 8021622:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021624:	68fa      	ldr	r2, [r7, #12]
 8021626:	23b2      	movs	r3, #178	; 0xb2
 8021628:	009b      	lsls	r3, r3, #2
 802162a:	58d0      	ldr	r0, [r2, r3]
 802162c:	19bc      	adds	r4, r7, r6
 802162e:	683d      	ldr	r5, [r7, #0]
 8021630:	687a      	ldr	r2, [r7, #4]
 8021632:	230b      	movs	r3, #11
 8021634:	18fb      	adds	r3, r7, r3
 8021636:	7819      	ldrb	r1, [r3, #0]
 8021638:	002b      	movs	r3, r5
 802163a:	f7ee faaa 	bl	800fb92 <HAL_PCD_EP_Transmit>
 802163e:	0003      	movs	r3, r0
 8021640:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8021642:	2516      	movs	r5, #22
 8021644:	197c      	adds	r4, r7, r5
 8021646:	19bb      	adds	r3, r7, r6
 8021648:	781b      	ldrb	r3, [r3, #0]
 802164a:	0018      	movs	r0, r3
 802164c:	f000 f8a3 	bl	8021796 <USBD_Get_USB_Status>
 8021650:	0003      	movs	r3, r0
 8021652:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8021654:	197b      	adds	r3, r7, r5
 8021656:	781b      	ldrb	r3, [r3, #0]
}
 8021658:	0018      	movs	r0, r3
 802165a:	46bd      	mov	sp, r7
 802165c:	b007      	add	sp, #28
 802165e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8021660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021662:	b087      	sub	sp, #28
 8021664:	af00      	add	r7, sp, #0
 8021666:	60f8      	str	r0, [r7, #12]
 8021668:	607a      	str	r2, [r7, #4]
 802166a:	603b      	str	r3, [r7, #0]
 802166c:	230b      	movs	r3, #11
 802166e:	18fb      	adds	r3, r7, r3
 8021670:	1c0a      	adds	r2, r1, #0
 8021672:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8021674:	2617      	movs	r6, #23
 8021676:	19bb      	adds	r3, r7, r6
 8021678:	2200      	movs	r2, #0
 802167a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802167c:	2516      	movs	r5, #22
 802167e:	197b      	adds	r3, r7, r5
 8021680:	2200      	movs	r2, #0
 8021682:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021684:	68fa      	ldr	r2, [r7, #12]
 8021686:	23b2      	movs	r3, #178	; 0xb2
 8021688:	009b      	lsls	r3, r3, #2
 802168a:	58d0      	ldr	r0, [r2, r3]
 802168c:	19bc      	adds	r4, r7, r6
 802168e:	683d      	ldr	r5, [r7, #0]
 8021690:	687a      	ldr	r2, [r7, #4]
 8021692:	230b      	movs	r3, #11
 8021694:	18fb      	adds	r3, r7, r3
 8021696:	7819      	ldrb	r1, [r3, #0]
 8021698:	002b      	movs	r3, r5
 802169a:	f7ee fa29 	bl	800faf0 <HAL_PCD_EP_Receive>
 802169e:	0003      	movs	r3, r0
 80216a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80216a2:	2516      	movs	r5, #22
 80216a4:	197c      	adds	r4, r7, r5
 80216a6:	19bb      	adds	r3, r7, r6
 80216a8:	781b      	ldrb	r3, [r3, #0]
 80216aa:	0018      	movs	r0, r3
 80216ac:	f000 f873 	bl	8021796 <USBD_Get_USB_Status>
 80216b0:	0003      	movs	r3, r0
 80216b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80216b4:	197b      	adds	r3, r7, r5
 80216b6:	781b      	ldrb	r3, [r3, #0]
}
 80216b8:	0018      	movs	r0, r3
 80216ba:	46bd      	mov	sp, r7
 80216bc:	b007      	add	sp, #28
 80216be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080216c0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
 80216c8:	000a      	movs	r2, r1
 80216ca:	1cfb      	adds	r3, r7, #3
 80216cc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80216ce:	687a      	ldr	r2, [r7, #4]
 80216d0:	23b2      	movs	r3, #178	; 0xb2
 80216d2:	009b      	lsls	r3, r3, #2
 80216d4:	58d2      	ldr	r2, [r2, r3]
 80216d6:	1cfb      	adds	r3, r7, #3
 80216d8:	781b      	ldrb	r3, [r3, #0]
 80216da:	0019      	movs	r1, r3
 80216dc:	0010      	movs	r0, r2
 80216de:	f7ee fa3f 	bl	800fb60 <HAL_PCD_EP_GetRxCount>
 80216e2:	0003      	movs	r3, r0
}
 80216e4:	0018      	movs	r0, r3
 80216e6:	46bd      	mov	sp, r7
 80216e8:	b002      	add	sp, #8
 80216ea:	bd80      	pop	{r7, pc}

080216ec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80216ec:	b580      	push	{r7, lr}
 80216ee:	b082      	sub	sp, #8
 80216f0:	af00      	add	r7, sp, #0
 80216f2:	6078      	str	r0, [r7, #4]
 80216f4:	000a      	movs	r2, r1
 80216f6:	1cfb      	adds	r3, r7, #3
 80216f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80216fa:	1cfb      	adds	r3, r7, #3
 80216fc:	781b      	ldrb	r3, [r3, #0]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d002      	beq.n	8021708 <HAL_PCDEx_LPM_Callback+0x1c>
 8021702:	2b01      	cmp	r3, #1
 8021704:	d014      	beq.n	8021730 <HAL_PCDEx_LPM_Callback+0x44>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8021706:	e025      	b.n	8021754 <HAL_PCDEx_LPM_Callback+0x68>
    if (hpcd->Init.low_power_enable)
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	7adb      	ldrb	r3, [r3, #11]
 802170c:	2b00      	cmp	r3, #0
 802170e:	d007      	beq.n	8021720 <HAL_PCDEx_LPM_Callback+0x34>
      SystemClockConfig_Resume();
 8021710:	f000 f83a 	bl	8021788 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021714:	4b11      	ldr	r3, [pc, #68]	; (802175c <HAL_PCDEx_LPM_Callback+0x70>)
 8021716:	691a      	ldr	r2, [r3, #16]
 8021718:	4b10      	ldr	r3, [pc, #64]	; (802175c <HAL_PCDEx_LPM_Callback+0x70>)
 802171a:	2106      	movs	r1, #6
 802171c:	438a      	bics	r2, r1
 802171e:	611a      	str	r2, [r3, #16]
    USBD_LL_Resume(hpcd->pData);
 8021720:	687a      	ldr	r2, [r7, #4]
 8021722:	23b7      	movs	r3, #183	; 0xb7
 8021724:	009b      	lsls	r3, r3, #2
 8021726:	58d3      	ldr	r3, [r2, r3]
 8021728:	0018      	movs	r0, r3
 802172a:	f7f8 fbd9 	bl	8019ee0 <USBD_LL_Resume>
    break;
 802172e:	e011      	b.n	8021754 <HAL_PCDEx_LPM_Callback+0x68>
    USBD_LL_Suspend(hpcd->pData);
 8021730:	687a      	ldr	r2, [r7, #4]
 8021732:	23b7      	movs	r3, #183	; 0xb7
 8021734:	009b      	lsls	r3, r3, #2
 8021736:	58d3      	ldr	r3, [r2, r3]
 8021738:	0018      	movs	r0, r3
 802173a:	f7f8 fbb9 	bl	8019eb0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	7adb      	ldrb	r3, [r3, #11]
 8021742:	2b00      	cmp	r3, #0
 8021744:	d005      	beq.n	8021752 <HAL_PCDEx_LPM_Callback+0x66>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021746:	4b05      	ldr	r3, [pc, #20]	; (802175c <HAL_PCDEx_LPM_Callback+0x70>)
 8021748:	691a      	ldr	r2, [r3, #16]
 802174a:	4b04      	ldr	r3, [pc, #16]	; (802175c <HAL_PCDEx_LPM_Callback+0x70>)
 802174c:	2106      	movs	r1, #6
 802174e:	430a      	orrs	r2, r1
 8021750:	611a      	str	r2, [r3, #16]
    break;
 8021752:	46c0      	nop			; (mov r8, r8)
}
 8021754:	46c0      	nop			; (mov r8, r8)
 8021756:	46bd      	mov	sp, r7
 8021758:	b002      	add	sp, #8
 802175a:	bd80      	pop	{r7, pc}
 802175c:	e000ed00 	.word	0xe000ed00

08021760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8021760:	b580      	push	{r7, lr}
 8021762:	b082      	sub	sp, #8
 8021764:	af00      	add	r7, sp, #0
 8021766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8021768:	4b02      	ldr	r3, [pc, #8]	; (8021774 <USBD_static_malloc+0x14>)
}
 802176a:	0018      	movs	r0, r3
 802176c:	46bd      	mov	sp, r7
 802176e:	b002      	add	sp, #8
 8021770:	bd80      	pop	{r7, pc}
 8021772:	46c0      	nop			; (mov r8, r8)
 8021774:	20004c1c 	.word	0x20004c1c

08021778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b082      	sub	sp, #8
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]

}
 8021780:	46c0      	nop			; (mov r8, r8)
 8021782:	46bd      	mov	sp, r7
 8021784:	b002      	add	sp, #8
 8021786:	bd80      	pop	{r7, pc}

08021788 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8021788:	b580      	push	{r7, lr}
 802178a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 802178c:	f7e9 fcda 	bl	800b144 <SystemClock_Config>
}
 8021790:	46c0      	nop			; (mov r8, r8)
 8021792:	46bd      	mov	sp, r7
 8021794:	bd80      	pop	{r7, pc}

08021796 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021796:	b580      	push	{r7, lr}
 8021798:	b084      	sub	sp, #16
 802179a:	af00      	add	r7, sp, #0
 802179c:	0002      	movs	r2, r0
 802179e:	1dfb      	adds	r3, r7, #7
 80217a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80217a2:	230f      	movs	r3, #15
 80217a4:	18fb      	adds	r3, r7, r3
 80217a6:	2200      	movs	r2, #0
 80217a8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80217aa:	1dfb      	adds	r3, r7, #7
 80217ac:	781b      	ldrb	r3, [r3, #0]
 80217ae:	2b03      	cmp	r3, #3
 80217b0:	d017      	beq.n	80217e2 <USBD_Get_USB_Status+0x4c>
 80217b2:	dc1b      	bgt.n	80217ec <USBD_Get_USB_Status+0x56>
 80217b4:	2b02      	cmp	r3, #2
 80217b6:	d00f      	beq.n	80217d8 <USBD_Get_USB_Status+0x42>
 80217b8:	dc18      	bgt.n	80217ec <USBD_Get_USB_Status+0x56>
 80217ba:	2b00      	cmp	r3, #0
 80217bc:	d002      	beq.n	80217c4 <USBD_Get_USB_Status+0x2e>
 80217be:	2b01      	cmp	r3, #1
 80217c0:	d005      	beq.n	80217ce <USBD_Get_USB_Status+0x38>
 80217c2:	e013      	b.n	80217ec <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80217c4:	230f      	movs	r3, #15
 80217c6:	18fb      	adds	r3, r7, r3
 80217c8:	2200      	movs	r2, #0
 80217ca:	701a      	strb	r2, [r3, #0]
    break;
 80217cc:	e013      	b.n	80217f6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80217ce:	230f      	movs	r3, #15
 80217d0:	18fb      	adds	r3, r7, r3
 80217d2:	2203      	movs	r2, #3
 80217d4:	701a      	strb	r2, [r3, #0]
    break;
 80217d6:	e00e      	b.n	80217f6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80217d8:	230f      	movs	r3, #15
 80217da:	18fb      	adds	r3, r7, r3
 80217dc:	2201      	movs	r2, #1
 80217de:	701a      	strb	r2, [r3, #0]
    break;
 80217e0:	e009      	b.n	80217f6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80217e2:	230f      	movs	r3, #15
 80217e4:	18fb      	adds	r3, r7, r3
 80217e6:	2203      	movs	r2, #3
 80217e8:	701a      	strb	r2, [r3, #0]
    break;
 80217ea:	e004      	b.n	80217f6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80217ec:	230f      	movs	r3, #15
 80217ee:	18fb      	adds	r3, r7, r3
 80217f0:	2203      	movs	r2, #3
 80217f2:	701a      	strb	r2, [r3, #0]
    break;
 80217f4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80217f6:	230f      	movs	r3, #15
 80217f8:	18fb      	adds	r3, r7, r3
 80217fa:	781b      	ldrb	r3, [r3, #0]
}
 80217fc:	0018      	movs	r0, r3
 80217fe:	46bd      	mov	sp, r7
 8021800:	b004      	add	sp, #16
 8021802:	bd80      	pop	{r7, pc}

08021804 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 8021804:	b580      	push	{r7, lr}
 8021806:	b086      	sub	sp, #24
 8021808:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 802180a:	230f      	movs	r3, #15
 802180c:	18fb      	adds	r3, r7, r3
 802180e:	2203      	movs	r2, #3
 8021810:	701a      	strb	r2, [r3, #0]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 8021812:	4bc0      	ldr	r3, [pc, #768]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021814:	681a      	ldr	r2, [r3, #0]
 8021816:	23c0      	movs	r3, #192	; 0xc0
 8021818:	049b      	lsls	r3, r3, #18
 802181a:	4013      	ands	r3, r2
 802181c:	d00e      	beq.n	802183c <BSP_GUI_LoadDataFromFlash+0x38>
 802181e:	4bbd      	ldr	r3, [pc, #756]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021820:	681a      	ldr	r2, [r3, #0]
 8021822:	23c0      	movs	r3, #192	; 0xc0
 8021824:	049b      	lsls	r3, r3, #18
 8021826:	401a      	ands	r2, r3
 8021828:	2380      	movs	r3, #128	; 0x80
 802182a:	045b      	lsls	r3, r3, #17
 802182c:	429a      	cmp	r2, r3
 802182e:	d110      	bne.n	8021852 <BSP_GUI_LoadDataFromFlash+0x4e>
 8021830:	4bb9      	ldr	r3, [pc, #740]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 8021832:	681a      	ldr	r2, [r3, #0]
 8021834:	2380      	movs	r3, #128	; 0x80
 8021836:	039b      	lsls	r3, r3, #14
 8021838:	4013      	ands	r3, r2
 802183a:	d10a      	bne.n	8021852 <BSP_GUI_LoadDataFromFlash+0x4e>
 802183c:	4bb7      	ldr	r3, [pc, #732]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	029b      	lsls	r3, r3, #10
 8021842:	4ab7      	ldr	r2, [pc, #732]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8021844:	4013      	ands	r3, r2
 8021846:	0adb      	lsrs	r3, r3, #11
 8021848:	031b      	lsls	r3, r3, #12
 802184a:	4ab6      	ldr	r2, [pc, #728]	; (8021b24 <BSP_GUI_LoadDataFromFlash+0x320>)
 802184c:	4694      	mov	ip, r2
 802184e:	4463      	add	r3, ip
 8021850:	e00a      	b.n	8021868 <BSP_GUI_LoadDataFromFlash+0x64>
 8021852:	4bb2      	ldr	r3, [pc, #712]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021854:	681b      	ldr	r3, [r3, #0]
 8021856:	029b      	lsls	r3, r3, #10
 8021858:	085b      	lsrs	r3, r3, #1
 802185a:	4ab3      	ldr	r2, [pc, #716]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 802185c:	4013      	ands	r3, r2
 802185e:	0adb      	lsrs	r3, r3, #11
 8021860:	031b      	lsls	r3, r3, #12
 8021862:	4ab0      	ldr	r2, [pc, #704]	; (8021b24 <BSP_GUI_LoadDataFromFlash+0x320>)
 8021864:	4694      	mov	ip, r2
 8021866:	4463      	add	r3, ip
 8021868:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_ADDR_RESERVED > ADDR_FLASH_PAGE_END)
 802186a:	4baa      	ldr	r3, [pc, #680]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 802186c:	681a      	ldr	r2, [r3, #0]
 802186e:	23c0      	movs	r3, #192	; 0xc0
 8021870:	049b      	lsls	r3, r3, #18
 8021872:	4013      	ands	r3, r2
 8021874:	d00e      	beq.n	8021894 <BSP_GUI_LoadDataFromFlash+0x90>
 8021876:	4ba7      	ldr	r3, [pc, #668]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021878:	681a      	ldr	r2, [r3, #0]
 802187a:	23c0      	movs	r3, #192	; 0xc0
 802187c:	049b      	lsls	r3, r3, #18
 802187e:	401a      	ands	r2, r3
 8021880:	2380      	movs	r3, #128	; 0x80
 8021882:	045b      	lsls	r3, r3, #17
 8021884:	429a      	cmp	r2, r3
 8021886:	d10f      	bne.n	80218a8 <BSP_GUI_LoadDataFromFlash+0xa4>
 8021888:	4ba3      	ldr	r3, [pc, #652]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 802188a:	681a      	ldr	r2, [r3, #0]
 802188c:	2380      	movs	r3, #128	; 0x80
 802188e:	039b      	lsls	r3, r3, #14
 8021890:	4013      	ands	r3, r2
 8021892:	d109      	bne.n	80218a8 <BSP_GUI_LoadDataFromFlash+0xa4>
 8021894:	4ba1      	ldr	r3, [pc, #644]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	029b      	lsls	r3, r3, #10
 802189a:	4aa1      	ldr	r2, [pc, #644]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 802189c:	4013      	ands	r3, r2
 802189e:	0adb      	lsrs	r3, r3, #11
 80218a0:	031b      	lsls	r3, r3, #12
 80218a2:	4aa2      	ldr	r2, [pc, #648]	; (8021b2c <BSP_GUI_LoadDataFromFlash+0x328>)
 80218a4:	189a      	adds	r2, r3, r2
 80218a6:	e009      	b.n	80218bc <BSP_GUI_LoadDataFromFlash+0xb8>
 80218a8:	4b9c      	ldr	r3, [pc, #624]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 80218aa:	681b      	ldr	r3, [r3, #0]
 80218ac:	029b      	lsls	r3, r3, #10
 80218ae:	085b      	lsrs	r3, r3, #1
 80218b0:	4a9d      	ldr	r2, [pc, #628]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 80218b2:	4013      	ands	r3, r2
 80218b4:	0adb      	lsrs	r3, r3, #11
 80218b6:	031b      	lsls	r3, r3, #12
 80218b8:	4a9c      	ldr	r2, [pc, #624]	; (8021b2c <BSP_GUI_LoadDataFromFlash+0x328>)
 80218ba:	189a      	adds	r2, r3, r2
 80218bc:	4b95      	ldr	r3, [pc, #596]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 80218be:	6819      	ldr	r1, [r3, #0]
 80218c0:	23c0      	movs	r3, #192	; 0xc0
 80218c2:	049b      	lsls	r3, r3, #18
 80218c4:	400b      	ands	r3, r1
 80218c6:	d00e      	beq.n	80218e6 <BSP_GUI_LoadDataFromFlash+0xe2>
 80218c8:	4b92      	ldr	r3, [pc, #584]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 80218ca:	6819      	ldr	r1, [r3, #0]
 80218cc:	23c0      	movs	r3, #192	; 0xc0
 80218ce:	049b      	lsls	r3, r3, #18
 80218d0:	4019      	ands	r1, r3
 80218d2:	2380      	movs	r3, #128	; 0x80
 80218d4:	045b      	lsls	r3, r3, #17
 80218d6:	4299      	cmp	r1, r3
 80218d8:	d112      	bne.n	8021900 <BSP_GUI_LoadDataFromFlash+0xfc>
 80218da:	4b8f      	ldr	r3, [pc, #572]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 80218dc:	6819      	ldr	r1, [r3, #0]
 80218de:	2380      	movs	r3, #128	; 0x80
 80218e0:	039b      	lsls	r3, r3, #14
 80218e2:	400b      	ands	r3, r1
 80218e4:	d10c      	bne.n	8021900 <BSP_GUI_LoadDataFromFlash+0xfc>
 80218e6:	4b8d      	ldr	r3, [pc, #564]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 80218e8:	681b      	ldr	r3, [r3, #0]
 80218ea:	029b      	lsls	r3, r3, #10
 80218ec:	498c      	ldr	r1, [pc, #560]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 80218ee:	400b      	ands	r3, r1
 80218f0:	0adb      	lsrs	r3, r3, #11
 80218f2:	2180      	movs	r1, #128	; 0x80
 80218f4:	0209      	lsls	r1, r1, #8
 80218f6:	468c      	mov	ip, r1
 80218f8:	4463      	add	r3, ip
 80218fa:	031b      	lsls	r3, r3, #12
 80218fc:	3b01      	subs	r3, #1
 80218fe:	e00c      	b.n	802191a <BSP_GUI_LoadDataFromFlash+0x116>
 8021900:	4b86      	ldr	r3, [pc, #536]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021902:	681b      	ldr	r3, [r3, #0]
 8021904:	029b      	lsls	r3, r3, #10
 8021906:	085b      	lsrs	r3, r3, #1
 8021908:	4987      	ldr	r1, [pc, #540]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 802190a:	400b      	ands	r3, r1
 802190c:	0adb      	lsrs	r3, r3, #11
 802190e:	2180      	movs	r1, #128	; 0x80
 8021910:	0209      	lsls	r1, r1, #8
 8021912:	468c      	mov	ip, r1
 8021914:	4463      	add	r3, ip
 8021916:	031b      	lsls	r3, r3, #12
 8021918:	3b01      	subs	r3, #1
 802191a:	429a      	cmp	r2, r3
 802191c:	d900      	bls.n	8021920 <BSP_GUI_LoadDataFromFlash+0x11c>
 802191e:	e17a      	b.n	8021c16 <BSP_GUI_LoadDataFromFlash+0x412>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 8021920:	68bb      	ldr	r3, [r7, #8]
 8021922:	681b      	ldr	r3, [r3, #0]
 8021924:	3301      	adds	r3, #1
 8021926:	d011      	beq.n	802194c <BSP_GUI_LoadDataFromFlash+0x148>
 8021928:	68bb      	ldr	r3, [r7, #8]
 802192a:	681a      	ldr	r2, [r3, #0]
 802192c:	685b      	ldr	r3, [r3, #4]
 802192e:	4880      	ldr	r0, [pc, #512]	; (8021b30 <BSP_GUI_LoadDataFromFlash+0x32c>)
 8021930:	4980      	ldr	r1, [pc, #512]	; (8021b34 <BSP_GUI_LoadDataFromFlash+0x330>)
 8021932:	4282      	cmp	r2, r0
 8021934:	d101      	bne.n	802193a <BSP_GUI_LoadDataFromFlash+0x136>
 8021936:	428b      	cmp	r3, r1
 8021938:	d008      	beq.n	802194c <BSP_GUI_LoadDataFromFlash+0x148>
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
#if defined(_TRACE)
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 802193a:	4b7f      	ldr	r3, [pc, #508]	; (8021b38 <BSP_GUI_LoadDataFromFlash+0x334>)
 802193c:	2218      	movs	r2, #24
 802193e:	9200      	str	r2, [sp, #0]
 8021940:	2200      	movs	r2, #0
 8021942:	2100      	movs	r1, #0
 8021944:	2006      	movs	r0, #6
 8021946:	f7f4 fa07 	bl	8015d58 <USBPD_TRACE_Add>
#endif /* _TRACE */
    goto _exit;
 802194a:	e167      	b.n	8021c1c <BSP_GUI_LoadDataFromFlash+0x418>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 802194c:	68bb      	ldr	r3, [r7, #8]
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	3301      	adds	r3, #1
 8021952:	d100      	bne.n	8021956 <BSP_GUI_LoadDataFromFlash+0x152>
 8021954:	e161      	b.n	8021c1a <BSP_GUI_LoadDataFromFlash+0x416>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 8021956:	4b6f      	ldr	r3, [pc, #444]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021958:	681a      	ldr	r2, [r3, #0]
 802195a:	23c0      	movs	r3, #192	; 0xc0
 802195c:	049b      	lsls	r3, r3, #18
 802195e:	4013      	ands	r3, r2
 8021960:	d00e      	beq.n	8021980 <BSP_GUI_LoadDataFromFlash+0x17c>
 8021962:	4b6c      	ldr	r3, [pc, #432]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021964:	681a      	ldr	r2, [r3, #0]
 8021966:	23c0      	movs	r3, #192	; 0xc0
 8021968:	049b      	lsls	r3, r3, #18
 802196a:	401a      	ands	r2, r3
 802196c:	2380      	movs	r3, #128	; 0x80
 802196e:	045b      	lsls	r3, r3, #17
 8021970:	429a      	cmp	r2, r3
 8021972:	d110      	bne.n	8021996 <BSP_GUI_LoadDataFromFlash+0x192>
 8021974:	4b68      	ldr	r3, [pc, #416]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 8021976:	681a      	ldr	r2, [r3, #0]
 8021978:	2380      	movs	r3, #128	; 0x80
 802197a:	039b      	lsls	r3, r3, #14
 802197c:	4013      	ands	r3, r2
 802197e:	d10a      	bne.n	8021996 <BSP_GUI_LoadDataFromFlash+0x192>
 8021980:	4b66      	ldr	r3, [pc, #408]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021982:	681b      	ldr	r3, [r3, #0]
 8021984:	029b      	lsls	r3, r3, #10
 8021986:	4a66      	ldr	r2, [pc, #408]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8021988:	4013      	ands	r3, r2
 802198a:	0adb      	lsrs	r3, r3, #11
 802198c:	031b      	lsls	r3, r3, #12
 802198e:	4a6b      	ldr	r2, [pc, #428]	; (8021b3c <BSP_GUI_LoadDataFromFlash+0x338>)
 8021990:	4694      	mov	ip, r2
 8021992:	4463      	add	r3, ip
 8021994:	e00a      	b.n	80219ac <BSP_GUI_LoadDataFromFlash+0x1a8>
 8021996:	4b61      	ldr	r3, [pc, #388]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021998:	681b      	ldr	r3, [r3, #0]
 802199a:	029b      	lsls	r3, r3, #10
 802199c:	085b      	lsrs	r3, r3, #1
 802199e:	4a62      	ldr	r2, [pc, #392]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 80219a0:	4013      	ands	r3, r2
 80219a2:	0adb      	lsrs	r3, r3, #11
 80219a4:	031b      	lsls	r3, r3, #12
 80219a6:	4a65      	ldr	r2, [pc, #404]	; (8021b3c <BSP_GUI_LoadDataFromFlash+0x338>)
 80219a8:	4694      	mov	ip, r2
 80219aa:	4463      	add	r3, ip
 80219ac:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 80219ae:	4b64      	ldr	r3, [pc, #400]	; (8021b40 <BSP_GUI_LoadDataFromFlash+0x33c>)
 80219b0:	607b      	str	r3, [r7, #4]
    USBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 80219b2:	230e      	movs	r3, #14
 80219b4:	18fb      	adds	r3, r7, r3
 80219b6:	2200      	movs	r2, #0
 80219b8:	701a      	strb	r2, [r3, #0]
 80219ba:	e012      	b.n	80219e2 <BSP_GUI_LoadDataFromFlash+0x1de>
 80219bc:	68bb      	ldr	r3, [r7, #8]
 80219be:	681a      	ldr	r2, [r3, #0]
 80219c0:	200e      	movs	r0, #14
 80219c2:	183b      	adds	r3, r7, r0
 80219c4:	781b      	ldrb	r3, [r3, #0]
 80219c6:	00db      	lsls	r3, r3, #3
 80219c8:	40da      	lsrs	r2, r3
 80219ca:	0011      	movs	r1, r2
 80219cc:	183b      	adds	r3, r7, r0
 80219ce:	781b      	ldrb	r3, [r3, #0]
 80219d0:	687a      	ldr	r2, [r7, #4]
 80219d2:	18d3      	adds	r3, r2, r3
 80219d4:	b2ca      	uxtb	r2, r1
 80219d6:	701a      	strb	r2, [r3, #0]
 80219d8:	183b      	adds	r3, r7, r0
 80219da:	781a      	ldrb	r2, [r3, #0]
 80219dc:	183b      	adds	r3, r7, r0
 80219de:	3201      	adds	r2, #1
 80219e0:	701a      	strb	r2, [r3, #0]
 80219e2:	230e      	movs	r3, #14
 80219e4:	18fb      	adds	r3, r7, r3
 80219e6:	781b      	ldrb	r3, [r3, #0]
 80219e8:	2b03      	cmp	r3, #3
 80219ea:	d9e7      	bls.n	80219bc <BSP_GUI_LoadDataFromFlash+0x1b8>
    _status = GUI_OK;
 80219ec:	230f      	movs	r3, #15
 80219ee:	18fb      	adds	r3, r7, r3
 80219f0:	2200      	movs	r2, #0
 80219f2:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
  /* Load PORT0_PDO_ListSNK */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 80219f4:	4b47      	ldr	r3, [pc, #284]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 80219f6:	681a      	ldr	r2, [r3, #0]
 80219f8:	23c0      	movs	r3, #192	; 0xc0
 80219fa:	049b      	lsls	r3, r3, #18
 80219fc:	4013      	ands	r3, r2
 80219fe:	d00e      	beq.n	8021a1e <BSP_GUI_LoadDataFromFlash+0x21a>
 8021a00:	4b44      	ldr	r3, [pc, #272]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021a02:	681a      	ldr	r2, [r3, #0]
 8021a04:	23c0      	movs	r3, #192	; 0xc0
 8021a06:	049b      	lsls	r3, r3, #18
 8021a08:	401a      	ands	r2, r3
 8021a0a:	2380      	movs	r3, #128	; 0x80
 8021a0c:	045b      	lsls	r3, r3, #17
 8021a0e:	429a      	cmp	r2, r3
 8021a10:	d110      	bne.n	8021a34 <BSP_GUI_LoadDataFromFlash+0x230>
 8021a12:	4b41      	ldr	r3, [pc, #260]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 8021a14:	681a      	ldr	r2, [r3, #0]
 8021a16:	2380      	movs	r3, #128	; 0x80
 8021a18:	039b      	lsls	r3, r3, #14
 8021a1a:	4013      	ands	r3, r2
 8021a1c:	d10a      	bne.n	8021a34 <BSP_GUI_LoadDataFromFlash+0x230>
 8021a1e:	4b3f      	ldr	r3, [pc, #252]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	029b      	lsls	r3, r3, #10
 8021a24:	4a3e      	ldr	r2, [pc, #248]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8021a26:	4013      	ands	r3, r2
 8021a28:	0adb      	lsrs	r3, r3, #11
 8021a2a:	031b      	lsls	r3, r3, #12
 8021a2c:	4a45      	ldr	r2, [pc, #276]	; (8021b44 <BSP_GUI_LoadDataFromFlash+0x340>)
 8021a2e:	4694      	mov	ip, r2
 8021a30:	4463      	add	r3, ip
 8021a32:	e00a      	b.n	8021a4a <BSP_GUI_LoadDataFromFlash+0x246>
 8021a34:	4b39      	ldr	r3, [pc, #228]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021a36:	681b      	ldr	r3, [r3, #0]
 8021a38:	029b      	lsls	r3, r3, #10
 8021a3a:	085b      	lsrs	r3, r3, #1
 8021a3c:	4a3a      	ldr	r2, [pc, #232]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 8021a3e:	4013      	ands	r3, r2
 8021a40:	0adb      	lsrs	r3, r3, #11
 8021a42:	031b      	lsls	r3, r3, #12
 8021a44:	4a3f      	ldr	r2, [pc, #252]	; (8021b44 <BSP_GUI_LoadDataFromFlash+0x340>)
 8021a46:	4694      	mov	ip, r2
 8021a48:	4463      	add	r3, ip
 8021a4a:	4a3f      	ldr	r2, [pc, #252]	; (8021b48 <BSP_GUI_LoadDataFromFlash+0x344>)
 8021a4c:	0011      	movs	r1, r2
 8021a4e:	0018      	movs	r0, r3
 8021a50:	f000 fc52 	bl	80222f8 <LoadPDOFromFlash>
 8021a54:	0003      	movs	r3, r0
 8021a56:	0019      	movs	r1, r3
 8021a58:	220f      	movs	r2, #15
 8021a5a:	18bb      	adds	r3, r7, r2
 8021a5c:	18ba      	adds	r2, r7, r2
 8021a5e:	7812      	ldrb	r2, [r2, #0]
 8021a60:	430a      	orrs	r2, r1
 8021a62:	701a      	strb	r2, [r3, #0]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 8021a64:	4b2b      	ldr	r3, [pc, #172]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021a66:	681a      	ldr	r2, [r3, #0]
 8021a68:	23c0      	movs	r3, #192	; 0xc0
 8021a6a:	049b      	lsls	r3, r3, #18
 8021a6c:	4013      	ands	r3, r2
 8021a6e:	d00e      	beq.n	8021a8e <BSP_GUI_LoadDataFromFlash+0x28a>
 8021a70:	4b28      	ldr	r3, [pc, #160]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021a72:	681a      	ldr	r2, [r3, #0]
 8021a74:	23c0      	movs	r3, #192	; 0xc0
 8021a76:	049b      	lsls	r3, r3, #18
 8021a78:	401a      	ands	r2, r3
 8021a7a:	2380      	movs	r3, #128	; 0x80
 8021a7c:	045b      	lsls	r3, r3, #17
 8021a7e:	429a      	cmp	r2, r3
 8021a80:	d110      	bne.n	8021aa4 <BSP_GUI_LoadDataFromFlash+0x2a0>
 8021a82:	4b25      	ldr	r3, [pc, #148]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 8021a84:	681a      	ldr	r2, [r3, #0]
 8021a86:	2380      	movs	r3, #128	; 0x80
 8021a88:	039b      	lsls	r3, r3, #14
 8021a8a:	4013      	ands	r3, r2
 8021a8c:	d10a      	bne.n	8021aa4 <BSP_GUI_LoadDataFromFlash+0x2a0>
 8021a8e:	4b23      	ldr	r3, [pc, #140]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	029b      	lsls	r3, r3, #10
 8021a94:	4a22      	ldr	r2, [pc, #136]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8021a96:	4013      	ands	r3, r2
 8021a98:	0adb      	lsrs	r3, r3, #11
 8021a9a:	031b      	lsls	r3, r3, #12
 8021a9c:	4a2b      	ldr	r2, [pc, #172]	; (8021b4c <BSP_GUI_LoadDataFromFlash+0x348>)
 8021a9e:	4694      	mov	ip, r2
 8021aa0:	4463      	add	r3, ip
 8021aa2:	e00a      	b.n	8021aba <BSP_GUI_LoadDataFromFlash+0x2b6>
 8021aa4:	4b1d      	ldr	r3, [pc, #116]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	029b      	lsls	r3, r3, #10
 8021aaa:	085b      	lsrs	r3, r3, #1
 8021aac:	4a1e      	ldr	r2, [pc, #120]	; (8021b28 <BSP_GUI_LoadDataFromFlash+0x324>)
 8021aae:	4013      	ands	r3, r2
 8021ab0:	0adb      	lsrs	r3, r3, #11
 8021ab2:	031b      	lsls	r3, r3, #12
 8021ab4:	4a25      	ldr	r2, [pc, #148]	; (8021b4c <BSP_GUI_LoadDataFromFlash+0x348>)
 8021ab6:	4694      	mov	ip, r2
 8021ab8:	4463      	add	r3, ip
 8021aba:	4925      	ldr	r1, [pc, #148]	; (8021b50 <BSP_GUI_LoadDataFromFlash+0x34c>)
 8021abc:	220c      	movs	r2, #12
 8021abe:	0018      	movs	r0, r3
 8021ac0:	f000 fc42 	bl	8022348 <LoadSettingsFromFlash>
 8021ac4:	0003      	movs	r3, r0
 8021ac6:	0019      	movs	r1, r3
 8021ac8:	220f      	movs	r2, #15
 8021aca:	18bb      	adds	r3, r7, r2
 8021acc:	18ba      	adds	r2, r7, r2
 8021ace:	7812      	ldrb	r2, [r2, #0]
 8021ad0:	430a      	orrs	r2, r1
 8021ad2:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 8021ad4:	4b0f      	ldr	r3, [pc, #60]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021ad6:	681a      	ldr	r2, [r3, #0]
 8021ad8:	23c0      	movs	r3, #192	; 0xc0
 8021ada:	049b      	lsls	r3, r3, #18
 8021adc:	4013      	ands	r3, r2
 8021ade:	d00e      	beq.n	8021afe <BSP_GUI_LoadDataFromFlash+0x2fa>
 8021ae0:	4b0c      	ldr	r3, [pc, #48]	; (8021b14 <BSP_GUI_LoadDataFromFlash+0x310>)
 8021ae2:	681a      	ldr	r2, [r3, #0]
 8021ae4:	23c0      	movs	r3, #192	; 0xc0
 8021ae6:	049b      	lsls	r3, r3, #18
 8021ae8:	401a      	ands	r2, r3
 8021aea:	2380      	movs	r3, #128	; 0x80
 8021aec:	045b      	lsls	r3, r3, #17
 8021aee:	429a      	cmp	r2, r3
 8021af0:	d132      	bne.n	8021b58 <BSP_GUI_LoadDataFromFlash+0x354>
 8021af2:	4b09      	ldr	r3, [pc, #36]	; (8021b18 <BSP_GUI_LoadDataFromFlash+0x314>)
 8021af4:	681a      	ldr	r2, [r3, #0]
 8021af6:	2380      	movs	r3, #128	; 0x80
 8021af8:	039b      	lsls	r3, r3, #14
 8021afa:	4013      	ands	r3, r2
 8021afc:	d12c      	bne.n	8021b58 <BSP_GUI_LoadDataFromFlash+0x354>
 8021afe:	4b07      	ldr	r3, [pc, #28]	; (8021b1c <BSP_GUI_LoadDataFromFlash+0x318>)
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	029b      	lsls	r3, r3, #10
 8021b04:	4a06      	ldr	r2, [pc, #24]	; (8021b20 <BSP_GUI_LoadDataFromFlash+0x31c>)
 8021b06:	4013      	ands	r3, r2
 8021b08:	0adb      	lsrs	r3, r3, #11
 8021b0a:	031b      	lsls	r3, r3, #12
 8021b0c:	4a11      	ldr	r2, [pc, #68]	; (8021b54 <BSP_GUI_LoadDataFromFlash+0x350>)
 8021b0e:	4694      	mov	ip, r2
 8021b10:	4463      	add	r3, ip
 8021b12:	e02c      	b.n	8021b6e <BSP_GUI_LoadDataFromFlash+0x36a>
 8021b14:	1fff7500 	.word	0x1fff7500
 8021b18:	40022020 	.word	0x40022020
 8021b1c:	1fff75e0 	.word	0x1fff75e0
 8021b20:	000ffc00 	.word	0x000ffc00
 8021b24:	07fff800 	.word	0x07fff800
 8021b28:	0007fe00 	.word	0x0007fe00
 8021b2c:	07fff924 	.word	0x07fff924
 8021b30:	deadf00d 	.word	0xdeadf00d
 8021b34:	deadbabe 	.word	0xdeadbabe
 8021b38:	0802ae98 	.word	0x0802ae98
 8021b3c:	07fff808 	.word	0x07fff808
 8021b40:	2000023c 	.word	0x2000023c
 8021b44:	07fff830 	.word	0x07fff830
 8021b48:	20000240 	.word	0x20000240
 8021b4c:	07fff890 	.word	0x07fff890
 8021b50:	200001b4 	.word	0x200001b4
 8021b54:	07fff91c 	.word	0x07fff91c
 8021b58:	4b34      	ldr	r3, [pc, #208]	; (8021c2c <BSP_GUI_LoadDataFromFlash+0x428>)
 8021b5a:	681b      	ldr	r3, [r3, #0]
 8021b5c:	029b      	lsls	r3, r3, #10
 8021b5e:	085b      	lsrs	r3, r3, #1
 8021b60:	4a33      	ldr	r2, [pc, #204]	; (8021c30 <BSP_GUI_LoadDataFromFlash+0x42c>)
 8021b62:	4013      	ands	r3, r2
 8021b64:	0adb      	lsrs	r3, r3, #11
 8021b66:	031b      	lsls	r3, r3, #12
 8021b68:	4a32      	ldr	r2, [pc, #200]	; (8021c34 <BSP_GUI_LoadDataFromFlash+0x430>)
 8021b6a:	4694      	mov	ip, r2
 8021b6c:	4463      	add	r3, ip
 8021b6e:	4932      	ldr	r1, [pc, #200]	; (8021c38 <BSP_GUI_LoadDataFromFlash+0x434>)
 8021b70:	2208      	movs	r2, #8
 8021b72:	0018      	movs	r0, r3
 8021b74:	f000 fbe8 	bl	8022348 <LoadSettingsFromFlash>
 8021b78:	0003      	movs	r3, r0
 8021b7a:	0019      	movs	r1, r3
 8021b7c:	220f      	movs	r2, #15
 8021b7e:	18bb      	adds	r3, r7, r2
 8021b80:	18ba      	adds	r2, r7, r2
 8021b82:	7812      	ldrb	r2, [r2, #0]
 8021b84:	430a      	orrs	r2, r1
 8021b86:	701a      	strb	r2, [r3, #0]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 8021b88:	4b2c      	ldr	r3, [pc, #176]	; (8021c3c <BSP_GUI_LoadDataFromFlash+0x438>)
 8021b8a:	681a      	ldr	r2, [r3, #0]
 8021b8c:	23c0      	movs	r3, #192	; 0xc0
 8021b8e:	049b      	lsls	r3, r3, #18
 8021b90:	4013      	ands	r3, r2
 8021b92:	d00e      	beq.n	8021bb2 <BSP_GUI_LoadDataFromFlash+0x3ae>
 8021b94:	4b29      	ldr	r3, [pc, #164]	; (8021c3c <BSP_GUI_LoadDataFromFlash+0x438>)
 8021b96:	681a      	ldr	r2, [r3, #0]
 8021b98:	23c0      	movs	r3, #192	; 0xc0
 8021b9a:	049b      	lsls	r3, r3, #18
 8021b9c:	401a      	ands	r2, r3
 8021b9e:	2380      	movs	r3, #128	; 0x80
 8021ba0:	045b      	lsls	r3, r3, #17
 8021ba2:	429a      	cmp	r2, r3
 8021ba4:	d110      	bne.n	8021bc8 <BSP_GUI_LoadDataFromFlash+0x3c4>
 8021ba6:	4b26      	ldr	r3, [pc, #152]	; (8021c40 <BSP_GUI_LoadDataFromFlash+0x43c>)
 8021ba8:	681a      	ldr	r2, [r3, #0]
 8021baa:	2380      	movs	r3, #128	; 0x80
 8021bac:	039b      	lsls	r3, r3, #14
 8021bae:	4013      	ands	r3, r2
 8021bb0:	d10a      	bne.n	8021bc8 <BSP_GUI_LoadDataFromFlash+0x3c4>
 8021bb2:	4b1e      	ldr	r3, [pc, #120]	; (8021c2c <BSP_GUI_LoadDataFromFlash+0x428>)
 8021bb4:	681b      	ldr	r3, [r3, #0]
 8021bb6:	029b      	lsls	r3, r3, #10
 8021bb8:	4a22      	ldr	r2, [pc, #136]	; (8021c44 <BSP_GUI_LoadDataFromFlash+0x440>)
 8021bba:	4013      	ands	r3, r2
 8021bbc:	0adb      	lsrs	r3, r3, #11
 8021bbe:	031b      	lsls	r3, r3, #12
 8021bc0:	4a21      	ldr	r2, [pc, #132]	; (8021c48 <BSP_GUI_LoadDataFromFlash+0x444>)
 8021bc2:	4694      	mov	ip, r2
 8021bc4:	4463      	add	r3, ip
 8021bc6:	e00a      	b.n	8021bde <BSP_GUI_LoadDataFromFlash+0x3da>
 8021bc8:	4b18      	ldr	r3, [pc, #96]	; (8021c2c <BSP_GUI_LoadDataFromFlash+0x428>)
 8021bca:	681b      	ldr	r3, [r3, #0]
 8021bcc:	029b      	lsls	r3, r3, #10
 8021bce:	085b      	lsrs	r3, r3, #1
 8021bd0:	4a17      	ldr	r2, [pc, #92]	; (8021c30 <BSP_GUI_LoadDataFromFlash+0x42c>)
 8021bd2:	4013      	ands	r3, r2
 8021bd4:	0adb      	lsrs	r3, r3, #11
 8021bd6:	031b      	lsls	r3, r3, #12
 8021bd8:	4a1b      	ldr	r2, [pc, #108]	; (8021c48 <BSP_GUI_LoadDataFromFlash+0x444>)
 8021bda:	4694      	mov	ip, r2
 8021bdc:	4463      	add	r3, ip
 8021bde:	491b      	ldr	r1, [pc, #108]	; (8021c4c <BSP_GUI_LoadDataFromFlash+0x448>)
 8021be0:	2274      	movs	r2, #116	; 0x74
 8021be2:	0018      	movs	r0, r3
 8021be4:	f000 fbb0 	bl	8022348 <LoadSettingsFromFlash>
 8021be8:	0003      	movs	r3, r0
 8021bea:	0019      	movs	r1, r3
 8021bec:	220f      	movs	r2, #15
 8021bee:	18bb      	adds	r3, r7, r2
 8021bf0:	18ba      	adds	r2, r7, r2
 8021bf2:	7812      	ldrb	r2, [r2, #0]
 8021bf4:	430a      	orrs	r2, r1
 8021bf6:	701a      	strb	r2, [r3, #0]
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_1].VID;
  DPM_USER_Settings[USBPD_PORT_1].DPM_SRCExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_1].PID;
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _SRC_CAPA_EXT && (_SRC || _DRP) */
#if defined(_SNK)||defined(_DRP)
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.XID = DPM_ID_Settings[USBPD_PORT_0].XID;
 8021bf8:	4b0f      	ldr	r3, [pc, #60]	; (8021c38 <BSP_GUI_LoadDataFromFlash+0x434>)
 8021bfa:	681a      	ldr	r2, [r3, #0]
 8021bfc:	4b13      	ldr	r3, [pc, #76]	; (8021c4c <BSP_GUI_LoadDataFromFlash+0x448>)
 8021bfe:	655a      	str	r2, [r3, #84]	; 0x54
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.VID = DPM_ID_Settings[USBPD_PORT_0].VID;
 8021c00:	4b0d      	ldr	r3, [pc, #52]	; (8021c38 <BSP_GUI_LoadDataFromFlash+0x434>)
 8021c02:	8899      	ldrh	r1, [r3, #4]
 8021c04:	4b11      	ldr	r3, [pc, #68]	; (8021c4c <BSP_GUI_LoadDataFromFlash+0x448>)
 8021c06:	2250      	movs	r2, #80	; 0x50
 8021c08:	5299      	strh	r1, [r3, r2]
  DPM_USER_Settings[USBPD_PORT_0].DPM_SNKExtendedCapa.PID = DPM_ID_Settings[USBPD_PORT_0].PID;
 8021c0a:	4b0b      	ldr	r3, [pc, #44]	; (8021c38 <BSP_GUI_LoadDataFromFlash+0x434>)
 8021c0c:	88d9      	ldrh	r1, [r3, #6]
 8021c0e:	4b0f      	ldr	r3, [pc, #60]	; (8021c4c <BSP_GUI_LoadDataFromFlash+0x448>)
 8021c10:	2252      	movs	r2, #82	; 0x52
 8021c12:	5299      	strh	r1, [r3, r2]
 8021c14:	e002      	b.n	8021c1c <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 8021c16:	46c0      	nop			; (mov r8, r8)
 8021c18:	e000      	b.n	8021c1c <BSP_GUI_LoadDataFromFlash+0x418>
    goto _exit;
 8021c1a:	46c0      	nop			; (mov r8, r8)
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8021c1c:	230f      	movs	r3, #15
 8021c1e:	18fb      	adds	r3, r7, r3
 8021c20:	781b      	ldrb	r3, [r3, #0]
}
 8021c22:	0018      	movs	r0, r3
 8021c24:	46bd      	mov	sp, r7
 8021c26:	b004      	add	sp, #16
 8021c28:	bd80      	pop	{r7, pc}
 8021c2a:	46c0      	nop			; (mov r8, r8)
 8021c2c:	1fff75e0 	.word	0x1fff75e0
 8021c30:	0007fe00 	.word	0x0007fe00
 8021c34:	07fff91c 	.word	0x07fff91c
 8021c38:	200001c0 	.word	0x200001c0
 8021c3c:	1fff7500 	.word	0x1fff7500
 8021c40:	40022020 	.word	0x40022020
 8021c44:	000ffc00 	.word	0x000ffc00
 8021c48:	07fff89c 	.word	0x07fff89c
 8021c4c:	200001c8 	.word	0x200001c8

08021c50 <BSP_GUI_SaveDataInFlash>:

  return status;
}

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 8021c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021c52:	b099      	sub	sp, #100	; 0x64
 8021c54:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 8021c56:	2327      	movs	r3, #39	; 0x27
 8021c58:	2638      	movs	r6, #56	; 0x38
 8021c5a:	199b      	adds	r3, r3, r6
 8021c5c:	19da      	adds	r2, r3, r7
 8021c5e:	2300      	movs	r3, #0
 8021c60:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8021c62:	b672      	cpsid	i
}
 8021c64:	46c0      	nop			; (mov r8, r8)

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 8021c66:	f7ed f887 	bl	800ed78 <HAL_FLASH_Unlock>
  erase_init.TypeErase     = FLASH_TYPEERASE_SECTORS;
  erase_init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
  erase_init.Sector        = FLASH_SECTOR_ID;
  erase_init.NbSectors     = 1;
#else
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8021c6a:	2308      	movs	r3, #8
 8021c6c:	199b      	adds	r3, r3, r6
 8021c6e:	19da      	adds	r2, r3, r7
 8021c70:	2302      	movs	r3, #2
 8021c72:	6013      	str	r3, [r2, #0]

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 8021c74:	4bbf      	ldr	r3, [pc, #764]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021c76:	681a      	ldr	r2, [r3, #0]
 8021c78:	23c0      	movs	r3, #192	; 0xc0
 8021c7a:	049b      	lsls	r3, r3, #18
 8021c7c:	4013      	ands	r3, r2
 8021c7e:	d00e      	beq.n	8021c9e <BSP_GUI_SaveDataInFlash+0x4e>
 8021c80:	4bbc      	ldr	r3, [pc, #752]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021c82:	681a      	ldr	r2, [r3, #0]
 8021c84:	23c0      	movs	r3, #192	; 0xc0
 8021c86:	049b      	lsls	r3, r3, #18
 8021c88:	401a      	ands	r2, r3
 8021c8a:	2380      	movs	r3, #128	; 0x80
 8021c8c:	045b      	lsls	r3, r3, #17
 8021c8e:	429a      	cmp	r2, r3
 8021c90:	d10e      	bne.n	8021cb0 <BSP_GUI_SaveDataInFlash+0x60>
 8021c92:	4bb9      	ldr	r3, [pc, #740]	; (8021f78 <BSP_GUI_SaveDataInFlash+0x328>)
 8021c94:	681a      	ldr	r2, [r3, #0]
 8021c96:	2380      	movs	r3, #128	; 0x80
 8021c98:	039b      	lsls	r3, r3, #14
 8021c9a:	4013      	ands	r3, r2
 8021c9c:	d108      	bne.n	8021cb0 <BSP_GUI_SaveDataInFlash+0x60>
 8021c9e:	4bb7      	ldr	r3, [pc, #732]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021ca0:	681b      	ldr	r3, [r3, #0]
 8021ca2:	029a      	lsls	r2, r3, #10
 8021ca4:	4bb6      	ldr	r3, [pc, #728]	; (8021f80 <BSP_GUI_SaveDataInFlash+0x330>)
 8021ca6:	4013      	ands	r3, r2
 8021ca8:	0adb      	lsrs	r3, r3, #11
 8021caa:	005b      	lsls	r3, r3, #1
 8021cac:	1e5a      	subs	r2, r3, #1
 8021cae:	e008      	b.n	8021cc2 <BSP_GUI_SaveDataInFlash+0x72>
 8021cb0:	4bb2      	ldr	r3, [pc, #712]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021cb2:	681b      	ldr	r3, [r3, #0]
 8021cb4:	029b      	lsls	r3, r3, #10
 8021cb6:	085a      	lsrs	r2, r3, #1
 8021cb8:	4bb2      	ldr	r3, [pc, #712]	; (8021f84 <BSP_GUI_SaveDataInFlash+0x334>)
 8021cba:	4013      	ands	r3, r2
 8021cbc:	0adb      	lsrs	r3, r3, #11
 8021cbe:	005b      	lsls	r3, r3, #1
 8021cc0:	1e5a      	subs	r2, r3, #1
 8021cc2:	2108      	movs	r1, #8
 8021cc4:	2038      	movs	r0, #56	; 0x38
 8021cc6:	180b      	adds	r3, r1, r0
 8021cc8:	19db      	adds	r3, r3, r7
 8021cca:	609a      	str	r2, [r3, #8]
#endif /* STM32F072xB || STM32F051x8 */
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
 8021ccc:	180b      	adds	r3, r1, r0
 8021cce:	19da      	adds	r2, r3, r7
 8021cd0:	2380      	movs	r3, #128	; 0x80
 8021cd2:	021b      	lsls	r3, r3, #8
 8021cd4:	6053      	str	r3, [r2, #4]
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 8021cd6:	180b      	adds	r3, r1, r0
 8021cd8:	19da      	adds	r2, r3, r7
 8021cda:	2301      	movs	r3, #1
 8021cdc:	60d3      	str	r3, [r2, #12]

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 8021cde:	4baa      	ldr	r3, [pc, #680]	; (8021f88 <BSP_GUI_SaveDataInFlash+0x338>)
 8021ce0:	691b      	ldr	r3, [r3, #16]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d003      	beq.n	8021cee <BSP_GUI_SaveDataInFlash+0x9e>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 8021ce6:	4aa8      	ldr	r2, [pc, #672]	; (8021f88 <BSP_GUI_SaveDataInFlash+0x338>)
 8021ce8:	2380      	movs	r3, #128	; 0x80
 8021cea:	021b      	lsls	r3, r3, #8
 8021cec:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */
#endif /* FLASH_CR_SER */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 8021cee:	233c      	movs	r3, #60	; 0x3c
 8021cf0:	18fa      	adds	r2, r7, r3
 8021cf2:	2308      	movs	r3, #8
 8021cf4:	2638      	movs	r6, #56	; 0x38
 8021cf6:	199b      	adds	r3, r3, r6
 8021cf8:	19db      	adds	r3, r3, r7
 8021cfa:	0011      	movs	r1, r2
 8021cfc:	0018      	movs	r0, r3
 8021cfe:	f7ed f8ef 	bl	800eee0 <HAL_FLASHEx_Erase>
 8021d02:	1e03      	subs	r3, r0, #0
 8021d04:	d004      	beq.n	8021d10 <BSP_GUI_SaveDataInFlash+0xc0>
  {
    status = GUI_ERASE_ERROR;
 8021d06:	2327      	movs	r3, #39	; 0x27
 8021d08:	199b      	adds	r3, r3, r6
 8021d0a:	19da      	adds	r2, r3, r7
 8021d0c:	2301      	movs	r3, #1
 8021d0e:	7013      	strb	r3, [r2, #0]
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 8021d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021d12:	3301      	adds	r3, #1
 8021d14:	d000      	beq.n	8021d18 <BSP_GUI_SaveDataInFlash+0xc8>
 8021d16:	e1d9      	b.n	80220cc <BSP_GUI_SaveDataInFlash+0x47c>
 8021d18:	2327      	movs	r3, #39	; 0x27
 8021d1a:	2238      	movs	r2, #56	; 0x38
 8021d1c:	189b      	adds	r3, r3, r2
 8021d1e:	19db      	adds	r3, r3, r7
 8021d20:	781b      	ldrb	r3, [r3, #0]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d000      	beq.n	8021d28 <BSP_GUI_SaveDataInFlash+0xd8>
 8021d26:	e1d1      	b.n	80220cc <BSP_GUI_SaveDataInFlash+0x47c>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 8021d28:	4b92      	ldr	r3, [pc, #584]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021d2a:	681a      	ldr	r2, [r3, #0]
 8021d2c:	23c0      	movs	r3, #192	; 0xc0
 8021d2e:	049b      	lsls	r3, r3, #18
 8021d30:	4013      	ands	r3, r2
 8021d32:	d00e      	beq.n	8021d52 <BSP_GUI_SaveDataInFlash+0x102>
 8021d34:	4b8f      	ldr	r3, [pc, #572]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021d36:	681a      	ldr	r2, [r3, #0]
 8021d38:	23c0      	movs	r3, #192	; 0xc0
 8021d3a:	049b      	lsls	r3, r3, #18
 8021d3c:	401a      	ands	r2, r3
 8021d3e:	2380      	movs	r3, #128	; 0x80
 8021d40:	045b      	lsls	r3, r3, #17
 8021d42:	429a      	cmp	r2, r3
 8021d44:	d10f      	bne.n	8021d66 <BSP_GUI_SaveDataInFlash+0x116>
 8021d46:	4b8c      	ldr	r3, [pc, #560]	; (8021f78 <BSP_GUI_SaveDataInFlash+0x328>)
 8021d48:	681a      	ldr	r2, [r3, #0]
 8021d4a:	2380      	movs	r3, #128	; 0x80
 8021d4c:	039b      	lsls	r3, r3, #14
 8021d4e:	4013      	ands	r3, r2
 8021d50:	d109      	bne.n	8021d66 <BSP_GUI_SaveDataInFlash+0x116>
 8021d52:	4b8a      	ldr	r3, [pc, #552]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021d54:	681b      	ldr	r3, [r3, #0]
 8021d56:	029a      	lsls	r2, r3, #10
 8021d58:	4b89      	ldr	r3, [pc, #548]	; (8021f80 <BSP_GUI_SaveDataInFlash+0x330>)
 8021d5a:	4013      	ands	r3, r2
 8021d5c:	0adb      	lsrs	r3, r3, #11
 8021d5e:	031b      	lsls	r3, r3, #12
 8021d60:	4a8a      	ldr	r2, [pc, #552]	; (8021f8c <BSP_GUI_SaveDataInFlash+0x33c>)
 8021d62:	1899      	adds	r1, r3, r2
 8021d64:	e009      	b.n	8021d7a <BSP_GUI_SaveDataInFlash+0x12a>
 8021d66:	4b85      	ldr	r3, [pc, #532]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	029b      	lsls	r3, r3, #10
 8021d6c:	085a      	lsrs	r2, r3, #1
 8021d6e:	4b85      	ldr	r3, [pc, #532]	; (8021f84 <BSP_GUI_SaveDataInFlash+0x334>)
 8021d70:	4013      	ands	r3, r2
 8021d72:	0adb      	lsrs	r3, r3, #11
 8021d74:	031b      	lsls	r3, r3, #12
 8021d76:	4a85      	ldr	r2, [pc, #532]	; (8021f8c <BSP_GUI_SaveDataInFlash+0x33c>)
 8021d78:	1899      	adds	r1, r3, r2
 8021d7a:	4a85      	ldr	r2, [pc, #532]	; (8021f90 <BSP_GUI_SaveDataInFlash+0x340>)
 8021d7c:	4b85      	ldr	r3, [pc, #532]	; (8021f94 <BSP_GUI_SaveDataInFlash+0x344>)
 8021d7e:	2001      	movs	r0, #1
 8021d80:	f7ec ffac 	bl	800ecdc <HAL_FLASH_Program>
 8021d84:	1e03      	subs	r3, r0, #0
 8021d86:	d005      	beq.n	8021d94 <BSP_GUI_SaveDataInFlash+0x144>
    {
      status = GUI_WRITE_ERROR;
 8021d88:	2327      	movs	r3, #39	; 0x27
 8021d8a:	2238      	movs	r2, #56	; 0x38
 8021d8c:	189b      	adds	r3, r3, r2
 8021d8e:	19da      	adds	r2, r3, r7
 8021d90:	2302      	movs	r3, #2
 8021d92:	7013      	strb	r3, [r2, #0]
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8021d94:	2327      	movs	r3, #39	; 0x27
 8021d96:	2238      	movs	r2, #56	; 0x38
 8021d98:	189b      	adds	r3, r3, r2
 8021d9a:	19db      	adds	r3, r3, r7
 8021d9c:	781b      	ldrb	r3, [r3, #0]
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d000      	beq.n	8021da4 <BSP_GUI_SaveDataInFlash+0x154>
 8021da2:	e082      	b.n	8021eaa <BSP_GUI_SaveDataInFlash+0x25a>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 8021da4:	2200      	movs	r2, #0
 8021da6:	2300      	movs	r3, #0
 8021da8:	653a      	str	r2, [r7, #80]	; 0x50
 8021daa:	657b      	str	r3, [r7, #84]	; 0x54
      value |= USBPD_NbPDO[0];
 8021dac:	4b7a      	ldr	r3, [pc, #488]	; (8021f98 <BSP_GUI_SaveDataInFlash+0x348>)
 8021dae:	781b      	ldrb	r3, [r3, #0]
 8021db0:	633b      	str	r3, [r7, #48]	; 0x30
 8021db2:	2300      	movs	r3, #0
 8021db4:	637b      	str	r3, [r7, #52]	; 0x34
 8021db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021dbc:	0008      	movs	r0, r1
 8021dbe:	4318      	orrs	r0, r3
 8021dc0:	0004      	movs	r4, r0
 8021dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021dc4:	431a      	orrs	r2, r3
 8021dc6:	0015      	movs	r5, r2
 8021dc8:	653c      	str	r4, [r7, #80]	; 0x50
 8021dca:	657d      	str	r5, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[1] << 8);
 8021dcc:	4b72      	ldr	r3, [pc, #456]	; (8021f98 <BSP_GUI_SaveDataInFlash+0x348>)
 8021dce:	785b      	ldrb	r3, [r3, #1]
 8021dd0:	021b      	lsls	r3, r3, #8
 8021dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8021dd4:	17db      	asrs	r3, r3, #31
 8021dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021dde:	0008      	movs	r0, r1
 8021de0:	4318      	orrs	r0, r3
 8021de2:	6138      	str	r0, [r7, #16]
 8021de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021de6:	431a      	orrs	r2, r3
 8021de8:	617a      	str	r2, [r7, #20]
 8021dea:	693b      	ldr	r3, [r7, #16]
 8021dec:	697c      	ldr	r4, [r7, #20]
 8021dee:	653b      	str	r3, [r7, #80]	; 0x50
 8021df0:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[2] << 16);
 8021df2:	4b69      	ldr	r3, [pc, #420]	; (8021f98 <BSP_GUI_SaveDataInFlash+0x348>)
 8021df4:	789b      	ldrb	r3, [r3, #2]
 8021df6:	041b      	lsls	r3, r3, #16
 8021df8:	623b      	str	r3, [r7, #32]
 8021dfa:	17db      	asrs	r3, r3, #31
 8021dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8021dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021e00:	6a39      	ldr	r1, [r7, #32]
 8021e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e04:	0008      	movs	r0, r1
 8021e06:	4318      	orrs	r0, r3
 8021e08:	60b8      	str	r0, [r7, #8]
 8021e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021e0c:	431a      	orrs	r2, r3
 8021e0e:	60fa      	str	r2, [r7, #12]
 8021e10:	68bb      	ldr	r3, [r7, #8]
 8021e12:	68fc      	ldr	r4, [r7, #12]
 8021e14:	653b      	str	r3, [r7, #80]	; 0x50
 8021e16:	657c      	str	r4, [r7, #84]	; 0x54
      value |= (USBPD_NbPDO[3] << 24);
 8021e18:	4b5f      	ldr	r3, [pc, #380]	; (8021f98 <BSP_GUI_SaveDataInFlash+0x348>)
 8021e1a:	78db      	ldrb	r3, [r3, #3]
 8021e1c:	061b      	lsls	r3, r3, #24
 8021e1e:	61bb      	str	r3, [r7, #24]
 8021e20:	17db      	asrs	r3, r3, #31
 8021e22:	61fb      	str	r3, [r7, #28]
 8021e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021e26:	69b9      	ldr	r1, [r7, #24]
 8021e28:	69fa      	ldr	r2, [r7, #28]
 8021e2a:	0008      	movs	r0, r1
 8021e2c:	4318      	orrs	r0, r3
 8021e2e:	6038      	str	r0, [r7, #0]
 8021e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021e32:	431a      	orrs	r2, r3
 8021e34:	607a      	str	r2, [r7, #4]
 8021e36:	683b      	ldr	r3, [r7, #0]
 8021e38:	687c      	ldr	r4, [r7, #4]
 8021e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8021e3c:	657c      	str	r4, [r7, #84]	; 0x54
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8021e3e:	4b4d      	ldr	r3, [pc, #308]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021e40:	681a      	ldr	r2, [r3, #0]
 8021e42:	23c0      	movs	r3, #192	; 0xc0
 8021e44:	049b      	lsls	r3, r3, #18
 8021e46:	4013      	ands	r3, r2
 8021e48:	d00e      	beq.n	8021e68 <BSP_GUI_SaveDataInFlash+0x218>
 8021e4a:	4b4a      	ldr	r3, [pc, #296]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021e4c:	681a      	ldr	r2, [r3, #0]
 8021e4e:	23c0      	movs	r3, #192	; 0xc0
 8021e50:	049b      	lsls	r3, r3, #18
 8021e52:	401a      	ands	r2, r3
 8021e54:	2380      	movs	r3, #128	; 0x80
 8021e56:	045b      	lsls	r3, r3, #17
 8021e58:	429a      	cmp	r2, r3
 8021e5a:	d10f      	bne.n	8021e7c <BSP_GUI_SaveDataInFlash+0x22c>
 8021e5c:	4b46      	ldr	r3, [pc, #280]	; (8021f78 <BSP_GUI_SaveDataInFlash+0x328>)
 8021e5e:	681a      	ldr	r2, [r3, #0]
 8021e60:	2380      	movs	r3, #128	; 0x80
 8021e62:	039b      	lsls	r3, r3, #14
 8021e64:	4013      	ands	r3, r2
 8021e66:	d109      	bne.n	8021e7c <BSP_GUI_SaveDataInFlash+0x22c>
 8021e68:	4b44      	ldr	r3, [pc, #272]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	029b      	lsls	r3, r3, #10
 8021e6e:	4a44      	ldr	r2, [pc, #272]	; (8021f80 <BSP_GUI_SaveDataInFlash+0x330>)
 8021e70:	4013      	ands	r3, r2
 8021e72:	0adb      	lsrs	r3, r3, #11
 8021e74:	031b      	lsls	r3, r3, #12
 8021e76:	4a49      	ldr	r2, [pc, #292]	; (8021f9c <BSP_GUI_SaveDataInFlash+0x34c>)
 8021e78:	1899      	adds	r1, r3, r2
 8021e7a:	e009      	b.n	8021e90 <BSP_GUI_SaveDataInFlash+0x240>
 8021e7c:	4b3f      	ldr	r3, [pc, #252]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	029b      	lsls	r3, r3, #10
 8021e82:	085b      	lsrs	r3, r3, #1
 8021e84:	4a3f      	ldr	r2, [pc, #252]	; (8021f84 <BSP_GUI_SaveDataInFlash+0x334>)
 8021e86:	4013      	ands	r3, r2
 8021e88:	0adb      	lsrs	r3, r3, #11
 8021e8a:	031b      	lsls	r3, r3, #12
 8021e8c:	4a43      	ldr	r2, [pc, #268]	; (8021f9c <BSP_GUI_SaveDataInFlash+0x34c>)
 8021e8e:	1899      	adds	r1, r3, r2
 8021e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8021e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8021e94:	2001      	movs	r0, #1
 8021e96:	f7ec ff21 	bl	800ecdc <HAL_FLASH_Program>
 8021e9a:	1e03      	subs	r3, r0, #0
 8021e9c:	d005      	beq.n	8021eaa <BSP_GUI_SaveDataInFlash+0x25a>
      {
        status = GUI_WRITE_ERROR;
 8021e9e:	2327      	movs	r3, #39	; 0x27
 8021ea0:	2238      	movs	r2, #56	; 0x38
 8021ea2:	189b      	adds	r3, r3, r2
 8021ea4:	19db      	adds	r3, r3, r7
 8021ea6:	2202      	movs	r2, #2
 8021ea8:	701a      	strb	r2, [r3, #0]
    }
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
    /* Save PORT0_PDO_ListSNK */
    if (GUI_OK == status)
 8021eaa:	2327      	movs	r3, #39	; 0x27
 8021eac:	2238      	movs	r2, #56	; 0x38
 8021eae:	189b      	adds	r3, r3, r2
 8021eb0:	19db      	adds	r3, r3, r7
 8021eb2:	781b      	ldrb	r3, [r3, #0]
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	d135      	bne.n	8021f24 <BSP_GUI_SaveDataInFlash+0x2d4>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SNK_P0, PORT0_PDO_ListSNK);
 8021eb8:	4b2e      	ldr	r3, [pc, #184]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021eba:	681a      	ldr	r2, [r3, #0]
 8021ebc:	23c0      	movs	r3, #192	; 0xc0
 8021ebe:	049b      	lsls	r3, r3, #18
 8021ec0:	4013      	ands	r3, r2
 8021ec2:	d00e      	beq.n	8021ee2 <BSP_GUI_SaveDataInFlash+0x292>
 8021ec4:	4b2b      	ldr	r3, [pc, #172]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021ec6:	681a      	ldr	r2, [r3, #0]
 8021ec8:	23c0      	movs	r3, #192	; 0xc0
 8021eca:	049b      	lsls	r3, r3, #18
 8021ecc:	401a      	ands	r2, r3
 8021ece:	2380      	movs	r3, #128	; 0x80
 8021ed0:	045b      	lsls	r3, r3, #17
 8021ed2:	429a      	cmp	r2, r3
 8021ed4:	d110      	bne.n	8021ef8 <BSP_GUI_SaveDataInFlash+0x2a8>
 8021ed6:	4b28      	ldr	r3, [pc, #160]	; (8021f78 <BSP_GUI_SaveDataInFlash+0x328>)
 8021ed8:	681a      	ldr	r2, [r3, #0]
 8021eda:	2380      	movs	r3, #128	; 0x80
 8021edc:	039b      	lsls	r3, r3, #14
 8021ede:	4013      	ands	r3, r2
 8021ee0:	d10a      	bne.n	8021ef8 <BSP_GUI_SaveDataInFlash+0x2a8>
 8021ee2:	4b26      	ldr	r3, [pc, #152]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	029b      	lsls	r3, r3, #10
 8021ee8:	4a25      	ldr	r2, [pc, #148]	; (8021f80 <BSP_GUI_SaveDataInFlash+0x330>)
 8021eea:	4013      	ands	r3, r2
 8021eec:	0adb      	lsrs	r3, r3, #11
 8021eee:	031b      	lsls	r3, r3, #12
 8021ef0:	4a2b      	ldr	r2, [pc, #172]	; (8021fa0 <BSP_GUI_SaveDataInFlash+0x350>)
 8021ef2:	4694      	mov	ip, r2
 8021ef4:	4463      	add	r3, ip
 8021ef6:	e00a      	b.n	8021f0e <BSP_GUI_SaveDataInFlash+0x2be>
 8021ef8:	4b20      	ldr	r3, [pc, #128]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	029b      	lsls	r3, r3, #10
 8021efe:	085b      	lsrs	r3, r3, #1
 8021f00:	4a20      	ldr	r2, [pc, #128]	; (8021f84 <BSP_GUI_SaveDataInFlash+0x334>)
 8021f02:	4013      	ands	r3, r2
 8021f04:	0adb      	lsrs	r3, r3, #11
 8021f06:	031b      	lsls	r3, r3, #12
 8021f08:	4a25      	ldr	r2, [pc, #148]	; (8021fa0 <BSP_GUI_SaveDataInFlash+0x350>)
 8021f0a:	4694      	mov	ip, r2
 8021f0c:	4463      	add	r3, ip
 8021f0e:	2227      	movs	r2, #39	; 0x27
 8021f10:	2138      	movs	r1, #56	; 0x38
 8021f12:	1852      	adds	r2, r2, r1
 8021f14:	19d4      	adds	r4, r2, r7
 8021f16:	4a23      	ldr	r2, [pc, #140]	; (8021fa4 <BSP_GUI_SaveDataInFlash+0x354>)
 8021f18:	0011      	movs	r1, r2
 8021f1a:	0018      	movs	r0, r3
 8021f1c:	f000 f8fa 	bl	8022114 <SavePDOInFlash>
 8021f20:	0003      	movs	r3, r0
 8021f22:	7023      	strb	r3, [r4, #0]
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8021f24:	2327      	movs	r3, #39	; 0x27
 8021f26:	2238      	movs	r2, #56	; 0x38
 8021f28:	189b      	adds	r3, r3, r2
 8021f2a:	19db      	adds	r3, r3, r7
 8021f2c:	781b      	ldrb	r3, [r3, #0]
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d152      	bne.n	8021fd8 <BSP_GUI_SaveDataInFlash+0x388>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 8021f32:	4b10      	ldr	r3, [pc, #64]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021f34:	681a      	ldr	r2, [r3, #0]
 8021f36:	23c0      	movs	r3, #192	; 0xc0
 8021f38:	049b      	lsls	r3, r3, #18
 8021f3a:	4013      	ands	r3, r2
 8021f3c:	d00e      	beq.n	8021f5c <BSP_GUI_SaveDataInFlash+0x30c>
 8021f3e:	4b0d      	ldr	r3, [pc, #52]	; (8021f74 <BSP_GUI_SaveDataInFlash+0x324>)
 8021f40:	681a      	ldr	r2, [r3, #0]
 8021f42:	23c0      	movs	r3, #192	; 0xc0
 8021f44:	049b      	lsls	r3, r3, #18
 8021f46:	401a      	ands	r2, r3
 8021f48:	2380      	movs	r3, #128	; 0x80
 8021f4a:	045b      	lsls	r3, r3, #17
 8021f4c:	429a      	cmp	r2, r3
 8021f4e:	d12d      	bne.n	8021fac <BSP_GUI_SaveDataInFlash+0x35c>
 8021f50:	4b09      	ldr	r3, [pc, #36]	; (8021f78 <BSP_GUI_SaveDataInFlash+0x328>)
 8021f52:	681a      	ldr	r2, [r3, #0]
 8021f54:	2380      	movs	r3, #128	; 0x80
 8021f56:	039b      	lsls	r3, r3, #14
 8021f58:	4013      	ands	r3, r2
 8021f5a:	d127      	bne.n	8021fac <BSP_GUI_SaveDataInFlash+0x35c>
 8021f5c:	4b07      	ldr	r3, [pc, #28]	; (8021f7c <BSP_GUI_SaveDataInFlash+0x32c>)
 8021f5e:	681b      	ldr	r3, [r3, #0]
 8021f60:	029b      	lsls	r3, r3, #10
 8021f62:	4a07      	ldr	r2, [pc, #28]	; (8021f80 <BSP_GUI_SaveDataInFlash+0x330>)
 8021f64:	4013      	ands	r3, r2
 8021f66:	0adb      	lsrs	r3, r3, #11
 8021f68:	031b      	lsls	r3, r3, #12
 8021f6a:	4a0f      	ldr	r2, [pc, #60]	; (8021fa8 <BSP_GUI_SaveDataInFlash+0x358>)
 8021f6c:	4694      	mov	ip, r2
 8021f6e:	4463      	add	r3, ip
 8021f70:	e027      	b.n	8021fc2 <BSP_GUI_SaveDataInFlash+0x372>
 8021f72:	46c0      	nop			; (mov r8, r8)
 8021f74:	1fff7500 	.word	0x1fff7500
 8021f78:	40022020 	.word	0x40022020
 8021f7c:	1fff75e0 	.word	0x1fff75e0
 8021f80:	000ffc00 	.word	0x000ffc00
 8021f84:	0007fe00 	.word	0x0007fe00
 8021f88:	40022000 	.word	0x40022000
 8021f8c:	07fff800 	.word	0x07fff800
 8021f90:	deadf00d 	.word	0xdeadf00d
 8021f94:	deadbabe 	.word	0xdeadbabe
 8021f98:	2000023c 	.word	0x2000023c
 8021f9c:	07fff808 	.word	0x07fff808
 8021fa0:	07fff830 	.word	0x07fff830
 8021fa4:	20000240 	.word	0x20000240
 8021fa8:	07fff890 	.word	0x07fff890
 8021fac:	4b4e      	ldr	r3, [pc, #312]	; (80220e8 <BSP_GUI_SaveDataInFlash+0x498>)
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	029b      	lsls	r3, r3, #10
 8021fb2:	085b      	lsrs	r3, r3, #1
 8021fb4:	4a4d      	ldr	r2, [pc, #308]	; (80220ec <BSP_GUI_SaveDataInFlash+0x49c>)
 8021fb6:	4013      	ands	r3, r2
 8021fb8:	0adb      	lsrs	r3, r3, #11
 8021fba:	031b      	lsls	r3, r3, #12
 8021fbc:	4a4c      	ldr	r2, [pc, #304]	; (80220f0 <BSP_GUI_SaveDataInFlash+0x4a0>)
 8021fbe:	4694      	mov	ip, r2
 8021fc0:	4463      	add	r3, ip
 8021fc2:	2227      	movs	r2, #39	; 0x27
 8021fc4:	2138      	movs	r1, #56	; 0x38
 8021fc6:	1852      	adds	r2, r2, r1
 8021fc8:	19d4      	adds	r4, r2, r7
 8021fca:	494a      	ldr	r1, [pc, #296]	; (80220f4 <BSP_GUI_SaveDataInFlash+0x4a4>)
 8021fcc:	220c      	movs	r2, #12
 8021fce:	0018      	movs	r0, r3
 8021fd0:	f000 f913 	bl	80221fa <SaveSettingsInFlash>
 8021fd4:	0003      	movs	r3, r0
 8021fd6:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 8021fd8:	2327      	movs	r3, #39	; 0x27
 8021fda:	2238      	movs	r2, #56	; 0x38
 8021fdc:	189b      	adds	r3, r3, r2
 8021fde:	19db      	adds	r3, r3, r7
 8021fe0:	781b      	ldrb	r3, [r3, #0]
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d135      	bne.n	8022052 <BSP_GUI_SaveDataInFlash+0x402>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 8021fe6:	4b44      	ldr	r3, [pc, #272]	; (80220f8 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8021fe8:	681a      	ldr	r2, [r3, #0]
 8021fea:	23c0      	movs	r3, #192	; 0xc0
 8021fec:	049b      	lsls	r3, r3, #18
 8021fee:	4013      	ands	r3, r2
 8021ff0:	d00e      	beq.n	8022010 <BSP_GUI_SaveDataInFlash+0x3c0>
 8021ff2:	4b41      	ldr	r3, [pc, #260]	; (80220f8 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8021ff4:	681a      	ldr	r2, [r3, #0]
 8021ff6:	23c0      	movs	r3, #192	; 0xc0
 8021ff8:	049b      	lsls	r3, r3, #18
 8021ffa:	401a      	ands	r2, r3
 8021ffc:	2380      	movs	r3, #128	; 0x80
 8021ffe:	045b      	lsls	r3, r3, #17
 8022000:	429a      	cmp	r2, r3
 8022002:	d110      	bne.n	8022026 <BSP_GUI_SaveDataInFlash+0x3d6>
 8022004:	4b3d      	ldr	r3, [pc, #244]	; (80220fc <BSP_GUI_SaveDataInFlash+0x4ac>)
 8022006:	681a      	ldr	r2, [r3, #0]
 8022008:	2380      	movs	r3, #128	; 0x80
 802200a:	039b      	lsls	r3, r3, #14
 802200c:	4013      	ands	r3, r2
 802200e:	d10a      	bne.n	8022026 <BSP_GUI_SaveDataInFlash+0x3d6>
 8022010:	4b35      	ldr	r3, [pc, #212]	; (80220e8 <BSP_GUI_SaveDataInFlash+0x498>)
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	029b      	lsls	r3, r3, #10
 8022016:	4a3a      	ldr	r2, [pc, #232]	; (8022100 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8022018:	4013      	ands	r3, r2
 802201a:	0adb      	lsrs	r3, r3, #11
 802201c:	031b      	lsls	r3, r3, #12
 802201e:	4a39      	ldr	r2, [pc, #228]	; (8022104 <BSP_GUI_SaveDataInFlash+0x4b4>)
 8022020:	4694      	mov	ip, r2
 8022022:	4463      	add	r3, ip
 8022024:	e00a      	b.n	802203c <BSP_GUI_SaveDataInFlash+0x3ec>
 8022026:	4b30      	ldr	r3, [pc, #192]	; (80220e8 <BSP_GUI_SaveDataInFlash+0x498>)
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	029b      	lsls	r3, r3, #10
 802202c:	085b      	lsrs	r3, r3, #1
 802202e:	4a2f      	ldr	r2, [pc, #188]	; (80220ec <BSP_GUI_SaveDataInFlash+0x49c>)
 8022030:	4013      	ands	r3, r2
 8022032:	0adb      	lsrs	r3, r3, #11
 8022034:	031b      	lsls	r3, r3, #12
 8022036:	4a33      	ldr	r2, [pc, #204]	; (8022104 <BSP_GUI_SaveDataInFlash+0x4b4>)
 8022038:	4694      	mov	ip, r2
 802203a:	4463      	add	r3, ip
 802203c:	2227      	movs	r2, #39	; 0x27
 802203e:	2138      	movs	r1, #56	; 0x38
 8022040:	1852      	adds	r2, r2, r1
 8022042:	19d4      	adds	r4, r2, r7
 8022044:	4930      	ldr	r1, [pc, #192]	; (8022108 <BSP_GUI_SaveDataInFlash+0x4b8>)
 8022046:	2208      	movs	r2, #8
 8022048:	0018      	movs	r0, r3
 802204a:	f000 f8d6 	bl	80221fa <SaveSettingsInFlash>
 802204e:	0003      	movs	r3, r0
 8022050:	7023      	strb	r3, [r4, #0]
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8022052:	2327      	movs	r3, #39	; 0x27
 8022054:	2238      	movs	r2, #56	; 0x38
 8022056:	189b      	adds	r3, r3, r2
 8022058:	19db      	adds	r3, r3, r7
 802205a:	781b      	ldrb	r3, [r3, #0]
 802205c:	2b00      	cmp	r3, #0
 802205e:	d135      	bne.n	80220cc <BSP_GUI_SaveDataInFlash+0x47c>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 8022060:	4b25      	ldr	r3, [pc, #148]	; (80220f8 <BSP_GUI_SaveDataInFlash+0x4a8>)
 8022062:	681a      	ldr	r2, [r3, #0]
 8022064:	23c0      	movs	r3, #192	; 0xc0
 8022066:	049b      	lsls	r3, r3, #18
 8022068:	4013      	ands	r3, r2
 802206a:	d00e      	beq.n	802208a <BSP_GUI_SaveDataInFlash+0x43a>
 802206c:	4b22      	ldr	r3, [pc, #136]	; (80220f8 <BSP_GUI_SaveDataInFlash+0x4a8>)
 802206e:	681a      	ldr	r2, [r3, #0]
 8022070:	23c0      	movs	r3, #192	; 0xc0
 8022072:	049b      	lsls	r3, r3, #18
 8022074:	401a      	ands	r2, r3
 8022076:	2380      	movs	r3, #128	; 0x80
 8022078:	045b      	lsls	r3, r3, #17
 802207a:	429a      	cmp	r2, r3
 802207c:	d110      	bne.n	80220a0 <BSP_GUI_SaveDataInFlash+0x450>
 802207e:	4b1f      	ldr	r3, [pc, #124]	; (80220fc <BSP_GUI_SaveDataInFlash+0x4ac>)
 8022080:	681a      	ldr	r2, [r3, #0]
 8022082:	2380      	movs	r3, #128	; 0x80
 8022084:	039b      	lsls	r3, r3, #14
 8022086:	4013      	ands	r3, r2
 8022088:	d10a      	bne.n	80220a0 <BSP_GUI_SaveDataInFlash+0x450>
 802208a:	4b17      	ldr	r3, [pc, #92]	; (80220e8 <BSP_GUI_SaveDataInFlash+0x498>)
 802208c:	681b      	ldr	r3, [r3, #0]
 802208e:	029b      	lsls	r3, r3, #10
 8022090:	4a1b      	ldr	r2, [pc, #108]	; (8022100 <BSP_GUI_SaveDataInFlash+0x4b0>)
 8022092:	4013      	ands	r3, r2
 8022094:	0adb      	lsrs	r3, r3, #11
 8022096:	031b      	lsls	r3, r3, #12
 8022098:	4a1c      	ldr	r2, [pc, #112]	; (802210c <BSP_GUI_SaveDataInFlash+0x4bc>)
 802209a:	4694      	mov	ip, r2
 802209c:	4463      	add	r3, ip
 802209e:	e00a      	b.n	80220b6 <BSP_GUI_SaveDataInFlash+0x466>
 80220a0:	4b11      	ldr	r3, [pc, #68]	; (80220e8 <BSP_GUI_SaveDataInFlash+0x498>)
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	029b      	lsls	r3, r3, #10
 80220a6:	085b      	lsrs	r3, r3, #1
 80220a8:	4a10      	ldr	r2, [pc, #64]	; (80220ec <BSP_GUI_SaveDataInFlash+0x49c>)
 80220aa:	4013      	ands	r3, r2
 80220ac:	0adb      	lsrs	r3, r3, #11
 80220ae:	031b      	lsls	r3, r3, #12
 80220b0:	4a16      	ldr	r2, [pc, #88]	; (802210c <BSP_GUI_SaveDataInFlash+0x4bc>)
 80220b2:	4694      	mov	ip, r2
 80220b4:	4463      	add	r3, ip
 80220b6:	2227      	movs	r2, #39	; 0x27
 80220b8:	2138      	movs	r1, #56	; 0x38
 80220ba:	1852      	adds	r2, r2, r1
 80220bc:	19d4      	adds	r4, r2, r7
 80220be:	4914      	ldr	r1, [pc, #80]	; (8022110 <BSP_GUI_SaveDataInFlash+0x4c0>)
 80220c0:	2274      	movs	r2, #116	; 0x74
 80220c2:	0018      	movs	r0, r3
 80220c4:	f000 f899 	bl	80221fa <SaveSettingsInFlash>
 80220c8:	0003      	movs	r3, r0
 80220ca:	7023      	strb	r3, [r4, #0]
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 80220cc:	f7ec fe78 	bl	800edc0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80220d0:	b662      	cpsie	i
}
 80220d2:	46c0      	nop			; (mov r8, r8)

  /* Enable interrupts */
  __enable_irq();

  return status;
 80220d4:	2327      	movs	r3, #39	; 0x27
 80220d6:	2238      	movs	r2, #56	; 0x38
 80220d8:	189b      	adds	r3, r3, r2
 80220da:	19db      	adds	r3, r3, r7
 80220dc:	781b      	ldrb	r3, [r3, #0]
}
 80220de:	0018      	movs	r0, r3
 80220e0:	46bd      	mov	sp, r7
 80220e2:	b019      	add	sp, #100	; 0x64
 80220e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220e6:	46c0      	nop			; (mov r8, r8)
 80220e8:	1fff75e0 	.word	0x1fff75e0
 80220ec:	0007fe00 	.word	0x0007fe00
 80220f0:	07fff890 	.word	0x07fff890
 80220f4:	200001b4 	.word	0x200001b4
 80220f8:	1fff7500 	.word	0x1fff7500
 80220fc:	40022020 	.word	0x40022020
 8022100:	000ffc00 	.word	0x000ffc00
 8022104:	07fff91c 	.word	0x07fff91c
 8022108:	200001c0 	.word	0x200001c0
 802210c:	07fff89c 	.word	0x07fff89c
 8022110:	200001c8 	.word	0x200001c8

08022114 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8022114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022116:	b08f      	sub	sp, #60	; 0x3c
 8022118:	af00      	add	r7, sp, #0
 802211a:	6178      	str	r0, [r7, #20]
 802211c:	6139      	str	r1, [r7, #16]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 802211e:	231f      	movs	r3, #31
 8022120:	2210      	movs	r2, #16
 8022122:	189b      	adds	r3, r3, r2
 8022124:	19db      	adds	r3, r3, r7
 8022126:	2200      	movs	r2, #0
 8022128:	701a      	strb	r2, [r3, #0]

  index_flash = 0U;
 802212a:	2300      	movs	r3, #0
 802212c:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 802212e:	2300      	movs	r3, #0
 8022130:	637b      	str	r3, [r7, #52]	; 0x34
 8022132:	e04f      	b.n	80221d4 <SavePDOInFlash+0xc0>
  {
    value[0] = pListOfPDO[index];
 8022134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022136:	009b      	lsls	r3, r3, #2
 8022138:	693a      	ldr	r2, [r7, #16]
 802213a:	18d3      	adds	r3, r2, r3
 802213c:	681a      	ldr	r2, [r3, #0]
 802213e:	2108      	movs	r1, #8
 8022140:	2010      	movs	r0, #16
 8022142:	180b      	adds	r3, r1, r0
 8022144:	19db      	adds	r3, r3, r7
 8022146:	601a      	str	r2, [r3, #0]
    index++;
 8022148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802214a:	3301      	adds	r3, #1
 802214c:	637b      	str	r3, [r7, #52]	; 0x34
    if (index < USBPD_MAX_NB_PDO)
 802214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022150:	2b06      	cmp	r3, #6
 8022152:	d808      	bhi.n	8022166 <SavePDOInFlash+0x52>
    {
      value[1] = pListOfPDO[index];
 8022154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022156:	009b      	lsls	r3, r3, #2
 8022158:	693a      	ldr	r2, [r7, #16]
 802215a:	18d3      	adds	r3, r2, r3
 802215c:	681a      	ldr	r2, [r3, #0]
 802215e:	180b      	adds	r3, r1, r0
 8022160:	19db      	adds	r3, r3, r7
 8022162:	605a      	str	r2, [r3, #4]
 8022164:	e006      	b.n	8022174 <SavePDOInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8022166:	2308      	movs	r3, #8
 8022168:	2210      	movs	r2, #16
 802216a:	189b      	adds	r3, r3, r2
 802216c:	19db      	adds	r3, r3, r7
 802216e:	2201      	movs	r2, #1
 8022170:	4252      	negs	r2, r2
 8022172:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8022174:	2208      	movs	r2, #8
 8022176:	2610      	movs	r6, #16
 8022178:	1993      	adds	r3, r2, r6
 802217a:	19db      	adds	r3, r3, r7
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	60bb      	str	r3, [r7, #8]
 8022180:	2300      	movs	r3, #0
 8022182:	60fb      	str	r3, [r7, #12]
 8022184:	1993      	adds	r3, r2, r6
 8022186:	19db      	adds	r3, r3, r7
 8022188:	685b      	ldr	r3, [r3, #4]
 802218a:	603b      	str	r3, [r7, #0]
 802218c:	2300      	movs	r3, #0
 802218e:	607b      	str	r3, [r7, #4]
 8022190:	683b      	ldr	r3, [r7, #0]
 8022192:	001d      	movs	r5, r3
 8022194:	2300      	movs	r3, #0
 8022196:	001c      	movs	r4, r3
 8022198:	68b9      	ldr	r1, [r7, #8]
 802219a:	68fa      	ldr	r2, [r7, #12]
 802219c:	000b      	movs	r3, r1
 802219e:	4323      	orrs	r3, r4
 80221a0:	623b      	str	r3, [r7, #32]
 80221a2:	0013      	movs	r3, r2
 80221a4:	432b      	orrs	r3, r5
 80221a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 80221a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221aa:	00da      	lsls	r2, r3, #3
 80221ac:	697b      	ldr	r3, [r7, #20]
 80221ae:	18d1      	adds	r1, r2, r3
 80221b0:	6a3a      	ldr	r2, [r7, #32]
 80221b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221b4:	2001      	movs	r0, #1
 80221b6:	f7ec fd91 	bl	800ecdc <HAL_FLASH_Program>
 80221ba:	1e03      	subs	r3, r0, #0
 80221bc:	d004      	beq.n	80221c8 <SavePDOInFlash+0xb4>
    {
      status = GUI_WRITE_ERROR;
 80221be:	231f      	movs	r3, #31
 80221c0:	199b      	adds	r3, r3, r6
 80221c2:	19db      	adds	r3, r3, r7
 80221c4:	2202      	movs	r2, #2
 80221c6:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1;
 80221c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221ca:	3301      	adds	r3, #1
 80221cc:	633b      	str	r3, [r7, #48]	; 0x30
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 80221ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80221d0:	3301      	adds	r3, #1
 80221d2:	637b      	str	r3, [r7, #52]	; 0x34
 80221d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80221d6:	2b06      	cmp	r3, #6
 80221d8:	d806      	bhi.n	80221e8 <SavePDOInFlash+0xd4>
 80221da:	231f      	movs	r3, #31
 80221dc:	2210      	movs	r2, #16
 80221de:	189b      	adds	r3, r3, r2
 80221e0:	19db      	adds	r3, r3, r7
 80221e2:	781b      	ldrb	r3, [r3, #0]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d0a5      	beq.n	8022134 <SavePDOInFlash+0x20>
  }
  return status;
 80221e8:	231f      	movs	r3, #31
 80221ea:	2210      	movs	r2, #16
 80221ec:	189b      	adds	r3, r3, r2
 80221ee:	19db      	adds	r3, r3, r7
 80221f0:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 80221f2:	0018      	movs	r0, r3
 80221f4:	46bd      	mov	sp, r7
 80221f6:	b00f      	add	sp, #60	; 0x3c
 80221f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080221fa <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 80221fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221fc:	b091      	sub	sp, #68	; 0x44
 80221fe:	af00      	add	r7, sp, #0
 8022200:	61f8      	str	r0, [r7, #28]
 8022202:	61b9      	str	r1, [r7, #24]
 8022204:	617a      	str	r2, [r7, #20]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 8022206:	697b      	ldr	r3, [r7, #20]
 8022208:	089b      	lsrs	r3, r3, #2
 802220a:	633b      	str	r3, [r7, #48]	; 0x30
  GUI_StatusTypeDef status = GUI_OK;
 802220c:	2327      	movs	r3, #39	; 0x27
 802220e:	2210      	movs	r2, #16
 8022210:	189b      	adds	r3, r3, r2
 8022212:	19db      	adds	r3, r3, r7
 8022214:	2200      	movs	r2, #0
 8022216:	701a      	strb	r2, [r3, #0]

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 8022218:	697b      	ldr	r3, [r7, #20]
 802221a:	2203      	movs	r2, #3
 802221c:	4013      	ands	r3, r2
 802221e:	d001      	beq.n	8022224 <SaveSettingsInFlash+0x2a>
  {
    return (GUI_ERROR);
 8022220:	2303      	movs	r3, #3
 8022222:	e065      	b.n	80222f0 <SaveSettingsInFlash+0xf6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 8022224:	2300      	movs	r3, #0
 8022226:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8022228:	2300      	movs	r3, #0
 802222a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802222c:	e050      	b.n	80222d0 <SaveSettingsInFlash+0xd6>
  {
    value[0] = pSettings[index];
 802222e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022230:	009b      	lsls	r3, r3, #2
 8022232:	69ba      	ldr	r2, [r7, #24]
 8022234:	18d3      	adds	r3, r2, r3
 8022236:	681a      	ldr	r2, [r3, #0]
 8022238:	2110      	movs	r1, #16
 802223a:	2010      	movs	r0, #16
 802223c:	180b      	adds	r3, r1, r0
 802223e:	19db      	adds	r3, r3, r7
 8022240:	601a      	str	r2, [r3, #0]
    index++;
 8022242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022244:	3301      	adds	r3, #1
 8022246:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (index < nb_u32)
 8022248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802224c:	429a      	cmp	r2, r3
 802224e:	d208      	bcs.n	8022262 <SaveSettingsInFlash+0x68>
    {
      value[1] = pSettings[index];
 8022250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022252:	009b      	lsls	r3, r3, #2
 8022254:	69ba      	ldr	r2, [r7, #24]
 8022256:	18d3      	adds	r3, r2, r3
 8022258:	681a      	ldr	r2, [r3, #0]
 802225a:	180b      	adds	r3, r1, r0
 802225c:	19db      	adds	r3, r3, r7
 802225e:	605a      	str	r2, [r3, #4]
 8022260:	e006      	b.n	8022270 <SaveSettingsInFlash+0x76>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8022262:	2310      	movs	r3, #16
 8022264:	2210      	movs	r2, #16
 8022266:	189b      	adds	r3, r3, r2
 8022268:	19db      	adds	r3, r3, r7
 802226a:	2201      	movs	r2, #1
 802226c:	4252      	negs	r2, r2
 802226e:	605a      	str	r2, [r3, #4]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8022270:	2210      	movs	r2, #16
 8022272:	2610      	movs	r6, #16
 8022274:	1993      	adds	r3, r2, r6
 8022276:	19db      	adds	r3, r3, r7
 8022278:	681b      	ldr	r3, [r3, #0]
 802227a:	60bb      	str	r3, [r7, #8]
 802227c:	2300      	movs	r3, #0
 802227e:	60fb      	str	r3, [r7, #12]
 8022280:	1993      	adds	r3, r2, r6
 8022282:	19db      	adds	r3, r3, r7
 8022284:	685b      	ldr	r3, [r3, #4]
 8022286:	603b      	str	r3, [r7, #0]
 8022288:	2300      	movs	r3, #0
 802228a:	607b      	str	r3, [r7, #4]
 802228c:	683b      	ldr	r3, [r7, #0]
 802228e:	001d      	movs	r5, r3
 8022290:	2300      	movs	r3, #0
 8022292:	001c      	movs	r4, r3
 8022294:	68b9      	ldr	r1, [r7, #8]
 8022296:	68fa      	ldr	r2, [r7, #12]
 8022298:	000b      	movs	r3, r1
 802229a:	4323      	orrs	r3, r4
 802229c:	62bb      	str	r3, [r7, #40]	; 0x28
 802229e:	0013      	movs	r3, r2
 80222a0:	432b      	orrs	r3, r5
 80222a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 80222a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222a6:	00da      	lsls	r2, r3, #3
 80222a8:	69fb      	ldr	r3, [r7, #28]
 80222aa:	18d1      	adds	r1, r2, r3
 80222ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80222ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80222b0:	2001      	movs	r0, #1
 80222b2:	f7ec fd13 	bl	800ecdc <HAL_FLASH_Program>
 80222b6:	1e03      	subs	r3, r0, #0
 80222b8:	d004      	beq.n	80222c4 <SaveSettingsInFlash+0xca>
    {
      status = GUI_WRITE_ERROR;
 80222ba:	2327      	movs	r3, #39	; 0x27
 80222bc:	199b      	adds	r3, r3, r6
 80222be:	19db      	adds	r3, r3, r7
 80222c0:	2202      	movs	r2, #2
 80222c2:	701a      	strb	r2, [r3, #0]
    }
    index_flash += 1U;
 80222c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80222c6:	3301      	adds	r3, #1
 80222c8:	63bb      	str	r3, [r7, #56]	; 0x38
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 80222ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80222cc:	3301      	adds	r3, #1
 80222ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80222d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80222d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222d4:	429a      	cmp	r2, r3
 80222d6:	d206      	bcs.n	80222e6 <SaveSettingsInFlash+0xec>
 80222d8:	2327      	movs	r3, #39	; 0x27
 80222da:	2210      	movs	r2, #16
 80222dc:	189b      	adds	r3, r3, r2
 80222de:	19db      	adds	r3, r3, r7
 80222e0:	781b      	ldrb	r3, [r3, #0]
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d0a3      	beq.n	802222e <SaveSettingsInFlash+0x34>
  }
  return status;
 80222e6:	2327      	movs	r3, #39	; 0x27
 80222e8:	2210      	movs	r2, #16
 80222ea:	189b      	adds	r3, r3, r2
 80222ec:	19db      	adds	r3, r3, r7
 80222ee:	781b      	ldrb	r3, [r3, #0]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 80222f0:	0018      	movs	r0, r3
 80222f2:	46bd      	mov	sp, r7
 80222f4:	b011      	add	sp, #68	; 0x44
 80222f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080222f8 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 80222f8:	b580      	push	{r7, lr}
 80222fa:	b086      	sub	sp, #24
 80222fc:	af00      	add	r7, sp, #0
 80222fe:	6078      	str	r0, [r7, #4]
 8022300:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8022302:	687b      	ldr	r3, [r7, #4]
 8022304:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8022306:	230f      	movs	r3, #15
 8022308:	18fb      	adds	r3, r7, r3
 802230a:	2203      	movs	r2, #3
 802230c:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 802230e:	2300      	movs	r3, #0
 8022310:	613b      	str	r3, [r7, #16]
 8022312:	e00c      	b.n	802232e <LoadPDOFromFlash+0x36>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8022314:	697a      	ldr	r2, [r7, #20]
 8022316:	693b      	ldr	r3, [r7, #16]
 8022318:	009b      	lsls	r3, r3, #2
 802231a:	6839      	ldr	r1, [r7, #0]
 802231c:	18cb      	adds	r3, r1, r3
 802231e:	6812      	ldr	r2, [r2, #0]
 8022320:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 8022322:	697b      	ldr	r3, [r7, #20]
 8022324:	3304      	adds	r3, #4
 8022326:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8022328:	693b      	ldr	r3, [r7, #16]
 802232a:	3301      	adds	r3, #1
 802232c:	613b      	str	r3, [r7, #16]
 802232e:	693b      	ldr	r3, [r7, #16]
 8022330:	2b06      	cmp	r3, #6
 8022332:	d9ef      	bls.n	8022314 <LoadPDOFromFlash+0x1c>
    }
    _status = GUI_OK;
 8022334:	210f      	movs	r1, #15
 8022336:	187b      	adds	r3, r7, r1
 8022338:	2200      	movs	r2, #0
 802233a:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 802233c:	187b      	adds	r3, r7, r1
 802233e:	781b      	ldrb	r3, [r3, #0]
}
 8022340:	0018      	movs	r0, r3
 8022342:	46bd      	mov	sp, r7
 8022344:	b006      	add	sp, #24
 8022346:	bd80      	pop	{r7, pc}

08022348 <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8022348:	b590      	push	{r4, r7, lr}
 802234a:	b087      	sub	sp, #28
 802234c:	af00      	add	r7, sp, #0
 802234e:	60f8      	str	r0, [r7, #12]
 8022350:	60b9      	str	r1, [r7, #8]
 8022352:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8022354:	68fb      	ldr	r3, [r7, #12]
 8022356:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8022358:	2413      	movs	r4, #19
 802235a:	193b      	adds	r3, r7, r4
 802235c:	2203      	movs	r2, #3
 802235e:	701a      	strb	r2, [r3, #0]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 8022360:	6979      	ldr	r1, [r7, #20]
 8022362:	687a      	ldr	r2, [r7, #4]
 8022364:	68bb      	ldr	r3, [r7, #8]
 8022366:	0018      	movs	r0, r3
 8022368:	f005 fd13 	bl	8027d92 <memcpy>
    _status = GUI_OK;
 802236c:	193b      	adds	r3, r7, r4
 802236e:	2200      	movs	r2, #0
 8022370:	701a      	strb	r2, [r3, #0]
  }
  return _status;
 8022372:	193b      	adds	r3, r7, r4
 8022374:	781b      	ldrb	r3, [r3, #0]
}
 8022376:	0018      	movs	r0, r3
 8022378:	46bd      	mov	sp, r7
 802237a:	b007      	add	sp, #28
 802237c:	bd90      	pop	{r4, r7, pc}

0802237e <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 802237e:	b580      	push	{r7, lr}
 8022380:	b084      	sub	sp, #16
 8022382:	af00      	add	r7, sp, #0
 8022384:	60f8      	str	r0, [r7, #12]
 8022386:	0008      	movs	r0, r1
 8022388:	0011      	movs	r1, r2
 802238a:	607b      	str	r3, [r7, #4]
 802238c:	230b      	movs	r3, #11
 802238e:	18fb      	adds	r3, r7, r3
 8022390:	1c02      	adds	r2, r0, #0
 8022392:	701a      	strb	r2, [r3, #0]
 8022394:	2308      	movs	r3, #8
 8022396:	18fb      	adds	r3, r7, r3
 8022398:	1c0a      	adds	r2, r1, #0
 802239a:	801a      	strh	r2, [r3, #0]
  if (Ptr == NULL)
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d101      	bne.n	80223a6 <TLV_init_encode+0x28>
  {
    return 0xFF;  /* Buffer is NULL*/
 80223a2:	23ff      	movs	r3, #255	; 0xff
 80223a4:	e04a      	b.n	802243c <TLV_init_encode+0xbe>
  }
  if (SizeMax < 11U)
 80223a6:	2308      	movs	r3, #8
 80223a8:	18fb      	adds	r3, r7, r3
 80223aa:	881b      	ldrh	r3, [r3, #0]
 80223ac:	2b0a      	cmp	r3, #10
 80223ae:	d801      	bhi.n	80223b4 <TLV_init_encode+0x36>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 80223b0:	23ff      	movs	r3, #255	; 0xff
 80223b2:	e043      	b.n	802243c <TLV_init_encode+0xbe>
  }

  ToSendTLV->data = Ptr;
 80223b4:	68fb      	ldr	r3, [r7, #12]
 80223b6:	687a      	ldr	r2, [r7, #4]
 80223b8:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	2208      	movs	r2, #8
 80223be:	18ba      	adds	r2, r7, r2
 80223c0:	8812      	ldrh	r2, [r2, #0]
 80223c2:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	681b      	ldr	r3, [r3, #0]
 80223c8:	22fd      	movs	r2, #253	; 0xfd
 80223ca:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 80223cc:	68fb      	ldr	r3, [r7, #12]
 80223ce:	681b      	ldr	r3, [r3, #0]
 80223d0:	3301      	adds	r3, #1
 80223d2:	22fd      	movs	r2, #253	; 0xfd
 80223d4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 80223d6:	68fb      	ldr	r3, [r7, #12]
 80223d8:	681b      	ldr	r3, [r3, #0]
 80223da:	3302      	adds	r3, #2
 80223dc:	22fd      	movs	r2, #253	; 0xfd
 80223de:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 80223e0:	68fb      	ldr	r3, [r7, #12]
 80223e2:	681b      	ldr	r3, [r3, #0]
 80223e4:	3303      	adds	r3, #3
 80223e6:	22fd      	movs	r2, #253	; 0xfd
 80223e8:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	681b      	ldr	r3, [r3, #0]
 80223ee:	3304      	adds	r3, #4
 80223f0:	220b      	movs	r2, #11
 80223f2:	18ba      	adds	r2, r7, r2
 80223f4:	7812      	ldrb	r2, [r2, #0]
 80223f6:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 80223f8:	68fb      	ldr	r3, [r7, #12]
 80223fa:	681b      	ldr	r3, [r3, #0]
 80223fc:	3305      	adds	r3, #5
 80223fe:	2200      	movs	r2, #0
 8022400:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 8022402:	68fb      	ldr	r3, [r7, #12]
 8022404:	681b      	ldr	r3, [r3, #0]
 8022406:	3306      	adds	r3, #6
 8022408:	2200      	movs	r2, #0
 802240a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 802240c:	68fb      	ldr	r3, [r7, #12]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	3307      	adds	r3, #7
 8022412:	22a5      	movs	r2, #165	; 0xa5
 8022414:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 8022416:	68fb      	ldr	r3, [r7, #12]
 8022418:	681b      	ldr	r3, [r3, #0]
 802241a:	3308      	adds	r3, #8
 802241c:	22a5      	movs	r2, #165	; 0xa5
 802241e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 8022420:	68fb      	ldr	r3, [r7, #12]
 8022422:	681b      	ldr	r3, [r3, #0]
 8022424:	3309      	adds	r3, #9
 8022426:	22a5      	movs	r2, #165	; 0xa5
 8022428:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 802242a:	68fb      	ldr	r3, [r7, #12]
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	330a      	adds	r3, #10
 8022430:	22a5      	movs	r2, #165	; 0xa5
 8022432:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 8022434:	68fb      	ldr	r3, [r7, #12]
 8022436:	2207      	movs	r2, #7
 8022438:	80da      	strh	r2, [r3, #6]

  return 0;
 802243a:	2300      	movs	r3, #0
}
 802243c:	0018      	movs	r0, r3
 802243e:	46bd      	mov	sp, r7
 8022440:	b004      	add	sp, #16
 8022442:	bd80      	pop	{r7, pc}

08022444 <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8022444:	b580      	push	{r7, lr}
 8022446:	b086      	sub	sp, #24
 8022448:	af00      	add	r7, sp, #0
 802244a:	60f8      	str	r0, [r7, #12]
 802244c:	0008      	movs	r0, r1
 802244e:	0011      	movs	r1, r2
 8022450:	607b      	str	r3, [r7, #4]
 8022452:	230b      	movs	r3, #11
 8022454:	18fb      	adds	r3, r7, r3
 8022456:	1c02      	adds	r2, r0, #0
 8022458:	701a      	strb	r2, [r3, #0]
 802245a:	2308      	movs	r3, #8
 802245c:	18fb      	adds	r3, r7, r3
 802245e:	1c0a      	adds	r2, r1, #0
 8022460:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8022462:	68fb      	ldr	r3, [r7, #12]
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	68fa      	ldr	r2, [r7, #12]
 8022468:	88d2      	ldrh	r2, [r2, #6]
 802246a:	189b      	adds	r3, r3, r2
 802246c:	781b      	ldrb	r3, [r3, #0]
 802246e:	2ba5      	cmp	r3, #165	; 0xa5
 8022470:	d001      	beq.n	8022476 <TLV_add+0x32>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8022472:	4b5a      	ldr	r3, [pc, #360]	; (80225dc <TLV_add+0x198>)
 8022474:	e0ae      	b.n	80225d4 <TLV_add+0x190>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8022476:	68fb      	ldr	r3, [r7, #12]
 8022478:	88db      	ldrh	r3, [r3, #6]
 802247a:	001a      	movs	r2, r3
 802247c:	2308      	movs	r3, #8
 802247e:	18fb      	adds	r3, r7, r3
 8022480:	881b      	ldrh	r3, [r3, #0]
 8022482:	18d3      	adds	r3, r2, r3
 8022484:	3307      	adds	r3, #7
 8022486:	68fa      	ldr	r2, [r7, #12]
 8022488:	8892      	ldrh	r2, [r2, #4]
 802248a:	4293      	cmp	r3, r2
 802248c:	d901      	bls.n	8022492 <TLV_add+0x4e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 802248e:	4b53      	ldr	r3, [pc, #332]	; (80225dc <TLV_add+0x198>)
 8022490:	e0a0      	b.n	80225d4 <TLV_add+0x190>
  }
  if (ToSendTLV->data == NULL)
 8022492:	68fb      	ldr	r3, [r7, #12]
 8022494:	681b      	ldr	r3, [r3, #0]
 8022496:	2b00      	cmp	r3, #0
 8022498:	d101      	bne.n	802249e <TLV_add+0x5a>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 802249a:	4b50      	ldr	r3, [pc, #320]	; (80225dc <TLV_add+0x198>)
 802249c:	e09a      	b.n	80225d4 <TLV_add+0x190>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 802249e:	68fb      	ldr	r3, [r7, #12]
 80224a0:	88db      	ldrh	r3, [r3, #6]
 80224a2:	4a4e      	ldr	r2, [pc, #312]	; (80225dc <TLV_add+0x198>)
 80224a4:	4293      	cmp	r3, r2
 80224a6:	d101      	bne.n	80224ac <TLV_add+0x68>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 80224a8:	4b4c      	ldr	r3, [pc, #304]	; (80225dc <TLV_add+0x198>)
 80224aa:	e093      	b.n	80225d4 <TLV_add+0x190>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 80224ac:	68fb      	ldr	r3, [r7, #12]
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	68fa      	ldr	r2, [r7, #12]
 80224b2:	88d2      	ldrh	r2, [r2, #6]
 80224b4:	189b      	adds	r3, r3, r2
 80224b6:	220b      	movs	r2, #11
 80224b8:	18ba      	adds	r2, r7, r2
 80224ba:	7812      	ldrb	r2, [r2, #0]
 80224bc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 80224be:	68fb      	ldr	r3, [r7, #12]
 80224c0:	88db      	ldrh	r3, [r3, #6]
 80224c2:	3301      	adds	r3, #1
 80224c4:	b29a      	uxth	r2, r3
 80224c6:	68fb      	ldr	r3, [r7, #12]
 80224c8:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	88da      	ldrh	r2, [r3, #6]
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 80224d2:	2008      	movs	r0, #8
 80224d4:	183b      	adds	r3, r7, r0
 80224d6:	881b      	ldrh	r3, [r3, #0]
 80224d8:	0a1b      	lsrs	r3, r3, #8
 80224da:	b299      	uxth	r1, r3
 80224dc:	68fb      	ldr	r3, [r7, #12]
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	68fa      	ldr	r2, [r7, #12]
 80224e2:	88d2      	ldrh	r2, [r2, #6]
 80224e4:	189b      	adds	r3, r3, r2
 80224e6:	b2ca      	uxtb	r2, r1
 80224e8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 80224ea:	68fb      	ldr	r3, [r7, #12]
 80224ec:	681a      	ldr	r2, [r3, #0]
 80224ee:	68fb      	ldr	r3, [r7, #12]
 80224f0:	88db      	ldrh	r3, [r3, #6]
 80224f2:	3301      	adds	r3, #1
 80224f4:	18d3      	adds	r3, r2, r3
 80224f6:	183a      	adds	r2, r7, r0
 80224f8:	8812      	ldrh	r2, [r2, #0]
 80224fa:	b2d2      	uxtb	r2, r2
 80224fc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 80224fe:	68fb      	ldr	r3, [r7, #12]
 8022500:	88db      	ldrh	r3, [r3, #6]
 8022502:	3302      	adds	r3, #2
 8022504:	b29a      	uxth	r2, r3
 8022506:	68fb      	ldr	r3, [r7, #12]
 8022508:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 802250a:	2300      	movs	r3, #0
 802250c:	617b      	str	r3, [r7, #20]
 802250e:	e012      	b.n	8022536 <TLV_add+0xf2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8022510:	687a      	ldr	r2, [r7, #4]
 8022512:	697b      	ldr	r3, [r7, #20]
 8022514:	18d2      	adds	r2, r2, r3
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	681b      	ldr	r3, [r3, #0]
 802251a:	68f9      	ldr	r1, [r7, #12]
 802251c:	88c9      	ldrh	r1, [r1, #6]
 802251e:	185b      	adds	r3, r3, r1
 8022520:	7812      	ldrb	r2, [r2, #0]
 8022522:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8022524:	68fb      	ldr	r3, [r7, #12]
 8022526:	88db      	ldrh	r3, [r3, #6]
 8022528:	3301      	adds	r3, #1
 802252a:	b29a      	uxth	r2, r3
 802252c:	68fb      	ldr	r3, [r7, #12]
 802252e:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8022530:	697b      	ldr	r3, [r7, #20]
 8022532:	3301      	adds	r3, #1
 8022534:	617b      	str	r3, [r7, #20]
 8022536:	2108      	movs	r1, #8
 8022538:	187b      	adds	r3, r7, r1
 802253a:	881b      	ldrh	r3, [r3, #0]
 802253c:	697a      	ldr	r2, [r7, #20]
 802253e:	429a      	cmp	r2, r3
 8022540:	d3e6      	bcc.n	8022510 <TLV_add+0xcc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 8022542:	68fb      	ldr	r3, [r7, #12]
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	68fa      	ldr	r2, [r7, #12]
 8022548:	88d2      	ldrh	r2, [r2, #6]
 802254a:	189b      	adds	r3, r3, r2
 802254c:	22a5      	movs	r2, #165	; 0xa5
 802254e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	681a      	ldr	r2, [r3, #0]
 8022554:	68fb      	ldr	r3, [r7, #12]
 8022556:	88db      	ldrh	r3, [r3, #6]
 8022558:	3301      	adds	r3, #1
 802255a:	18d3      	adds	r3, r2, r3
 802255c:	22a5      	movs	r2, #165	; 0xa5
 802255e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8022560:	68fb      	ldr	r3, [r7, #12]
 8022562:	681a      	ldr	r2, [r3, #0]
 8022564:	68fb      	ldr	r3, [r7, #12]
 8022566:	88db      	ldrh	r3, [r3, #6]
 8022568:	3302      	adds	r3, #2
 802256a:	18d3      	adds	r3, r2, r3
 802256c:	22a5      	movs	r2, #165	; 0xa5
 802256e:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 8022570:	68fb      	ldr	r3, [r7, #12]
 8022572:	681a      	ldr	r2, [r3, #0]
 8022574:	68fb      	ldr	r3, [r7, #12]
 8022576:	88db      	ldrh	r3, [r3, #6]
 8022578:	3303      	adds	r3, #3
 802257a:	18d3      	adds	r3, r2, r3
 802257c:	22a5      	movs	r2, #165	; 0xa5
 802257e:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8022580:	68fb      	ldr	r3, [r7, #12]
 8022582:	681b      	ldr	r3, [r3, #0]
 8022584:	3305      	adds	r3, #5
 8022586:	781b      	ldrb	r3, [r3, #0]
 8022588:	b29b      	uxth	r3, r3
 802258a:	021b      	lsls	r3, r3, #8
 802258c:	b29a      	uxth	r2, r3
 802258e:	68fb      	ldr	r3, [r7, #12]
 8022590:	681b      	ldr	r3, [r3, #0]
 8022592:	3306      	adds	r3, #6
 8022594:	781b      	ldrb	r3, [r3, #0]
 8022596:	b29b      	uxth	r3, r3
 8022598:	18d3      	adds	r3, r2, r3
 802259a:	b29a      	uxth	r2, r3
 802259c:	187b      	adds	r3, r7, r1
 802259e:	881b      	ldrh	r3, [r3, #0]
 80225a0:	18d3      	adds	r3, r2, r3
 80225a2:	b29a      	uxth	r2, r3
 80225a4:	2012      	movs	r0, #18
 80225a6:	183b      	adds	r3, r7, r0
 80225a8:	3203      	adds	r2, #3
 80225aa:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 80225ac:	183b      	adds	r3, r7, r0
 80225ae:	881b      	ldrh	r3, [r3, #0]
 80225b0:	0a1b      	lsrs	r3, r3, #8
 80225b2:	b29a      	uxth	r2, r3
 80225b4:	68fb      	ldr	r3, [r7, #12]
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	3305      	adds	r3, #5
 80225ba:	b2d2      	uxtb	r2, r2
 80225bc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 80225be:	68fb      	ldr	r3, [r7, #12]
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	3306      	adds	r3, #6
 80225c4:	183a      	adds	r2, r7, r0
 80225c6:	8812      	ldrh	r2, [r2, #0]
 80225c8:	b2d2      	uxtb	r2, r2
 80225ca:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 80225cc:	187b      	adds	r3, r7, r1
 80225ce:	881b      	ldrh	r3, [r3, #0]
 80225d0:	3303      	adds	r3, #3
 80225d2:	b29b      	uxth	r3, r3
}
 80225d4:	0018      	movs	r0, r3
 80225d6:	46bd      	mov	sp, r7
 80225d8:	b006      	add	sp, #24
 80225da:	bd80      	pop	{r7, pc}
 80225dc:	0000ffff 	.word	0x0000ffff

080225e0 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b086      	sub	sp, #24
 80225e4:	af00      	add	r7, sp, #0
 80225e6:	60f8      	str	r0, [r7, #12]
 80225e8:	60b9      	str	r1, [r7, #8]
 80225ea:	1dbb      	adds	r3, r7, #6
 80225ec:	801a      	strh	r2, [r3, #0]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	681b      	ldr	r3, [r3, #0]
 80225f2:	68fa      	ldr	r2, [r7, #12]
 80225f4:	88d2      	ldrh	r2, [r2, #6]
 80225f6:	189b      	adds	r3, r3, r2
 80225f8:	781b      	ldrb	r3, [r3, #0]
 80225fa:	2ba5      	cmp	r3, #165	; 0xa5
 80225fc:	d001      	beq.n	8022602 <TLV_addValue+0x22>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 80225fe:	4b41      	ldr	r3, [pc, #260]	; (8022704 <TLV_addValue+0x124>)
 8022600:	e07c      	b.n	80226fc <TLV_addValue+0x11c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8022602:	68fb      	ldr	r3, [r7, #12]
 8022604:	88db      	ldrh	r3, [r3, #6]
 8022606:	001a      	movs	r2, r3
 8022608:	1dbb      	adds	r3, r7, #6
 802260a:	881b      	ldrh	r3, [r3, #0]
 802260c:	18d3      	adds	r3, r2, r3
 802260e:	3307      	adds	r3, #7
 8022610:	68fa      	ldr	r2, [r7, #12]
 8022612:	8892      	ldrh	r2, [r2, #4]
 8022614:	4293      	cmp	r3, r2
 8022616:	d901      	bls.n	802261c <TLV_addValue+0x3c>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8022618:	4b3a      	ldr	r3, [pc, #232]	; (8022704 <TLV_addValue+0x124>)
 802261a:	e06f      	b.n	80226fc <TLV_addValue+0x11c>
  }
  if (ToSendTLV->data == NULL)
 802261c:	68fb      	ldr	r3, [r7, #12]
 802261e:	681b      	ldr	r3, [r3, #0]
 8022620:	2b00      	cmp	r3, #0
 8022622:	d101      	bne.n	8022628 <TLV_addValue+0x48>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8022624:	4b37      	ldr	r3, [pc, #220]	; (8022704 <TLV_addValue+0x124>)
 8022626:	e069      	b.n	80226fc <TLV_addValue+0x11c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 8022628:	68fb      	ldr	r3, [r7, #12]
 802262a:	88db      	ldrh	r3, [r3, #6]
 802262c:	4a35      	ldr	r2, [pc, #212]	; (8022704 <TLV_addValue+0x124>)
 802262e:	4293      	cmp	r3, r2
 8022630:	d101      	bne.n	8022636 <TLV_addValue+0x56>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8022632:	4b34      	ldr	r3, [pc, #208]	; (8022704 <TLV_addValue+0x124>)
 8022634:	e062      	b.n	80226fc <TLV_addValue+0x11c>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 8022636:	2300      	movs	r3, #0
 8022638:	617b      	str	r3, [r7, #20]
 802263a:	e012      	b.n	8022662 <TLV_addValue+0x82>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 802263c:	68ba      	ldr	r2, [r7, #8]
 802263e:	697b      	ldr	r3, [r7, #20]
 8022640:	18d2      	adds	r2, r2, r3
 8022642:	68fb      	ldr	r3, [r7, #12]
 8022644:	681b      	ldr	r3, [r3, #0]
 8022646:	68f9      	ldr	r1, [r7, #12]
 8022648:	88c9      	ldrh	r1, [r1, #6]
 802264a:	185b      	adds	r3, r3, r1
 802264c:	7812      	ldrb	r2, [r2, #0]
 802264e:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 8022650:	68fb      	ldr	r3, [r7, #12]
 8022652:	88db      	ldrh	r3, [r3, #6]
 8022654:	3301      	adds	r3, #1
 8022656:	b29a      	uxth	r2, r3
 8022658:	68fb      	ldr	r3, [r7, #12]
 802265a:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	3301      	adds	r3, #1
 8022660:	617b      	str	r3, [r7, #20]
 8022662:	1dbb      	adds	r3, r7, #6
 8022664:	881b      	ldrh	r3, [r3, #0]
 8022666:	697a      	ldr	r2, [r7, #20]
 8022668:	429a      	cmp	r2, r3
 802266a:	d3e7      	bcc.n	802263c <TLV_addValue+0x5c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 802266c:	68fb      	ldr	r3, [r7, #12]
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	68fa      	ldr	r2, [r7, #12]
 8022672:	88d2      	ldrh	r2, [r2, #6]
 8022674:	189b      	adds	r3, r3, r2
 8022676:	22a5      	movs	r2, #165	; 0xa5
 8022678:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 802267a:	68fb      	ldr	r3, [r7, #12]
 802267c:	681a      	ldr	r2, [r3, #0]
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	88db      	ldrh	r3, [r3, #6]
 8022682:	3301      	adds	r3, #1
 8022684:	18d3      	adds	r3, r2, r3
 8022686:	22a5      	movs	r2, #165	; 0xa5
 8022688:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 802268a:	68fb      	ldr	r3, [r7, #12]
 802268c:	681a      	ldr	r2, [r3, #0]
 802268e:	68fb      	ldr	r3, [r7, #12]
 8022690:	88db      	ldrh	r3, [r3, #6]
 8022692:	3302      	adds	r3, #2
 8022694:	18d3      	adds	r3, r2, r3
 8022696:	22a5      	movs	r2, #165	; 0xa5
 8022698:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 802269a:	68fb      	ldr	r3, [r7, #12]
 802269c:	681a      	ldr	r2, [r3, #0]
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	88db      	ldrh	r3, [r3, #6]
 80226a2:	3303      	adds	r3, #3
 80226a4:	18d3      	adds	r3, r2, r3
 80226a6:	22a5      	movs	r2, #165	; 0xa5
 80226a8:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 80226aa:	68fb      	ldr	r3, [r7, #12]
 80226ac:	681b      	ldr	r3, [r3, #0]
 80226ae:	3305      	adds	r3, #5
 80226b0:	781b      	ldrb	r3, [r3, #0]
 80226b2:	b29b      	uxth	r3, r3
 80226b4:	021b      	lsls	r3, r3, #8
 80226b6:	b29a      	uxth	r2, r3
 80226b8:	68fb      	ldr	r3, [r7, #12]
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	3306      	adds	r3, #6
 80226be:	781b      	ldrb	r3, [r3, #0]
 80226c0:	b29b      	uxth	r3, r3
 80226c2:	18d3      	adds	r3, r2, r3
 80226c4:	b299      	uxth	r1, r3
 80226c6:	2012      	movs	r0, #18
 80226c8:	183b      	adds	r3, r7, r0
 80226ca:	1dba      	adds	r2, r7, #6
 80226cc:	8812      	ldrh	r2, [r2, #0]
 80226ce:	188a      	adds	r2, r1, r2
 80226d0:	801a      	strh	r2, [r3, #0]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 80226d2:	0001      	movs	r1, r0
 80226d4:	187b      	adds	r3, r7, r1
 80226d6:	881b      	ldrh	r3, [r3, #0]
 80226d8:	0a1b      	lsrs	r3, r3, #8
 80226da:	b29a      	uxth	r2, r3
 80226dc:	68fb      	ldr	r3, [r7, #12]
 80226de:	681b      	ldr	r3, [r3, #0]
 80226e0:	3305      	adds	r3, #5
 80226e2:	b2d2      	uxtb	r2, r2
 80226e4:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 80226e6:	68fb      	ldr	r3, [r7, #12]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	3306      	adds	r3, #6
 80226ec:	187a      	adds	r2, r7, r1
 80226ee:	8812      	ldrh	r2, [r2, #0]
 80226f0:	b2d2      	uxtb	r2, r2
 80226f2:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 80226f4:	1dbb      	adds	r3, r7, #6
 80226f6:	881b      	ldrh	r3, [r3, #0]
 80226f8:	3303      	adds	r3, #3
 80226fa:	b29b      	uxth	r3, r3
}
 80226fc:	0018      	movs	r0, r3
 80226fe:	46bd      	mov	sp, r7
 8022700:	b006      	add	sp, #24
 8022702:	bd80      	pop	{r7, pc}
 8022704:	0000ffff 	.word	0x0000ffff

08022708 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	b082      	sub	sp, #8
 802270c:	af00      	add	r7, sp, #0
 802270e:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	2200      	movs	r2, #0
 8022714:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	2201      	movs	r2, #1
 802271a:	4252      	negs	r2, r2
 802271c:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	2200      	movs	r2, #0
 8022722:	809a      	strh	r2, [r3, #4]
}
 8022724:	46c0      	nop			; (mov r8, r8)
 8022726:	46bd      	mov	sp, r7
 8022728:	b002      	add	sp, #8
 802272a:	bd80      	pop	{r7, pc}

0802272c <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 802272c:	b580      	push	{r7, lr}
 802272e:	b082      	sub	sp, #8
 8022730:	af00      	add	r7, sp, #0
 8022732:	6078      	str	r0, [r7, #4]
 8022734:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 8022736:	683b      	ldr	r3, [r7, #0]
 8022738:	2b00      	cmp	r3, #0
 802273a:	d101      	bne.n	8022740 <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 802273c:	23ff      	movs	r3, #255	; 0xff
 802273e:	e01d      	b.n	802277c <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 8022740:	683b      	ldr	r3, [r7, #0]
 8022742:	781b      	ldrb	r3, [r3, #0]
 8022744:	2bfd      	cmp	r3, #253	; 0xfd
 8022746:	d10e      	bne.n	8022766 <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	3301      	adds	r3, #1
 802274c:	781b      	ldrb	r3, [r3, #0]
 802274e:	2bfd      	cmp	r3, #253	; 0xfd
 8022750:	d109      	bne.n	8022766 <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 8022752:	683b      	ldr	r3, [r7, #0]
 8022754:	3302      	adds	r3, #2
 8022756:	781b      	ldrb	r3, [r3, #0]
 8022758:	2bfd      	cmp	r3, #253	; 0xfd
 802275a:	d104      	bne.n	8022766 <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 802275c:	683b      	ldr	r3, [r7, #0]
 802275e:	3303      	adds	r3, #3
 8022760:	781b      	ldrb	r3, [r3, #0]
 8022762:	2bfd      	cmp	r3, #253	; 0xfd
 8022764:	d001      	beq.n	802276a <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 8022766:	23ff      	movs	r3, #255	; 0xff
 8022768:	e008      	b.n	802277c <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	683a      	ldr	r2, [r7, #0]
 802276e:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	2207      	movs	r2, #7
 8022774:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	889b      	ldrh	r3, [r3, #4]
 802277a:	b2db      	uxtb	r3, r3
}
 802277c:	0018      	movs	r0, r3
 802277e:	46bd      	mov	sp, r7
 8022780:	b002      	add	sp, #8
 8022782:	bd80      	pop	{r7, pc}

08022784 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b084      	sub	sp, #16
 8022788:	af00      	add	r7, sp, #0
 802278a:	60f8      	str	r0, [r7, #12]
 802278c:	60b9      	str	r1, [r7, #8]
 802278e:	607a      	str	r2, [r7, #4]
 8022790:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 8022792:	68fb      	ldr	r3, [r7, #12]
 8022794:	681b      	ldr	r3, [r3, #0]
 8022796:	2b00      	cmp	r3, #0
 8022798:	d101      	bne.n	802279e <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 802279a:	23ff      	movs	r3, #255	; 0xff
 802279c:	e048      	b.n	8022830 <TLV_get+0xac>
  }
  if (ToProcessTLV->cursor == 0U)
 802279e:	68fb      	ldr	r3, [r7, #12]
 80227a0:	889b      	ldrh	r3, [r3, #4]
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d101      	bne.n	80227aa <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 80227a6:	23ff      	movs	r3, #255	; 0xff
 80227a8:	e042      	b.n	8022830 <TLV_get+0xac>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 80227aa:	68fb      	ldr	r3, [r7, #12]
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	68fa      	ldr	r2, [r7, #12]
 80227b0:	8892      	ldrh	r2, [r2, #4]
 80227b2:	189b      	adds	r3, r3, r2
 80227b4:	781b      	ldrb	r3, [r3, #0]
 80227b6:	2ba5      	cmp	r3, #165	; 0xa5
 80227b8:	d101      	bne.n	80227be <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 80227ba:	23ff      	movs	r3, #255	; 0xff
 80227bc:	e038      	b.n	8022830 <TLV_get+0xac>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	68fa      	ldr	r2, [r7, #12]
 80227c4:	8892      	ldrh	r2, [r2, #4]
 80227c6:	189b      	adds	r3, r3, r2
 80227c8:	781a      	ldrb	r2, [r3, #0]
 80227ca:	68bb      	ldr	r3, [r7, #8]
 80227cc:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 80227ce:	68fb      	ldr	r3, [r7, #12]
 80227d0:	889b      	ldrh	r3, [r3, #4]
 80227d2:	3301      	adds	r3, #1
 80227d4:	b29a      	uxth	r2, r3
 80227d6:	68fb      	ldr	r3, [r7, #12]
 80227d8:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	68fa      	ldr	r2, [r7, #12]
 80227e0:	8892      	ldrh	r2, [r2, #4]
 80227e2:	189b      	adds	r3, r3, r2
 80227e4:	781b      	ldrb	r3, [r3, #0]
 80227e6:	b29b      	uxth	r3, r3
 80227e8:	021b      	lsls	r3, r3, #8
 80227ea:	b29a      	uxth	r2, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 80227ec:	68fb      	ldr	r3, [r7, #12]
 80227ee:	6819      	ldr	r1, [r3, #0]
 80227f0:	68fb      	ldr	r3, [r7, #12]
 80227f2:	889b      	ldrh	r3, [r3, #4]
 80227f4:	3301      	adds	r3, #1
 80227f6:	18cb      	adds	r3, r1, r3
 80227f8:	781b      	ldrb	r3, [r3, #0]
 80227fa:	b29b      	uxth	r3, r3
 80227fc:	18d3      	adds	r3, r2, r3
 80227fe:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 8022804:	68fb      	ldr	r3, [r7, #12]
 8022806:	889b      	ldrh	r3, [r3, #4]
 8022808:	3302      	adds	r3, #2
 802280a:	b29a      	uxth	r2, r3
 802280c:	68fb      	ldr	r3, [r7, #12]
 802280e:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 8022810:	68fb      	ldr	r3, [r7, #12]
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	68fa      	ldr	r2, [r7, #12]
 8022816:	8892      	ldrh	r2, [r2, #4]
 8022818:	189a      	adds	r2, r3, r2
 802281a:	683b      	ldr	r3, [r7, #0]
 802281c:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 802281e:	68fb      	ldr	r3, [r7, #12]
 8022820:	889a      	ldrh	r2, [r3, #4]
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	881b      	ldrh	r3, [r3, #0]
 8022826:	18d3      	adds	r3, r2, r3
 8022828:	b29a      	uxth	r2, r3
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	809a      	strh	r2, [r3, #4]

  return 0;
 802282e:	2300      	movs	r3, #0
}
 8022830:	0018      	movs	r0, r3
 8022832:	46bd      	mov	sp, r7
 8022834:	b004      	add	sp, #16
 8022836:	bd80      	pop	{r7, pc}

08022838 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 8022838:	b580      	push	{r7, lr}
 802283a:	b082      	sub	sp, #8
 802283c:	af00      	add	r7, sp, #0
 802283e:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	2200      	movs	r2, #0
 8022844:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	2200      	movs	r2, #0
 802284a:	809a      	strh	r2, [r3, #4]
}
 802284c:	46c0      	nop			; (mov r8, r8)
 802284e:	46bd      	mov	sp, r7
 8022850:	b002      	add	sp, #8
 8022852:	bd80      	pop	{r7, pc}

08022854 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b084      	sub	sp, #16
 8022858:	af00      	add	r7, sp, #0
 802285a:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 802285c:	230f      	movs	r3, #15
 802285e:	18fb      	adds	r3, r7, r3
 8022860:	2200      	movs	r2, #0
 8022862:	701a      	strb	r2, [r3, #0]

  while (pString[start] == TLV_SOF)
 8022864:	e005      	b.n	8022872 <TLV_get_string_length+0x1e>
  {
    start++;
 8022866:	210f      	movs	r1, #15
 8022868:	187b      	adds	r3, r7, r1
 802286a:	781a      	ldrb	r2, [r3, #0]
 802286c:	187b      	adds	r3, r7, r1
 802286e:	3201      	adds	r2, #1
 8022870:	701a      	strb	r2, [r3, #0]
  while (pString[start] == TLV_SOF)
 8022872:	210f      	movs	r1, #15
 8022874:	187b      	adds	r3, r7, r1
 8022876:	781b      	ldrb	r3, [r3, #0]
 8022878:	687a      	ldr	r2, [r7, #4]
 802287a:	18d3      	adds	r3, r2, r3
 802287c:	781b      	ldrb	r3, [r3, #0]
 802287e:	2bfd      	cmp	r3, #253	; 0xfd
 8022880:	d0f1      	beq.n	8022866 <TLV_get_string_length+0x12>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 8022882:	187b      	adds	r3, r7, r1
 8022884:	781b      	ldrb	r3, [r3, #0]
 8022886:	3301      	adds	r3, #1
 8022888:	687a      	ldr	r2, [r7, #4]
 802288a:	18d3      	adds	r3, r2, r3
 802288c:	781b      	ldrb	r3, [r3, #0]
 802288e:	021b      	lsls	r3, r3, #8
 8022890:	b21a      	sxth	r2, r3
 8022892:	187b      	adds	r3, r7, r1
 8022894:	781b      	ldrb	r3, [r3, #0]
 8022896:	3302      	adds	r3, #2
 8022898:	6879      	ldr	r1, [r7, #4]
 802289a:	18cb      	adds	r3, r1, r3
 802289c:	781b      	ldrb	r3, [r3, #0]
 802289e:	b21b      	sxth	r3, r3
 80228a0:	4313      	orrs	r3, r2
 80228a2:	b21a      	sxth	r2, r3
 80228a4:	210c      	movs	r1, #12
 80228a6:	187b      	adds	r3, r7, r1
 80228a8:	801a      	strh	r2, [r3, #0]
  length += 3U;
 80228aa:	187b      	adds	r3, r7, r1
 80228ac:	187a      	adds	r2, r7, r1
 80228ae:	8812      	ldrh	r2, [r2, #0]
 80228b0:	3203      	adds	r2, #3
 80228b2:	801a      	strh	r2, [r3, #0]

  return length;
 80228b4:	187b      	adds	r3, r7, r1
 80228b6:	881b      	ldrh	r3, [r3, #0]
}
 80228b8:	0018      	movs	r0, r3
 80228ba:	46bd      	mov	sp, r7
 80228bc:	b004      	add	sp, #16
 80228be:	bd80      	pop	{r7, pc}

080228c0 <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 80228c0:	b580      	push	{r7, lr}
 80228c2:	b086      	sub	sp, #24
 80228c4:	af00      	add	r7, sp, #0
 80228c6:	60f8      	str	r0, [r7, #12]
 80228c8:	60b9      	str	r1, [r7, #8]
 80228ca:	607a      	str	r2, [r7, #4]
 80228cc:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 80228ce:	2317      	movs	r3, #23
 80228d0:	18fb      	adds	r3, r7, r3
 80228d2:	2201      	movs	r2, #1
 80228d4:	701a      	strb	r2, [r3, #0]
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 80228d6:	f7fe ff95 	bl	8021804 <BSP_GUI_LoadDataFromFlash>
 80228da:	0003      	movs	r3, r0
 80228dc:	1e5a      	subs	r2, r3, #1
 80228de:	4193      	sbcs	r3, r2
 80228e0:	b2db      	uxtb	r3, r3
 80228e2:	001a      	movs	r2, r3
 80228e4:	4b3f      	ldr	r3, [pc, #252]	; (80229e4 <GUI_Init+0x124>)
 80228e6:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 80228e8:	4b3f      	ldr	r3, [pc, #252]	; (80229e8 <GUI_Init+0x128>)
 80228ea:	799b      	ldrb	r3, [r3, #6]
 80228ec:	2b00      	cmp	r3, #0
 80228ee:	d003      	beq.n	80228f8 <GUI_Init+0x38>
 80228f0:	4b3d      	ldr	r3, [pc, #244]	; (80229e8 <GUI_Init+0x128>)
 80228f2:	79db      	ldrb	r3, [r3, #7]
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d115      	bne.n	8022924 <GUI_Init+0x64>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 80228f8:	4b3c      	ldr	r3, [pc, #240]	; (80229ec <GUI_Init+0x12c>)
 80228fa:	226b      	movs	r2, #107	; 0x6b
 80228fc:	189b      	adds	r3, r3, r2
 80228fe:	785a      	ldrb	r2, [r3, #1]
 8022900:	2101      	movs	r1, #1
 8022902:	400a      	ands	r2, r1
 8022904:	1c11      	adds	r1, r2, #0
 8022906:	2260      	movs	r2, #96	; 0x60
 8022908:	4252      	negs	r2, r2
 802290a:	430a      	orrs	r2, r1
 802290c:	705a      	strb	r2, [r3, #1]
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 802290e:	4b37      	ldr	r3, [pc, #220]	; (80229ec <GUI_Init+0x12c>)
 8022910:	226b      	movs	r2, #107	; 0x6b
 8022912:	189b      	adds	r3, r3, r2
 8022914:	789a      	ldrb	r2, [r3, #2]
 8022916:	217f      	movs	r1, #127	; 0x7f
 8022918:	438a      	bics	r2, r1
 802291a:	1c11      	adds	r1, r2, #0
 802291c:	2232      	movs	r2, #50	; 0x32
 802291e:	430a      	orrs	r2, r1
 8022920:	709a      	strb	r2, [r3, #2]
 8022922:	e040      	b.n	80229a6 <GUI_Init+0xe6>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8022924:	4b30      	ldr	r3, [pc, #192]	; (80229e8 <GUI_Init+0x128>)
 8022926:	79db      	ldrb	r3, [r3, #7]
 8022928:	001a      	movs	r2, r3
 802292a:	2364      	movs	r3, #100	; 0x64
 802292c:	435a      	muls	r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 802292e:	4b2e      	ldr	r3, [pc, #184]	; (80229e8 <GUI_Init+0x128>)
 8022930:	79db      	ldrb	r3, [r3, #7]
 8022932:	0019      	movs	r1, r3
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 8022934:	4b2c      	ldr	r3, [pc, #176]	; (80229e8 <GUI_Init+0x128>)
 8022936:	799b      	ldrb	r3, [r3, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 8022938:	18cb      	adds	r3, r1, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 802293a:	0019      	movs	r1, r3
 802293c:	0010      	movs	r0, r2
 802293e:	f7e3 fc6b 	bl	8006218 <__udivsi3>
 8022942:	0003      	movs	r3, r0
 8022944:	1c1a      	adds	r2, r3, #0
 8022946:	237f      	movs	r3, #127	; 0x7f
 8022948:	4013      	ands	r3, r2
 802294a:	b2da      	uxtb	r2, r3
 802294c:	4b27      	ldr	r3, [pc, #156]	; (80229ec <GUI_Init+0x12c>)
 802294e:	216b      	movs	r1, #107	; 0x6b
 8022950:	185b      	adds	r3, r3, r1
 8022952:	217f      	movs	r1, #127	; 0x7f
 8022954:	400a      	ands	r2, r1
 8022956:	0010      	movs	r0, r2
 8022958:	789a      	ldrb	r2, [r3, #2]
 802295a:	217f      	movs	r1, #127	; 0x7f
 802295c:	438a      	bics	r2, r1
 802295e:	1c11      	adds	r1, r2, #0
 8022960:	1c02      	adds	r2, r0, #0
 8022962:	430a      	orrs	r2, r1
 8022964:	709a      	strb	r2, [r3, #2]
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8022966:	4b20      	ldr	r3, [pc, #128]	; (80229e8 <GUI_Init+0x128>)
 8022968:	79db      	ldrb	r3, [r3, #7]
 802296a:	001a      	movs	r2, r3
 802296c:	2364      	movs	r3, #100	; 0x64
 802296e:	435a      	muls	r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 8022970:	4b1e      	ldr	r3, [pc, #120]	; (80229ec <GUI_Init+0x12c>)
 8022972:	216d      	movs	r1, #109	; 0x6d
 8022974:	5c5b      	ldrb	r3, [r3, r1]
 8022976:	065b      	lsls	r3, r3, #25
 8022978:	0e5b      	lsrs	r3, r3, #25
 802297a:	b2db      	uxtb	r3, r3
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 802297c:	0019      	movs	r1, r3
 802297e:	0010      	movs	r0, r2
 8022980:	f7e3 fc4a 	bl	8006218 <__udivsi3>
 8022984:	0003      	movs	r3, r0
 8022986:	1c1a      	adds	r2, r3, #0
 8022988:	237f      	movs	r3, #127	; 0x7f
 802298a:	4013      	ands	r3, r2
 802298c:	b2d9      	uxtb	r1, r3
 802298e:	4b17      	ldr	r3, [pc, #92]	; (80229ec <GUI_Init+0x12c>)
 8022990:	226b      	movs	r2, #107	; 0x6b
 8022992:	189b      	adds	r3, r3, r2
 8022994:	1c0a      	adds	r2, r1, #0
 8022996:	1890      	adds	r0, r2, r2
 8022998:	785a      	ldrb	r2, [r3, #1]
 802299a:	2101      	movs	r1, #1
 802299c:	400a      	ands	r2, r1
 802299e:	1c11      	adds	r1, r2, #0
 80229a0:	1c02      	adds	r2, r0, #0
 80229a2:	430a      	orrs	r2, r1
 80229a4:	705a      	strb	r2, [r3, #1]
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 80229a6:	4b12      	ldr	r3, [pc, #72]	; (80229f0 <GUI_Init+0x130>)
 80229a8:	68fa      	ldr	r2, [r7, #12]
 80229aa:	601a      	str	r2, [r3, #0]
  pCB_HWPDType        = CB_HWPDType;
 80229ac:	4b11      	ldr	r3, [pc, #68]	; (80229f4 <GUI_Init+0x134>)
 80229ae:	68ba      	ldr	r2, [r7, #8]
 80229b0:	601a      	str	r2, [r3, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 80229b2:	4b11      	ldr	r3, [pc, #68]	; (80229f8 <GUI_Init+0x138>)
 80229b4:	687a      	ldr	r2, [r7, #4]
 80229b6:	601a      	str	r2, [r3, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 80229b8:	4b10      	ldr	r3, [pc, #64]	; (80229fc <GUI_Init+0x13c>)
 80229ba:	683a      	ldr	r2, [r7, #0]
 80229bc:	601a      	str	r2, [r3, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 80229be:	4a10      	ldr	r2, [pc, #64]	; (8022a00 <GUI_Init+0x140>)
 80229c0:	4910      	ldr	r1, [pc, #64]	; (8022a04 <GUI_Init+0x144>)
 80229c2:	4b11      	ldr	r3, [pc, #68]	; (8022a08 <GUI_Init+0x148>)
 80229c4:	0018      	movs	r0, r3
 80229c6:	f7fb fd89 	bl	801e4dc <USBPD_DPM_SetNotification_GUI>

#if !defined(USBPD_THREADX)
  _status = (USBPD_FunctionalState) GUI_InitOS(NULL);
 80229ca:	2000      	movs	r0, #0
 80229cc:	f000 f81e 	bl	8022a0c <GUI_InitOS>
 80229d0:	0002      	movs	r2, r0
 80229d2:	2117      	movs	r1, #23
 80229d4:	187b      	adds	r3, r7, r1
 80229d6:	701a      	strb	r2, [r3, #0]
#endif /* !USBPD_THREADX */
  return _status;
 80229d8:	187b      	adds	r3, r7, r1
 80229da:	781b      	ldrb	r3, [r3, #0]
}
 80229dc:	0018      	movs	r0, r3
 80229de:	46bd      	mov	sp, r7
 80229e0:	b006      	add	sp, #24
 80229e2:	bd80      	pop	{r7, pc}
 80229e4:	20005049 	.word	0x20005049
 80229e8:	200001b4 	.word	0x200001b4
 80229ec:	200001c8 	.word	0x200001c8
 80229f0:	20005054 	.word	0x20005054
 80229f4:	20005058 	.word	0x20005058
 80229f8:	2000505c 	.word	0x2000505c
 80229fc:	20005060 	.word	0x20005060
 8022a00:	08023af1 	.word	0x08023af1
 8022a04:	08023a21 	.word	0x08023a21
 8022a08:	08022de7 	.word	0x08022de7

08022a0c <GUI_InitOS>:

uint32_t GUI_InitOS(void *MemoryPtr)
{
 8022a0c:	b590      	push	{r4, r7, lr}
 8022a0e:	b08d      	sub	sp, #52	; 0x34
 8022a10:	af00      	add	r7, sp, #0
 8022a12:	6078      	str	r0, [r7, #4]
  static uint8_t _init = 0;
  GUIOS_INIT();
 8022a14:	2301      	movs	r3, #1
 8022a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* This init check to keep the compatibility with the previous version of the GUI */
  /* Only threadX required to separate the OS object init with the init code.       */
  if (_init == 0)
 8022a18:	4b1f      	ldr	r3, [pc, #124]	; (8022a98 <GUI_InitOS+0x8c>)
 8022a1a:	781b      	ldrb	r3, [r3, #0]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d134      	bne.n	8022a8a <GUI_InitOS+0x7e>
  {
    _init = 1;
 8022a20:	4b1d      	ldr	r3, [pc, #116]	; (8022a98 <GUI_InitOS+0x8c>)
 8022a22:	2201      	movs	r2, #1
 8022a24:	701a      	strb	r2, [r3, #0]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_CREATE_QUEUE(GUIMsgBox, "GUIBOX", GUI_BOX_MESSAGES_MAX, GUIOS_ELEMENT_SIZE);
 8022a26:	2200      	movs	r2, #0
 8022a28:	2104      	movs	r1, #4
 8022a2a:	201e      	movs	r0, #30
 8022a2c:	f7f8 fd32 	bl	801b494 <osMessageQueueNew>
 8022a30:	0002      	movs	r2, r0
 8022a32:	4b1a      	ldr	r3, [pc, #104]	; (8022a9c <GUI_InitOS+0x90>)
 8022a34:	601a      	str	r2, [r3, #0]
 8022a36:	4b19      	ldr	r3, [pc, #100]	; (8022a9c <GUI_InitOS+0x90>)
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	2b00      	cmp	r3, #0
 8022a3c:	d102      	bne.n	8022a44 <GUI_InitOS+0x38>
 8022a3e:	2300      	movs	r3, #0
 8022a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022a42:	e023      	b.n	8022a8c <GUI_InitOS+0x80>
    GUIOS_CREATE_TASK(GUI_ThreadID, GUI, TaskGUI, OS_GUI_PRIORITY, OS_GUI_STACK_SIZE, &GUIMsgBox);
 8022a44:	2408      	movs	r4, #8
 8022a46:	193b      	adds	r3, r7, r4
 8022a48:	0018      	movs	r0, r3
 8022a4a:	2324      	movs	r3, #36	; 0x24
 8022a4c:	001a      	movs	r2, r3
 8022a4e:	2100      	movs	r1, #0
 8022a50:	f005 f806 	bl	8027a60 <memset>
 8022a54:	0021      	movs	r1, r4
 8022a56:	187b      	adds	r3, r7, r1
 8022a58:	4a11      	ldr	r2, [pc, #68]	; (8022aa0 <GUI_InitOS+0x94>)
 8022a5a:	601a      	str	r2, [r3, #0]
 8022a5c:	187b      	adds	r3, r7, r1
 8022a5e:	2296      	movs	r2, #150	; 0x96
 8022a60:	00d2      	lsls	r2, r2, #3
 8022a62:	615a      	str	r2, [r3, #20]
 8022a64:	187b      	adds	r3, r7, r1
 8022a66:	2208      	movs	r2, #8
 8022a68:	619a      	str	r2, [r3, #24]
 8022a6a:	187a      	adds	r2, r7, r1
 8022a6c:	490b      	ldr	r1, [pc, #44]	; (8022a9c <GUI_InitOS+0x90>)
 8022a6e:	4b0d      	ldr	r3, [pc, #52]	; (8022aa4 <GUI_InitOS+0x98>)
 8022a70:	0018      	movs	r0, r3
 8022a72:	f7f8 fc0d 	bl	801b290 <osThreadNew>
 8022a76:	0002      	movs	r2, r0
 8022a78:	4b0b      	ldr	r3, [pc, #44]	; (8022aa8 <GUI_InitOS+0x9c>)
 8022a7a:	601a      	str	r2, [r3, #0]
 8022a7c:	4b0a      	ldr	r3, [pc, #40]	; (8022aa8 <GUI_InitOS+0x9c>)
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d103      	bne.n	8022a8c <GUI_InitOS+0x80>
 8022a84:	2300      	movs	r3, #0
 8022a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022a88:	e000      	b.n	8022a8c <GUI_InitOS+0x80>
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS || USBPD_THREADX */
  }

#if defined(_RTOS) || defined(USBPD_THREADX)
error:
 8022a8a:	46c0      	nop			; (mov r8, r8)
  return(_status);
 8022a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#else
  return(USBPD_ENABLE);
#endif /* _RTOS || USBPD_THREADX */
}
 8022a8e:	0018      	movs	r0, r3
 8022a90:	46bd      	mov	sp, r7
 8022a92:	b00d      	add	sp, #52	; 0x34
 8022a94:	bd90      	pop	{r4, r7, pc}
 8022a96:	46c0      	nop			; (mov r8, r8)
 8022a98:	200050d8 	.word	0x200050d8
 8022a9c:	2000504c 	.word	0x2000504c
 8022aa0:	0802aeb0 	.word	0x0802aeb0
 8022aa4:	08022ac5 	.word	0x08022ac5
 8022aa8:	20005050 	.word	0x20005050

08022aac <GUI_Start>:
{
  BSP_GUI_EraseDataInFlash();
}

void GUI_Start(void)
{
 8022aac:	b580      	push	{r7, lr}
 8022aae:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 8022ab0:	4b03      	ldr	r3, [pc, #12]	; (8022ac0 <GUI_Start+0x14>)
 8022ab2:	0018      	movs	r0, r3
 8022ab4:	f002 ffc6 	bl	8025a44 <TRACER_EMB_StartRX>
}
 8022ab8:	46c0      	nop			; (mov r8, r8)
 8022aba:	46bd      	mov	sp, r7
 8022abc:	bd80      	pop	{r7, pc}
 8022abe:	46c0      	nop			; (mov r8, r8)
 8022ac0:	08022ce1 	.word	0x08022ce1

08022ac4 <TaskGUI>:
#if defined(_RTOS) || defined(USBPD_THREADX)
GUIDEF_TASK_FUNCTION(TaskGUI)
#else
void GUI_Execute(void)
#endif /* _RTOS || USBPD_THREADX */
{
 8022ac4:	b580      	push	{r7, lr}
 8022ac6:	b088      	sub	sp, #32
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	6078      	str	r0, [r7, #4]
#if defined(_RTOS) || defined(USBPD_THREADX)
  uint32_t _timing = GUI_DEFAULT_WAIT;
 8022acc:	2301      	movs	r3, #1
 8022ace:	425b      	negs	r3, r3
 8022ad0:	61fb      	str	r3, [r7, #28]
  GUI_Start();
 8022ad2:	f7ff ffeb 	bl	8022aac <GUI_Start>
  do
  {
    GUIOS_QUEUE_EVENT event = 0;
 8022ad6:	2300      	movs	r3, #0
 8022ad8:	613b      	str	r3, [r7, #16]
    GUIOS_GETMESSAGE_QUEUE(GUIMsgBox, _timing, event);
 8022ada:	4b54      	ldr	r3, [pc, #336]	; (8022c2c <TaskGUI+0x168>)
 8022adc:	6818      	ldr	r0, [r3, #0]
 8022ade:	69fb      	ldr	r3, [r7, #28]
 8022ae0:	2210      	movs	r2, #16
 8022ae2:	18b9      	adds	r1, r7, r2
 8022ae4:	2200      	movs	r2, #0
 8022ae6:	f7f8 fdab 	bl	801b640 <osMessageQueueGet>
    switch ((GUI_USER_EVENT)(event & 0xFU))
 8022aea:	693b      	ldr	r3, [r7, #16]
 8022aec:	b2db      	uxtb	r3, r3
 8022aee:	001a      	movs	r2, r3
 8022af0:	230f      	movs	r3, #15
 8022af2:	4013      	ands	r3, r2
 8022af4:	d011      	beq.n	8022b1a <TaskGUI+0x56>
 8022af6:	2b01      	cmp	r3, #1
 8022af8:	d000      	beq.n	8022afc <TaskGUI+0x38>
 8022afa:	e090      	b.n	8022c1e <TaskGUI+0x15a>
    {
      case GUI_USER_EVENT_GUI:
      {
        (void)GUI_RXProcess((uint32_t)event);
 8022afc:	693b      	ldr	r3, [r7, #16]
 8022afe:	0018      	movs	r0, r3
 8022b00:	f000 f918 	bl	8022d34 <GUI_RXProcess>
        /* Sent an event to check if measurement report has been requested */
        GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 8022b04:	2300      	movs	r3, #0
 8022b06:	60fb      	str	r3, [r7, #12]
 8022b08:	4b48      	ldr	r3, [pc, #288]	; (8022c2c <TaskGUI+0x168>)
 8022b0a:	6818      	ldr	r0, [r3, #0]
 8022b0c:	230c      	movs	r3, #12
 8022b0e:	18f9      	adds	r1, r7, r3
 8022b10:	2300      	movs	r3, #0
 8022b12:	2200      	movs	r2, #0
 8022b14:	f7f8 fd38 	bl	801b588 <osMessageQueuePut>
        break;
 8022b18:	e082      	b.n	8022c20 <TaskGUI+0x15c>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* _RTOS || USBPD_THREADX */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8022b1a:	231b      	movs	r3, #27
 8022b1c:	18fb      	adds	r3, r7, r3
 8022b1e:	2200      	movs	r2, #0
 8022b20:	701a      	strb	r2, [r3, #0]
 8022b22:	e076      	b.n	8022c12 <TaskGUI+0x14e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 8022b24:	201b      	movs	r0, #27
 8022b26:	183b      	adds	r3, r7, r0
 8022b28:	781b      	ldrb	r3, [r3, #0]
 8022b2a:	4a41      	ldr	r2, [pc, #260]	; (8022c30 <TaskGUI+0x16c>)
 8022b2c:	009b      	lsls	r3, r3, #2
 8022b2e:	18d3      	adds	r3, r2, r3
 8022b30:	785b      	ldrb	r3, [r3, #1]
 8022b32:	06db      	lsls	r3, r3, #27
 8022b34:	0fdb      	lsrs	r3, r3, #31
 8022b36:	b2db      	uxtb	r3, r3
 8022b38:	2b01      	cmp	r3, #1
 8022b3a:	d15d      	bne.n	8022bf8 <TaskGUI+0x134>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 8022b3c:	183b      	adds	r3, r7, r0
 8022b3e:	781a      	ldrb	r2, [r3, #0]
 8022b40:	493c      	ldr	r1, [pc, #240]	; (8022c34 <TaskGUI+0x170>)
 8022b42:	0013      	movs	r3, r2
 8022b44:	005b      	lsls	r3, r3, #1
 8022b46:	189b      	adds	r3, r3, r2
 8022b48:	005b      	lsls	r3, r3, #1
 8022b4a:	18cb      	adds	r3, r1, r3
 8022b4c:	791b      	ldrb	r3, [r3, #4]
 8022b4e:	061b      	lsls	r3, r3, #24
 8022b50:	0fdb      	lsrs	r3, r3, #31
 8022b52:	b2db      	uxtb	r3, r3
 8022b54:	2b01      	cmp	r3, #1
 8022b56:	d14f      	bne.n	8022bf8 <TaskGUI+0x134>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 8022b58:	183b      	adds	r3, r7, r0
 8022b5a:	781a      	ldrb	r2, [r3, #0]
 8022b5c:	4935      	ldr	r1, [pc, #212]	; (8022c34 <TaskGUI+0x170>)
 8022b5e:	0013      	movs	r3, r2
 8022b60:	005b      	lsls	r3, r3, #1
 8022b62:	189b      	adds	r3, r3, r2
 8022b64:	005b      	lsls	r3, r3, #1
 8022b66:	18cb      	adds	r3, r1, r3
 8022b68:	791b      	ldrb	r3, [r3, #4]
 8022b6a:	065b      	lsls	r3, r3, #25
 8022b6c:	0e5b      	lsrs	r3, r3, #25
 8022b6e:	b2db      	uxtb	r3, r3
 8022b70:	2b00      	cmp	r3, #0
 8022b72:	d041      	beq.n	8022bf8 <TaskGUI+0x134>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 8022b74:	183b      	adds	r3, r7, r0
 8022b76:	781a      	ldrb	r2, [r3, #0]
 8022b78:	4b2f      	ldr	r3, [pc, #188]	; (8022c38 <TaskGUI+0x174>)
 8022b7a:	0052      	lsls	r2, r2, #1
 8022b7c:	5ad3      	ldrh	r3, [r2, r3]
 8022b7e:	b29a      	uxth	r2, r3
 8022b80:	2380      	movs	r3, #128	; 0x80
 8022b82:	021b      	lsls	r3, r3, #8
 8022b84:	429a      	cmp	r2, r3
 8022b86:	d109      	bne.n	8022b9c <TaskGUI+0xd8>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 8022b88:	183b      	adds	r3, r7, r0
 8022b8a:	781b      	ldrb	r3, [r3, #0]
 8022b8c:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 8022b8e:	4a2b      	ldr	r2, [pc, #172]	; (8022c3c <TaskGUI+0x178>)
 8022b90:	4313      	orrs	r3, r2
              uint32_t event_mr = GUI_USER_EVENT_GUI
 8022b92:	617b      	str	r3, [r7, #20]
              (void)GUI_RXProcess(event_mr);
 8022b94:	697b      	ldr	r3, [r7, #20]
 8022b96:	0018      	movs	r0, r3
 8022b98:	f000 f8cc 	bl	8022d34 <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8022b9c:	201b      	movs	r0, #27
 8022b9e:	183b      	adds	r3, r7, r0
 8022ba0:	781a      	ldrb	r2, [r3, #0]
 8022ba2:	4b25      	ldr	r3, [pc, #148]	; (8022c38 <TaskGUI+0x174>)
 8022ba4:	0052      	lsls	r2, r2, #1
 8022ba6:	5ad3      	ldrh	r3, [r2, r3]
 8022ba8:	b29b      	uxth	r3, r3
 8022baa:	045b      	lsls	r3, r3, #17
 8022bac:	0c5b      	lsrs	r3, r3, #17
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	dc29      	bgt.n	8022c06 <TaskGUI+0x142>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 8022bb2:	183b      	adds	r3, r7, r0
 8022bb4:	781a      	ldrb	r2, [r3, #0]
 8022bb6:	491f      	ldr	r1, [pc, #124]	; (8022c34 <TaskGUI+0x170>)
 8022bb8:	0013      	movs	r3, r2
 8022bba:	005b      	lsls	r3, r3, #1
 8022bbc:	189b      	adds	r3, r3, r2
 8022bbe:	005b      	lsls	r3, r3, #1
 8022bc0:	18cb      	adds	r3, r1, r3
 8022bc2:	791b      	ldrb	r3, [r3, #4]
 8022bc4:	065b      	lsls	r3, r3, #25
 8022bc6:	0e5b      	lsrs	r3, r3, #25
 8022bc8:	b2db      	uxtb	r3, r3
 8022bca:	b29b      	uxth	r3, r3
 8022bcc:	2228      	movs	r2, #40	; 0x28
 8022bce:	4353      	muls	r3, r2
 8022bd0:	b29b      	uxth	r3, r3
 8022bd2:	183a      	adds	r2, r7, r0
 8022bd4:	7812      	ldrb	r2, [r2, #0]
 8022bd6:	491a      	ldr	r1, [pc, #104]	; (8022c40 <TaskGUI+0x17c>)
 8022bd8:	430b      	orrs	r3, r1
 8022bda:	b299      	uxth	r1, r3
 8022bdc:	4b16      	ldr	r3, [pc, #88]	; (8022c38 <TaskGUI+0x174>)
 8022bde:	0052      	lsls	r2, r2, #1
 8022be0:	52d1      	strh	r1, [r2, r3]
 8022be2:	2300      	movs	r3, #0
 8022be4:	60bb      	str	r3, [r7, #8]
 8022be6:	4b11      	ldr	r3, [pc, #68]	; (8022c2c <TaskGUI+0x168>)
 8022be8:	6818      	ldr	r0, [r3, #0]
 8022bea:	2308      	movs	r3, #8
 8022bec:	18f9      	adds	r1, r7, r3
 8022bee:	2300      	movs	r3, #0
 8022bf0:	2200      	movs	r2, #0
 8022bf2:	f7f8 fcc9 	bl	801b588 <osMessageQueuePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 8022bf6:	e006      	b.n	8022c06 <TaskGUI+0x142>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 8022bf8:	231b      	movs	r3, #27
 8022bfa:	18fb      	adds	r3, r7, r3
 8022bfc:	781a      	ldrb	r2, [r3, #0]
 8022bfe:	4b0e      	ldr	r3, [pc, #56]	; (8022c38 <TaskGUI+0x174>)
 8022c00:	0052      	lsls	r2, r2, #1
 8022c02:	2100      	movs	r1, #0
 8022c04:	52d1      	strh	r1, [r2, r3]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 8022c06:	211b      	movs	r1, #27
 8022c08:	187b      	adds	r3, r7, r1
 8022c0a:	781a      	ldrb	r2, [r3, #0]
 8022c0c:	187b      	adds	r3, r7, r1
 8022c0e:	3201      	adds	r2, #1
 8022c10:	701a      	strb	r2, [r3, #0]
 8022c12:	231b      	movs	r3, #27
 8022c14:	18fb      	adds	r3, r7, r3
 8022c16:	781b      	ldrb	r3, [r3, #0]
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d083      	beq.n	8022b24 <TaskGUI+0x60>
          }
        }
#if defined(_RTOS) || defined(USBPD_THREADX)
        break;
 8022c1c:	e000      	b.n	8022c20 <TaskGUI+0x15c>
      }

      default:
        break;
 8022c1e:	46c0      	nop			; (mov r8, r8)
    }
    _timing = CheckGUITimers();
 8022c20:	f000 f810 	bl	8022c44 <CheckGUITimers>
 8022c24:	0003      	movs	r3, r0
 8022c26:	61fb      	str	r3, [r7, #28]
  {
 8022c28:	e755      	b.n	8022ad6 <TaskGUI+0x12>
 8022c2a:	46c0      	nop			; (mov r8, r8)
 8022c2c:	2000504c 	.word	0x2000504c
 8022c30:	200033fc 	.word	0x200033fc
 8022c34:	20004e40 	.word	0x20004e40
 8022c38:	20004e3c 	.word	0x20004e3c
 8022c3c:	00000711 	.word	0x00000711
 8022c40:	ffff8000 	.word	0xffff8000

08022c44 <CheckGUITimers>:
#endif /* _RTOS || USBPD_THREADX */
}

#if defined(_RTOS) || defined(USBPD_THREADX)
static uint32_t CheckGUITimers(void)
{
 8022c44:	b580      	push	{r7, lr}
 8022c46:	b084      	sub	sp, #16
 8022c48:	af00      	add	r7, sp, #0
  uint32_t _timing = GUI_DEFAULT_WAIT;
 8022c4a:	2301      	movs	r3, #1
 8022c4c:	425b      	negs	r3, r3
 8022c4e:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8022c50:	230b      	movs	r3, #11
 8022c52:	18fb      	adds	r3, r7, r3
 8022c54:	2200      	movs	r2, #0
 8022c56:	701a      	strb	r2, [r3, #0]
 8022c58:	e018      	b.n	8022c8c <CheckGUITimers+0x48>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 8022c5a:	230b      	movs	r3, #11
 8022c5c:	18fb      	adds	r3, r7, r3
 8022c5e:	781a      	ldrb	r2, [r3, #0]
 8022c60:	4b0f      	ldr	r3, [pc, #60]	; (8022ca0 <CheckGUITimers+0x5c>)
 8022c62:	0052      	lsls	r2, r2, #1
 8022c64:	5ad3      	ldrh	r3, [r2, r3]
 8022c66:	b29b      	uxth	r3, r3
 8022c68:	045b      	lsls	r3, r3, #17
 8022c6a:	0c5b      	lsrs	r3, r3, #17
 8022c6c:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	2b00      	cmp	r3, #0
 8022c72:	d005      	beq.n	8022c80 <CheckGUITimers+0x3c>
    {
      if (_current_timing < _timing)
 8022c74:	687a      	ldr	r2, [r7, #4]
 8022c76:	68fb      	ldr	r3, [r7, #12]
 8022c78:	429a      	cmp	r2, r3
 8022c7a:	d201      	bcs.n	8022c80 <CheckGUITimers+0x3c>
      {
        _timing = _current_timing;
 8022c7c:	687b      	ldr	r3, [r7, #4]
 8022c7e:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8022c80:	210b      	movs	r1, #11
 8022c82:	187b      	adds	r3, r7, r1
 8022c84:	781a      	ldrb	r2, [r3, #0]
 8022c86:	187b      	adds	r3, r7, r1
 8022c88:	3201      	adds	r2, #1
 8022c8a:	701a      	strb	r2, [r3, #0]
 8022c8c:	230b      	movs	r3, #11
 8022c8e:	18fb      	adds	r3, r7, r3
 8022c90:	781b      	ldrb	r3, [r3, #0]
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	d0e1      	beq.n	8022c5a <CheckGUITimers+0x16>
      }
    }
  }
  return _timing;
 8022c96:	68fb      	ldr	r3, [r7, #12]
}
 8022c98:	0018      	movs	r0, r3
 8022c9a:	46bd      	mov	sp, r7
 8022c9c:	b004      	add	sp, #16
 8022c9e:	bd80      	pop	{r7, pc}
 8022ca0:	20004e3c 	.word	0x20004e3c

08022ca4 <GUI_TimerCounter>:
#endif /* RTOS || USBPD_THREADX */

void GUI_TimerCounter(void)
{
 8022ca4:	b580      	push	{r7, lr}
 8022ca6:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 8022ca8:	4b0b      	ldr	r3, [pc, #44]	; (8022cd8 <GUI_TimerCounter+0x34>)
 8022caa:	791b      	ldrb	r3, [r3, #4]
 8022cac:	227f      	movs	r2, #127	; 0x7f
 8022cae:	4393      	bics	r3, r2
 8022cb0:	b2db      	uxtb	r3, r3
 8022cb2:	2b00      	cmp	r3, #0
 8022cb4:	d00c      	beq.n	8022cd0 <GUI_TimerCounter+0x2c>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 8022cb6:	4b09      	ldr	r3, [pc, #36]	; (8022cdc <GUI_TimerCounter+0x38>)
 8022cb8:	881b      	ldrh	r3, [r3, #0]
 8022cba:	b29b      	uxth	r3, r3
 8022cbc:	045b      	lsls	r3, r3, #17
 8022cbe:	0c5b      	lsrs	r3, r3, #17
 8022cc0:	d006      	beq.n	8022cd0 <GUI_TimerCounter+0x2c>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 8022cc2:	4b06      	ldr	r3, [pc, #24]	; (8022cdc <GUI_TimerCounter+0x38>)
 8022cc4:	881b      	ldrh	r3, [r3, #0]
 8022cc6:	b29b      	uxth	r3, r3
 8022cc8:	3b01      	subs	r3, #1
 8022cca:	b29a      	uxth	r2, r3
 8022ccc:	4b03      	ldr	r3, [pc, #12]	; (8022cdc <GUI_TimerCounter+0x38>)
 8022cce:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !(_RTOS || USBPD_THREADX) && USE_STM32_UTILITY_OS) */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 8022cd0:	46c0      	nop			; (mov r8, r8)
 8022cd2:	46bd      	mov	sp, r7
 8022cd4:	bd80      	pop	{r7, pc}
 8022cd6:	46c0      	nop			; (mov r8, r8)
 8022cd8:	20004e40 	.word	0x20004e40
 8022cdc:	20004e3c 	.word	0x20004e3c

08022ce0 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 8022ce0:	b580      	push	{r7, lr}
 8022ce2:	b084      	sub	sp, #16
 8022ce4:	af00      	add	r7, sp, #0
 8022ce6:	0002      	movs	r2, r0
 8022ce8:	1dfb      	adds	r3, r7, #7
 8022cea:	701a      	strb	r2, [r3, #0]
 8022cec:	1dbb      	adds	r3, r7, #6
 8022cee:	1c0a      	adds	r2, r1, #0
 8022cf0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8022cf2:	b672      	cpsid	i
}
 8022cf4:	46c0      	nop			; (mov r8, r8)
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 8022cf6:	1dbb      	adds	r3, r7, #6
 8022cf8:	781a      	ldrb	r2, [r3, #0]
 8022cfa:	1dfb      	adds	r3, r7, #7
 8022cfc:	781b      	ldrb	r3, [r3, #0]
 8022cfe:	0011      	movs	r1, r2
 8022d00:	0018      	movs	r0, r3
 8022d02:	f000 f891 	bl	8022e28 <GUI_GetMessage>
 8022d06:	0003      	movs	r3, r0
 8022d08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8022d0a:	b662      	cpsie	i
}
 8022d0c:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  if (event == 1U)
 8022d0e:	68fb      	ldr	r3, [r7, #12]
 8022d10:	2b01      	cmp	r3, #1
 8022d12:	d109      	bne.n	8022d28 <GUI_CALLBACK_RX+0x48>
  {
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, GUI_USER_EVENT_GUI, 0U);
 8022d14:	2301      	movs	r3, #1
 8022d16:	60bb      	str	r3, [r7, #8]
 8022d18:	4b05      	ldr	r3, [pc, #20]	; (8022d30 <GUI_CALLBACK_RX+0x50>)
 8022d1a:	6818      	ldr	r0, [r3, #0]
 8022d1c:	2308      	movs	r3, #8
 8022d1e:	18f9      	adds	r1, r7, r3
 8022d20:	2300      	movs	r3, #0
 8022d22:	2200      	movs	r2, #0
 8022d24:	f7f8 fc30 	bl	801b588 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8022d28:	46c0      	nop			; (mov r8, r8)
 8022d2a:	46bd      	mov	sp, r7
 8022d2c:	b004      	add	sp, #16
 8022d2e:	bd80      	pop	{r7, pc}
 8022d30:	2000504c 	.word	0x2000504c

08022d34 <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 8022d34:	b5b0      	push	{r4, r5, r7, lr}
 8022d36:	b086      	sub	sp, #24
 8022d38:	af00      	add	r7, sp, #0
 8022d3a:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 8022d3c:	687a      	ldr	r2, [r7, #4]
 8022d3e:	23ff      	movs	r3, #255	; 0xff
 8022d40:	011b      	lsls	r3, r3, #4
 8022d42:	4013      	ands	r3, r2
 8022d44:	d11f      	bne.n	8022d86 <GUI_RXProcess+0x52>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 8022d46:	2515      	movs	r5, #21
 8022d48:	197c      	adds	r4, r7, r5
 8022d4a:	230f      	movs	r3, #15
 8022d4c:	18fa      	adds	r2, r7, r3
 8022d4e:	2310      	movs	r3, #16
 8022d50:	18fb      	adds	r3, r7, r3
 8022d52:	0011      	movs	r1, r2
 8022d54:	0018      	movs	r0, r3
 8022d56:	f000 f96b 	bl	8023030 <GUI_SendAnswer>
 8022d5a:	0003      	movs	r3, r0
 8022d5c:	7023      	strb	r3, [r4, #0]

    switch (state)
 8022d5e:	197b      	adds	r3, r7, r5
 8022d60:	781b      	ldrb	r3, [r3, #0]
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d039      	beq.n	8022dda <GUI_RXProcess+0xa6>
 8022d66:	2b02      	cmp	r3, #2
 8022d68:	d104      	bne.n	8022d74 <GUI_RXProcess+0x40>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 8022d6a:	f7fe ff71 	bl	8021c50 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 8022d6e:	f7eb fad4 	bl	800e31a <HAL_NVIC_SystemReset>
        break;
 8022d72:	e033      	b.n	8022ddc <GUI_RXProcess+0xa8>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 8022d74:	693a      	ldr	r2, [r7, #16]
 8022d76:	230f      	movs	r3, #15
 8022d78:	18fb      	adds	r3, r7, r3
 8022d7a:	781b      	ldrb	r3, [r3, #0]
 8022d7c:	0019      	movs	r1, r3
 8022d7e:	0010      	movs	r0, r2
 8022d80:	f002 fdf6 	bl	8025970 <TRACER_EMB_Add>
        break;
 8022d84:	e02a      	b.n	8022ddc <GUI_RXProcess+0xa8>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	b29b      	uxth	r3, r3
 8022d8a:	091b      	lsrs	r3, r3, #4
 8022d8c:	b29a      	uxth	r2, r3
 8022d8e:	2016      	movs	r0, #22
 8022d90:	183b      	adds	r3, r7, r0
 8022d92:	21ff      	movs	r1, #255	; 0xff
 8022d94:	400a      	ands	r2, r1
 8022d96:	801a      	strh	r2, [r3, #0]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 8022d98:	183b      	adds	r3, r7, r0
 8022d9a:	881b      	ldrh	r3, [r3, #0]
 8022d9c:	2b71      	cmp	r3, #113	; 0x71
 8022d9e:	d10e      	bne.n	8022dbe <GUI_RXProcess+0x8a>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8022da0:	687b      	ldr	r3, [r7, #4]
 8022da2:	0e1b      	lsrs	r3, r3, #24
 8022da4:	2203      	movs	r2, #3
 8022da6:	4013      	ands	r3, r2
 8022da8:	001c      	movs	r4, r3
 8022daa:	f7e9 fc75 	bl	800c698 <HAL_GetTick>
 8022dae:	0002      	movs	r2, r0
 8022db0:	2380      	movs	r3, #128	; 0x80
 8022db2:	011b      	lsls	r3, r3, #4
 8022db4:	0019      	movs	r1, r3
 8022db6:	0020      	movs	r0, r4
 8022db8:	f000 f815 	bl	8022de6 <GUI_FormatAndSendNotification>
 8022dbc:	e00e      	b.n	8022ddc <GUI_RXProcess+0xa8>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	0e1b      	lsrs	r3, r3, #24
 8022dc2:	2203      	movs	r2, #3
 8022dc4:	4013      	ands	r3, r2
 8022dc6:	0018      	movs	r0, r3
 8022dc8:	2316      	movs	r3, #22
 8022dca:	18fb      	adds	r3, r7, r3
 8022dcc:	881a      	ldrh	r2, [r3, #0]
 8022dce:	2380      	movs	r3, #128	; 0x80
 8022dd0:	019b      	lsls	r3, r3, #6
 8022dd2:	0019      	movs	r1, r3
 8022dd4:	f000 f807 	bl	8022de6 <GUI_FormatAndSendNotification>
 8022dd8:	e000      	b.n	8022ddc <GUI_RXProcess+0xa8>
        break;
 8022dda:	46c0      	nop			; (mov r8, r8)
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 8022ddc:	2300      	movs	r3, #0
}
 8022dde:	0018      	movs	r0, r3
 8022de0:	46bd      	mov	sp, r7
 8022de2:	b006      	add	sp, #24
 8022de4:	bdb0      	pop	{r4, r5, r7, pc}

08022de6 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 8022de6:	b5b0      	push	{r4, r5, r7, lr}
 8022de8:	b088      	sub	sp, #32
 8022dea:	af02      	add	r7, sp, #8
 8022dec:	60f8      	str	r0, [r7, #12]
 8022dee:	60b9      	str	r1, [r7, #8]
 8022df0:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 8022df2:	68fb      	ldr	r3, [r7, #12]
 8022df4:	b2d8      	uxtb	r0, r3
 8022df6:	68bc      	ldr	r4, [r7, #8]
 8022df8:	2513      	movs	r5, #19
 8022dfa:	197a      	adds	r2, r7, r5
 8022dfc:	2314      	movs	r3, #20
 8022dfe:	18f9      	adds	r1, r7, r3
 8022e00:	687b      	ldr	r3, [r7, #4]
 8022e02:	9300      	str	r3, [sp, #0]
 8022e04:	0023      	movs	r3, r4
 8022e06:	f000 fa03 	bl	8023210 <GUI_SendNotification>
 8022e0a:	1e03      	subs	r3, r0, #0
 8022e0c:	d006      	beq.n	8022e1c <GUI_FormatAndSendNotification+0x36>
  {
    TRACER_EMB_Add(msg, size);
 8022e0e:	697a      	ldr	r2, [r7, #20]
 8022e10:	197b      	adds	r3, r7, r5
 8022e12:	781b      	ldrb	r3, [r3, #0]
 8022e14:	0019      	movs	r1, r3
 8022e16:	0010      	movs	r0, r2
 8022e18:	f002 fdaa 	bl	8025970 <TRACER_EMB_Add>
  }
  return 0;
 8022e1c:	2300      	movs	r3, #0
}
 8022e1e:	0018      	movs	r0, r3
 8022e20:	46bd      	mov	sp, r7
 8022e22:	b006      	add	sp, #24
 8022e24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022e28 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 8022e28:	b580      	push	{r7, lr}
 8022e2a:	b084      	sub	sp, #16
 8022e2c:	af00      	add	r7, sp, #0
 8022e2e:	0002      	movs	r2, r0
 8022e30:	1dfb      	adds	r3, r7, #7
 8022e32:	701a      	strb	r2, [r3, #0]
 8022e34:	1dbb      	adds	r3, r7, #6
 8022e36:	1c0a      	adds	r2, r1, #0
 8022e38:	701a      	strb	r2, [r3, #0]
  uint32_t status = 0;
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 8022e3e:	4b76      	ldr	r3, [pc, #472]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022e40:	881b      	ldrh	r3, [r3, #0]
 8022e42:	2bff      	cmp	r3, #255	; 0xff
 8022e44:	d80b      	bhi.n	8022e5e <GUI_GetMessage+0x36>
  {
    PtrDataRx[cursor] = Character;
 8022e46:	4b74      	ldr	r3, [pc, #464]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022e48:	881b      	ldrh	r3, [r3, #0]
 8022e4a:	0019      	movs	r1, r3
 8022e4c:	4b73      	ldr	r3, [pc, #460]	; (802301c <GUI_GetMessage+0x1f4>)
 8022e4e:	1dfa      	adds	r2, r7, #7
 8022e50:	7812      	ldrb	r2, [r2, #0]
 8022e52:	545a      	strb	r2, [r3, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 8022e54:	1dbb      	adds	r3, r7, #6
 8022e56:	781b      	ldrb	r3, [r3, #0]
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d00e      	beq.n	8022e7a <GUI_GetMessage+0x52>
 8022e5c:	e00a      	b.n	8022e74 <GUI_GetMessage+0x4c>
    cursor = 0U;
 8022e5e:	4b6e      	ldr	r3, [pc, #440]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022e60:	2200      	movs	r2, #0
 8022e62:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 8022e64:	4b6e      	ldr	r3, [pc, #440]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022e66:	2200      	movs	r2, #0
 8022e68:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 8022e6a:	4b6e      	ldr	r3, [pc, #440]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022e6c:	2200      	movs	r2, #0
 8022e6e:	701a      	strb	r2, [r3, #0]
    return 0;
 8022e70:	2300      	movs	r3, #0
 8022e72:	e0cc      	b.n	802300e <GUI_GetMessage+0x1e6>
  {
    Rstate = Rerror;
 8022e74:	4b6b      	ldr	r3, [pc, #428]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022e76:	2204      	movs	r2, #4
 8022e78:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8022e7a:	4b6a      	ldr	r3, [pc, #424]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022e7c:	781b      	ldrb	r3, [r3, #0]
 8022e7e:	2b04      	cmp	r3, #4
 8022e80:	d900      	bls.n	8022e84 <GUI_GetMessage+0x5c>
 8022e82:	e0b4      	b.n	8022fee <GUI_GetMessage+0x1c6>
 8022e84:	009a      	lsls	r2, r3, #2
 8022e86:	4b68      	ldr	r3, [pc, #416]	; (8023028 <GUI_GetMessage+0x200>)
 8022e88:	18d3      	adds	r3, r2, r3
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	469f      	mov	pc, r3
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 8022e8e:	4b62      	ldr	r3, [pc, #392]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022e90:	881b      	ldrh	r3, [r3, #0]
 8022e92:	001a      	movs	r2, r3
 8022e94:	4b61      	ldr	r3, [pc, #388]	; (802301c <GUI_GetMessage+0x1f4>)
 8022e96:	5c9b      	ldrb	r3, [r3, r2]
 8022e98:	2bfd      	cmp	r3, #253	; 0xfd
 8022e9a:	d106      	bne.n	8022eaa <GUI_GetMessage+0x82>
      {
        counter++;
 8022e9c:	4b60      	ldr	r3, [pc, #384]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022e9e:	881b      	ldrh	r3, [r3, #0]
 8022ea0:	3301      	adds	r3, #1
 8022ea2:	b29a      	uxth	r2, r3
 8022ea4:	4b5e      	ldr	r3, [pc, #376]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022ea6:	801a      	strh	r2, [r3, #0]
 8022ea8:	e006      	b.n	8022eb8 <GUI_GetMessage+0x90>
      }
      else
      {
        counter = 0U;
 8022eaa:	4b5d      	ldr	r3, [pc, #372]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022eac:	2200      	movs	r2, #0
 8022eae:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 8022eb0:	4b59      	ldr	r3, [pc, #356]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022eb2:	2201      	movs	r2, #1
 8022eb4:	4252      	negs	r2, r2
 8022eb6:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 8022eb8:	4b59      	ldr	r3, [pc, #356]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022eba:	881b      	ldrh	r3, [r3, #0]
 8022ebc:	2b04      	cmp	r3, #4
 8022ebe:	d000      	beq.n	8022ec2 <GUI_GetMessage+0x9a>
 8022ec0:	e097      	b.n	8022ff2 <GUI_GetMessage+0x1ca>
      {
        counter = 0U;
 8022ec2:	4b57      	ldr	r3, [pc, #348]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022ec4:	2200      	movs	r2, #0
 8022ec6:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 8022ec8:	4b56      	ldr	r3, [pc, #344]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022eca:	2202      	movs	r2, #2
 8022ecc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8022ece:	e090      	b.n	8022ff2 <GUI_GetMessage+0x1ca>
    case Rsize :
      counter++;
 8022ed0:	4b53      	ldr	r3, [pc, #332]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022ed2:	881b      	ldrh	r3, [r3, #0]
 8022ed4:	3301      	adds	r3, #1
 8022ed6:	b29a      	uxth	r2, r3
 8022ed8:	4b51      	ldr	r3, [pc, #324]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022eda:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 8022edc:	4b50      	ldr	r3, [pc, #320]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022ede:	881b      	ldrh	r3, [r3, #0]
 8022ee0:	2b03      	cmp	r3, #3
 8022ee2:	d000      	beq.n	8022ee6 <GUI_GetMessage+0xbe>
 8022ee4:	e087      	b.n	8022ff6 <GUI_GetMessage+0x1ce>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 8022ee6:	4b4c      	ldr	r3, [pc, #304]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022ee8:	881b      	ldrh	r3, [r3, #0]
 8022eea:	3b01      	subs	r3, #1
 8022eec:	4a4b      	ldr	r2, [pc, #300]	; (802301c <GUI_GetMessage+0x1f4>)
 8022eee:	5cd3      	ldrb	r3, [r2, r3]
 8022ef0:	b29b      	uxth	r3, r3
 8022ef2:	021b      	lsls	r3, r3, #8
 8022ef4:	b29a      	uxth	r2, r3
 8022ef6:	4b48      	ldr	r3, [pc, #288]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022ef8:	881b      	ldrh	r3, [r3, #0]
 8022efa:	0019      	movs	r1, r3
 8022efc:	4b47      	ldr	r3, [pc, #284]	; (802301c <GUI_GetMessage+0x1f4>)
 8022efe:	5c5b      	ldrb	r3, [r3, r1]
 8022f00:	b29b      	uxth	r3, r3
 8022f02:	18d3      	adds	r3, r2, r3
 8022f04:	b29a      	uxth	r2, r3
 8022f06:	4b49      	ldr	r3, [pc, #292]	; (802302c <GUI_GetMessage+0x204>)
 8022f08:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 8022f0a:	4b48      	ldr	r3, [pc, #288]	; (802302c <GUI_GetMessage+0x204>)
 8022f0c:	881b      	ldrh	r3, [r3, #0]
 8022f0e:	2b00      	cmp	r3, #0
 8022f10:	d103      	bne.n	8022f1a <GUI_GetMessage+0xf2>
        {
          Rstate = Rend;
 8022f12:	4b44      	ldr	r3, [pc, #272]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022f14:	2203      	movs	r2, #3
 8022f16:	701a      	strb	r2, [r3, #0]
 8022f18:	e002      	b.n	8022f20 <GUI_GetMessage+0xf8>
        }
        else
        {
          Rstate = RonGoing;
 8022f1a:	4b42      	ldr	r3, [pc, #264]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022f1c:	2201      	movs	r2, #1
 8022f1e:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 8022f20:	4b3f      	ldr	r3, [pc, #252]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f22:	2200      	movs	r2, #0
 8022f24:	801a      	strh	r2, [r3, #0]
      }
      break;
 8022f26:	e066      	b.n	8022ff6 <GUI_GetMessage+0x1ce>
    case RonGoing :
      counter++;
 8022f28:	4b3d      	ldr	r3, [pc, #244]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f2a:	881b      	ldrh	r3, [r3, #0]
 8022f2c:	3301      	adds	r3, #1
 8022f2e:	b29a      	uxth	r2, r3
 8022f30:	4b3b      	ldr	r3, [pc, #236]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f32:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 8022f34:	4b3a      	ldr	r3, [pc, #232]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f36:	881a      	ldrh	r2, [r3, #0]
 8022f38:	4b3c      	ldr	r3, [pc, #240]	; (802302c <GUI_GetMessage+0x204>)
 8022f3a:	881b      	ldrh	r3, [r3, #0]
 8022f3c:	429a      	cmp	r2, r3
 8022f3e:	d15c      	bne.n	8022ffa <GUI_GetMessage+0x1d2>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 8022f40:	4b37      	ldr	r3, [pc, #220]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f42:	2200      	movs	r2, #0
 8022f44:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 8022f46:	4b37      	ldr	r3, [pc, #220]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022f48:	2203      	movs	r2, #3
 8022f4a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8022f4c:	e055      	b.n	8022ffa <GUI_GetMessage+0x1d2>
    case Rend :
      counter++;
 8022f4e:	4b34      	ldr	r3, [pc, #208]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f50:	881b      	ldrh	r3, [r3, #0]
 8022f52:	3301      	adds	r3, #1
 8022f54:	b29a      	uxth	r2, r3
 8022f56:	4b32      	ldr	r3, [pc, #200]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f58:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 8022f5a:	4b2f      	ldr	r3, [pc, #188]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022f5c:	881b      	ldrh	r3, [r3, #0]
 8022f5e:	001a      	movs	r2, r3
 8022f60:	4b2e      	ldr	r3, [pc, #184]	; (802301c <GUI_GetMessage+0x1f4>)
 8022f62:	5c9b      	ldrb	r3, [r3, r2]
 8022f64:	2ba5      	cmp	r3, #165	; 0xa5
 8022f66:	d124      	bne.n	8022fb2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 8022f68:	4b2b      	ldr	r3, [pc, #172]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022f6a:	881b      	ldrh	r3, [r3, #0]
 8022f6c:	3b01      	subs	r3, #1
 8022f6e:	4a2b      	ldr	r2, [pc, #172]	; (802301c <GUI_GetMessage+0x1f4>)
 8022f70:	5cd3      	ldrb	r3, [r2, r3]
 8022f72:	2ba5      	cmp	r3, #165	; 0xa5
 8022f74:	d11d      	bne.n	8022fb2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8022f76:	4b28      	ldr	r3, [pc, #160]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022f78:	881b      	ldrh	r3, [r3, #0]
 8022f7a:	3b02      	subs	r3, #2
 8022f7c:	4a27      	ldr	r2, [pc, #156]	; (802301c <GUI_GetMessage+0x1f4>)
 8022f7e:	5cd3      	ldrb	r3, [r2, r3]
 8022f80:	2ba5      	cmp	r3, #165	; 0xa5
 8022f82:	d116      	bne.n	8022fb2 <GUI_GetMessage+0x18a>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8022f84:	4b24      	ldr	r3, [pc, #144]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022f86:	881b      	ldrh	r3, [r3, #0]
 8022f88:	3b03      	subs	r3, #3
 8022f8a:	4a24      	ldr	r2, [pc, #144]	; (802301c <GUI_GetMessage+0x1f4>)
 8022f8c:	5cd3      	ldrb	r3, [r2, r3]
 8022f8e:	2ba5      	cmp	r3, #165	; 0xa5
 8022f90:	d10f      	bne.n	8022fb2 <GUI_GetMessage+0x18a>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 8022f92:	4b23      	ldr	r3, [pc, #140]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022f94:	881b      	ldrh	r3, [r3, #0]
 8022f96:	2b04      	cmp	r3, #4
 8022f98:	d101      	bne.n	8022f9e <GUI_GetMessage+0x176>
        {
          status = 1U;
 8022f9a:	2301      	movs	r3, #1
 8022f9c:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 8022f9e:	4b20      	ldr	r3, [pc, #128]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022fa0:	2200      	movs	r2, #0
 8022fa2:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8022fa4:	4b1c      	ldr	r3, [pc, #112]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022fa6:	2201      	movs	r2, #1
 8022fa8:	4252      	negs	r2, r2
 8022faa:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8022fac:	4b1d      	ldr	r3, [pc, #116]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022fae:	2200      	movs	r2, #0
 8022fb0:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 8022fb2:	4b19      	ldr	r3, [pc, #100]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022fb4:	881b      	ldrh	r3, [r3, #0]
 8022fb6:	001a      	movs	r2, r3
 8022fb8:	4b1c      	ldr	r3, [pc, #112]	; (802302c <GUI_GetMessage+0x204>)
 8022fba:	881b      	ldrh	r3, [r3, #0]
 8022fbc:	330b      	adds	r3, #11
 8022fbe:	429a      	cmp	r2, r3
 8022fc0:	d11d      	bne.n	8022ffe <GUI_GetMessage+0x1d6>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 8022fc2:	4b17      	ldr	r3, [pc, #92]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022fc4:	2200      	movs	r2, #0
 8022fc6:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8022fc8:	4b13      	ldr	r3, [pc, #76]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022fca:	2201      	movs	r2, #1
 8022fcc:	4252      	negs	r2, r2
 8022fce:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8022fd0:	4b14      	ldr	r3, [pc, #80]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022fd2:	2200      	movs	r2, #0
 8022fd4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8022fd6:	e012      	b.n	8022ffe <GUI_GetMessage+0x1d6>
    case Rerror :
      counter = 0U;
 8022fd8:	4b11      	ldr	r3, [pc, #68]	; (8023020 <GUI_GetMessage+0x1f8>)
 8022fda:	2200      	movs	r2, #0
 8022fdc:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 8022fde:	4b0e      	ldr	r3, [pc, #56]	; (8023018 <GUI_GetMessage+0x1f0>)
 8022fe0:	2201      	movs	r2, #1
 8022fe2:	4252      	negs	r2, r2
 8022fe4:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 8022fe6:	4b0f      	ldr	r3, [pc, #60]	; (8023024 <GUI_GetMessage+0x1fc>)
 8022fe8:	2200      	movs	r2, #0
 8022fea:	701a      	strb	r2, [r3, #0]
      break;
 8022fec:	e008      	b.n	8023000 <GUI_GetMessage+0x1d8>
    default:
      break;
 8022fee:	46c0      	nop			; (mov r8, r8)
 8022ff0:	e006      	b.n	8023000 <GUI_GetMessage+0x1d8>
      break;
 8022ff2:	46c0      	nop			; (mov r8, r8)
 8022ff4:	e004      	b.n	8023000 <GUI_GetMessage+0x1d8>
      break;
 8022ff6:	46c0      	nop			; (mov r8, r8)
 8022ff8:	e002      	b.n	8023000 <GUI_GetMessage+0x1d8>
      break;
 8022ffa:	46c0      	nop			; (mov r8, r8)
 8022ffc:	e000      	b.n	8023000 <GUI_GetMessage+0x1d8>
      break;
 8022ffe:	46c0      	nop			; (mov r8, r8)
  }

  cursor++;
 8023000:	4b05      	ldr	r3, [pc, #20]	; (8023018 <GUI_GetMessage+0x1f0>)
 8023002:	881b      	ldrh	r3, [r3, #0]
 8023004:	3301      	adds	r3, #1
 8023006:	b29a      	uxth	r2, r3
 8023008:	4b03      	ldr	r3, [pc, #12]	; (8023018 <GUI_GetMessage+0x1f0>)
 802300a:	801a      	strh	r2, [r3, #0]
  return status;
 802300c:	68fb      	ldr	r3, [r7, #12]
}
 802300e:	0018      	movs	r0, r3
 8023010:	46bd      	mov	sp, r7
 8023012:	b004      	add	sp, #16
 8023014:	bd80      	pop	{r7, pc}
 8023016:	46c0      	nop			; (mov r8, r8)
 8023018:	200050da 	.word	0x200050da
 802301c:	20004e48 	.word	0x20004e48
 8023020:	200050dc 	.word	0x200050dc
 8023024:	200050de 	.word	0x200050de
 8023028:	0802b240 	.word	0x0802b240
 802302c:	200050e0 	.word	0x200050e0

08023030 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8023030:	b590      	push	{r4, r7, lr}
 8023032:	b085      	sub	sp, #20
 8023034:	af00      	add	r7, sp, #0
 8023036:	6078      	str	r0, [r7, #4]
 8023038:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 802303a:	4b70      	ldr	r3, [pc, #448]	; (80231fc <GUI_SendAnswer+0x1cc>)
 802303c:	791a      	ldrb	r2, [r3, #4]
 802303e:	230f      	movs	r3, #15
 8023040:	18fb      	adds	r3, r7, r3
 8023042:	0952      	lsrs	r2, r2, #5
 8023044:	701a      	strb	r2, [r3, #0]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 8023046:	4b6d      	ldr	r3, [pc, #436]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023048:	791b      	ldrb	r3, [r3, #4]
 802304a:	001a      	movs	r2, r3
 802304c:	231f      	movs	r3, #31
 802304e:	4013      	ands	r3, r2
 8023050:	2b10      	cmp	r3, #16
 8023052:	d900      	bls.n	8023056 <GUI_SendAnswer+0x26>
 8023054:	e0be      	b.n	80231d4 <GUI_SendAnswer+0x1a4>
 8023056:	009a      	lsls	r2, r3, #2
 8023058:	4b69      	ldr	r3, [pc, #420]	; (8023200 <GUI_SendAnswer+0x1d0>)
 802305a:	18d3      	adds	r3, r2, r3
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	469f      	mov	pc, r3
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8023060:	2302      	movs	r3, #2
 8023062:	e0c7      	b.n	80231f4 <GUI_SendAnswer+0x1c4>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8023064:	4a67      	ldr	r2, [pc, #412]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023066:	240f      	movs	r4, #15
 8023068:	193b      	adds	r3, r7, r4
 802306a:	781b      	ldrb	r3, [r3, #0]
 802306c:	0011      	movs	r1, r2
 802306e:	0018      	movs	r0, r3
 8023070:	f000 fe2c 	bl	8023ccc <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	4a63      	ldr	r2, [pc, #396]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023078:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 802307a:	4b62      	ldr	r3, [pc, #392]	; (8023204 <GUI_SendAnswer+0x1d4>)
 802307c:	0018      	movs	r0, r3
 802307e:	f7ff fbe9 	bl	8022854 <TLV_get_string_length>
 8023082:	0003      	movs	r3, r0
 8023084:	b2db      	uxtb	r3, r3
 8023086:	3308      	adds	r3, #8
 8023088:	b2da      	uxtb	r2, r3
 802308a:	683b      	ldr	r3, [r7, #0]
 802308c:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	681a      	ldr	r2, [r3, #0]
 8023092:	683b      	ldr	r3, [r7, #0]
 8023094:	781b      	ldrb	r3, [r3, #0]
 8023096:	0019      	movs	r1, r3
 8023098:	0010      	movs	r0, r2
 802309a:	f002 fc69 	bl	8025970 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 802309e:	4b5a      	ldr	r3, [pc, #360]	; (8023208 <GUI_SendAnswer+0x1d8>)
 80230a0:	2201      	movs	r2, #1
 80230a2:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 80230a4:	193b      	adds	r3, r7, r4
 80230a6:	781b      	ldrb	r3, [r3, #0]
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	d105      	bne.n	80230b8 <GUI_SendAnswer+0x88>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 80230ac:	4b57      	ldr	r3, [pc, #348]	; (802320c <GUI_SendAnswer+0x1dc>)
 80230ae:	2270      	movs	r2, #112	; 0x70
 80230b0:	0019      	movs	r1, r3
 80230b2:	2000      	movs	r0, #0
 80230b4:	f7ff fe97 	bl	8022de6 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 80230b8:	2300      	movs	r3, #0
 80230ba:	e09b      	b.n	80231f4 <GUI_SendAnswer+0x1c4>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 80230bc:	220f      	movs	r2, #15
 80230be:	18bb      	adds	r3, r7, r2
 80230c0:	781b      	ldrb	r3, [r3, #0]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	d009      	beq.n	80230da <GUI_SendAnswer+0xaa>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 80230c6:	18bb      	adds	r3, r7, r2
 80230c8:	781b      	ldrb	r3, [r3, #0]
 80230ca:	3b01      	subs	r3, #1
 80230cc:	b2db      	uxtb	r3, r3
 80230ce:	4a4d      	ldr	r2, [pc, #308]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80230d0:	494a      	ldr	r1, [pc, #296]	; (80231fc <GUI_SendAnswer+0x1cc>)
 80230d2:	0018      	movs	r0, r3
 80230d4:	f001 ff28 	bl	8024f28 <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80230d8:	e07d      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80230da:	494a      	ldr	r1, [pc, #296]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80230dc:	230f      	movs	r3, #15
 80230de:	18fb      	adds	r3, r7, r3
 80230e0:	781b      	ldrb	r3, [r3, #0]
 80230e2:	2205      	movs	r2, #5
 80230e4:	0018      	movs	r0, r3
 80230e6:	f002 f9ff 	bl	80254e8 <Send_DpmConfigGetRej>
      break;
 80230ea:	e074      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 80230ec:	220f      	movs	r2, #15
 80230ee:	18bb      	adds	r3, r7, r2
 80230f0:	781b      	ldrb	r3, [r3, #0]
 80230f2:	2b00      	cmp	r3, #0
 80230f4:	d009      	beq.n	802310a <GUI_SendAnswer+0xda>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 80230f6:	18bb      	adds	r3, r7, r2
 80230f8:	781b      	ldrb	r3, [r3, #0]
 80230fa:	3b01      	subs	r3, #1
 80230fc:	b2db      	uxtb	r3, r3
 80230fe:	4a41      	ldr	r2, [pc, #260]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023100:	493e      	ldr	r1, [pc, #248]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023102:	0018      	movs	r0, r3
 8023104:	f001 fad0 	bl	80246a8 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8023108:	e065      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 802310a:	493e      	ldr	r1, [pc, #248]	; (8023204 <GUI_SendAnswer+0x1d4>)
 802310c:	230f      	movs	r3, #15
 802310e:	18fb      	adds	r3, r7, r3
 8023110:	781b      	ldrb	r3, [r3, #0]
 8023112:	2205      	movs	r2, #5
 8023114:	0018      	movs	r0, r3
 8023116:	f002 f9e7 	bl	80254e8 <Send_DpmConfigGetRej>
      break;
 802311a:	e05c      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 802311c:	220f      	movs	r2, #15
 802311e:	18bb      	adds	r3, r7, r2
 8023120:	781b      	ldrb	r3, [r3, #0]
 8023122:	2b00      	cmp	r3, #0
 8023124:	d009      	beq.n	802313a <GUI_SendAnswer+0x10a>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 8023126:	18bb      	adds	r3, r7, r2
 8023128:	781b      	ldrb	r3, [r3, #0]
 802312a:	3b01      	subs	r3, #1
 802312c:	b2db      	uxtb	r3, r3
 802312e:	4a35      	ldr	r2, [pc, #212]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023130:	4932      	ldr	r1, [pc, #200]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023132:	0018      	movs	r0, r3
 8023134:	f000 ff78 	bl	8024028 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8023138:	e04d      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 802313a:	4932      	ldr	r1, [pc, #200]	; (8023204 <GUI_SendAnswer+0x1d4>)
 802313c:	230f      	movs	r3, #15
 802313e:	18fb      	adds	r3, r7, r3
 8023140:	781b      	ldrb	r3, [r3, #0]
 8023142:	2205      	movs	r2, #5
 8023144:	0018      	movs	r0, r3
 8023146:	f002 f9f1 	bl	802552c <Send_DpmMessageRej>
      break;
 802314a:	e044      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 802314c:	220f      	movs	r2, #15
 802314e:	18bb      	adds	r3, r7, r2
 8023150:	781b      	ldrb	r3, [r3, #0]
 8023152:	2b00      	cmp	r3, #0
 8023154:	d01d      	beq.n	8023192 <GUI_SendAnswer+0x162>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 8023156:	4b29      	ldr	r3, [pc, #164]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023158:	795b      	ldrb	r3, [r3, #5]
 802315a:	2b00      	cmp	r3, #0
 802315c:	d10d      	bne.n	802317a <GUI_SendAnswer+0x14a>
 802315e:	4b27      	ldr	r3, [pc, #156]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023160:	799b      	ldrb	r3, [r3, #6]
 8023162:	2b00      	cmp	r3, #0
 8023164:	d109      	bne.n	802317a <GUI_SendAnswer+0x14a>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 8023166:	18bb      	adds	r3, r7, r2
 8023168:	781b      	ldrb	r3, [r3, #0]
 802316a:	3b01      	subs	r3, #1
 802316c:	b2db      	uxtb	r3, r3
 802316e:	4925      	ldr	r1, [pc, #148]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023170:	22ff      	movs	r2, #255	; 0xff
 8023172:	0018      	movs	r0, r3
 8023174:	f002 f9fc 	bl	8025570 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8023178:	e02d      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 802317a:	230f      	movs	r3, #15
 802317c:	18fb      	adds	r3, r7, r3
 802317e:	781b      	ldrb	r3, [r3, #0]
 8023180:	3b01      	subs	r3, #1
 8023182:	b2d8      	uxtb	r0, r3
 8023184:	4b1d      	ldr	r3, [pc, #116]	; (80231fc <GUI_SendAnswer+0x1cc>)
 8023186:	79da      	ldrb	r2, [r3, #7]
 8023188:	4b1e      	ldr	r3, [pc, #120]	; (8023204 <GUI_SendAnswer+0x1d4>)
 802318a:	0019      	movs	r1, r3
 802318c:	f002 f9f0 	bl	8025570 <Send_DpmRegisterReadCnf>
      break;
 8023190:	e021      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8023192:	491c      	ldr	r1, [pc, #112]	; (8023204 <GUI_SendAnswer+0x1d4>)
 8023194:	230f      	movs	r3, #15
 8023196:	18fb      	adds	r3, r7, r3
 8023198:	781b      	ldrb	r3, [r3, #0]
 802319a:	2205      	movs	r2, #5
 802319c:	0018      	movs	r0, r3
 802319e:	f002 f9a3 	bl	80254e8 <Send_DpmConfigGetRej>
      break;
 80231a2:	e018      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 80231a4:	220f      	movs	r2, #15
 80231a6:	18bb      	adds	r3, r7, r2
 80231a8:	781b      	ldrb	r3, [r3, #0]
 80231aa:	2b00      	cmp	r3, #0
 80231ac:	d009      	beq.n	80231c2 <GUI_SendAnswer+0x192>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 80231ae:	18bb      	adds	r3, r7, r2
 80231b0:	781b      	ldrb	r3, [r3, #0]
 80231b2:	3b01      	subs	r3, #1
 80231b4:	b2db      	uxtb	r3, r3
 80231b6:	4a11      	ldr	r2, [pc, #68]	; (80231fc <GUI_SendAnswer+0x1cc>)
 80231b8:	4912      	ldr	r1, [pc, #72]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80231ba:	0018      	movs	r0, r3
 80231bc:	f002 fa36 	bl	802562c <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 80231c0:	e009      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 80231c2:	4910      	ldr	r1, [pc, #64]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80231c4:	230f      	movs	r3, #15
 80231c6:	18fb      	adds	r3, r7, r3
 80231c8:	781b      	ldrb	r3, [r3, #0]
 80231ca:	2205      	movs	r2, #5
 80231cc:	0018      	movs	r0, r3
 80231ce:	f002 f98b 	bl	80254e8 <Send_DpmConfigGetRej>
      break;
 80231d2:	e000      	b.n	80231d6 <GUI_SendAnswer+0x1a6>
    default :
      break;
 80231d4:	46c0      	nop			; (mov r8, r8)
  }

  *pMsgToSend = Processed;
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	4a0a      	ldr	r2, [pc, #40]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80231da:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 80231dc:	4b09      	ldr	r3, [pc, #36]	; (8023204 <GUI_SendAnswer+0x1d4>)
 80231de:	0018      	movs	r0, r3
 80231e0:	f7ff fb38 	bl	8022854 <TLV_get_string_length>
 80231e4:	0003      	movs	r3, r0
 80231e6:	b2db      	uxtb	r3, r3
 80231e8:	3308      	adds	r3, #8
 80231ea:	b2da      	uxtb	r2, r3
 80231ec:	683b      	ldr	r3, [r7, #0]
 80231ee:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 80231f0:	4b05      	ldr	r3, [pc, #20]	; (8023208 <GUI_SendAnswer+0x1d8>)
 80231f2:	781b      	ldrb	r3, [r3, #0]
}
 80231f4:	0018      	movs	r0, r3
 80231f6:	46bd      	mov	sp, r7
 80231f8:	b005      	add	sp, #20
 80231fa:	bd90      	pop	{r4, r7, pc}
 80231fc:	20004e48 	.word	0x20004e48
 8023200:	0802b254 	.word	0x0802b254
 8023204:	20004f48 	.word	0x20004f48
 8023208:	20005048 	.word	0x20005048
 802320c:	00006020 	.word	0x00006020

08023210 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 8023210:	b5b0      	push	{r4, r5, r7, lr}
 8023212:	b0a6      	sub	sp, #152	; 0x98
 8023214:	af00      	add	r7, sp, #0
 8023216:	60b9      	str	r1, [r7, #8]
 8023218:	607a      	str	r2, [r7, #4]
 802321a:	603b      	str	r3, [r7, #0]
 802321c:	240f      	movs	r4, #15
 802321e:	193b      	adds	r3, r7, r4
 8023220:	1c02      	adds	r2, r0, #0
 8023222:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 8023224:	2397      	movs	r3, #151	; 0x97
 8023226:	18fb      	adds	r3, r7, r3
 8023228:	2200      	movs	r2, #0
 802322a:	701a      	strb	r2, [r3, #0]

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 802322c:	4bbf      	ldr	r3, [pc, #764]	; (802352c <GUI_SendNotification+0x31c>)
 802322e:	781b      	ldrb	r3, [r3, #0]
 8023230:	2b01      	cmp	r3, #1
 8023232:	d001      	beq.n	8023238 <GUI_SendNotification+0x28>
 8023234:	f000 fbe4 	bl	8023a00 <GUI_SendNotification+0x7f0>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 8023238:	193b      	adds	r3, r7, r4
 802323a:	781b      	ldrb	r3, [r3, #0]
 802323c:	3301      	adds	r3, #1
 802323e:	b2db      	uxtb	r3, r3
 8023240:	015b      	lsls	r3, r3, #5
 8023242:	b2db      	uxtb	r3, r3
 8023244:	220c      	movs	r2, #12
 8023246:	4313      	orrs	r3, r2
 8023248:	b2d9      	uxtb	r1, r3
 802324a:	4bb9      	ldr	r3, [pc, #740]	; (8023530 <GUI_SendNotification+0x320>)
 802324c:	2280      	movs	r2, #128	; 0x80
 802324e:	0052      	lsls	r2, r2, #1
 8023250:	2584      	movs	r5, #132	; 0x84
 8023252:	1978      	adds	r0, r7, r5
 8023254:	f7ff f893 	bl	802237e <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 8023258:	683b      	ldr	r3, [r7, #0]
 802325a:	2220      	movs	r2, #32
 802325c:	4013      	ands	r3, r2
 802325e:	d100      	bne.n	8023262 <GUI_SendNotification+0x52>
 8023260:	e08d      	b.n	802337e <GUI_SendNotification+0x16e>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 8023262:	193b      	adds	r3, r7, r4
 8023264:	781b      	ldrb	r3, [r3, #0]
 8023266:	4ab3      	ldr	r2, [pc, #716]	; (8023534 <GUI_SendNotification+0x324>)
 8023268:	009b      	lsls	r3, r3, #2
 802326a:	18d3      	adds	r3, r2, r3
 802326c:	785b      	ldrb	r3, [r3, #1]
 802326e:	075b      	lsls	r3, r3, #29
 8023270:	0f5b      	lsrs	r3, r3, #29
 8023272:	b2db      	uxtb	r3, r3
 8023274:	001a      	movs	r2, r3
 8023276:	2180      	movs	r1, #128	; 0x80
 8023278:	187b      	adds	r3, r7, r1
 802327a:	701a      	strb	r2, [r3, #0]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 802327c:	187b      	adds	r3, r7, r1
 802327e:	1978      	adds	r0, r7, r5
 8023280:	2201      	movs	r2, #1
 8023282:	2105      	movs	r1, #5
 8023284:	f7ff f8de 	bl	8022444 <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8023288:	193b      	adds	r3, r7, r4
 802328a:	781b      	ldrb	r3, [r3, #0]
 802328c:	4aa9      	ldr	r2, [pc, #676]	; (8023534 <GUI_SendNotification+0x324>)
 802328e:	009b      	lsls	r3, r3, #2
 8023290:	18d3      	adds	r3, r2, r3
 8023292:	785b      	ldrb	r3, [r3, #1]
 8023294:	06db      	lsls	r3, r3, #27
 8023296:	0fdb      	lsrs	r3, r3, #31
 8023298:	b2db      	uxtb	r3, r3
 802329a:	2b01      	cmp	r3, #1
 802329c:	d16f      	bne.n	802337e <GUI_SendNotification+0x16e>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 802329e:	193b      	adds	r3, r7, r4
 80232a0:	781a      	ldrb	r2, [r3, #0]
 80232a2:	4ba4      	ldr	r3, [pc, #656]	; (8023534 <GUI_SendNotification+0x324>)
 80232a4:	0092      	lsls	r2, r2, #2
 80232a6:	5cd3      	ldrb	r3, [r2, r3]
 80232a8:	061b      	lsls	r3, r3, #24
 80232aa:	0f9b      	lsrs	r3, r3, #30
 80232ac:	b2db      	uxtb	r3, r3
 80232ae:	001a      	movs	r2, r3
 80232b0:	217c      	movs	r1, #124	; 0x7c
 80232b2:	187b      	adds	r3, r7, r1
 80232b4:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 80232b6:	187b      	adds	r3, r7, r1
 80232b8:	1978      	adds	r0, r7, r5
 80232ba:	2201      	movs	r2, #1
 80232bc:	2106      	movs	r1, #6
 80232be:	f7ff f8c1 	bl	8022444 <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80232c2:	193b      	adds	r3, r7, r4
 80232c4:	781a      	ldrb	r2, [r3, #0]
 80232c6:	4b9b      	ldr	r3, [pc, #620]	; (8023534 <GUI_SendNotification+0x324>)
 80232c8:	0092      	lsls	r2, r2, #2
 80232ca:	5cd3      	ldrb	r3, [r2, r3]
 80232cc:	075b      	lsls	r3, r3, #29
 80232ce:	0fdb      	lsrs	r3, r3, #31
 80232d0:	b2db      	uxtb	r3, r3
 80232d2:	001a      	movs	r2, r3
 80232d4:	2178      	movs	r1, #120	; 0x78
 80232d6:	187b      	adds	r3, r7, r1
 80232d8:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 80232da:	187b      	adds	r3, r7, r1
 80232dc:	1978      	adds	r0, r7, r5
 80232de:	2201      	movs	r2, #1
 80232e0:	2108      	movs	r1, #8
 80232e2:	f7ff f8af 	bl	8022444 <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 80232e6:	217f      	movs	r1, #127	; 0x7f
 80232e8:	187b      	adds	r3, r7, r1
 80232ea:	2203      	movs	r2, #3
 80232ec:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 80232ee:	187b      	adds	r3, r7, r1
 80232f0:	1978      	adds	r0, r7, r5
 80232f2:	2201      	movs	r2, #1
 80232f4:	2109      	movs	r1, #9
 80232f6:	f7ff f8a5 	bl	8022444 <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 80232fa:	193b      	adds	r3, r7, r4
 80232fc:	781b      	ldrb	r3, [r3, #0]
 80232fe:	4a8d      	ldr	r2, [pc, #564]	; (8023534 <GUI_SendNotification+0x324>)
 8023300:	009b      	lsls	r3, r3, #2
 8023302:	18d3      	adds	r3, r2, r3
 8023304:	785b      	ldrb	r3, [r3, #1]
 8023306:	075b      	lsls	r3, r3, #29
 8023308:	0f5b      	lsrs	r3, r3, #29
 802330a:	b2db      	uxtb	r3, r3
 802330c:	2b03      	cmp	r3, #3
 802330e:	d136      	bne.n	802337e <GUI_SendNotification+0x16e>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8023310:	193b      	adds	r3, r7, r4
 8023312:	781a      	ldrb	r2, [r3, #0]
 8023314:	4b87      	ldr	r3, [pc, #540]	; (8023534 <GUI_SendNotification+0x324>)
 8023316:	0092      	lsls	r2, r2, #2
 8023318:	5cd3      	ldrb	r3, [r2, r3]
 802331a:	071b      	lsls	r3, r3, #28
 802331c:	0fdb      	lsrs	r3, r3, #31
 802331e:	b2db      	uxtb	r3, r3
 8023320:	001a      	movs	r2, r3
 8023322:	2174      	movs	r1, #116	; 0x74
 8023324:	187b      	adds	r3, r7, r1
 8023326:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8023328:	187b      	adds	r3, r7, r1
 802332a:	1978      	adds	r0, r7, r5
 802332c:	2201      	movs	r2, #1
 802332e:	2107      	movs	r1, #7
 8023330:	f7ff f888 	bl	8022444 <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8023334:	193b      	adds	r3, r7, r4
 8023336:	781b      	ldrb	r3, [r3, #0]
 8023338:	4a7e      	ldr	r2, [pc, #504]	; (8023534 <GUI_SendNotification+0x324>)
 802333a:	009b      	lsls	r3, r3, #2
 802333c:	18d3      	adds	r3, r2, r3
 802333e:	785b      	ldrb	r3, [r3, #1]
 8023340:	061b      	lsls	r3, r3, #24
 8023342:	0fdb      	lsrs	r3, r3, #31
 8023344:	b2db      	uxtb	r3, r3
 8023346:	001a      	movs	r2, r3
 8023348:	2170      	movs	r1, #112	; 0x70
 802334a:	187b      	adds	r3, r7, r1
 802334c:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 802334e:	187b      	adds	r3, r7, r1
 8023350:	1978      	adds	r0, r7, r5
 8023352:	2201      	movs	r2, #1
 8023354:	210a      	movs	r1, #10
 8023356:	f7ff f875 	bl	8022444 <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 802335a:	193b      	adds	r3, r7, r4
 802335c:	781a      	ldrb	r2, [r3, #0]
 802335e:	4b75      	ldr	r3, [pc, #468]	; (8023534 <GUI_SendNotification+0x324>)
 8023360:	0092      	lsls	r2, r2, #2
 8023362:	5cd3      	ldrb	r3, [r2, r3]
 8023364:	079b      	lsls	r3, r3, #30
 8023366:	0f9b      	lsrs	r3, r3, #30
 8023368:	b2db      	uxtb	r3, r3
 802336a:	001a      	movs	r2, r3
 802336c:	216c      	movs	r1, #108	; 0x6c
 802336e:	187b      	adds	r3, r7, r1
 8023370:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8023372:	187b      	adds	r3, r7, r1
 8023374:	1978      	adds	r0, r7, r5
 8023376:	2201      	movs	r2, #1
 8023378:	210d      	movs	r1, #13
 802337a:	f7ff f863 	bl	8022444 <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 802337e:	683a      	ldr	r2, [r7, #0]
 8023380:	2380      	movs	r3, #128	; 0x80
 8023382:	019b      	lsls	r3, r3, #6
 8023384:	4013      	ands	r3, r2
 8023386:	d100      	bne.n	802338a <GUI_SendNotification+0x17a>
 8023388:	e27d      	b.n	8023886 <GUI_SendNotification+0x676>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 802338a:	22a0      	movs	r2, #160	; 0xa0
 802338c:	2108      	movs	r1, #8
 802338e:	1853      	adds	r3, r2, r1
 8023390:	19db      	adds	r3, r3, r7
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	2b70      	cmp	r3, #112	; 0x70
 8023396:	d100      	bne.n	802339a <GUI_SendNotification+0x18a>
 8023398:	e1c1      	b.n	802371e <GUI_SendNotification+0x50e>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 802339a:	2384      	movs	r3, #132	; 0x84
 802339c:	18f8      	adds	r0, r7, r3
 802339e:	0014      	movs	r4, r2
 80233a0:	000d      	movs	r5, r1
 80233a2:	1853      	adds	r3, r2, r1
 80233a4:	19db      	adds	r3, r3, r7
 80233a6:	2201      	movs	r2, #1
 80233a8:	210e      	movs	r1, #14
 80233aa:	f7ff f84b 	bl	8022444 <TLV_add>

        switch (Value)
 80233ae:	0022      	movs	r2, r4
 80233b0:	1953      	adds	r3, r2, r5
 80233b2:	19db      	adds	r3, r3, r7
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	2b42      	cmp	r3, #66	; 0x42
 80233b8:	d80b      	bhi.n	80233d2 <GUI_SendNotification+0x1c2>
 80233ba:	2b07      	cmp	r3, #7
 80233bc:	d200      	bcs.n	80233c0 <GUI_SendNotification+0x1b0>
 80233be:	e25b      	b.n	8023878 <GUI_SendNotification+0x668>
 80233c0:	3b07      	subs	r3, #7
 80233c2:	2b3b      	cmp	r3, #59	; 0x3b
 80233c4:	d900      	bls.n	80233c8 <GUI_SendNotification+0x1b8>
 80233c6:	e257      	b.n	8023878 <GUI_SendNotification+0x668>
 80233c8:	009a      	lsls	r2, r3, #2
 80233ca:	4b5b      	ldr	r3, [pc, #364]	; (8023538 <GUI_SendNotification+0x328>)
 80233cc:	18d3      	adds	r3, r2, r3
 80233ce:	681b      	ldr	r3, [r3, #0]
 80233d0:	469f      	mov	pc, r3
 80233d2:	2b5a      	cmp	r3, #90	; 0x5a
 80233d4:	d000      	beq.n	80233d8 <GUI_SendNotification+0x1c8>
 80233d6:	e24f      	b.n	8023878 <GUI_SendNotification+0x668>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 80233d8:	240f      	movs	r4, #15
 80233da:	193b      	adds	r3, r7, r4
 80233dc:	781b      	ldrb	r3, [r3, #0]
 80233de:	4a55      	ldr	r2, [pc, #340]	; (8023534 <GUI_SendNotification+0x324>)
 80233e0:	009b      	lsls	r3, r3, #2
 80233e2:	18d3      	adds	r3, r2, r3
 80233e4:	785b      	ldrb	r3, [r3, #1]
 80233e6:	075b      	lsls	r3, r3, #29
 80233e8:	0f5b      	lsrs	r3, r3, #29
 80233ea:	b2db      	uxtb	r3, r3
 80233ec:	001a      	movs	r2, r3
 80233ee:	2168      	movs	r1, #104	; 0x68
 80233f0:	187b      	adds	r3, r7, r1
 80233f2:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 80233f4:	187b      	adds	r3, r7, r1
 80233f6:	2584      	movs	r5, #132	; 0x84
 80233f8:	1978      	adds	r0, r7, r5
 80233fa:	2201      	movs	r2, #1
 80233fc:	2105      	movs	r1, #5
 80233fe:	f7ff f821 	bl	8022444 <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8023402:	193b      	adds	r3, r7, r4
 8023404:	781b      	ldrb	r3, [r3, #0]
 8023406:	4a4b      	ldr	r2, [pc, #300]	; (8023534 <GUI_SendNotification+0x324>)
 8023408:	009b      	lsls	r3, r3, #2
 802340a:	18d3      	adds	r3, r2, r3
 802340c:	785b      	ldrb	r3, [r3, #1]
 802340e:	075b      	lsls	r3, r3, #29
 8023410:	0f5b      	lsrs	r3, r3, #29
 8023412:	b2db      	uxtb	r3, r3
 8023414:	2b00      	cmp	r3, #0
 8023416:	d000      	beq.n	802341a <GUI_SendNotification+0x20a>
 8023418:	e234      	b.n	8023884 <GUI_SendNotification+0x674>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 802341a:	193b      	adds	r3, r7, r4
 802341c:	781a      	ldrb	r2, [r3, #0]
 802341e:	4b45      	ldr	r3, [pc, #276]	; (8023534 <GUI_SendNotification+0x324>)
 8023420:	0092      	lsls	r2, r2, #2
 8023422:	5cd3      	ldrb	r3, [r2, r3]
 8023424:	061b      	lsls	r3, r3, #24
 8023426:	0f9b      	lsrs	r3, r3, #30
 8023428:	b2db      	uxtb	r3, r3
 802342a:	001a      	movs	r2, r3
 802342c:	2138      	movs	r1, #56	; 0x38
 802342e:	187b      	adds	r3, r7, r1
 8023430:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8023432:	187b      	adds	r3, r7, r1
 8023434:	1978      	adds	r0, r7, r5
 8023436:	2201      	movs	r2, #1
 8023438:	2106      	movs	r1, #6
 802343a:	f7ff f803 	bl	8022444 <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 802343e:	193b      	adds	r3, r7, r4
 8023440:	781a      	ldrb	r2, [r3, #0]
 8023442:	4b3c      	ldr	r3, [pc, #240]	; (8023534 <GUI_SendNotification+0x324>)
 8023444:	0092      	lsls	r2, r2, #2
 8023446:	5cd3      	ldrb	r3, [r2, r3]
 8023448:	075b      	lsls	r3, r3, #29
 802344a:	0fdb      	lsrs	r3, r3, #31
 802344c:	b2db      	uxtb	r3, r3
 802344e:	001a      	movs	r2, r3
 8023450:	2134      	movs	r1, #52	; 0x34
 8023452:	187b      	adds	r3, r7, r1
 8023454:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8023456:	187b      	adds	r3, r7, r1
 8023458:	1978      	adds	r0, r7, r5
 802345a:	2201      	movs	r2, #1
 802345c:	2108      	movs	r1, #8
 802345e:	f7fe fff1 	bl	8022444 <TLV_add>
            }
            break;
 8023462:	e20f      	b.n	8023884 <GUI_SendNotification+0x674>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 8023464:	240f      	movs	r4, #15
 8023466:	193b      	adds	r3, r7, r4
 8023468:	781a      	ldrb	r2, [r3, #0]
 802346a:	4934      	ldr	r1, [pc, #208]	; (802353c <GUI_SendNotification+0x32c>)
 802346c:	0013      	movs	r3, r2
 802346e:	00db      	lsls	r3, r3, #3
 8023470:	1a9b      	subs	r3, r3, r2
 8023472:	011b      	lsls	r3, r3, #4
 8023474:	18cb      	adds	r3, r1, r3
 8023476:	333c      	adds	r3, #60	; 0x3c
 8023478:	681b      	ldr	r3, [r3, #0]
 802347a:	b2da      	uxtb	r2, r3
 802347c:	2164      	movs	r1, #100	; 0x64
 802347e:	187b      	adds	r3, r7, r1
 8023480:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8023482:	187b      	adds	r3, r7, r1
 8023484:	2584      	movs	r5, #132	; 0x84
 8023486:	1978      	adds	r0, r7, r5
 8023488:	2201      	movs	r2, #1
 802348a:	2100      	movs	r1, #0
 802348c:	f7fe ffda 	bl	8022444 <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8023490:	193b      	adds	r3, r7, r4
 8023492:	781a      	ldrb	r2, [r3, #0]
 8023494:	4929      	ldr	r1, [pc, #164]	; (802353c <GUI_SendNotification+0x32c>)
 8023496:	0013      	movs	r3, r2
 8023498:	00db      	lsls	r3, r3, #3
 802349a:	1a9b      	subs	r3, r3, r2
 802349c:	011b      	lsls	r3, r3, #4
 802349e:	18cb      	adds	r3, r1, r3
 80234a0:	333c      	adds	r3, #60	; 0x3c
 80234a2:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80234a4:	b29b      	uxth	r3, r3
 80234a6:	009b      	lsls	r3, r3, #2
 80234a8:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 80234aa:	193b      	adds	r3, r7, r4
 80234ac:	781a      	ldrb	r2, [r3, #0]
 80234ae:	0013      	movs	r3, r2
 80234b0:	00db      	lsls	r3, r3, #3
 80234b2:	1a9b      	subs	r3, r3, r2
 80234b4:	011b      	lsls	r3, r3, #4
 80234b6:	3320      	adds	r3, #32
 80234b8:	001a      	movs	r2, r3
 80234ba:	4b20      	ldr	r3, [pc, #128]	; (802353c <GUI_SendNotification+0x32c>)
 80234bc:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80234be:	1978      	adds	r0, r7, r5
 80234c0:	000a      	movs	r2, r1
 80234c2:	2104      	movs	r1, #4
 80234c4:	f7fe ffbe 	bl	8022444 <TLV_add>
            break;
 80234c8:	e1dd      	b.n	8023886 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80234ca:	240f      	movs	r4, #15
 80234cc:	193b      	adds	r3, r7, r4
 80234ce:	781a      	ldrb	r2, [r3, #0]
 80234d0:	491a      	ldr	r1, [pc, #104]	; (802353c <GUI_SendNotification+0x32c>)
 80234d2:	0013      	movs	r3, r2
 80234d4:	00db      	lsls	r3, r3, #3
 80234d6:	1a9b      	subs	r3, r3, r2
 80234d8:	011b      	lsls	r3, r3, #4
 80234da:	18cb      	adds	r3, r1, r3
 80234dc:	331c      	adds	r3, #28
 80234de:	681b      	ldr	r3, [r3, #0]
 80234e0:	b2da      	uxtb	r2, r3
 80234e2:	2160      	movs	r1, #96	; 0x60
 80234e4:	187b      	adds	r3, r7, r1
 80234e6:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 80234e8:	187b      	adds	r3, r7, r1
 80234ea:	2584      	movs	r5, #132	; 0x84
 80234ec:	1978      	adds	r0, r7, r5
 80234ee:	2201      	movs	r2, #1
 80234f0:	2103      	movs	r1, #3
 80234f2:	f7fe ffa7 	bl	8022444 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 80234f6:	193b      	adds	r3, r7, r4
 80234f8:	781a      	ldrb	r2, [r3, #0]
 80234fa:	4910      	ldr	r1, [pc, #64]	; (802353c <GUI_SendNotification+0x32c>)
 80234fc:	0013      	movs	r3, r2
 80234fe:	00db      	lsls	r3, r3, #3
 8023500:	1a9b      	subs	r3, r3, r2
 8023502:	011b      	lsls	r3, r3, #4
 8023504:	18cb      	adds	r3, r1, r3
 8023506:	331c      	adds	r3, #28
 8023508:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 802350a:	b29b      	uxth	r3, r3
 802350c:	009b      	lsls	r3, r3, #2
 802350e:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8023510:	193b      	adds	r3, r7, r4
 8023512:	781a      	ldrb	r2, [r3, #0]
 8023514:	0013      	movs	r3, r2
 8023516:	00db      	lsls	r3, r3, #3
 8023518:	1a9b      	subs	r3, r3, r2
 802351a:	011b      	lsls	r3, r3, #4
 802351c:	4a07      	ldr	r2, [pc, #28]	; (802353c <GUI_SendNotification+0x32c>)
 802351e:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8023520:	1978      	adds	r0, r7, r5
 8023522:	000a      	movs	r2, r1
 8023524:	2102      	movs	r1, #2
 8023526:	f7fe ff8d 	bl	8022444 <TLV_add>
            break;
 802352a:	e1ac      	b.n	8023886 <GUI_SendNotification+0x676>
 802352c:	20005048 	.word	0x20005048
 8023530:	20004f48 	.word	0x20004f48
 8023534:	200033fc 	.word	0x200033fc
 8023538:	0802b298 	.word	0x0802b298
 802353c:	20005068 	.word	0x20005068
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8023540:	240f      	movs	r4, #15
 8023542:	193b      	adds	r3, r7, r4
 8023544:	781a      	ldrb	r2, [r3, #0]
 8023546:	4bcd      	ldr	r3, [pc, #820]	; (802387c <GUI_SendNotification+0x66c>)
 8023548:	0092      	lsls	r2, r2, #2
 802354a:	5cd3      	ldrb	r3, [r2, r3]
 802354c:	075b      	lsls	r3, r3, #29
 802354e:	0fdb      	lsrs	r3, r3, #31
 8023550:	b2db      	uxtb	r3, r3
 8023552:	2b00      	cmp	r3, #0
 8023554:	d12e      	bne.n	80235b4 <GUI_SendNotification+0x3a4>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8023556:	193b      	adds	r3, r7, r4
 8023558:	781a      	ldrb	r2, [r3, #0]
 802355a:	49c9      	ldr	r1, [pc, #804]	; (8023880 <GUI_SendNotification+0x670>)
 802355c:	0013      	movs	r3, r2
 802355e:	00db      	lsls	r3, r3, #3
 8023560:	1a9b      	subs	r3, r3, r2
 8023562:	011b      	lsls	r3, r3, #4
 8023564:	18cb      	adds	r3, r1, r3
 8023566:	331c      	adds	r3, #28
 8023568:	681b      	ldr	r3, [r3, #0]
 802356a:	b2da      	uxtb	r2, r3
 802356c:	2130      	movs	r1, #48	; 0x30
 802356e:	187b      	adds	r3, r7, r1
 8023570:	701a      	strb	r2, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8023572:	187b      	adds	r3, r7, r1
 8023574:	2584      	movs	r5, #132	; 0x84
 8023576:	1978      	adds	r0, r7, r5
 8023578:	2201      	movs	r2, #1
 802357a:	2103      	movs	r1, #3
 802357c:	f7fe ff62 	bl	8022444 <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8023580:	193b      	adds	r3, r7, r4
 8023582:	781a      	ldrb	r2, [r3, #0]
 8023584:	49be      	ldr	r1, [pc, #760]	; (8023880 <GUI_SendNotification+0x670>)
 8023586:	0013      	movs	r3, r2
 8023588:	00db      	lsls	r3, r3, #3
 802358a:	1a9b      	subs	r3, r3, r2
 802358c:	011b      	lsls	r3, r3, #4
 802358e:	18cb      	adds	r3, r1, r3
 8023590:	331c      	adds	r3, #28
 8023592:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8023594:	b29b      	uxth	r3, r3
 8023596:	009b      	lsls	r3, r3, #2
 8023598:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 802359a:	193b      	adds	r3, r7, r4
 802359c:	781a      	ldrb	r2, [r3, #0]
 802359e:	0013      	movs	r3, r2
 80235a0:	00db      	lsls	r3, r3, #3
 80235a2:	1a9b      	subs	r3, r3, r2
 80235a4:	011b      	lsls	r3, r3, #4
 80235a6:	4ab6      	ldr	r2, [pc, #728]	; (8023880 <GUI_SendNotification+0x670>)
 80235a8:	189b      	adds	r3, r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80235aa:	1978      	adds	r0, r7, r5
 80235ac:	000a      	movs	r2, r1
 80235ae:	2102      	movs	r1, #2
 80235b0:	f7fe ff48 	bl	8022444 <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80235b4:	240f      	movs	r4, #15
 80235b6:	193b      	adds	r3, r7, r4
 80235b8:	781a      	ldrb	r2, [r3, #0]
 80235ba:	49b1      	ldr	r1, [pc, #708]	; (8023880 <GUI_SendNotification+0x670>)
 80235bc:	0013      	movs	r3, r2
 80235be:	00db      	lsls	r3, r3, #3
 80235c0:	1a9b      	subs	r3, r3, r2
 80235c2:	011b      	lsls	r3, r3, #4
 80235c4:	18cb      	adds	r3, r1, r3
 80235c6:	3340      	adds	r3, #64	; 0x40
 80235c8:	681b      	ldr	r3, [r3, #0]
 80235ca:	b2da      	uxtb	r2, r3
 80235cc:	215c      	movs	r1, #92	; 0x5c
 80235ce:	187b      	adds	r3, r7, r1
 80235d0:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80235d2:	187b      	adds	r3, r7, r1
 80235d4:	2584      	movs	r5, #132	; 0x84
 80235d6:	1978      	adds	r0, r7, r5
 80235d8:	2201      	movs	r2, #1
 80235da:	2101      	movs	r1, #1
 80235dc:	f7fe ff32 	bl	8022444 <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80235e0:	193b      	adds	r3, r7, r4
 80235e2:	781a      	ldrb	r2, [r3, #0]
 80235e4:	4ba5      	ldr	r3, [pc, #660]	; (802387c <GUI_SendNotification+0x66c>)
 80235e6:	0092      	lsls	r2, r2, #2
 80235e8:	5cd3      	ldrb	r3, [r2, r3]
 80235ea:	071b      	lsls	r3, r3, #28
 80235ec:	0fdb      	lsrs	r3, r3, #31
 80235ee:	b2db      	uxtb	r3, r3
 80235f0:	001a      	movs	r2, r3
 80235f2:	2158      	movs	r1, #88	; 0x58
 80235f4:	187b      	adds	r3, r7, r1
 80235f6:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80235f8:	187b      	adds	r3, r7, r1
 80235fa:	1978      	adds	r0, r7, r5
 80235fc:	2201      	movs	r2, #1
 80235fe:	2107      	movs	r1, #7
 8023600:	f7fe ff20 	bl	8022444 <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8023604:	193b      	adds	r3, r7, r4
 8023606:	781a      	ldrb	r2, [r3, #0]
 8023608:	4b9c      	ldr	r3, [pc, #624]	; (802387c <GUI_SendNotification+0x66c>)
 802360a:	0092      	lsls	r2, r2, #2
 802360c:	5cd3      	ldrb	r3, [r2, r3]
 802360e:	075b      	lsls	r3, r3, #29
 8023610:	0fdb      	lsrs	r3, r3, #31
 8023612:	b2db      	uxtb	r3, r3
 8023614:	001a      	movs	r2, r3
 8023616:	2154      	movs	r1, #84	; 0x54
 8023618:	187b      	adds	r3, r7, r1
 802361a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 802361c:	187b      	adds	r3, r7, r1
 802361e:	1978      	adds	r0, r7, r5
 8023620:	2201      	movs	r2, #1
 8023622:	2108      	movs	r1, #8
 8023624:	f7fe ff0e 	bl	8022444 <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8023628:	193b      	adds	r3, r7, r4
 802362a:	781b      	ldrb	r3, [r3, #0]
 802362c:	4a93      	ldr	r2, [pc, #588]	; (802387c <GUI_SendNotification+0x66c>)
 802362e:	009b      	lsls	r3, r3, #2
 8023630:	18d3      	adds	r3, r2, r3
 8023632:	785b      	ldrb	r3, [r3, #1]
 8023634:	061b      	lsls	r3, r3, #24
 8023636:	0fdb      	lsrs	r3, r3, #31
 8023638:	b2db      	uxtb	r3, r3
 802363a:	001a      	movs	r2, r3
 802363c:	2150      	movs	r1, #80	; 0x50
 802363e:	187b      	adds	r3, r7, r1
 8023640:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8023642:	187b      	adds	r3, r7, r1
 8023644:	1978      	adds	r0, r7, r5
 8023646:	2201      	movs	r2, #1
 8023648:	210a      	movs	r1, #10
 802364a:	f7fe fefb 	bl	8022444 <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 802364e:	193b      	adds	r3, r7, r4
 8023650:	781a      	ldrb	r2, [r3, #0]
 8023652:	4b8a      	ldr	r3, [pc, #552]	; (802387c <GUI_SendNotification+0x66c>)
 8023654:	0092      	lsls	r2, r2, #2
 8023656:	5cd3      	ldrb	r3, [r2, r3]
 8023658:	079b      	lsls	r3, r3, #30
 802365a:	0f9b      	lsrs	r3, r3, #30
 802365c:	b2db      	uxtb	r3, r3
 802365e:	001a      	movs	r2, r3
 8023660:	214c      	movs	r1, #76	; 0x4c
 8023662:	187b      	adds	r3, r7, r1
 8023664:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8023666:	187b      	adds	r3, r7, r1
 8023668:	1978      	adds	r0, r7, r5
 802366a:	2201      	movs	r2, #1
 802366c:	210d      	movs	r1, #13
 802366e:	f7fe fee9 	bl	8022444 <TLV_add>
            break;
 8023672:	e108      	b.n	8023886 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8023674:	230f      	movs	r3, #15
 8023676:	18fb      	adds	r3, r7, r3
 8023678:	781a      	ldrb	r2, [r3, #0]
 802367a:	4b80      	ldr	r3, [pc, #512]	; (802387c <GUI_SendNotification+0x66c>)
 802367c:	0092      	lsls	r2, r2, #2
 802367e:	5cd3      	ldrb	r3, [r2, r3]
 8023680:	075b      	lsls	r3, r3, #29
 8023682:	0fdb      	lsrs	r3, r3, #31
 8023684:	b2db      	uxtb	r3, r3
 8023686:	001a      	movs	r2, r3
 8023688:	2148      	movs	r1, #72	; 0x48
 802368a:	187b      	adds	r3, r7, r1
 802368c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 802368e:	187b      	adds	r3, r7, r1
 8023690:	2284      	movs	r2, #132	; 0x84
 8023692:	18b8      	adds	r0, r7, r2
 8023694:	2201      	movs	r2, #1
 8023696:	2108      	movs	r1, #8
 8023698:	f7fe fed4 	bl	8022444 <TLV_add>
            break;
 802369c:	e0f3      	b.n	8023886 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 802369e:	230f      	movs	r3, #15
 80236a0:	18fb      	adds	r3, r7, r3
 80236a2:	781a      	ldrb	r2, [r3, #0]
 80236a4:	4b75      	ldr	r3, [pc, #468]	; (802387c <GUI_SendNotification+0x66c>)
 80236a6:	0092      	lsls	r2, r2, #2
 80236a8:	5cd3      	ldrb	r3, [r2, r3]
 80236aa:	071b      	lsls	r3, r3, #28
 80236ac:	0fdb      	lsrs	r3, r3, #31
 80236ae:	b2db      	uxtb	r3, r3
 80236b0:	001a      	movs	r2, r3
 80236b2:	2144      	movs	r1, #68	; 0x44
 80236b4:	187b      	adds	r3, r7, r1
 80236b6:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80236b8:	187b      	adds	r3, r7, r1
 80236ba:	2284      	movs	r2, #132	; 0x84
 80236bc:	18b8      	adds	r0, r7, r2
 80236be:	2201      	movs	r2, #1
 80236c0:	2107      	movs	r1, #7
 80236c2:	f7fe febf 	bl	8022444 <TLV_add>
            break;
 80236c6:	e0de      	b.n	8023886 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80236c8:	230f      	movs	r3, #15
 80236ca:	18fb      	adds	r3, r7, r3
 80236cc:	781a      	ldrb	r2, [r3, #0]
 80236ce:	4b6b      	ldr	r3, [pc, #428]	; (802387c <GUI_SendNotification+0x66c>)
 80236d0:	0092      	lsls	r2, r2, #2
 80236d2:	5cd3      	ldrb	r3, [r2, r3]
 80236d4:	079b      	lsls	r3, r3, #30
 80236d6:	0f9b      	lsrs	r3, r3, #30
 80236d8:	b2db      	uxtb	r3, r3
 80236da:	001a      	movs	r2, r3
 80236dc:	2140      	movs	r1, #64	; 0x40
 80236de:	187b      	adds	r3, r7, r1
 80236e0:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80236e2:	187b      	adds	r3, r7, r1
 80236e4:	2284      	movs	r2, #132	; 0x84
 80236e6:	18b8      	adds	r0, r7, r2
 80236e8:	2201      	movs	r2, #1
 80236ea:	210d      	movs	r1, #13
 80236ec:	f7fe feaa 	bl	8022444 <TLV_add>
            break;
 80236f0:	e0c9      	b.n	8023886 <GUI_SendNotification+0x676>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80236f2:	230f      	movs	r3, #15
 80236f4:	18fb      	adds	r3, r7, r3
 80236f6:	781b      	ldrb	r3, [r3, #0]
 80236f8:	4a60      	ldr	r2, [pc, #384]	; (802387c <GUI_SendNotification+0x66c>)
 80236fa:	009b      	lsls	r3, r3, #2
 80236fc:	18d3      	adds	r3, r2, r3
 80236fe:	785b      	ldrb	r3, [r3, #1]
 8023700:	061b      	lsls	r3, r3, #24
 8023702:	0fdb      	lsrs	r3, r3, #31
 8023704:	b2db      	uxtb	r3, r3
 8023706:	001a      	movs	r2, r3
 8023708:	213c      	movs	r1, #60	; 0x3c
 802370a:	187b      	adds	r3, r7, r1
 802370c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 802370e:	187b      	adds	r3, r7, r1
 8023710:	2284      	movs	r2, #132	; 0x84
 8023712:	18b8      	adds	r0, r7, r2
 8023714:	2201      	movs	r2, #1
 8023716:	210a      	movs	r1, #10
 8023718:	f7fe fe94 	bl	8022444 <TLV_add>
            break;
 802371c:	e0b3      	b.n	8023886 <GUI_SendNotification+0x676>
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 802371e:	240f      	movs	r4, #15
 8023720:	193b      	adds	r3, r7, r4
 8023722:	781b      	ldrb	r3, [r3, #0]
 8023724:	4a55      	ldr	r2, [pc, #340]	; (802387c <GUI_SendNotification+0x66c>)
 8023726:	009b      	lsls	r3, r3, #2
 8023728:	18d3      	adds	r3, r2, r3
 802372a:	785b      	ldrb	r3, [r3, #1]
 802372c:	06db      	lsls	r3, r3, #27
 802372e:	0fdb      	lsrs	r3, r3, #31
 8023730:	b2db      	uxtb	r3, r3
 8023732:	2b01      	cmp	r3, #1
 8023734:	d000      	beq.n	8023738 <GUI_SendNotification+0x528>
 8023736:	e0a6      	b.n	8023886 <GUI_SendNotification+0x676>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 8023738:	193b      	adds	r3, r7, r4
 802373a:	781a      	ldrb	r2, [r3, #0]
 802373c:	4950      	ldr	r1, [pc, #320]	; (8023880 <GUI_SendNotification+0x670>)
 802373e:	0013      	movs	r3, r2
 8023740:	00db      	lsls	r3, r3, #3
 8023742:	1a9b      	subs	r3, r3, r2
 8023744:	011b      	lsls	r3, r3, #4
 8023746:	18cb      	adds	r3, r1, r3
 8023748:	333c      	adds	r3, #60	; 0x3c
 802374a:	681b      	ldr	r3, [r3, #0]
 802374c:	2b00      	cmp	r3, #0
 802374e:	d030      	beq.n	80237b2 <GUI_SendNotification+0x5a2>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8023750:	193b      	adds	r3, r7, r4
 8023752:	781a      	ldrb	r2, [r3, #0]
 8023754:	494a      	ldr	r1, [pc, #296]	; (8023880 <GUI_SendNotification+0x670>)
 8023756:	0013      	movs	r3, r2
 8023758:	00db      	lsls	r3, r3, #3
 802375a:	1a9b      	subs	r3, r3, r2
 802375c:	011b      	lsls	r3, r3, #4
 802375e:	18cb      	adds	r3, r1, r3
 8023760:	333c      	adds	r3, #60	; 0x3c
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	b2da      	uxtb	r2, r3
 8023766:	2124      	movs	r1, #36	; 0x24
 8023768:	187b      	adds	r3, r7, r1
 802376a:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 802376c:	187b      	adds	r3, r7, r1
 802376e:	2584      	movs	r5, #132	; 0x84
 8023770:	1978      	adds	r0, r7, r5
 8023772:	2201      	movs	r2, #1
 8023774:	2100      	movs	r1, #0
 8023776:	f7fe fe65 	bl	8022444 <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 802377a:	193b      	adds	r3, r7, r4
 802377c:	781a      	ldrb	r2, [r3, #0]
 802377e:	4940      	ldr	r1, [pc, #256]	; (8023880 <GUI_SendNotification+0x670>)
 8023780:	0013      	movs	r3, r2
 8023782:	00db      	lsls	r3, r3, #3
 8023784:	1a9b      	subs	r3, r3, r2
 8023786:	011b      	lsls	r3, r3, #4
 8023788:	18cb      	adds	r3, r1, r3
 802378a:	333c      	adds	r3, #60	; 0x3c
 802378c:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 802378e:	b29b      	uxth	r3, r3
 8023790:	009b      	lsls	r3, r3, #2
 8023792:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8023794:	193b      	adds	r3, r7, r4
 8023796:	781a      	ldrb	r2, [r3, #0]
 8023798:	0013      	movs	r3, r2
 802379a:	00db      	lsls	r3, r3, #3
 802379c:	1a9b      	subs	r3, r3, r2
 802379e:	011b      	lsls	r3, r3, #4
 80237a0:	3320      	adds	r3, #32
 80237a2:	001a      	movs	r2, r3
 80237a4:	4b36      	ldr	r3, [pc, #216]	; (8023880 <GUI_SendNotification+0x670>)
 80237a6:	18d3      	adds	r3, r2, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80237a8:	1978      	adds	r0, r7, r5
 80237aa:	000a      	movs	r2, r1
 80237ac:	2104      	movs	r1, #4
 80237ae:	f7fe fe49 	bl	8022444 <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80237b2:	240f      	movs	r4, #15
 80237b4:	193b      	adds	r3, r7, r4
 80237b6:	781a      	ldrb	r2, [r3, #0]
 80237b8:	4931      	ldr	r1, [pc, #196]	; (8023880 <GUI_SendNotification+0x670>)
 80237ba:	0013      	movs	r3, r2
 80237bc:	00db      	lsls	r3, r3, #3
 80237be:	1a9b      	subs	r3, r3, r2
 80237c0:	011b      	lsls	r3, r3, #4
 80237c2:	18cb      	adds	r3, r1, r3
 80237c4:	3340      	adds	r3, #64	; 0x40
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	b2da      	uxtb	r2, r3
 80237ca:	212c      	movs	r1, #44	; 0x2c
 80237cc:	187b      	adds	r3, r7, r1
 80237ce:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80237d0:	187b      	adds	r3, r7, r1
 80237d2:	2584      	movs	r5, #132	; 0x84
 80237d4:	1978      	adds	r0, r7, r5
 80237d6:	2201      	movs	r2, #1
 80237d8:	2101      	movs	r1, #1
 80237da:	f7fe fe33 	bl	8022444 <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80237de:	193b      	adds	r3, r7, r4
 80237e0:	781a      	ldrb	r2, [r3, #0]
 80237e2:	4b26      	ldr	r3, [pc, #152]	; (802387c <GUI_SendNotification+0x66c>)
 80237e4:	0092      	lsls	r2, r2, #2
 80237e6:	5cd3      	ldrb	r3, [r2, r3]
 80237e8:	075b      	lsls	r3, r3, #29
 80237ea:	0fdb      	lsrs	r3, r3, #31
 80237ec:	b2db      	uxtb	r3, r3
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d12d      	bne.n	802384e <GUI_SendNotification+0x63e>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80237f2:	193b      	adds	r3, r7, r4
 80237f4:	781a      	ldrb	r2, [r3, #0]
 80237f6:	4922      	ldr	r1, [pc, #136]	; (8023880 <GUI_SendNotification+0x670>)
 80237f8:	0013      	movs	r3, r2
 80237fa:	00db      	lsls	r3, r3, #3
 80237fc:	1a9b      	subs	r3, r3, r2
 80237fe:	011b      	lsls	r3, r3, #4
 8023800:	18cb      	adds	r3, r1, r3
 8023802:	331c      	adds	r3, #28
 8023804:	681b      	ldr	r3, [r3, #0]
 8023806:	b2da      	uxtb	r2, r3
 8023808:	2120      	movs	r1, #32
 802380a:	187b      	adds	r3, r7, r1
 802380c:	701a      	strb	r2, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 802380e:	187b      	adds	r3, r7, r1
 8023810:	1978      	adds	r0, r7, r5
 8023812:	2201      	movs	r2, #1
 8023814:	2103      	movs	r1, #3
 8023816:	f7fe fe15 	bl	8022444 <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 802381a:	193b      	adds	r3, r7, r4
 802381c:	781a      	ldrb	r2, [r3, #0]
 802381e:	4918      	ldr	r1, [pc, #96]	; (8023880 <GUI_SendNotification+0x670>)
 8023820:	0013      	movs	r3, r2
 8023822:	00db      	lsls	r3, r3, #3
 8023824:	1a9b      	subs	r3, r3, r2
 8023826:	011b      	lsls	r3, r3, #4
 8023828:	18cb      	adds	r3, r1, r3
 802382a:	331c      	adds	r3, #28
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8023830:	009b      	lsls	r3, r3, #2
 8023832:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8023834:	193b      	adds	r3, r7, r4
 8023836:	781a      	ldrb	r2, [r3, #0]
 8023838:	0013      	movs	r3, r2
 802383a:	00db      	lsls	r3, r3, #3
 802383c:	1a9b      	subs	r3, r3, r2
 802383e:	011b      	lsls	r3, r3, #4
 8023840:	4a0f      	ldr	r2, [pc, #60]	; (8023880 <GUI_SendNotification+0x670>)
 8023842:	189b      	adds	r3, r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8023844:	1978      	adds	r0, r7, r5
 8023846:	000a      	movs	r2, r1
 8023848:	2102      	movs	r1, #2
 802384a:	f7fe fdfb 	bl	8022444 <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 802384e:	230f      	movs	r3, #15
 8023850:	18fb      	adds	r3, r7, r3
 8023852:	781a      	ldrb	r2, [r3, #0]
 8023854:	4b09      	ldr	r3, [pc, #36]	; (802387c <GUI_SendNotification+0x66c>)
 8023856:	0092      	lsls	r2, r2, #2
 8023858:	5cd3      	ldrb	r3, [r2, r3]
 802385a:	079b      	lsls	r3, r3, #30
 802385c:	0f9b      	lsrs	r3, r3, #30
 802385e:	b2db      	uxtb	r3, r3
 8023860:	001a      	movs	r2, r3
 8023862:	2128      	movs	r1, #40	; 0x28
 8023864:	187b      	adds	r3, r7, r1
 8023866:	701a      	strb	r2, [r3, #0]
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8023868:	187b      	adds	r3, r7, r1
 802386a:	2284      	movs	r2, #132	; 0x84
 802386c:	18b8      	adds	r0, r7, r2
 802386e:	2201      	movs	r2, #1
 8023870:	210d      	movs	r1, #13
 8023872:	f7fe fde7 	bl	8022444 <TLV_add>
 8023876:	e006      	b.n	8023886 <GUI_SendNotification+0x676>
            break;
 8023878:	46c0      	nop			; (mov r8, r8)
 802387a:	e004      	b.n	8023886 <GUI_SendNotification+0x676>
 802387c:	200033fc 	.word	0x200033fc
 8023880:	20005068 	.word	0x20005068
            break;
 8023884:	46c0      	nop			; (mov r8, r8)
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 8023886:	683a      	ldr	r2, [r7, #0]
 8023888:	2380      	movs	r3, #128	; 0x80
 802388a:	011b      	lsls	r3, r3, #4
 802388c:	4013      	ands	r3, r2
 802388e:	d043      	beq.n	8023918 <GUI_SendNotification+0x708>
    {
      uint32_t vsense = 0;
 8023890:	2300      	movs	r3, #0
 8023892:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 8023894:	2300      	movs	r3, #0
 8023896:	2290      	movs	r2, #144	; 0x90
 8023898:	18ba      	adds	r2, r7, r2
 802389a:	6013      	str	r3, [r2, #0]

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 802389c:	2384      	movs	r3, #132	; 0x84
 802389e:	18f8      	adds	r0, r7, r3
 80238a0:	23a0      	movs	r3, #160	; 0xa0
 80238a2:	2208      	movs	r2, #8
 80238a4:	189b      	adds	r3, r3, r2
 80238a6:	19db      	adds	r3, r3, r7
 80238a8:	2204      	movs	r2, #4
 80238aa:	2113      	movs	r1, #19
 80238ac:	f7fe fdca 	bl	8022444 <TLV_add>

      if (NULL != pCB_GetVoltage)
 80238b0:	4b57      	ldr	r3, [pc, #348]	; (8023a10 <GUI_SendNotification+0x800>)
 80238b2:	681b      	ldr	r3, [r3, #0]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d008      	beq.n	80238ca <GUI_SendNotification+0x6ba>
      {
        vsense = pCB_GetVoltage(PortNum);
 80238b8:	4b55      	ldr	r3, [pc, #340]	; (8023a10 <GUI_SendNotification+0x800>)
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	220f      	movs	r2, #15
 80238be:	18ba      	adds	r2, r7, r2
 80238c0:	7812      	ldrb	r2, [r2, #0]
 80238c2:	0010      	movs	r0, r2
 80238c4:	4798      	blx	r3
 80238c6:	0003      	movs	r3, r0
 80238c8:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80238ca:	4b51      	ldr	r3, [pc, #324]	; (8023a10 <GUI_SendNotification+0x800>)
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d013      	beq.n	80238fa <GUI_SendNotification+0x6ea>
      {
        isense = pCB_GetCurrent(PortNum);
 80238d2:	4b50      	ldr	r3, [pc, #320]	; (8023a14 <GUI_SendNotification+0x804>)
 80238d4:	681b      	ldr	r3, [r3, #0]
 80238d6:	220f      	movs	r2, #15
 80238d8:	18ba      	adds	r2, r7, r2
 80238da:	7812      	ldrb	r2, [r2, #0]
 80238dc:	0010      	movs	r0, r2
 80238de:	4798      	blx	r3
 80238e0:	0003      	movs	r3, r0
 80238e2:	2290      	movs	r2, #144	; 0x90
 80238e4:	18b9      	adds	r1, r7, r2
 80238e6:	600b      	str	r3, [r1, #0]
        if (isense < 0)
 80238e8:	18bb      	adds	r3, r7, r2
 80238ea:	681b      	ldr	r3, [r3, #0]
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	da04      	bge.n	80238fa <GUI_SendNotification+0x6ea>
        {
          isense = -isense;
 80238f0:	18bb      	adds	r3, r7, r2
 80238f2:	681b      	ldr	r3, [r3, #0]
 80238f4:	425b      	negs	r3, r3
 80238f6:	18ba      	adds	r2, r7, r2
 80238f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 80238fa:	2390      	movs	r3, #144	; 0x90
 80238fc:	18fb      	adds	r3, r7, r3
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	041a      	lsls	r2, r3, #16
 8023902:	69fb      	ldr	r3, [r7, #28]
 8023904:	4313      	orrs	r3, r2
 8023906:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 8023908:	231c      	movs	r3, #28
 802390a:	18fb      	adds	r3, r7, r3
 802390c:	2284      	movs	r2, #132	; 0x84
 802390e:	18b8      	adds	r0, r7, r2
 8023910:	2204      	movs	r2, #4
 8023912:	210c      	movs	r1, #12
 8023914:	f7fe fd96 	bl	8022444 <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 8023918:	683a      	ldr	r2, [r7, #0]
 802391a:	2380      	movs	r3, #128	; 0x80
 802391c:	01db      	lsls	r3, r3, #7
 802391e:	4013      	ands	r3, r2
 8023920:	d009      	beq.n	8023936 <GUI_SendNotification+0x726>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8023922:	2384      	movs	r3, #132	; 0x84
 8023924:	18f8      	adds	r0, r7, r3
 8023926:	23a0      	movs	r3, #160	; 0xa0
 8023928:	2208      	movs	r2, #8
 802392a:	189b      	adds	r3, r3, r2
 802392c:	19db      	adds	r3, r3, r7
 802392e:	2204      	movs	r2, #4
 8023930:	2113      	movs	r1, #19
 8023932:	f7fe fd87 	bl	8022444 <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8023936:	683a      	ldr	r2, [r7, #0]
 8023938:	2380      	movs	r3, #128	; 0x80
 802393a:	021b      	lsls	r3, r3, #8
 802393c:	4013      	ands	r3, r2
 802393e:	d043      	beq.n	80239c8 <GUI_SendNotification+0x7b8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8023940:	240f      	movs	r4, #15
 8023942:	193b      	adds	r3, r7, r4
 8023944:	781b      	ldrb	r3, [r3, #0]
 8023946:	4a34      	ldr	r2, [pc, #208]	; (8023a18 <GUI_SendNotification+0x808>)
 8023948:	009b      	lsls	r3, r3, #2
 802394a:	18d3      	adds	r3, r2, r3
 802394c:	785b      	ldrb	r3, [r3, #1]
 802394e:	075b      	lsls	r3, r3, #29
 8023950:	0f5b      	lsrs	r3, r3, #29
 8023952:	b2db      	uxtb	r3, r3
 8023954:	001a      	movs	r2, r3
 8023956:	2118      	movs	r1, #24
 8023958:	187b      	adds	r3, r7, r1
 802395a:	701a      	strb	r2, [r3, #0]
 802395c:	187b      	adds	r3, r7, r1
 802395e:	2584      	movs	r5, #132	; 0x84
 8023960:	1978      	adds	r0, r7, r5
 8023962:	2201      	movs	r2, #1
 8023964:	2105      	movs	r1, #5
 8023966:	f7fe fd6d 	bl	8022444 <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 802396a:	193b      	adds	r3, r7, r4
 802396c:	781b      	ldrb	r3, [r3, #0]
 802396e:	4a2a      	ldr	r2, [pc, #168]	; (8023a18 <GUI_SendNotification+0x808>)
 8023970:	009b      	lsls	r3, r3, #2
 8023972:	18d3      	adds	r3, r2, r3
 8023974:	785b      	ldrb	r3, [r3, #1]
 8023976:	075b      	lsls	r3, r3, #29
 8023978:	0f5b      	lsrs	r3, r3, #29
 802397a:	b2db      	uxtb	r3, r3
 802397c:	2b00      	cmp	r3, #0
 802397e:	d123      	bne.n	80239c8 <GUI_SendNotification+0x7b8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8023980:	193b      	adds	r3, r7, r4
 8023982:	781a      	ldrb	r2, [r3, #0]
 8023984:	4b24      	ldr	r3, [pc, #144]	; (8023a18 <GUI_SendNotification+0x808>)
 8023986:	0092      	lsls	r2, r2, #2
 8023988:	5cd3      	ldrb	r3, [r2, r3]
 802398a:	061b      	lsls	r3, r3, #24
 802398c:	0f9b      	lsrs	r3, r3, #30
 802398e:	b2db      	uxtb	r3, r3
 8023990:	001a      	movs	r2, r3
 8023992:	2114      	movs	r1, #20
 8023994:	187b      	adds	r3, r7, r1
 8023996:	701a      	strb	r2, [r3, #0]
 8023998:	187b      	adds	r3, r7, r1
 802399a:	1978      	adds	r0, r7, r5
 802399c:	2201      	movs	r2, #1
 802399e:	2106      	movs	r1, #6
 80239a0:	f7fe fd50 	bl	8022444 <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 80239a4:	193b      	adds	r3, r7, r4
 80239a6:	781a      	ldrb	r2, [r3, #0]
 80239a8:	4b1b      	ldr	r3, [pc, #108]	; (8023a18 <GUI_SendNotification+0x808>)
 80239aa:	0092      	lsls	r2, r2, #2
 80239ac:	5cd3      	ldrb	r3, [r2, r3]
 80239ae:	075b      	lsls	r3, r3, #29
 80239b0:	0fdb      	lsrs	r3, r3, #31
 80239b2:	b2db      	uxtb	r3, r3
 80239b4:	001a      	movs	r2, r3
 80239b6:	2110      	movs	r1, #16
 80239b8:	187b      	adds	r3, r7, r1
 80239ba:	701a      	strb	r2, [r3, #0]
 80239bc:	187b      	adds	r3, r7, r1
 80239be:	1978      	adds	r0, r7, r5
 80239c0:	2201      	movs	r2, #1
 80239c2:	2108      	movs	r1, #8
 80239c4:	f7fe fd3e 	bl	8022444 <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 80239c8:	2384      	movs	r3, #132	; 0x84
 80239ca:	18fb      	adds	r3, r7, r3
 80239cc:	0018      	movs	r0, r3
 80239ce:	f7fe fe9b 	bl	8022708 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 80239d2:	4b12      	ldr	r3, [pc, #72]	; (8023a1c <GUI_SendNotification+0x80c>)
 80239d4:	0018      	movs	r0, r3
 80239d6:	f7fe ff3d 	bl	8022854 <TLV_get_string_length>
 80239da:	1e03      	subs	r3, r0, #0
 80239dc:	d010      	beq.n	8023a00 <GUI_SendNotification+0x7f0>
    {
      *pMsgToSend = Processed;
 80239de:	68bb      	ldr	r3, [r7, #8]
 80239e0:	4a0e      	ldr	r2, [pc, #56]	; (8023a1c <GUI_SendNotification+0x80c>)
 80239e2:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80239e4:	4b0d      	ldr	r3, [pc, #52]	; (8023a1c <GUI_SendNotification+0x80c>)
 80239e6:	0018      	movs	r0, r3
 80239e8:	f7fe ff34 	bl	8022854 <TLV_get_string_length>
 80239ec:	0003      	movs	r3, r0
 80239ee:	b2db      	uxtb	r3, r3
 80239f0:	3308      	adds	r3, #8
 80239f2:	b2da      	uxtb	r2, r3
 80239f4:	687b      	ldr	r3, [r7, #4]
 80239f6:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 80239f8:	2397      	movs	r3, #151	; 0x97
 80239fa:	18fb      	adds	r3, r7, r3
 80239fc:	2201      	movs	r2, #1
 80239fe:	701a      	strb	r2, [r3, #0]

    }

  }

  return gui_state;
 8023a00:	2397      	movs	r3, #151	; 0x97
 8023a02:	18fb      	adds	r3, r7, r3
 8023a04:	781b      	ldrb	r3, [r3, #0]
}
 8023a06:	0018      	movs	r0, r3
 8023a08:	46bd      	mov	sp, r7
 8023a0a:	b026      	add	sp, #152	; 0x98
 8023a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8023a0e:	46c0      	nop			; (mov r8, r8)
 8023a10:	2000505c 	.word	0x2000505c
 8023a14:	20005060 	.word	0x20005060
 8023a18:	200033fc 	.word	0x200033fc
 8023a1c:	20004f48 	.word	0x20004f48

08023a20 <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 8023a20:	b590      	push	{r4, r7, lr}
 8023a22:	b085      	sub	sp, #20
 8023a24:	af00      	add	r7, sp, #0
 8023a26:	0002      	movs	r2, r0
 8023a28:	1dfb      	adds	r3, r7, #7
 8023a2a:	701a      	strb	r2, [r3, #0]
 8023a2c:	1d3b      	adds	r3, r7, #4
 8023a2e:	1c0a      	adds	r2, r1, #0
 8023a30:	801a      	strh	r2, [r3, #0]
#if defined(_SNK) || defined(_DRP)
  if ((uint16_t)USBPD_NOTIFY_REQUEST_ACCEPTED == EventVal)
 8023a32:	1d3b      	adds	r3, r7, #4
 8023a34:	881b      	ldrh	r3, [r3, #0]
 8023a36:	2b01      	cmp	r3, #1
 8023a38:	d136      	bne.n	8023aa8 <GUI_PostNotificationMessage+0x88>
  {
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8023a3a:	1dfb      	adds	r3, r7, #7
 8023a3c:	781a      	ldrb	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingVoltageInmVunits
 8023a3e:	1dfb      	adds	r3, r7, #7
 8023a40:	7818      	ldrb	r0, [r3, #0]
      = GUI_SaveInformation[PortNum].RequestedVoltage;
 8023a42:	4927      	ldr	r1, [pc, #156]	; (8023ae0 <GUI_PostNotificationMessage+0xc0>)
 8023a44:	0013      	movs	r3, r2
 8023a46:	00db      	lsls	r3, r3, #3
 8023a48:	1a9b      	subs	r3, r3, r2
 8023a4a:	011b      	lsls	r3, r3, #4
 8023a4c:	18cb      	adds	r3, r1, r3
 8023a4e:	3344      	adds	r3, #68	; 0x44
 8023a50:	681a      	ldr	r2, [r3, #0]
 8023a52:	4924      	ldr	r1, [pc, #144]	; (8023ae4 <GUI_PostNotificationMessage+0xc4>)
 8023a54:	2374      	movs	r3, #116	; 0x74
 8023a56:	4343      	muls	r3, r0
 8023a58:	18cb      	adds	r3, r1, r3
 8023a5a:	3308      	adds	r3, #8
 8023a5c:	601a      	str	r2, [r3, #0]
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8023a5e:	1dfb      	adds	r3, r7, #7
 8023a60:	781a      	ldrb	r2, [r3, #0]
 8023a62:	491f      	ldr	r1, [pc, #124]	; (8023ae0 <GUI_PostNotificationMessage+0xc0>)
 8023a64:	0013      	movs	r3, r2
 8023a66:	00db      	lsls	r3, r3, #3
 8023a68:	1a9b      	subs	r3, r3, r2
 8023a6a:	011b      	lsls	r3, r3, #4
 8023a6c:	18cb      	adds	r3, r1, r3
 8023a6e:	3344      	adds	r3, #68	; 0x44
 8023a70:	6819      	ldr	r1, [r3, #0]
 8023a72:	1dfb      	adds	r3, r7, #7
 8023a74:	781a      	ldrb	r2, [r3, #0]
 8023a76:	481a      	ldr	r0, [pc, #104]	; (8023ae0 <GUI_PostNotificationMessage+0xc0>)
 8023a78:	0013      	movs	r3, r2
 8023a7a:	00db      	lsls	r3, r3, #3
 8023a7c:	1a9b      	subs	r3, r3, r2
 8023a7e:	011b      	lsls	r3, r3, #4
 8023a80:	18c3      	adds	r3, r0, r3
 8023a82:	3348      	adds	r3, #72	; 0x48
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	434b      	muls	r3, r1
 8023a88:	001a      	movs	r2, r3
    DPM_USER_Settings[PortNum].DPM_SNKRequestedPower.OperatingPowerInmWunits
 8023a8a:	1dfb      	adds	r3, r7, #7
 8023a8c:	781c      	ldrb	r4, [r3, #0]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
 8023a8e:	23fa      	movs	r3, #250	; 0xfa
 8023a90:	0099      	lsls	r1, r3, #2
 8023a92:	0010      	movs	r0, r2
 8023a94:	f7e2 fbc0 	bl	8006218 <__udivsi3>
 8023a98:	0003      	movs	r3, r0
 8023a9a:	0019      	movs	r1, r3
 8023a9c:	4a11      	ldr	r2, [pc, #68]	; (8023ae4 <GUI_PostNotificationMessage+0xc4>)
 8023a9e:	2374      	movs	r3, #116	; 0x74
 8023aa0:	4363      	muls	r3, r4
 8023aa2:	18d3      	adds	r3, r2, r3
 8023aa4:	3314      	adds	r3, #20
 8023aa6:	6019      	str	r1, [r3, #0]
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8023aa8:	4b0f      	ldr	r3, [pc, #60]	; (8023ae8 <GUI_PostNotificationMessage+0xc8>)
 8023aaa:	781b      	ldrb	r3, [r3, #0]
 8023aac:	2b01      	cmp	r3, #1
 8023aae:	d113      	bne.n	8023ad8 <GUI_PostNotificationMessage+0xb8>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 8023ab0:	1dfb      	adds	r3, r7, #7
 8023ab2:	781b      	ldrb	r3, [r3, #0]
 8023ab4:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 8023ab6:	1d3b      	adds	r3, r7, #4
 8023ab8:	881b      	ldrh	r3, [r3, #0]
 8023aba:	011b      	lsls	r3, r3, #4
 8023abc:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 8023abe:	2201      	movs	r2, #1
 8023ac0:	4313      	orrs	r3, r2
 8023ac2:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS) || defined(USBPD_THREADX)
    GUIOS_PUT_MESSAGE_QUEUE(GUIMsgBox, event, 0U);
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	60bb      	str	r3, [r7, #8]
 8023ac8:	4b08      	ldr	r3, [pc, #32]	; (8023aec <GUI_PostNotificationMessage+0xcc>)
 8023aca:	6818      	ldr	r0, [r3, #0]
 8023acc:	2308      	movs	r3, #8
 8023ace:	18f9      	adds	r1, r7, r3
 8023ad0:	2300      	movs	r3, #0
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	f7f7 fd58 	bl	801b588 <osMessageQueuePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8023ad8:	46c0      	nop			; (mov r8, r8)
 8023ada:	46bd      	mov	sp, r7
 8023adc:	b005      	add	sp, #20
 8023ade:	bd90      	pop	{r4, r7, pc}
 8023ae0:	20005068 	.word	0x20005068
 8023ae4:	200001c8 	.word	0x200001c8
 8023ae8:	20005048 	.word	0x20005048
 8023aec:	2000504c 	.word	0x2000504c

08023af0 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 8023af0:	b590      	push	{r4, r7, lr}
 8023af2:	b08b      	sub	sp, #44	; 0x2c
 8023af4:	af00      	add	r7, sp, #0
 8023af6:	60ba      	str	r2, [r7, #8]
 8023af8:	607b      	str	r3, [r7, #4]
 8023afa:	230f      	movs	r3, #15
 8023afc:	18fb      	adds	r3, r7, r3
 8023afe:	1c02      	adds	r2, r0, #0
 8023b00:	701a      	strb	r2, [r3, #0]
 8023b02:	200e      	movs	r0, #14
 8023b04:	183b      	adds	r3, r7, r0
 8023b06:	1c0a      	adds	r2, r1, #0
 8023b08:	701a      	strb	r2, [r3, #0]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8023b0a:	183b      	adds	r3, r7, r0
 8023b0c:	781b      	ldrb	r3, [r3, #0]
 8023b0e:	2b13      	cmp	r3, #19
 8023b10:	d900      	bls.n	8023b14 <GUI_SaveInfo+0x24>
 8023b12:	e0ca      	b.n	8023caa <GUI_SaveInfo+0x1ba>
 8023b14:	009a      	lsls	r2, r3, #2
 8023b16:	4b6b      	ldr	r3, [pc, #428]	; (8023cc4 <GUI_SaveInfo+0x1d4>)
 8023b18:	18d3      	adds	r3, r2, r3
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	469f      	mov	pc, r3
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	2b04      	cmp	r3, #4
 8023b22:	d000      	beq.n	8023b26 <GUI_SaveInfo+0x36>
 8023b24:	e0c3      	b.n	8023cae <GUI_SaveInfo+0x1be>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8023b26:	240f      	movs	r4, #15
 8023b28:	193b      	adds	r3, r7, r4
 8023b2a:	781a      	ldrb	r2, [r3, #0]
 8023b2c:	0013      	movs	r3, r2
 8023b2e:	00db      	lsls	r3, r3, #3
 8023b30:	1a9b      	subs	r3, r3, r2
 8023b32:	011b      	lsls	r3, r3, #4
 8023b34:	3340      	adds	r3, #64	; 0x40
 8023b36:	001a      	movs	r2, r3
 8023b38:	4b63      	ldr	r3, [pc, #396]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023b3a:	18d3      	adds	r3, r2, r3
 8023b3c:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8023b3e:	687a      	ldr	r2, [r7, #4]
 8023b40:	68b9      	ldr	r1, [r7, #8]
 8023b42:	693b      	ldr	r3, [r7, #16]
 8023b44:	0018      	movs	r0, r3
 8023b46:	f004 f924 	bl	8027d92 <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 8023b4a:	68bb      	ldr	r3, [r7, #8]
 8023b4c:	7819      	ldrb	r1, [r3, #0]
 8023b4e:	193b      	adds	r3, r7, r4
 8023b50:	781a      	ldrb	r2, [r3, #0]
 8023b52:	0008      	movs	r0, r1
 8023b54:	495c      	ldr	r1, [pc, #368]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023b56:	0013      	movs	r3, r2
 8023b58:	00db      	lsls	r3, r3, #3
 8023b5a:	1a9b      	subs	r3, r3, r2
 8023b5c:	011b      	lsls	r3, r3, #4
 8023b5e:	18cb      	adds	r3, r1, r3
 8023b60:	334c      	adds	r3, #76	; 0x4c
 8023b62:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 8023b64:	193b      	adds	r3, r7, r4
 8023b66:	781a      	ldrb	r2, [r3, #0]
 8023b68:	0013      	movs	r3, r2
 8023b6a:	00db      	lsls	r3, r3, #3
 8023b6c:	1a9b      	subs	r3, r3, r2
 8023b6e:	011b      	lsls	r3, r3, #4
 8023b70:	3348      	adds	r3, #72	; 0x48
 8023b72:	001a      	movs	r2, r3
 8023b74:	4b54      	ldr	r3, [pc, #336]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023b76:	18d3      	adds	r3, r2, r3
 8023b78:	3304      	adds	r3, #4
 8023b7a:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 8023b7c:	687a      	ldr	r2, [r7, #4]
 8023b7e:	68b9      	ldr	r1, [r7, #8]
 8023b80:	693b      	ldr	r3, [r7, #16]
 8023b82:	0018      	movs	r0, r3
 8023b84:	f004 f905 	bl	8027d92 <memcpy>
      }
      break;
 8023b88:	e091      	b.n	8023cae <GUI_SaveInfo+0x1be>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	2b1c      	cmp	r3, #28
 8023b8e:	d900      	bls.n	8023b92 <GUI_SaveInfo+0xa2>
 8023b90:	e08f      	b.n	8023cb2 <GUI_SaveInfo+0x1c2>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 8023b92:	230f      	movs	r3, #15
 8023b94:	18fb      	adds	r3, r7, r3
 8023b96:	781a      	ldrb	r2, [r3, #0]
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	0899      	lsrs	r1, r3, #2
 8023b9c:	484a      	ldr	r0, [pc, #296]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023b9e:	0013      	movs	r3, r2
 8023ba0:	00db      	lsls	r3, r3, #3
 8023ba2:	1a9b      	subs	r3, r3, r2
 8023ba4:	011b      	lsls	r3, r3, #4
 8023ba6:	18c3      	adds	r3, r0, r3
 8023ba8:	331c      	adds	r3, #28
 8023baa:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8023bac:	2300      	movs	r3, #0
 8023bae:	627b      	str	r3, [r7, #36]	; 0x24
 8023bb0:	e018      	b.n	8023be4 <GUI_SaveInfo+0xf4>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 8023bb2:	230f      	movs	r3, #15
 8023bb4:	18fb      	adds	r3, r7, r3
 8023bb6:	781a      	ldrb	r2, [r3, #0]
 8023bb8:	0013      	movs	r3, r2
 8023bba:	00db      	lsls	r3, r3, #3
 8023bbc:	1a9b      	subs	r3, r3, r2
 8023bbe:	009b      	lsls	r3, r3, #2
 8023bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023bc2:	189b      	adds	r3, r3, r2
 8023bc4:	009a      	lsls	r2, r3, #2
 8023bc6:	4b40      	ldr	r3, [pc, #256]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023bc8:	18d3      	adds	r3, r2, r3
 8023bca:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8023bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bce:	009b      	lsls	r3, r3, #2
 8023bd0:	68ba      	ldr	r2, [r7, #8]
 8023bd2:	18d1      	adds	r1, r2, r3
 8023bd4:	697b      	ldr	r3, [r7, #20]
 8023bd6:	2204      	movs	r2, #4
 8023bd8:	0018      	movs	r0, r3
 8023bda:	f004 f8da 	bl	8027d92 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8023bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023be0:	3301      	adds	r3, #1
 8023be2:	627b      	str	r3, [r7, #36]	; 0x24
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	089b      	lsrs	r3, r3, #2
 8023be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023bea:	429a      	cmp	r2, r3
 8023bec:	d3e1      	bcc.n	8023bb2 <GUI_SaveInfo+0xc2>
        }
      }
      break;
 8023bee:	e060      	b.n	8023cb2 <GUI_SaveInfo+0x1c2>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	2b1c      	cmp	r3, #28
 8023bf4:	d85f      	bhi.n	8023cb6 <GUI_SaveInfo+0x1c6>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 8023bf6:	230f      	movs	r3, #15
 8023bf8:	18fb      	adds	r3, r7, r3
 8023bfa:	781a      	ldrb	r2, [r3, #0]
 8023bfc:	687b      	ldr	r3, [r7, #4]
 8023bfe:	0899      	lsrs	r1, r3, #2
 8023c00:	4831      	ldr	r0, [pc, #196]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023c02:	0013      	movs	r3, r2
 8023c04:	00db      	lsls	r3, r3, #3
 8023c06:	1a9b      	subs	r3, r3, r2
 8023c08:	011b      	lsls	r3, r3, #4
 8023c0a:	18c3      	adds	r3, r0, r3
 8023c0c:	333c      	adds	r3, #60	; 0x3c
 8023c0e:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8023c10:	2300      	movs	r3, #0
 8023c12:	627b      	str	r3, [r7, #36]	; 0x24
 8023c14:	e019      	b.n	8023c4a <GUI_SaveInfo+0x15a>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8023c16:	230f      	movs	r3, #15
 8023c18:	18fb      	adds	r3, r7, r3
 8023c1a:	781a      	ldrb	r2, [r3, #0]
 8023c1c:	0013      	movs	r3, r2
 8023c1e:	00db      	lsls	r3, r3, #3
 8023c20:	1a9b      	subs	r3, r3, r2
 8023c22:	009b      	lsls	r3, r3, #2
 8023c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023c26:	189b      	adds	r3, r3, r2
 8023c28:	3308      	adds	r3, #8
 8023c2a:	009a      	lsls	r2, r3, #2
 8023c2c:	4b26      	ldr	r3, [pc, #152]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023c2e:	18d3      	adds	r3, r2, r3
 8023c30:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8023c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c34:	009b      	lsls	r3, r3, #2
 8023c36:	68ba      	ldr	r2, [r7, #8]
 8023c38:	18d1      	adds	r1, r2, r3
 8023c3a:	69bb      	ldr	r3, [r7, #24]
 8023c3c:	2204      	movs	r2, #4
 8023c3e:	0018      	movs	r0, r3
 8023c40:	f004 f8a7 	bl	8027d92 <memcpy>
        for (index = 0U; index < (Size / 4U); index++)
 8023c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023c46:	3301      	adds	r3, #1
 8023c48:	627b      	str	r3, [r7, #36]	; 0x24
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	089b      	lsrs	r3, r3, #2
 8023c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023c50:	429a      	cmp	r2, r3
 8023c52:	d3e0      	bcc.n	8023c16 <GUI_SaveInfo+0x126>
        }
      }
      break;
 8023c54:	e02f      	b.n	8023cb6 <GUI_SaveInfo+0x1c6>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 8023c56:	687b      	ldr	r3, [r7, #4]
 8023c58:	2b04      	cmp	r3, #4
 8023c5a:	d12e      	bne.n	8023cba <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 8023c5c:	230f      	movs	r3, #15
 8023c5e:	18fb      	adds	r3, r7, r3
 8023c60:	781a      	ldrb	r2, [r3, #0]
 8023c62:	0013      	movs	r3, r2
 8023c64:	00db      	lsls	r3, r3, #3
 8023c66:	1a9b      	subs	r3, r3, r2
 8023c68:	011b      	lsls	r3, r3, #4
 8023c6a:	3350      	adds	r3, #80	; 0x50
 8023c6c:	001a      	movs	r2, r3
 8023c6e:	4b16      	ldr	r3, [pc, #88]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023c70:	18d3      	adds	r3, r2, r3
 8023c72:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 8023c74:	687a      	ldr	r2, [r7, #4]
 8023c76:	68b9      	ldr	r1, [r7, #8]
 8023c78:	69fb      	ldr	r3, [r7, #28]
 8023c7a:	0018      	movs	r0, r3
 8023c7c:	f004 f889 	bl	8027d92 <memcpy>
      }
      break;
 8023c80:	e01b      	b.n	8023cba <GUI_SaveInfo+0x1ca>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 8023c82:	230f      	movs	r3, #15
 8023c84:	18fb      	adds	r3, r7, r3
 8023c86:	781a      	ldrb	r2, [r3, #0]
 8023c88:	0013      	movs	r3, r2
 8023c8a:	00db      	lsls	r3, r3, #3
 8023c8c:	1a9b      	subs	r3, r3, r2
 8023c8e:	011b      	lsls	r3, r3, #4
 8023c90:	3350      	adds	r3, #80	; 0x50
 8023c92:	001a      	movs	r2, r3
 8023c94:	4b0c      	ldr	r3, [pc, #48]	; (8023cc8 <GUI_SaveInfo+0x1d8>)
 8023c96:	18d3      	adds	r3, r2, r3
 8023c98:	3304      	adds	r3, #4
 8023c9a:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 8023c9c:	687a      	ldr	r2, [r7, #4]
 8023c9e:	68b9      	ldr	r1, [r7, #8]
 8023ca0:	6a3b      	ldr	r3, [r7, #32]
 8023ca2:	0018      	movs	r0, r3
 8023ca4:	f004 f875 	bl	8027d92 <memcpy>
      break;
 8023ca8:	e008      	b.n	8023cbc <GUI_SaveInfo+0x1cc>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 8023caa:	46c0      	nop			; (mov r8, r8)
 8023cac:	e006      	b.n	8023cbc <GUI_SaveInfo+0x1cc>
      break;
 8023cae:	46c0      	nop			; (mov r8, r8)
 8023cb0:	e004      	b.n	8023cbc <GUI_SaveInfo+0x1cc>
      break;
 8023cb2:	46c0      	nop			; (mov r8, r8)
 8023cb4:	e002      	b.n	8023cbc <GUI_SaveInfo+0x1cc>
      break;
 8023cb6:	46c0      	nop			; (mov r8, r8)
 8023cb8:	e000      	b.n	8023cbc <GUI_SaveInfo+0x1cc>
      break;
 8023cba:	46c0      	nop			; (mov r8, r8)
  }
}
 8023cbc:	46c0      	nop			; (mov r8, r8)
 8023cbe:	46bd      	mov	sp, r7
 8023cc0:	b00b      	add	sp, #44	; 0x2c
 8023cc2:	bd90      	pop	{r4, r7, pc}
 8023cc4:	0802b388 	.word	0x0802b388
 8023cc8:	20005068 	.word	0x20005068

08023ccc <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8023ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023cce:	b091      	sub	sp, #68	; 0x44
 8023cd0:	af00      	add	r7, sp, #0
 8023cd2:	0002      	movs	r2, r0
 8023cd4:	6039      	str	r1, [r7, #0]
 8023cd6:	1dfb      	adds	r3, r7, #7
 8023cd8:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8023cda:	1dfb      	adds	r3, r7, #7
 8023cdc:	781b      	ldrb	r3, [r3, #0]
 8023cde:	015b      	lsls	r3, r3, #5
 8023ce0:	b25b      	sxtb	r3, r3
 8023ce2:	2203      	movs	r2, #3
 8023ce4:	4313      	orrs	r3, r2
 8023ce6:	b25b      	sxtb	r3, r3
 8023ce8:	b2d9      	uxtb	r1, r3
 8023cea:	683b      	ldr	r3, [r7, #0]
 8023cec:	2280      	movs	r2, #128	; 0x80
 8023cee:	0052      	lsls	r2, r2, #1
 8023cf0:	2028      	movs	r0, #40	; 0x28
 8023cf2:	1838      	adds	r0, r7, r0
 8023cf4:	f7fe fb43 	bl	802237e <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 8023cf8:	1dfb      	adds	r3, r7, #7
 8023cfa:	781b      	ldrb	r3, [r3, #0]
 8023cfc:	2b00      	cmp	r3, #0
 8023cfe:	d163      	bne.n	8023dc8 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8023d00:	4bc2      	ldr	r3, [pc, #776]	; (802400c <Send_DpmInitCnf+0x340>)
 8023d02:	681b      	ldr	r3, [r3, #0]
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	d005      	beq.n	8023d14 <Send_DpmInitCnf+0x48>
    {
      hwversion = pCB_HWBoardVersion();
 8023d08:	4bc0      	ldr	r3, [pc, #768]	; (802400c <Send_DpmInitCnf+0x340>)
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	4798      	blx	r3
 8023d0e:	0003      	movs	r3, r0
 8023d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023d12:	e001      	b.n	8023d18 <Send_DpmInitCnf+0x4c>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 8023d14:	4bbe      	ldr	r3, [pc, #760]	; (8024010 <Send_DpmInitCnf+0x344>)
 8023d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8023d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d1a:	0018      	movs	r0, r3
 8023d1c:	f7e2 fa60 	bl	80061e0 <strlen>
 8023d20:	0003      	movs	r3, r0
 8023d22:	b29a      	uxth	r2, r3
 8023d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d26:	2128      	movs	r1, #40	; 0x28
 8023d28:	1878      	adds	r0, r7, r1
 8023d2a:	2100      	movs	r1, #0
 8023d2c:	f7fe fb8a 	bl	8022444 <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 8023d30:	4bb6      	ldr	r3, [pc, #728]	; (802400c <Send_DpmInitCnf+0x340>)
 8023d32:	681b      	ldr	r3, [r3, #0]
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	d005      	beq.n	8023d44 <Send_DpmInitCnf+0x78>
    {
      hwpdtype  = pCB_HWPDType();
 8023d38:	4bb6      	ldr	r3, [pc, #728]	; (8024014 <Send_DpmInitCnf+0x348>)
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	4798      	blx	r3
 8023d3e:	0003      	movs	r3, r0
 8023d40:	63bb      	str	r3, [r7, #56]	; 0x38
 8023d42:	e001      	b.n	8023d48 <Send_DpmInitCnf+0x7c>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8023d44:	4bb2      	ldr	r3, [pc, #712]	; (8024010 <Send_DpmInitCnf+0x344>)
 8023d46:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8023d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023d4a:	0018      	movs	r0, r3
 8023d4c:	f7e2 fa48 	bl	80061e0 <strlen>
 8023d50:	0003      	movs	r3, r0
 8023d52:	b29a      	uxth	r2, r3
 8023d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023d56:	2428      	movs	r4, #40	; 0x28
 8023d58:	1938      	adds	r0, r7, r4
 8023d5a:	2101      	movs	r1, #1
 8023d5c:	f7fe fb72 	bl	8022444 <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 8023d60:	2124      	movs	r1, #36	; 0x24
 8023d62:	187b      	adds	r3, r7, r1
 8023d64:	2201      	movs	r2, #1
 8023d66:	701a      	strb	r2, [r3, #0]
 8023d68:	187b      	adds	r3, r7, r1
 8023d6a:	1938      	adds	r0, r7, r4
 8023d6c:	2201      	movs	r2, #1
 8023d6e:	2102      	movs	r1, #2
 8023d70:	f7fe fb68 	bl	8022444 <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 8023d74:	251c      	movs	r5, #28
 8023d76:	197b      	adds	r3, r7, r5
 8023d78:	4aa7      	ldr	r2, [pc, #668]	; (8024018 <Send_DpmInitCnf+0x34c>)
 8023d7a:	ca03      	ldmia	r2!, {r0, r1}
 8023d7c:	c303      	stmia	r3!, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 8023d7e:	197b      	adds	r3, r7, r5
 8023d80:	1938      	adds	r0, r7, r4
 8023d82:	2208      	movs	r2, #8
 8023d84:	2103      	movs	r1, #3
 8023d86:	f7fe fb5d 	bl	8022444 <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8023d8a:	2118      	movs	r1, #24
 8023d8c:	187b      	adds	r3, r7, r1
 8023d8e:	2200      	movs	r2, #0
 8023d90:	701a      	strb	r2, [r3, #0]
 8023d92:	187b      	adds	r3, r7, r1
 8023d94:	1938      	adds	r0, r7, r4
 8023d96:	2201      	movs	r2, #1
 8023d98:	211e      	movs	r1, #30
 8023d9a:	f7fe fb53 	bl	8022444 <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 8023d9e:	2114      	movs	r1, #20
 8023da0:	187b      	adds	r3, r7, r1
 8023da2:	2200      	movs	r2, #0
 8023da4:	701a      	strb	r2, [r3, #0]
 8023da6:	187b      	adds	r3, r7, r1
 8023da8:	1938      	adds	r0, r7, r4
 8023daa:	2201      	movs	r2, #1
 8023dac:	211e      	movs	r1, #30
 8023dae:	f7fe fb49 	bl	8022444 <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 8023db2:	4b9a      	ldr	r3, [pc, #616]	; (802401c <Send_DpmInitCnf+0x350>)
 8023db4:	1938      	adds	r0, r7, r4
 8023db6:	2201      	movs	r2, #1
 8023db8:	211f      	movs	r1, #31
 8023dba:	f7fe fb43 	bl	8022444 <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 8023dbe:	193b      	adds	r3, r7, r4
 8023dc0:	0018      	movs	r0, r3
 8023dc2:	f7fe fca1 	bl	8022708 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 8023dc6:	e11c      	b.n	8024002 <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 8023dc8:	2637      	movs	r6, #55	; 0x37
 8023dca:	19bb      	adds	r3, r7, r6
 8023dcc:	1dfa      	adds	r2, r7, #7
 8023dce:	7812      	ldrb	r2, [r2, #0]
 8023dd0:	3a01      	subs	r2, #1
 8023dd2:	701a      	strb	r2, [r3, #0]
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8023dd4:	19bb      	adds	r3, r7, r6
 8023dd6:	781a      	ldrb	r2, [r3, #0]
 8023dd8:	4991      	ldr	r1, [pc, #580]	; (8024020 <Send_DpmInitCnf+0x354>)
 8023dda:	0013      	movs	r3, r2
 8023ddc:	005b      	lsls	r3, r3, #1
 8023dde:	189b      	adds	r3, r3, r2
 8023de0:	009b      	lsls	r3, r3, #2
 8023de2:	18cb      	adds	r3, r1, r3
 8023de4:	791b      	ldrb	r3, [r3, #4]
 8023de6:	079b      	lsls	r3, r3, #30
 8023de8:	0f9b      	lsrs	r3, r3, #30
 8023dea:	b2db      	uxtb	r3, r3
 8023dec:	b29a      	uxth	r2, r3
 8023dee:	2412      	movs	r4, #18
 8023df0:	193b      	adds	r3, r7, r4
 8023df2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 8023df4:	2110      	movs	r1, #16
 8023df6:	187b      	adds	r3, r7, r1
 8023df8:	2212      	movs	r2, #18
 8023dfa:	701a      	strb	r2, [r3, #0]
 8023dfc:	193b      	adds	r3, r7, r4
 8023dfe:	881b      	ldrh	r3, [r3, #0]
 8023e00:	b2da      	uxtb	r2, r3
 8023e02:	187b      	adds	r3, r7, r1
 8023e04:	705a      	strb	r2, [r3, #1]
 8023e06:	187b      	adds	r3, r7, r1
 8023e08:	2528      	movs	r5, #40	; 0x28
 8023e0a:	1978      	adds	r0, r7, r5
 8023e0c:	2202      	movs	r2, #2
 8023e0e:	2104      	movs	r1, #4
 8023e10:	f7fe fb18 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 8023e14:	19bb      	adds	r3, r7, r6
 8023e16:	781a      	ldrb	r2, [r3, #0]
 8023e18:	4981      	ldr	r1, [pc, #516]	; (8024020 <Send_DpmInitCnf+0x354>)
 8023e1a:	2008      	movs	r0, #8
 8023e1c:	0013      	movs	r3, r2
 8023e1e:	005b      	lsls	r3, r3, #1
 8023e20:	189b      	adds	r3, r3, r2
 8023e22:	009b      	lsls	r3, r3, #2
 8023e24:	18cb      	adds	r3, r1, r3
 8023e26:	181b      	adds	r3, r3, r0
 8023e28:	781b      	ldrb	r3, [r3, #0]
 8023e2a:	07db      	lsls	r3, r3, #31
 8023e2c:	0fdb      	lsrs	r3, r3, #31
 8023e2e:	b2db      	uxtb	r3, r3
 8023e30:	b29a      	uxth	r2, r3
 8023e32:	193b      	adds	r3, r7, r4
 8023e34:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 8023e36:	193b      	adds	r3, r7, r4
 8023e38:	1978      	adds	r0, r7, r5
 8023e3a:	2201      	movs	r2, #1
 8023e3c:	2106      	movs	r1, #6
 8023e3e:	f7fe fb01 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 8023e42:	19bb      	adds	r3, r7, r6
 8023e44:	781a      	ldrb	r2, [r3, #0]
 8023e46:	4976      	ldr	r1, [pc, #472]	; (8024020 <Send_DpmInitCnf+0x354>)
 8023e48:	0013      	movs	r3, r2
 8023e4a:	005b      	lsls	r3, r3, #1
 8023e4c:	189b      	adds	r3, r3, r2
 8023e4e:	009b      	lsls	r3, r3, #2
 8023e50:	18cb      	adds	r3, r1, r3
 8023e52:	795b      	ldrb	r3, [r3, #5]
 8023e54:	06db      	lsls	r3, r3, #27
 8023e56:	0fdb      	lsrs	r3, r3, #31
 8023e58:	b2db      	uxtb	r3, r3
 8023e5a:	b29a      	uxth	r2, r3
 8023e5c:	193b      	adds	r3, r7, r4
 8023e5e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8023e60:	193b      	adds	r3, r7, r4
 8023e62:	1978      	adds	r0, r7, r5
 8023e64:	2201      	movs	r2, #1
 8023e66:	2107      	movs	r1, #7
 8023e68:	f7fe faec 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8023e6c:	19bb      	adds	r3, r7, r6
 8023e6e:	781b      	ldrb	r3, [r3, #0]
 8023e70:	4a6c      	ldr	r2, [pc, #432]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023e72:	2168      	movs	r1, #104	; 0x68
 8023e74:	2074      	movs	r0, #116	; 0x74
 8023e76:	4343      	muls	r3, r0
 8023e78:	18d3      	adds	r3, r2, r3
 8023e7a:	185b      	adds	r3, r3, r1
 8023e7c:	78db      	ldrb	r3, [r3, #3]
 8023e7e:	07db      	lsls	r3, r3, #31
 8023e80:	0fdb      	lsrs	r3, r3, #31
 8023e82:	b2db      	uxtb	r3, r3
 8023e84:	b29a      	uxth	r2, r3
 8023e86:	193b      	adds	r3, r7, r4
 8023e88:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 8023e8a:	193b      	adds	r3, r7, r4
 8023e8c:	1978      	adds	r0, r7, r5
 8023e8e:	2201      	movs	r2, #1
 8023e90:	2108      	movs	r1, #8
 8023e92:	f7fe fad7 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 8023e96:	19bb      	adds	r3, r7, r6
 8023e98:	781b      	ldrb	r3, [r3, #0]
 8023e9a:	4a62      	ldr	r2, [pc, #392]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023e9c:	2168      	movs	r1, #104	; 0x68
 8023e9e:	2074      	movs	r0, #116	; 0x74
 8023ea0:	4343      	muls	r3, r0
 8023ea2:	18d3      	adds	r3, r2, r3
 8023ea4:	185b      	adds	r3, r3, r1
 8023ea6:	78db      	ldrb	r3, [r3, #3]
 8023ea8:	079b      	lsls	r3, r3, #30
 8023eaa:	0fdb      	lsrs	r3, r3, #31
 8023eac:	b2db      	uxtb	r3, r3
 8023eae:	b29a      	uxth	r2, r3
 8023eb0:	193b      	adds	r3, r7, r4
 8023eb2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 8023eb4:	193b      	adds	r3, r7, r4
 8023eb6:	1978      	adds	r0, r7, r5
 8023eb8:	2201      	movs	r2, #1
 8023eba:	2109      	movs	r1, #9
 8023ebc:	f7fe fac2 	bl	8022444 <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 8023ec0:	210c      	movs	r1, #12
 8023ec2:	187b      	adds	r3, r7, r1
 8023ec4:	2200      	movs	r2, #0
 8023ec6:	701a      	strb	r2, [r3, #0]
 8023ec8:	187b      	adds	r3, r7, r1
 8023eca:	1978      	adds	r0, r7, r5
 8023ecc:	2201      	movs	r2, #1
 8023ece:	210b      	movs	r1, #11
 8023ed0:	f7fe fab8 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 8023ed4:	19bb      	adds	r3, r7, r6
 8023ed6:	781a      	ldrb	r2, [r3, #0]
 8023ed8:	4951      	ldr	r1, [pc, #324]	; (8024020 <Send_DpmInitCnf+0x354>)
 8023eda:	0013      	movs	r3, r2
 8023edc:	005b      	lsls	r3, r3, #1
 8023ede:	189b      	adds	r3, r3, r2
 8023ee0:	009b      	lsls	r3, r3, #2
 8023ee2:	18cb      	adds	r3, r1, r3
 8023ee4:	795b      	ldrb	r3, [r3, #5]
 8023ee6:	071b      	lsls	r3, r3, #28
 8023ee8:	0f9b      	lsrs	r3, r3, #30
 8023eea:	b2db      	uxtb	r3, r3
 8023eec:	b29a      	uxth	r2, r3
 8023eee:	193b      	adds	r3, r7, r4
 8023ef0:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8023ef2:	193b      	adds	r3, r7, r4
 8023ef4:	1978      	adds	r0, r7, r5
 8023ef6:	2201      	movs	r2, #1
 8023ef8:	2110      	movs	r1, #16
 8023efa:	f7fe faa3 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 8023efe:	19bb      	adds	r3, r7, r6
 8023f00:	781b      	ldrb	r3, [r3, #0]
 8023f02:	4a48      	ldr	r2, [pc, #288]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023f04:	2168      	movs	r1, #104	; 0x68
 8023f06:	2074      	movs	r0, #116	; 0x74
 8023f08:	4343      	muls	r3, r0
 8023f0a:	18d3      	adds	r3, r2, r3
 8023f0c:	185b      	adds	r3, r3, r1
 8023f0e:	78db      	ldrb	r3, [r3, #3]
 8023f10:	06db      	lsls	r3, r3, #27
 8023f12:	0f9b      	lsrs	r3, r3, #30
 8023f14:	b2db      	uxtb	r3, r3
 8023f16:	b29a      	uxth	r2, r3
 8023f18:	193b      	adds	r3, r7, r4
 8023f1a:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 8023f1c:	193b      	adds	r3, r7, r4
 8023f1e:	1978      	adds	r0, r7, r5
 8023f20:	2201      	movs	r2, #1
 8023f22:	2112      	movs	r1, #18
 8023f24:	f7fe fa8e 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8023f28:	19bb      	adds	r3, r7, r6
 8023f2a:	781b      	ldrb	r3, [r3, #0]
 8023f2c:	4a3d      	ldr	r2, [pc, #244]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023f2e:	2168      	movs	r1, #104	; 0x68
 8023f30:	2074      	movs	r0, #116	; 0x74
 8023f32:	4343      	muls	r3, r0
 8023f34:	18d3      	adds	r3, r2, r3
 8023f36:	185b      	adds	r3, r3, r1
 8023f38:	78db      	ldrb	r3, [r3, #3]
 8023f3a:	069b      	lsls	r3, r3, #26
 8023f3c:	0fdb      	lsrs	r3, r3, #31
 8023f3e:	b2db      	uxtb	r3, r3
 8023f40:	b29a      	uxth	r2, r3
 8023f42:	193b      	adds	r3, r7, r4
 8023f44:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8023f46:	193b      	adds	r3, r7, r4
 8023f48:	1978      	adds	r0, r7, r5
 8023f4a:	2201      	movs	r2, #1
 8023f4c:	2113      	movs	r1, #19
 8023f4e:	f7fe fa79 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8023f52:	19bb      	adds	r3, r7, r6
 8023f54:	781b      	ldrb	r3, [r3, #0]
 8023f56:	4a33      	ldr	r2, [pc, #204]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023f58:	2168      	movs	r1, #104	; 0x68
 8023f5a:	2074      	movs	r0, #116	; 0x74
 8023f5c:	4343      	muls	r3, r0
 8023f5e:	18d3      	adds	r3, r2, r3
 8023f60:	185b      	adds	r3, r3, r1
 8023f62:	78db      	ldrb	r3, [r3, #3]
 8023f64:	065b      	lsls	r3, r3, #25
 8023f66:	0fdb      	lsrs	r3, r3, #31
 8023f68:	b2db      	uxtb	r3, r3
 8023f6a:	b29a      	uxth	r2, r3
 8023f6c:	193b      	adds	r3, r7, r4
 8023f6e:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 8023f70:	193b      	adds	r3, r7, r4
 8023f72:	1978      	adds	r0, r7, r5
 8023f74:	2201      	movs	r2, #1
 8023f76:	2114      	movs	r1, #20
 8023f78:	f7fe fa64 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 8023f7c:	19bb      	adds	r3, r7, r6
 8023f7e:	781b      	ldrb	r3, [r3, #0]
 8023f80:	4a28      	ldr	r2, [pc, #160]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023f82:	2168      	movs	r1, #104	; 0x68
 8023f84:	2074      	movs	r0, #116	; 0x74
 8023f86:	4343      	muls	r3, r0
 8023f88:	18d3      	adds	r3, r2, r3
 8023f8a:	185b      	adds	r3, r3, r1
 8023f8c:	78db      	ldrb	r3, [r3, #3]
 8023f8e:	061b      	lsls	r3, r3, #24
 8023f90:	0fdb      	lsrs	r3, r3, #31
 8023f92:	b2db      	uxtb	r3, r3
 8023f94:	b29a      	uxth	r2, r3
 8023f96:	193b      	adds	r3, r7, r4
 8023f98:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 8023f9a:	193b      	adds	r3, r7, r4
 8023f9c:	1978      	adds	r0, r7, r5
 8023f9e:	2201      	movs	r2, #1
 8023fa0:	2115      	movs	r1, #21
 8023fa2:	f7fe fa4f 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 8023fa6:	19bb      	adds	r3, r7, r6
 8023fa8:	781b      	ldrb	r3, [r3, #0]
 8023faa:	4a1e      	ldr	r2, [pc, #120]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023fac:	2168      	movs	r1, #104	; 0x68
 8023fae:	2074      	movs	r0, #116	; 0x74
 8023fb0:	4343      	muls	r3, r0
 8023fb2:	18d3      	adds	r3, r2, r3
 8023fb4:	185b      	adds	r3, r3, r1
 8023fb6:	78db      	ldrb	r3, [r3, #3]
 8023fb8:	075b      	lsls	r3, r3, #29
 8023fba:	0fdb      	lsrs	r3, r3, #31
 8023fbc:	b2db      	uxtb	r3, r3
 8023fbe:	b29a      	uxth	r2, r3
 8023fc0:	193b      	adds	r3, r7, r4
 8023fc2:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 8023fc4:	193b      	adds	r3, r7, r4
 8023fc6:	1978      	adds	r0, r7, r5
 8023fc8:	2201      	movs	r2, #1
 8023fca:	2116      	movs	r1, #22
 8023fcc:	f7fe fa3a 	bl	8022444 <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8023fd0:	19bb      	adds	r3, r7, r6
 8023fd2:	781b      	ldrb	r3, [r3, #0]
 8023fd4:	4a13      	ldr	r2, [pc, #76]	; (8024024 <Send_DpmInitCnf+0x358>)
 8023fd6:	2168      	movs	r1, #104	; 0x68
 8023fd8:	2074      	movs	r0, #116	; 0x74
 8023fda:	4343      	muls	r3, r0
 8023fdc:	18d3      	adds	r3, r2, r3
 8023fde:	185b      	adds	r3, r3, r1
 8023fe0:	791b      	ldrb	r3, [r3, #4]
 8023fe2:	07db      	lsls	r3, r3, #31
 8023fe4:	0fdb      	lsrs	r3, r3, #31
 8023fe6:	b2db      	uxtb	r3, r3
 8023fe8:	b29a      	uxth	r2, r3
 8023fea:	193b      	adds	r3, r7, r4
 8023fec:	801a      	strh	r2, [r3, #0]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8023fee:	193b      	adds	r3, r7, r4
 8023ff0:	1978      	adds	r0, r7, r5
 8023ff2:	2201      	movs	r2, #1
 8023ff4:	2117      	movs	r1, #23
 8023ff6:	f7fe fa25 	bl	8022444 <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8023ffa:	197b      	adds	r3, r7, r5
 8023ffc:	0018      	movs	r0, r3
 8023ffe:	f7fe fb83 	bl	8022708 <TLV_deinit_encode>
}
 8024002:	46c0      	nop			; (mov r8, r8)
 8024004:	46bd      	mov	sp, r7
 8024006:	b011      	add	sp, #68	; 0x44
 8024008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802400a:	46c0      	nop			; (mov r8, r8)
 802400c:	20005054 	.word	0x20005054
 8024010:	0802aeb4 	.word	0x0802aeb4
 8024014:	20005058 	.word	0x20005058
 8024018:	0802aebc 	.word	0x0802aebc
 802401c:	20005049 	.word	0x20005049
 8024020:	200001b4 	.word	0x200001b4
 8024024:	200001c8 	.word	0x200001c8

08024028 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8024028:	b5b0      	push	{r4, r5, r7, lr}
 802402a:	b090      	sub	sp, #64	; 0x40
 802402c:	af00      	add	r7, sp, #0
 802402e:	60b9      	str	r1, [r7, #8]
 8024030:	607a      	str	r2, [r7, #4]
 8024032:	240f      	movs	r4, #15
 8024034:	193b      	adds	r3, r7, r4
 8024036:	1c02      	adds	r2, r0, #0
 8024038:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 802403a:	233f      	movs	r3, #63	; 0x3f
 802403c:	18fb      	adds	r3, r7, r3
 802403e:	2202      	movs	r2, #2
 8024040:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8024042:	68ba      	ldr	r2, [r7, #8]
 8024044:	252c      	movs	r5, #44	; 0x2c
 8024046:	197b      	adds	r3, r7, r5
 8024048:	0011      	movs	r1, r2
 802404a:	0018      	movs	r0, r3
 802404c:	f7fe fb6e 	bl	802272c <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8024050:	193b      	adds	r3, r7, r4
 8024052:	781b      	ldrb	r3, [r3, #0]
 8024054:	3301      	adds	r3, #1
 8024056:	015b      	lsls	r3, r3, #5
 8024058:	b25b      	sxtb	r3, r3
 802405a:	220a      	movs	r2, #10
 802405c:	4313      	orrs	r3, r2
 802405e:	b25b      	sxtb	r3, r3
 8024060:	b2d9      	uxtb	r1, r3
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	2280      	movs	r2, #128	; 0x80
 8024066:	0052      	lsls	r2, r2, #1
 8024068:	2020      	movs	r0, #32
 802406a:	1838      	adds	r0, r7, r0
 802406c:	f7fe f987 	bl	802237e <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8024070:	2318      	movs	r3, #24
 8024072:	18fb      	adds	r3, r7, r3
 8024074:	221c      	movs	r2, #28
 8024076:	18ba      	adds	r2, r7, r2
 8024078:	241e      	movs	r4, #30
 802407a:	1939      	adds	r1, r7, r4
 802407c:	1978      	adds	r0, r7, r5
 802407e:	f7fe fb81 	bl	8022784 <TLV_get>
  switch (tag)
 8024082:	193b      	adds	r3, r7, r4
 8024084:	781b      	ldrb	r3, [r3, #0]
 8024086:	2b2b      	cmp	r3, #43	; 0x2b
 8024088:	d900      	bls.n	802408c <Request_MessageReq+0x64>
 802408a:	e2a8      	b.n	80245de <Request_MessageReq+0x5b6>
 802408c:	009a      	lsls	r2, r3, #2
 802408e:	4bdb      	ldr	r3, [pc, #876]	; (80243fc <Request_MessageReq+0x3d4>)
 8024090:	18d3      	adds	r3, r2, r3
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	469f      	mov	pc, r3
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8024096:	233f      	movs	r3, #63	; 0x3f
 8024098:	18fc      	adds	r4, r7, r3
 802409a:	230f      	movs	r3, #15
 802409c:	18fb      	adds	r3, r7, r3
 802409e:	781b      	ldrb	r3, [r3, #0]
 80240a0:	0018      	movs	r0, r3
 80240a2:	f7fa fd7b 	bl	801eb9c <USBPD_DPM_RequestGotoMin>
 80240a6:	0003      	movs	r3, r0
 80240a8:	7023      	strb	r3, [r4, #0]
      break;
 80240aa:	e2b7      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 80240ac:	233f      	movs	r3, #63	; 0x3f
 80240ae:	18fc      	adds	r4, r7, r3
 80240b0:	230f      	movs	r3, #15
 80240b2:	18fb      	adds	r3, r7, r3
 80240b4:	781b      	ldrb	r3, [r3, #0]
 80240b6:	0018      	movs	r0, r3
 80240b8:	f7fa fdb6 	bl	801ec28 <USBPD_DPM_RequestPing>
 80240bc:	0003      	movs	r3, r0
 80240be:	7023      	strb	r3, [r4, #0]
      break;
 80240c0:	e2ac      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 80240c2:	233f      	movs	r3, #63	; 0x3f
 80240c4:	18fc      	adds	r4, r7, r3
 80240c6:	230f      	movs	r3, #15
 80240c8:	18fb      	adds	r3, r7, r3
 80240ca:	781b      	ldrb	r3, [r3, #0]
 80240cc:	0018      	movs	r0, r3
 80240ce:	f7fa feb3 	bl	801ee38 <USBPD_DPM_RequestGetSourceCapability>
 80240d2:	0003      	movs	r3, r0
 80240d4:	7023      	strb	r3, [r4, #0]
      break;
 80240d6:	e2a1      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 80240d8:	233f      	movs	r3, #63	; 0x3f
 80240da:	18fc      	adds	r4, r7, r3
 80240dc:	230f      	movs	r3, #15
 80240de:	18fb      	adds	r3, r7, r3
 80240e0:	781b      	ldrb	r3, [r3, #0]
 80240e2:	0018      	movs	r0, r3
 80240e4:	f7fa feee 	bl	801eec4 <USBPD_DPM_RequestGetSinkCapability>
 80240e8:	0003      	movs	r3, r0
 80240ea:	7023      	strb	r3, [r4, #0]
      break;
 80240ec:	e296      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 80240ee:	233f      	movs	r3, #63	; 0x3f
 80240f0:	18fc      	adds	r4, r7, r3
 80240f2:	230f      	movs	r3, #15
 80240f4:	18fb      	adds	r3, r7, r3
 80240f6:	781b      	ldrb	r3, [r3, #0]
 80240f8:	0018      	movs	r0, r3
 80240fa:	f7fa ff29 	bl	801ef50 <USBPD_DPM_RequestDataRoleSwap>
 80240fe:	0003      	movs	r3, r0
 8024100:	7023      	strb	r3, [r4, #0]
      break;
 8024102:	e28b      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8024104:	233f      	movs	r3, #63	; 0x3f
 8024106:	18fc      	adds	r4, r7, r3
 8024108:	230f      	movs	r3, #15
 802410a:	18fb      	adds	r3, r7, r3
 802410c:	781b      	ldrb	r3, [r3, #0]
 802410e:	0018      	movs	r0, r3
 8024110:	f7fa ff64 	bl	801efdc <USBPD_DPM_RequestPowerRoleSwap>
 8024114:	0003      	movs	r3, r0
 8024116:	7023      	strb	r3, [r4, #0]
      break;
 8024118:	e280      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 802411a:	233f      	movs	r3, #63	; 0x3f
 802411c:	18fc      	adds	r4, r7, r3
 802411e:	230f      	movs	r3, #15
 8024120:	18fb      	adds	r3, r7, r3
 8024122:	781b      	ldrb	r3, [r3, #0]
 8024124:	0018      	movs	r0, r3
 8024126:	f7fa ff8f 	bl	801f048 <USBPD_DPM_RequestVconnSwap>
 802412a:	0003      	movs	r3, r0
 802412c:	7023      	strb	r3, [r4, #0]
      break;
 802412e:	e275      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8024130:	233f      	movs	r3, #63	; 0x3f
 8024132:	18fc      	adds	r4, r7, r3
 8024134:	230f      	movs	r3, #15
 8024136:	18fb      	adds	r3, r7, r3
 8024138:	781b      	ldrb	r3, [r3, #0]
 802413a:	0018      	movs	r0, r3
 802413c:	f7fb f814 	bl	801f168 <USBPD_DPM_RequestSourceCapability>
 8024140:	0003      	movs	r3, r0
 8024142:	7023      	strb	r3, [r4, #0]
      break;
 8024144:	e26a      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8024146:	233c      	movs	r3, #60	; 0x3c
 8024148:	18fb      	adds	r3, r7, r3
 802414a:	2200      	movs	r2, #0
 802414c:	801a      	strh	r2, [r3, #0]
      uint8_t nb_expected_tag = 0U;
 802414e:	233b      	movs	r3, #59	; 0x3b
 8024150:	18fb      	adds	r3, r7, r3
 8024152:	2200      	movs	r2, #0
 8024154:	701a      	strb	r2, [r3, #0]
      uint8_t index_pdo = 0;
 8024156:	233a      	movs	r3, #58	; 0x3a
 8024158:	18fb      	adds	r3, r7, r3
 802415a:	2200      	movs	r2, #0
 802415c:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 802415e:	211c      	movs	r1, #28
 8024160:	187b      	adds	r3, r7, r1
 8024162:	881a      	ldrh	r2, [r3, #0]
 8024164:	2380      	movs	r3, #128	; 0x80
 8024166:	005b      	lsls	r3, r3, #1
 8024168:	429a      	cmp	r2, r3
 802416a:	d900      	bls.n	802416e <Request_MessageReq+0x146>
 802416c:	e239      	b.n	80245e2 <Request_MessageReq+0x5ba>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 802416e:	2318      	movs	r3, #24
 8024170:	18fb      	adds	r3, r7, r3
 8024172:	187a      	adds	r2, r7, r1
 8024174:	211e      	movs	r1, #30
 8024176:	1879      	adds	r1, r7, r1
 8024178:	202c      	movs	r0, #44	; 0x2c
 802417a:	1838      	adds	r0, r7, r0
 802417c:	f7fe fb02 	bl	8022784 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8024180:	e02c      	b.n	80241dc <Request_MessageReq+0x1b4>
      {
        nb_expected_tag++;
 8024182:	213b      	movs	r1, #59	; 0x3b
 8024184:	187b      	adds	r3, r7, r1
 8024186:	781a      	ldrb	r2, [r3, #0]
 8024188:	187b      	adds	r3, r7, r1
 802418a:	3201      	adds	r2, #1
 802418c:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 802418e:	231e      	movs	r3, #30
 8024190:	18fb      	adds	r3, r7, r3
 8024192:	781b      	ldrb	r3, [r3, #0]
 8024194:	2b01      	cmp	r3, #1
 8024196:	d105      	bne.n	80241a4 <Request_MessageReq+0x17c>
        {
          index_pdo = value[0];
 8024198:	69ba      	ldr	r2, [r7, #24]
 802419a:	233a      	movs	r3, #58	; 0x3a
 802419c:	18fb      	adds	r3, r7, r3
 802419e:	7812      	ldrb	r2, [r2, #0]
 80241a0:	701a      	strb	r2, [r3, #0]
 80241a2:	e011      	b.n	80241c8 <Request_MessageReq+0x1a0>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 80241a4:	231e      	movs	r3, #30
 80241a6:	18fb      	adds	r3, r7, r3
 80241a8:	781b      	ldrb	r3, [r3, #0]
 80241aa:	2b02      	cmp	r3, #2
 80241ac:	d10c      	bne.n	80241c8 <Request_MessageReq+0x1a0>
        {
          voltage = USBPD_LE16(&value[0]);
 80241ae:	69bb      	ldr	r3, [r7, #24]
 80241b0:	781b      	ldrb	r3, [r3, #0]
 80241b2:	b299      	uxth	r1, r3
 80241b4:	69bb      	ldr	r3, [r7, #24]
 80241b6:	3301      	adds	r3, #1
 80241b8:	781b      	ldrb	r3, [r3, #0]
 80241ba:	b29b      	uxth	r3, r3
 80241bc:	021b      	lsls	r3, r3, #8
 80241be:	b29a      	uxth	r2, r3
 80241c0:	233c      	movs	r3, #60	; 0x3c
 80241c2:	18fb      	adds	r3, r7, r3
 80241c4:	188a      	adds	r2, r1, r2
 80241c6:	801a      	strh	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 80241c8:	2318      	movs	r3, #24
 80241ca:	18fb      	adds	r3, r7, r3
 80241cc:	221c      	movs	r2, #28
 80241ce:	18ba      	adds	r2, r7, r2
 80241d0:	211e      	movs	r1, #30
 80241d2:	1879      	adds	r1, r7, r1
 80241d4:	202c      	movs	r0, #44	; 0x2c
 80241d6:	1838      	adds	r0, r7, r0
 80241d8:	f7fe fad4 	bl	8022784 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 80241dc:	221c      	movs	r2, #28
 80241de:	18bb      	adds	r3, r7, r2
 80241e0:	881b      	ldrh	r3, [r3, #0]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	d008      	beq.n	80241f8 <Request_MessageReq+0x1d0>
 80241e6:	18bb      	adds	r3, r7, r2
 80241e8:	881b      	ldrh	r3, [r3, #0]
 80241ea:	2bff      	cmp	r3, #255	; 0xff
 80241ec:	d804      	bhi.n	80241f8 <Request_MessageReq+0x1d0>
 80241ee:	233b      	movs	r3, #59	; 0x3b
 80241f0:	18fb      	adds	r3, r7, r3
 80241f2:	781b      	ldrb	r3, [r3, #0]
 80241f4:	2b01      	cmp	r3, #1
 80241f6:	d9c4      	bls.n	8024182 <Request_MessageReq+0x15a>
      }
      if (2U == nb_expected_tag)
 80241f8:	233b      	movs	r3, #59	; 0x3b
 80241fa:	18fb      	adds	r3, r7, r3
 80241fc:	781b      	ldrb	r3, [r3, #0]
 80241fe:	2b02      	cmp	r3, #2
 8024200:	d000      	beq.n	8024204 <Request_MessageReq+0x1dc>
 8024202:	e1f0      	b.n	80245e6 <Request_MessageReq+0x5be>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8024204:	233f      	movs	r3, #63	; 0x3f
 8024206:	18fc      	adds	r4, r7, r3
 8024208:	233c      	movs	r3, #60	; 0x3c
 802420a:	18fb      	adds	r3, r7, r3
 802420c:	881a      	ldrh	r2, [r3, #0]
 802420e:	233a      	movs	r3, #58	; 0x3a
 8024210:	18fb      	adds	r3, r7, r3
 8024212:	7819      	ldrb	r1, [r3, #0]
 8024214:	230f      	movs	r3, #15
 8024216:	18fb      	adds	r3, r7, r3
 8024218:	781b      	ldrb	r3, [r3, #0]
 802421a:	0018      	movs	r0, r3
 802421c:	f7fa fd4a 	bl	801ecb4 <USBPD_DPM_RequestMessageRequest>
 8024220:	0003      	movs	r3, r0
 8024222:	7023      	strb	r3, [r4, #0]
      }
      break;
 8024224:	e1df      	b.n	80245e6 <Request_MessageReq+0x5be>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8024226:	2318      	movs	r3, #24
 8024228:	18fb      	adds	r3, r7, r3
 802422a:	221c      	movs	r2, #28
 802422c:	18ba      	adds	r2, r7, r2
 802422e:	241e      	movs	r4, #30
 8024230:	1939      	adds	r1, r7, r4
 8024232:	202c      	movs	r0, #44	; 0x2c
 8024234:	1838      	adds	r0, r7, r0
 8024236:	f7fe faa5 	bl	8022784 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 802423a:	193b      	adds	r3, r7, r4
 802423c:	781b      	ldrb	r3, [r3, #0]
 802423e:	2b00      	cmp	r3, #0
 8024240:	d000      	beq.n	8024244 <Request_MessageReq+0x21c>
 8024242:	e1d2      	b.n	80245ea <Request_MessageReq+0x5c2>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8024244:	69bb      	ldr	r3, [r7, #24]
 8024246:	781a      	ldrb	r2, [r3, #0]
 8024248:	233f      	movs	r3, #63	; 0x3f
 802424a:	18fc      	adds	r4, r7, r3
 802424c:	230f      	movs	r3, #15
 802424e:	18fb      	adds	r3, r7, r3
 8024250:	781b      	ldrb	r3, [r3, #0]
 8024252:	0011      	movs	r1, r2
 8024254:	0018      	movs	r0, r3
 8024256:	f7fa ff3d 	bl	801f0d4 <USBPD_DPM_RequestSoftReset>
 802425a:	0003      	movs	r3, r0
 802425c:	7023      	strb	r3, [r4, #0]
      }
      break;
 802425e:	e1c4      	b.n	80245ea <Request_MessageReq+0x5c2>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8024260:	233f      	movs	r3, #63	; 0x3f
 8024262:	18fc      	adds	r4, r7, r3
 8024264:	230f      	movs	r3, #15
 8024266:	18fb      	adds	r3, r7, r3
 8024268:	781b      	ldrb	r3, [r3, #0]
 802426a:	0018      	movs	r0, r3
 802426c:	f7fa fc0e 	bl	801ea8c <USBPD_DPM_RequestHardReset>
 8024270:	0003      	movs	r3, r0
 8024272:	7023      	strb	r3, [r4, #0]
      break;
 8024274:	e1d2      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8024276:	233f      	movs	r3, #63	; 0x3f
 8024278:	18fc      	adds	r4, r7, r3
 802427a:	230f      	movs	r3, #15
 802427c:	18fb      	adds	r3, r7, r3
 802427e:	781b      	ldrb	r3, [r3, #0]
 8024280:	0018      	movs	r0, r3
 8024282:	f7fa fc47 	bl	801eb14 <USBPD_DPM_RequestCableReset>
 8024286:	0003      	movs	r3, r0
 8024288:	7023      	strb	r3, [r4, #0]
      break;
 802428a:	e1c7      	b.n	802461c <Request_MessageReq+0x5f4>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 802428c:	2339      	movs	r3, #57	; 0x39
 802428e:	18fb      	adds	r3, r7, r3
 8024290:	2200      	movs	r2, #0
 8024292:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 8024294:	211c      	movs	r1, #28
 8024296:	187b      	adds	r3, r7, r1
 8024298:	881a      	ldrh	r2, [r3, #0]
 802429a:	2380      	movs	r3, #128	; 0x80
 802429c:	005b      	lsls	r3, r3, #1
 802429e:	429a      	cmp	r2, r3
 80242a0:	d900      	bls.n	80242a4 <Request_MessageReq+0x27c>
 80242a2:	e1a4      	b.n	80245ee <Request_MessageReq+0x5c6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80242a4:	2318      	movs	r3, #24
 80242a6:	18fb      	adds	r3, r7, r3
 80242a8:	187a      	adds	r2, r7, r1
 80242aa:	211e      	movs	r1, #30
 80242ac:	1879      	adds	r1, r7, r1
 80242ae:	202c      	movs	r0, #44	; 0x2c
 80242b0:	1838      	adds	r0, r7, r0
 80242b2:	f7fe fa67 	bl	8022784 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80242b6:	e005      	b.n	80242c4 <Request_MessageReq+0x29c>
      {
        nb_expected_tag++;
 80242b8:	2139      	movs	r1, #57	; 0x39
 80242ba:	187b      	adds	r3, r7, r1
 80242bc:	781a      	ldrb	r2, [r3, #0]
 80242be:	187b      	adds	r3, r7, r1
 80242c0:	3201      	adds	r2, #1
 80242c2:	701a      	strb	r2, [r3, #0]
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 80242c4:	221c      	movs	r2, #28
 80242c6:	18bb      	adds	r3, r7, r2
 80242c8:	881b      	ldrh	r3, [r3, #0]
 80242ca:	2b00      	cmp	r3, #0
 80242cc:	d008      	beq.n	80242e0 <Request_MessageReq+0x2b8>
 80242ce:	18bb      	adds	r3, r7, r2
 80242d0:	881b      	ldrh	r3, [r3, #0]
 80242d2:	2bff      	cmp	r3, #255	; 0xff
 80242d4:	d804      	bhi.n	80242e0 <Request_MessageReq+0x2b8>
 80242d6:	2339      	movs	r3, #57	; 0x39
 80242d8:	18fb      	adds	r3, r7, r3
 80242da:	781b      	ldrb	r3, [r3, #0]
 80242dc:	2b00      	cmp	r3, #0
 80242de:	d0eb      	beq.n	80242b8 <Request_MessageReq+0x290>
      }
      if (1U == nb_expected_tag)
 80242e0:	2339      	movs	r3, #57	; 0x39
 80242e2:	18fb      	adds	r3, r7, r3
 80242e4:	781b      	ldrb	r3, [r3, #0]
 80242e6:	2b01      	cmp	r3, #1
 80242e8:	d000      	beq.n	80242ec <Request_MessageReq+0x2c4>
 80242ea:	e182      	b.n	80245f2 <Request_MessageReq+0x5ca>
      {
        status = Manage_FreeText(PortNum, value, length);
 80242ec:	69b9      	ldr	r1, [r7, #24]
 80242ee:	231c      	movs	r3, #28
 80242f0:	18fb      	adds	r3, r7, r3
 80242f2:	881a      	ldrh	r2, [r3, #0]
 80242f4:	233f      	movs	r3, #63	; 0x3f
 80242f6:	18fc      	adds	r4, r7, r3
 80242f8:	230f      	movs	r3, #15
 80242fa:	18fb      	adds	r3, r7, r3
 80242fc:	781b      	ldrb	r3, [r3, #0]
 80242fe:	0018      	movs	r0, r3
 8024300:	f001 f9d6 	bl	80256b0 <Manage_FreeText>
 8024304:	0003      	movs	r3, r0
 8024306:	7023      	strb	r3, [r4, #0]
      }
      break;
 8024308:	e173      	b.n	80245f2 <Request_MessageReq+0x5ca>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 802430a:	233f      	movs	r3, #63	; 0x3f
 802430c:	18fc      	adds	r4, r7, r3
 802430e:	230f      	movs	r3, #15
 8024310:	18fb      	adds	r3, r7, r3
 8024312:	781b      	ldrb	r3, [r3, #0]
 8024314:	0018      	movs	r0, r3
 8024316:	f7fb f923 	bl	801f560 <USBPD_DPM_RequestFastRoleSwap>
 802431a:	0003      	movs	r3, r0
 802431c:	7023      	strb	r3, [r4, #0]
      break;
 802431e:	e17d      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8024320:	233f      	movs	r3, #63	; 0x3f
 8024322:	18fc      	adds	r4, r7, r3
 8024324:	230f      	movs	r3, #15
 8024326:	18fb      	adds	r3, r7, r3
 8024328:	781b      	ldrb	r3, [r3, #0]
 802432a:	0018      	movs	r0, r3
 802432c:	f7fb f88c 	bl	801f448 <USBPD_DPM_RequestGetPPS_Status>
 8024330:	0003      	movs	r3, r0
 8024332:	7023      	strb	r3, [r4, #0]
      break;
 8024334:	e172      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8024336:	233f      	movs	r3, #63	; 0x3f
 8024338:	18fc      	adds	r4, r7, r3
 802433a:	230f      	movs	r3, #15
 802433c:	18fb      	adds	r3, r7, r3
 802433e:	781b      	ldrb	r3, [r3, #0]
 8024340:	0018      	movs	r0, r3
 8024342:	f7fb f953 	bl	801f5ec <USBPD_DPM_RequestGetCountryCodes>
 8024346:	0003      	movs	r3, r0
 8024348:	7023      	strb	r3, [r4, #0]
      break;
 802434a:	e167      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 802434c:	233f      	movs	r3, #63	; 0x3f
 802434e:	18fc      	adds	r4, r7, r3
 8024350:	230f      	movs	r3, #15
 8024352:	18fb      	adds	r3, r7, r3
 8024354:	781b      	ldrb	r3, [r3, #0]
 8024356:	0018      	movs	r0, r3
 8024358:	f7fb f8bc 	bl	801f4d4 <USBPD_DPM_RequestGetStatus>
 802435c:	0003      	movs	r3, r0
 802435e:	7023      	strb	r3, [r4, #0]
      break;
 8024360:	e15c      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8024362:	233f      	movs	r3, #63	; 0x3f
 8024364:	18fc      	adds	r4, r7, r3
 8024366:	230f      	movs	r3, #15
 8024368:	18fb      	adds	r3, r7, r3
 802436a:	781b      	ldrb	r3, [r3, #0]
 802436c:	0018      	movs	r0, r3
 802436e:	f7fa ff89 	bl	801f284 <USBPD_DPM_RequestGetSourceCapabilityExt>
 8024372:	0003      	movs	r3, r0
 8024374:	7023      	strb	r3, [r4, #0]
      break;
 8024376:	e151      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8024378:	233f      	movs	r3, #63	; 0x3f
 802437a:	18fc      	adds	r4, r7, r3
 802437c:	230f      	movs	r3, #15
 802437e:	18fb      	adds	r3, r7, r3
 8024380:	781b      	ldrb	r3, [r3, #0]
 8024382:	0018      	movs	r0, r3
 8024384:	f7fa ffc4 	bl	801f310 <USBPD_DPM_RequestGetSinkCapabilityExt>
 8024388:	0003      	movs	r3, r0
 802438a:	7023      	strb	r3, [r4, #0]
      break;
 802438c:	e146      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 802438e:	211c      	movs	r1, #28
 8024390:	187b      	adds	r3, r7, r1
 8024392:	881a      	ldrh	r2, [r3, #0]
 8024394:	2380      	movs	r3, #128	; 0x80
 8024396:	005b      	lsls	r3, r3, #1
 8024398:	429a      	cmp	r2, r3
 802439a:	d900      	bls.n	802439e <Request_MessageReq+0x376>
 802439c:	e12b      	b.n	80245f6 <Request_MessageReq+0x5ce>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 802439e:	2318      	movs	r3, #24
 80243a0:	18fb      	adds	r3, r7, r3
 80243a2:	187a      	adds	r2, r7, r1
 80243a4:	241e      	movs	r4, #30
 80243a6:	1939      	adds	r1, r7, r4
 80243a8:	202c      	movs	r0, #44	; 0x2c
 80243aa:	1838      	adds	r0, r7, r0
 80243ac:	f7fe f9ea 	bl	8022784 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 80243b0:	193b      	adds	r3, r7, r4
 80243b2:	781b      	ldrb	r3, [r3, #0]
 80243b4:	2b04      	cmp	r3, #4
 80243b6:	d000      	beq.n	80243ba <Request_MessageReq+0x392>
 80243b8:	e11f      	b.n	80245fa <Request_MessageReq+0x5d2>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 80243ba:	69bb      	ldr	r3, [r7, #24]
 80243bc:	781b      	ldrb	r3, [r3, #0]
 80243be:	001a      	movs	r2, r3
 80243c0:	69bb      	ldr	r3, [r7, #24]
 80243c2:	3301      	adds	r3, #1
 80243c4:	781b      	ldrb	r3, [r3, #0]
 80243c6:	021b      	lsls	r3, r3, #8
 80243c8:	18d2      	adds	r2, r2, r3
 80243ca:	69bb      	ldr	r3, [r7, #24]
 80243cc:	3302      	adds	r3, #2
 80243ce:	781b      	ldrb	r3, [r3, #0]
 80243d0:	041b      	lsls	r3, r3, #16
 80243d2:	18d2      	adds	r2, r2, r3
 80243d4:	69bb      	ldr	r3, [r7, #24]
 80243d6:	3303      	adds	r3, #3
 80243d8:	781b      	ldrb	r3, [r3, #0]
 80243da:	061b      	lsls	r3, r3, #24
 80243dc:	18d3      	adds	r3, r2, r3
 80243de:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 80243e0:	233f      	movs	r3, #63	; 0x3f
 80243e2:	18fc      	adds	r4, r7, r3
 80243e4:	697a      	ldr	r2, [r7, #20]
 80243e6:	230f      	movs	r3, #15
 80243e8:	18fb      	adds	r3, r7, r3
 80243ea:	781b      	ldrb	r3, [r3, #0]
 80243ec:	0011      	movs	r1, r2
 80243ee:	0018      	movs	r0, r3
 80243f0:	f7fa ff00 	bl	801f1f4 <USBPD_DPM_RequestAlert>
 80243f4:	0003      	movs	r3, r0
 80243f6:	7023      	strb	r3, [r4, #0]
      }
      break;
 80243f8:	e0ff      	b.n	80245fa <Request_MessageReq+0x5d2>
 80243fa:	46c0      	nop			; (mov r8, r8)
 80243fc:	0802b3d8 	.word	0x0802b3d8
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8024400:	211c      	movs	r1, #28
 8024402:	187b      	adds	r3, r7, r1
 8024404:	881a      	ldrh	r2, [r3, #0]
 8024406:	2380      	movs	r3, #128	; 0x80
 8024408:	005b      	lsls	r3, r3, #1
 802440a:	429a      	cmp	r2, r3
 802440c:	d900      	bls.n	8024410 <Request_MessageReq+0x3e8>
 802440e:	e0f6      	b.n	80245fe <Request_MessageReq+0x5d6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8024410:	2318      	movs	r3, #24
 8024412:	18fb      	adds	r3, r7, r3
 8024414:	187a      	adds	r2, r7, r1
 8024416:	241e      	movs	r4, #30
 8024418:	1939      	adds	r1, r7, r4
 802441a:	202c      	movs	r0, #44	; 0x2c
 802441c:	1838      	adds	r0, r7, r0
 802441e:	f7fe f9b1 	bl	8022784 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8024422:	193b      	adds	r3, r7, r4
 8024424:	781b      	ldrb	r3, [r3, #0]
 8024426:	2b05      	cmp	r3, #5
 8024428:	d000      	beq.n	802442c <Request_MessageReq+0x404>
 802442a:	e0ea      	b.n	8024602 <Request_MessageReq+0x5da>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 802442c:	69bb      	ldr	r3, [r7, #24]
 802442e:	781b      	ldrb	r3, [r3, #0]
 8024430:	b299      	uxth	r1, r3
 8024432:	69bb      	ldr	r3, [r7, #24]
 8024434:	3301      	adds	r3, #1
 8024436:	781b      	ldrb	r3, [r3, #0]
 8024438:	b29b      	uxth	r3, r3
 802443a:	021b      	lsls	r3, r3, #8
 802443c:	b29a      	uxth	r2, r3
 802443e:	2034      	movs	r0, #52	; 0x34
 8024440:	183b      	adds	r3, r7, r0
 8024442:	188a      	adds	r2, r1, r2
 8024444:	801a      	strh	r2, [r3, #0]
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8024446:	233f      	movs	r3, #63	; 0x3f
 8024448:	18fc      	adds	r4, r7, r3
 802444a:	183b      	adds	r3, r7, r0
 802444c:	881a      	ldrh	r2, [r3, #0]
 802444e:	230f      	movs	r3, #15
 8024450:	18fb      	adds	r3, r7, r3
 8024452:	781b      	ldrb	r3, [r3, #0]
 8024454:	0011      	movs	r1, r2
 8024456:	0018      	movs	r0, r3
 8024458:	f7fb f90e 	bl	801f678 <USBPD_DPM_RequestGetCountryInfo>
 802445c:	0003      	movs	r3, r0
 802445e:	7023      	strb	r3, [r4, #0]
      }
      break;
 8024460:	e0cf      	b.n	8024602 <Request_MessageReq+0x5da>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8024462:	211c      	movs	r1, #28
 8024464:	187b      	adds	r3, r7, r1
 8024466:	881a      	ldrh	r2, [r3, #0]
 8024468:	2380      	movs	r3, #128	; 0x80
 802446a:	005b      	lsls	r3, r3, #1
 802446c:	429a      	cmp	r2, r3
 802446e:	d900      	bls.n	8024472 <Request_MessageReq+0x44a>
 8024470:	e0c9      	b.n	8024606 <Request_MessageReq+0x5de>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8024472:	2318      	movs	r3, #24
 8024474:	18fb      	adds	r3, r7, r3
 8024476:	187a      	adds	r2, r7, r1
 8024478:	241e      	movs	r4, #30
 802447a:	1939      	adds	r1, r7, r4
 802447c:	202c      	movs	r0, #44	; 0x2c
 802447e:	1838      	adds	r0, r7, r0
 8024480:	f7fe f980 	bl	8022784 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8024484:	193b      	adds	r3, r7, r4
 8024486:	781b      	ldrb	r3, [r3, #0]
 8024488:	2b0c      	cmp	r3, #12
 802448a:	d000      	beq.n	802448e <Request_MessageReq+0x466>
 802448c:	e0bd      	b.n	802460a <Request_MessageReq+0x5e2>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 802448e:	69ba      	ldr	r2, [r7, #24]
 8024490:	233f      	movs	r3, #63	; 0x3f
 8024492:	18fc      	adds	r4, r7, r3
 8024494:	230f      	movs	r3, #15
 8024496:	18fb      	adds	r3, r7, r3
 8024498:	781b      	ldrb	r3, [r3, #0]
 802449a:	0011      	movs	r1, r2
 802449c:	0018      	movs	r0, r3
 802449e:	f7fb f935 	bl	801f70c <USBPD_DPM_RequestGetBatteryCapability>
 80244a2:	0003      	movs	r3, r0
 80244a4:	7023      	strb	r3, [r4, #0]
      }
      break;
 80244a6:	e0b0      	b.n	802460a <Request_MessageReq+0x5e2>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 80244a8:	211c      	movs	r1, #28
 80244aa:	187b      	adds	r3, r7, r1
 80244ac:	881a      	ldrh	r2, [r3, #0]
 80244ae:	2380      	movs	r3, #128	; 0x80
 80244b0:	005b      	lsls	r3, r3, #1
 80244b2:	429a      	cmp	r2, r3
 80244b4:	d900      	bls.n	80244b8 <Request_MessageReq+0x490>
 80244b6:	e0aa      	b.n	802460e <Request_MessageReq+0x5e6>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 80244b8:	2318      	movs	r3, #24
 80244ba:	18fb      	adds	r3, r7, r3
 80244bc:	187a      	adds	r2, r7, r1
 80244be:	241e      	movs	r4, #30
 80244c0:	1939      	adds	r1, r7, r4
 80244c2:	202c      	movs	r0, #44	; 0x2c
 80244c4:	1838      	adds	r0, r7, r0
 80244c6:	f7fe f95d 	bl	8022784 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 80244ca:	193b      	adds	r3, r7, r4
 80244cc:	781b      	ldrb	r3, [r3, #0]
 80244ce:	2b0c      	cmp	r3, #12
 80244d0:	d000      	beq.n	80244d4 <Request_MessageReq+0x4ac>
 80244d2:	e09e      	b.n	8024612 <Request_MessageReq+0x5ea>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 80244d4:	69ba      	ldr	r2, [r7, #24]
 80244d6:	233f      	movs	r3, #63	; 0x3f
 80244d8:	18fc      	adds	r4, r7, r3
 80244da:	230f      	movs	r3, #15
 80244dc:	18fb      	adds	r3, r7, r3
 80244de:	781b      	ldrb	r3, [r3, #0]
 80244e0:	0011      	movs	r1, r2
 80244e2:	0018      	movs	r0, r3
 80244e4:	f7fb f95c 	bl	801f7a0 <USBPD_DPM_RequestGetBatteryStatus>
 80244e8:	0003      	movs	r3, r0
 80244ea:	7023      	strb	r3, [r4, #0]
      }
      break;
 80244ec:	e091      	b.n	8024612 <Request_MessageReq+0x5ea>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint8_t manu_info[2];
      uint8_t nb_expected_tag = 0U;
 80244ee:	2338      	movs	r3, #56	; 0x38
 80244f0:	18fb      	adds	r3, r7, r3
 80244f2:	2200      	movs	r2, #0
 80244f4:	701a      	strb	r2, [r3, #0]
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 80244f6:	2337      	movs	r3, #55	; 0x37
 80244f8:	18fb      	adds	r3, r7, r3
 80244fa:	2200      	movs	r2, #0
 80244fc:	701a      	strb	r2, [r3, #0]
      if (length > TLV_SIZE_MAX)
 80244fe:	211c      	movs	r1, #28
 8024500:	187b      	adds	r3, r7, r1
 8024502:	881a      	ldrh	r2, [r3, #0]
 8024504:	2380      	movs	r3, #128	; 0x80
 8024506:	005b      	lsls	r3, r3, #1
 8024508:	429a      	cmp	r2, r3
 802450a:	d900      	bls.n	802450e <Request_MessageReq+0x4e6>
 802450c:	e083      	b.n	8024616 <Request_MessageReq+0x5ee>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 802450e:	2318      	movs	r3, #24
 8024510:	18fb      	adds	r3, r7, r3
 8024512:	187a      	adds	r2, r7, r1
 8024514:	211e      	movs	r1, #30
 8024516:	1879      	adds	r1, r7, r1
 8024518:	202c      	movs	r0, #44	; 0x2c
 802451a:	1838      	adds	r0, r7, r0
 802451c:	f7fe f932 	bl	8022784 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8024520:	e02f      	b.n	8024582 <Request_MessageReq+0x55a>
      {
        nb_expected_tag++;
 8024522:	2138      	movs	r1, #56	; 0x38
 8024524:	187b      	adds	r3, r7, r1
 8024526:	781a      	ldrb	r2, [r3, #0]
 8024528:	187b      	adds	r3, r7, r1
 802452a:	3201      	adds	r2, #1
 802452c:	701a      	strb	r2, [r3, #0]
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 802452e:	231e      	movs	r3, #30
 8024530:	18fb      	adds	r3, r7, r3
 8024532:	781b      	ldrb	r3, [r3, #0]
 8024534:	2b00      	cmp	r3, #0
 8024536:	d105      	bne.n	8024544 <Request_MessageReq+0x51c>
        {
          sop = value[0];
 8024538:	69ba      	ldr	r2, [r7, #24]
 802453a:	2337      	movs	r3, #55	; 0x37
 802453c:	18fb      	adds	r3, r7, r3
 802453e:	7812      	ldrb	r2, [r2, #0]
 8024540:	701a      	strb	r2, [r3, #0]
 8024542:	e014      	b.n	802456e <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8024544:	231e      	movs	r3, #30
 8024546:	18fb      	adds	r3, r7, r3
 8024548:	781b      	ldrb	r3, [r3, #0]
 802454a:	2b0c      	cmp	r3, #12
 802454c:	d105      	bne.n	802455a <Request_MessageReq+0x532>
        {
          manu_info[1] = value[0];
 802454e:	69bb      	ldr	r3, [r7, #24]
 8024550:	781a      	ldrb	r2, [r3, #0]
 8024552:	2310      	movs	r3, #16
 8024554:	18fb      	adds	r3, r7, r3
 8024556:	705a      	strb	r2, [r3, #1]
 8024558:	e009      	b.n	802456e <Request_MessageReq+0x546>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 802455a:	231e      	movs	r3, #30
 802455c:	18fb      	adds	r3, r7, r3
 802455e:	781b      	ldrb	r3, [r3, #0]
 8024560:	2b0d      	cmp	r3, #13
 8024562:	d104      	bne.n	802456e <Request_MessageReq+0x546>
        {
          manu_info[0] = value[0];
 8024564:	69bb      	ldr	r3, [r7, #24]
 8024566:	781a      	ldrb	r2, [r3, #0]
 8024568:	2310      	movs	r3, #16
 802456a:	18fb      	adds	r3, r7, r3
 802456c:	701a      	strb	r2, [r3, #0]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 802456e:	2318      	movs	r3, #24
 8024570:	18fb      	adds	r3, r7, r3
 8024572:	221c      	movs	r2, #28
 8024574:	18ba      	adds	r2, r7, r2
 8024576:	211e      	movs	r1, #30
 8024578:	1879      	adds	r1, r7, r1
 802457a:	202c      	movs	r0, #44	; 0x2c
 802457c:	1838      	adds	r0, r7, r0
 802457e:	f7fe f901 	bl	8022784 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 3U))
 8024582:	221c      	movs	r2, #28
 8024584:	18bb      	adds	r3, r7, r2
 8024586:	881b      	ldrh	r3, [r3, #0]
 8024588:	2b00      	cmp	r3, #0
 802458a:	d008      	beq.n	802459e <Request_MessageReq+0x576>
 802458c:	18bb      	adds	r3, r7, r2
 802458e:	881b      	ldrh	r3, [r3, #0]
 8024590:	2bff      	cmp	r3, #255	; 0xff
 8024592:	d804      	bhi.n	802459e <Request_MessageReq+0x576>
 8024594:	2338      	movs	r3, #56	; 0x38
 8024596:	18fb      	adds	r3, r7, r3
 8024598:	781b      	ldrb	r3, [r3, #0]
 802459a:	2b02      	cmp	r3, #2
 802459c:	d9c1      	bls.n	8024522 <Request_MessageReq+0x4fa>
      }
      if (3U == nb_expected_tag)
 802459e:	2338      	movs	r3, #56	; 0x38
 80245a0:	18fb      	adds	r3, r7, r3
 80245a2:	781b      	ldrb	r3, [r3, #0]
 80245a4:	2b03      	cmp	r3, #3
 80245a6:	d138      	bne.n	802461a <Request_MessageReq+0x5f2>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 80245a8:	233f      	movs	r3, #63	; 0x3f
 80245aa:	18fc      	adds	r4, r7, r3
 80245ac:	2310      	movs	r3, #16
 80245ae:	18fa      	adds	r2, r7, r3
 80245b0:	2337      	movs	r3, #55	; 0x37
 80245b2:	18fb      	adds	r3, r7, r3
 80245b4:	7819      	ldrb	r1, [r3, #0]
 80245b6:	230f      	movs	r3, #15
 80245b8:	18fb      	adds	r3, r7, r3
 80245ba:	781b      	ldrb	r3, [r3, #0]
 80245bc:	0018      	movs	r0, r3
 80245be:	f7fa feed 	bl	801f39c <USBPD_DPM_RequestGetManufacturerInfo>
 80245c2:	0003      	movs	r3, r0
 80245c4:	7023      	strb	r3, [r4, #0]
      }
      break;
 80245c6:	e028      	b.n	802461a <Request_MessageReq+0x5f2>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 80245c8:	233f      	movs	r3, #63	; 0x3f
 80245ca:	18fc      	adds	r4, r7, r3
 80245cc:	230f      	movs	r3, #15
 80245ce:	18fb      	adds	r3, r7, r3
 80245d0:	781b      	ldrb	r3, [r3, #0]
 80245d2:	0018      	movs	r0, r3
 80245d4:	f7fb f92e 	bl	801f834 <USBPD_DPM_RequestSecurityRequest>
 80245d8:	0003      	movs	r3, r0
 80245da:	7023      	strb	r3, [r4, #0]
      break;
 80245dc:	e01e      	b.n	802461c <Request_MessageReq+0x5f4>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 80245de:	46c0      	nop			; (mov r8, r8)
 80245e0:	e01c      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 80245e2:	46c0      	nop			; (mov r8, r8)
 80245e4:	e01a      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 80245e6:	46c0      	nop			; (mov r8, r8)
 80245e8:	e018      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 80245ea:	46c0      	nop			; (mov r8, r8)
 80245ec:	e016      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 80245ee:	46c0      	nop			; (mov r8, r8)
 80245f0:	e014      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 80245f2:	46c0      	nop			; (mov r8, r8)
 80245f4:	e012      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 80245f6:	46c0      	nop			; (mov r8, r8)
 80245f8:	e010      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 80245fa:	46c0      	nop			; (mov r8, r8)
 80245fc:	e00e      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 80245fe:	46c0      	nop			; (mov r8, r8)
 8024600:	e00c      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 8024602:	46c0      	nop			; (mov r8, r8)
 8024604:	e00a      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 8024606:	46c0      	nop			; (mov r8, r8)
 8024608:	e008      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 802460a:	46c0      	nop			; (mov r8, r8)
 802460c:	e006      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 802460e:	46c0      	nop			; (mov r8, r8)
 8024610:	e004      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 8024612:	46c0      	nop			; (mov r8, r8)
 8024614:	e002      	b.n	802461c <Request_MessageReq+0x5f4>
        break;
 8024616:	46c0      	nop			; (mov r8, r8)
 8024618:	e000      	b.n	802461c <Request_MessageReq+0x5f4>
      break;
 802461a:	46c0      	nop			; (mov r8, r8)
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 802461c:	223f      	movs	r2, #63	; 0x3f
 802461e:	18bb      	adds	r3, r7, r2
 8024620:	781b      	ldrb	r3, [r3, #0]
 8024622:	2b00      	cmp	r3, #0
 8024624:	d031      	beq.n	802468a <Request_MessageReq+0x662>
  {
    switch (status)
 8024626:	18bb      	adds	r3, r7, r2
 8024628:	781b      	ldrb	r3, [r3, #0]
 802462a:	2b03      	cmp	r3, #3
 802462c:	d002      	beq.n	8024634 <Request_MessageReq+0x60c>
 802462e:	2b04      	cmp	r3, #4
 8024630:	d005      	beq.n	802463e <Request_MessageReq+0x616>
 8024632:	e009      	b.n	8024648 <Request_MessageReq+0x620>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8024634:	231f      	movs	r3, #31
 8024636:	18fb      	adds	r3, r7, r3
 8024638:	2206      	movs	r2, #6
 802463a:	701a      	strb	r2, [r3, #0]
        break;
 802463c:	e009      	b.n	8024652 <Request_MessageReq+0x62a>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 802463e:	231f      	movs	r3, #31
 8024640:	18fb      	adds	r3, r7, r3
 8024642:	2202      	movs	r2, #2
 8024644:	701a      	strb	r2, [r3, #0]
        break;
 8024646:	e004      	b.n	8024652 <Request_MessageReq+0x62a>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8024648:	231f      	movs	r3, #31
 802464a:	18fb      	adds	r3, r7, r3
 802464c:	2200      	movs	r2, #0
 802464e:	701a      	strb	r2, [r3, #0]
        break;
 8024650:	46c0      	nop			; (mov r8, r8)
    }
    TLV_deinit_encode(&send_tlv);
 8024652:	2420      	movs	r4, #32
 8024654:	193b      	adds	r3, r7, r4
 8024656:	0018      	movs	r0, r3
 8024658:	f7fe f856 	bl	8022708 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 802465c:	230f      	movs	r3, #15
 802465e:	18fb      	adds	r3, r7, r3
 8024660:	781b      	ldrb	r3, [r3, #0]
 8024662:	3301      	adds	r3, #1
 8024664:	015b      	lsls	r3, r3, #5
 8024666:	b25b      	sxtb	r3, r3
 8024668:	220b      	movs	r2, #11
 802466a:	4313      	orrs	r3, r2
 802466c:	b25b      	sxtb	r3, r3
 802466e:	b2d9      	uxtb	r1, r3
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	2280      	movs	r2, #128	; 0x80
 8024674:	0052      	lsls	r2, r2, #1
 8024676:	1938      	adds	r0, r7, r4
 8024678:	f7fd fe81 	bl	802237e <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 802467c:	231f      	movs	r3, #31
 802467e:	18f9      	adds	r1, r7, r3
 8024680:	193b      	adds	r3, r7, r4
 8024682:	2201      	movs	r2, #1
 8024684:	0018      	movs	r0, r3
 8024686:	f7fd ffab 	bl	80225e0 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 802468a:	2320      	movs	r3, #32
 802468c:	18fb      	adds	r3, r7, r3
 802468e:	0018      	movs	r0, r3
 8024690:	f7fe f83a 	bl	8022708 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 8024694:	232c      	movs	r3, #44	; 0x2c
 8024696:	18fb      	adds	r3, r7, r3
 8024698:	0018      	movs	r0, r3
 802469a:	f7fe f8cd 	bl	8022838 <TLV_deinit_decode>
}
 802469e:	46c0      	nop			; (mov r8, r8)
 80246a0:	46bd      	mov	sp, r7
 80246a2:	b010      	add	sp, #64	; 0x40
 80246a4:	bdb0      	pop	{r4, r5, r7, pc}
 80246a6:	46c0      	nop			; (mov r8, r8)

080246a8 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80246a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80246aa:	b0d5      	sub	sp, #340	; 0x154
 80246ac:	af00      	add	r7, sp, #0
 80246ae:	60b9      	str	r1, [r7, #8]
 80246b0:	607a      	str	r2, [r7, #4]
 80246b2:	4bcd      	ldr	r3, [pc, #820]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80246b4:	24a8      	movs	r4, #168	; 0xa8
 80246b6:	0064      	lsls	r4, r4, #1
 80246b8:	191b      	adds	r3, r3, r4
 80246ba:	19db      	adds	r3, r3, r7
 80246bc:	1c02      	adds	r2, r0, #0
 80246be:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 80246c0:	23a7      	movs	r3, #167	; 0xa7
 80246c2:	005b      	lsls	r3, r3, #1
 80246c4:	18fb      	adds	r3, r7, r3
 80246c6:	2200      	movs	r2, #0
 80246c8:	801a      	strh	r2, [r3, #0]
  uint8_t error = 0xFF;
 80246ca:	231a      	movs	r3, #26
 80246cc:	33ff      	adds	r3, #255	; 0xff
 80246ce:	18fb      	adds	r3, r7, r3
 80246d0:	22ff      	movs	r2, #255	; 0xff
 80246d2:	701a      	strb	r2, [r3, #0]
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 80246d4:	234e      	movs	r3, #78	; 0x4e
 80246d6:	33ff      	adds	r3, #255	; 0xff
 80246d8:	18fb      	adds	r3, r7, r3
 80246da:	2200      	movs	r2, #0
 80246dc:	701a      	strb	r2, [r3, #0]
  uint8_t tag;
  uint8_t flag_drp = 0;
 80246de:	23a6      	movs	r3, #166	; 0xa6
 80246e0:	005b      	lsls	r3, r3, #1
 80246e2:	18fb      	adds	r3, r7, r3
 80246e4:	2200      	movs	r2, #0
 80246e6:	701a      	strb	r2, [r3, #0]
  uint8_t tdrp = 0;
 80246e8:	234c      	movs	r3, #76	; 0x4c
 80246ea:	33ff      	adds	r3, #255	; 0xff
 80246ec:	18fb      	adds	r3, r7, r3
 80246ee:	2200      	movs	r2, #0
 80246f0:	701a      	strb	r2, [r3, #0]

  (void)TLV_init_decode(&process_tlv, instruction);
 80246f2:	68ba      	ldr	r2, [r7, #8]
 80246f4:	2390      	movs	r3, #144	; 0x90
 80246f6:	005b      	lsls	r3, r3, #1
 80246f8:	18fb      	adds	r3, r7, r3
 80246fa:	0011      	movs	r1, r2
 80246fc:	0018      	movs	r0, r3
 80246fe:	f7fe f815 	bl	802272c <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8024702:	4bb9      	ldr	r3, [pc, #740]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 8024704:	191b      	adds	r3, r3, r4
 8024706:	19db      	adds	r3, r3, r7
 8024708:	781b      	ldrb	r3, [r3, #0]
 802470a:	3301      	adds	r3, #1
 802470c:	015b      	lsls	r3, r3, #5
 802470e:	b25b      	sxtb	r3, r3
 8024710:	2207      	movs	r2, #7
 8024712:	4313      	orrs	r3, r2
 8024714:	b25b      	sxtb	r3, r3
 8024716:	b2d9      	uxtb	r1, r3
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	2280      	movs	r2, #128	; 0x80
 802471c:	0052      	lsls	r2, r2, #1
 802471e:	2094      	movs	r0, #148	; 0x94
 8024720:	0040      	lsls	r0, r0, #1
 8024722:	1838      	adds	r0, r7, r0
 8024724:	f7fd fe2b 	bl	802237e <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8024728:	e2e5      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 802472a:	4bb0      	ldr	r3, [pc, #704]	; (80249ec <Send_DpmConfigSetCnf+0x344>)
 802472c:	22a8      	movs	r2, #168	; 0xa8
 802472e:	0052      	lsls	r2, r2, #1
 8024730:	189b      	adds	r3, r3, r2
 8024732:	19db      	adds	r3, r3, r7
 8024734:	781b      	ldrb	r3, [r3, #0]
 8024736:	2b1c      	cmp	r3, #28
 8024738:	d900      	bls.n	802473c <Send_DpmConfigSetCnf+0x94>
 802473a:	e2c3      	b.n	8024cc4 <Send_DpmConfigSetCnf+0x61c>
 802473c:	009a      	lsls	r2, r3, #2
 802473e:	4bac      	ldr	r3, [pc, #688]	; (80249f0 <Send_DpmConfigSetCnf+0x348>)
 8024740:	18d3      	adds	r3, r2, r3
 8024742:	681b      	ldr	r3, [r3, #0]
 8024744:	469f      	mov	pc, r3
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 8024746:	238e      	movs	r3, #142	; 0x8e
 8024748:	005b      	lsls	r3, r3, #1
 802474a:	18fb      	adds	r3, r7, r3
 802474c:	681b      	ldr	r3, [r3, #0]
 802474e:	7819      	ldrb	r1, [r3, #0]
 8024750:	4ba5      	ldr	r3, [pc, #660]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 8024752:	22a8      	movs	r2, #168	; 0xa8
 8024754:	0052      	lsls	r2, r2, #1
 8024756:	189b      	adds	r3, r3, r2
 8024758:	19db      	adds	r3, r3, r7
 802475a:	781a      	ldrb	r2, [r3, #0]
 802475c:	0008      	movs	r0, r1
 802475e:	49a5      	ldr	r1, [pc, #660]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 8024760:	0013      	movs	r3, r2
 8024762:	005b      	lsls	r3, r3, #1
 8024764:	189b      	adds	r3, r3, r2
 8024766:	009b      	lsls	r3, r3, #2
 8024768:	5058      	str	r0, [r3, r1]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 802476a:	e2c4      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 802476c:	238e      	movs	r3, #142	; 0x8e
 802476e:	005b      	lsls	r3, r3, #1
 8024770:	18fb      	adds	r3, r7, r3
 8024772:	681b      	ldr	r3, [r3, #0]
 8024774:	7819      	ldrb	r1, [r3, #0]
 8024776:	4b9c      	ldr	r3, [pc, #624]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 8024778:	22a8      	movs	r2, #168	; 0xa8
 802477a:	0052      	lsls	r2, r2, #1
 802477c:	189b      	adds	r3, r3, r2
 802477e:	19db      	adds	r3, r3, r7
 8024780:	781a      	ldrb	r2, [r3, #0]
 8024782:	2301      	movs	r3, #1
 8024784:	400b      	ands	r3, r1
 8024786:	b2d9      	uxtb	r1, r3
 8024788:	489a      	ldr	r0, [pc, #616]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 802478a:	2408      	movs	r4, #8
 802478c:	0013      	movs	r3, r2
 802478e:	005b      	lsls	r3, r3, #1
 8024790:	189b      	adds	r3, r3, r2
 8024792:	009b      	lsls	r3, r3, #2
 8024794:	18c3      	adds	r3, r0, r3
 8024796:	191b      	adds	r3, r3, r4
 8024798:	2201      	movs	r2, #1
 802479a:	400a      	ands	r2, r1
 802479c:	1890      	adds	r0, r2, r2
 802479e:	781a      	ldrb	r2, [r3, #0]
 80247a0:	2102      	movs	r1, #2
 80247a2:	438a      	bics	r2, r1
 80247a4:	1c11      	adds	r1, r2, #0
 80247a6:	1c02      	adds	r2, r0, #0
 80247a8:	430a      	orrs	r2, r1
 80247aa:	701a      	strb	r2, [r3, #0]
        break;
 80247ac:	e2a3      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 80247ae:	238e      	movs	r3, #142	; 0x8e
 80247b0:	005b      	lsls	r3, r3, #1
 80247b2:	18fb      	adds	r3, r7, r3
 80247b4:	681b      	ldr	r3, [r3, #0]
 80247b6:	7819      	ldrb	r1, [r3, #0]
 80247b8:	4b8b      	ldr	r3, [pc, #556]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80247ba:	22a8      	movs	r2, #168	; 0xa8
 80247bc:	0052      	lsls	r2, r2, #1
 80247be:	189b      	adds	r3, r3, r2
 80247c0:	19db      	adds	r3, r3, r7
 80247c2:	781a      	ldrb	r2, [r3, #0]
 80247c4:	2301      	movs	r3, #1
 80247c6:	400b      	ands	r3, r1
 80247c8:	b2d9      	uxtb	r1, r3
 80247ca:	4b8b      	ldr	r3, [pc, #556]	; (80249f8 <Send_DpmConfigSetCnf+0x350>)
 80247cc:	2074      	movs	r0, #116	; 0x74
 80247ce:	4342      	muls	r2, r0
 80247d0:	2001      	movs	r0, #1
 80247d2:	4001      	ands	r1, r0
 80247d4:	00cc      	lsls	r4, r1, #3
 80247d6:	5cd1      	ldrb	r1, [r2, r3]
 80247d8:	2008      	movs	r0, #8
 80247da:	4381      	bics	r1, r0
 80247dc:	1c08      	adds	r0, r1, #0
 80247de:	1c21      	adds	r1, r4, #0
 80247e0:	4301      	orrs	r1, r0
 80247e2:	54d1      	strb	r1, [r2, r3]
        break;
 80247e4:	e287      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 80247e6:	238e      	movs	r3, #142	; 0x8e
 80247e8:	005b      	lsls	r3, r3, #1
 80247ea:	18fb      	adds	r3, r7, r3
 80247ec:	681b      	ldr	r3, [r3, #0]
 80247ee:	7819      	ldrb	r1, [r3, #0]
 80247f0:	4b7d      	ldr	r3, [pc, #500]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80247f2:	22a8      	movs	r2, #168	; 0xa8
 80247f4:	0052      	lsls	r2, r2, #1
 80247f6:	189b      	adds	r3, r3, r2
 80247f8:	19db      	adds	r3, r3, r7
 80247fa:	781a      	ldrb	r2, [r3, #0]
 80247fc:	2301      	movs	r3, #1
 80247fe:	400b      	ands	r3, r1
 8024800:	b2d9      	uxtb	r1, r3
 8024802:	4b7d      	ldr	r3, [pc, #500]	; (80249f8 <Send_DpmConfigSetCnf+0x350>)
 8024804:	2074      	movs	r0, #116	; 0x74
 8024806:	4342      	muls	r2, r0
 8024808:	2001      	movs	r0, #1
 802480a:	4001      	ands	r1, r0
 802480c:	008c      	lsls	r4, r1, #2
 802480e:	5cd1      	ldrb	r1, [r2, r3]
 8024810:	2004      	movs	r0, #4
 8024812:	4381      	bics	r1, r0
 8024814:	1c08      	adds	r0, r1, #0
 8024816:	1c21      	adds	r1, r4, #0
 8024818:	4301      	orrs	r1, r0
 802481a:	54d1      	strb	r1, [r2, r3]
        break;
 802481c:	e26b      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 802481e:	238e      	movs	r3, #142	; 0x8e
 8024820:	005b      	lsls	r3, r3, #1
 8024822:	18fb      	adds	r3, r7, r3
 8024824:	681b      	ldr	r3, [r3, #0]
 8024826:	7819      	ldrb	r1, [r3, #0]
 8024828:	4b6f      	ldr	r3, [pc, #444]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 802482a:	22a8      	movs	r2, #168	; 0xa8
 802482c:	0052      	lsls	r2, r2, #1
 802482e:	189b      	adds	r3, r3, r2
 8024830:	19db      	adds	r3, r3, r7
 8024832:	781a      	ldrb	r2, [r3, #0]
 8024834:	2301      	movs	r3, #1
 8024836:	400b      	ands	r3, r1
 8024838:	b2d9      	uxtb	r1, r3
 802483a:	486e      	ldr	r0, [pc, #440]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 802483c:	0013      	movs	r3, r2
 802483e:	005b      	lsls	r3, r3, #1
 8024840:	189b      	adds	r3, r3, r2
 8024842:	009b      	lsls	r3, r3, #2
 8024844:	18c3      	adds	r3, r0, r3
 8024846:	2201      	movs	r2, #1
 8024848:	400a      	ands	r2, r1
 802484a:	0090      	lsls	r0, r2, #2
 802484c:	791a      	ldrb	r2, [r3, #4]
 802484e:	2104      	movs	r1, #4
 8024850:	438a      	bics	r2, r1
 8024852:	1c11      	adds	r1, r2, #0
 8024854:	1c02      	adds	r2, r0, #0
 8024856:	430a      	orrs	r2, r1
 8024858:	711a      	strb	r2, [r3, #4]
        break;
 802485a:	e24c      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 802485c:	238e      	movs	r3, #142	; 0x8e
 802485e:	005b      	lsls	r3, r3, #1
 8024860:	18fb      	adds	r3, r7, r3
 8024862:	681b      	ldr	r3, [r3, #0]
 8024864:	7819      	ldrb	r1, [r3, #0]
 8024866:	4b60      	ldr	r3, [pc, #384]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 8024868:	22a8      	movs	r2, #168	; 0xa8
 802486a:	0052      	lsls	r2, r2, #1
 802486c:	189b      	adds	r3, r3, r2
 802486e:	19db      	adds	r3, r3, r7
 8024870:	781a      	ldrb	r2, [r3, #0]
 8024872:	2301      	movs	r3, #1
 8024874:	400b      	ands	r3, r1
 8024876:	b2d9      	uxtb	r1, r3
 8024878:	485e      	ldr	r0, [pc, #376]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 802487a:	0013      	movs	r3, r2
 802487c:	005b      	lsls	r3, r3, #1
 802487e:	189b      	adds	r3, r3, r2
 8024880:	009b      	lsls	r3, r3, #2
 8024882:	18c3      	adds	r3, r0, r3
 8024884:	2201      	movs	r2, #1
 8024886:	400a      	ands	r2, r1
 8024888:	00d0      	lsls	r0, r2, #3
 802488a:	791a      	ldrb	r2, [r3, #4]
 802488c:	2108      	movs	r1, #8
 802488e:	438a      	bics	r2, r1
 8024890:	1c11      	adds	r1, r2, #0
 8024892:	1c02      	adds	r2, r0, #0
 8024894:	430a      	orrs	r2, r1
 8024896:	711a      	strb	r2, [r3, #4]
        break;
 8024898:	e22d      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 802489a:	238e      	movs	r3, #142	; 0x8e
 802489c:	005b      	lsls	r3, r3, #1
 802489e:	18fb      	adds	r3, r7, r3
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	7819      	ldrb	r1, [r3, #0]
 80248a4:	4b50      	ldr	r3, [pc, #320]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80248a6:	22a8      	movs	r2, #168	; 0xa8
 80248a8:	0052      	lsls	r2, r2, #1
 80248aa:	189b      	adds	r3, r3, r2
 80248ac:	19db      	adds	r3, r3, r7
 80248ae:	781a      	ldrb	r2, [r3, #0]
 80248b0:	2301      	movs	r3, #1
 80248b2:	400b      	ands	r3, r1
 80248b4:	b2d9      	uxtb	r1, r3
 80248b6:	484f      	ldr	r0, [pc, #316]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 80248b8:	0013      	movs	r3, r2
 80248ba:	005b      	lsls	r3, r3, #1
 80248bc:	189b      	adds	r3, r3, r2
 80248be:	009b      	lsls	r3, r3, #2
 80248c0:	18c3      	adds	r3, r0, r3
 80248c2:	2201      	movs	r2, #1
 80248c4:	400a      	ands	r2, r1
 80248c6:	0150      	lsls	r0, r2, #5
 80248c8:	795a      	ldrb	r2, [r3, #5]
 80248ca:	2120      	movs	r1, #32
 80248cc:	438a      	bics	r2, r1
 80248ce:	1c11      	adds	r1, r2, #0
 80248d0:	1c02      	adds	r2, r0, #0
 80248d2:	430a      	orrs	r2, r1
 80248d4:	715a      	strb	r2, [r3, #5]
        break;
 80248d6:	e20e      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 80248d8:	238e      	movs	r3, #142	; 0x8e
 80248da:	005b      	lsls	r3, r3, #1
 80248dc:	18fb      	adds	r3, r7, r3
 80248de:	681b      	ldr	r3, [r3, #0]
 80248e0:	7819      	ldrb	r1, [r3, #0]
 80248e2:	4b41      	ldr	r3, [pc, #260]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80248e4:	22a8      	movs	r2, #168	; 0xa8
 80248e6:	0052      	lsls	r2, r2, #1
 80248e8:	189b      	adds	r3, r3, r2
 80248ea:	19db      	adds	r3, r3, r7
 80248ec:	781a      	ldrb	r2, [r3, #0]
 80248ee:	2301      	movs	r3, #1
 80248f0:	400b      	ands	r3, r1
 80248f2:	b2d9      	uxtb	r1, r3
 80248f4:	483f      	ldr	r0, [pc, #252]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 80248f6:	0013      	movs	r3, r2
 80248f8:	005b      	lsls	r3, r3, #1
 80248fa:	189b      	adds	r3, r3, r2
 80248fc:	009b      	lsls	r3, r3, #2
 80248fe:	18c3      	adds	r3, r0, r3
 8024900:	01c8      	lsls	r0, r1, #7
 8024902:	791a      	ldrb	r2, [r3, #4]
 8024904:	217f      	movs	r1, #127	; 0x7f
 8024906:	400a      	ands	r2, r1
 8024908:	1c11      	adds	r1, r2, #0
 802490a:	1c02      	adds	r2, r0, #0
 802490c:	430a      	orrs	r2, r1
 802490e:	711a      	strb	r2, [r3, #4]
        break;
 8024910:	e1f1      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 8024912:	238e      	movs	r3, #142	; 0x8e
 8024914:	005b      	lsls	r3, r3, #1
 8024916:	18fb      	adds	r3, r7, r3
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	7819      	ldrb	r1, [r3, #0]
 802491c:	4b32      	ldr	r3, [pc, #200]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 802491e:	22a8      	movs	r2, #168	; 0xa8
 8024920:	0052      	lsls	r2, r2, #1
 8024922:	189b      	adds	r3, r3, r2
 8024924:	19db      	adds	r3, r3, r7
 8024926:	781a      	ldrb	r2, [r3, #0]
 8024928:	2301      	movs	r3, #1
 802492a:	400b      	ands	r3, r1
 802492c:	b2d9      	uxtb	r1, r3
 802492e:	4b32      	ldr	r3, [pc, #200]	; (80249f8 <Send_DpmConfigSetCnf+0x350>)
 8024930:	2074      	movs	r0, #116	; 0x74
 8024932:	4342      	muls	r2, r0
 8024934:	2001      	movs	r0, #1
 8024936:	4001      	ands	r1, r0
 8024938:	184c      	adds	r4, r1, r1
 802493a:	5cd1      	ldrb	r1, [r2, r3]
 802493c:	2002      	movs	r0, #2
 802493e:	4381      	bics	r1, r0
 8024940:	1c08      	adds	r0, r1, #0
 8024942:	1c21      	adds	r1, r4, #0
 8024944:	4301      	orrs	r1, r0
 8024946:	54d1      	strb	r1, [r2, r3]
        break;
 8024948:	e1d5      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 802494a:	238e      	movs	r3, #142	; 0x8e
 802494c:	005b      	lsls	r3, r3, #1
 802494e:	18fb      	adds	r3, r7, r3
 8024950:	681b      	ldr	r3, [r3, #0]
 8024952:	7819      	ldrb	r1, [r3, #0]
 8024954:	4b24      	ldr	r3, [pc, #144]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 8024956:	22a8      	movs	r2, #168	; 0xa8
 8024958:	0052      	lsls	r2, r2, #1
 802495a:	189b      	adds	r3, r3, r2
 802495c:	19db      	adds	r3, r3, r7
 802495e:	781a      	ldrb	r2, [r3, #0]
 8024960:	2301      	movs	r3, #1
 8024962:	400b      	ands	r3, r1
 8024964:	b2d9      	uxtb	r1, r3
 8024966:	4823      	ldr	r0, [pc, #140]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 8024968:	0013      	movs	r3, r2
 802496a:	005b      	lsls	r3, r3, #1
 802496c:	189b      	adds	r3, r3, r2
 802496e:	009b      	lsls	r3, r3, #2
 8024970:	18c3      	adds	r3, r0, r3
 8024972:	2201      	movs	r2, #1
 8024974:	400a      	ands	r2, r1
 8024976:	0190      	lsls	r0, r2, #6
 8024978:	791a      	ldrb	r2, [r3, #4]
 802497a:	2140      	movs	r1, #64	; 0x40
 802497c:	438a      	bics	r2, r1
 802497e:	1c11      	adds	r1, r2, #0
 8024980:	1c02      	adds	r2, r0, #0
 8024982:	430a      	orrs	r2, r1
 8024984:	711a      	strb	r2, [r3, #4]
        break;
 8024986:	e1b6      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 8024988:	228e      	movs	r2, #142	; 0x8e
 802498a:	0052      	lsls	r2, r2, #1
 802498c:	18bb      	adds	r3, r7, r2
 802498e:	681b      	ldr	r3, [r3, #0]
 8024990:	781b      	ldrb	r3, [r3, #0]
 8024992:	b299      	uxth	r1, r3
 8024994:	18bb      	adds	r3, r7, r2
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	3301      	adds	r3, #1
 802499a:	781b      	ldrb	r3, [r3, #0]
 802499c:	b29b      	uxth	r3, r3
 802499e:	021b      	lsls	r3, r3, #8
 80249a0:	b29b      	uxth	r3, r3
 80249a2:	4a11      	ldr	r2, [pc, #68]	; (80249e8 <Send_DpmConfigSetCnf+0x340>)
 80249a4:	20a8      	movs	r0, #168	; 0xa8
 80249a6:	0040      	lsls	r0, r0, #1
 80249a8:	1812      	adds	r2, r2, r0
 80249aa:	19d2      	adds	r2, r2, r7
 80249ac:	7812      	ldrb	r2, [r2, #0]
 80249ae:	18cb      	adds	r3, r1, r3
 80249b0:	b298      	uxth	r0, r3
 80249b2:	4910      	ldr	r1, [pc, #64]	; (80249f4 <Send_DpmConfigSetCnf+0x34c>)
 80249b4:	0013      	movs	r3, r2
 80249b6:	005b      	lsls	r3, r3, #1
 80249b8:	189b      	adds	r3, r3, r2
 80249ba:	009b      	lsls	r3, r3, #2
 80249bc:	18cb      	adds	r3, r1, r3
 80249be:	3308      	adds	r3, #8
 80249c0:	1c02      	adds	r2, r0, #0
 80249c2:	801a      	strh	r2, [r3, #0]
        break;
 80249c4:	e197      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSNK, 0, sizeof(PORT0_PDO_ListSNK));
 80249c6:	4b0d      	ldr	r3, [pc, #52]	; (80249fc <Send_DpmConfigSetCnf+0x354>)
 80249c8:	221c      	movs	r2, #28
 80249ca:	2100      	movs	r1, #0
 80249cc:	0018      	movs	r0, r3
 80249ce:	f003 f847 	bl	8027a60 <memset>
          index_pdo = 0;
 80249d2:	2300      	movs	r3, #0
 80249d4:	22a2      	movs	r2, #162	; 0xa2
 80249d6:	0052      	lsls	r2, r2, #1
 80249d8:	18ba      	adds	r2, r7, r2
 80249da:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80249dc:	2300      	movs	r3, #0
 80249de:	22a0      	movs	r2, #160	; 0xa0
 80249e0:	0052      	lsls	r2, r2, #1
 80249e2:	18ba      	adds	r2, r7, r2
 80249e4:	6013      	str	r3, [r2, #0]
 80249e6:	e048      	b.n	8024a7a <Send_DpmConfigSetCnf+0x3d2>
 80249e8:	fffffebf 	.word	0xfffffebf
 80249ec:	fffffec7 	.word	0xfffffec7
 80249f0:	0802b488 	.word	0x0802b488
 80249f4:	200001b4 	.word	0x200001b4
 80249f8:	200001c8 	.word	0x200001c8
 80249fc:	20000240 	.word	0x20000240
          {
            pdo = USBPD_LE32(&value[index_gui]);
 8024a00:	248e      	movs	r4, #142	; 0x8e
 8024a02:	0064      	lsls	r4, r4, #1
 8024a04:	193b      	adds	r3, r7, r4
 8024a06:	681a      	ldr	r2, [r3, #0]
 8024a08:	20a0      	movs	r0, #160	; 0xa0
 8024a0a:	0040      	lsls	r0, r0, #1
 8024a0c:	183b      	adds	r3, r7, r0
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	18d3      	adds	r3, r2, r3
 8024a12:	781b      	ldrb	r3, [r3, #0]
 8024a14:	0019      	movs	r1, r3
 8024a16:	193b      	adds	r3, r7, r4
 8024a18:	681a      	ldr	r2, [r3, #0]
 8024a1a:	183b      	adds	r3, r7, r0
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	3301      	adds	r3, #1
 8024a20:	18d3      	adds	r3, r2, r3
 8024a22:	781b      	ldrb	r3, [r3, #0]
 8024a24:	021b      	lsls	r3, r3, #8
 8024a26:	18ca      	adds	r2, r1, r3
 8024a28:	193b      	adds	r3, r7, r4
 8024a2a:	6819      	ldr	r1, [r3, #0]
 8024a2c:	183b      	adds	r3, r7, r0
 8024a2e:	681b      	ldr	r3, [r3, #0]
 8024a30:	3302      	adds	r3, #2
 8024a32:	18cb      	adds	r3, r1, r3
 8024a34:	781b      	ldrb	r3, [r3, #0]
 8024a36:	041b      	lsls	r3, r3, #16
 8024a38:	18d2      	adds	r2, r2, r3
 8024a3a:	193b      	adds	r3, r7, r4
 8024a3c:	6819      	ldr	r1, [r3, #0]
 8024a3e:	183b      	adds	r3, r7, r0
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	3303      	adds	r3, #3
 8024a44:	18cb      	adds	r3, r1, r3
 8024a46:	781b      	ldrb	r3, [r3, #0]
 8024a48:	061b      	lsls	r3, r3, #24
 8024a4a:	18d3      	adds	r3, r2, r3
 8024a4c:	219a      	movs	r1, #154	; 0x9a
 8024a4e:	0049      	lsls	r1, r1, #1
 8024a50:	187a      	adds	r2, r7, r1
 8024a52:	6013      	str	r3, [r2, #0]
            PORT0_PDO_ListSNK[index_pdo] = pdo;
 8024a54:	4b94      	ldr	r3, [pc, #592]	; (8024ca8 <Send_DpmConfigSetCnf+0x600>)
 8024a56:	24a2      	movs	r4, #162	; 0xa2
 8024a58:	0064      	lsls	r4, r4, #1
 8024a5a:	193a      	adds	r2, r7, r4
 8024a5c:	6812      	ldr	r2, [r2, #0]
 8024a5e:	0092      	lsls	r2, r2, #2
 8024a60:	1879      	adds	r1, r7, r1
 8024a62:	6809      	ldr	r1, [r1, #0]
 8024a64:	50d1      	str	r1, [r2, r3]
            index_pdo++;
 8024a66:	193b      	adds	r3, r7, r4
 8024a68:	681b      	ldr	r3, [r3, #0]
 8024a6a:	3301      	adds	r3, #1
 8024a6c:	193a      	adds	r2, r7, r4
 8024a6e:	6013      	str	r3, [r2, #0]
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 8024a70:	183b      	adds	r3, r7, r0
 8024a72:	681b      	ldr	r3, [r3, #0]
 8024a74:	3304      	adds	r3, #4
 8024a76:	183a      	adds	r2, r7, r0
 8024a78:	6013      	str	r3, [r2, #0]
 8024a7a:	218d      	movs	r1, #141	; 0x8d
 8024a7c:	0049      	lsls	r1, r1, #1
 8024a7e:	187b      	adds	r3, r7, r1
 8024a80:	881b      	ldrh	r3, [r3, #0]
 8024a82:	001a      	movs	r2, r3
 8024a84:	23a0      	movs	r3, #160	; 0xa0
 8024a86:	005b      	lsls	r3, r3, #1
 8024a88:	18fb      	adds	r3, r7, r3
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	4293      	cmp	r3, r2
 8024a8e:	d3b7      	bcc.n	8024a00 <Send_DpmConfigSetCnf+0x358>
          }
          USBPD_NbPDO[0] = (uint8_t)(size / 4U);
 8024a90:	187b      	adds	r3, r7, r1
 8024a92:	881b      	ldrh	r3, [r3, #0]
 8024a94:	089b      	lsrs	r3, r3, #2
 8024a96:	b29b      	uxth	r3, r3
 8024a98:	b2da      	uxtb	r2, r3
 8024a9a:	4b84      	ldr	r3, [pc, #528]	; (8024cac <Send_DpmConfigSetCnf+0x604>)
 8024a9c:	701a      	strb	r2, [r3, #0]
          UpdateSNKPowerPort0();
 8024a9e:	f000 fe2f 	bl	8025700 <UpdateSNKPowerPort0>
          }
          USBPD_NbPDO[2] = (uint8_t)(size / 4U);
          UpdateSNKPowerPort1();
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 8024aa2:	e128      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
#endif /* USBPD_PORT_COUNT==2 */
        break;
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 8024aa4:	238e      	movs	r3, #142	; 0x8e
 8024aa6:	005b      	lsls	r3, r3, #1
 8024aa8:	18fb      	adds	r3, r7, r3
 8024aaa:	681a      	ldr	r2, [r3, #0]
 8024aac:	214c      	movs	r1, #76	; 0x4c
 8024aae:	31ff      	adds	r1, #255	; 0xff
 8024ab0:	187b      	adds	r3, r7, r1
 8024ab2:	7812      	ldrb	r2, [r2, #0]
 8024ab4:	701a      	strb	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 8024ab6:	4b7e      	ldr	r3, [pc, #504]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024ab8:	22a8      	movs	r2, #168	; 0xa8
 8024aba:	0052      	lsls	r2, r2, #1
 8024abc:	189b      	adds	r3, r3, r2
 8024abe:	19db      	adds	r3, r3, r7
 8024ac0:	781b      	ldrb	r3, [r3, #0]
 8024ac2:	187a      	adds	r2, r7, r1
 8024ac4:	7812      	ldrb	r2, [r2, #0]
 8024ac6:	217f      	movs	r1, #127	; 0x7f
 8024ac8:	400a      	ands	r2, r1
 8024aca:	b2d4      	uxtb	r4, r2
 8024acc:	4a79      	ldr	r2, [pc, #484]	; (8024cb4 <Send_DpmConfigSetCnf+0x60c>)
 8024ace:	2168      	movs	r1, #104	; 0x68
 8024ad0:	2074      	movs	r0, #116	; 0x74
 8024ad2:	4343      	muls	r3, r0
 8024ad4:	18d3      	adds	r3, r2, r3
 8024ad6:	185b      	adds	r3, r3, r1
 8024ad8:	1c22      	adds	r2, r4, #0
 8024ada:	1890      	adds	r0, r2, r2
 8024adc:	791a      	ldrb	r2, [r3, #4]
 8024ade:	2101      	movs	r1, #1
 8024ae0:	400a      	ands	r2, r1
 8024ae2:	1c11      	adds	r1, r2, #0
 8024ae4:	1c02      	adds	r2, r0, #0
 8024ae6:	430a      	orrs	r2, r1
 8024ae8:	711a      	strb	r2, [r3, #4]
        flag_drp = 1;
 8024aea:	23a6      	movs	r3, #166	; 0xa6
 8024aec:	005b      	lsls	r3, r3, #1
 8024aee:	18fb      	adds	r3, r7, r3
 8024af0:	2201      	movs	r2, #1
 8024af2:	701a      	strb	r2, [r3, #0]
        break;
 8024af4:	e0ff      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 8024af6:	238e      	movs	r3, #142	; 0x8e
 8024af8:	005b      	lsls	r3, r3, #1
 8024afa:	18fb      	adds	r3, r7, r3
 8024afc:	681b      	ldr	r3, [r3, #0]
 8024afe:	781a      	ldrb	r2, [r3, #0]
 8024b00:	21a7      	movs	r1, #167	; 0xa7
 8024b02:	0049      	lsls	r1, r1, #1
 8024b04:	187b      	adds	r3, r7, r1
 8024b06:	801a      	strh	r2, [r3, #0]
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 8024b08:	4b69      	ldr	r3, [pc, #420]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024b0a:	22a8      	movs	r2, #168	; 0xa8
 8024b0c:	0052      	lsls	r2, r2, #1
 8024b0e:	189b      	adds	r3, r3, r2
 8024b10:	19db      	adds	r3, r3, r7
 8024b12:	781b      	ldrb	r3, [r3, #0]
 8024b14:	187a      	adds	r2, r7, r1
 8024b16:	8812      	ldrh	r2, [r2, #0]
 8024b18:	1c11      	adds	r1, r2, #0
 8024b1a:	227f      	movs	r2, #127	; 0x7f
 8024b1c:	400a      	ands	r2, r1
 8024b1e:	b2d2      	uxtb	r2, r2
 8024b20:	4964      	ldr	r1, [pc, #400]	; (8024cb4 <Send_DpmConfigSetCnf+0x60c>)
 8024b22:	2068      	movs	r0, #104	; 0x68
 8024b24:	2474      	movs	r4, #116	; 0x74
 8024b26:	4363      	muls	r3, r4
 8024b28:	18cb      	adds	r3, r1, r3
 8024b2a:	181b      	adds	r3, r3, r0
 8024b2c:	217f      	movs	r1, #127	; 0x7f
 8024b2e:	400a      	ands	r2, r1
 8024b30:	0010      	movs	r0, r2
 8024b32:	795a      	ldrb	r2, [r3, #5]
 8024b34:	217f      	movs	r1, #127	; 0x7f
 8024b36:	438a      	bics	r2, r1
 8024b38:	1c11      	adds	r1, r2, #0
 8024b3a:	1c02      	adds	r2, r0, #0
 8024b3c:	430a      	orrs	r2, r1
 8024b3e:	715a      	strb	r2, [r3, #5]
        flag_drp = 1;
 8024b40:	23a6      	movs	r3, #166	; 0xa6
 8024b42:	005b      	lsls	r3, r3, #1
 8024b44:	18fb      	adds	r3, r7, r3
 8024b46:	2201      	movs	r2, #1
 8024b48:	701a      	strb	r2, [r3, #0]
        break;
 8024b4a:	e0d4      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 8024b4c:	238e      	movs	r3, #142	; 0x8e
 8024b4e:	005b      	lsls	r3, r3, #1
 8024b50:	18fb      	adds	r3, r7, r3
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	7819      	ldrb	r1, [r3, #0]
 8024b56:	4b56      	ldr	r3, [pc, #344]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024b58:	22a8      	movs	r2, #168	; 0xa8
 8024b5a:	0052      	lsls	r2, r2, #1
 8024b5c:	189b      	adds	r3, r3, r2
 8024b5e:	19db      	adds	r3, r3, r7
 8024b60:	781a      	ldrb	r2, [r3, #0]
 8024b62:	2301      	movs	r3, #1
 8024b64:	400b      	ands	r3, r1
 8024b66:	b2d9      	uxtb	r1, r3
 8024b68:	4853      	ldr	r0, [pc, #332]	; (8024cb8 <Send_DpmConfigSetCnf+0x610>)
 8024b6a:	0013      	movs	r3, r2
 8024b6c:	005b      	lsls	r3, r3, #1
 8024b6e:	189b      	adds	r3, r3, r2
 8024b70:	009b      	lsls	r3, r3, #2
 8024b72:	18c3      	adds	r3, r0, r3
 8024b74:	2201      	movs	r2, #1
 8024b76:	4011      	ands	r1, r2
 8024b78:	0008      	movs	r0, r1
 8024b7a:	795a      	ldrb	r2, [r3, #5]
 8024b7c:	2101      	movs	r1, #1
 8024b7e:	438a      	bics	r2, r1
 8024b80:	1c11      	adds	r1, r2, #0
 8024b82:	1c02      	adds	r2, r0, #0
 8024b84:	430a      	orrs	r2, r1
 8024b86:	715a      	strb	r2, [r3, #5]
        break;
 8024b88:	e0b5      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 8024b8a:	238e      	movs	r3, #142	; 0x8e
 8024b8c:	005b      	lsls	r3, r3, #1
 8024b8e:	18fb      	adds	r3, r7, r3
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	7819      	ldrb	r1, [r3, #0]
 8024b94:	4b46      	ldr	r3, [pc, #280]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024b96:	22a8      	movs	r2, #168	; 0xa8
 8024b98:	0052      	lsls	r2, r2, #1
 8024b9a:	189b      	adds	r3, r3, r2
 8024b9c:	19db      	adds	r3, r3, r7
 8024b9e:	781a      	ldrb	r2, [r3, #0]
 8024ba0:	2301      	movs	r3, #1
 8024ba2:	400b      	ands	r3, r1
 8024ba4:	b2d9      	uxtb	r1, r3
 8024ba6:	4844      	ldr	r0, [pc, #272]	; (8024cb8 <Send_DpmConfigSetCnf+0x610>)
 8024ba8:	0013      	movs	r3, r2
 8024baa:	005b      	lsls	r3, r3, #1
 8024bac:	189b      	adds	r3, r3, r2
 8024bae:	009b      	lsls	r3, r3, #2
 8024bb0:	18c3      	adds	r3, r0, r3
 8024bb2:	2201      	movs	r2, #1
 8024bb4:	400a      	ands	r2, r1
 8024bb6:	1890      	adds	r0, r2, r2
 8024bb8:	795a      	ldrb	r2, [r3, #5]
 8024bba:	2102      	movs	r1, #2
 8024bbc:	438a      	bics	r2, r1
 8024bbe:	1c11      	adds	r1, r2, #0
 8024bc0:	1c02      	adds	r2, r0, #0
 8024bc2:	430a      	orrs	r2, r1
 8024bc4:	715a      	strb	r2, [r3, #5]
        break;
 8024bc6:	e096      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 8024bc8:	208e      	movs	r0, #142	; 0x8e
 8024bca:	0040      	lsls	r0, r0, #1
 8024bcc:	183b      	adds	r3, r7, r0
 8024bce:	681b      	ldr	r3, [r3, #0]
 8024bd0:	781b      	ldrb	r3, [r3, #0]
 8024bd2:	001a      	movs	r2, r3
 8024bd4:	183b      	adds	r3, r7, r0
 8024bd6:	681b      	ldr	r3, [r3, #0]
 8024bd8:	3301      	adds	r3, #1
 8024bda:	781b      	ldrb	r3, [r3, #0]
 8024bdc:	021b      	lsls	r3, r3, #8
 8024bde:	18d2      	adds	r2, r2, r3
 8024be0:	183b      	adds	r3, r7, r0
 8024be2:	681b      	ldr	r3, [r3, #0]
 8024be4:	3302      	adds	r3, #2
 8024be6:	781b      	ldrb	r3, [r3, #0]
 8024be8:	041b      	lsls	r3, r3, #16
 8024bea:	18d1      	adds	r1, r2, r3
 8024bec:	183b      	adds	r3, r7, r0
 8024bee:	681b      	ldr	r3, [r3, #0]
 8024bf0:	3303      	adds	r3, #3
 8024bf2:	781b      	ldrb	r3, [r3, #0]
 8024bf4:	061b      	lsls	r3, r3, #24
 8024bf6:	4a2e      	ldr	r2, [pc, #184]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024bf8:	20a8      	movs	r0, #168	; 0xa8
 8024bfa:	0040      	lsls	r0, r0, #1
 8024bfc:	1812      	adds	r2, r2, r0
 8024bfe:	19d2      	adds	r2, r2, r7
 8024c00:	7812      	ldrb	r2, [r2, #0]
 8024c02:	18c9      	adds	r1, r1, r3
 8024c04:	4b2d      	ldr	r3, [pc, #180]	; (8024cbc <Send_DpmConfigSetCnf+0x614>)
 8024c06:	00d2      	lsls	r2, r2, #3
 8024c08:	50d1      	str	r1, [r2, r3]
        break;
 8024c0a:	e074      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 8024c0c:	228e      	movs	r2, #142	; 0x8e
 8024c0e:	0052      	lsls	r2, r2, #1
 8024c10:	18bb      	adds	r3, r7, r2
 8024c12:	681b      	ldr	r3, [r3, #0]
 8024c14:	781b      	ldrb	r3, [r3, #0]
 8024c16:	b299      	uxth	r1, r3
 8024c18:	18bb      	adds	r3, r7, r2
 8024c1a:	681b      	ldr	r3, [r3, #0]
 8024c1c:	3301      	adds	r3, #1
 8024c1e:	781b      	ldrb	r3, [r3, #0]
 8024c20:	b29b      	uxth	r3, r3
 8024c22:	021b      	lsls	r3, r3, #8
 8024c24:	b29a      	uxth	r2, r3
 8024c26:	4b22      	ldr	r3, [pc, #136]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024c28:	20a8      	movs	r0, #168	; 0xa8
 8024c2a:	0040      	lsls	r0, r0, #1
 8024c2c:	181b      	adds	r3, r3, r0
 8024c2e:	19db      	adds	r3, r3, r7
 8024c30:	781b      	ldrb	r3, [r3, #0]
 8024c32:	188a      	adds	r2, r1, r2
 8024c34:	b291      	uxth	r1, r2
 8024c36:	4a21      	ldr	r2, [pc, #132]	; (8024cbc <Send_DpmConfigSetCnf+0x614>)
 8024c38:	00db      	lsls	r3, r3, #3
 8024c3a:	18d3      	adds	r3, r2, r3
 8024c3c:	3304      	adds	r3, #4
 8024c3e:	1c0a      	adds	r2, r1, #0
 8024c40:	801a      	strh	r2, [r3, #0]
        break;
 8024c42:	e058      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 8024c44:	228e      	movs	r2, #142	; 0x8e
 8024c46:	0052      	lsls	r2, r2, #1
 8024c48:	18bb      	adds	r3, r7, r2
 8024c4a:	681b      	ldr	r3, [r3, #0]
 8024c4c:	781b      	ldrb	r3, [r3, #0]
 8024c4e:	b299      	uxth	r1, r3
 8024c50:	18bb      	adds	r3, r7, r2
 8024c52:	681b      	ldr	r3, [r3, #0]
 8024c54:	3301      	adds	r3, #1
 8024c56:	781b      	ldrb	r3, [r3, #0]
 8024c58:	b29b      	uxth	r3, r3
 8024c5a:	021b      	lsls	r3, r3, #8
 8024c5c:	b29a      	uxth	r2, r3
 8024c5e:	4b14      	ldr	r3, [pc, #80]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024c60:	20a8      	movs	r0, #168	; 0xa8
 8024c62:	0040      	lsls	r0, r0, #1
 8024c64:	181b      	adds	r3, r3, r0
 8024c66:	19db      	adds	r3, r3, r7
 8024c68:	781b      	ldrb	r3, [r3, #0]
 8024c6a:	188a      	adds	r2, r1, r2
 8024c6c:	b291      	uxth	r1, r2
 8024c6e:	4a13      	ldr	r2, [pc, #76]	; (8024cbc <Send_DpmConfigSetCnf+0x614>)
 8024c70:	00db      	lsls	r3, r3, #3
 8024c72:	18d3      	adds	r3, r2, r3
 8024c74:	3306      	adds	r3, #6
 8024c76:	1c0a      	adds	r2, r1, #0
 8024c78:	801a      	strh	r2, [r3, #0]
        break;
 8024c7a:	e03c      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8024c7c:	238e      	movs	r3, #142	; 0x8e
 8024c7e:	005b      	lsls	r3, r3, #1
 8024c80:	18fb      	adds	r3, r7, r3
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	4a0a      	ldr	r2, [pc, #40]	; (8024cb0 <Send_DpmConfigSetCnf+0x608>)
 8024c86:	21a8      	movs	r1, #168	; 0xa8
 8024c88:	0049      	lsls	r1, r1, #1
 8024c8a:	1852      	adds	r2, r2, r1
 8024c8c:	19d2      	adds	r2, r2, r7
 8024c8e:	7812      	ldrb	r2, [r2, #0]
 8024c90:	7818      	ldrb	r0, [r3, #0]
 8024c92:	490b      	ldr	r1, [pc, #44]	; (8024cc0 <Send_DpmConfigSetCnf+0x618>)
 8024c94:	0013      	movs	r3, r2
 8024c96:	005b      	lsls	r3, r3, #1
 8024c98:	189b      	adds	r3, r3, r2
 8024c9a:	005b      	lsls	r3, r3, #1
 8024c9c:	18cb      	adds	r3, r1, r3
 8024c9e:	3304      	adds	r3, #4
 8024ca0:	1c02      	adds	r2, r0, #0
 8024ca2:	701a      	strb	r2, [r3, #0]
        break;
 8024ca4:	e027      	b.n	8024cf6 <Send_DpmConfigSetCnf+0x64e>
 8024ca6:	46c0      	nop			; (mov r8, r8)
 8024ca8:	20000240 	.word	0x20000240
 8024cac:	2000023c 	.word	0x2000023c
 8024cb0:	fffffebf 	.word	0xfffffebf
 8024cb4:	200001c8 	.word	0x200001c8
 8024cb8:	200001b4 	.word	0x200001b4
 8024cbc:	200001c0 	.word	0x200001c0
 8024cc0:	20004e40 	.word	0x20004e40
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 8024cc4:	231a      	movs	r3, #26
 8024cc6:	33ff      	adds	r3, #255	; 0xff
 8024cc8:	18fb      	adds	r3, r7, r3
 8024cca:	2200      	movs	r2, #0
 8024ccc:	701a      	strb	r2, [r3, #0]
        param_not_applicated[counter_param_not_applicated] = tag;
 8024cce:	204e      	movs	r0, #78	; 0x4e
 8024cd0:	30ff      	adds	r0, #255	; 0xff
 8024cd2:	183b      	adds	r3, r7, r0
 8024cd4:	781b      	ldrb	r3, [r3, #0]
 8024cd6:	4a90      	ldr	r2, [pc, #576]	; (8024f18 <Send_DpmConfigSetCnf+0x870>)
 8024cd8:	24a8      	movs	r4, #168	; 0xa8
 8024cda:	0064      	lsls	r4, r4, #1
 8024cdc:	1912      	adds	r2, r2, r4
 8024cde:	19d2      	adds	r2, r2, r7
 8024ce0:	7811      	ldrb	r1, [r2, #0]
 8024ce2:	4a8e      	ldr	r2, [pc, #568]	; (8024f1c <Send_DpmConfigSetCnf+0x874>)
 8024ce4:	1912      	adds	r2, r2, r4
 8024ce6:	19d2      	adds	r2, r2, r7
 8024ce8:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 8024cea:	183b      	adds	r3, r7, r0
 8024cec:	781a      	ldrb	r2, [r3, #0]
 8024cee:	183b      	adds	r3, r7, r0
 8024cf0:	3201      	adds	r2, #1
 8024cf2:	701a      	strb	r2, [r3, #0]
        break;
 8024cf4:	46c0      	nop			; (mov r8, r8)
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 8024cf6:	238e      	movs	r3, #142	; 0x8e
 8024cf8:	005b      	lsls	r3, r3, #1
 8024cfa:	18fb      	adds	r3, r7, r3
 8024cfc:	228d      	movs	r2, #141	; 0x8d
 8024cfe:	0052      	lsls	r2, r2, #1
 8024d00:	18ba      	adds	r2, r7, r2
 8024d02:	2117      	movs	r1, #23
 8024d04:	1879      	adds	r1, r7, r1
 8024d06:	2090      	movs	r0, #144	; 0x90
 8024d08:	0040      	lsls	r0, r0, #1
 8024d0a:	1838      	adds	r0, r7, r0
 8024d0c:	f7fd fd3a 	bl	8022784 <TLV_get>
 8024d10:	0003      	movs	r3, r0
 8024d12:	2bff      	cmp	r3, #255	; 0xff
 8024d14:	d000      	beq.n	8024d18 <Send_DpmConfigSetCnf+0x670>
 8024d16:	e508      	b.n	802472a <Send_DpmConfigSetCnf+0x82>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 8024d18:	23a6      	movs	r3, #166	; 0xa6
 8024d1a:	005b      	lsls	r3, r3, #1
 8024d1c:	18fb      	adds	r3, r7, r3
 8024d1e:	781b      	ldrb	r3, [r3, #0]
 8024d20:	2b01      	cmp	r3, #1
 8024d22:	d000      	beq.n	8024d26 <Send_DpmConfigSetCnf+0x67e>
 8024d24:	e0a2      	b.n	8024e6c <Send_DpmConfigSetCnf+0x7c4>
  {
    uint16_t calcul;
    if (0U == tdrp)
 8024d26:	244c      	movs	r4, #76	; 0x4c
 8024d28:	34ff      	adds	r4, #255	; 0xff
 8024d2a:	193b      	adds	r3, r7, r4
 8024d2c:	781b      	ldrb	r3, [r3, #0]
 8024d2e:	2b00      	cmp	r3, #0
 8024d30:	d11c      	bne.n	8024d6c <Send_DpmConfigSetCnf+0x6c4>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 8024d32:	4b7b      	ldr	r3, [pc, #492]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024d34:	20a8      	movs	r0, #168	; 0xa8
 8024d36:	0040      	lsls	r0, r0, #1
 8024d38:	181b      	adds	r3, r3, r0
 8024d3a:	19db      	adds	r3, r3, r7
 8024d3c:	781a      	ldrb	r2, [r3, #0]
 8024d3e:	4979      	ldr	r1, [pc, #484]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024d40:	0013      	movs	r3, r2
 8024d42:	005b      	lsls	r3, r3, #1
 8024d44:	189b      	adds	r3, r3, r2
 8024d46:	009b      	lsls	r3, r3, #2
 8024d48:	18cb      	adds	r3, r1, r3
 8024d4a:	3306      	adds	r3, #6
 8024d4c:	7819      	ldrb	r1, [r3, #0]
 8024d4e:	4b74      	ldr	r3, [pc, #464]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024d50:	181b      	adds	r3, r3, r0
 8024d52:	19db      	adds	r3, r3, r7
 8024d54:	781a      	ldrb	r2, [r3, #0]
 8024d56:	4873      	ldr	r0, [pc, #460]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024d58:	0013      	movs	r3, r2
 8024d5a:	005b      	lsls	r3, r3, #1
 8024d5c:	189b      	adds	r3, r3, r2
 8024d5e:	009b      	lsls	r3, r3, #2
 8024d60:	18c3      	adds	r3, r0, r3
 8024d62:	3307      	adds	r3, #7
 8024d64:	781a      	ldrb	r2, [r3, #0]
 8024d66:	193b      	adds	r3, r7, r4
 8024d68:	188a      	adds	r2, r1, r2
 8024d6a:	701a      	strb	r2, [r3, #0]
    }
    if (0U == dcdrp)
 8024d6c:	26a7      	movs	r6, #167	; 0xa7
 8024d6e:	0076      	lsls	r6, r6, #1
 8024d70:	19bb      	adds	r3, r7, r6
 8024d72:	881b      	ldrh	r3, [r3, #0]
 8024d74:	2b00      	cmp	r3, #0
 8024d76:	d133      	bne.n	8024de0 <Send_DpmConfigSetCnf+0x738>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 8024d78:	4b69      	ldr	r3, [pc, #420]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024d7a:	24a8      	movs	r4, #168	; 0xa8
 8024d7c:	0064      	lsls	r4, r4, #1
 8024d7e:	191b      	adds	r3, r3, r4
 8024d80:	19db      	adds	r3, r3, r7
 8024d82:	781a      	ldrb	r2, [r3, #0]
 8024d84:	4967      	ldr	r1, [pc, #412]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024d86:	0013      	movs	r3, r2
 8024d88:	005b      	lsls	r3, r3, #1
 8024d8a:	189b      	adds	r3, r3, r2
 8024d8c:	009b      	lsls	r3, r3, #2
 8024d8e:	18cb      	adds	r3, r1, r3
 8024d90:	3307      	adds	r3, #7
 8024d92:	781b      	ldrb	r3, [r3, #0]
 8024d94:	001a      	movs	r2, r3
 8024d96:	2364      	movs	r3, #100	; 0x64
 8024d98:	4353      	muls	r3, r2
 8024d9a:	0018      	movs	r0, r3
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8024d9c:	4b60      	ldr	r3, [pc, #384]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024d9e:	0025      	movs	r5, r4
 8024da0:	191b      	adds	r3, r3, r4
 8024da2:	19db      	adds	r3, r3, r7
 8024da4:	781a      	ldrb	r2, [r3, #0]
 8024da6:	495f      	ldr	r1, [pc, #380]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024da8:	0013      	movs	r3, r2
 8024daa:	005b      	lsls	r3, r3, #1
 8024dac:	189b      	adds	r3, r3, r2
 8024dae:	009b      	lsls	r3, r3, #2
 8024db0:	18cb      	adds	r3, r1, r3
 8024db2:	3306      	adds	r3, #6
 8024db4:	781b      	ldrb	r3, [r3, #0]
 8024db6:	001c      	movs	r4, r3
 8024db8:	4b59      	ldr	r3, [pc, #356]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024dba:	195b      	adds	r3, r3, r5
 8024dbc:	19db      	adds	r3, r3, r7
 8024dbe:	781a      	ldrb	r2, [r3, #0]
 8024dc0:	4958      	ldr	r1, [pc, #352]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024dc2:	0013      	movs	r3, r2
 8024dc4:	005b      	lsls	r3, r3, #1
 8024dc6:	189b      	adds	r3, r3, r2
 8024dc8:	009b      	lsls	r3, r3, #2
 8024dca:	18cb      	adds	r3, r1, r3
 8024dcc:	3307      	adds	r3, #7
 8024dce:	781b      	ldrb	r3, [r3, #0]
 8024dd0:	18e3      	adds	r3, r4, r3
 8024dd2:	0019      	movs	r1, r3
 8024dd4:	f7e1 fa20 	bl	8006218 <__udivsi3>
 8024dd8:	0003      	movs	r3, r0
 8024dda:	001a      	movs	r2, r3
      dcdrp = (uint16_t)
 8024ddc:	19bb      	adds	r3, r7, r6
 8024dde:	801a      	strh	r2, [r3, #0]
    }
    calcul = (tdrp * dcdrp) / 100U;
 8024de0:	254c      	movs	r5, #76	; 0x4c
 8024de2:	35ff      	adds	r5, #255	; 0xff
 8024de4:	197b      	adds	r3, r7, r5
 8024de6:	781b      	ldrb	r3, [r3, #0]
 8024de8:	26a7      	movs	r6, #167	; 0xa7
 8024dea:	0076      	lsls	r6, r6, #1
 8024dec:	19ba      	adds	r2, r7, r6
 8024dee:	8812      	ldrh	r2, [r2, #0]
 8024df0:	4353      	muls	r3, r2
 8024df2:	2164      	movs	r1, #100	; 0x64
 8024df4:	0018      	movs	r0, r3
 8024df6:	f7e1 fa0f 	bl	8006218 <__udivsi3>
 8024dfa:	0003      	movs	r3, r0
 8024dfc:	001a      	movs	r2, r3
 8024dfe:	249d      	movs	r4, #157	; 0x9d
 8024e00:	0064      	lsls	r4, r4, #1
 8024e02:	193b      	adds	r3, r7, r4
 8024e04:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 8024e06:	4b46      	ldr	r3, [pc, #280]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024e08:	22a8      	movs	r2, #168	; 0xa8
 8024e0a:	0052      	lsls	r2, r2, #1
 8024e0c:	189b      	adds	r3, r3, r2
 8024e0e:	19db      	adds	r3, r3, r7
 8024e10:	781a      	ldrb	r2, [r3, #0]
 8024e12:	193b      	adds	r3, r7, r4
 8024e14:	881b      	ldrh	r3, [r3, #0]
 8024e16:	b2d8      	uxtb	r0, r3
 8024e18:	4942      	ldr	r1, [pc, #264]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024e1a:	0013      	movs	r3, r2
 8024e1c:	005b      	lsls	r3, r3, #1
 8024e1e:	189b      	adds	r3, r3, r2
 8024e20:	009b      	lsls	r3, r3, #2
 8024e22:	18cb      	adds	r3, r1, r3
 8024e24:	3307      	adds	r3, #7
 8024e26:	1c02      	adds	r2, r0, #0
 8024e28:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 8024e2a:	197b      	adds	r3, r7, r5
 8024e2c:	781b      	ldrb	r3, [r3, #0]
 8024e2e:	19ba      	adds	r2, r7, r6
 8024e30:	8812      	ldrh	r2, [r2, #0]
 8024e32:	2164      	movs	r1, #100	; 0x64
 8024e34:	1a8a      	subs	r2, r1, r2
 8024e36:	4353      	muls	r3, r2
 8024e38:	2164      	movs	r1, #100	; 0x64
 8024e3a:	0018      	movs	r0, r3
 8024e3c:	f7e1 f9ec 	bl	8006218 <__udivsi3>
 8024e40:	0003      	movs	r3, r0
 8024e42:	001a      	movs	r2, r3
 8024e44:	193b      	adds	r3, r7, r4
 8024e46:	801a      	strh	r2, [r3, #0]
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 8024e48:	4b35      	ldr	r3, [pc, #212]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024e4a:	22a8      	movs	r2, #168	; 0xa8
 8024e4c:	0052      	lsls	r2, r2, #1
 8024e4e:	189b      	adds	r3, r3, r2
 8024e50:	19db      	adds	r3, r3, r7
 8024e52:	781a      	ldrb	r2, [r3, #0]
 8024e54:	193b      	adds	r3, r7, r4
 8024e56:	881b      	ldrh	r3, [r3, #0]
 8024e58:	b2d8      	uxtb	r0, r3
 8024e5a:	4932      	ldr	r1, [pc, #200]	; (8024f24 <Send_DpmConfigSetCnf+0x87c>)
 8024e5c:	0013      	movs	r3, r2
 8024e5e:	005b      	lsls	r3, r3, #1
 8024e60:	189b      	adds	r3, r3, r2
 8024e62:	009b      	lsls	r3, r3, #2
 8024e64:	18cb      	adds	r3, r1, r3
 8024e66:	3306      	adds	r3, #6
 8024e68:	1c02      	adds	r2, r0, #0
 8024e6a:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 8024e6c:	241a      	movs	r4, #26
 8024e6e:	34ff      	adds	r4, #255	; 0xff
 8024e70:	193b      	adds	r3, r7, r4
 8024e72:	781b      	ldrb	r3, [r3, #0]
 8024e74:	2bff      	cmp	r3, #255	; 0xff
 8024e76:	d04b      	beq.n	8024f10 <Send_DpmConfigSetCnf+0x868>
  {
    TLV_deinit_encode(&send_tlv);
 8024e78:	2594      	movs	r5, #148	; 0x94
 8024e7a:	006d      	lsls	r5, r5, #1
 8024e7c:	197b      	adds	r3, r7, r5
 8024e7e:	0018      	movs	r0, r3
 8024e80:	f7fd fc42 	bl	8022708 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 8024e84:	4b26      	ldr	r3, [pc, #152]	; (8024f20 <Send_DpmConfigSetCnf+0x878>)
 8024e86:	22a8      	movs	r2, #168	; 0xa8
 8024e88:	0052      	lsls	r2, r2, #1
 8024e8a:	189b      	adds	r3, r3, r2
 8024e8c:	19db      	adds	r3, r3, r7
 8024e8e:	781b      	ldrb	r3, [r3, #0]
 8024e90:	3301      	adds	r3, #1
 8024e92:	015b      	lsls	r3, r3, #5
 8024e94:	b25b      	sxtb	r3, r3
 8024e96:	2208      	movs	r2, #8
 8024e98:	4313      	orrs	r3, r2
 8024e9a:	b25b      	sxtb	r3, r3
 8024e9c:	b2d9      	uxtb	r1, r3
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	2280      	movs	r2, #128	; 0x80
 8024ea2:	0052      	lsls	r2, r2, #1
 8024ea4:	1978      	adds	r0, r7, r5
 8024ea6:	f7fd fa6a 	bl	802237e <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 8024eaa:	1939      	adds	r1, r7, r4
 8024eac:	197b      	adds	r3, r7, r5
 8024eae:	2201      	movs	r2, #1
 8024eb0:	0018      	movs	r0, r3
 8024eb2:	f7fd fb95 	bl	80225e0 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 8024eb6:	193b      	adds	r3, r7, r4
 8024eb8:	781b      	ldrb	r3, [r3, #0]
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	d022      	beq.n	8024f04 <Send_DpmConfigSetCnf+0x85c>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 8024ebe:	2300      	movs	r3, #0
 8024ec0:	229e      	movs	r2, #158	; 0x9e
 8024ec2:	0052      	lsls	r2, r2, #1
 8024ec4:	18ba      	adds	r2, r7, r2
 8024ec6:	6013      	str	r3, [r2, #0]
 8024ec8:	e012      	b.n	8024ef0 <Send_DpmConfigSetCnf+0x848>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 8024eca:	2318      	movs	r3, #24
 8024ecc:	18fa      	adds	r2, r7, r3
 8024ece:	249e      	movs	r4, #158	; 0x9e
 8024ed0:	0064      	lsls	r4, r4, #1
 8024ed2:	193b      	adds	r3, r7, r4
 8024ed4:	681b      	ldr	r3, [r3, #0]
 8024ed6:	18d1      	adds	r1, r2, r3
 8024ed8:	2394      	movs	r3, #148	; 0x94
 8024eda:	005b      	lsls	r3, r3, #1
 8024edc:	18fb      	adds	r3, r7, r3
 8024ede:	2201      	movs	r2, #1
 8024ee0:	0018      	movs	r0, r3
 8024ee2:	f7fd fb7d 	bl	80225e0 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 8024ee6:	193b      	adds	r3, r7, r4
 8024ee8:	681b      	ldr	r3, [r3, #0]
 8024eea:	3301      	adds	r3, #1
 8024eec:	193a      	adds	r2, r7, r4
 8024eee:	6013      	str	r3, [r2, #0]
 8024ef0:	234e      	movs	r3, #78	; 0x4e
 8024ef2:	33ff      	adds	r3, #255	; 0xff
 8024ef4:	18fb      	adds	r3, r7, r3
 8024ef6:	781b      	ldrb	r3, [r3, #0]
 8024ef8:	229e      	movs	r2, #158	; 0x9e
 8024efa:	0052      	lsls	r2, r2, #1
 8024efc:	18ba      	adds	r2, r7, r2
 8024efe:	6812      	ldr	r2, [r2, #0]
 8024f00:	429a      	cmp	r2, r3
 8024f02:	d3e2      	bcc.n	8024eca <Send_DpmConfigSetCnf+0x822>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8024f04:	2394      	movs	r3, #148	; 0x94
 8024f06:	005b      	lsls	r3, r3, #1
 8024f08:	18fb      	adds	r3, r7, r3
 8024f0a:	0018      	movs	r0, r3
 8024f0c:	f7fd fbfc 	bl	8022708 <TLV_deinit_encode>
  }
}
 8024f10:	46c0      	nop			; (mov r8, r8)
 8024f12:	46bd      	mov	sp, r7
 8024f14:	b055      	add	sp, #340	; 0x154
 8024f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f18:	fffffec7 	.word	0xfffffec7
 8024f1c:	fffffec8 	.word	0xfffffec8
 8024f20:	fffffebf 	.word	0xfffffebf
 8024f24:	200001b4 	.word	0x200001b4

08024f28 <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8024f28:	b580      	push	{r7, lr}
 8024f2a:	b092      	sub	sp, #72	; 0x48
 8024f2c:	af00      	add	r7, sp, #0
 8024f2e:	60b9      	str	r1, [r7, #8]
 8024f30:	607a      	str	r2, [r7, #4]
 8024f32:	210f      	movs	r1, #15
 8024f34:	187b      	adds	r3, r7, r1
 8024f36:	1c02      	adds	r2, r0, #0
 8024f38:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8024f3a:	187b      	adds	r3, r7, r1
 8024f3c:	781b      	ldrb	r3, [r3, #0]
 8024f3e:	3301      	adds	r3, #1
 8024f40:	015b      	lsls	r3, r3, #5
 8024f42:	b25b      	sxtb	r3, r3
 8024f44:	2205      	movs	r2, #5
 8024f46:	4313      	orrs	r3, r2
 8024f48:	b25b      	sxtb	r3, r3
 8024f4a:	b2d9      	uxtb	r1, r3
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	2280      	movs	r2, #128	; 0x80
 8024f50:	0052      	lsls	r2, r2, #1
 8024f52:	2030      	movs	r0, #48	; 0x30
 8024f54:	1838      	adds	r0, r7, r0
 8024f56:	f7fd fa12 	bl	802237e <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 8024f5a:	68bb      	ldr	r3, [r7, #8]
 8024f5c:	0018      	movs	r0, r3
 8024f5e:	f7fd fc79 	bl	8022854 <TLV_get_string_length>
 8024f62:	0003      	movs	r3, r0
 8024f64:	001a      	movs	r2, r3
 8024f66:	2344      	movs	r3, #68	; 0x44
 8024f68:	18fb      	adds	r3, r7, r3
 8024f6a:	3a03      	subs	r2, #3
 8024f6c:	801a      	strh	r2, [r3, #0]
  uint8_t index = 0;
 8024f6e:	2347      	movs	r3, #71	; 0x47
 8024f70:	18fb      	adds	r3, r7, r3
 8024f72:	2200      	movs	r2, #0
 8024f74:	701a      	strb	r2, [r3, #0]

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditional breaks) */
    if (0U == length)
 8024f76:	2344      	movs	r3, #68	; 0x44
 8024f78:	18fb      	adds	r3, r7, r3
 8024f7a:	881b      	ldrh	r3, [r3, #0]
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	d104      	bne.n	8024f8a <Send_DpmConfigGetCnf+0x62>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8024f80:	2346      	movs	r3, #70	; 0x46
 8024f82:	18fb      	adds	r3, r7, r3
 8024f84:	22ff      	movs	r2, #255	; 0xff
 8024f86:	701a      	strb	r2, [r3, #0]
 8024f88:	e009      	b.n	8024f9e <Send_DpmConfigGetCnf+0x76>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 8024f8a:	2347      	movs	r3, #71	; 0x47
 8024f8c:	18fb      	adds	r3, r7, r3
 8024f8e:	781b      	ldrb	r3, [r3, #0]
 8024f90:	3307      	adds	r3, #7
 8024f92:	68ba      	ldr	r2, [r7, #8]
 8024f94:	18d2      	adds	r2, r2, r3
 8024f96:	2346      	movs	r3, #70	; 0x46
 8024f98:	18fb      	adds	r3, r7, r3
 8024f9a:	7812      	ldrb	r2, [r2, #0]
 8024f9c:	701a      	strb	r2, [r3, #0]

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 8024f9e:	2346      	movs	r3, #70	; 0x46
 8024fa0:	18fb      	adds	r3, r7, r3
 8024fa2:	781b      	ldrb	r3, [r3, #0]
 8024fa4:	2b1c      	cmp	r3, #28
 8024fa6:	dc0d      	bgt.n	8024fc4 <Send_DpmConfigGetCnf+0x9c>
 8024fa8:	2b00      	cmp	r3, #0
 8024faa:	da00      	bge.n	8024fae <Send_DpmConfigGetCnf+0x86>
 8024fac:	e243      	b.n	8025436 <Send_DpmConfigGetCnf+0x50e>
 8024fae:	2b1c      	cmp	r3, #28
 8024fb0:	d900      	bls.n	8024fb4 <Send_DpmConfigGetCnf+0x8c>
 8024fb2:	e240      	b.n	8025436 <Send_DpmConfigGetCnf+0x50e>
 8024fb4:	009a      	lsls	r2, r3, #2
 8024fb6:	4b02      	ldr	r3, [pc, #8]	; (8024fc0 <Send_DpmConfigGetCnf+0x98>)
 8024fb8:	18d3      	adds	r3, r2, r3
 8024fba:	681b      	ldr	r3, [r3, #0]
 8024fbc:	469f      	mov	pc, r3
 8024fbe:	46c0      	nop			; (mov r8, r8)
 8024fc0:	0802b4fc 	.word	0x0802b4fc
 8024fc4:	2bff      	cmp	r3, #255	; 0xff
 8024fc6:	d000      	beq.n	8024fca <Send_DpmConfigGetCnf+0xa2>
 8024fc8:	e235      	b.n	8025436 <Send_DpmConfigGetCnf+0x50e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 8024fca:	230f      	movs	r3, #15
 8024fcc:	18fb      	adds	r3, r7, r3
 8024fce:	781a      	ldrb	r2, [r3, #0]
 8024fd0:	49ed      	ldr	r1, [pc, #948]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 8024fd2:	0013      	movs	r3, r2
 8024fd4:	005b      	lsls	r3, r3, #1
 8024fd6:	189b      	adds	r3, r3, r2
 8024fd8:	009b      	lsls	r3, r3, #2
 8024fda:	585b      	ldr	r3, [r3, r1]
 8024fdc:	b2da      	uxtb	r2, r3
 8024fde:	212f      	movs	r1, #47	; 0x2f
 8024fe0:	187b      	adds	r3, r7, r1
 8024fe2:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 8024fe4:	187b      	adds	r3, r7, r1
 8024fe6:	2230      	movs	r2, #48	; 0x30
 8024fe8:	18b8      	adds	r0, r7, r2
 8024fea:	2201      	movs	r2, #1
 8024fec:	2100      	movs	r1, #0
 8024fee:	f7fd fa29 	bl	8022444 <TLV_add>
        if (0U != length)
 8024ff2:	2344      	movs	r3, #68	; 0x44
 8024ff4:	18fb      	adds	r3, r7, r3
 8024ff6:	881b      	ldrh	r3, [r3, #0]
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d000      	beq.n	8024ffe <Send_DpmConfigGetCnf+0xd6>
 8024ffc:	e22e      	b.n	802545c <Send_DpmConfigGetCnf+0x534>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 8024ffe:	230f      	movs	r3, #15
 8025000:	18fb      	adds	r3, r7, r3
 8025002:	781a      	ldrb	r2, [r3, #0]
 8025004:	49e0      	ldr	r1, [pc, #896]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 8025006:	2008      	movs	r0, #8
 8025008:	0013      	movs	r3, r2
 802500a:	005b      	lsls	r3, r3, #1
 802500c:	189b      	adds	r3, r3, r2
 802500e:	009b      	lsls	r3, r3, #2
 8025010:	18cb      	adds	r3, r1, r3
 8025012:	181b      	adds	r3, r3, r0
 8025014:	781b      	ldrb	r3, [r3, #0]
 8025016:	079b      	lsls	r3, r3, #30
 8025018:	0fdb      	lsrs	r3, r3, #31
 802501a:	b2db      	uxtb	r3, r3
 802501c:	001a      	movs	r2, r3
 802501e:	212e      	movs	r1, #46	; 0x2e
 8025020:	187b      	adds	r3, r7, r1
 8025022:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 8025024:	187b      	adds	r3, r7, r1
 8025026:	2230      	movs	r2, #48	; 0x30
 8025028:	18b8      	adds	r0, r7, r2
 802502a:	2201      	movs	r2, #1
 802502c:	2102      	movs	r1, #2
 802502e:	f7fd fa09 	bl	8022444 <TLV_add>
        if (0U != length)
 8025032:	2344      	movs	r3, #68	; 0x44
 8025034:	18fb      	adds	r3, r7, r3
 8025036:	881b      	ldrh	r3, [r3, #0]
 8025038:	2b00      	cmp	r3, #0
 802503a:	d000      	beq.n	802503e <Send_DpmConfigGetCnf+0x116>
 802503c:	e210      	b.n	8025460 <Send_DpmConfigGetCnf+0x538>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 802503e:	230f      	movs	r3, #15
 8025040:	18fb      	adds	r3, r7, r3
 8025042:	781a      	ldrb	r2, [r3, #0]
 8025044:	4bd1      	ldr	r3, [pc, #836]	; (802538c <Send_DpmConfigGetCnf+0x464>)
 8025046:	2174      	movs	r1, #116	; 0x74
 8025048:	434a      	muls	r2, r1
 802504a:	5cd3      	ldrb	r3, [r2, r3]
 802504c:	071b      	lsls	r3, r3, #28
 802504e:	0fdb      	lsrs	r3, r3, #31
 8025050:	b2db      	uxtb	r3, r3
 8025052:	001a      	movs	r2, r3
 8025054:	212d      	movs	r1, #45	; 0x2d
 8025056:	187b      	adds	r3, r7, r1
 8025058:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 802505a:	187b      	adds	r3, r7, r1
 802505c:	2230      	movs	r2, #48	; 0x30
 802505e:	18b8      	adds	r0, r7, r2
 8025060:	2201      	movs	r2, #1
 8025062:	2103      	movs	r1, #3
 8025064:	f7fd f9ee 	bl	8022444 <TLV_add>
        if (0U != length)
 8025068:	2344      	movs	r3, #68	; 0x44
 802506a:	18fb      	adds	r3, r7, r3
 802506c:	881b      	ldrh	r3, [r3, #0]
 802506e:	2b00      	cmp	r3, #0
 8025070:	d000      	beq.n	8025074 <Send_DpmConfigGetCnf+0x14c>
 8025072:	e1f7      	b.n	8025464 <Send_DpmConfigGetCnf+0x53c>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 8025074:	230f      	movs	r3, #15
 8025076:	18fb      	adds	r3, r7, r3
 8025078:	781a      	ldrb	r2, [r3, #0]
 802507a:	4bc4      	ldr	r3, [pc, #784]	; (802538c <Send_DpmConfigGetCnf+0x464>)
 802507c:	2174      	movs	r1, #116	; 0x74
 802507e:	434a      	muls	r2, r1
 8025080:	5cd3      	ldrb	r3, [r2, r3]
 8025082:	075b      	lsls	r3, r3, #29
 8025084:	0fdb      	lsrs	r3, r3, #31
 8025086:	b2db      	uxtb	r3, r3
 8025088:	001a      	movs	r2, r3
 802508a:	212c      	movs	r1, #44	; 0x2c
 802508c:	187b      	adds	r3, r7, r1
 802508e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8025090:	187b      	adds	r3, r7, r1
 8025092:	2230      	movs	r2, #48	; 0x30
 8025094:	18b8      	adds	r0, r7, r2
 8025096:	2201      	movs	r2, #1
 8025098:	211c      	movs	r1, #28
 802509a:	f7fd f9d3 	bl	8022444 <TLV_add>
        if (0U != length)
 802509e:	2344      	movs	r3, #68	; 0x44
 80250a0:	18fb      	adds	r3, r7, r3
 80250a2:	881b      	ldrh	r3, [r3, #0]
 80250a4:	2b00      	cmp	r3, #0
 80250a6:	d000      	beq.n	80250aa <Send_DpmConfigGetCnf+0x182>
 80250a8:	e1de      	b.n	8025468 <Send_DpmConfigGetCnf+0x540>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 80250aa:	230f      	movs	r3, #15
 80250ac:	18fb      	adds	r3, r7, r3
 80250ae:	781a      	ldrb	r2, [r3, #0]
 80250b0:	49b5      	ldr	r1, [pc, #724]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 80250b2:	0013      	movs	r3, r2
 80250b4:	005b      	lsls	r3, r3, #1
 80250b6:	189b      	adds	r3, r3, r2
 80250b8:	009b      	lsls	r3, r3, #2
 80250ba:	18cb      	adds	r3, r1, r3
 80250bc:	791b      	ldrb	r3, [r3, #4]
 80250be:	075b      	lsls	r3, r3, #29
 80250c0:	0fdb      	lsrs	r3, r3, #31
 80250c2:	b2db      	uxtb	r3, r3
 80250c4:	001a      	movs	r2, r3
 80250c6:	212b      	movs	r1, #43	; 0x2b
 80250c8:	187b      	adds	r3, r7, r1
 80250ca:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 80250cc:	187b      	adds	r3, r7, r1
 80250ce:	2230      	movs	r2, #48	; 0x30
 80250d0:	18b8      	adds	r0, r7, r2
 80250d2:	2201      	movs	r2, #1
 80250d4:	2104      	movs	r1, #4
 80250d6:	f7fd f9b5 	bl	8022444 <TLV_add>
        if (0U != length)
 80250da:	2344      	movs	r3, #68	; 0x44
 80250dc:	18fb      	adds	r3, r7, r3
 80250de:	881b      	ldrh	r3, [r3, #0]
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d000      	beq.n	80250e6 <Send_DpmConfigGetCnf+0x1be>
 80250e4:	e1c2      	b.n	802546c <Send_DpmConfigGetCnf+0x544>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 80250e6:	230f      	movs	r3, #15
 80250e8:	18fb      	adds	r3, r7, r3
 80250ea:	781a      	ldrb	r2, [r3, #0]
 80250ec:	49a6      	ldr	r1, [pc, #664]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 80250ee:	0013      	movs	r3, r2
 80250f0:	005b      	lsls	r3, r3, #1
 80250f2:	189b      	adds	r3, r3, r2
 80250f4:	009b      	lsls	r3, r3, #2
 80250f6:	18cb      	adds	r3, r1, r3
 80250f8:	791b      	ldrb	r3, [r3, #4]
 80250fa:	071b      	lsls	r3, r3, #28
 80250fc:	0fdb      	lsrs	r3, r3, #31
 80250fe:	b2db      	uxtb	r3, r3
 8025100:	001a      	movs	r2, r3
 8025102:	212a      	movs	r1, #42	; 0x2a
 8025104:	187b      	adds	r3, r7, r1
 8025106:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 8025108:	187b      	adds	r3, r7, r1
 802510a:	2230      	movs	r2, #48	; 0x30
 802510c:	18b8      	adds	r0, r7, r2
 802510e:	2201      	movs	r2, #1
 8025110:	2105      	movs	r1, #5
 8025112:	f7fd f997 	bl	8022444 <TLV_add>
        if (0U != length)
 8025116:	2344      	movs	r3, #68	; 0x44
 8025118:	18fb      	adds	r3, r7, r3
 802511a:	881b      	ldrh	r3, [r3, #0]
 802511c:	2b00      	cmp	r3, #0
 802511e:	d000      	beq.n	8025122 <Send_DpmConfigGetCnf+0x1fa>
 8025120:	e1a6      	b.n	8025470 <Send_DpmConfigGetCnf+0x548>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 8025122:	230f      	movs	r3, #15
 8025124:	18fb      	adds	r3, r7, r3
 8025126:	781a      	ldrb	r2, [r3, #0]
 8025128:	4997      	ldr	r1, [pc, #604]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 802512a:	0013      	movs	r3, r2
 802512c:	005b      	lsls	r3, r3, #1
 802512e:	189b      	adds	r3, r3, r2
 8025130:	009b      	lsls	r3, r3, #2
 8025132:	18cb      	adds	r3, r1, r3
 8025134:	795b      	ldrb	r3, [r3, #5]
 8025136:	069b      	lsls	r3, r3, #26
 8025138:	0fdb      	lsrs	r3, r3, #31
 802513a:	b2db      	uxtb	r3, r3
 802513c:	001a      	movs	r2, r3
 802513e:	2129      	movs	r1, #41	; 0x29
 8025140:	187b      	adds	r3, r7, r1
 8025142:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8025144:	187b      	adds	r3, r7, r1
 8025146:	2230      	movs	r2, #48	; 0x30
 8025148:	18b8      	adds	r0, r7, r2
 802514a:	2201      	movs	r2, #1
 802514c:	2106      	movs	r1, #6
 802514e:	f7fd f979 	bl	8022444 <TLV_add>
        if (0U != length)
 8025152:	2344      	movs	r3, #68	; 0x44
 8025154:	18fb      	adds	r3, r7, r3
 8025156:	881b      	ldrh	r3, [r3, #0]
 8025158:	2b00      	cmp	r3, #0
 802515a:	d000      	beq.n	802515e <Send_DpmConfigGetCnf+0x236>
 802515c:	e18a      	b.n	8025474 <Send_DpmConfigGetCnf+0x54c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 802515e:	230f      	movs	r3, #15
 8025160:	18fb      	adds	r3, r7, r3
 8025162:	781a      	ldrb	r2, [r3, #0]
 8025164:	4988      	ldr	r1, [pc, #544]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 8025166:	0013      	movs	r3, r2
 8025168:	005b      	lsls	r3, r3, #1
 802516a:	189b      	adds	r3, r3, r2
 802516c:	009b      	lsls	r3, r3, #2
 802516e:	18cb      	adds	r3, r1, r3
 8025170:	791b      	ldrb	r3, [r3, #4]
 8025172:	061b      	lsls	r3, r3, #24
 8025174:	0fdb      	lsrs	r3, r3, #31
 8025176:	b2db      	uxtb	r3, r3
 8025178:	001a      	movs	r2, r3
 802517a:	2128      	movs	r1, #40	; 0x28
 802517c:	187b      	adds	r3, r7, r1
 802517e:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8025180:	187b      	adds	r3, r7, r1
 8025182:	2230      	movs	r2, #48	; 0x30
 8025184:	18b8      	adds	r0, r7, r2
 8025186:	2201      	movs	r2, #1
 8025188:	2107      	movs	r1, #7
 802518a:	f7fd f95b 	bl	8022444 <TLV_add>
        if (0U != length)
 802518e:	2344      	movs	r3, #68	; 0x44
 8025190:	18fb      	adds	r3, r7, r3
 8025192:	881b      	ldrh	r3, [r3, #0]
 8025194:	2b00      	cmp	r3, #0
 8025196:	d000      	beq.n	802519a <Send_DpmConfigGetCnf+0x272>
 8025198:	e16e      	b.n	8025478 <Send_DpmConfigGetCnf+0x550>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 802519a:	230f      	movs	r3, #15
 802519c:	18fb      	adds	r3, r7, r3
 802519e:	781a      	ldrb	r2, [r3, #0]
 80251a0:	4979      	ldr	r1, [pc, #484]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 80251a2:	0013      	movs	r3, r2
 80251a4:	005b      	lsls	r3, r3, #1
 80251a6:	189b      	adds	r3, r3, r2
 80251a8:	009b      	lsls	r3, r3, #2
 80251aa:	18cb      	adds	r3, r1, r3
 80251ac:	791b      	ldrb	r3, [r3, #4]
 80251ae:	065b      	lsls	r3, r3, #25
 80251b0:	0fdb      	lsrs	r3, r3, #31
 80251b2:	b2db      	uxtb	r3, r3
 80251b4:	001a      	movs	r2, r3
 80251b6:	2127      	movs	r1, #39	; 0x27
 80251b8:	187b      	adds	r3, r7, r1
 80251ba:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 80251bc:	187b      	adds	r3, r7, r1
 80251be:	2230      	movs	r2, #48	; 0x30
 80251c0:	18b8      	adds	r0, r7, r2
 80251c2:	2201      	movs	r2, #1
 80251c4:	210a      	movs	r1, #10
 80251c6:	f7fd f93d 	bl	8022444 <TLV_add>
        if (0U != length)
 80251ca:	2344      	movs	r3, #68	; 0x44
 80251cc:	18fb      	adds	r3, r7, r3
 80251ce:	881b      	ldrh	r3, [r3, #0]
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d000      	beq.n	80251d6 <Send_DpmConfigGetCnf+0x2ae>
 80251d4:	e152      	b.n	802547c <Send_DpmConfigGetCnf+0x554>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 80251d6:	230f      	movs	r3, #15
 80251d8:	18fb      	adds	r3, r7, r3
 80251da:	781a      	ldrb	r2, [r3, #0]
 80251dc:	496a      	ldr	r1, [pc, #424]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 80251de:	0013      	movs	r3, r2
 80251e0:	005b      	lsls	r3, r3, #1
 80251e2:	189b      	adds	r3, r3, r2
 80251e4:	009b      	lsls	r3, r3, #2
 80251e6:	18cb      	adds	r3, r1, r3
 80251e8:	3308      	adds	r3, #8
 80251ea:	881a      	ldrh	r2, [r3, #0]
 80251ec:	2124      	movs	r1, #36	; 0x24
 80251ee:	187b      	adds	r3, r7, r1
 80251f0:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 80251f2:	187b      	adds	r3, r7, r1
 80251f4:	2230      	movs	r2, #48	; 0x30
 80251f6:	18b8      	adds	r0, r7, r2
 80251f8:	2202      	movs	r2, #2
 80251fa:	210b      	movs	r1, #11
 80251fc:	f7fd f922 	bl	8022444 <TLV_add>
        if (0U != length)
 8025200:	2344      	movs	r3, #68	; 0x44
 8025202:	18fb      	adds	r3, r7, r3
 8025204:	881b      	ldrh	r3, [r3, #0]
 8025206:	2b00      	cmp	r3, #0
 8025208:	d000      	beq.n	802520c <Send_DpmConfigGetCnf+0x2e4>
 802520a:	e139      	b.n	8025480 <Send_DpmConfigGetCnf+0x558>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 802520c:	230f      	movs	r3, #15
 802520e:	18fb      	adds	r3, r7, r3
 8025210:	781a      	ldrb	r2, [r3, #0]
 8025212:	4b5e      	ldr	r3, [pc, #376]	; (802538c <Send_DpmConfigGetCnf+0x464>)
 8025214:	2174      	movs	r1, #116	; 0x74
 8025216:	434a      	muls	r2, r1
 8025218:	5cd3      	ldrb	r3, [r2, r3]
 802521a:	079b      	lsls	r3, r3, #30
 802521c:	0fdb      	lsrs	r3, r3, #31
 802521e:	b2db      	uxtb	r3, r3
 8025220:	001a      	movs	r2, r3
 8025222:	2123      	movs	r1, #35	; 0x23
 8025224:	187b      	adds	r3, r7, r1
 8025226:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8025228:	187b      	adds	r3, r7, r1
 802522a:	2230      	movs	r2, #48	; 0x30
 802522c:	18b8      	adds	r0, r7, r2
 802522e:	2201      	movs	r2, #1
 8025230:	2108      	movs	r1, #8
 8025232:	f7fd f907 	bl	8022444 <TLV_add>
        if (0U != length)
 8025236:	2344      	movs	r3, #68	; 0x44
 8025238:	18fb      	adds	r3, r7, r3
 802523a:	881b      	ldrh	r3, [r3, #0]
 802523c:	2b00      	cmp	r3, #0
 802523e:	d000      	beq.n	8025242 <Send_DpmConfigGetCnf+0x31a>
 8025240:	e120      	b.n	8025484 <Send_DpmConfigGetCnf+0x55c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[0];
 8025242:	2143      	movs	r1, #67	; 0x43
 8025244:	187b      	adds	r3, r7, r1
 8025246:	4a52      	ldr	r2, [pc, #328]	; (8025390 <Send_DpmConfigGetCnf+0x468>)
 8025248:	7812      	ldrb	r2, [r2, #0]
 802524a:	701a      	strb	r2, [r3, #0]
          list_pdo  = (uint8_t *)PORT0_PDO_ListSNK;
 802524c:	4b51      	ldr	r3, [pc, #324]	; (8025394 <Send_DpmConfigGetCnf+0x46c>)
 802524e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[2];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSNK;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SNK_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8025250:	187b      	adds	r3, r7, r1
 8025252:	781b      	ldrb	r3, [r3, #0]
 8025254:	b29b      	uxth	r3, r3
 8025256:	009b      	lsls	r3, r3, #2
 8025258:	b29a      	uxth	r2, r3
 802525a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802525c:	2130      	movs	r1, #48	; 0x30
 802525e:	1878      	adds	r0, r7, r1
 8025260:	210c      	movs	r1, #12
 8025262:	f7fd f8ef 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 8025266:	2344      	movs	r3, #68	; 0x44
 8025268:	18fb      	adds	r3, r7, r3
 802526a:	881b      	ldrh	r3, [r3, #0]
 802526c:	2b00      	cmp	r3, #0
 802526e:	d000      	beq.n	8025272 <Send_DpmConfigGetCnf+0x34a>
 8025270:	e10a      	b.n	8025488 <Send_DpmConfigGetCnf+0x560>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8025272:	230f      	movs	r3, #15
 8025274:	18fb      	adds	r3, r7, r3
 8025276:	781b      	ldrb	r3, [r3, #0]
 8025278:	4a44      	ldr	r2, [pc, #272]	; (802538c <Send_DpmConfigGetCnf+0x464>)
 802527a:	2168      	movs	r1, #104	; 0x68
 802527c:	2074      	movs	r0, #116	; 0x74
 802527e:	4343      	muls	r3, r0
 8025280:	18d3      	adds	r3, r2, r3
 8025282:	185b      	adds	r3, r3, r1
 8025284:	791b      	ldrb	r3, [r3, #4]
 8025286:	061b      	lsls	r3, r3, #24
 8025288:	0e5b      	lsrs	r3, r3, #25
 802528a:	b2db      	uxtb	r3, r3
 802528c:	001a      	movs	r2, r3
 802528e:	2122      	movs	r1, #34	; 0x22
 8025290:	187b      	adds	r3, r7, r1
 8025292:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8025294:	187b      	adds	r3, r7, r1
 8025296:	2230      	movs	r2, #48	; 0x30
 8025298:	18b8      	adds	r0, r7, r2
 802529a:	2201      	movs	r2, #1
 802529c:	210e      	movs	r1, #14
 802529e:	f7fd f8d1 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 80252a2:	2344      	movs	r3, #68	; 0x44
 80252a4:	18fb      	adds	r3, r7, r3
 80252a6:	881b      	ldrh	r3, [r3, #0]
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	d000      	beq.n	80252ae <Send_DpmConfigGetCnf+0x386>
 80252ac:	e0ee      	b.n	802548c <Send_DpmConfigGetCnf+0x564>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 80252ae:	230f      	movs	r3, #15
 80252b0:	18fb      	adds	r3, r7, r3
 80252b2:	781b      	ldrb	r3, [r3, #0]
 80252b4:	4a35      	ldr	r2, [pc, #212]	; (802538c <Send_DpmConfigGetCnf+0x464>)
 80252b6:	2168      	movs	r1, #104	; 0x68
 80252b8:	2074      	movs	r0, #116	; 0x74
 80252ba:	4343      	muls	r3, r0
 80252bc:	18d3      	adds	r3, r2, r3
 80252be:	185b      	adds	r3, r3, r1
 80252c0:	795b      	ldrb	r3, [r3, #5]
 80252c2:	065b      	lsls	r3, r3, #25
 80252c4:	0e5b      	lsrs	r3, r3, #25
 80252c6:	b2db      	uxtb	r3, r3
 80252c8:	001a      	movs	r2, r3
 80252ca:	2121      	movs	r1, #33	; 0x21
 80252cc:	187b      	adds	r3, r7, r1
 80252ce:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 80252d0:	187b      	adds	r3, r7, r1
 80252d2:	2230      	movs	r2, #48	; 0x30
 80252d4:	18b8      	adds	r0, r7, r2
 80252d6:	2201      	movs	r2, #1
 80252d8:	210f      	movs	r1, #15
 80252da:	f7fd f8b3 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 80252de:	2344      	movs	r3, #68	; 0x44
 80252e0:	18fb      	adds	r3, r7, r3
 80252e2:	881b      	ldrh	r3, [r3, #0]
 80252e4:	2b00      	cmp	r3, #0
 80252e6:	d000      	beq.n	80252ea <Send_DpmConfigGetCnf+0x3c2>
 80252e8:	e0d2      	b.n	8025490 <Send_DpmConfigGetCnf+0x568>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 80252ea:	230f      	movs	r3, #15
 80252ec:	18fb      	adds	r3, r7, r3
 80252ee:	781a      	ldrb	r2, [r3, #0]
 80252f0:	4925      	ldr	r1, [pc, #148]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 80252f2:	0013      	movs	r3, r2
 80252f4:	005b      	lsls	r3, r3, #1
 80252f6:	189b      	adds	r3, r3, r2
 80252f8:	009b      	lsls	r3, r3, #2
 80252fa:	18cb      	adds	r3, r1, r3
 80252fc:	795b      	ldrb	r3, [r3, #5]
 80252fe:	07db      	lsls	r3, r3, #31
 8025300:	0fdb      	lsrs	r3, r3, #31
 8025302:	b2db      	uxtb	r3, r3
 8025304:	001a      	movs	r2, r3
 8025306:	2120      	movs	r1, #32
 8025308:	187b      	adds	r3, r7, r1
 802530a:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 802530c:	187b      	adds	r3, r7, r1
 802530e:	2230      	movs	r2, #48	; 0x30
 8025310:	18b8      	adds	r0, r7, r2
 8025312:	2201      	movs	r2, #1
 8025314:	2110      	movs	r1, #16
 8025316:	f7fd f895 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 802531a:	2344      	movs	r3, #68	; 0x44
 802531c:	18fb      	adds	r3, r7, r3
 802531e:	881b      	ldrh	r3, [r3, #0]
 8025320:	2b00      	cmp	r3, #0
 8025322:	d000      	beq.n	8025326 <Send_DpmConfigGetCnf+0x3fe>
 8025324:	e0b6      	b.n	8025494 <Send_DpmConfigGetCnf+0x56c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8025326:	230f      	movs	r3, #15
 8025328:	18fb      	adds	r3, r7, r3
 802532a:	781a      	ldrb	r2, [r3, #0]
 802532c:	4916      	ldr	r1, [pc, #88]	; (8025388 <Send_DpmConfigGetCnf+0x460>)
 802532e:	0013      	movs	r3, r2
 8025330:	005b      	lsls	r3, r3, #1
 8025332:	189b      	adds	r3, r3, r2
 8025334:	009b      	lsls	r3, r3, #2
 8025336:	18cb      	adds	r3, r1, r3
 8025338:	795b      	ldrb	r3, [r3, #5]
 802533a:	079b      	lsls	r3, r3, #30
 802533c:	0fdb      	lsrs	r3, r3, #31
 802533e:	b2db      	uxtb	r3, r3
 8025340:	001a      	movs	r2, r3
 8025342:	211f      	movs	r1, #31
 8025344:	187b      	adds	r3, r7, r1
 8025346:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8025348:	187b      	adds	r3, r7, r1
 802534a:	2230      	movs	r2, #48	; 0x30
 802534c:	18b8      	adds	r0, r7, r2
 802534e:	2201      	movs	r2, #1
 8025350:	2111      	movs	r1, #17
 8025352:	f7fd f877 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 8025356:	2344      	movs	r3, #68	; 0x44
 8025358:	18fb      	adds	r3, r7, r3
 802535a:	881b      	ldrh	r3, [r3, #0]
 802535c:	2b00      	cmp	r3, #0
 802535e:	d000      	beq.n	8025362 <Send_DpmConfigGetCnf+0x43a>
 8025360:	e09a      	b.n	8025498 <Send_DpmConfigGetCnf+0x570>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8025362:	230f      	movs	r3, #15
 8025364:	18fb      	adds	r3, r7, r3
 8025366:	781a      	ldrb	r2, [r3, #0]
 8025368:	4b0b      	ldr	r3, [pc, #44]	; (8025398 <Send_DpmConfigGetCnf+0x470>)
 802536a:	00d2      	lsls	r2, r2, #3
 802536c:	58d3      	ldr	r3, [r2, r3]
 802536e:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8025370:	2318      	movs	r3, #24
 8025372:	18fb      	adds	r3, r7, r3
 8025374:	2230      	movs	r2, #48	; 0x30
 8025376:	18b8      	adds	r0, r7, r2
 8025378:	2204      	movs	r2, #4
 802537a:	2112      	movs	r1, #18
 802537c:	f7fd f862 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 8025380:	2344      	movs	r3, #68	; 0x44
 8025382:	18fb      	adds	r3, r7, r3
 8025384:	e00a      	b.n	802539c <Send_DpmConfigGetCnf+0x474>
 8025386:	46c0      	nop			; (mov r8, r8)
 8025388:	200001b4 	.word	0x200001b4
 802538c:	200001c8 	.word	0x200001c8
 8025390:	2000023c 	.word	0x2000023c
 8025394:	20000240 	.word	0x20000240
 8025398:	200001c0 	.word	0x200001c0
 802539c:	881b      	ldrh	r3, [r3, #0]
 802539e:	2b00      	cmp	r3, #0
 80253a0:	d000      	beq.n	80253a4 <Send_DpmConfigGetCnf+0x47c>
 80253a2:	e07b      	b.n	802549c <Send_DpmConfigGetCnf+0x574>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 80253a4:	230f      	movs	r3, #15
 80253a6:	18fb      	adds	r3, r7, r3
 80253a8:	781b      	ldrb	r3, [r3, #0]
 80253aa:	4a4d      	ldr	r2, [pc, #308]	; (80254e0 <Send_DpmConfigGetCnf+0x5b8>)
 80253ac:	00db      	lsls	r3, r3, #3
 80253ae:	18d3      	adds	r3, r2, r3
 80253b0:	3304      	adds	r3, #4
 80253b2:	881a      	ldrh	r2, [r3, #0]
 80253b4:	2116      	movs	r1, #22
 80253b6:	187b      	adds	r3, r7, r1
 80253b8:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 80253ba:	187b      	adds	r3, r7, r1
 80253bc:	2230      	movs	r2, #48	; 0x30
 80253be:	18b8      	adds	r0, r7, r2
 80253c0:	2202      	movs	r2, #2
 80253c2:	2117      	movs	r1, #23
 80253c4:	f7fd f83e 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 80253c8:	2344      	movs	r3, #68	; 0x44
 80253ca:	18fb      	adds	r3, r7, r3
 80253cc:	881b      	ldrh	r3, [r3, #0]
 80253ce:	2b00      	cmp	r3, #0
 80253d0:	d000      	beq.n	80253d4 <Send_DpmConfigGetCnf+0x4ac>
 80253d2:	e065      	b.n	80254a0 <Send_DpmConfigGetCnf+0x578>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 80253d4:	230f      	movs	r3, #15
 80253d6:	18fb      	adds	r3, r7, r3
 80253d8:	781b      	ldrb	r3, [r3, #0]
 80253da:	4a41      	ldr	r2, [pc, #260]	; (80254e0 <Send_DpmConfigGetCnf+0x5b8>)
 80253dc:	00db      	lsls	r3, r3, #3
 80253de:	18d3      	adds	r3, r2, r3
 80253e0:	3306      	adds	r3, #6
 80253e2:	881a      	ldrh	r2, [r3, #0]
 80253e4:	2114      	movs	r1, #20
 80253e6:	187b      	adds	r3, r7, r1
 80253e8:	801a      	strh	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 80253ea:	187b      	adds	r3, r7, r1
 80253ec:	2230      	movs	r2, #48	; 0x30
 80253ee:	18b8      	adds	r0, r7, r2
 80253f0:	2202      	movs	r2, #2
 80253f2:	2118      	movs	r1, #24
 80253f4:	f7fd f826 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 80253f8:	2344      	movs	r3, #68	; 0x44
 80253fa:	18fb      	adds	r3, r7, r3
 80253fc:	881b      	ldrh	r3, [r3, #0]
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d150      	bne.n	80254a4 <Send_DpmConfigGetCnf+0x57c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8025402:	230f      	movs	r3, #15
 8025404:	18fb      	adds	r3, r7, r3
 8025406:	781a      	ldrb	r2, [r3, #0]
 8025408:	4936      	ldr	r1, [pc, #216]	; (80254e4 <Send_DpmConfigGetCnf+0x5bc>)
 802540a:	0013      	movs	r3, r2
 802540c:	005b      	lsls	r3, r3, #1
 802540e:	189b      	adds	r3, r3, r2
 8025410:	005b      	lsls	r3, r3, #1
 8025412:	18cb      	adds	r3, r1, r3
 8025414:	3304      	adds	r3, #4
 8025416:	781a      	ldrb	r2, [r3, #0]
 8025418:	2113      	movs	r1, #19
 802541a:	187b      	adds	r3, r7, r1
 802541c:	701a      	strb	r2, [r3, #0]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 802541e:	187b      	adds	r3, r7, r1
 8025420:	2230      	movs	r2, #48	; 0x30
 8025422:	18b8      	adds	r0, r7, r2
 8025424:	2201      	movs	r2, #1
 8025426:	211a      	movs	r1, #26
 8025428:	f7fd f80c 	bl	8022444 <TLV_add>
      }
      if (0U != length)
 802542c:	2344      	movs	r3, #68	; 0x44
 802542e:	18fb      	adds	r3, r7, r3
 8025430:	881b      	ldrh	r3, [r3, #0]
 8025432:	2b00      	cmp	r3, #0
 8025434:	d138      	bne.n	80254a8 <Send_DpmConfigGetCnf+0x580>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8025436:	2344      	movs	r3, #68	; 0x44
 8025438:	18fb      	adds	r3, r7, r3
 802543a:	881b      	ldrh	r3, [r3, #0]
 802543c:	2b00      	cmp	r3, #0
 802543e:	d035      	beq.n	80254ac <Send_DpmConfigGetCnf+0x584>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8025440:	2330      	movs	r3, #48	; 0x30
 8025442:	18fb      	adds	r3, r7, r3
 8025444:	0018      	movs	r0, r3
 8025446:	f7fd f95f 	bl	8022708 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 802544a:	6879      	ldr	r1, [r7, #4]
 802544c:	230f      	movs	r3, #15
 802544e:	18fb      	adds	r3, r7, r3
 8025450:	781b      	ldrb	r3, [r3, #0]
 8025452:	2203      	movs	r2, #3
 8025454:	0018      	movs	r0, r3
 8025456:	f000 f847 	bl	80254e8 <Send_DpmConfigGetRej>
          goto __end;
 802545a:	e038      	b.n	80254ce <Send_DpmConfigGetCnf+0x5a6>
          break;
 802545c:	46c0      	nop			; (mov r8, r8)
 802545e:	e026      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025460:	46c0      	nop			; (mov r8, r8)
 8025462:	e024      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025464:	46c0      	nop			; (mov r8, r8)
 8025466:	e022      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025468:	46c0      	nop			; (mov r8, r8)
 802546a:	e020      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 802546c:	46c0      	nop			; (mov r8, r8)
 802546e:	e01e      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025470:	46c0      	nop			; (mov r8, r8)
 8025472:	e01c      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025474:	46c0      	nop			; (mov r8, r8)
 8025476:	e01a      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025478:	46c0      	nop			; (mov r8, r8)
 802547a:	e018      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 802547c:	46c0      	nop			; (mov r8, r8)
 802547e:	e016      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025480:	46c0      	nop			; (mov r8, r8)
 8025482:	e014      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
          break;
 8025484:	46c0      	nop			; (mov r8, r8)
 8025486:	e012      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 8025488:	46c0      	nop			; (mov r8, r8)
 802548a:	e010      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 802548c:	46c0      	nop			; (mov r8, r8)
 802548e:	e00e      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 8025490:	46c0      	nop			; (mov r8, r8)
 8025492:	e00c      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 8025494:	46c0      	nop			; (mov r8, r8)
 8025496:	e00a      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 8025498:	46c0      	nop			; (mov r8, r8)
 802549a:	e008      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 802549c:	46c0      	nop			; (mov r8, r8)
 802549e:	e006      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 80254a0:	46c0      	nop			; (mov r8, r8)
 80254a2:	e004      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 80254a4:	46c0      	nop			; (mov r8, r8)
 80254a6:	e002      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        break;
 80254a8:	46c0      	nop			; (mov r8, r8)
 80254aa:	e000      	b.n	80254ae <Send_DpmConfigGetCnf+0x586>
        }
        break;
 80254ac:	46c0      	nop			; (mov r8, r8)
    }
    index++;
 80254ae:	2147      	movs	r1, #71	; 0x47
 80254b0:	187b      	adds	r3, r7, r1
 80254b2:	781a      	ldrb	r2, [r3, #0]
 80254b4:	187b      	adds	r3, r7, r1
 80254b6:	3201      	adds	r2, #1
 80254b8:	701a      	strb	r2, [r3, #0]
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 80254ba:	187b      	adds	r3, r7, r1
 80254bc:	781b      	ldrb	r3, [r3, #0]
 80254be:	b29b      	uxth	r3, r3
 80254c0:	2244      	movs	r2, #68	; 0x44
 80254c2:	18ba      	adds	r2, r7, r2
 80254c4:	8812      	ldrh	r2, [r2, #0]
 80254c6:	429a      	cmp	r2, r3
 80254c8:	d900      	bls.n	80254cc <Send_DpmConfigGetCnf+0x5a4>
 80254ca:	e554      	b.n	8024f76 <Send_DpmConfigGetCnf+0x4e>

__end:
 80254cc:	46c0      	nop			; (mov r8, r8)
  TLV_deinit_encode(&send_tlv);
 80254ce:	2330      	movs	r3, #48	; 0x30
 80254d0:	18fb      	adds	r3, r7, r3
 80254d2:	0018      	movs	r0, r3
 80254d4:	f7fd f918 	bl	8022708 <TLV_deinit_encode>
}
 80254d8:	46c0      	nop			; (mov r8, r8)
 80254da:	46bd      	mov	sp, r7
 80254dc:	b012      	add	sp, #72	; 0x48
 80254de:	bd80      	pop	{r7, pc}
 80254e0:	200001c0 	.word	0x200001c0
 80254e4:	20004e40 	.word	0x20004e40

080254e8 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 80254e8:	b590      	push	{r4, r7, lr}
 80254ea:	b087      	sub	sp, #28
 80254ec:	af00      	add	r7, sp, #0
 80254ee:	6039      	str	r1, [r7, #0]
 80254f0:	0011      	movs	r1, r2
 80254f2:	1dfb      	adds	r3, r7, #7
 80254f4:	1c02      	adds	r2, r0, #0
 80254f6:	701a      	strb	r2, [r3, #0]
 80254f8:	1dbb      	adds	r3, r7, #6
 80254fa:	1c0a      	adds	r2, r1, #0
 80254fc:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 80254fe:	683b      	ldr	r3, [r7, #0]
 8025500:	2280      	movs	r2, #128	; 0x80
 8025502:	0052      	lsls	r2, r2, #1
 8025504:	240c      	movs	r4, #12
 8025506:	1938      	adds	r0, r7, r4
 8025508:	2108      	movs	r1, #8
 802550a:	f7fc ff38 	bl	802237e <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 802550e:	1dbb      	adds	r3, r7, #6
 8025510:	7819      	ldrb	r1, [r3, #0]
 8025512:	1938      	adds	r0, r7, r4
 8025514:	2300      	movs	r3, #0
 8025516:	2200      	movs	r2, #0
 8025518:	f7fc ff94 	bl	8022444 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 802551c:	193b      	adds	r3, r7, r4
 802551e:	0018      	movs	r0, r3
 8025520:	f7fd f8f2 	bl	8022708 <TLV_deinit_encode>
}
 8025524:	46c0      	nop			; (mov r8, r8)
 8025526:	46bd      	mov	sp, r7
 8025528:	b007      	add	sp, #28
 802552a:	bd90      	pop	{r4, r7, pc}

0802552c <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 802552c:	b590      	push	{r4, r7, lr}
 802552e:	b087      	sub	sp, #28
 8025530:	af00      	add	r7, sp, #0
 8025532:	6039      	str	r1, [r7, #0]
 8025534:	0011      	movs	r1, r2
 8025536:	1dfb      	adds	r3, r7, #7
 8025538:	1c02      	adds	r2, r0, #0
 802553a:	701a      	strb	r2, [r3, #0]
 802553c:	1dbb      	adds	r3, r7, #6
 802553e:	1c0a      	adds	r2, r1, #0
 8025540:	701a      	strb	r2, [r3, #0]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8025542:	683b      	ldr	r3, [r7, #0]
 8025544:	2280      	movs	r2, #128	; 0x80
 8025546:	0052      	lsls	r2, r2, #1
 8025548:	240c      	movs	r4, #12
 802554a:	1938      	adds	r0, r7, r4
 802554c:	210b      	movs	r1, #11
 802554e:	f7fc ff16 	bl	802237e <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8025552:	1dbb      	adds	r3, r7, #6
 8025554:	7819      	ldrb	r1, [r3, #0]
 8025556:	1938      	adds	r0, r7, r4
 8025558:	2300      	movs	r3, #0
 802555a:	2200      	movs	r2, #0
 802555c:	f7fc ff72 	bl	8022444 <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8025560:	193b      	adds	r3, r7, r4
 8025562:	0018      	movs	r0, r3
 8025564:	f7fd f8d0 	bl	8022708 <TLV_deinit_encode>
}
 8025568:	46c0      	nop			; (mov r8, r8)
 802556a:	46bd      	mov	sp, r7
 802556c:	b007      	add	sp, #28
 802556e:	bd90      	pop	{r4, r7, pc}

08025570 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8025570:	b5b0      	push	{r4, r5, r7, lr}
 8025572:	b090      	sub	sp, #64	; 0x40
 8025574:	af00      	add	r7, sp, #0
 8025576:	6039      	str	r1, [r7, #0]
 8025578:	0011      	movs	r1, r2
 802557a:	1dfb      	adds	r3, r7, #7
 802557c:	1c02      	adds	r2, r0, #0
 802557e:	701a      	strb	r2, [r3, #0]
 8025580:	1dbb      	adds	r3, r7, #6
 8025582:	1c0a      	adds	r2, r1, #0
 8025584:	701a      	strb	r2, [r3, #0]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8025586:	1dfb      	adds	r3, r7, #7
 8025588:	781b      	ldrb	r3, [r3, #0]
 802558a:	3301      	adds	r3, #1
 802558c:	015b      	lsls	r3, r3, #5
 802558e:	b25b      	sxtb	r3, r3
 8025590:	220f      	movs	r2, #15
 8025592:	4313      	orrs	r3, r2
 8025594:	b25b      	sxtb	r3, r3
 8025596:	b2d9      	uxtb	r1, r3
 8025598:	683b      	ldr	r3, [r7, #0]
 802559a:	2280      	movs	r2, #128	; 0x80
 802559c:	0052      	lsls	r2, r2, #1
 802559e:	2030      	movs	r0, #48	; 0x30
 80255a0:	1838      	adds	r0, r7, r0
 80255a2:	f7fc feec 	bl	802237e <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 80255a6:	2508      	movs	r5, #8
 80255a8:	197b      	adds	r3, r7, r5
 80255aa:	4a1e      	ldr	r2, [pc, #120]	; (8025624 <Send_DpmRegisterReadCnf+0xb4>)
 80255ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80255ae:	c313      	stmia	r3!, {r0, r1, r4}
 80255b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80255b2:	c313      	stmia	r3!, {r0, r1, r4}
 80255b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80255b6:	c313      	stmia	r3!, {r0, r1, r4}
 80255b8:	8811      	ldrh	r1, [r2, #0]
 80255ba:	8019      	strh	r1, [r3, #0]
 80255bc:	7892      	ldrb	r2, [r2, #2]
 80255be:	709a      	strb	r2, [r3, #2]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 80255c0:	233f      	movs	r3, #63	; 0x3f
 80255c2:	18fb      	adds	r3, r7, r3
 80255c4:	2200      	movs	r2, #0
 80255c6:	701a      	strb	r2, [r3, #0]

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 80255c8:	1dbb      	adds	r3, r7, #6
 80255ca:	781b      	ldrb	r3, [r3, #0]
 80255cc:	2bff      	cmp	r3, #255	; 0xff
 80255ce:	d003      	beq.n	80255d8 <Send_DpmRegisterReadCnf+0x68>
  {
    *stateMachineArray = param;
 80255d0:	197b      	adds	r3, r7, r5
 80255d2:	1dba      	adds	r2, r7, #6
 80255d4:	7812      	ldrb	r2, [r2, #0]
 80255d6:	701a      	strb	r2, [r3, #0]
  }

  do
  {
    switch (stateMachineArray[counter])
 80255d8:	233f      	movs	r3, #63	; 0x3f
 80255da:	18fb      	adds	r3, r7, r3
 80255dc:	781b      	ldrb	r3, [r3, #0]
 80255de:	2208      	movs	r2, #8
 80255e0:	18ba      	adds	r2, r7, r2
 80255e2:	5cd3      	ldrb	r3, [r2, r3]
 80255e4:	2b80      	cmp	r3, #128	; 0x80
 80255e6:	d804      	bhi.n	80255f2 <Send_DpmRegisterReadCnf+0x82>
 80255e8:	009a      	lsls	r2, r3, #2
 80255ea:	4b0f      	ldr	r3, [pc, #60]	; (8025628 <Send_DpmRegisterReadCnf+0xb8>)
 80255ec:	18d3      	adds	r3, r2, r3
 80255ee:	681b      	ldr	r3, [r3, #0]
 80255f0:	469f      	mov	pc, r3
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 80255f2:	46c0      	nop			; (mov r8, r8)
    }
    counter++;
 80255f4:	213f      	movs	r1, #63	; 0x3f
 80255f6:	187b      	adds	r3, r7, r1
 80255f8:	781a      	ldrb	r2, [r3, #0]
 80255fa:	187b      	adds	r3, r7, r1
 80255fc:	3201      	adds	r2, #1
 80255fe:	701a      	strb	r2, [r3, #0]
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8025600:	187b      	adds	r3, r7, r1
 8025602:	781b      	ldrb	r3, [r3, #0]
 8025604:	2b26      	cmp	r3, #38	; 0x26
 8025606:	d803      	bhi.n	8025610 <Send_DpmRegisterReadCnf+0xa0>
 8025608:	1dbb      	adds	r3, r7, #6
 802560a:	781b      	ldrb	r3, [r3, #0]
 802560c:	2bff      	cmp	r3, #255	; 0xff
 802560e:	d1e3      	bne.n	80255d8 <Send_DpmRegisterReadCnf+0x68>

  TLV_deinit_encode(&ToSendTLV);
 8025610:	2330      	movs	r3, #48	; 0x30
 8025612:	18fb      	adds	r3, r7, r3
 8025614:	0018      	movs	r0, r3
 8025616:	f7fd f877 	bl	8022708 <TLV_deinit_encode>
}
 802561a:	46c0      	nop			; (mov r8, r8)
 802561c:	46bd      	mov	sp, r7
 802561e:	b010      	add	sp, #64	; 0x40
 8025620:	bdb0      	pop	{r4, r5, r7, pc}
 8025622:	46c0      	nop			; (mov r8, r8)
 8025624:	0802aec4 	.word	0x0802aec4
 8025628:	0802b570 	.word	0x0802b570

0802562c <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 802562c:	b5b0      	push	{r4, r5, r7, lr}
 802562e:	b08c      	sub	sp, #48	; 0x30
 8025630:	af00      	add	r7, sp, #0
 8025632:	60b9      	str	r1, [r7, #8]
 8025634:	607a      	str	r2, [r7, #4]
 8025636:	230f      	movs	r3, #15
 8025638:	18fb      	adds	r3, r7, r3
 802563a:	1c02      	adds	r2, r0, #0
 802563c:	701a      	strb	r2, [r3, #0]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 802563e:	687a      	ldr	r2, [r7, #4]
 8025640:	2428      	movs	r4, #40	; 0x28
 8025642:	193b      	adds	r3, r7, r4
 8025644:	0011      	movs	r1, r2
 8025646:	0018      	movs	r0, r3
 8025648:	f7fd f870 	bl	802272c <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 802564c:	2320      	movs	r3, #32
 802564e:	18fb      	adds	r3, r7, r3
 8025650:	2224      	movs	r2, #36	; 0x24
 8025652:	18ba      	adds	r2, r7, r2
 8025654:	2527      	movs	r5, #39	; 0x27
 8025656:	1979      	adds	r1, r7, r5
 8025658:	1938      	adds	r0, r7, r4
 802565a:	f7fd f893 	bl	8022784 <TLV_get>

  switch (registerName)
 802565e:	197b      	adds	r3, r7, r5
 8025660:	781b      	ldrb	r3, [r3, #0]
 8025662:	2b80      	cmp	r3, #128	; 0x80
 8025664:	d804      	bhi.n	8025670 <Send_DpmRegisterWriteCnf+0x44>
 8025666:	009a      	lsls	r2, r3, #2
 8025668:	4b10      	ldr	r3, [pc, #64]	; (80256ac <Send_DpmRegisterWriteCnf+0x80>)
 802566a:	18d3      	adds	r3, r2, r3
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	469f      	mov	pc, r3
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 8025670:	46c0      	nop			; (mov r8, r8)
  }
  TLV_deinit_decode(&ToProcessTLV);
 8025672:	2328      	movs	r3, #40	; 0x28
 8025674:	18fb      	adds	r3, r7, r3
 8025676:	0018      	movs	r0, r3
 8025678:	f7fd f8de 	bl	8022838 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 802567c:	230f      	movs	r3, #15
 802567e:	18fb      	adds	r3, r7, r3
 8025680:	781b      	ldrb	r3, [r3, #0]
 8025682:	3301      	adds	r3, #1
 8025684:	015b      	lsls	r3, r3, #5
 8025686:	b25b      	sxtb	r3, r3
 8025688:	2211      	movs	r2, #17
 802568a:	4313      	orrs	r3, r2
 802568c:	b25b      	sxtb	r3, r3
 802568e:	b2d9      	uxtb	r1, r3
 8025690:	68bb      	ldr	r3, [r7, #8]
 8025692:	2414      	movs	r4, #20
 8025694:	1938      	adds	r0, r7, r4
 8025696:	220c      	movs	r2, #12
 8025698:	f7fc fe71 	bl	802237e <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 802569c:	193b      	adds	r3, r7, r4
 802569e:	0018      	movs	r0, r3
 80256a0:	f7fd f832 	bl	8022708 <TLV_deinit_encode>
}
 80256a4:	46c0      	nop			; (mov r8, r8)
 80256a6:	46bd      	mov	sp, r7
 80256a8:	b00c      	add	sp, #48	; 0x30
 80256aa:	bdb0      	pop	{r4, r5, r7, pc}
 80256ac:	0802b774 	.word	0x0802b774

080256b0 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 80256b0:	b5b0      	push	{r4, r5, r7, lr}
 80256b2:	b084      	sub	sp, #16
 80256b4:	af00      	add	r7, sp, #0
 80256b6:	6039      	str	r1, [r7, #0]
 80256b8:	0011      	movs	r1, r2
 80256ba:	1dfb      	adds	r3, r7, #7
 80256bc:	1c02      	adds	r2, r0, #0
 80256be:	701a      	strb	r2, [r3, #0]
 80256c0:	1d3b      	adds	r3, r7, #4
 80256c2:	1c0a      	adds	r2, r1, #0
 80256c4:	801a      	strh	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 80256c6:	250f      	movs	r5, #15
 80256c8:	197b      	adds	r3, r7, r5
 80256ca:	2210      	movs	r2, #16
 80256cc:	701a      	strb	r2, [r3, #0]

  if (NULL != pCB_FreeText)
 80256ce:	4b0b      	ldr	r3, [pc, #44]	; (80256fc <Manage_FreeText+0x4c>)
 80256d0:	681b      	ldr	r3, [r3, #0]
 80256d2:	2b00      	cmp	r3, #0
 80256d4:	d00b      	beq.n	80256ee <Manage_FreeText+0x3e>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 80256d6:	4b09      	ldr	r3, [pc, #36]	; (80256fc <Manage_FreeText+0x4c>)
 80256d8:	681b      	ldr	r3, [r3, #0]
 80256da:	1d3a      	adds	r2, r7, #4
 80256dc:	8814      	ldrh	r4, [r2, #0]
 80256de:	6839      	ldr	r1, [r7, #0]
 80256e0:	1dfa      	adds	r2, r7, #7
 80256e2:	7810      	ldrb	r0, [r2, #0]
 80256e4:	0022      	movs	r2, r4
 80256e6:	4798      	blx	r3
    _status = USBPD_OK;
 80256e8:	197b      	adds	r3, r7, r5
 80256ea:	2200      	movs	r2, #0
 80256ec:	701a      	strb	r2, [r3, #0]
  }

  return _status;
 80256ee:	230f      	movs	r3, #15
 80256f0:	18fb      	adds	r3, r7, r3
 80256f2:	781b      	ldrb	r3, [r3, #0]
}
 80256f4:	0018      	movs	r0, r3
 80256f6:	46bd      	mov	sp, r7
 80256f8:	b004      	add	sp, #16
 80256fa:	bdb0      	pop	{r4, r5, r7, pc}
 80256fc:	20005064 	.word	0x20005064

08025700 <UpdateSNKPowerPort0>:
/**
  * @brief  Function to update SNK PDO and power user settings on Port0
  * @retval None
  */
static void UpdateSNKPowerPort0(void)
{
 8025700:	b580      	push	{r7, lr}
 8025702:	b088      	sub	sp, #32
 8025704:	af00      	add	r7, sp, #0
  USBPD_PDO_TypeDef pdo;
  uint32_t _max_power = 0;
 8025706:	2300      	movs	r3, #0
 8025708:	61fb      	str	r3, [r7, #28]
  uint16_t _voltage;
  uint16_t _current;
  uint16_t _power;
  uint16_t _min_voltage = 0xFFFF;
 802570a:	231a      	movs	r3, #26
 802570c:	18fb      	adds	r3, r7, r3
 802570e:	2201      	movs	r2, #1
 8025710:	4252      	negs	r2, r2
 8025712:	801a      	strh	r2, [r3, #0]
  uint16_t _max_voltage = 0;
 8025714:	2318      	movs	r3, #24
 8025716:	18fb      	adds	r3, r7, r3
 8025718:	2200      	movs	r2, #0
 802571a:	801a      	strh	r2, [r3, #0]
  uint16_t _max_current = 0;
 802571c:	2316      	movs	r3, #22
 802571e:	18fb      	adds	r3, r7, r3
 8025720:	2200      	movs	r2, #0
 8025722:	801a      	strh	r2, [r3, #0]

  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 8025724:	2300      	movs	r3, #0
 8025726:	613b      	str	r3, [r7, #16]
 8025728:	e0de      	b.n	80258e8 <UpdateSNKPowerPort0+0x1e8>
  {
    pdo.d32 = PORT0_PDO_ListSNK[_index];
 802572a:	4b84      	ldr	r3, [pc, #528]	; (802593c <UpdateSNKPowerPort0+0x23c>)
 802572c:	693a      	ldr	r2, [r7, #16]
 802572e:	0092      	lsls	r2, r2, #2
 8025730:	58d3      	ldr	r3, [r2, r3]
 8025732:	607b      	str	r3, [r7, #4]
    switch (pdo.GenericPDO.PowerObject)
 8025734:	1dfb      	adds	r3, r7, #7
 8025736:	781b      	ldrb	r3, [r3, #0]
 8025738:	061b      	lsls	r3, r3, #24
 802573a:	0f9b      	lsrs	r3, r3, #30
 802573c:	b2db      	uxtb	r3, r3
 802573e:	2b02      	cmp	r3, #2
 8025740:	d100      	bne.n	8025744 <UpdateSNKPowerPort0+0x44>
 8025742:	e082      	b.n	802584a <UpdateSNKPowerPort0+0x14a>
 8025744:	dd00      	ble.n	8025748 <UpdateSNKPowerPort0+0x48>
 8025746:	e0c5      	b.n	80258d4 <UpdateSNKPowerPort0+0x1d4>
 8025748:	2b00      	cmp	r3, #0
 802574a:	d002      	beq.n	8025752 <UpdateSNKPowerPort0+0x52>
 802574c:	2b01      	cmp	r3, #1
 802574e:	d03b      	beq.n	80257c8 <UpdateSNKPowerPort0+0xc8>
        _current = GUI_DECODE_50MA(pdo.SRCSNKAPDO.MaxCurrentIn50mAunits);
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
        break;
#endif /*_USBPD_REV30_SUPPORT && PPS*/
      default:
        break;
 8025750:	e0c0      	b.n	80258d4 <UpdateSNKPowerPort0+0x1d4>
        _voltage = GUI_DECODE_50MV(pdo.SNKFixedPDO.VoltageIn50mVunits);
 8025752:	687b      	ldr	r3, [r7, #4]
 8025754:	031b      	lsls	r3, r3, #12
 8025756:	0d9b      	lsrs	r3, r3, #22
 8025758:	b29b      	uxth	r3, r3
 802575a:	0019      	movs	r1, r3
 802575c:	200e      	movs	r0, #14
 802575e:	183b      	adds	r3, r7, r0
 8025760:	2232      	movs	r2, #50	; 0x32
 8025762:	434a      	muls	r2, r1
 8025764:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 8025766:	0001      	movs	r1, r0
 8025768:	187a      	adds	r2, r7, r1
 802576a:	201a      	movs	r0, #26
 802576c:	183b      	adds	r3, r7, r0
 802576e:	8812      	ldrh	r2, [r2, #0]
 8025770:	881b      	ldrh	r3, [r3, #0]
 8025772:	429a      	cmp	r2, r3
 8025774:	d203      	bcs.n	802577e <UpdateSNKPowerPort0+0x7e>
 8025776:	183b      	adds	r3, r7, r0
 8025778:	187a      	adds	r2, r7, r1
 802577a:	8812      	ldrh	r2, [r2, #0]
 802577c:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 802577e:	210e      	movs	r1, #14
 8025780:	187a      	adds	r2, r7, r1
 8025782:	2018      	movs	r0, #24
 8025784:	183b      	adds	r3, r7, r0
 8025786:	8812      	ldrh	r2, [r2, #0]
 8025788:	881b      	ldrh	r3, [r3, #0]
 802578a:	429a      	cmp	r2, r3
 802578c:	d903      	bls.n	8025796 <UpdateSNKPowerPort0+0x96>
 802578e:	183b      	adds	r3, r7, r0
 8025790:	187a      	adds	r2, r7, r1
 8025792:	8812      	ldrh	r2, [r2, #0]
 8025794:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKFixedPDO.OperationalCurrentIn10mAunits);
 8025796:	1d3b      	adds	r3, r7, #4
 8025798:	881b      	ldrh	r3, [r3, #0]
 802579a:	059b      	lsls	r3, r3, #22
 802579c:	0d9b      	lsrs	r3, r3, #22
 802579e:	b29b      	uxth	r3, r3
 80257a0:	200c      	movs	r0, #12
 80257a2:	183a      	adds	r2, r7, r0
 80257a4:	1c19      	adds	r1, r3, #0
 80257a6:	0089      	lsls	r1, r1, #2
 80257a8:	18cb      	adds	r3, r1, r3
 80257aa:	18db      	adds	r3, r3, r3
 80257ac:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80257ae:	183a      	adds	r2, r7, r0
 80257b0:	2116      	movs	r1, #22
 80257b2:	187b      	adds	r3, r7, r1
 80257b4:	8812      	ldrh	r2, [r2, #0]
 80257b6:	881b      	ldrh	r3, [r3, #0]
 80257b8:	429a      	cmp	r2, r3
 80257ba:	d800      	bhi.n	80257be <UpdateSNKPowerPort0+0xbe>
 80257bc:	e08c      	b.n	80258d8 <UpdateSNKPowerPort0+0x1d8>
 80257be:	187b      	adds	r3, r7, r1
 80257c0:	183a      	adds	r2, r7, r0
 80257c2:	8812      	ldrh	r2, [r2, #0]
 80257c4:	801a      	strh	r2, [r3, #0]
        break;
 80257c6:	e087      	b.n	80258d8 <UpdateSNKPowerPort0+0x1d8>
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MinVoltageIn50mVunits);
 80257c8:	687b      	ldr	r3, [r7, #4]
 80257ca:	031b      	lsls	r3, r3, #12
 80257cc:	0d9b      	lsrs	r3, r3, #22
 80257ce:	b29b      	uxth	r3, r3
 80257d0:	0019      	movs	r1, r3
 80257d2:	200e      	movs	r0, #14
 80257d4:	183b      	adds	r3, r7, r0
 80257d6:	2232      	movs	r2, #50	; 0x32
 80257d8:	434a      	muls	r2, r1
 80257da:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 80257dc:	0001      	movs	r1, r0
 80257de:	187a      	adds	r2, r7, r1
 80257e0:	201a      	movs	r0, #26
 80257e2:	183b      	adds	r3, r7, r0
 80257e4:	8812      	ldrh	r2, [r2, #0]
 80257e6:	881b      	ldrh	r3, [r3, #0]
 80257e8:	429a      	cmp	r2, r3
 80257ea:	d203      	bcs.n	80257f4 <UpdateSNKPowerPort0+0xf4>
 80257ec:	183b      	adds	r3, r7, r0
 80257ee:	187a      	adds	r2, r7, r1
 80257f0:	8812      	ldrh	r2, [r2, #0]
 80257f2:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKBatteryPDO.MaxVoltageIn50mVunits);
 80257f4:	1dbb      	adds	r3, r7, #6
 80257f6:	881b      	ldrh	r3, [r3, #0]
 80257f8:	049b      	lsls	r3, r3, #18
 80257fa:	0d9b      	lsrs	r3, r3, #22
 80257fc:	b29b      	uxth	r3, r3
 80257fe:	0019      	movs	r1, r3
 8025800:	200e      	movs	r0, #14
 8025802:	183b      	adds	r3, r7, r0
 8025804:	2232      	movs	r2, #50	; 0x32
 8025806:	434a      	muls	r2, r1
 8025808:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 802580a:	0001      	movs	r1, r0
 802580c:	187a      	adds	r2, r7, r1
 802580e:	2018      	movs	r0, #24
 8025810:	183b      	adds	r3, r7, r0
 8025812:	8812      	ldrh	r2, [r2, #0]
 8025814:	881b      	ldrh	r3, [r3, #0]
 8025816:	429a      	cmp	r2, r3
 8025818:	d903      	bls.n	8025822 <UpdateSNKPowerPort0+0x122>
 802581a:	183b      	adds	r3, r7, r0
 802581c:	187a      	adds	r2, r7, r1
 802581e:	8812      	ldrh	r2, [r2, #0]
 8025820:	801a      	strh	r2, [r3, #0]
        _power = GUI_DECODE_MW(pdo.SNKBatteryPDO.OperationalPowerIn250mWunits);
 8025822:	1d3b      	adds	r3, r7, #4
 8025824:	881b      	ldrh	r3, [r3, #0]
 8025826:	059b      	lsls	r3, r3, #22
 8025828:	0d9b      	lsrs	r3, r3, #22
 802582a:	b29b      	uxth	r3, r3
 802582c:	0019      	movs	r1, r3
 802582e:	200a      	movs	r0, #10
 8025830:	183b      	adds	r3, r7, r0
 8025832:	22fa      	movs	r2, #250	; 0xfa
 8025834:	434a      	muls	r2, r1
 8025836:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_POWER_MAX(_power, _max_power);
 8025838:	183b      	adds	r3, r7, r0
 802583a:	881b      	ldrh	r3, [r3, #0]
 802583c:	69fa      	ldr	r2, [r7, #28]
 802583e:	429a      	cmp	r2, r3
 8025840:	d24c      	bcs.n	80258dc <UpdateSNKPowerPort0+0x1dc>
 8025842:	183b      	adds	r3, r7, r0
 8025844:	881b      	ldrh	r3, [r3, #0]
 8025846:	61fb      	str	r3, [r7, #28]
        break;
 8025848:	e048      	b.n	80258dc <UpdateSNKPowerPort0+0x1dc>
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MinVoltageIn50mVunits);
 802584a:	687b      	ldr	r3, [r7, #4]
 802584c:	031b      	lsls	r3, r3, #12
 802584e:	0d9b      	lsrs	r3, r3, #22
 8025850:	b29b      	uxth	r3, r3
 8025852:	0019      	movs	r1, r3
 8025854:	200e      	movs	r0, #14
 8025856:	183b      	adds	r3, r7, r0
 8025858:	2232      	movs	r2, #50	; 0x32
 802585a:	434a      	muls	r2, r1
 802585c:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MIN(_voltage, _min_voltage);
 802585e:	0001      	movs	r1, r0
 8025860:	187a      	adds	r2, r7, r1
 8025862:	201a      	movs	r0, #26
 8025864:	183b      	adds	r3, r7, r0
 8025866:	8812      	ldrh	r2, [r2, #0]
 8025868:	881b      	ldrh	r3, [r3, #0]
 802586a:	429a      	cmp	r2, r3
 802586c:	d203      	bcs.n	8025876 <UpdateSNKPowerPort0+0x176>
 802586e:	183b      	adds	r3, r7, r0
 8025870:	187a      	adds	r2, r7, r1
 8025872:	8812      	ldrh	r2, [r2, #0]
 8025874:	801a      	strh	r2, [r3, #0]
        _voltage = GUI_DECODE_50MV(pdo.SNKVariablePDO.MaxVoltageIn50mVunits);
 8025876:	1dbb      	adds	r3, r7, #6
 8025878:	881b      	ldrh	r3, [r3, #0]
 802587a:	049b      	lsls	r3, r3, #18
 802587c:	0d9b      	lsrs	r3, r3, #22
 802587e:	b29b      	uxth	r3, r3
 8025880:	0019      	movs	r1, r3
 8025882:	200e      	movs	r0, #14
 8025884:	183b      	adds	r3, r7, r0
 8025886:	2232      	movs	r2, #50	; 0x32
 8025888:	434a      	muls	r2, r1
 802588a:	801a      	strh	r2, [r3, #0]
        GUI_UPDATE_VOLTAGE_MAX(_voltage, _max_voltage);
 802588c:	0001      	movs	r1, r0
 802588e:	187a      	adds	r2, r7, r1
 8025890:	2018      	movs	r0, #24
 8025892:	183b      	adds	r3, r7, r0
 8025894:	8812      	ldrh	r2, [r2, #0]
 8025896:	881b      	ldrh	r3, [r3, #0]
 8025898:	429a      	cmp	r2, r3
 802589a:	d903      	bls.n	80258a4 <UpdateSNKPowerPort0+0x1a4>
 802589c:	183b      	adds	r3, r7, r0
 802589e:	187a      	adds	r2, r7, r1
 80258a0:	8812      	ldrh	r2, [r2, #0]
 80258a2:	801a      	strh	r2, [r3, #0]
        _current = GUI_DECODE_10MA(pdo.SNKVariablePDO.OperationalCurrentIn10mAunits);
 80258a4:	1d3b      	adds	r3, r7, #4
 80258a6:	881b      	ldrh	r3, [r3, #0]
 80258a8:	059b      	lsls	r3, r3, #22
 80258aa:	0d9b      	lsrs	r3, r3, #22
 80258ac:	b29b      	uxth	r3, r3
 80258ae:	200c      	movs	r0, #12
 80258b0:	183a      	adds	r2, r7, r0
 80258b2:	1c19      	adds	r1, r3, #0
 80258b4:	0089      	lsls	r1, r1, #2
 80258b6:	18cb      	adds	r3, r1, r3
 80258b8:	18db      	adds	r3, r3, r3
 80258ba:	8013      	strh	r3, [r2, #0]
        GUI_UPDATE_CURRENT_MAX(_current, _max_current);
 80258bc:	183a      	adds	r2, r7, r0
 80258be:	2116      	movs	r1, #22
 80258c0:	187b      	adds	r3, r7, r1
 80258c2:	8812      	ldrh	r2, [r2, #0]
 80258c4:	881b      	ldrh	r3, [r3, #0]
 80258c6:	429a      	cmp	r2, r3
 80258c8:	d90a      	bls.n	80258e0 <UpdateSNKPowerPort0+0x1e0>
 80258ca:	187b      	adds	r3, r7, r1
 80258cc:	183a      	adds	r2, r7, r0
 80258ce:	8812      	ldrh	r2, [r2, #0]
 80258d0:	801a      	strh	r2, [r3, #0]
        break;
 80258d2:	e005      	b.n	80258e0 <UpdateSNKPowerPort0+0x1e0>
        break;
 80258d4:	46c0      	nop			; (mov r8, r8)
 80258d6:	e004      	b.n	80258e2 <UpdateSNKPowerPort0+0x1e2>
        break;
 80258d8:	46c0      	nop			; (mov r8, r8)
 80258da:	e002      	b.n	80258e2 <UpdateSNKPowerPort0+0x1e2>
        break;
 80258dc:	46c0      	nop			; (mov r8, r8)
 80258de:	e000      	b.n	80258e2 <UpdateSNKPowerPort0+0x1e2>
        break;
 80258e0:	46c0      	nop			; (mov r8, r8)
  for (uint32_t _index = 0; _index < USBPD_NbPDO[0]; _index++)
 80258e2:	693b      	ldr	r3, [r7, #16]
 80258e4:	3301      	adds	r3, #1
 80258e6:	613b      	str	r3, [r7, #16]
 80258e8:	4b15      	ldr	r3, [pc, #84]	; (8025940 <UpdateSNKPowerPort0+0x240>)
 80258ea:	781b      	ldrb	r3, [r3, #0]
 80258ec:	001a      	movs	r2, r3
 80258ee:	693b      	ldr	r3, [r7, #16]
 80258f0:	4293      	cmp	r3, r2
 80258f2:	d200      	bcs.n	80258f6 <UpdateSNKPowerPort0+0x1f6>
 80258f4:	e719      	b.n	802572a <UpdateSNKPowerPort0+0x2a>
    }
  }

  GUI_CHECK_VOLTAGE_MIN(_min_voltage,
 80258f6:	231a      	movs	r3, #26
 80258f8:	18fb      	adds	r3, r7, r3
 80258fa:	881a      	ldrh	r2, [r3, #0]
 80258fc:	4b11      	ldr	r3, [pc, #68]	; (8025944 <UpdateSNKPowerPort0+0x244>)
 80258fe:	611a      	str	r2, [r3, #16]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MinOperatingVoltageInmVunits);
  GUI_CHECK_VOLTAGE_MAX(_max_voltage,
 8025900:	2118      	movs	r1, #24
 8025902:	187b      	adds	r3, r7, r1
 8025904:	881a      	ldrh	r2, [r3, #0]
 8025906:	4b0f      	ldr	r3, [pc, #60]	; (8025944 <UpdateSNKPowerPort0+0x244>)
 8025908:	60da      	str	r2, [r3, #12]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingVoltageInmVunits);
  GUI_CHECK_CURRENT_MAX(_max_current,
 802590a:	2016      	movs	r0, #22
 802590c:	183b      	adds	r3, r7, r0
 802590e:	881a      	ldrh	r2, [r3, #0]
 8025910:	4b0c      	ldr	r3, [pc, #48]	; (8025944 <UpdateSNKPowerPort0+0x244>)
 8025912:	605a      	str	r2, [r3, #4]
                        DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
  _max_power = ((uint32_t)(_max_voltage) * (uint32_t)(_max_current)) / 1000U;
 8025914:	187b      	adds	r3, r7, r1
 8025916:	881b      	ldrh	r3, [r3, #0]
 8025918:	183a      	adds	r2, r7, r0
 802591a:	8812      	ldrh	r2, [r2, #0]
 802591c:	4353      	muls	r3, r2
 802591e:	22fa      	movs	r2, #250	; 0xfa
 8025920:	0091      	lsls	r1, r2, #2
 8025922:	0018      	movs	r0, r3
 8025924:	f7e0 fc78 	bl	8006218 <__udivsi3>
 8025928:	0003      	movs	r3, r0
 802592a:	61fb      	str	r3, [r7, #28]
  GUI_CHECK_POWER_MAX(_max_power, DPM_USER_Settings[USBPD_PORT_0].DPM_SNKRequestedPower.MaxOperatingPowerInmWunits);
 802592c:	4b05      	ldr	r3, [pc, #20]	; (8025944 <UpdateSNKPowerPort0+0x244>)
 802592e:	69fa      	ldr	r2, [r7, #28]
 8025930:	619a      	str	r2, [r3, #24]
}
 8025932:	46c0      	nop			; (mov r8, r8)
 8025934:	46bd      	mov	sp, r7
 8025936:	b008      	add	sp, #32
 8025938:	bd80      	pop	{r7, pc}
 802593a:	46c0      	nop			; (mov r8, r8)
 802593c:	20000240 	.word	0x20000240
 8025940:	2000023c 	.word	0x2000023c
 8025944:	200001c8 	.word	0x200001c8

08025948 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8025948:	b580      	push	{r7, lr}
 802594a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 802594c:	4a06      	ldr	r2, [pc, #24]	; (8025968 <TRACER_EMB_Init+0x20>)
 802594e:	4b07      	ldr	r3, [pc, #28]	; (802596c <TRACER_EMB_Init+0x24>)
 8025950:	2100      	movs	r1, #0
 8025952:	0018      	movs	r0, r3
 8025954:	f002 f884 	bl	8027a60 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8025958:	f000 fe22 	bl	80265a0 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 802595c:	f000 f9d8 	bl	8025d10 <TRACER_EMB_LowPowerInit>
}
 8025960:	46c0      	nop			; (mov r8, r8)
 8025962:	46bd      	mov	sp, r7
 8025964:	bd80      	pop	{r7, pc}
 8025966:	46c0      	nop			; (mov r8, r8)
 8025968:	0000041c 	.word	0x0000041c
 802596c:	200050e4 	.word	0x200050e4

08025970 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 8025970:	b580      	push	{r7, lr}
 8025972:	b086      	sub	sp, #24
 8025974:	af00      	add	r7, sp, #0
 8025976:	6078      	str	r0, [r7, #4]
 8025978:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 802597e:	f000 f8d3 	bl	8025b28 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 8025982:	683b      	ldr	r3, [r7, #0]
 8025984:	0018      	movs	r0, r3
 8025986:	f000 f969 	bl	8025c5c <TRACER_EMB_AllocateBufer>
 802598a:	0003      	movs	r3, r0
 802598c:	617b      	str	r3, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 802598e:	697b      	ldr	r3, [r7, #20]
 8025990:	3301      	adds	r3, #1
 8025992:	d023      	beq.n	80259dc <TRACER_EMB_Add+0x6c>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 8025994:	2300      	movs	r3, #0
 8025996:	613b      	str	r3, [r7, #16]
 8025998:	e01c      	b.n	80259d4 <TRACER_EMB_Add+0x64>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 802599a:	68fa      	ldr	r2, [r7, #12]
 802599c:	693b      	ldr	r3, [r7, #16]
 802599e:	18d2      	adds	r2, r2, r3
 80259a0:	697b      	ldr	r3, [r7, #20]
 80259a2:	4912      	ldr	r1, [pc, #72]	; (80259ec <TRACER_EMB_Add+0x7c>)
 80259a4:	400b      	ands	r3, r1
 80259a6:	d503      	bpl.n	80259b0 <TRACER_EMB_Add+0x40>
 80259a8:	3b01      	subs	r3, #1
 80259aa:	4911      	ldr	r1, [pc, #68]	; (80259f0 <TRACER_EMB_Add+0x80>)
 80259ac:	430b      	orrs	r3, r1
 80259ae:	3301      	adds	r3, #1
 80259b0:	0019      	movs	r1, r3
 80259b2:	7812      	ldrb	r2, [r2, #0]
 80259b4:	4b0f      	ldr	r3, [pc, #60]	; (80259f4 <TRACER_EMB_Add+0x84>)
 80259b6:	185b      	adds	r3, r3, r1
 80259b8:	76da      	strb	r2, [r3, #27]
 80259ba:	697b      	ldr	r3, [r7, #20]
 80259bc:	3301      	adds	r3, #1
 80259be:	4a0b      	ldr	r2, [pc, #44]	; (80259ec <TRACER_EMB_Add+0x7c>)
 80259c0:	4013      	ands	r3, r2
 80259c2:	d503      	bpl.n	80259cc <TRACER_EMB_Add+0x5c>
 80259c4:	3b01      	subs	r3, #1
 80259c6:	4a0a      	ldr	r2, [pc, #40]	; (80259f0 <TRACER_EMB_Add+0x80>)
 80259c8:	4313      	orrs	r3, r2
 80259ca:	3301      	adds	r3, #1
 80259cc:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 80259ce:	693b      	ldr	r3, [r7, #16]
 80259d0:	3301      	adds	r3, #1
 80259d2:	613b      	str	r3, [r7, #16]
 80259d4:	693a      	ldr	r2, [r7, #16]
 80259d6:	683b      	ldr	r3, [r7, #0]
 80259d8:	429a      	cmp	r2, r3
 80259da:	d3de      	bcc.n	802599a <TRACER_EMB_Add+0x2a>
    }
  }
  TRACER_EMB_UnLock();
 80259dc:	f000 f8c2 	bl	8025b64 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 80259e0:	f000 f8de 	bl	8025ba0 <TRACER_EMB_SendData>
}
 80259e4:	46c0      	nop			; (mov r8, r8)
 80259e6:	46bd      	mov	sp, r7
 80259e8:	b006      	add	sp, #24
 80259ea:	bd80      	pop	{r7, pc}
 80259ec:	800003ff 	.word	0x800003ff
 80259f0:	fffffc00 	.word	0xfffffc00
 80259f4:	200050e4 	.word	0x200050e4

080259f8 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 80259f8:	b580      	push	{r7, lr}
 80259fa:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 80259fc:	f000 febc 	bl	8026778 <HW_TRACER_EMB_IRQHandlerDMA>
}
 8025a00:	46c0      	nop			; (mov r8, r8)
 8025a02:	46bd      	mov	sp, r7
 8025a04:	bd80      	pop	{r7, pc}

08025a06 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 8025a06:	b580      	push	{r7, lr}
 8025a08:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 8025a0a:	f000 fecd 	bl	80267a8 <HW_TRACER_EMB_IRQHandlerUSART>
}
 8025a0e:	46c0      	nop			; (mov r8, r8)
 8025a10:	46bd      	mov	sp, r7
 8025a12:	bd80      	pop	{r7, pc}

08025a14 <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 8025a14:	b580      	push	{r7, lr}
 8025a16:	b082      	sub	sp, #8
 8025a18:	af00      	add	r7, sp, #0
 8025a1a:	0002      	movs	r2, r0
 8025a1c:	1dbb      	adds	r3, r7, #6
 8025a1e:	801a      	strh	r2, [r3, #0]
 8025a20:	1d7b      	adds	r3, r7, #5
 8025a22:	1c0a      	adds	r2, r1, #0
 8025a24:	701a      	strb	r2, [r3, #0]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 8025a26:	1dbb      	adds	r3, r7, #6
 8025a28:	881b      	ldrh	r3, [r3, #0]
 8025a2a:	059b      	lsls	r3, r3, #22
 8025a2c:	0d9b      	lsrs	r3, r3, #22
 8025a2e:	4a04      	ldr	r2, [pc, #16]	; (8025a40 <TRACER_EMB_WriteData+0x2c>)
 8025a30:	18d3      	adds	r3, r2, r3
 8025a32:	1d7a      	adds	r2, r7, #5
 8025a34:	7812      	ldrb	r2, [r2, #0]
 8025a36:	76da      	strb	r2, [r3, #27]
}
 8025a38:	46c0      	nop			; (mov r8, r8)
 8025a3a:	46bd      	mov	sp, r7
 8025a3c:	b002      	add	sp, #8
 8025a3e:	bd80      	pop	{r7, pc}
 8025a40:	200050e4 	.word	0x200050e4

08025a44 <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 8025a44:	b580      	push	{r7, lr}
 8025a46:	b082      	sub	sp, #8
 8025a48:	af00      	add	r7, sp, #0
 8025a4a:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	0018      	movs	r0, r3
 8025a50:	f000 fe66 	bl	8026720 <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 8025a54:	f000 fe76 	bl	8026744 <HW_TRACER_EMB_StartRX>
}
 8025a58:	46c0      	nop			; (mov r8, r8)
 8025a5a:	46bd      	mov	sp, r7
 8025a5c:	b002      	add	sp, #8
 8025a5e:	bd80      	pop	{r7, pc}

08025a60 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 8025a60:	b580      	push	{r7, lr}
 8025a62:	b082      	sub	sp, #8
 8025a64:	af00      	add	r7, sp, #0
 8025a66:	6078      	str	r0, [r7, #4]
 8025a68:	000a      	movs	r2, r1
 8025a6a:	1cfb      	adds	r3, r7, #3
 8025a6c:	701a      	strb	r2, [r3, #0]
  if (Size != 0U)
 8025a6e:	1cfb      	adds	r3, r7, #3
 8025a70:	781b      	ldrb	r3, [r3, #0]
 8025a72:	2b00      	cmp	r3, #0
 8025a74:	d008      	beq.n	8025a88 <TRACER_EMB_EnableOverFlow+0x28>
  {
    TracerContext.OverFlow_Data = Data;
 8025a76:	4b07      	ldr	r3, [pc, #28]	; (8025a94 <TRACER_EMB_EnableOverFlow+0x34>)
 8025a78:	687a      	ldr	r2, [r7, #4]
 8025a7a:	615a      	str	r2, [r3, #20]
    TracerContext.OverFlow_Size = Size;
 8025a7c:	4b05      	ldr	r3, [pc, #20]	; (8025a94 <TRACER_EMB_EnableOverFlow+0x34>)
 8025a7e:	1cfa      	adds	r2, r7, #3
 8025a80:	7812      	ldrb	r2, [r2, #0]
 8025a82:	761a      	strb	r2, [r3, #24]
    return 0;
 8025a84:	2300      	movs	r3, #0
 8025a86:	e001      	b.n	8025a8c <TRACER_EMB_EnableOverFlow+0x2c>
  }
  return -1;
 8025a88:	2301      	movs	r3, #1
 8025a8a:	425b      	negs	r3, r3
}
 8025a8c:	0018      	movs	r0, r3
 8025a8e:	46bd      	mov	sp, r7
 8025a90:	b002      	add	sp, #8
 8025a92:	bd80      	pop	{r7, pc}
 8025a94:	200050e4 	.word	0x200050e4

08025a98 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8025a98:	b580      	push	{r7, lr}
 8025a9a:	b084      	sub	sp, #16
 8025a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8025aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8025aa4:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 8025aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8025aa8:	b672      	cpsid	i
}
 8025aaa:	46c0      	nop			; (mov r8, r8)
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 8025aac:	4b1d      	ldr	r3, [pc, #116]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025aae:	681a      	ldr	r2, [r3, #0]
 8025ab0:	4b1c      	ldr	r3, [pc, #112]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ab2:	689b      	ldr	r3, [r3, #8]
 8025ab4:	18d3      	adds	r3, r2, r3
 8025ab6:	059b      	lsls	r3, r3, #22
 8025ab8:	0d9a      	lsrs	r2, r3, #22
 8025aba:	4b1a      	ldr	r3, [pc, #104]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025abc:	601a      	str	r2, [r3, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 8025abe:	4b19      	ldr	r3, [pc, #100]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ac0:	695b      	ldr	r3, [r3, #20]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	d019      	beq.n	8025afa <TRACER_EMB_CALLBACK_TX+0x62>
 8025ac6:	4b17      	ldr	r3, [pc, #92]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ac8:	7e9b      	ldrb	r3, [r3, #26]
 8025aca:	2b01      	cmp	r3, #1
 8025acc:	d115      	bne.n	8025afa <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 8025ace:	4b15      	ldr	r3, [pc, #84]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ad0:	7e5b      	ldrb	r3, [r3, #25]
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	d111      	bne.n	8025afa <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 8025ad6:	4b13      	ldr	r3, [pc, #76]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ad8:	2202      	movs	r2, #2
 8025ada:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 8025adc:	4b11      	ldr	r3, [pc, #68]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ade:	695a      	ldr	r2, [r3, #20]
 8025ae0:	4b10      	ldr	r3, [pc, #64]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025ae2:	7e1b      	ldrb	r3, [r3, #24]
 8025ae4:	0019      	movs	r1, r3
 8025ae6:	0010      	movs	r0, r2
 8025ae8:	f000 ff2c 	bl	8026944 <HW_TRACER_EMB_SendData>
 8025aec:	68fb      	ldr	r3, [r7, #12]
 8025aee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025af0:	687b      	ldr	r3, [r7, #4]
 8025af2:	f383 8810 	msr	PRIMASK, r3
}
 8025af6:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
 8025af8:	e00f      	b.n	8025b1a <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 8025afa:	4b0a      	ldr	r3, [pc, #40]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025afc:	68db      	ldr	r3, [r3, #12]
 8025afe:	1e5a      	subs	r2, r3, #1
 8025b00:	4b08      	ldr	r3, [pc, #32]	; (8025b24 <TRACER_EMB_CALLBACK_TX+0x8c>)
 8025b02:	60da      	str	r2, [r3, #12]
 8025b04:	68fb      	ldr	r3, [r7, #12]
 8025b06:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025b08:	683b      	ldr	r3, [r7, #0]
 8025b0a:	f383 8810 	msr	PRIMASK, r3
}
 8025b0e:	46c0      	nop			; (mov r8, r8)
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 8025b10:	f000 f828 	bl	8025b64 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 8025b14:	f000 f844 	bl	8025ba0 <TRACER_EMB_SendData>
  }
}
 8025b18:	46c0      	nop			; (mov r8, r8)
 8025b1a:	46c0      	nop			; (mov r8, r8)
 8025b1c:	46bd      	mov	sp, r7
 8025b1e:	b004      	add	sp, #16
 8025b20:	bd80      	pop	{r7, pc}
 8025b22:	46c0      	nop			; (mov r8, r8)
 8025b24:	200050e4 	.word	0x200050e4

08025b28 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 8025b28:	b580      	push	{r7, lr}
 8025b2a:	b084      	sub	sp, #16
 8025b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8025b32:	607b      	str	r3, [r7, #4]
  return(result);
 8025b34:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8025b36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8025b38:	b672      	cpsid	i
}
 8025b3a:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter++;
 8025b3c:	4b08      	ldr	r3, [pc, #32]	; (8025b60 <TRACER_EMB_Lock+0x38>)
 8025b3e:	7c1b      	ldrb	r3, [r3, #16]
 8025b40:	b2db      	uxtb	r3, r3
 8025b42:	3301      	adds	r3, #1
 8025b44:	b2da      	uxtb	r2, r3
 8025b46:	4b06      	ldr	r3, [pc, #24]	; (8025b60 <TRACER_EMB_Lock+0x38>)
 8025b48:	741a      	strb	r2, [r3, #16]
 8025b4a:	68fb      	ldr	r3, [r7, #12]
 8025b4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025b4e:	68bb      	ldr	r3, [r7, #8]
 8025b50:	f383 8810 	msr	PRIMASK, r3
}
 8025b54:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8025b56:	46c0      	nop			; (mov r8, r8)
 8025b58:	46bd      	mov	sp, r7
 8025b5a:	b004      	add	sp, #16
 8025b5c:	bd80      	pop	{r7, pc}
 8025b5e:	46c0      	nop			; (mov r8, r8)
 8025b60:	200050e4 	.word	0x200050e4

08025b64 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 8025b64:	b580      	push	{r7, lr}
 8025b66:	b084      	sub	sp, #16
 8025b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8025b6e:	607b      	str	r3, [r7, #4]
  return(result);
 8025b70:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 8025b72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8025b74:	b672      	cpsid	i
}
 8025b76:	46c0      	nop			; (mov r8, r8)
  TracerContext.Counter--;
 8025b78:	4b08      	ldr	r3, [pc, #32]	; (8025b9c <TRACER_EMB_UnLock+0x38>)
 8025b7a:	7c1b      	ldrb	r3, [r3, #16]
 8025b7c:	b2db      	uxtb	r3, r3
 8025b7e:	3b01      	subs	r3, #1
 8025b80:	b2da      	uxtb	r2, r3
 8025b82:	4b06      	ldr	r3, [pc, #24]	; (8025b9c <TRACER_EMB_UnLock+0x38>)
 8025b84:	741a      	strb	r2, [r3, #16]
 8025b86:	68fb      	ldr	r3, [r7, #12]
 8025b88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025b8a:	68bb      	ldr	r3, [r7, #8]
 8025b8c:	f383 8810 	msr	PRIMASK, r3
}
 8025b90:	46c0      	nop			; (mov r8, r8)
  TRACER_LEAVE_CRITICAL_SECTION();
}
 8025b92:	46c0      	nop			; (mov r8, r8)
 8025b94:	46bd      	mov	sp, r7
 8025b96:	b004      	add	sp, #16
 8025b98:	bd80      	pop	{r7, pc}
 8025b9a:	46c0      	nop			; (mov r8, r8)
 8025b9c:	200050e4 	.word	0x200050e4

08025ba0 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8025ba0:	b580      	push	{r7, lr}
 8025ba2:	b086      	sub	sp, #24
 8025ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8025baa:	60bb      	str	r3, [r7, #8]
  return(result);
 8025bac:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 8025bae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8025bb0:	b672      	cpsid	i
}
 8025bb2:	46c0      	nop			; (mov r8, r8)

  if (0u == TracerContext.Counter)
 8025bb4:	4b28      	ldr	r3, [pc, #160]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bb6:	7c1b      	ldrb	r3, [r3, #16]
 8025bb8:	b2db      	uxtb	r3, r3
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d134      	bne.n	8025c28 <TRACER_EMB_SendData+0x88>
  {
    _begin = TracerContext.PtrTx_Read;
 8025bbe:	4b26      	ldr	r3, [pc, #152]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bc0:	681b      	ldr	r3, [r3, #0]
 8025bc2:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8025bc4:	4b24      	ldr	r3, [pc, #144]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bc6:	685b      	ldr	r3, [r3, #4]
 8025bc8:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 8025bca:	693a      	ldr	r2, [r7, #16]
 8025bcc:	68fb      	ldr	r3, [r7, #12]
 8025bce:	429a      	cmp	r2, r3
 8025bd0:	d02a      	beq.n	8025c28 <TRACER_EMB_SendData+0x88>
    {
      TRACER_EMB_Lock();
 8025bd2:	f7ff ffa9 	bl	8025b28 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 8025bd6:	68fa      	ldr	r2, [r7, #12]
 8025bd8:	693b      	ldr	r3, [r7, #16]
 8025bda:	429a      	cmp	r2, r3
 8025bdc:	d908      	bls.n	8025bf0 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 8025bde:	68fa      	ldr	r2, [r7, #12]
 8025be0:	693b      	ldr	r3, [r7, #16]
 8025be2:	1ad2      	subs	r2, r2, r3
 8025be4:	4b1c      	ldr	r3, [pc, #112]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025be6:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 0;
 8025be8:	4b1b      	ldr	r3, [pc, #108]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bea:	2200      	movs	r2, #0
 8025bec:	765a      	strb	r2, [r3, #25]
 8025bee:	e008      	b.n	8025c02 <TRACER_EMB_SendData+0x62>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 8025bf0:	693b      	ldr	r3, [r7, #16]
 8025bf2:	2280      	movs	r2, #128	; 0x80
 8025bf4:	00d2      	lsls	r2, r2, #3
 8025bf6:	1ad2      	subs	r2, r2, r3
 8025bf8:	4b17      	ldr	r3, [pc, #92]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bfa:	609a      	str	r2, [r3, #8]
        TracerContext.discontinue = 1;
 8025bfc:	4b16      	ldr	r3, [pc, #88]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025bfe:	2201      	movs	r2, #1
 8025c00:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 8025c02:	f000 f88a 	bl	8025d1a <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 8025c06:	4b14      	ldr	r3, [pc, #80]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025c08:	68db      	ldr	r3, [r3, #12]
 8025c0a:	1c5a      	adds	r2, r3, #1
 8025c0c:	4b12      	ldr	r3, [pc, #72]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025c0e:	60da      	str	r2, [r3, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 8025c10:	693b      	ldr	r3, [r7, #16]
 8025c12:	3318      	adds	r3, #24
 8025c14:	001a      	movs	r2, r3
 8025c16:	4b10      	ldr	r3, [pc, #64]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025c18:	18d3      	adds	r3, r2, r3
 8025c1a:	1cda      	adds	r2, r3, #3
 8025c1c:	4b0e      	ldr	r3, [pc, #56]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025c1e:	689b      	ldr	r3, [r3, #8]
 8025c20:	0019      	movs	r1, r3
 8025c22:	0010      	movs	r0, r2
 8025c24:	f000 fe8e 	bl	8026944 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 8025c28:	4b0b      	ldr	r3, [pc, #44]	; (8025c58 <TRACER_EMB_SendData+0xb8>)
 8025c2a:	68db      	ldr	r3, [r3, #12]
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	d004      	beq.n	8025c3a <TRACER_EMB_SendData+0x9a>
 8025c30:	2b01      	cmp	r3, #1
 8025c32:	d105      	bne.n	8025c40 <TRACER_EMB_SendData+0xa0>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8025c34:	f000 f871 	bl	8025d1a <TRACER_EMB_LowPowerSendData>
      break;
 8025c38:	e003      	b.n	8025c42 <TRACER_EMB_SendData+0xa2>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 8025c3a:	f000 f873 	bl	8025d24 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 8025c3e:	e000      	b.n	8025c42 <TRACER_EMB_SendData+0xa2>
    default:
      break;
 8025c40:	46c0      	nop			; (mov r8, r8)
 8025c42:	697b      	ldr	r3, [r7, #20]
 8025c44:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025c46:	687b      	ldr	r3, [r7, #4]
 8025c48:	f383 8810 	msr	PRIMASK, r3
}
 8025c4c:	46c0      	nop			; (mov r8, r8)
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 8025c4e:	46c0      	nop			; (mov r8, r8)
 8025c50:	46bd      	mov	sp, r7
 8025c52:	b006      	add	sp, #24
 8025c54:	bd80      	pop	{r7, pc}
 8025c56:	46c0      	nop			; (mov r8, r8)
 8025c58:	200050e4 	.word	0x200050e4

08025c5c <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 8025c5c:	b580      	push	{r7, lr}
 8025c5e:	b088      	sub	sp, #32
 8025c60:	af00      	add	r7, sp, #0
 8025c62:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 8025c64:	2301      	movs	r3, #1
 8025c66:	425b      	negs	r3, r3
 8025c68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8025c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8025c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8025c70:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 8025c72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8025c74:	b672      	cpsid	i
}
 8025c76:	46c0      	nop			; (mov r8, r8)

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8025c78:	4b24      	ldr	r3, [pc, #144]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c7a:	685a      	ldr	r2, [r3, #4]
 8025c7c:	4b23      	ldr	r3, [pc, #140]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c7e:	681b      	ldr	r3, [r3, #0]
 8025c80:	429a      	cmp	r2, r3
 8025c82:	d103      	bne.n	8025c8c <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8025c84:	2380      	movs	r3, #128	; 0x80
 8025c86:	00db      	lsls	r3, r3, #3
 8025c88:	61fb      	str	r3, [r7, #28]
 8025c8a:	e016      	b.n	8025cba <TRACER_EMB_AllocateBufer+0x5e>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8025c8c:	4b1f      	ldr	r3, [pc, #124]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c8e:	685a      	ldr	r2, [r3, #4]
 8025c90:	4b1e      	ldr	r3, [pc, #120]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c92:	681b      	ldr	r3, [r3, #0]
 8025c94:	429a      	cmp	r2, r3
 8025c96:	d90a      	bls.n	8025cae <TRACER_EMB_AllocateBufer+0x52>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8025c98:	4b1c      	ldr	r3, [pc, #112]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c9a:	681a      	ldr	r2, [r3, #0]
 8025c9c:	4b1b      	ldr	r3, [pc, #108]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025c9e:	685b      	ldr	r3, [r3, #4]
 8025ca0:	1ad3      	subs	r3, r2, r3
 8025ca2:	2280      	movs	r2, #128	; 0x80
 8025ca4:	00d2      	lsls	r2, r2, #3
 8025ca6:	4694      	mov	ip, r2
 8025ca8:	4463      	add	r3, ip
 8025caa:	61fb      	str	r3, [r7, #28]
 8025cac:	e005      	b.n	8025cba <TRACER_EMB_AllocateBufer+0x5e>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 8025cae:	4b17      	ldr	r3, [pc, #92]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cb0:	681a      	ldr	r2, [r3, #0]
 8025cb2:	4b16      	ldr	r3, [pc, #88]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cb4:	685b      	ldr	r3, [r3, #4]
 8025cb6:	1ad3      	subs	r3, r2, r3
 8025cb8:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 8025cba:	69fa      	ldr	r2, [r7, #28]
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	429a      	cmp	r2, r3
 8025cc0:	d912      	bls.n	8025ce8 <TRACER_EMB_AllocateBufer+0x8c>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 8025cc2:	4b12      	ldr	r3, [pc, #72]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cc4:	685b      	ldr	r3, [r3, #4]
 8025cc6:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8025cc8:	4b10      	ldr	r3, [pc, #64]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cca:	685a      	ldr	r2, [r3, #4]
 8025ccc:	687b      	ldr	r3, [r7, #4]
 8025cce:	18d3      	adds	r3, r2, r3
 8025cd0:	059b      	lsls	r3, r3, #22
 8025cd2:	0d9a      	lsrs	r2, r3, #22
 8025cd4:	4b0d      	ldr	r3, [pc, #52]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cd6:	605a      	str	r2, [r3, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 8025cd8:	4b0c      	ldr	r3, [pc, #48]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cda:	7e9b      	ldrb	r3, [r3, #26]
 8025cdc:	2b02      	cmp	r3, #2
 8025cde:	d10a      	bne.n	8025cf6 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 8025ce0:	4b0a      	ldr	r3, [pc, #40]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025ce2:	2200      	movs	r2, #0
 8025ce4:	769a      	strb	r2, [r3, #26]
 8025ce6:	e006      	b.n	8025cf6 <TRACER_EMB_AllocateBufer+0x9a>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 8025ce8:	4b08      	ldr	r3, [pc, #32]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cea:	7e9b      	ldrb	r3, [r3, #26]
 8025cec:	2b00      	cmp	r3, #0
 8025cee:	d102      	bne.n	8025cf6 <TRACER_EMB_AllocateBufer+0x9a>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 8025cf0:	4b06      	ldr	r3, [pc, #24]	; (8025d0c <TRACER_EMB_AllocateBufer+0xb0>)
 8025cf2:	2201      	movs	r2, #1
 8025cf4:	769a      	strb	r2, [r3, #26]
 8025cf6:	697b      	ldr	r3, [r7, #20]
 8025cf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	f383 8810 	msr	PRIMASK, r3
}
 8025d00:	46c0      	nop			; (mov r8, r8)
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 8025d02:	69bb      	ldr	r3, [r7, #24]
}
 8025d04:	0018      	movs	r0, r3
 8025d06:	46bd      	mov	sp, r7
 8025d08:	b008      	add	sp, #32
 8025d0a:	bd80      	pop	{r7, pc}
 8025d0c:	200050e4 	.word	0x200050e4

08025d10 <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 8025d10:	b580      	push	{r7, lr}
 8025d12:	af00      	add	r7, sp, #0
}
 8025d14:	46c0      	nop			; (mov r8, r8)
 8025d16:	46bd      	mov	sp, r7
 8025d18:	bd80      	pop	{r7, pc}

08025d1a <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 8025d1a:	b580      	push	{r7, lr}
 8025d1c:	af00      	add	r7, sp, #0
}
 8025d1e:	46c0      	nop			; (mov r8, r8)
 8025d20:	46bd      	mov	sp, r7
 8025d22:	bd80      	pop	{r7, pc}

08025d24 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 8025d24:	b580      	push	{r7, lr}
 8025d26:	af00      	add	r7, sp, #0
}
 8025d28:	46c0      	nop			; (mov r8, r8)
 8025d2a:	46bd      	mov	sp, r7
 8025d2c:	bd80      	pop	{r7, pc}
	...

08025d30 <__NVIC_EnableIRQ>:
{
 8025d30:	b580      	push	{r7, lr}
 8025d32:	b082      	sub	sp, #8
 8025d34:	af00      	add	r7, sp, #0
 8025d36:	0002      	movs	r2, r0
 8025d38:	1dfb      	adds	r3, r7, #7
 8025d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8025d3c:	1dfb      	adds	r3, r7, #7
 8025d3e:	781b      	ldrb	r3, [r3, #0]
 8025d40:	2b7f      	cmp	r3, #127	; 0x7f
 8025d42:	d809      	bhi.n	8025d58 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8025d44:	1dfb      	adds	r3, r7, #7
 8025d46:	781b      	ldrb	r3, [r3, #0]
 8025d48:	001a      	movs	r2, r3
 8025d4a:	231f      	movs	r3, #31
 8025d4c:	401a      	ands	r2, r3
 8025d4e:	4b04      	ldr	r3, [pc, #16]	; (8025d60 <__NVIC_EnableIRQ+0x30>)
 8025d50:	2101      	movs	r1, #1
 8025d52:	4091      	lsls	r1, r2
 8025d54:	000a      	movs	r2, r1
 8025d56:	601a      	str	r2, [r3, #0]
}
 8025d58:	46c0      	nop			; (mov r8, r8)
 8025d5a:	46bd      	mov	sp, r7
 8025d5c:	b002      	add	sp, #8
 8025d5e:	bd80      	pop	{r7, pc}
 8025d60:	e000e100 	.word	0xe000e100

08025d64 <__NVIC_SetPriority>:
{
 8025d64:	b590      	push	{r4, r7, lr}
 8025d66:	b083      	sub	sp, #12
 8025d68:	af00      	add	r7, sp, #0
 8025d6a:	0002      	movs	r2, r0
 8025d6c:	6039      	str	r1, [r7, #0]
 8025d6e:	1dfb      	adds	r3, r7, #7
 8025d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8025d72:	1dfb      	adds	r3, r7, #7
 8025d74:	781b      	ldrb	r3, [r3, #0]
 8025d76:	2b7f      	cmp	r3, #127	; 0x7f
 8025d78:	d828      	bhi.n	8025dcc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8025d7a:	4a2f      	ldr	r2, [pc, #188]	; (8025e38 <__NVIC_SetPriority+0xd4>)
 8025d7c:	1dfb      	adds	r3, r7, #7
 8025d7e:	781b      	ldrb	r3, [r3, #0]
 8025d80:	b25b      	sxtb	r3, r3
 8025d82:	089b      	lsrs	r3, r3, #2
 8025d84:	33c0      	adds	r3, #192	; 0xc0
 8025d86:	009b      	lsls	r3, r3, #2
 8025d88:	589b      	ldr	r3, [r3, r2]
 8025d8a:	1dfa      	adds	r2, r7, #7
 8025d8c:	7812      	ldrb	r2, [r2, #0]
 8025d8e:	0011      	movs	r1, r2
 8025d90:	2203      	movs	r2, #3
 8025d92:	400a      	ands	r2, r1
 8025d94:	00d2      	lsls	r2, r2, #3
 8025d96:	21ff      	movs	r1, #255	; 0xff
 8025d98:	4091      	lsls	r1, r2
 8025d9a:	000a      	movs	r2, r1
 8025d9c:	43d2      	mvns	r2, r2
 8025d9e:	401a      	ands	r2, r3
 8025da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8025da2:	683b      	ldr	r3, [r7, #0]
 8025da4:	019b      	lsls	r3, r3, #6
 8025da6:	22ff      	movs	r2, #255	; 0xff
 8025da8:	401a      	ands	r2, r3
 8025daa:	1dfb      	adds	r3, r7, #7
 8025dac:	781b      	ldrb	r3, [r3, #0]
 8025dae:	0018      	movs	r0, r3
 8025db0:	2303      	movs	r3, #3
 8025db2:	4003      	ands	r3, r0
 8025db4:	00db      	lsls	r3, r3, #3
 8025db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8025db8:	481f      	ldr	r0, [pc, #124]	; (8025e38 <__NVIC_SetPriority+0xd4>)
 8025dba:	1dfb      	adds	r3, r7, #7
 8025dbc:	781b      	ldrb	r3, [r3, #0]
 8025dbe:	b25b      	sxtb	r3, r3
 8025dc0:	089b      	lsrs	r3, r3, #2
 8025dc2:	430a      	orrs	r2, r1
 8025dc4:	33c0      	adds	r3, #192	; 0xc0
 8025dc6:	009b      	lsls	r3, r3, #2
 8025dc8:	501a      	str	r2, [r3, r0]
}
 8025dca:	e031      	b.n	8025e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8025dcc:	4a1b      	ldr	r2, [pc, #108]	; (8025e3c <__NVIC_SetPriority+0xd8>)
 8025dce:	1dfb      	adds	r3, r7, #7
 8025dd0:	781b      	ldrb	r3, [r3, #0]
 8025dd2:	0019      	movs	r1, r3
 8025dd4:	230f      	movs	r3, #15
 8025dd6:	400b      	ands	r3, r1
 8025dd8:	3b08      	subs	r3, #8
 8025dda:	089b      	lsrs	r3, r3, #2
 8025ddc:	3306      	adds	r3, #6
 8025dde:	009b      	lsls	r3, r3, #2
 8025de0:	18d3      	adds	r3, r2, r3
 8025de2:	3304      	adds	r3, #4
 8025de4:	681b      	ldr	r3, [r3, #0]
 8025de6:	1dfa      	adds	r2, r7, #7
 8025de8:	7812      	ldrb	r2, [r2, #0]
 8025dea:	0011      	movs	r1, r2
 8025dec:	2203      	movs	r2, #3
 8025dee:	400a      	ands	r2, r1
 8025df0:	00d2      	lsls	r2, r2, #3
 8025df2:	21ff      	movs	r1, #255	; 0xff
 8025df4:	4091      	lsls	r1, r2
 8025df6:	000a      	movs	r2, r1
 8025df8:	43d2      	mvns	r2, r2
 8025dfa:	401a      	ands	r2, r3
 8025dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8025dfe:	683b      	ldr	r3, [r7, #0]
 8025e00:	019b      	lsls	r3, r3, #6
 8025e02:	22ff      	movs	r2, #255	; 0xff
 8025e04:	401a      	ands	r2, r3
 8025e06:	1dfb      	adds	r3, r7, #7
 8025e08:	781b      	ldrb	r3, [r3, #0]
 8025e0a:	0018      	movs	r0, r3
 8025e0c:	2303      	movs	r3, #3
 8025e0e:	4003      	ands	r3, r0
 8025e10:	00db      	lsls	r3, r3, #3
 8025e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8025e14:	4809      	ldr	r0, [pc, #36]	; (8025e3c <__NVIC_SetPriority+0xd8>)
 8025e16:	1dfb      	adds	r3, r7, #7
 8025e18:	781b      	ldrb	r3, [r3, #0]
 8025e1a:	001c      	movs	r4, r3
 8025e1c:	230f      	movs	r3, #15
 8025e1e:	4023      	ands	r3, r4
 8025e20:	3b08      	subs	r3, #8
 8025e22:	089b      	lsrs	r3, r3, #2
 8025e24:	430a      	orrs	r2, r1
 8025e26:	3306      	adds	r3, #6
 8025e28:	009b      	lsls	r3, r3, #2
 8025e2a:	18c3      	adds	r3, r0, r3
 8025e2c:	3304      	adds	r3, #4
 8025e2e:	601a      	str	r2, [r3, #0]
}
 8025e30:	46c0      	nop			; (mov r8, r8)
 8025e32:	46bd      	mov	sp, r7
 8025e34:	b003      	add	sp, #12
 8025e36:	bd90      	pop	{r4, r7, pc}
 8025e38:	e000e100 	.word	0xe000e100
 8025e3c:	e000ed00 	.word	0xe000ed00

08025e40 <LL_DMA_EnableChannel>:
{
 8025e40:	b580      	push	{r7, lr}
 8025e42:	b084      	sub	sp, #16
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	6078      	str	r0, [r7, #4]
 8025e48:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025e4a:	687b      	ldr	r3, [r7, #4]
 8025e4c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8025e4e:	4a0b      	ldr	r2, [pc, #44]	; (8025e7c <LL_DMA_EnableChannel+0x3c>)
 8025e50:	683b      	ldr	r3, [r7, #0]
 8025e52:	18d3      	adds	r3, r2, r3
 8025e54:	781b      	ldrb	r3, [r3, #0]
 8025e56:	001a      	movs	r2, r3
 8025e58:	68fb      	ldr	r3, [r7, #12]
 8025e5a:	18d3      	adds	r3, r2, r3
 8025e5c:	681a      	ldr	r2, [r3, #0]
 8025e5e:	4907      	ldr	r1, [pc, #28]	; (8025e7c <LL_DMA_EnableChannel+0x3c>)
 8025e60:	683b      	ldr	r3, [r7, #0]
 8025e62:	18cb      	adds	r3, r1, r3
 8025e64:	781b      	ldrb	r3, [r3, #0]
 8025e66:	0019      	movs	r1, r3
 8025e68:	68fb      	ldr	r3, [r7, #12]
 8025e6a:	18cb      	adds	r3, r1, r3
 8025e6c:	2101      	movs	r1, #1
 8025e6e:	430a      	orrs	r2, r1
 8025e70:	601a      	str	r2, [r3, #0]
}
 8025e72:	46c0      	nop			; (mov r8, r8)
 8025e74:	46bd      	mov	sp, r7
 8025e76:	b004      	add	sp, #16
 8025e78:	bd80      	pop	{r7, pc}
 8025e7a:	46c0      	nop			; (mov r8, r8)
 8025e7c:	0802b978 	.word	0x0802b978

08025e80 <LL_DMA_DisableChannel>:
{
 8025e80:	b580      	push	{r7, lr}
 8025e82:	b084      	sub	sp, #16
 8025e84:	af00      	add	r7, sp, #0
 8025e86:	6078      	str	r0, [r7, #4]
 8025e88:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025e8a:	687b      	ldr	r3, [r7, #4]
 8025e8c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8025e8e:	4a0b      	ldr	r2, [pc, #44]	; (8025ebc <LL_DMA_DisableChannel+0x3c>)
 8025e90:	683b      	ldr	r3, [r7, #0]
 8025e92:	18d3      	adds	r3, r2, r3
 8025e94:	781b      	ldrb	r3, [r3, #0]
 8025e96:	001a      	movs	r2, r3
 8025e98:	68fb      	ldr	r3, [r7, #12]
 8025e9a:	18d3      	adds	r3, r2, r3
 8025e9c:	681a      	ldr	r2, [r3, #0]
 8025e9e:	4907      	ldr	r1, [pc, #28]	; (8025ebc <LL_DMA_DisableChannel+0x3c>)
 8025ea0:	683b      	ldr	r3, [r7, #0]
 8025ea2:	18cb      	adds	r3, r1, r3
 8025ea4:	781b      	ldrb	r3, [r3, #0]
 8025ea6:	0019      	movs	r1, r3
 8025ea8:	68fb      	ldr	r3, [r7, #12]
 8025eaa:	18cb      	adds	r3, r1, r3
 8025eac:	2101      	movs	r1, #1
 8025eae:	438a      	bics	r2, r1
 8025eb0:	601a      	str	r2, [r3, #0]
}
 8025eb2:	46c0      	nop			; (mov r8, r8)
 8025eb4:	46bd      	mov	sp, r7
 8025eb6:	b004      	add	sp, #16
 8025eb8:	bd80      	pop	{r7, pc}
 8025eba:	46c0      	nop			; (mov r8, r8)
 8025ebc:	0802b978 	.word	0x0802b978

08025ec0 <LL_DMA_ConfigTransfer>:
{
 8025ec0:	b580      	push	{r7, lr}
 8025ec2:	b086      	sub	sp, #24
 8025ec4:	af00      	add	r7, sp, #0
 8025ec6:	60f8      	str	r0, [r7, #12]
 8025ec8:	60b9      	str	r1, [r7, #8]
 8025eca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025ecc:	68fb      	ldr	r3, [r7, #12]
 8025ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8025ed0:	4a0c      	ldr	r2, [pc, #48]	; (8025f04 <LL_DMA_ConfigTransfer+0x44>)
 8025ed2:	68bb      	ldr	r3, [r7, #8]
 8025ed4:	18d3      	adds	r3, r2, r3
 8025ed6:	781b      	ldrb	r3, [r3, #0]
 8025ed8:	001a      	movs	r2, r3
 8025eda:	697b      	ldr	r3, [r7, #20]
 8025edc:	18d3      	adds	r3, r2, r3
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	4a09      	ldr	r2, [pc, #36]	; (8025f08 <LL_DMA_ConfigTransfer+0x48>)
 8025ee2:	4013      	ands	r3, r2
 8025ee4:	0019      	movs	r1, r3
 8025ee6:	4a07      	ldr	r2, [pc, #28]	; (8025f04 <LL_DMA_ConfigTransfer+0x44>)
 8025ee8:	68bb      	ldr	r3, [r7, #8]
 8025eea:	18d3      	adds	r3, r2, r3
 8025eec:	781b      	ldrb	r3, [r3, #0]
 8025eee:	001a      	movs	r2, r3
 8025ef0:	697b      	ldr	r3, [r7, #20]
 8025ef2:	18d3      	adds	r3, r2, r3
 8025ef4:	687a      	ldr	r2, [r7, #4]
 8025ef6:	430a      	orrs	r2, r1
 8025ef8:	601a      	str	r2, [r3, #0]
}
 8025efa:	46c0      	nop			; (mov r8, r8)
 8025efc:	46bd      	mov	sp, r7
 8025efe:	b006      	add	sp, #24
 8025f00:	bd80      	pop	{r7, pc}
 8025f02:	46c0      	nop			; (mov r8, r8)
 8025f04:	0802b978 	.word	0x0802b978
 8025f08:	ffff800f 	.word	0xffff800f

08025f0c <LL_DMA_GetDataTransferDirection>:
{
 8025f0c:	b580      	push	{r7, lr}
 8025f0e:	b084      	sub	sp, #16
 8025f10:	af00      	add	r7, sp, #0
 8025f12:	6078      	str	r0, [r7, #4]
 8025f14:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025f16:	687b      	ldr	r3, [r7, #4]
 8025f18:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8025f1a:	4a07      	ldr	r2, [pc, #28]	; (8025f38 <LL_DMA_GetDataTransferDirection+0x2c>)
 8025f1c:	683b      	ldr	r3, [r7, #0]
 8025f1e:	18d3      	adds	r3, r2, r3
 8025f20:	781b      	ldrb	r3, [r3, #0]
 8025f22:	001a      	movs	r2, r3
 8025f24:	68fb      	ldr	r3, [r7, #12]
 8025f26:	18d3      	adds	r3, r2, r3
 8025f28:	681b      	ldr	r3, [r3, #0]
 8025f2a:	4a04      	ldr	r2, [pc, #16]	; (8025f3c <LL_DMA_GetDataTransferDirection+0x30>)
 8025f2c:	4013      	ands	r3, r2
}
 8025f2e:	0018      	movs	r0, r3
 8025f30:	46bd      	mov	sp, r7
 8025f32:	b004      	add	sp, #16
 8025f34:	bd80      	pop	{r7, pc}
 8025f36:	46c0      	nop			; (mov r8, r8)
 8025f38:	0802b978 	.word	0x0802b978
 8025f3c:	00004010 	.word	0x00004010

08025f40 <LL_DMA_SetDataLength>:
{
 8025f40:	b580      	push	{r7, lr}
 8025f42:	b086      	sub	sp, #24
 8025f44:	af00      	add	r7, sp, #0
 8025f46:	60f8      	str	r0, [r7, #12]
 8025f48:	60b9      	str	r1, [r7, #8]
 8025f4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025f4c:	68fb      	ldr	r3, [r7, #12]
 8025f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8025f50:	4a0b      	ldr	r2, [pc, #44]	; (8025f80 <LL_DMA_SetDataLength+0x40>)
 8025f52:	68bb      	ldr	r3, [r7, #8]
 8025f54:	18d3      	adds	r3, r2, r3
 8025f56:	781b      	ldrb	r3, [r3, #0]
 8025f58:	001a      	movs	r2, r3
 8025f5a:	697b      	ldr	r3, [r7, #20]
 8025f5c:	18d3      	adds	r3, r2, r3
 8025f5e:	685b      	ldr	r3, [r3, #4]
 8025f60:	0c1b      	lsrs	r3, r3, #16
 8025f62:	0419      	lsls	r1, r3, #16
 8025f64:	4a06      	ldr	r2, [pc, #24]	; (8025f80 <LL_DMA_SetDataLength+0x40>)
 8025f66:	68bb      	ldr	r3, [r7, #8]
 8025f68:	18d3      	adds	r3, r2, r3
 8025f6a:	781b      	ldrb	r3, [r3, #0]
 8025f6c:	001a      	movs	r2, r3
 8025f6e:	697b      	ldr	r3, [r7, #20]
 8025f70:	18d3      	adds	r3, r2, r3
 8025f72:	687a      	ldr	r2, [r7, #4]
 8025f74:	430a      	orrs	r2, r1
 8025f76:	605a      	str	r2, [r3, #4]
}
 8025f78:	46c0      	nop			; (mov r8, r8)
 8025f7a:	46bd      	mov	sp, r7
 8025f7c:	b006      	add	sp, #24
 8025f7e:	bd80      	pop	{r7, pc}
 8025f80:	0802b978 	.word	0x0802b978

08025f84 <LL_DMA_ConfigAddresses>:
{
 8025f84:	b580      	push	{r7, lr}
 8025f86:	b086      	sub	sp, #24
 8025f88:	af00      	add	r7, sp, #0
 8025f8a:	60f8      	str	r0, [r7, #12]
 8025f8c:	60b9      	str	r1, [r7, #8]
 8025f8e:	607a      	str	r2, [r7, #4]
 8025f90:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8025f92:	68fb      	ldr	r3, [r7, #12]
 8025f94:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8025f96:	6a3b      	ldr	r3, [r7, #32]
 8025f98:	2b10      	cmp	r3, #16
 8025f9a:	d112      	bne.n	8025fc2 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8025f9c:	4a14      	ldr	r2, [pc, #80]	; (8025ff0 <LL_DMA_ConfigAddresses+0x6c>)
 8025f9e:	68bb      	ldr	r3, [r7, #8]
 8025fa0:	18d3      	adds	r3, r2, r3
 8025fa2:	781b      	ldrb	r3, [r3, #0]
 8025fa4:	001a      	movs	r2, r3
 8025fa6:	697b      	ldr	r3, [r7, #20]
 8025fa8:	18d3      	adds	r3, r2, r3
 8025faa:	687a      	ldr	r2, [r7, #4]
 8025fac:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8025fae:	4a10      	ldr	r2, [pc, #64]	; (8025ff0 <LL_DMA_ConfigAddresses+0x6c>)
 8025fb0:	68bb      	ldr	r3, [r7, #8]
 8025fb2:	18d3      	adds	r3, r2, r3
 8025fb4:	781b      	ldrb	r3, [r3, #0]
 8025fb6:	001a      	movs	r2, r3
 8025fb8:	697b      	ldr	r3, [r7, #20]
 8025fba:	18d3      	adds	r3, r2, r3
 8025fbc:	683a      	ldr	r2, [r7, #0]
 8025fbe:	609a      	str	r2, [r3, #8]
}
 8025fc0:	e011      	b.n	8025fe6 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8025fc2:	4a0b      	ldr	r2, [pc, #44]	; (8025ff0 <LL_DMA_ConfigAddresses+0x6c>)
 8025fc4:	68bb      	ldr	r3, [r7, #8]
 8025fc6:	18d3      	adds	r3, r2, r3
 8025fc8:	781b      	ldrb	r3, [r3, #0]
 8025fca:	001a      	movs	r2, r3
 8025fcc:	697b      	ldr	r3, [r7, #20]
 8025fce:	18d3      	adds	r3, r2, r3
 8025fd0:	687a      	ldr	r2, [r7, #4]
 8025fd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8025fd4:	4a06      	ldr	r2, [pc, #24]	; (8025ff0 <LL_DMA_ConfigAddresses+0x6c>)
 8025fd6:	68bb      	ldr	r3, [r7, #8]
 8025fd8:	18d3      	adds	r3, r2, r3
 8025fda:	781b      	ldrb	r3, [r3, #0]
 8025fdc:	001a      	movs	r2, r3
 8025fde:	697b      	ldr	r3, [r7, #20]
 8025fe0:	18d3      	adds	r3, r2, r3
 8025fe2:	683a      	ldr	r2, [r7, #0]
 8025fe4:	60da      	str	r2, [r3, #12]
}
 8025fe6:	46c0      	nop			; (mov r8, r8)
 8025fe8:	46bd      	mov	sp, r7
 8025fea:	b006      	add	sp, #24
 8025fec:	bd80      	pop	{r7, pc}
 8025fee:	46c0      	nop			; (mov r8, r8)
 8025ff0:	0802b978 	.word	0x0802b978

08025ff4 <LL_DMA_SetPeriphRequest>:
{
 8025ff4:	b580      	push	{r7, lr}
 8025ff6:	b086      	sub	sp, #24
 8025ff8:	af00      	add	r7, sp, #0
 8025ffa:	60f8      	str	r0, [r7, #12]
 8025ffc:	60b9      	str	r1, [r7, #8]
 8025ffe:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8026000:	68fb      	ldr	r3, [r7, #12]
 8026002:	0a9b      	lsrs	r3, r3, #10
 8026004:	4a0f      	ldr	r2, [pc, #60]	; (8026044 <LL_DMA_SetPeriphRequest+0x50>)
 8026006:	405a      	eors	r2, r3
 8026008:	0013      	movs	r3, r2
 802600a:	00db      	lsls	r3, r3, #3
 802600c:	1a9b      	subs	r3, r3, r2
 802600e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8026010:	68ba      	ldr	r2, [r7, #8]
 8026012:	697b      	ldr	r3, [r7, #20]
 8026014:	18d3      	adds	r3, r2, r3
 8026016:	009b      	lsls	r3, r3, #2
 8026018:	4a0b      	ldr	r2, [pc, #44]	; (8026048 <LL_DMA_SetPeriphRequest+0x54>)
 802601a:	4694      	mov	ip, r2
 802601c:	4463      	add	r3, ip
 802601e:	681b      	ldr	r3, [r3, #0]
 8026020:	227f      	movs	r2, #127	; 0x7f
 8026022:	4393      	bics	r3, r2
 8026024:	0019      	movs	r1, r3
 8026026:	68ba      	ldr	r2, [r7, #8]
 8026028:	697b      	ldr	r3, [r7, #20]
 802602a:	18d3      	adds	r3, r2, r3
 802602c:	009b      	lsls	r3, r3, #2
 802602e:	4a06      	ldr	r2, [pc, #24]	; (8026048 <LL_DMA_SetPeriphRequest+0x54>)
 8026030:	4694      	mov	ip, r2
 8026032:	4463      	add	r3, ip
 8026034:	687a      	ldr	r2, [r7, #4]
 8026036:	430a      	orrs	r2, r1
 8026038:	601a      	str	r2, [r3, #0]
}
 802603a:	46c0      	nop			; (mov r8, r8)
 802603c:	46bd      	mov	sp, r7
 802603e:	b006      	add	sp, #24
 8026040:	bd80      	pop	{r7, pc}
 8026042:	46c0      	nop			; (mov r8, r8)
 8026044:	00100080 	.word	0x00100080
 8026048:	40020800 	.word	0x40020800

0802604c <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(const DMA_TypeDef *DMAx)
{
 802604c:	b580      	push	{r7, lr}
 802604e:	b082      	sub	sp, #8
 8026050:	af00      	add	r7, sp, #0
 8026052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8026054:	687b      	ldr	r3, [r7, #4]
 8026056:	681a      	ldr	r2, [r3, #0]
 8026058:	2380      	movs	r3, #128	; 0x80
 802605a:	009b      	lsls	r3, r3, #2
 802605c:	401a      	ands	r2, r3
 802605e:	2380      	movs	r3, #128	; 0x80
 8026060:	009b      	lsls	r3, r3, #2
 8026062:	429a      	cmp	r2, r3
 8026064:	d101      	bne.n	802606a <LL_DMA_IsActiveFlag_TC3+0x1e>
 8026066:	2301      	movs	r3, #1
 8026068:	e000      	b.n	802606c <LL_DMA_IsActiveFlag_TC3+0x20>
 802606a:	2300      	movs	r3, #0
}
 802606c:	0018      	movs	r0, r3
 802606e:	46bd      	mov	sp, r7
 8026070:	b002      	add	sp, #8
 8026072:	bd80      	pop	{r7, pc}

08026074 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8026074:	b580      	push	{r7, lr}
 8026076:	b082      	sub	sp, #8
 8026078:	af00      	add	r7, sp, #0
 802607a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 802607c:	687b      	ldr	r3, [r7, #4]
 802607e:	2280      	movs	r2, #128	; 0x80
 8026080:	0052      	lsls	r2, r2, #1
 8026082:	605a      	str	r2, [r3, #4]
}
 8026084:	46c0      	nop			; (mov r8, r8)
 8026086:	46bd      	mov	sp, r7
 8026088:	b002      	add	sp, #8
 802608a:	bd80      	pop	{r7, pc}

0802608c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Channel)
{
 802608c:	b580      	push	{r7, lr}
 802608e:	b084      	sub	sp, #16
 8026090:	af00      	add	r7, sp, #0
 8026092:	6078      	str	r0, [r7, #4]
 8026094:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8026096:	687b      	ldr	r3, [r7, #4]
 8026098:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 802609a:	4a0b      	ldr	r2, [pc, #44]	; (80260c8 <LL_DMA_EnableIT_TC+0x3c>)
 802609c:	683b      	ldr	r3, [r7, #0]
 802609e:	18d3      	adds	r3, r2, r3
 80260a0:	781b      	ldrb	r3, [r3, #0]
 80260a2:	001a      	movs	r2, r3
 80260a4:	68fb      	ldr	r3, [r7, #12]
 80260a6:	18d3      	adds	r3, r2, r3
 80260a8:	681a      	ldr	r2, [r3, #0]
 80260aa:	4907      	ldr	r1, [pc, #28]	; (80260c8 <LL_DMA_EnableIT_TC+0x3c>)
 80260ac:	683b      	ldr	r3, [r7, #0]
 80260ae:	18cb      	adds	r3, r1, r3
 80260b0:	781b      	ldrb	r3, [r3, #0]
 80260b2:	0019      	movs	r1, r3
 80260b4:	68fb      	ldr	r3, [r7, #12]
 80260b6:	18cb      	adds	r3, r1, r3
 80260b8:	2102      	movs	r1, #2
 80260ba:	430a      	orrs	r2, r1
 80260bc:	601a      	str	r2, [r3, #0]
}
 80260be:	46c0      	nop			; (mov r8, r8)
 80260c0:	46bd      	mov	sp, r7
 80260c2:	b004      	add	sp, #16
 80260c4:	bd80      	pop	{r7, pc}
 80260c6:	46c0      	nop			; (mov r8, r8)
 80260c8:	0802b978 	.word	0x0802b978

080260cc <LL_AHB1_GRP1_EnableClock>:
{
 80260cc:	b580      	push	{r7, lr}
 80260ce:	b084      	sub	sp, #16
 80260d0:	af00      	add	r7, sp, #0
 80260d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80260d4:	4b07      	ldr	r3, [pc, #28]	; (80260f4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80260d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80260d8:	4b06      	ldr	r3, [pc, #24]	; (80260f4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80260da:	687a      	ldr	r2, [r7, #4]
 80260dc:	430a      	orrs	r2, r1
 80260de:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80260e0:	4b04      	ldr	r3, [pc, #16]	; (80260f4 <LL_AHB1_GRP1_EnableClock+0x28>)
 80260e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80260e4:	687a      	ldr	r2, [r7, #4]
 80260e6:	4013      	ands	r3, r2
 80260e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80260ea:	68fb      	ldr	r3, [r7, #12]
}
 80260ec:	46c0      	nop			; (mov r8, r8)
 80260ee:	46bd      	mov	sp, r7
 80260f0:	b004      	add	sp, #16
 80260f2:	bd80      	pop	{r7, pc}
 80260f4:	40021000 	.word	0x40021000

080260f8 <LL_APB1_GRP1_EnableClock>:
{
 80260f8:	b580      	push	{r7, lr}
 80260fa:	b084      	sub	sp, #16
 80260fc:	af00      	add	r7, sp, #0
 80260fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8026100:	4b07      	ldr	r3, [pc, #28]	; (8026120 <LL_APB1_GRP1_EnableClock+0x28>)
 8026102:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8026104:	4b06      	ldr	r3, [pc, #24]	; (8026120 <LL_APB1_GRP1_EnableClock+0x28>)
 8026106:	687a      	ldr	r2, [r7, #4]
 8026108:	430a      	orrs	r2, r1
 802610a:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 802610c:	4b04      	ldr	r3, [pc, #16]	; (8026120 <LL_APB1_GRP1_EnableClock+0x28>)
 802610e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8026110:	687a      	ldr	r2, [r7, #4]
 8026112:	4013      	ands	r3, r2
 8026114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8026116:	68fb      	ldr	r3, [r7, #12]
}
 8026118:	46c0      	nop			; (mov r8, r8)
 802611a:	46bd      	mov	sp, r7
 802611c:	b004      	add	sp, #16
 802611e:	bd80      	pop	{r7, pc}
 8026120:	40021000 	.word	0x40021000

08026124 <LL_APB1_GRP1_DisableClock>:
{
 8026124:	b580      	push	{r7, lr}
 8026126:	b082      	sub	sp, #8
 8026128:	af00      	add	r7, sp, #0
 802612a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR1, Periphs);
 802612c:	4b05      	ldr	r3, [pc, #20]	; (8026144 <LL_APB1_GRP1_DisableClock+0x20>)
 802612e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8026130:	687b      	ldr	r3, [r7, #4]
 8026132:	43d9      	mvns	r1, r3
 8026134:	4b03      	ldr	r3, [pc, #12]	; (8026144 <LL_APB1_GRP1_DisableClock+0x20>)
 8026136:	400a      	ands	r2, r1
 8026138:	63da      	str	r2, [r3, #60]	; 0x3c
}
 802613a:	46c0      	nop			; (mov r8, r8)
 802613c:	46bd      	mov	sp, r7
 802613e:	b002      	add	sp, #8
 8026140:	bd80      	pop	{r7, pc}
 8026142:	46c0      	nop			; (mov r8, r8)
 8026144:	40021000 	.word	0x40021000

08026148 <LL_IOP_GRP1_EnableClock>:
{
 8026148:	b580      	push	{r7, lr}
 802614a:	b084      	sub	sp, #16
 802614c:	af00      	add	r7, sp, #0
 802614e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8026150:	4b07      	ldr	r3, [pc, #28]	; (8026170 <LL_IOP_GRP1_EnableClock+0x28>)
 8026152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026154:	4b06      	ldr	r3, [pc, #24]	; (8026170 <LL_IOP_GRP1_EnableClock+0x28>)
 8026156:	687a      	ldr	r2, [r7, #4]
 8026158:	430a      	orrs	r2, r1
 802615a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 802615c:	4b04      	ldr	r3, [pc, #16]	; (8026170 <LL_IOP_GRP1_EnableClock+0x28>)
 802615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026160:	687a      	ldr	r2, [r7, #4]
 8026162:	4013      	ands	r3, r2
 8026164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8026166:	68fb      	ldr	r3, [r7, #12]
}
 8026168:	46c0      	nop			; (mov r8, r8)
 802616a:	46bd      	mov	sp, r7
 802616c:	b004      	add	sp, #16
 802616e:	bd80      	pop	{r7, pc}
 8026170:	40021000 	.word	0x40021000

08026174 <LL_GPIO_SetPinMode>:
{
 8026174:	b580      	push	{r7, lr}
 8026176:	b084      	sub	sp, #16
 8026178:	af00      	add	r7, sp, #0
 802617a:	60f8      	str	r0, [r7, #12]
 802617c:	60b9      	str	r1, [r7, #8]
 802617e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8026180:	68fb      	ldr	r3, [r7, #12]
 8026182:	6819      	ldr	r1, [r3, #0]
 8026184:	68bb      	ldr	r3, [r7, #8]
 8026186:	435b      	muls	r3, r3
 8026188:	001a      	movs	r2, r3
 802618a:	0013      	movs	r3, r2
 802618c:	005b      	lsls	r3, r3, #1
 802618e:	189b      	adds	r3, r3, r2
 8026190:	43db      	mvns	r3, r3
 8026192:	400b      	ands	r3, r1
 8026194:	001a      	movs	r2, r3
 8026196:	68bb      	ldr	r3, [r7, #8]
 8026198:	435b      	muls	r3, r3
 802619a:	6879      	ldr	r1, [r7, #4]
 802619c:	434b      	muls	r3, r1
 802619e:	431a      	orrs	r2, r3
 80261a0:	68fb      	ldr	r3, [r7, #12]
 80261a2:	601a      	str	r2, [r3, #0]
}
 80261a4:	46c0      	nop			; (mov r8, r8)
 80261a6:	46bd      	mov	sp, r7
 80261a8:	b004      	add	sp, #16
 80261aa:	bd80      	pop	{r7, pc}

080261ac <LL_GPIO_SetPinOutputType>:
{
 80261ac:	b580      	push	{r7, lr}
 80261ae:	b084      	sub	sp, #16
 80261b0:	af00      	add	r7, sp, #0
 80261b2:	60f8      	str	r0, [r7, #12]
 80261b4:	60b9      	str	r1, [r7, #8]
 80261b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80261b8:	68fb      	ldr	r3, [r7, #12]
 80261ba:	685b      	ldr	r3, [r3, #4]
 80261bc:	68ba      	ldr	r2, [r7, #8]
 80261be:	43d2      	mvns	r2, r2
 80261c0:	401a      	ands	r2, r3
 80261c2:	68bb      	ldr	r3, [r7, #8]
 80261c4:	6879      	ldr	r1, [r7, #4]
 80261c6:	434b      	muls	r3, r1
 80261c8:	431a      	orrs	r2, r3
 80261ca:	68fb      	ldr	r3, [r7, #12]
 80261cc:	605a      	str	r2, [r3, #4]
}
 80261ce:	46c0      	nop			; (mov r8, r8)
 80261d0:	46bd      	mov	sp, r7
 80261d2:	b004      	add	sp, #16
 80261d4:	bd80      	pop	{r7, pc}

080261d6 <LL_GPIO_SetPinSpeed>:
{
 80261d6:	b580      	push	{r7, lr}
 80261d8:	b084      	sub	sp, #16
 80261da:	af00      	add	r7, sp, #0
 80261dc:	60f8      	str	r0, [r7, #12]
 80261de:	60b9      	str	r1, [r7, #8]
 80261e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80261e2:	68fb      	ldr	r3, [r7, #12]
 80261e4:	6899      	ldr	r1, [r3, #8]
 80261e6:	68bb      	ldr	r3, [r7, #8]
 80261e8:	435b      	muls	r3, r3
 80261ea:	001a      	movs	r2, r3
 80261ec:	0013      	movs	r3, r2
 80261ee:	005b      	lsls	r3, r3, #1
 80261f0:	189b      	adds	r3, r3, r2
 80261f2:	43db      	mvns	r3, r3
 80261f4:	400b      	ands	r3, r1
 80261f6:	001a      	movs	r2, r3
 80261f8:	68bb      	ldr	r3, [r7, #8]
 80261fa:	435b      	muls	r3, r3
 80261fc:	6879      	ldr	r1, [r7, #4]
 80261fe:	434b      	muls	r3, r1
 8026200:	431a      	orrs	r2, r3
 8026202:	68fb      	ldr	r3, [r7, #12]
 8026204:	609a      	str	r2, [r3, #8]
}
 8026206:	46c0      	nop			; (mov r8, r8)
 8026208:	46bd      	mov	sp, r7
 802620a:	b004      	add	sp, #16
 802620c:	bd80      	pop	{r7, pc}

0802620e <LL_GPIO_SetPinPull>:
{
 802620e:	b580      	push	{r7, lr}
 8026210:	b084      	sub	sp, #16
 8026212:	af00      	add	r7, sp, #0
 8026214:	60f8      	str	r0, [r7, #12]
 8026216:	60b9      	str	r1, [r7, #8]
 8026218:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 802621a:	68fb      	ldr	r3, [r7, #12]
 802621c:	68d9      	ldr	r1, [r3, #12]
 802621e:	68bb      	ldr	r3, [r7, #8]
 8026220:	435b      	muls	r3, r3
 8026222:	001a      	movs	r2, r3
 8026224:	0013      	movs	r3, r2
 8026226:	005b      	lsls	r3, r3, #1
 8026228:	189b      	adds	r3, r3, r2
 802622a:	43db      	mvns	r3, r3
 802622c:	400b      	ands	r3, r1
 802622e:	001a      	movs	r2, r3
 8026230:	68bb      	ldr	r3, [r7, #8]
 8026232:	435b      	muls	r3, r3
 8026234:	6879      	ldr	r1, [r7, #4]
 8026236:	434b      	muls	r3, r1
 8026238:	431a      	orrs	r2, r3
 802623a:	68fb      	ldr	r3, [r7, #12]
 802623c:	60da      	str	r2, [r3, #12]
}
 802623e:	46c0      	nop			; (mov r8, r8)
 8026240:	46bd      	mov	sp, r7
 8026242:	b004      	add	sp, #16
 8026244:	bd80      	pop	{r7, pc}

08026246 <LL_GPIO_SetAFPin_0_7>:
{
 8026246:	b580      	push	{r7, lr}
 8026248:	b084      	sub	sp, #16
 802624a:	af00      	add	r7, sp, #0
 802624c:	60f8      	str	r0, [r7, #12]
 802624e:	60b9      	str	r1, [r7, #8]
 8026250:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8026252:	68fb      	ldr	r3, [r7, #12]
 8026254:	6a19      	ldr	r1, [r3, #32]
 8026256:	68bb      	ldr	r3, [r7, #8]
 8026258:	435b      	muls	r3, r3
 802625a:	68ba      	ldr	r2, [r7, #8]
 802625c:	4353      	muls	r3, r2
 802625e:	68ba      	ldr	r2, [r7, #8]
 8026260:	435a      	muls	r2, r3
 8026262:	0013      	movs	r3, r2
 8026264:	011b      	lsls	r3, r3, #4
 8026266:	1a9b      	subs	r3, r3, r2
 8026268:	43db      	mvns	r3, r3
 802626a:	400b      	ands	r3, r1
 802626c:	001a      	movs	r2, r3
 802626e:	68bb      	ldr	r3, [r7, #8]
 8026270:	435b      	muls	r3, r3
 8026272:	68b9      	ldr	r1, [r7, #8]
 8026274:	434b      	muls	r3, r1
 8026276:	68b9      	ldr	r1, [r7, #8]
 8026278:	434b      	muls	r3, r1
 802627a:	6879      	ldr	r1, [r7, #4]
 802627c:	434b      	muls	r3, r1
 802627e:	431a      	orrs	r2, r3
 8026280:	68fb      	ldr	r3, [r7, #12]
 8026282:	621a      	str	r2, [r3, #32]
}
 8026284:	46c0      	nop			; (mov r8, r8)
 8026286:	46bd      	mov	sp, r7
 8026288:	b004      	add	sp, #16
 802628a:	bd80      	pop	{r7, pc}

0802628c <LL_LPUART_Enable>:
{
 802628c:	b580      	push	{r7, lr}
 802628e:	b082      	sub	sp, #8
 8026290:	af00      	add	r7, sp, #0
 8026292:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8026294:	687b      	ldr	r3, [r7, #4]
 8026296:	681b      	ldr	r3, [r3, #0]
 8026298:	2201      	movs	r2, #1
 802629a:	431a      	orrs	r2, r3
 802629c:	687b      	ldr	r3, [r7, #4]
 802629e:	601a      	str	r2, [r3, #0]
}
 80262a0:	46c0      	nop			; (mov r8, r8)
 80262a2:	46bd      	mov	sp, r7
 80262a4:	b002      	add	sp, #8
 80262a6:	bd80      	pop	{r7, pc}

080262a8 <LL_LPUART_Disable>:
{
 80262a8:	b580      	push	{r7, lr}
 80262aa:	b082      	sub	sp, #8
 80262ac:	af00      	add	r7, sp, #0
 80262ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 80262b0:	687b      	ldr	r3, [r7, #4]
 80262b2:	681b      	ldr	r3, [r3, #0]
 80262b4:	2201      	movs	r2, #1
 80262b6:	4393      	bics	r3, r2
 80262b8:	001a      	movs	r2, r3
 80262ba:	687b      	ldr	r3, [r7, #4]
 80262bc:	601a      	str	r2, [r3, #0]
}
 80262be:	46c0      	nop			; (mov r8, r8)
 80262c0:	46bd      	mov	sp, r7
 80262c2:	b002      	add	sp, #8
 80262c4:	bd80      	pop	{r7, pc}

080262c6 <LL_LPUART_EnableDirectionRx>:
{
 80262c6:	b580      	push	{r7, lr}
 80262c8:	b086      	sub	sp, #24
 80262ca:	af00      	add	r7, sp, #0
 80262cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80262ce:	f3ef 8310 	mrs	r3, PRIMASK
 80262d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80262d4:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 80262d6:	617b      	str	r3, [r7, #20]
 80262d8:	2301      	movs	r3, #1
 80262da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80262dc:	68fb      	ldr	r3, [r7, #12]
 80262de:	f383 8810 	msr	PRIMASK, r3
}
 80262e2:	46c0      	nop			; (mov r8, r8)
 80262e4:	687b      	ldr	r3, [r7, #4]
 80262e6:	681b      	ldr	r3, [r3, #0]
 80262e8:	2204      	movs	r2, #4
 80262ea:	431a      	orrs	r2, r3
 80262ec:	687b      	ldr	r3, [r7, #4]
 80262ee:	601a      	str	r2, [r3, #0]
 80262f0:	697b      	ldr	r3, [r7, #20]
 80262f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80262f4:	693b      	ldr	r3, [r7, #16]
 80262f6:	f383 8810 	msr	PRIMASK, r3
}
 80262fa:	46c0      	nop			; (mov r8, r8)
}
 80262fc:	46c0      	nop			; (mov r8, r8)
 80262fe:	46bd      	mov	sp, r7
 8026300:	b006      	add	sp, #24
 8026302:	bd80      	pop	{r7, pc}

08026304 <LL_LPUART_IsActiveFlag_TEACK>:
{
 8026304:	b580      	push	{r7, lr}
 8026306:	b082      	sub	sp, #8
 8026308:	af00      	add	r7, sp, #0
 802630a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	69da      	ldr	r2, [r3, #28]
 8026310:	2380      	movs	r3, #128	; 0x80
 8026312:	039b      	lsls	r3, r3, #14
 8026314:	401a      	ands	r2, r3
 8026316:	2380      	movs	r3, #128	; 0x80
 8026318:	039b      	lsls	r3, r3, #14
 802631a:	429a      	cmp	r2, r3
 802631c:	d101      	bne.n	8026322 <LL_LPUART_IsActiveFlag_TEACK+0x1e>
 802631e:	2301      	movs	r3, #1
 8026320:	e000      	b.n	8026324 <LL_LPUART_IsActiveFlag_TEACK+0x20>
 8026322:	2300      	movs	r3, #0
}
 8026324:	0018      	movs	r0, r3
 8026326:	46bd      	mov	sp, r7
 8026328:	b002      	add	sp, #8
 802632a:	bd80      	pop	{r7, pc}

0802632c <LL_LPUART_ClearFlag_PE>:
{
 802632c:	b580      	push	{r7, lr}
 802632e:	b082      	sub	sp, #8
 8026330:	af00      	add	r7, sp, #0
 8026332:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	2201      	movs	r2, #1
 8026338:	621a      	str	r2, [r3, #32]
}
 802633a:	46c0      	nop			; (mov r8, r8)
 802633c:	46bd      	mov	sp, r7
 802633e:	b002      	add	sp, #8
 8026340:	bd80      	pop	{r7, pc}

08026342 <LL_LPUART_ClearFlag_FE>:
{
 8026342:	b580      	push	{r7, lr}
 8026344:	b082      	sub	sp, #8
 8026346:	af00      	add	r7, sp, #0
 8026348:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 802634a:	687b      	ldr	r3, [r7, #4]
 802634c:	2202      	movs	r2, #2
 802634e:	621a      	str	r2, [r3, #32]
}
 8026350:	46c0      	nop			; (mov r8, r8)
 8026352:	46bd      	mov	sp, r7
 8026354:	b002      	add	sp, #8
 8026356:	bd80      	pop	{r7, pc}

08026358 <LL_LPUART_ClearFlag_NE>:
{
 8026358:	b580      	push	{r7, lr}
 802635a:	b082      	sub	sp, #8
 802635c:	af00      	add	r7, sp, #0
 802635e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8026360:	687b      	ldr	r3, [r7, #4]
 8026362:	2204      	movs	r2, #4
 8026364:	621a      	str	r2, [r3, #32]
}
 8026366:	46c0      	nop			; (mov r8, r8)
 8026368:	46bd      	mov	sp, r7
 802636a:	b002      	add	sp, #8
 802636c:	bd80      	pop	{r7, pc}

0802636e <LL_LPUART_ClearFlag_ORE>:
{
 802636e:	b580      	push	{r7, lr}
 8026370:	b082      	sub	sp, #8
 8026372:	af00      	add	r7, sp, #0
 8026374:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	2208      	movs	r2, #8
 802637a:	621a      	str	r2, [r3, #32]
}
 802637c:	46c0      	nop			; (mov r8, r8)
 802637e:	46bd      	mov	sp, r7
 8026380:	b002      	add	sp, #8
 8026382:	bd80      	pop	{r7, pc}

08026384 <LL_LPUART_ClearFlag_TC>:
{
 8026384:	b580      	push	{r7, lr}
 8026386:	b082      	sub	sp, #8
 8026388:	af00      	add	r7, sp, #0
 802638a:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 802638c:	687b      	ldr	r3, [r7, #4]
 802638e:	2240      	movs	r2, #64	; 0x40
 8026390:	621a      	str	r2, [r3, #32]
}
 8026392:	46c0      	nop			; (mov r8, r8)
 8026394:	46bd      	mov	sp, r7
 8026396:	b002      	add	sp, #8
 8026398:	bd80      	pop	{r7, pc}

0802639a <LL_LPUART_EnableIT_RXNE_RXFNE>:
{
 802639a:	b580      	push	{r7, lr}
 802639c:	b086      	sub	sp, #24
 802639e:	af00      	add	r7, sp, #0
 80263a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80263a2:	f3ef 8310 	mrs	r3, PRIMASK
 80263a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80263a8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80263aa:	617b      	str	r3, [r7, #20]
 80263ac:	2301      	movs	r3, #1
 80263ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80263b0:	68fb      	ldr	r3, [r7, #12]
 80263b2:	f383 8810 	msr	PRIMASK, r3
}
 80263b6:	46c0      	nop			; (mov r8, r8)
 80263b8:	687b      	ldr	r3, [r7, #4]
 80263ba:	681b      	ldr	r3, [r3, #0]
 80263bc:	2220      	movs	r2, #32
 80263be:	431a      	orrs	r2, r3
 80263c0:	687b      	ldr	r3, [r7, #4]
 80263c2:	601a      	str	r2, [r3, #0]
 80263c4:	697b      	ldr	r3, [r7, #20]
 80263c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80263c8:	693b      	ldr	r3, [r7, #16]
 80263ca:	f383 8810 	msr	PRIMASK, r3
}
 80263ce:	46c0      	nop			; (mov r8, r8)
}
 80263d0:	46c0      	nop			; (mov r8, r8)
 80263d2:	46bd      	mov	sp, r7
 80263d4:	b006      	add	sp, #24
 80263d6:	bd80      	pop	{r7, pc}

080263d8 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 80263d8:	b580      	push	{r7, lr}
 80263da:	b086      	sub	sp, #24
 80263dc:	af00      	add	r7, sp, #0
 80263de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80263e0:	f3ef 8310 	mrs	r3, PRIMASK
 80263e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80263e6:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 80263e8:	617b      	str	r3, [r7, #20]
 80263ea:	2301      	movs	r3, #1
 80263ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	f383 8810 	msr	PRIMASK, r3
}
 80263f4:	46c0      	nop			; (mov r8, r8)
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	681b      	ldr	r3, [r3, #0]
 80263fa:	2240      	movs	r2, #64	; 0x40
 80263fc:	431a      	orrs	r2, r3
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	601a      	str	r2, [r3, #0]
 8026402:	697b      	ldr	r3, [r7, #20]
 8026404:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026406:	693b      	ldr	r3, [r7, #16]
 8026408:	f383 8810 	msr	PRIMASK, r3
}
 802640c:	46c0      	nop			; (mov r8, r8)
}
 802640e:	46c0      	nop			; (mov r8, r8)
 8026410:	46bd      	mov	sp, r7
 8026412:	b006      	add	sp, #24
 8026414:	bd80      	pop	{r7, pc}

08026416 <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8026416:	b580      	push	{r7, lr}
 8026418:	b086      	sub	sp, #24
 802641a:	af00      	add	r7, sp, #0
 802641c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802641e:	f3ef 8310 	mrs	r3, PRIMASK
 8026422:	60bb      	str	r3, [r7, #8]
  return(result);
 8026424:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8026426:	617b      	str	r3, [r7, #20]
 8026428:	2301      	movs	r3, #1
 802642a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802642c:	68fb      	ldr	r3, [r7, #12]
 802642e:	f383 8810 	msr	PRIMASK, r3
}
 8026432:	46c0      	nop			; (mov r8, r8)
 8026434:	687b      	ldr	r3, [r7, #4]
 8026436:	689b      	ldr	r3, [r3, #8]
 8026438:	2201      	movs	r2, #1
 802643a:	431a      	orrs	r2, r3
 802643c:	687b      	ldr	r3, [r7, #4]
 802643e:	609a      	str	r2, [r3, #8]
 8026440:	697b      	ldr	r3, [r7, #20]
 8026442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026444:	693b      	ldr	r3, [r7, #16]
 8026446:	f383 8810 	msr	PRIMASK, r3
}
 802644a:	46c0      	nop			; (mov r8, r8)
}
 802644c:	46c0      	nop			; (mov r8, r8)
 802644e:	46bd      	mov	sp, r7
 8026450:	b006      	add	sp, #24
 8026452:	bd80      	pop	{r7, pc}

08026454 <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8026454:	b580      	push	{r7, lr}
 8026456:	b086      	sub	sp, #24
 8026458:	af00      	add	r7, sp, #0
 802645a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802645c:	f3ef 8310 	mrs	r3, PRIMASK
 8026460:	60bb      	str	r3, [r7, #8]
  return(result);
 8026462:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8026464:	617b      	str	r3, [r7, #20]
 8026466:	2301      	movs	r3, #1
 8026468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802646a:	68fb      	ldr	r3, [r7, #12]
 802646c:	f383 8810 	msr	PRIMASK, r3
}
 8026470:	46c0      	nop			; (mov r8, r8)
 8026472:	687b      	ldr	r3, [r7, #4]
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	2240      	movs	r2, #64	; 0x40
 8026478:	4393      	bics	r3, r2
 802647a:	001a      	movs	r2, r3
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	601a      	str	r2, [r3, #0]
 8026480:	697b      	ldr	r3, [r7, #20]
 8026482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026484:	693b      	ldr	r3, [r7, #16]
 8026486:	f383 8810 	msr	PRIMASK, r3
}
 802648a:	46c0      	nop			; (mov r8, r8)
}
 802648c:	46c0      	nop			; (mov r8, r8)
 802648e:	46bd      	mov	sp, r7
 8026490:	b006      	add	sp, #24
 8026492:	bd80      	pop	{r7, pc}

08026494 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8026494:	b580      	push	{r7, lr}
 8026496:	b082      	sub	sp, #8
 8026498:	af00      	add	r7, sp, #0
 802649a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 802649c:	687b      	ldr	r3, [r7, #4]
 802649e:	681b      	ldr	r3, [r3, #0]
 80264a0:	2220      	movs	r2, #32
 80264a2:	4013      	ands	r3, r2
 80264a4:	2b20      	cmp	r3, #32
 80264a6:	d101      	bne.n	80264ac <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 80264a8:	2301      	movs	r3, #1
 80264aa:	e000      	b.n	80264ae <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80264ac:	2300      	movs	r3, #0
}
 80264ae:	0018      	movs	r0, r3
 80264b0:	46bd      	mov	sp, r7
 80264b2:	b002      	add	sp, #8
 80264b4:	bd80      	pop	{r7, pc}

080264b6 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 80264b6:	b580      	push	{r7, lr}
 80264b8:	b082      	sub	sp, #8
 80264ba:	af00      	add	r7, sp, #0
 80264bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 80264be:	687b      	ldr	r3, [r7, #4]
 80264c0:	681b      	ldr	r3, [r3, #0]
 80264c2:	2240      	movs	r2, #64	; 0x40
 80264c4:	4013      	ands	r3, r2
 80264c6:	2b40      	cmp	r3, #64	; 0x40
 80264c8:	d101      	bne.n	80264ce <LL_LPUART_IsEnabledIT_TC+0x18>
 80264ca:	2301      	movs	r3, #1
 80264cc:	e000      	b.n	80264d0 <LL_LPUART_IsEnabledIT_TC+0x1a>
 80264ce:	2300      	movs	r3, #0
}
 80264d0:	0018      	movs	r0, r3
 80264d2:	46bd      	mov	sp, r7
 80264d4:	b002      	add	sp, #8
 80264d6:	bd80      	pop	{r7, pc}

080264d8 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 80264d8:	b580      	push	{r7, lr}
 80264da:	b082      	sub	sp, #8
 80264dc:	af00      	add	r7, sp, #0
 80264de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	681a      	ldr	r2, [r3, #0]
 80264e4:	2380      	movs	r3, #128	; 0x80
 80264e6:	005b      	lsls	r3, r3, #1
 80264e8:	401a      	ands	r2, r3
 80264ea:	2380      	movs	r3, #128	; 0x80
 80264ec:	005b      	lsls	r3, r3, #1
 80264ee:	429a      	cmp	r2, r3
 80264f0:	d101      	bne.n	80264f6 <LL_LPUART_IsEnabledIT_PE+0x1e>
 80264f2:	2301      	movs	r3, #1
 80264f4:	e000      	b.n	80264f8 <LL_LPUART_IsEnabledIT_PE+0x20>
 80264f6:	2300      	movs	r3, #0
}
 80264f8:	0018      	movs	r0, r3
 80264fa:	46bd      	mov	sp, r7
 80264fc:	b002      	add	sp, #8
 80264fe:	bd80      	pop	{r7, pc}

08026500 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8026500:	b580      	push	{r7, lr}
 8026502:	b082      	sub	sp, #8
 8026504:	af00      	add	r7, sp, #0
 8026506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8026508:	687b      	ldr	r3, [r7, #4]
 802650a:	689b      	ldr	r3, [r3, #8]
 802650c:	2201      	movs	r2, #1
 802650e:	4013      	ands	r3, r2
 8026510:	2b01      	cmp	r3, #1
 8026512:	d101      	bne.n	8026518 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8026514:	2301      	movs	r3, #1
 8026516:	e000      	b.n	802651a <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8026518:	2300      	movs	r3, #0
}
 802651a:	0018      	movs	r0, r3
 802651c:	46bd      	mov	sp, r7
 802651e:	b002      	add	sp, #8
 8026520:	bd80      	pop	{r7, pc}

08026522 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8026522:	b580      	push	{r7, lr}
 8026524:	b086      	sub	sp, #24
 8026526:	af00      	add	r7, sp, #0
 8026528:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802652a:	f3ef 8310 	mrs	r3, PRIMASK
 802652e:	60bb      	str	r3, [r7, #8]
  return(result);
 8026530:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8026532:	617b      	str	r3, [r7, #20]
 8026534:	2301      	movs	r3, #1
 8026536:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	f383 8810 	msr	PRIMASK, r3
}
 802653e:	46c0      	nop			; (mov r8, r8)
 8026540:	687b      	ldr	r3, [r7, #4]
 8026542:	689b      	ldr	r3, [r3, #8]
 8026544:	2280      	movs	r2, #128	; 0x80
 8026546:	431a      	orrs	r2, r3
 8026548:	687b      	ldr	r3, [r7, #4]
 802654a:	609a      	str	r2, [r3, #8]
 802654c:	697b      	ldr	r3, [r7, #20]
 802654e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8026550:	693b      	ldr	r3, [r7, #16]
 8026552:	f383 8810 	msr	PRIMASK, r3
}
 8026556:	46c0      	nop			; (mov r8, r8)
}
 8026558:	46c0      	nop			; (mov r8, r8)
 802655a:	46bd      	mov	sp, r7
 802655c:	b006      	add	sp, #24
 802655e:	bd80      	pop	{r7, pc}

08026560 <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 8026560:	b580      	push	{r7, lr}
 8026562:	b084      	sub	sp, #16
 8026564:	af00      	add	r7, sp, #0
 8026566:	6078      	str	r0, [r7, #4]
 8026568:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 802656a:	683b      	ldr	r3, [r7, #0]
 802656c:	2b00      	cmp	r3, #0
 802656e:	d103      	bne.n	8026578 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 8026570:	687b      	ldr	r3, [r7, #4]
 8026572:	3328      	adds	r3, #40	; 0x28
 8026574:	60fb      	str	r3, [r7, #12]
 8026576:	e002      	b.n	802657e <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 8026578:	687b      	ldr	r3, [r7, #4]
 802657a:	3324      	adds	r3, #36	; 0x24
 802657c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 802657e:	68fb      	ldr	r3, [r7, #12]
}
 8026580:	0018      	movs	r0, r3
 8026582:	46bd      	mov	sp, r7
 8026584:	b004      	add	sp, #16
 8026586:	bd80      	pop	{r7, pc}

08026588 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8026588:	b580      	push	{r7, lr}
 802658a:	b082      	sub	sp, #8
 802658c:	af00      	add	r7, sp, #0
 802658e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8026590:	687b      	ldr	r3, [r7, #4]
 8026592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026594:	b2db      	uxtb	r3, r3
}
 8026596:	0018      	movs	r0, r3
 8026598:	46bd      	mov	sp, r7
 802659a:	b002      	add	sp, #8
 802659c:	bd80      	pop	{r7, pc}
	...

080265a0 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 80265a0:	b580      	push	{r7, lr}
 80265a2:	b088      	sub	sp, #32
 80265a4:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 80265a6:	2001      	movs	r0, #1
 80265a8:	f7ff fdce 	bl	8026148 <LL_IOP_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 80265ac:	2001      	movs	r0, #1
 80265ae:	f7ff fdcb 	bl	8026148 <LL_IOP_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 80265b2:	23a0      	movs	r3, #160	; 0xa0
 80265b4:	05db      	lsls	r3, r3, #23
 80265b6:	2206      	movs	r2, #6
 80265b8:	2104      	movs	r1, #4
 80265ba:	0018      	movs	r0, r3
 80265bc:	f7ff fe43 	bl	8026246 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 80265c0:	23a0      	movs	r3, #160	; 0xa0
 80265c2:	05db      	lsls	r3, r3, #23
 80265c4:	2202      	movs	r2, #2
 80265c6:	2104      	movs	r1, #4
 80265c8:	0018      	movs	r0, r3
 80265ca:	f7ff fdd3 	bl	8026174 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 80265ce:	23a0      	movs	r3, #160	; 0xa0
 80265d0:	05db      	lsls	r3, r3, #23
 80265d2:	2202      	movs	r2, #2
 80265d4:	2104      	movs	r1, #4
 80265d6:	0018      	movs	r0, r3
 80265d8:	f7ff fdfd 	bl	80261d6 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 80265dc:	23a0      	movs	r3, #160	; 0xa0
 80265de:	05db      	lsls	r3, r3, #23
 80265e0:	2200      	movs	r2, #0
 80265e2:	2104      	movs	r1, #4
 80265e4:	0018      	movs	r0, r3
 80265e6:	f7ff fde1 	bl	80261ac <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 80265ea:	23a0      	movs	r3, #160	; 0xa0
 80265ec:	05db      	lsls	r3, r3, #23
 80265ee:	2201      	movs	r2, #1
 80265f0:	2104      	movs	r1, #4
 80265f2:	0018      	movs	r0, r3
 80265f4:	f7ff fe0b 	bl	802620e <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 80265f8:	23a0      	movs	r3, #160	; 0xa0
 80265fa:	05db      	lsls	r3, r3, #23
 80265fc:	2206      	movs	r2, #6
 80265fe:	2108      	movs	r1, #8
 8026600:	0018      	movs	r0, r3
 8026602:	f7ff fe20 	bl	8026246 <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 8026606:	23a0      	movs	r3, #160	; 0xa0
 8026608:	05db      	lsls	r3, r3, #23
 802660a:	2202      	movs	r2, #2
 802660c:	2108      	movs	r1, #8
 802660e:	0018      	movs	r0, r3
 8026610:	f7ff fdb0 	bl	8026174 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 8026614:	23a0      	movs	r3, #160	; 0xa0
 8026616:	05db      	lsls	r3, r3, #23
 8026618:	2202      	movs	r2, #2
 802661a:	2108      	movs	r1, #8
 802661c:	0018      	movs	r0, r3
 802661e:	f7ff fdda 	bl	80261d6 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8026622:	23a0      	movs	r3, #160	; 0xa0
 8026624:	05db      	lsls	r3, r3, #23
 8026626:	2200      	movs	r2, #0
 8026628:	2108      	movs	r1, #8
 802662a:	0018      	movs	r0, r3
 802662c:	f7ff fdbe 	bl	80261ac <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 8026630:	23a0      	movs	r3, #160	; 0xa0
 8026632:	05db      	lsls	r3, r3, #23
 8026634:	2201      	movs	r2, #1
 8026636:	2108      	movs	r1, #8
 8026638:	0018      	movs	r0, r3
 802663a:	f7ff fde8 	bl	802620e <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802663e:	2380      	movs	r3, #128	; 0x80
 8026640:	035b      	lsls	r3, r3, #13
 8026642:	0018      	movs	r0, r3
 8026644:	f7ff fd58 	bl	80260f8 <LL_APB1_GRP1_EnableClock>
  {
    /* Configure LPUART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 8026648:	4b31      	ldr	r3, [pc, #196]	; (8026710 <HW_TRACER_EMB_Init+0x170>)
 802664a:	0018      	movs	r0, r3
 802664c:	f7ff fe2c 	bl	80262a8 <LL_LPUART_Disable>
    /*  - Parity              : LL_LPUART_PARITY_NONE           */
    /*  - TransferDirection   : LL_LPUART_DIRECTION_TX          */
    /*  - HardwareFlowControl : LL_LPUART_HWCONTROL_NONE        */
    /*  - OverSampling        : LL_LPUART_OVERSAMPLING_16       */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_LPUART_PRESCALER_DIV1;
 8026650:	003b      	movs	r3, r7
 8026652:	2200      	movs	r2, #0
 8026654:	601a      	str	r2, [r3, #0]
#endif
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 8026656:	003b      	movs	r3, r7
 8026658:	22e1      	movs	r2, #225	; 0xe1
 802665a:	0312      	lsls	r2, r2, #12
 802665c:	605a      	str	r2, [r3, #4]
    lpuart_initstruct.DataWidth           = LL_LPUART_DATAWIDTH_8B;
 802665e:	003b      	movs	r3, r7
 8026660:	2200      	movs	r2, #0
 8026662:	609a      	str	r2, [r3, #8]
    lpuart_initstruct.StopBits            = LL_LPUART_STOPBITS_1;
 8026664:	003b      	movs	r3, r7
 8026666:	2200      	movs	r2, #0
 8026668:	60da      	str	r2, [r3, #12]
    lpuart_initstruct.Parity              = LL_LPUART_PARITY_NONE;
 802666a:	003b      	movs	r3, r7
 802666c:	2200      	movs	r2, #0
 802666e:	611a      	str	r2, [r3, #16]
    lpuart_initstruct.TransferDirection   = LL_LPUART_DIRECTION_TX;
 8026670:	003b      	movs	r3, r7
 8026672:	2208      	movs	r2, #8
 8026674:	615a      	str	r2, [r3, #20]
#if defined(USART_CR3_RTSE)
    lpuart_initstruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8026676:	003b      	movs	r3, r7
 8026678:	2200      	movs	r2, #0
 802667a:	619a      	str	r2, [r3, #24]
#endif

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 802667c:	003b      	movs	r3, r7
 802667e:	4a24      	ldr	r2, [pc, #144]	; (8026710 <HW_TRACER_EMB_Init+0x170>)
 8026680:	0019      	movs	r1, r3
 8026682:	0010      	movs	r0, r2
 8026684:	f7ed f8d2 	bl	801382c <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 8026688:	4b21      	ldr	r3, [pc, #132]	; (8026710 <HW_TRACER_EMB_Init+0x170>)
 802668a:	0018      	movs	r0, r3
 802668c:	f7ff fdfe 	bl	802628c <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 8026690:	4b1f      	ldr	r3, [pc, #124]	; (8026710 <HW_TRACER_EMB_Init+0x170>)
 8026692:	0018      	movs	r0, r3
 8026694:	f7ff fe36 	bl	8026304 <LL_LPUART_IsActiveFlag_TEACK>
 8026698:	0003      	movs	r3, r0
 802669a:	61fb      	str	r3, [r7, #28]
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 802669c:	e005      	b.n	80266aa <HW_TRACER_EMB_Init+0x10a>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 802669e:	4b1c      	ldr	r3, [pc, #112]	; (8026710 <HW_TRACER_EMB_Init+0x170>)
 80266a0:	0018      	movs	r0, r3
 80266a2:	f7ff fe2f 	bl	8026304 <LL_LPUART_IsActiveFlag_TEACK>
 80266a6:	0003      	movs	r3, r0
 80266a8:	61fb      	str	r3, [r7, #28]
    while (_temp1 == 0U)
 80266aa:	69fb      	ldr	r3, [r7, #28]
 80266ac:	2b00      	cmp	r3, #0
 80266ae:	d0f6      	beq.n	802669e <HW_TRACER_EMB_Init+0xfe>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE == 0UL */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 80266b0:	2001      	movs	r0, #1
 80266b2:	f7ff fd0b 	bl	80260cc <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 80266b6:	4a17      	ldr	r2, [pc, #92]	; (8026714 <HW_TRACER_EMB_Init+0x174>)
 80266b8:	4b17      	ldr	r3, [pc, #92]	; (8026718 <HW_TRACER_EMB_Init+0x178>)
 80266ba:	2102      	movs	r1, #2
 80266bc:	0018      	movs	r0, r3
 80266be:	f7ff fbff 	bl	8025ec0 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID) || defined(DMA_CSELR_C1S)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 80266c2:	4b15      	ldr	r3, [pc, #84]	; (8026718 <HW_TRACER_EMB_Init+0x178>)
 80266c4:	220f      	movs	r2, #15
 80266c6:	2102      	movs	r1, #2
 80266c8:	0018      	movs	r0, r3
 80266ca:	f7ff fc93 	bl	8025ff4 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 80266ce:	4b12      	ldr	r3, [pc, #72]	; (8026718 <HW_TRACER_EMB_Init+0x178>)
 80266d0:	2102      	movs	r1, #2
 80266d2:	0018      	movs	r0, r3
 80266d4:	f7ff fcda 	bl	802608c <LL_DMA_EnableIT_TC>
#endif /* TRACER_EMB_DMA_MODE == 1*/

  /* Configure the interrupt for TX */
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
 80266d8:	2100      	movs	r1, #0
 80266da:	200a      	movs	r0, #10
 80266dc:	f7ff fb42 	bl	8025d64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 80266e0:	200a      	movs	r0, #10
 80266e2:	f7ff fb25 	bl	8025d30 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#endif /* TRACER_EMB_TX_DMA_PRIORITY */
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
 80266e6:	2103      	movs	r1, #3
 80266e8:	201d      	movs	r0, #29
 80266ea:	f7ff fb3b 	bl	8025d64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 80266ee:	201d      	movs	r0, #29
 80266f0:	f7ff fb1e 	bl	8025d30 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 80266f4:	4b09      	ldr	r3, [pc, #36]	; (802671c <HW_TRACER_EMB_Init+0x17c>)
 80266f6:	681b      	ldr	r3, [r3, #0]
 80266f8:	2b00      	cmp	r3, #0
 80266fa:	d105      	bne.n	8026708 <HW_TRACER_EMB_Init+0x168>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 80266fc:	2380      	movs	r3, #128	; 0x80
 80266fe:	035b      	lsls	r3, r3, #13
 8026700:	0018      	movs	r0, r3
 8026702:	f7ff fd0f 	bl	8026124 <LL_APB1_GRP1_DisableClock>
  }
  return;
 8026706:	46c0      	nop			; (mov r8, r8)
 8026708:	46c0      	nop			; (mov r8, r8)
}
 802670a:	46bd      	mov	sp, r7
 802670c:	b008      	add	sp, #32
 802670e:	bd80      	pop	{r7, pc}
 8026710:	40008000 	.word	0x40008000
 8026714:	00002090 	.word	0x00002090
 8026718:	40020000 	.word	0x40020000
 802671c:	20005500 	.word	0x20005500

08026720 <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 8026720:	b580      	push	{r7, lr}
 8026722:	b082      	sub	sp, #8
 8026724:	af00      	add	r7, sp, #0
 8026726:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 8026728:	4b05      	ldr	r3, [pc, #20]	; (8026740 <HW_TRACER_EMB_RegisterRxCallback+0x20>)
 802672a:	687a      	ldr	r2, [r7, #4]
 802672c:	601a      	str	r2, [r3, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 802672e:	2380      	movs	r3, #128	; 0x80
 8026730:	035b      	lsls	r3, r3, #13
 8026732:	0018      	movs	r0, r3
 8026734:	f7ff fce0 	bl	80260f8 <LL_APB1_GRP1_EnableClock>
}
 8026738:	46c0      	nop			; (mov r8, r8)
 802673a:	46bd      	mov	sp, r7
 802673c:	b002      	add	sp, #8
 802673e:	bd80      	pop	{r7, pc}
 8026740:	20005500 	.word	0x20005500

08026744 <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 8026744:	b580      	push	{r7, lr}
 8026746:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 8026748:	4b0a      	ldr	r3, [pc, #40]	; (8026774 <HW_TRACER_EMB_StartRX+0x30>)
 802674a:	0018      	movs	r0, r3
 802674c:	f7ff fe25 	bl	802639a <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 8026750:	4b08      	ldr	r3, [pc, #32]	; (8026774 <HW_TRACER_EMB_StartRX+0x30>)
 8026752:	0018      	movs	r0, r3
 8026754:	f7ff fe5f 	bl	8026416 <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 8026758:	4b06      	ldr	r3, [pc, #24]	; (8026774 <HW_TRACER_EMB_StartRX+0x30>)
 802675a:	0018      	movs	r0, r3
 802675c:	f7ff fdb3 	bl	80262c6 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 8026760:	2103      	movs	r1, #3
 8026762:	201d      	movs	r0, #29
 8026764:	f7ff fafe 	bl	8025d64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 8026768:	201d      	movs	r0, #29
 802676a:	f7ff fae1 	bl	8025d30 <__NVIC_EnableIRQ>
}
 802676e:	46c0      	nop			; (mov r8, r8)
 8026770:	46bd      	mov	sp, r7
 8026772:	bd80      	pop	{r7, pc}
 8026774:	40008000 	.word	0x40008000

08026778 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 8026778:	b580      	push	{r7, lr}
 802677a:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 802677c:	4b08      	ldr	r3, [pc, #32]	; (80267a0 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 802677e:	0018      	movs	r0, r3
 8026780:	f7ff fc64 	bl	802604c <LL_DMA_IsActiveFlag_TC3>
 8026784:	0003      	movs	r3, r0
 8026786:	2b01      	cmp	r3, #1
 8026788:	d107      	bne.n	802679a <HW_TRACER_EMB_IRQHandlerDMA+0x22>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 802678a:	4b06      	ldr	r3, [pc, #24]	; (80267a4 <HW_TRACER_EMB_IRQHandlerDMA+0x2c>)
 802678c:	0018      	movs	r0, r3
 802678e:	f7ff fe23 	bl	80263d8 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 8026792:	4b03      	ldr	r3, [pc, #12]	; (80267a0 <HW_TRACER_EMB_IRQHandlerDMA+0x28>)
 8026794:	0018      	movs	r0, r3
 8026796:	f7ff fc6d 	bl	8026074 <LL_DMA_ClearFlag_GI3>
  }
}
 802679a:	46c0      	nop			; (mov r8, r8)
 802679c:	46bd      	mov	sp, r7
 802679e:	bd80      	pop	{r7, pc}
 80267a0:	40020000 	.word	0x40020000
 80267a4:	40008000 	.word	0x40008000

080267a8 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 80267a8:	b580      	push	{r7, lr}
 80267aa:	b086      	sub	sp, #24
 80267ac:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 80267ae:	2317      	movs	r3, #23
 80267b0:	18fb      	adds	r3, r7, r3
 80267b2:	2200      	movs	r2, #0
 80267b4:	701a      	strb	r2, [r3, #0]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 80267b6:	4b60      	ldr	r3, [pc, #384]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80267b8:	69db      	ldr	r3, [r3, #28]
 80267ba:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 80267bc:	4b5e      	ldr	r3, [pc, #376]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80267be:	0018      	movs	r0, r3
 80267c0:	f7ff fe68 	bl	8026494 <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 80267c4:	0003      	movs	r3, r0
 80267c6:	60fb      	str	r3, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 80267c8:	68fb      	ldr	r3, [r7, #12]
 80267ca:	2b01      	cmp	r3, #1
 80267cc:	d000      	beq.n	80267d0 <HW_TRACER_EMB_IRQHandlerUSART+0x28>
 80267ce:	e087      	b.n	80268e0 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 80267d0:	693b      	ldr	r3, [r7, #16]
 80267d2:	220f      	movs	r2, #15
 80267d4:	4013      	ands	r3, r2
 80267d6:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 80267d8:	693b      	ldr	r3, [r7, #16]
 80267da:	2220      	movs	r2, #32
 80267dc:	4013      	ands	r3, r2
 80267de:	d015      	beq.n	802680c <HW_TRACER_EMB_IRQHandlerUSART+0x64>
        && (_errorflags == 0UL))
 80267e0:	68bb      	ldr	r3, [r7, #8]
 80267e2:	2b00      	cmp	r3, #0
 80267e4:	d112      	bne.n	802680c <HW_TRACER_EMB_IRQHandlerUSART+0x64>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 80267e6:	4b54      	ldr	r3, [pc, #336]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80267e8:	0018      	movs	r0, r3
 80267ea:	f7ff fecd 	bl	8026588 <LL_LPUART_ReceiveData8>
 80267ee:	0003      	movs	r3, r0
 80267f0:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 80267f2:	4b52      	ldr	r3, [pc, #328]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80267f4:	681b      	ldr	r3, [r3, #0]
 80267f6:	2b00      	cmp	r3, #0
 80267f8:	d100      	bne.n	80267fc <HW_TRACER_EMB_IRQHandlerUSART+0x54>
 80267fa:	e097      	b.n	802692c <HW_TRACER_EMB_IRQHandlerUSART+0x184>
      {
        fptr_rx(received_char, 0U);
 80267fc:	4b4f      	ldr	r3, [pc, #316]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80267fe:	681b      	ldr	r3, [r3, #0]
 8026800:	683a      	ldr	r2, [r7, #0]
 8026802:	b2d2      	uxtb	r2, r2
 8026804:	2100      	movs	r1, #0
 8026806:	0010      	movs	r0, r2
 8026808:	4798      	blx	r3
      }
      return;
 802680a:	e08f      	b.n	802692c <HW_TRACER_EMB_IRQHandlerUSART+0x184>
    }
    else if (_errorflags != 0UL)
 802680c:	68bb      	ldr	r3, [r7, #8]
 802680e:	2b00      	cmp	r3, #0
 8026810:	d066      	beq.n	80268e0 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 8026812:	693b      	ldr	r3, [r7, #16]
 8026814:	2220      	movs	r2, #32
 8026816:	4013      	ands	r3, r2
 8026818:	d012      	beq.n	8026840 <HW_TRACER_EMB_IRQHandlerUSART+0x98>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 802681a:	4b47      	ldr	r3, [pc, #284]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802681c:	0018      	movs	r0, r3
 802681e:	f7ff feb3 	bl	8026588 <LL_LPUART_ReceiveData8>
 8026822:	0003      	movs	r3, r0
 8026824:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 8026826:	4b45      	ldr	r3, [pc, #276]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8026828:	681b      	ldr	r3, [r3, #0]
 802682a:	2b00      	cmp	r3, #0
 802682c:	d100      	bne.n	8026830 <HW_TRACER_EMB_IRQHandlerUSART+0x88>
 802682e:	e07f      	b.n	8026930 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
        {
          fptr_rx(received_char, 0U);
 8026830:	4b42      	ldr	r3, [pc, #264]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8026832:	681b      	ldr	r3, [r3, #0]
 8026834:	683a      	ldr	r2, [r7, #0]
 8026836:	b2d2      	uxtb	r2, r2
 8026838:	2100      	movs	r1, #0
 802683a:	0010      	movs	r0, r2
 802683c:	4798      	blx	r3
        }
        return;
 802683e:	e077      	b.n	8026930 <HW_TRACER_EMB_IRQHandlerUSART+0x188>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 8026840:	4b3d      	ldr	r3, [pc, #244]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8026842:	0018      	movs	r0, r3
 8026844:	f7ff fe48 	bl	80264d8 <LL_LPUART_IsEnabledIT_PE>
 8026848:	0003      	movs	r3, r0
 802684a:	607b      	str	r3, [r7, #4]
      if ((_temp2 == 1U)
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	2b01      	cmp	r3, #1
 8026850:	d10b      	bne.n	802686a <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 8026852:	68bb      	ldr	r3, [r7, #8]
 8026854:	2201      	movs	r2, #1
 8026856:	4013      	ands	r3, r2
 8026858:	d007      	beq.n	802686a <HW_TRACER_EMB_IRQHandlerUSART+0xc2>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 802685a:	4b37      	ldr	r3, [pc, #220]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802685c:	0018      	movs	r0, r3
 802685e:	f7ff fd65 	bl	802632c <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 8026862:	2317      	movs	r3, #23
 8026864:	18fb      	adds	r3, r7, r3
 8026866:	2201      	movs	r2, #1
 8026868:	701a      	strb	r2, [r3, #0]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 802686a:	4b33      	ldr	r3, [pc, #204]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802686c:	0018      	movs	r0, r3
 802686e:	f7ff fe47 	bl	8026500 <LL_LPUART_IsEnabledIT_ERROR>
 8026872:	0003      	movs	r3, r0
 8026874:	607b      	str	r3, [r7, #4]
      if (_temp2 == 1U)
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	2b01      	cmp	r3, #1
 802687a:	d123      	bne.n	80268c4 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 802687c:	68bb      	ldr	r3, [r7, #8]
 802687e:	2202      	movs	r2, #2
 8026880:	4013      	ands	r3, r2
 8026882:	d007      	beq.n	8026894 <HW_TRACER_EMB_IRQHandlerUSART+0xec>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 8026884:	4b2c      	ldr	r3, [pc, #176]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8026886:	0018      	movs	r0, r3
 8026888:	f7ff fd5b 	bl	8026342 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 802688c:	2317      	movs	r3, #23
 802688e:	18fb      	adds	r3, r7, r3
 8026890:	2201      	movs	r2, #1
 8026892:	701a      	strb	r2, [r3, #0]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 8026894:	68bb      	ldr	r3, [r7, #8]
 8026896:	2208      	movs	r2, #8
 8026898:	4013      	ands	r3, r2
 802689a:	d007      	beq.n	80268ac <HW_TRACER_EMB_IRQHandlerUSART+0x104>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 802689c:	4b26      	ldr	r3, [pc, #152]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 802689e:	0018      	movs	r0, r3
 80268a0:	f7ff fd65 	bl	802636e <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 80268a4:	2317      	movs	r3, #23
 80268a6:	18fb      	adds	r3, r7, r3
 80268a8:	2201      	movs	r2, #1
 80268aa:	701a      	strb	r2, [r3, #0]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 80268ac:	68bb      	ldr	r3, [r7, #8]
 80268ae:	2204      	movs	r2, #4
 80268b0:	4013      	ands	r3, r2
 80268b2:	d007      	beq.n	80268c4 <HW_TRACER_EMB_IRQHandlerUSART+0x11c>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 80268b4:	4b20      	ldr	r3, [pc, #128]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80268b6:	0018      	movs	r0, r3
 80268b8:	f7ff fd4e 	bl	8026358 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 80268bc:	2317      	movs	r3, #23
 80268be:	18fb      	adds	r3, r7, r3
 80268c0:	2201      	movs	r2, #1
 80268c2:	701a      	strb	r2, [r3, #0]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 80268c4:	2317      	movs	r3, #23
 80268c6:	18fb      	adds	r3, r7, r3
 80268c8:	781b      	ldrb	r3, [r3, #0]
 80268ca:	2b01      	cmp	r3, #1
 80268cc:	d108      	bne.n	80268e0 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
 80268ce:	4b1b      	ldr	r3, [pc, #108]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	2b00      	cmp	r3, #0
 80268d4:	d004      	beq.n	80268e0 <HW_TRACER_EMB_IRQHandlerUSART+0x138>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 80268d6:	4b19      	ldr	r3, [pc, #100]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 80268d8:	681b      	ldr	r3, [r3, #0]
 80268da:	2101      	movs	r1, #1
 80268dc:	2001      	movs	r0, #1
 80268de:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 80268e0:	4b15      	ldr	r3, [pc, #84]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80268e2:	0018      	movs	r0, r3
 80268e4:	f7ff fde7 	bl	80264b6 <LL_LPUART_IsEnabledIT_TC>
 80268e8:	0003      	movs	r3, r0
 80268ea:	607b      	str	r3, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 80268ec:	693b      	ldr	r3, [r7, #16]
 80268ee:	2240      	movs	r2, #64	; 0x40
 80268f0:	4013      	ands	r3, r2
 80268f2:	d01e      	beq.n	8026932 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	2b01      	cmp	r3, #1
 80268f8:	d11b      	bne.n	8026932 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 80268fa:	4b0f      	ldr	r3, [pc, #60]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 80268fc:	0018      	movs	r0, r3
 80268fe:	f7ff fda9 	bl	8026454 <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 8026902:	4b0d      	ldr	r3, [pc, #52]	; (8026938 <HW_TRACER_EMB_IRQHandlerUSART+0x190>)
 8026904:	0018      	movs	r0, r3
 8026906:	f7ff fd3d 	bl	8026384 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 802690a:	4b0d      	ldr	r3, [pc, #52]	; (8026940 <HW_TRACER_EMB_IRQHandlerUSART+0x198>)
 802690c:	2102      	movs	r1, #2
 802690e:	0018      	movs	r0, r3
 8026910:	f7ff fab6 	bl	8025e80 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 8026914:	4b09      	ldr	r3, [pc, #36]	; (802693c <HW_TRACER_EMB_IRQHandlerUSART+0x194>)
 8026916:	681b      	ldr	r3, [r3, #0]
 8026918:	2b00      	cmp	r3, #0
 802691a:	d104      	bne.n	8026926 <HW_TRACER_EMB_IRQHandlerUSART+0x17e>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 802691c:	2380      	movs	r3, #128	; 0x80
 802691e:	035b      	lsls	r3, r3, #13
 8026920:	0018      	movs	r0, r3
 8026922:	f7ff fbff 	bl	8026124 <LL_APB1_GRP1_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 8026926:	f7ff f8b7 	bl	8025a98 <TRACER_EMB_CALLBACK_TX>
 802692a:	e002      	b.n	8026932 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
      return;
 802692c:	46c0      	nop			; (mov r8, r8)
 802692e:	e000      	b.n	8026932 <HW_TRACER_EMB_IRQHandlerUSART+0x18a>
        return;
 8026930:	46c0      	nop			; (mov r8, r8)
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 8026932:	46bd      	mov	sp, r7
 8026934:	b006      	add	sp, #24
 8026936:	bd80      	pop	{r7, pc}
 8026938:	40008000 	.word	0x40008000
 802693c:	20005500 	.word	0x20005500
 8026940:	40020000 	.word	0x40020000

08026944 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 8026944:	b5b0      	push	{r4, r5, r7, lr}
 8026946:	b084      	sub	sp, #16
 8026948:	af02      	add	r7, sp, #8
 802694a:	6078      	str	r0, [r7, #4]
 802694c:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 802694e:	2380      	movs	r3, #128	; 0x80
 8026950:	035b      	lsls	r3, r3, #13
 8026952:	0018      	movs	r0, r3
 8026954:	f7ff fbd0 	bl	80260f8 <LL_APB1_GRP1_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 8026958:	687c      	ldr	r4, [r7, #4]
 802695a:	4b13      	ldr	r3, [pc, #76]	; (80269a8 <HW_TRACER_EMB_SendData+0x64>)
 802695c:	2100      	movs	r1, #0
 802695e:	0018      	movs	r0, r3
 8026960:	f7ff fdfe 	bl	8026560 <LL_LPUART_DMA_GetRegAddr>
 8026964:	0005      	movs	r5, r0
 8026966:	4b11      	ldr	r3, [pc, #68]	; (80269ac <HW_TRACER_EMB_SendData+0x68>)
 8026968:	2102      	movs	r1, #2
 802696a:	0018      	movs	r0, r3
 802696c:	f7ff face 	bl	8025f0c <LL_DMA_GetDataTransferDirection>
 8026970:	0003      	movs	r3, r0
 8026972:	480e      	ldr	r0, [pc, #56]	; (80269ac <HW_TRACER_EMB_SendData+0x68>)
 8026974:	9300      	str	r3, [sp, #0]
 8026976:	002b      	movs	r3, r5
 8026978:	0022      	movs	r2, r4
 802697a:	2102      	movs	r1, #2
 802697c:	f7ff fb02 	bl	8025f84 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, TRACER_EMB_DMA_DIRECTION),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 8026980:	683b      	ldr	r3, [r7, #0]
 8026982:	480a      	ldr	r0, [pc, #40]	; (80269ac <HW_TRACER_EMB_SendData+0x68>)
 8026984:	001a      	movs	r2, r3
 8026986:	2102      	movs	r1, #2
 8026988:	f7ff fada 	bl	8025f40 <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 802698c:	4b06      	ldr	r3, [pc, #24]	; (80269a8 <HW_TRACER_EMB_SendData+0x64>)
 802698e:	0018      	movs	r0, r3
 8026990:	f7ff fdc7 	bl	8026522 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 8026994:	4b05      	ldr	r3, [pc, #20]	; (80269ac <HW_TRACER_EMB_SendData+0x68>)
 8026996:	2102      	movs	r1, #2
 8026998:	0018      	movs	r0, r3
 802699a:	f7ff fa51 	bl	8025e40 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 802699e:	46c0      	nop			; (mov r8, r8)
 80269a0:	46bd      	mov	sp, r7
 80269a2:	b002      	add	sp, #8
 80269a4:	bdb0      	pop	{r4, r5, r7, pc}
 80269a6:	46c0      	nop			; (mov r8, r8)
 80269a8:	40008000 	.word	0x40008000
 80269ac:	40020000 	.word	0x40020000

080269b0 <atof>:
 80269b0:	b510      	push	{r4, lr}
 80269b2:	2100      	movs	r1, #0
 80269b4:	f000 fee2 	bl	802777c <strtod>
 80269b8:	bd10      	pop	{r4, pc}
	...

080269bc <malloc>:
 80269bc:	b510      	push	{r4, lr}
 80269be:	4b03      	ldr	r3, [pc, #12]	; (80269cc <malloc+0x10>)
 80269c0:	0001      	movs	r1, r0
 80269c2:	6818      	ldr	r0, [r3, #0]
 80269c4:	f000 f826 	bl	8026a14 <_malloc_r>
 80269c8:	bd10      	pop	{r4, pc}
 80269ca:	46c0      	nop			; (mov r8, r8)
 80269cc:	20000488 	.word	0x20000488

080269d0 <sbrk_aligned>:
 80269d0:	b570      	push	{r4, r5, r6, lr}
 80269d2:	4e0f      	ldr	r6, [pc, #60]	; (8026a10 <sbrk_aligned+0x40>)
 80269d4:	000d      	movs	r5, r1
 80269d6:	6831      	ldr	r1, [r6, #0]
 80269d8:	0004      	movs	r4, r0
 80269da:	2900      	cmp	r1, #0
 80269dc:	d102      	bne.n	80269e4 <sbrk_aligned+0x14>
 80269de:	f001 f975 	bl	8027ccc <_sbrk_r>
 80269e2:	6030      	str	r0, [r6, #0]
 80269e4:	0029      	movs	r1, r5
 80269e6:	0020      	movs	r0, r4
 80269e8:	f001 f970 	bl	8027ccc <_sbrk_r>
 80269ec:	1c43      	adds	r3, r0, #1
 80269ee:	d00a      	beq.n	8026a06 <sbrk_aligned+0x36>
 80269f0:	2303      	movs	r3, #3
 80269f2:	1cc5      	adds	r5, r0, #3
 80269f4:	439d      	bics	r5, r3
 80269f6:	42a8      	cmp	r0, r5
 80269f8:	d007      	beq.n	8026a0a <sbrk_aligned+0x3a>
 80269fa:	1a29      	subs	r1, r5, r0
 80269fc:	0020      	movs	r0, r4
 80269fe:	f001 f965 	bl	8027ccc <_sbrk_r>
 8026a02:	3001      	adds	r0, #1
 8026a04:	d101      	bne.n	8026a0a <sbrk_aligned+0x3a>
 8026a06:	2501      	movs	r5, #1
 8026a08:	426d      	negs	r5, r5
 8026a0a:	0028      	movs	r0, r5
 8026a0c:	bd70      	pop	{r4, r5, r6, pc}
 8026a0e:	46c0      	nop			; (mov r8, r8)
 8026a10:	20005508 	.word	0x20005508

08026a14 <_malloc_r>:
 8026a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026a16:	2203      	movs	r2, #3
 8026a18:	1ccb      	adds	r3, r1, #3
 8026a1a:	4393      	bics	r3, r2
 8026a1c:	3308      	adds	r3, #8
 8026a1e:	0006      	movs	r6, r0
 8026a20:	001f      	movs	r7, r3
 8026a22:	2b0c      	cmp	r3, #12
 8026a24:	d238      	bcs.n	8026a98 <_malloc_r+0x84>
 8026a26:	270c      	movs	r7, #12
 8026a28:	42b9      	cmp	r1, r7
 8026a2a:	d837      	bhi.n	8026a9c <_malloc_r+0x88>
 8026a2c:	0030      	movs	r0, r6
 8026a2e:	f000 f873 	bl	8026b18 <__malloc_lock>
 8026a32:	4b38      	ldr	r3, [pc, #224]	; (8026b14 <_malloc_r+0x100>)
 8026a34:	9300      	str	r3, [sp, #0]
 8026a36:	681b      	ldr	r3, [r3, #0]
 8026a38:	001c      	movs	r4, r3
 8026a3a:	2c00      	cmp	r4, #0
 8026a3c:	d133      	bne.n	8026aa6 <_malloc_r+0x92>
 8026a3e:	0039      	movs	r1, r7
 8026a40:	0030      	movs	r0, r6
 8026a42:	f7ff ffc5 	bl	80269d0 <sbrk_aligned>
 8026a46:	0004      	movs	r4, r0
 8026a48:	1c43      	adds	r3, r0, #1
 8026a4a:	d15e      	bne.n	8026b0a <_malloc_r+0xf6>
 8026a4c:	9b00      	ldr	r3, [sp, #0]
 8026a4e:	681c      	ldr	r4, [r3, #0]
 8026a50:	0025      	movs	r5, r4
 8026a52:	2d00      	cmp	r5, #0
 8026a54:	d14e      	bne.n	8026af4 <_malloc_r+0xe0>
 8026a56:	2c00      	cmp	r4, #0
 8026a58:	d051      	beq.n	8026afe <_malloc_r+0xea>
 8026a5a:	6823      	ldr	r3, [r4, #0]
 8026a5c:	0029      	movs	r1, r5
 8026a5e:	18e3      	adds	r3, r4, r3
 8026a60:	0030      	movs	r0, r6
 8026a62:	9301      	str	r3, [sp, #4]
 8026a64:	f001 f932 	bl	8027ccc <_sbrk_r>
 8026a68:	9b01      	ldr	r3, [sp, #4]
 8026a6a:	4283      	cmp	r3, r0
 8026a6c:	d147      	bne.n	8026afe <_malloc_r+0xea>
 8026a6e:	6823      	ldr	r3, [r4, #0]
 8026a70:	0030      	movs	r0, r6
 8026a72:	1aff      	subs	r7, r7, r3
 8026a74:	0039      	movs	r1, r7
 8026a76:	f7ff ffab 	bl	80269d0 <sbrk_aligned>
 8026a7a:	3001      	adds	r0, #1
 8026a7c:	d03f      	beq.n	8026afe <_malloc_r+0xea>
 8026a7e:	6823      	ldr	r3, [r4, #0]
 8026a80:	19db      	adds	r3, r3, r7
 8026a82:	6023      	str	r3, [r4, #0]
 8026a84:	9b00      	ldr	r3, [sp, #0]
 8026a86:	681b      	ldr	r3, [r3, #0]
 8026a88:	2b00      	cmp	r3, #0
 8026a8a:	d040      	beq.n	8026b0e <_malloc_r+0xfa>
 8026a8c:	685a      	ldr	r2, [r3, #4]
 8026a8e:	42a2      	cmp	r2, r4
 8026a90:	d133      	bne.n	8026afa <_malloc_r+0xe6>
 8026a92:	2200      	movs	r2, #0
 8026a94:	605a      	str	r2, [r3, #4]
 8026a96:	e014      	b.n	8026ac2 <_malloc_r+0xae>
 8026a98:	2b00      	cmp	r3, #0
 8026a9a:	dac5      	bge.n	8026a28 <_malloc_r+0x14>
 8026a9c:	230c      	movs	r3, #12
 8026a9e:	2500      	movs	r5, #0
 8026aa0:	6033      	str	r3, [r6, #0]
 8026aa2:	0028      	movs	r0, r5
 8026aa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026aa6:	6821      	ldr	r1, [r4, #0]
 8026aa8:	1bc9      	subs	r1, r1, r7
 8026aaa:	d420      	bmi.n	8026aee <_malloc_r+0xda>
 8026aac:	290b      	cmp	r1, #11
 8026aae:	d918      	bls.n	8026ae2 <_malloc_r+0xce>
 8026ab0:	19e2      	adds	r2, r4, r7
 8026ab2:	6027      	str	r7, [r4, #0]
 8026ab4:	42a3      	cmp	r3, r4
 8026ab6:	d112      	bne.n	8026ade <_malloc_r+0xca>
 8026ab8:	9b00      	ldr	r3, [sp, #0]
 8026aba:	601a      	str	r2, [r3, #0]
 8026abc:	6863      	ldr	r3, [r4, #4]
 8026abe:	6011      	str	r1, [r2, #0]
 8026ac0:	6053      	str	r3, [r2, #4]
 8026ac2:	0030      	movs	r0, r6
 8026ac4:	0025      	movs	r5, r4
 8026ac6:	f000 f82f 	bl	8026b28 <__malloc_unlock>
 8026aca:	2207      	movs	r2, #7
 8026acc:	350b      	adds	r5, #11
 8026ace:	1d23      	adds	r3, r4, #4
 8026ad0:	4395      	bics	r5, r2
 8026ad2:	1aea      	subs	r2, r5, r3
 8026ad4:	429d      	cmp	r5, r3
 8026ad6:	d0e4      	beq.n	8026aa2 <_malloc_r+0x8e>
 8026ad8:	1b5b      	subs	r3, r3, r5
 8026ada:	50a3      	str	r3, [r4, r2]
 8026adc:	e7e1      	b.n	8026aa2 <_malloc_r+0x8e>
 8026ade:	605a      	str	r2, [r3, #4]
 8026ae0:	e7ec      	b.n	8026abc <_malloc_r+0xa8>
 8026ae2:	6862      	ldr	r2, [r4, #4]
 8026ae4:	42a3      	cmp	r3, r4
 8026ae6:	d1d5      	bne.n	8026a94 <_malloc_r+0x80>
 8026ae8:	9b00      	ldr	r3, [sp, #0]
 8026aea:	601a      	str	r2, [r3, #0]
 8026aec:	e7e9      	b.n	8026ac2 <_malloc_r+0xae>
 8026aee:	0023      	movs	r3, r4
 8026af0:	6864      	ldr	r4, [r4, #4]
 8026af2:	e7a2      	b.n	8026a3a <_malloc_r+0x26>
 8026af4:	002c      	movs	r4, r5
 8026af6:	686d      	ldr	r5, [r5, #4]
 8026af8:	e7ab      	b.n	8026a52 <_malloc_r+0x3e>
 8026afa:	0013      	movs	r3, r2
 8026afc:	e7c4      	b.n	8026a88 <_malloc_r+0x74>
 8026afe:	230c      	movs	r3, #12
 8026b00:	0030      	movs	r0, r6
 8026b02:	6033      	str	r3, [r6, #0]
 8026b04:	f000 f810 	bl	8026b28 <__malloc_unlock>
 8026b08:	e7cb      	b.n	8026aa2 <_malloc_r+0x8e>
 8026b0a:	6027      	str	r7, [r4, #0]
 8026b0c:	e7d9      	b.n	8026ac2 <_malloc_r+0xae>
 8026b0e:	605b      	str	r3, [r3, #4]
 8026b10:	deff      	udf	#255	; 0xff
 8026b12:	46c0      	nop			; (mov r8, r8)
 8026b14:	20005504 	.word	0x20005504

08026b18 <__malloc_lock>:
 8026b18:	b510      	push	{r4, lr}
 8026b1a:	4802      	ldr	r0, [pc, #8]	; (8026b24 <__malloc_lock+0xc>)
 8026b1c:	f001 f927 	bl	8027d6e <__retarget_lock_acquire_recursive>
 8026b20:	bd10      	pop	{r4, pc}
 8026b22:	46c0      	nop			; (mov r8, r8)
 8026b24:	2000564c 	.word	0x2000564c

08026b28 <__malloc_unlock>:
 8026b28:	b510      	push	{r4, lr}
 8026b2a:	4802      	ldr	r0, [pc, #8]	; (8026b34 <__malloc_unlock+0xc>)
 8026b2c:	f001 f920 	bl	8027d70 <__retarget_lock_release_recursive>
 8026b30:	bd10      	pop	{r4, pc}
 8026b32:	46c0      	nop			; (mov r8, r8)
 8026b34:	2000564c 	.word	0x2000564c

08026b38 <sulp>:
 8026b38:	b570      	push	{r4, r5, r6, lr}
 8026b3a:	0016      	movs	r6, r2
 8026b3c:	000d      	movs	r5, r1
 8026b3e:	f002 f893 	bl	8028c68 <__ulp>
 8026b42:	2e00      	cmp	r6, #0
 8026b44:	d00d      	beq.n	8026b62 <sulp+0x2a>
 8026b46:	236b      	movs	r3, #107	; 0x6b
 8026b48:	006a      	lsls	r2, r5, #1
 8026b4a:	0d52      	lsrs	r2, r2, #21
 8026b4c:	1a9b      	subs	r3, r3, r2
 8026b4e:	2b00      	cmp	r3, #0
 8026b50:	dd07      	ble.n	8026b62 <sulp+0x2a>
 8026b52:	2400      	movs	r4, #0
 8026b54:	4a03      	ldr	r2, [pc, #12]	; (8026b64 <sulp+0x2c>)
 8026b56:	051b      	lsls	r3, r3, #20
 8026b58:	189d      	adds	r5, r3, r2
 8026b5a:	002b      	movs	r3, r5
 8026b5c:	0022      	movs	r2, r4
 8026b5e:	f7e0 fdc5 	bl	80076ec <__aeabi_dmul>
 8026b62:	bd70      	pop	{r4, r5, r6, pc}
 8026b64:	3ff00000 	.word	0x3ff00000

08026b68 <_strtod_l>:
 8026b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b6a:	b0a1      	sub	sp, #132	; 0x84
 8026b6c:	9219      	str	r2, [sp, #100]	; 0x64
 8026b6e:	2200      	movs	r2, #0
 8026b70:	2600      	movs	r6, #0
 8026b72:	2700      	movs	r7, #0
 8026b74:	9004      	str	r0, [sp, #16]
 8026b76:	9107      	str	r1, [sp, #28]
 8026b78:	921c      	str	r2, [sp, #112]	; 0x70
 8026b7a:	911b      	str	r1, [sp, #108]	; 0x6c
 8026b7c:	780a      	ldrb	r2, [r1, #0]
 8026b7e:	2a2b      	cmp	r2, #43	; 0x2b
 8026b80:	d055      	beq.n	8026c2e <_strtod_l+0xc6>
 8026b82:	d841      	bhi.n	8026c08 <_strtod_l+0xa0>
 8026b84:	2a0d      	cmp	r2, #13
 8026b86:	d83b      	bhi.n	8026c00 <_strtod_l+0x98>
 8026b88:	2a08      	cmp	r2, #8
 8026b8a:	d83b      	bhi.n	8026c04 <_strtod_l+0x9c>
 8026b8c:	2a00      	cmp	r2, #0
 8026b8e:	d044      	beq.n	8026c1a <_strtod_l+0xb2>
 8026b90:	2200      	movs	r2, #0
 8026b92:	920f      	str	r2, [sp, #60]	; 0x3c
 8026b94:	2100      	movs	r1, #0
 8026b96:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8026b98:	9109      	str	r1, [sp, #36]	; 0x24
 8026b9a:	782a      	ldrb	r2, [r5, #0]
 8026b9c:	2a30      	cmp	r2, #48	; 0x30
 8026b9e:	d000      	beq.n	8026ba2 <_strtod_l+0x3a>
 8026ba0:	e085      	b.n	8026cae <_strtod_l+0x146>
 8026ba2:	786a      	ldrb	r2, [r5, #1]
 8026ba4:	3120      	adds	r1, #32
 8026ba6:	438a      	bics	r2, r1
 8026ba8:	2a58      	cmp	r2, #88	; 0x58
 8026baa:	d000      	beq.n	8026bae <_strtod_l+0x46>
 8026bac:	e075      	b.n	8026c9a <_strtod_l+0x132>
 8026bae:	9302      	str	r3, [sp, #8]
 8026bb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026bb2:	4a97      	ldr	r2, [pc, #604]	; (8026e10 <_strtod_l+0x2a8>)
 8026bb4:	9301      	str	r3, [sp, #4]
 8026bb6:	ab1c      	add	r3, sp, #112	; 0x70
 8026bb8:	9300      	str	r3, [sp, #0]
 8026bba:	9804      	ldr	r0, [sp, #16]
 8026bbc:	ab1d      	add	r3, sp, #116	; 0x74
 8026bbe:	a91b      	add	r1, sp, #108	; 0x6c
 8026bc0:	f001 f9c8 	bl	8027f54 <__gethex>
 8026bc4:	230f      	movs	r3, #15
 8026bc6:	0002      	movs	r2, r0
 8026bc8:	401a      	ands	r2, r3
 8026bca:	0004      	movs	r4, r0
 8026bcc:	9205      	str	r2, [sp, #20]
 8026bce:	4218      	tst	r0, r3
 8026bd0:	d005      	beq.n	8026bde <_strtod_l+0x76>
 8026bd2:	2a06      	cmp	r2, #6
 8026bd4:	d12d      	bne.n	8026c32 <_strtod_l+0xca>
 8026bd6:	1c6b      	adds	r3, r5, #1
 8026bd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8026bda:	2300      	movs	r3, #0
 8026bdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8026bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026be0:	2b00      	cmp	r3, #0
 8026be2:	d002      	beq.n	8026bea <_strtod_l+0x82>
 8026be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026be6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8026be8:	6013      	str	r3, [r2, #0]
 8026bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026bec:	2b00      	cmp	r3, #0
 8026bee:	d01b      	beq.n	8026c28 <_strtod_l+0xc0>
 8026bf0:	2380      	movs	r3, #128	; 0x80
 8026bf2:	0032      	movs	r2, r6
 8026bf4:	061b      	lsls	r3, r3, #24
 8026bf6:	18fb      	adds	r3, r7, r3
 8026bf8:	0010      	movs	r0, r2
 8026bfa:	0019      	movs	r1, r3
 8026bfc:	b021      	add	sp, #132	; 0x84
 8026bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c00:	2a20      	cmp	r2, #32
 8026c02:	d1c5      	bne.n	8026b90 <_strtod_l+0x28>
 8026c04:	3101      	adds	r1, #1
 8026c06:	e7b8      	b.n	8026b7a <_strtod_l+0x12>
 8026c08:	2a2d      	cmp	r2, #45	; 0x2d
 8026c0a:	d1c1      	bne.n	8026b90 <_strtod_l+0x28>
 8026c0c:	3a2c      	subs	r2, #44	; 0x2c
 8026c0e:	920f      	str	r2, [sp, #60]	; 0x3c
 8026c10:	1c4a      	adds	r2, r1, #1
 8026c12:	921b      	str	r2, [sp, #108]	; 0x6c
 8026c14:	784a      	ldrb	r2, [r1, #1]
 8026c16:	2a00      	cmp	r2, #0
 8026c18:	d1bc      	bne.n	8026b94 <_strtod_l+0x2c>
 8026c1a:	9b07      	ldr	r3, [sp, #28]
 8026c1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8026c1e:	2300      	movs	r3, #0
 8026c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8026c22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026c24:	2b00      	cmp	r3, #0
 8026c26:	d1dd      	bne.n	8026be4 <_strtod_l+0x7c>
 8026c28:	0032      	movs	r2, r6
 8026c2a:	003b      	movs	r3, r7
 8026c2c:	e7e4      	b.n	8026bf8 <_strtod_l+0x90>
 8026c2e:	2200      	movs	r2, #0
 8026c30:	e7ed      	b.n	8026c0e <_strtod_l+0xa6>
 8026c32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026c34:	2a00      	cmp	r2, #0
 8026c36:	d007      	beq.n	8026c48 <_strtod_l+0xe0>
 8026c38:	2135      	movs	r1, #53	; 0x35
 8026c3a:	a81e      	add	r0, sp, #120	; 0x78
 8026c3c:	f002 f905 	bl	8028e4a <__copybits>
 8026c40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8026c42:	9804      	ldr	r0, [sp, #16]
 8026c44:	f001 fcce 	bl	80285e4 <_Bfree>
 8026c48:	9805      	ldr	r0, [sp, #20]
 8026c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026c4c:	3801      	subs	r0, #1
 8026c4e:	2804      	cmp	r0, #4
 8026c50:	d806      	bhi.n	8026c60 <_strtod_l+0xf8>
 8026c52:	f7df facd 	bl	80061f0 <__gnu_thumb1_case_uqi>
 8026c56:	0312      	.short	0x0312
 8026c58:	1e1c      	.short	0x1e1c
 8026c5a:	12          	.byte	0x12
 8026c5b:	00          	.byte	0x00
 8026c5c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8026c5e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8026c60:	05e4      	lsls	r4, r4, #23
 8026c62:	d502      	bpl.n	8026c6a <_strtod_l+0x102>
 8026c64:	2380      	movs	r3, #128	; 0x80
 8026c66:	061b      	lsls	r3, r3, #24
 8026c68:	431f      	orrs	r7, r3
 8026c6a:	4b6a      	ldr	r3, [pc, #424]	; (8026e14 <_strtod_l+0x2ac>)
 8026c6c:	423b      	tst	r3, r7
 8026c6e:	d1b6      	bne.n	8026bde <_strtod_l+0x76>
 8026c70:	f001 f852 	bl	8027d18 <__errno>
 8026c74:	2322      	movs	r3, #34	; 0x22
 8026c76:	6003      	str	r3, [r0, #0]
 8026c78:	e7b1      	b.n	8026bde <_strtod_l+0x76>
 8026c7a:	4967      	ldr	r1, [pc, #412]	; (8026e18 <_strtod_l+0x2b0>)
 8026c7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026c7e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8026c80:	400a      	ands	r2, r1
 8026c82:	4966      	ldr	r1, [pc, #408]	; (8026e1c <_strtod_l+0x2b4>)
 8026c84:	185b      	adds	r3, r3, r1
 8026c86:	051b      	lsls	r3, r3, #20
 8026c88:	431a      	orrs	r2, r3
 8026c8a:	0017      	movs	r7, r2
 8026c8c:	e7e8      	b.n	8026c60 <_strtod_l+0xf8>
 8026c8e:	4f61      	ldr	r7, [pc, #388]	; (8026e14 <_strtod_l+0x2ac>)
 8026c90:	e7e6      	b.n	8026c60 <_strtod_l+0xf8>
 8026c92:	2601      	movs	r6, #1
 8026c94:	4f62      	ldr	r7, [pc, #392]	; (8026e20 <_strtod_l+0x2b8>)
 8026c96:	4276      	negs	r6, r6
 8026c98:	e7e2      	b.n	8026c60 <_strtod_l+0xf8>
 8026c9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026c9c:	1c5a      	adds	r2, r3, #1
 8026c9e:	921b      	str	r2, [sp, #108]	; 0x6c
 8026ca0:	785b      	ldrb	r3, [r3, #1]
 8026ca2:	2b30      	cmp	r3, #48	; 0x30
 8026ca4:	d0f9      	beq.n	8026c9a <_strtod_l+0x132>
 8026ca6:	2b00      	cmp	r3, #0
 8026ca8:	d099      	beq.n	8026bde <_strtod_l+0x76>
 8026caa:	2301      	movs	r3, #1
 8026cac:	9309      	str	r3, [sp, #36]	; 0x24
 8026cae:	2500      	movs	r5, #0
 8026cb0:	220a      	movs	r2, #10
 8026cb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026cb4:	950d      	str	r5, [sp, #52]	; 0x34
 8026cb6:	9310      	str	r3, [sp, #64]	; 0x40
 8026cb8:	9508      	str	r5, [sp, #32]
 8026cba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026cbc:	7804      	ldrb	r4, [r0, #0]
 8026cbe:	0023      	movs	r3, r4
 8026cc0:	3b30      	subs	r3, #48	; 0x30
 8026cc2:	b2d9      	uxtb	r1, r3
 8026cc4:	2909      	cmp	r1, #9
 8026cc6:	d927      	bls.n	8026d18 <_strtod_l+0x1b0>
 8026cc8:	2201      	movs	r2, #1
 8026cca:	4956      	ldr	r1, [pc, #344]	; (8026e24 <_strtod_l+0x2bc>)
 8026ccc:	f000 fedd 	bl	8027a8a <strncmp>
 8026cd0:	2800      	cmp	r0, #0
 8026cd2:	d031      	beq.n	8026d38 <_strtod_l+0x1d0>
 8026cd4:	2000      	movs	r0, #0
 8026cd6:	0023      	movs	r3, r4
 8026cd8:	4684      	mov	ip, r0
 8026cda:	9a08      	ldr	r2, [sp, #32]
 8026cdc:	900c      	str	r0, [sp, #48]	; 0x30
 8026cde:	9205      	str	r2, [sp, #20]
 8026ce0:	2220      	movs	r2, #32
 8026ce2:	0019      	movs	r1, r3
 8026ce4:	4391      	bics	r1, r2
 8026ce6:	000a      	movs	r2, r1
 8026ce8:	2100      	movs	r1, #0
 8026cea:	9106      	str	r1, [sp, #24]
 8026cec:	2a45      	cmp	r2, #69	; 0x45
 8026cee:	d000      	beq.n	8026cf2 <_strtod_l+0x18a>
 8026cf0:	e0c2      	b.n	8026e78 <_strtod_l+0x310>
 8026cf2:	9b05      	ldr	r3, [sp, #20]
 8026cf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026cf6:	4303      	orrs	r3, r0
 8026cf8:	4313      	orrs	r3, r2
 8026cfa:	428b      	cmp	r3, r1
 8026cfc:	d08d      	beq.n	8026c1a <_strtod_l+0xb2>
 8026cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026d00:	9307      	str	r3, [sp, #28]
 8026d02:	3301      	adds	r3, #1
 8026d04:	931b      	str	r3, [sp, #108]	; 0x6c
 8026d06:	9b07      	ldr	r3, [sp, #28]
 8026d08:	785b      	ldrb	r3, [r3, #1]
 8026d0a:	2b2b      	cmp	r3, #43	; 0x2b
 8026d0c:	d071      	beq.n	8026df2 <_strtod_l+0x28a>
 8026d0e:	000c      	movs	r4, r1
 8026d10:	2b2d      	cmp	r3, #45	; 0x2d
 8026d12:	d174      	bne.n	8026dfe <_strtod_l+0x296>
 8026d14:	2401      	movs	r4, #1
 8026d16:	e06d      	b.n	8026df4 <_strtod_l+0x28c>
 8026d18:	9908      	ldr	r1, [sp, #32]
 8026d1a:	2908      	cmp	r1, #8
 8026d1c:	dc09      	bgt.n	8026d32 <_strtod_l+0x1ca>
 8026d1e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026d20:	4351      	muls	r1, r2
 8026d22:	185b      	adds	r3, r3, r1
 8026d24:	930d      	str	r3, [sp, #52]	; 0x34
 8026d26:	9b08      	ldr	r3, [sp, #32]
 8026d28:	3001      	adds	r0, #1
 8026d2a:	3301      	adds	r3, #1
 8026d2c:	9308      	str	r3, [sp, #32]
 8026d2e:	901b      	str	r0, [sp, #108]	; 0x6c
 8026d30:	e7c3      	b.n	8026cba <_strtod_l+0x152>
 8026d32:	4355      	muls	r5, r2
 8026d34:	195d      	adds	r5, r3, r5
 8026d36:	e7f6      	b.n	8026d26 <_strtod_l+0x1be>
 8026d38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026d3a:	1c5a      	adds	r2, r3, #1
 8026d3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8026d3e:	9a08      	ldr	r2, [sp, #32]
 8026d40:	785b      	ldrb	r3, [r3, #1]
 8026d42:	2a00      	cmp	r2, #0
 8026d44:	d03a      	beq.n	8026dbc <_strtod_l+0x254>
 8026d46:	900c      	str	r0, [sp, #48]	; 0x30
 8026d48:	9205      	str	r2, [sp, #20]
 8026d4a:	001a      	movs	r2, r3
 8026d4c:	3a30      	subs	r2, #48	; 0x30
 8026d4e:	2a09      	cmp	r2, #9
 8026d50:	d912      	bls.n	8026d78 <_strtod_l+0x210>
 8026d52:	2201      	movs	r2, #1
 8026d54:	4694      	mov	ip, r2
 8026d56:	e7c3      	b.n	8026ce0 <_strtod_l+0x178>
 8026d58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026d5a:	3001      	adds	r0, #1
 8026d5c:	1c5a      	adds	r2, r3, #1
 8026d5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8026d60:	785b      	ldrb	r3, [r3, #1]
 8026d62:	2b30      	cmp	r3, #48	; 0x30
 8026d64:	d0f8      	beq.n	8026d58 <_strtod_l+0x1f0>
 8026d66:	001a      	movs	r2, r3
 8026d68:	3a31      	subs	r2, #49	; 0x31
 8026d6a:	2a08      	cmp	r2, #8
 8026d6c:	d83c      	bhi.n	8026de8 <_strtod_l+0x280>
 8026d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8026d70:	2000      	movs	r0, #0
 8026d72:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026d74:	9005      	str	r0, [sp, #20]
 8026d76:	9210      	str	r2, [sp, #64]	; 0x40
 8026d78:	001a      	movs	r2, r3
 8026d7a:	1c41      	adds	r1, r0, #1
 8026d7c:	3a30      	subs	r2, #48	; 0x30
 8026d7e:	2b30      	cmp	r3, #48	; 0x30
 8026d80:	d016      	beq.n	8026db0 <_strtod_l+0x248>
 8026d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d84:	185b      	adds	r3, r3, r1
 8026d86:	930c      	str	r3, [sp, #48]	; 0x30
 8026d88:	9b05      	ldr	r3, [sp, #20]
 8026d8a:	210a      	movs	r1, #10
 8026d8c:	469c      	mov	ip, r3
 8026d8e:	4484      	add	ip, r0
 8026d90:	4563      	cmp	r3, ip
 8026d92:	d115      	bne.n	8026dc0 <_strtod_l+0x258>
 8026d94:	9905      	ldr	r1, [sp, #20]
 8026d96:	9b05      	ldr	r3, [sp, #20]
 8026d98:	3101      	adds	r1, #1
 8026d9a:	1809      	adds	r1, r1, r0
 8026d9c:	181b      	adds	r3, r3, r0
 8026d9e:	9105      	str	r1, [sp, #20]
 8026da0:	2b08      	cmp	r3, #8
 8026da2:	dc19      	bgt.n	8026dd8 <_strtod_l+0x270>
 8026da4:	230a      	movs	r3, #10
 8026da6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8026da8:	434b      	muls	r3, r1
 8026daa:	2100      	movs	r1, #0
 8026dac:	18d3      	adds	r3, r2, r3
 8026dae:	930d      	str	r3, [sp, #52]	; 0x34
 8026db0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026db2:	0008      	movs	r0, r1
 8026db4:	1c5a      	adds	r2, r3, #1
 8026db6:	921b      	str	r2, [sp, #108]	; 0x6c
 8026db8:	785b      	ldrb	r3, [r3, #1]
 8026dba:	e7c6      	b.n	8026d4a <_strtod_l+0x1e2>
 8026dbc:	9808      	ldr	r0, [sp, #32]
 8026dbe:	e7d0      	b.n	8026d62 <_strtod_l+0x1fa>
 8026dc0:	1c5c      	adds	r4, r3, #1
 8026dc2:	2b08      	cmp	r3, #8
 8026dc4:	dc04      	bgt.n	8026dd0 <_strtod_l+0x268>
 8026dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026dc8:	434b      	muls	r3, r1
 8026dca:	930d      	str	r3, [sp, #52]	; 0x34
 8026dcc:	0023      	movs	r3, r4
 8026dce:	e7df      	b.n	8026d90 <_strtod_l+0x228>
 8026dd0:	2c10      	cmp	r4, #16
 8026dd2:	dcfb      	bgt.n	8026dcc <_strtod_l+0x264>
 8026dd4:	434d      	muls	r5, r1
 8026dd6:	e7f9      	b.n	8026dcc <_strtod_l+0x264>
 8026dd8:	9b05      	ldr	r3, [sp, #20]
 8026dda:	2100      	movs	r1, #0
 8026ddc:	2b10      	cmp	r3, #16
 8026dde:	dce7      	bgt.n	8026db0 <_strtod_l+0x248>
 8026de0:	230a      	movs	r3, #10
 8026de2:	435d      	muls	r5, r3
 8026de4:	1955      	adds	r5, r2, r5
 8026de6:	e7e3      	b.n	8026db0 <_strtod_l+0x248>
 8026de8:	2200      	movs	r2, #0
 8026dea:	920c      	str	r2, [sp, #48]	; 0x30
 8026dec:	9205      	str	r2, [sp, #20]
 8026dee:	3201      	adds	r2, #1
 8026df0:	e7b0      	b.n	8026d54 <_strtod_l+0x1ec>
 8026df2:	2400      	movs	r4, #0
 8026df4:	9b07      	ldr	r3, [sp, #28]
 8026df6:	3302      	adds	r3, #2
 8026df8:	931b      	str	r3, [sp, #108]	; 0x6c
 8026dfa:	9b07      	ldr	r3, [sp, #28]
 8026dfc:	789b      	ldrb	r3, [r3, #2]
 8026dfe:	001a      	movs	r2, r3
 8026e00:	3a30      	subs	r2, #48	; 0x30
 8026e02:	2a09      	cmp	r2, #9
 8026e04:	d914      	bls.n	8026e30 <_strtod_l+0x2c8>
 8026e06:	9a07      	ldr	r2, [sp, #28]
 8026e08:	921b      	str	r2, [sp, #108]	; 0x6c
 8026e0a:	2200      	movs	r2, #0
 8026e0c:	e033      	b.n	8026e76 <_strtod_l+0x30e>
 8026e0e:	46c0      	nop			; (mov r8, r8)
 8026e10:	0802b990 	.word	0x0802b990
 8026e14:	7ff00000 	.word	0x7ff00000
 8026e18:	ffefffff 	.word	0xffefffff
 8026e1c:	00000433 	.word	0x00000433
 8026e20:	7fffffff 	.word	0x7fffffff
 8026e24:	0802b97f 	.word	0x0802b97f
 8026e28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026e2a:	1c5a      	adds	r2, r3, #1
 8026e2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8026e2e:	785b      	ldrb	r3, [r3, #1]
 8026e30:	2b30      	cmp	r3, #48	; 0x30
 8026e32:	d0f9      	beq.n	8026e28 <_strtod_l+0x2c0>
 8026e34:	2200      	movs	r2, #0
 8026e36:	9206      	str	r2, [sp, #24]
 8026e38:	001a      	movs	r2, r3
 8026e3a:	3a31      	subs	r2, #49	; 0x31
 8026e3c:	2a08      	cmp	r2, #8
 8026e3e:	d81b      	bhi.n	8026e78 <_strtod_l+0x310>
 8026e40:	3b30      	subs	r3, #48	; 0x30
 8026e42:	930e      	str	r3, [sp, #56]	; 0x38
 8026e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026e46:	9306      	str	r3, [sp, #24]
 8026e48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026e4a:	1c59      	adds	r1, r3, #1
 8026e4c:	911b      	str	r1, [sp, #108]	; 0x6c
 8026e4e:	785b      	ldrb	r3, [r3, #1]
 8026e50:	001a      	movs	r2, r3
 8026e52:	3a30      	subs	r2, #48	; 0x30
 8026e54:	2a09      	cmp	r2, #9
 8026e56:	d93a      	bls.n	8026ece <_strtod_l+0x366>
 8026e58:	9a06      	ldr	r2, [sp, #24]
 8026e5a:	1a8a      	subs	r2, r1, r2
 8026e5c:	49b2      	ldr	r1, [pc, #712]	; (8027128 <_strtod_l+0x5c0>)
 8026e5e:	9106      	str	r1, [sp, #24]
 8026e60:	2a08      	cmp	r2, #8
 8026e62:	dc04      	bgt.n	8026e6e <_strtod_l+0x306>
 8026e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026e66:	9206      	str	r2, [sp, #24]
 8026e68:	428a      	cmp	r2, r1
 8026e6a:	dd00      	ble.n	8026e6e <_strtod_l+0x306>
 8026e6c:	9106      	str	r1, [sp, #24]
 8026e6e:	2c00      	cmp	r4, #0
 8026e70:	d002      	beq.n	8026e78 <_strtod_l+0x310>
 8026e72:	9a06      	ldr	r2, [sp, #24]
 8026e74:	4252      	negs	r2, r2
 8026e76:	9206      	str	r2, [sp, #24]
 8026e78:	9a05      	ldr	r2, [sp, #20]
 8026e7a:	2a00      	cmp	r2, #0
 8026e7c:	d14d      	bne.n	8026f1a <_strtod_l+0x3b2>
 8026e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e80:	4310      	orrs	r0, r2
 8026e82:	d000      	beq.n	8026e86 <_strtod_l+0x31e>
 8026e84:	e6ab      	b.n	8026bde <_strtod_l+0x76>
 8026e86:	4662      	mov	r2, ip
 8026e88:	2a00      	cmp	r2, #0
 8026e8a:	d000      	beq.n	8026e8e <_strtod_l+0x326>
 8026e8c:	e6c5      	b.n	8026c1a <_strtod_l+0xb2>
 8026e8e:	2b69      	cmp	r3, #105	; 0x69
 8026e90:	d027      	beq.n	8026ee2 <_strtod_l+0x37a>
 8026e92:	dc23      	bgt.n	8026edc <_strtod_l+0x374>
 8026e94:	2b49      	cmp	r3, #73	; 0x49
 8026e96:	d024      	beq.n	8026ee2 <_strtod_l+0x37a>
 8026e98:	2b4e      	cmp	r3, #78	; 0x4e
 8026e9a:	d000      	beq.n	8026e9e <_strtod_l+0x336>
 8026e9c:	e6bd      	b.n	8026c1a <_strtod_l+0xb2>
 8026e9e:	49a3      	ldr	r1, [pc, #652]	; (802712c <_strtod_l+0x5c4>)
 8026ea0:	a81b      	add	r0, sp, #108	; 0x6c
 8026ea2:	f001 fa8d 	bl	80283c0 <__match>
 8026ea6:	2800      	cmp	r0, #0
 8026ea8:	d100      	bne.n	8026eac <_strtod_l+0x344>
 8026eaa:	e6b6      	b.n	8026c1a <_strtod_l+0xb2>
 8026eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026eae:	781b      	ldrb	r3, [r3, #0]
 8026eb0:	2b28      	cmp	r3, #40	; 0x28
 8026eb2:	d12c      	bne.n	8026f0e <_strtod_l+0x3a6>
 8026eb4:	499e      	ldr	r1, [pc, #632]	; (8027130 <_strtod_l+0x5c8>)
 8026eb6:	aa1e      	add	r2, sp, #120	; 0x78
 8026eb8:	a81b      	add	r0, sp, #108	; 0x6c
 8026eba:	f001 fa95 	bl	80283e8 <__hexnan>
 8026ebe:	2805      	cmp	r0, #5
 8026ec0:	d125      	bne.n	8026f0e <_strtod_l+0x3a6>
 8026ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026ec4:	4a9b      	ldr	r2, [pc, #620]	; (8027134 <_strtod_l+0x5cc>)
 8026ec6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8026ec8:	431a      	orrs	r2, r3
 8026eca:	0017      	movs	r7, r2
 8026ecc:	e687      	b.n	8026bde <_strtod_l+0x76>
 8026ece:	220a      	movs	r2, #10
 8026ed0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026ed2:	434a      	muls	r2, r1
 8026ed4:	18d2      	adds	r2, r2, r3
 8026ed6:	3a30      	subs	r2, #48	; 0x30
 8026ed8:	920e      	str	r2, [sp, #56]	; 0x38
 8026eda:	e7b5      	b.n	8026e48 <_strtod_l+0x2e0>
 8026edc:	2b6e      	cmp	r3, #110	; 0x6e
 8026ede:	d0de      	beq.n	8026e9e <_strtod_l+0x336>
 8026ee0:	e69b      	b.n	8026c1a <_strtod_l+0xb2>
 8026ee2:	4995      	ldr	r1, [pc, #596]	; (8027138 <_strtod_l+0x5d0>)
 8026ee4:	a81b      	add	r0, sp, #108	; 0x6c
 8026ee6:	f001 fa6b 	bl	80283c0 <__match>
 8026eea:	2800      	cmp	r0, #0
 8026eec:	d100      	bne.n	8026ef0 <_strtod_l+0x388>
 8026eee:	e694      	b.n	8026c1a <_strtod_l+0xb2>
 8026ef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026ef2:	4992      	ldr	r1, [pc, #584]	; (802713c <_strtod_l+0x5d4>)
 8026ef4:	3b01      	subs	r3, #1
 8026ef6:	a81b      	add	r0, sp, #108	; 0x6c
 8026ef8:	931b      	str	r3, [sp, #108]	; 0x6c
 8026efa:	f001 fa61 	bl	80283c0 <__match>
 8026efe:	2800      	cmp	r0, #0
 8026f00:	d102      	bne.n	8026f08 <_strtod_l+0x3a0>
 8026f02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026f04:	3301      	adds	r3, #1
 8026f06:	931b      	str	r3, [sp, #108]	; 0x6c
 8026f08:	2600      	movs	r6, #0
 8026f0a:	4f8a      	ldr	r7, [pc, #552]	; (8027134 <_strtod_l+0x5cc>)
 8026f0c:	e667      	b.n	8026bde <_strtod_l+0x76>
 8026f0e:	488c      	ldr	r0, [pc, #560]	; (8027140 <_strtod_l+0x5d8>)
 8026f10:	f000 ff48 	bl	8027da4 <nan>
 8026f14:	0006      	movs	r6, r0
 8026f16:	000f      	movs	r7, r1
 8026f18:	e661      	b.n	8026bde <_strtod_l+0x76>
 8026f1a:	9b06      	ldr	r3, [sp, #24]
 8026f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026f1e:	1a9b      	subs	r3, r3, r2
 8026f20:	9309      	str	r3, [sp, #36]	; 0x24
 8026f22:	9b08      	ldr	r3, [sp, #32]
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	d101      	bne.n	8026f2c <_strtod_l+0x3c4>
 8026f28:	9b05      	ldr	r3, [sp, #20]
 8026f2a:	9308      	str	r3, [sp, #32]
 8026f2c:	9c05      	ldr	r4, [sp, #20]
 8026f2e:	2c10      	cmp	r4, #16
 8026f30:	dd00      	ble.n	8026f34 <_strtod_l+0x3cc>
 8026f32:	2410      	movs	r4, #16
 8026f34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026f36:	f7e1 fa83 	bl	8008440 <__aeabi_ui2d>
 8026f3a:	9b05      	ldr	r3, [sp, #20]
 8026f3c:	0006      	movs	r6, r0
 8026f3e:	000f      	movs	r7, r1
 8026f40:	2b09      	cmp	r3, #9
 8026f42:	dd15      	ble.n	8026f70 <_strtod_l+0x408>
 8026f44:	0022      	movs	r2, r4
 8026f46:	4b7f      	ldr	r3, [pc, #508]	; (8027144 <_strtod_l+0x5dc>)
 8026f48:	3a09      	subs	r2, #9
 8026f4a:	00d2      	lsls	r2, r2, #3
 8026f4c:	189b      	adds	r3, r3, r2
 8026f4e:	681a      	ldr	r2, [r3, #0]
 8026f50:	685b      	ldr	r3, [r3, #4]
 8026f52:	f7e0 fbcb 	bl	80076ec <__aeabi_dmul>
 8026f56:	0006      	movs	r6, r0
 8026f58:	0028      	movs	r0, r5
 8026f5a:	000f      	movs	r7, r1
 8026f5c:	f7e1 fa70 	bl	8008440 <__aeabi_ui2d>
 8026f60:	0002      	movs	r2, r0
 8026f62:	000b      	movs	r3, r1
 8026f64:	0030      	movs	r0, r6
 8026f66:	0039      	movs	r1, r7
 8026f68:	f7df fc66 	bl	8006838 <__aeabi_dadd>
 8026f6c:	0006      	movs	r6, r0
 8026f6e:	000f      	movs	r7, r1
 8026f70:	9b05      	ldr	r3, [sp, #20]
 8026f72:	2b0f      	cmp	r3, #15
 8026f74:	dc39      	bgt.n	8026fea <_strtod_l+0x482>
 8026f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026f78:	2b00      	cmp	r3, #0
 8026f7a:	d100      	bne.n	8026f7e <_strtod_l+0x416>
 8026f7c:	e62f      	b.n	8026bde <_strtod_l+0x76>
 8026f7e:	dd24      	ble.n	8026fca <_strtod_l+0x462>
 8026f80:	2b16      	cmp	r3, #22
 8026f82:	dc09      	bgt.n	8026f98 <_strtod_l+0x430>
 8026f84:	496f      	ldr	r1, [pc, #444]	; (8027144 <_strtod_l+0x5dc>)
 8026f86:	00db      	lsls	r3, r3, #3
 8026f88:	18c9      	adds	r1, r1, r3
 8026f8a:	0032      	movs	r2, r6
 8026f8c:	6808      	ldr	r0, [r1, #0]
 8026f8e:	6849      	ldr	r1, [r1, #4]
 8026f90:	003b      	movs	r3, r7
 8026f92:	f7e0 fbab 	bl	80076ec <__aeabi_dmul>
 8026f96:	e7bd      	b.n	8026f14 <_strtod_l+0x3ac>
 8026f98:	2325      	movs	r3, #37	; 0x25
 8026f9a:	9a05      	ldr	r2, [sp, #20]
 8026f9c:	1a9b      	subs	r3, r3, r2
 8026f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fa0:	4293      	cmp	r3, r2
 8026fa2:	db22      	blt.n	8026fea <_strtod_l+0x482>
 8026fa4:	240f      	movs	r4, #15
 8026fa6:	9b05      	ldr	r3, [sp, #20]
 8026fa8:	4d66      	ldr	r5, [pc, #408]	; (8027144 <_strtod_l+0x5dc>)
 8026faa:	1ae4      	subs	r4, r4, r3
 8026fac:	00e1      	lsls	r1, r4, #3
 8026fae:	1869      	adds	r1, r5, r1
 8026fb0:	0032      	movs	r2, r6
 8026fb2:	6808      	ldr	r0, [r1, #0]
 8026fb4:	6849      	ldr	r1, [r1, #4]
 8026fb6:	003b      	movs	r3, r7
 8026fb8:	f7e0 fb98 	bl	80076ec <__aeabi_dmul>
 8026fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fbe:	1b1c      	subs	r4, r3, r4
 8026fc0:	00e4      	lsls	r4, r4, #3
 8026fc2:	192d      	adds	r5, r5, r4
 8026fc4:	682a      	ldr	r2, [r5, #0]
 8026fc6:	686b      	ldr	r3, [r5, #4]
 8026fc8:	e7e3      	b.n	8026f92 <_strtod_l+0x42a>
 8026fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fcc:	3316      	adds	r3, #22
 8026fce:	db0c      	blt.n	8026fea <_strtod_l+0x482>
 8026fd0:	9906      	ldr	r1, [sp, #24]
 8026fd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026fd4:	4b5b      	ldr	r3, [pc, #364]	; (8027144 <_strtod_l+0x5dc>)
 8026fd6:	1a52      	subs	r2, r2, r1
 8026fd8:	00d2      	lsls	r2, r2, #3
 8026fda:	189b      	adds	r3, r3, r2
 8026fdc:	0030      	movs	r0, r6
 8026fde:	681a      	ldr	r2, [r3, #0]
 8026fe0:	685b      	ldr	r3, [r3, #4]
 8026fe2:	0039      	movs	r1, r7
 8026fe4:	f7df ff88 	bl	8006ef8 <__aeabi_ddiv>
 8026fe8:	e794      	b.n	8026f14 <_strtod_l+0x3ac>
 8026fea:	9b05      	ldr	r3, [sp, #20]
 8026fec:	1b1c      	subs	r4, r3, r4
 8026fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ff0:	18e4      	adds	r4, r4, r3
 8026ff2:	2c00      	cmp	r4, #0
 8026ff4:	dd72      	ble.n	80270dc <_strtod_l+0x574>
 8026ff6:	220f      	movs	r2, #15
 8026ff8:	0023      	movs	r3, r4
 8026ffa:	4013      	ands	r3, r2
 8026ffc:	4214      	tst	r4, r2
 8026ffe:	d00a      	beq.n	8027016 <_strtod_l+0x4ae>
 8027000:	4950      	ldr	r1, [pc, #320]	; (8027144 <_strtod_l+0x5dc>)
 8027002:	00db      	lsls	r3, r3, #3
 8027004:	18c9      	adds	r1, r1, r3
 8027006:	0032      	movs	r2, r6
 8027008:	6808      	ldr	r0, [r1, #0]
 802700a:	6849      	ldr	r1, [r1, #4]
 802700c:	003b      	movs	r3, r7
 802700e:	f7e0 fb6d 	bl	80076ec <__aeabi_dmul>
 8027012:	0006      	movs	r6, r0
 8027014:	000f      	movs	r7, r1
 8027016:	230f      	movs	r3, #15
 8027018:	439c      	bics	r4, r3
 802701a:	d04a      	beq.n	80270b2 <_strtod_l+0x54a>
 802701c:	3326      	adds	r3, #38	; 0x26
 802701e:	33ff      	adds	r3, #255	; 0xff
 8027020:	429c      	cmp	r4, r3
 8027022:	dd22      	ble.n	802706a <_strtod_l+0x502>
 8027024:	2300      	movs	r3, #0
 8027026:	9305      	str	r3, [sp, #20]
 8027028:	9306      	str	r3, [sp, #24]
 802702a:	930d      	str	r3, [sp, #52]	; 0x34
 802702c:	9308      	str	r3, [sp, #32]
 802702e:	2322      	movs	r3, #34	; 0x22
 8027030:	2600      	movs	r6, #0
 8027032:	9a04      	ldr	r2, [sp, #16]
 8027034:	4f3f      	ldr	r7, [pc, #252]	; (8027134 <_strtod_l+0x5cc>)
 8027036:	6013      	str	r3, [r2, #0]
 8027038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802703a:	42b3      	cmp	r3, r6
 802703c:	d100      	bne.n	8027040 <_strtod_l+0x4d8>
 802703e:	e5ce      	b.n	8026bde <_strtod_l+0x76>
 8027040:	991c      	ldr	r1, [sp, #112]	; 0x70
 8027042:	9804      	ldr	r0, [sp, #16]
 8027044:	f001 face 	bl	80285e4 <_Bfree>
 8027048:	9908      	ldr	r1, [sp, #32]
 802704a:	9804      	ldr	r0, [sp, #16]
 802704c:	f001 faca 	bl	80285e4 <_Bfree>
 8027050:	9906      	ldr	r1, [sp, #24]
 8027052:	9804      	ldr	r0, [sp, #16]
 8027054:	f001 fac6 	bl	80285e4 <_Bfree>
 8027058:	990d      	ldr	r1, [sp, #52]	; 0x34
 802705a:	9804      	ldr	r0, [sp, #16]
 802705c:	f001 fac2 	bl	80285e4 <_Bfree>
 8027060:	9905      	ldr	r1, [sp, #20]
 8027062:	9804      	ldr	r0, [sp, #16]
 8027064:	f001 fabe 	bl	80285e4 <_Bfree>
 8027068:	e5b9      	b.n	8026bde <_strtod_l+0x76>
 802706a:	2300      	movs	r3, #0
 802706c:	0030      	movs	r0, r6
 802706e:	0039      	movs	r1, r7
 8027070:	4d35      	ldr	r5, [pc, #212]	; (8027148 <_strtod_l+0x5e0>)
 8027072:	1124      	asrs	r4, r4, #4
 8027074:	9307      	str	r3, [sp, #28]
 8027076:	2c01      	cmp	r4, #1
 8027078:	dc1e      	bgt.n	80270b8 <_strtod_l+0x550>
 802707a:	2b00      	cmp	r3, #0
 802707c:	d001      	beq.n	8027082 <_strtod_l+0x51a>
 802707e:	0006      	movs	r6, r0
 8027080:	000f      	movs	r7, r1
 8027082:	4b32      	ldr	r3, [pc, #200]	; (802714c <_strtod_l+0x5e4>)
 8027084:	9a07      	ldr	r2, [sp, #28]
 8027086:	18ff      	adds	r7, r7, r3
 8027088:	4b2f      	ldr	r3, [pc, #188]	; (8027148 <_strtod_l+0x5e0>)
 802708a:	00d2      	lsls	r2, r2, #3
 802708c:	189d      	adds	r5, r3, r2
 802708e:	6828      	ldr	r0, [r5, #0]
 8027090:	6869      	ldr	r1, [r5, #4]
 8027092:	0032      	movs	r2, r6
 8027094:	003b      	movs	r3, r7
 8027096:	f7e0 fb29 	bl	80076ec <__aeabi_dmul>
 802709a:	4b26      	ldr	r3, [pc, #152]	; (8027134 <_strtod_l+0x5cc>)
 802709c:	4a2c      	ldr	r2, [pc, #176]	; (8027150 <_strtod_l+0x5e8>)
 802709e:	0006      	movs	r6, r0
 80270a0:	400b      	ands	r3, r1
 80270a2:	4293      	cmp	r3, r2
 80270a4:	d8be      	bhi.n	8027024 <_strtod_l+0x4bc>
 80270a6:	4a2b      	ldr	r2, [pc, #172]	; (8027154 <_strtod_l+0x5ec>)
 80270a8:	4293      	cmp	r3, r2
 80270aa:	d913      	bls.n	80270d4 <_strtod_l+0x56c>
 80270ac:	2601      	movs	r6, #1
 80270ae:	4f2a      	ldr	r7, [pc, #168]	; (8027158 <_strtod_l+0x5f0>)
 80270b0:	4276      	negs	r6, r6
 80270b2:	2300      	movs	r3, #0
 80270b4:	9307      	str	r3, [sp, #28]
 80270b6:	e088      	b.n	80271ca <_strtod_l+0x662>
 80270b8:	2201      	movs	r2, #1
 80270ba:	4214      	tst	r4, r2
 80270bc:	d004      	beq.n	80270c8 <_strtod_l+0x560>
 80270be:	682a      	ldr	r2, [r5, #0]
 80270c0:	686b      	ldr	r3, [r5, #4]
 80270c2:	f7e0 fb13 	bl	80076ec <__aeabi_dmul>
 80270c6:	2301      	movs	r3, #1
 80270c8:	9a07      	ldr	r2, [sp, #28]
 80270ca:	1064      	asrs	r4, r4, #1
 80270cc:	3201      	adds	r2, #1
 80270ce:	9207      	str	r2, [sp, #28]
 80270d0:	3508      	adds	r5, #8
 80270d2:	e7d0      	b.n	8027076 <_strtod_l+0x50e>
 80270d4:	23d4      	movs	r3, #212	; 0xd4
 80270d6:	049b      	lsls	r3, r3, #18
 80270d8:	18cf      	adds	r7, r1, r3
 80270da:	e7ea      	b.n	80270b2 <_strtod_l+0x54a>
 80270dc:	2c00      	cmp	r4, #0
 80270de:	d0e8      	beq.n	80270b2 <_strtod_l+0x54a>
 80270e0:	4264      	negs	r4, r4
 80270e2:	230f      	movs	r3, #15
 80270e4:	0022      	movs	r2, r4
 80270e6:	401a      	ands	r2, r3
 80270e8:	421c      	tst	r4, r3
 80270ea:	d00a      	beq.n	8027102 <_strtod_l+0x59a>
 80270ec:	4b15      	ldr	r3, [pc, #84]	; (8027144 <_strtod_l+0x5dc>)
 80270ee:	00d2      	lsls	r2, r2, #3
 80270f0:	189b      	adds	r3, r3, r2
 80270f2:	0030      	movs	r0, r6
 80270f4:	681a      	ldr	r2, [r3, #0]
 80270f6:	685b      	ldr	r3, [r3, #4]
 80270f8:	0039      	movs	r1, r7
 80270fa:	f7df fefd 	bl	8006ef8 <__aeabi_ddiv>
 80270fe:	0006      	movs	r6, r0
 8027100:	000f      	movs	r7, r1
 8027102:	1124      	asrs	r4, r4, #4
 8027104:	d0d5      	beq.n	80270b2 <_strtod_l+0x54a>
 8027106:	2c1f      	cmp	r4, #31
 8027108:	dd28      	ble.n	802715c <_strtod_l+0x5f4>
 802710a:	2300      	movs	r3, #0
 802710c:	9305      	str	r3, [sp, #20]
 802710e:	9306      	str	r3, [sp, #24]
 8027110:	930d      	str	r3, [sp, #52]	; 0x34
 8027112:	9308      	str	r3, [sp, #32]
 8027114:	2322      	movs	r3, #34	; 0x22
 8027116:	9a04      	ldr	r2, [sp, #16]
 8027118:	2600      	movs	r6, #0
 802711a:	6013      	str	r3, [r2, #0]
 802711c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802711e:	2700      	movs	r7, #0
 8027120:	2b00      	cmp	r3, #0
 8027122:	d18d      	bne.n	8027040 <_strtod_l+0x4d8>
 8027124:	e55b      	b.n	8026bde <_strtod_l+0x76>
 8027126:	46c0      	nop			; (mov r8, r8)
 8027128:	00004e1f 	.word	0x00004e1f
 802712c:	0802b98a 	.word	0x0802b98a
 8027130:	0802b9a4 	.word	0x0802b9a4
 8027134:	7ff00000 	.word	0x7ff00000
 8027138:	0802b981 	.word	0x0802b981
 802713c:	0802b984 	.word	0x0802b984
 8027140:	0802ba94 	.word	0x0802ba94
 8027144:	0802bb88 	.word	0x0802bb88
 8027148:	0802bb60 	.word	0x0802bb60
 802714c:	fcb00000 	.word	0xfcb00000
 8027150:	7ca00000 	.word	0x7ca00000
 8027154:	7c900000 	.word	0x7c900000
 8027158:	7fefffff 	.word	0x7fefffff
 802715c:	2310      	movs	r3, #16
 802715e:	0022      	movs	r2, r4
 8027160:	401a      	ands	r2, r3
 8027162:	9207      	str	r2, [sp, #28]
 8027164:	421c      	tst	r4, r3
 8027166:	d001      	beq.n	802716c <_strtod_l+0x604>
 8027168:	335a      	adds	r3, #90	; 0x5a
 802716a:	9307      	str	r3, [sp, #28]
 802716c:	0030      	movs	r0, r6
 802716e:	0039      	movs	r1, r7
 8027170:	2300      	movs	r3, #0
 8027172:	4dc4      	ldr	r5, [pc, #784]	; (8027484 <_strtod_l+0x91c>)
 8027174:	2201      	movs	r2, #1
 8027176:	4214      	tst	r4, r2
 8027178:	d004      	beq.n	8027184 <_strtod_l+0x61c>
 802717a:	682a      	ldr	r2, [r5, #0]
 802717c:	686b      	ldr	r3, [r5, #4]
 802717e:	f7e0 fab5 	bl	80076ec <__aeabi_dmul>
 8027182:	2301      	movs	r3, #1
 8027184:	1064      	asrs	r4, r4, #1
 8027186:	3508      	adds	r5, #8
 8027188:	2c00      	cmp	r4, #0
 802718a:	d1f3      	bne.n	8027174 <_strtod_l+0x60c>
 802718c:	2b00      	cmp	r3, #0
 802718e:	d001      	beq.n	8027194 <_strtod_l+0x62c>
 8027190:	0006      	movs	r6, r0
 8027192:	000f      	movs	r7, r1
 8027194:	9b07      	ldr	r3, [sp, #28]
 8027196:	2b00      	cmp	r3, #0
 8027198:	d00f      	beq.n	80271ba <_strtod_l+0x652>
 802719a:	236b      	movs	r3, #107	; 0x6b
 802719c:	007a      	lsls	r2, r7, #1
 802719e:	0d52      	lsrs	r2, r2, #21
 80271a0:	0039      	movs	r1, r7
 80271a2:	1a9b      	subs	r3, r3, r2
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	dd08      	ble.n	80271ba <_strtod_l+0x652>
 80271a8:	2b1f      	cmp	r3, #31
 80271aa:	dc00      	bgt.n	80271ae <_strtod_l+0x646>
 80271ac:	e121      	b.n	80273f2 <_strtod_l+0x88a>
 80271ae:	2600      	movs	r6, #0
 80271b0:	2b34      	cmp	r3, #52	; 0x34
 80271b2:	dc00      	bgt.n	80271b6 <_strtod_l+0x64e>
 80271b4:	e116      	b.n	80273e4 <_strtod_l+0x87c>
 80271b6:	27dc      	movs	r7, #220	; 0xdc
 80271b8:	04bf      	lsls	r7, r7, #18
 80271ba:	2200      	movs	r2, #0
 80271bc:	2300      	movs	r3, #0
 80271be:	0030      	movs	r0, r6
 80271c0:	0039      	movs	r1, r7
 80271c2:	f7df f9af 	bl	8006524 <__aeabi_dcmpeq>
 80271c6:	2800      	cmp	r0, #0
 80271c8:	d19f      	bne.n	802710a <_strtod_l+0x5a2>
 80271ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80271cc:	9a08      	ldr	r2, [sp, #32]
 80271ce:	9300      	str	r3, [sp, #0]
 80271d0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80271d2:	9b05      	ldr	r3, [sp, #20]
 80271d4:	9804      	ldr	r0, [sp, #16]
 80271d6:	f001 fa6d 	bl	80286b4 <__s2b>
 80271da:	900d      	str	r0, [sp, #52]	; 0x34
 80271dc:	2800      	cmp	r0, #0
 80271de:	d100      	bne.n	80271e2 <_strtod_l+0x67a>
 80271e0:	e720      	b.n	8027024 <_strtod_l+0x4bc>
 80271e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271e4:	9906      	ldr	r1, [sp, #24]
 80271e6:	17da      	asrs	r2, r3, #31
 80271e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80271ea:	1a5b      	subs	r3, r3, r1
 80271ec:	401a      	ands	r2, r3
 80271ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271f0:	9215      	str	r2, [sp, #84]	; 0x54
 80271f2:	43db      	mvns	r3, r3
 80271f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80271f6:	17db      	asrs	r3, r3, #31
 80271f8:	401a      	ands	r2, r3
 80271fa:	2300      	movs	r3, #0
 80271fc:	9218      	str	r2, [sp, #96]	; 0x60
 80271fe:	9305      	str	r3, [sp, #20]
 8027200:	9306      	str	r3, [sp, #24]
 8027202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027204:	9804      	ldr	r0, [sp, #16]
 8027206:	6859      	ldr	r1, [r3, #4]
 8027208:	f001 f9a8 	bl	802855c <_Balloc>
 802720c:	9008      	str	r0, [sp, #32]
 802720e:	2800      	cmp	r0, #0
 8027210:	d100      	bne.n	8027214 <_strtod_l+0x6ac>
 8027212:	e70c      	b.n	802702e <_strtod_l+0x4c6>
 8027214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027216:	300c      	adds	r0, #12
 8027218:	0019      	movs	r1, r3
 802721a:	691a      	ldr	r2, [r3, #16]
 802721c:	310c      	adds	r1, #12
 802721e:	3202      	adds	r2, #2
 8027220:	0092      	lsls	r2, r2, #2
 8027222:	f000 fdb6 	bl	8027d92 <memcpy>
 8027226:	ab1e      	add	r3, sp, #120	; 0x78
 8027228:	9301      	str	r3, [sp, #4]
 802722a:	ab1d      	add	r3, sp, #116	; 0x74
 802722c:	9300      	str	r3, [sp, #0]
 802722e:	0032      	movs	r2, r6
 8027230:	003b      	movs	r3, r7
 8027232:	9804      	ldr	r0, [sp, #16]
 8027234:	9610      	str	r6, [sp, #64]	; 0x40
 8027236:	9711      	str	r7, [sp, #68]	; 0x44
 8027238:	f001 fd7e 	bl	8028d38 <__d2b>
 802723c:	901c      	str	r0, [sp, #112]	; 0x70
 802723e:	2800      	cmp	r0, #0
 8027240:	d100      	bne.n	8027244 <_strtod_l+0x6dc>
 8027242:	e6f4      	b.n	802702e <_strtod_l+0x4c6>
 8027244:	2101      	movs	r1, #1
 8027246:	9804      	ldr	r0, [sp, #16]
 8027248:	f001 fac8 	bl	80287dc <__i2b>
 802724c:	9006      	str	r0, [sp, #24]
 802724e:	2800      	cmp	r0, #0
 8027250:	d100      	bne.n	8027254 <_strtod_l+0x6ec>
 8027252:	e6ec      	b.n	802702e <_strtod_l+0x4c6>
 8027254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027256:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027258:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802725a:	1ad4      	subs	r4, r2, r3
 802725c:	2b00      	cmp	r3, #0
 802725e:	db01      	blt.n	8027264 <_strtod_l+0x6fc>
 8027260:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8027262:	195d      	adds	r5, r3, r5
 8027264:	9907      	ldr	r1, [sp, #28]
 8027266:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8027268:	1a5b      	subs	r3, r3, r1
 802726a:	2136      	movs	r1, #54	; 0x36
 802726c:	189b      	adds	r3, r3, r2
 802726e:	1a8a      	subs	r2, r1, r2
 8027270:	4985      	ldr	r1, [pc, #532]	; (8027488 <_strtod_l+0x920>)
 8027272:	2001      	movs	r0, #1
 8027274:	468c      	mov	ip, r1
 8027276:	2100      	movs	r1, #0
 8027278:	3b01      	subs	r3, #1
 802727a:	9114      	str	r1, [sp, #80]	; 0x50
 802727c:	9012      	str	r0, [sp, #72]	; 0x48
 802727e:	4563      	cmp	r3, ip
 8027280:	da07      	bge.n	8027292 <_strtod_l+0x72a>
 8027282:	4661      	mov	r1, ip
 8027284:	1ac9      	subs	r1, r1, r3
 8027286:	1a52      	subs	r2, r2, r1
 8027288:	291f      	cmp	r1, #31
 802728a:	dd00      	ble.n	802728e <_strtod_l+0x726>
 802728c:	e0b6      	b.n	80273fc <_strtod_l+0x894>
 802728e:	4088      	lsls	r0, r1
 8027290:	9012      	str	r0, [sp, #72]	; 0x48
 8027292:	18ab      	adds	r3, r5, r2
 8027294:	930c      	str	r3, [sp, #48]	; 0x30
 8027296:	18a4      	adds	r4, r4, r2
 8027298:	9b07      	ldr	r3, [sp, #28]
 802729a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802729c:	191c      	adds	r4, r3, r4
 802729e:	002b      	movs	r3, r5
 80272a0:	4295      	cmp	r5, r2
 80272a2:	dd00      	ble.n	80272a6 <_strtod_l+0x73e>
 80272a4:	0013      	movs	r3, r2
 80272a6:	42a3      	cmp	r3, r4
 80272a8:	dd00      	ble.n	80272ac <_strtod_l+0x744>
 80272aa:	0023      	movs	r3, r4
 80272ac:	2b00      	cmp	r3, #0
 80272ae:	dd04      	ble.n	80272ba <_strtod_l+0x752>
 80272b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80272b2:	1ae4      	subs	r4, r4, r3
 80272b4:	1ad2      	subs	r2, r2, r3
 80272b6:	920c      	str	r2, [sp, #48]	; 0x30
 80272b8:	1aed      	subs	r5, r5, r3
 80272ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80272bc:	2b00      	cmp	r3, #0
 80272be:	dd17      	ble.n	80272f0 <_strtod_l+0x788>
 80272c0:	001a      	movs	r2, r3
 80272c2:	9906      	ldr	r1, [sp, #24]
 80272c4:	9804      	ldr	r0, [sp, #16]
 80272c6:	f001 fb51 	bl	802896c <__pow5mult>
 80272ca:	9006      	str	r0, [sp, #24]
 80272cc:	2800      	cmp	r0, #0
 80272ce:	d100      	bne.n	80272d2 <_strtod_l+0x76a>
 80272d0:	e6ad      	b.n	802702e <_strtod_l+0x4c6>
 80272d2:	0001      	movs	r1, r0
 80272d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80272d6:	9804      	ldr	r0, [sp, #16]
 80272d8:	f001 fa98 	bl	802880c <__multiply>
 80272dc:	900e      	str	r0, [sp, #56]	; 0x38
 80272de:	2800      	cmp	r0, #0
 80272e0:	d100      	bne.n	80272e4 <_strtod_l+0x77c>
 80272e2:	e6a4      	b.n	802702e <_strtod_l+0x4c6>
 80272e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80272e6:	9804      	ldr	r0, [sp, #16]
 80272e8:	f001 f97c 	bl	80285e4 <_Bfree>
 80272ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80272ee:	931c      	str	r3, [sp, #112]	; 0x70
 80272f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80272f2:	2b00      	cmp	r3, #0
 80272f4:	dd00      	ble.n	80272f8 <_strtod_l+0x790>
 80272f6:	e087      	b.n	8027408 <_strtod_l+0x8a0>
 80272f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80272fa:	2b00      	cmp	r3, #0
 80272fc:	dd08      	ble.n	8027310 <_strtod_l+0x7a8>
 80272fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027300:	9908      	ldr	r1, [sp, #32]
 8027302:	9804      	ldr	r0, [sp, #16]
 8027304:	f001 fb32 	bl	802896c <__pow5mult>
 8027308:	9008      	str	r0, [sp, #32]
 802730a:	2800      	cmp	r0, #0
 802730c:	d100      	bne.n	8027310 <_strtod_l+0x7a8>
 802730e:	e68e      	b.n	802702e <_strtod_l+0x4c6>
 8027310:	2c00      	cmp	r4, #0
 8027312:	dd08      	ble.n	8027326 <_strtod_l+0x7be>
 8027314:	0022      	movs	r2, r4
 8027316:	9908      	ldr	r1, [sp, #32]
 8027318:	9804      	ldr	r0, [sp, #16]
 802731a:	f001 fb83 	bl	8028a24 <__lshift>
 802731e:	9008      	str	r0, [sp, #32]
 8027320:	2800      	cmp	r0, #0
 8027322:	d100      	bne.n	8027326 <_strtod_l+0x7be>
 8027324:	e683      	b.n	802702e <_strtod_l+0x4c6>
 8027326:	2d00      	cmp	r5, #0
 8027328:	dd08      	ble.n	802733c <_strtod_l+0x7d4>
 802732a:	002a      	movs	r2, r5
 802732c:	9906      	ldr	r1, [sp, #24]
 802732e:	9804      	ldr	r0, [sp, #16]
 8027330:	f001 fb78 	bl	8028a24 <__lshift>
 8027334:	9006      	str	r0, [sp, #24]
 8027336:	2800      	cmp	r0, #0
 8027338:	d100      	bne.n	802733c <_strtod_l+0x7d4>
 802733a:	e678      	b.n	802702e <_strtod_l+0x4c6>
 802733c:	9a08      	ldr	r2, [sp, #32]
 802733e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8027340:	9804      	ldr	r0, [sp, #16]
 8027342:	f001 fbf9 	bl	8028b38 <__mdiff>
 8027346:	9005      	str	r0, [sp, #20]
 8027348:	2800      	cmp	r0, #0
 802734a:	d100      	bne.n	802734e <_strtod_l+0x7e6>
 802734c:	e66f      	b.n	802702e <_strtod_l+0x4c6>
 802734e:	2200      	movs	r2, #0
 8027350:	68c3      	ldr	r3, [r0, #12]
 8027352:	9906      	ldr	r1, [sp, #24]
 8027354:	60c2      	str	r2, [r0, #12]
 8027356:	930c      	str	r3, [sp, #48]	; 0x30
 8027358:	f001 fbd2 	bl	8028b00 <__mcmp>
 802735c:	2800      	cmp	r0, #0
 802735e:	da5d      	bge.n	802741c <_strtod_l+0x8b4>
 8027360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027362:	4333      	orrs	r3, r6
 8027364:	d000      	beq.n	8027368 <_strtod_l+0x800>
 8027366:	e088      	b.n	802747a <_strtod_l+0x912>
 8027368:	033b      	lsls	r3, r7, #12
 802736a:	d000      	beq.n	802736e <_strtod_l+0x806>
 802736c:	e085      	b.n	802747a <_strtod_l+0x912>
 802736e:	22d6      	movs	r2, #214	; 0xd6
 8027370:	4b46      	ldr	r3, [pc, #280]	; (802748c <_strtod_l+0x924>)
 8027372:	04d2      	lsls	r2, r2, #19
 8027374:	403b      	ands	r3, r7
 8027376:	4293      	cmp	r3, r2
 8027378:	d97f      	bls.n	802747a <_strtod_l+0x912>
 802737a:	9b05      	ldr	r3, [sp, #20]
 802737c:	695b      	ldr	r3, [r3, #20]
 802737e:	2b00      	cmp	r3, #0
 8027380:	d103      	bne.n	802738a <_strtod_l+0x822>
 8027382:	9b05      	ldr	r3, [sp, #20]
 8027384:	691b      	ldr	r3, [r3, #16]
 8027386:	2b01      	cmp	r3, #1
 8027388:	dd77      	ble.n	802747a <_strtod_l+0x912>
 802738a:	9905      	ldr	r1, [sp, #20]
 802738c:	2201      	movs	r2, #1
 802738e:	9804      	ldr	r0, [sp, #16]
 8027390:	f001 fb48 	bl	8028a24 <__lshift>
 8027394:	9906      	ldr	r1, [sp, #24]
 8027396:	9005      	str	r0, [sp, #20]
 8027398:	f001 fbb2 	bl	8028b00 <__mcmp>
 802739c:	2800      	cmp	r0, #0
 802739e:	dd6c      	ble.n	802747a <_strtod_l+0x912>
 80273a0:	9907      	ldr	r1, [sp, #28]
 80273a2:	003b      	movs	r3, r7
 80273a4:	4a39      	ldr	r2, [pc, #228]	; (802748c <_strtod_l+0x924>)
 80273a6:	2900      	cmp	r1, #0
 80273a8:	d100      	bne.n	80273ac <_strtod_l+0x844>
 80273aa:	e094      	b.n	80274d6 <_strtod_l+0x96e>
 80273ac:	0011      	movs	r1, r2
 80273ae:	20d6      	movs	r0, #214	; 0xd6
 80273b0:	4039      	ands	r1, r7
 80273b2:	04c0      	lsls	r0, r0, #19
 80273b4:	4281      	cmp	r1, r0
 80273b6:	dd00      	ble.n	80273ba <_strtod_l+0x852>
 80273b8:	e08d      	b.n	80274d6 <_strtod_l+0x96e>
 80273ba:	23dc      	movs	r3, #220	; 0xdc
 80273bc:	049b      	lsls	r3, r3, #18
 80273be:	4299      	cmp	r1, r3
 80273c0:	dc00      	bgt.n	80273c4 <_strtod_l+0x85c>
 80273c2:	e6a7      	b.n	8027114 <_strtod_l+0x5ac>
 80273c4:	0030      	movs	r0, r6
 80273c6:	0039      	movs	r1, r7
 80273c8:	4b31      	ldr	r3, [pc, #196]	; (8027490 <_strtod_l+0x928>)
 80273ca:	2200      	movs	r2, #0
 80273cc:	f7e0 f98e 	bl	80076ec <__aeabi_dmul>
 80273d0:	4b2e      	ldr	r3, [pc, #184]	; (802748c <_strtod_l+0x924>)
 80273d2:	0006      	movs	r6, r0
 80273d4:	000f      	movs	r7, r1
 80273d6:	420b      	tst	r3, r1
 80273d8:	d000      	beq.n	80273dc <_strtod_l+0x874>
 80273da:	e631      	b.n	8027040 <_strtod_l+0x4d8>
 80273dc:	2322      	movs	r3, #34	; 0x22
 80273de:	9a04      	ldr	r2, [sp, #16]
 80273e0:	6013      	str	r3, [r2, #0]
 80273e2:	e62d      	b.n	8027040 <_strtod_l+0x4d8>
 80273e4:	234b      	movs	r3, #75	; 0x4b
 80273e6:	1a9a      	subs	r2, r3, r2
 80273e8:	3b4c      	subs	r3, #76	; 0x4c
 80273ea:	4093      	lsls	r3, r2
 80273ec:	4019      	ands	r1, r3
 80273ee:	000f      	movs	r7, r1
 80273f0:	e6e3      	b.n	80271ba <_strtod_l+0x652>
 80273f2:	2201      	movs	r2, #1
 80273f4:	4252      	negs	r2, r2
 80273f6:	409a      	lsls	r2, r3
 80273f8:	4016      	ands	r6, r2
 80273fa:	e6de      	b.n	80271ba <_strtod_l+0x652>
 80273fc:	4925      	ldr	r1, [pc, #148]	; (8027494 <_strtod_l+0x92c>)
 80273fe:	1acb      	subs	r3, r1, r3
 8027400:	0001      	movs	r1, r0
 8027402:	4099      	lsls	r1, r3
 8027404:	9114      	str	r1, [sp, #80]	; 0x50
 8027406:	e743      	b.n	8027290 <_strtod_l+0x728>
 8027408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802740a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802740c:	9804      	ldr	r0, [sp, #16]
 802740e:	f001 fb09 	bl	8028a24 <__lshift>
 8027412:	901c      	str	r0, [sp, #112]	; 0x70
 8027414:	2800      	cmp	r0, #0
 8027416:	d000      	beq.n	802741a <_strtod_l+0x8b2>
 8027418:	e76e      	b.n	80272f8 <_strtod_l+0x790>
 802741a:	e608      	b.n	802702e <_strtod_l+0x4c6>
 802741c:	970e      	str	r7, [sp, #56]	; 0x38
 802741e:	2800      	cmp	r0, #0
 8027420:	d177      	bne.n	8027512 <_strtod_l+0x9aa>
 8027422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027424:	033b      	lsls	r3, r7, #12
 8027426:	0b1b      	lsrs	r3, r3, #12
 8027428:	2a00      	cmp	r2, #0
 802742a:	d039      	beq.n	80274a0 <_strtod_l+0x938>
 802742c:	4a1a      	ldr	r2, [pc, #104]	; (8027498 <_strtod_l+0x930>)
 802742e:	4293      	cmp	r3, r2
 8027430:	d139      	bne.n	80274a6 <_strtod_l+0x93e>
 8027432:	2101      	movs	r1, #1
 8027434:	9b07      	ldr	r3, [sp, #28]
 8027436:	4249      	negs	r1, r1
 8027438:	0032      	movs	r2, r6
 802743a:	0008      	movs	r0, r1
 802743c:	2b00      	cmp	r3, #0
 802743e:	d00b      	beq.n	8027458 <_strtod_l+0x8f0>
 8027440:	24d4      	movs	r4, #212	; 0xd4
 8027442:	4b12      	ldr	r3, [pc, #72]	; (802748c <_strtod_l+0x924>)
 8027444:	0008      	movs	r0, r1
 8027446:	403b      	ands	r3, r7
 8027448:	04e4      	lsls	r4, r4, #19
 802744a:	42a3      	cmp	r3, r4
 802744c:	d804      	bhi.n	8027458 <_strtod_l+0x8f0>
 802744e:	306c      	adds	r0, #108	; 0x6c
 8027450:	0d1b      	lsrs	r3, r3, #20
 8027452:	1ac3      	subs	r3, r0, r3
 8027454:	4099      	lsls	r1, r3
 8027456:	0008      	movs	r0, r1
 8027458:	4282      	cmp	r2, r0
 802745a:	d124      	bne.n	80274a6 <_strtod_l+0x93e>
 802745c:	4b0f      	ldr	r3, [pc, #60]	; (802749c <_strtod_l+0x934>)
 802745e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027460:	4299      	cmp	r1, r3
 8027462:	d102      	bne.n	802746a <_strtod_l+0x902>
 8027464:	3201      	adds	r2, #1
 8027466:	d100      	bne.n	802746a <_strtod_l+0x902>
 8027468:	e5e1      	b.n	802702e <_strtod_l+0x4c6>
 802746a:	4b08      	ldr	r3, [pc, #32]	; (802748c <_strtod_l+0x924>)
 802746c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802746e:	2600      	movs	r6, #0
 8027470:	401a      	ands	r2, r3
 8027472:	0013      	movs	r3, r2
 8027474:	2280      	movs	r2, #128	; 0x80
 8027476:	0352      	lsls	r2, r2, #13
 8027478:	189f      	adds	r7, r3, r2
 802747a:	9b07      	ldr	r3, [sp, #28]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d1a1      	bne.n	80273c4 <_strtod_l+0x85c>
 8027480:	e5de      	b.n	8027040 <_strtod_l+0x4d8>
 8027482:	46c0      	nop			; (mov r8, r8)
 8027484:	0802b9b8 	.word	0x0802b9b8
 8027488:	fffffc02 	.word	0xfffffc02
 802748c:	7ff00000 	.word	0x7ff00000
 8027490:	39500000 	.word	0x39500000
 8027494:	fffffbe2 	.word	0xfffffbe2
 8027498:	000fffff 	.word	0x000fffff
 802749c:	7fefffff 	.word	0x7fefffff
 80274a0:	4333      	orrs	r3, r6
 80274a2:	d100      	bne.n	80274a6 <_strtod_l+0x93e>
 80274a4:	e77c      	b.n	80273a0 <_strtod_l+0x838>
 80274a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80274a8:	2b00      	cmp	r3, #0
 80274aa:	d01d      	beq.n	80274e8 <_strtod_l+0x980>
 80274ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80274ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80274b0:	4213      	tst	r3, r2
 80274b2:	d0e2      	beq.n	802747a <_strtod_l+0x912>
 80274b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80274b6:	0030      	movs	r0, r6
 80274b8:	0039      	movs	r1, r7
 80274ba:	9a07      	ldr	r2, [sp, #28]
 80274bc:	2b00      	cmp	r3, #0
 80274be:	d017      	beq.n	80274f0 <_strtod_l+0x988>
 80274c0:	f7ff fb3a 	bl	8026b38 <sulp>
 80274c4:	0002      	movs	r2, r0
 80274c6:	000b      	movs	r3, r1
 80274c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80274cc:	f7df f9b4 	bl	8006838 <__aeabi_dadd>
 80274d0:	0006      	movs	r6, r0
 80274d2:	000f      	movs	r7, r1
 80274d4:	e7d1      	b.n	802747a <_strtod_l+0x912>
 80274d6:	2601      	movs	r6, #1
 80274d8:	4013      	ands	r3, r2
 80274da:	4a98      	ldr	r2, [pc, #608]	; (802773c <_strtod_l+0xbd4>)
 80274dc:	4276      	negs	r6, r6
 80274de:	189b      	adds	r3, r3, r2
 80274e0:	4a97      	ldr	r2, [pc, #604]	; (8027740 <_strtod_l+0xbd8>)
 80274e2:	431a      	orrs	r2, r3
 80274e4:	0017      	movs	r7, r2
 80274e6:	e7c8      	b.n	802747a <_strtod_l+0x912>
 80274e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80274ea:	4233      	tst	r3, r6
 80274ec:	d0c5      	beq.n	802747a <_strtod_l+0x912>
 80274ee:	e7e1      	b.n	80274b4 <_strtod_l+0x94c>
 80274f0:	f7ff fb22 	bl	8026b38 <sulp>
 80274f4:	0002      	movs	r2, r0
 80274f6:	000b      	movs	r3, r1
 80274f8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80274fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80274fc:	f7e0 fbb8 	bl	8007c70 <__aeabi_dsub>
 8027500:	2200      	movs	r2, #0
 8027502:	2300      	movs	r3, #0
 8027504:	0006      	movs	r6, r0
 8027506:	000f      	movs	r7, r1
 8027508:	f7df f80c 	bl	8006524 <__aeabi_dcmpeq>
 802750c:	2800      	cmp	r0, #0
 802750e:	d0b4      	beq.n	802747a <_strtod_l+0x912>
 8027510:	e600      	b.n	8027114 <_strtod_l+0x5ac>
 8027512:	9906      	ldr	r1, [sp, #24]
 8027514:	9805      	ldr	r0, [sp, #20]
 8027516:	f001 fc6f 	bl	8028df8 <__ratio>
 802751a:	2380      	movs	r3, #128	; 0x80
 802751c:	2200      	movs	r2, #0
 802751e:	05db      	lsls	r3, r3, #23
 8027520:	0004      	movs	r4, r0
 8027522:	000d      	movs	r5, r1
 8027524:	f7df f80e 	bl	8006544 <__aeabi_dcmple>
 8027528:	2800      	cmp	r0, #0
 802752a:	d06d      	beq.n	8027608 <_strtod_l+0xaa0>
 802752c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802752e:	2b00      	cmp	r3, #0
 8027530:	d000      	beq.n	8027534 <_strtod_l+0x9cc>
 8027532:	e07e      	b.n	8027632 <_strtod_l+0xaca>
 8027534:	2e00      	cmp	r6, #0
 8027536:	d158      	bne.n	80275ea <_strtod_l+0xa82>
 8027538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802753a:	031b      	lsls	r3, r3, #12
 802753c:	d000      	beq.n	8027540 <_strtod_l+0x9d8>
 802753e:	e07f      	b.n	8027640 <_strtod_l+0xad8>
 8027540:	2200      	movs	r2, #0
 8027542:	0020      	movs	r0, r4
 8027544:	0029      	movs	r1, r5
 8027546:	4b7f      	ldr	r3, [pc, #508]	; (8027744 <_strtod_l+0xbdc>)
 8027548:	f7de fff2 	bl	8006530 <__aeabi_dcmplt>
 802754c:	2800      	cmp	r0, #0
 802754e:	d158      	bne.n	8027602 <_strtod_l+0xa9a>
 8027550:	0020      	movs	r0, r4
 8027552:	0029      	movs	r1, r5
 8027554:	2200      	movs	r2, #0
 8027556:	4b7c      	ldr	r3, [pc, #496]	; (8027748 <_strtod_l+0xbe0>)
 8027558:	f7e0 f8c8 	bl	80076ec <__aeabi_dmul>
 802755c:	0004      	movs	r4, r0
 802755e:	000d      	movs	r5, r1
 8027560:	2380      	movs	r3, #128	; 0x80
 8027562:	061b      	lsls	r3, r3, #24
 8027564:	940a      	str	r4, [sp, #40]	; 0x28
 8027566:	18eb      	adds	r3, r5, r3
 8027568:	930b      	str	r3, [sp, #44]	; 0x2c
 802756a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802756c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802756e:	9212      	str	r2, [sp, #72]	; 0x48
 8027570:	9313      	str	r3, [sp, #76]	; 0x4c
 8027572:	4a76      	ldr	r2, [pc, #472]	; (802774c <_strtod_l+0xbe4>)
 8027574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027576:	4013      	ands	r3, r2
 8027578:	9314      	str	r3, [sp, #80]	; 0x50
 802757a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802757c:	4b74      	ldr	r3, [pc, #464]	; (8027750 <_strtod_l+0xbe8>)
 802757e:	429a      	cmp	r2, r3
 8027580:	d000      	beq.n	8027584 <_strtod_l+0xa1c>
 8027582:	e091      	b.n	80276a8 <_strtod_l+0xb40>
 8027584:	4a73      	ldr	r2, [pc, #460]	; (8027754 <_strtod_l+0xbec>)
 8027586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027588:	4694      	mov	ip, r2
 802758a:	4463      	add	r3, ip
 802758c:	001f      	movs	r7, r3
 802758e:	0030      	movs	r0, r6
 8027590:	0019      	movs	r1, r3
 8027592:	f001 fb69 	bl	8028c68 <__ulp>
 8027596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802759a:	f7e0 f8a7 	bl	80076ec <__aeabi_dmul>
 802759e:	0032      	movs	r2, r6
 80275a0:	003b      	movs	r3, r7
 80275a2:	f7df f949 	bl	8006838 <__aeabi_dadd>
 80275a6:	4a69      	ldr	r2, [pc, #420]	; (802774c <_strtod_l+0xbe4>)
 80275a8:	4b6b      	ldr	r3, [pc, #428]	; (8027758 <_strtod_l+0xbf0>)
 80275aa:	0006      	movs	r6, r0
 80275ac:	400a      	ands	r2, r1
 80275ae:	429a      	cmp	r2, r3
 80275b0:	d949      	bls.n	8027646 <_strtod_l+0xade>
 80275b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80275b4:	4b69      	ldr	r3, [pc, #420]	; (802775c <_strtod_l+0xbf4>)
 80275b6:	429a      	cmp	r2, r3
 80275b8:	d103      	bne.n	80275c2 <_strtod_l+0xa5a>
 80275ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80275bc:	3301      	adds	r3, #1
 80275be:	d100      	bne.n	80275c2 <_strtod_l+0xa5a>
 80275c0:	e535      	b.n	802702e <_strtod_l+0x4c6>
 80275c2:	2601      	movs	r6, #1
 80275c4:	4f65      	ldr	r7, [pc, #404]	; (802775c <_strtod_l+0xbf4>)
 80275c6:	4276      	negs	r6, r6
 80275c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80275ca:	9804      	ldr	r0, [sp, #16]
 80275cc:	f001 f80a 	bl	80285e4 <_Bfree>
 80275d0:	9908      	ldr	r1, [sp, #32]
 80275d2:	9804      	ldr	r0, [sp, #16]
 80275d4:	f001 f806 	bl	80285e4 <_Bfree>
 80275d8:	9906      	ldr	r1, [sp, #24]
 80275da:	9804      	ldr	r0, [sp, #16]
 80275dc:	f001 f802 	bl	80285e4 <_Bfree>
 80275e0:	9905      	ldr	r1, [sp, #20]
 80275e2:	9804      	ldr	r0, [sp, #16]
 80275e4:	f000 fffe 	bl	80285e4 <_Bfree>
 80275e8:	e60b      	b.n	8027202 <_strtod_l+0x69a>
 80275ea:	2e01      	cmp	r6, #1
 80275ec:	d103      	bne.n	80275f6 <_strtod_l+0xa8e>
 80275ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	d100      	bne.n	80275f6 <_strtod_l+0xa8e>
 80275f4:	e58e      	b.n	8027114 <_strtod_l+0x5ac>
 80275f6:	2300      	movs	r3, #0
 80275f8:	4c59      	ldr	r4, [pc, #356]	; (8027760 <_strtod_l+0xbf8>)
 80275fa:	930a      	str	r3, [sp, #40]	; 0x28
 80275fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80275fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027600:	e01c      	b.n	802763c <_strtod_l+0xad4>
 8027602:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027604:	4d50      	ldr	r5, [pc, #320]	; (8027748 <_strtod_l+0xbe0>)
 8027606:	e7ab      	b.n	8027560 <_strtod_l+0x9f8>
 8027608:	2200      	movs	r2, #0
 802760a:	0020      	movs	r0, r4
 802760c:	0029      	movs	r1, r5
 802760e:	4b4e      	ldr	r3, [pc, #312]	; (8027748 <_strtod_l+0xbe0>)
 8027610:	f7e0 f86c 	bl	80076ec <__aeabi_dmul>
 8027614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027616:	0004      	movs	r4, r0
 8027618:	000b      	movs	r3, r1
 802761a:	000d      	movs	r5, r1
 802761c:	2a00      	cmp	r2, #0
 802761e:	d104      	bne.n	802762a <_strtod_l+0xac2>
 8027620:	2280      	movs	r2, #128	; 0x80
 8027622:	0612      	lsls	r2, r2, #24
 8027624:	900a      	str	r0, [sp, #40]	; 0x28
 8027626:	188b      	adds	r3, r1, r2
 8027628:	e79e      	b.n	8027568 <_strtod_l+0xa00>
 802762a:	0002      	movs	r2, r0
 802762c:	920a      	str	r2, [sp, #40]	; 0x28
 802762e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027630:	e79b      	b.n	802756a <_strtod_l+0xa02>
 8027632:	2300      	movs	r3, #0
 8027634:	4c43      	ldr	r4, [pc, #268]	; (8027744 <_strtod_l+0xbdc>)
 8027636:	930a      	str	r3, [sp, #40]	; 0x28
 8027638:	940b      	str	r4, [sp, #44]	; 0x2c
 802763a:	2400      	movs	r4, #0
 802763c:	4d41      	ldr	r5, [pc, #260]	; (8027744 <_strtod_l+0xbdc>)
 802763e:	e794      	b.n	802756a <_strtod_l+0xa02>
 8027640:	2300      	movs	r3, #0
 8027642:	4c47      	ldr	r4, [pc, #284]	; (8027760 <_strtod_l+0xbf8>)
 8027644:	e7f7      	b.n	8027636 <_strtod_l+0xace>
 8027646:	23d4      	movs	r3, #212	; 0xd4
 8027648:	049b      	lsls	r3, r3, #18
 802764a:	18cf      	adds	r7, r1, r3
 802764c:	9b07      	ldr	r3, [sp, #28]
 802764e:	970e      	str	r7, [sp, #56]	; 0x38
 8027650:	2b00      	cmp	r3, #0
 8027652:	d1b9      	bne.n	80275c8 <_strtod_l+0xa60>
 8027654:	4b3d      	ldr	r3, [pc, #244]	; (802774c <_strtod_l+0xbe4>)
 8027656:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027658:	403b      	ands	r3, r7
 802765a:	429a      	cmp	r2, r3
 802765c:	d1b4      	bne.n	80275c8 <_strtod_l+0xa60>
 802765e:	0020      	movs	r0, r4
 8027660:	0029      	movs	r1, r5
 8027662:	f7de ffcb 	bl	80065fc <__aeabi_d2lz>
 8027666:	f7df f805 	bl	8006674 <__aeabi_l2d>
 802766a:	0002      	movs	r2, r0
 802766c:	000b      	movs	r3, r1
 802766e:	0020      	movs	r0, r4
 8027670:	0029      	movs	r1, r5
 8027672:	f7e0 fafd 	bl	8007c70 <__aeabi_dsub>
 8027676:	033b      	lsls	r3, r7, #12
 8027678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802767a:	0b1b      	lsrs	r3, r3, #12
 802767c:	4333      	orrs	r3, r6
 802767e:	4313      	orrs	r3, r2
 8027680:	0004      	movs	r4, r0
 8027682:	000d      	movs	r5, r1
 8027684:	4a37      	ldr	r2, [pc, #220]	; (8027764 <_strtod_l+0xbfc>)
 8027686:	2b00      	cmp	r3, #0
 8027688:	d054      	beq.n	8027734 <_strtod_l+0xbcc>
 802768a:	4b37      	ldr	r3, [pc, #220]	; (8027768 <_strtod_l+0xc00>)
 802768c:	f7de ff50 	bl	8006530 <__aeabi_dcmplt>
 8027690:	2800      	cmp	r0, #0
 8027692:	d000      	beq.n	8027696 <_strtod_l+0xb2e>
 8027694:	e4d4      	b.n	8027040 <_strtod_l+0x4d8>
 8027696:	0020      	movs	r0, r4
 8027698:	0029      	movs	r1, r5
 802769a:	4a34      	ldr	r2, [pc, #208]	; (802776c <_strtod_l+0xc04>)
 802769c:	4b2a      	ldr	r3, [pc, #168]	; (8027748 <_strtod_l+0xbe0>)
 802769e:	f7de ff5b 	bl	8006558 <__aeabi_dcmpgt>
 80276a2:	2800      	cmp	r0, #0
 80276a4:	d090      	beq.n	80275c8 <_strtod_l+0xa60>
 80276a6:	e4cb      	b.n	8027040 <_strtod_l+0x4d8>
 80276a8:	9b07      	ldr	r3, [sp, #28]
 80276aa:	2b00      	cmp	r3, #0
 80276ac:	d02b      	beq.n	8027706 <_strtod_l+0xb9e>
 80276ae:	23d4      	movs	r3, #212	; 0xd4
 80276b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80276b2:	04db      	lsls	r3, r3, #19
 80276b4:	429a      	cmp	r2, r3
 80276b6:	d826      	bhi.n	8027706 <_strtod_l+0xb9e>
 80276b8:	0020      	movs	r0, r4
 80276ba:	0029      	movs	r1, r5
 80276bc:	4a2c      	ldr	r2, [pc, #176]	; (8027770 <_strtod_l+0xc08>)
 80276be:	4b2d      	ldr	r3, [pc, #180]	; (8027774 <_strtod_l+0xc0c>)
 80276c0:	f7de ff40 	bl	8006544 <__aeabi_dcmple>
 80276c4:	2800      	cmp	r0, #0
 80276c6:	d017      	beq.n	80276f8 <_strtod_l+0xb90>
 80276c8:	0020      	movs	r0, r4
 80276ca:	0029      	movs	r1, r5
 80276cc:	f7de ff78 	bl	80065c0 <__aeabi_d2uiz>
 80276d0:	2800      	cmp	r0, #0
 80276d2:	d100      	bne.n	80276d6 <_strtod_l+0xb6e>
 80276d4:	3001      	adds	r0, #1
 80276d6:	f7e0 feb3 	bl	8008440 <__aeabi_ui2d>
 80276da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80276dc:	0004      	movs	r4, r0
 80276de:	000b      	movs	r3, r1
 80276e0:	000d      	movs	r5, r1
 80276e2:	2a00      	cmp	r2, #0
 80276e4:	d122      	bne.n	802772c <_strtod_l+0xbc4>
 80276e6:	2280      	movs	r2, #128	; 0x80
 80276e8:	0612      	lsls	r2, r2, #24
 80276ea:	188b      	adds	r3, r1, r2
 80276ec:	9016      	str	r0, [sp, #88]	; 0x58
 80276ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80276f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80276f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80276f4:	9212      	str	r2, [sp, #72]	; 0x48
 80276f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80276f8:	22d6      	movs	r2, #214	; 0xd6
 80276fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80276fc:	04d2      	lsls	r2, r2, #19
 80276fe:	189b      	adds	r3, r3, r2
 8027700:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027702:	1a9b      	subs	r3, r3, r2
 8027704:	9313      	str	r3, [sp, #76]	; 0x4c
 8027706:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027708:	9911      	ldr	r1, [sp, #68]	; 0x44
 802770a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802770c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 802770e:	f001 faab 	bl	8028c68 <__ulp>
 8027712:	0002      	movs	r2, r0
 8027714:	000b      	movs	r3, r1
 8027716:	0030      	movs	r0, r6
 8027718:	0039      	movs	r1, r7
 802771a:	f7df ffe7 	bl	80076ec <__aeabi_dmul>
 802771e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027720:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027722:	f7df f889 	bl	8006838 <__aeabi_dadd>
 8027726:	0006      	movs	r6, r0
 8027728:	000f      	movs	r7, r1
 802772a:	e78f      	b.n	802764c <_strtod_l+0xae4>
 802772c:	0002      	movs	r2, r0
 802772e:	9216      	str	r2, [sp, #88]	; 0x58
 8027730:	9317      	str	r3, [sp, #92]	; 0x5c
 8027732:	e7dd      	b.n	80276f0 <_strtod_l+0xb88>
 8027734:	4b10      	ldr	r3, [pc, #64]	; (8027778 <_strtod_l+0xc10>)
 8027736:	f7de fefb 	bl	8006530 <__aeabi_dcmplt>
 802773a:	e7b2      	b.n	80276a2 <_strtod_l+0xb3a>
 802773c:	fff00000 	.word	0xfff00000
 8027740:	000fffff 	.word	0x000fffff
 8027744:	3ff00000 	.word	0x3ff00000
 8027748:	3fe00000 	.word	0x3fe00000
 802774c:	7ff00000 	.word	0x7ff00000
 8027750:	7fe00000 	.word	0x7fe00000
 8027754:	fcb00000 	.word	0xfcb00000
 8027758:	7c9fffff 	.word	0x7c9fffff
 802775c:	7fefffff 	.word	0x7fefffff
 8027760:	bff00000 	.word	0xbff00000
 8027764:	94a03595 	.word	0x94a03595
 8027768:	3fdfffff 	.word	0x3fdfffff
 802776c:	35afe535 	.word	0x35afe535
 8027770:	ffc00000 	.word	0xffc00000
 8027774:	41dfffff 	.word	0x41dfffff
 8027778:	3fcfffff 	.word	0x3fcfffff

0802777c <strtod>:
 802777c:	b510      	push	{r4, lr}
 802777e:	4c04      	ldr	r4, [pc, #16]	; (8027790 <strtod+0x14>)
 8027780:	000a      	movs	r2, r1
 8027782:	0001      	movs	r1, r0
 8027784:	4b03      	ldr	r3, [pc, #12]	; (8027794 <strtod+0x18>)
 8027786:	6820      	ldr	r0, [r4, #0]
 8027788:	f7ff f9ee 	bl	8026b68 <_strtod_l>
 802778c:	bd10      	pop	{r4, pc}
 802778e:	46c0      	nop			; (mov r8, r8)
 8027790:	20000488 	.word	0x20000488
 8027794:	200002d0 	.word	0x200002d0

08027798 <std>:
 8027798:	2300      	movs	r3, #0
 802779a:	b510      	push	{r4, lr}
 802779c:	0004      	movs	r4, r0
 802779e:	6003      	str	r3, [r0, #0]
 80277a0:	6043      	str	r3, [r0, #4]
 80277a2:	6083      	str	r3, [r0, #8]
 80277a4:	8181      	strh	r1, [r0, #12]
 80277a6:	6643      	str	r3, [r0, #100]	; 0x64
 80277a8:	81c2      	strh	r2, [r0, #14]
 80277aa:	6103      	str	r3, [r0, #16]
 80277ac:	6143      	str	r3, [r0, #20]
 80277ae:	6183      	str	r3, [r0, #24]
 80277b0:	0019      	movs	r1, r3
 80277b2:	2208      	movs	r2, #8
 80277b4:	305c      	adds	r0, #92	; 0x5c
 80277b6:	f000 f953 	bl	8027a60 <memset>
 80277ba:	4b0b      	ldr	r3, [pc, #44]	; (80277e8 <std+0x50>)
 80277bc:	6224      	str	r4, [r4, #32]
 80277be:	6263      	str	r3, [r4, #36]	; 0x24
 80277c0:	4b0a      	ldr	r3, [pc, #40]	; (80277ec <std+0x54>)
 80277c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80277c4:	4b0a      	ldr	r3, [pc, #40]	; (80277f0 <std+0x58>)
 80277c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80277c8:	4b0a      	ldr	r3, [pc, #40]	; (80277f4 <std+0x5c>)
 80277ca:	6323      	str	r3, [r4, #48]	; 0x30
 80277cc:	4b0a      	ldr	r3, [pc, #40]	; (80277f8 <std+0x60>)
 80277ce:	429c      	cmp	r4, r3
 80277d0:	d005      	beq.n	80277de <std+0x46>
 80277d2:	4b0a      	ldr	r3, [pc, #40]	; (80277fc <std+0x64>)
 80277d4:	429c      	cmp	r4, r3
 80277d6:	d002      	beq.n	80277de <std+0x46>
 80277d8:	4b09      	ldr	r3, [pc, #36]	; (8027800 <std+0x68>)
 80277da:	429c      	cmp	r4, r3
 80277dc:	d103      	bne.n	80277e6 <std+0x4e>
 80277de:	0020      	movs	r0, r4
 80277e0:	3058      	adds	r0, #88	; 0x58
 80277e2:	f000 fac3 	bl	8027d6c <__retarget_lock_init_recursive>
 80277e6:	bd10      	pop	{r4, pc}
 80277e8:	080279c9 	.word	0x080279c9
 80277ec:	080279f1 	.word	0x080279f1
 80277f0:	08027a29 	.word	0x08027a29
 80277f4:	08027a55 	.word	0x08027a55
 80277f8:	2000550c 	.word	0x2000550c
 80277fc:	20005574 	.word	0x20005574
 8027800:	200055dc 	.word	0x200055dc

08027804 <stdio_exit_handler>:
 8027804:	b510      	push	{r4, lr}
 8027806:	4a03      	ldr	r2, [pc, #12]	; (8027814 <stdio_exit_handler+0x10>)
 8027808:	4903      	ldr	r1, [pc, #12]	; (8027818 <stdio_exit_handler+0x14>)
 802780a:	4804      	ldr	r0, [pc, #16]	; (802781c <stdio_exit_handler+0x18>)
 802780c:	f000 f86c 	bl	80278e8 <_fwalk_sglue>
 8027810:	bd10      	pop	{r4, pc}
 8027812:	46c0      	nop			; (mov r8, r8)
 8027814:	200002c4 	.word	0x200002c4
 8027818:	080295c5 	.word	0x080295c5
 802781c:	2000043c 	.word	0x2000043c

08027820 <cleanup_stdio>:
 8027820:	6841      	ldr	r1, [r0, #4]
 8027822:	4b0b      	ldr	r3, [pc, #44]	; (8027850 <cleanup_stdio+0x30>)
 8027824:	b510      	push	{r4, lr}
 8027826:	0004      	movs	r4, r0
 8027828:	4299      	cmp	r1, r3
 802782a:	d001      	beq.n	8027830 <cleanup_stdio+0x10>
 802782c:	f001 feca 	bl	80295c4 <_fflush_r>
 8027830:	68a1      	ldr	r1, [r4, #8]
 8027832:	4b08      	ldr	r3, [pc, #32]	; (8027854 <cleanup_stdio+0x34>)
 8027834:	4299      	cmp	r1, r3
 8027836:	d002      	beq.n	802783e <cleanup_stdio+0x1e>
 8027838:	0020      	movs	r0, r4
 802783a:	f001 fec3 	bl	80295c4 <_fflush_r>
 802783e:	68e1      	ldr	r1, [r4, #12]
 8027840:	4b05      	ldr	r3, [pc, #20]	; (8027858 <cleanup_stdio+0x38>)
 8027842:	4299      	cmp	r1, r3
 8027844:	d002      	beq.n	802784c <cleanup_stdio+0x2c>
 8027846:	0020      	movs	r0, r4
 8027848:	f001 febc 	bl	80295c4 <_fflush_r>
 802784c:	bd10      	pop	{r4, pc}
 802784e:	46c0      	nop			; (mov r8, r8)
 8027850:	2000550c 	.word	0x2000550c
 8027854:	20005574 	.word	0x20005574
 8027858:	200055dc 	.word	0x200055dc

0802785c <global_stdio_init.part.0>:
 802785c:	b510      	push	{r4, lr}
 802785e:	4b09      	ldr	r3, [pc, #36]	; (8027884 <global_stdio_init.part.0+0x28>)
 8027860:	4a09      	ldr	r2, [pc, #36]	; (8027888 <global_stdio_init.part.0+0x2c>)
 8027862:	2104      	movs	r1, #4
 8027864:	601a      	str	r2, [r3, #0]
 8027866:	4809      	ldr	r0, [pc, #36]	; (802788c <global_stdio_init.part.0+0x30>)
 8027868:	2200      	movs	r2, #0
 802786a:	f7ff ff95 	bl	8027798 <std>
 802786e:	2201      	movs	r2, #1
 8027870:	2109      	movs	r1, #9
 8027872:	4807      	ldr	r0, [pc, #28]	; (8027890 <global_stdio_init.part.0+0x34>)
 8027874:	f7ff ff90 	bl	8027798 <std>
 8027878:	2202      	movs	r2, #2
 802787a:	2112      	movs	r1, #18
 802787c:	4805      	ldr	r0, [pc, #20]	; (8027894 <global_stdio_init.part.0+0x38>)
 802787e:	f7ff ff8b 	bl	8027798 <std>
 8027882:	bd10      	pop	{r4, pc}
 8027884:	20005644 	.word	0x20005644
 8027888:	08027805 	.word	0x08027805
 802788c:	2000550c 	.word	0x2000550c
 8027890:	20005574 	.word	0x20005574
 8027894:	200055dc 	.word	0x200055dc

08027898 <__sfp_lock_acquire>:
 8027898:	b510      	push	{r4, lr}
 802789a:	4802      	ldr	r0, [pc, #8]	; (80278a4 <__sfp_lock_acquire+0xc>)
 802789c:	f000 fa67 	bl	8027d6e <__retarget_lock_acquire_recursive>
 80278a0:	bd10      	pop	{r4, pc}
 80278a2:	46c0      	nop			; (mov r8, r8)
 80278a4:	2000564d 	.word	0x2000564d

080278a8 <__sfp_lock_release>:
 80278a8:	b510      	push	{r4, lr}
 80278aa:	4802      	ldr	r0, [pc, #8]	; (80278b4 <__sfp_lock_release+0xc>)
 80278ac:	f000 fa60 	bl	8027d70 <__retarget_lock_release_recursive>
 80278b0:	bd10      	pop	{r4, pc}
 80278b2:	46c0      	nop			; (mov r8, r8)
 80278b4:	2000564d 	.word	0x2000564d

080278b8 <__sinit>:
 80278b8:	b510      	push	{r4, lr}
 80278ba:	0004      	movs	r4, r0
 80278bc:	f7ff ffec 	bl	8027898 <__sfp_lock_acquire>
 80278c0:	6a23      	ldr	r3, [r4, #32]
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	d002      	beq.n	80278cc <__sinit+0x14>
 80278c6:	f7ff ffef 	bl	80278a8 <__sfp_lock_release>
 80278ca:	bd10      	pop	{r4, pc}
 80278cc:	4b04      	ldr	r3, [pc, #16]	; (80278e0 <__sinit+0x28>)
 80278ce:	6223      	str	r3, [r4, #32]
 80278d0:	4b04      	ldr	r3, [pc, #16]	; (80278e4 <__sinit+0x2c>)
 80278d2:	681b      	ldr	r3, [r3, #0]
 80278d4:	2b00      	cmp	r3, #0
 80278d6:	d1f6      	bne.n	80278c6 <__sinit+0xe>
 80278d8:	f7ff ffc0 	bl	802785c <global_stdio_init.part.0>
 80278dc:	e7f3      	b.n	80278c6 <__sinit+0xe>
 80278de:	46c0      	nop			; (mov r8, r8)
 80278e0:	08027821 	.word	0x08027821
 80278e4:	20005644 	.word	0x20005644

080278e8 <_fwalk_sglue>:
 80278e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80278ea:	0014      	movs	r4, r2
 80278ec:	2600      	movs	r6, #0
 80278ee:	9000      	str	r0, [sp, #0]
 80278f0:	9101      	str	r1, [sp, #4]
 80278f2:	68a5      	ldr	r5, [r4, #8]
 80278f4:	6867      	ldr	r7, [r4, #4]
 80278f6:	3f01      	subs	r7, #1
 80278f8:	d504      	bpl.n	8027904 <_fwalk_sglue+0x1c>
 80278fa:	6824      	ldr	r4, [r4, #0]
 80278fc:	2c00      	cmp	r4, #0
 80278fe:	d1f8      	bne.n	80278f2 <_fwalk_sglue+0xa>
 8027900:	0030      	movs	r0, r6
 8027902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027904:	89ab      	ldrh	r3, [r5, #12]
 8027906:	2b01      	cmp	r3, #1
 8027908:	d908      	bls.n	802791c <_fwalk_sglue+0x34>
 802790a:	220e      	movs	r2, #14
 802790c:	5eab      	ldrsh	r3, [r5, r2]
 802790e:	3301      	adds	r3, #1
 8027910:	d004      	beq.n	802791c <_fwalk_sglue+0x34>
 8027912:	0029      	movs	r1, r5
 8027914:	9800      	ldr	r0, [sp, #0]
 8027916:	9b01      	ldr	r3, [sp, #4]
 8027918:	4798      	blx	r3
 802791a:	4306      	orrs	r6, r0
 802791c:	3568      	adds	r5, #104	; 0x68
 802791e:	e7ea      	b.n	80278f6 <_fwalk_sglue+0xe>

08027920 <sniprintf>:
 8027920:	b40c      	push	{r2, r3}
 8027922:	b530      	push	{r4, r5, lr}
 8027924:	4b17      	ldr	r3, [pc, #92]	; (8027984 <sniprintf+0x64>)
 8027926:	000c      	movs	r4, r1
 8027928:	681d      	ldr	r5, [r3, #0]
 802792a:	b09d      	sub	sp, #116	; 0x74
 802792c:	2900      	cmp	r1, #0
 802792e:	da08      	bge.n	8027942 <sniprintf+0x22>
 8027930:	238b      	movs	r3, #139	; 0x8b
 8027932:	2001      	movs	r0, #1
 8027934:	602b      	str	r3, [r5, #0]
 8027936:	4240      	negs	r0, r0
 8027938:	b01d      	add	sp, #116	; 0x74
 802793a:	bc30      	pop	{r4, r5}
 802793c:	bc08      	pop	{r3}
 802793e:	b002      	add	sp, #8
 8027940:	4718      	bx	r3
 8027942:	2382      	movs	r3, #130	; 0x82
 8027944:	466a      	mov	r2, sp
 8027946:	009b      	lsls	r3, r3, #2
 8027948:	8293      	strh	r3, [r2, #20]
 802794a:	2300      	movs	r3, #0
 802794c:	9002      	str	r0, [sp, #8]
 802794e:	9006      	str	r0, [sp, #24]
 8027950:	4299      	cmp	r1, r3
 8027952:	d000      	beq.n	8027956 <sniprintf+0x36>
 8027954:	1e4b      	subs	r3, r1, #1
 8027956:	9304      	str	r3, [sp, #16]
 8027958:	9307      	str	r3, [sp, #28]
 802795a:	2301      	movs	r3, #1
 802795c:	466a      	mov	r2, sp
 802795e:	425b      	negs	r3, r3
 8027960:	82d3      	strh	r3, [r2, #22]
 8027962:	0028      	movs	r0, r5
 8027964:	ab21      	add	r3, sp, #132	; 0x84
 8027966:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027968:	a902      	add	r1, sp, #8
 802796a:	9301      	str	r3, [sp, #4]
 802796c:	f001 fb20 	bl	8028fb0 <_svfiprintf_r>
 8027970:	1c43      	adds	r3, r0, #1
 8027972:	da01      	bge.n	8027978 <sniprintf+0x58>
 8027974:	238b      	movs	r3, #139	; 0x8b
 8027976:	602b      	str	r3, [r5, #0]
 8027978:	2c00      	cmp	r4, #0
 802797a:	d0dd      	beq.n	8027938 <sniprintf+0x18>
 802797c:	2200      	movs	r2, #0
 802797e:	9b02      	ldr	r3, [sp, #8]
 8027980:	701a      	strb	r2, [r3, #0]
 8027982:	e7d9      	b.n	8027938 <sniprintf+0x18>
 8027984:	20000488 	.word	0x20000488

08027988 <siprintf>:
 8027988:	b40e      	push	{r1, r2, r3}
 802798a:	b500      	push	{lr}
 802798c:	490b      	ldr	r1, [pc, #44]	; (80279bc <siprintf+0x34>)
 802798e:	b09c      	sub	sp, #112	; 0x70
 8027990:	ab1d      	add	r3, sp, #116	; 0x74
 8027992:	9002      	str	r0, [sp, #8]
 8027994:	9006      	str	r0, [sp, #24]
 8027996:	9107      	str	r1, [sp, #28]
 8027998:	9104      	str	r1, [sp, #16]
 802799a:	4809      	ldr	r0, [pc, #36]	; (80279c0 <siprintf+0x38>)
 802799c:	4909      	ldr	r1, [pc, #36]	; (80279c4 <siprintf+0x3c>)
 802799e:	cb04      	ldmia	r3!, {r2}
 80279a0:	9105      	str	r1, [sp, #20]
 80279a2:	6800      	ldr	r0, [r0, #0]
 80279a4:	a902      	add	r1, sp, #8
 80279a6:	9301      	str	r3, [sp, #4]
 80279a8:	f001 fb02 	bl	8028fb0 <_svfiprintf_r>
 80279ac:	2200      	movs	r2, #0
 80279ae:	9b02      	ldr	r3, [sp, #8]
 80279b0:	701a      	strb	r2, [r3, #0]
 80279b2:	b01c      	add	sp, #112	; 0x70
 80279b4:	bc08      	pop	{r3}
 80279b6:	b003      	add	sp, #12
 80279b8:	4718      	bx	r3
 80279ba:	46c0      	nop			; (mov r8, r8)
 80279bc:	7fffffff 	.word	0x7fffffff
 80279c0:	20000488 	.word	0x20000488
 80279c4:	ffff0208 	.word	0xffff0208

080279c8 <__sread>:
 80279c8:	b570      	push	{r4, r5, r6, lr}
 80279ca:	000c      	movs	r4, r1
 80279cc:	250e      	movs	r5, #14
 80279ce:	5f49      	ldrsh	r1, [r1, r5]
 80279d0:	f000 f968 	bl	8027ca4 <_read_r>
 80279d4:	2800      	cmp	r0, #0
 80279d6:	db03      	blt.n	80279e0 <__sread+0x18>
 80279d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80279da:	181b      	adds	r3, r3, r0
 80279dc:	6563      	str	r3, [r4, #84]	; 0x54
 80279de:	bd70      	pop	{r4, r5, r6, pc}
 80279e0:	89a3      	ldrh	r3, [r4, #12]
 80279e2:	4a02      	ldr	r2, [pc, #8]	; (80279ec <__sread+0x24>)
 80279e4:	4013      	ands	r3, r2
 80279e6:	81a3      	strh	r3, [r4, #12]
 80279e8:	e7f9      	b.n	80279de <__sread+0x16>
 80279ea:	46c0      	nop			; (mov r8, r8)
 80279ec:	ffffefff 	.word	0xffffefff

080279f0 <__swrite>:
 80279f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80279f2:	001f      	movs	r7, r3
 80279f4:	898b      	ldrh	r3, [r1, #12]
 80279f6:	0005      	movs	r5, r0
 80279f8:	000c      	movs	r4, r1
 80279fa:	0016      	movs	r6, r2
 80279fc:	05db      	lsls	r3, r3, #23
 80279fe:	d505      	bpl.n	8027a0c <__swrite+0x1c>
 8027a00:	230e      	movs	r3, #14
 8027a02:	5ec9      	ldrsh	r1, [r1, r3]
 8027a04:	2200      	movs	r2, #0
 8027a06:	2302      	movs	r3, #2
 8027a08:	f000 f938 	bl	8027c7c <_lseek_r>
 8027a0c:	89a3      	ldrh	r3, [r4, #12]
 8027a0e:	4a05      	ldr	r2, [pc, #20]	; (8027a24 <__swrite+0x34>)
 8027a10:	0028      	movs	r0, r5
 8027a12:	4013      	ands	r3, r2
 8027a14:	81a3      	strh	r3, [r4, #12]
 8027a16:	0032      	movs	r2, r6
 8027a18:	230e      	movs	r3, #14
 8027a1a:	5ee1      	ldrsh	r1, [r4, r3]
 8027a1c:	003b      	movs	r3, r7
 8027a1e:	f000 f967 	bl	8027cf0 <_write_r>
 8027a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027a24:	ffffefff 	.word	0xffffefff

08027a28 <__sseek>:
 8027a28:	b570      	push	{r4, r5, r6, lr}
 8027a2a:	000c      	movs	r4, r1
 8027a2c:	250e      	movs	r5, #14
 8027a2e:	5f49      	ldrsh	r1, [r1, r5]
 8027a30:	f000 f924 	bl	8027c7c <_lseek_r>
 8027a34:	89a3      	ldrh	r3, [r4, #12]
 8027a36:	1c42      	adds	r2, r0, #1
 8027a38:	d103      	bne.n	8027a42 <__sseek+0x1a>
 8027a3a:	4a05      	ldr	r2, [pc, #20]	; (8027a50 <__sseek+0x28>)
 8027a3c:	4013      	ands	r3, r2
 8027a3e:	81a3      	strh	r3, [r4, #12]
 8027a40:	bd70      	pop	{r4, r5, r6, pc}
 8027a42:	2280      	movs	r2, #128	; 0x80
 8027a44:	0152      	lsls	r2, r2, #5
 8027a46:	4313      	orrs	r3, r2
 8027a48:	81a3      	strh	r3, [r4, #12]
 8027a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8027a4c:	e7f8      	b.n	8027a40 <__sseek+0x18>
 8027a4e:	46c0      	nop			; (mov r8, r8)
 8027a50:	ffffefff 	.word	0xffffefff

08027a54 <__sclose>:
 8027a54:	b510      	push	{r4, lr}
 8027a56:	230e      	movs	r3, #14
 8027a58:	5ec9      	ldrsh	r1, [r1, r3]
 8027a5a:	f000 f89f 	bl	8027b9c <_close_r>
 8027a5e:	bd10      	pop	{r4, pc}

08027a60 <memset>:
 8027a60:	0003      	movs	r3, r0
 8027a62:	1882      	adds	r2, r0, r2
 8027a64:	4293      	cmp	r3, r2
 8027a66:	d100      	bne.n	8027a6a <memset+0xa>
 8027a68:	4770      	bx	lr
 8027a6a:	7019      	strb	r1, [r3, #0]
 8027a6c:	3301      	adds	r3, #1
 8027a6e:	e7f9      	b.n	8027a64 <memset+0x4>

08027a70 <strcat>:
 8027a70:	0002      	movs	r2, r0
 8027a72:	b510      	push	{r4, lr}
 8027a74:	7813      	ldrb	r3, [r2, #0]
 8027a76:	0014      	movs	r4, r2
 8027a78:	3201      	adds	r2, #1
 8027a7a:	2b00      	cmp	r3, #0
 8027a7c:	d1fa      	bne.n	8027a74 <strcat+0x4>
 8027a7e:	5cca      	ldrb	r2, [r1, r3]
 8027a80:	54e2      	strb	r2, [r4, r3]
 8027a82:	3301      	adds	r3, #1
 8027a84:	2a00      	cmp	r2, #0
 8027a86:	d1fa      	bne.n	8027a7e <strcat+0xe>
 8027a88:	bd10      	pop	{r4, pc}

08027a8a <strncmp>:
 8027a8a:	b530      	push	{r4, r5, lr}
 8027a8c:	0005      	movs	r5, r0
 8027a8e:	1e10      	subs	r0, r2, #0
 8027a90:	d00b      	beq.n	8027aaa <strncmp+0x20>
 8027a92:	2400      	movs	r4, #0
 8027a94:	3a01      	subs	r2, #1
 8027a96:	5d2b      	ldrb	r3, [r5, r4]
 8027a98:	5d08      	ldrb	r0, [r1, r4]
 8027a9a:	4283      	cmp	r3, r0
 8027a9c:	d104      	bne.n	8027aa8 <strncmp+0x1e>
 8027a9e:	42a2      	cmp	r2, r4
 8027aa0:	d002      	beq.n	8027aa8 <strncmp+0x1e>
 8027aa2:	3401      	adds	r4, #1
 8027aa4:	2b00      	cmp	r3, #0
 8027aa6:	d1f6      	bne.n	8027a96 <strncmp+0xc>
 8027aa8:	1a18      	subs	r0, r3, r0
 8027aaa:	bd30      	pop	{r4, r5, pc}

08027aac <strncpy>:
 8027aac:	0003      	movs	r3, r0
 8027aae:	b530      	push	{r4, r5, lr}
 8027ab0:	001d      	movs	r5, r3
 8027ab2:	2a00      	cmp	r2, #0
 8027ab4:	d006      	beq.n	8027ac4 <strncpy+0x18>
 8027ab6:	780c      	ldrb	r4, [r1, #0]
 8027ab8:	3a01      	subs	r2, #1
 8027aba:	3301      	adds	r3, #1
 8027abc:	702c      	strb	r4, [r5, #0]
 8027abe:	3101      	adds	r1, #1
 8027ac0:	2c00      	cmp	r4, #0
 8027ac2:	d1f5      	bne.n	8027ab0 <strncpy+0x4>
 8027ac4:	2100      	movs	r1, #0
 8027ac6:	189a      	adds	r2, r3, r2
 8027ac8:	4293      	cmp	r3, r2
 8027aca:	d100      	bne.n	8027ace <strncpy+0x22>
 8027acc:	bd30      	pop	{r4, r5, pc}
 8027ace:	7019      	strb	r1, [r3, #0]
 8027ad0:	3301      	adds	r3, #1
 8027ad2:	e7f9      	b.n	8027ac8 <strncpy+0x1c>

08027ad4 <strtok>:
 8027ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027ad6:	4b16      	ldr	r3, [pc, #88]	; (8027b30 <strtok+0x5c>)
 8027ad8:	0005      	movs	r5, r0
 8027ada:	681f      	ldr	r7, [r3, #0]
 8027adc:	000e      	movs	r6, r1
 8027ade:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8027ae0:	2c00      	cmp	r4, #0
 8027ae2:	d11d      	bne.n	8027b20 <strtok+0x4c>
 8027ae4:	2050      	movs	r0, #80	; 0x50
 8027ae6:	f7fe ff69 	bl	80269bc <malloc>
 8027aea:	1e02      	subs	r2, r0, #0
 8027aec:	6478      	str	r0, [r7, #68]	; 0x44
 8027aee:	d104      	bne.n	8027afa <strtok+0x26>
 8027af0:	215b      	movs	r1, #91	; 0x5b
 8027af2:	4b10      	ldr	r3, [pc, #64]	; (8027b34 <strtok+0x60>)
 8027af4:	4810      	ldr	r0, [pc, #64]	; (8027b38 <strtok+0x64>)
 8027af6:	f000 f95b 	bl	8027db0 <__assert_func>
 8027afa:	6004      	str	r4, [r0, #0]
 8027afc:	6044      	str	r4, [r0, #4]
 8027afe:	6084      	str	r4, [r0, #8]
 8027b00:	60c4      	str	r4, [r0, #12]
 8027b02:	6104      	str	r4, [r0, #16]
 8027b04:	6144      	str	r4, [r0, #20]
 8027b06:	6184      	str	r4, [r0, #24]
 8027b08:	6284      	str	r4, [r0, #40]	; 0x28
 8027b0a:	62c4      	str	r4, [r0, #44]	; 0x2c
 8027b0c:	6304      	str	r4, [r0, #48]	; 0x30
 8027b0e:	6344      	str	r4, [r0, #52]	; 0x34
 8027b10:	6384      	str	r4, [r0, #56]	; 0x38
 8027b12:	63c4      	str	r4, [r0, #60]	; 0x3c
 8027b14:	6404      	str	r4, [r0, #64]	; 0x40
 8027b16:	6444      	str	r4, [r0, #68]	; 0x44
 8027b18:	6484      	str	r4, [r0, #72]	; 0x48
 8027b1a:	64c4      	str	r4, [r0, #76]	; 0x4c
 8027b1c:	7704      	strb	r4, [r0, #28]
 8027b1e:	6244      	str	r4, [r0, #36]	; 0x24
 8027b20:	0031      	movs	r1, r6
 8027b22:	0028      	movs	r0, r5
 8027b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8027b26:	2301      	movs	r3, #1
 8027b28:	f000 f808 	bl	8027b3c <__strtok_r>
 8027b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027b2e:	46c0      	nop			; (mov r8, r8)
 8027b30:	20000488 	.word	0x20000488
 8027b34:	0802b9e0 	.word	0x0802b9e0
 8027b38:	0802b9f7 	.word	0x0802b9f7

08027b3c <__strtok_r>:
 8027b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b3e:	2800      	cmp	r0, #0
 8027b40:	d102      	bne.n	8027b48 <__strtok_r+0xc>
 8027b42:	6810      	ldr	r0, [r2, #0]
 8027b44:	2800      	cmp	r0, #0
 8027b46:	d013      	beq.n	8027b70 <__strtok_r+0x34>
 8027b48:	0004      	movs	r4, r0
 8027b4a:	0020      	movs	r0, r4
 8027b4c:	000e      	movs	r6, r1
 8027b4e:	7805      	ldrb	r5, [r0, #0]
 8027b50:	3401      	adds	r4, #1
 8027b52:	7837      	ldrb	r7, [r6, #0]
 8027b54:	2f00      	cmp	r7, #0
 8027b56:	d104      	bne.n	8027b62 <__strtok_r+0x26>
 8027b58:	2d00      	cmp	r5, #0
 8027b5a:	d10f      	bne.n	8027b7c <__strtok_r+0x40>
 8027b5c:	0028      	movs	r0, r5
 8027b5e:	6015      	str	r5, [r2, #0]
 8027b60:	e006      	b.n	8027b70 <__strtok_r+0x34>
 8027b62:	3601      	adds	r6, #1
 8027b64:	42bd      	cmp	r5, r7
 8027b66:	d1f4      	bne.n	8027b52 <__strtok_r+0x16>
 8027b68:	2b00      	cmp	r3, #0
 8027b6a:	d1ee      	bne.n	8027b4a <__strtok_r+0xe>
 8027b6c:	6014      	str	r4, [r2, #0]
 8027b6e:	7003      	strb	r3, [r0, #0]
 8027b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b72:	002f      	movs	r7, r5
 8027b74:	e00f      	b.n	8027b96 <__strtok_r+0x5a>
 8027b76:	3301      	adds	r3, #1
 8027b78:	2e00      	cmp	r6, #0
 8027b7a:	d104      	bne.n	8027b86 <__strtok_r+0x4a>
 8027b7c:	0023      	movs	r3, r4
 8027b7e:	3401      	adds	r4, #1
 8027b80:	781d      	ldrb	r5, [r3, #0]
 8027b82:	0027      	movs	r7, r4
 8027b84:	000b      	movs	r3, r1
 8027b86:	781e      	ldrb	r6, [r3, #0]
 8027b88:	42b5      	cmp	r5, r6
 8027b8a:	d1f4      	bne.n	8027b76 <__strtok_r+0x3a>
 8027b8c:	2d00      	cmp	r5, #0
 8027b8e:	d0f0      	beq.n	8027b72 <__strtok_r+0x36>
 8027b90:	2300      	movs	r3, #0
 8027b92:	3c01      	subs	r4, #1
 8027b94:	7023      	strb	r3, [r4, #0]
 8027b96:	6017      	str	r7, [r2, #0]
 8027b98:	e7ea      	b.n	8027b70 <__strtok_r+0x34>
	...

08027b9c <_close_r>:
 8027b9c:	2300      	movs	r3, #0
 8027b9e:	b570      	push	{r4, r5, r6, lr}
 8027ba0:	4d06      	ldr	r5, [pc, #24]	; (8027bbc <_close_r+0x20>)
 8027ba2:	0004      	movs	r4, r0
 8027ba4:	0008      	movs	r0, r1
 8027ba6:	602b      	str	r3, [r5, #0]
 8027ba8:	f7e4 fcb2 	bl	800c510 <_close>
 8027bac:	1c43      	adds	r3, r0, #1
 8027bae:	d103      	bne.n	8027bb8 <_close_r+0x1c>
 8027bb0:	682b      	ldr	r3, [r5, #0]
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	d000      	beq.n	8027bb8 <_close_r+0x1c>
 8027bb6:	6023      	str	r3, [r4, #0]
 8027bb8:	bd70      	pop	{r4, r5, r6, pc}
 8027bba:	46c0      	nop			; (mov r8, r8)
 8027bbc:	20005648 	.word	0x20005648

08027bc0 <_reclaim_reent>:
 8027bc0:	4b2d      	ldr	r3, [pc, #180]	; (8027c78 <_reclaim_reent+0xb8>)
 8027bc2:	b570      	push	{r4, r5, r6, lr}
 8027bc4:	681b      	ldr	r3, [r3, #0]
 8027bc6:	0004      	movs	r4, r0
 8027bc8:	4283      	cmp	r3, r0
 8027bca:	d042      	beq.n	8027c52 <_reclaim_reent+0x92>
 8027bcc:	69c3      	ldr	r3, [r0, #28]
 8027bce:	2b00      	cmp	r3, #0
 8027bd0:	d00a      	beq.n	8027be8 <_reclaim_reent+0x28>
 8027bd2:	2500      	movs	r5, #0
 8027bd4:	68db      	ldr	r3, [r3, #12]
 8027bd6:	42ab      	cmp	r3, r5
 8027bd8:	d140      	bne.n	8027c5c <_reclaim_reent+0x9c>
 8027bda:	69e3      	ldr	r3, [r4, #28]
 8027bdc:	6819      	ldr	r1, [r3, #0]
 8027bde:	2900      	cmp	r1, #0
 8027be0:	d002      	beq.n	8027be8 <_reclaim_reent+0x28>
 8027be2:	0020      	movs	r0, r4
 8027be4:	f000 f902 	bl	8027dec <_free_r>
 8027be8:	6961      	ldr	r1, [r4, #20]
 8027bea:	2900      	cmp	r1, #0
 8027bec:	d002      	beq.n	8027bf4 <_reclaim_reent+0x34>
 8027bee:	0020      	movs	r0, r4
 8027bf0:	f000 f8fc 	bl	8027dec <_free_r>
 8027bf4:	69e1      	ldr	r1, [r4, #28]
 8027bf6:	2900      	cmp	r1, #0
 8027bf8:	d002      	beq.n	8027c00 <_reclaim_reent+0x40>
 8027bfa:	0020      	movs	r0, r4
 8027bfc:	f000 f8f6 	bl	8027dec <_free_r>
 8027c00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8027c02:	2900      	cmp	r1, #0
 8027c04:	d002      	beq.n	8027c0c <_reclaim_reent+0x4c>
 8027c06:	0020      	movs	r0, r4
 8027c08:	f000 f8f0 	bl	8027dec <_free_r>
 8027c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027c0e:	2900      	cmp	r1, #0
 8027c10:	d002      	beq.n	8027c18 <_reclaim_reent+0x58>
 8027c12:	0020      	movs	r0, r4
 8027c14:	f000 f8ea 	bl	8027dec <_free_r>
 8027c18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8027c1a:	2900      	cmp	r1, #0
 8027c1c:	d002      	beq.n	8027c24 <_reclaim_reent+0x64>
 8027c1e:	0020      	movs	r0, r4
 8027c20:	f000 f8e4 	bl	8027dec <_free_r>
 8027c24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8027c26:	2900      	cmp	r1, #0
 8027c28:	d002      	beq.n	8027c30 <_reclaim_reent+0x70>
 8027c2a:	0020      	movs	r0, r4
 8027c2c:	f000 f8de 	bl	8027dec <_free_r>
 8027c30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8027c32:	2900      	cmp	r1, #0
 8027c34:	d002      	beq.n	8027c3c <_reclaim_reent+0x7c>
 8027c36:	0020      	movs	r0, r4
 8027c38:	f000 f8d8 	bl	8027dec <_free_r>
 8027c3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8027c3e:	2900      	cmp	r1, #0
 8027c40:	d002      	beq.n	8027c48 <_reclaim_reent+0x88>
 8027c42:	0020      	movs	r0, r4
 8027c44:	f000 f8d2 	bl	8027dec <_free_r>
 8027c48:	6a23      	ldr	r3, [r4, #32]
 8027c4a:	2b00      	cmp	r3, #0
 8027c4c:	d001      	beq.n	8027c52 <_reclaim_reent+0x92>
 8027c4e:	0020      	movs	r0, r4
 8027c50:	4798      	blx	r3
 8027c52:	bd70      	pop	{r4, r5, r6, pc}
 8027c54:	5949      	ldr	r1, [r1, r5]
 8027c56:	2900      	cmp	r1, #0
 8027c58:	d108      	bne.n	8027c6c <_reclaim_reent+0xac>
 8027c5a:	3504      	adds	r5, #4
 8027c5c:	69e3      	ldr	r3, [r4, #28]
 8027c5e:	68d9      	ldr	r1, [r3, #12]
 8027c60:	2d80      	cmp	r5, #128	; 0x80
 8027c62:	d1f7      	bne.n	8027c54 <_reclaim_reent+0x94>
 8027c64:	0020      	movs	r0, r4
 8027c66:	f000 f8c1 	bl	8027dec <_free_r>
 8027c6a:	e7b6      	b.n	8027bda <_reclaim_reent+0x1a>
 8027c6c:	680e      	ldr	r6, [r1, #0]
 8027c6e:	0020      	movs	r0, r4
 8027c70:	f000 f8bc 	bl	8027dec <_free_r>
 8027c74:	0031      	movs	r1, r6
 8027c76:	e7ee      	b.n	8027c56 <_reclaim_reent+0x96>
 8027c78:	20000488 	.word	0x20000488

08027c7c <_lseek_r>:
 8027c7c:	b570      	push	{r4, r5, r6, lr}
 8027c7e:	0004      	movs	r4, r0
 8027c80:	0008      	movs	r0, r1
 8027c82:	0011      	movs	r1, r2
 8027c84:	001a      	movs	r2, r3
 8027c86:	2300      	movs	r3, #0
 8027c88:	4d05      	ldr	r5, [pc, #20]	; (8027ca0 <_lseek_r+0x24>)
 8027c8a:	602b      	str	r3, [r5, #0]
 8027c8c:	f7e4 fc61 	bl	800c552 <_lseek>
 8027c90:	1c43      	adds	r3, r0, #1
 8027c92:	d103      	bne.n	8027c9c <_lseek_r+0x20>
 8027c94:	682b      	ldr	r3, [r5, #0]
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	d000      	beq.n	8027c9c <_lseek_r+0x20>
 8027c9a:	6023      	str	r3, [r4, #0]
 8027c9c:	bd70      	pop	{r4, r5, r6, pc}
 8027c9e:	46c0      	nop			; (mov r8, r8)
 8027ca0:	20005648 	.word	0x20005648

08027ca4 <_read_r>:
 8027ca4:	b570      	push	{r4, r5, r6, lr}
 8027ca6:	0004      	movs	r4, r0
 8027ca8:	0008      	movs	r0, r1
 8027caa:	0011      	movs	r1, r2
 8027cac:	001a      	movs	r2, r3
 8027cae:	2300      	movs	r3, #0
 8027cb0:	4d05      	ldr	r5, [pc, #20]	; (8027cc8 <_read_r+0x24>)
 8027cb2:	602b      	str	r3, [r5, #0]
 8027cb4:	f7e4 fbf3 	bl	800c49e <_read>
 8027cb8:	1c43      	adds	r3, r0, #1
 8027cba:	d103      	bne.n	8027cc4 <_read_r+0x20>
 8027cbc:	682b      	ldr	r3, [r5, #0]
 8027cbe:	2b00      	cmp	r3, #0
 8027cc0:	d000      	beq.n	8027cc4 <_read_r+0x20>
 8027cc2:	6023      	str	r3, [r4, #0]
 8027cc4:	bd70      	pop	{r4, r5, r6, pc}
 8027cc6:	46c0      	nop			; (mov r8, r8)
 8027cc8:	20005648 	.word	0x20005648

08027ccc <_sbrk_r>:
 8027ccc:	2300      	movs	r3, #0
 8027cce:	b570      	push	{r4, r5, r6, lr}
 8027cd0:	4d06      	ldr	r5, [pc, #24]	; (8027cec <_sbrk_r+0x20>)
 8027cd2:	0004      	movs	r4, r0
 8027cd4:	0008      	movs	r0, r1
 8027cd6:	602b      	str	r3, [r5, #0]
 8027cd8:	f7e4 fc46 	bl	800c568 <_sbrk>
 8027cdc:	1c43      	adds	r3, r0, #1
 8027cde:	d103      	bne.n	8027ce8 <_sbrk_r+0x1c>
 8027ce0:	682b      	ldr	r3, [r5, #0]
 8027ce2:	2b00      	cmp	r3, #0
 8027ce4:	d000      	beq.n	8027ce8 <_sbrk_r+0x1c>
 8027ce6:	6023      	str	r3, [r4, #0]
 8027ce8:	bd70      	pop	{r4, r5, r6, pc}
 8027cea:	46c0      	nop			; (mov r8, r8)
 8027cec:	20005648 	.word	0x20005648

08027cf0 <_write_r>:
 8027cf0:	b570      	push	{r4, r5, r6, lr}
 8027cf2:	0004      	movs	r4, r0
 8027cf4:	0008      	movs	r0, r1
 8027cf6:	0011      	movs	r1, r2
 8027cf8:	001a      	movs	r2, r3
 8027cfa:	2300      	movs	r3, #0
 8027cfc:	4d05      	ldr	r5, [pc, #20]	; (8027d14 <_write_r+0x24>)
 8027cfe:	602b      	str	r3, [r5, #0]
 8027d00:	f7e4 fbea 	bl	800c4d8 <_write>
 8027d04:	1c43      	adds	r3, r0, #1
 8027d06:	d103      	bne.n	8027d10 <_write_r+0x20>
 8027d08:	682b      	ldr	r3, [r5, #0]
 8027d0a:	2b00      	cmp	r3, #0
 8027d0c:	d000      	beq.n	8027d10 <_write_r+0x20>
 8027d0e:	6023      	str	r3, [r4, #0]
 8027d10:	bd70      	pop	{r4, r5, r6, pc}
 8027d12:	46c0      	nop			; (mov r8, r8)
 8027d14:	20005648 	.word	0x20005648

08027d18 <__errno>:
 8027d18:	4b01      	ldr	r3, [pc, #4]	; (8027d20 <__errno+0x8>)
 8027d1a:	6818      	ldr	r0, [r3, #0]
 8027d1c:	4770      	bx	lr
 8027d1e:	46c0      	nop			; (mov r8, r8)
 8027d20:	20000488 	.word	0x20000488

08027d24 <__libc_init_array>:
 8027d24:	b570      	push	{r4, r5, r6, lr}
 8027d26:	2600      	movs	r6, #0
 8027d28:	4c0c      	ldr	r4, [pc, #48]	; (8027d5c <__libc_init_array+0x38>)
 8027d2a:	4d0d      	ldr	r5, [pc, #52]	; (8027d60 <__libc_init_array+0x3c>)
 8027d2c:	1b64      	subs	r4, r4, r5
 8027d2e:	10a4      	asrs	r4, r4, #2
 8027d30:	42a6      	cmp	r6, r4
 8027d32:	d109      	bne.n	8027d48 <__libc_init_array+0x24>
 8027d34:	2600      	movs	r6, #0
 8027d36:	f001 ffc7 	bl	8029cc8 <_init>
 8027d3a:	4c0a      	ldr	r4, [pc, #40]	; (8027d64 <__libc_init_array+0x40>)
 8027d3c:	4d0a      	ldr	r5, [pc, #40]	; (8027d68 <__libc_init_array+0x44>)
 8027d3e:	1b64      	subs	r4, r4, r5
 8027d40:	10a4      	asrs	r4, r4, #2
 8027d42:	42a6      	cmp	r6, r4
 8027d44:	d105      	bne.n	8027d52 <__libc_init_array+0x2e>
 8027d46:	bd70      	pop	{r4, r5, r6, pc}
 8027d48:	00b3      	lsls	r3, r6, #2
 8027d4a:	58eb      	ldr	r3, [r5, r3]
 8027d4c:	4798      	blx	r3
 8027d4e:	3601      	adds	r6, #1
 8027d50:	e7ee      	b.n	8027d30 <__libc_init_array+0xc>
 8027d52:	00b3      	lsls	r3, r6, #2
 8027d54:	58eb      	ldr	r3, [r5, r3]
 8027d56:	4798      	blx	r3
 8027d58:	3601      	adds	r6, #1
 8027d5a:	e7f2      	b.n	8027d42 <__libc_init_array+0x1e>
 8027d5c:	0802bd98 	.word	0x0802bd98
 8027d60:	0802bd98 	.word	0x0802bd98
 8027d64:	0802bd9c 	.word	0x0802bd9c
 8027d68:	0802bd98 	.word	0x0802bd98

08027d6c <__retarget_lock_init_recursive>:
 8027d6c:	4770      	bx	lr

08027d6e <__retarget_lock_acquire_recursive>:
 8027d6e:	4770      	bx	lr

08027d70 <__retarget_lock_release_recursive>:
 8027d70:	4770      	bx	lr

08027d72 <__aeabi_memcpy>:
 8027d72:	b510      	push	{r4, lr}
 8027d74:	f000 f80d 	bl	8027d92 <memcpy>
 8027d78:	bd10      	pop	{r4, pc}

08027d7a <__aeabi_memset>:
 8027d7a:	000b      	movs	r3, r1
 8027d7c:	b510      	push	{r4, lr}
 8027d7e:	0011      	movs	r1, r2
 8027d80:	001a      	movs	r2, r3
 8027d82:	f7ff fe6d 	bl	8027a60 <memset>
 8027d86:	bd10      	pop	{r4, pc}

08027d88 <__aeabi_memclr>:
 8027d88:	b510      	push	{r4, lr}
 8027d8a:	2200      	movs	r2, #0
 8027d8c:	f7ff fff5 	bl	8027d7a <__aeabi_memset>
 8027d90:	bd10      	pop	{r4, pc}

08027d92 <memcpy>:
 8027d92:	2300      	movs	r3, #0
 8027d94:	b510      	push	{r4, lr}
 8027d96:	429a      	cmp	r2, r3
 8027d98:	d100      	bne.n	8027d9c <memcpy+0xa>
 8027d9a:	bd10      	pop	{r4, pc}
 8027d9c:	5ccc      	ldrb	r4, [r1, r3]
 8027d9e:	54c4      	strb	r4, [r0, r3]
 8027da0:	3301      	adds	r3, #1
 8027da2:	e7f8      	b.n	8027d96 <memcpy+0x4>

08027da4 <nan>:
 8027da4:	2000      	movs	r0, #0
 8027da6:	4901      	ldr	r1, [pc, #4]	; (8027dac <nan+0x8>)
 8027da8:	4770      	bx	lr
 8027daa:	46c0      	nop			; (mov r8, r8)
 8027dac:	7ff80000 	.word	0x7ff80000

08027db0 <__assert_func>:
 8027db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8027db2:	0014      	movs	r4, r2
 8027db4:	001a      	movs	r2, r3
 8027db6:	4b09      	ldr	r3, [pc, #36]	; (8027ddc <__assert_func+0x2c>)
 8027db8:	0005      	movs	r5, r0
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	000e      	movs	r6, r1
 8027dbe:	68d8      	ldr	r0, [r3, #12]
 8027dc0:	4b07      	ldr	r3, [pc, #28]	; (8027de0 <__assert_func+0x30>)
 8027dc2:	2c00      	cmp	r4, #0
 8027dc4:	d101      	bne.n	8027dca <__assert_func+0x1a>
 8027dc6:	4b07      	ldr	r3, [pc, #28]	; (8027de4 <__assert_func+0x34>)
 8027dc8:	001c      	movs	r4, r3
 8027dca:	4907      	ldr	r1, [pc, #28]	; (8027de8 <__assert_func+0x38>)
 8027dcc:	9301      	str	r3, [sp, #4]
 8027dce:	9402      	str	r4, [sp, #8]
 8027dd0:	002b      	movs	r3, r5
 8027dd2:	9600      	str	r6, [sp, #0]
 8027dd4:	f001 fc22 	bl	802961c <fiprintf>
 8027dd8:	f001 fc4e 	bl	8029678 <abort>
 8027ddc:	20000488 	.word	0x20000488
 8027de0:	0802ba59 	.word	0x0802ba59
 8027de4:	0802ba94 	.word	0x0802ba94
 8027de8:	0802ba66 	.word	0x0802ba66

08027dec <_free_r>:
 8027dec:	b570      	push	{r4, r5, r6, lr}
 8027dee:	0005      	movs	r5, r0
 8027df0:	2900      	cmp	r1, #0
 8027df2:	d010      	beq.n	8027e16 <_free_r+0x2a>
 8027df4:	1f0c      	subs	r4, r1, #4
 8027df6:	6823      	ldr	r3, [r4, #0]
 8027df8:	2b00      	cmp	r3, #0
 8027dfa:	da00      	bge.n	8027dfe <_free_r+0x12>
 8027dfc:	18e4      	adds	r4, r4, r3
 8027dfe:	0028      	movs	r0, r5
 8027e00:	f7fe fe8a 	bl	8026b18 <__malloc_lock>
 8027e04:	4a1d      	ldr	r2, [pc, #116]	; (8027e7c <_free_r+0x90>)
 8027e06:	6813      	ldr	r3, [r2, #0]
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	d105      	bne.n	8027e18 <_free_r+0x2c>
 8027e0c:	6063      	str	r3, [r4, #4]
 8027e0e:	6014      	str	r4, [r2, #0]
 8027e10:	0028      	movs	r0, r5
 8027e12:	f7fe fe89 	bl	8026b28 <__malloc_unlock>
 8027e16:	bd70      	pop	{r4, r5, r6, pc}
 8027e18:	42a3      	cmp	r3, r4
 8027e1a:	d908      	bls.n	8027e2e <_free_r+0x42>
 8027e1c:	6820      	ldr	r0, [r4, #0]
 8027e1e:	1821      	adds	r1, r4, r0
 8027e20:	428b      	cmp	r3, r1
 8027e22:	d1f3      	bne.n	8027e0c <_free_r+0x20>
 8027e24:	6819      	ldr	r1, [r3, #0]
 8027e26:	685b      	ldr	r3, [r3, #4]
 8027e28:	1809      	adds	r1, r1, r0
 8027e2a:	6021      	str	r1, [r4, #0]
 8027e2c:	e7ee      	b.n	8027e0c <_free_r+0x20>
 8027e2e:	001a      	movs	r2, r3
 8027e30:	685b      	ldr	r3, [r3, #4]
 8027e32:	2b00      	cmp	r3, #0
 8027e34:	d001      	beq.n	8027e3a <_free_r+0x4e>
 8027e36:	42a3      	cmp	r3, r4
 8027e38:	d9f9      	bls.n	8027e2e <_free_r+0x42>
 8027e3a:	6811      	ldr	r1, [r2, #0]
 8027e3c:	1850      	adds	r0, r2, r1
 8027e3e:	42a0      	cmp	r0, r4
 8027e40:	d10b      	bne.n	8027e5a <_free_r+0x6e>
 8027e42:	6820      	ldr	r0, [r4, #0]
 8027e44:	1809      	adds	r1, r1, r0
 8027e46:	1850      	adds	r0, r2, r1
 8027e48:	6011      	str	r1, [r2, #0]
 8027e4a:	4283      	cmp	r3, r0
 8027e4c:	d1e0      	bne.n	8027e10 <_free_r+0x24>
 8027e4e:	6818      	ldr	r0, [r3, #0]
 8027e50:	685b      	ldr	r3, [r3, #4]
 8027e52:	1841      	adds	r1, r0, r1
 8027e54:	6011      	str	r1, [r2, #0]
 8027e56:	6053      	str	r3, [r2, #4]
 8027e58:	e7da      	b.n	8027e10 <_free_r+0x24>
 8027e5a:	42a0      	cmp	r0, r4
 8027e5c:	d902      	bls.n	8027e64 <_free_r+0x78>
 8027e5e:	230c      	movs	r3, #12
 8027e60:	602b      	str	r3, [r5, #0]
 8027e62:	e7d5      	b.n	8027e10 <_free_r+0x24>
 8027e64:	6820      	ldr	r0, [r4, #0]
 8027e66:	1821      	adds	r1, r4, r0
 8027e68:	428b      	cmp	r3, r1
 8027e6a:	d103      	bne.n	8027e74 <_free_r+0x88>
 8027e6c:	6819      	ldr	r1, [r3, #0]
 8027e6e:	685b      	ldr	r3, [r3, #4]
 8027e70:	1809      	adds	r1, r1, r0
 8027e72:	6021      	str	r1, [r4, #0]
 8027e74:	6063      	str	r3, [r4, #4]
 8027e76:	6054      	str	r4, [r2, #4]
 8027e78:	e7ca      	b.n	8027e10 <_free_r+0x24>
 8027e7a:	46c0      	nop			; (mov r8, r8)
 8027e7c:	20005504 	.word	0x20005504

08027e80 <rshift>:
 8027e80:	0002      	movs	r2, r0
 8027e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e84:	6904      	ldr	r4, [r0, #16]
 8027e86:	114b      	asrs	r3, r1, #5
 8027e88:	b085      	sub	sp, #20
 8027e8a:	3214      	adds	r2, #20
 8027e8c:	9302      	str	r3, [sp, #8]
 8027e8e:	114d      	asrs	r5, r1, #5
 8027e90:	0013      	movs	r3, r2
 8027e92:	42ac      	cmp	r4, r5
 8027e94:	dd32      	ble.n	8027efc <rshift+0x7c>
 8027e96:	261f      	movs	r6, #31
 8027e98:	000f      	movs	r7, r1
 8027e9a:	114b      	asrs	r3, r1, #5
 8027e9c:	009b      	lsls	r3, r3, #2
 8027e9e:	00a5      	lsls	r5, r4, #2
 8027ea0:	18d3      	adds	r3, r2, r3
 8027ea2:	4037      	ands	r7, r6
 8027ea4:	1955      	adds	r5, r2, r5
 8027ea6:	9300      	str	r3, [sp, #0]
 8027ea8:	9701      	str	r7, [sp, #4]
 8027eaa:	4231      	tst	r1, r6
 8027eac:	d10d      	bne.n	8027eca <rshift+0x4a>
 8027eae:	0016      	movs	r6, r2
 8027eb0:	0019      	movs	r1, r3
 8027eb2:	428d      	cmp	r5, r1
 8027eb4:	d836      	bhi.n	8027f24 <rshift+0xa4>
 8027eb6:	9900      	ldr	r1, [sp, #0]
 8027eb8:	2300      	movs	r3, #0
 8027eba:	3903      	subs	r1, #3
 8027ebc:	428d      	cmp	r5, r1
 8027ebe:	d302      	bcc.n	8027ec6 <rshift+0x46>
 8027ec0:	9b02      	ldr	r3, [sp, #8]
 8027ec2:	1ae4      	subs	r4, r4, r3
 8027ec4:	00a3      	lsls	r3, r4, #2
 8027ec6:	18d3      	adds	r3, r2, r3
 8027ec8:	e018      	b.n	8027efc <rshift+0x7c>
 8027eca:	2120      	movs	r1, #32
 8027ecc:	9e01      	ldr	r6, [sp, #4]
 8027ece:	9f01      	ldr	r7, [sp, #4]
 8027ed0:	1b89      	subs	r1, r1, r6
 8027ed2:	9e00      	ldr	r6, [sp, #0]
 8027ed4:	9103      	str	r1, [sp, #12]
 8027ed6:	ce02      	ldmia	r6!, {r1}
 8027ed8:	4694      	mov	ip, r2
 8027eda:	40f9      	lsrs	r1, r7
 8027edc:	42b5      	cmp	r5, r6
 8027ede:	d816      	bhi.n	8027f0e <rshift+0x8e>
 8027ee0:	9e00      	ldr	r6, [sp, #0]
 8027ee2:	2300      	movs	r3, #0
 8027ee4:	3601      	adds	r6, #1
 8027ee6:	42b5      	cmp	r5, r6
 8027ee8:	d303      	bcc.n	8027ef2 <rshift+0x72>
 8027eea:	9b02      	ldr	r3, [sp, #8]
 8027eec:	1ae3      	subs	r3, r4, r3
 8027eee:	009b      	lsls	r3, r3, #2
 8027ef0:	3b04      	subs	r3, #4
 8027ef2:	18d3      	adds	r3, r2, r3
 8027ef4:	6019      	str	r1, [r3, #0]
 8027ef6:	2900      	cmp	r1, #0
 8027ef8:	d000      	beq.n	8027efc <rshift+0x7c>
 8027efa:	3304      	adds	r3, #4
 8027efc:	1a99      	subs	r1, r3, r2
 8027efe:	1089      	asrs	r1, r1, #2
 8027f00:	6101      	str	r1, [r0, #16]
 8027f02:	4293      	cmp	r3, r2
 8027f04:	d101      	bne.n	8027f0a <rshift+0x8a>
 8027f06:	2300      	movs	r3, #0
 8027f08:	6143      	str	r3, [r0, #20]
 8027f0a:	b005      	add	sp, #20
 8027f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f0e:	6837      	ldr	r7, [r6, #0]
 8027f10:	9b03      	ldr	r3, [sp, #12]
 8027f12:	409f      	lsls	r7, r3
 8027f14:	430f      	orrs	r7, r1
 8027f16:	4661      	mov	r1, ip
 8027f18:	c180      	stmia	r1!, {r7}
 8027f1a:	468c      	mov	ip, r1
 8027f1c:	9b01      	ldr	r3, [sp, #4]
 8027f1e:	ce02      	ldmia	r6!, {r1}
 8027f20:	40d9      	lsrs	r1, r3
 8027f22:	e7db      	b.n	8027edc <rshift+0x5c>
 8027f24:	c980      	ldmia	r1!, {r7}
 8027f26:	c680      	stmia	r6!, {r7}
 8027f28:	e7c3      	b.n	8027eb2 <rshift+0x32>

08027f2a <__hexdig_fun>:
 8027f2a:	0002      	movs	r2, r0
 8027f2c:	3a30      	subs	r2, #48	; 0x30
 8027f2e:	0003      	movs	r3, r0
 8027f30:	2a09      	cmp	r2, #9
 8027f32:	d802      	bhi.n	8027f3a <__hexdig_fun+0x10>
 8027f34:	3b20      	subs	r3, #32
 8027f36:	b2d8      	uxtb	r0, r3
 8027f38:	4770      	bx	lr
 8027f3a:	0002      	movs	r2, r0
 8027f3c:	3a61      	subs	r2, #97	; 0x61
 8027f3e:	2a05      	cmp	r2, #5
 8027f40:	d801      	bhi.n	8027f46 <__hexdig_fun+0x1c>
 8027f42:	3b47      	subs	r3, #71	; 0x47
 8027f44:	e7f7      	b.n	8027f36 <__hexdig_fun+0xc>
 8027f46:	001a      	movs	r2, r3
 8027f48:	3a41      	subs	r2, #65	; 0x41
 8027f4a:	2000      	movs	r0, #0
 8027f4c:	2a05      	cmp	r2, #5
 8027f4e:	d8f3      	bhi.n	8027f38 <__hexdig_fun+0xe>
 8027f50:	3b27      	subs	r3, #39	; 0x27
 8027f52:	e7f0      	b.n	8027f36 <__hexdig_fun+0xc>

08027f54 <__gethex>:
 8027f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f56:	b089      	sub	sp, #36	; 0x24
 8027f58:	9307      	str	r3, [sp, #28]
 8027f5a:	2302      	movs	r3, #2
 8027f5c:	9201      	str	r2, [sp, #4]
 8027f5e:	680a      	ldr	r2, [r1, #0]
 8027f60:	425b      	negs	r3, r3
 8027f62:	9003      	str	r0, [sp, #12]
 8027f64:	9106      	str	r1, [sp, #24]
 8027f66:	1c96      	adds	r6, r2, #2
 8027f68:	1a9b      	subs	r3, r3, r2
 8027f6a:	199a      	adds	r2, r3, r6
 8027f6c:	9600      	str	r6, [sp, #0]
 8027f6e:	9205      	str	r2, [sp, #20]
 8027f70:	9a00      	ldr	r2, [sp, #0]
 8027f72:	3601      	adds	r6, #1
 8027f74:	7810      	ldrb	r0, [r2, #0]
 8027f76:	2830      	cmp	r0, #48	; 0x30
 8027f78:	d0f7      	beq.n	8027f6a <__gethex+0x16>
 8027f7a:	f7ff ffd6 	bl	8027f2a <__hexdig_fun>
 8027f7e:	2300      	movs	r3, #0
 8027f80:	001d      	movs	r5, r3
 8027f82:	9302      	str	r3, [sp, #8]
 8027f84:	4298      	cmp	r0, r3
 8027f86:	d11d      	bne.n	8027fc4 <__gethex+0x70>
 8027f88:	2201      	movs	r2, #1
 8027f8a:	49a6      	ldr	r1, [pc, #664]	; (8028224 <__gethex+0x2d0>)
 8027f8c:	9800      	ldr	r0, [sp, #0]
 8027f8e:	f7ff fd7c 	bl	8027a8a <strncmp>
 8027f92:	0007      	movs	r7, r0
 8027f94:	42a8      	cmp	r0, r5
 8027f96:	d169      	bne.n	802806c <__gethex+0x118>
 8027f98:	9b00      	ldr	r3, [sp, #0]
 8027f9a:	0034      	movs	r4, r6
 8027f9c:	7858      	ldrb	r0, [r3, #1]
 8027f9e:	f7ff ffc4 	bl	8027f2a <__hexdig_fun>
 8027fa2:	2301      	movs	r3, #1
 8027fa4:	9302      	str	r3, [sp, #8]
 8027fa6:	42a8      	cmp	r0, r5
 8027fa8:	d02f      	beq.n	802800a <__gethex+0xb6>
 8027faa:	9600      	str	r6, [sp, #0]
 8027fac:	9b00      	ldr	r3, [sp, #0]
 8027fae:	7818      	ldrb	r0, [r3, #0]
 8027fb0:	2830      	cmp	r0, #48	; 0x30
 8027fb2:	d009      	beq.n	8027fc8 <__gethex+0x74>
 8027fb4:	f7ff ffb9 	bl	8027f2a <__hexdig_fun>
 8027fb8:	4242      	negs	r2, r0
 8027fba:	4142      	adcs	r2, r0
 8027fbc:	2301      	movs	r3, #1
 8027fbe:	0035      	movs	r5, r6
 8027fc0:	9202      	str	r2, [sp, #8]
 8027fc2:	9305      	str	r3, [sp, #20]
 8027fc4:	9c00      	ldr	r4, [sp, #0]
 8027fc6:	e004      	b.n	8027fd2 <__gethex+0x7e>
 8027fc8:	9b00      	ldr	r3, [sp, #0]
 8027fca:	3301      	adds	r3, #1
 8027fcc:	9300      	str	r3, [sp, #0]
 8027fce:	e7ed      	b.n	8027fac <__gethex+0x58>
 8027fd0:	3401      	adds	r4, #1
 8027fd2:	7820      	ldrb	r0, [r4, #0]
 8027fd4:	f7ff ffa9 	bl	8027f2a <__hexdig_fun>
 8027fd8:	1e07      	subs	r7, r0, #0
 8027fda:	d1f9      	bne.n	8027fd0 <__gethex+0x7c>
 8027fdc:	2201      	movs	r2, #1
 8027fde:	0020      	movs	r0, r4
 8027fe0:	4990      	ldr	r1, [pc, #576]	; (8028224 <__gethex+0x2d0>)
 8027fe2:	f7ff fd52 	bl	8027a8a <strncmp>
 8027fe6:	2800      	cmp	r0, #0
 8027fe8:	d10d      	bne.n	8028006 <__gethex+0xb2>
 8027fea:	2d00      	cmp	r5, #0
 8027fec:	d106      	bne.n	8027ffc <__gethex+0xa8>
 8027fee:	3401      	adds	r4, #1
 8027ff0:	0025      	movs	r5, r4
 8027ff2:	7820      	ldrb	r0, [r4, #0]
 8027ff4:	f7ff ff99 	bl	8027f2a <__hexdig_fun>
 8027ff8:	2800      	cmp	r0, #0
 8027ffa:	d102      	bne.n	8028002 <__gethex+0xae>
 8027ffc:	1b2d      	subs	r5, r5, r4
 8027ffe:	00af      	lsls	r7, r5, #2
 8028000:	e003      	b.n	802800a <__gethex+0xb6>
 8028002:	3401      	adds	r4, #1
 8028004:	e7f5      	b.n	8027ff2 <__gethex+0x9e>
 8028006:	2d00      	cmp	r5, #0
 8028008:	d1f8      	bne.n	8027ffc <__gethex+0xa8>
 802800a:	2220      	movs	r2, #32
 802800c:	7823      	ldrb	r3, [r4, #0]
 802800e:	0026      	movs	r6, r4
 8028010:	4393      	bics	r3, r2
 8028012:	2b50      	cmp	r3, #80	; 0x50
 8028014:	d11d      	bne.n	8028052 <__gethex+0xfe>
 8028016:	7863      	ldrb	r3, [r4, #1]
 8028018:	2b2b      	cmp	r3, #43	; 0x2b
 802801a:	d02c      	beq.n	8028076 <__gethex+0x122>
 802801c:	2b2d      	cmp	r3, #45	; 0x2d
 802801e:	d02e      	beq.n	802807e <__gethex+0x12a>
 8028020:	2300      	movs	r3, #0
 8028022:	1c66      	adds	r6, r4, #1
 8028024:	9304      	str	r3, [sp, #16]
 8028026:	7830      	ldrb	r0, [r6, #0]
 8028028:	f7ff ff7f 	bl	8027f2a <__hexdig_fun>
 802802c:	1e43      	subs	r3, r0, #1
 802802e:	b2db      	uxtb	r3, r3
 8028030:	2b18      	cmp	r3, #24
 8028032:	d82b      	bhi.n	802808c <__gethex+0x138>
 8028034:	3810      	subs	r0, #16
 8028036:	0005      	movs	r5, r0
 8028038:	7870      	ldrb	r0, [r6, #1]
 802803a:	f7ff ff76 	bl	8027f2a <__hexdig_fun>
 802803e:	1e43      	subs	r3, r0, #1
 8028040:	b2db      	uxtb	r3, r3
 8028042:	3601      	adds	r6, #1
 8028044:	2b18      	cmp	r3, #24
 8028046:	d91c      	bls.n	8028082 <__gethex+0x12e>
 8028048:	9b04      	ldr	r3, [sp, #16]
 802804a:	2b00      	cmp	r3, #0
 802804c:	d000      	beq.n	8028050 <__gethex+0xfc>
 802804e:	426d      	negs	r5, r5
 8028050:	197f      	adds	r7, r7, r5
 8028052:	9b06      	ldr	r3, [sp, #24]
 8028054:	601e      	str	r6, [r3, #0]
 8028056:	9b02      	ldr	r3, [sp, #8]
 8028058:	2b00      	cmp	r3, #0
 802805a:	d019      	beq.n	8028090 <__gethex+0x13c>
 802805c:	2600      	movs	r6, #0
 802805e:	9b05      	ldr	r3, [sp, #20]
 8028060:	42b3      	cmp	r3, r6
 8028062:	d100      	bne.n	8028066 <__gethex+0x112>
 8028064:	3606      	adds	r6, #6
 8028066:	0030      	movs	r0, r6
 8028068:	b009      	add	sp, #36	; 0x24
 802806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802806c:	2301      	movs	r3, #1
 802806e:	2700      	movs	r7, #0
 8028070:	9c00      	ldr	r4, [sp, #0]
 8028072:	9302      	str	r3, [sp, #8]
 8028074:	e7c9      	b.n	802800a <__gethex+0xb6>
 8028076:	2300      	movs	r3, #0
 8028078:	9304      	str	r3, [sp, #16]
 802807a:	1ca6      	adds	r6, r4, #2
 802807c:	e7d3      	b.n	8028026 <__gethex+0xd2>
 802807e:	2301      	movs	r3, #1
 8028080:	e7fa      	b.n	8028078 <__gethex+0x124>
 8028082:	230a      	movs	r3, #10
 8028084:	435d      	muls	r5, r3
 8028086:	182d      	adds	r5, r5, r0
 8028088:	3d10      	subs	r5, #16
 802808a:	e7d5      	b.n	8028038 <__gethex+0xe4>
 802808c:	0026      	movs	r6, r4
 802808e:	e7e0      	b.n	8028052 <__gethex+0xfe>
 8028090:	9b00      	ldr	r3, [sp, #0]
 8028092:	9902      	ldr	r1, [sp, #8]
 8028094:	1ae3      	subs	r3, r4, r3
 8028096:	3b01      	subs	r3, #1
 8028098:	2b07      	cmp	r3, #7
 802809a:	dc0a      	bgt.n	80280b2 <__gethex+0x15e>
 802809c:	9803      	ldr	r0, [sp, #12]
 802809e:	f000 fa5d 	bl	802855c <_Balloc>
 80280a2:	1e05      	subs	r5, r0, #0
 80280a4:	d108      	bne.n	80280b8 <__gethex+0x164>
 80280a6:	002a      	movs	r2, r5
 80280a8:	21e4      	movs	r1, #228	; 0xe4
 80280aa:	4b5f      	ldr	r3, [pc, #380]	; (8028228 <__gethex+0x2d4>)
 80280ac:	485f      	ldr	r0, [pc, #380]	; (802822c <__gethex+0x2d8>)
 80280ae:	f7ff fe7f 	bl	8027db0 <__assert_func>
 80280b2:	3101      	adds	r1, #1
 80280b4:	105b      	asrs	r3, r3, #1
 80280b6:	e7ef      	b.n	8028098 <__gethex+0x144>
 80280b8:	0003      	movs	r3, r0
 80280ba:	3314      	adds	r3, #20
 80280bc:	9302      	str	r3, [sp, #8]
 80280be:	9305      	str	r3, [sp, #20]
 80280c0:	2300      	movs	r3, #0
 80280c2:	001e      	movs	r6, r3
 80280c4:	9304      	str	r3, [sp, #16]
 80280c6:	9b00      	ldr	r3, [sp, #0]
 80280c8:	42a3      	cmp	r3, r4
 80280ca:	d33f      	bcc.n	802814c <__gethex+0x1f8>
 80280cc:	9c05      	ldr	r4, [sp, #20]
 80280ce:	9b02      	ldr	r3, [sp, #8]
 80280d0:	c440      	stmia	r4!, {r6}
 80280d2:	1ae4      	subs	r4, r4, r3
 80280d4:	10a4      	asrs	r4, r4, #2
 80280d6:	0030      	movs	r0, r6
 80280d8:	612c      	str	r4, [r5, #16]
 80280da:	f000 fb37 	bl	802874c <__hi0bits>
 80280de:	9b01      	ldr	r3, [sp, #4]
 80280e0:	0164      	lsls	r4, r4, #5
 80280e2:	681b      	ldr	r3, [r3, #0]
 80280e4:	1a26      	subs	r6, r4, r0
 80280e6:	9300      	str	r3, [sp, #0]
 80280e8:	429e      	cmp	r6, r3
 80280ea:	dd51      	ble.n	8028190 <__gethex+0x23c>
 80280ec:	1af6      	subs	r6, r6, r3
 80280ee:	0031      	movs	r1, r6
 80280f0:	0028      	movs	r0, r5
 80280f2:	f000 fecb 	bl	8028e8c <__any_on>
 80280f6:	1e04      	subs	r4, r0, #0
 80280f8:	d016      	beq.n	8028128 <__gethex+0x1d4>
 80280fa:	2401      	movs	r4, #1
 80280fc:	231f      	movs	r3, #31
 80280fe:	0020      	movs	r0, r4
 8028100:	1e72      	subs	r2, r6, #1
 8028102:	4013      	ands	r3, r2
 8028104:	4098      	lsls	r0, r3
 8028106:	0003      	movs	r3, r0
 8028108:	1151      	asrs	r1, r2, #5
 802810a:	9802      	ldr	r0, [sp, #8]
 802810c:	0089      	lsls	r1, r1, #2
 802810e:	5809      	ldr	r1, [r1, r0]
 8028110:	4219      	tst	r1, r3
 8028112:	d009      	beq.n	8028128 <__gethex+0x1d4>
 8028114:	42a2      	cmp	r2, r4
 8028116:	dd06      	ble.n	8028126 <__gethex+0x1d2>
 8028118:	0028      	movs	r0, r5
 802811a:	1eb1      	subs	r1, r6, #2
 802811c:	f000 feb6 	bl	8028e8c <__any_on>
 8028120:	3402      	adds	r4, #2
 8028122:	2800      	cmp	r0, #0
 8028124:	d100      	bne.n	8028128 <__gethex+0x1d4>
 8028126:	2402      	movs	r4, #2
 8028128:	0031      	movs	r1, r6
 802812a:	0028      	movs	r0, r5
 802812c:	f7ff fea8 	bl	8027e80 <rshift>
 8028130:	19bf      	adds	r7, r7, r6
 8028132:	9b01      	ldr	r3, [sp, #4]
 8028134:	689b      	ldr	r3, [r3, #8]
 8028136:	42bb      	cmp	r3, r7
 8028138:	da3a      	bge.n	80281b0 <__gethex+0x25c>
 802813a:	0029      	movs	r1, r5
 802813c:	9803      	ldr	r0, [sp, #12]
 802813e:	f000 fa51 	bl	80285e4 <_Bfree>
 8028142:	2300      	movs	r3, #0
 8028144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028146:	26a3      	movs	r6, #163	; 0xa3
 8028148:	6013      	str	r3, [r2, #0]
 802814a:	e78c      	b.n	8028066 <__gethex+0x112>
 802814c:	3c01      	subs	r4, #1
 802814e:	7823      	ldrb	r3, [r4, #0]
 8028150:	2b2e      	cmp	r3, #46	; 0x2e
 8028152:	d012      	beq.n	802817a <__gethex+0x226>
 8028154:	9b04      	ldr	r3, [sp, #16]
 8028156:	2b20      	cmp	r3, #32
 8028158:	d104      	bne.n	8028164 <__gethex+0x210>
 802815a:	9b05      	ldr	r3, [sp, #20]
 802815c:	c340      	stmia	r3!, {r6}
 802815e:	2600      	movs	r6, #0
 8028160:	9305      	str	r3, [sp, #20]
 8028162:	9604      	str	r6, [sp, #16]
 8028164:	7820      	ldrb	r0, [r4, #0]
 8028166:	f7ff fee0 	bl	8027f2a <__hexdig_fun>
 802816a:	230f      	movs	r3, #15
 802816c:	4018      	ands	r0, r3
 802816e:	9b04      	ldr	r3, [sp, #16]
 8028170:	4098      	lsls	r0, r3
 8028172:	3304      	adds	r3, #4
 8028174:	4306      	orrs	r6, r0
 8028176:	9304      	str	r3, [sp, #16]
 8028178:	e7a5      	b.n	80280c6 <__gethex+0x172>
 802817a:	9b00      	ldr	r3, [sp, #0]
 802817c:	42a3      	cmp	r3, r4
 802817e:	d8e9      	bhi.n	8028154 <__gethex+0x200>
 8028180:	2201      	movs	r2, #1
 8028182:	0020      	movs	r0, r4
 8028184:	4927      	ldr	r1, [pc, #156]	; (8028224 <__gethex+0x2d0>)
 8028186:	f7ff fc80 	bl	8027a8a <strncmp>
 802818a:	2800      	cmp	r0, #0
 802818c:	d1e2      	bne.n	8028154 <__gethex+0x200>
 802818e:	e79a      	b.n	80280c6 <__gethex+0x172>
 8028190:	9b00      	ldr	r3, [sp, #0]
 8028192:	2400      	movs	r4, #0
 8028194:	429e      	cmp	r6, r3
 8028196:	dacc      	bge.n	8028132 <__gethex+0x1de>
 8028198:	1b9e      	subs	r6, r3, r6
 802819a:	0029      	movs	r1, r5
 802819c:	0032      	movs	r2, r6
 802819e:	9803      	ldr	r0, [sp, #12]
 80281a0:	f000 fc40 	bl	8028a24 <__lshift>
 80281a4:	0003      	movs	r3, r0
 80281a6:	3314      	adds	r3, #20
 80281a8:	0005      	movs	r5, r0
 80281aa:	1bbf      	subs	r7, r7, r6
 80281ac:	9302      	str	r3, [sp, #8]
 80281ae:	e7c0      	b.n	8028132 <__gethex+0x1de>
 80281b0:	9b01      	ldr	r3, [sp, #4]
 80281b2:	685e      	ldr	r6, [r3, #4]
 80281b4:	42be      	cmp	r6, r7
 80281b6:	dd70      	ble.n	802829a <__gethex+0x346>
 80281b8:	9b00      	ldr	r3, [sp, #0]
 80281ba:	1bf6      	subs	r6, r6, r7
 80281bc:	42b3      	cmp	r3, r6
 80281be:	dc37      	bgt.n	8028230 <__gethex+0x2dc>
 80281c0:	9b01      	ldr	r3, [sp, #4]
 80281c2:	68db      	ldr	r3, [r3, #12]
 80281c4:	2b02      	cmp	r3, #2
 80281c6:	d024      	beq.n	8028212 <__gethex+0x2be>
 80281c8:	2b03      	cmp	r3, #3
 80281ca:	d026      	beq.n	802821a <__gethex+0x2c6>
 80281cc:	2b01      	cmp	r3, #1
 80281ce:	d117      	bne.n	8028200 <__gethex+0x2ac>
 80281d0:	9b00      	ldr	r3, [sp, #0]
 80281d2:	42b3      	cmp	r3, r6
 80281d4:	d114      	bne.n	8028200 <__gethex+0x2ac>
 80281d6:	2b01      	cmp	r3, #1
 80281d8:	d10b      	bne.n	80281f2 <__gethex+0x29e>
 80281da:	9b01      	ldr	r3, [sp, #4]
 80281dc:	9a07      	ldr	r2, [sp, #28]
 80281de:	685b      	ldr	r3, [r3, #4]
 80281e0:	2662      	movs	r6, #98	; 0x62
 80281e2:	6013      	str	r3, [r2, #0]
 80281e4:	2301      	movs	r3, #1
 80281e6:	9a02      	ldr	r2, [sp, #8]
 80281e8:	612b      	str	r3, [r5, #16]
 80281ea:	6013      	str	r3, [r2, #0]
 80281ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80281ee:	601d      	str	r5, [r3, #0]
 80281f0:	e739      	b.n	8028066 <__gethex+0x112>
 80281f2:	9900      	ldr	r1, [sp, #0]
 80281f4:	0028      	movs	r0, r5
 80281f6:	3901      	subs	r1, #1
 80281f8:	f000 fe48 	bl	8028e8c <__any_on>
 80281fc:	2800      	cmp	r0, #0
 80281fe:	d1ec      	bne.n	80281da <__gethex+0x286>
 8028200:	0029      	movs	r1, r5
 8028202:	9803      	ldr	r0, [sp, #12]
 8028204:	f000 f9ee 	bl	80285e4 <_Bfree>
 8028208:	2300      	movs	r3, #0
 802820a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802820c:	2650      	movs	r6, #80	; 0x50
 802820e:	6013      	str	r3, [r2, #0]
 8028210:	e729      	b.n	8028066 <__gethex+0x112>
 8028212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028214:	2b00      	cmp	r3, #0
 8028216:	d1f3      	bne.n	8028200 <__gethex+0x2ac>
 8028218:	e7df      	b.n	80281da <__gethex+0x286>
 802821a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802821c:	2b00      	cmp	r3, #0
 802821e:	d1dc      	bne.n	80281da <__gethex+0x286>
 8028220:	e7ee      	b.n	8028200 <__gethex+0x2ac>
 8028222:	46c0      	nop			; (mov r8, r8)
 8028224:	0802b97f 	.word	0x0802b97f
 8028228:	0802ba95 	.word	0x0802ba95
 802822c:	0802baa6 	.word	0x0802baa6
 8028230:	1e77      	subs	r7, r6, #1
 8028232:	2c00      	cmp	r4, #0
 8028234:	d12f      	bne.n	8028296 <__gethex+0x342>
 8028236:	2f00      	cmp	r7, #0
 8028238:	d004      	beq.n	8028244 <__gethex+0x2f0>
 802823a:	0039      	movs	r1, r7
 802823c:	0028      	movs	r0, r5
 802823e:	f000 fe25 	bl	8028e8c <__any_on>
 8028242:	0004      	movs	r4, r0
 8028244:	231f      	movs	r3, #31
 8028246:	117a      	asrs	r2, r7, #5
 8028248:	401f      	ands	r7, r3
 802824a:	3b1e      	subs	r3, #30
 802824c:	40bb      	lsls	r3, r7
 802824e:	9902      	ldr	r1, [sp, #8]
 8028250:	0092      	lsls	r2, r2, #2
 8028252:	5852      	ldr	r2, [r2, r1]
 8028254:	421a      	tst	r2, r3
 8028256:	d001      	beq.n	802825c <__gethex+0x308>
 8028258:	2302      	movs	r3, #2
 802825a:	431c      	orrs	r4, r3
 802825c:	9b00      	ldr	r3, [sp, #0]
 802825e:	0031      	movs	r1, r6
 8028260:	1b9b      	subs	r3, r3, r6
 8028262:	2602      	movs	r6, #2
 8028264:	0028      	movs	r0, r5
 8028266:	9300      	str	r3, [sp, #0]
 8028268:	f7ff fe0a 	bl	8027e80 <rshift>
 802826c:	9b01      	ldr	r3, [sp, #4]
 802826e:	685f      	ldr	r7, [r3, #4]
 8028270:	2c00      	cmp	r4, #0
 8028272:	d041      	beq.n	80282f8 <__gethex+0x3a4>
 8028274:	9b01      	ldr	r3, [sp, #4]
 8028276:	68db      	ldr	r3, [r3, #12]
 8028278:	2b02      	cmp	r3, #2
 802827a:	d010      	beq.n	802829e <__gethex+0x34a>
 802827c:	2b03      	cmp	r3, #3
 802827e:	d012      	beq.n	80282a6 <__gethex+0x352>
 8028280:	2b01      	cmp	r3, #1
 8028282:	d106      	bne.n	8028292 <__gethex+0x33e>
 8028284:	07a2      	lsls	r2, r4, #30
 8028286:	d504      	bpl.n	8028292 <__gethex+0x33e>
 8028288:	9a02      	ldr	r2, [sp, #8]
 802828a:	6812      	ldr	r2, [r2, #0]
 802828c:	4314      	orrs	r4, r2
 802828e:	421c      	tst	r4, r3
 8028290:	d10c      	bne.n	80282ac <__gethex+0x358>
 8028292:	2310      	movs	r3, #16
 8028294:	e02f      	b.n	80282f6 <__gethex+0x3a2>
 8028296:	2401      	movs	r4, #1
 8028298:	e7d4      	b.n	8028244 <__gethex+0x2f0>
 802829a:	2601      	movs	r6, #1
 802829c:	e7e8      	b.n	8028270 <__gethex+0x31c>
 802829e:	2301      	movs	r3, #1
 80282a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80282a2:	1a9b      	subs	r3, r3, r2
 80282a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80282a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80282a8:	2b00      	cmp	r3, #0
 80282aa:	d0f2      	beq.n	8028292 <__gethex+0x33e>
 80282ac:	692b      	ldr	r3, [r5, #16]
 80282ae:	2000      	movs	r0, #0
 80282b0:	9302      	str	r3, [sp, #8]
 80282b2:	009b      	lsls	r3, r3, #2
 80282b4:	9304      	str	r3, [sp, #16]
 80282b6:	002b      	movs	r3, r5
 80282b8:	9a04      	ldr	r2, [sp, #16]
 80282ba:	3314      	adds	r3, #20
 80282bc:	1899      	adds	r1, r3, r2
 80282be:	681a      	ldr	r2, [r3, #0]
 80282c0:	1c54      	adds	r4, r2, #1
 80282c2:	d01e      	beq.n	8028302 <__gethex+0x3ae>
 80282c4:	3201      	adds	r2, #1
 80282c6:	601a      	str	r2, [r3, #0]
 80282c8:	002b      	movs	r3, r5
 80282ca:	3314      	adds	r3, #20
 80282cc:	2e02      	cmp	r6, #2
 80282ce:	d141      	bne.n	8028354 <__gethex+0x400>
 80282d0:	9a01      	ldr	r2, [sp, #4]
 80282d2:	9900      	ldr	r1, [sp, #0]
 80282d4:	6812      	ldr	r2, [r2, #0]
 80282d6:	3a01      	subs	r2, #1
 80282d8:	428a      	cmp	r2, r1
 80282da:	d10b      	bne.n	80282f4 <__gethex+0x3a0>
 80282dc:	221f      	movs	r2, #31
 80282de:	9800      	ldr	r0, [sp, #0]
 80282e0:	1149      	asrs	r1, r1, #5
 80282e2:	4002      	ands	r2, r0
 80282e4:	2001      	movs	r0, #1
 80282e6:	0004      	movs	r4, r0
 80282e8:	4094      	lsls	r4, r2
 80282ea:	0089      	lsls	r1, r1, #2
 80282ec:	58cb      	ldr	r3, [r1, r3]
 80282ee:	4223      	tst	r3, r4
 80282f0:	d000      	beq.n	80282f4 <__gethex+0x3a0>
 80282f2:	2601      	movs	r6, #1
 80282f4:	2320      	movs	r3, #32
 80282f6:	431e      	orrs	r6, r3
 80282f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80282fa:	601d      	str	r5, [r3, #0]
 80282fc:	9b07      	ldr	r3, [sp, #28]
 80282fe:	601f      	str	r7, [r3, #0]
 8028300:	e6b1      	b.n	8028066 <__gethex+0x112>
 8028302:	c301      	stmia	r3!, {r0}
 8028304:	4299      	cmp	r1, r3
 8028306:	d8da      	bhi.n	80282be <__gethex+0x36a>
 8028308:	68ab      	ldr	r3, [r5, #8]
 802830a:	9a02      	ldr	r2, [sp, #8]
 802830c:	429a      	cmp	r2, r3
 802830e:	db18      	blt.n	8028342 <__gethex+0x3ee>
 8028310:	6869      	ldr	r1, [r5, #4]
 8028312:	9803      	ldr	r0, [sp, #12]
 8028314:	3101      	adds	r1, #1
 8028316:	f000 f921 	bl	802855c <_Balloc>
 802831a:	1e04      	subs	r4, r0, #0
 802831c:	d104      	bne.n	8028328 <__gethex+0x3d4>
 802831e:	0022      	movs	r2, r4
 8028320:	2184      	movs	r1, #132	; 0x84
 8028322:	4b1c      	ldr	r3, [pc, #112]	; (8028394 <__gethex+0x440>)
 8028324:	481c      	ldr	r0, [pc, #112]	; (8028398 <__gethex+0x444>)
 8028326:	e6c2      	b.n	80280ae <__gethex+0x15a>
 8028328:	0029      	movs	r1, r5
 802832a:	692a      	ldr	r2, [r5, #16]
 802832c:	310c      	adds	r1, #12
 802832e:	3202      	adds	r2, #2
 8028330:	0092      	lsls	r2, r2, #2
 8028332:	300c      	adds	r0, #12
 8028334:	f7ff fd2d 	bl	8027d92 <memcpy>
 8028338:	0029      	movs	r1, r5
 802833a:	9803      	ldr	r0, [sp, #12]
 802833c:	f000 f952 	bl	80285e4 <_Bfree>
 8028340:	0025      	movs	r5, r4
 8028342:	692b      	ldr	r3, [r5, #16]
 8028344:	1c5a      	adds	r2, r3, #1
 8028346:	612a      	str	r2, [r5, #16]
 8028348:	2201      	movs	r2, #1
 802834a:	3304      	adds	r3, #4
 802834c:	009b      	lsls	r3, r3, #2
 802834e:	18eb      	adds	r3, r5, r3
 8028350:	605a      	str	r2, [r3, #4]
 8028352:	e7b9      	b.n	80282c8 <__gethex+0x374>
 8028354:	692a      	ldr	r2, [r5, #16]
 8028356:	9902      	ldr	r1, [sp, #8]
 8028358:	428a      	cmp	r2, r1
 802835a:	dd09      	ble.n	8028370 <__gethex+0x41c>
 802835c:	2101      	movs	r1, #1
 802835e:	0028      	movs	r0, r5
 8028360:	f7ff fd8e 	bl	8027e80 <rshift>
 8028364:	9b01      	ldr	r3, [sp, #4]
 8028366:	3701      	adds	r7, #1
 8028368:	689b      	ldr	r3, [r3, #8]
 802836a:	42bb      	cmp	r3, r7
 802836c:	dac1      	bge.n	80282f2 <__gethex+0x39e>
 802836e:	e6e4      	b.n	802813a <__gethex+0x1e6>
 8028370:	221f      	movs	r2, #31
 8028372:	9c00      	ldr	r4, [sp, #0]
 8028374:	9900      	ldr	r1, [sp, #0]
 8028376:	2601      	movs	r6, #1
 8028378:	4014      	ands	r4, r2
 802837a:	4211      	tst	r1, r2
 802837c:	d0ba      	beq.n	80282f4 <__gethex+0x3a0>
 802837e:	9a04      	ldr	r2, [sp, #16]
 8028380:	189b      	adds	r3, r3, r2
 8028382:	3b04      	subs	r3, #4
 8028384:	6818      	ldr	r0, [r3, #0]
 8028386:	f000 f9e1 	bl	802874c <__hi0bits>
 802838a:	2320      	movs	r3, #32
 802838c:	1b1b      	subs	r3, r3, r4
 802838e:	4298      	cmp	r0, r3
 8028390:	dbe4      	blt.n	802835c <__gethex+0x408>
 8028392:	e7af      	b.n	80282f4 <__gethex+0x3a0>
 8028394:	0802ba95 	.word	0x0802ba95
 8028398:	0802baa6 	.word	0x0802baa6

0802839c <L_shift>:
 802839c:	2308      	movs	r3, #8
 802839e:	b570      	push	{r4, r5, r6, lr}
 80283a0:	2520      	movs	r5, #32
 80283a2:	1a9a      	subs	r2, r3, r2
 80283a4:	0092      	lsls	r2, r2, #2
 80283a6:	1aad      	subs	r5, r5, r2
 80283a8:	6843      	ldr	r3, [r0, #4]
 80283aa:	6804      	ldr	r4, [r0, #0]
 80283ac:	001e      	movs	r6, r3
 80283ae:	40ae      	lsls	r6, r5
 80283b0:	40d3      	lsrs	r3, r2
 80283b2:	4334      	orrs	r4, r6
 80283b4:	6004      	str	r4, [r0, #0]
 80283b6:	6043      	str	r3, [r0, #4]
 80283b8:	3004      	adds	r0, #4
 80283ba:	4288      	cmp	r0, r1
 80283bc:	d3f4      	bcc.n	80283a8 <L_shift+0xc>
 80283be:	bd70      	pop	{r4, r5, r6, pc}

080283c0 <__match>:
 80283c0:	b530      	push	{r4, r5, lr}
 80283c2:	6803      	ldr	r3, [r0, #0]
 80283c4:	780c      	ldrb	r4, [r1, #0]
 80283c6:	3301      	adds	r3, #1
 80283c8:	2c00      	cmp	r4, #0
 80283ca:	d102      	bne.n	80283d2 <__match+0x12>
 80283cc:	6003      	str	r3, [r0, #0]
 80283ce:	2001      	movs	r0, #1
 80283d0:	bd30      	pop	{r4, r5, pc}
 80283d2:	781a      	ldrb	r2, [r3, #0]
 80283d4:	0015      	movs	r5, r2
 80283d6:	3d41      	subs	r5, #65	; 0x41
 80283d8:	2d19      	cmp	r5, #25
 80283da:	d800      	bhi.n	80283de <__match+0x1e>
 80283dc:	3220      	adds	r2, #32
 80283de:	3101      	adds	r1, #1
 80283e0:	42a2      	cmp	r2, r4
 80283e2:	d0ef      	beq.n	80283c4 <__match+0x4>
 80283e4:	2000      	movs	r0, #0
 80283e6:	e7f3      	b.n	80283d0 <__match+0x10>

080283e8 <__hexnan>:
 80283e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80283ea:	680b      	ldr	r3, [r1, #0]
 80283ec:	b08b      	sub	sp, #44	; 0x2c
 80283ee:	9201      	str	r2, [sp, #4]
 80283f0:	9901      	ldr	r1, [sp, #4]
 80283f2:	115a      	asrs	r2, r3, #5
 80283f4:	0092      	lsls	r2, r2, #2
 80283f6:	188a      	adds	r2, r1, r2
 80283f8:	9202      	str	r2, [sp, #8]
 80283fa:	0019      	movs	r1, r3
 80283fc:	221f      	movs	r2, #31
 80283fe:	4011      	ands	r1, r2
 8028400:	9008      	str	r0, [sp, #32]
 8028402:	9106      	str	r1, [sp, #24]
 8028404:	4213      	tst	r3, r2
 8028406:	d002      	beq.n	802840e <__hexnan+0x26>
 8028408:	9b02      	ldr	r3, [sp, #8]
 802840a:	3304      	adds	r3, #4
 802840c:	9302      	str	r3, [sp, #8]
 802840e:	9b02      	ldr	r3, [sp, #8]
 8028410:	2500      	movs	r5, #0
 8028412:	1f1f      	subs	r7, r3, #4
 8028414:	003e      	movs	r6, r7
 8028416:	003c      	movs	r4, r7
 8028418:	9b08      	ldr	r3, [sp, #32]
 802841a:	603d      	str	r5, [r7, #0]
 802841c:	681b      	ldr	r3, [r3, #0]
 802841e:	9507      	str	r5, [sp, #28]
 8028420:	9305      	str	r3, [sp, #20]
 8028422:	9503      	str	r5, [sp, #12]
 8028424:	9b05      	ldr	r3, [sp, #20]
 8028426:	3301      	adds	r3, #1
 8028428:	9309      	str	r3, [sp, #36]	; 0x24
 802842a:	9b05      	ldr	r3, [sp, #20]
 802842c:	785b      	ldrb	r3, [r3, #1]
 802842e:	9304      	str	r3, [sp, #16]
 8028430:	2b00      	cmp	r3, #0
 8028432:	d028      	beq.n	8028486 <__hexnan+0x9e>
 8028434:	9804      	ldr	r0, [sp, #16]
 8028436:	f7ff fd78 	bl	8027f2a <__hexdig_fun>
 802843a:	2800      	cmp	r0, #0
 802843c:	d154      	bne.n	80284e8 <__hexnan+0x100>
 802843e:	9b04      	ldr	r3, [sp, #16]
 8028440:	2b20      	cmp	r3, #32
 8028442:	d819      	bhi.n	8028478 <__hexnan+0x90>
 8028444:	9b03      	ldr	r3, [sp, #12]
 8028446:	9a07      	ldr	r2, [sp, #28]
 8028448:	4293      	cmp	r3, r2
 802844a:	dd12      	ble.n	8028472 <__hexnan+0x8a>
 802844c:	42b4      	cmp	r4, r6
 802844e:	d206      	bcs.n	802845e <__hexnan+0x76>
 8028450:	2d07      	cmp	r5, #7
 8028452:	dc04      	bgt.n	802845e <__hexnan+0x76>
 8028454:	002a      	movs	r2, r5
 8028456:	0031      	movs	r1, r6
 8028458:	0020      	movs	r0, r4
 802845a:	f7ff ff9f 	bl	802839c <L_shift>
 802845e:	9b01      	ldr	r3, [sp, #4]
 8028460:	2508      	movs	r5, #8
 8028462:	429c      	cmp	r4, r3
 8028464:	d905      	bls.n	8028472 <__hexnan+0x8a>
 8028466:	1f26      	subs	r6, r4, #4
 8028468:	2500      	movs	r5, #0
 802846a:	0034      	movs	r4, r6
 802846c:	9b03      	ldr	r3, [sp, #12]
 802846e:	6035      	str	r5, [r6, #0]
 8028470:	9307      	str	r3, [sp, #28]
 8028472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028474:	9305      	str	r3, [sp, #20]
 8028476:	e7d5      	b.n	8028424 <__hexnan+0x3c>
 8028478:	9b04      	ldr	r3, [sp, #16]
 802847a:	2b29      	cmp	r3, #41	; 0x29
 802847c:	d159      	bne.n	8028532 <__hexnan+0x14a>
 802847e:	9b05      	ldr	r3, [sp, #20]
 8028480:	9a08      	ldr	r2, [sp, #32]
 8028482:	3302      	adds	r3, #2
 8028484:	6013      	str	r3, [r2, #0]
 8028486:	9b03      	ldr	r3, [sp, #12]
 8028488:	2b00      	cmp	r3, #0
 802848a:	d052      	beq.n	8028532 <__hexnan+0x14a>
 802848c:	42b4      	cmp	r4, r6
 802848e:	d206      	bcs.n	802849e <__hexnan+0xb6>
 8028490:	2d07      	cmp	r5, #7
 8028492:	dc04      	bgt.n	802849e <__hexnan+0xb6>
 8028494:	002a      	movs	r2, r5
 8028496:	0031      	movs	r1, r6
 8028498:	0020      	movs	r0, r4
 802849a:	f7ff ff7f 	bl	802839c <L_shift>
 802849e:	9b01      	ldr	r3, [sp, #4]
 80284a0:	429c      	cmp	r4, r3
 80284a2:	d935      	bls.n	8028510 <__hexnan+0x128>
 80284a4:	001a      	movs	r2, r3
 80284a6:	0023      	movs	r3, r4
 80284a8:	cb02      	ldmia	r3!, {r1}
 80284aa:	c202      	stmia	r2!, {r1}
 80284ac:	429f      	cmp	r7, r3
 80284ae:	d2fb      	bcs.n	80284a8 <__hexnan+0xc0>
 80284b0:	9b02      	ldr	r3, [sp, #8]
 80284b2:	1c62      	adds	r2, r4, #1
 80284b4:	1ed9      	subs	r1, r3, #3
 80284b6:	2304      	movs	r3, #4
 80284b8:	4291      	cmp	r1, r2
 80284ba:	d305      	bcc.n	80284c8 <__hexnan+0xe0>
 80284bc:	9b02      	ldr	r3, [sp, #8]
 80284be:	3b04      	subs	r3, #4
 80284c0:	1b1b      	subs	r3, r3, r4
 80284c2:	089b      	lsrs	r3, r3, #2
 80284c4:	3301      	adds	r3, #1
 80284c6:	009b      	lsls	r3, r3, #2
 80284c8:	9a01      	ldr	r2, [sp, #4]
 80284ca:	18d3      	adds	r3, r2, r3
 80284cc:	2200      	movs	r2, #0
 80284ce:	c304      	stmia	r3!, {r2}
 80284d0:	429f      	cmp	r7, r3
 80284d2:	d2fc      	bcs.n	80284ce <__hexnan+0xe6>
 80284d4:	683b      	ldr	r3, [r7, #0]
 80284d6:	2b00      	cmp	r3, #0
 80284d8:	d104      	bne.n	80284e4 <__hexnan+0xfc>
 80284da:	9b01      	ldr	r3, [sp, #4]
 80284dc:	429f      	cmp	r7, r3
 80284de:	d126      	bne.n	802852e <__hexnan+0x146>
 80284e0:	2301      	movs	r3, #1
 80284e2:	603b      	str	r3, [r7, #0]
 80284e4:	2005      	movs	r0, #5
 80284e6:	e025      	b.n	8028534 <__hexnan+0x14c>
 80284e8:	9b03      	ldr	r3, [sp, #12]
 80284ea:	3501      	adds	r5, #1
 80284ec:	3301      	adds	r3, #1
 80284ee:	9303      	str	r3, [sp, #12]
 80284f0:	2d08      	cmp	r5, #8
 80284f2:	dd06      	ble.n	8028502 <__hexnan+0x11a>
 80284f4:	9b01      	ldr	r3, [sp, #4]
 80284f6:	429c      	cmp	r4, r3
 80284f8:	d9bb      	bls.n	8028472 <__hexnan+0x8a>
 80284fa:	2300      	movs	r3, #0
 80284fc:	2501      	movs	r5, #1
 80284fe:	3c04      	subs	r4, #4
 8028500:	6023      	str	r3, [r4, #0]
 8028502:	220f      	movs	r2, #15
 8028504:	6823      	ldr	r3, [r4, #0]
 8028506:	4010      	ands	r0, r2
 8028508:	011b      	lsls	r3, r3, #4
 802850a:	4303      	orrs	r3, r0
 802850c:	6023      	str	r3, [r4, #0]
 802850e:	e7b0      	b.n	8028472 <__hexnan+0x8a>
 8028510:	9b06      	ldr	r3, [sp, #24]
 8028512:	2b00      	cmp	r3, #0
 8028514:	d0de      	beq.n	80284d4 <__hexnan+0xec>
 8028516:	2320      	movs	r3, #32
 8028518:	9a06      	ldr	r2, [sp, #24]
 802851a:	9902      	ldr	r1, [sp, #8]
 802851c:	1a9b      	subs	r3, r3, r2
 802851e:	2201      	movs	r2, #1
 8028520:	4252      	negs	r2, r2
 8028522:	40da      	lsrs	r2, r3
 8028524:	3904      	subs	r1, #4
 8028526:	680b      	ldr	r3, [r1, #0]
 8028528:	4013      	ands	r3, r2
 802852a:	600b      	str	r3, [r1, #0]
 802852c:	e7d2      	b.n	80284d4 <__hexnan+0xec>
 802852e:	3f04      	subs	r7, #4
 8028530:	e7d0      	b.n	80284d4 <__hexnan+0xec>
 8028532:	2004      	movs	r0, #4
 8028534:	b00b      	add	sp, #44	; 0x2c
 8028536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08028538 <__ascii_mbtowc>:
 8028538:	b082      	sub	sp, #8
 802853a:	2900      	cmp	r1, #0
 802853c:	d100      	bne.n	8028540 <__ascii_mbtowc+0x8>
 802853e:	a901      	add	r1, sp, #4
 8028540:	1e10      	subs	r0, r2, #0
 8028542:	d006      	beq.n	8028552 <__ascii_mbtowc+0x1a>
 8028544:	2b00      	cmp	r3, #0
 8028546:	d006      	beq.n	8028556 <__ascii_mbtowc+0x1e>
 8028548:	7813      	ldrb	r3, [r2, #0]
 802854a:	600b      	str	r3, [r1, #0]
 802854c:	7810      	ldrb	r0, [r2, #0]
 802854e:	1e43      	subs	r3, r0, #1
 8028550:	4198      	sbcs	r0, r3
 8028552:	b002      	add	sp, #8
 8028554:	4770      	bx	lr
 8028556:	2002      	movs	r0, #2
 8028558:	4240      	negs	r0, r0
 802855a:	e7fa      	b.n	8028552 <__ascii_mbtowc+0x1a>

0802855c <_Balloc>:
 802855c:	b570      	push	{r4, r5, r6, lr}
 802855e:	69c5      	ldr	r5, [r0, #28]
 8028560:	0006      	movs	r6, r0
 8028562:	000c      	movs	r4, r1
 8028564:	2d00      	cmp	r5, #0
 8028566:	d10e      	bne.n	8028586 <_Balloc+0x2a>
 8028568:	2010      	movs	r0, #16
 802856a:	f7fe fa27 	bl	80269bc <malloc>
 802856e:	1e02      	subs	r2, r0, #0
 8028570:	61f0      	str	r0, [r6, #28]
 8028572:	d104      	bne.n	802857e <_Balloc+0x22>
 8028574:	216b      	movs	r1, #107	; 0x6b
 8028576:	4b19      	ldr	r3, [pc, #100]	; (80285dc <_Balloc+0x80>)
 8028578:	4819      	ldr	r0, [pc, #100]	; (80285e0 <_Balloc+0x84>)
 802857a:	f7ff fc19 	bl	8027db0 <__assert_func>
 802857e:	6045      	str	r5, [r0, #4]
 8028580:	6085      	str	r5, [r0, #8]
 8028582:	6005      	str	r5, [r0, #0]
 8028584:	60c5      	str	r5, [r0, #12]
 8028586:	69f5      	ldr	r5, [r6, #28]
 8028588:	68eb      	ldr	r3, [r5, #12]
 802858a:	2b00      	cmp	r3, #0
 802858c:	d013      	beq.n	80285b6 <_Balloc+0x5a>
 802858e:	69f3      	ldr	r3, [r6, #28]
 8028590:	00a2      	lsls	r2, r4, #2
 8028592:	68db      	ldr	r3, [r3, #12]
 8028594:	189b      	adds	r3, r3, r2
 8028596:	6818      	ldr	r0, [r3, #0]
 8028598:	2800      	cmp	r0, #0
 802859a:	d118      	bne.n	80285ce <_Balloc+0x72>
 802859c:	2101      	movs	r1, #1
 802859e:	000d      	movs	r5, r1
 80285a0:	40a5      	lsls	r5, r4
 80285a2:	1d6a      	adds	r2, r5, #5
 80285a4:	0030      	movs	r0, r6
 80285a6:	0092      	lsls	r2, r2, #2
 80285a8:	f001 f86d 	bl	8029686 <_calloc_r>
 80285ac:	2800      	cmp	r0, #0
 80285ae:	d00c      	beq.n	80285ca <_Balloc+0x6e>
 80285b0:	6044      	str	r4, [r0, #4]
 80285b2:	6085      	str	r5, [r0, #8]
 80285b4:	e00d      	b.n	80285d2 <_Balloc+0x76>
 80285b6:	2221      	movs	r2, #33	; 0x21
 80285b8:	2104      	movs	r1, #4
 80285ba:	0030      	movs	r0, r6
 80285bc:	f001 f863 	bl	8029686 <_calloc_r>
 80285c0:	69f3      	ldr	r3, [r6, #28]
 80285c2:	60e8      	str	r0, [r5, #12]
 80285c4:	68db      	ldr	r3, [r3, #12]
 80285c6:	2b00      	cmp	r3, #0
 80285c8:	d1e1      	bne.n	802858e <_Balloc+0x32>
 80285ca:	2000      	movs	r0, #0
 80285cc:	bd70      	pop	{r4, r5, r6, pc}
 80285ce:	6802      	ldr	r2, [r0, #0]
 80285d0:	601a      	str	r2, [r3, #0]
 80285d2:	2300      	movs	r3, #0
 80285d4:	6103      	str	r3, [r0, #16]
 80285d6:	60c3      	str	r3, [r0, #12]
 80285d8:	e7f8      	b.n	80285cc <_Balloc+0x70>
 80285da:	46c0      	nop			; (mov r8, r8)
 80285dc:	0802b9e0 	.word	0x0802b9e0
 80285e0:	0802bb06 	.word	0x0802bb06

080285e4 <_Bfree>:
 80285e4:	b570      	push	{r4, r5, r6, lr}
 80285e6:	69c6      	ldr	r6, [r0, #28]
 80285e8:	0005      	movs	r5, r0
 80285ea:	000c      	movs	r4, r1
 80285ec:	2e00      	cmp	r6, #0
 80285ee:	d10e      	bne.n	802860e <_Bfree+0x2a>
 80285f0:	2010      	movs	r0, #16
 80285f2:	f7fe f9e3 	bl	80269bc <malloc>
 80285f6:	1e02      	subs	r2, r0, #0
 80285f8:	61e8      	str	r0, [r5, #28]
 80285fa:	d104      	bne.n	8028606 <_Bfree+0x22>
 80285fc:	218f      	movs	r1, #143	; 0x8f
 80285fe:	4b09      	ldr	r3, [pc, #36]	; (8028624 <_Bfree+0x40>)
 8028600:	4809      	ldr	r0, [pc, #36]	; (8028628 <_Bfree+0x44>)
 8028602:	f7ff fbd5 	bl	8027db0 <__assert_func>
 8028606:	6046      	str	r6, [r0, #4]
 8028608:	6086      	str	r6, [r0, #8]
 802860a:	6006      	str	r6, [r0, #0]
 802860c:	60c6      	str	r6, [r0, #12]
 802860e:	2c00      	cmp	r4, #0
 8028610:	d007      	beq.n	8028622 <_Bfree+0x3e>
 8028612:	69eb      	ldr	r3, [r5, #28]
 8028614:	6862      	ldr	r2, [r4, #4]
 8028616:	68db      	ldr	r3, [r3, #12]
 8028618:	0092      	lsls	r2, r2, #2
 802861a:	189b      	adds	r3, r3, r2
 802861c:	681a      	ldr	r2, [r3, #0]
 802861e:	6022      	str	r2, [r4, #0]
 8028620:	601c      	str	r4, [r3, #0]
 8028622:	bd70      	pop	{r4, r5, r6, pc}
 8028624:	0802b9e0 	.word	0x0802b9e0
 8028628:	0802bb06 	.word	0x0802bb06

0802862c <__multadd>:
 802862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802862e:	000e      	movs	r6, r1
 8028630:	9001      	str	r0, [sp, #4]
 8028632:	000c      	movs	r4, r1
 8028634:	001d      	movs	r5, r3
 8028636:	2000      	movs	r0, #0
 8028638:	690f      	ldr	r7, [r1, #16]
 802863a:	3614      	adds	r6, #20
 802863c:	6833      	ldr	r3, [r6, #0]
 802863e:	3001      	adds	r0, #1
 8028640:	b299      	uxth	r1, r3
 8028642:	4351      	muls	r1, r2
 8028644:	0c1b      	lsrs	r3, r3, #16
 8028646:	4353      	muls	r3, r2
 8028648:	1949      	adds	r1, r1, r5
 802864a:	0c0d      	lsrs	r5, r1, #16
 802864c:	195b      	adds	r3, r3, r5
 802864e:	0c1d      	lsrs	r5, r3, #16
 8028650:	b289      	uxth	r1, r1
 8028652:	041b      	lsls	r3, r3, #16
 8028654:	185b      	adds	r3, r3, r1
 8028656:	c608      	stmia	r6!, {r3}
 8028658:	4287      	cmp	r7, r0
 802865a:	dcef      	bgt.n	802863c <__multadd+0x10>
 802865c:	2d00      	cmp	r5, #0
 802865e:	d022      	beq.n	80286a6 <__multadd+0x7a>
 8028660:	68a3      	ldr	r3, [r4, #8]
 8028662:	42bb      	cmp	r3, r7
 8028664:	dc19      	bgt.n	802869a <__multadd+0x6e>
 8028666:	6861      	ldr	r1, [r4, #4]
 8028668:	9801      	ldr	r0, [sp, #4]
 802866a:	3101      	adds	r1, #1
 802866c:	f7ff ff76 	bl	802855c <_Balloc>
 8028670:	1e06      	subs	r6, r0, #0
 8028672:	d105      	bne.n	8028680 <__multadd+0x54>
 8028674:	0032      	movs	r2, r6
 8028676:	21ba      	movs	r1, #186	; 0xba
 8028678:	4b0c      	ldr	r3, [pc, #48]	; (80286ac <__multadd+0x80>)
 802867a:	480d      	ldr	r0, [pc, #52]	; (80286b0 <__multadd+0x84>)
 802867c:	f7ff fb98 	bl	8027db0 <__assert_func>
 8028680:	0021      	movs	r1, r4
 8028682:	6922      	ldr	r2, [r4, #16]
 8028684:	310c      	adds	r1, #12
 8028686:	3202      	adds	r2, #2
 8028688:	0092      	lsls	r2, r2, #2
 802868a:	300c      	adds	r0, #12
 802868c:	f7ff fb81 	bl	8027d92 <memcpy>
 8028690:	0021      	movs	r1, r4
 8028692:	9801      	ldr	r0, [sp, #4]
 8028694:	f7ff ffa6 	bl	80285e4 <_Bfree>
 8028698:	0034      	movs	r4, r6
 802869a:	1d3b      	adds	r3, r7, #4
 802869c:	009b      	lsls	r3, r3, #2
 802869e:	18e3      	adds	r3, r4, r3
 80286a0:	605d      	str	r5, [r3, #4]
 80286a2:	1c7b      	adds	r3, r7, #1
 80286a4:	6123      	str	r3, [r4, #16]
 80286a6:	0020      	movs	r0, r4
 80286a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80286aa:	46c0      	nop			; (mov r8, r8)
 80286ac:	0802ba95 	.word	0x0802ba95
 80286b0:	0802bb06 	.word	0x0802bb06

080286b4 <__s2b>:
 80286b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80286b6:	0006      	movs	r6, r0
 80286b8:	0018      	movs	r0, r3
 80286ba:	000c      	movs	r4, r1
 80286bc:	3008      	adds	r0, #8
 80286be:	2109      	movs	r1, #9
 80286c0:	9301      	str	r3, [sp, #4]
 80286c2:	0015      	movs	r5, r2
 80286c4:	f7dd fe32 	bl	800632c <__divsi3>
 80286c8:	2301      	movs	r3, #1
 80286ca:	2100      	movs	r1, #0
 80286cc:	4283      	cmp	r3, r0
 80286ce:	db0a      	blt.n	80286e6 <__s2b+0x32>
 80286d0:	0030      	movs	r0, r6
 80286d2:	f7ff ff43 	bl	802855c <_Balloc>
 80286d6:	1e01      	subs	r1, r0, #0
 80286d8:	d108      	bne.n	80286ec <__s2b+0x38>
 80286da:	000a      	movs	r2, r1
 80286dc:	4b19      	ldr	r3, [pc, #100]	; (8028744 <__s2b+0x90>)
 80286de:	481a      	ldr	r0, [pc, #104]	; (8028748 <__s2b+0x94>)
 80286e0:	31d3      	adds	r1, #211	; 0xd3
 80286e2:	f7ff fb65 	bl	8027db0 <__assert_func>
 80286e6:	005b      	lsls	r3, r3, #1
 80286e8:	3101      	adds	r1, #1
 80286ea:	e7ef      	b.n	80286cc <__s2b+0x18>
 80286ec:	9b08      	ldr	r3, [sp, #32]
 80286ee:	6143      	str	r3, [r0, #20]
 80286f0:	2301      	movs	r3, #1
 80286f2:	6103      	str	r3, [r0, #16]
 80286f4:	2d09      	cmp	r5, #9
 80286f6:	dd18      	ble.n	802872a <__s2b+0x76>
 80286f8:	0023      	movs	r3, r4
 80286fa:	3309      	adds	r3, #9
 80286fc:	001f      	movs	r7, r3
 80286fe:	9300      	str	r3, [sp, #0]
 8028700:	1964      	adds	r4, r4, r5
 8028702:	783b      	ldrb	r3, [r7, #0]
 8028704:	220a      	movs	r2, #10
 8028706:	0030      	movs	r0, r6
 8028708:	3b30      	subs	r3, #48	; 0x30
 802870a:	f7ff ff8f 	bl	802862c <__multadd>
 802870e:	3701      	adds	r7, #1
 8028710:	0001      	movs	r1, r0
 8028712:	42a7      	cmp	r7, r4
 8028714:	d1f5      	bne.n	8028702 <__s2b+0x4e>
 8028716:	002c      	movs	r4, r5
 8028718:	9b00      	ldr	r3, [sp, #0]
 802871a:	3c08      	subs	r4, #8
 802871c:	191c      	adds	r4, r3, r4
 802871e:	002f      	movs	r7, r5
 8028720:	9b01      	ldr	r3, [sp, #4]
 8028722:	429f      	cmp	r7, r3
 8028724:	db04      	blt.n	8028730 <__s2b+0x7c>
 8028726:	0008      	movs	r0, r1
 8028728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802872a:	2509      	movs	r5, #9
 802872c:	340a      	adds	r4, #10
 802872e:	e7f6      	b.n	802871e <__s2b+0x6a>
 8028730:	1b63      	subs	r3, r4, r5
 8028732:	5ddb      	ldrb	r3, [r3, r7]
 8028734:	220a      	movs	r2, #10
 8028736:	0030      	movs	r0, r6
 8028738:	3b30      	subs	r3, #48	; 0x30
 802873a:	f7ff ff77 	bl	802862c <__multadd>
 802873e:	3701      	adds	r7, #1
 8028740:	0001      	movs	r1, r0
 8028742:	e7ed      	b.n	8028720 <__s2b+0x6c>
 8028744:	0802ba95 	.word	0x0802ba95
 8028748:	0802bb06 	.word	0x0802bb06

0802874c <__hi0bits>:
 802874c:	0003      	movs	r3, r0
 802874e:	0c02      	lsrs	r2, r0, #16
 8028750:	2000      	movs	r0, #0
 8028752:	4282      	cmp	r2, r0
 8028754:	d101      	bne.n	802875a <__hi0bits+0xe>
 8028756:	041b      	lsls	r3, r3, #16
 8028758:	3010      	adds	r0, #16
 802875a:	0e1a      	lsrs	r2, r3, #24
 802875c:	d101      	bne.n	8028762 <__hi0bits+0x16>
 802875e:	3008      	adds	r0, #8
 8028760:	021b      	lsls	r3, r3, #8
 8028762:	0f1a      	lsrs	r2, r3, #28
 8028764:	d101      	bne.n	802876a <__hi0bits+0x1e>
 8028766:	3004      	adds	r0, #4
 8028768:	011b      	lsls	r3, r3, #4
 802876a:	0f9a      	lsrs	r2, r3, #30
 802876c:	d101      	bne.n	8028772 <__hi0bits+0x26>
 802876e:	3002      	adds	r0, #2
 8028770:	009b      	lsls	r3, r3, #2
 8028772:	2b00      	cmp	r3, #0
 8028774:	db03      	blt.n	802877e <__hi0bits+0x32>
 8028776:	3001      	adds	r0, #1
 8028778:	005b      	lsls	r3, r3, #1
 802877a:	d400      	bmi.n	802877e <__hi0bits+0x32>
 802877c:	2020      	movs	r0, #32
 802877e:	4770      	bx	lr

08028780 <__lo0bits>:
 8028780:	6803      	ldr	r3, [r0, #0]
 8028782:	0001      	movs	r1, r0
 8028784:	2207      	movs	r2, #7
 8028786:	0018      	movs	r0, r3
 8028788:	4010      	ands	r0, r2
 802878a:	4213      	tst	r3, r2
 802878c:	d00d      	beq.n	80287aa <__lo0bits+0x2a>
 802878e:	3a06      	subs	r2, #6
 8028790:	2000      	movs	r0, #0
 8028792:	4213      	tst	r3, r2
 8028794:	d105      	bne.n	80287a2 <__lo0bits+0x22>
 8028796:	3002      	adds	r0, #2
 8028798:	4203      	tst	r3, r0
 802879a:	d003      	beq.n	80287a4 <__lo0bits+0x24>
 802879c:	40d3      	lsrs	r3, r2
 802879e:	0010      	movs	r0, r2
 80287a0:	600b      	str	r3, [r1, #0]
 80287a2:	4770      	bx	lr
 80287a4:	089b      	lsrs	r3, r3, #2
 80287a6:	600b      	str	r3, [r1, #0]
 80287a8:	e7fb      	b.n	80287a2 <__lo0bits+0x22>
 80287aa:	b29a      	uxth	r2, r3
 80287ac:	2a00      	cmp	r2, #0
 80287ae:	d101      	bne.n	80287b4 <__lo0bits+0x34>
 80287b0:	2010      	movs	r0, #16
 80287b2:	0c1b      	lsrs	r3, r3, #16
 80287b4:	b2da      	uxtb	r2, r3
 80287b6:	2a00      	cmp	r2, #0
 80287b8:	d101      	bne.n	80287be <__lo0bits+0x3e>
 80287ba:	3008      	adds	r0, #8
 80287bc:	0a1b      	lsrs	r3, r3, #8
 80287be:	071a      	lsls	r2, r3, #28
 80287c0:	d101      	bne.n	80287c6 <__lo0bits+0x46>
 80287c2:	3004      	adds	r0, #4
 80287c4:	091b      	lsrs	r3, r3, #4
 80287c6:	079a      	lsls	r2, r3, #30
 80287c8:	d101      	bne.n	80287ce <__lo0bits+0x4e>
 80287ca:	3002      	adds	r0, #2
 80287cc:	089b      	lsrs	r3, r3, #2
 80287ce:	07da      	lsls	r2, r3, #31
 80287d0:	d4e9      	bmi.n	80287a6 <__lo0bits+0x26>
 80287d2:	3001      	adds	r0, #1
 80287d4:	085b      	lsrs	r3, r3, #1
 80287d6:	d1e6      	bne.n	80287a6 <__lo0bits+0x26>
 80287d8:	2020      	movs	r0, #32
 80287da:	e7e2      	b.n	80287a2 <__lo0bits+0x22>

080287dc <__i2b>:
 80287dc:	b510      	push	{r4, lr}
 80287de:	000c      	movs	r4, r1
 80287e0:	2101      	movs	r1, #1
 80287e2:	f7ff febb 	bl	802855c <_Balloc>
 80287e6:	2800      	cmp	r0, #0
 80287e8:	d107      	bne.n	80287fa <__i2b+0x1e>
 80287ea:	2146      	movs	r1, #70	; 0x46
 80287ec:	4c05      	ldr	r4, [pc, #20]	; (8028804 <__i2b+0x28>)
 80287ee:	0002      	movs	r2, r0
 80287f0:	4b05      	ldr	r3, [pc, #20]	; (8028808 <__i2b+0x2c>)
 80287f2:	0020      	movs	r0, r4
 80287f4:	31ff      	adds	r1, #255	; 0xff
 80287f6:	f7ff fadb 	bl	8027db0 <__assert_func>
 80287fa:	2301      	movs	r3, #1
 80287fc:	6144      	str	r4, [r0, #20]
 80287fe:	6103      	str	r3, [r0, #16]
 8028800:	bd10      	pop	{r4, pc}
 8028802:	46c0      	nop			; (mov r8, r8)
 8028804:	0802bb06 	.word	0x0802bb06
 8028808:	0802ba95 	.word	0x0802ba95

0802880c <__multiply>:
 802880c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802880e:	0015      	movs	r5, r2
 8028810:	690a      	ldr	r2, [r1, #16]
 8028812:	692b      	ldr	r3, [r5, #16]
 8028814:	000c      	movs	r4, r1
 8028816:	b08b      	sub	sp, #44	; 0x2c
 8028818:	429a      	cmp	r2, r3
 802881a:	da01      	bge.n	8028820 <__multiply+0x14>
 802881c:	002c      	movs	r4, r5
 802881e:	000d      	movs	r5, r1
 8028820:	6927      	ldr	r7, [r4, #16]
 8028822:	692e      	ldr	r6, [r5, #16]
 8028824:	6861      	ldr	r1, [r4, #4]
 8028826:	19bb      	adds	r3, r7, r6
 8028828:	9303      	str	r3, [sp, #12]
 802882a:	68a3      	ldr	r3, [r4, #8]
 802882c:	19ba      	adds	r2, r7, r6
 802882e:	4293      	cmp	r3, r2
 8028830:	da00      	bge.n	8028834 <__multiply+0x28>
 8028832:	3101      	adds	r1, #1
 8028834:	f7ff fe92 	bl	802855c <_Balloc>
 8028838:	9002      	str	r0, [sp, #8]
 802883a:	2800      	cmp	r0, #0
 802883c:	d106      	bne.n	802884c <__multiply+0x40>
 802883e:	21b1      	movs	r1, #177	; 0xb1
 8028840:	4b48      	ldr	r3, [pc, #288]	; (8028964 <__multiply+0x158>)
 8028842:	4849      	ldr	r0, [pc, #292]	; (8028968 <__multiply+0x15c>)
 8028844:	9a02      	ldr	r2, [sp, #8]
 8028846:	0049      	lsls	r1, r1, #1
 8028848:	f7ff fab2 	bl	8027db0 <__assert_func>
 802884c:	9b02      	ldr	r3, [sp, #8]
 802884e:	2200      	movs	r2, #0
 8028850:	3314      	adds	r3, #20
 8028852:	469c      	mov	ip, r3
 8028854:	19bb      	adds	r3, r7, r6
 8028856:	009b      	lsls	r3, r3, #2
 8028858:	4463      	add	r3, ip
 802885a:	9304      	str	r3, [sp, #16]
 802885c:	4663      	mov	r3, ip
 802885e:	9904      	ldr	r1, [sp, #16]
 8028860:	428b      	cmp	r3, r1
 8028862:	d32a      	bcc.n	80288ba <__multiply+0xae>
 8028864:	0023      	movs	r3, r4
 8028866:	00bf      	lsls	r7, r7, #2
 8028868:	3314      	adds	r3, #20
 802886a:	3514      	adds	r5, #20
 802886c:	9308      	str	r3, [sp, #32]
 802886e:	00b6      	lsls	r6, r6, #2
 8028870:	19db      	adds	r3, r3, r7
 8028872:	9305      	str	r3, [sp, #20]
 8028874:	19ab      	adds	r3, r5, r6
 8028876:	9309      	str	r3, [sp, #36]	; 0x24
 8028878:	2304      	movs	r3, #4
 802887a:	9306      	str	r3, [sp, #24]
 802887c:	0023      	movs	r3, r4
 802887e:	9a05      	ldr	r2, [sp, #20]
 8028880:	3315      	adds	r3, #21
 8028882:	9501      	str	r5, [sp, #4]
 8028884:	429a      	cmp	r2, r3
 8028886:	d305      	bcc.n	8028894 <__multiply+0x88>
 8028888:	1b13      	subs	r3, r2, r4
 802888a:	3b15      	subs	r3, #21
 802888c:	089b      	lsrs	r3, r3, #2
 802888e:	3301      	adds	r3, #1
 8028890:	009b      	lsls	r3, r3, #2
 8028892:	9306      	str	r3, [sp, #24]
 8028894:	9b01      	ldr	r3, [sp, #4]
 8028896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028898:	4293      	cmp	r3, r2
 802889a:	d310      	bcc.n	80288be <__multiply+0xb2>
 802889c:	9b03      	ldr	r3, [sp, #12]
 802889e:	2b00      	cmp	r3, #0
 80288a0:	dd05      	ble.n	80288ae <__multiply+0xa2>
 80288a2:	9b04      	ldr	r3, [sp, #16]
 80288a4:	3b04      	subs	r3, #4
 80288a6:	9304      	str	r3, [sp, #16]
 80288a8:	681b      	ldr	r3, [r3, #0]
 80288aa:	2b00      	cmp	r3, #0
 80288ac:	d056      	beq.n	802895c <__multiply+0x150>
 80288ae:	9b02      	ldr	r3, [sp, #8]
 80288b0:	9a03      	ldr	r2, [sp, #12]
 80288b2:	0018      	movs	r0, r3
 80288b4:	611a      	str	r2, [r3, #16]
 80288b6:	b00b      	add	sp, #44	; 0x2c
 80288b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288ba:	c304      	stmia	r3!, {r2}
 80288bc:	e7cf      	b.n	802885e <__multiply+0x52>
 80288be:	9b01      	ldr	r3, [sp, #4]
 80288c0:	6818      	ldr	r0, [r3, #0]
 80288c2:	b280      	uxth	r0, r0
 80288c4:	2800      	cmp	r0, #0
 80288c6:	d01e      	beq.n	8028906 <__multiply+0xfa>
 80288c8:	4667      	mov	r7, ip
 80288ca:	2500      	movs	r5, #0
 80288cc:	9e08      	ldr	r6, [sp, #32]
 80288ce:	ce02      	ldmia	r6!, {r1}
 80288d0:	683b      	ldr	r3, [r7, #0]
 80288d2:	9307      	str	r3, [sp, #28]
 80288d4:	b28b      	uxth	r3, r1
 80288d6:	4343      	muls	r3, r0
 80288d8:	001a      	movs	r2, r3
 80288da:	466b      	mov	r3, sp
 80288dc:	8b9b      	ldrh	r3, [r3, #28]
 80288de:	18d3      	adds	r3, r2, r3
 80288e0:	195b      	adds	r3, r3, r5
 80288e2:	0c0d      	lsrs	r5, r1, #16
 80288e4:	4345      	muls	r5, r0
 80288e6:	9a07      	ldr	r2, [sp, #28]
 80288e8:	0c11      	lsrs	r1, r2, #16
 80288ea:	1869      	adds	r1, r5, r1
 80288ec:	0c1a      	lsrs	r2, r3, #16
 80288ee:	188a      	adds	r2, r1, r2
 80288f0:	b29b      	uxth	r3, r3
 80288f2:	0c15      	lsrs	r5, r2, #16
 80288f4:	0412      	lsls	r2, r2, #16
 80288f6:	431a      	orrs	r2, r3
 80288f8:	9b05      	ldr	r3, [sp, #20]
 80288fa:	c704      	stmia	r7!, {r2}
 80288fc:	42b3      	cmp	r3, r6
 80288fe:	d8e6      	bhi.n	80288ce <__multiply+0xc2>
 8028900:	4663      	mov	r3, ip
 8028902:	9a06      	ldr	r2, [sp, #24]
 8028904:	509d      	str	r5, [r3, r2]
 8028906:	9b01      	ldr	r3, [sp, #4]
 8028908:	6818      	ldr	r0, [r3, #0]
 802890a:	0c00      	lsrs	r0, r0, #16
 802890c:	d020      	beq.n	8028950 <__multiply+0x144>
 802890e:	4663      	mov	r3, ip
 8028910:	0025      	movs	r5, r4
 8028912:	4661      	mov	r1, ip
 8028914:	2700      	movs	r7, #0
 8028916:	681b      	ldr	r3, [r3, #0]
 8028918:	3514      	adds	r5, #20
 802891a:	682a      	ldr	r2, [r5, #0]
 802891c:	680e      	ldr	r6, [r1, #0]
 802891e:	b292      	uxth	r2, r2
 8028920:	4342      	muls	r2, r0
 8028922:	0c36      	lsrs	r6, r6, #16
 8028924:	1992      	adds	r2, r2, r6
 8028926:	19d2      	adds	r2, r2, r7
 8028928:	0416      	lsls	r6, r2, #16
 802892a:	b29b      	uxth	r3, r3
 802892c:	431e      	orrs	r6, r3
 802892e:	600e      	str	r6, [r1, #0]
 8028930:	cd40      	ldmia	r5!, {r6}
 8028932:	684b      	ldr	r3, [r1, #4]
 8028934:	0c36      	lsrs	r6, r6, #16
 8028936:	4346      	muls	r6, r0
 8028938:	b29b      	uxth	r3, r3
 802893a:	0c12      	lsrs	r2, r2, #16
 802893c:	18f3      	adds	r3, r6, r3
 802893e:	189b      	adds	r3, r3, r2
 8028940:	9a05      	ldr	r2, [sp, #20]
 8028942:	0c1f      	lsrs	r7, r3, #16
 8028944:	3104      	adds	r1, #4
 8028946:	42aa      	cmp	r2, r5
 8028948:	d8e7      	bhi.n	802891a <__multiply+0x10e>
 802894a:	4662      	mov	r2, ip
 802894c:	9906      	ldr	r1, [sp, #24]
 802894e:	5053      	str	r3, [r2, r1]
 8028950:	9b01      	ldr	r3, [sp, #4]
 8028952:	3304      	adds	r3, #4
 8028954:	9301      	str	r3, [sp, #4]
 8028956:	2304      	movs	r3, #4
 8028958:	449c      	add	ip, r3
 802895a:	e79b      	b.n	8028894 <__multiply+0x88>
 802895c:	9b03      	ldr	r3, [sp, #12]
 802895e:	3b01      	subs	r3, #1
 8028960:	9303      	str	r3, [sp, #12]
 8028962:	e79b      	b.n	802889c <__multiply+0x90>
 8028964:	0802ba95 	.word	0x0802ba95
 8028968:	0802bb06 	.word	0x0802bb06

0802896c <__pow5mult>:
 802896c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802896e:	2303      	movs	r3, #3
 8028970:	0015      	movs	r5, r2
 8028972:	0007      	movs	r7, r0
 8028974:	000e      	movs	r6, r1
 8028976:	401a      	ands	r2, r3
 8028978:	421d      	tst	r5, r3
 802897a:	d008      	beq.n	802898e <__pow5mult+0x22>
 802897c:	4925      	ldr	r1, [pc, #148]	; (8028a14 <__pow5mult+0xa8>)
 802897e:	3a01      	subs	r2, #1
 8028980:	0092      	lsls	r2, r2, #2
 8028982:	5852      	ldr	r2, [r2, r1]
 8028984:	2300      	movs	r3, #0
 8028986:	0031      	movs	r1, r6
 8028988:	f7ff fe50 	bl	802862c <__multadd>
 802898c:	0006      	movs	r6, r0
 802898e:	10ad      	asrs	r5, r5, #2
 8028990:	d03d      	beq.n	8028a0e <__pow5mult+0xa2>
 8028992:	69fc      	ldr	r4, [r7, #28]
 8028994:	2c00      	cmp	r4, #0
 8028996:	d10f      	bne.n	80289b8 <__pow5mult+0x4c>
 8028998:	2010      	movs	r0, #16
 802899a:	f7fe f80f 	bl	80269bc <malloc>
 802899e:	1e02      	subs	r2, r0, #0
 80289a0:	61f8      	str	r0, [r7, #28]
 80289a2:	d105      	bne.n	80289b0 <__pow5mult+0x44>
 80289a4:	21b4      	movs	r1, #180	; 0xb4
 80289a6:	4b1c      	ldr	r3, [pc, #112]	; (8028a18 <__pow5mult+0xac>)
 80289a8:	481c      	ldr	r0, [pc, #112]	; (8028a1c <__pow5mult+0xb0>)
 80289aa:	31ff      	adds	r1, #255	; 0xff
 80289ac:	f7ff fa00 	bl	8027db0 <__assert_func>
 80289b0:	6044      	str	r4, [r0, #4]
 80289b2:	6084      	str	r4, [r0, #8]
 80289b4:	6004      	str	r4, [r0, #0]
 80289b6:	60c4      	str	r4, [r0, #12]
 80289b8:	69fb      	ldr	r3, [r7, #28]
 80289ba:	689c      	ldr	r4, [r3, #8]
 80289bc:	9301      	str	r3, [sp, #4]
 80289be:	2c00      	cmp	r4, #0
 80289c0:	d108      	bne.n	80289d4 <__pow5mult+0x68>
 80289c2:	0038      	movs	r0, r7
 80289c4:	4916      	ldr	r1, [pc, #88]	; (8028a20 <__pow5mult+0xb4>)
 80289c6:	f7ff ff09 	bl	80287dc <__i2b>
 80289ca:	9b01      	ldr	r3, [sp, #4]
 80289cc:	0004      	movs	r4, r0
 80289ce:	6098      	str	r0, [r3, #8]
 80289d0:	2300      	movs	r3, #0
 80289d2:	6003      	str	r3, [r0, #0]
 80289d4:	2301      	movs	r3, #1
 80289d6:	421d      	tst	r5, r3
 80289d8:	d00a      	beq.n	80289f0 <__pow5mult+0x84>
 80289da:	0031      	movs	r1, r6
 80289dc:	0022      	movs	r2, r4
 80289de:	0038      	movs	r0, r7
 80289e0:	f7ff ff14 	bl	802880c <__multiply>
 80289e4:	0031      	movs	r1, r6
 80289e6:	9001      	str	r0, [sp, #4]
 80289e8:	0038      	movs	r0, r7
 80289ea:	f7ff fdfb 	bl	80285e4 <_Bfree>
 80289ee:	9e01      	ldr	r6, [sp, #4]
 80289f0:	106d      	asrs	r5, r5, #1
 80289f2:	d00c      	beq.n	8028a0e <__pow5mult+0xa2>
 80289f4:	6820      	ldr	r0, [r4, #0]
 80289f6:	2800      	cmp	r0, #0
 80289f8:	d107      	bne.n	8028a0a <__pow5mult+0x9e>
 80289fa:	0022      	movs	r2, r4
 80289fc:	0021      	movs	r1, r4
 80289fe:	0038      	movs	r0, r7
 8028a00:	f7ff ff04 	bl	802880c <__multiply>
 8028a04:	2300      	movs	r3, #0
 8028a06:	6020      	str	r0, [r4, #0]
 8028a08:	6003      	str	r3, [r0, #0]
 8028a0a:	0004      	movs	r4, r0
 8028a0c:	e7e2      	b.n	80289d4 <__pow5mult+0x68>
 8028a0e:	0030      	movs	r0, r6
 8028a10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028a12:	46c0      	nop			; (mov r8, r8)
 8028a14:	0802bc50 	.word	0x0802bc50
 8028a18:	0802b9e0 	.word	0x0802b9e0
 8028a1c:	0802bb06 	.word	0x0802bb06
 8028a20:	00000271 	.word	0x00000271

08028a24 <__lshift>:
 8028a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028a26:	000c      	movs	r4, r1
 8028a28:	0017      	movs	r7, r2
 8028a2a:	6923      	ldr	r3, [r4, #16]
 8028a2c:	1155      	asrs	r5, r2, #5
 8028a2e:	b087      	sub	sp, #28
 8028a30:	18eb      	adds	r3, r5, r3
 8028a32:	9302      	str	r3, [sp, #8]
 8028a34:	3301      	adds	r3, #1
 8028a36:	9301      	str	r3, [sp, #4]
 8028a38:	6849      	ldr	r1, [r1, #4]
 8028a3a:	68a3      	ldr	r3, [r4, #8]
 8028a3c:	9004      	str	r0, [sp, #16]
 8028a3e:	9a01      	ldr	r2, [sp, #4]
 8028a40:	4293      	cmp	r3, r2
 8028a42:	db10      	blt.n	8028a66 <__lshift+0x42>
 8028a44:	9804      	ldr	r0, [sp, #16]
 8028a46:	f7ff fd89 	bl	802855c <_Balloc>
 8028a4a:	2300      	movs	r3, #0
 8028a4c:	0002      	movs	r2, r0
 8028a4e:	0006      	movs	r6, r0
 8028a50:	0019      	movs	r1, r3
 8028a52:	3214      	adds	r2, #20
 8028a54:	4298      	cmp	r0, r3
 8028a56:	d10c      	bne.n	8028a72 <__lshift+0x4e>
 8028a58:	31df      	adds	r1, #223	; 0xdf
 8028a5a:	0032      	movs	r2, r6
 8028a5c:	4b26      	ldr	r3, [pc, #152]	; (8028af8 <__lshift+0xd4>)
 8028a5e:	4827      	ldr	r0, [pc, #156]	; (8028afc <__lshift+0xd8>)
 8028a60:	31ff      	adds	r1, #255	; 0xff
 8028a62:	f7ff f9a5 	bl	8027db0 <__assert_func>
 8028a66:	3101      	adds	r1, #1
 8028a68:	005b      	lsls	r3, r3, #1
 8028a6a:	e7e8      	b.n	8028a3e <__lshift+0x1a>
 8028a6c:	0098      	lsls	r0, r3, #2
 8028a6e:	5011      	str	r1, [r2, r0]
 8028a70:	3301      	adds	r3, #1
 8028a72:	42ab      	cmp	r3, r5
 8028a74:	dbfa      	blt.n	8028a6c <__lshift+0x48>
 8028a76:	43eb      	mvns	r3, r5
 8028a78:	17db      	asrs	r3, r3, #31
 8028a7a:	401d      	ands	r5, r3
 8028a7c:	211f      	movs	r1, #31
 8028a7e:	0023      	movs	r3, r4
 8028a80:	0038      	movs	r0, r7
 8028a82:	00ad      	lsls	r5, r5, #2
 8028a84:	1955      	adds	r5, r2, r5
 8028a86:	6922      	ldr	r2, [r4, #16]
 8028a88:	3314      	adds	r3, #20
 8028a8a:	0092      	lsls	r2, r2, #2
 8028a8c:	4008      	ands	r0, r1
 8028a8e:	4684      	mov	ip, r0
 8028a90:	189a      	adds	r2, r3, r2
 8028a92:	420f      	tst	r7, r1
 8028a94:	d02a      	beq.n	8028aec <__lshift+0xc8>
 8028a96:	3101      	adds	r1, #1
 8028a98:	1a09      	subs	r1, r1, r0
 8028a9a:	9105      	str	r1, [sp, #20]
 8028a9c:	2100      	movs	r1, #0
 8028a9e:	9503      	str	r5, [sp, #12]
 8028aa0:	4667      	mov	r7, ip
 8028aa2:	6818      	ldr	r0, [r3, #0]
 8028aa4:	40b8      	lsls	r0, r7
 8028aa6:	4308      	orrs	r0, r1
 8028aa8:	9903      	ldr	r1, [sp, #12]
 8028aaa:	c101      	stmia	r1!, {r0}
 8028aac:	9103      	str	r1, [sp, #12]
 8028aae:	9805      	ldr	r0, [sp, #20]
 8028ab0:	cb02      	ldmia	r3!, {r1}
 8028ab2:	40c1      	lsrs	r1, r0
 8028ab4:	429a      	cmp	r2, r3
 8028ab6:	d8f3      	bhi.n	8028aa0 <__lshift+0x7c>
 8028ab8:	0020      	movs	r0, r4
 8028aba:	3015      	adds	r0, #21
 8028abc:	2304      	movs	r3, #4
 8028abe:	4282      	cmp	r2, r0
 8028ac0:	d304      	bcc.n	8028acc <__lshift+0xa8>
 8028ac2:	1b13      	subs	r3, r2, r4
 8028ac4:	3b15      	subs	r3, #21
 8028ac6:	089b      	lsrs	r3, r3, #2
 8028ac8:	3301      	adds	r3, #1
 8028aca:	009b      	lsls	r3, r3, #2
 8028acc:	50e9      	str	r1, [r5, r3]
 8028ace:	2900      	cmp	r1, #0
 8028ad0:	d002      	beq.n	8028ad8 <__lshift+0xb4>
 8028ad2:	9b02      	ldr	r3, [sp, #8]
 8028ad4:	3302      	adds	r3, #2
 8028ad6:	9301      	str	r3, [sp, #4]
 8028ad8:	9b01      	ldr	r3, [sp, #4]
 8028ada:	9804      	ldr	r0, [sp, #16]
 8028adc:	3b01      	subs	r3, #1
 8028ade:	0021      	movs	r1, r4
 8028ae0:	6133      	str	r3, [r6, #16]
 8028ae2:	f7ff fd7f 	bl	80285e4 <_Bfree>
 8028ae6:	0030      	movs	r0, r6
 8028ae8:	b007      	add	sp, #28
 8028aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028aec:	cb02      	ldmia	r3!, {r1}
 8028aee:	c502      	stmia	r5!, {r1}
 8028af0:	429a      	cmp	r2, r3
 8028af2:	d8fb      	bhi.n	8028aec <__lshift+0xc8>
 8028af4:	e7f0      	b.n	8028ad8 <__lshift+0xb4>
 8028af6:	46c0      	nop			; (mov r8, r8)
 8028af8:	0802ba95 	.word	0x0802ba95
 8028afc:	0802bb06 	.word	0x0802bb06

08028b00 <__mcmp>:
 8028b00:	b530      	push	{r4, r5, lr}
 8028b02:	690b      	ldr	r3, [r1, #16]
 8028b04:	6904      	ldr	r4, [r0, #16]
 8028b06:	0002      	movs	r2, r0
 8028b08:	1ae0      	subs	r0, r4, r3
 8028b0a:	429c      	cmp	r4, r3
 8028b0c:	d10e      	bne.n	8028b2c <__mcmp+0x2c>
 8028b0e:	3214      	adds	r2, #20
 8028b10:	009b      	lsls	r3, r3, #2
 8028b12:	3114      	adds	r1, #20
 8028b14:	0014      	movs	r4, r2
 8028b16:	18c9      	adds	r1, r1, r3
 8028b18:	18d2      	adds	r2, r2, r3
 8028b1a:	3a04      	subs	r2, #4
 8028b1c:	3904      	subs	r1, #4
 8028b1e:	6815      	ldr	r5, [r2, #0]
 8028b20:	680b      	ldr	r3, [r1, #0]
 8028b22:	429d      	cmp	r5, r3
 8028b24:	d003      	beq.n	8028b2e <__mcmp+0x2e>
 8028b26:	2001      	movs	r0, #1
 8028b28:	429d      	cmp	r5, r3
 8028b2a:	d303      	bcc.n	8028b34 <__mcmp+0x34>
 8028b2c:	bd30      	pop	{r4, r5, pc}
 8028b2e:	4294      	cmp	r4, r2
 8028b30:	d3f3      	bcc.n	8028b1a <__mcmp+0x1a>
 8028b32:	e7fb      	b.n	8028b2c <__mcmp+0x2c>
 8028b34:	4240      	negs	r0, r0
 8028b36:	e7f9      	b.n	8028b2c <__mcmp+0x2c>

08028b38 <__mdiff>:
 8028b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028b3a:	000e      	movs	r6, r1
 8028b3c:	0007      	movs	r7, r0
 8028b3e:	0011      	movs	r1, r2
 8028b40:	0030      	movs	r0, r6
 8028b42:	b087      	sub	sp, #28
 8028b44:	0014      	movs	r4, r2
 8028b46:	f7ff ffdb 	bl	8028b00 <__mcmp>
 8028b4a:	1e05      	subs	r5, r0, #0
 8028b4c:	d110      	bne.n	8028b70 <__mdiff+0x38>
 8028b4e:	0001      	movs	r1, r0
 8028b50:	0038      	movs	r0, r7
 8028b52:	f7ff fd03 	bl	802855c <_Balloc>
 8028b56:	1e02      	subs	r2, r0, #0
 8028b58:	d104      	bne.n	8028b64 <__mdiff+0x2c>
 8028b5a:	4b3f      	ldr	r3, [pc, #252]	; (8028c58 <__mdiff+0x120>)
 8028b5c:	483f      	ldr	r0, [pc, #252]	; (8028c5c <__mdiff+0x124>)
 8028b5e:	4940      	ldr	r1, [pc, #256]	; (8028c60 <__mdiff+0x128>)
 8028b60:	f7ff f926 	bl	8027db0 <__assert_func>
 8028b64:	2301      	movs	r3, #1
 8028b66:	6145      	str	r5, [r0, #20]
 8028b68:	6103      	str	r3, [r0, #16]
 8028b6a:	0010      	movs	r0, r2
 8028b6c:	b007      	add	sp, #28
 8028b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b70:	2301      	movs	r3, #1
 8028b72:	9301      	str	r3, [sp, #4]
 8028b74:	2800      	cmp	r0, #0
 8028b76:	db04      	blt.n	8028b82 <__mdiff+0x4a>
 8028b78:	0023      	movs	r3, r4
 8028b7a:	0034      	movs	r4, r6
 8028b7c:	001e      	movs	r6, r3
 8028b7e:	2300      	movs	r3, #0
 8028b80:	9301      	str	r3, [sp, #4]
 8028b82:	0038      	movs	r0, r7
 8028b84:	6861      	ldr	r1, [r4, #4]
 8028b86:	f7ff fce9 	bl	802855c <_Balloc>
 8028b8a:	1e02      	subs	r2, r0, #0
 8028b8c:	d103      	bne.n	8028b96 <__mdiff+0x5e>
 8028b8e:	4b32      	ldr	r3, [pc, #200]	; (8028c58 <__mdiff+0x120>)
 8028b90:	4832      	ldr	r0, [pc, #200]	; (8028c5c <__mdiff+0x124>)
 8028b92:	4934      	ldr	r1, [pc, #208]	; (8028c64 <__mdiff+0x12c>)
 8028b94:	e7e4      	b.n	8028b60 <__mdiff+0x28>
 8028b96:	9b01      	ldr	r3, [sp, #4]
 8028b98:	2700      	movs	r7, #0
 8028b9a:	60c3      	str	r3, [r0, #12]
 8028b9c:	6920      	ldr	r0, [r4, #16]
 8028b9e:	3414      	adds	r4, #20
 8028ba0:	0083      	lsls	r3, r0, #2
 8028ba2:	18e3      	adds	r3, r4, r3
 8028ba4:	0021      	movs	r1, r4
 8028ba6:	9401      	str	r4, [sp, #4]
 8028ba8:	0034      	movs	r4, r6
 8028baa:	9302      	str	r3, [sp, #8]
 8028bac:	6933      	ldr	r3, [r6, #16]
 8028bae:	3414      	adds	r4, #20
 8028bb0:	009b      	lsls	r3, r3, #2
 8028bb2:	18e3      	adds	r3, r4, r3
 8028bb4:	9303      	str	r3, [sp, #12]
 8028bb6:	0013      	movs	r3, r2
 8028bb8:	3314      	adds	r3, #20
 8028bba:	469c      	mov	ip, r3
 8028bbc:	9305      	str	r3, [sp, #20]
 8028bbe:	9104      	str	r1, [sp, #16]
 8028bc0:	9b04      	ldr	r3, [sp, #16]
 8028bc2:	cc02      	ldmia	r4!, {r1}
 8028bc4:	cb20      	ldmia	r3!, {r5}
 8028bc6:	9304      	str	r3, [sp, #16]
 8028bc8:	b2ab      	uxth	r3, r5
 8028bca:	19df      	adds	r7, r3, r7
 8028bcc:	b28b      	uxth	r3, r1
 8028bce:	1afb      	subs	r3, r7, r3
 8028bd0:	0c09      	lsrs	r1, r1, #16
 8028bd2:	0c2d      	lsrs	r5, r5, #16
 8028bd4:	1a6d      	subs	r5, r5, r1
 8028bd6:	1419      	asrs	r1, r3, #16
 8028bd8:	1869      	adds	r1, r5, r1
 8028bda:	b29b      	uxth	r3, r3
 8028bdc:	140f      	asrs	r7, r1, #16
 8028bde:	0409      	lsls	r1, r1, #16
 8028be0:	4319      	orrs	r1, r3
 8028be2:	4663      	mov	r3, ip
 8028be4:	c302      	stmia	r3!, {r1}
 8028be6:	469c      	mov	ip, r3
 8028be8:	9b03      	ldr	r3, [sp, #12]
 8028bea:	42a3      	cmp	r3, r4
 8028bec:	d8e8      	bhi.n	8028bc0 <__mdiff+0x88>
 8028bee:	0031      	movs	r1, r6
 8028bf0:	9c03      	ldr	r4, [sp, #12]
 8028bf2:	3115      	adds	r1, #21
 8028bf4:	2304      	movs	r3, #4
 8028bf6:	428c      	cmp	r4, r1
 8028bf8:	d304      	bcc.n	8028c04 <__mdiff+0xcc>
 8028bfa:	1ba3      	subs	r3, r4, r6
 8028bfc:	3b15      	subs	r3, #21
 8028bfe:	089b      	lsrs	r3, r3, #2
 8028c00:	3301      	adds	r3, #1
 8028c02:	009b      	lsls	r3, r3, #2
 8028c04:	9901      	ldr	r1, [sp, #4]
 8028c06:	18cd      	adds	r5, r1, r3
 8028c08:	9905      	ldr	r1, [sp, #20]
 8028c0a:	002e      	movs	r6, r5
 8028c0c:	18cb      	adds	r3, r1, r3
 8028c0e:	469c      	mov	ip, r3
 8028c10:	9902      	ldr	r1, [sp, #8]
 8028c12:	428e      	cmp	r6, r1
 8028c14:	d310      	bcc.n	8028c38 <__mdiff+0x100>
 8028c16:	9e02      	ldr	r6, [sp, #8]
 8028c18:	1ee9      	subs	r1, r5, #3
 8028c1a:	2400      	movs	r4, #0
 8028c1c:	428e      	cmp	r6, r1
 8028c1e:	d304      	bcc.n	8028c2a <__mdiff+0xf2>
 8028c20:	0031      	movs	r1, r6
 8028c22:	3103      	adds	r1, #3
 8028c24:	1b49      	subs	r1, r1, r5
 8028c26:	0889      	lsrs	r1, r1, #2
 8028c28:	008c      	lsls	r4, r1, #2
 8028c2a:	191b      	adds	r3, r3, r4
 8028c2c:	3b04      	subs	r3, #4
 8028c2e:	6819      	ldr	r1, [r3, #0]
 8028c30:	2900      	cmp	r1, #0
 8028c32:	d00f      	beq.n	8028c54 <__mdiff+0x11c>
 8028c34:	6110      	str	r0, [r2, #16]
 8028c36:	e798      	b.n	8028b6a <__mdiff+0x32>
 8028c38:	ce02      	ldmia	r6!, {r1}
 8028c3a:	b28c      	uxth	r4, r1
 8028c3c:	19e4      	adds	r4, r4, r7
 8028c3e:	0c0f      	lsrs	r7, r1, #16
 8028c40:	1421      	asrs	r1, r4, #16
 8028c42:	1879      	adds	r1, r7, r1
 8028c44:	b2a4      	uxth	r4, r4
 8028c46:	140f      	asrs	r7, r1, #16
 8028c48:	0409      	lsls	r1, r1, #16
 8028c4a:	4321      	orrs	r1, r4
 8028c4c:	4664      	mov	r4, ip
 8028c4e:	c402      	stmia	r4!, {r1}
 8028c50:	46a4      	mov	ip, r4
 8028c52:	e7dd      	b.n	8028c10 <__mdiff+0xd8>
 8028c54:	3801      	subs	r0, #1
 8028c56:	e7e9      	b.n	8028c2c <__mdiff+0xf4>
 8028c58:	0802ba95 	.word	0x0802ba95
 8028c5c:	0802bb06 	.word	0x0802bb06
 8028c60:	00000237 	.word	0x00000237
 8028c64:	00000245 	.word	0x00000245

08028c68 <__ulp>:
 8028c68:	2000      	movs	r0, #0
 8028c6a:	4b0b      	ldr	r3, [pc, #44]	; (8028c98 <__ulp+0x30>)
 8028c6c:	4019      	ands	r1, r3
 8028c6e:	4b0b      	ldr	r3, [pc, #44]	; (8028c9c <__ulp+0x34>)
 8028c70:	18c9      	adds	r1, r1, r3
 8028c72:	4281      	cmp	r1, r0
 8028c74:	dc06      	bgt.n	8028c84 <__ulp+0x1c>
 8028c76:	4249      	negs	r1, r1
 8028c78:	150b      	asrs	r3, r1, #20
 8028c7a:	2b13      	cmp	r3, #19
 8028c7c:	dc03      	bgt.n	8028c86 <__ulp+0x1e>
 8028c7e:	2180      	movs	r1, #128	; 0x80
 8028c80:	0309      	lsls	r1, r1, #12
 8028c82:	4119      	asrs	r1, r3
 8028c84:	4770      	bx	lr
 8028c86:	3b14      	subs	r3, #20
 8028c88:	2001      	movs	r0, #1
 8028c8a:	2b1e      	cmp	r3, #30
 8028c8c:	dc02      	bgt.n	8028c94 <__ulp+0x2c>
 8028c8e:	2080      	movs	r0, #128	; 0x80
 8028c90:	0600      	lsls	r0, r0, #24
 8028c92:	40d8      	lsrs	r0, r3
 8028c94:	2100      	movs	r1, #0
 8028c96:	e7f5      	b.n	8028c84 <__ulp+0x1c>
 8028c98:	7ff00000 	.word	0x7ff00000
 8028c9c:	fcc00000 	.word	0xfcc00000

08028ca0 <__b2d>:
 8028ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028ca2:	0006      	movs	r6, r0
 8028ca4:	6903      	ldr	r3, [r0, #16]
 8028ca6:	3614      	adds	r6, #20
 8028ca8:	009b      	lsls	r3, r3, #2
 8028caa:	18f3      	adds	r3, r6, r3
 8028cac:	1f1d      	subs	r5, r3, #4
 8028cae:	682c      	ldr	r4, [r5, #0]
 8028cb0:	000f      	movs	r7, r1
 8028cb2:	0020      	movs	r0, r4
 8028cb4:	9301      	str	r3, [sp, #4]
 8028cb6:	f7ff fd49 	bl	802874c <__hi0bits>
 8028cba:	2220      	movs	r2, #32
 8028cbc:	1a12      	subs	r2, r2, r0
 8028cbe:	603a      	str	r2, [r7, #0]
 8028cc0:	0003      	movs	r3, r0
 8028cc2:	4a1c      	ldr	r2, [pc, #112]	; (8028d34 <__b2d+0x94>)
 8028cc4:	280a      	cmp	r0, #10
 8028cc6:	dc15      	bgt.n	8028cf4 <__b2d+0x54>
 8028cc8:	210b      	movs	r1, #11
 8028cca:	0027      	movs	r7, r4
 8028ccc:	1a09      	subs	r1, r1, r0
 8028cce:	40cf      	lsrs	r7, r1
 8028cd0:	433a      	orrs	r2, r7
 8028cd2:	468c      	mov	ip, r1
 8028cd4:	0011      	movs	r1, r2
 8028cd6:	2200      	movs	r2, #0
 8028cd8:	42ae      	cmp	r6, r5
 8028cda:	d202      	bcs.n	8028ce2 <__b2d+0x42>
 8028cdc:	9a01      	ldr	r2, [sp, #4]
 8028cde:	3a08      	subs	r2, #8
 8028ce0:	6812      	ldr	r2, [r2, #0]
 8028ce2:	3315      	adds	r3, #21
 8028ce4:	409c      	lsls	r4, r3
 8028ce6:	4663      	mov	r3, ip
 8028ce8:	0027      	movs	r7, r4
 8028cea:	40da      	lsrs	r2, r3
 8028cec:	4317      	orrs	r7, r2
 8028cee:	0038      	movs	r0, r7
 8028cf0:	b003      	add	sp, #12
 8028cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028cf4:	2700      	movs	r7, #0
 8028cf6:	42ae      	cmp	r6, r5
 8028cf8:	d202      	bcs.n	8028d00 <__b2d+0x60>
 8028cfa:	9d01      	ldr	r5, [sp, #4]
 8028cfc:	3d08      	subs	r5, #8
 8028cfe:	682f      	ldr	r7, [r5, #0]
 8028d00:	210b      	movs	r1, #11
 8028d02:	4249      	negs	r1, r1
 8028d04:	468c      	mov	ip, r1
 8028d06:	449c      	add	ip, r3
 8028d08:	2b0b      	cmp	r3, #11
 8028d0a:	d010      	beq.n	8028d2e <__b2d+0x8e>
 8028d0c:	4661      	mov	r1, ip
 8028d0e:	2320      	movs	r3, #32
 8028d10:	408c      	lsls	r4, r1
 8028d12:	1a5b      	subs	r3, r3, r1
 8028d14:	0039      	movs	r1, r7
 8028d16:	40d9      	lsrs	r1, r3
 8028d18:	430c      	orrs	r4, r1
 8028d1a:	4322      	orrs	r2, r4
 8028d1c:	0011      	movs	r1, r2
 8028d1e:	2200      	movs	r2, #0
 8028d20:	42b5      	cmp	r5, r6
 8028d22:	d901      	bls.n	8028d28 <__b2d+0x88>
 8028d24:	3d04      	subs	r5, #4
 8028d26:	682a      	ldr	r2, [r5, #0]
 8028d28:	4664      	mov	r4, ip
 8028d2a:	40a7      	lsls	r7, r4
 8028d2c:	e7dd      	b.n	8028cea <__b2d+0x4a>
 8028d2e:	4322      	orrs	r2, r4
 8028d30:	0011      	movs	r1, r2
 8028d32:	e7dc      	b.n	8028cee <__b2d+0x4e>
 8028d34:	3ff00000 	.word	0x3ff00000

08028d38 <__d2b>:
 8028d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028d3a:	2101      	movs	r1, #1
 8028d3c:	0014      	movs	r4, r2
 8028d3e:	001d      	movs	r5, r3
 8028d40:	9f08      	ldr	r7, [sp, #32]
 8028d42:	f7ff fc0b 	bl	802855c <_Balloc>
 8028d46:	1e06      	subs	r6, r0, #0
 8028d48:	d105      	bne.n	8028d56 <__d2b+0x1e>
 8028d4a:	0032      	movs	r2, r6
 8028d4c:	4b24      	ldr	r3, [pc, #144]	; (8028de0 <__d2b+0xa8>)
 8028d4e:	4825      	ldr	r0, [pc, #148]	; (8028de4 <__d2b+0xac>)
 8028d50:	4925      	ldr	r1, [pc, #148]	; (8028de8 <__d2b+0xb0>)
 8028d52:	f7ff f82d 	bl	8027db0 <__assert_func>
 8028d56:	032b      	lsls	r3, r5, #12
 8028d58:	006d      	lsls	r5, r5, #1
 8028d5a:	0b1b      	lsrs	r3, r3, #12
 8028d5c:	0d6d      	lsrs	r5, r5, #21
 8028d5e:	d125      	bne.n	8028dac <__d2b+0x74>
 8028d60:	9301      	str	r3, [sp, #4]
 8028d62:	2c00      	cmp	r4, #0
 8028d64:	d028      	beq.n	8028db8 <__d2b+0x80>
 8028d66:	4668      	mov	r0, sp
 8028d68:	9400      	str	r4, [sp, #0]
 8028d6a:	f7ff fd09 	bl	8028780 <__lo0bits>
 8028d6e:	9b01      	ldr	r3, [sp, #4]
 8028d70:	9900      	ldr	r1, [sp, #0]
 8028d72:	2800      	cmp	r0, #0
 8028d74:	d01e      	beq.n	8028db4 <__d2b+0x7c>
 8028d76:	2220      	movs	r2, #32
 8028d78:	001c      	movs	r4, r3
 8028d7a:	1a12      	subs	r2, r2, r0
 8028d7c:	4094      	lsls	r4, r2
 8028d7e:	0022      	movs	r2, r4
 8028d80:	40c3      	lsrs	r3, r0
 8028d82:	430a      	orrs	r2, r1
 8028d84:	6172      	str	r2, [r6, #20]
 8028d86:	9301      	str	r3, [sp, #4]
 8028d88:	9c01      	ldr	r4, [sp, #4]
 8028d8a:	61b4      	str	r4, [r6, #24]
 8028d8c:	1e63      	subs	r3, r4, #1
 8028d8e:	419c      	sbcs	r4, r3
 8028d90:	3401      	adds	r4, #1
 8028d92:	6134      	str	r4, [r6, #16]
 8028d94:	2d00      	cmp	r5, #0
 8028d96:	d017      	beq.n	8028dc8 <__d2b+0x90>
 8028d98:	2435      	movs	r4, #53	; 0x35
 8028d9a:	4b14      	ldr	r3, [pc, #80]	; (8028dec <__d2b+0xb4>)
 8028d9c:	18ed      	adds	r5, r5, r3
 8028d9e:	182d      	adds	r5, r5, r0
 8028da0:	603d      	str	r5, [r7, #0]
 8028da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028da4:	1a24      	subs	r4, r4, r0
 8028da6:	601c      	str	r4, [r3, #0]
 8028da8:	0030      	movs	r0, r6
 8028daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028dac:	2280      	movs	r2, #128	; 0x80
 8028dae:	0352      	lsls	r2, r2, #13
 8028db0:	4313      	orrs	r3, r2
 8028db2:	e7d5      	b.n	8028d60 <__d2b+0x28>
 8028db4:	6171      	str	r1, [r6, #20]
 8028db6:	e7e7      	b.n	8028d88 <__d2b+0x50>
 8028db8:	a801      	add	r0, sp, #4
 8028dba:	f7ff fce1 	bl	8028780 <__lo0bits>
 8028dbe:	9b01      	ldr	r3, [sp, #4]
 8028dc0:	2401      	movs	r4, #1
 8028dc2:	6173      	str	r3, [r6, #20]
 8028dc4:	3020      	adds	r0, #32
 8028dc6:	e7e4      	b.n	8028d92 <__d2b+0x5a>
 8028dc8:	4b09      	ldr	r3, [pc, #36]	; (8028df0 <__d2b+0xb8>)
 8028dca:	18c0      	adds	r0, r0, r3
 8028dcc:	4b09      	ldr	r3, [pc, #36]	; (8028df4 <__d2b+0xbc>)
 8028dce:	6038      	str	r0, [r7, #0]
 8028dd0:	18e3      	adds	r3, r4, r3
 8028dd2:	009b      	lsls	r3, r3, #2
 8028dd4:	18f3      	adds	r3, r6, r3
 8028dd6:	6958      	ldr	r0, [r3, #20]
 8028dd8:	f7ff fcb8 	bl	802874c <__hi0bits>
 8028ddc:	0164      	lsls	r4, r4, #5
 8028dde:	e7e0      	b.n	8028da2 <__d2b+0x6a>
 8028de0:	0802ba95 	.word	0x0802ba95
 8028de4:	0802bb06 	.word	0x0802bb06
 8028de8:	0000030f 	.word	0x0000030f
 8028dec:	fffffbcd 	.word	0xfffffbcd
 8028df0:	fffffbce 	.word	0xfffffbce
 8028df4:	3fffffff 	.word	0x3fffffff

08028df8 <__ratio>:
 8028df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028dfa:	b087      	sub	sp, #28
 8028dfc:	000f      	movs	r7, r1
 8028dfe:	a904      	add	r1, sp, #16
 8028e00:	0006      	movs	r6, r0
 8028e02:	f7ff ff4d 	bl	8028ca0 <__b2d>
 8028e06:	9000      	str	r0, [sp, #0]
 8028e08:	9101      	str	r1, [sp, #4]
 8028e0a:	9c00      	ldr	r4, [sp, #0]
 8028e0c:	9d01      	ldr	r5, [sp, #4]
 8028e0e:	0038      	movs	r0, r7
 8028e10:	a905      	add	r1, sp, #20
 8028e12:	f7ff ff45 	bl	8028ca0 <__b2d>
 8028e16:	9002      	str	r0, [sp, #8]
 8028e18:	9103      	str	r1, [sp, #12]
 8028e1a:	9a02      	ldr	r2, [sp, #8]
 8028e1c:	9b03      	ldr	r3, [sp, #12]
 8028e1e:	6930      	ldr	r0, [r6, #16]
 8028e20:	6939      	ldr	r1, [r7, #16]
 8028e22:	9e04      	ldr	r6, [sp, #16]
 8028e24:	1a40      	subs	r0, r0, r1
 8028e26:	9905      	ldr	r1, [sp, #20]
 8028e28:	0140      	lsls	r0, r0, #5
 8028e2a:	1a71      	subs	r1, r6, r1
 8028e2c:	1841      	adds	r1, r0, r1
 8028e2e:	0508      	lsls	r0, r1, #20
 8028e30:	2900      	cmp	r1, #0
 8028e32:	dd07      	ble.n	8028e44 <__ratio+0x4c>
 8028e34:	9901      	ldr	r1, [sp, #4]
 8028e36:	1845      	adds	r5, r0, r1
 8028e38:	0020      	movs	r0, r4
 8028e3a:	0029      	movs	r1, r5
 8028e3c:	f7de f85c 	bl	8006ef8 <__aeabi_ddiv>
 8028e40:	b007      	add	sp, #28
 8028e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028e44:	9903      	ldr	r1, [sp, #12]
 8028e46:	1a0b      	subs	r3, r1, r0
 8028e48:	e7f6      	b.n	8028e38 <__ratio+0x40>

08028e4a <__copybits>:
 8028e4a:	b570      	push	{r4, r5, r6, lr}
 8028e4c:	0014      	movs	r4, r2
 8028e4e:	0005      	movs	r5, r0
 8028e50:	3901      	subs	r1, #1
 8028e52:	6913      	ldr	r3, [r2, #16]
 8028e54:	1149      	asrs	r1, r1, #5
 8028e56:	3101      	adds	r1, #1
 8028e58:	0089      	lsls	r1, r1, #2
 8028e5a:	3414      	adds	r4, #20
 8028e5c:	009b      	lsls	r3, r3, #2
 8028e5e:	1841      	adds	r1, r0, r1
 8028e60:	18e3      	adds	r3, r4, r3
 8028e62:	42a3      	cmp	r3, r4
 8028e64:	d80d      	bhi.n	8028e82 <__copybits+0x38>
 8028e66:	0014      	movs	r4, r2
 8028e68:	3411      	adds	r4, #17
 8028e6a:	2500      	movs	r5, #0
 8028e6c:	429c      	cmp	r4, r3
 8028e6e:	d803      	bhi.n	8028e78 <__copybits+0x2e>
 8028e70:	1a9b      	subs	r3, r3, r2
 8028e72:	3b11      	subs	r3, #17
 8028e74:	089b      	lsrs	r3, r3, #2
 8028e76:	009d      	lsls	r5, r3, #2
 8028e78:	2300      	movs	r3, #0
 8028e7a:	1940      	adds	r0, r0, r5
 8028e7c:	4281      	cmp	r1, r0
 8028e7e:	d803      	bhi.n	8028e88 <__copybits+0x3e>
 8028e80:	bd70      	pop	{r4, r5, r6, pc}
 8028e82:	cc40      	ldmia	r4!, {r6}
 8028e84:	c540      	stmia	r5!, {r6}
 8028e86:	e7ec      	b.n	8028e62 <__copybits+0x18>
 8028e88:	c008      	stmia	r0!, {r3}
 8028e8a:	e7f7      	b.n	8028e7c <__copybits+0x32>

08028e8c <__any_on>:
 8028e8c:	0002      	movs	r2, r0
 8028e8e:	6900      	ldr	r0, [r0, #16]
 8028e90:	b510      	push	{r4, lr}
 8028e92:	3214      	adds	r2, #20
 8028e94:	114b      	asrs	r3, r1, #5
 8028e96:	4298      	cmp	r0, r3
 8028e98:	db13      	blt.n	8028ec2 <__any_on+0x36>
 8028e9a:	dd0c      	ble.n	8028eb6 <__any_on+0x2a>
 8028e9c:	241f      	movs	r4, #31
 8028e9e:	0008      	movs	r0, r1
 8028ea0:	4020      	ands	r0, r4
 8028ea2:	4221      	tst	r1, r4
 8028ea4:	d007      	beq.n	8028eb6 <__any_on+0x2a>
 8028ea6:	0099      	lsls	r1, r3, #2
 8028ea8:	588c      	ldr	r4, [r1, r2]
 8028eaa:	0021      	movs	r1, r4
 8028eac:	40c1      	lsrs	r1, r0
 8028eae:	4081      	lsls	r1, r0
 8028eb0:	2001      	movs	r0, #1
 8028eb2:	428c      	cmp	r4, r1
 8028eb4:	d104      	bne.n	8028ec0 <__any_on+0x34>
 8028eb6:	009b      	lsls	r3, r3, #2
 8028eb8:	18d3      	adds	r3, r2, r3
 8028eba:	4293      	cmp	r3, r2
 8028ebc:	d803      	bhi.n	8028ec6 <__any_on+0x3a>
 8028ebe:	2000      	movs	r0, #0
 8028ec0:	bd10      	pop	{r4, pc}
 8028ec2:	0003      	movs	r3, r0
 8028ec4:	e7f7      	b.n	8028eb6 <__any_on+0x2a>
 8028ec6:	3b04      	subs	r3, #4
 8028ec8:	6819      	ldr	r1, [r3, #0]
 8028eca:	2900      	cmp	r1, #0
 8028ecc:	d0f5      	beq.n	8028eba <__any_on+0x2e>
 8028ece:	2001      	movs	r0, #1
 8028ed0:	e7f6      	b.n	8028ec0 <__any_on+0x34>

08028ed2 <__ascii_wctomb>:
 8028ed2:	0003      	movs	r3, r0
 8028ed4:	1e08      	subs	r0, r1, #0
 8028ed6:	d005      	beq.n	8028ee4 <__ascii_wctomb+0x12>
 8028ed8:	2aff      	cmp	r2, #255	; 0xff
 8028eda:	d904      	bls.n	8028ee6 <__ascii_wctomb+0x14>
 8028edc:	228a      	movs	r2, #138	; 0x8a
 8028ede:	2001      	movs	r0, #1
 8028ee0:	601a      	str	r2, [r3, #0]
 8028ee2:	4240      	negs	r0, r0
 8028ee4:	4770      	bx	lr
 8028ee6:	2001      	movs	r0, #1
 8028ee8:	700a      	strb	r2, [r1, #0]
 8028eea:	e7fb      	b.n	8028ee4 <__ascii_wctomb+0x12>

08028eec <__ssputs_r>:
 8028eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028eee:	b085      	sub	sp, #20
 8028ef0:	9301      	str	r3, [sp, #4]
 8028ef2:	9203      	str	r2, [sp, #12]
 8028ef4:	688e      	ldr	r6, [r1, #8]
 8028ef6:	9a01      	ldr	r2, [sp, #4]
 8028ef8:	0007      	movs	r7, r0
 8028efa:	000c      	movs	r4, r1
 8028efc:	680b      	ldr	r3, [r1, #0]
 8028efe:	4296      	cmp	r6, r2
 8028f00:	d831      	bhi.n	8028f66 <__ssputs_r+0x7a>
 8028f02:	898a      	ldrh	r2, [r1, #12]
 8028f04:	2190      	movs	r1, #144	; 0x90
 8028f06:	00c9      	lsls	r1, r1, #3
 8028f08:	420a      	tst	r2, r1
 8028f0a:	d029      	beq.n	8028f60 <__ssputs_r+0x74>
 8028f0c:	2003      	movs	r0, #3
 8028f0e:	6921      	ldr	r1, [r4, #16]
 8028f10:	1a5b      	subs	r3, r3, r1
 8028f12:	9302      	str	r3, [sp, #8]
 8028f14:	6963      	ldr	r3, [r4, #20]
 8028f16:	4343      	muls	r3, r0
 8028f18:	0fdd      	lsrs	r5, r3, #31
 8028f1a:	18ed      	adds	r5, r5, r3
 8028f1c:	9b01      	ldr	r3, [sp, #4]
 8028f1e:	9802      	ldr	r0, [sp, #8]
 8028f20:	3301      	adds	r3, #1
 8028f22:	181b      	adds	r3, r3, r0
 8028f24:	106d      	asrs	r5, r5, #1
 8028f26:	42ab      	cmp	r3, r5
 8028f28:	d900      	bls.n	8028f2c <__ssputs_r+0x40>
 8028f2a:	001d      	movs	r5, r3
 8028f2c:	0552      	lsls	r2, r2, #21
 8028f2e:	d529      	bpl.n	8028f84 <__ssputs_r+0x98>
 8028f30:	0029      	movs	r1, r5
 8028f32:	0038      	movs	r0, r7
 8028f34:	f7fd fd6e 	bl	8026a14 <_malloc_r>
 8028f38:	1e06      	subs	r6, r0, #0
 8028f3a:	d02d      	beq.n	8028f98 <__ssputs_r+0xac>
 8028f3c:	9a02      	ldr	r2, [sp, #8]
 8028f3e:	6921      	ldr	r1, [r4, #16]
 8028f40:	f7fe ff27 	bl	8027d92 <memcpy>
 8028f44:	89a2      	ldrh	r2, [r4, #12]
 8028f46:	4b19      	ldr	r3, [pc, #100]	; (8028fac <__ssputs_r+0xc0>)
 8028f48:	401a      	ands	r2, r3
 8028f4a:	2380      	movs	r3, #128	; 0x80
 8028f4c:	4313      	orrs	r3, r2
 8028f4e:	81a3      	strh	r3, [r4, #12]
 8028f50:	9b02      	ldr	r3, [sp, #8]
 8028f52:	6126      	str	r6, [r4, #16]
 8028f54:	18f6      	adds	r6, r6, r3
 8028f56:	6026      	str	r6, [r4, #0]
 8028f58:	6165      	str	r5, [r4, #20]
 8028f5a:	9e01      	ldr	r6, [sp, #4]
 8028f5c:	1aed      	subs	r5, r5, r3
 8028f5e:	60a5      	str	r5, [r4, #8]
 8028f60:	9b01      	ldr	r3, [sp, #4]
 8028f62:	429e      	cmp	r6, r3
 8028f64:	d900      	bls.n	8028f68 <__ssputs_r+0x7c>
 8028f66:	9e01      	ldr	r6, [sp, #4]
 8028f68:	0032      	movs	r2, r6
 8028f6a:	9903      	ldr	r1, [sp, #12]
 8028f6c:	6820      	ldr	r0, [r4, #0]
 8028f6e:	f000 fb65 	bl	802963c <memmove>
 8028f72:	2000      	movs	r0, #0
 8028f74:	68a3      	ldr	r3, [r4, #8]
 8028f76:	1b9b      	subs	r3, r3, r6
 8028f78:	60a3      	str	r3, [r4, #8]
 8028f7a:	6823      	ldr	r3, [r4, #0]
 8028f7c:	199b      	adds	r3, r3, r6
 8028f7e:	6023      	str	r3, [r4, #0]
 8028f80:	b005      	add	sp, #20
 8028f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f84:	002a      	movs	r2, r5
 8028f86:	0038      	movs	r0, r7
 8028f88:	f000 fbaa 	bl	80296e0 <_realloc_r>
 8028f8c:	1e06      	subs	r6, r0, #0
 8028f8e:	d1df      	bne.n	8028f50 <__ssputs_r+0x64>
 8028f90:	0038      	movs	r0, r7
 8028f92:	6921      	ldr	r1, [r4, #16]
 8028f94:	f7fe ff2a 	bl	8027dec <_free_r>
 8028f98:	230c      	movs	r3, #12
 8028f9a:	2001      	movs	r0, #1
 8028f9c:	603b      	str	r3, [r7, #0]
 8028f9e:	89a2      	ldrh	r2, [r4, #12]
 8028fa0:	3334      	adds	r3, #52	; 0x34
 8028fa2:	4313      	orrs	r3, r2
 8028fa4:	81a3      	strh	r3, [r4, #12]
 8028fa6:	4240      	negs	r0, r0
 8028fa8:	e7ea      	b.n	8028f80 <__ssputs_r+0x94>
 8028faa:	46c0      	nop			; (mov r8, r8)
 8028fac:	fffffb7f 	.word	0xfffffb7f

08028fb0 <_svfiprintf_r>:
 8028fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028fb2:	b0a1      	sub	sp, #132	; 0x84
 8028fb4:	9003      	str	r0, [sp, #12]
 8028fb6:	001d      	movs	r5, r3
 8028fb8:	898b      	ldrh	r3, [r1, #12]
 8028fba:	000f      	movs	r7, r1
 8028fbc:	0016      	movs	r6, r2
 8028fbe:	061b      	lsls	r3, r3, #24
 8028fc0:	d511      	bpl.n	8028fe6 <_svfiprintf_r+0x36>
 8028fc2:	690b      	ldr	r3, [r1, #16]
 8028fc4:	2b00      	cmp	r3, #0
 8028fc6:	d10e      	bne.n	8028fe6 <_svfiprintf_r+0x36>
 8028fc8:	2140      	movs	r1, #64	; 0x40
 8028fca:	f7fd fd23 	bl	8026a14 <_malloc_r>
 8028fce:	6038      	str	r0, [r7, #0]
 8028fd0:	6138      	str	r0, [r7, #16]
 8028fd2:	2800      	cmp	r0, #0
 8028fd4:	d105      	bne.n	8028fe2 <_svfiprintf_r+0x32>
 8028fd6:	230c      	movs	r3, #12
 8028fd8:	9a03      	ldr	r2, [sp, #12]
 8028fda:	3801      	subs	r0, #1
 8028fdc:	6013      	str	r3, [r2, #0]
 8028fde:	b021      	add	sp, #132	; 0x84
 8028fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028fe2:	2340      	movs	r3, #64	; 0x40
 8028fe4:	617b      	str	r3, [r7, #20]
 8028fe6:	2300      	movs	r3, #0
 8028fe8:	ac08      	add	r4, sp, #32
 8028fea:	6163      	str	r3, [r4, #20]
 8028fec:	3320      	adds	r3, #32
 8028fee:	7663      	strb	r3, [r4, #25]
 8028ff0:	3310      	adds	r3, #16
 8028ff2:	76a3      	strb	r3, [r4, #26]
 8028ff4:	9507      	str	r5, [sp, #28]
 8028ff6:	0035      	movs	r5, r6
 8028ff8:	782b      	ldrb	r3, [r5, #0]
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	d001      	beq.n	8029002 <_svfiprintf_r+0x52>
 8028ffe:	2b25      	cmp	r3, #37	; 0x25
 8029000:	d148      	bne.n	8029094 <_svfiprintf_r+0xe4>
 8029002:	1bab      	subs	r3, r5, r6
 8029004:	9305      	str	r3, [sp, #20]
 8029006:	42b5      	cmp	r5, r6
 8029008:	d00b      	beq.n	8029022 <_svfiprintf_r+0x72>
 802900a:	0032      	movs	r2, r6
 802900c:	0039      	movs	r1, r7
 802900e:	9803      	ldr	r0, [sp, #12]
 8029010:	f7ff ff6c 	bl	8028eec <__ssputs_r>
 8029014:	3001      	adds	r0, #1
 8029016:	d100      	bne.n	802901a <_svfiprintf_r+0x6a>
 8029018:	e0af      	b.n	802917a <_svfiprintf_r+0x1ca>
 802901a:	6963      	ldr	r3, [r4, #20]
 802901c:	9a05      	ldr	r2, [sp, #20]
 802901e:	189b      	adds	r3, r3, r2
 8029020:	6163      	str	r3, [r4, #20]
 8029022:	782b      	ldrb	r3, [r5, #0]
 8029024:	2b00      	cmp	r3, #0
 8029026:	d100      	bne.n	802902a <_svfiprintf_r+0x7a>
 8029028:	e0a7      	b.n	802917a <_svfiprintf_r+0x1ca>
 802902a:	2201      	movs	r2, #1
 802902c:	2300      	movs	r3, #0
 802902e:	4252      	negs	r2, r2
 8029030:	6062      	str	r2, [r4, #4]
 8029032:	a904      	add	r1, sp, #16
 8029034:	3254      	adds	r2, #84	; 0x54
 8029036:	1852      	adds	r2, r2, r1
 8029038:	1c6e      	adds	r6, r5, #1
 802903a:	6023      	str	r3, [r4, #0]
 802903c:	60e3      	str	r3, [r4, #12]
 802903e:	60a3      	str	r3, [r4, #8]
 8029040:	7013      	strb	r3, [r2, #0]
 8029042:	65a3      	str	r3, [r4, #88]	; 0x58
 8029044:	4b55      	ldr	r3, [pc, #340]	; (802919c <_svfiprintf_r+0x1ec>)
 8029046:	2205      	movs	r2, #5
 8029048:	0018      	movs	r0, r3
 802904a:	7831      	ldrb	r1, [r6, #0]
 802904c:	9305      	str	r3, [sp, #20]
 802904e:	f000 fb08 	bl	8029662 <memchr>
 8029052:	1c75      	adds	r5, r6, #1
 8029054:	2800      	cmp	r0, #0
 8029056:	d11f      	bne.n	8029098 <_svfiprintf_r+0xe8>
 8029058:	6822      	ldr	r2, [r4, #0]
 802905a:	06d3      	lsls	r3, r2, #27
 802905c:	d504      	bpl.n	8029068 <_svfiprintf_r+0xb8>
 802905e:	2353      	movs	r3, #83	; 0x53
 8029060:	a904      	add	r1, sp, #16
 8029062:	185b      	adds	r3, r3, r1
 8029064:	2120      	movs	r1, #32
 8029066:	7019      	strb	r1, [r3, #0]
 8029068:	0713      	lsls	r3, r2, #28
 802906a:	d504      	bpl.n	8029076 <_svfiprintf_r+0xc6>
 802906c:	2353      	movs	r3, #83	; 0x53
 802906e:	a904      	add	r1, sp, #16
 8029070:	185b      	adds	r3, r3, r1
 8029072:	212b      	movs	r1, #43	; 0x2b
 8029074:	7019      	strb	r1, [r3, #0]
 8029076:	7833      	ldrb	r3, [r6, #0]
 8029078:	2b2a      	cmp	r3, #42	; 0x2a
 802907a:	d016      	beq.n	80290aa <_svfiprintf_r+0xfa>
 802907c:	0035      	movs	r5, r6
 802907e:	2100      	movs	r1, #0
 8029080:	200a      	movs	r0, #10
 8029082:	68e3      	ldr	r3, [r4, #12]
 8029084:	782a      	ldrb	r2, [r5, #0]
 8029086:	1c6e      	adds	r6, r5, #1
 8029088:	3a30      	subs	r2, #48	; 0x30
 802908a:	2a09      	cmp	r2, #9
 802908c:	d94e      	bls.n	802912c <_svfiprintf_r+0x17c>
 802908e:	2900      	cmp	r1, #0
 8029090:	d111      	bne.n	80290b6 <_svfiprintf_r+0x106>
 8029092:	e017      	b.n	80290c4 <_svfiprintf_r+0x114>
 8029094:	3501      	adds	r5, #1
 8029096:	e7af      	b.n	8028ff8 <_svfiprintf_r+0x48>
 8029098:	9b05      	ldr	r3, [sp, #20]
 802909a:	6822      	ldr	r2, [r4, #0]
 802909c:	1ac0      	subs	r0, r0, r3
 802909e:	2301      	movs	r3, #1
 80290a0:	4083      	lsls	r3, r0
 80290a2:	4313      	orrs	r3, r2
 80290a4:	002e      	movs	r6, r5
 80290a6:	6023      	str	r3, [r4, #0]
 80290a8:	e7cc      	b.n	8029044 <_svfiprintf_r+0x94>
 80290aa:	9b07      	ldr	r3, [sp, #28]
 80290ac:	1d19      	adds	r1, r3, #4
 80290ae:	681b      	ldr	r3, [r3, #0]
 80290b0:	9107      	str	r1, [sp, #28]
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	db01      	blt.n	80290ba <_svfiprintf_r+0x10a>
 80290b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80290b8:	e004      	b.n	80290c4 <_svfiprintf_r+0x114>
 80290ba:	425b      	negs	r3, r3
 80290bc:	60e3      	str	r3, [r4, #12]
 80290be:	2302      	movs	r3, #2
 80290c0:	4313      	orrs	r3, r2
 80290c2:	6023      	str	r3, [r4, #0]
 80290c4:	782b      	ldrb	r3, [r5, #0]
 80290c6:	2b2e      	cmp	r3, #46	; 0x2e
 80290c8:	d10a      	bne.n	80290e0 <_svfiprintf_r+0x130>
 80290ca:	786b      	ldrb	r3, [r5, #1]
 80290cc:	2b2a      	cmp	r3, #42	; 0x2a
 80290ce:	d135      	bne.n	802913c <_svfiprintf_r+0x18c>
 80290d0:	9b07      	ldr	r3, [sp, #28]
 80290d2:	3502      	adds	r5, #2
 80290d4:	1d1a      	adds	r2, r3, #4
 80290d6:	681b      	ldr	r3, [r3, #0]
 80290d8:	9207      	str	r2, [sp, #28]
 80290da:	2b00      	cmp	r3, #0
 80290dc:	db2b      	blt.n	8029136 <_svfiprintf_r+0x186>
 80290de:	9309      	str	r3, [sp, #36]	; 0x24
 80290e0:	4e2f      	ldr	r6, [pc, #188]	; (80291a0 <_svfiprintf_r+0x1f0>)
 80290e2:	2203      	movs	r2, #3
 80290e4:	0030      	movs	r0, r6
 80290e6:	7829      	ldrb	r1, [r5, #0]
 80290e8:	f000 fabb 	bl	8029662 <memchr>
 80290ec:	2800      	cmp	r0, #0
 80290ee:	d006      	beq.n	80290fe <_svfiprintf_r+0x14e>
 80290f0:	2340      	movs	r3, #64	; 0x40
 80290f2:	1b80      	subs	r0, r0, r6
 80290f4:	4083      	lsls	r3, r0
 80290f6:	6822      	ldr	r2, [r4, #0]
 80290f8:	3501      	adds	r5, #1
 80290fa:	4313      	orrs	r3, r2
 80290fc:	6023      	str	r3, [r4, #0]
 80290fe:	7829      	ldrb	r1, [r5, #0]
 8029100:	2206      	movs	r2, #6
 8029102:	4828      	ldr	r0, [pc, #160]	; (80291a4 <_svfiprintf_r+0x1f4>)
 8029104:	1c6e      	adds	r6, r5, #1
 8029106:	7621      	strb	r1, [r4, #24]
 8029108:	f000 faab 	bl	8029662 <memchr>
 802910c:	2800      	cmp	r0, #0
 802910e:	d03c      	beq.n	802918a <_svfiprintf_r+0x1da>
 8029110:	4b25      	ldr	r3, [pc, #148]	; (80291a8 <_svfiprintf_r+0x1f8>)
 8029112:	2b00      	cmp	r3, #0
 8029114:	d125      	bne.n	8029162 <_svfiprintf_r+0x1b2>
 8029116:	2207      	movs	r2, #7
 8029118:	9b07      	ldr	r3, [sp, #28]
 802911a:	3307      	adds	r3, #7
 802911c:	4393      	bics	r3, r2
 802911e:	3308      	adds	r3, #8
 8029120:	9307      	str	r3, [sp, #28]
 8029122:	6963      	ldr	r3, [r4, #20]
 8029124:	9a04      	ldr	r2, [sp, #16]
 8029126:	189b      	adds	r3, r3, r2
 8029128:	6163      	str	r3, [r4, #20]
 802912a:	e764      	b.n	8028ff6 <_svfiprintf_r+0x46>
 802912c:	4343      	muls	r3, r0
 802912e:	0035      	movs	r5, r6
 8029130:	2101      	movs	r1, #1
 8029132:	189b      	adds	r3, r3, r2
 8029134:	e7a6      	b.n	8029084 <_svfiprintf_r+0xd4>
 8029136:	2301      	movs	r3, #1
 8029138:	425b      	negs	r3, r3
 802913a:	e7d0      	b.n	80290de <_svfiprintf_r+0x12e>
 802913c:	2300      	movs	r3, #0
 802913e:	200a      	movs	r0, #10
 8029140:	001a      	movs	r2, r3
 8029142:	3501      	adds	r5, #1
 8029144:	6063      	str	r3, [r4, #4]
 8029146:	7829      	ldrb	r1, [r5, #0]
 8029148:	1c6e      	adds	r6, r5, #1
 802914a:	3930      	subs	r1, #48	; 0x30
 802914c:	2909      	cmp	r1, #9
 802914e:	d903      	bls.n	8029158 <_svfiprintf_r+0x1a8>
 8029150:	2b00      	cmp	r3, #0
 8029152:	d0c5      	beq.n	80290e0 <_svfiprintf_r+0x130>
 8029154:	9209      	str	r2, [sp, #36]	; 0x24
 8029156:	e7c3      	b.n	80290e0 <_svfiprintf_r+0x130>
 8029158:	4342      	muls	r2, r0
 802915a:	0035      	movs	r5, r6
 802915c:	2301      	movs	r3, #1
 802915e:	1852      	adds	r2, r2, r1
 8029160:	e7f1      	b.n	8029146 <_svfiprintf_r+0x196>
 8029162:	aa07      	add	r2, sp, #28
 8029164:	9200      	str	r2, [sp, #0]
 8029166:	0021      	movs	r1, r4
 8029168:	003a      	movs	r2, r7
 802916a:	4b10      	ldr	r3, [pc, #64]	; (80291ac <_svfiprintf_r+0x1fc>)
 802916c:	9803      	ldr	r0, [sp, #12]
 802916e:	e000      	b.n	8029172 <_svfiprintf_r+0x1c2>
 8029170:	bf00      	nop
 8029172:	9004      	str	r0, [sp, #16]
 8029174:	9b04      	ldr	r3, [sp, #16]
 8029176:	3301      	adds	r3, #1
 8029178:	d1d3      	bne.n	8029122 <_svfiprintf_r+0x172>
 802917a:	89bb      	ldrh	r3, [r7, #12]
 802917c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802917e:	065b      	lsls	r3, r3, #25
 8029180:	d400      	bmi.n	8029184 <_svfiprintf_r+0x1d4>
 8029182:	e72c      	b.n	8028fde <_svfiprintf_r+0x2e>
 8029184:	2001      	movs	r0, #1
 8029186:	4240      	negs	r0, r0
 8029188:	e729      	b.n	8028fde <_svfiprintf_r+0x2e>
 802918a:	aa07      	add	r2, sp, #28
 802918c:	9200      	str	r2, [sp, #0]
 802918e:	0021      	movs	r1, r4
 8029190:	003a      	movs	r2, r7
 8029192:	4b06      	ldr	r3, [pc, #24]	; (80291ac <_svfiprintf_r+0x1fc>)
 8029194:	9803      	ldr	r0, [sp, #12]
 8029196:	f000 f87b 	bl	8029290 <_printf_i>
 802919a:	e7ea      	b.n	8029172 <_svfiprintf_r+0x1c2>
 802919c:	0802bd5d 	.word	0x0802bd5d
 80291a0:	0802bd63 	.word	0x0802bd63
 80291a4:	0802bd67 	.word	0x0802bd67
 80291a8:	00000000 	.word	0x00000000
 80291ac:	08028eed 	.word	0x08028eed

080291b0 <_printf_common>:
 80291b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80291b2:	0016      	movs	r6, r2
 80291b4:	9301      	str	r3, [sp, #4]
 80291b6:	688a      	ldr	r2, [r1, #8]
 80291b8:	690b      	ldr	r3, [r1, #16]
 80291ba:	000c      	movs	r4, r1
 80291bc:	9000      	str	r0, [sp, #0]
 80291be:	4293      	cmp	r3, r2
 80291c0:	da00      	bge.n	80291c4 <_printf_common+0x14>
 80291c2:	0013      	movs	r3, r2
 80291c4:	0022      	movs	r2, r4
 80291c6:	6033      	str	r3, [r6, #0]
 80291c8:	3243      	adds	r2, #67	; 0x43
 80291ca:	7812      	ldrb	r2, [r2, #0]
 80291cc:	2a00      	cmp	r2, #0
 80291ce:	d001      	beq.n	80291d4 <_printf_common+0x24>
 80291d0:	3301      	adds	r3, #1
 80291d2:	6033      	str	r3, [r6, #0]
 80291d4:	6823      	ldr	r3, [r4, #0]
 80291d6:	069b      	lsls	r3, r3, #26
 80291d8:	d502      	bpl.n	80291e0 <_printf_common+0x30>
 80291da:	6833      	ldr	r3, [r6, #0]
 80291dc:	3302      	adds	r3, #2
 80291de:	6033      	str	r3, [r6, #0]
 80291e0:	6822      	ldr	r2, [r4, #0]
 80291e2:	2306      	movs	r3, #6
 80291e4:	0015      	movs	r5, r2
 80291e6:	401d      	ands	r5, r3
 80291e8:	421a      	tst	r2, r3
 80291ea:	d027      	beq.n	802923c <_printf_common+0x8c>
 80291ec:	0023      	movs	r3, r4
 80291ee:	3343      	adds	r3, #67	; 0x43
 80291f0:	781b      	ldrb	r3, [r3, #0]
 80291f2:	1e5a      	subs	r2, r3, #1
 80291f4:	4193      	sbcs	r3, r2
 80291f6:	6822      	ldr	r2, [r4, #0]
 80291f8:	0692      	lsls	r2, r2, #26
 80291fa:	d430      	bmi.n	802925e <_printf_common+0xae>
 80291fc:	0022      	movs	r2, r4
 80291fe:	9901      	ldr	r1, [sp, #4]
 8029200:	9800      	ldr	r0, [sp, #0]
 8029202:	9d08      	ldr	r5, [sp, #32]
 8029204:	3243      	adds	r2, #67	; 0x43
 8029206:	47a8      	blx	r5
 8029208:	3001      	adds	r0, #1
 802920a:	d025      	beq.n	8029258 <_printf_common+0xa8>
 802920c:	2206      	movs	r2, #6
 802920e:	6823      	ldr	r3, [r4, #0]
 8029210:	2500      	movs	r5, #0
 8029212:	4013      	ands	r3, r2
 8029214:	2b04      	cmp	r3, #4
 8029216:	d105      	bne.n	8029224 <_printf_common+0x74>
 8029218:	6833      	ldr	r3, [r6, #0]
 802921a:	68e5      	ldr	r5, [r4, #12]
 802921c:	1aed      	subs	r5, r5, r3
 802921e:	43eb      	mvns	r3, r5
 8029220:	17db      	asrs	r3, r3, #31
 8029222:	401d      	ands	r5, r3
 8029224:	68a3      	ldr	r3, [r4, #8]
 8029226:	6922      	ldr	r2, [r4, #16]
 8029228:	4293      	cmp	r3, r2
 802922a:	dd01      	ble.n	8029230 <_printf_common+0x80>
 802922c:	1a9b      	subs	r3, r3, r2
 802922e:	18ed      	adds	r5, r5, r3
 8029230:	2600      	movs	r6, #0
 8029232:	42b5      	cmp	r5, r6
 8029234:	d120      	bne.n	8029278 <_printf_common+0xc8>
 8029236:	2000      	movs	r0, #0
 8029238:	e010      	b.n	802925c <_printf_common+0xac>
 802923a:	3501      	adds	r5, #1
 802923c:	68e3      	ldr	r3, [r4, #12]
 802923e:	6832      	ldr	r2, [r6, #0]
 8029240:	1a9b      	subs	r3, r3, r2
 8029242:	42ab      	cmp	r3, r5
 8029244:	ddd2      	ble.n	80291ec <_printf_common+0x3c>
 8029246:	0022      	movs	r2, r4
 8029248:	2301      	movs	r3, #1
 802924a:	9901      	ldr	r1, [sp, #4]
 802924c:	9800      	ldr	r0, [sp, #0]
 802924e:	9f08      	ldr	r7, [sp, #32]
 8029250:	3219      	adds	r2, #25
 8029252:	47b8      	blx	r7
 8029254:	3001      	adds	r0, #1
 8029256:	d1f0      	bne.n	802923a <_printf_common+0x8a>
 8029258:	2001      	movs	r0, #1
 802925a:	4240      	negs	r0, r0
 802925c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802925e:	2030      	movs	r0, #48	; 0x30
 8029260:	18e1      	adds	r1, r4, r3
 8029262:	3143      	adds	r1, #67	; 0x43
 8029264:	7008      	strb	r0, [r1, #0]
 8029266:	0021      	movs	r1, r4
 8029268:	1c5a      	adds	r2, r3, #1
 802926a:	3145      	adds	r1, #69	; 0x45
 802926c:	7809      	ldrb	r1, [r1, #0]
 802926e:	18a2      	adds	r2, r4, r2
 8029270:	3243      	adds	r2, #67	; 0x43
 8029272:	3302      	adds	r3, #2
 8029274:	7011      	strb	r1, [r2, #0]
 8029276:	e7c1      	b.n	80291fc <_printf_common+0x4c>
 8029278:	0022      	movs	r2, r4
 802927a:	2301      	movs	r3, #1
 802927c:	9901      	ldr	r1, [sp, #4]
 802927e:	9800      	ldr	r0, [sp, #0]
 8029280:	9f08      	ldr	r7, [sp, #32]
 8029282:	321a      	adds	r2, #26
 8029284:	47b8      	blx	r7
 8029286:	3001      	adds	r0, #1
 8029288:	d0e6      	beq.n	8029258 <_printf_common+0xa8>
 802928a:	3601      	adds	r6, #1
 802928c:	e7d1      	b.n	8029232 <_printf_common+0x82>
	...

08029290 <_printf_i>:
 8029290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029292:	b08b      	sub	sp, #44	; 0x2c
 8029294:	9206      	str	r2, [sp, #24]
 8029296:	000a      	movs	r2, r1
 8029298:	3243      	adds	r2, #67	; 0x43
 802929a:	9307      	str	r3, [sp, #28]
 802929c:	9005      	str	r0, [sp, #20]
 802929e:	9204      	str	r2, [sp, #16]
 80292a0:	7e0a      	ldrb	r2, [r1, #24]
 80292a2:	000c      	movs	r4, r1
 80292a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80292a6:	2a78      	cmp	r2, #120	; 0x78
 80292a8:	d809      	bhi.n	80292be <_printf_i+0x2e>
 80292aa:	2a62      	cmp	r2, #98	; 0x62
 80292ac:	d80b      	bhi.n	80292c6 <_printf_i+0x36>
 80292ae:	2a00      	cmp	r2, #0
 80292b0:	d100      	bne.n	80292b4 <_printf_i+0x24>
 80292b2:	e0be      	b.n	8029432 <_printf_i+0x1a2>
 80292b4:	497c      	ldr	r1, [pc, #496]	; (80294a8 <_printf_i+0x218>)
 80292b6:	9103      	str	r1, [sp, #12]
 80292b8:	2a58      	cmp	r2, #88	; 0x58
 80292ba:	d100      	bne.n	80292be <_printf_i+0x2e>
 80292bc:	e093      	b.n	80293e6 <_printf_i+0x156>
 80292be:	0026      	movs	r6, r4
 80292c0:	3642      	adds	r6, #66	; 0x42
 80292c2:	7032      	strb	r2, [r6, #0]
 80292c4:	e022      	b.n	802930c <_printf_i+0x7c>
 80292c6:	0010      	movs	r0, r2
 80292c8:	3863      	subs	r0, #99	; 0x63
 80292ca:	2815      	cmp	r0, #21
 80292cc:	d8f7      	bhi.n	80292be <_printf_i+0x2e>
 80292ce:	f7dc ff99 	bl	8006204 <__gnu_thumb1_case_shi>
 80292d2:	0016      	.short	0x0016
 80292d4:	fff6001f 	.word	0xfff6001f
 80292d8:	fff6fff6 	.word	0xfff6fff6
 80292dc:	001ffff6 	.word	0x001ffff6
 80292e0:	fff6fff6 	.word	0xfff6fff6
 80292e4:	fff6fff6 	.word	0xfff6fff6
 80292e8:	003600a3 	.word	0x003600a3
 80292ec:	fff60083 	.word	0xfff60083
 80292f0:	00b4fff6 	.word	0x00b4fff6
 80292f4:	0036fff6 	.word	0x0036fff6
 80292f8:	fff6fff6 	.word	0xfff6fff6
 80292fc:	0087      	.short	0x0087
 80292fe:	0026      	movs	r6, r4
 8029300:	681a      	ldr	r2, [r3, #0]
 8029302:	3642      	adds	r6, #66	; 0x42
 8029304:	1d11      	adds	r1, r2, #4
 8029306:	6019      	str	r1, [r3, #0]
 8029308:	6813      	ldr	r3, [r2, #0]
 802930a:	7033      	strb	r3, [r6, #0]
 802930c:	2301      	movs	r3, #1
 802930e:	e0a2      	b.n	8029456 <_printf_i+0x1c6>
 8029310:	6818      	ldr	r0, [r3, #0]
 8029312:	6809      	ldr	r1, [r1, #0]
 8029314:	1d02      	adds	r2, r0, #4
 8029316:	060d      	lsls	r5, r1, #24
 8029318:	d50b      	bpl.n	8029332 <_printf_i+0xa2>
 802931a:	6805      	ldr	r5, [r0, #0]
 802931c:	601a      	str	r2, [r3, #0]
 802931e:	2d00      	cmp	r5, #0
 8029320:	da03      	bge.n	802932a <_printf_i+0x9a>
 8029322:	232d      	movs	r3, #45	; 0x2d
 8029324:	9a04      	ldr	r2, [sp, #16]
 8029326:	426d      	negs	r5, r5
 8029328:	7013      	strb	r3, [r2, #0]
 802932a:	4b5f      	ldr	r3, [pc, #380]	; (80294a8 <_printf_i+0x218>)
 802932c:	270a      	movs	r7, #10
 802932e:	9303      	str	r3, [sp, #12]
 8029330:	e01b      	b.n	802936a <_printf_i+0xda>
 8029332:	6805      	ldr	r5, [r0, #0]
 8029334:	601a      	str	r2, [r3, #0]
 8029336:	0649      	lsls	r1, r1, #25
 8029338:	d5f1      	bpl.n	802931e <_printf_i+0x8e>
 802933a:	b22d      	sxth	r5, r5
 802933c:	e7ef      	b.n	802931e <_printf_i+0x8e>
 802933e:	680d      	ldr	r5, [r1, #0]
 8029340:	6819      	ldr	r1, [r3, #0]
 8029342:	1d08      	adds	r0, r1, #4
 8029344:	6018      	str	r0, [r3, #0]
 8029346:	062e      	lsls	r6, r5, #24
 8029348:	d501      	bpl.n	802934e <_printf_i+0xbe>
 802934a:	680d      	ldr	r5, [r1, #0]
 802934c:	e003      	b.n	8029356 <_printf_i+0xc6>
 802934e:	066d      	lsls	r5, r5, #25
 8029350:	d5fb      	bpl.n	802934a <_printf_i+0xba>
 8029352:	680d      	ldr	r5, [r1, #0]
 8029354:	b2ad      	uxth	r5, r5
 8029356:	4b54      	ldr	r3, [pc, #336]	; (80294a8 <_printf_i+0x218>)
 8029358:	2708      	movs	r7, #8
 802935a:	9303      	str	r3, [sp, #12]
 802935c:	2a6f      	cmp	r2, #111	; 0x6f
 802935e:	d000      	beq.n	8029362 <_printf_i+0xd2>
 8029360:	3702      	adds	r7, #2
 8029362:	0023      	movs	r3, r4
 8029364:	2200      	movs	r2, #0
 8029366:	3343      	adds	r3, #67	; 0x43
 8029368:	701a      	strb	r2, [r3, #0]
 802936a:	6863      	ldr	r3, [r4, #4]
 802936c:	60a3      	str	r3, [r4, #8]
 802936e:	2b00      	cmp	r3, #0
 8029370:	db03      	blt.n	802937a <_printf_i+0xea>
 8029372:	2104      	movs	r1, #4
 8029374:	6822      	ldr	r2, [r4, #0]
 8029376:	438a      	bics	r2, r1
 8029378:	6022      	str	r2, [r4, #0]
 802937a:	2d00      	cmp	r5, #0
 802937c:	d102      	bne.n	8029384 <_printf_i+0xf4>
 802937e:	9e04      	ldr	r6, [sp, #16]
 8029380:	2b00      	cmp	r3, #0
 8029382:	d00c      	beq.n	802939e <_printf_i+0x10e>
 8029384:	9e04      	ldr	r6, [sp, #16]
 8029386:	0028      	movs	r0, r5
 8029388:	0039      	movs	r1, r7
 802938a:	f7dc ffcb 	bl	8006324 <__aeabi_uidivmod>
 802938e:	9b03      	ldr	r3, [sp, #12]
 8029390:	3e01      	subs	r6, #1
 8029392:	5c5b      	ldrb	r3, [r3, r1]
 8029394:	7033      	strb	r3, [r6, #0]
 8029396:	002b      	movs	r3, r5
 8029398:	0005      	movs	r5, r0
 802939a:	429f      	cmp	r7, r3
 802939c:	d9f3      	bls.n	8029386 <_printf_i+0xf6>
 802939e:	2f08      	cmp	r7, #8
 80293a0:	d109      	bne.n	80293b6 <_printf_i+0x126>
 80293a2:	6823      	ldr	r3, [r4, #0]
 80293a4:	07db      	lsls	r3, r3, #31
 80293a6:	d506      	bpl.n	80293b6 <_printf_i+0x126>
 80293a8:	6862      	ldr	r2, [r4, #4]
 80293aa:	6923      	ldr	r3, [r4, #16]
 80293ac:	429a      	cmp	r2, r3
 80293ae:	dc02      	bgt.n	80293b6 <_printf_i+0x126>
 80293b0:	2330      	movs	r3, #48	; 0x30
 80293b2:	3e01      	subs	r6, #1
 80293b4:	7033      	strb	r3, [r6, #0]
 80293b6:	9b04      	ldr	r3, [sp, #16]
 80293b8:	1b9b      	subs	r3, r3, r6
 80293ba:	6123      	str	r3, [r4, #16]
 80293bc:	9b07      	ldr	r3, [sp, #28]
 80293be:	0021      	movs	r1, r4
 80293c0:	9300      	str	r3, [sp, #0]
 80293c2:	9805      	ldr	r0, [sp, #20]
 80293c4:	9b06      	ldr	r3, [sp, #24]
 80293c6:	aa09      	add	r2, sp, #36	; 0x24
 80293c8:	f7ff fef2 	bl	80291b0 <_printf_common>
 80293cc:	3001      	adds	r0, #1
 80293ce:	d147      	bne.n	8029460 <_printf_i+0x1d0>
 80293d0:	2001      	movs	r0, #1
 80293d2:	4240      	negs	r0, r0
 80293d4:	b00b      	add	sp, #44	; 0x2c
 80293d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80293d8:	2220      	movs	r2, #32
 80293da:	6809      	ldr	r1, [r1, #0]
 80293dc:	430a      	orrs	r2, r1
 80293de:	6022      	str	r2, [r4, #0]
 80293e0:	2278      	movs	r2, #120	; 0x78
 80293e2:	4932      	ldr	r1, [pc, #200]	; (80294ac <_printf_i+0x21c>)
 80293e4:	9103      	str	r1, [sp, #12]
 80293e6:	0021      	movs	r1, r4
 80293e8:	3145      	adds	r1, #69	; 0x45
 80293ea:	700a      	strb	r2, [r1, #0]
 80293ec:	6819      	ldr	r1, [r3, #0]
 80293ee:	6822      	ldr	r2, [r4, #0]
 80293f0:	c920      	ldmia	r1!, {r5}
 80293f2:	0610      	lsls	r0, r2, #24
 80293f4:	d402      	bmi.n	80293fc <_printf_i+0x16c>
 80293f6:	0650      	lsls	r0, r2, #25
 80293f8:	d500      	bpl.n	80293fc <_printf_i+0x16c>
 80293fa:	b2ad      	uxth	r5, r5
 80293fc:	6019      	str	r1, [r3, #0]
 80293fe:	07d3      	lsls	r3, r2, #31
 8029400:	d502      	bpl.n	8029408 <_printf_i+0x178>
 8029402:	2320      	movs	r3, #32
 8029404:	4313      	orrs	r3, r2
 8029406:	6023      	str	r3, [r4, #0]
 8029408:	2710      	movs	r7, #16
 802940a:	2d00      	cmp	r5, #0
 802940c:	d1a9      	bne.n	8029362 <_printf_i+0xd2>
 802940e:	2220      	movs	r2, #32
 8029410:	6823      	ldr	r3, [r4, #0]
 8029412:	4393      	bics	r3, r2
 8029414:	6023      	str	r3, [r4, #0]
 8029416:	e7a4      	b.n	8029362 <_printf_i+0xd2>
 8029418:	681a      	ldr	r2, [r3, #0]
 802941a:	680d      	ldr	r5, [r1, #0]
 802941c:	1d10      	adds	r0, r2, #4
 802941e:	6949      	ldr	r1, [r1, #20]
 8029420:	6018      	str	r0, [r3, #0]
 8029422:	6813      	ldr	r3, [r2, #0]
 8029424:	062e      	lsls	r6, r5, #24
 8029426:	d501      	bpl.n	802942c <_printf_i+0x19c>
 8029428:	6019      	str	r1, [r3, #0]
 802942a:	e002      	b.n	8029432 <_printf_i+0x1a2>
 802942c:	066d      	lsls	r5, r5, #25
 802942e:	d5fb      	bpl.n	8029428 <_printf_i+0x198>
 8029430:	8019      	strh	r1, [r3, #0]
 8029432:	2300      	movs	r3, #0
 8029434:	9e04      	ldr	r6, [sp, #16]
 8029436:	6123      	str	r3, [r4, #16]
 8029438:	e7c0      	b.n	80293bc <_printf_i+0x12c>
 802943a:	681a      	ldr	r2, [r3, #0]
 802943c:	1d11      	adds	r1, r2, #4
 802943e:	6019      	str	r1, [r3, #0]
 8029440:	6816      	ldr	r6, [r2, #0]
 8029442:	2100      	movs	r1, #0
 8029444:	0030      	movs	r0, r6
 8029446:	6862      	ldr	r2, [r4, #4]
 8029448:	f000 f90b 	bl	8029662 <memchr>
 802944c:	2800      	cmp	r0, #0
 802944e:	d001      	beq.n	8029454 <_printf_i+0x1c4>
 8029450:	1b80      	subs	r0, r0, r6
 8029452:	6060      	str	r0, [r4, #4]
 8029454:	6863      	ldr	r3, [r4, #4]
 8029456:	6123      	str	r3, [r4, #16]
 8029458:	2300      	movs	r3, #0
 802945a:	9a04      	ldr	r2, [sp, #16]
 802945c:	7013      	strb	r3, [r2, #0]
 802945e:	e7ad      	b.n	80293bc <_printf_i+0x12c>
 8029460:	0032      	movs	r2, r6
 8029462:	6923      	ldr	r3, [r4, #16]
 8029464:	9906      	ldr	r1, [sp, #24]
 8029466:	9805      	ldr	r0, [sp, #20]
 8029468:	9d07      	ldr	r5, [sp, #28]
 802946a:	47a8      	blx	r5
 802946c:	3001      	adds	r0, #1
 802946e:	d0af      	beq.n	80293d0 <_printf_i+0x140>
 8029470:	6823      	ldr	r3, [r4, #0]
 8029472:	079b      	lsls	r3, r3, #30
 8029474:	d415      	bmi.n	80294a2 <_printf_i+0x212>
 8029476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029478:	68e0      	ldr	r0, [r4, #12]
 802947a:	4298      	cmp	r0, r3
 802947c:	daaa      	bge.n	80293d4 <_printf_i+0x144>
 802947e:	0018      	movs	r0, r3
 8029480:	e7a8      	b.n	80293d4 <_printf_i+0x144>
 8029482:	0022      	movs	r2, r4
 8029484:	2301      	movs	r3, #1
 8029486:	9906      	ldr	r1, [sp, #24]
 8029488:	9805      	ldr	r0, [sp, #20]
 802948a:	9e07      	ldr	r6, [sp, #28]
 802948c:	3219      	adds	r2, #25
 802948e:	47b0      	blx	r6
 8029490:	3001      	adds	r0, #1
 8029492:	d09d      	beq.n	80293d0 <_printf_i+0x140>
 8029494:	3501      	adds	r5, #1
 8029496:	68e3      	ldr	r3, [r4, #12]
 8029498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802949a:	1a9b      	subs	r3, r3, r2
 802949c:	42ab      	cmp	r3, r5
 802949e:	dcf0      	bgt.n	8029482 <_printf_i+0x1f2>
 80294a0:	e7e9      	b.n	8029476 <_printf_i+0x1e6>
 80294a2:	2500      	movs	r5, #0
 80294a4:	e7f7      	b.n	8029496 <_printf_i+0x206>
 80294a6:	46c0      	nop			; (mov r8, r8)
 80294a8:	0802bd6e 	.word	0x0802bd6e
 80294ac:	0802bd7f 	.word	0x0802bd7f

080294b0 <__sflush_r>:
 80294b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80294b2:	898b      	ldrh	r3, [r1, #12]
 80294b4:	0005      	movs	r5, r0
 80294b6:	000c      	movs	r4, r1
 80294b8:	071a      	lsls	r2, r3, #28
 80294ba:	d45c      	bmi.n	8029576 <__sflush_r+0xc6>
 80294bc:	684a      	ldr	r2, [r1, #4]
 80294be:	2a00      	cmp	r2, #0
 80294c0:	dc04      	bgt.n	80294cc <__sflush_r+0x1c>
 80294c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80294c4:	2a00      	cmp	r2, #0
 80294c6:	dc01      	bgt.n	80294cc <__sflush_r+0x1c>
 80294c8:	2000      	movs	r0, #0
 80294ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80294cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80294ce:	2f00      	cmp	r7, #0
 80294d0:	d0fa      	beq.n	80294c8 <__sflush_r+0x18>
 80294d2:	2200      	movs	r2, #0
 80294d4:	2080      	movs	r0, #128	; 0x80
 80294d6:	682e      	ldr	r6, [r5, #0]
 80294d8:	602a      	str	r2, [r5, #0]
 80294da:	001a      	movs	r2, r3
 80294dc:	0140      	lsls	r0, r0, #5
 80294de:	6a21      	ldr	r1, [r4, #32]
 80294e0:	4002      	ands	r2, r0
 80294e2:	4203      	tst	r3, r0
 80294e4:	d034      	beq.n	8029550 <__sflush_r+0xa0>
 80294e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80294e8:	89a3      	ldrh	r3, [r4, #12]
 80294ea:	075b      	lsls	r3, r3, #29
 80294ec:	d506      	bpl.n	80294fc <__sflush_r+0x4c>
 80294ee:	6863      	ldr	r3, [r4, #4]
 80294f0:	1ac0      	subs	r0, r0, r3
 80294f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80294f4:	2b00      	cmp	r3, #0
 80294f6:	d001      	beq.n	80294fc <__sflush_r+0x4c>
 80294f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80294fa:	1ac0      	subs	r0, r0, r3
 80294fc:	0002      	movs	r2, r0
 80294fe:	2300      	movs	r3, #0
 8029500:	0028      	movs	r0, r5
 8029502:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8029504:	6a21      	ldr	r1, [r4, #32]
 8029506:	47b8      	blx	r7
 8029508:	89a2      	ldrh	r2, [r4, #12]
 802950a:	1c43      	adds	r3, r0, #1
 802950c:	d106      	bne.n	802951c <__sflush_r+0x6c>
 802950e:	6829      	ldr	r1, [r5, #0]
 8029510:	291d      	cmp	r1, #29
 8029512:	d82c      	bhi.n	802956e <__sflush_r+0xbe>
 8029514:	4b2a      	ldr	r3, [pc, #168]	; (80295c0 <__sflush_r+0x110>)
 8029516:	410b      	asrs	r3, r1
 8029518:	07db      	lsls	r3, r3, #31
 802951a:	d428      	bmi.n	802956e <__sflush_r+0xbe>
 802951c:	2300      	movs	r3, #0
 802951e:	6063      	str	r3, [r4, #4]
 8029520:	6923      	ldr	r3, [r4, #16]
 8029522:	6023      	str	r3, [r4, #0]
 8029524:	04d2      	lsls	r2, r2, #19
 8029526:	d505      	bpl.n	8029534 <__sflush_r+0x84>
 8029528:	1c43      	adds	r3, r0, #1
 802952a:	d102      	bne.n	8029532 <__sflush_r+0x82>
 802952c:	682b      	ldr	r3, [r5, #0]
 802952e:	2b00      	cmp	r3, #0
 8029530:	d100      	bne.n	8029534 <__sflush_r+0x84>
 8029532:	6560      	str	r0, [r4, #84]	; 0x54
 8029534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029536:	602e      	str	r6, [r5, #0]
 8029538:	2900      	cmp	r1, #0
 802953a:	d0c5      	beq.n	80294c8 <__sflush_r+0x18>
 802953c:	0023      	movs	r3, r4
 802953e:	3344      	adds	r3, #68	; 0x44
 8029540:	4299      	cmp	r1, r3
 8029542:	d002      	beq.n	802954a <__sflush_r+0x9a>
 8029544:	0028      	movs	r0, r5
 8029546:	f7fe fc51 	bl	8027dec <_free_r>
 802954a:	2000      	movs	r0, #0
 802954c:	6360      	str	r0, [r4, #52]	; 0x34
 802954e:	e7bc      	b.n	80294ca <__sflush_r+0x1a>
 8029550:	2301      	movs	r3, #1
 8029552:	0028      	movs	r0, r5
 8029554:	47b8      	blx	r7
 8029556:	1c43      	adds	r3, r0, #1
 8029558:	d1c6      	bne.n	80294e8 <__sflush_r+0x38>
 802955a:	682b      	ldr	r3, [r5, #0]
 802955c:	2b00      	cmp	r3, #0
 802955e:	d0c3      	beq.n	80294e8 <__sflush_r+0x38>
 8029560:	2b1d      	cmp	r3, #29
 8029562:	d001      	beq.n	8029568 <__sflush_r+0xb8>
 8029564:	2b16      	cmp	r3, #22
 8029566:	d101      	bne.n	802956c <__sflush_r+0xbc>
 8029568:	602e      	str	r6, [r5, #0]
 802956a:	e7ad      	b.n	80294c8 <__sflush_r+0x18>
 802956c:	89a2      	ldrh	r2, [r4, #12]
 802956e:	2340      	movs	r3, #64	; 0x40
 8029570:	4313      	orrs	r3, r2
 8029572:	81a3      	strh	r3, [r4, #12]
 8029574:	e7a9      	b.n	80294ca <__sflush_r+0x1a>
 8029576:	690e      	ldr	r6, [r1, #16]
 8029578:	2e00      	cmp	r6, #0
 802957a:	d0a5      	beq.n	80294c8 <__sflush_r+0x18>
 802957c:	680f      	ldr	r7, [r1, #0]
 802957e:	600e      	str	r6, [r1, #0]
 8029580:	1bba      	subs	r2, r7, r6
 8029582:	9201      	str	r2, [sp, #4]
 8029584:	2200      	movs	r2, #0
 8029586:	079b      	lsls	r3, r3, #30
 8029588:	d100      	bne.n	802958c <__sflush_r+0xdc>
 802958a:	694a      	ldr	r2, [r1, #20]
 802958c:	60a2      	str	r2, [r4, #8]
 802958e:	9b01      	ldr	r3, [sp, #4]
 8029590:	2b00      	cmp	r3, #0
 8029592:	dd99      	ble.n	80294c8 <__sflush_r+0x18>
 8029594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8029596:	0032      	movs	r2, r6
 8029598:	001f      	movs	r7, r3
 802959a:	0028      	movs	r0, r5
 802959c:	9b01      	ldr	r3, [sp, #4]
 802959e:	6a21      	ldr	r1, [r4, #32]
 80295a0:	47b8      	blx	r7
 80295a2:	2800      	cmp	r0, #0
 80295a4:	dc06      	bgt.n	80295b4 <__sflush_r+0x104>
 80295a6:	2340      	movs	r3, #64	; 0x40
 80295a8:	2001      	movs	r0, #1
 80295aa:	89a2      	ldrh	r2, [r4, #12]
 80295ac:	4240      	negs	r0, r0
 80295ae:	4313      	orrs	r3, r2
 80295b0:	81a3      	strh	r3, [r4, #12]
 80295b2:	e78a      	b.n	80294ca <__sflush_r+0x1a>
 80295b4:	9b01      	ldr	r3, [sp, #4]
 80295b6:	1836      	adds	r6, r6, r0
 80295b8:	1a1b      	subs	r3, r3, r0
 80295ba:	9301      	str	r3, [sp, #4]
 80295bc:	e7e7      	b.n	802958e <__sflush_r+0xde>
 80295be:	46c0      	nop			; (mov r8, r8)
 80295c0:	dfbffffe 	.word	0xdfbffffe

080295c4 <_fflush_r>:
 80295c4:	690b      	ldr	r3, [r1, #16]
 80295c6:	b570      	push	{r4, r5, r6, lr}
 80295c8:	0005      	movs	r5, r0
 80295ca:	000c      	movs	r4, r1
 80295cc:	2b00      	cmp	r3, #0
 80295ce:	d102      	bne.n	80295d6 <_fflush_r+0x12>
 80295d0:	2500      	movs	r5, #0
 80295d2:	0028      	movs	r0, r5
 80295d4:	bd70      	pop	{r4, r5, r6, pc}
 80295d6:	2800      	cmp	r0, #0
 80295d8:	d004      	beq.n	80295e4 <_fflush_r+0x20>
 80295da:	6a03      	ldr	r3, [r0, #32]
 80295dc:	2b00      	cmp	r3, #0
 80295de:	d101      	bne.n	80295e4 <_fflush_r+0x20>
 80295e0:	f7fe f96a 	bl	80278b8 <__sinit>
 80295e4:	220c      	movs	r2, #12
 80295e6:	5ea3      	ldrsh	r3, [r4, r2]
 80295e8:	2b00      	cmp	r3, #0
 80295ea:	d0f1      	beq.n	80295d0 <_fflush_r+0xc>
 80295ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80295ee:	07d2      	lsls	r2, r2, #31
 80295f0:	d404      	bmi.n	80295fc <_fflush_r+0x38>
 80295f2:	059b      	lsls	r3, r3, #22
 80295f4:	d402      	bmi.n	80295fc <_fflush_r+0x38>
 80295f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80295f8:	f7fe fbb9 	bl	8027d6e <__retarget_lock_acquire_recursive>
 80295fc:	0028      	movs	r0, r5
 80295fe:	0021      	movs	r1, r4
 8029600:	f7ff ff56 	bl	80294b0 <__sflush_r>
 8029604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029606:	0005      	movs	r5, r0
 8029608:	07db      	lsls	r3, r3, #31
 802960a:	d4e2      	bmi.n	80295d2 <_fflush_r+0xe>
 802960c:	89a3      	ldrh	r3, [r4, #12]
 802960e:	059b      	lsls	r3, r3, #22
 8029610:	d4df      	bmi.n	80295d2 <_fflush_r+0xe>
 8029612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029614:	f7fe fbac 	bl	8027d70 <__retarget_lock_release_recursive>
 8029618:	e7db      	b.n	80295d2 <_fflush_r+0xe>
	...

0802961c <fiprintf>:
 802961c:	b40e      	push	{r1, r2, r3}
 802961e:	b517      	push	{r0, r1, r2, r4, lr}
 8029620:	4c05      	ldr	r4, [pc, #20]	; (8029638 <fiprintf+0x1c>)
 8029622:	ab05      	add	r3, sp, #20
 8029624:	cb04      	ldmia	r3!, {r2}
 8029626:	0001      	movs	r1, r0
 8029628:	6820      	ldr	r0, [r4, #0]
 802962a:	9301      	str	r3, [sp, #4]
 802962c:	f000 f8ae 	bl	802978c <_vfiprintf_r>
 8029630:	bc1e      	pop	{r1, r2, r3, r4}
 8029632:	bc08      	pop	{r3}
 8029634:	b003      	add	sp, #12
 8029636:	4718      	bx	r3
 8029638:	20000488 	.word	0x20000488

0802963c <memmove>:
 802963c:	b510      	push	{r4, lr}
 802963e:	4288      	cmp	r0, r1
 8029640:	d902      	bls.n	8029648 <memmove+0xc>
 8029642:	188b      	adds	r3, r1, r2
 8029644:	4298      	cmp	r0, r3
 8029646:	d303      	bcc.n	8029650 <memmove+0x14>
 8029648:	2300      	movs	r3, #0
 802964a:	e007      	b.n	802965c <memmove+0x20>
 802964c:	5c8b      	ldrb	r3, [r1, r2]
 802964e:	5483      	strb	r3, [r0, r2]
 8029650:	3a01      	subs	r2, #1
 8029652:	d2fb      	bcs.n	802964c <memmove+0x10>
 8029654:	bd10      	pop	{r4, pc}
 8029656:	5ccc      	ldrb	r4, [r1, r3]
 8029658:	54c4      	strb	r4, [r0, r3]
 802965a:	3301      	adds	r3, #1
 802965c:	429a      	cmp	r2, r3
 802965e:	d1fa      	bne.n	8029656 <memmove+0x1a>
 8029660:	e7f8      	b.n	8029654 <memmove+0x18>

08029662 <memchr>:
 8029662:	b2c9      	uxtb	r1, r1
 8029664:	1882      	adds	r2, r0, r2
 8029666:	4290      	cmp	r0, r2
 8029668:	d101      	bne.n	802966e <memchr+0xc>
 802966a:	2000      	movs	r0, #0
 802966c:	4770      	bx	lr
 802966e:	7803      	ldrb	r3, [r0, #0]
 8029670:	428b      	cmp	r3, r1
 8029672:	d0fb      	beq.n	802966c <memchr+0xa>
 8029674:	3001      	adds	r0, #1
 8029676:	e7f6      	b.n	8029666 <memchr+0x4>

08029678 <abort>:
 8029678:	2006      	movs	r0, #6
 802967a:	b510      	push	{r4, lr}
 802967c:	f000 fa72 	bl	8029b64 <raise>
 8029680:	2001      	movs	r0, #1
 8029682:	f7e2 ff00 	bl	800c486 <_exit>

08029686 <_calloc_r>:
 8029686:	b570      	push	{r4, r5, r6, lr}
 8029688:	0c0b      	lsrs	r3, r1, #16
 802968a:	0c15      	lsrs	r5, r2, #16
 802968c:	2b00      	cmp	r3, #0
 802968e:	d11e      	bne.n	80296ce <_calloc_r+0x48>
 8029690:	2d00      	cmp	r5, #0
 8029692:	d10c      	bne.n	80296ae <_calloc_r+0x28>
 8029694:	b289      	uxth	r1, r1
 8029696:	b294      	uxth	r4, r2
 8029698:	434c      	muls	r4, r1
 802969a:	0021      	movs	r1, r4
 802969c:	f7fd f9ba 	bl	8026a14 <_malloc_r>
 80296a0:	1e05      	subs	r5, r0, #0
 80296a2:	d01b      	beq.n	80296dc <_calloc_r+0x56>
 80296a4:	0022      	movs	r2, r4
 80296a6:	2100      	movs	r1, #0
 80296a8:	f7fe f9da 	bl	8027a60 <memset>
 80296ac:	e016      	b.n	80296dc <_calloc_r+0x56>
 80296ae:	1c2b      	adds	r3, r5, #0
 80296b0:	1c0c      	adds	r4, r1, #0
 80296b2:	b289      	uxth	r1, r1
 80296b4:	b292      	uxth	r2, r2
 80296b6:	434a      	muls	r2, r1
 80296b8:	b2a1      	uxth	r1, r4
 80296ba:	b29c      	uxth	r4, r3
 80296bc:	434c      	muls	r4, r1
 80296be:	0c13      	lsrs	r3, r2, #16
 80296c0:	18e4      	adds	r4, r4, r3
 80296c2:	0c23      	lsrs	r3, r4, #16
 80296c4:	d107      	bne.n	80296d6 <_calloc_r+0x50>
 80296c6:	0424      	lsls	r4, r4, #16
 80296c8:	b292      	uxth	r2, r2
 80296ca:	4314      	orrs	r4, r2
 80296cc:	e7e5      	b.n	802969a <_calloc_r+0x14>
 80296ce:	2d00      	cmp	r5, #0
 80296d0:	d101      	bne.n	80296d6 <_calloc_r+0x50>
 80296d2:	1c14      	adds	r4, r2, #0
 80296d4:	e7ed      	b.n	80296b2 <_calloc_r+0x2c>
 80296d6:	230c      	movs	r3, #12
 80296d8:	2500      	movs	r5, #0
 80296da:	6003      	str	r3, [r0, #0]
 80296dc:	0028      	movs	r0, r5
 80296de:	bd70      	pop	{r4, r5, r6, pc}

080296e0 <_realloc_r>:
 80296e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80296e2:	0007      	movs	r7, r0
 80296e4:	000e      	movs	r6, r1
 80296e6:	0014      	movs	r4, r2
 80296e8:	2900      	cmp	r1, #0
 80296ea:	d105      	bne.n	80296f8 <_realloc_r+0x18>
 80296ec:	0011      	movs	r1, r2
 80296ee:	f7fd f991 	bl	8026a14 <_malloc_r>
 80296f2:	0005      	movs	r5, r0
 80296f4:	0028      	movs	r0, r5
 80296f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80296f8:	2a00      	cmp	r2, #0
 80296fa:	d103      	bne.n	8029704 <_realloc_r+0x24>
 80296fc:	f7fe fb76 	bl	8027dec <_free_r>
 8029700:	0025      	movs	r5, r4
 8029702:	e7f7      	b.n	80296f4 <_realloc_r+0x14>
 8029704:	f000 fa4e 	bl	8029ba4 <_malloc_usable_size_r>
 8029708:	9001      	str	r0, [sp, #4]
 802970a:	4284      	cmp	r4, r0
 802970c:	d803      	bhi.n	8029716 <_realloc_r+0x36>
 802970e:	0035      	movs	r5, r6
 8029710:	0843      	lsrs	r3, r0, #1
 8029712:	42a3      	cmp	r3, r4
 8029714:	d3ee      	bcc.n	80296f4 <_realloc_r+0x14>
 8029716:	0021      	movs	r1, r4
 8029718:	0038      	movs	r0, r7
 802971a:	f7fd f97b 	bl	8026a14 <_malloc_r>
 802971e:	1e05      	subs	r5, r0, #0
 8029720:	d0e8      	beq.n	80296f4 <_realloc_r+0x14>
 8029722:	9b01      	ldr	r3, [sp, #4]
 8029724:	0022      	movs	r2, r4
 8029726:	429c      	cmp	r4, r3
 8029728:	d900      	bls.n	802972c <_realloc_r+0x4c>
 802972a:	001a      	movs	r2, r3
 802972c:	0031      	movs	r1, r6
 802972e:	0028      	movs	r0, r5
 8029730:	f7fe fb2f 	bl	8027d92 <memcpy>
 8029734:	0031      	movs	r1, r6
 8029736:	0038      	movs	r0, r7
 8029738:	f7fe fb58 	bl	8027dec <_free_r>
 802973c:	e7da      	b.n	80296f4 <_realloc_r+0x14>

0802973e <__sfputc_r>:
 802973e:	6893      	ldr	r3, [r2, #8]
 8029740:	b510      	push	{r4, lr}
 8029742:	3b01      	subs	r3, #1
 8029744:	6093      	str	r3, [r2, #8]
 8029746:	2b00      	cmp	r3, #0
 8029748:	da04      	bge.n	8029754 <__sfputc_r+0x16>
 802974a:	6994      	ldr	r4, [r2, #24]
 802974c:	42a3      	cmp	r3, r4
 802974e:	db07      	blt.n	8029760 <__sfputc_r+0x22>
 8029750:	290a      	cmp	r1, #10
 8029752:	d005      	beq.n	8029760 <__sfputc_r+0x22>
 8029754:	6813      	ldr	r3, [r2, #0]
 8029756:	1c58      	adds	r0, r3, #1
 8029758:	6010      	str	r0, [r2, #0]
 802975a:	7019      	strb	r1, [r3, #0]
 802975c:	0008      	movs	r0, r1
 802975e:	bd10      	pop	{r4, pc}
 8029760:	f000 f930 	bl	80299c4 <__swbuf_r>
 8029764:	0001      	movs	r1, r0
 8029766:	e7f9      	b.n	802975c <__sfputc_r+0x1e>

08029768 <__sfputs_r>:
 8029768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802976a:	0006      	movs	r6, r0
 802976c:	000f      	movs	r7, r1
 802976e:	0014      	movs	r4, r2
 8029770:	18d5      	adds	r5, r2, r3
 8029772:	42ac      	cmp	r4, r5
 8029774:	d101      	bne.n	802977a <__sfputs_r+0x12>
 8029776:	2000      	movs	r0, #0
 8029778:	e007      	b.n	802978a <__sfputs_r+0x22>
 802977a:	7821      	ldrb	r1, [r4, #0]
 802977c:	003a      	movs	r2, r7
 802977e:	0030      	movs	r0, r6
 8029780:	f7ff ffdd 	bl	802973e <__sfputc_r>
 8029784:	3401      	adds	r4, #1
 8029786:	1c43      	adds	r3, r0, #1
 8029788:	d1f3      	bne.n	8029772 <__sfputs_r+0xa>
 802978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802978c <_vfiprintf_r>:
 802978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802978e:	b0a1      	sub	sp, #132	; 0x84
 8029790:	000f      	movs	r7, r1
 8029792:	0015      	movs	r5, r2
 8029794:	001e      	movs	r6, r3
 8029796:	9003      	str	r0, [sp, #12]
 8029798:	2800      	cmp	r0, #0
 802979a:	d004      	beq.n	80297a6 <_vfiprintf_r+0x1a>
 802979c:	6a03      	ldr	r3, [r0, #32]
 802979e:	2b00      	cmp	r3, #0
 80297a0:	d101      	bne.n	80297a6 <_vfiprintf_r+0x1a>
 80297a2:	f7fe f889 	bl	80278b8 <__sinit>
 80297a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80297a8:	07db      	lsls	r3, r3, #31
 80297aa:	d405      	bmi.n	80297b8 <_vfiprintf_r+0x2c>
 80297ac:	89bb      	ldrh	r3, [r7, #12]
 80297ae:	059b      	lsls	r3, r3, #22
 80297b0:	d402      	bmi.n	80297b8 <_vfiprintf_r+0x2c>
 80297b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80297b4:	f7fe fadb 	bl	8027d6e <__retarget_lock_acquire_recursive>
 80297b8:	89bb      	ldrh	r3, [r7, #12]
 80297ba:	071b      	lsls	r3, r3, #28
 80297bc:	d502      	bpl.n	80297c4 <_vfiprintf_r+0x38>
 80297be:	693b      	ldr	r3, [r7, #16]
 80297c0:	2b00      	cmp	r3, #0
 80297c2:	d113      	bne.n	80297ec <_vfiprintf_r+0x60>
 80297c4:	0039      	movs	r1, r7
 80297c6:	9803      	ldr	r0, [sp, #12]
 80297c8:	f000 f93e 	bl	8029a48 <__swsetup_r>
 80297cc:	2800      	cmp	r0, #0
 80297ce:	d00d      	beq.n	80297ec <_vfiprintf_r+0x60>
 80297d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80297d2:	07db      	lsls	r3, r3, #31
 80297d4:	d503      	bpl.n	80297de <_vfiprintf_r+0x52>
 80297d6:	2001      	movs	r0, #1
 80297d8:	4240      	negs	r0, r0
 80297da:	b021      	add	sp, #132	; 0x84
 80297dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80297de:	89bb      	ldrh	r3, [r7, #12]
 80297e0:	059b      	lsls	r3, r3, #22
 80297e2:	d4f8      	bmi.n	80297d6 <_vfiprintf_r+0x4a>
 80297e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80297e6:	f7fe fac3 	bl	8027d70 <__retarget_lock_release_recursive>
 80297ea:	e7f4      	b.n	80297d6 <_vfiprintf_r+0x4a>
 80297ec:	2300      	movs	r3, #0
 80297ee:	ac08      	add	r4, sp, #32
 80297f0:	6163      	str	r3, [r4, #20]
 80297f2:	3320      	adds	r3, #32
 80297f4:	7663      	strb	r3, [r4, #25]
 80297f6:	3310      	adds	r3, #16
 80297f8:	76a3      	strb	r3, [r4, #26]
 80297fa:	9607      	str	r6, [sp, #28]
 80297fc:	002e      	movs	r6, r5
 80297fe:	7833      	ldrb	r3, [r6, #0]
 8029800:	2b00      	cmp	r3, #0
 8029802:	d001      	beq.n	8029808 <_vfiprintf_r+0x7c>
 8029804:	2b25      	cmp	r3, #37	; 0x25
 8029806:	d148      	bne.n	802989a <_vfiprintf_r+0x10e>
 8029808:	1b73      	subs	r3, r6, r5
 802980a:	9305      	str	r3, [sp, #20]
 802980c:	42ae      	cmp	r6, r5
 802980e:	d00b      	beq.n	8029828 <_vfiprintf_r+0x9c>
 8029810:	002a      	movs	r2, r5
 8029812:	0039      	movs	r1, r7
 8029814:	9803      	ldr	r0, [sp, #12]
 8029816:	f7ff ffa7 	bl	8029768 <__sfputs_r>
 802981a:	3001      	adds	r0, #1
 802981c:	d100      	bne.n	8029820 <_vfiprintf_r+0x94>
 802981e:	e0af      	b.n	8029980 <_vfiprintf_r+0x1f4>
 8029820:	6963      	ldr	r3, [r4, #20]
 8029822:	9a05      	ldr	r2, [sp, #20]
 8029824:	189b      	adds	r3, r3, r2
 8029826:	6163      	str	r3, [r4, #20]
 8029828:	7833      	ldrb	r3, [r6, #0]
 802982a:	2b00      	cmp	r3, #0
 802982c:	d100      	bne.n	8029830 <_vfiprintf_r+0xa4>
 802982e:	e0a7      	b.n	8029980 <_vfiprintf_r+0x1f4>
 8029830:	2201      	movs	r2, #1
 8029832:	2300      	movs	r3, #0
 8029834:	4252      	negs	r2, r2
 8029836:	6062      	str	r2, [r4, #4]
 8029838:	a904      	add	r1, sp, #16
 802983a:	3254      	adds	r2, #84	; 0x54
 802983c:	1852      	adds	r2, r2, r1
 802983e:	1c75      	adds	r5, r6, #1
 8029840:	6023      	str	r3, [r4, #0]
 8029842:	60e3      	str	r3, [r4, #12]
 8029844:	60a3      	str	r3, [r4, #8]
 8029846:	7013      	strb	r3, [r2, #0]
 8029848:	65a3      	str	r3, [r4, #88]	; 0x58
 802984a:	4b59      	ldr	r3, [pc, #356]	; (80299b0 <_vfiprintf_r+0x224>)
 802984c:	2205      	movs	r2, #5
 802984e:	0018      	movs	r0, r3
 8029850:	7829      	ldrb	r1, [r5, #0]
 8029852:	9305      	str	r3, [sp, #20]
 8029854:	f7ff ff05 	bl	8029662 <memchr>
 8029858:	1c6e      	adds	r6, r5, #1
 802985a:	2800      	cmp	r0, #0
 802985c:	d11f      	bne.n	802989e <_vfiprintf_r+0x112>
 802985e:	6822      	ldr	r2, [r4, #0]
 8029860:	06d3      	lsls	r3, r2, #27
 8029862:	d504      	bpl.n	802986e <_vfiprintf_r+0xe2>
 8029864:	2353      	movs	r3, #83	; 0x53
 8029866:	a904      	add	r1, sp, #16
 8029868:	185b      	adds	r3, r3, r1
 802986a:	2120      	movs	r1, #32
 802986c:	7019      	strb	r1, [r3, #0]
 802986e:	0713      	lsls	r3, r2, #28
 8029870:	d504      	bpl.n	802987c <_vfiprintf_r+0xf0>
 8029872:	2353      	movs	r3, #83	; 0x53
 8029874:	a904      	add	r1, sp, #16
 8029876:	185b      	adds	r3, r3, r1
 8029878:	212b      	movs	r1, #43	; 0x2b
 802987a:	7019      	strb	r1, [r3, #0]
 802987c:	782b      	ldrb	r3, [r5, #0]
 802987e:	2b2a      	cmp	r3, #42	; 0x2a
 8029880:	d016      	beq.n	80298b0 <_vfiprintf_r+0x124>
 8029882:	002e      	movs	r6, r5
 8029884:	2100      	movs	r1, #0
 8029886:	200a      	movs	r0, #10
 8029888:	68e3      	ldr	r3, [r4, #12]
 802988a:	7832      	ldrb	r2, [r6, #0]
 802988c:	1c75      	adds	r5, r6, #1
 802988e:	3a30      	subs	r2, #48	; 0x30
 8029890:	2a09      	cmp	r2, #9
 8029892:	d94e      	bls.n	8029932 <_vfiprintf_r+0x1a6>
 8029894:	2900      	cmp	r1, #0
 8029896:	d111      	bne.n	80298bc <_vfiprintf_r+0x130>
 8029898:	e017      	b.n	80298ca <_vfiprintf_r+0x13e>
 802989a:	3601      	adds	r6, #1
 802989c:	e7af      	b.n	80297fe <_vfiprintf_r+0x72>
 802989e:	9b05      	ldr	r3, [sp, #20]
 80298a0:	6822      	ldr	r2, [r4, #0]
 80298a2:	1ac0      	subs	r0, r0, r3
 80298a4:	2301      	movs	r3, #1
 80298a6:	4083      	lsls	r3, r0
 80298a8:	4313      	orrs	r3, r2
 80298aa:	0035      	movs	r5, r6
 80298ac:	6023      	str	r3, [r4, #0]
 80298ae:	e7cc      	b.n	802984a <_vfiprintf_r+0xbe>
 80298b0:	9b07      	ldr	r3, [sp, #28]
 80298b2:	1d19      	adds	r1, r3, #4
 80298b4:	681b      	ldr	r3, [r3, #0]
 80298b6:	9107      	str	r1, [sp, #28]
 80298b8:	2b00      	cmp	r3, #0
 80298ba:	db01      	blt.n	80298c0 <_vfiprintf_r+0x134>
 80298bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80298be:	e004      	b.n	80298ca <_vfiprintf_r+0x13e>
 80298c0:	425b      	negs	r3, r3
 80298c2:	60e3      	str	r3, [r4, #12]
 80298c4:	2302      	movs	r3, #2
 80298c6:	4313      	orrs	r3, r2
 80298c8:	6023      	str	r3, [r4, #0]
 80298ca:	7833      	ldrb	r3, [r6, #0]
 80298cc:	2b2e      	cmp	r3, #46	; 0x2e
 80298ce:	d10a      	bne.n	80298e6 <_vfiprintf_r+0x15a>
 80298d0:	7873      	ldrb	r3, [r6, #1]
 80298d2:	2b2a      	cmp	r3, #42	; 0x2a
 80298d4:	d135      	bne.n	8029942 <_vfiprintf_r+0x1b6>
 80298d6:	9b07      	ldr	r3, [sp, #28]
 80298d8:	3602      	adds	r6, #2
 80298da:	1d1a      	adds	r2, r3, #4
 80298dc:	681b      	ldr	r3, [r3, #0]
 80298de:	9207      	str	r2, [sp, #28]
 80298e0:	2b00      	cmp	r3, #0
 80298e2:	db2b      	blt.n	802993c <_vfiprintf_r+0x1b0>
 80298e4:	9309      	str	r3, [sp, #36]	; 0x24
 80298e6:	4d33      	ldr	r5, [pc, #204]	; (80299b4 <_vfiprintf_r+0x228>)
 80298e8:	2203      	movs	r2, #3
 80298ea:	0028      	movs	r0, r5
 80298ec:	7831      	ldrb	r1, [r6, #0]
 80298ee:	f7ff feb8 	bl	8029662 <memchr>
 80298f2:	2800      	cmp	r0, #0
 80298f4:	d006      	beq.n	8029904 <_vfiprintf_r+0x178>
 80298f6:	2340      	movs	r3, #64	; 0x40
 80298f8:	1b40      	subs	r0, r0, r5
 80298fa:	4083      	lsls	r3, r0
 80298fc:	6822      	ldr	r2, [r4, #0]
 80298fe:	3601      	adds	r6, #1
 8029900:	4313      	orrs	r3, r2
 8029902:	6023      	str	r3, [r4, #0]
 8029904:	7831      	ldrb	r1, [r6, #0]
 8029906:	2206      	movs	r2, #6
 8029908:	482b      	ldr	r0, [pc, #172]	; (80299b8 <_vfiprintf_r+0x22c>)
 802990a:	1c75      	adds	r5, r6, #1
 802990c:	7621      	strb	r1, [r4, #24]
 802990e:	f7ff fea8 	bl	8029662 <memchr>
 8029912:	2800      	cmp	r0, #0
 8029914:	d043      	beq.n	802999e <_vfiprintf_r+0x212>
 8029916:	4b29      	ldr	r3, [pc, #164]	; (80299bc <_vfiprintf_r+0x230>)
 8029918:	2b00      	cmp	r3, #0
 802991a:	d125      	bne.n	8029968 <_vfiprintf_r+0x1dc>
 802991c:	2207      	movs	r2, #7
 802991e:	9b07      	ldr	r3, [sp, #28]
 8029920:	3307      	adds	r3, #7
 8029922:	4393      	bics	r3, r2
 8029924:	3308      	adds	r3, #8
 8029926:	9307      	str	r3, [sp, #28]
 8029928:	6963      	ldr	r3, [r4, #20]
 802992a:	9a04      	ldr	r2, [sp, #16]
 802992c:	189b      	adds	r3, r3, r2
 802992e:	6163      	str	r3, [r4, #20]
 8029930:	e764      	b.n	80297fc <_vfiprintf_r+0x70>
 8029932:	4343      	muls	r3, r0
 8029934:	002e      	movs	r6, r5
 8029936:	2101      	movs	r1, #1
 8029938:	189b      	adds	r3, r3, r2
 802993a:	e7a6      	b.n	802988a <_vfiprintf_r+0xfe>
 802993c:	2301      	movs	r3, #1
 802993e:	425b      	negs	r3, r3
 8029940:	e7d0      	b.n	80298e4 <_vfiprintf_r+0x158>
 8029942:	2300      	movs	r3, #0
 8029944:	200a      	movs	r0, #10
 8029946:	001a      	movs	r2, r3
 8029948:	3601      	adds	r6, #1
 802994a:	6063      	str	r3, [r4, #4]
 802994c:	7831      	ldrb	r1, [r6, #0]
 802994e:	1c75      	adds	r5, r6, #1
 8029950:	3930      	subs	r1, #48	; 0x30
 8029952:	2909      	cmp	r1, #9
 8029954:	d903      	bls.n	802995e <_vfiprintf_r+0x1d2>
 8029956:	2b00      	cmp	r3, #0
 8029958:	d0c5      	beq.n	80298e6 <_vfiprintf_r+0x15a>
 802995a:	9209      	str	r2, [sp, #36]	; 0x24
 802995c:	e7c3      	b.n	80298e6 <_vfiprintf_r+0x15a>
 802995e:	4342      	muls	r2, r0
 8029960:	002e      	movs	r6, r5
 8029962:	2301      	movs	r3, #1
 8029964:	1852      	adds	r2, r2, r1
 8029966:	e7f1      	b.n	802994c <_vfiprintf_r+0x1c0>
 8029968:	aa07      	add	r2, sp, #28
 802996a:	9200      	str	r2, [sp, #0]
 802996c:	0021      	movs	r1, r4
 802996e:	003a      	movs	r2, r7
 8029970:	4b13      	ldr	r3, [pc, #76]	; (80299c0 <_vfiprintf_r+0x234>)
 8029972:	9803      	ldr	r0, [sp, #12]
 8029974:	e000      	b.n	8029978 <_vfiprintf_r+0x1ec>
 8029976:	bf00      	nop
 8029978:	9004      	str	r0, [sp, #16]
 802997a:	9b04      	ldr	r3, [sp, #16]
 802997c:	3301      	adds	r3, #1
 802997e:	d1d3      	bne.n	8029928 <_vfiprintf_r+0x19c>
 8029980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029982:	07db      	lsls	r3, r3, #31
 8029984:	d405      	bmi.n	8029992 <_vfiprintf_r+0x206>
 8029986:	89bb      	ldrh	r3, [r7, #12]
 8029988:	059b      	lsls	r3, r3, #22
 802998a:	d402      	bmi.n	8029992 <_vfiprintf_r+0x206>
 802998c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 802998e:	f7fe f9ef 	bl	8027d70 <__retarget_lock_release_recursive>
 8029992:	89bb      	ldrh	r3, [r7, #12]
 8029994:	065b      	lsls	r3, r3, #25
 8029996:	d500      	bpl.n	802999a <_vfiprintf_r+0x20e>
 8029998:	e71d      	b.n	80297d6 <_vfiprintf_r+0x4a>
 802999a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802999c:	e71d      	b.n	80297da <_vfiprintf_r+0x4e>
 802999e:	aa07      	add	r2, sp, #28
 80299a0:	9200      	str	r2, [sp, #0]
 80299a2:	0021      	movs	r1, r4
 80299a4:	003a      	movs	r2, r7
 80299a6:	4b06      	ldr	r3, [pc, #24]	; (80299c0 <_vfiprintf_r+0x234>)
 80299a8:	9803      	ldr	r0, [sp, #12]
 80299aa:	f7ff fc71 	bl	8029290 <_printf_i>
 80299ae:	e7e3      	b.n	8029978 <_vfiprintf_r+0x1ec>
 80299b0:	0802bd5d 	.word	0x0802bd5d
 80299b4:	0802bd63 	.word	0x0802bd63
 80299b8:	0802bd67 	.word	0x0802bd67
 80299bc:	00000000 	.word	0x00000000
 80299c0:	08029769 	.word	0x08029769

080299c4 <__swbuf_r>:
 80299c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299c6:	0006      	movs	r6, r0
 80299c8:	000d      	movs	r5, r1
 80299ca:	0014      	movs	r4, r2
 80299cc:	2800      	cmp	r0, #0
 80299ce:	d004      	beq.n	80299da <__swbuf_r+0x16>
 80299d0:	6a03      	ldr	r3, [r0, #32]
 80299d2:	2b00      	cmp	r3, #0
 80299d4:	d101      	bne.n	80299da <__swbuf_r+0x16>
 80299d6:	f7fd ff6f 	bl	80278b8 <__sinit>
 80299da:	69a3      	ldr	r3, [r4, #24]
 80299dc:	60a3      	str	r3, [r4, #8]
 80299de:	89a3      	ldrh	r3, [r4, #12]
 80299e0:	071b      	lsls	r3, r3, #28
 80299e2:	d528      	bpl.n	8029a36 <__swbuf_r+0x72>
 80299e4:	6923      	ldr	r3, [r4, #16]
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	d025      	beq.n	8029a36 <__swbuf_r+0x72>
 80299ea:	6923      	ldr	r3, [r4, #16]
 80299ec:	6820      	ldr	r0, [r4, #0]
 80299ee:	b2ef      	uxtb	r7, r5
 80299f0:	1ac0      	subs	r0, r0, r3
 80299f2:	6963      	ldr	r3, [r4, #20]
 80299f4:	b2ed      	uxtb	r5, r5
 80299f6:	4283      	cmp	r3, r0
 80299f8:	dc05      	bgt.n	8029a06 <__swbuf_r+0x42>
 80299fa:	0021      	movs	r1, r4
 80299fc:	0030      	movs	r0, r6
 80299fe:	f7ff fde1 	bl	80295c4 <_fflush_r>
 8029a02:	2800      	cmp	r0, #0
 8029a04:	d11d      	bne.n	8029a42 <__swbuf_r+0x7e>
 8029a06:	68a3      	ldr	r3, [r4, #8]
 8029a08:	3001      	adds	r0, #1
 8029a0a:	3b01      	subs	r3, #1
 8029a0c:	60a3      	str	r3, [r4, #8]
 8029a0e:	6823      	ldr	r3, [r4, #0]
 8029a10:	1c5a      	adds	r2, r3, #1
 8029a12:	6022      	str	r2, [r4, #0]
 8029a14:	701f      	strb	r7, [r3, #0]
 8029a16:	6963      	ldr	r3, [r4, #20]
 8029a18:	4283      	cmp	r3, r0
 8029a1a:	d004      	beq.n	8029a26 <__swbuf_r+0x62>
 8029a1c:	89a3      	ldrh	r3, [r4, #12]
 8029a1e:	07db      	lsls	r3, r3, #31
 8029a20:	d507      	bpl.n	8029a32 <__swbuf_r+0x6e>
 8029a22:	2d0a      	cmp	r5, #10
 8029a24:	d105      	bne.n	8029a32 <__swbuf_r+0x6e>
 8029a26:	0021      	movs	r1, r4
 8029a28:	0030      	movs	r0, r6
 8029a2a:	f7ff fdcb 	bl	80295c4 <_fflush_r>
 8029a2e:	2800      	cmp	r0, #0
 8029a30:	d107      	bne.n	8029a42 <__swbuf_r+0x7e>
 8029a32:	0028      	movs	r0, r5
 8029a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029a36:	0021      	movs	r1, r4
 8029a38:	0030      	movs	r0, r6
 8029a3a:	f000 f805 	bl	8029a48 <__swsetup_r>
 8029a3e:	2800      	cmp	r0, #0
 8029a40:	d0d3      	beq.n	80299ea <__swbuf_r+0x26>
 8029a42:	2501      	movs	r5, #1
 8029a44:	426d      	negs	r5, r5
 8029a46:	e7f4      	b.n	8029a32 <__swbuf_r+0x6e>

08029a48 <__swsetup_r>:
 8029a48:	4b30      	ldr	r3, [pc, #192]	; (8029b0c <__swsetup_r+0xc4>)
 8029a4a:	b570      	push	{r4, r5, r6, lr}
 8029a4c:	0005      	movs	r5, r0
 8029a4e:	6818      	ldr	r0, [r3, #0]
 8029a50:	000c      	movs	r4, r1
 8029a52:	2800      	cmp	r0, #0
 8029a54:	d004      	beq.n	8029a60 <__swsetup_r+0x18>
 8029a56:	6a03      	ldr	r3, [r0, #32]
 8029a58:	2b00      	cmp	r3, #0
 8029a5a:	d101      	bne.n	8029a60 <__swsetup_r+0x18>
 8029a5c:	f7fd ff2c 	bl	80278b8 <__sinit>
 8029a60:	230c      	movs	r3, #12
 8029a62:	5ee2      	ldrsh	r2, [r4, r3]
 8029a64:	b293      	uxth	r3, r2
 8029a66:	0711      	lsls	r1, r2, #28
 8029a68:	d423      	bmi.n	8029ab2 <__swsetup_r+0x6a>
 8029a6a:	06d9      	lsls	r1, r3, #27
 8029a6c:	d407      	bmi.n	8029a7e <__swsetup_r+0x36>
 8029a6e:	2309      	movs	r3, #9
 8029a70:	2001      	movs	r0, #1
 8029a72:	602b      	str	r3, [r5, #0]
 8029a74:	3337      	adds	r3, #55	; 0x37
 8029a76:	4313      	orrs	r3, r2
 8029a78:	81a3      	strh	r3, [r4, #12]
 8029a7a:	4240      	negs	r0, r0
 8029a7c:	bd70      	pop	{r4, r5, r6, pc}
 8029a7e:	075b      	lsls	r3, r3, #29
 8029a80:	d513      	bpl.n	8029aaa <__swsetup_r+0x62>
 8029a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8029a84:	2900      	cmp	r1, #0
 8029a86:	d008      	beq.n	8029a9a <__swsetup_r+0x52>
 8029a88:	0023      	movs	r3, r4
 8029a8a:	3344      	adds	r3, #68	; 0x44
 8029a8c:	4299      	cmp	r1, r3
 8029a8e:	d002      	beq.n	8029a96 <__swsetup_r+0x4e>
 8029a90:	0028      	movs	r0, r5
 8029a92:	f7fe f9ab 	bl	8027dec <_free_r>
 8029a96:	2300      	movs	r3, #0
 8029a98:	6363      	str	r3, [r4, #52]	; 0x34
 8029a9a:	2224      	movs	r2, #36	; 0x24
 8029a9c:	89a3      	ldrh	r3, [r4, #12]
 8029a9e:	4393      	bics	r3, r2
 8029aa0:	81a3      	strh	r3, [r4, #12]
 8029aa2:	2300      	movs	r3, #0
 8029aa4:	6063      	str	r3, [r4, #4]
 8029aa6:	6923      	ldr	r3, [r4, #16]
 8029aa8:	6023      	str	r3, [r4, #0]
 8029aaa:	2308      	movs	r3, #8
 8029aac:	89a2      	ldrh	r2, [r4, #12]
 8029aae:	4313      	orrs	r3, r2
 8029ab0:	81a3      	strh	r3, [r4, #12]
 8029ab2:	6923      	ldr	r3, [r4, #16]
 8029ab4:	2b00      	cmp	r3, #0
 8029ab6:	d10b      	bne.n	8029ad0 <__swsetup_r+0x88>
 8029ab8:	21a0      	movs	r1, #160	; 0xa0
 8029aba:	2280      	movs	r2, #128	; 0x80
 8029abc:	89a3      	ldrh	r3, [r4, #12]
 8029abe:	0089      	lsls	r1, r1, #2
 8029ac0:	0092      	lsls	r2, r2, #2
 8029ac2:	400b      	ands	r3, r1
 8029ac4:	4293      	cmp	r3, r2
 8029ac6:	d003      	beq.n	8029ad0 <__swsetup_r+0x88>
 8029ac8:	0021      	movs	r1, r4
 8029aca:	0028      	movs	r0, r5
 8029acc:	f000 f89a 	bl	8029c04 <__smakebuf_r>
 8029ad0:	220c      	movs	r2, #12
 8029ad2:	5ea3      	ldrsh	r3, [r4, r2]
 8029ad4:	2001      	movs	r0, #1
 8029ad6:	001a      	movs	r2, r3
 8029ad8:	b299      	uxth	r1, r3
 8029ada:	4002      	ands	r2, r0
 8029adc:	4203      	tst	r3, r0
 8029ade:	d00f      	beq.n	8029b00 <__swsetup_r+0xb8>
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	60a2      	str	r2, [r4, #8]
 8029ae4:	6962      	ldr	r2, [r4, #20]
 8029ae6:	4252      	negs	r2, r2
 8029ae8:	61a2      	str	r2, [r4, #24]
 8029aea:	2000      	movs	r0, #0
 8029aec:	6922      	ldr	r2, [r4, #16]
 8029aee:	4282      	cmp	r2, r0
 8029af0:	d1c4      	bne.n	8029a7c <__swsetup_r+0x34>
 8029af2:	0609      	lsls	r1, r1, #24
 8029af4:	d5c2      	bpl.n	8029a7c <__swsetup_r+0x34>
 8029af6:	2240      	movs	r2, #64	; 0x40
 8029af8:	4313      	orrs	r3, r2
 8029afa:	81a3      	strh	r3, [r4, #12]
 8029afc:	3801      	subs	r0, #1
 8029afe:	e7bd      	b.n	8029a7c <__swsetup_r+0x34>
 8029b00:	0788      	lsls	r0, r1, #30
 8029b02:	d400      	bmi.n	8029b06 <__swsetup_r+0xbe>
 8029b04:	6962      	ldr	r2, [r4, #20]
 8029b06:	60a2      	str	r2, [r4, #8]
 8029b08:	e7ef      	b.n	8029aea <__swsetup_r+0xa2>
 8029b0a:	46c0      	nop			; (mov r8, r8)
 8029b0c:	20000488 	.word	0x20000488

08029b10 <_raise_r>:
 8029b10:	b570      	push	{r4, r5, r6, lr}
 8029b12:	0004      	movs	r4, r0
 8029b14:	000d      	movs	r5, r1
 8029b16:	291f      	cmp	r1, #31
 8029b18:	d904      	bls.n	8029b24 <_raise_r+0x14>
 8029b1a:	2316      	movs	r3, #22
 8029b1c:	6003      	str	r3, [r0, #0]
 8029b1e:	2001      	movs	r0, #1
 8029b20:	4240      	negs	r0, r0
 8029b22:	bd70      	pop	{r4, r5, r6, pc}
 8029b24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8029b26:	2b00      	cmp	r3, #0
 8029b28:	d004      	beq.n	8029b34 <_raise_r+0x24>
 8029b2a:	008a      	lsls	r2, r1, #2
 8029b2c:	189b      	adds	r3, r3, r2
 8029b2e:	681a      	ldr	r2, [r3, #0]
 8029b30:	2a00      	cmp	r2, #0
 8029b32:	d108      	bne.n	8029b46 <_raise_r+0x36>
 8029b34:	0020      	movs	r0, r4
 8029b36:	f000 f831 	bl	8029b9c <_getpid_r>
 8029b3a:	002a      	movs	r2, r5
 8029b3c:	0001      	movs	r1, r0
 8029b3e:	0020      	movs	r0, r4
 8029b40:	f000 f81a 	bl	8029b78 <_kill_r>
 8029b44:	e7ed      	b.n	8029b22 <_raise_r+0x12>
 8029b46:	2000      	movs	r0, #0
 8029b48:	2a01      	cmp	r2, #1
 8029b4a:	d0ea      	beq.n	8029b22 <_raise_r+0x12>
 8029b4c:	1c51      	adds	r1, r2, #1
 8029b4e:	d103      	bne.n	8029b58 <_raise_r+0x48>
 8029b50:	2316      	movs	r3, #22
 8029b52:	3001      	adds	r0, #1
 8029b54:	6023      	str	r3, [r4, #0]
 8029b56:	e7e4      	b.n	8029b22 <_raise_r+0x12>
 8029b58:	2400      	movs	r4, #0
 8029b5a:	0028      	movs	r0, r5
 8029b5c:	601c      	str	r4, [r3, #0]
 8029b5e:	4790      	blx	r2
 8029b60:	0020      	movs	r0, r4
 8029b62:	e7de      	b.n	8029b22 <_raise_r+0x12>

08029b64 <raise>:
 8029b64:	b510      	push	{r4, lr}
 8029b66:	4b03      	ldr	r3, [pc, #12]	; (8029b74 <raise+0x10>)
 8029b68:	0001      	movs	r1, r0
 8029b6a:	6818      	ldr	r0, [r3, #0]
 8029b6c:	f7ff ffd0 	bl	8029b10 <_raise_r>
 8029b70:	bd10      	pop	{r4, pc}
 8029b72:	46c0      	nop			; (mov r8, r8)
 8029b74:	20000488 	.word	0x20000488

08029b78 <_kill_r>:
 8029b78:	2300      	movs	r3, #0
 8029b7a:	b570      	push	{r4, r5, r6, lr}
 8029b7c:	4d06      	ldr	r5, [pc, #24]	; (8029b98 <_kill_r+0x20>)
 8029b7e:	0004      	movs	r4, r0
 8029b80:	0008      	movs	r0, r1
 8029b82:	0011      	movs	r1, r2
 8029b84:	602b      	str	r3, [r5, #0]
 8029b86:	f7e2 fc6e 	bl	800c466 <_kill>
 8029b8a:	1c43      	adds	r3, r0, #1
 8029b8c:	d103      	bne.n	8029b96 <_kill_r+0x1e>
 8029b8e:	682b      	ldr	r3, [r5, #0]
 8029b90:	2b00      	cmp	r3, #0
 8029b92:	d000      	beq.n	8029b96 <_kill_r+0x1e>
 8029b94:	6023      	str	r3, [r4, #0]
 8029b96:	bd70      	pop	{r4, r5, r6, pc}
 8029b98:	20005648 	.word	0x20005648

08029b9c <_getpid_r>:
 8029b9c:	b510      	push	{r4, lr}
 8029b9e:	f7e2 fc5c 	bl	800c45a <_getpid>
 8029ba2:	bd10      	pop	{r4, pc}

08029ba4 <_malloc_usable_size_r>:
 8029ba4:	1f0b      	subs	r3, r1, #4
 8029ba6:	681b      	ldr	r3, [r3, #0]
 8029ba8:	1f18      	subs	r0, r3, #4
 8029baa:	2b00      	cmp	r3, #0
 8029bac:	da01      	bge.n	8029bb2 <_malloc_usable_size_r+0xe>
 8029bae:	580b      	ldr	r3, [r1, r0]
 8029bb0:	18c0      	adds	r0, r0, r3
 8029bb2:	4770      	bx	lr

08029bb4 <__swhatbuf_r>:
 8029bb4:	b570      	push	{r4, r5, r6, lr}
 8029bb6:	000e      	movs	r6, r1
 8029bb8:	001d      	movs	r5, r3
 8029bba:	230e      	movs	r3, #14
 8029bbc:	5ec9      	ldrsh	r1, [r1, r3]
 8029bbe:	0014      	movs	r4, r2
 8029bc0:	b096      	sub	sp, #88	; 0x58
 8029bc2:	2900      	cmp	r1, #0
 8029bc4:	da0c      	bge.n	8029be0 <__swhatbuf_r+0x2c>
 8029bc6:	89b2      	ldrh	r2, [r6, #12]
 8029bc8:	2380      	movs	r3, #128	; 0x80
 8029bca:	0011      	movs	r1, r2
 8029bcc:	4019      	ands	r1, r3
 8029bce:	421a      	tst	r2, r3
 8029bd0:	d013      	beq.n	8029bfa <__swhatbuf_r+0x46>
 8029bd2:	2100      	movs	r1, #0
 8029bd4:	3b40      	subs	r3, #64	; 0x40
 8029bd6:	2000      	movs	r0, #0
 8029bd8:	6029      	str	r1, [r5, #0]
 8029bda:	6023      	str	r3, [r4, #0]
 8029bdc:	b016      	add	sp, #88	; 0x58
 8029bde:	bd70      	pop	{r4, r5, r6, pc}
 8029be0:	466a      	mov	r2, sp
 8029be2:	f000 f84d 	bl	8029c80 <_fstat_r>
 8029be6:	2800      	cmp	r0, #0
 8029be8:	dbed      	blt.n	8029bc6 <__swhatbuf_r+0x12>
 8029bea:	23f0      	movs	r3, #240	; 0xf0
 8029bec:	9901      	ldr	r1, [sp, #4]
 8029bee:	021b      	lsls	r3, r3, #8
 8029bf0:	4019      	ands	r1, r3
 8029bf2:	4b03      	ldr	r3, [pc, #12]	; (8029c00 <__swhatbuf_r+0x4c>)
 8029bf4:	18c9      	adds	r1, r1, r3
 8029bf6:	424b      	negs	r3, r1
 8029bf8:	4159      	adcs	r1, r3
 8029bfa:	2380      	movs	r3, #128	; 0x80
 8029bfc:	00db      	lsls	r3, r3, #3
 8029bfe:	e7ea      	b.n	8029bd6 <__swhatbuf_r+0x22>
 8029c00:	ffffe000 	.word	0xffffe000

08029c04 <__smakebuf_r>:
 8029c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029c06:	2602      	movs	r6, #2
 8029c08:	898b      	ldrh	r3, [r1, #12]
 8029c0a:	0005      	movs	r5, r0
 8029c0c:	000c      	movs	r4, r1
 8029c0e:	4233      	tst	r3, r6
 8029c10:	d006      	beq.n	8029c20 <__smakebuf_r+0x1c>
 8029c12:	0023      	movs	r3, r4
 8029c14:	3347      	adds	r3, #71	; 0x47
 8029c16:	6023      	str	r3, [r4, #0]
 8029c18:	6123      	str	r3, [r4, #16]
 8029c1a:	2301      	movs	r3, #1
 8029c1c:	6163      	str	r3, [r4, #20]
 8029c1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8029c20:	466a      	mov	r2, sp
 8029c22:	ab01      	add	r3, sp, #4
 8029c24:	f7ff ffc6 	bl	8029bb4 <__swhatbuf_r>
 8029c28:	9900      	ldr	r1, [sp, #0]
 8029c2a:	0007      	movs	r7, r0
 8029c2c:	0028      	movs	r0, r5
 8029c2e:	f7fc fef1 	bl	8026a14 <_malloc_r>
 8029c32:	2800      	cmp	r0, #0
 8029c34:	d108      	bne.n	8029c48 <__smakebuf_r+0x44>
 8029c36:	220c      	movs	r2, #12
 8029c38:	5ea3      	ldrsh	r3, [r4, r2]
 8029c3a:	059a      	lsls	r2, r3, #22
 8029c3c:	d4ef      	bmi.n	8029c1e <__smakebuf_r+0x1a>
 8029c3e:	2203      	movs	r2, #3
 8029c40:	4393      	bics	r3, r2
 8029c42:	431e      	orrs	r6, r3
 8029c44:	81a6      	strh	r6, [r4, #12]
 8029c46:	e7e4      	b.n	8029c12 <__smakebuf_r+0xe>
 8029c48:	2380      	movs	r3, #128	; 0x80
 8029c4a:	89a2      	ldrh	r2, [r4, #12]
 8029c4c:	6020      	str	r0, [r4, #0]
 8029c4e:	4313      	orrs	r3, r2
 8029c50:	81a3      	strh	r3, [r4, #12]
 8029c52:	9b00      	ldr	r3, [sp, #0]
 8029c54:	6120      	str	r0, [r4, #16]
 8029c56:	6163      	str	r3, [r4, #20]
 8029c58:	9b01      	ldr	r3, [sp, #4]
 8029c5a:	2b00      	cmp	r3, #0
 8029c5c:	d00c      	beq.n	8029c78 <__smakebuf_r+0x74>
 8029c5e:	0028      	movs	r0, r5
 8029c60:	230e      	movs	r3, #14
 8029c62:	5ee1      	ldrsh	r1, [r4, r3]
 8029c64:	f000 f81e 	bl	8029ca4 <_isatty_r>
 8029c68:	2800      	cmp	r0, #0
 8029c6a:	d005      	beq.n	8029c78 <__smakebuf_r+0x74>
 8029c6c:	2303      	movs	r3, #3
 8029c6e:	89a2      	ldrh	r2, [r4, #12]
 8029c70:	439a      	bics	r2, r3
 8029c72:	3b02      	subs	r3, #2
 8029c74:	4313      	orrs	r3, r2
 8029c76:	81a3      	strh	r3, [r4, #12]
 8029c78:	89a3      	ldrh	r3, [r4, #12]
 8029c7a:	433b      	orrs	r3, r7
 8029c7c:	81a3      	strh	r3, [r4, #12]
 8029c7e:	e7ce      	b.n	8029c1e <__smakebuf_r+0x1a>

08029c80 <_fstat_r>:
 8029c80:	2300      	movs	r3, #0
 8029c82:	b570      	push	{r4, r5, r6, lr}
 8029c84:	4d06      	ldr	r5, [pc, #24]	; (8029ca0 <_fstat_r+0x20>)
 8029c86:	0004      	movs	r4, r0
 8029c88:	0008      	movs	r0, r1
 8029c8a:	0011      	movs	r1, r2
 8029c8c:	602b      	str	r3, [r5, #0]
 8029c8e:	f7e2 fc49 	bl	800c524 <_fstat>
 8029c92:	1c43      	adds	r3, r0, #1
 8029c94:	d103      	bne.n	8029c9e <_fstat_r+0x1e>
 8029c96:	682b      	ldr	r3, [r5, #0]
 8029c98:	2b00      	cmp	r3, #0
 8029c9a:	d000      	beq.n	8029c9e <_fstat_r+0x1e>
 8029c9c:	6023      	str	r3, [r4, #0]
 8029c9e:	bd70      	pop	{r4, r5, r6, pc}
 8029ca0:	20005648 	.word	0x20005648

08029ca4 <_isatty_r>:
 8029ca4:	2300      	movs	r3, #0
 8029ca6:	b570      	push	{r4, r5, r6, lr}
 8029ca8:	4d06      	ldr	r5, [pc, #24]	; (8029cc4 <_isatty_r+0x20>)
 8029caa:	0004      	movs	r4, r0
 8029cac:	0008      	movs	r0, r1
 8029cae:	602b      	str	r3, [r5, #0]
 8029cb0:	f7e2 fc46 	bl	800c540 <_isatty>
 8029cb4:	1c43      	adds	r3, r0, #1
 8029cb6:	d103      	bne.n	8029cc0 <_isatty_r+0x1c>
 8029cb8:	682b      	ldr	r3, [r5, #0]
 8029cba:	2b00      	cmp	r3, #0
 8029cbc:	d000      	beq.n	8029cc0 <_isatty_r+0x1c>
 8029cbe:	6023      	str	r3, [r4, #0]
 8029cc0:	bd70      	pop	{r4, r5, r6, pc}
 8029cc2:	46c0      	nop			; (mov r8, r8)
 8029cc4:	20005648 	.word	0x20005648

08029cc8 <_init>:
 8029cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029cca:	46c0      	nop			; (mov r8, r8)
 8029ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029cce:	bc08      	pop	{r3}
 8029cd0:	469e      	mov	lr, r3
 8029cd2:	4770      	bx	lr

08029cd4 <_fini>:
 8029cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029cd6:	46c0      	nop			; (mov r8, r8)
 8029cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029cda:	bc08      	pop	{r3}
 8029cdc:	469e      	mov	lr, r3
 8029cde:	4770      	bx	lr

08029ce0 <__FLASH_Program_Fast_veneer>:
 8029ce0:	b401      	push	{r0}
 8029ce2:	4802      	ldr	r0, [pc, #8]	; (8029cec <__FLASH_Program_Fast_veneer+0xc>)
 8029ce4:	4684      	mov	ip, r0
 8029ce6:	bc01      	pop	{r0}
 8029ce8:	4760      	bx	ip
 8029cea:	bf00      	nop
 8029cec:	2000048d 	.word	0x2000048d

Disassembly of section .data:

20000000 <USBPD_Trace>:
20000000:	0800150f                                ....

20000004 <dac_value>:
20000004:	000001f4                                ....

20000008 <stateMachine>:
20000008:	00010001 00000000 00000000 00000000     ................
	...
20000028:	00000002 0000000a 00000000 00000000     ................
20000038:	00000100 00000000 00000000 00000000     ................
20000048:	00000000                                ....

2000004c <SNK_data>:
2000004c:	000001f4 000003e8 000003e8 00000000     ................
2000005c:	00000000 000001f4 000001f4 00000000     ................
2000006c:	00000000 00000004 00000000 00000000     ................
	...

200000f8 <dhandle>:
200000f8:	2000004c                                L.. 

200000fc <sm>:
200000fc:	20000008                                ... 

20000100 <events>:
20000100:	200005b0                                ... 

20000104 <firstEntry.0>:
20000104:	00000001                                ....

20000108 <SYMBOLS>:
20000108:	796d307e 705f5b33 4f017b7f 00670e37     ~0my3[_p.{.O7.g.

20000118 <SystemCoreClock>:
20000118:	00f42400                                .$..

2000011c <uwTickPrio>:
2000011c:	00000004                                ....

20000120 <uwTickFreq>:
20000120:	00000001                                ....

20000124 <USBD_CDC_DeviceQualifierDesc>:
20000124:	0200060a 40000000 00000001              .......@....

20000130 <USBD_CDC>:
20000130:	08018ce5 08018f05 08019025 00000000     ........%.......
20000140:	080193b9 08019215 08019333 00000000     ........3.......
	...
20000158:	080194d5 08019445 08019565 080195f5     ....E...e.......

20000168 <USBD_CDC_CfgDesc>:
20000168:	00430209 c0000102 00040932 02020100     ..C.....2.......
20000178:	24050001 05011000 01000124 02022404     ...$....$....$..
20000188:	00062405 82050701 10000803 00010409     .$..............
20000198:	00000a02 01050700 00004002 02810507     .........@......
200001a8:	                                         @..

200001ab <CDCInEpAdd>:
200001ab:	                                         .

200001ac <CDCOutEpAdd>:
200001ac:	                                         .

200001ad <CDCCmdEpAdd>:
200001ad:	                                         ...

200001b0 <uxCriticalNesting>:
200001b0:	aaaaaaaa                                ....

200001b4 <DPM_Settings>:
200001b4:	00000001 00000002 00000000              ............

200001c0 <DPM_ID_Settings>:
200001c0:	f0000003 00020483                       ........

200001c8 <DPM_USER_Settings>:
200001c8:	0000000c 00000000 00000000 00000000     ................
	...

2000023c <USBPD_NbPDO>:
2000023c:	00000003                                ....

20000240 <PORT0_PDO_ListSNK>:
20000240:	00019096 0002d096 0603c096 00000000     ................
	...

2000025c <USBD_Interface_fops_FS>:
2000025c:	08020c81 08020cb1 08020cbd 08020d15     ................
2000026c:	08020de9                                ....

20000270 <CDC_Desc>:
20000270:	08020e0d 08020e31 08020e99 08020e55     ....1.......U...
20000280:	08020ec5 08020eed 08020f31 00000000     ........1.......

20000290 <USBD_CDC_DeviceDesc>:
20000290:	02000112 40000202 57400483 02010200     .......@..@W....
200002a0:	00000103                                ....

200002a4 <USBD_LangIDDesc>:
200002a4:	04090304                                ....

200002a8 <USBD_StringSerial>:
200002a8:	0000031a 00000000 00000000 00000000     ................
	...

200002c4 <__sglue>:
200002c4:	00000000 00000003 2000550c              .........U. 

200002d0 <__global_locale>:
200002d0:	00000043 00000000 00000000 00000000     C...............
	...
200002f0:	00000043 00000000 00000000 00000000     C...............
	...
20000310:	00000043 00000000 00000000 00000000     C...............
	...
20000330:	00000043 00000000 00000000 00000000     C...............
	...
20000350:	00000043 00000000 00000000 00000000     C...............
	...
20000370:	00000043 00000000 00000000 00000000     C...............
	...
20000390:	00000043 00000000 00000000 00000000     C...............
	...
200003b0:	08028ed3 08028539 00000000 0802bc5c     ....9.......\...
200003c0:	0802b97f 0802ba94 0802ba94 0802ba94     ................
200003d0:	0802ba94 0802ba94 0802ba94 0802ba94     ................
200003e0:	0802ba94 0802ba94 ffffffff ffffffff     ................
200003f0:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000418:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

2000043c <_impure_data>:
2000043c:	00000000 2000550c 20005574 200055dc     .....U. tU. .U. 
	...

20000488 <_impure_ptr>:
20000488:	2000043c                                <.. 

2000048c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000048c:	b580      	push	{r7, lr}
2000048e:	b088      	sub	sp, #32
20000490:	af00      	add	r7, sp, #0
20000492:	6078      	str	r0, [r7, #4]
20000494:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000496:	231f      	movs	r3, #31
20000498:	18fb      	adds	r3, r7, r3
2000049a:	2200      	movs	r2, #0
2000049c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200004a2:	683b      	ldr	r3, [r7, #0]
200004a4:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200004a6:	4b1a      	ldr	r3, [pc, #104]	; (20000510 <FLASH_Program_Fast+0x84>)
200004a8:	695a      	ldr	r2, [r3, #20]
200004aa:	4b19      	ldr	r3, [pc, #100]	; (20000510 <FLASH_Program_Fast+0x84>)
200004ac:	2180      	movs	r1, #128	; 0x80
200004ae:	02c9      	lsls	r1, r1, #11
200004b0:	430a      	orrs	r2, r1
200004b2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200004b4:	f3ef 8310 	mrs	r3, PRIMASK
200004b8:	60fb      	str	r3, [r7, #12]
  return(result);
200004ba:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200004bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200004be:	b672      	cpsid	i
}
200004c0:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200004c2:	e00f      	b.n	200004e4 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200004c4:	697a      	ldr	r2, [r7, #20]
200004c6:	69bb      	ldr	r3, [r7, #24]
200004c8:	6812      	ldr	r2, [r2, #0]
200004ca:	601a      	str	r2, [r3, #0]
    src += 4U;
200004cc:	697b      	ldr	r3, [r7, #20]
200004ce:	3304      	adds	r3, #4
200004d0:	617b      	str	r3, [r7, #20]
    dest += 4U;
200004d2:	69bb      	ldr	r3, [r7, #24]
200004d4:	3304      	adds	r3, #4
200004d6:	61bb      	str	r3, [r7, #24]
    index++;
200004d8:	211f      	movs	r1, #31
200004da:	187b      	adds	r3, r7, r1
200004dc:	781a      	ldrb	r2, [r3, #0]
200004de:	187b      	adds	r3, r7, r1
200004e0:	3201      	adds	r2, #1
200004e2:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004e4:	231f      	movs	r3, #31
200004e6:	18fb      	adds	r3, r7, r3
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	2b3f      	cmp	r3, #63	; 0x3f
200004ec:	d9ea      	bls.n	200004c4 <FLASH_Program_Fast+0x38>
  /* wait for BSY1 in order to be sure that flash operation is ended befoire
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
200004ee:	46c0      	nop			; (mov r8, r8)
200004f0:	4b07      	ldr	r3, [pc, #28]	; (20000510 <FLASH_Program_Fast+0x84>)
200004f2:	691a      	ldr	r2, [r3, #16]
200004f4:	23c0      	movs	r3, #192	; 0xc0
200004f6:	029b      	lsls	r3, r3, #10
200004f8:	4013      	ands	r3, r2
200004fa:	d1f9      	bne.n	200004f0 <FLASH_Program_Fast+0x64>
200004fc:	693b      	ldr	r3, [r7, #16]
200004fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000500:	68bb      	ldr	r3, [r7, #8]
20000502:	f383 8810 	msr	PRIMASK, r3
}
20000506:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000508:	46c0      	nop			; (mov r8, r8)
2000050a:	46bd      	mov	sp, r7
2000050c:	b008      	add	sp, #32
2000050e:	bd80      	pop	{r7, pc}
20000510:	40022000 	.word	0x40022000
